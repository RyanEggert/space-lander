
stepper.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	6f de 20    	mov.w     #0xde6, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	c0 4e 24    	mov.w     #0x44ec, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	50 44 02    	call      0x4450 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	60 08 20    	mov.w     #0x86, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	8e 43 04    	goto      0x438e <_drive>
    11e4:	00 00 00 
    11e6:	48 43 04    	goto      0x4348 <_wait>
    11e8:	00 00 00 
    11ea:	20 36 04    	goto      0x3620 <___digitalRead>
    11ec:	00 00 00 
    11ee:	dc 35 04    	goto      0x35dc <___digitalWrite>
    11f0:	00 00 00 
    11f2:	42 36 04    	goto      0x3642 <___analogRead>
    11f4:	00 00 00 
    11f6:	cc 3a 04    	goto      0x3acc <___pwmWrite>
    11f8:	00 00 00 
    11fa:	9e 3a 04    	goto      0x3a9e <___pwmRead>
    11fc:	00 00 00 
    11fe:	36 3b 04    	goto      0x3b36 <___servoWrite>
    1200:	00 00 00 
    1202:	04 3b 04    	goto      0x3b04 <___servoRead>
    1204:	00 00 00 
    1206:	e0 15 04    	goto      0x15e0 <___putc_nobuffer>
    1208:	00 00 00 
    120a:	22 16 04    	goto      0x1622 <___putc_buffer>
    120c:	00 00 00 
    120e:	04 16 04    	goto      0x1604 <___getc_nobuffer>
    1210:	00 00 00 
    1212:	12 17 04    	goto      0x1712 <___getc_buffer>
    1214:	00 00 00 

00001216 <___subsf3>:
    1216:	03 f0 a2    	btg.w     w3, #0xf

00001218 <___addsf3>:
    1218:	88 9f be    	mov.d     w8, [w15++]
    121a:	8a 9f be    	mov.d     w10, [w15++]
    121c:	8c 1f 78    	mov.w     w12, [w15++]
    121e:	f7 00 07    	rcall     0x140e <__funpack2>
    1220:	fe 00 33    	bra       N, 0x141e <__fPropagateNaN>
    1222:	64 50 e1    	cp.w      w10, #0x4
    1224:	4f 00 32    	bra       Z, 0x12c4 <aisinfinite>

00001226 <checkspecialb>:
    1226:	64 20 e1    	cp.w      w4, #0x4
    1228:	52 00 32    	bra       Z, 0x12ce <return2>
    122a:	03 82 6c    	xor.w     w9, w3, w4
    122c:	07 00 3b    	bra       NN, 0x123c <getsign>
    122e:	09 05 d0    	sl.w      w9, w10
    1230:	03 06 d0    	sl.w      w3, w12
    1232:	82 0f 54    	sub.w     w8, w2, [w15]
    1234:	0c 06 5d    	subb.w    w10, w12, w12
    1236:	02 00 39    	bra       NC, 0x123c <getsign>
    1238:	02 00 32    	bra       Z, 0x123e <gotsign>
    123a:	89 01 78    	mov.w     w9, w3

0000123c <getsign>:
    123c:	03 06 78    	mov.w     w3, w12

0000123e <gotsign>:
    123e:	85 82 55    	sub.w     w11, w5, w5
    1240:	04 00 3d    	bra       GE, 0x124a <expcanonical>
    1242:	00 03 fd    	exch      w0, w6
    1244:	81 03 fd    	exch      w1, w7
    1246:	85 02 ea    	neg.w     w5, w5
    1248:	8b 85 42    	add.w     w5, w11, w11

0000124a <expcanonical>:
    124a:	84 0f 72    	ior.w     w4, w4, [w15]
    124c:	02 00 3b    	bra       NN, 0x1252 <nonegate>
    124e:	60 00 10    	subr.w    w0, #0x0, w0
    1250:	e0 80 18    	subbr.w   w1, #0x0, w1

00001252 <nonegate>:
    1252:	60 11 b8    	mul.uu    w2, #0x0, w2
    1254:	00 05 eb    	clr.w     w10
    1256:	7a 28 e1    	cp.w      w5, #0x1a
    1258:	0a 00 39    	bra       NC, 0x126e <aligniter>
    125a:	06 00 78    	mov.w     w6, w0
    125c:	c7 5d dd    	sl.w      w11, #0x7, w11
    125e:	f7 07 b2    	and.w     #0x7f, w7
    1260:	87 80 75    	ior.w     w11, w7, w1
    1262:	2d 00 37    	bra       0x12be <signoff>

00001264 <align>:
    1264:	82 81 71    	ior.w     w3, w2, w3
    1266:	0a 01 78    	mov.w     w10, w2
    1268:	61 05 60    	and.w     w0, #0x1, w10
    126a:	81 80 d1    	asr.w     w1, w1
    126c:	00 80 d3    	rrc.w     w0, w0

0000126e <aligniter>:
    126e:	85 02 e9    	dec.w     w5, w5
    1270:	f9 ff 3b    	bra       NN, 0x1264 <align>

00001272 <aligned>:
    1272:	06 04 40    	add.w     w0, w6, w8
    1274:	87 84 48    	addc.w    w1, w7, w9
    1276:	02 00 3b    	bra       NN, 0x127c <normalizesum>
    1278:	60 04 14    	subr.w    w8, #0x0, w8
    127a:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000127c <normalizesum>:
    127c:	09 88 a3    	btst.z    w9, #0x8
    127e:	07 00 32    	bra       Z, 0x128e <checknormal>
    1280:	8a 81 71    	ior.w     w3, w10, w3
    1282:	82 81 71    	ior.w     w3, w2, w3
    1284:	61 01 64    	and.w     w8, #0x1, w2
    1286:	89 04 d1    	lsr.w     w9, w9
    1288:	08 84 d3    	rrc.w     w8, w8
    128a:	8b 05 e8    	inc.w     w11, w11
    128c:	17 00 37    	bra       0x12bc <round>

0000128e <checknormal>:
    128e:	09 78 a3    	btst.z    w9, #0x7
    1290:	13 00 3a    	bra       NZ, 0x12b8 <discardguard>

00001292 <underflow>:
    1292:	0b 00 e0    	cp0.w     w11
    1294:	13 00 34    	bra       LE, 0x12bc <round>
    1296:	8b 05 e9    	dec.w     w11, w11
    1298:	08 04 44    	add.w     w8, w8, w8
    129a:	89 84 4c    	addc.w    w9, w9, w9
    129c:	0a 44 74    	ior.b     w8, w10, w8
    129e:	09 78 a3    	btst.z    w9, #0x7
    12a0:	0d 00 3a    	bra       NZ, 0x12bc <round>

000012a2 <normalizeloop>:
    12a2:	0b 00 e0    	cp0.w     w11
    12a4:	07 00 34    	bra       LE, 0x12b4 <normalizeexit>
    12a6:	8b 05 e9    	dec.w     w11, w11
    12a8:	08 04 44    	add.w     w8, w8, w8
    12aa:	89 84 4c    	addc.w    w9, w9, w9
    12ac:	01 00 3a    	bra       NZ, 0x12b0 <normalizetest>
    12ae:	0b 00 20    	mov.w     #0x0, w11

000012b0 <normalizetest>:
    12b0:	09 78 a3    	btst.z    w9, #0x7
    12b2:	f7 ff 32    	bra       Z, 0x12a2 <normalizeloop>

000012b4 <normalizeexit>:
    12b4:	00 01 eb    	clr.w     w2
    12b6:	02 00 37    	bra       0x12bc <round>

000012b8 <discardguard>:
    12b8:	82 81 71    	ior.w     w3, w2, w3
    12ba:	0a 01 78    	mov.w     w10, w2

000012bc <round>:
    12bc:	6d 00 07    	rcall     0x1398 <__fpack>

000012be <signoff>:
    12be:	0c f0 a7    	btsc.w    w12, #0xf
    12c0:	01 f0 a0    	bset.w    w1, #0xf
    12c2:	b6 00 37    	bra       0x1430 <__fbopExit>

000012c4 <aisinfinite>:
    12c4:	64 20 e1    	cp.w      w4, #0x4
    12c6:	02 00 3a    	bra       NZ, 0x12cc <return8>
    12c8:	83 8f 6c    	xor.w     w9, w3, [w15]
    12ca:	b6 00 33    	bra       N, 0x1438 <__fbopReturnNaN>

000012cc <return8>:
    12cc:	08 01 be    	mov.d     w8, w2

000012ce <return2>:
    12ce:	02 00 be    	mov.d     w2, w0
    12d0:	af 00 37    	bra       0x1430 <__fbopExit>

000012d2 <___divsf3>:
    12d2:	88 9f be    	mov.d     w8, [w15++]
    12d4:	8a 9f be    	mov.d     w10, [w15++]
    12d6:	8c 1f 78    	mov.w     w12, [w15++]
    12d8:	9a 00 07    	rcall     0x140e <__funpack2>
    12da:	a1 00 33    	bra       N, 0x141e <__fPropagateNaN>
    12dc:	03 86 6c    	xor.w     w9, w3, w12
    12de:	64 50 e1    	cp.w      w10, #0x4
    12e0:	2e 00 32    	bra       Z, 0x133e <aisinfinite>
    12e2:	64 20 e1    	cp.w      w4, #0x4
    12e4:	33 00 32    	bra       Z, 0x134c <returnZero>
    12e6:	61 50 e1    	cp.w      w10, #0x1
    12e8:	2f 00 32    	bra       Z, 0x1348 <aiszero>
    12ea:	61 20 e1    	cp.w      w4, #0x1
    12ec:	31 00 32    	bra       Z, 0x1350 <returnInf>

000012ee <finitenonzero>:
    12ee:	85 85 55    	sub.w     w11, w5, w11
    12f0:	eb 07 b0    	add.w     #0x7e, w11
    12f2:	09 00 20    	mov.w     #0x0, w9
    12f4:	08 04 20    	mov.w     #0x40, w8
    12f6:	05 00 37    	bra       0x1302 <diventry>

000012f8 <divnext>:
    12f8:	08 04 44    	add.w     w8, w8, w8
    12fa:	89 84 4c    	addc.w    w9, w9, w9
    12fc:	0a 00 31    	bra       C, 0x1312 <divdone>

000012fe <divloop>:
    12fe:	06 03 43    	add.w     w6, w6, w6
    1300:	87 83 4b    	addc.w    w7, w7, w7

00001302 <diventry>:
    1302:	00 01 53    	sub.w     w6, w0, w2
    1304:	81 81 5b    	subb.w    w7, w1, w3
    1306:	f8 ff 33    	bra       N, 0x12f8 <divnext>
    1308:	02 03 be    	mov.d     w2, w6
    130a:	08 00 a0    	bset.w    w8, #0x0
    130c:	08 04 44    	add.w     w8, w8, w8
    130e:	89 84 4c    	addc.w    w9, w9, w9
    1310:	f6 ff 39    	bra       NC, 0x12fe <divloop>

00001312 <divdone>:
    1312:	c6 39 dd    	sl.w      w7, #0x6, w3
    1314:	83 01 73    	ior.w     w6, w3, w3
    1316:	01 00 32    	bra       Z, 0x131a <stickyok>
    1318:	13 00 20    	mov.w     #0x1, w3

0000131a <stickyok>:
    131a:	89 04 d1    	lsr.w     w9, w9
    131c:	08 84 d3    	rrc.w     w8, w8
    131e:	09 98 a3    	btst.z    w9, #0x9
    1320:	05 00 32    	bra       Z, 0x132c <guardused>
    1322:	08 00 a7    	btsc.w    w8, #0x0
    1324:	03 00 a0    	bset.w    w3, #0x0
    1326:	89 04 d1    	lsr.w     w9, w9
    1328:	08 84 d3    	rrc.w     w8, w8
    132a:	8b 05 e8    	inc.w     w11, w11

0000132c <guardused>:
    132c:	89 04 d1    	lsr.w     w9, w9
    132e:	08 84 d3    	rrc.w     w8, w8
    1330:	00 01 eb    	clr.w     w2
    1332:	02 81 d2    	rlc.w     w2, w2
    1334:	31 00 07    	rcall     0x1398 <__fpack>

00001336 <return0>:
    1336:	01 f0 a1    	bclr.w    w1, #0xf
    1338:	0c f0 a7    	btsc.w    w12, #0xf
    133a:	01 f0 a0    	bset.w    w1, #0xf
    133c:	79 00 37    	bra       0x1430 <__fbopExit>

0000133e <aisinfinite>:
    133e:	64 20 e1    	cp.w      w4, #0x4
    1340:	7b 00 32    	bra       Z, 0x1438 <__fbopReturnNaN>

00001342 <return8>:
    1342:	08 01 be    	mov.d     w8, w2

00001344 <return2>:
    1344:	02 00 be    	mov.d     w2, w0
    1346:	f7 ff 37    	bra       0x1336 <return0>

00001348 <aiszero>:
    1348:	61 20 e1    	cp.w      w4, #0x1
    134a:	76 00 32    	bra       Z, 0x1438 <__fbopReturnNaN>

0000134c <returnZero>:
    134c:	60 00 b8    	mul.uu    w0, #0x0, w0
    134e:	f3 ff 37    	bra       0x1336 <return0>

00001350 <returnInf>:
    1350:	00 00 20    	mov.w     #0x0, w0
    1352:	01 f8 27    	mov.w     #0x7f80, w1
    1354:	f0 ff 37    	bra       0x1336 <return0>

00001356 <___eqsf2>:
    1356:	14 00 20    	mov.w     #0x1, w4
    1358:	b6 00 37    	bra       0x14c6 <__fcompare>

0000135a <___gesf2>:
    135a:	f4 ff 2f    	mov.w     #0xffff, w4
    135c:	b4 00 37    	bra       0x14c6 <__fcompare>

0000135e <___fixunssfsi>:
    135e:	00 01 be    	mov.d     w0, w2
    1360:	41 00 07    	rcall     0x13e4 <__funpack>
    1362:	04 70 a7    	btsc.w    w4, #0x7
    1364:	03 f0 a1    	bclr.w    w3, #0xf
    1366:	03 f8 a3    	btst.z    w3, #0xf
    1368:	13 00 3a    	bra       NZ, 0x1390 <returnzero>
    136a:	65 09 b1    	sub.w     #0x96, w5
    136c:	10 00 32    	bra       Z, 0x138e <exit>
    136e:	09 00 35    	bra       LT, 0x1382 <shiftright>
    1370:	69 28 e1    	cp.w      w5, #0x9
    1372:	02 00 35    	bra       LT, 0x1378 <shiftleft>
    1374:	01 00 28    	mov.w     #0x8000, w1
    1376:	00 00 05    	retlw.w   #0x0, w0

00001378 <shiftleft>:
    1378:	00 00 40    	add.w     w0, w0, w0
    137a:	81 80 48    	addc.w    w1, w1, w1
    137c:	85 02 e9    	dec.w     w5, w5
    137e:	fc ff 3a    	bra       NZ, 0x1378 <shiftleft>
    1380:	00 00 06    	return    

00001382 <shiftright>:
    1382:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1384:	05 00 35    	bra       LT, 0x1390 <returnzero>

00001386 <shiftrightloop>:
    1386:	81 00 d1    	lsr.w     w1, w1
    1388:	00 80 d3    	rrc.w     w0, w0
    138a:	85 02 e8    	inc.w     w5, w5
    138c:	fc ff 3a    	bra       NZ, 0x1386 <shiftrightloop>

0000138e <exit>:
    138e:	00 00 06    	return    

00001390 <returnzero>:
    1390:	80 00 eb    	clr.w     w1
    1392:	00 00 05    	retlw.w   #0x0, w0

00001394 <___floatunsisf>:
    1394:	60 11 b8    	mul.uu    w2, #0x0, w2
    1396:	b2 00 37    	bra       0x14fc <___floatundisf>

00001398 <__fpack>:
    1398:	81 00 20    	mov.w     #0x8, w1
    139a:	61 80 55    	sub.w     w11, #0x1, w0
    139c:	0b 00 3d    	bra       GE, 0x13b4 <notsubnormal>
    139e:	0b 00 20    	mov.w     #0x0, w11
    13a0:	61 fe 2f    	mov.w     #0xffe6, w1
    13a2:	01 00 e1    	cp.w      w0, w1
    13a4:	1d 00 34    	bra       LE, 0x13e0 <zerosig>

000013a6 <subnormal>:
    13a6:	82 81 71    	ior.w     w3, w2, w3
    13a8:	61 01 64    	and.w     w8, #0x1, w2
    13aa:	89 04 d1    	lsr.w     w9, w9
    13ac:	08 84 d3    	rrc.w     w8, w8
    13ae:	00 00 e8    	inc.w     w0, w0
    13b0:	fa ff 3a    	bra       NZ, 0x13a6 <subnormal>
    13b2:	71 00 20    	mov.w     #0x7, w1

000013b4 <notsubnormal>:
    13b4:	61 00 64    	and.w     w8, #0x1, w0
    13b6:	03 00 70    	ior.w     w0, w3, w0
    13b8:	02 00 60    	and.w     w0, w2, w0
    13ba:	09 00 32    	bra       Z, 0x13ce <packupandgo>
    13bc:	61 04 44    	add.w     w8, #0x1, w8
    13be:	e0 84 4c    	addc.w    w9, #0x0, w9
    13c0:	09 88 a5    	btst.z    w9, w1
    13c2:	05 00 32    	bra       Z, 0x13ce <packupandgo>
    13c4:	8b 05 e8    	inc.w     w11, w11
    13c6:	68 08 e1    	cp.w      w1, #0x8
    13c8:	02 00 3a    	bra       NZ, 0x13ce <packupandgo>
    13ca:	89 04 d1    	lsr.w     w9, w9
    13cc:	08 84 d3    	rrc.w     w8, w8

000013ce <packupandgo>:
    13ce:	f2 0f 20    	mov.w     #0xff, w2
    13d0:	02 58 e1    	cp.w      w11, w2
    13d2:	05 00 3d    	bra       GE, 0x13de <overflow>
    13d4:	c7 5d dd    	sl.w      w11, #0x7, w11
    13d6:	f9 07 b2    	and.w     #0x7f, w9
    13d8:	89 80 75    	ior.w     w11, w9, w1
    13da:	08 00 78    	mov.w     w8, w0
    13dc:	00 00 06    	return    

000013de <overflow>:
    13de:	0b f8 27    	mov.w     #0x7f80, w11

000013e0 <zerosig>:
    13e0:	8b 00 78    	mov.w     w11, w1
    13e2:	00 00 05    	retlw.w   #0x0, w0

000013e4 <__funpack>:
    13e4:	c7 0a de    	lsr.w     w1, #0x7, w5
    13e6:	f1 07 b2    	and.w     #0x7f, w1
    13e8:	f5 0f b2    	and.w     #0xff, w5
    13ea:	08 00 32    	bra       Z, 0x13fc <zeroorsub>
    13ec:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13ee:	02 00 32    	bra       Z, 0x13f4 <nanorinf>

000013f0 <finitereturn>:
    13f0:	01 70 a0    	bset.w    w1, #0x7
    13f2:	24 00 05    	retlw.w   #0x2, w4

000013f4 <nanorinf>:
    13f4:	81 0f 70    	ior.w     w0, w1, [w15]
    13f6:	01 00 32    	bra       Z, 0x13fa <infinite>
    13f8:	04 08 05    	retlw.w   #0x80, w4

000013fa <infinite>:
    13fa:	44 00 05    	retlw.w   #0x4, w4

000013fc <zeroorsub>:
    13fc:	81 0f 70    	ior.w     w0, w1, [w15]
    13fe:	02 00 3a    	bra       NZ, 0x1404 <subnormal>
    1400:	14 00 05    	retlw.w   #0x1, w4

00001402 <normalize>:
    1402:	85 02 e9    	dec.w     w5, w5

00001404 <subnormal>:
    1404:	00 00 40    	add.w     w0, w0, w0
    1406:	81 c0 48    	addc.b    w1, w1, w1
    1408:	fc ff 3b    	bra       NN, 0x1402 <normalize>
    140a:	01 70 a0    	bset.w    w1, #0x7
    140c:	24 00 05    	retlw.w   #0x2, w4

0000140e <__funpack2>:
    140e:	00 04 be    	mov.d     w0, w8
    1410:	e9 ff 07    	rcall     0x13e4 <__funpack>
    1412:	00 03 be    	mov.d     w0, w6
    1414:	04 05 be    	mov.d     w4, w10
    1416:	02 00 be    	mov.d     w2, w0
    1418:	e5 ff 07    	rcall     0x13e4 <__funpack>
    141a:	84 4f 75    	ior.b     w10, w4, [w15]
    141c:	00 00 06    	return    

0000141e <__fPropagateNaN>:
    141e:	02 00 be    	mov.d     w2, w0
    1420:	64 50 e1    	cp.w      w10, #0x4
    1422:	05 00 36    	bra       LEU, 0x142e <return0>
    1424:	64 20 e1    	cp.w      w4, #0x4
    1426:	02 00 36    	bra       LEU, 0x142c <return8>
    1428:	09 68 a3    	btst.z    w9, #0x6
    142a:	01 00 3a    	bra       NZ, 0x142e <return0>

0000142c <return8>:
    142c:	08 00 be    	mov.d     w8, w0

0000142e <return0>:
    142e:	01 60 a0    	bset.w    w1, #0x6

00001430 <__fbopExit>:
    1430:	4f 06 78    	mov.w     [--w15], w12
    1432:	4f 05 be    	mov.d     [--w15], w10
    1434:	4f 04 be    	mov.d     [--w15], w8
    1436:	00 00 06    	return    

00001438 <__fbopReturnNaN>:
    1438:	f0 ff 2f    	mov.w     #0xffff, w0
    143a:	f1 ff 27    	mov.w     #0x7fff, w1
    143c:	f9 ff 37    	bra       0x1430 <__fbopExit>

0000143e <___mulsf3>:
    143e:	88 9f be    	mov.d     w8, [w15++]
    1440:	8a 9f be    	mov.d     w10, [w15++]
    1442:	8c 1f 78    	mov.w     w12, [w15++]
    1444:	e4 ff 07    	rcall     0x140e <__funpack2>
    1446:	eb ff 33    	bra       N, 0x141e <__fPropagateNaN>
    1448:	03 86 6c    	xor.w     w9, w3, w12
    144a:	64 50 e1    	cp.w      w10, #0x4
    144c:	24 00 32    	bra       Z, 0x1496 <aisinfinite>
    144e:	64 20 e1    	cp.w      w4, #0x4
    1450:	27 00 32    	bra       Z, 0x14a0 <bisinfinite>
    1452:	61 50 e1    	cp.w      w10, #0x1
    1454:	22 00 32    	bra       Z, 0x149a <return8>
    1456:	61 20 e1    	cp.w      w4, #0x1
    1458:	21 00 32    	bra       Z, 0x149c <return2>
    145a:	8b 85 42    	add.w     w5, w11, w11
    145c:	eb 07 b1    	sub.w     #0x7e, w11
    145e:	01 34 b8    	mul.uu    w6, w1, w8
    1460:	00 3a b8    	mul.uu    w7, w0, w4
    1462:	08 04 42    	add.w     w4, w8, w8
    1464:	89 84 4a    	addc.w    w5, w9, w9
    1466:	01 3a b8    	mul.uu    w7, w1, w4
    1468:	00 30 b8    	mul.uu    w6, w0, w0
    146a:	88 80 40    	add.w     w1, w8, w1
    146c:	09 01 4a    	addc.w    w4, w9, w2
    146e:	04 00 33    	bra       N, 0x1478 <formsticky>
    1470:	00 00 40    	add.w     w0, w0, w0
    1472:	81 80 48    	addc.w    w1, w1, w1
    1474:	02 01 49    	addc.w    w2, w2, w2
    1476:	8b 05 e9    	dec.w     w11, w11

00001478 <formsticky>:
    1478:	c9 09 dd    	sl.w      w1, #0x9, w3
    147a:	83 01 70    	ior.w     w0, w3, w3
    147c:	01 00 32    	bra       Z, 0x1480 <formRandSig>
    147e:	13 00 20    	mov.w     #0x1, w3

00001480 <formRandSig>:
    1480:	c8 14 de    	lsr.w     w2, #0x8, w9
    1482:	48 14 dd    	sl.w      w2, #0x8, w8
    1484:	47 09 de    	lsr.w     w1, #0x7, w2
    1486:	12 00 b2    	and.w     #0x1, w2
    1488:	c8 08 de    	lsr.w     w1, #0x8, w1
    148a:	08 84 70    	ior.w     w1, w8, w8
    148c:	85 ff 07    	rcall     0x1398 <__fpack>

0000148e <return0>:
    148e:	01 f0 a1    	bclr.w    w1, #0xf
    1490:	0c f0 a7    	btsc.w    w12, #0xf
    1492:	01 f0 a0    	bset.w    w1, #0xf
    1494:	cd ff 37    	bra       0x1430 <__fbopExit>

00001496 <aisinfinite>:
    1496:	61 20 e1    	cp.w      w4, #0x1
    1498:	cf ff 32    	bra       Z, 0x1438 <__fbopReturnNaN>

0000149a <return8>:
    149a:	08 01 be    	mov.d     w8, w2

0000149c <return2>:
    149c:	02 00 be    	mov.d     w2, w0
    149e:	f7 ff 37    	bra       0x148e <return0>

000014a0 <bisinfinite>:
    14a0:	61 50 e1    	cp.w      w10, #0x1
    14a2:	fc ff 3a    	bra       NZ, 0x149c <return2>
    14a4:	c9 ff 37    	bra       0x1438 <__fbopReturnNaN>

000014a6 <___udivsi3>:
    14a6:	60 22 b8    	mul.uu    w4, #0x0, w4
    14a8:	06 02 20    	mov.w     #0x20, w6

000014aa <nextbit>:
    14aa:	00 00 d0    	sl.w      w0, w0
    14ac:	81 80 d2    	rlc.w     w1, w1
    14ae:	04 82 d2    	rlc.w     w4, w4
    14b0:	85 82 d2    	rlc.w     w5, w5
    14b2:	00 00 a0    	bset.w    w0, #0x0
    14b4:	02 02 52    	sub.w     w4, w2, w4
    14b6:	83 82 5a    	subb.w    w5, w3, w5
    14b8:	03 00 31    	bra       C, 0x14c0 <iterate>
    14ba:	02 02 42    	add.w     w4, w2, w4
    14bc:	83 82 4a    	addc.w    w5, w3, w5
    14be:	00 00 a1    	bclr.w    w0, #0x0

000014c0 <iterate>:
    14c0:	06 03 e9    	dec.w     w6, w6
    14c2:	f3 ff 3a    	bra       NZ, 0x14aa <nextbit>
    14c4:	00 00 06    	return    

000014c6 <__fcompare>:
    14c6:	88 9f be    	mov.d     w8, [w15++]
    14c8:	8a 9f be    	mov.d     w10, [w15++]
    14ca:	84 1f 78    	mov.w     w4, [w15++]
    14cc:	a0 ff 07    	rcall     0x140e <__funpack2>
    14ce:	4f 00 78    	mov.w     [--w15], w0
    14d0:	11 00 33    	bra       N, 0x14f4 <exit>
    14d2:	f0 ff 2f    	mov.w     #0xffff, w0
    14d4:	83 8f 6c    	xor.w     w9, w3, [w15]
    14d6:	06 00 3b    	bra       NN, 0x14e4 <comparemag>
    14d8:	04 05 65    	and.w     w10, w4, w10
    14da:	0a 00 a7    	btsc.w    w10, #0x0
    14dc:	08 00 37    	bra       0x14ee <returnEqual>
    14de:	09 f0 a6    	btss.w    w9, #0xf
    14e0:	10 00 20    	mov.w     #0x1, w0
    14e2:	08 00 37    	bra       0x14f4 <exit>

000014e4 <comparemag>:
    14e4:	82 0f 54    	sub.w     w8, w2, [w15]
    14e6:	83 8f 5c    	subb.w    w9, w3, [w15]
    14e8:	03 00 39    	bra       NC, 0x14f0 <adjust>
    14ea:	10 00 20    	mov.w     #0x1, w0
    14ec:	01 00 3e    	bra       GTU, 0x14f0 <adjust>

000014ee <returnEqual>:
    14ee:	00 00 20    	mov.w     #0x0, w0

000014f0 <adjust>:
    14f0:	09 f0 a7    	btsc.w    w9, #0xf
    14f2:	00 00 ea    	neg.w     w0, w0

000014f4 <exit>:
    14f4:	4f 05 be    	mov.d     [--w15], w10
    14f6:	4f 04 be    	mov.d     [--w15], w8
    14f8:	00 00 e0    	cp0.w     w0
    14fa:	00 00 06    	return    

000014fc <___floatundisf>:
    14fc:	88 9f be    	mov.d     w8, [w15++]
    14fe:	8a 9f be    	mov.d     w10, [w15++]
    1500:	00 82 70    	ior.w     w1, w0, w4
    1502:	04 02 71    	ior.w     w2, w4, w4
    1504:	04 82 71    	ior.w     w3, w4, w4
    1506:	26 00 32    	bra       Z, 0x1554 <return0>
    1508:	00 04 be    	mov.d     w0, w8
    150a:	02 00 be    	mov.d     w2, w0
    150c:	60 11 b8    	mul.uu    w2, #0x0, w2
    150e:	6b 09 20    	mov.w     #0x96, w11
    1510:	95 02 20    	mov.w     #0x29, w5
    1512:	01 82 cf    	ff1l      w1, w4
    1514:	0a 00 39    	bra       NC, 0x152a <fixshift>
    1516:	05 41 b1    	sub.b     #0x10, w5
    1518:	00 82 cf    	ff1l      w0, w4
    151a:	07 00 39    	bra       NC, 0x152a <fixshift>
    151c:	05 41 b1    	sub.b     #0x10, w5
    151e:	09 82 cf    	ff1l      w9, w4
    1520:	04 00 39    	bra       NC, 0x152a <fixshift>
    1522:	05 41 b1    	sub.b     #0x10, w5
    1524:	08 82 cf    	ff1l      w8, w4
    1526:	01 00 39    	bra       NC, 0x152a <fixshift>
    1528:	05 41 b1    	sub.b     #0x10, w5

0000152a <fixshift>:
    152a:	05 42 52    	sub.b     w4, w5, w4
    152c:	12 00 32    	bra       Z, 0x1552 <round>
    152e:	0a 00 3b    	bra       NN, 0x1544 <shiftleft>

00001530 <shiftright>:
    1530:	82 81 71    	ior.w     w3, w2, w3
    1532:	61 01 64    	and.w     w8, #0x1, w2
    1534:	81 00 d1    	lsr.w     w1, w1
    1536:	00 80 d3    	rrc.w     w0, w0
    1538:	89 84 d3    	rrc.w     w9, w9
    153a:	08 84 d3    	rrc.w     w8, w8
    153c:	8b 05 e8    	inc.w     w11, w11
    153e:	04 42 e8    	inc.b     w4, w4
    1540:	f7 ff 3a    	bra       NZ, 0x1530 <shiftright>
    1542:	07 00 37    	bra       0x1552 <round>

00001544 <shiftleft>:
    1544:	08 04 44    	add.w     w8, w8, w8
    1546:	89 84 4c    	addc.w    w9, w9, w9
    1548:	00 00 48    	addc.w    w0, w0, w0
    154a:	81 80 48    	addc.w    w1, w1, w1
    154c:	8b 05 e9    	dec.w     w11, w11
    154e:	04 42 e9    	dec.b     w4, w4
    1550:	f9 ff 3a    	bra       NZ, 0x1544 <shiftleft>

00001552 <round>:
    1552:	22 ff 07    	rcall     0x1398 <__fpack>

00001554 <return0>:
    1554:	4f 05 be    	mov.d     [--w15], w10
    1556:	4f 04 be    	mov.d     [--w15], w8
    1558:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	5a 2c 04    	goto      0x2c5a <__T1Interrupt>
    1026:	00 00 00 
    1028:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	88 2c 04    	goto      0x2c88 <__T2Interrupt>
    1032:	00 00 00 
    1034:	b6 2c 04    	goto      0x2cb6 <__T3Interrupt>
    1036:	00 00 00 
    1038:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	f6 17 04    	goto      0x17f6 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	c8 17 04    	goto      0x17c8 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	e4 2c 04    	goto      0x2ce4 <__T4Interrupt>
    1072:	00 00 00 
    1074:	12 2d 04    	goto      0x2d12 <__T5Interrupt>
    1076:	00 00 00 
    1078:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	52 18 04    	goto      0x1852 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	24 18 04    	goto      0x1824 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	ae 18 04    	goto      0x18ae <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	80 18 04    	goto      0x1880 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	0a 19 04    	goto      0x190a <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	dc 18 04    	goto      0x18dc <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	78 45 04    	goto      0x4578 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000955a <_Device>:
    955a:	12 01       	.word 0x112
    955c:	00 02       	.word 0x200
    955e:	00 00       	.word 0
    9560:	00 40       	.word 0x4000
    9562:	66 66       	.word 0x6666
    9564:	03 00       	.word 0x3
    9566:	00 00       	.word 0
    9568:	01 02       	.word 0x201
    956a:	00 01       	.word 0x100

0000956c <_Configuration1>:
    956c:	09 02       	.word 0x209
    956e:	12 00       	.word 0x12
    9570:	01 01       	.word 0x101
    9572:	00 a0       	.word 0xa000
    9574:	32 09       	.word 0x932
    9576:	04 00       	.word 0x4
    9578:	00 00       	.word 0
    957a:	ff 00       	.word 0xff
    957c:	ff 00       	.word 0xff

0000957e <_String0>:
    957e:	04 03       	.word 0x304
    9580:	09 04       	.word 0x409

00009582 <_String1>:
    9582:	1a 03       	.word 0x31a
    9584:	4f 00       	.word 0x4f
    9586:	6c 00       	.word 0x6c
    9588:	69 00       	.word 0x69
    958a:	6e 00       	.word 0x6e
    958c:	20 00       	.word 0x20
    958e:	43 00       	.word 0x43
    9590:	6f 00       	.word 0x6f
    9592:	6c 00       	.word 0x6c
    9594:	6c 00       	.word 0x6c
    9596:	65 00       	.word 0x65
    9598:	67 00       	.word 0x67
    959a:	65 00       	.word 0x65

0000959c <_String2>:
    959c:	44 03       	.word 0x344
    959e:	45 00       	.word 0x45
    95a0:	6c 00       	.word 0x6c
    95a2:	65 00       	.word 0x65
    95a4:	63 00       	.word 0x63
    95a6:	61 00       	.word 0x61
    95a8:	6e 00       	.word 0x6e
    95aa:	69 00       	.word 0x69
    95ac:	73 00       	.word 0x73
    95ae:	6d 00       	.word 0x6d
    95b0:	73 00       	.word 0x73
    95b2:	20 00       	.word 0x20
    95b4:	4d 00       	.word 0x4d
    95b6:	69 00       	.word 0x69
    95b8:	6e 00       	.word 0x6e
    95ba:	69 00       	.word 0x69
    95bc:	70 00       	.word 0x70
    95be:	72 00       	.word 0x72
    95c0:	6f 00       	.word 0x6f
    95c2:	6a 00       	.word 0x6a
    95c4:	65 00       	.word 0x65
    95c6:	63 00       	.word 0x63
    95c8:	74 00       	.word 0x74
    95ca:	20 00       	.word 0x20
    95cc:	32 00       	.word 0x32
    95ce:	20 00       	.word 0x20
    95d0:	46 00       	.word 0x46
    95d2:	69 00       	.word 0x69
    95d4:	72 00       	.word 0x72
    95d6:	6d 00       	.word 0x6d
    95d8:	77 00       	.word 0x77
    95da:	61 00       	.word 0x61
    95dc:	72 00       	.word 0x72
    95de:	65 00       	.word 0x65
Disassembly of section .text:

000015e0 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    15e0:	04 00 fa    	lnk       #0x4
    15e2:	00 0f 78    	mov.w     w0, [w14]
    15e4:	21 47 98    	mov.b     w1, [w14+2]

000015e6 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    15e6:	00 00 00    	nop       

000015e8 <.L2>:
    15e8:	1e 00 78    	mov.w     [w14], w0
    15ea:	10 00 90    	mov.w     [w0+2], w0
    15ec:	90 00 78    	mov.w     [w0], w1
    15ee:	00 20 20    	mov.w     #0x200, w0
    15f0:	00 80 60    	and.w     w1, w0, w0
    15f2:	00 00 e0    	cp0.w     w0
    15f4:	f9 ff 3a    	bra       NZ, 0x15e8 <.L2>

000015f6 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    15f6:	1e 00 78    	mov.w     [w14], w0
    15f8:	20 00 90    	mov.w     [w0+4], w0
    15fa:	ae 40 90    	mov.b     [w14+2], w1
    15fc:	81 80 fb    	ze        w1, w1
    15fe:	01 08 78    	mov.w     w1, [w0]

00001600 <.LSM3>:
}
    1600:	00 80 fa    	ulnk      
    1602:	00 00 06    	return    

00001604 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1604:	02 00 fa    	lnk       #0x2
    1606:	00 0f 78    	mov.w     w0, [w14]

00001608 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    1608:	00 00 00    	nop       

0000160a <.L4>:
    160a:	1e 00 78    	mov.w     [w14], w0
    160c:	10 00 90    	mov.w     [w0+2], w0
    160e:	10 00 78    	mov.w     [w0], w0
    1610:	61 00 60    	and.w     w0, #0x1, w0
    1612:	00 00 e0    	cp0.w     w0
    1614:	fa ff 32    	bra       Z, 0x160a <.L4>

00001616 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    1616:	1e 00 78    	mov.w     [w14], w0
    1618:	30 00 90    	mov.w     [w0+6], w0
    161a:	10 00 78    	mov.w     [w0], w0
    161c:	00 40 78    	mov.b     w0, w0

0000161e <.LSM7>:
}
    161e:	00 80 fa    	ulnk      
    1620:	00 00 06    	return    

00001622 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    1622:	04 00 fa    	lnk       #0x4
    1624:	00 0f 78    	mov.w     w0, [w14]
    1626:	21 47 98    	mov.b     w1, [w14+2]

00001628 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    1628:	00 00 00    	nop       

0000162a <.L6>:
    162a:	1e 00 78    	mov.w     [w14], w0
    162c:	d0 10 90    	mov.w     [w0+42], w1
    162e:	1e 00 78    	mov.w     [w14], w0
    1630:	20 10 90    	mov.w     [w0+36], w0
    1632:	80 8f 50    	sub.w     w1, w0, [w15]
    1634:	fa ff 32    	bra       Z, 0x162a <.L6>

00001636 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    1636:	1e 00 78    	mov.w     [w14], w0
    1638:	90 10 90    	mov.w     [w0+34], w1
    163a:	1e 00 78    	mov.w     [w14], w0
    163c:	40 10 90    	mov.w     [w0+40], w0
    163e:	00 80 40    	add.w     w1, w0, w0
    1640:	ae 40 90    	mov.b     [w14+2], w1
    1642:	01 48 78    	mov.b     w1, [w0]

00001644 <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    1644:	1e 00 78    	mov.w     [w14], w0
    1646:	40 10 90    	mov.w     [w0+40], w0
    1648:	80 00 e8    	inc.w     w0, w1
    164a:	1e 00 78    	mov.w     [w14], w0
    164c:	20 10 90    	mov.w     [w0+36], w0
    164e:	00 01 78    	mov.w     w0, w2
    1650:	11 00 09    	repeat    #0x11
    1652:	82 80 d8    	div.uw    w1, w2
    1654:	80 00 fd    	exch      w0, w1
    1656:	80 00 78    	mov.w     w0, w1
    1658:	1e 00 78    	mov.w     [w14], w0
    165a:	41 10 98    	mov.w     w1, [w0+40]

0000165c <.LSM12>:
    self->TXbuffer.count++;
    165c:	1e 00 78    	mov.w     [w14], w0
    165e:	50 10 90    	mov.w     [w0+42], w0
    1660:	80 00 e8    	inc.w     w0, w1
    1662:	1e 00 78    	mov.w     [w14], w0
    1664:	51 10 98    	mov.w     w1, [w0+42]

00001666 <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    1666:	1e 00 78    	mov.w     [w14], w0
    1668:	d0 10 90    	mov.w     [w0+42], w1
    166a:	1e 00 78    	mov.w     [w14], w0
    166c:	30 18 90    	mov.w     [w0+54], w0
    166e:	80 8f 50    	sub.w     w1, w0, [w15]
    1670:	08 00 39    	bra       NC, 0x1682 <.L5>

00001672 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    1672:	1e 00 78    	mov.w     [w14], w0
    1674:	10 00 90    	mov.w     [w0+2], w0
    1676:	9e 00 78    	mov.w     [w14], w1
    1678:	91 00 90    	mov.w     [w1+2], w1
    167a:	11 01 78    	mov.w     [w1], w2
    167c:	01 40 20    	mov.w     #0x400, w1
    167e:	82 80 70    	ior.w     w1, w2, w1
    1680:	01 08 78    	mov.w     w1, [w0]

00001682 <.L5>:
                                                    // transmission
}
    1682:	00 80 fa    	ulnk      
    1684:	00 00 06    	return    

00001686 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    1686:	04 00 fa    	lnk       #0x4
    1688:	10 07 98    	mov.w     w0, [w14+2]

0000168a <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    168a:	1e 00 90    	mov.w     [w14+2], w0
    168c:	50 00 90    	mov.w     [w0+10], w0
    168e:	9e 00 90    	mov.w     [w14+2], w1
    1690:	d1 00 90    	mov.w     [w1+10], w1
    1692:	11 01 78    	mov.w     [w1], w2
    1694:	9e 00 90    	mov.w     [w14+2], w1
    1696:	e1 48 90    	mov.b     [w1+14], w1
    1698:	81 80 fb    	ze        w1, w1
    169a:	13 00 20    	mov.w     #0x1, w3
    169c:	81 18 dd    	sl.w      w3, w1, w1
    169e:	81 80 ea    	com.w     w1, w1
    16a0:	81 00 61    	and.w     w2, w1, w1
    16a2:	01 08 78    	mov.w     w1, [w0]

000016a4 <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    16a4:	1e 00 90    	mov.w     [w14+2], w0
    16a6:	50 10 90    	mov.w     [w0+42], w0
    16a8:	00 00 e0    	cp0.w     w0
    16aa:	25 00 3a    	bra       NZ, 0x16f6 <.L13>

000016ac <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    16ac:	1e 00 90    	mov.w     [w14+2], w0
    16ae:	10 00 90    	mov.w     [w0+2], w0
    16b0:	9e 00 90    	mov.w     [w14+2], w1
    16b2:	91 00 90    	mov.w     [w1+2], w1
    16b4:	11 01 78    	mov.w     [w1], w2
    16b6:	f1 bf 2f    	mov.w     #0xfbff, w1
    16b8:	81 00 61    	and.w     w2, w1, w1
    16ba:	01 08 78    	mov.w     w1, [w0]

000016bc <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    16bc:	1d 00 37    	bra       0x16f8 <.L10>

000016be <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    16be:	1e 00 90    	mov.w     [w14+2], w0
    16c0:	90 10 90    	mov.w     [w0+34], w1
    16c2:	1e 00 90    	mov.w     [w14+2], w0
    16c4:	30 10 90    	mov.w     [w0+38], w0
    16c6:	00 80 40    	add.w     w1, w0, w0
    16c8:	10 4f 78    	mov.b     [w0], [w14]

000016ca <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    16ca:	1e 00 90    	mov.w     [w14+2], w0
    16cc:	30 10 90    	mov.w     [w0+38], w0
    16ce:	80 00 e8    	inc.w     w0, w1
    16d0:	1e 00 90    	mov.w     [w14+2], w0
    16d2:	20 10 90    	mov.w     [w0+36], w0
    16d4:	00 01 78    	mov.w     w0, w2
    16d6:	11 00 09    	repeat    #0x11
    16d8:	82 80 d8    	div.uw    w1, w2
    16da:	80 00 fd    	exch      w0, w1
    16dc:	80 00 78    	mov.w     w0, w1
    16de:	1e 00 90    	mov.w     [w14+2], w0
    16e0:	31 10 98    	mov.w     w1, [w0+38]

000016e2 <.LSM23>:
        self->TXbuffer.count--;
    16e2:	1e 00 90    	mov.w     [w14+2], w0
    16e4:	50 10 90    	mov.w     [w0+42], w0
    16e6:	80 00 e9    	dec.w     w0, w1
    16e8:	1e 00 90    	mov.w     [w14+2], w0
    16ea:	51 10 98    	mov.w     w1, [w0+42]

000016ec <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    16ec:	1e 00 90    	mov.w     [w14+2], w0
    16ee:	20 00 90    	mov.w     [w0+4], w0
    16f0:	9e 80 fb    	ze        [w14], w1
    16f2:	01 08 78    	mov.w     w1, [w0]
    16f4:	01 00 37    	bra       0x16f8 <.L10>

000016f6 <.L13>:
    16f6:	00 00 00    	nop       

000016f8 <.L10>:
    16f8:	1e 00 90    	mov.w     [w14+2], w0
    16fa:	10 00 90    	mov.w     [w0+2], w0
    16fc:	90 00 78    	mov.w     [w0], w1
    16fe:	00 20 20    	mov.w     #0x200, w0
    1700:	00 80 60    	and.w     w1, w0, w0
    1702:	00 00 e0    	cp0.w     w0
    1704:	04 00 3a    	bra       NZ, 0x170e <.L8>
    1706:	1e 00 90    	mov.w     [w14+2], w0
    1708:	50 10 90    	mov.w     [w0+42], w0
    170a:	00 00 e0    	cp0.w     w0
    170c:	d8 ff 3a    	bra       NZ, 0x16be <.L12>

0000170e <.L8>:
    }
}
    170e:	00 80 fa    	ulnk      
    1710:	00 00 06    	return    

00001712 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1712:	04 00 fa    	lnk       #0x4
    1714:	10 07 98    	mov.w     w0, [w14+2]

00001716 <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    1716:	00 00 00    	nop       

00001718 <.L15>:
    1718:	1e 00 90    	mov.w     [w14+2], w0
    171a:	20 18 90    	mov.w     [w0+52], w0
    171c:	00 00 e0    	cp0.w     w0
    171e:	fc ff 32    	bra       Z, 0x1718 <.L15>

00001720 <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    1720:	1e 00 90    	mov.w     [w14+2], w0
    1722:	e0 10 90    	mov.w     [w0+44], w1
    1724:	1e 00 90    	mov.w     [w14+2], w0
    1726:	00 18 90    	mov.w     [w0+48], w0
    1728:	00 80 40    	add.w     w1, w0, w0
    172a:	10 4f 78    	mov.b     [w0], [w14]

0000172c <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    172c:	1e 00 90    	mov.w     [w14+2], w0
    172e:	00 18 90    	mov.w     [w0+48], w0
    1730:	80 00 e8    	inc.w     w0, w1
    1732:	1e 00 90    	mov.w     [w14+2], w0
    1734:	70 10 90    	mov.w     [w0+46], w0
    1736:	00 01 78    	mov.w     w0, w2
    1738:	11 00 09    	repeat    #0x11
    173a:	82 80 d8    	div.uw    w1, w2
    173c:	80 00 fd    	exch      w0, w1
    173e:	80 00 78    	mov.w     w0, w1
    1740:	1e 00 90    	mov.w     [w14+2], w0
    1742:	01 18 98    	mov.w     w1, [w0+48]

00001744 <.LSM31>:
    self->RXbuffer.count--;
    1744:	1e 00 90    	mov.w     [w14+2], w0
    1746:	20 18 90    	mov.w     [w0+52], w0
    1748:	80 00 e9    	dec.w     w0, w1
    174a:	1e 00 90    	mov.w     [w14+2], w0
    174c:	21 18 98    	mov.w     w1, [w0+52]

0000174e <.LSM32>:
    return ch;
    174e:	1e 40 78    	mov.b     [w14], w0

00001750 <.LSM33>:
}
    1750:	00 80 fa    	ulnk      
    1752:	00 00 06    	return    

00001754 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    1754:	02 00 fa    	lnk       #0x2
    1756:	00 0f 78    	mov.w     w0, [w14]

00001758 <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1758:	1e 00 78    	mov.w     [w14], w0
    175a:	50 00 90    	mov.w     [w0+10], w0
    175c:	9e 00 78    	mov.w     [w14], w1
    175e:	d1 00 90    	mov.w     [w1+10], w1
    1760:	11 01 78    	mov.w     [w1], w2
    1762:	9e 00 78    	mov.w     [w14], w1
    1764:	f1 48 90    	mov.b     [w1+15], w1
    1766:	81 80 fb    	ze        w1, w1
    1768:	13 00 20    	mov.w     #0x1, w3
    176a:	81 18 dd    	sl.w      w3, w1, w1
    176c:	81 80 ea    	com.w     w1, w1
    176e:	81 00 61    	and.w     w2, w1, w1
    1770:	01 08 78    	mov.w     w1, [w0]

00001772 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    1772:	1b 00 37    	bra       0x17aa <.L17>

00001774 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    1774:	1e 00 78    	mov.w     [w14], w0
    1776:	e0 10 90    	mov.w     [w0+44], w1
    1778:	1e 00 78    	mov.w     [w14], w0
    177a:	10 18 90    	mov.w     [w0+50], w0
    177c:	00 80 40    	add.w     w1, w0, w0
    177e:	9e 00 78    	mov.w     [w14], w1
    1780:	b1 00 90    	mov.w     [w1+6], w1
    1782:	91 00 78    	mov.w     [w1], w1
    1784:	81 40 78    	mov.b     w1, w1
    1786:	01 48 78    	mov.b     w1, [w0]

00001788 <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    1788:	1e 00 78    	mov.w     [w14], w0
    178a:	10 18 90    	mov.w     [w0+50], w0
    178c:	80 00 e8    	inc.w     w0, w1
    178e:	1e 00 78    	mov.w     [w14], w0
    1790:	70 10 90    	mov.w     [w0+46], w0
    1792:	00 01 78    	mov.w     w0, w2
    1794:	11 00 09    	repeat    #0x11
    1796:	82 80 d8    	div.uw    w1, w2
    1798:	80 00 fd    	exch      w0, w1
    179a:	80 00 78    	mov.w     w0, w1
    179c:	1e 00 78    	mov.w     [w14], w0
    179e:	11 18 98    	mov.w     w1, [w0+50]

000017a0 <.LSM39>:
        self->RXbuffer.count++;
    17a0:	1e 00 78    	mov.w     [w14], w0
    17a2:	20 18 90    	mov.w     [w0+52], w0
    17a4:	80 00 e8    	inc.w     w0, w1
    17a6:	1e 00 78    	mov.w     [w14], w0
    17a8:	21 18 98    	mov.w     w1, [w0+52]

000017aa <.L17>:
    17aa:	1e 00 78    	mov.w     [w14], w0
    17ac:	10 00 90    	mov.w     [w0+2], w0
    17ae:	10 00 78    	mov.w     [w0], w0
    17b0:	61 00 60    	and.w     w0, #0x1, w0
    17b2:	00 40 78    	mov.b     w0, w0
    17b4:	00 04 e0    	cp0.b     w0
    17b6:	06 00 32    	bra       Z, 0x17c4 <.L16>

000017b8 <.LSM41>:
    17b8:	1e 00 78    	mov.w     [w14], w0
    17ba:	a0 18 90    	mov.w     [w0+52], w1
    17bc:	1e 00 78    	mov.w     [w14], w0
    17be:	70 10 90    	mov.w     [w0+46], w0

000017c0 <.LSM42>:
    17c0:	80 8f 50    	sub.w     w1, w0, [w15]
    17c2:	d8 ff 3a    	bra       NZ, 0x1774 <.L19>

000017c4 <.L16>:
    }
}
    17c4:	00 80 fa    	ulnk      
    17c6:	00 00 06    	return    

000017c8 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    17c8:	36 00 f8    	push      0x36
    17ca:	80 9f be    	mov.d     w0, [w15++]
    17cc:	82 9f be    	mov.d     w2, [w15++]
    17ce:	84 9f be    	mov.d     w4, [w15++]
    17d0:	86 9f be    	mov.d     w6, [w15++]
    17d2:	32 00 f8    	push      0x32
    17d4:	34 00 f8    	push      0x34
    17d6:	10 00 20    	mov.w     #0x1, w0
    17d8:	a0 01 88    	mov.w     w0, 0x34
    17da:	00 20 20    	mov.w     #0x200, w0
    17dc:	90 01 88    	mov.w     w0, 0x32
    17de:	00 00 fa    	lnk       #0x0

000017e0 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    17e0:	60 a2 20    	mov.w     #0xa26, w0
    17e2:	51 ff 07    	rcall     0x1686 <___serviceTxInterrupt>

000017e4 <.LSM46>:
}
    17e4:	00 80 fa    	ulnk      
    17e6:	34 00 f9    	pop       0x34
    17e8:	32 00 f9    	pop       0x32
    17ea:	4f 03 be    	mov.d     [--w15], w6
    17ec:	4f 02 be    	mov.d     [--w15], w4
    17ee:	4f 01 be    	mov.d     [--w15], w2
    17f0:	4f 00 be    	mov.d     [--w15], w0
    17f2:	36 00 f9    	pop       0x36
    17f4:	00 40 06    	retfie    

000017f6 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    17f6:	36 00 f8    	push      0x36
    17f8:	80 9f be    	mov.d     w0, [w15++]
    17fa:	82 9f be    	mov.d     w2, [w15++]
    17fc:	84 9f be    	mov.d     w4, [w15++]
    17fe:	86 9f be    	mov.d     w6, [w15++]
    1800:	32 00 f8    	push      0x32
    1802:	34 00 f8    	push      0x34
    1804:	10 00 20    	mov.w     #0x1, w0
    1806:	a0 01 88    	mov.w     w0, 0x34
    1808:	00 20 20    	mov.w     #0x200, w0
    180a:	90 01 88    	mov.w     w0, 0x32
    180c:	00 00 fa    	lnk       #0x0

0000180e <.LSM48>:
    __serviceRxInterrupt(&uart1);
    180e:	60 a2 20    	mov.w     #0xa26, w0
    1810:	a1 ff 07    	rcall     0x1754 <___serviceRxInterrupt>

00001812 <.LSM49>:
}
    1812:	00 80 fa    	ulnk      
    1814:	34 00 f9    	pop       0x34
    1816:	32 00 f9    	pop       0x32
    1818:	4f 03 be    	mov.d     [--w15], w6
    181a:	4f 02 be    	mov.d     [--w15], w4
    181c:	4f 01 be    	mov.d     [--w15], w2
    181e:	4f 00 be    	mov.d     [--w15], w0
    1820:	36 00 f9    	pop       0x36
    1822:	00 40 06    	retfie    

00001824 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    1824:	36 00 f8    	push      0x36
    1826:	80 9f be    	mov.d     w0, [w15++]
    1828:	82 9f be    	mov.d     w2, [w15++]
    182a:	84 9f be    	mov.d     w4, [w15++]
    182c:	86 9f be    	mov.d     w6, [w15++]
    182e:	32 00 f8    	push      0x32
    1830:	34 00 f8    	push      0x34
    1832:	10 00 20    	mov.w     #0x1, w0
    1834:	a0 01 88    	mov.w     w0, 0x34
    1836:	00 20 20    	mov.w     #0x200, w0
    1838:	90 01 88    	mov.w     w0, 0x32
    183a:	00 00 fa    	lnk       #0x0

0000183c <.LSM51>:
    __serviceTxInterrupt(&uart2);
    183c:	20 a6 20    	mov.w     #0xa62, w0
    183e:	23 ff 07    	rcall     0x1686 <___serviceTxInterrupt>

00001840 <.LSM52>:
}
    1840:	00 80 fa    	ulnk      
    1842:	34 00 f9    	pop       0x34
    1844:	32 00 f9    	pop       0x32
    1846:	4f 03 be    	mov.d     [--w15], w6
    1848:	4f 02 be    	mov.d     [--w15], w4
    184a:	4f 01 be    	mov.d     [--w15], w2
    184c:	4f 00 be    	mov.d     [--w15], w0
    184e:	36 00 f9    	pop       0x36
    1850:	00 40 06    	retfie    

00001852 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    1852:	36 00 f8    	push      0x36
    1854:	80 9f be    	mov.d     w0, [w15++]
    1856:	82 9f be    	mov.d     w2, [w15++]
    1858:	84 9f be    	mov.d     w4, [w15++]
    185a:	86 9f be    	mov.d     w6, [w15++]
    185c:	32 00 f8    	push      0x32
    185e:	34 00 f8    	push      0x34
    1860:	10 00 20    	mov.w     #0x1, w0
    1862:	a0 01 88    	mov.w     w0, 0x34
    1864:	00 20 20    	mov.w     #0x200, w0
    1866:	90 01 88    	mov.w     w0, 0x32
    1868:	00 00 fa    	lnk       #0x0

0000186a <.LSM54>:
    __serviceRxInterrupt(&uart2);
    186a:	20 a6 20    	mov.w     #0xa62, w0
    186c:	73 ff 07    	rcall     0x1754 <___serviceRxInterrupt>

0000186e <.LSM55>:
}
    186e:	00 80 fa    	ulnk      
    1870:	34 00 f9    	pop       0x34
    1872:	32 00 f9    	pop       0x32
    1874:	4f 03 be    	mov.d     [--w15], w6
    1876:	4f 02 be    	mov.d     [--w15], w4
    1878:	4f 01 be    	mov.d     [--w15], w2
    187a:	4f 00 be    	mov.d     [--w15], w0
    187c:	36 00 f9    	pop       0x36
    187e:	00 40 06    	retfie    

00001880 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    1880:	36 00 f8    	push      0x36
    1882:	80 9f be    	mov.d     w0, [w15++]
    1884:	82 9f be    	mov.d     w2, [w15++]
    1886:	84 9f be    	mov.d     w4, [w15++]
    1888:	86 9f be    	mov.d     w6, [w15++]
    188a:	32 00 f8    	push      0x32
    188c:	34 00 f8    	push      0x34
    188e:	10 00 20    	mov.w     #0x1, w0
    1890:	a0 01 88    	mov.w     w0, 0x34
    1892:	00 20 20    	mov.w     #0x200, w0
    1894:	90 01 88    	mov.w     w0, 0x32
    1896:	00 00 fa    	lnk       #0x0

00001898 <.LSM57>:
    __serviceTxInterrupt(&uart3);
    1898:	e0 a9 20    	mov.w     #0xa9e, w0
    189a:	f5 fe 07    	rcall     0x1686 <___serviceTxInterrupt>

0000189c <.LSM58>:
}
    189c:	00 80 fa    	ulnk      
    189e:	34 00 f9    	pop       0x34
    18a0:	32 00 f9    	pop       0x32
    18a2:	4f 03 be    	mov.d     [--w15], w6
    18a4:	4f 02 be    	mov.d     [--w15], w4
    18a6:	4f 01 be    	mov.d     [--w15], w2
    18a8:	4f 00 be    	mov.d     [--w15], w0
    18aa:	36 00 f9    	pop       0x36
    18ac:	00 40 06    	retfie    

000018ae <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    18ae:	36 00 f8    	push      0x36
    18b0:	80 9f be    	mov.d     w0, [w15++]
    18b2:	82 9f be    	mov.d     w2, [w15++]
    18b4:	84 9f be    	mov.d     w4, [w15++]
    18b6:	86 9f be    	mov.d     w6, [w15++]
    18b8:	32 00 f8    	push      0x32
    18ba:	34 00 f8    	push      0x34
    18bc:	10 00 20    	mov.w     #0x1, w0
    18be:	a0 01 88    	mov.w     w0, 0x34
    18c0:	00 20 20    	mov.w     #0x200, w0
    18c2:	90 01 88    	mov.w     w0, 0x32
    18c4:	00 00 fa    	lnk       #0x0

000018c6 <.LSM60>:
    __serviceRxInterrupt(&uart3);
    18c6:	e0 a9 20    	mov.w     #0xa9e, w0
    18c8:	45 ff 07    	rcall     0x1754 <___serviceRxInterrupt>

000018ca <.LSM61>:
}
    18ca:	00 80 fa    	ulnk      
    18cc:	34 00 f9    	pop       0x34
    18ce:	32 00 f9    	pop       0x32
    18d0:	4f 03 be    	mov.d     [--w15], w6
    18d2:	4f 02 be    	mov.d     [--w15], w4
    18d4:	4f 01 be    	mov.d     [--w15], w2
    18d6:	4f 00 be    	mov.d     [--w15], w0
    18d8:	36 00 f9    	pop       0x36
    18da:	00 40 06    	retfie    

000018dc <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    18dc:	36 00 f8    	push      0x36
    18de:	80 9f be    	mov.d     w0, [w15++]
    18e0:	82 9f be    	mov.d     w2, [w15++]
    18e2:	84 9f be    	mov.d     w4, [w15++]
    18e4:	86 9f be    	mov.d     w6, [w15++]
    18e6:	32 00 f8    	push      0x32
    18e8:	34 00 f8    	push      0x34
    18ea:	10 00 20    	mov.w     #0x1, w0
    18ec:	a0 01 88    	mov.w     w0, 0x34
    18ee:	00 20 20    	mov.w     #0x200, w0
    18f0:	90 01 88    	mov.w     w0, 0x32
    18f2:	00 00 fa    	lnk       #0x0

000018f4 <.LSM63>:
    __serviceTxInterrupt(&uart4);
    18f4:	a0 ad 20    	mov.w     #0xada, w0
    18f6:	c7 fe 07    	rcall     0x1686 <___serviceTxInterrupt>

000018f8 <.LSM64>:
}
    18f8:	00 80 fa    	ulnk      
    18fa:	34 00 f9    	pop       0x34
    18fc:	32 00 f9    	pop       0x32
    18fe:	4f 03 be    	mov.d     [--w15], w6
    1900:	4f 02 be    	mov.d     [--w15], w4
    1902:	4f 01 be    	mov.d     [--w15], w2
    1904:	4f 00 be    	mov.d     [--w15], w0
    1906:	36 00 f9    	pop       0x36
    1908:	00 40 06    	retfie    

0000190a <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    190a:	36 00 f8    	push      0x36
    190c:	80 9f be    	mov.d     w0, [w15++]
    190e:	82 9f be    	mov.d     w2, [w15++]
    1910:	84 9f be    	mov.d     w4, [w15++]
    1912:	86 9f be    	mov.d     w6, [w15++]
    1914:	32 00 f8    	push      0x32
    1916:	34 00 f8    	push      0x34
    1918:	10 00 20    	mov.w     #0x1, w0
    191a:	a0 01 88    	mov.w     w0, 0x34
    191c:	00 20 20    	mov.w     #0x200, w0
    191e:	90 01 88    	mov.w     w0, 0x32
    1920:	00 00 fa    	lnk       #0x0

00001922 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    1922:	a0 ad 20    	mov.w     #0xada, w0
    1924:	17 ff 07    	rcall     0x1754 <___serviceRxInterrupt>

00001926 <.LSM67>:
}
    1926:	00 80 fa    	ulnk      
    1928:	34 00 f9    	pop       0x34
    192a:	32 00 f9    	pop       0x32
    192c:	4f 03 be    	mov.d     [--w15], w6
    192e:	4f 02 be    	mov.d     [--w15], w4
    1930:	4f 01 be    	mov.d     [--w15], w2
    1932:	4f 00 be    	mov.d     [--w15], w0
    1934:	36 00 f9    	pop       0x36
    1936:	00 40 06    	retfie    

00001938 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    1938:	08 00 fa    	lnk       #0x8
    193a:	10 07 98    	mov.w     w0, [w14+2]
    193c:	21 07 98    	mov.w     w1, [w14+4]
    193e:	32 07 98    	mov.w     w2, [w14+6]

00001940 <.LSM69>:
    int16_t i;

    switch (handle) {
    1940:	1e 00 90    	mov.w     [w14+2], w0
    1942:	00 00 e0    	cp0.w     w0
    1944:	25 00 35    	bra       LT, 0x1990 <.L37>
    1946:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1948:	03 00 34    	bra       LE, 0x1950 <.L30>
    194a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    194c:	11 00 32    	bra       Z, 0x1970 <.L31>

0000194e <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    194e:	21 00 37    	bra       0x1992 <.L34>

00001950 <.L30>:
    1950:	00 00 eb    	clr.w     w0
    1952:	00 0f 78    	mov.w     w0, [w14]
    1954:	08 00 37    	bra       0x1966 <.L32>

00001956 <.L33>:
    1956:	2e 00 90    	mov.w     [w14+4], w0
    1958:	90 40 78    	mov.b     [w0], w1
    195a:	2e 00 90    	mov.w     [w14+4], w0
    195c:	00 00 e8    	inc.w     w0, w0
    195e:	20 07 98    	mov.w     w0, [w14+4]
    1960:	50 43 80    	mov.w     0x86a, w0
    1962:	4b 04 07    	rcall     0x21fa <_uart_putc>

00001964 <.LSM73>:
    1964:	1e 0f e8    	inc.w     [w14], [w14]

00001966 <.L32>:
    1966:	9e 00 78    	mov.w     [w14], w1
    1968:	3e 00 90    	mov.w     [w14+6], w0
    196a:	80 8f 50    	sub.w     w1, w0, [w15]
    196c:	f4 ff 39    	bra       NC, 0x1956 <.L33>

0000196e <.LSM74>:
    196e:	11 00 37    	bra       0x1992 <.L34>

00001970 <.L31>:
    1970:	00 00 eb    	clr.w     w0
    1972:	00 0f 78    	mov.w     w0, [w14]
    1974:	08 00 37    	bra       0x1986 <.L35>

00001976 <.L36>:
    1976:	2e 00 90    	mov.w     [w14+4], w0
    1978:	90 40 78    	mov.b     [w0], w1
    197a:	2e 00 90    	mov.w     [w14+4], w0
    197c:	00 00 e8    	inc.w     w0, w0
    197e:	20 07 98    	mov.w     w0, [w14+4]
    1980:	60 43 80    	mov.w     0x86c, w0
    1982:	3b 04 07    	rcall     0x21fa <_uart_putc>

00001984 <.LSM77>:
    1984:	1e 0f e8    	inc.w     [w14], [w14]

00001986 <.L35>:
    1986:	9e 00 78    	mov.w     [w14], w1
    1988:	3e 00 90    	mov.w     [w14+6], w0
    198a:	80 8f 50    	sub.w     w1, w0, [w15]
    198c:	f4 ff 39    	bra       NC, 0x1976 <.L36>

0000198e <.LSM78>:
    198e:	01 00 37    	bra       0x1992 <.L34>

00001990 <.L37>:
    1990:	00 00 00    	nop       

00001992 <.L34>:
    }
    return len;
    1992:	3e 00 90    	mov.w     [w14+6], w0

00001994 <.LSM81>:
}
    1994:	00 80 fa    	ulnk      
    1996:	00 00 06    	return    

00001998 <_init_uart>:

void init_uart(void) {
    1998:	00 00 fa    	lnk       #0x0

0000199a <.LSM83>:
    init_pin();
    199a:	61 0e 07    	rcall     0x365e <_init_pin>

0000199c <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    199c:	40 6d 20    	mov.w     #0x6d4, w0
    199e:	80 1f 78    	mov.w     w0, [w15++]
    19a0:	57 01 20    	mov.w     #0x15, w7
    19a2:	86 c0 b3    	mov.b     #0x8, w6
    19a4:	80 82 eb    	setm.w    w5
    19a6:	64 c0 b3    	mov.b     #0x6, w4
    19a8:	80 01 eb    	clr.w     w3
    19aa:	02 2f 20    	mov.w     #0x2f0, w2
    19ac:	21 2f 20    	mov.w     #0x2f2, w1
    19ae:	60 b1 20    	mov.w     #0xb16, w0
    19b0:	6a 0f 07    	rcall     0x3886 <_pin_init>
    19b2:	8f 87 e9    	dec2.w    w15, w15

000019b4 <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    19b4:	a0 6d 20    	mov.w     #0x6da, w0
    19b6:	80 1f 78    	mov.w     w0, [w15++]
    19b8:	a7 01 20    	mov.w     #0x1a, w7
    19ba:	00 43 eb    	clr.b     w6
    19bc:	80 82 eb    	setm.w    w5
    19be:	74 c0 b3    	mov.b     #0x7, w4
    19c0:	80 01 eb    	clr.w     w3
    19c2:	02 2f 20    	mov.w     #0x2f0, w2
    19c4:	21 2f 20    	mov.w     #0x2f2, w1
    19c6:	c0 b2 20    	mov.w     #0xb2c, w0
    19c8:	5e 0f 07    	rcall     0x3886 <_pin_init>
    19ca:	8f 87 e9    	dec2.w    w15, w15

000019cc <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    19cc:	40 00 20    	mov.w     #0x4, w0
    19ce:	80 1f 78    	mov.w     w0, [w15++]
    19d0:	30 00 20    	mov.w     #0x3, w0
    19d2:	80 1f 78    	mov.w     w0, [w15++]
    19d4:	80 c0 b3    	mov.b     #0x8, w0
    19d6:	80 1f 78    	mov.w     w0, [w15++]
    19d8:	00 40 eb    	clr.b     w0
    19da:	80 1f 78    	mov.w     w0, [w15++]
    19dc:	40 6a 20    	mov.w     #0x6a4, w0
    19de:	80 1f 78    	mov.w     w0, [w15++]
    19e0:	40 6a 20    	mov.w     #0x6a4, w0
    19e2:	80 1f 78    	mov.w     w0, [w15++]
    19e4:	b0 c0 b3    	mov.b     #0xb, w0
    19e6:	80 1f 78    	mov.w     w0, [w15++]
    19e8:	c0 c0 b3    	mov.b     #0xc, w0
    19ea:	80 1f 78    	mov.w     w0, [w15++]
    19ec:	47 09 20    	mov.w     #0x94, w7
    19ee:	46 08 20    	mov.w     #0x84, w6
    19f0:	85 22 20    	mov.w     #0x228, w5
    19f2:	64 22 20    	mov.w     #0x226, w4
    19f4:	43 22 20    	mov.w     #0x224, w3
    19f6:	22 22 20    	mov.w     #0x222, w2
    19f8:	01 22 20    	mov.w     #0x220, w1
    19fa:	60 a2 20    	mov.w     #0xa26, w0
    19fc:	6b 00 07    	rcall     0x1ad4 <_uart_init>
    19fe:	f0 87 57    	sub.w     w15, #0x10, w15

00001a00 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    1a00:	60 00 20    	mov.w     #0x6, w0
    1a02:	80 1f 78    	mov.w     w0, [w15++]
    1a04:	50 00 20    	mov.w     #0x5, w0
    1a06:	80 1f 78    	mov.w     w0, [w15++]
    1a08:	80 c0 b3    	mov.b     #0x8, w0
    1a0a:	80 1f 78    	mov.w     w0, [w15++]
    1a0c:	00 40 eb    	clr.b     w0
    1a0e:	80 1f 78    	mov.w     w0, [w15++]
    1a10:	60 6a 20    	mov.w     #0x6a6, w0
    1a12:	80 1f 78    	mov.w     w0, [w15++]
    1a14:	60 6a 20    	mov.w     #0x6a6, w0
    1a16:	80 1f 78    	mov.w     w0, [w15++]
    1a18:	e0 c0 b3    	mov.b     #0xe, w0
    1a1a:	80 1f 78    	mov.w     w0, [w15++]
    1a1c:	f0 c0 b3    	mov.b     #0xf, w0
    1a1e:	80 1f 78    	mov.w     w0, [w15++]
    1a20:	67 09 20    	mov.w     #0x96, w7
    1a22:	66 08 20    	mov.w     #0x86, w6
    1a24:	85 23 20    	mov.w     #0x238, w5
    1a26:	64 23 20    	mov.w     #0x236, w4
    1a28:	43 23 20    	mov.w     #0x234, w3
    1a2a:	22 23 20    	mov.w     #0x232, w2
    1a2c:	01 23 20    	mov.w     #0x230, w1
    1a2e:	20 a6 20    	mov.w     #0xa62, w0
    1a30:	51 00 07    	rcall     0x1ad4 <_uart_init>
    1a32:	f0 87 57    	sub.w     w15, #0x10, w15

00001a34 <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    1a34:	d0 01 20    	mov.w     #0x1d, w0
    1a36:	80 1f 78    	mov.w     w0, [w15++]
    1a38:	c0 01 20    	mov.w     #0x1c, w0
    1a3a:	80 1f 78    	mov.w     w0, [w15++]
    1a3c:	80 c0 b3    	mov.b     #0x8, w0
    1a3e:	80 1f 78    	mov.w     w0, [w15++]
    1a40:	80 c0 b3    	mov.b     #0x8, w0
    1a42:	80 1f 78    	mov.w     w0, [w15++]
    1a44:	a0 6a 20    	mov.w     #0x6aa, w0
    1a46:	80 1f 78    	mov.w     w0, [w15++]
    1a48:	20 6a 20    	mov.w     #0x6a2, w0
    1a4a:	80 1f 78    	mov.w     w0, [w15++]
    1a4c:	20 c0 b3    	mov.b     #0x2, w0
    1a4e:	80 1f 78    	mov.w     w0, [w15++]
    1a50:	30 c0 b3    	mov.b     #0x3, w0
    1a52:	80 1f 78    	mov.w     w0, [w15++]
    1a54:	e7 09 20    	mov.w     #0x9e, w7
    1a56:	e6 08 20    	mov.w     #0x8e, w6
    1a58:	85 25 20    	mov.w     #0x258, w5
    1a5a:	64 25 20    	mov.w     #0x256, w4
    1a5c:	43 25 20    	mov.w     #0x254, w3
    1a5e:	22 25 20    	mov.w     #0x252, w2
    1a60:	01 25 20    	mov.w     #0x250, w1
    1a62:	e0 a9 20    	mov.w     #0xa9e, w0
    1a64:	37 00 07    	rcall     0x1ad4 <_uart_init>
    1a66:	f0 87 57    	sub.w     w15, #0x10, w15

00001a68 <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    1a68:	f0 01 20    	mov.w     #0x1f, w0
    1a6a:	80 1f 78    	mov.w     w0, [w15++]
    1a6c:	e0 01 20    	mov.w     #0x1e, w0
    1a6e:	80 1f 78    	mov.w     w0, [w15++]
    1a70:	80 c0 b3    	mov.b     #0x8, w0
    1a72:	80 1f 78    	mov.w     w0, [w15++]
    1a74:	00 40 eb    	clr.b     w0
    1a76:	80 1f 78    	mov.w     w0, [w15++]
    1a78:	60 6b 20    	mov.w     #0x6b6, w0
    1a7a:	80 1f 78    	mov.w     w0, [w15++]
    1a7c:	60 6b 20    	mov.w     #0x6b6, w0
    1a7e:	80 1f 78    	mov.w     w0, [w15++]
    1a80:	80 c0 b3    	mov.b     #0x8, w0
    1a82:	80 1f 78    	mov.w     w0, [w15++]
    1a84:	90 c0 b3    	mov.b     #0x9, w0
    1a86:	80 1f 78    	mov.w     w0, [w15++]
    1a88:	e7 09 20    	mov.w     #0x9e, w7
    1a8a:	e6 08 20    	mov.w     #0x8e, w6
    1a8c:	85 2b 20    	mov.w     #0x2b8, w5
    1a8e:	64 2b 20    	mov.w     #0x2b6, w4
    1a90:	43 2b 20    	mov.w     #0x2b4, w3
    1a92:	22 2b 20    	mov.w     #0x2b2, w2
    1a94:	01 2b 20    	mov.w     #0x2b0, w1
    1a96:	a0 ad 20    	mov.w     #0xada, w0
    1a98:	1d 00 07    	rcall     0x1ad4 <_uart_init>
    1a9a:	f0 87 57    	sub.w     w15, #0x10, w15

00001a9c <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    1a9c:	00 00 eb    	clr.w     w0
    1a9e:	80 1f 78    	mov.w     w0, [w15++]
    1aa0:	00 00 eb    	clr.w     w0
    1aa2:	80 1f 78    	mov.w     w0, [w15++]
    1aa4:	00 00 eb    	clr.w     w0
    1aa6:	80 1f 78    	mov.w     w0, [w15++]
    1aa8:	00 00 eb    	clr.w     w0
    1aaa:	80 1f 78    	mov.w     w0, [w15++]
    1aac:	00 00 eb    	clr.w     w0
    1aae:	80 1f 78    	mov.w     w0, [w15++]
    1ab0:	10 00 20    	mov.w     #0x1, w0
    1ab2:	80 1f 78    	mov.w     w0, [w15++]
    1ab4:	e5 c4 b3    	mov.b     #0x4e, w5
    1ab6:	06 00 20    	mov.w     #0x0, w6
    1ab8:	67 69 24    	mov.w     #0x4696, w7
    1aba:	00 02 eb    	clr.w     w4
    1abc:	80 01 eb    	clr.w     w3
    1abe:	c2 b2 20    	mov.w     #0xb2c, w2
    1ac0:	61 b1 20    	mov.w     #0xb16, w1
    1ac2:	60 a2 20    	mov.w     #0xa26, w0
    1ac4:	72 00 07    	rcall     0x1baa <_uart_open>
    1ac6:	ec 87 57    	sub.w     w15, #0xc, w15

00001ac8 <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    1ac8:	60 a2 20    	mov.w     #0xa26, w0
    1aca:	50 43 88    	mov.w     w0, 0x86a

00001acc <.LSM92>:
    _stderr = &uart1;
    1acc:	60 a2 20    	mov.w     #0xa26, w0
    1ace:	60 43 88    	mov.w     w0, 0x86c

00001ad0 <.LSM93>:
}
    1ad0:	00 80 fa    	ulnk      
    1ad2:	00 00 06    	return    

00001ad4 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1ad4:	10 00 fa    	lnk       #0x10
    1ad6:	00 0f 78    	mov.w     w0, [w14]
    1ad8:	11 07 98    	mov.w     w1, [w14+2]
    1ada:	22 07 98    	mov.w     w2, [w14+4]
    1adc:	33 07 98    	mov.w     w3, [w14+6]
    1ade:	44 07 98    	mov.w     w4, [w14+8]
    1ae0:	55 07 98    	mov.w     w5, [w14+10]
    1ae2:	66 07 98    	mov.w     w6, [w14+12]
    1ae4:	77 07 98    	mov.w     w7, [w14+14]

00001ae6 <.LSM95>:
    self->UxMODE = UxMODE;
    1ae6:	1e 00 78    	mov.w     [w14], w0
    1ae8:	9e 00 90    	mov.w     [w14+2], w1
    1aea:	01 08 78    	mov.w     w1, [w0]

00001aec <.LSM96>:
    self->UxSTA = UxSTA;
    1aec:	1e 00 78    	mov.w     [w14], w0
    1aee:	ae 00 90    	mov.w     [w14+4], w1
    1af0:	11 00 98    	mov.w     w1, [w0+2]

00001af2 <.LSM97>:
    self->UxTXREG = UxTXREG;
    1af2:	1e 00 78    	mov.w     [w14], w0
    1af4:	be 00 90    	mov.w     [w14+6], w1
    1af6:	21 00 98    	mov.w     w1, [w0+4]

00001af8 <.LSM98>:
    self->UxRXREG = UxRXREG;
    1af8:	1e 00 78    	mov.w     [w14], w0
    1afa:	ce 00 90    	mov.w     [w14+8], w1
    1afc:	31 00 98    	mov.w     w1, [w0+6]

00001afe <.LSM99>:
    self->UxBRG = UxBRG;
    1afe:	1e 00 78    	mov.w     [w14], w0
    1b00:	de 00 90    	mov.w     [w14+10], w1
    1b02:	41 00 98    	mov.w     w1, [w0+8]

00001b04 <.LSM100>:
    self->IFSy = IFSy;
    1b04:	1e 00 78    	mov.w     [w14], w0
    1b06:	ee 00 90    	mov.w     [w14+12], w1
    1b08:	51 00 98    	mov.w     w1, [w0+10]

00001b0a <.LSM101>:
    self->IECy = IECy;
    1b0a:	1e 00 78    	mov.w     [w14], w0
    1b0c:	fe 00 90    	mov.w     [w14+14], w1
    1b0e:	61 00 98    	mov.w     w1, [w0+12]

00001b10 <.LSM102>:
    self->UxTXIF = UxTXIF;
    1b10:	1e 00 78    	mov.w     [w14], w0
    1b12:	8e f8 97    	mov.b     [w14-8], w1
    1b14:	61 48 98    	mov.b     w1, [w0+14]

00001b16 <.LSM103>:
    self->UxRXIF = UxRXIF;
    1b16:	1e 00 78    	mov.w     [w14], w0
    1b18:	ee f0 97    	mov.b     [w14-10], w1
    1b1a:	71 48 98    	mov.b     w1, [w0+15]

00001b1c <.LSM104>:
    self->RXrpinr = RXrpinr;
    1b1c:	1e 00 78    	mov.w     [w14], w0
    1b1e:	ae b8 97    	mov.w     [w14-12], w1
    1b20:	01 08 98    	mov.w     w1, [w0+16]

00001b22 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    1b22:	1e 00 78    	mov.w     [w14], w0
    1b24:	9e b8 97    	mov.w     [w14-14], w1
    1b26:	11 08 98    	mov.w     w1, [w0+18]

00001b28 <.LSM106>:
    self->RXrpshift = RXrpshift;
    1b28:	1e 00 78    	mov.w     [w14], w0
    1b2a:	8e f0 97    	mov.b     [w14-16], w1
    1b2c:	41 50 98    	mov.b     w1, [w0+20]

00001b2e <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    1b2e:	1e 00 78    	mov.w     [w14], w0
    1b30:	ee e8 97    	mov.b     [w14-18], w1
    1b32:	51 50 98    	mov.b     w1, [w0+21]

00001b34 <.LSM108>:
    self->TXrpnum = TXrpnum;
    1b34:	1e 00 78    	mov.w     [w14], w0
    1b36:	ee b0 97    	mov.w     [w14-20], w1
    1b38:	31 08 98    	mov.w     w1, [w0+22]

00001b3a <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    1b3a:	1e 00 78    	mov.w     [w14], w0
    1b3c:	de b0 97    	mov.w     [w14-22], w1
    1b3e:	41 08 98    	mov.w     w1, [w0+24]

00001b40 <.LSM110>:
    self->TX = NULL;
    1b40:	1e 00 78    	mov.w     [w14], w0
    1b42:	80 00 eb    	clr.w     w1
    1b44:	51 08 98    	mov.w     w1, [w0+26]

00001b46 <.LSM111>:
    self->RX = NULL;
    1b46:	1e 00 78    	mov.w     [w14], w0
    1b48:	80 00 eb    	clr.w     w1
    1b4a:	61 08 98    	mov.w     w1, [w0+28]

00001b4c <.LSM112>:
    self->RTS = NULL;
    1b4c:	1e 00 78    	mov.w     [w14], w0
    1b4e:	80 00 eb    	clr.w     w1
    1b50:	71 08 98    	mov.w     w1, [w0+30]

00001b52 <.LSM113>:
    self->CTS = NULL;
    1b52:	1e 00 78    	mov.w     [w14], w0
    1b54:	80 00 eb    	clr.w     w1
    1b56:	01 10 98    	mov.w     w1, [w0+32]

00001b58 <.LSM114>:
    self->TXbuffer.data = NULL;
    1b58:	1e 00 78    	mov.w     [w14], w0
    1b5a:	80 00 eb    	clr.w     w1
    1b5c:	11 10 98    	mov.w     w1, [w0+34]

00001b5e <.LSM115>:
    self->TXbuffer.length = 0;
    1b5e:	1e 00 78    	mov.w     [w14], w0
    1b60:	80 00 eb    	clr.w     w1
    1b62:	21 10 98    	mov.w     w1, [w0+36]

00001b64 <.LSM116>:
    self->TXbuffer.head = 0;
    1b64:	1e 00 78    	mov.w     [w14], w0
    1b66:	80 00 eb    	clr.w     w1
    1b68:	31 10 98    	mov.w     w1, [w0+38]

00001b6a <.LSM117>:
    self->TXbuffer.tail = 0;
    1b6a:	1e 00 78    	mov.w     [w14], w0
    1b6c:	80 00 eb    	clr.w     w1
    1b6e:	41 10 98    	mov.w     w1, [w0+40]

00001b70 <.LSM118>:
    self->TXbuffer.count = 0;
    1b70:	1e 00 78    	mov.w     [w14], w0
    1b72:	80 00 eb    	clr.w     w1
    1b74:	51 10 98    	mov.w     w1, [w0+42]

00001b76 <.LSM119>:
    self->RXbuffer.data = NULL;
    1b76:	1e 00 78    	mov.w     [w14], w0
    1b78:	80 00 eb    	clr.w     w1
    1b7a:	61 10 98    	mov.w     w1, [w0+44]

00001b7c <.LSM120>:
    self->RXbuffer.length = 0;
    1b7c:	1e 00 78    	mov.w     [w14], w0
    1b7e:	80 00 eb    	clr.w     w1
    1b80:	71 10 98    	mov.w     w1, [w0+46]

00001b82 <.LSM121>:
    self->RXbuffer.head = 0;
    1b82:	1e 00 78    	mov.w     [w14], w0
    1b84:	80 00 eb    	clr.w     w1
    1b86:	01 18 98    	mov.w     w1, [w0+48]

00001b88 <.LSM122>:
    self->RXbuffer.tail = 0;
    1b88:	1e 00 78    	mov.w     [w14], w0
    1b8a:	80 00 eb    	clr.w     w1
    1b8c:	11 18 98    	mov.w     w1, [w0+50]

00001b8e <.LSM123>:
    self->RXbuffer.count = 0;
    1b8e:	1e 00 78    	mov.w     [w14], w0
    1b90:	80 00 eb    	clr.w     w1
    1b92:	21 18 98    	mov.w     w1, [w0+52]

00001b94 <.LSM124>:
    self->TXthreshold = 1;
    1b94:	1e 00 78    	mov.w     [w14], w0
    1b96:	11 00 20    	mov.w     #0x1, w1
    1b98:	31 18 98    	mov.w     w1, [w0+54]

00001b9a <.LSM125>:
    self->putc = NULL;
    1b9a:	1e 00 78    	mov.w     [w14], w0
    1b9c:	80 00 eb    	clr.w     w1
    1b9e:	41 18 98    	mov.w     w1, [w0+56]

00001ba0 <.LSM126>:
    self->getc = NULL;
    1ba0:	1e 00 78    	mov.w     [w14], w0
    1ba2:	80 00 eb    	clr.w     w1
    1ba4:	51 18 98    	mov.w     w1, [w0+58]

00001ba6 <.LSM127>:
}
    1ba6:	00 80 fa    	ulnk      
    1ba8:	00 00 06    	return    

00001baa <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1baa:	10 00 fa    	lnk       #0x10
    1bac:	88 1f 78    	mov.w     w8, [w15++]
    1bae:	00 0f 78    	mov.w     w0, [w14]
    1bb0:	11 07 98    	mov.w     w1, [w14+2]
    1bb2:	22 07 98    	mov.w     w2, [w14+4]
    1bb4:	33 07 98    	mov.w     w3, [w14+6]
    1bb6:	44 07 98    	mov.w     w4, [w14+8]
    1bb8:	56 07 98    	mov.w     w6, [w14+10]
    1bba:	67 07 98    	mov.w     w7, [w14+12]
    1bbc:	65 4f 98    	mov.b     w5, [w14+14]

00001bbe <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1bbe:	1e 00 78    	mov.w     [w14], w0
    1bc0:	10 00 78    	mov.w     [w0], w0
    1bc2:	80 00 eb    	clr.w     w1
    1bc4:	01 08 78    	mov.w     w1, [w0]

00001bc6 <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1bc6:	1e 00 90    	mov.w     [w14+2], w0
    1bc8:	60 00 90    	mov.w     [w0+12], w0
    1bca:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1bcc:	0e 02 32    	bra       Z, 0x1fea <.L73>
    1bce:	2e 00 90    	mov.w     [w14+4], w0
    1bd0:	60 00 90    	mov.w     [w0+12], w0
    1bd2:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1bd4:	0c 02 32    	bra       Z, 0x1fee <.L74>

00001bd6 <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1bd6:	1e 00 90    	mov.w     [w14+2], w0
    1bd8:	00 08 90    	mov.w     [w0+16], w0
    1bda:	00 00 e0    	cp0.w     w0
    1bdc:	69 00 3a    	bra       NZ, 0x1cb0 <.L44>
    1bde:	2e 00 90    	mov.w     [w14+4], w0
    1be0:	00 08 90    	mov.w     [w0+16], w0
    1be2:	00 00 e0    	cp0.w     w0
    1be4:	65 00 3a    	bra       NZ, 0x1cb0 <.L44>

00001be6 <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1be6:	1e 00 90    	mov.w     [w14+2], w0
    1be8:	a1 0e 07    	rcall     0x392c <_pin_digitalOut>

00001bea <.LSM133>:
        pin_set(TX);
    1bea:	1e 00 90    	mov.w     [w14+2], w0
    1bec:	fc 0e 07    	rcall     0x39e6 <_pin_set>

00001bee <.LSM134>:
        pin_digitalIn(RX);
    1bee:	2e 00 90    	mov.w     [w14+4], w0
    1bf0:	76 0e 07    	rcall     0x38de <_pin_digitalIn>

00001bf2 <.LSM135>:
        self->TX = TX;
    1bf2:	1e 00 78    	mov.w     [w14], w0
    1bf4:	9e 00 90    	mov.w     [w14+2], w1
    1bf6:	51 08 98    	mov.w     w1, [w0+26]

00001bf8 <.LSM136>:
        TX->owner = (void *)self;
    1bf8:	1e 00 90    	mov.w     [w14+2], w0
    1bfa:	9e 00 78    	mov.w     [w14], w1
    1bfc:	01 08 98    	mov.w     w1, [w0+16]

00001bfe <.LSM137>:
        TX->write = NULL;
    1bfe:	1e 00 90    	mov.w     [w14+2], w0
    1c00:	80 00 eb    	clr.w     w1
    1c02:	11 08 98    	mov.w     w1, [w0+18]

00001c04 <.LSM138>:
        TX->read = NULL;
    1c04:	1e 00 90    	mov.w     [w14+2], w0
    1c06:	80 00 eb    	clr.w     w1
    1c08:	21 08 98    	mov.w     w1, [w0+20]

00001c0a <.LSM139>:
        self->RX = RX;
    1c0a:	1e 00 78    	mov.w     [w14], w0
    1c0c:	ae 00 90    	mov.w     [w14+4], w1
    1c0e:	61 08 98    	mov.w     w1, [w0+28]

00001c10 <.LSM140>:
        RX->owner = (void *)self;
    1c10:	2e 00 90    	mov.w     [w14+4], w0
    1c12:	9e 00 78    	mov.w     [w14], w1
    1c14:	01 08 98    	mov.w     w1, [w0+16]

00001c16 <.LSM141>:
        RX->write = NULL;
    1c16:	2e 00 90    	mov.w     [w14+4], w0
    1c18:	80 00 eb    	clr.w     w1
    1c1a:	11 08 98    	mov.w     w1, [w0+18]

00001c1c <.LSM142>:
        RX->read = NULL;
    1c1c:	2e 00 90    	mov.w     [w14+4], w0
    1c1e:	80 00 eb    	clr.w     w1
    1c20:	21 08 98    	mov.w     w1, [w0+20]

00001c22 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1c22:	11 3a 80    	mov.w     0x742, w1
    1c24:	f0 0b 20    	mov.w     #0xbf, w0
    1c26:	00 81 60    	and.w     w1, w0, w2
    1c28:	60 04 20    	mov.w     #0x46, w0
    1c2a:	71 05 20    	mov.w     #0x57, w1
    1c2c:	23 74 20    	mov.w     #0x742, w3
    1c2e:	80 49 78    	mov.b     w0, [w3]
    1c30:	81 49 78    	mov.b     w1, [w3]
    1c32:	82 49 78    	mov.b     w2, [w3]

00001c34 <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    1c34:	1e 00 90    	mov.w     [w14+2], w0
    1c36:	70 00 90    	mov.w     [w0+14], w0
    1c38:	9e 00 90    	mov.w     [w14+2], w1
    1c3a:	f1 00 90    	mov.w     [w1+14], w1
    1c3c:	11 01 78    	mov.w     [w1], w2
    1c3e:	9e 00 90    	mov.w     [w14+2], w1
    1c40:	a1 48 90    	mov.b     [w1+10], w1
    1c42:	81 80 fb    	ze        w1, w1
    1c44:	f3 03 20    	mov.w     #0x3f, w3
    1c46:	81 18 dd    	sl.w      w3, w1, w1
    1c48:	81 80 ea    	com.w     w1, w1
    1c4a:	81 00 61    	and.w     w2, w1, w1
    1c4c:	01 08 78    	mov.w     w1, [w0]

00001c4e <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    1c4e:	1e 00 90    	mov.w     [w14+2], w0
    1c50:	70 00 90    	mov.w     [w0+14], w0
    1c52:	9e 00 90    	mov.w     [w14+2], w1
    1c54:	f1 00 90    	mov.w     [w1+14], w1
    1c56:	11 01 78    	mov.w     [w1], w2
    1c58:	9e 00 78    	mov.w     [w14], w1
    1c5a:	b1 09 90    	mov.w     [w1+22], w3
    1c5c:	9e 00 90    	mov.w     [w14+2], w1
    1c5e:	a1 48 90    	mov.b     [w1+10], w1
    1c60:	81 80 fb    	ze        w1, w1
    1c62:	81 18 dd    	sl.w      w3, w1, w1
    1c64:	82 80 70    	ior.w     w1, w2, w1
    1c66:	01 08 78    	mov.w     w1, [w0]

00001c68 <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    1c68:	1e 00 78    	mov.w     [w14], w0
    1c6a:	00 08 90    	mov.w     [w0+16], w0
    1c6c:	9e 00 78    	mov.w     [w14], w1
    1c6e:	81 08 90    	mov.w     [w1+16], w1
    1c70:	11 01 78    	mov.w     [w1], w2
    1c72:	9e 00 78    	mov.w     [w14], w1
    1c74:	c1 50 90    	mov.b     [w1+20], w1
    1c76:	81 80 fb    	ze        w1, w1
    1c78:	f3 03 20    	mov.w     #0x3f, w3
    1c7a:	81 18 dd    	sl.w      w3, w1, w1
    1c7c:	81 80 ea    	com.w     w1, w1
    1c7e:	81 00 61    	and.w     w2, w1, w1
    1c80:	01 08 78    	mov.w     w1, [w0]

00001c82 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    1c82:	1e 00 78    	mov.w     [w14], w0
    1c84:	00 08 90    	mov.w     [w0+16], w0
    1c86:	9e 00 78    	mov.w     [w14], w1
    1c88:	81 08 90    	mov.w     [w1+16], w1
    1c8a:	11 01 78    	mov.w     [w1], w2
    1c8c:	ae 00 90    	mov.w     [w14+4], w1
    1c8e:	e1 01 90    	mov.w     [w1+12], w3
    1c90:	9e 00 78    	mov.w     [w14], w1
    1c92:	c1 50 90    	mov.b     [w1+20], w1
    1c94:	81 80 fb    	ze        w1, w1
    1c96:	81 18 dd    	sl.w      w3, w1, w1
    1c98:	82 80 70    	ior.w     w1, w2, w1
    1c9a:	01 08 78    	mov.w     w1, [w0]

00001c9c <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    1c9c:	11 3a 80    	mov.w     0x742, w1
    1c9e:	00 04 20    	mov.w     #0x40, w0
    1ca0:	01 01 70    	ior.w     w0, w1, w2
    1ca2:	60 04 20    	mov.w     #0x46, w0
    1ca4:	71 05 20    	mov.w     #0x57, w1
    1ca6:	23 74 20    	mov.w     #0x742, w3
    1ca8:	80 49 78    	mov.b     w0, [w3]
    1caa:	81 49 78    	mov.b     w1, [w3]
    1cac:	82 49 78    	mov.b     w2, [w3]
    1cae:	0a 00 37    	bra       0x1cc4 <.L45>

00001cb0 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    1cb0:	1e 00 78    	mov.w     [w14], w0
    1cb2:	d0 08 90    	mov.w     [w0+26], w1
    1cb4:	1e 00 90    	mov.w     [w14+2], w0
    1cb6:	80 8f 50    	sub.w     w1, w0, [w15]
    1cb8:	9c 01 3a    	bra       NZ, 0x1ff2 <.L75>
    1cba:	1e 00 78    	mov.w     [w14], w0
    1cbc:	e0 08 90    	mov.w     [w0+28], w1
    1cbe:	2e 00 90    	mov.w     [w14+4], w0
    1cc0:	80 8f 50    	sub.w     w1, w0, [w15]
    1cc2:	99 01 3a    	bra       NZ, 0x1ff6 <.L76>

00001cc4 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    1cc4:	3e 00 90    	mov.w     [w14+6], w0
    1cc6:	00 00 e0    	cp0.w     w0
    1cc8:	87 00 32    	bra       Z, 0x1dd8 <.L47>
    1cca:	4e 00 90    	mov.w     [w14+8], w0
    1ccc:	00 00 e0    	cp0.w     w0
    1cce:	84 00 32    	bra       Z, 0x1dd8 <.L47>

00001cd0 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    1cd0:	3e 00 90    	mov.w     [w14+6], w0
    1cd2:	60 00 90    	mov.w     [w0+12], w0
    1cd4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1cd6:	91 01 32    	bra       Z, 0x1ffa <.L77>
    1cd8:	4e 00 90    	mov.w     [w14+8], w0
    1cda:	60 00 90    	mov.w     [w0+12], w0
    1cdc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1cde:	8f 01 32    	bra       Z, 0x1ffe <.L78>

00001ce0 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    1ce0:	3e 00 90    	mov.w     [w14+6], w0
    1ce2:	00 08 90    	mov.w     [w0+16], w0
    1ce4:	00 00 e0    	cp0.w     w0
    1ce6:	69 00 3a    	bra       NZ, 0x1dba <.L50>
    1ce8:	4e 00 90    	mov.w     [w14+8], w0
    1cea:	00 08 90    	mov.w     [w0+16], w0
    1cec:	00 00 e0    	cp0.w     w0
    1cee:	65 00 3a    	bra       NZ, 0x1dba <.L50>

00001cf0 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    1cf0:	3e 00 90    	mov.w     [w14+6], w0
    1cf2:	1c 0e 07    	rcall     0x392c <_pin_digitalOut>

00001cf4 <.LSM154>:
            pin_set(RTS);
    1cf4:	3e 00 90    	mov.w     [w14+6], w0
    1cf6:	77 0e 07    	rcall     0x39e6 <_pin_set>

00001cf8 <.LSM155>:
            pin_digitalIn(CTS);
    1cf8:	4e 00 90    	mov.w     [w14+8], w0
    1cfa:	f1 0d 07    	rcall     0x38de <_pin_digitalIn>

00001cfc <.LSM156>:
            self->RTS = RTS;
    1cfc:	1e 00 78    	mov.w     [w14], w0
    1cfe:	be 00 90    	mov.w     [w14+6], w1
    1d00:	71 08 98    	mov.w     w1, [w0+30]

00001d02 <.LSM157>:
            RTS->owner = (void *)self;
    1d02:	3e 00 90    	mov.w     [w14+6], w0
    1d04:	9e 00 78    	mov.w     [w14], w1
    1d06:	01 08 98    	mov.w     w1, [w0+16]

00001d08 <.LSM158>:
            RTS->write = NULL;
    1d08:	3e 00 90    	mov.w     [w14+6], w0
    1d0a:	80 00 eb    	clr.w     w1
    1d0c:	11 08 98    	mov.w     w1, [w0+18]

00001d0e <.LSM159>:
            RTS->read = NULL;
    1d0e:	3e 00 90    	mov.w     [w14+6], w0
    1d10:	80 00 eb    	clr.w     w1
    1d12:	21 08 98    	mov.w     w1, [w0+20]

00001d14 <.LSM160>:
            self->CTS = CTS;
    1d14:	1e 00 78    	mov.w     [w14], w0
    1d16:	ce 00 90    	mov.w     [w14+8], w1
    1d18:	01 10 98    	mov.w     w1, [w0+32]

00001d1a <.LSM161>:
            CTS->owner = (void *)self;
    1d1a:	4e 00 90    	mov.w     [w14+8], w0
    1d1c:	9e 00 78    	mov.w     [w14], w1
    1d1e:	01 08 98    	mov.w     w1, [w0+16]

00001d20 <.LSM162>:
            CTS->write = NULL;
    1d20:	4e 00 90    	mov.w     [w14+8], w0
    1d22:	80 00 eb    	clr.w     w1
    1d24:	11 08 98    	mov.w     w1, [w0+18]

00001d26 <.LSM163>:
            CTS->read = NULL;
    1d26:	4e 00 90    	mov.w     [w14+8], w0
    1d28:	80 00 eb    	clr.w     w1
    1d2a:	21 08 98    	mov.w     w1, [w0+20]

00001d2c <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    1d2c:	11 3a 80    	mov.w     0x742, w1
    1d2e:	f0 0b 20    	mov.w     #0xbf, w0
    1d30:	00 81 60    	and.w     w1, w0, w2
    1d32:	60 04 20    	mov.w     #0x46, w0
    1d34:	71 05 20    	mov.w     #0x57, w1
    1d36:	23 74 20    	mov.w     #0x742, w3
    1d38:	80 49 78    	mov.b     w0, [w3]
    1d3a:	81 49 78    	mov.b     w1, [w3]
    1d3c:	82 49 78    	mov.b     w2, [w3]

00001d3e <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    1d3e:	3e 00 90    	mov.w     [w14+6], w0
    1d40:	70 00 90    	mov.w     [w0+14], w0
    1d42:	be 00 90    	mov.w     [w14+6], w1
    1d44:	f1 00 90    	mov.w     [w1+14], w1
    1d46:	11 01 78    	mov.w     [w1], w2
    1d48:	be 00 90    	mov.w     [w14+6], w1
    1d4a:	a1 48 90    	mov.b     [w1+10], w1
    1d4c:	81 80 fb    	ze        w1, w1
    1d4e:	f3 03 20    	mov.w     #0x3f, w3
    1d50:	81 18 dd    	sl.w      w3, w1, w1
    1d52:	81 80 ea    	com.w     w1, w1
    1d54:	81 00 61    	and.w     w2, w1, w1
    1d56:	01 08 78    	mov.w     w1, [w0]

00001d58 <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    1d58:	3e 00 90    	mov.w     [w14+6], w0
    1d5a:	70 00 90    	mov.w     [w0+14], w0
    1d5c:	be 00 90    	mov.w     [w14+6], w1
    1d5e:	f1 00 90    	mov.w     [w1+14], w1
    1d60:	11 01 78    	mov.w     [w1], w2
    1d62:	9e 00 78    	mov.w     [w14], w1
    1d64:	c1 09 90    	mov.w     [w1+24], w3
    1d66:	be 00 90    	mov.w     [w14+6], w1
    1d68:	a1 48 90    	mov.b     [w1+10], w1
    1d6a:	81 80 fb    	ze        w1, w1
    1d6c:	81 18 dd    	sl.w      w3, w1, w1
    1d6e:	82 80 70    	ior.w     w1, w2, w1
    1d70:	01 08 78    	mov.w     w1, [w0]

00001d72 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    1d72:	1e 00 78    	mov.w     [w14], w0
    1d74:	10 08 90    	mov.w     [w0+18], w0
    1d76:	9e 00 78    	mov.w     [w14], w1
    1d78:	91 08 90    	mov.w     [w1+18], w1
    1d7a:	11 01 78    	mov.w     [w1], w2
    1d7c:	9e 00 78    	mov.w     [w14], w1
    1d7e:	d1 50 90    	mov.b     [w1+21], w1
    1d80:	81 80 fb    	ze        w1, w1
    1d82:	f3 03 20    	mov.w     #0x3f, w3
    1d84:	81 18 dd    	sl.w      w3, w1, w1
    1d86:	81 80 ea    	com.w     w1, w1
    1d88:	81 00 61    	and.w     w2, w1, w1
    1d8a:	01 08 78    	mov.w     w1, [w0]

00001d8c <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    1d8c:	1e 00 78    	mov.w     [w14], w0
    1d8e:	10 08 90    	mov.w     [w0+18], w0
    1d90:	9e 00 78    	mov.w     [w14], w1
    1d92:	91 08 90    	mov.w     [w1+18], w1
    1d94:	11 01 78    	mov.w     [w1], w2
    1d96:	ce 00 90    	mov.w     [w14+8], w1
    1d98:	e1 01 90    	mov.w     [w1+12], w3
    1d9a:	9e 00 78    	mov.w     [w14], w1
    1d9c:	d1 50 90    	mov.b     [w1+21], w1
    1d9e:	81 80 fb    	ze        w1, w1
    1da0:	81 18 dd    	sl.w      w3, w1, w1
    1da2:	82 80 70    	ior.w     w1, w2, w1
    1da4:	01 08 78    	mov.w     w1, [w0]

00001da6 <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    1da6:	11 3a 80    	mov.w     0x742, w1
    1da8:	00 04 20    	mov.w     #0x40, w0
    1daa:	01 01 70    	ior.w     w0, w1, w2
    1dac:	60 04 20    	mov.w     #0x46, w0
    1dae:	71 05 20    	mov.w     #0x57, w1
    1db0:	23 74 20    	mov.w     #0x742, w3
    1db2:	80 49 78    	mov.b     w0, [w3]
    1db4:	81 49 78    	mov.b     w1, [w3]
    1db6:	82 49 78    	mov.b     w2, [w3]
    1db8:	0a 00 37    	bra       0x1dce <.L51>

00001dba <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    1dba:	1e 00 78    	mov.w     [w14], w0
    1dbc:	f0 08 90    	mov.w     [w0+30], w1
    1dbe:	3e 00 90    	mov.w     [w14+6], w0
    1dc0:	80 8f 50    	sub.w     w1, w0, [w15]
    1dc2:	1f 01 3a    	bra       NZ, 0x2002 <.L79>
    1dc4:	1e 00 78    	mov.w     [w14], w0
    1dc6:	80 10 90    	mov.w     [w0+32], w1
    1dc8:	4e 00 90    	mov.w     [w14+8], w0
    1dca:	80 8f 50    	sub.w     w1, w0, [w15]
    1dcc:	1c 01 3a    	bra       NZ, 0x2006 <.L80>

00001dce <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    1dce:	1e 00 78    	mov.w     [w14], w0
    1dd0:	10 00 78    	mov.w     [w0], w0
    1dd2:	01 20 20    	mov.w     #0x200, w1
    1dd4:	01 08 78    	mov.w     w1, [w0]
    1dd6:	06 00 37    	bra       0x1de4 <.L53>

00001dd8 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    1dd8:	3e 00 90    	mov.w     [w14+6], w0
    1dda:	00 00 e0    	cp0.w     w0
    1ddc:	16 01 3a    	bra       NZ, 0x200a <.L81>
    1dde:	4e 00 90    	mov.w     [w14+8], w0
    1de0:	00 00 e0    	cp0.w     w0
    1de2:	15 01 3a    	bra       NZ, 0x200e <.L82>

00001de4 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    1de4:	18 c0 b3    	mov.b     #0x1, w8
    1de6:	02 40 22    	mov.w     #0x2400, w2
    1de8:	43 a7 24    	mov.w     #0x4a74, w3
    1dea:	5e 00 90    	mov.w     [w14+10], w0
    1dec:	ee 00 90    	mov.w     [w14+12], w1
    1dee:	b5 fa 07    	rcall     0x135a <___gesf2>
    1df0:	00 00 e0    	cp0.w     w0
    1df2:	01 00 3c    	bra       GT, 0x1df6 <.L55>
    1df4:	00 44 eb    	clr.b     w8

00001df6 <.L55>:
    1df6:	08 04 e0    	cp0.b     w8
    1df8:	04 00 32    	bra       Z, 0x1e02 <.L56>

00001dfa <.LSM174>:
        baudrate = FCY/4.;
    1dfa:	00 40 22    	mov.w     #0x2400, w0
    1dfc:	41 a7 24    	mov.w     #0x4a74, w1
    1dfe:	50 07 98    	mov.w     w0, [w14+10]
    1e00:	61 07 98    	mov.w     w1, [w14+12]

00001e02 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    1e02:	18 c0 b3    	mov.b     #0x1, w8
    1e04:	02 40 22    	mov.w     #0x2400, w2
    1e06:	43 17 24    	mov.w     #0x4174, w3
    1e08:	5e 00 90    	mov.w     [w14+10], w0
    1e0a:	ee 00 90    	mov.w     [w14+12], w1
    1e0c:	a4 fa 07    	rcall     0x1356 <___eqsf2>
    1e0e:	00 00 e0    	cp0.w     w0
    1e10:	01 00 35    	bra       LT, 0x1e14 <.L57>
    1e12:	00 44 eb    	clr.b     w8

00001e14 <.L57>:
    1e14:	08 04 e0    	cp0.b     w8
    1e16:	04 00 32    	bra       Z, 0x1e20 <.L58>

00001e18 <.LSM176>:
        baudrate = FCY/(16.*65536.);
    1e18:	00 40 22    	mov.w     #0x2400, w0
    1e1a:	41 17 24    	mov.w     #0x4174, w1
    1e1c:	50 07 98    	mov.w     w0, [w14+10]
    1e1e:	61 07 98    	mov.w     w1, [w14+12]

00001e20 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    1e20:	18 c0 b3    	mov.b     #0x1, w8
    1e22:	02 40 22    	mov.w     #0x2400, w2
    1e24:	43 27 24    	mov.w     #0x4274, w3
    1e26:	5e 00 90    	mov.w     [w14+10], w0
    1e28:	ee 00 90    	mov.w     [w14+12], w1
    1e2a:	95 fa 07    	rcall     0x1356 <___eqsf2>
    1e2c:	00 00 e0    	cp0.w     w0
    1e2e:	01 00 34    	bra       LE, 0x1e32 <.L59>
    1e30:	00 44 eb    	clr.b     w8

00001e32 <.L59>:
    1e32:	08 04 e0    	cp0.b     w8
    1e34:	0f 00 32    	bra       Z, 0x1e54 <.L60>

00001e36 <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    1e36:	1e 00 78    	mov.w     [w14], w0
    1e38:	40 04 90    	mov.w     [w0+8], w8
    1e3a:	5e 01 90    	mov.w     [w14+10], w2
    1e3c:	ee 01 90    	mov.w     [w14+12], w3
    1e3e:	00 40 22    	mov.w     #0x2400, w0
    1e40:	41 97 24    	mov.w     #0x4974, w1
    1e42:	47 fa 07    	rcall     0x12d2 <___divsf3>
    1e44:	02 00 20    	mov.w     #0x0, w2
    1e46:	03 f0 23    	mov.w     #0x3f00, w3
    1e48:	e7 f9 07    	rcall     0x1218 <___addsf3>
    1e4a:	89 fa 07    	rcall     0x135e <___fixunssfsi>
    1e4c:	00 00 78    	mov.w     w0, w0
    1e4e:	00 00 e9    	dec.w     w0, w0
    1e50:	00 0c 78    	mov.w     w0, [w8]
    1e52:	15 00 37    	bra       0x1e7e <.L61>

00001e54 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    1e54:	1e 00 78    	mov.w     [w14], w0
    1e56:	10 00 78    	mov.w     [w0], w0
    1e58:	9e 00 78    	mov.w     [w14], w1
    1e5a:	91 00 78    	mov.w     [w1], w1
    1e5c:	91 00 78    	mov.w     [w1], w1
    1e5e:	01 30 a0    	bset.w    w1, #0x3
    1e60:	01 08 78    	mov.w     w1, [w0]

00001e62 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    1e62:	1e 00 78    	mov.w     [w14], w0
    1e64:	40 04 90    	mov.w     [w0+8], w8
    1e66:	5e 01 90    	mov.w     [w14+10], w2
    1e68:	ee 01 90    	mov.w     [w14+12], w3
    1e6a:	00 40 22    	mov.w     #0x2400, w0
    1e6c:	41 a7 24    	mov.w     #0x4a74, w1
    1e6e:	31 fa 07    	rcall     0x12d2 <___divsf3>
    1e70:	02 00 20    	mov.w     #0x0, w2
    1e72:	03 f0 23    	mov.w     #0x3f00, w3
    1e74:	d1 f9 07    	rcall     0x1218 <___addsf3>
    1e76:	73 fa 07    	rcall     0x135e <___fixunssfsi>
    1e78:	00 00 78    	mov.w     w0, w0
    1e7a:	00 00 e9    	dec.w     w0, w0
    1e7c:	00 0c 78    	mov.w     w0, [w8]

00001e7e <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    1e7e:	ee 48 90    	mov.b     [w14+14], w1
    1e80:	50 c4 b3    	mov.b     #0x45, w0
    1e82:	80 cf 50    	sub.b     w1, w0, [w15]
    1e84:	04 00 32    	bra       Z, 0x1e8e <.L62>
    1e86:	ee 48 90    	mov.b     [w14+14], w1
    1e88:	50 c6 b3    	mov.b     #0x65, w0
    1e8a:	80 cf 50    	sub.b     w1, w0, [w15]
    1e8c:	08 00 3a    	bra       NZ, 0x1e9e <.L63>

00001e8e <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    1e8e:	1e 00 78    	mov.w     [w14], w0
    1e90:	10 00 78    	mov.w     [w0], w0
    1e92:	9e 00 78    	mov.w     [w14], w1
    1e94:	91 00 78    	mov.w     [w1], w1
    1e96:	91 00 78    	mov.w     [w1], w1
    1e98:	01 10 a0    	bset.w    w1, #0x1
    1e9a:	01 08 78    	mov.w     w1, [w0]
    1e9c:	18 00 37    	bra       0x1ece <.L64>

00001e9e <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    1e9e:	ee 48 90    	mov.b     [w14+14], w1
    1ea0:	f0 c4 b3    	mov.b     #0x4f, w0
    1ea2:	80 cf 50    	sub.b     w1, w0, [w15]
    1ea4:	04 00 32    	bra       Z, 0x1eae <.L65>
    1ea6:	ee 48 90    	mov.b     [w14+14], w1
    1ea8:	f0 c6 b3    	mov.b     #0x6f, w0
    1eaa:	80 cf 50    	sub.b     w1, w0, [w15]
    1eac:	08 00 3a    	bra       NZ, 0x1ebe <.L66>

00001eae <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    1eae:	1e 00 78    	mov.w     [w14], w0
    1eb0:	10 00 78    	mov.w     [w0], w0
    1eb2:	9e 00 78    	mov.w     [w14], w1
    1eb4:	91 00 78    	mov.w     [w1], w1
    1eb6:	91 00 78    	mov.w     [w1], w1
    1eb8:	01 20 a0    	bset.w    w1, #0x2
    1eba:	01 08 78    	mov.w     w1, [w0]
    1ebc:	08 00 37    	bra       0x1ece <.L64>

00001ebe <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    1ebe:	ee 48 90    	mov.b     [w14+14], w1
    1ec0:	e0 c4 b3    	mov.b     #0x4e, w0
    1ec2:	80 cf 50    	sub.b     w1, w0, [w15]
    1ec4:	04 00 32    	bra       Z, 0x1ece <.L64>
    1ec6:	ee 48 90    	mov.b     [w14+14], w1
    1ec8:	e0 c6 b3    	mov.b     #0x6e, w0
    1eca:	80 cf 50    	sub.b     w1, w0, [w15]
    1ecc:	a2 00 3a    	bra       NZ, 0x2012 <.L83>

00001ece <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    1ece:	4e b8 97    	mov.w     [w14-8], w0
    1ed0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1ed2:	08 00 3a    	bra       NZ, 0x1ee4 <.L67>

00001ed4 <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    1ed4:	1e 00 78    	mov.w     [w14], w0
    1ed6:	10 00 78    	mov.w     [w0], w0
    1ed8:	9e 00 78    	mov.w     [w14], w1
    1eda:	91 00 78    	mov.w     [w1], w1
    1edc:	91 00 78    	mov.w     [w1], w1
    1ede:	01 00 a0    	bset.w    w1, #0x0
    1ee0:	01 08 78    	mov.w     w1, [w0]
    1ee2:	03 00 37    	bra       0x1eea <.L68>

00001ee4 <.L67>:
    } else if (stopbits!=1) {
    1ee4:	4e b8 97    	mov.w     [w14-8], w0
    1ee6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1ee8:	96 00 3a    	bra       NZ, 0x2016 <.L84>

00001eea <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    1eea:	2e b8 97    	mov.w     [w14-12], w0
    1eec:	00 00 e0    	cp0.w     w0
    1eee:	04 00 3a    	bra       NZ, 0x1ef8 <.L69>

00001ef0 <.LSM190>:
        self->putc = __putc_nobuffer;
    1ef0:	1e 00 78    	mov.w     [w14], w0
    1ef2:	01 5e 21    	mov.w     #0x15e0, w1
    1ef4:	41 18 98    	mov.w     w1, [w0+56]
    1ef6:	36 00 37    	bra       0x1f64 <.L70>

00001ef8 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    1ef8:	1e 00 78    	mov.w     [w14], w0
    1efa:	10 00 90    	mov.w     [w0+2], w0
    1efc:	9e 00 78    	mov.w     [w14], w1
    1efe:	91 00 90    	mov.w     [w1+2], w1
    1f00:	11 01 78    	mov.w     [w1], w2
    1f02:	01 00 22    	mov.w     #0x2000, w1
    1f04:	82 80 70    	ior.w     w1, w2, w1
    1f06:	01 08 78    	mov.w     w1, [w0]

00001f08 <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    1f08:	1e 00 78    	mov.w     [w14], w0
    1f0a:	ae b8 97    	mov.w     [w14-12], w1
    1f0c:	11 10 98    	mov.w     w1, [w0+34]

00001f0e <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    1f0e:	1e 00 78    	mov.w     [w14], w0
    1f10:	9e b8 97    	mov.w     [w14-14], w1
    1f12:	21 10 98    	mov.w     w1, [w0+36]

00001f14 <.LSM194>:
        self->TXbuffer.head = 0;
    1f14:	1e 00 78    	mov.w     [w14], w0
    1f16:	80 00 eb    	clr.w     w1
    1f18:	31 10 98    	mov.w     w1, [w0+38]

00001f1a <.LSM195>:
        self->TXbuffer.tail = 0;
    1f1a:	1e 00 78    	mov.w     [w14], w0
    1f1c:	80 00 eb    	clr.w     w1
    1f1e:	41 10 98    	mov.w     w1, [w0+40]

00001f20 <.LSM196>:
        self->TXbuffer.count = 0;
    1f20:	1e 00 78    	mov.w     [w14], w0
    1f22:	80 00 eb    	clr.w     w1
    1f24:	51 10 98    	mov.w     w1, [w0+42]

00001f26 <.LSM197>:
        self->TXthreshold = TXthreshold;
    1f26:	1e 00 78    	mov.w     [w14], w0
    1f28:	be b8 97    	mov.w     [w14-10], w1
    1f2a:	31 18 98    	mov.w     w1, [w0+54]

00001f2c <.LSM198>:
        self->putc = __putc_buffer;
    1f2c:	1e 00 78    	mov.w     [w14], w0
    1f2e:	21 62 21    	mov.w     #0x1622, w1
    1f30:	41 18 98    	mov.w     w1, [w0+56]

00001f32 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1f32:	1e 00 78    	mov.w     [w14], w0
    1f34:	50 00 90    	mov.w     [w0+10], w0
    1f36:	9e 00 78    	mov.w     [w14], w1
    1f38:	d1 00 90    	mov.w     [w1+10], w1
    1f3a:	11 01 78    	mov.w     [w1], w2
    1f3c:	9e 00 78    	mov.w     [w14], w1
    1f3e:	e1 48 90    	mov.b     [w1+14], w1
    1f40:	81 80 fb    	ze        w1, w1
    1f42:	13 00 20    	mov.w     #0x1, w3
    1f44:	81 18 dd    	sl.w      w3, w1, w1
    1f46:	81 80 ea    	com.w     w1, w1
    1f48:	81 00 61    	and.w     w2, w1, w1
    1f4a:	01 08 78    	mov.w     w1, [w0]

00001f4c <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    1f4c:	1e 00 78    	mov.w     [w14], w0
    1f4e:	60 00 90    	mov.w     [w0+12], w0
    1f50:	9e 00 78    	mov.w     [w14], w1
    1f52:	e1 00 90    	mov.w     [w1+12], w1
    1f54:	11 01 78    	mov.w     [w1], w2
    1f56:	9e 00 78    	mov.w     [w14], w1
    1f58:	e1 48 90    	mov.b     [w1+14], w1
    1f5a:	81 80 fb    	ze        w1, w1
    1f5c:	13 00 20    	mov.w     #0x1, w3
    1f5e:	81 18 dd    	sl.w      w3, w1, w1
    1f60:	82 80 70    	ior.w     w1, w2, w1
    1f62:	01 08 78    	mov.w     w1, [w0]

00001f64 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    1f64:	0e b8 97    	mov.w     [w14-16], w0
    1f66:	00 00 e0    	cp0.w     w0
    1f68:	04 00 3a    	bra       NZ, 0x1f72 <.L71>

00001f6a <.LSM202>:
        self->getc = __getc_nobuffer;
    1f6a:	1e 00 78    	mov.w     [w14], w0
    1f6c:	41 60 21    	mov.w     #0x1604, w1
    1f6e:	51 18 98    	mov.w     w1, [w0+58]
    1f70:	2b 00 37    	bra       0x1fc8 <.L72>

00001f72 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    1f72:	1e 00 78    	mov.w     [w14], w0
    1f74:	8e b8 97    	mov.w     [w14-16], w1
    1f76:	61 10 98    	mov.w     w1, [w0+44]

00001f78 <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    1f78:	1e 00 78    	mov.w     [w14], w0
    1f7a:	fe b0 97    	mov.w     [w14-18], w1
    1f7c:	71 10 98    	mov.w     w1, [w0+46]

00001f7e <.LSM205>:
        self->RXbuffer.head = 0;
    1f7e:	1e 00 78    	mov.w     [w14], w0
    1f80:	80 00 eb    	clr.w     w1
    1f82:	01 18 98    	mov.w     w1, [w0+48]

00001f84 <.LSM206>:
        self->RXbuffer.tail = 0;
    1f84:	1e 00 78    	mov.w     [w14], w0
    1f86:	80 00 eb    	clr.w     w1
    1f88:	11 18 98    	mov.w     w1, [w0+50]

00001f8a <.LSM207>:
        self->RXbuffer.count = 0;
    1f8a:	1e 00 78    	mov.w     [w14], w0
    1f8c:	80 00 eb    	clr.w     w1
    1f8e:	21 18 98    	mov.w     w1, [w0+52]

00001f90 <.LSM208>:
        self->getc = __getc_buffer;
    1f90:	1e 00 78    	mov.w     [w14], w0
    1f92:	21 71 21    	mov.w     #0x1712, w1
    1f94:	51 18 98    	mov.w     w1, [w0+58]

00001f96 <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1f96:	1e 00 78    	mov.w     [w14], w0
    1f98:	50 00 90    	mov.w     [w0+10], w0
    1f9a:	9e 00 78    	mov.w     [w14], w1
    1f9c:	d1 00 90    	mov.w     [w1+10], w1
    1f9e:	11 01 78    	mov.w     [w1], w2
    1fa0:	9e 00 78    	mov.w     [w14], w1
    1fa2:	f1 48 90    	mov.b     [w1+15], w1
    1fa4:	81 80 fb    	ze        w1, w1
    1fa6:	13 00 20    	mov.w     #0x1, w3
    1fa8:	81 18 dd    	sl.w      w3, w1, w1
    1faa:	81 80 ea    	com.w     w1, w1
    1fac:	81 00 61    	and.w     w2, w1, w1
    1fae:	01 08 78    	mov.w     w1, [w0]

00001fb0 <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    1fb0:	1e 00 78    	mov.w     [w14], w0
    1fb2:	60 00 90    	mov.w     [w0+12], w0
    1fb4:	9e 00 78    	mov.w     [w14], w1
    1fb6:	e1 00 90    	mov.w     [w1+12], w1
    1fb8:	11 01 78    	mov.w     [w1], w2
    1fba:	9e 00 78    	mov.w     [w14], w1
    1fbc:	f1 48 90    	mov.b     [w1+15], w1
    1fbe:	81 80 fb    	ze        w1, w1
    1fc0:	13 00 20    	mov.w     #0x1, w3
    1fc2:	81 18 dd    	sl.w      w3, w1, w1
    1fc4:	82 80 70    	ior.w     w1, w2, w1
    1fc6:	01 08 78    	mov.w     w1, [w0]

00001fc8 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    1fc8:	1e 00 78    	mov.w     [w14], w0
    1fca:	10 00 78    	mov.w     [w0], w0
    1fcc:	9e 00 78    	mov.w     [w14], w1
    1fce:	91 00 78    	mov.w     [w1], w1
    1fd0:	11 01 78    	mov.w     [w1], w2
    1fd2:	01 00 28    	mov.w     #0x8000, w1
    1fd4:	82 80 70    	ior.w     w1, w2, w1
    1fd6:	01 08 78    	mov.w     w1, [w0]

00001fd8 <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    1fd8:	1e 00 78    	mov.w     [w14], w0
    1fda:	10 00 90    	mov.w     [w0+2], w0
    1fdc:	9e 00 78    	mov.w     [w14], w1
    1fde:	91 00 90    	mov.w     [w1+2], w1
    1fe0:	11 01 78    	mov.w     [w1], w2
    1fe2:	01 40 20    	mov.w     #0x400, w1
    1fe4:	82 80 70    	ior.w     w1, w2, w1
    1fe6:	01 08 78    	mov.w     w1, [w0]
    1fe8:	17 00 37    	bra       0x2018 <.L40>

00001fea <.L73>:
    1fea:	00 00 00    	nop       
    1fec:	15 00 37    	bra       0x2018 <.L40>

00001fee <.L74>:
    1fee:	00 00 00    	nop       
    1ff0:	13 00 37    	bra       0x2018 <.L40>

00001ff2 <.L75>:
    1ff2:	00 00 00    	nop       
    1ff4:	11 00 37    	bra       0x2018 <.L40>

00001ff6 <.L76>:
    1ff6:	00 00 00    	nop       
    1ff8:	0f 00 37    	bra       0x2018 <.L40>

00001ffa <.L77>:
    1ffa:	00 00 00    	nop       
    1ffc:	0d 00 37    	bra       0x2018 <.L40>

00001ffe <.L78>:
    1ffe:	00 00 00    	nop       
    2000:	0b 00 37    	bra       0x2018 <.L40>

00002002 <.L79>:
    2002:	00 00 00    	nop       
    2004:	09 00 37    	bra       0x2018 <.L40>

00002006 <.L80>:
    2006:	00 00 00    	nop       
    2008:	07 00 37    	bra       0x2018 <.L40>

0000200a <.L81>:
    200a:	00 00 00    	nop       
    200c:	05 00 37    	bra       0x2018 <.L40>

0000200e <.L82>:
    200e:	00 00 00    	nop       
    2010:	03 00 37    	bra       0x2018 <.L40>

00002012 <.L83>:
    2012:	00 00 00    	nop       
    2014:	01 00 37    	bra       0x2018 <.L40>

00002016 <.L84>:
    2016:	00 00 00    	nop       

00002018 <.L40>:
}
    2018:	4f 04 78    	mov.w     [--w15], w8
    201a:	00 80 fa    	ulnk      
    201c:	00 00 06    	return    

0000201e <_uart_close>:

void uart_close(_UART *self) {
    201e:	02 00 fa    	lnk       #0x2
    2020:	00 0f 78    	mov.w     w0, [w14]

00002022 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2022:	1e 00 78    	mov.w     [w14], w0
    2024:	10 00 90    	mov.w     [w0+2], w0
    2026:	9e 00 78    	mov.w     [w14], w1
    2028:	91 00 90    	mov.w     [w1+2], w1
    202a:	11 01 78    	mov.w     [w1], w2
    202c:	f1 bf 2f    	mov.w     #0xfbff, w1
    202e:	81 00 61    	and.w     w2, w1, w1
    2030:	01 08 78    	mov.w     w1, [w0]

00002032 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    2032:	1e 00 78    	mov.w     [w14], w0
    2034:	10 00 78    	mov.w     [w0], w0
    2036:	80 00 eb    	clr.w     w1
    2038:	01 08 78    	mov.w     w1, [w0]

0000203a <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    203a:	1e 00 78    	mov.w     [w14], w0
    203c:	60 00 90    	mov.w     [w0+12], w0
    203e:	9e 00 78    	mov.w     [w14], w1
    2040:	e1 00 90    	mov.w     [w1+12], w1
    2042:	11 01 78    	mov.w     [w1], w2
    2044:	9e 00 78    	mov.w     [w14], w1
    2046:	e1 48 90    	mov.b     [w1+14], w1
    2048:	81 80 fb    	ze        w1, w1
    204a:	13 00 20    	mov.w     #0x1, w3
    204c:	81 18 dd    	sl.w      w3, w1, w1
    204e:	81 80 ea    	com.w     w1, w1
    2050:	81 00 61    	and.w     w2, w1, w1
    2052:	01 08 78    	mov.w     w1, [w0]

00002054 <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2054:	1e 00 78    	mov.w     [w14], w0
    2056:	60 00 90    	mov.w     [w0+12], w0
    2058:	9e 00 78    	mov.w     [w14], w1
    205a:	e1 00 90    	mov.w     [w1+12], w1
    205c:	11 01 78    	mov.w     [w1], w2
    205e:	9e 00 78    	mov.w     [w14], w1
    2060:	f1 48 90    	mov.b     [w1+15], w1
    2062:	81 80 fb    	ze        w1, w1
    2064:	13 00 20    	mov.w     #0x1, w3
    2066:	81 18 dd    	sl.w      w3, w1, w1
    2068:	81 80 ea    	com.w     w1, w1
    206a:	81 00 61    	and.w     w2, w1, w1
    206c:	01 08 78    	mov.w     w1, [w0]

0000206e <.LSM226>:
    self->putc = NULL;
    206e:	1e 00 78    	mov.w     [w14], w0
    2070:	80 00 eb    	clr.w     w1
    2072:	41 18 98    	mov.w     w1, [w0+56]

00002074 <.LSM227>:
    self->getc = NULL;
    2074:	1e 00 78    	mov.w     [w14], w0
    2076:	80 00 eb    	clr.w     w1
    2078:	51 18 98    	mov.w     w1, [w0+58]

0000207a <.LSM228>:
    if (self->TX) {
    207a:	1e 00 78    	mov.w     [w14], w0
    207c:	50 08 90    	mov.w     [w0+26], w0
    207e:	00 00 e0    	cp0.w     w0
    2080:	2f 00 32    	bra       Z, 0x20e0 <.L86>

00002082 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2082:	11 3a 80    	mov.w     0x742, w1
    2084:	f0 0b 20    	mov.w     #0xbf, w0
    2086:	00 81 60    	and.w     w1, w0, w2
    2088:	60 04 20    	mov.w     #0x46, w0
    208a:	71 05 20    	mov.w     #0x57, w1
    208c:	23 74 20    	mov.w     #0x742, w3
    208e:	80 49 78    	mov.b     w0, [w3]
    2090:	81 49 78    	mov.b     w1, [w3]
    2092:	82 49 78    	mov.b     w2, [w3]

00002094 <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2094:	1e 00 78    	mov.w     [w14], w0
    2096:	50 08 90    	mov.w     [w0+26], w0
    2098:	70 00 90    	mov.w     [w0+14], w0
    209a:	9e 00 78    	mov.w     [w14], w1
    209c:	d1 08 90    	mov.w     [w1+26], w1
    209e:	f1 00 90    	mov.w     [w1+14], w1
    20a0:	11 01 78    	mov.w     [w1], w2
    20a2:	9e 00 78    	mov.w     [w14], w1
    20a4:	d1 08 90    	mov.w     [w1+26], w1
    20a6:	a1 48 90    	mov.b     [w1+10], w1
    20a8:	81 80 fb    	ze        w1, w1
    20aa:	f3 03 20    	mov.w     #0x3f, w3
    20ac:	81 18 dd    	sl.w      w3, w1, w1
    20ae:	81 80 ea    	com.w     w1, w1
    20b0:	81 00 61    	and.w     w2, w1, w1
    20b2:	01 08 78    	mov.w     w1, [w0]

000020b4 <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    20b4:	11 3a 80    	mov.w     0x742, w1
    20b6:	00 04 20    	mov.w     #0x40, w0
    20b8:	01 01 70    	ior.w     w0, w1, w2
    20ba:	60 04 20    	mov.w     #0x46, w0
    20bc:	71 05 20    	mov.w     #0x57, w1
    20be:	23 74 20    	mov.w     #0x742, w3
    20c0:	80 49 78    	mov.b     w0, [w3]
    20c2:	81 49 78    	mov.b     w1, [w3]
    20c4:	82 49 78    	mov.b     w2, [w3]

000020c6 <.LSM232>:
        self->TX->owner = NULL;
    20c6:	1e 00 78    	mov.w     [w14], w0
    20c8:	50 08 90    	mov.w     [w0+26], w0
    20ca:	80 00 eb    	clr.w     w1
    20cc:	01 08 98    	mov.w     w1, [w0+16]

000020ce <.LSM233>:
        pin_digitalOut(self->TX);
    20ce:	1e 00 78    	mov.w     [w14], w0
    20d0:	50 08 90    	mov.w     [w0+26], w0
    20d2:	2c 0c 07    	rcall     0x392c <_pin_digitalOut>

000020d4 <.LSM234>:
        pin_set(self->TX);
    20d4:	1e 00 78    	mov.w     [w14], w0
    20d6:	50 08 90    	mov.w     [w0+26], w0
    20d8:	86 0c 07    	rcall     0x39e6 <_pin_set>

000020da <.LSM235>:
        self->TX = NULL;
    20da:	1e 00 78    	mov.w     [w14], w0
    20dc:	80 00 eb    	clr.w     w1
    20de:	51 08 98    	mov.w     w1, [w0+26]

000020e0 <.L86>:
    }
    if (self->RX) {
    20e0:	1e 00 78    	mov.w     [w14], w0
    20e2:	60 08 90    	mov.w     [w0+28], w0
    20e4:	00 00 e0    	cp0.w     w0
    20e6:	28 00 32    	bra       Z, 0x2138 <.L87>

000020e8 <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    20e8:	11 3a 80    	mov.w     0x742, w1
    20ea:	f0 0b 20    	mov.w     #0xbf, w0
    20ec:	00 81 60    	and.w     w1, w0, w2
    20ee:	60 04 20    	mov.w     #0x46, w0
    20f0:	71 05 20    	mov.w     #0x57, w1
    20f2:	23 74 20    	mov.w     #0x742, w3
    20f4:	80 49 78    	mov.b     w0, [w3]
    20f6:	81 49 78    	mov.b     w1, [w3]
    20f8:	82 49 78    	mov.b     w2, [w3]

000020fa <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    20fa:	1e 00 78    	mov.w     [w14], w0
    20fc:	00 08 90    	mov.w     [w0+16], w0
    20fe:	9e 00 78    	mov.w     [w14], w1
    2100:	81 08 90    	mov.w     [w1+16], w1
    2102:	11 01 78    	mov.w     [w1], w2
    2104:	9e 00 78    	mov.w     [w14], w1
    2106:	c1 50 90    	mov.b     [w1+20], w1
    2108:	81 80 fb    	ze        w1, w1
    210a:	f3 03 20    	mov.w     #0x3f, w3
    210c:	81 18 dd    	sl.w      w3, w1, w1
    210e:	82 80 70    	ior.w     w1, w2, w1
    2110:	01 08 78    	mov.w     w1, [w0]

00002112 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2112:	11 3a 80    	mov.w     0x742, w1
    2114:	00 04 20    	mov.w     #0x40, w0
    2116:	01 01 70    	ior.w     w0, w1, w2
    2118:	60 04 20    	mov.w     #0x46, w0
    211a:	71 05 20    	mov.w     #0x57, w1
    211c:	23 74 20    	mov.w     #0x742, w3
    211e:	80 49 78    	mov.b     w0, [w3]
    2120:	81 49 78    	mov.b     w1, [w3]
    2122:	82 49 78    	mov.b     w2, [w3]

00002124 <.LSM240>:
        self->RX->owner = NULL;
    2124:	1e 00 78    	mov.w     [w14], w0
    2126:	60 08 90    	mov.w     [w0+28], w0
    2128:	80 00 eb    	clr.w     w1
    212a:	01 08 98    	mov.w     w1, [w0+16]

0000212c <.LSM241>:
        pin_digitalIn(self->RX);
    212c:	1e 00 78    	mov.w     [w14], w0
    212e:	60 08 90    	mov.w     [w0+28], w0
    2130:	d6 0b 07    	rcall     0x38de <_pin_digitalIn>

00002132 <.LSM242>:
        self->RX = NULL;
    2132:	1e 00 78    	mov.w     [w14], w0
    2134:	80 00 eb    	clr.w     w1
    2136:	61 08 98    	mov.w     w1, [w0+28]

00002138 <.L87>:
    }
    if (self->RTS) {
    2138:	1e 00 78    	mov.w     [w14], w0
    213a:	70 08 90    	mov.w     [w0+30], w0
    213c:	00 00 e0    	cp0.w     w0
    213e:	2f 00 32    	bra       Z, 0x219e <.L88>

00002140 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2140:	11 3a 80    	mov.w     0x742, w1
    2142:	f0 0b 20    	mov.w     #0xbf, w0
    2144:	00 81 60    	and.w     w1, w0, w2
    2146:	60 04 20    	mov.w     #0x46, w0
    2148:	71 05 20    	mov.w     #0x57, w1
    214a:	23 74 20    	mov.w     #0x742, w3
    214c:	80 49 78    	mov.b     w0, [w3]
    214e:	81 49 78    	mov.b     w1, [w3]
    2150:	82 49 78    	mov.b     w2, [w3]

00002152 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2152:	1e 00 78    	mov.w     [w14], w0
    2154:	70 08 90    	mov.w     [w0+30], w0
    2156:	70 00 90    	mov.w     [w0+14], w0
    2158:	9e 00 78    	mov.w     [w14], w1
    215a:	f1 08 90    	mov.w     [w1+30], w1
    215c:	f1 00 90    	mov.w     [w1+14], w1
    215e:	11 01 78    	mov.w     [w1], w2
    2160:	9e 00 78    	mov.w     [w14], w1
    2162:	f1 08 90    	mov.w     [w1+30], w1
    2164:	a1 48 90    	mov.b     [w1+10], w1
    2166:	81 80 fb    	ze        w1, w1
    2168:	f3 03 20    	mov.w     #0x3f, w3
    216a:	81 18 dd    	sl.w      w3, w1, w1
    216c:	81 80 ea    	com.w     w1, w1
    216e:	81 00 61    	and.w     w2, w1, w1
    2170:	01 08 78    	mov.w     w1, [w0]

00002172 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2172:	11 3a 80    	mov.w     0x742, w1
    2174:	00 04 20    	mov.w     #0x40, w0
    2176:	01 01 70    	ior.w     w0, w1, w2
    2178:	60 04 20    	mov.w     #0x46, w0
    217a:	71 05 20    	mov.w     #0x57, w1
    217c:	23 74 20    	mov.w     #0x742, w3
    217e:	80 49 78    	mov.b     w0, [w3]
    2180:	81 49 78    	mov.b     w1, [w3]
    2182:	82 49 78    	mov.b     w2, [w3]

00002184 <.LSM247>:
        self->RTS->owner = NULL;
    2184:	1e 00 78    	mov.w     [w14], w0
    2186:	70 08 90    	mov.w     [w0+30], w0
    2188:	80 00 eb    	clr.w     w1
    218a:	01 08 98    	mov.w     w1, [w0+16]

0000218c <.LSM248>:
        pin_digitalOut(self->RTS);
    218c:	1e 00 78    	mov.w     [w14], w0
    218e:	70 08 90    	mov.w     [w0+30], w0
    2190:	cd 0b 07    	rcall     0x392c <_pin_digitalOut>

00002192 <.LSM249>:
        pin_set(self->RTS);
    2192:	1e 00 78    	mov.w     [w14], w0
    2194:	70 08 90    	mov.w     [w0+30], w0
    2196:	27 0c 07    	rcall     0x39e6 <_pin_set>

00002198 <.LSM250>:
        self->RTS = NULL;
    2198:	1e 00 78    	mov.w     [w14], w0
    219a:	80 00 eb    	clr.w     w1
    219c:	71 08 98    	mov.w     w1, [w0+30]

0000219e <.L88>:
    }
    if (self->CTS) {
    219e:	1e 00 78    	mov.w     [w14], w0
    21a0:	00 10 90    	mov.w     [w0+32], w0
    21a2:	00 00 e0    	cp0.w     w0
    21a4:	28 00 32    	bra       Z, 0x21f6 <.L85>

000021a6 <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    21a6:	11 3a 80    	mov.w     0x742, w1
    21a8:	f0 0b 20    	mov.w     #0xbf, w0
    21aa:	00 81 60    	and.w     w1, w0, w2
    21ac:	60 04 20    	mov.w     #0x46, w0
    21ae:	71 05 20    	mov.w     #0x57, w1
    21b0:	23 74 20    	mov.w     #0x742, w3
    21b2:	80 49 78    	mov.b     w0, [w3]
    21b4:	81 49 78    	mov.b     w1, [w3]
    21b6:	82 49 78    	mov.b     w2, [w3]

000021b8 <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    21b8:	1e 00 78    	mov.w     [w14], w0
    21ba:	10 08 90    	mov.w     [w0+18], w0
    21bc:	9e 00 78    	mov.w     [w14], w1
    21be:	91 08 90    	mov.w     [w1+18], w1
    21c0:	11 01 78    	mov.w     [w1], w2
    21c2:	9e 00 78    	mov.w     [w14], w1
    21c4:	d1 50 90    	mov.b     [w1+21], w1
    21c6:	81 80 fb    	ze        w1, w1
    21c8:	f3 03 20    	mov.w     #0x3f, w3
    21ca:	81 18 dd    	sl.w      w3, w1, w1
    21cc:	82 80 70    	ior.w     w1, w2, w1
    21ce:	01 08 78    	mov.w     w1, [w0]

000021d0 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    21d0:	11 3a 80    	mov.w     0x742, w1
    21d2:	00 04 20    	mov.w     #0x40, w0
    21d4:	01 01 70    	ior.w     w0, w1, w2
    21d6:	60 04 20    	mov.w     #0x46, w0
    21d8:	71 05 20    	mov.w     #0x57, w1
    21da:	23 74 20    	mov.w     #0x742, w3
    21dc:	80 49 78    	mov.b     w0, [w3]
    21de:	81 49 78    	mov.b     w1, [w3]
    21e0:	82 49 78    	mov.b     w2, [w3]

000021e2 <.LSM255>:
        self->CTS->owner = NULL;
    21e2:	1e 00 78    	mov.w     [w14], w0
    21e4:	00 10 90    	mov.w     [w0+32], w0
    21e6:	80 00 eb    	clr.w     w1
    21e8:	01 08 98    	mov.w     w1, [w0+16]

000021ea <.LSM256>:
        pin_digitalIn(self->CTS);
    21ea:	1e 00 78    	mov.w     [w14], w0
    21ec:	00 10 90    	mov.w     [w0+32], w0
    21ee:	77 0b 07    	rcall     0x38de <_pin_digitalIn>

000021f0 <.LSM257>:
        self->CTS = NULL;
    21f0:	1e 00 78    	mov.w     [w14], w0
    21f2:	80 00 eb    	clr.w     w1
    21f4:	01 10 98    	mov.w     w1, [w0+32]

000021f6 <.L85>:
    }
}
    21f6:	00 80 fa    	ulnk      
    21f8:	00 00 06    	return    

000021fa <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    21fa:	04 00 fa    	lnk       #0x4
    21fc:	00 0f 78    	mov.w     w0, [w14]
    21fe:	21 47 98    	mov.b     w1, [w14+2]

00002200 <.LSM260>:
    if (self->putc)
    2200:	1e 00 78    	mov.w     [w14], w0
    2202:	40 18 90    	mov.w     [w0+56], w0
    2204:	00 00 e0    	cp0.w     w0
    2206:	05 00 32    	bra       Z, 0x2212 <.L90>

00002208 <.LSM261>:
        self->putc(self, ch);
    2208:	1e 00 78    	mov.w     [w14], w0
    220a:	40 19 90    	mov.w     [w0+56], w2
    220c:	ae 40 90    	mov.b     [w14+2], w1
    220e:	1e 00 78    	mov.w     [w14], w0
    2210:	02 00 01    	call      w2

00002212 <.L90>:
}
    2212:	00 80 fa    	ulnk      
    2214:	00 00 06    	return    

00002216 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2216:	02 00 fa    	lnk       #0x2
    2218:	00 0f 78    	mov.w     w0, [w14]

0000221a <.LSM264>:
    if (self->getc)
    221a:	1e 00 78    	mov.w     [w14], w0
    221c:	50 18 90    	mov.w     [w0+58], w0
    221e:	00 00 e0    	cp0.w     w0
    2220:	05 00 32    	bra       Z, 0x222c <.L93>

00002222 <.LSM265>:
        return self->getc(self);
    2222:	1e 00 78    	mov.w     [w14], w0
    2224:	d0 18 90    	mov.w     [w0+58], w1
    2226:	1e 00 78    	mov.w     [w14], w0
    2228:	01 00 01    	call      w1
    222a:	01 00 37    	bra       0x222e <.L94>

0000222c <.L93>:
    else
        return 0xFF;
    222c:	00 c0 eb    	setm.b    w0

0000222e <.L94>:
}
    222e:	00 80 fa    	ulnk      
    2230:	00 00 06    	return    

00002232 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2232:	02 00 fa    	lnk       #0x2
    2234:	00 0f 78    	mov.w     w0, [w14]

00002236 <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2236:	1e 00 78    	mov.w     [w14], w0
    2238:	10 00 90    	mov.w     [w0+2], w0
    223a:	90 00 78    	mov.w     [w0], w1
    223c:	00 40 20    	mov.w     #0x400, w0
    223e:	00 80 60    	and.w     w1, w0, w0
    2240:	00 00 e0    	cp0.w     w0
    2242:	08 00 3a    	bra       NZ, 0x2254 <.L95>

00002244 <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2244:	1e 00 78    	mov.w     [w14], w0
    2246:	10 00 90    	mov.w     [w0+2], w0
    2248:	9e 00 78    	mov.w     [w14], w1
    224a:	91 00 90    	mov.w     [w1+2], w1
    224c:	11 01 78    	mov.w     [w1], w2
    224e:	01 40 20    	mov.w     #0x400, w1
    2250:	82 80 70    	ior.w     w1, w2, w1
    2252:	01 08 78    	mov.w     w1, [w0]

00002254 <.L95>:
}
    2254:	00 80 fa    	ulnk      
    2256:	00 00 06    	return    

00002258 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2258:	04 00 fa    	lnk       #0x4
    225a:	00 0f 78    	mov.w     w0, [w14]
    225c:	11 07 98    	mov.w     w1, [w14+2]

0000225e <.LSM273>:
    while (*str)
    225e:	08 00 37    	bra       0x2270 <.L98>

00002260 <.L99>:
        uart_putc(self, *str++);
    2260:	1e 00 90    	mov.w     [w14+2], w0
    2262:	10 40 78    	mov.b     [w0], w0
    2264:	9e 00 90    	mov.w     [w14+2], w1
    2266:	81 00 e8    	inc.w     w1, w1
    2268:	11 07 98    	mov.w     w1, [w14+2]
    226a:	80 40 78    	mov.b     w0, w1
    226c:	1e 00 78    	mov.w     [w14], w0
    226e:	c5 ff 07    	rcall     0x21fa <_uart_putc>

00002270 <.L98>:
    2270:	1e 00 90    	mov.w     [w14+2], w0
    2272:	10 40 78    	mov.b     [w0], w0
    2274:	00 04 e0    	cp0.b     w0
    2276:	f4 ff 3a    	bra       NZ, 0x2260 <.L99>

00002278 <.LSM276>:
    uart_flushTxBuffer(self);
    2278:	1e 00 78    	mov.w     [w14], w0
    227a:	db ff 07    	rcall     0x2232 <_uart_flushTxBuffer>

0000227c <.LSM277>:
}
    227c:	00 80 fa    	ulnk      
    227e:	00 00 06    	return    

00002280 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2280:	0a 00 fa    	lnk       #0xa
    2282:	20 07 98    	mov.w     w0, [w14+4]
    2284:	31 07 98    	mov.w     w1, [w14+6]
    2286:	42 07 98    	mov.w     w2, [w14+8]

00002288 <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2288:	4e 00 90    	mov.w     [w14+8], w0
    228a:	00 00 e0    	cp0.w     w0
    228c:	87 00 32    	bra       Z, 0x239c <.L113>

0000228e <.LSM280>:
        return;

    if (len==1) {
    228e:	4e 00 90    	mov.w     [w14+8], w0
    2290:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2292:	04 00 3a    	bra       NZ, 0x229c <.L103>

00002294 <.LSM281>:
        *str = '\0';
    2294:	3e 00 90    	mov.w     [w14+6], w0
    2296:	80 40 eb    	clr.b     w1
    2298:	01 48 78    	mov.b     w1, [w0]

0000229a <.LSM282>:
        return;
    229a:	81 00 37    	bra       0x239e <.L100>

0000229c <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    229c:	b1 c1 b3    	mov.b     #0x1b, w1
    229e:	2e 00 90    	mov.w     [w14+4], w0
    22a0:	ac ff 07    	rcall     0x21fa <_uart_putc>

000022a2 <.LSM284>:
    uart_putc(self, '7');
    22a2:	71 c3 b3    	mov.b     #0x37, w1
    22a4:	2e 00 90    	mov.w     [w14+4], w0
    22a6:	a9 ff 07    	rcall     0x21fa <_uart_putc>

000022a8 <.LSM285>:
    uart_flushTxBuffer(self);
    22a8:	2e 00 90    	mov.w     [w14+4], w0
    22aa:	c3 ff 07    	rcall     0x2232 <_uart_flushTxBuffer>

000022ac <.LSM286>:
    start = str;
    22ac:	be 00 90    	mov.w     [w14+6], w1
    22ae:	11 07 98    	mov.w     w1, [w14+2]

000022b0 <.LSM287>:
    left = len;
    22b0:	ce 00 90    	mov.w     [w14+8], w1
    22b2:	01 0f 78    	mov.w     w1, [w14]
    22b4:	03 00 37    	bra       0x22bc <.L112>

000022b6 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    22b6:	00 00 00    	nop       
    22b8:	01 00 37    	bra       0x22bc <.L112>

000022ba <.L115>:
    22ba:	00 00 00    	nop       

000022bc <.L112>:
    22bc:	2e 00 90    	mov.w     [w14+4], w0
    22be:	ab ff 07    	rcall     0x2216 <_uart_getc>
    22c0:	be 00 90    	mov.w     [w14+6], w1
    22c2:	80 48 78    	mov.b     w0, [w1]

000022c4 <.LSM290>:
    22c4:	3e 00 90    	mov.w     [w14+6], w0
    22c6:	10 40 78    	mov.b     [w0], w0
    22c8:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    22ca:	0c 00 3a    	bra       NZ, 0x22e4 <.L104>

000022cc <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    22cc:	3e 00 90    	mov.w     [w14+6], w0
    22ce:	80 40 eb    	clr.b     w1
    22d0:	01 48 78    	mov.b     w1, [w0]

000022d2 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    22d2:	a1 c0 b3    	mov.b     #0xa, w1
    22d4:	2e 00 90    	mov.w     [w14+4], w0
    22d6:	91 ff 07    	rcall     0x21fa <_uart_putc>

000022d8 <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    22d8:	d1 c0 b3    	mov.b     #0xd, w1
    22da:	2e 00 90    	mov.w     [w14+4], w0
    22dc:	8e ff 07    	rcall     0x21fa <_uart_putc>

000022de <.LSM294>:
    uart_flushTxBuffer(self);
    22de:	2e 00 90    	mov.w     [w14+4], w0
    22e0:	a8 ff 07    	rcall     0x2232 <_uart_flushTxBuffer>
    22e2:	5d 00 37    	bra       0x239e <.L100>

000022e4 <.L104>:
    22e4:	3e 00 90    	mov.w     [w14+6], w0
    22e6:	10 40 78    	mov.b     [w0], w0
    22e8:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    22ea:	16 00 3a    	bra       NZ, 0x2318 <.L105>

000022ec <.LSM296>:
    22ec:	b1 c1 b3    	mov.b     #0x1b, w1
    22ee:	2e 00 90    	mov.w     [w14+4], w0
    22f0:	84 ff 07    	rcall     0x21fa <_uart_putc>

000022f2 <.LSM297>:
    22f2:	81 c3 b3    	mov.b     #0x38, w1
    22f4:	2e 00 90    	mov.w     [w14+4], w0
    22f6:	81 ff 07    	rcall     0x21fa <_uart_putc>

000022f8 <.LSM298>:
    22f8:	b1 c1 b3    	mov.b     #0x1b, w1
    22fa:	2e 00 90    	mov.w     [w14+4], w0
    22fc:	7e ff 07    	rcall     0x21fa <_uart_putc>

000022fe <.LSM299>:
    22fe:	b1 c5 b3    	mov.b     #0x5b, w1
    2300:	2e 00 90    	mov.w     [w14+4], w0
    2302:	7b ff 07    	rcall     0x21fa <_uart_putc>

00002304 <.LSM300>:
    2304:	b1 c4 b3    	mov.b     #0x4b, w1
    2306:	2e 00 90    	mov.w     [w14+4], w0
    2308:	78 ff 07    	rcall     0x21fa <_uart_putc>

0000230a <.LSM301>:
    230a:	2e 00 90    	mov.w     [w14+4], w0
    230c:	92 ff 07    	rcall     0x2232 <_uart_flushTxBuffer>

0000230e <.LSM302>:
    230e:	9e 00 90    	mov.w     [w14+2], w1
    2310:	31 07 98    	mov.w     w1, [w14+6]

00002312 <.LSM303>:
    2312:	ce 00 90    	mov.w     [w14+8], w1
    2314:	01 0f 78    	mov.w     w1, [w14]

00002316 <.LSM304>:
    2316:	41 00 37    	bra       0x239a <.L106>

00002318 <.L105>:
    2318:	3e 00 90    	mov.w     [w14+6], w0
    231a:	10 40 78    	mov.b     [w0], w0
    231c:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    231e:	05 00 32    	bra       Z, 0x232a <.L107>

00002320 <.LSM306>:
    2320:	3e 00 90    	mov.w     [w14+6], w0
    2322:	90 40 78    	mov.b     [w0], w1

00002324 <.LSM307>:
    2324:	f0 c7 b3    	mov.b     #0x7f, w0
    2326:	80 cf 50    	sub.b     w1, w0, [w15]
    2328:	1a 00 3a    	bra       NZ, 0x235e <.L108>

0000232a <.L107>:
    232a:	be 00 90    	mov.w     [w14+6], w1
    232c:	1e 00 90    	mov.w     [w14+2], w0
    232e:	80 8f 50    	sub.w     w1, w0, [w15]
    2330:	10 00 36    	bra       LEU, 0x2352 <.L109>

00002332 <.LSM309>:
    2332:	81 c0 b3    	mov.b     #0x8, w1
    2334:	2e 00 90    	mov.w     [w14+4], w0
    2336:	61 ff 07    	rcall     0x21fa <_uart_putc>

00002338 <.LSM310>:
    2338:	01 c2 b3    	mov.b     #0x20, w1
    233a:	2e 00 90    	mov.w     [w14+4], w0
    233c:	5e ff 07    	rcall     0x21fa <_uart_putc>

0000233e <.LSM311>:
    233e:	81 c0 b3    	mov.b     #0x8, w1
    2340:	2e 00 90    	mov.w     [w14+4], w0
    2342:	5b ff 07    	rcall     0x21fa <_uart_putc>

00002344 <.LSM312>:
    2344:	2e 00 90    	mov.w     [w14+4], w0
    2346:	75 ff 07    	rcall     0x2232 <_uart_flushTxBuffer>

00002348 <.LSM313>:
    2348:	3e 00 90    	mov.w     [w14+6], w0
    234a:	00 00 e9    	dec.w     w0, w0
    234c:	30 07 98    	mov.w     w0, [w14+6]

0000234e <.LSM314>:
    234e:	1e 0f e8    	inc.w     [w14], [w14]
    2350:	05 00 37    	bra       0x235c <.L110>

00002352 <.L109>:
    2352:	71 c0 b3    	mov.b     #0x7, w1
    2354:	2e 00 90    	mov.w     [w14+4], w0
    2356:	51 ff 07    	rcall     0x21fa <_uart_putc>

00002358 <.LSM316>:
    2358:	2e 00 90    	mov.w     [w14+4], w0
    235a:	6b ff 07    	rcall     0x2232 <_uart_flushTxBuffer>

0000235c <.L110>:
    235c:	1e 00 37    	bra       0x239a <.L106>

0000235e <.L108>:
    235e:	1e 00 78    	mov.w     [w14], w0
    2360:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2362:	06 00 3a    	bra       NZ, 0x2370 <.L111>

00002364 <.LSM319>:
    2364:	71 c0 b3    	mov.b     #0x7, w1
    2366:	2e 00 90    	mov.w     [w14+4], w0
    2368:	48 ff 07    	rcall     0x21fa <_uart_putc>

0000236a <.LSM320>:
    236a:	2e 00 90    	mov.w     [w14+4], w0
    236c:	62 ff 07    	rcall     0x2232 <_uart_flushTxBuffer>

0000236e <.LSM321>:
    236e:	15 00 37    	bra       0x239a <.L106>

00002370 <.L111>:
    2370:	3e 00 90    	mov.w     [w14+6], w0
    2372:	10 40 78    	mov.b     [w0], w0
    2374:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2376:	9f ff 36    	bra       LEU, 0x22b6 <.L114>
    2378:	3e 00 90    	mov.w     [w14+6], w0
    237a:	90 40 78    	mov.b     [w0], w1
    237c:	e0 c7 b3    	mov.b     #0x7e, w0
    237e:	80 cf 50    	sub.b     w1, w0, [w15]
    2380:	9c ff 3e    	bra       GTU, 0x22ba <.L115>

00002382 <.LSM323>:
    2382:	3e 00 90    	mov.w     [w14+6], w0
    2384:	10 40 78    	mov.b     [w0], w0
    2386:	80 40 78    	mov.b     w0, w1
    2388:	2e 00 90    	mov.w     [w14+4], w0
    238a:	37 ff 07    	rcall     0x21fa <_uart_putc>

0000238c <.LSM324>:
    238c:	2e 00 90    	mov.w     [w14+4], w0
    238e:	51 ff 07    	rcall     0x2232 <_uart_flushTxBuffer>

00002390 <.LSM325>:
    2390:	3e 00 90    	mov.w     [w14+6], w0
    2392:	00 00 e8    	inc.w     w0, w0
    2394:	30 07 98    	mov.w     w0, [w14+6]

00002396 <.LSM326>:
    2396:	1e 0f e9    	dec.w     [w14], [w14]

00002398 <.LSM327>:
    2398:	91 ff 37    	bra       0x22bc <.L112>

0000239a <.L106>:
    239a:	90 ff 37    	bra       0x22bc <.L112>

0000239c <.L113>:
    239c:	00 00 00    	nop       

0000239e <.L100>:
}
    239e:	00 80 fa    	ulnk      
    23a0:	00 00 06    	return    

000023a2 <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    23a2:	04 00 fa    	lnk       #0x4

000023a4 <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    23a4:	94 24 a8    	bset.b    0x494, #0x1

000023a6 <.LSM2>:
    U1ADDR = 0;
    23a6:	96 24 ef    	clr.w     0x496

000023a8 <.LSM3>:
    U1EIR = 0xFF;
    23a8:	f0 0f 20    	mov.w     #0xff, w0
    23aa:	70 24 88    	mov.w     w0, 0x48e

000023ac <.LSM4>:
    U1CONbits.PPBRST = 0;
    23ac:	94 24 a9    	bclr.b    0x494, #0x1

000023ae <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    23ae:	a0 4a 20    	mov.w     #0x4aa, w0
    23b0:	10 07 98    	mov.w     w0, [w14+2]

000023b2 <.LSM6>:
    for (n = 0; n<16; n++)
    23b2:	00 40 eb    	clr.b     w0
    23b4:	00 4f 78    	mov.b     w0, [w14]
    23b6:	07 00 37    	bra       0x23c6 <.L2>

000023b8 <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    23b8:	1e 80 fb    	ze        [w14], w0
    23ba:	00 00 40    	add.w     w0, w0, w0
    23bc:	9e 00 90    	mov.w     [w14+2], w1
    23be:	00 80 40    	add.w     w1, w0, w0
    23c0:	80 00 eb    	clr.w     w1
    23c2:	01 08 78    	mov.w     w1, [w0]

000023c4 <.LSM8>:
    23c4:	1e 4f e8    	inc.b     [w14], [w14]

000023c6 <.L2>:
    23c6:	1e 40 78    	mov.b     [w14], w0
    23c8:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    23ca:	f6 ff 36    	bra       LEU, 0x23b8 <.L3>

000023cc <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    23cc:	d0 00 20    	mov.w     #0xd, w0
    23ce:	50 25 88    	mov.w     w0, 0x4aa

000023d0 <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    23d0:	00 c0 20    	mov.w     #0xc00, w0
    23d2:	01 c4 b3    	mov.b     #0x40, w1
    23d4:	01 48 78    	mov.b     w1, [w0]

000023d6 <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    23d6:	00 c8 20    	mov.w     #0xc80, w0
    23d8:	10 60 88    	mov.w     w0, 0xc02

000023da <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    23da:	10 c0 20    	mov.w     #0xc01, w0
    23dc:	81 c8 b3    	mov.b     #0x88, w1
    23de:	01 48 78    	mov.b     w1, [w0]

000023e0 <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    23e0:	00 cc 20    	mov.w     #0xcc0, w0
    23e2:	30 60 88    	mov.w     w0, 0xc06

000023e4 <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    23e4:	50 c0 20    	mov.w     #0xc05, w0
    23e6:	81 c0 b3    	mov.b     #0x8, w1
    23e8:	01 48 78    	mov.b     w1, [w0]

000023ea <.LSM15>:
    U1CNFG1 = 0x00;
    23ea:	a6 24 ef    	clr.w     0x4a6

000023ec <.LSM16>:
    U1CNFG2 = 0x00;
    23ec:	a8 24 ef    	clr.w     0x4a8

000023ee <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    23ee:	00 c0 20    	mov.w     #0xc00, w0
    23f0:	48 00 de    	lsr.w     w0, #0x8, w0
    23f2:	c0 24 88    	mov.w     w0, 0x498

000023f4 <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    23f4:	86 44 a8    	bset.b    0x486, #0x2

000023f6 <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    23f6:	86 e4 a8    	bset.b    0x486, #0x7

000023f8 <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    23f8:	88 04 a8    	bset.b    0x488, #0x0

000023fa <.LSM21>:
    U1CONbits.PKTDIS = 0;
    23fa:	94 a4 a9    	bclr.b    0x494, #0x5

000023fc <.LSM22>:
    USB_curr_config = 0x00;
    23fc:	61 68 ef    	clr.b     0x861

000023fe <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    23fe:	64 68 ef    	clr.b     0x864

00002400 <.LSM24>:
    USB_device_status = 0x01;
    2400:	10 c0 b3    	mov.b     #0x1, w0
    2402:	62 e8 b7    	mov.b     WREG, 0x862

00002404 <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    2404:	00 d0 20    	mov.w     #0xd00, w0
    2406:	80 c0 eb    	setm.b    w1
    2408:	01 48 78    	mov.b     w1, [w0]

0000240a <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    240a:	10 d0 20    	mov.w     #0xd01, w0
    240c:	80 c0 eb    	setm.b    w1
    240e:	01 48 78    	mov.b     w1, [w0]

00002410 <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    2410:	00 00 00    	nop       

00002412 <.L4>:
    2412:	a1 24 80    	mov.w     0x494, w1
    2414:	00 04 20    	mov.w     #0x40, w0
    2416:	00 80 60    	and.w     w1, w0, w0
    2418:	00 00 e0    	cp0.w     w0
    241a:	fb ff 3a    	bra       NZ, 0x2412 <.L4>

0000241c <.LSM28>:
}
    241c:	00 80 fa    	ulnk      
    241e:	00 00 06    	return    

00002420 <_ServiceUSB>:

void ServiceUSB(void) {
    2420:	06 00 fa    	lnk       #0x6

00002422 <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    2422:	50 24 80    	mov.w     0x48a, w0
    2424:	62 00 60    	and.w     w0, #0x2, w0
    2426:	00 00 e0    	cp0.w     w0
    2428:	05 00 32    	bra       Z, 0x2434 <.L6>

0000242a <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    242a:	f0 0f 20    	mov.w     #0xff, w0
    242c:	70 24 88    	mov.w     w0, 0x48e

0000242e <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    242e:	20 00 20    	mov.w     #0x2, w0
    2430:	50 24 88    	mov.w     w0, 0x48a
    2432:	90 00 37    	bra       0x2554 <.L5>

00002434 <.L6>:
    } else if (U1IRbits.SOFIF) {
    2434:	50 24 80    	mov.w     0x48a, w0
    2436:	64 00 60    	and.w     w0, #0x4, w0
    2438:	00 00 e0    	cp0.w     w0
    243a:	03 00 32    	bra       Z, 0x2442 <.L8>

0000243c <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    243c:	40 00 20    	mov.w     #0x4, w0
    243e:	50 24 88    	mov.w     w0, 0x48a
    2440:	89 00 37    	bra       0x2554 <.L5>

00002442 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    2442:	50 24 80    	mov.w     0x48a, w0
    2444:	70 00 60    	and.w     w0, #0x10, w0
    2446:	00 00 e0    	cp0.w     w0
    2448:	03 00 32    	bra       Z, 0x2450 <.L9>

0000244a <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    244a:	00 01 20    	mov.w     #0x10, w0
    244c:	50 24 88    	mov.w     w0, 0x48a
    244e:	82 00 37    	bra       0x2554 <.L5>

00002450 <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    2450:	51 24 80    	mov.w     0x48a, w1
    2452:	00 02 20    	mov.w     #0x20, w0
    2454:	00 80 60    	and.w     w1, w0, w0
    2456:	00 00 e0    	cp0.w     w0
    2458:	03 00 32    	bra       Z, 0x2460 <.L10>

0000245a <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    245a:	00 02 20    	mov.w     #0x20, w0
    245c:	50 24 88    	mov.w     w0, 0x48a
    245e:	7a 00 37    	bra       0x2554 <.L5>

00002460 <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    2460:	51 24 80    	mov.w     0x48a, w1
    2462:	00 08 20    	mov.w     #0x80, w0
    2464:	00 80 60    	and.w     w1, w0, w0
    2466:	00 00 e0    	cp0.w     w0
    2468:	03 00 32    	bra       Z, 0x2470 <.L11>

0000246a <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    246a:	00 08 20    	mov.w     #0x80, w0
    246c:	50 24 88    	mov.w     w0, 0x48a
    246e:	72 00 37    	bra       0x2554 <.L5>

00002470 <.L11>:
    } else if (U1IRbits.URSTIF) {
    2470:	50 24 80    	mov.w     0x48a, w0
    2472:	61 00 60    	and.w     w0, #0x1, w0
    2474:	00 00 e0    	cp0.w     w0
    2476:	34 00 32    	bra       Z, 0x24e0 <.L12>

00002478 <.LSM42>:
        USB_curr_config = 0x00;
    2478:	61 68 ef    	clr.b     0x861

0000247a <.LSM43>:
        while (U1IRbits.TRNIF) {
    247a:	08 00 37    	bra       0x248c <.L13>

0000247c <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    247c:	80 00 20    	mov.w     #0x8, w0
    247e:	50 24 88    	mov.w     w0, 0x48a

00002480 <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    2480:	00 00 00    	nop       

00002482 <.LSM46>:
            __builtin_nop();
    2482:	00 00 00    	nop       

00002484 <.LSM47>:
            __builtin_nop();
    2484:	00 00 00    	nop       

00002486 <.LSM48>:
            __builtin_nop();
    2486:	00 00 00    	nop       

00002488 <.LSM49>:
            __builtin_nop();
    2488:	00 00 00    	nop       

0000248a <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    248a:	00 00 00    	nop       

0000248c <.L13>:
    248c:	50 24 80    	mov.w     0x48a, w0
    248e:	68 00 60    	and.w     w0, #0x8, w0
    2490:	00 00 e0    	cp0.w     w0
    2492:	f4 ff 3a    	bra       NZ, 0x247c <.L14>

00002494 <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    2494:	a0 4a 20    	mov.w     #0x4aa, w0
    2496:	10 07 98    	mov.w     w0, [w14+2]

00002498 <.LSM53>:
        for (n = 0; n<16; n++)
    2498:	00 40 eb    	clr.b     w0
    249a:	00 4f 78    	mov.b     w0, [w14]
    249c:	07 00 37    	bra       0x24ac <.L15>

0000249e <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    249e:	1e 80 fb    	ze        [w14], w0
    24a0:	00 00 40    	add.w     w0, w0, w0
    24a2:	9e 00 90    	mov.w     [w14+2], w1
    24a4:	00 80 40    	add.w     w1, w0, w0
    24a6:	80 00 eb    	clr.w     w1
    24a8:	01 08 78    	mov.w     w1, [w0]

000024aa <.LSM55>:
    24aa:	1e 4f e8    	inc.b     [w14], [w14]

000024ac <.L15>:
    24ac:	1e 40 78    	mov.b     [w14], w0
    24ae:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    24b0:	f6 ff 36    	bra       LEU, 0x249e <.L16>

000024b2 <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    24b2:	00 c0 20    	mov.w     #0xc00, w0
    24b4:	01 c4 b3    	mov.b     #0x40, w1
    24b6:	01 48 78    	mov.b     w1, [w0]

000024b8 <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    24b8:	00 c8 20    	mov.w     #0xc80, w0
    24ba:	10 60 88    	mov.w     w0, 0xc02

000024bc <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    24bc:	10 c0 20    	mov.w     #0xc01, w0
    24be:	81 c8 b3    	mov.b     #0x88, w1
    24c0:	01 48 78    	mov.b     w1, [w0]

000024c2 <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    24c2:	00 cc 20    	mov.w     #0xcc0, w0
    24c4:	30 60 88    	mov.w     w0, 0xc06

000024c6 <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    24c6:	50 c0 20    	mov.w     #0xc05, w0
    24c8:	81 c0 b3    	mov.b     #0x8, w1
    24ca:	01 48 78    	mov.b     w1, [w0]

000024cc <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    24cc:	96 24 ef    	clr.w     0x496

000024ce <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    24ce:	f0 0f 20    	mov.w     #0xff, w0
    24d0:	50 24 88    	mov.w     w0, 0x48a

000024d2 <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    24d2:	d0 00 20    	mov.w     #0xd, w0
    24d4:	50 25 88    	mov.w     w0, 0x4aa

000024d6 <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    24d6:	10 c0 b3    	mov.b     #0x1, w0
    24d8:	64 e8 b7    	mov.b     WREG, 0x864

000024da <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    24da:	10 c0 b3    	mov.b     #0x1, w0
    24dc:	62 e8 b7    	mov.b     WREG, 0x862
    24de:	3a 00 37    	bra       0x2554 <.L5>

000024e0 <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    24e0:	50 24 80    	mov.w     0x48a, w0
    24e2:	68 00 60    	and.w     w0, #0x8, w0
    24e4:	00 00 e0    	cp0.w     w0
    24e6:	36 00 32    	bra       Z, 0x2554 <.L5>

000024e8 <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    24e8:	90 24 80    	mov.w     0x492, w0
    24ea:	43 00 de    	lsr.w     w0, #0x3, w0
    24ec:	c2 00 dd    	sl.w      w0, #0x2, w1
    24ee:	00 c0 20    	mov.w     #0xc00, w0
    24f0:	00 80 40    	add.w     w1, w0, w0
    24f2:	20 07 98    	mov.w     w0, [w14+4]

000024f4 <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    24f4:	2e 00 90    	mov.w     [w14+4], w0
    24f6:	10 40 90    	mov.b     [w0+1], w0
    24f8:	55 e8 b7    	mov.b     WREG, 0x855

000024fa <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    24fa:	2e 00 90    	mov.w     [w14+4], w0
    24fc:	10 40 78    	mov.b     [w0], w0
    24fe:	54 e8 b7    	mov.b     WREG, 0x854

00002500 <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    2500:	2e 00 90    	mov.w     [w14+4], w0
    2502:	10 00 90    	mov.w     [w0+2], w0
    2504:	b0 42 88    	mov.w     w0, 0x856

00002506 <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    2506:	90 24 80    	mov.w     0x492, w0
    2508:	00 40 78    	mov.b     w0, w0
    250a:	63 e8 b7    	mov.b     WREG, 0x863

0000250c <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    250c:	80 00 20    	mov.w     #0x8, w0
    250e:	50 24 88    	mov.w     w0, 0x48a

00002510 <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    2510:	60 68 ef    	clr.b     0x860

00002512 <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    2512:	55 c8 bf    	mov.b     0x855, WREG
    2514:	80 80 fb    	ze        w0, w1
    2516:	c0 03 20    	mov.w     #0x3c, w0
    2518:	00 80 60    	and.w     w1, w0, w0
    251a:	41 02 20    	mov.w     #0x24, w1
    251c:	81 0f 50    	sub.w     w0, w1, [w15]
    251e:	08 00 32    	bra       Z, 0x2530 <.L19>
    2520:	41 03 20    	mov.w     #0x34, w1
    2522:	81 0f 50    	sub.w     w0, w1, [w15]
    2524:	03 00 32    	bra       Z, 0x252c <.L20>
    2526:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    2528:	05 00 32    	bra       Z, 0x2534 <.L18>
    252a:	05 00 37    	bra       0x2536 <.L17>

0000252c <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    252c:	15 00 07    	rcall     0x2558 <_ProcessSetupToken>

0000252e <.LSM76>:
                break;
    252e:	03 00 37    	bra       0x2536 <.L17>

00002530 <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    2530:	dc 02 07    	rcall     0x2aea <_ProcessInToken>

00002532 <.LSM78>:
                break;
    2532:	01 00 37    	bra       0x2536 <.L17>

00002534 <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    2534:	0e 03 07    	rcall     0x2b52 <_ProcessOutToken>

00002536 <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    2536:	60 c8 bf    	mov.b     0x860, WREG
    2538:	00 80 fb    	ze        w0, w0
    253a:	61 00 60    	and.w     w0, #0x1, w0
    253c:	00 40 78    	mov.b     w0, w0
    253e:	00 04 e0    	cp0.b     w0
    2540:	09 00 32    	bra       Z, 0x2554 <.L5>

00002542 <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    2542:	00 c0 20    	mov.w     #0xc00, w0
    2544:	01 c4 b3    	mov.b     #0x40, w1
    2546:	01 48 78    	mov.b     w1, [w0]

00002548 <.LSM82>:
            BD[EP0IN].status = 0x84;
    2548:	50 c0 20    	mov.w     #0xc05, w0
    254a:	41 c8 b3    	mov.b     #0x84, w1
    254c:	01 48 78    	mov.b     w1, [w0]

0000254e <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    254e:	10 c0 20    	mov.w     #0xc01, w0
    2550:	41 c8 b3    	mov.b     #0x84, w1
    2552:	01 48 78    	mov.b     w1, [w0]

00002554 <.L5>:
        }
    }
}
    2554:	00 80 fa    	ulnk      
    2556:	00 00 06    	return    

00002558 <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    2558:	02 00 fa    	lnk       #0x2

0000255a <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    255a:	b1 42 80    	mov.w     0x856, w1
    255c:	01 0f 78    	mov.w     w1, [w14]

0000255e <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    255e:	1e 00 78    	mov.w     [w14], w0
    2560:	90 40 78    	mov.b     [w0], w1
    2562:	80 85 20    	mov.w     #0x858, w0
    2564:	01 48 78    	mov.b     w1, [w0]
    2566:	1e 0f e8    	inc.w     [w14], [w14]

00002568 <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    2568:	1e 00 78    	mov.w     [w14], w0
    256a:	90 40 78    	mov.b     [w0], w1
    256c:	80 85 20    	mov.w     #0x858, w0
    256e:	11 40 98    	mov.b     w1, [w0+1]
    2570:	1e 0f e8    	inc.w     [w14], [w14]

00002572 <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    2572:	1e 00 78    	mov.w     [w14], w0
    2574:	90 40 78    	mov.b     [w0], w1
    2576:	80 85 20    	mov.w     #0x858, w0
    2578:	21 40 98    	mov.b     w1, [w0+2]
    257a:	1e 0f e8    	inc.w     [w14], [w14]

0000257c <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    257c:	1e 00 78    	mov.w     [w14], w0
    257e:	90 40 78    	mov.b     [w0], w1
    2580:	80 85 20    	mov.w     #0x858, w0
    2582:	31 40 98    	mov.b     w1, [w0+3]
    2584:	1e 0f e8    	inc.w     [w14], [w14]

00002586 <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    2586:	1e 00 78    	mov.w     [w14], w0
    2588:	90 40 78    	mov.b     [w0], w1
    258a:	80 85 20    	mov.w     #0x858, w0
    258c:	41 40 98    	mov.b     w1, [w0+4]
    258e:	1e 0f e8    	inc.w     [w14], [w14]

00002590 <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    2590:	1e 00 78    	mov.w     [w14], w0
    2592:	90 40 78    	mov.b     [w0], w1
    2594:	80 85 20    	mov.w     #0x858, w0
    2596:	51 40 98    	mov.b     w1, [w0+5]
    2598:	1e 0f e8    	inc.w     [w14], [w14]

0000259a <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    259a:	1e 00 78    	mov.w     [w14], w0
    259c:	90 40 78    	mov.b     [w0], w1
    259e:	80 85 20    	mov.w     #0x858, w0
    25a0:	61 40 98    	mov.b     w1, [w0+6]
    25a2:	1e 0f e8    	inc.w     [w14], [w14]

000025a4 <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    25a4:	1e 00 78    	mov.w     [w14], w0
    25a6:	90 40 78    	mov.b     [w0], w1
    25a8:	80 85 20    	mov.w     #0x858, w0
    25aa:	71 40 98    	mov.b     w1, [w0+7]
    25ac:	1e 0f e8    	inc.w     [w14], [w14]

000025ae <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    25ae:	00 c0 20    	mov.w     #0xc00, w0
    25b0:	01 c4 b3    	mov.b     #0x40, w1
    25b2:	01 48 78    	mov.b     w1, [w0]

000025b4 <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    25b4:	50 c0 20    	mov.w     #0xc05, w0
    25b6:	81 c0 b3    	mov.b     #0x8, w1
    25b8:	01 48 78    	mov.b     w1, [w0]

000025ba <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    25ba:	80 85 20    	mov.w     #0x858, w0
    25bc:	10 40 78    	mov.b     [w0], w0
    25be:	00 04 e0    	cp0.b     w0
    25c0:	06 00 35    	bra       LT, 0x25ce <.L22>
    25c2:	80 85 20    	mov.w     #0x858, w0
    25c4:	30 00 90    	mov.w     [w0+6], w0
    25c6:	00 00 e0    	cp0.w     w0
    25c8:	02 00 32    	bra       Z, 0x25ce <.L22>
    25ca:	80 cc b3    	mov.b     #0xc8, w0
    25cc:	01 00 37    	bra       0x25d0 <.L23>

000025ce <.L22>:
    25ce:	80 c8 b3    	mov.b     #0x88, w0

000025d0 <.L23>:
    25d0:	11 c0 20    	mov.w     #0xc01, w1
    25d2:	80 48 78    	mov.b     w0, [w1]

000025d4 <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    25d4:	94 a4 a9    	bclr.b    0x494, #0x5

000025d6 <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    25d6:	00 d0 20    	mov.w     #0xd00, w0
    25d8:	80 c0 eb    	setm.b    w1
    25da:	01 48 78    	mov.b     w1, [w0]

000025dc <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    25dc:	10 d0 20    	mov.w     #0xd01, w0
    25de:	80 c0 eb    	setm.b    w1
    25e0:	01 48 78    	mov.b     w1, [w0]

000025e2 <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    25e2:	80 85 20    	mov.w     #0x858, w0
    25e4:	10 40 78    	mov.b     [w0], w0
    25e6:	80 80 fb    	ze        w0, w1
    25e8:	00 06 20    	mov.w     #0x60, w0
    25ea:	00 80 60    	and.w     w1, w0, w0
    25ec:	00 00 e0    	cp0.w     w0
    25ee:	04 00 32    	bra       Z, 0x25f8 <.L25>
    25f0:	01 04 20    	mov.w     #0x40, w1
    25f2:	81 0f 50    	sub.w     w0, w1, [w15]
    25f4:	03 00 32    	bra       Z, 0x25fc <.L26>
    25f6:	04 00 37    	bra       0x2600 <.L28>

000025f8 <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    25f8:	08 00 07    	rcall     0x260a <_StandardRequests>

000025fa <.LSM103>:
            break;
    25fa:	05 00 37    	bra       0x2606 <.L21>

000025fc <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    25fc:	eb 0e 07    	rcall     0x43d4 <_VendorRequests>

000025fe <.LSM105>:
            break;
    25fe:	03 00 37    	bra       0x2606 <.L21>

00002600 <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    2600:	60 c8 bf    	mov.b     0x860, WREG
    2602:	00 04 a0    	bset.b    w0, #0x0
    2604:	60 e8 b7    	mov.b     WREG, 0x860

00002606 <.L21>:
    }
}
    2606:	00 80 fa    	ulnk      
    2608:	00 00 06    	return    

0000260a <_StandardRequests>:

void StandardRequests(void) {
    260a:	06 00 fa    	lnk       #0x6

0000260c <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    260c:	80 85 20    	mov.w     #0x858, w0
    260e:	10 40 90    	mov.b     [w0+1], w0
    2610:	00 80 fb    	ze        w0, w0
    2612:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    2614:	79 01 32    	bra       Z, 0x2908 <.L34>
    2616:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    2618:	0c 00 3c    	bra       GT, 0x2632 <.L39>
    261a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    261c:	bf 00 32    	bra       Z, 0x279c <.L32>
    261e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2620:	03 00 3c    	bra       GT, 0x2628 <.L40>
    2622:	00 00 e0    	cp0.w     w0
    2624:	12 00 32    	bra       Z, 0x264a <.L31>
    2626:	5c 02 37    	bra       0x2ae0 <.L30>

00002628 <.L40>:
    2628:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    262a:	b8 00 32    	bra       Z, 0x279c <.L32>
    262c:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    262e:	4c 01 32    	bra       Z, 0x28c8 <.L33>
    2630:	57 02 37    	bra       0x2ae0 <.L30>

00002632 <.L39>:
    2632:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    2634:	ef 01 32    	bra       Z, 0x2a14 <.L36>
    2636:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    2638:	03 00 3c    	bra       GT, 0x2640 <.L41>
    263a:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    263c:	e0 01 32    	bra       Z, 0x29fe <.L35>
    263e:	50 02 37    	bra       0x2ae0 <.L30>

00002640 <.L41>:
    2640:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    2642:	12 02 32    	bra       Z, 0x2a68 <.L37>
    2644:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    2646:	2b 02 32    	bra       Z, 0x2a9e <.L38>
    2648:	4b 02 37    	bra       0x2ae0 <.L30>

0000264a <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    264a:	80 85 20    	mov.w     #0x858, w0
    264c:	10 40 78    	mov.b     [w0], w0
    264e:	00 80 fb    	ze        w0, w0
    2650:	7f 00 60    	and.w     w0, #0x1f, w0
    2652:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2654:	13 00 32    	bra       Z, 0x267c <.L44>
    2656:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2658:	32 00 32    	bra       Z, 0x26be <.L45>
    265a:	00 00 e0    	cp0.w     w0
    265c:	9a 00 3a    	bra       NZ, 0x2792 <.L128>

0000265e <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    265e:	30 60 80    	mov.w     0xc06, w0
    2660:	21 86 20    	mov.w     #0x862, w1
    2662:	91 40 78    	mov.b     [w1], w1
    2664:	01 48 78    	mov.b     w1, [w0]

00002666 <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    2666:	30 60 80    	mov.w     0xc06, w0
    2668:	00 00 e8    	inc.w     w0, w0
    266a:	80 40 eb    	clr.b     w1
    266c:	01 48 78    	mov.b     w1, [w0]

0000266e <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    266e:	40 c0 20    	mov.w     #0xc04, w0
    2670:	21 c0 b3    	mov.b     #0x2, w1
    2672:	01 48 78    	mov.b     w1, [w0]

00002674 <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    2674:	50 c0 20    	mov.w     #0xc05, w0
    2676:	81 cc b3    	mov.b     #0xc8, w1
    2678:	01 48 78    	mov.b     w1, [w0]

0000267a <.LSM115>:
                    break;
    267a:	8f 00 37    	bra       0x279a <.L46>

0000267c <.L44>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    267c:	64 c8 bf    	mov.b     0x864, WREG
    267e:	00 80 fb    	ze        w0, w0
    2680:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2682:	03 00 32    	bra       Z, 0x268a <.L48>
    2684:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2686:	05 00 32    	bra       Z, 0x2692 <.L49>
    2688:	19 00 37    	bra       0x26bc <.L47>

0000268a <.L48>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    268a:	60 c8 bf    	mov.b     0x860, WREG
    268c:	00 04 a0    	bset.b    w0, #0x0
    268e:	60 e8 b7    	mov.b     WREG, 0x860

00002690 <.LSM118>:
                            break;
    2690:	15 00 37    	bra       0x26bc <.L47>

00002692 <.L49>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    2692:	80 85 20    	mov.w     #0x858, w0
    2694:	40 40 90    	mov.b     [w0+4], w0
    2696:	00 04 e0    	cp0.b     w0
    2698:	0e 00 3a    	bra       NZ, 0x26b6 <.L50>

0000269a <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    269a:	30 60 80    	mov.w     0xc06, w0
    269c:	80 40 eb    	clr.b     w1
    269e:	01 48 78    	mov.b     w1, [w0]

000026a0 <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    26a0:	30 60 80    	mov.w     0xc06, w0
    26a2:	00 00 e8    	inc.w     w0, w0
    26a4:	80 40 eb    	clr.b     w1
    26a6:	01 48 78    	mov.b     w1, [w0]

000026a8 <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    26a8:	40 c0 20    	mov.w     #0xc04, w0
    26aa:	21 c0 b3    	mov.b     #0x2, w1
    26ac:	01 48 78    	mov.b     w1, [w0]

000026ae <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    26ae:	50 c0 20    	mov.w     #0xc05, w0
    26b0:	81 cc b3    	mov.b     #0xc8, w1
    26b2:	01 48 78    	mov.b     w1, [w0]
    26b4:	03 00 37    	bra       0x26bc <.L47>

000026b6 <.L50>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    26b6:	60 c8 bf    	mov.b     0x860, WREG
    26b8:	00 04 a0    	bset.b    w0, #0x0
    26ba:	60 e8 b7    	mov.b     WREG, 0x860

000026bc <.L47>:
                            }
                    }
                    break;
    26bc:	6e 00 37    	bra       0x279a <.L46>

000026be <.L45>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    26be:	64 c8 bf    	mov.b     0x864, WREG
    26c0:	00 80 fb    	ze        w0, w0
    26c2:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    26c4:	03 00 32    	bra       Z, 0x26cc <.L52>
    26c6:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    26c8:	29 00 32    	bra       Z, 0x271c <.L53>
    26ca:	5f 00 37    	bra       0x278a <.L129>

000026cc <.L52>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    26cc:	80 85 20    	mov.w     #0x858, w0
    26ce:	40 40 90    	mov.b     [w0+4], w0
    26d0:	00 80 fb    	ze        w0, w0
    26d2:	6f 00 60    	and.w     w0, #0xf, w0
    26d4:	00 00 e0    	cp0.w     w0
    26d6:	1e 00 3a    	bra       NZ, 0x2714 <.L54>

000026d8 <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    26d8:	31 60 80    	mov.w     0xc06, w1
    26da:	80 85 20    	mov.w     #0x858, w0
    26dc:	40 40 90    	mov.b     [w0+4], w0
    26de:	00 04 e0    	cp0.b     w0
    26e0:	07 00 3d    	bra       GE, 0x26f0 <.L55>
    26e2:	50 c0 20    	mov.w     #0xc05, w0
    26e4:	10 40 78    	mov.b     [w0], w0
    26e6:	00 80 fb    	ze        w0, w0
    26e8:	64 00 60    	and.w     w0, #0x4, w0
    26ea:	42 80 de    	asr.w     w0, #0x2, w0
    26ec:	00 40 78    	mov.b     w0, w0
    26ee:	06 00 37    	bra       0x26fc <.L56>

000026f0 <.L55>:
    26f0:	10 c0 20    	mov.w     #0xc01, w0
    26f2:	10 40 78    	mov.b     [w0], w0
    26f4:	00 80 fb    	ze        w0, w0
    26f6:	64 00 60    	and.w     w0, #0x4, w0
    26f8:	42 80 de    	asr.w     w0, #0x2, w0
    26fa:	00 40 78    	mov.b     w0, w0

000026fc <.L56>:
    26fc:	80 48 78    	mov.b     w0, [w1]

000026fe <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    26fe:	30 60 80    	mov.w     0xc06, w0
    2700:	00 00 e8    	inc.w     w0, w0
    2702:	80 40 eb    	clr.b     w1
    2704:	01 48 78    	mov.b     w1, [w0]

00002706 <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    2706:	40 c0 20    	mov.w     #0xc04, w0
    2708:	21 c0 b3    	mov.b     #0x2, w1
    270a:	01 48 78    	mov.b     w1, [w0]

0000270c <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    270c:	50 c0 20    	mov.w     #0xc05, w0
    270e:	81 cc b3    	mov.b     #0xc8, w1
    2710:	01 48 78    	mov.b     w1, [w0]
    2712:	03 00 37    	bra       0x271a <.L57>

00002714 <.L54>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    2714:	60 c8 bf    	mov.b     0x860, WREG
    2716:	00 04 a0    	bset.b    w0, #0x0
    2718:	60 e8 b7    	mov.b     WREG, 0x860

0000271a <.L57>:
                            }
                            break;
    271a:	3a 00 37    	bra       0x2790 <.L58>

0000271c <.L53>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    271c:	a0 4a 20    	mov.w     #0x4aa, w0
    271e:	10 07 98    	mov.w     w0, [w14+2]

00002720 <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    2720:	80 85 20    	mov.w     #0x858, w0
    2722:	40 40 90    	mov.b     [w0+4], w0
    2724:	6f 4f 60    	and.b     w0, #0xf, [w14]

00002726 <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    2726:	1e 80 fb    	ze        [w14], w0
    2728:	00 00 40    	add.w     w0, w0, w0
    272a:	80 00 78    	mov.w     w0, w1
    272c:	80 85 20    	mov.w     #0x858, w0
    272e:	40 40 90    	mov.b     [w0+4], w0
    2730:	00 00 fb    	se        w0, w0
    2732:	4f 00 de    	lsr.w     w0, #0xf, w0
    2734:	01 00 70    	ior.w     w0, w1, w0
    2736:	c2 00 dd    	sl.w      w0, #0x2, w1
    2738:	00 c0 20    	mov.w     #0xc00, w0
    273a:	00 80 40    	add.w     w1, w0, w0
    273c:	20 07 98    	mov.w     w0, [w14+4]

0000273e <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    273e:	1e 80 fb    	ze        [w14], w0
    2740:	00 00 40    	add.w     w0, w0, w0
    2742:	9e 00 90    	mov.w     [w14+2], w1
    2744:	00 80 40    	add.w     w1, w0, w0
    2746:	90 00 78    	mov.w     [w0], w1
    2748:	80 85 20    	mov.w     #0x858, w0
    274a:	40 40 90    	mov.b     [w0+4], w0
    274c:	00 04 e0    	cp0.b     w0
    274e:	02 00 3d    	bra       GE, 0x2754 <.L59>
    2750:	40 00 20    	mov.w     #0x4, w0
    2752:	01 00 37    	bra       0x2756 <.L60>

00002754 <.L59>:
    2754:	80 00 20    	mov.w     #0x8, w0

00002756 <.L60>:
    2756:	00 80 60    	and.w     w1, w0, w0
    2758:	00 00 e0    	cp0.w     w0
    275a:	13 00 32    	bra       Z, 0x2782 <.L61>

0000275c <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    275c:	30 60 80    	mov.w     0xc06, w0
    275e:	ae 00 90    	mov.w     [w14+4], w1
    2760:	91 40 90    	mov.b     [w1+1], w1
    2762:	81 80 fb    	ze        w1, w1
    2764:	e4 80 60    	and.w     w1, #0x4, w1
    2766:	c2 88 de    	asr.w     w1, #0x2, w1
    2768:	81 40 78    	mov.b     w1, w1
    276a:	01 48 78    	mov.b     w1, [w0]

0000276c <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    276c:	30 60 80    	mov.w     0xc06, w0
    276e:	00 00 e8    	inc.w     w0, w0
    2770:	80 40 eb    	clr.b     w1
    2772:	01 48 78    	mov.b     w1, [w0]

00002774 <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    2774:	40 c0 20    	mov.w     #0xc04, w0
    2776:	21 c0 b3    	mov.b     #0x2, w1
    2778:	01 48 78    	mov.b     w1, [w0]

0000277a <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    277a:	50 c0 20    	mov.w     #0xc05, w0
    277c:	81 cc b3    	mov.b     #0xc8, w1
    277e:	01 48 78    	mov.b     w1, [w0]
    2780:	03 00 37    	bra       0x2788 <.L62>

00002782 <.L61>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    2782:	60 c8 bf    	mov.b     0x860, WREG
    2784:	00 04 a0    	bset.b    w0, #0x0
    2786:	60 e8 b7    	mov.b     WREG, 0x860

00002788 <.L62>:
                            }
                            break;
    2788:	03 00 37    	bra       0x2790 <.L58>

0000278a <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    278a:	60 c8 bf    	mov.b     0x860, WREG
    278c:	00 04 a0    	bset.b    w0, #0x0
    278e:	60 e8 b7    	mov.b     WREG, 0x860

00002790 <.L58>:
                    }
                    break;
    2790:	04 00 37    	bra       0x279a <.L46>

00002792 <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    2792:	60 c8 bf    	mov.b     0x860, WREG
    2794:	00 04 a0    	bset.b    w0, #0x0
    2796:	60 e8 b7    	mov.b     WREG, 0x860

00002798 <.LSM147>:
            }
            break;
    2798:	a6 01 37    	bra       0x2ae6 <.L29>

0000279a <.L46>:
    279a:	a5 01 37    	bra       0x2ae6 <.L29>

0000279c <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    279c:	80 85 20    	mov.w     #0x858, w0
    279e:	10 40 78    	mov.b     [w0], w0
    27a0:	00 80 fb    	ze        w0, w0
    27a2:	7f 00 60    	and.w     w0, #0x1f, w0
    27a4:	00 00 e0    	cp0.w     w0
    27a6:	03 00 32    	bra       Z, 0x27ae <.L65>
    27a8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    27aa:	1e 00 32    	bra       Z, 0x27e8 <.L66>
    27ac:	88 00 37    	bra       0x28be <.L130>

000027ae <.L65>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    27ae:	80 85 20    	mov.w     #0x858, w0
    27b0:	20 40 90    	mov.b     [w0+2], w0
    27b2:	00 80 fb    	ze        w0, w0
    27b4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    27b6:	14 00 3a    	bra       NZ, 0x27e0 <.L131>

000027b8 <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    27b8:	80 85 20    	mov.w     #0x858, w0
    27ba:	10 40 90    	mov.b     [w0+1], w0
    27bc:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    27be:	06 00 3a    	bra       NZ, 0x27cc <.L69>

000027c0 <.LSM151>:
                                USB_device_status &= 0xFE;
    27c0:	21 86 20    	mov.w     #0x862, w1
    27c2:	91 40 78    	mov.b     [w1], w1
    27c4:	e0 cf b3    	mov.b     #0xfe, w0
    27c6:	00 c0 60    	and.b     w1, w0, w0
    27c8:	62 e8 b7    	mov.b     WREG, 0x862
    27ca:	03 00 37    	bra       0x27d2 <.L70>

000027cc <.L69>:
                            else
                                USB_device_status |= 0x01;
    27cc:	62 c8 bf    	mov.b     0x862, WREG
    27ce:	00 04 a0    	bset.b    w0, #0x0
    27d0:	62 e8 b7    	mov.b     WREG, 0x862

000027d2 <.L70>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    27d2:	40 c0 20    	mov.w     #0xc04, w0
    27d4:	80 40 eb    	clr.b     w1
    27d6:	01 48 78    	mov.b     w1, [w0]

000027d8 <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    27d8:	50 c0 20    	mov.w     #0xc05, w0
    27da:	81 cc b3    	mov.b     #0xc8, w1
    27dc:	01 48 78    	mov.b     w1, [w0]

000027de <.LSM155>:
                            break;
    27de:	03 00 37    	bra       0x27e6 <.L71>

000027e0 <.L131>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    27e0:	60 c8 bf    	mov.b     0x860, WREG
    27e2:	00 04 a0    	bset.b    w0, #0x0
    27e4:	60 e8 b7    	mov.b     WREG, 0x860

000027e6 <.L71>:
                    }
                    break;
    27e6:	6f 00 37    	bra       0x28c6 <.L72>

000027e8 <.L66>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    27e8:	64 c8 bf    	mov.b     0x864, WREG
    27ea:	00 80 fb    	ze        w0, w0
    27ec:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    27ee:	03 00 32    	bra       Z, 0x27f6 <.L74>
    27f0:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    27f2:	12 00 32    	bra       Z, 0x2818 <.L75>
    27f4:	60 00 37    	bra       0x28b6 <.L132>

000027f6 <.L74>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    27f6:	80 85 20    	mov.w     #0x858, w0
    27f8:	40 40 90    	mov.b     [w0+4], w0
    27fa:	00 80 fb    	ze        w0, w0
    27fc:	6f 00 60    	and.w     w0, #0xf, w0
    27fe:	00 00 e0    	cp0.w     w0
    2800:	07 00 3a    	bra       NZ, 0x2810 <.L76>

00002802 <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    2802:	40 c0 20    	mov.w     #0xc04, w0
    2804:	80 40 eb    	clr.b     w1
    2806:	01 48 78    	mov.b     w1, [w0]

00002808 <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    2808:	50 c0 20    	mov.w     #0xc05, w0
    280a:	81 cc b3    	mov.b     #0xc8, w1
    280c:	01 48 78    	mov.b     w1, [w0]
    280e:	03 00 37    	bra       0x2816 <.L77>

00002810 <.L76>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    2810:	60 c8 bf    	mov.b     0x860, WREG
    2812:	00 04 a0    	bset.b    w0, #0x0
    2814:	60 e8 b7    	mov.b     WREG, 0x860

00002816 <.L77>:
                            }
                            break;
    2816:	52 00 37    	bra       0x28bc <.L78>

00002818 <.L75>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    2818:	a0 4a 20    	mov.w     #0x4aa, w0
    281a:	10 07 98    	mov.w     w0, [w14+2]

0000281c <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    281c:	80 85 20    	mov.w     #0x858, w0
    281e:	40 40 90    	mov.b     [w0+4], w0
    2820:	6f 4f 60    	and.b     w0, #0xf, [w14]
    2822:	1e 40 78    	mov.b     [w14], w0
    2824:	00 04 e0    	cp0.b     w0
    2826:	3b 00 32    	bra       Z, 0x289e <.L79>

00002828 <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    2828:	1e 80 fb    	ze        [w14], w0
    282a:	00 00 40    	add.w     w0, w0, w0
    282c:	80 00 78    	mov.w     w0, w1
    282e:	80 85 20    	mov.w     #0x858, w0
    2830:	40 40 90    	mov.b     [w0+4], w0
    2832:	00 00 fb    	se        w0, w0
    2834:	4f 00 de    	lsr.w     w0, #0xf, w0
    2836:	01 00 70    	ior.w     w0, w1, w0
    2838:	c2 00 dd    	sl.w      w0, #0x2, w1
    283a:	00 c0 20    	mov.w     #0xc00, w0
    283c:	00 80 40    	add.w     w1, w0, w0
    283e:	20 07 98    	mov.w     w0, [w14+4]

00002840 <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    2840:	80 85 20    	mov.w     #0x858, w0
    2842:	40 40 90    	mov.b     [w0+4], w0
    2844:	00 04 e0    	cp0.b     w0
    2846:	16 00 3d    	bra       GE, 0x2874 <.L80>

00002848 <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    2848:	1e 80 fb    	ze        [w14], w0
    284a:	00 00 40    	add.w     w0, w0, w0
    284c:	9e 00 90    	mov.w     [w14+2], w1
    284e:	00 80 40    	add.w     w1, w0, w0
    2850:	10 00 78    	mov.w     [w0], w0
    2852:	64 00 60    	and.w     w0, #0x4, w0
    2854:	00 00 e0    	cp0.w     w0
    2856:	0a 00 32    	bra       Z, 0x286c <.L81>

00002858 <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    2858:	80 85 20    	mov.w     #0x858, w0
    285a:	10 40 90    	mov.b     [w0+1], w0
    285c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    285e:	02 00 3a    	bra       NZ, 0x2864 <.L82>
    2860:	00 40 eb    	clr.b     w0
    2862:	01 00 37    	bra       0x2866 <.L83>

00002864 <.L82>:
    2864:	40 c8 b3    	mov.b     #0x84, w0

00002866 <.L83>:
    2866:	ae 00 90    	mov.w     [w14+4], w1
    2868:	90 40 98    	mov.b     w0, [w1+1]
    286a:	19 00 37    	bra       0x289e <.L79>

0000286c <.L81>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    286c:	60 c8 bf    	mov.b     0x860, WREG
    286e:	00 04 a0    	bset.b    w0, #0x0
    2870:	60 e8 b7    	mov.b     WREG, 0x860
    2872:	15 00 37    	bra       0x289e <.L79>

00002874 <.L80>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    2874:	1e 80 fb    	ze        [w14], w0
    2876:	00 00 40    	add.w     w0, w0, w0
    2878:	9e 00 90    	mov.w     [w14+2], w1
    287a:	00 80 40    	add.w     w1, w0, w0
    287c:	10 00 78    	mov.w     [w0], w0
    287e:	68 00 60    	and.w     w0, #0x8, w0
    2880:	00 00 e0    	cp0.w     w0
    2882:	0a 00 32    	bra       Z, 0x2898 <.L84>

00002884 <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    2884:	80 85 20    	mov.w     #0x858, w0
    2886:	10 40 90    	mov.b     [w0+1], w0
    2888:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    288a:	02 00 3a    	bra       NZ, 0x2890 <.L85>
    288c:	80 c8 b3    	mov.b     #0x88, w0
    288e:	01 00 37    	bra       0x2892 <.L86>

00002890 <.L85>:
    2890:	40 c8 b3    	mov.b     #0x84, w0

00002892 <.L86>:
    2892:	ae 00 90    	mov.w     [w14+4], w1
    2894:	90 40 98    	mov.b     w0, [w1+1]
    2896:	03 00 37    	bra       0x289e <.L79>

00002898 <.L84>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    2898:	60 c8 bf    	mov.b     0x860, WREG
    289a:	00 04 a0    	bset.b    w0, #0x0
    289c:	60 e8 b7    	mov.b     WREG, 0x860

0000289e <.L79>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    289e:	60 c8 bf    	mov.b     0x860, WREG
    28a0:	00 80 fb    	ze        w0, w0
    28a2:	61 00 60    	and.w     w0, #0x1, w0
    28a4:	00 00 e0    	cp0.w     w0
    28a6:	06 00 3a    	bra       NZ, 0x28b4 <.L87>

000028a8 <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    28a8:	40 c0 20    	mov.w     #0xc04, w0
    28aa:	80 40 eb    	clr.b     w1
    28ac:	01 48 78    	mov.b     w1, [w0]

000028ae <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    28ae:	50 c0 20    	mov.w     #0xc05, w0
    28b0:	81 cc b3    	mov.b     #0xc8, w1
    28b2:	01 48 78    	mov.b     w1, [w0]

000028b4 <.L87>:
                            }
                            break;
    28b4:	03 00 37    	bra       0x28bc <.L78>

000028b6 <.L132>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    28b6:	60 c8 bf    	mov.b     0x860, WREG
    28b8:	00 04 a0    	bset.b    w0, #0x0
    28ba:	60 e8 b7    	mov.b     WREG, 0x860

000028bc <.L78>:
                    }
                    break;
    28bc:	04 00 37    	bra       0x28c6 <.L72>

000028be <.L130>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    28be:	60 c8 bf    	mov.b     0x860, WREG
    28c0:	00 04 a0    	bset.b    w0, #0x0
    28c2:	60 e8 b7    	mov.b     WREG, 0x860

000028c4 <.LSM181>:
            }
            break;
    28c4:	10 01 37    	bra       0x2ae6 <.L29>

000028c6 <.L72>:
    28c6:	0f 01 37    	bra       0x2ae6 <.L29>

000028c8 <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    28c8:	80 85 20    	mov.w     #0x858, w0
    28ca:	20 40 90    	mov.b     [w0+2], w0
    28cc:	00 04 e0    	cp0.b     w0
    28ce:	04 00 3d    	bra       GE, 0x28d8 <.L88>

000028d0 <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    28d0:	60 c8 bf    	mov.b     0x860, WREG
    28d2:	00 04 a0    	bset.b    w0, #0x0
    28d4:	60 e8 b7    	mov.b     WREG, 0x860

000028d6 <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    28d6:	07 01 37    	bra       0x2ae6 <.L29>

000028d8 <.L88>:
    28d8:	80 85 20    	mov.w     #0x858, w0
    28da:	90 40 78    	mov.b     [w0], w1
    28dc:	00 d0 20    	mov.w     #0xd00, w0
    28de:	01 48 78    	mov.b     w1, [w0]

000028e0 <.LSM186>:
    28e0:	80 85 20    	mov.w     #0x858, w0
    28e2:	90 40 90    	mov.b     [w0+1], w1
    28e4:	10 d0 20    	mov.w     #0xd01, w0
    28e6:	01 48 78    	mov.b     w1, [w0]

000028e8 <.LSM187>:
    28e8:	80 85 20    	mov.w     #0x858, w0
    28ea:	10 00 90    	mov.w     [w0+2], w0
    28ec:	10 68 88    	mov.w     w0, 0xd02

000028ee <.LSM188>:
    28ee:	80 85 20    	mov.w     #0x858, w0
    28f0:	20 00 90    	mov.w     [w0+4], w0
    28f2:	20 68 88    	mov.w     w0, 0xd04

000028f4 <.LSM189>:
    28f4:	80 85 20    	mov.w     #0x858, w0
    28f6:	30 00 90    	mov.w     [w0+6], w0
    28f8:	30 68 88    	mov.w     w0, 0xd06

000028fa <.LSM190>:
    28fa:	40 c0 20    	mov.w     #0xc04, w0
    28fc:	80 40 eb    	clr.b     w1
    28fe:	01 48 78    	mov.b     w1, [w0]

00002900 <.LSM191>:
    2900:	50 c0 20    	mov.w     #0xc05, w0
    2902:	81 cc b3    	mov.b     #0xc8, w1
    2904:	01 48 78    	mov.b     w1, [w0]

00002906 <.LSM192>:
    2906:	ef 00 37    	bra       0x2ae6 <.L29>

00002908 <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    2908:	80 85 20    	mov.w     #0x858, w0
    290a:	90 40 78    	mov.b     [w0], w1
    290c:	00 d0 20    	mov.w     #0xd00, w0
    290e:	01 48 78    	mov.b     w1, [w0]

00002910 <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    2910:	80 85 20    	mov.w     #0x858, w0
    2912:	90 40 90    	mov.b     [w0+1], w1
    2914:	10 d0 20    	mov.w     #0xd01, w0
    2916:	01 48 78    	mov.b     w1, [w0]

00002918 <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    2918:	80 85 20    	mov.w     #0x858, w0
    291a:	10 00 90    	mov.w     [w0+2], w0
    291c:	10 68 88    	mov.w     w0, 0xd02

0000291e <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    291e:	80 85 20    	mov.w     #0x858, w0
    2920:	20 00 90    	mov.w     [w0+4], w0
    2922:	20 68 88    	mov.w     w0, 0xd04

00002924 <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    2924:	80 85 20    	mov.w     #0x858, w0
    2926:	30 00 90    	mov.w     [w0+6], w0
    2928:	30 68 88    	mov.w     w0, 0xd06

0000292a <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    292a:	80 85 20    	mov.w     #0x858, w0
    292c:	30 40 90    	mov.b     [w0+3], w0
    292e:	00 80 fb    	ze        w0, w0
    2930:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2932:	14 00 32    	bra       Z, 0x295c <.L92>
    2934:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2936:	36 00 32    	bra       Z, 0x29a4 <.L93>
    2938:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    293a:	5c 00 3a    	bra       NZ, 0x29f4 <.L133>

0000293c <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    293c:	a0 55 29    	mov.w     #0x955a, w0
    293e:	40 68 88    	mov.w     w0, 0xd08

00002940 <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    2940:	40 68 80    	mov.w     0xd08, w0
    2942:	10 40 78    	mov.b     [w0], w0
    2944:	00 80 fb    	ze        w0, w0
    2946:	50 68 88    	mov.w     w0, 0xd0a

00002948 <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    2948:	80 85 20    	mov.w     #0x858, w0
    294a:	b0 00 90    	mov.w     [w0+6], w1
    294c:	50 68 80    	mov.w     0xd0a, w0
    294e:	80 8f 50    	sub.w     w1, w0, [w15]
    2950:	03 00 31    	bra       C, 0x2958 <.L94>

00002952 <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    2952:	80 85 20    	mov.w     #0x858, w0
    2954:	30 00 90    	mov.w     [w0+6], w0
    2956:	50 68 88    	mov.w     w0, 0xd0a

00002958 <.L94>:
                    }
                    SendDataPacket();
    2958:	22 01 07    	rcall     0x2b9e <_SendDataPacket>

0000295a <.LSM204>:
                    break;
    295a:	50 00 37    	bra       0x29fc <.L95>

0000295c <.L92>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    295c:	80 85 20    	mov.w     #0x858, w0
    295e:	20 40 90    	mov.b     [w0+2], w0
    2960:	00 80 fb    	ze        w0, w0
    2962:	00 00 e0    	cp0.w     w0
    2964:	03 00 3a    	bra       NZ, 0x296c <.L134>

00002966 <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    2966:	c0 56 29    	mov.w     #0x956c, w0
    2968:	40 68 88    	mov.w     w0, 0xd08

0000296a <.LSM207>:
                            break;
    296a:	03 00 37    	bra       0x2972 <.L98>

0000296c <.L134>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    296c:	60 c8 bf    	mov.b     0x860, WREG
    296e:	00 04 a0    	bset.b    w0, #0x0
    2970:	60 e8 b7    	mov.b     WREG, 0x860

00002972 <.L98>:
                    }
                    if (!(USB_error_flags&0x01)) {
    2972:	60 c8 bf    	mov.b     0x860, WREG
    2974:	00 80 fb    	ze        w0, w0
    2976:	61 00 60    	and.w     w0, #0x1, w0
    2978:	00 00 e0    	cp0.w     w0
    297a:	13 00 3a    	bra       NZ, 0x29a2 <.L99>

0000297c <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    297c:	40 68 80    	mov.w     0xd08, w0
    297e:	00 80 e8    	inc2.w    w0, w0
    2980:	90 40 78    	mov.b     [w0], w1
    2982:	a0 d0 20    	mov.w     #0xd0a, w0
    2984:	01 48 78    	mov.b     w1, [w0]

00002986 <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    2986:	40 68 80    	mov.w     0xd08, w0
    2988:	63 00 40    	add.w     w0, #0x3, w0
    298a:	90 40 78    	mov.b     [w0], w1
    298c:	b0 d0 20    	mov.w     #0xd0b, w0
    298e:	01 48 78    	mov.b     w1, [w0]

00002990 <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    2990:	80 85 20    	mov.w     #0x858, w0
    2992:	b0 00 90    	mov.w     [w0+6], w1
    2994:	50 68 80    	mov.w     0xd0a, w0
    2996:	80 8f 50    	sub.w     w1, w0, [w15]
    2998:	03 00 31    	bra       C, 0x29a0 <.L100>

0000299a <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    299a:	80 85 20    	mov.w     #0x858, w0
    299c:	30 00 90    	mov.w     [w0+6], w0
    299e:	50 68 88    	mov.w     w0, 0xd0a

000029a0 <.L100>:
                        }
                        SendDataPacket();
    29a0:	fe 00 07    	rcall     0x2b9e <_SendDataPacket>

000029a2 <.L99>:
                    }
                    break;
    29a2:	2c 00 37    	bra       0x29fc <.L95>

000029a4 <.L93>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    29a4:	80 85 20    	mov.w     #0x858, w0
    29a6:	20 40 90    	mov.b     [w0+2], w0
    29a8:	00 80 fb    	ze        w0, w0
    29aa:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    29ac:	07 00 32    	bra       Z, 0x29bc <.L103>
    29ae:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    29b0:	08 00 32    	bra       Z, 0x29c2 <.L104>
    29b2:	00 00 e0    	cp0.w     w0
    29b4:	09 00 3a    	bra       NZ, 0x29c8 <.L135>

000029b6 <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    29b6:	e0 57 29    	mov.w     #0x957e, w0
    29b8:	40 68 88    	mov.w     w0, 0xd08

000029ba <.LSM218>:
                            break;
    29ba:	09 00 37    	bra       0x29ce <.L105>

000029bc <.L103>:
                        case 1:
                            USB_request.data_ptr = String1;
    29bc:	20 58 29    	mov.w     #0x9582, w0
    29be:	40 68 88    	mov.w     w0, 0xd08

000029c0 <.LSM220>:
                            break;
    29c0:	06 00 37    	bra       0x29ce <.L105>

000029c2 <.L104>:
                        case 2:
                            USB_request.data_ptr = String2;
    29c2:	c0 59 29    	mov.w     #0x959c, w0
    29c4:	40 68 88    	mov.w     w0, 0xd08

000029c6 <.LSM222>:
                            break;
    29c6:	03 00 37    	bra       0x29ce <.L105>

000029c8 <.L135>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    29c8:	60 c8 bf    	mov.b     0x860, WREG
    29ca:	00 04 a0    	bset.b    w0, #0x0
    29cc:	60 e8 b7    	mov.b     WREG, 0x860

000029ce <.L105>:
                    }
                    if (!(USB_error_flags&0x01)) {
    29ce:	60 c8 bf    	mov.b     0x860, WREG
    29d0:	00 80 fb    	ze        w0, w0
    29d2:	61 00 60    	and.w     w0, #0x1, w0
    29d4:	00 00 e0    	cp0.w     w0
    29d6:	0d 00 3a    	bra       NZ, 0x29f2 <.L106>

000029d8 <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    29d8:	40 68 80    	mov.w     0xd08, w0
    29da:	10 40 78    	mov.b     [w0], w0
    29dc:	00 80 fb    	ze        w0, w0
    29de:	50 68 88    	mov.w     w0, 0xd0a

000029e0 <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    29e0:	80 85 20    	mov.w     #0x858, w0
    29e2:	b0 00 90    	mov.w     [w0+6], w1
    29e4:	50 68 80    	mov.w     0xd0a, w0
    29e6:	80 8f 50    	sub.w     w1, w0, [w15]
    29e8:	03 00 31    	bra       C, 0x29f0 <.L107>

000029ea <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    29ea:	80 85 20    	mov.w     #0x858, w0
    29ec:	30 00 90    	mov.w     [w0+6], w0
    29ee:	50 68 88    	mov.w     w0, 0xd0a

000029f0 <.L107>:
                        }
                        SendDataPacket();
    29f0:	d6 00 07    	rcall     0x2b9e <_SendDataPacket>

000029f2 <.L106>:
                    }
                    break;
    29f2:	04 00 37    	bra       0x29fc <.L95>

000029f4 <.L133>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    29f4:	60 c8 bf    	mov.b     0x860, WREG
    29f6:	00 04 a0    	bset.b    w0, #0x0
    29f8:	60 e8 b7    	mov.b     WREG, 0x860

000029fa <.LSM231>:
            }
            break;
    29fa:	75 00 37    	bra       0x2ae6 <.L29>

000029fc <.L95>:
    29fc:	74 00 37    	bra       0x2ae6 <.L29>

000029fe <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    29fe:	30 60 80    	mov.w     0xc06, w0
    2a00:	11 86 20    	mov.w     #0x861, w1
    2a02:	91 40 78    	mov.b     [w1], w1
    2a04:	01 48 78    	mov.b     w1, [w0]

00002a06 <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    2a06:	40 c0 20    	mov.w     #0xc04, w0
    2a08:	11 c0 b3    	mov.b     #0x1, w1
    2a0a:	01 48 78    	mov.b     w1, [w0]

00002a0c <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    2a0c:	50 c0 20    	mov.w     #0xc05, w0
    2a0e:	81 cc b3    	mov.b     #0xc8, w1
    2a10:	01 48 78    	mov.b     w1, [w0]

00002a12 <.LSM235>:
            break;
    2a12:	69 00 37    	bra       0x2ae6 <.L29>

00002a14 <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    2a14:	80 85 20    	mov.w     #0x858, w0
    2a16:	20 40 90    	mov.b     [w0+2], w0
    2a18:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    2a1a:	22 00 3e    	bra       GTU, 0x2a60 <.L108>

00002a1c <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    2a1c:	a0 4a 20    	mov.w     #0x4aa, w0
    2a1e:	10 07 98    	mov.w     w0, [w14+2]

00002a20 <.LSM238>:
                for (n = 1; n<16; n++)
    2a20:	10 c0 b3    	mov.b     #0x1, w0
    2a22:	00 4f 78    	mov.b     w0, [w14]
    2a24:	07 00 37    	bra       0x2a34 <.L109>

00002a26 <.L110>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    2a26:	1e 80 fb    	ze        [w14], w0
    2a28:	00 00 40    	add.w     w0, w0, w0
    2a2a:	9e 00 90    	mov.w     [w14+2], w1
    2a2c:	00 80 40    	add.w     w1, w0, w0
    2a2e:	80 00 eb    	clr.w     w1
    2a30:	01 08 78    	mov.w     w1, [w0]

00002a32 <.LSM240>:
    2a32:	1e 4f e8    	inc.b     [w14], [w14]

00002a34 <.L109>:
    2a34:	1e 40 78    	mov.b     [w14], w0
    2a36:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    2a38:	f6 ff 36    	bra       LEU, 0x2a26 <.L110>

00002a3a <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    2a3a:	80 85 20    	mov.w     #0x858, w0
    2a3c:	20 40 90    	mov.b     [w0+2], w0
    2a3e:	61 e8 b7    	mov.b     WREG, 0x861
    2a40:	61 c8 bf    	mov.b     0x861, WREG
    2a42:	00 80 fb    	ze        w0, w0
    2a44:	00 00 e0    	cp0.w     w0
    2a46:	03 00 3a    	bra       NZ, 0x2a4e <.L136>

00002a48 <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    2a48:	20 c0 b3    	mov.b     #0x2, w0
    2a4a:	64 e8 b7    	mov.b     WREG, 0x864

00002a4c <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    2a4c:	02 00 37    	bra       0x2a52 <.L113>

00002a4e <.L136>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    2a4e:	30 c0 b3    	mov.b     #0x3, w0
    2a50:	64 e8 b7    	mov.b     WREG, 0x864

00002a52 <.L113>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    2a52:	40 c0 20    	mov.w     #0xc04, w0
    2a54:	80 40 eb    	clr.b     w1
    2a56:	01 48 78    	mov.b     w1, [w0]

00002a58 <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    2a58:	50 c0 20    	mov.w     #0xc05, w0
    2a5a:	81 cc b3    	mov.b     #0xc8, w1
    2a5c:	01 48 78    	mov.b     w1, [w0]

00002a5e <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    2a5e:	43 00 37    	bra       0x2ae6 <.L29>

00002a60 <.L108>:
    2a60:	60 c8 bf    	mov.b     0x860, WREG
    2a62:	00 04 a0    	bset.b    w0, #0x0
    2a64:	60 e8 b7    	mov.b     WREG, 0x860

00002a66 <.LSM249>:
    2a66:	3f 00 37    	bra       0x2ae6 <.L29>

00002a68 <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    2a68:	64 c8 bf    	mov.b     0x864, WREG
    2a6a:	00 80 fb    	ze        w0, w0
    2a6c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2a6e:	13 00 3a    	bra       NZ, 0x2a96 <.L137>

00002a70 <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    2a70:	80 85 20    	mov.w     #0x858, w0
    2a72:	40 40 90    	mov.b     [w0+4], w0
    2a74:	00 04 e0    	cp0.b     w0
    2a76:	0a 00 3a    	bra       NZ, 0x2a8c <.L117>

00002a78 <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    2a78:	30 60 80    	mov.w     0xc06, w0
    2a7a:	80 40 eb    	clr.b     w1
    2a7c:	01 48 78    	mov.b     w1, [w0]

00002a7e <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    2a7e:	40 c0 20    	mov.w     #0xc04, w0
    2a80:	11 c0 b3    	mov.b     #0x1, w1
    2a82:	01 48 78    	mov.b     w1, [w0]

00002a84 <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    2a84:	50 c0 20    	mov.w     #0xc05, w0
    2a86:	81 cc b3    	mov.b     #0xc8, w1
    2a88:	01 48 78    	mov.b     w1, [w0]
    2a8a:	03 00 37    	bra       0x2a92 <.L118>

00002a8c <.L117>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    2a8c:	60 c8 bf    	mov.b     0x860, WREG
    2a8e:	00 04 a0    	bset.b    w0, #0x0
    2a90:	60 e8 b7    	mov.b     WREG, 0x860

00002a92 <.L118>:
                    }
                    break;
    2a92:	00 00 00    	nop       

00002a94 <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    2a94:	28 00 37    	bra       0x2ae6 <.L29>

00002a96 <.L137>:
    2a96:	60 c8 bf    	mov.b     0x860, WREG
    2a98:	00 04 a0    	bset.b    w0, #0x0
    2a9a:	60 e8 b7    	mov.b     WREG, 0x860

00002a9c <.LSM259>:
    2a9c:	24 00 37    	bra       0x2ae6 <.L29>

00002a9e <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    2a9e:	64 c8 bf    	mov.b     0x864, WREG
    2aa0:	00 80 fb    	ze        w0, w0
    2aa2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2aa4:	19 00 3a    	bra       NZ, 0x2ad8 <.L138>

00002aa6 <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    2aa6:	80 85 20    	mov.w     #0x858, w0
    2aa8:	40 40 90    	mov.b     [w0+4], w0
    2aaa:	00 04 e0    	cp0.b     w0
    2aac:	10 00 3a    	bra       NZ, 0x2ace <.L122>

00002aae <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    2aae:	80 85 20    	mov.w     #0x858, w0
    2ab0:	20 40 90    	mov.b     [w0+2], w0
    2ab2:	00 80 fb    	ze        w0, w0
    2ab4:	00 00 e0    	cp0.w     w0
    2ab6:	07 00 3a    	bra       NZ, 0x2ac6 <.L139>

00002ab8 <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    2ab8:	40 c0 20    	mov.w     #0xc04, w0
    2aba:	80 40 eb    	clr.b     w1
    2abc:	01 48 78    	mov.b     w1, [w0]

00002abe <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    2abe:	50 c0 20    	mov.w     #0xc05, w0
    2ac0:	81 cc b3    	mov.b     #0xc8, w1
    2ac2:	01 48 78    	mov.b     w1, [w0]

00002ac4 <.LSM265>:
                                break;
    2ac4:	07 00 37    	bra       0x2ad4 <.L126>

00002ac6 <.L139>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    2ac6:	60 c8 bf    	mov.b     0x860, WREG
    2ac8:	00 04 a0    	bset.b    w0, #0x0
    2aca:	60 e8 b7    	mov.b     WREG, 0x860
    2acc:	03 00 37    	bra       0x2ad4 <.L126>

00002ace <.L122>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    2ace:	60 c8 bf    	mov.b     0x860, WREG
    2ad0:	00 04 a0    	bset.b    w0, #0x0
    2ad2:	60 e8 b7    	mov.b     WREG, 0x860

00002ad4 <.L126>:
                    }
                    break;
    2ad4:	00 00 00    	nop       

00002ad6 <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    2ad6:	07 00 37    	bra       0x2ae6 <.L29>

00002ad8 <.L138>:
    2ad8:	60 c8 bf    	mov.b     0x860, WREG
    2ada:	00 04 a0    	bset.b    w0, #0x0
    2adc:	60 e8 b7    	mov.b     WREG, 0x860

00002ade <.LSM271>:
    2ade:	03 00 37    	bra       0x2ae6 <.L29>

00002ae0 <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    2ae0:	60 c8 bf    	mov.b     0x860, WREG
    2ae2:	00 04 a0    	bset.b    w0, #0x0
    2ae4:	60 e8 b7    	mov.b     WREG, 0x860

00002ae6 <.L29>:
    }
}
    2ae6:	00 80 fa    	ulnk      
    2ae8:	00 00 06    	return    

00002aea <_ProcessInToken>:

void ProcessInToken(void) {
    2aea:	00 00 fa    	lnk       #0x0

00002aec <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    2aec:	63 c8 bf    	mov.b     0x863, WREG
    2aee:	80 80 fb    	ze        w0, w1
    2af0:	00 0f 20    	mov.w     #0xf0, w0
    2af2:	00 80 60    	and.w     w1, w0, w0
    2af4:	00 00 e0    	cp0.w     w0
    2af6:	2b 00 3a    	bra       NZ, 0x2b4e <.L140>

00002af8 <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    2af8:	00 d0 20    	mov.w     #0xd00, w0
    2afa:	10 40 78    	mov.b     [w0], w0
    2afc:	80 80 fb    	ze        w0, w1
    2afe:	00 06 20    	mov.w     #0x60, w0
    2b00:	00 80 60    	and.w     w1, w0, w0
    2b02:	01 02 20    	mov.w     #0x20, w1
    2b04:	81 0f 50    	sub.w     w0, w1, [w15]
    2b06:	1f 00 32    	bra       Z, 0x2b46 <.L154>
    2b08:	01 04 20    	mov.w     #0x40, w1
    2b0a:	81 0f 50    	sub.w     w0, w1, [w15]
    2b0c:	1a 00 32    	bra       Z, 0x2b42 <.L146>
    2b0e:	00 00 e0    	cp0.w     w0
    2b10:	1d 00 3a    	bra       NZ, 0x2b4c <.L155>

00002b12 <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    2b12:	10 d0 20    	mov.w     #0xd01, w0
    2b14:	10 40 78    	mov.b     [w0], w0
    2b16:	00 80 fb    	ze        w0, w0
    2b18:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2b1a:	03 00 32    	bra       Z, 0x2b22 <.L148>
    2b1c:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    2b1e:	0e 00 32    	bra       Z, 0x2b3c <.L149>

00002b20 <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    2b20:	13 00 37    	bra       0x2b48 <.L143>

00002b22 <.L148>:
    2b22:	20 d0 20    	mov.w     #0xd02, w0
    2b24:	10 40 78    	mov.b     [w0], w0
    2b26:	00 80 fb    	ze        w0, w0
    2b28:	b0 24 88    	mov.w     w0, 0x496
    2b2a:	b0 24 80    	mov.w     0x496, w0
    2b2c:	00 00 e0    	cp0.w     w0
    2b2e:	03 00 3a    	bra       NZ, 0x2b36 <.L153>

00002b30 <.LSM280>:
    2b30:	10 c0 b3    	mov.b     #0x1, w0
    2b32:	64 e8 b7    	mov.b     WREG, 0x864

00002b34 <.LSM281>:
    2b34:	02 00 37    	bra       0x2b3a <.L152>

00002b36 <.L153>:
    2b36:	20 c0 b3    	mov.b     #0x2, w0
    2b38:	64 e8 b7    	mov.b     WREG, 0x864

00002b3a <.L152>:
    2b3a:	02 00 37    	bra       0x2b40 <.L147>

00002b3c <.L149>:
    2b3c:	30 00 07    	rcall     0x2b9e <_SendDataPacket>

00002b3e <.LSM285>:
    2b3e:	00 00 00    	nop       

00002b40 <.L147>:
    2b40:	03 00 37    	bra       0x2b48 <.L143>

00002b42 <.L146>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    2b42:	7a 0c 07    	rcall     0x4438 <_VendorRequestsIn>

00002b44 <.LSM288>:
                    break;
    2b44:	01 00 37    	bra       0x2b48 <.L143>

00002b46 <.L154>:
    2b46:	00 00 00    	nop       

00002b48 <.L143>:
            }
            break;
    2b48:	00 00 00    	nop       
    2b4a:	01 00 37    	bra       0x2b4e <.L140>

00002b4c <.L155>:
    2b4c:	00 00 00    	nop       

00002b4e <.L140>:
    }
}
    2b4e:	00 80 fa    	ulnk      
    2b50:	00 00 06    	return    

00002b52 <_ProcessOutToken>:

void ProcessOutToken(void) {
    2b52:	00 00 fa    	lnk       #0x0

00002b54 <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    2b54:	63 c8 bf    	mov.b     0x863, WREG
    2b56:	80 80 fb    	ze        w0, w1
    2b58:	00 0f 20    	mov.w     #0xf0, w0
    2b5a:	00 80 60    	and.w     w1, w0, w0
    2b5c:	00 00 e0    	cp0.w     w0
    2b5e:	1d 00 3a    	bra       NZ, 0x2b9a <.L156>

00002b60 <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    2b60:	00 d0 20    	mov.w     #0xd00, w0
    2b62:	10 40 78    	mov.b     [w0], w0
    2b64:	80 80 fb    	ze        w0, w1
    2b66:	00 06 20    	mov.w     #0x60, w0
    2b68:	00 80 60    	and.w     w1, w0, w0
    2b6a:	01 02 20    	mov.w     #0x20, w1
    2b6c:	81 0f 50    	sub.w     w0, w1, [w15]
    2b6e:	05 00 32    	bra       Z, 0x2b7a <.L163>
    2b70:	01 04 20    	mov.w     #0x40, w1
    2b72:	81 0f 50    	sub.w     w0, w1, [w15]
    2b74:	04 00 3a    	bra       NZ, 0x2b7e <.L164>

00002b76 <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    2b76:	66 0c 07    	rcall     0x4444 <_VendorRequestsOut>

00002b78 <.LSM296>:
                    break;
    2b78:	03 00 37    	bra       0x2b80 <.L159>

00002b7a <.L163>:
    2b7a:	00 00 00    	nop       
    2b7c:	01 00 37    	bra       0x2b80 <.L159>

00002b7e <.L164>:
    2b7e:	00 00 00    	nop       

00002b80 <.L159>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2b80:	00 c0 20    	mov.w     #0xc00, w0
    2b82:	01 c4 b3    	mov.b     #0x40, w1
    2b84:	01 48 78    	mov.b     w1, [w0]

00002b86 <.LSM300>:
            BD[EP0OUT].status = 0x88;
    2b86:	10 c0 20    	mov.w     #0xc01, w0
    2b88:	81 c8 b3    	mov.b     #0x88, w1
    2b8a:	01 48 78    	mov.b     w1, [w0]

00002b8c <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    2b8c:	40 c0 20    	mov.w     #0xc04, w0
    2b8e:	80 40 eb    	clr.b     w1
    2b90:	01 48 78    	mov.b     w1, [w0]

00002b92 <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    2b92:	50 c0 20    	mov.w     #0xc05, w0
    2b94:	81 cc b3    	mov.b     #0xc8, w1
    2b96:	01 48 78    	mov.b     w1, [w0]

00002b98 <.LSM303>:
            break;
    2b98:	00 00 00    	nop       

00002b9a <.L156>:
    }
}
    2b9a:	00 80 fa    	ulnk      
    2b9c:	00 00 06    	return    

00002b9e <_SendDataPacket>:

void SendDataPacket(void) {
    2b9e:	02 00 fa    	lnk       #0x2

00002ba0 <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    2ba0:	51 68 80    	mov.w     0xd0a, w1
    2ba2:	f0 03 20    	mov.w     #0x3f, w0
    2ba4:	80 8f 50    	sub.w     w1, w0, [w15]
    2ba6:	0b 00 3e    	bra       GTU, 0x2bbe <.L166>

00002ba8 <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    2ba8:	50 68 80    	mov.w     0xd0a, w0
    2baa:	00 4f 78    	mov.b     w0, [w14]

00002bac <.LSM308>:
        USB_request.bytes_left.w = 0;
    2bac:	00 00 eb    	clr.w     w0
    2bae:	50 68 88    	mov.w     w0, 0xd0a

00002bb0 <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    2bb0:	00 d0 20    	mov.w     #0xd00, w0
    2bb2:	80 c0 eb    	setm.b    w1
    2bb4:	01 48 78    	mov.b     w1, [w0]

00002bb6 <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    2bb6:	10 d0 20    	mov.w     #0xd01, w0
    2bb8:	80 c0 eb    	setm.b    w1
    2bba:	01 48 78    	mov.b     w1, [w0]
    2bbc:	05 00 37    	bra       0x2bc8 <.L167>

00002bbe <.L166>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    2bbe:	00 c4 b3    	mov.b     #0x40, w0
    2bc0:	00 4f 78    	mov.b     w0, [w14]

00002bc2 <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    2bc2:	50 68 80    	mov.w     0xd0a, w0
    2bc4:	00 04 b1    	sub.w     #0x40, w0
    2bc6:	50 68 88    	mov.w     w0, 0xd0a

00002bc8 <.L167>:
    }
    for (n = 0; n<packet_length; n++) {
    2bc8:	00 40 eb    	clr.b     w0
    2bca:	10 47 98    	mov.b     w0, [w14+1]
    2bcc:	0c 00 37    	bra       0x2be6 <.L168>

00002bce <.L169>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    2bce:	31 60 80    	mov.w     0xc06, w1
    2bd0:	1e 40 90    	mov.b     [w14+1], w0
    2bd2:	00 80 fb    	ze        w0, w0
    2bd4:	80 80 40    	add.w     w1, w0, w1
    2bd6:	40 68 80    	mov.w     0xd08, w0
    2bd8:	10 41 78    	mov.b     [w0], w2
    2bda:	82 48 78    	mov.b     w2, [w1]
    2bdc:	00 00 e8    	inc.w     w0, w0
    2bde:	40 68 88    	mov.w     w0, 0xd08

00002be0 <.LSM315>:
    2be0:	1e 40 90    	mov.b     [w14+1], w0
    2be2:	00 40 e8    	inc.b     w0, w0
    2be4:	10 47 98    	mov.b     w0, [w14+1]

00002be6 <.L168>:
    2be6:	1e 40 90    	mov.b     [w14+1], w0
    2be8:	9e 4f 50    	sub.b     w0, [w14], [w15]
    2bea:	f1 ff 39    	bra       NC, 0x2bce <.L169>

00002bec <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    2bec:	40 c0 20    	mov.w     #0xc04, w0
    2bee:	1e 48 78    	mov.b     [w14], [w0]

00002bf0 <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    2bf0:	50 c0 20    	mov.w     #0xc05, w0
    2bf2:	10 40 78    	mov.b     [w0], w0
    2bf4:	00 c0 ea    	com.b     w0, w0
    2bf6:	02 c4 b3    	mov.b     #0x40, w2
    2bf8:	82 40 60    	and.b     w0, w2, w1
    2bfa:	80 c8 b3    	mov.b     #0x88, w0
    2bfc:	00 c0 70    	ior.b     w1, w0, w0
    2bfe:	80 40 78    	mov.b     w0, w1
    2c00:	50 c0 20    	mov.w     #0xc05, w0
    2c02:	01 48 78    	mov.b     w1, [w0]

00002c04 <.LSM318>:
}
    2c04:	00 80 fa    	ulnk      
    2c06:	00 00 06    	return    

00002c08 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    2c08:	02 00 fa    	lnk       #0x2
    2c0a:	00 0f 78    	mov.w     w0, [w14]

00002c0c <.LSM1>:
    timer_lower(self);
    2c0c:	1e 00 78    	mov.w     [w14], w0
    2c0e:	01 02 07    	rcall     0x3012 <_timer_lower>

00002c10 <.LSM2>:
    if (self->every) {
    2c10:	1e 00 78    	mov.w     [w14], w0
    2c12:	10 08 90    	mov.w     [w0+18], w0
    2c14:	00 00 e0    	cp0.w     w0
    2c16:	05 00 32    	bra       Z, 0x2c22 <.L2>

00002c18 <.LSM3>:
        self->every(self);
    2c18:	1e 00 78    	mov.w     [w14], w0
    2c1a:	90 08 90    	mov.w     [w0+18], w1
    2c1c:	1e 00 78    	mov.w     [w14], w0
    2c1e:	01 00 01    	call      w1
    2c20:	1a 00 37    	bra       0x2c56 <.L1>

00002c22 <.L2>:
    } else if (self->after) {
    2c22:	1e 00 78    	mov.w     [w14], w0
    2c24:	20 08 90    	mov.w     [w0+20], w0
    2c26:	00 00 e0    	cp0.w     w0
    2c28:	14 00 32    	bra       Z, 0x2c52 <.L4>

00002c2a <.LSM5>:
        if (self->aftercount) {
    2c2a:	1e 00 78    	mov.w     [w14], w0
    2c2c:	00 08 90    	mov.w     [w0+16], w0
    2c2e:	00 00 e0    	cp0.w     w0
    2c30:	0a 00 32    	bra       Z, 0x2c46 <.L5>

00002c32 <.LSM6>:
            self->after(self);
    2c32:	1e 00 78    	mov.w     [w14], w0
    2c34:	a0 08 90    	mov.w     [w0+20], w1
    2c36:	1e 00 78    	mov.w     [w14], w0
    2c38:	01 00 01    	call      w1

00002c3a <.LSM7>:
            self->aftercount--;
    2c3a:	1e 00 78    	mov.w     [w14], w0
    2c3c:	00 08 90    	mov.w     [w0+16], w0
    2c3e:	80 00 e9    	dec.w     w0, w1
    2c40:	1e 00 78    	mov.w     [w14], w0
    2c42:	01 08 98    	mov.w     w1, [w0+16]
    2c44:	08 00 37    	bra       0x2c56 <.L1>

00002c46 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2c46:	1e 00 78    	mov.w     [w14], w0
    2c48:	0c 02 07    	rcall     0x3062 <_timer_disableInterrupt>

00002c4a <.LSM9>:
            self->after = NULL;
    2c4a:	1e 00 78    	mov.w     [w14], w0
    2c4c:	80 00 eb    	clr.w     w1
    2c4e:	21 08 98    	mov.w     w1, [w0+20]
    2c50:	02 00 37    	bra       0x2c56 <.L1>

00002c52 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    2c52:	1e 00 78    	mov.w     [w14], w0
    2c54:	06 02 07    	rcall     0x3062 <_timer_disableInterrupt>

00002c56 <.L1>:
    }
}
    2c56:	00 80 fa    	ulnk      
    2c58:	00 00 06    	return    

00002c5a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    2c5a:	36 00 f8    	push      0x36
    2c5c:	80 9f be    	mov.d     w0, [w15++]
    2c5e:	82 9f be    	mov.d     w2, [w15++]
    2c60:	84 9f be    	mov.d     w4, [w15++]
    2c62:	86 9f be    	mov.d     w6, [w15++]
    2c64:	32 00 f8    	push      0x32
    2c66:	34 00 f8    	push      0x34
    2c68:	10 00 20    	mov.w     #0x1, w0
    2c6a:	a0 01 88    	mov.w     w0, 0x34
    2c6c:	00 20 20    	mov.w     #0x200, w0
    2c6e:	90 01 88    	mov.w     w0, 0x32
    2c70:	00 00 fa    	lnk       #0x0

00002c72 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    2c72:	c0 d0 20    	mov.w     #0xd0c, w0
    2c74:	c9 ff 07    	rcall     0x2c08 <_timer_serviceInterrupt>

00002c76 <.LSM14>:
}
    2c76:	00 80 fa    	ulnk      
    2c78:	34 00 f9    	pop       0x34
    2c7a:	32 00 f9    	pop       0x32
    2c7c:	4f 03 be    	mov.d     [--w15], w6
    2c7e:	4f 02 be    	mov.d     [--w15], w4
    2c80:	4f 01 be    	mov.d     [--w15], w2
    2c82:	4f 00 be    	mov.d     [--w15], w0
    2c84:	36 00 f9    	pop       0x36
    2c86:	00 40 06    	retfie    

00002c88 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2c88:	36 00 f8    	push      0x36
    2c8a:	80 9f be    	mov.d     w0, [w15++]
    2c8c:	82 9f be    	mov.d     w2, [w15++]
    2c8e:	84 9f be    	mov.d     w4, [w15++]
    2c90:	86 9f be    	mov.d     w6, [w15++]
    2c92:	32 00 f8    	push      0x32
    2c94:	34 00 f8    	push      0x34
    2c96:	10 00 20    	mov.w     #0x1, w0
    2c98:	a0 01 88    	mov.w     w0, 0x34
    2c9a:	00 20 20    	mov.w     #0x200, w0
    2c9c:	90 01 88    	mov.w     w0, 0x32
    2c9e:	00 00 fa    	lnk       #0x0

00002ca0 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    2ca0:	20 d2 20    	mov.w     #0xd22, w0
    2ca2:	b2 ff 07    	rcall     0x2c08 <_timer_serviceInterrupt>

00002ca4 <.LSM17>:
}
    2ca4:	00 80 fa    	ulnk      
    2ca6:	34 00 f9    	pop       0x34
    2ca8:	32 00 f9    	pop       0x32
    2caa:	4f 03 be    	mov.d     [--w15], w6
    2cac:	4f 02 be    	mov.d     [--w15], w4
    2cae:	4f 01 be    	mov.d     [--w15], w2
    2cb0:	4f 00 be    	mov.d     [--w15], w0
    2cb2:	36 00 f9    	pop       0x36
    2cb4:	00 40 06    	retfie    

00002cb6 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    2cb6:	36 00 f8    	push      0x36
    2cb8:	80 9f be    	mov.d     w0, [w15++]
    2cba:	82 9f be    	mov.d     w2, [w15++]
    2cbc:	84 9f be    	mov.d     w4, [w15++]
    2cbe:	86 9f be    	mov.d     w6, [w15++]
    2cc0:	32 00 f8    	push      0x32
    2cc2:	34 00 f8    	push      0x34
    2cc4:	10 00 20    	mov.w     #0x1, w0
    2cc6:	a0 01 88    	mov.w     w0, 0x34
    2cc8:	00 20 20    	mov.w     #0x200, w0
    2cca:	90 01 88    	mov.w     w0, 0x32
    2ccc:	00 00 fa    	lnk       #0x0

00002cce <.LSM19>:
    timer_serviceInterrupt(&timer3);
    2cce:	80 d3 20    	mov.w     #0xd38, w0
    2cd0:	9b ff 07    	rcall     0x2c08 <_timer_serviceInterrupt>

00002cd2 <.LSM20>:
}
    2cd2:	00 80 fa    	ulnk      
    2cd4:	34 00 f9    	pop       0x34
    2cd6:	32 00 f9    	pop       0x32
    2cd8:	4f 03 be    	mov.d     [--w15], w6
    2cda:	4f 02 be    	mov.d     [--w15], w4
    2cdc:	4f 01 be    	mov.d     [--w15], w2
    2cde:	4f 00 be    	mov.d     [--w15], w0
    2ce0:	36 00 f9    	pop       0x36
    2ce2:	00 40 06    	retfie    

00002ce4 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    2ce4:	36 00 f8    	push      0x36
    2ce6:	80 9f be    	mov.d     w0, [w15++]
    2ce8:	82 9f be    	mov.d     w2, [w15++]
    2cea:	84 9f be    	mov.d     w4, [w15++]
    2cec:	86 9f be    	mov.d     w6, [w15++]
    2cee:	32 00 f8    	push      0x32
    2cf0:	34 00 f8    	push      0x34
    2cf2:	10 00 20    	mov.w     #0x1, w0
    2cf4:	a0 01 88    	mov.w     w0, 0x34
    2cf6:	00 20 20    	mov.w     #0x200, w0
    2cf8:	90 01 88    	mov.w     w0, 0x32
    2cfa:	00 00 fa    	lnk       #0x0

00002cfc <.LSM22>:
    timer_serviceInterrupt(&timer4);
    2cfc:	e0 d4 20    	mov.w     #0xd4e, w0
    2cfe:	84 ff 07    	rcall     0x2c08 <_timer_serviceInterrupt>

00002d00 <.LSM23>:
}
    2d00:	00 80 fa    	ulnk      
    2d02:	34 00 f9    	pop       0x34
    2d04:	32 00 f9    	pop       0x32
    2d06:	4f 03 be    	mov.d     [--w15], w6
    2d08:	4f 02 be    	mov.d     [--w15], w4
    2d0a:	4f 01 be    	mov.d     [--w15], w2
    2d0c:	4f 00 be    	mov.d     [--w15], w0
    2d0e:	36 00 f9    	pop       0x36
    2d10:	00 40 06    	retfie    

00002d12 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    2d12:	36 00 f8    	push      0x36
    2d14:	80 9f be    	mov.d     w0, [w15++]
    2d16:	82 9f be    	mov.d     w2, [w15++]
    2d18:	84 9f be    	mov.d     w4, [w15++]
    2d1a:	86 9f be    	mov.d     w6, [w15++]
    2d1c:	32 00 f8    	push      0x32
    2d1e:	34 00 f8    	push      0x34
    2d20:	10 00 20    	mov.w     #0x1, w0
    2d22:	a0 01 88    	mov.w     w0, 0x34
    2d24:	00 20 20    	mov.w     #0x200, w0
    2d26:	90 01 88    	mov.w     w0, 0x32
    2d28:	00 00 fa    	lnk       #0x0

00002d2a <.LSM25>:
    timer_serviceInterrupt(&timer5);
    2d2a:	40 d6 20    	mov.w     #0xd64, w0
    2d2c:	6d ff 07    	rcall     0x2c08 <_timer_serviceInterrupt>

00002d2e <.LSM26>:
}
    2d2e:	00 80 fa    	ulnk      
    2d30:	34 00 f9    	pop       0x34
    2d32:	32 00 f9    	pop       0x32
    2d34:	4f 03 be    	mov.d     [--w15], w6
    2d36:	4f 02 be    	mov.d     [--w15], w4
    2d38:	4f 01 be    	mov.d     [--w15], w2
    2d3a:	4f 00 be    	mov.d     [--w15], w0
    2d3c:	36 00 f9    	pop       0x36
    2d3e:	00 40 06    	retfie    

00002d40 <_init_timer>:

void init_timer(void) {
    2d40:	00 00 fa    	lnk       #0x0

00002d42 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    2d42:	b0 00 20    	mov.w     #0xb, w0
    2d44:	80 1f 78    	mov.w     w0, [w15++]
    2d46:	47 00 20    	mov.w     #0x4, w7
    2d48:	36 c0 b3    	mov.b     #0x3, w6
    2d4a:	45 09 20    	mov.w     #0x94, w5
    2d4c:	44 08 20    	mov.w     #0x84, w4
    2d4e:	03 10 20    	mov.w     #0x100, w3
    2d50:	22 10 20    	mov.w     #0x102, w2
    2d52:	41 10 20    	mov.w     #0x104, w1
    2d54:	c0 d0 20    	mov.w     #0xd0c, w0
    2d56:	33 00 07    	rcall     0x2dbe <_timer_init>
    2d58:	8f 87 e9    	dec2.w    w15, w15

00002d5a <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    2d5a:	c0 00 20    	mov.w     #0xc, w0
    2d5c:	80 1f 78    	mov.w     w0, [w15++]
    2d5e:	80 03 eb    	clr.w     w7
    2d60:	76 c0 b3    	mov.b     #0x7, w6
    2d62:	45 09 20    	mov.w     #0x94, w5
    2d64:	44 08 20    	mov.w     #0x84, w4
    2d66:	63 10 20    	mov.w     #0x106, w3
    2d68:	c2 10 20    	mov.w     #0x10c, w2
    2d6a:	01 11 20    	mov.w     #0x110, w1
    2d6c:	20 d2 20    	mov.w     #0xd22, w0
    2d6e:	27 00 07    	rcall     0x2dbe <_timer_init>
    2d70:	8f 87 e9    	dec2.w    w15, w15

00002d72 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    2d72:	d0 00 20    	mov.w     #0xd, w0
    2d74:	80 1f 78    	mov.w     w0, [w15++]
    2d76:	17 00 20    	mov.w     #0x1, w7
    2d78:	86 c0 b3    	mov.b     #0x8, w6
    2d7a:	45 09 20    	mov.w     #0x94, w5
    2d7c:	44 08 20    	mov.w     #0x84, w4
    2d7e:	a3 10 20    	mov.w     #0x10a, w3
    2d80:	e2 10 20    	mov.w     #0x10e, w2
    2d82:	21 11 20    	mov.w     #0x112, w1
    2d84:	80 d3 20    	mov.w     #0xd38, w0
    2d86:	1b 00 07    	rcall     0x2dbe <_timer_init>
    2d88:	8f 87 e9    	dec2.w    w15, w15

00002d8a <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    2d8a:	e0 00 20    	mov.w     #0xe, w0
    2d8c:	80 1f 78    	mov.w     w0, [w15++]
    2d8e:	27 00 20    	mov.w     #0x2, w7
    2d90:	b6 c0 b3    	mov.b     #0xb, w6
    2d92:	65 09 20    	mov.w     #0x96, w5
    2d94:	64 08 20    	mov.w     #0x86, w4
    2d96:	43 11 20    	mov.w     #0x114, w3
    2d98:	a2 11 20    	mov.w     #0x11a, w2
    2d9a:	e1 11 20    	mov.w     #0x11e, w1
    2d9c:	e0 d4 20    	mov.w     #0xd4e, w0
    2d9e:	0f 00 07    	rcall     0x2dbe <_timer_init>
    2da0:	8f 87 e9    	dec2.w    w15, w15

00002da2 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    2da2:	f0 00 20    	mov.w     #0xf, w0
    2da4:	80 1f 78    	mov.w     w0, [w15++]
    2da6:	37 00 20    	mov.w     #0x3, w7
    2da8:	c6 c0 b3    	mov.b     #0xc, w6
    2daa:	65 09 20    	mov.w     #0x96, w5
    2dac:	64 08 20    	mov.w     #0x86, w4
    2dae:	83 11 20    	mov.w     #0x118, w3
    2db0:	c2 11 20    	mov.w     #0x11c, w2
    2db2:	01 12 20    	mov.w     #0x120, w1
    2db4:	40 d6 20    	mov.w     #0xd64, w0
    2db6:	03 00 07    	rcall     0x2dbe <_timer_init>
    2db8:	8f 87 e9    	dec2.w    w15, w15

00002dba <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    2dba:	00 80 fa    	ulnk      
    2dbc:	00 00 06    	return    

00002dbe <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    2dbe:	10 00 fa    	lnk       #0x10
    2dc0:	00 0f 78    	mov.w     w0, [w14]
    2dc2:	11 07 98    	mov.w     w1, [w14+2]
    2dc4:	22 07 98    	mov.w     w2, [w14+4]
    2dc6:	33 07 98    	mov.w     w3, [w14+6]
    2dc8:	44 07 98    	mov.w     w4, [w14+8]
    2dca:	55 07 98    	mov.w     w5, [w14+10]
    2dcc:	46 4f 98    	mov.b     w6, [w14+12]
    2dce:	77 07 98    	mov.w     w7, [w14+14]

00002dd0 <.LSM35>:
    self->TxCON = TxCON;
    2dd0:	1e 00 78    	mov.w     [w14], w0
    2dd2:	9e 00 90    	mov.w     [w14+2], w1
    2dd4:	01 08 78    	mov.w     w1, [w0]

00002dd6 <.LSM36>:
    self->PRx = PRx;
    2dd6:	1e 00 78    	mov.w     [w14], w0
    2dd8:	ae 00 90    	mov.w     [w14+4], w1
    2dda:	11 00 98    	mov.w     w1, [w0+2]

00002ddc <.LSM37>:
    self->TMRx = TMRx;
    2ddc:	1e 00 78    	mov.w     [w14], w0
    2dde:	be 00 90    	mov.w     [w14+6], w1
    2de0:	21 00 98    	mov.w     w1, [w0+4]

00002de2 <.LSM38>:
    self->IFSy = IFSy;
    2de2:	1e 00 78    	mov.w     [w14], w0
    2de4:	ce 00 90    	mov.w     [w14+8], w1
    2de6:	31 00 98    	mov.w     w1, [w0+6]

00002de8 <.LSM39>:
    self->IECy = IECy;
    2de8:	1e 00 78    	mov.w     [w14], w0
    2dea:	de 00 90    	mov.w     [w14+10], w1
    2dec:	41 00 98    	mov.w     w1, [w0+8]

00002dee <.LSM40>:
    self->flagbit = flagbit;
    2dee:	1e 00 78    	mov.w     [w14], w0
    2df0:	ce 48 90    	mov.b     [w14+12], w1
    2df2:	21 48 98    	mov.b     w1, [w0+10]

00002df4 <.LSM41>:
    self->octselnum = octselnum;
    2df4:	1e 00 78    	mov.w     [w14], w0
    2df6:	fe 00 90    	mov.w     [w14+14], w1
    2df8:	61 00 98    	mov.w     w1, [w0+12]

00002dfa <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    2dfa:	1e 00 78    	mov.w     [w14], w0
    2dfc:	ce b8 97    	mov.w     [w14-8], w1
    2dfe:	71 00 98    	mov.w     w1, [w0+14]

00002e00 <.LSM43>:
    self->aftercount = 0;
    2e00:	1e 00 78    	mov.w     [w14], w0
    2e02:	80 00 eb    	clr.w     w1
    2e04:	01 08 98    	mov.w     w1, [w0+16]

00002e06 <.LSM44>:
    self->every = NULL;
    2e06:	1e 00 78    	mov.w     [w14], w0
    2e08:	80 00 eb    	clr.w     w1
    2e0a:	11 08 98    	mov.w     w1, [w0+18]

00002e0c <.LSM45>:
    self->after = NULL;
    2e0c:	1e 00 78    	mov.w     [w14], w0
    2e0e:	80 00 eb    	clr.w     w1
    2e10:	21 08 98    	mov.w     w1, [w0+20]

00002e12 <.LSM46>:
}
    2e12:	00 80 fa    	ulnk      
    2e14:	00 00 06    	return    

00002e16 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    2e16:	06 00 fa    	lnk       #0x6
    2e18:	88 1f 78    	mov.w     w8, [w15++]
    2e1a:	00 0f 78    	mov.w     w0, [w14]
    2e1c:	12 07 98    	mov.w     w2, [w14+2]
    2e1e:	23 07 98    	mov.w     w3, [w14+4]

00002e20 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    2e20:	18 c0 b3    	mov.b     #0x1, w8
    2e22:	d2 7b 23    	mov.w     #0x37bd, w2
    2e24:	63 f8 23    	mov.w     #0x3f86, w3
    2e26:	1e 00 90    	mov.w     [w14+2], w0
    2e28:	ae 00 90    	mov.w     [w14+4], w1
    2e2a:	97 f2 07    	rcall     0x135a <___gesf2>
    2e2c:	00 00 e0    	cp0.w     w0
    2e2e:	01 00 3c    	bra       GT, 0x2e32 <.L14>
    2e30:	00 44 eb    	clr.b     w8

00002e32 <.L14>:
    2e32:	08 04 e0    	cp0.b     w8
    2e34:	69 00 3a    	bra       NZ, 0x2f08 <.L23>

00002e36 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    2e36:	18 c0 b3    	mov.b     #0x1, w8
    2e38:	d2 7b 23    	mov.w     #0x37bd, w2
    2e3a:	63 e8 23    	mov.w     #0x3e86, w3
    2e3c:	1e 00 90    	mov.w     [w14+2], w0
    2e3e:	ae 00 90    	mov.w     [w14+4], w1
    2e40:	8c f2 07    	rcall     0x135a <___gesf2>
    2e42:	00 00 e0    	cp0.w     w0
    2e44:	01 00 3c    	bra       GT, 0x2e48 <.L17>
    2e46:	00 44 eb    	clr.b     w8

00002e48 <.L17>:
    2e48:	08 04 e0    	cp0.b     w8
    2e4a:	12 00 32    	bra       Z, 0x2e70 <.L18>

00002e4c <.LSM50>:
        timer_stop(self);
    2e4c:	1e 00 78    	mov.w     [w14], w0
    2e4e:	c4 00 07    	rcall     0x2fd8 <_timer_stop>

00002e50 <.LSM51>:
        poke(self->TxCON, 0x0030);
    2e50:	1e 00 78    	mov.w     [w14], w0
    2e52:	10 00 78    	mov.w     [w0], w0
    2e54:	01 03 20    	mov.w     #0x30, w1
    2e56:	01 08 78    	mov.w     w1, [w0]

00002e58 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2e58:	1e 00 78    	mov.w     [w14], w0
    2e5a:	10 04 90    	mov.w     [w0+2], w8
    2e5c:	02 40 22    	mov.w     #0x2400, w2
    2e5e:	43 77 24    	mov.w     #0x4774, w3
    2e60:	1e 00 90    	mov.w     [w14+2], w0
    2e62:	ae 00 90    	mov.w     [w14+4], w1
    2e64:	ec f2 07    	rcall     0x143e <___mulsf3>
    2e66:	7b f2 07    	rcall     0x135e <___fixunssfsi>
    2e68:	00 00 78    	mov.w     w0, w0
    2e6a:	00 00 e9    	dec.w     w0, w0
    2e6c:	00 0c 78    	mov.w     w0, [w8]
    2e6e:	4d 00 37    	bra       0x2f0a <.L13>

00002e70 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    2e70:	18 c0 b3    	mov.b     #0x1, w8
    2e72:	d2 7b 23    	mov.w     #0x37bd, w2
    2e74:	63 d0 23    	mov.w     #0x3d06, w3
    2e76:	1e 00 90    	mov.w     [w14+2], w0
    2e78:	ae 00 90    	mov.w     [w14+4], w1
    2e7a:	6f f2 07    	rcall     0x135a <___gesf2>
    2e7c:	00 00 e0    	cp0.w     w0
    2e7e:	01 00 3c    	bra       GT, 0x2e82 <.L19>
    2e80:	00 44 eb    	clr.b     w8

00002e82 <.L19>:
    2e82:	08 04 e0    	cp0.b     w8
    2e84:	12 00 32    	bra       Z, 0x2eaa <.L20>

00002e86 <.LSM54>:
        timer_stop(self);
    2e86:	1e 00 78    	mov.w     [w14], w0
    2e88:	a7 00 07    	rcall     0x2fd8 <_timer_stop>

00002e8a <.LSM55>:
        poke(self->TxCON, 0x0020);
    2e8a:	1e 00 78    	mov.w     [w14], w0
    2e8c:	10 00 78    	mov.w     [w0], w0
    2e8e:	01 02 20    	mov.w     #0x20, w1
    2e90:	01 08 78    	mov.w     w1, [w0]

00002e92 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    2e92:	1e 00 78    	mov.w     [w14], w0
    2e94:	10 04 90    	mov.w     [w0+2], w8
    2e96:	02 40 22    	mov.w     #0x2400, w2
    2e98:	43 87 24    	mov.w     #0x4874, w3
    2e9a:	1e 00 90    	mov.w     [w14+2], w0
    2e9c:	ae 00 90    	mov.w     [w14+4], w1
    2e9e:	cf f2 07    	rcall     0x143e <___mulsf3>
    2ea0:	5e f2 07    	rcall     0x135e <___fixunssfsi>
    2ea2:	00 00 78    	mov.w     w0, w0
    2ea4:	00 00 e9    	dec.w     w0, w0
    2ea6:	00 0c 78    	mov.w     w0, [w8]
    2ea8:	30 00 37    	bra       0x2f0a <.L13>

00002eaa <.L20>:
    } else if (period>(65536.*TCY)) {
    2eaa:	18 c0 b3    	mov.b     #0x1, w8
    2eac:	d2 7b 23    	mov.w     #0x37bd, w2
    2eae:	63 b8 23    	mov.w     #0x3b86, w3
    2eb0:	1e 00 90    	mov.w     [w14+2], w0
    2eb2:	ae 00 90    	mov.w     [w14+4], w1
    2eb4:	52 f2 07    	rcall     0x135a <___gesf2>
    2eb6:	00 00 e0    	cp0.w     w0
    2eb8:	01 00 3c    	bra       GT, 0x2ebc <.L21>
    2eba:	00 44 eb    	clr.b     w8

00002ebc <.L21>:
    2ebc:	08 04 e0    	cp0.b     w8
    2ebe:	12 00 32    	bra       Z, 0x2ee4 <.L22>

00002ec0 <.LSM58>:
        timer_stop(self);
    2ec0:	1e 00 78    	mov.w     [w14], w0
    2ec2:	8a 00 07    	rcall     0x2fd8 <_timer_stop>

00002ec4 <.LSM59>:
        poke(self->TxCON, 0x0010);
    2ec4:	1e 00 78    	mov.w     [w14], w0
    2ec6:	10 00 78    	mov.w     [w0], w0
    2ec8:	01 01 20    	mov.w     #0x10, w1
    2eca:	01 08 78    	mov.w     w1, [w0]

00002ecc <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    2ecc:	1e 00 78    	mov.w     [w14], w0
    2ece:	10 04 90    	mov.w     [w0+2], w8
    2ed0:	02 40 22    	mov.w     #0x2400, w2
    2ed2:	43 9f 24    	mov.w     #0x49f4, w3
    2ed4:	1e 00 90    	mov.w     [w14+2], w0
    2ed6:	ae 00 90    	mov.w     [w14+4], w1
    2ed8:	b2 f2 07    	rcall     0x143e <___mulsf3>
    2eda:	41 f2 07    	rcall     0x135e <___fixunssfsi>
    2edc:	00 00 78    	mov.w     w0, w0
    2ede:	00 00 e9    	dec.w     w0, w0
    2ee0:	00 0c 78    	mov.w     w0, [w8]
    2ee2:	13 00 37    	bra       0x2f0a <.L13>

00002ee4 <.L22>:
    } else {
        timer_stop(self);
    2ee4:	1e 00 78    	mov.w     [w14], w0
    2ee6:	78 00 07    	rcall     0x2fd8 <_timer_stop>

00002ee8 <.LSM62>:
        poke(self->TxCON, 0x0000);
    2ee8:	1e 00 78    	mov.w     [w14], w0
    2eea:	10 00 78    	mov.w     [w0], w0
    2eec:	80 00 eb    	clr.w     w1
    2eee:	01 08 78    	mov.w     w1, [w0]

00002ef0 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    2ef0:	1e 00 78    	mov.w     [w14], w0
    2ef2:	10 04 90    	mov.w     [w0+2], w8
    2ef4:	02 40 22    	mov.w     #0x2400, w2
    2ef6:	43 b7 24    	mov.w     #0x4b74, w3
    2ef8:	1e 00 90    	mov.w     [w14+2], w0
    2efa:	ae 00 90    	mov.w     [w14+4], w1
    2efc:	a0 f2 07    	rcall     0x143e <___mulsf3>
    2efe:	2f f2 07    	rcall     0x135e <___fixunssfsi>
    2f00:	00 00 78    	mov.w     w0, w0
    2f02:	00 00 e9    	dec.w     w0, w0
    2f04:	00 0c 78    	mov.w     w0, [w8]
    2f06:	01 00 37    	bra       0x2f0a <.L13>

00002f08 <.L23>:
    2f08:	00 00 00    	nop       

00002f0a <.L13>:
    }
}
    2f0a:	4f 04 78    	mov.w     [--w15], w8
    2f0c:	00 80 fa    	ulnk      
    2f0e:	00 00 06    	return    

00002f10 <_timer_period>:

float timer_period(_TIMER *self) {
    2f10:	04 00 fa    	lnk       #0x4
    2f12:	88 9f be    	mov.d     w8, [w15++]
    2f14:	10 07 98    	mov.w     w0, [w14+2]

00002f16 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2f16:	1e 00 90    	mov.w     [w14+2], w0
    2f18:	10 00 78    	mov.w     [w0], w0
    2f1a:	90 00 78    	mov.w     [w0], w1
    2f1c:	00 03 20    	mov.w     #0x30, w0
    2f1e:	00 80 60    	and.w     w1, w0, w0
    2f20:	44 00 de    	lsr.w     w0, #0x4, w0
    2f22:	00 0f 78    	mov.w     w0, [w14]

00002f24 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2f24:	1e 00 78    	mov.w     [w14], w0
    2f26:	c2 00 dd    	sl.w      w0, #0x2, w1
    2f28:	40 be 20    	mov.w     #0xbe4, w0
    2f2a:	00 80 40    	add.w     w1, w0, w0
    2f2c:	10 04 be    	mov.d     [w0], w8
    2f2e:	1e 00 90    	mov.w     [w14+2], w0
    2f30:	10 00 90    	mov.w     [w0+2], w0
    2f32:	10 00 78    	mov.w     [w0], w0
    2f34:	80 00 eb    	clr.w     w1
    2f36:	2e f2 07    	rcall     0x1394 <___floatunsisf>
    2f38:	02 00 20    	mov.w     #0x0, w2
    2f3a:	03 f8 23    	mov.w     #0x3f80, w3
    2f3c:	6d f1 07    	rcall     0x1218 <___addsf3>
    2f3e:	00 01 be    	mov.d     w0, w2
    2f40:	08 00 be    	mov.d     w8, w0
    2f42:	7d f2 07    	rcall     0x143e <___mulsf3>

00002f44 <.LSM69>:
}
    2f44:	4f 04 be    	mov.d     [--w15], w8
    2f46:	00 80 fa    	ulnk      
    2f48:	00 00 06    	return    

00002f4a <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    2f4a:	06 00 fa    	lnk       #0x6
    2f4c:	00 0f 78    	mov.w     w0, [w14]
    2f4e:	12 07 98    	mov.w     w2, [w14+2]
    2f50:	23 07 98    	mov.w     w3, [w14+4]

00002f52 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    2f52:	1e 01 90    	mov.w     [w14+2], w2
    2f54:	ae 01 90    	mov.w     [w14+4], w3
    2f56:	00 00 20    	mov.w     #0x0, w0
    2f58:	01 f8 23    	mov.w     #0x3f80, w1
    2f5a:	bb f1 07    	rcall     0x12d2 <___divsf3>
    2f5c:	00 01 be    	mov.d     w0, w2
    2f5e:	1e 00 78    	mov.w     [w14], w0
    2f60:	5a ff 07    	rcall     0x2e16 <_timer_setPeriod>

00002f62 <.LSM72>:
}
    2f62:	00 80 fa    	ulnk      
    2f64:	00 00 06    	return    

00002f66 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2f66:	02 00 fa    	lnk       #0x2
    2f68:	00 0f 78    	mov.w     w0, [w14]

00002f6a <.LSM74>:
    return 1./timer_period(self);
    2f6a:	1e 00 78    	mov.w     [w14], w0
    2f6c:	d1 ff 07    	rcall     0x2f10 <_timer_period>
    2f6e:	00 01 be    	mov.d     w0, w2
    2f70:	00 00 20    	mov.w     #0x0, w0
    2f72:	01 f8 23    	mov.w     #0x3f80, w1
    2f74:	ae f1 07    	rcall     0x12d2 <___divsf3>

00002f76 <.LSM75>:
}
    2f76:	00 80 fa    	ulnk      
    2f78:	00 00 06    	return    

00002f7a <_timer_time>:

float timer_time(_TIMER *self) {
    2f7a:	04 00 fa    	lnk       #0x4
    2f7c:	88 9f be    	mov.d     w8, [w15++]
    2f7e:	10 07 98    	mov.w     w0, [w14+2]

00002f80 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2f80:	1e 00 90    	mov.w     [w14+2], w0
    2f82:	10 00 78    	mov.w     [w0], w0
    2f84:	90 00 78    	mov.w     [w0], w1
    2f86:	00 03 20    	mov.w     #0x30, w0
    2f88:	00 80 60    	and.w     w1, w0, w0
    2f8a:	44 00 de    	lsr.w     w0, #0x4, w0
    2f8c:	00 0f 78    	mov.w     w0, [w14]

00002f8e <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2f8e:	1e 00 78    	mov.w     [w14], w0
    2f90:	c2 00 dd    	sl.w      w0, #0x2, w1
    2f92:	40 be 20    	mov.w     #0xbe4, w0
    2f94:	00 80 40    	add.w     w1, w0, w0
    2f96:	10 04 be    	mov.d     [w0], w8
    2f98:	1e 00 90    	mov.w     [w14+2], w0
    2f9a:	10 00 90    	mov.w     [w0+2], w0
    2f9c:	10 00 78    	mov.w     [w0], w0
    2f9e:	80 00 eb    	clr.w     w1
    2fa0:	f9 f1 07    	rcall     0x1394 <___floatunsisf>
    2fa2:	02 00 20    	mov.w     #0x0, w2
    2fa4:	03 f8 23    	mov.w     #0x3f80, w3
    2fa6:	38 f1 07    	rcall     0x1218 <___addsf3>
    2fa8:	00 01 be    	mov.d     w0, w2
    2faa:	08 00 be    	mov.d     w8, w0
    2fac:	48 f2 07    	rcall     0x143e <___mulsf3>

00002fae <.LSM79>:
}
    2fae:	4f 04 be    	mov.d     [--w15], w8
    2fb0:	00 80 fa    	ulnk      
    2fb2:	00 00 06    	return    

00002fb4 <_timer_start>:

void timer_start(_TIMER *self) {
    2fb4:	02 00 fa    	lnk       #0x2
    2fb6:	00 0f 78    	mov.w     w0, [w14]

00002fb8 <.LSM81>:
    timer_lower(self);
    2fb8:	1e 00 78    	mov.w     [w14], w0
    2fba:	2b 00 07    	rcall     0x3012 <_timer_lower>

00002fbc <.LSM82>:
    poke(self->TMRx, 0);
    2fbc:	1e 00 78    	mov.w     [w14], w0
    2fbe:	20 00 90    	mov.w     [w0+4], w0
    2fc0:	80 00 eb    	clr.w     w1
    2fc2:	01 08 78    	mov.w     w1, [w0]

00002fc4 <.LSM83>:
    bitset(self->TxCON, 15);
    2fc4:	1e 00 78    	mov.w     [w14], w0
    2fc6:	10 00 78    	mov.w     [w0], w0
    2fc8:	9e 00 78    	mov.w     [w14], w1
    2fca:	91 00 78    	mov.w     [w1], w1
    2fcc:	11 01 78    	mov.w     [w1], w2
    2fce:	01 00 28    	mov.w     #0x8000, w1
    2fd0:	82 80 70    	ior.w     w1, w2, w1
    2fd2:	01 08 78    	mov.w     w1, [w0]

00002fd4 <.LSM84>:
}
    2fd4:	00 80 fa    	ulnk      
    2fd6:	00 00 06    	return    

00002fd8 <_timer_stop>:

void timer_stop(_TIMER *self) {
    2fd8:	02 00 fa    	lnk       #0x2
    2fda:	00 0f 78    	mov.w     w0, [w14]

00002fdc <.LSM86>:
    bitclear(self->TxCON, 15);
    2fdc:	1e 00 78    	mov.w     [w14], w0
    2fde:	10 00 78    	mov.w     [w0], w0
    2fe0:	9e 00 78    	mov.w     [w14], w1
    2fe2:	91 00 78    	mov.w     [w1], w1
    2fe4:	11 01 78    	mov.w     [w1], w2
    2fe6:	f1 ff 27    	mov.w     #0x7fff, w1
    2fe8:	81 00 61    	and.w     w2, w1, w1
    2fea:	01 08 78    	mov.w     w1, [w0]

00002fec <.LSM87>:
}
    2fec:	00 80 fa    	ulnk      
    2fee:	00 00 06    	return    

00002ff0 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    2ff0:	02 00 fa    	lnk       #0x2
    2ff2:	00 0f 78    	mov.w     w0, [w14]

00002ff4 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    2ff4:	1e 00 78    	mov.w     [w14], w0
    2ff6:	30 00 90    	mov.w     [w0+6], w0
    2ff8:	90 00 78    	mov.w     [w0], w1
    2ffa:	1e 00 78    	mov.w     [w14], w0
    2ffc:	20 48 90    	mov.b     [w0+10], w0
    2ffe:	00 80 fb    	ze        w0, w0
    3000:	12 00 20    	mov.w     #0x1, w2
    3002:	00 10 dd    	sl.w      w2, w0, w0
    3004:	00 80 60    	and.w     w1, w0, w0
    3006:	00 f0 a7    	btsc.w    w0, #0xf
    3008:	00 00 ea    	neg.w     w0, w0
    300a:	00 00 ea    	neg.w     w0, w0
    300c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000300e <.LSM90>:
}
    300e:	00 80 fa    	ulnk      
    3010:	00 00 06    	return    

00003012 <_timer_lower>:

void timer_lower(_TIMER *self) {
    3012:	02 00 fa    	lnk       #0x2
    3014:	00 0f 78    	mov.w     w0, [w14]

00003016 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3016:	1e 00 78    	mov.w     [w14], w0
    3018:	30 00 90    	mov.w     [w0+6], w0
    301a:	9e 00 78    	mov.w     [w14], w1
    301c:	b1 00 90    	mov.w     [w1+6], w1
    301e:	11 01 78    	mov.w     [w1], w2
    3020:	9e 00 78    	mov.w     [w14], w1
    3022:	a1 48 90    	mov.b     [w1+10], w1
    3024:	81 80 fb    	ze        w1, w1
    3026:	13 00 20    	mov.w     #0x1, w3
    3028:	81 18 dd    	sl.w      w3, w1, w1
    302a:	81 80 ea    	com.w     w1, w1
    302c:	81 00 61    	and.w     w2, w1, w1
    302e:	01 08 78    	mov.w     w1, [w0]

00003030 <.LSM93>:
}
    3030:	00 80 fa    	ulnk      
    3032:	00 00 06    	return    

00003034 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    3034:	02 00 fa    	lnk       #0x2
    3036:	00 0f 78    	mov.w     w0, [w14]

00003038 <.LSM95>:
    return peek(self->TMRx);
    3038:	1e 00 78    	mov.w     [w14], w0
    303a:	20 00 90    	mov.w     [w0+4], w0
    303c:	10 00 78    	mov.w     [w0], w0

0000303e <.LSM96>:
}
    303e:	00 80 fa    	ulnk      
    3040:	00 00 06    	return    

00003042 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    3042:	02 00 fa    	lnk       #0x2
    3044:	00 0f 78    	mov.w     w0, [w14]

00003046 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    3046:	1e 00 78    	mov.w     [w14], w0
    3048:	40 00 90    	mov.w     [w0+8], w0
    304a:	9e 00 78    	mov.w     [w14], w1
    304c:	c1 00 90    	mov.w     [w1+8], w1
    304e:	11 01 78    	mov.w     [w1], w2
    3050:	9e 00 78    	mov.w     [w14], w1
    3052:	a1 48 90    	mov.b     [w1+10], w1
    3054:	81 80 fb    	ze        w1, w1
    3056:	13 00 20    	mov.w     #0x1, w3
    3058:	81 18 dd    	sl.w      w3, w1, w1
    305a:	82 80 70    	ior.w     w1, w2, w1
    305c:	01 08 78    	mov.w     w1, [w0]

0000305e <.LSM99>:
}
    305e:	00 80 fa    	ulnk      
    3060:	00 00 06    	return    

00003062 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3062:	02 00 fa    	lnk       #0x2
    3064:	00 0f 78    	mov.w     w0, [w14]

00003066 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    3066:	1e 00 78    	mov.w     [w14], w0
    3068:	40 00 90    	mov.w     [w0+8], w0
    306a:	9e 00 78    	mov.w     [w14], w1
    306c:	c1 00 90    	mov.w     [w1+8], w1
    306e:	11 01 78    	mov.w     [w1], w2
    3070:	9e 00 78    	mov.w     [w14], w1
    3072:	a1 48 90    	mov.b     [w1+10], w1
    3074:	81 80 fb    	ze        w1, w1
    3076:	13 00 20    	mov.w     #0x1, w3
    3078:	81 18 dd    	sl.w      w3, w1, w1
    307a:	81 80 ea    	com.w     w1, w1
    307c:	81 00 61    	and.w     w2, w1, w1
    307e:	01 08 78    	mov.w     w1, [w0]

00003080 <.LSM102>:
}
    3080:	00 80 fa    	ulnk      
    3082:	00 00 06    	return    

00003084 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3084:	08 00 fa    	lnk       #0x8
    3086:	00 0f 78    	mov.w     w0, [w14]
    3088:	12 07 98    	mov.w     w2, [w14+2]
    308a:	23 07 98    	mov.w     w3, [w14+4]
    308c:	31 07 98    	mov.w     w1, [w14+6]

0000308e <.LSM104>:
    timer_disableInterrupt(self);
    308e:	1e 00 78    	mov.w     [w14], w0
    3090:	e8 ff 07    	rcall     0x3062 <_timer_disableInterrupt>

00003092 <.LSM105>:
    timer_setPeriod(self, interval);
    3092:	1e 01 90    	mov.w     [w14+2], w2
    3094:	ae 01 90    	mov.w     [w14+4], w3
    3096:	1e 00 78    	mov.w     [w14], w0
    3098:	be fe 07    	rcall     0x2e16 <_timer_setPeriod>

0000309a <.LSM106>:
    self->aftercount = 0;
    309a:	1e 00 78    	mov.w     [w14], w0
    309c:	80 00 eb    	clr.w     w1
    309e:	01 08 98    	mov.w     w1, [w0+16]

000030a0 <.LSM107>:
    self->every = callback;
    30a0:	1e 00 78    	mov.w     [w14], w0
    30a2:	be 00 90    	mov.w     [w14+6], w1
    30a4:	11 08 98    	mov.w     w1, [w0+18]

000030a6 <.LSM108>:
    self->after = NULL;
    30a6:	1e 00 78    	mov.w     [w14], w0
    30a8:	80 00 eb    	clr.w     w1
    30aa:	21 08 98    	mov.w     w1, [w0+20]

000030ac <.LSM109>:
    timer_enableInterrupt(self);
    30ac:	1e 00 78    	mov.w     [w14], w0
    30ae:	c9 ff 07    	rcall     0x3042 <_timer_enableInterrupt>

000030b0 <.LSM110>:
    timer_start(self);
    30b0:	1e 00 78    	mov.w     [w14], w0
    30b2:	80 ff 07    	rcall     0x2fb4 <_timer_start>

000030b4 <.LSM111>:
}
    30b4:	00 80 fa    	ulnk      
    30b6:	00 00 06    	return    

000030b8 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    30b8:	0a 00 fa    	lnk       #0xa
    30ba:	00 0f 78    	mov.w     w0, [w14]
    30bc:	12 07 98    	mov.w     w2, [w14+2]
    30be:	23 07 98    	mov.w     w3, [w14+4]
    30c0:	31 07 98    	mov.w     w1, [w14+6]
    30c2:	44 07 98    	mov.w     w4, [w14+8]

000030c4 <.LSM113>:
    timer_disableInterrupt(self);
    30c4:	1e 00 78    	mov.w     [w14], w0
    30c6:	cd ff 07    	rcall     0x3062 <_timer_disableInterrupt>

000030c8 <.LSM114>:
    timer_setPeriod(self, delay);
    30c8:	1e 01 90    	mov.w     [w14+2], w2
    30ca:	ae 01 90    	mov.w     [w14+4], w3
    30cc:	1e 00 78    	mov.w     [w14], w0
    30ce:	a3 fe 07    	rcall     0x2e16 <_timer_setPeriod>

000030d0 <.LSM115>:
    self->aftercount = num_times;
    30d0:	1e 00 78    	mov.w     [w14], w0
    30d2:	be 00 90    	mov.w     [w14+6], w1
    30d4:	01 08 98    	mov.w     w1, [w0+16]

000030d6 <.LSM116>:
    self->every = NULL;
    30d6:	1e 00 78    	mov.w     [w14], w0
    30d8:	80 00 eb    	clr.w     w1
    30da:	11 08 98    	mov.w     w1, [w0+18]

000030dc <.LSM117>:
    self->after = callback;
    30dc:	1e 00 78    	mov.w     [w14], w0
    30de:	ce 00 90    	mov.w     [w14+8], w1
    30e0:	21 08 98    	mov.w     w1, [w0+20]

000030e2 <.LSM118>:
    timer_enableInterrupt(self);
    30e2:	1e 00 78    	mov.w     [w14], w0
    30e4:	ae ff 07    	rcall     0x3042 <_timer_enableInterrupt>

000030e6 <.LSM119>:
    timer_start(self);
    30e6:	1e 00 78    	mov.w     [w14], w0
    30e8:	65 ff 07    	rcall     0x2fb4 <_timer_start>

000030ea <.LSM120>:
}
    30ea:	00 80 fa    	ulnk      
    30ec:	00 00 06    	return    

000030ee <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    30ee:	02 00 fa    	lnk       #0x2
    30f0:	00 0f 78    	mov.w     w0, [w14]

000030f2 <.LSM122>:
    timer_disableInterrupt(self);
    30f2:	1e 00 78    	mov.w     [w14], w0
    30f4:	b6 ff 07    	rcall     0x3062 <_timer_disableInterrupt>

000030f6 <.LSM123>:
    timer_lower(self);
    30f6:	1e 00 78    	mov.w     [w14], w0
    30f8:	8c ff 07    	rcall     0x3012 <_timer_lower>

000030fa <.LSM124>:
    timer_stop(self);
    30fa:	1e 00 78    	mov.w     [w14], w0
    30fc:	6d ff 07    	rcall     0x2fd8 <_timer_stop>

000030fe <.LSM125>:
    self->aftercount = 0;
    30fe:	1e 00 78    	mov.w     [w14], w0
    3100:	80 00 eb    	clr.w     w1
    3102:	01 08 98    	mov.w     w1, [w0+16]

00003104 <.LSM126>:
    self->every = NULL;
    3104:	1e 00 78    	mov.w     [w14], w0
    3106:	80 00 eb    	clr.w     w1
    3108:	11 08 98    	mov.w     w1, [w0+18]

0000310a <.LSM127>:
    self->after = NULL;
    310a:	1e 00 78    	mov.w     [w14], w0
    310c:	80 00 eb    	clr.w     w1
    310e:	21 08 98    	mov.w     w1, [w0+20]

00003110 <.LSM128>:
}
    3110:	00 80 fa    	ulnk      
    3112:	00 00 06    	return    

00003114 <_init_spi>:
#include "spi.h"

_SPI spi1, spi2, spi3;

void init_spi(void) {
    3114:	00 00 fa    	lnk       #0x0

00003116 <.LSM1>:
    spi_init(&spi1, (uint16_t *)&SPI1STAT, (uint16_t *)&SPI1CON1, 
    3116:	80 00 20    	mov.w     #0x8, w0
    3118:	80 1f 78    	mov.w     w0, [w15++]
    311a:	77 00 20    	mov.w     #0x7, w7
    311c:	00 43 eb    	clr.b     w6
    311e:	85 6a 20    	mov.w     #0x6a8, w5
    3120:	84 24 20    	mov.w     #0x248, w4
    3122:	43 24 20    	mov.w     #0x244, w3
    3124:	22 24 20    	mov.w     #0x242, w2
    3126:	01 24 20    	mov.w     #0x240, w1
    3128:	a0 d7 20    	mov.w     #0xd7a, w0
    312a:	1b 00 07    	rcall     0x3162 <_spi_init>
    312c:	8f 87 e9    	dec2.w    w15, w15

0000312e <.LSM2>:
             (uint16_t *)&SPI1CON2, (uint16_t *)&SPI1BUF, 
             (uint16_t *)&RPINR20, 0, 7, 8);
    spi_init(&spi2, (uint16_t *)&SPI2STAT, (uint16_t *)&SPI2CON1, 
    312e:	b0 00 20    	mov.w     #0xb, w0
    3130:	80 1f 78    	mov.w     w0, [w15++]
    3132:	a7 00 20    	mov.w     #0xa, w7
    3134:	00 43 eb    	clr.b     w6
    3136:	c5 6a 20    	mov.w     #0x6ac, w5
    3138:	84 26 20    	mov.w     #0x268, w4
    313a:	43 26 20    	mov.w     #0x264, w3
    313c:	22 26 20    	mov.w     #0x262, w2
    313e:	01 26 20    	mov.w     #0x260, w1
    3140:	00 d9 20    	mov.w     #0xd90, w0
    3142:	0f 00 07    	rcall     0x3162 <_spi_init>
    3144:	8f 87 e9    	dec2.w    w15, w15

00003146 <.LSM3>:
             (uint16_t *)&SPI2CON2, (uint16_t *)&SPI2BUF, 
             (uint16_t *)&RPINR22, 0, 10, 11);
    spi_init(&spi3, (uint16_t *)&SPI3STAT, (uint16_t *)&SPI3CON1, 
    3146:	10 02 20    	mov.w     #0x21, w0
    3148:	80 1f 78    	mov.w     w0, [w15++]
    314a:	07 02 20    	mov.w     #0x20, w7
    314c:	00 43 eb    	clr.b     w6
    314e:	85 6b 20    	mov.w     #0x6b8, w5
    3150:	84 28 20    	mov.w     #0x288, w4
    3152:	43 28 20    	mov.w     #0x284, w3
    3154:	22 28 20    	mov.w     #0x282, w2
    3156:	01 28 20    	mov.w     #0x280, w1
    3158:	60 da 20    	mov.w     #0xda6, w0
    315a:	03 00 07    	rcall     0x3162 <_spi_init>
    315c:	8f 87 e9    	dec2.w    w15, w15

0000315e <.LSM4>:
             (uint16_t *)&SPI3CON2, (uint16_t *)&SPI3BUF, 
             (uint16_t *)&RPINR28, 0, 32, 33);
}
    315e:	00 80 fa    	ulnk      
    3160:	00 00 06    	return    

00003162 <_spi_init>:

void spi_init(_SPI *self, uint16_t *SPIxSTAT, uint16_t *SPIxCON1, 
              uint16_t *SPIxCON2, uint16_t *SPIxBUF, 
              uint16_t *MISOrpinr, uint8_t MISOrpshift, 
              int16_t MOSIrpnum, int16_t SCKrpnum) {
    3162:	10 00 fa    	lnk       #0x10
    3164:	00 0f 78    	mov.w     w0, [w14]
    3166:	11 07 98    	mov.w     w1, [w14+2]
    3168:	22 07 98    	mov.w     w2, [w14+4]
    316a:	33 07 98    	mov.w     w3, [w14+6]
    316c:	44 07 98    	mov.w     w4, [w14+8]
    316e:	55 07 98    	mov.w     w5, [w14+10]
    3170:	46 4f 98    	mov.b     w6, [w14+12]
    3172:	77 07 98    	mov.w     w7, [w14+14]

00003174 <.LSM6>:
    self->SPIxSTAT = SPIxSTAT;
    3174:	1e 00 78    	mov.w     [w14], w0
    3176:	9e 00 90    	mov.w     [w14+2], w1
    3178:	01 08 78    	mov.w     w1, [w0]

0000317a <.LSM7>:
    self->SPIxCON1 = SPIxCON1;
    317a:	1e 00 78    	mov.w     [w14], w0
    317c:	ae 00 90    	mov.w     [w14+4], w1
    317e:	11 00 98    	mov.w     w1, [w0+2]

00003180 <.LSM8>:
    self->SPIxCON2 = SPIxCON2;
    3180:	1e 00 78    	mov.w     [w14], w0
    3182:	be 00 90    	mov.w     [w14+6], w1
    3184:	21 00 98    	mov.w     w1, [w0+4]

00003186 <.LSM9>:
    self->SPIxBUF = SPIxBUF;
    3186:	1e 00 78    	mov.w     [w14], w0
    3188:	ce 00 90    	mov.w     [w14+8], w1
    318a:	31 00 98    	mov.w     w1, [w0+6]

0000318c <.LSM10>:
    self->MISOrpinr = MISOrpinr;
    318c:	1e 00 78    	mov.w     [w14], w0
    318e:	de 00 90    	mov.w     [w14+10], w1
    3190:	41 00 98    	mov.w     w1, [w0+8]

00003192 <.LSM11>:
    self->MISOrpshift = MISOrpshift;
    3192:	1e 00 78    	mov.w     [w14], w0
    3194:	ce 48 90    	mov.b     [w14+12], w1
    3196:	21 48 98    	mov.b     w1, [w0+10]

00003198 <.LSM12>:
    self->MOSIrpnum = MOSIrpnum;
    3198:	1e 00 78    	mov.w     [w14], w0
    319a:	fe 00 90    	mov.w     [w14+14], w1
    319c:	61 00 98    	mov.w     w1, [w0+12]

0000319e <.LSM13>:
    self->SCKrpnum = SCKrpnum;
    319e:	1e 00 78    	mov.w     [w14], w0
    31a0:	ce b8 97    	mov.w     [w14-8], w1
    31a2:	71 00 98    	mov.w     w1, [w0+14]

000031a4 <.LSM14>:
    self->MISO = NULL;
    31a4:	1e 00 78    	mov.w     [w14], w0
    31a6:	80 00 eb    	clr.w     w1
    31a8:	01 08 98    	mov.w     w1, [w0+16]

000031aa <.LSM15>:
    self->MOSI = NULL;
    31aa:	1e 00 78    	mov.w     [w14], w0
    31ac:	80 00 eb    	clr.w     w1
    31ae:	11 08 98    	mov.w     w1, [w0+18]

000031b0 <.LSM16>:
    self->SCK = NULL;
    31b0:	1e 00 78    	mov.w     [w14], w0
    31b2:	80 00 eb    	clr.w     w1
    31b4:	21 08 98    	mov.w     w1, [w0+20]

000031b6 <.LSM17>:
}
    31b6:	00 80 fa    	ulnk      
    31b8:	00 00 06    	return    

000031ba <_spi_open>:

void spi_open(_SPI *self, _PIN *MISO, _PIN *MOSI, _PIN *SCK, float freq, uint8_t mode) {
    31ba:	1a 00 fa    	lnk       #0x1a
    31bc:	88 1f 78    	mov.w     w8, [w15++]
    31be:	60 07 98    	mov.w     w0, [w14+12]
    31c0:	71 07 98    	mov.w     w1, [w14+14]
    31c2:	02 0f 98    	mov.w     w2, [w14+16]
    31c4:	13 0f 98    	mov.w     w3, [w14+18]
    31c6:	24 0f 98    	mov.w     w4, [w14+20]
    31c8:	35 0f 98    	mov.w     w5, [w14+22]
    31ca:	06 5f 98    	mov.b     w6, [w14+24]

000031cc <.LSM19>:
    uint16_t primary, secondary;
    uint16_t modebits[4] = { 0x0100, 0x0000, 0x0140, 0x0040 };
    31cc:	00 10 20    	mov.w     #0x100, w0
    31ce:	20 07 98    	mov.w     w0, [w14+4]
    31d0:	00 00 eb    	clr.w     w0
    31d2:	30 07 98    	mov.w     w0, [w14+6]
    31d4:	00 14 20    	mov.w     #0x140, w0
    31d6:	40 07 98    	mov.w     w0, [w14+8]
    31d8:	00 04 20    	mov.w     #0x40, w0
    31da:	50 07 98    	mov.w     w0, [w14+10]

000031dc <.LSM20>:

    if ((MISO->rpnum==-1) || (MOSI->rpnum==-1) || (SCK->rpnum==-1))
    31dc:	7e 00 90    	mov.w     [w14+14], w0
    31de:	60 00 90    	mov.w     [w0+12], w0
    31e0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    31e2:	37 01 32    	bra       Z, 0x3452 <.L21>
    31e4:	0e 08 90    	mov.w     [w14+16], w0
    31e6:	60 00 90    	mov.w     [w0+12], w0
    31e8:	e1 0f 40    	add.w     w0, #0x1, [w15]
    31ea:	35 01 32    	bra       Z, 0x3456 <.L22>
    31ec:	1e 08 90    	mov.w     [w14+18], w0
    31ee:	60 00 90    	mov.w     [w0+12], w0
    31f0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    31f2:	33 01 32    	bra       Z, 0x345a <.L23>

000031f4 <.LSM21>:
        return; // At least one of the specified pins is not an RP pin
    if ((MISO->owner==NULL) && (MOSI->owner==NULL) && (SCK->owner==NULL)) {
    31f4:	7e 00 90    	mov.w     [w14+14], w0
    31f6:	00 08 90    	mov.w     [w0+16], w0
    31f8:	00 00 e0    	cp0.w     w0
    31fa:	97 00 3a    	bra       NZ, 0x332a <.L7>
    31fc:	0e 08 90    	mov.w     [w14+16], w0
    31fe:	00 08 90    	mov.w     [w0+16], w0
    3200:	00 00 e0    	cp0.w     w0
    3202:	93 00 3a    	bra       NZ, 0x332a <.L7>
    3204:	1e 08 90    	mov.w     [w14+18], w0
    3206:	00 08 90    	mov.w     [w0+16], w0
    3208:	00 00 e0    	cp0.w     w0
    320a:	8f 00 3a    	bra       NZ, 0x332a <.L7>

0000320c <.LSM22>:
        // All of the specified pins are available and RP pins, so configure 
        // as specified
        pin_digitalIn(MISO);
    320c:	7e 00 90    	mov.w     [w14+14], w0
    320e:	67 03 07    	rcall     0x38de <_pin_digitalIn>

00003210 <.LSM23>:
        pin_digitalOut(MOSI);
    3210:	0e 08 90    	mov.w     [w14+16], w0
    3212:	8c 03 07    	rcall     0x392c <_pin_digitalOut>

00003214 <.LSM24>:
        pin_set(MOSI);
    3214:	0e 08 90    	mov.w     [w14+16], w0
    3216:	e7 03 07    	rcall     0x39e6 <_pin_set>

00003218 <.LSM25>:
        pin_digitalOut(SCK);
    3218:	1e 08 90    	mov.w     [w14+18], w0
    321a:	88 03 07    	rcall     0x392c <_pin_digitalOut>

0000321c <.LSM26>:
        pin_clear(SCK);
    321c:	1e 08 90    	mov.w     [w14+18], w0
    321e:	f8 03 07    	rcall     0x3a10 <_pin_clear>

00003220 <.LSM27>:
        self->MISO = MISO;
    3220:	6e 00 90    	mov.w     [w14+12], w0
    3222:	fe 00 90    	mov.w     [w14+14], w1
    3224:	01 08 98    	mov.w     w1, [w0+16]

00003226 <.LSM28>:
        MISO->owner = (void *)self;
    3226:	7e 00 90    	mov.w     [w14+14], w0
    3228:	ee 00 90    	mov.w     [w14+12], w1
    322a:	01 08 98    	mov.w     w1, [w0+16]

0000322c <.LSM29>:
        MISO->write = NULL;
    322c:	7e 00 90    	mov.w     [w14+14], w0
    322e:	80 00 eb    	clr.w     w1
    3230:	11 08 98    	mov.w     w1, [w0+18]

00003232 <.LSM30>:
        MISO->read = NULL;
    3232:	7e 00 90    	mov.w     [w14+14], w0
    3234:	80 00 eb    	clr.w     w1
    3236:	21 08 98    	mov.w     w1, [w0+20]

00003238 <.LSM31>:
        self->MOSI = MOSI;
    3238:	6e 00 90    	mov.w     [w14+12], w0
    323a:	8e 08 90    	mov.w     [w14+16], w1
    323c:	11 08 98    	mov.w     w1, [w0+18]

0000323e <.LSM32>:
        MOSI->owner = (void *)self;
    323e:	0e 08 90    	mov.w     [w14+16], w0
    3240:	ee 00 90    	mov.w     [w14+12], w1
    3242:	01 08 98    	mov.w     w1, [w0+16]

00003244 <.LSM33>:
        MOSI->write = NULL;
    3244:	0e 08 90    	mov.w     [w14+16], w0
    3246:	80 00 eb    	clr.w     w1
    3248:	11 08 98    	mov.w     w1, [w0+18]

0000324a <.LSM34>:
        MOSI->read = NULL;
    324a:	0e 08 90    	mov.w     [w14+16], w0
    324c:	80 00 eb    	clr.w     w1
    324e:	21 08 98    	mov.w     w1, [w0+20]

00003250 <.LSM35>:
        self->SCK = SCK;
    3250:	6e 00 90    	mov.w     [w14+12], w0
    3252:	9e 08 90    	mov.w     [w14+18], w1
    3254:	21 08 98    	mov.w     w1, [w0+20]

00003256 <.LSM36>:
        SCK->owner = (void *)self;
    3256:	1e 08 90    	mov.w     [w14+18], w0
    3258:	ee 00 90    	mov.w     [w14+12], w1
    325a:	01 08 98    	mov.w     w1, [w0+16]

0000325c <.LSM37>:
        SCK->write = NULL;
    325c:	1e 08 90    	mov.w     [w14+18], w0
    325e:	80 00 eb    	clr.w     w1
    3260:	11 08 98    	mov.w     w1, [w0+18]

00003262 <.LSM38>:
        SCK->read = NULL;
    3262:	1e 08 90    	mov.w     [w14+18], w0
    3264:	80 00 eb    	clr.w     w1
    3266:	21 08 98    	mov.w     w1, [w0+20]

00003268 <.LSM39>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3268:	11 3a 80    	mov.w     0x742, w1
    326a:	f0 0b 20    	mov.w     #0xbf, w0
    326c:	00 81 60    	and.w     w1, w0, w2
    326e:	60 04 20    	mov.w     #0x46, w0
    3270:	71 05 20    	mov.w     #0x57, w1
    3272:	23 74 20    	mov.w     #0x742, w3
    3274:	80 49 78    	mov.b     w0, [w3]
    3276:	81 49 78    	mov.b     w1, [w3]
    3278:	82 49 78    	mov.b     w2, [w3]

0000327a <.LSM40>:
        *(self->MISOrpinr) &= ~(0x3F<<(self->MISOrpshift));
    327a:	6e 00 90    	mov.w     [w14+12], w0
    327c:	40 00 90    	mov.w     [w0+8], w0
    327e:	ee 00 90    	mov.w     [w14+12], w1
    3280:	c1 00 90    	mov.w     [w1+8], w1
    3282:	11 01 78    	mov.w     [w1], w2
    3284:	ee 00 90    	mov.w     [w14+12], w1
    3286:	a1 48 90    	mov.b     [w1+10], w1
    3288:	81 80 fb    	ze        w1, w1
    328a:	f3 03 20    	mov.w     #0x3f, w3
    328c:	81 18 dd    	sl.w      w3, w1, w1
    328e:	81 80 ea    	com.w     w1, w1
    3290:	81 00 61    	and.w     w2, w1, w1
    3292:	01 08 78    	mov.w     w1, [w0]

00003294 <.LSM41>:
        *(self->MISOrpinr) |= (MISO->rpnum)<<(self->MISOrpshift);
    3294:	6e 00 90    	mov.w     [w14+12], w0
    3296:	40 00 90    	mov.w     [w0+8], w0
    3298:	ee 00 90    	mov.w     [w14+12], w1
    329a:	c1 00 90    	mov.w     [w1+8], w1
    329c:	11 01 78    	mov.w     [w1], w2
    329e:	fe 00 90    	mov.w     [w14+14], w1
    32a0:	e1 01 90    	mov.w     [w1+12], w3
    32a2:	ee 00 90    	mov.w     [w14+12], w1
    32a4:	a1 48 90    	mov.b     [w1+10], w1
    32a6:	81 80 fb    	ze        w1, w1
    32a8:	81 18 dd    	sl.w      w3, w1, w1
    32aa:	82 80 70    	ior.w     w1, w2, w1
    32ac:	01 08 78    	mov.w     w1, [w0]

000032ae <.LSM42>:
        *(MOSI->rpor) &= ~(0x3F<<(MOSI->rpshift));
    32ae:	0e 08 90    	mov.w     [w14+16], w0
    32b0:	70 00 90    	mov.w     [w0+14], w0
    32b2:	8e 08 90    	mov.w     [w14+16], w1
    32b4:	f1 00 90    	mov.w     [w1+14], w1
    32b6:	11 01 78    	mov.w     [w1], w2
    32b8:	8e 08 90    	mov.w     [w14+16], w1
    32ba:	a1 48 90    	mov.b     [w1+10], w1
    32bc:	81 80 fb    	ze        w1, w1
    32be:	f3 03 20    	mov.w     #0x3f, w3
    32c0:	81 18 dd    	sl.w      w3, w1, w1
    32c2:	81 80 ea    	com.w     w1, w1
    32c4:	81 00 61    	and.w     w2, w1, w1
    32c6:	01 08 78    	mov.w     w1, [w0]

000032c8 <.LSM43>:
        *(MOSI->rpor) |= (self->MOSIrpnum)<<(MOSI->rpshift);
    32c8:	0e 08 90    	mov.w     [w14+16], w0
    32ca:	70 00 90    	mov.w     [w0+14], w0
    32cc:	8e 08 90    	mov.w     [w14+16], w1
    32ce:	f1 00 90    	mov.w     [w1+14], w1
    32d0:	11 01 78    	mov.w     [w1], w2
    32d2:	ee 00 90    	mov.w     [w14+12], w1
    32d4:	e1 01 90    	mov.w     [w1+12], w3
    32d6:	8e 08 90    	mov.w     [w14+16], w1
    32d8:	a1 48 90    	mov.b     [w1+10], w1
    32da:	81 80 fb    	ze        w1, w1
    32dc:	81 18 dd    	sl.w      w3, w1, w1
    32de:	82 80 70    	ior.w     w1, w2, w1
    32e0:	01 08 78    	mov.w     w1, [w0]

000032e2 <.LSM44>:
        *(SCK->rpor) &= ~(0x3F<<(SCK->rpshift));
    32e2:	1e 08 90    	mov.w     [w14+18], w0
    32e4:	70 00 90    	mov.w     [w0+14], w0
    32e6:	9e 08 90    	mov.w     [w14+18], w1
    32e8:	f1 00 90    	mov.w     [w1+14], w1
    32ea:	11 01 78    	mov.w     [w1], w2
    32ec:	9e 08 90    	mov.w     [w14+18], w1
    32ee:	a1 48 90    	mov.b     [w1+10], w1
    32f0:	81 80 fb    	ze        w1, w1
    32f2:	f3 03 20    	mov.w     #0x3f, w3
    32f4:	81 18 dd    	sl.w      w3, w1, w1
    32f6:	81 80 ea    	com.w     w1, w1
    32f8:	81 00 61    	and.w     w2, w1, w1
    32fa:	01 08 78    	mov.w     w1, [w0]

000032fc <.LSM45>:
        *(SCK->rpor) |= (self->SCKrpnum)<<(SCK->rpshift);
    32fc:	1e 08 90    	mov.w     [w14+18], w0
    32fe:	70 00 90    	mov.w     [w0+14], w0
    3300:	9e 08 90    	mov.w     [w14+18], w1
    3302:	f1 00 90    	mov.w     [w1+14], w1
    3304:	11 01 78    	mov.w     [w1], w2
    3306:	ee 00 90    	mov.w     [w14+12], w1
    3308:	f1 01 90    	mov.w     [w1+14], w3
    330a:	9e 08 90    	mov.w     [w14+18], w1
    330c:	a1 48 90    	mov.b     [w1+10], w1
    330e:	81 80 fb    	ze        w1, w1
    3310:	81 18 dd    	sl.w      w3, w1, w1
    3312:	82 80 70    	ior.w     w1, w2, w1
    3314:	01 08 78    	mov.w     w1, [w0]

00003316 <.LSM46>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3316:	11 3a 80    	mov.w     0x742, w1
    3318:	00 04 20    	mov.w     #0x40, w0
    331a:	01 01 70    	ior.w     w0, w1, w2
    331c:	60 04 20    	mov.w     #0x46, w0
    331e:	71 05 20    	mov.w     #0x57, w1
    3320:	23 74 20    	mov.w     #0x742, w3
    3322:	80 49 78    	mov.b     w0, [w3]
    3324:	81 49 78    	mov.b     w1, [w3]
    3326:	82 49 78    	mov.b     w2, [w3]
    3328:	0f 00 37    	bra       0x3348 <.L8>

0000332a <.L7>:
    } else if ((self->MISO!=MISO) || (self->MOSI!=MOSI) || (self->SCK!=SCK)) {
    332a:	6e 00 90    	mov.w     [w14+12], w0
    332c:	80 08 90    	mov.w     [w0+16], w1
    332e:	7e 00 90    	mov.w     [w14+14], w0
    3330:	80 8f 50    	sub.w     w1, w0, [w15]
    3332:	95 00 3a    	bra       NZ, 0x345e <.L24>
    3334:	6e 00 90    	mov.w     [w14+12], w0
    3336:	90 08 90    	mov.w     [w0+18], w1
    3338:	0e 08 90    	mov.w     [w14+16], w0
    333a:	80 8f 50    	sub.w     w1, w0, [w15]
    333c:	92 00 3a    	bra       NZ, 0x3462 <.L25>
    333e:	6e 00 90    	mov.w     [w14+12], w0
    3340:	a0 08 90    	mov.w     [w0+20], w1
    3342:	1e 08 90    	mov.w     [w14+18], w0
    3344:	80 8f 50    	sub.w     w1, w0, [w15]
    3346:	8f 00 3a    	bra       NZ, 0x3466 <.L26>

00003348 <.L8>:
        return; // At least one of the specified pins does not match the 
                // previous assignment
    }
    // Clip freq to be in allowable range of values
    if (freq>(FCY/2.))
    3348:	18 c0 b3    	mov.b     #0x1, w8
    334a:	02 40 22    	mov.w     #0x2400, w2
    334c:	43 af 24    	mov.w     #0x4af4, w3
    334e:	2e 08 90    	mov.w     [w14+20], w0
    3350:	be 08 90    	mov.w     [w14+22], w1
    3352:	03 f0 07    	rcall     0x135a <___gesf2>
    3354:	00 00 e0    	cp0.w     w0
    3356:	01 00 3c    	bra       GT, 0x335a <.L10>
    3358:	00 44 eb    	clr.b     w8

0000335a <.L10>:
    335a:	08 04 e0    	cp0.b     w8
    335c:	04 00 32    	bra       Z, 0x3366 <.L11>

0000335e <.LSM49>:
        freq = FCY/2.;
    335e:	00 40 22    	mov.w     #0x2400, w0
    3360:	41 af 24    	mov.w     #0x4af4, w1
    3362:	20 0f 98    	mov.w     w0, [w14+20]
    3364:	31 0f 98    	mov.w     w1, [w14+22]

00003366 <.L11>:
    if (freq<(FCY/(64.*8.)))
    3366:	18 c0 b3    	mov.b     #0x1, w8
    3368:	02 40 22    	mov.w     #0x2400, w2
    336a:	43 6f 24    	mov.w     #0x46f4, w3
    336c:	2e 08 90    	mov.w     [w14+20], w0
    336e:	be 08 90    	mov.w     [w14+22], w1
    3370:	f2 ef 07    	rcall     0x1356 <___eqsf2>
    3372:	00 00 e0    	cp0.w     w0
    3374:	01 00 35    	bra       LT, 0x3378 <.L12>
    3376:	00 44 eb    	clr.b     w8

00003378 <.L12>:
    3378:	08 04 e0    	cp0.b     w8
    337a:	04 00 32    	bra       Z, 0x3384 <.L13>

0000337c <.LSM51>:
        freq = FCY/(64.*8.);
    337c:	00 40 22    	mov.w     #0x2400, w0
    337e:	41 6f 24    	mov.w     #0x46f4, w1
    3380:	20 0f 98    	mov.w     w0, [w14+20]
    3382:	31 0f 98    	mov.w     w1, [w14+22]

00003384 <.L13>:
    // Select primary prescale bits
    if (freq<=(FCY/(2.*64.))) {
    3384:	18 c0 b3    	mov.b     #0x1, w8
    3386:	02 40 22    	mov.w     #0x2400, w2
    3388:	43 7f 24    	mov.w     #0x47f4, w3
    338a:	2e 08 90    	mov.w     [w14+20], w0
    338c:	be 08 90    	mov.w     [w14+22], w1
    338e:	e3 ef 07    	rcall     0x1356 <___eqsf2>
    3390:	00 00 e0    	cp0.w     w0
    3392:	01 00 34    	bra       LE, 0x3396 <.L14>
    3394:	00 44 eb    	clr.b     w8

00003396 <.L14>:
    3396:	08 04 e0    	cp0.b     w8
    3398:	0a 00 32    	bra       Z, 0x33ae <.L15>

0000339a <.LSM53>:
        freq *= 64.;
    339a:	02 00 20    	mov.w     #0x0, w2
    339c:	03 28 24    	mov.w     #0x4280, w3
    339e:	2e 08 90    	mov.w     [w14+20], w0
    33a0:	be 08 90    	mov.w     [w14+22], w1
    33a2:	4d f0 07    	rcall     0x143e <___mulsf3>
    33a4:	20 0f 98    	mov.w     w0, [w14+20]
    33a6:	31 0f 98    	mov.w     w1, [w14+22]

000033a8 <.LSM54>:
        primary = 0;    // Set primary prescale bits for 64:1
    33a8:	00 00 eb    	clr.w     w0
    33aa:	00 0f 78    	mov.w     w0, [w14]
    33ac:	2c 00 37    	bra       0x3406 <.L16>

000033ae <.L15>:
    } else if (freq<=(FCY/(2.*16.))) {
    33ae:	18 c0 b3    	mov.b     #0x1, w8
    33b0:	02 40 22    	mov.w     #0x2400, w2
    33b2:	43 8f 24    	mov.w     #0x48f4, w3
    33b4:	2e 08 90    	mov.w     [w14+20], w0
    33b6:	be 08 90    	mov.w     [w14+22], w1
    33b8:	ce ef 07    	rcall     0x1356 <___eqsf2>
    33ba:	00 00 e0    	cp0.w     w0
    33bc:	01 00 34    	bra       LE, 0x33c0 <.L17>
    33be:	00 44 eb    	clr.b     w8

000033c0 <.L17>:
    33c0:	08 04 e0    	cp0.b     w8
    33c2:	0a 00 32    	bra       Z, 0x33d8 <.L18>

000033c4 <.LSM56>:
        freq *= 16.;
    33c4:	02 00 20    	mov.w     #0x0, w2
    33c6:	03 18 24    	mov.w     #0x4180, w3
    33c8:	2e 08 90    	mov.w     [w14+20], w0
    33ca:	be 08 90    	mov.w     [w14+22], w1
    33cc:	38 f0 07    	rcall     0x143e <___mulsf3>
    33ce:	20 0f 98    	mov.w     w0, [w14+20]
    33d0:	31 0f 98    	mov.w     w1, [w14+22]

000033d2 <.LSM57>:
        primary = 1;    // Set primary prescale bits for 16:1
    33d2:	10 00 20    	mov.w     #0x1, w0
    33d4:	00 0f 78    	mov.w     w0, [w14]
    33d6:	17 00 37    	bra       0x3406 <.L16>

000033d8 <.L18>:
    } else if (freq<=(FCY/(2.*4.))) {
    33d8:	18 c0 b3    	mov.b     #0x1, w8
    33da:	02 40 22    	mov.w     #0x2400, w2
    33dc:	43 9f 24    	mov.w     #0x49f4, w3
    33de:	2e 08 90    	mov.w     [w14+20], w0
    33e0:	be 08 90    	mov.w     [w14+22], w1
    33e2:	b9 ef 07    	rcall     0x1356 <___eqsf2>
    33e4:	00 00 e0    	cp0.w     w0
    33e6:	01 00 34    	bra       LE, 0x33ea <.L19>
    33e8:	00 44 eb    	clr.b     w8

000033ea <.L19>:
    33ea:	08 04 e0    	cp0.b     w8
    33ec:	0a 00 32    	bra       Z, 0x3402 <.L20>

000033ee <.LSM59>:
        freq *= 4.;
    33ee:	02 00 20    	mov.w     #0x0, w2
    33f0:	03 08 24    	mov.w     #0x4080, w3
    33f2:	2e 08 90    	mov.w     [w14+20], w0
    33f4:	be 08 90    	mov.w     [w14+22], w1
    33f6:	23 f0 07    	rcall     0x143e <___mulsf3>
    33f8:	20 0f 98    	mov.w     w0, [w14+20]
    33fa:	31 0f 98    	mov.w     w1, [w14+22]

000033fc <.LSM60>:
        primary = 2;    // Set primary prescale bits for 4:1
    33fc:	20 00 20    	mov.w     #0x2, w0
    33fe:	00 0f 78    	mov.w     w0, [w14]
    3400:	02 00 37    	bra       0x3406 <.L16>

00003402 <.L20>:
    } else {
        primary = 3;    // Set primary prescale bits for 1:1
    3402:	30 00 20    	mov.w     #0x3, w0
    3404:	00 0f 78    	mov.w     w0, [w14]

00003406 <.L16>:
    }
    // Compute secondary prescale value to get closest SPI clock freq to that 
    // specified
    secondary = (uint16_t)(0.5+FCY/freq);
    3406:	2e 09 90    	mov.w     [w14+20], w2
    3408:	be 09 90    	mov.w     [w14+22], w3
    340a:	00 40 22    	mov.w     #0x2400, w0
    340c:	41 b7 24    	mov.w     #0x4b74, w1
    340e:	61 ef 07    	rcall     0x12d2 <___divsf3>
    3410:	02 00 20    	mov.w     #0x0, w2
    3412:	03 f0 23    	mov.w     #0x3f00, w3
    3414:	01 ef 07    	rcall     0x1218 <___addsf3>
    3416:	a3 ef 07    	rcall     0x135e <___fixunssfsi>
    3418:	10 07 98    	mov.w     w0, [w14+2]

0000341a <.LSM63>:
    secondary = (8-secondary)<<2;   // Map secondary prescale bits for SPIxCON1
    341a:	1e 00 90    	mov.w     [w14+2], w0
    341c:	68 00 10    	subr.w    w0, #0x8, w0
    341e:	42 00 dd    	sl.w      w0, #0x2, w0
    3420:	10 07 98    	mov.w     w0, [w14+2]

00003422 <.LSM64>:
    // Configure the SPI module
    //   set SPI module to 8-bit master mode, SMP = 0
    //   set CKE and CKP bits according to the SPI mode specified
    //   set SPRE and PPRE bits to get the closest SPI clock freq to that 
    //   specified
    *(self->SPIxCON1) = 0x0020 | modebits[mode & 0x03] | primary | secondary;
    3422:	6e 00 90    	mov.w     [w14+12], w0
    3424:	90 00 90    	mov.w     [w0+2], w1
    3426:	0e 58 90    	mov.b     [w14+24], w0
    3428:	00 80 fb    	ze        w0, w0
    342a:	63 00 60    	and.w     w0, #0x3, w0
    342c:	00 00 40    	add.w     w0, w0, w0
    342e:	64 01 47    	add.w     w14, #0x4, w2
    3430:	00 00 41    	add.w     w2, w0, w0
    3432:	10 00 78    	mov.w     [w0], w0
    3434:	1e 01 70    	ior.w     w0, [w14], w2
    3436:	1e 00 90    	mov.w     [w14+2], w0
    3438:	02 01 70    	ior.w     w0, w2, w2
    343a:	00 02 20    	mov.w     #0x20, w0
    343c:	02 00 70    	ior.w     w0, w2, w0
    343e:	80 08 78    	mov.w     w0, [w1]

00003440 <.LSM65>:
    *(self->SPIxCON2) = 0;
    3440:	6e 00 90    	mov.w     [w14+12], w0
    3442:	20 00 90    	mov.w     [w0+4], w0
    3444:	80 00 eb    	clr.w     w1
    3446:	01 08 78    	mov.w     w1, [w0]

00003448 <.LSM66>:
    // Enable the SPI module and clear status flags
    *(self->SPIxSTAT) = 0x8000;
    3448:	6e 00 90    	mov.w     [w14+12], w0
    344a:	10 00 78    	mov.w     [w0], w0
    344c:	01 00 28    	mov.w     #0x8000, w1
    344e:	01 08 78    	mov.w     w1, [w0]
    3450:	0b 00 37    	bra       0x3468 <.L3>

00003452 <.L21>:
    3452:	00 00 00    	nop       
    3454:	09 00 37    	bra       0x3468 <.L3>

00003456 <.L22>:
    3456:	00 00 00    	nop       
    3458:	07 00 37    	bra       0x3468 <.L3>

0000345a <.L23>:
    345a:	00 00 00    	nop       
    345c:	05 00 37    	bra       0x3468 <.L3>

0000345e <.L24>:
    345e:	00 00 00    	nop       
    3460:	03 00 37    	bra       0x3468 <.L3>

00003462 <.L25>:
    3462:	00 00 00    	nop       
    3464:	01 00 37    	bra       0x3468 <.L3>

00003466 <.L26>:
    3466:	00 00 00    	nop       

00003468 <.L3>:
}
    3468:	4f 04 78    	mov.w     [--w15], w8
    346a:	00 80 fa    	ulnk      
    346c:	00 00 06    	return    

0000346e <_spi_close>:

void spi_close(_SPI *self) {
    346e:	02 00 fa    	lnk       #0x2
    3470:	00 0f 78    	mov.w     w0, [w14]

00003472 <.LSM71>:
    *(self->SPIxSTAT) = 0;
    3472:	1e 00 78    	mov.w     [w14], w0
    3474:	10 00 78    	mov.w     [w0], w0
    3476:	80 00 eb    	clr.w     w1
    3478:	01 08 78    	mov.w     w1, [w0]

0000347a <.LSM72>:
    *(self->SPIxCON1) = 0;
    347a:	1e 00 78    	mov.w     [w14], w0
    347c:	10 00 90    	mov.w     [w0+2], w0
    347e:	80 00 eb    	clr.w     w1
    3480:	01 08 78    	mov.w     w1, [w0]

00003482 <.LSM73>:
    *(self->SPIxCON2) = 0;
    3482:	1e 00 78    	mov.w     [w14], w0
    3484:	20 00 90    	mov.w     [w0+4], w0
    3486:	80 00 eb    	clr.w     w1
    3488:	01 08 78    	mov.w     w1, [w0]

0000348a <.LSM74>:
    if (self->MISO) {
    348a:	1e 00 78    	mov.w     [w14], w0
    348c:	00 08 90    	mov.w     [w0+16], w0
    348e:	00 00 e0    	cp0.w     w0
    3490:	28 00 32    	bra       Z, 0x34e2 <.L28>

00003492 <.LSM75>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3492:	11 3a 80    	mov.w     0x742, w1
    3494:	f0 0b 20    	mov.w     #0xbf, w0
    3496:	00 81 60    	and.w     w1, w0, w2
    3498:	60 04 20    	mov.w     #0x46, w0
    349a:	71 05 20    	mov.w     #0x57, w1
    349c:	23 74 20    	mov.w     #0x742, w3
    349e:	80 49 78    	mov.b     w0, [w3]
    34a0:	81 49 78    	mov.b     w1, [w3]
    34a2:	82 49 78    	mov.b     w2, [w3]

000034a4 <.LSM76>:
        *(self->MISOrpinr) |= 0x3F<<(self->MISOrpshift);
    34a4:	1e 00 78    	mov.w     [w14], w0
    34a6:	40 00 90    	mov.w     [w0+8], w0
    34a8:	9e 00 78    	mov.w     [w14], w1
    34aa:	c1 00 90    	mov.w     [w1+8], w1
    34ac:	11 01 78    	mov.w     [w1], w2
    34ae:	9e 00 78    	mov.w     [w14], w1
    34b0:	a1 48 90    	mov.b     [w1+10], w1
    34b2:	81 80 fb    	ze        w1, w1
    34b4:	f3 03 20    	mov.w     #0x3f, w3
    34b6:	81 18 dd    	sl.w      w3, w1, w1
    34b8:	82 80 70    	ior.w     w1, w2, w1
    34ba:	01 08 78    	mov.w     w1, [w0]

000034bc <.LSM77>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    34bc:	11 3a 80    	mov.w     0x742, w1
    34be:	00 04 20    	mov.w     #0x40, w0
    34c0:	01 01 70    	ior.w     w0, w1, w2
    34c2:	60 04 20    	mov.w     #0x46, w0
    34c4:	71 05 20    	mov.w     #0x57, w1
    34c6:	23 74 20    	mov.w     #0x742, w3
    34c8:	80 49 78    	mov.b     w0, [w3]
    34ca:	81 49 78    	mov.b     w1, [w3]
    34cc:	82 49 78    	mov.b     w2, [w3]

000034ce <.LSM78>:
        self->MISO->owner = NULL;
    34ce:	1e 00 78    	mov.w     [w14], w0
    34d0:	00 08 90    	mov.w     [w0+16], w0
    34d2:	80 00 eb    	clr.w     w1
    34d4:	01 08 98    	mov.w     w1, [w0+16]

000034d6 <.LSM79>:
        pin_digitalIn(self->MISO);
    34d6:	1e 00 78    	mov.w     [w14], w0
    34d8:	00 08 90    	mov.w     [w0+16], w0
    34da:	01 02 07    	rcall     0x38de <_pin_digitalIn>

000034dc <.LSM80>:
        self->MISO = NULL;
    34dc:	1e 00 78    	mov.w     [w14], w0
    34de:	80 00 eb    	clr.w     w1
    34e0:	01 08 98    	mov.w     w1, [w0+16]

000034e2 <.L28>:
    }
    if (self->MOSI) {
    34e2:	1e 00 78    	mov.w     [w14], w0
    34e4:	10 08 90    	mov.w     [w0+18], w0
    34e6:	00 00 e0    	cp0.w     w0
    34e8:	2f 00 32    	bra       Z, 0x3548 <.L29>

000034ea <.LSM82>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    34ea:	11 3a 80    	mov.w     0x742, w1
    34ec:	f0 0b 20    	mov.w     #0xbf, w0
    34ee:	00 81 60    	and.w     w1, w0, w2
    34f0:	60 04 20    	mov.w     #0x46, w0
    34f2:	71 05 20    	mov.w     #0x57, w1
    34f4:	23 74 20    	mov.w     #0x742, w3
    34f6:	80 49 78    	mov.b     w0, [w3]
    34f8:	81 49 78    	mov.b     w1, [w3]
    34fa:	82 49 78    	mov.b     w2, [w3]

000034fc <.LSM83>:
        *(self->MOSI->rpor) &= ~(0x3F<<(self->MOSI->rpshift));
    34fc:	1e 00 78    	mov.w     [w14], w0
    34fe:	10 08 90    	mov.w     [w0+18], w0
    3500:	70 00 90    	mov.w     [w0+14], w0
    3502:	9e 00 78    	mov.w     [w14], w1
    3504:	91 08 90    	mov.w     [w1+18], w1
    3506:	f1 00 90    	mov.w     [w1+14], w1
    3508:	11 01 78    	mov.w     [w1], w2
    350a:	9e 00 78    	mov.w     [w14], w1
    350c:	91 08 90    	mov.w     [w1+18], w1
    350e:	a1 48 90    	mov.b     [w1+10], w1
    3510:	81 80 fb    	ze        w1, w1
    3512:	f3 03 20    	mov.w     #0x3f, w3
    3514:	81 18 dd    	sl.w      w3, w1, w1
    3516:	81 80 ea    	com.w     w1, w1
    3518:	81 00 61    	and.w     w2, w1, w1
    351a:	01 08 78    	mov.w     w1, [w0]

0000351c <.LSM84>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    351c:	11 3a 80    	mov.w     0x742, w1
    351e:	00 04 20    	mov.w     #0x40, w0
    3520:	01 01 70    	ior.w     w0, w1, w2
    3522:	60 04 20    	mov.w     #0x46, w0
    3524:	71 05 20    	mov.w     #0x57, w1
    3526:	23 74 20    	mov.w     #0x742, w3
    3528:	80 49 78    	mov.b     w0, [w3]
    352a:	81 49 78    	mov.b     w1, [w3]
    352c:	82 49 78    	mov.b     w2, [w3]

0000352e <.LSM85>:
        self->MOSI->owner = NULL;
    352e:	1e 00 78    	mov.w     [w14], w0
    3530:	10 08 90    	mov.w     [w0+18], w0
    3532:	80 00 eb    	clr.w     w1
    3534:	01 08 98    	mov.w     w1, [w0+16]

00003536 <.LSM86>:
        pin_digitalOut(self->MOSI);
    3536:	1e 00 78    	mov.w     [w14], w0
    3538:	10 08 90    	mov.w     [w0+18], w0
    353a:	f8 01 07    	rcall     0x392c <_pin_digitalOut>

0000353c <.LSM87>:
        pin_set(self->MOSI);
    353c:	1e 00 78    	mov.w     [w14], w0
    353e:	10 08 90    	mov.w     [w0+18], w0
    3540:	52 02 07    	rcall     0x39e6 <_pin_set>

00003542 <.LSM88>:
        self->MOSI = NULL;
    3542:	1e 00 78    	mov.w     [w14], w0
    3544:	80 00 eb    	clr.w     w1
    3546:	11 08 98    	mov.w     w1, [w0+18]

00003548 <.L29>:
    }
    if (self->SCK) {
    3548:	1e 00 78    	mov.w     [w14], w0
    354a:	20 08 90    	mov.w     [w0+20], w0
    354c:	00 00 e0    	cp0.w     w0
    354e:	2f 00 32    	bra       Z, 0x35ae <.L27>

00003550 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3550:	11 3a 80    	mov.w     0x742, w1
    3552:	f0 0b 20    	mov.w     #0xbf, w0
    3554:	00 81 60    	and.w     w1, w0, w2
    3556:	60 04 20    	mov.w     #0x46, w0
    3558:	71 05 20    	mov.w     #0x57, w1
    355a:	23 74 20    	mov.w     #0x742, w3
    355c:	80 49 78    	mov.b     w0, [w3]
    355e:	81 49 78    	mov.b     w1, [w3]
    3560:	82 49 78    	mov.b     w2, [w3]

00003562 <.LSM91>:
        *(self->SCK->rpor) &= ~(0x3F<<(self->SCK->rpshift));
    3562:	1e 00 78    	mov.w     [w14], w0
    3564:	20 08 90    	mov.w     [w0+20], w0
    3566:	70 00 90    	mov.w     [w0+14], w0
    3568:	9e 00 78    	mov.w     [w14], w1
    356a:	a1 08 90    	mov.w     [w1+20], w1
    356c:	f1 00 90    	mov.w     [w1+14], w1
    356e:	11 01 78    	mov.w     [w1], w2
    3570:	9e 00 78    	mov.w     [w14], w1
    3572:	a1 08 90    	mov.w     [w1+20], w1
    3574:	a1 48 90    	mov.b     [w1+10], w1
    3576:	81 80 fb    	ze        w1, w1
    3578:	f3 03 20    	mov.w     #0x3f, w3
    357a:	81 18 dd    	sl.w      w3, w1, w1
    357c:	81 80 ea    	com.w     w1, w1
    357e:	81 00 61    	and.w     w2, w1, w1
    3580:	01 08 78    	mov.w     w1, [w0]

00003582 <.LSM92>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3582:	11 3a 80    	mov.w     0x742, w1
    3584:	00 04 20    	mov.w     #0x40, w0
    3586:	01 01 70    	ior.w     w0, w1, w2
    3588:	60 04 20    	mov.w     #0x46, w0
    358a:	71 05 20    	mov.w     #0x57, w1
    358c:	23 74 20    	mov.w     #0x742, w3
    358e:	80 49 78    	mov.b     w0, [w3]
    3590:	81 49 78    	mov.b     w1, [w3]
    3592:	82 49 78    	mov.b     w2, [w3]

00003594 <.LSM93>:
        self->SCK->owner = NULL;
    3594:	1e 00 78    	mov.w     [w14], w0
    3596:	20 08 90    	mov.w     [w0+20], w0
    3598:	80 00 eb    	clr.w     w1
    359a:	01 08 98    	mov.w     w1, [w0+16]

0000359c <.LSM94>:
        pin_digitalOut(self->SCK);
    359c:	1e 00 78    	mov.w     [w14], w0
    359e:	20 08 90    	mov.w     [w0+20], w0
    35a0:	c5 01 07    	rcall     0x392c <_pin_digitalOut>

000035a2 <.LSM95>:
        pin_clear(self->SCK);
    35a2:	1e 00 78    	mov.w     [w14], w0
    35a4:	20 08 90    	mov.w     [w0+20], w0
    35a6:	34 02 07    	rcall     0x3a10 <_pin_clear>

000035a8 <.LSM96>:
        self->SCK = NULL;
    35a8:	1e 00 78    	mov.w     [w14], w0
    35aa:	80 00 eb    	clr.w     w1
    35ac:	21 08 98    	mov.w     w1, [w0+20]

000035ae <.L27>:
    }
}
    35ae:	00 80 fa    	ulnk      
    35b0:	00 00 06    	return    

000035b2 <_spi_transfer>:

uint8_t spi_transfer(_SPI *self, uint8_t val) {
    35b2:	04 00 fa    	lnk       #0x4
    35b4:	00 0f 78    	mov.w     w0, [w14]
    35b6:	21 47 98    	mov.b     w1, [w14+2]

000035b8 <.LSM99>:
    *(self->SPIxBUF) = (uint16_t)val;
    35b8:	1e 00 78    	mov.w     [w14], w0
    35ba:	30 00 90    	mov.w     [w0+6], w0
    35bc:	ae 40 90    	mov.b     [w14+2], w1
    35be:	81 80 fb    	ze        w1, w1
    35c0:	01 08 78    	mov.w     w1, [w0]

000035c2 <.LSM100>:
    while (bitread(self->SPIxSTAT, 0)==0) {}
    35c2:	00 00 00    	nop       

000035c4 <.L32>:
    35c4:	1e 00 78    	mov.w     [w14], w0
    35c6:	10 00 78    	mov.w     [w0], w0
    35c8:	10 00 78    	mov.w     [w0], w0
    35ca:	61 00 60    	and.w     w0, #0x1, w0
    35cc:	00 00 e0    	cp0.w     w0
    35ce:	fa ff 32    	bra       Z, 0x35c4 <.L32>

000035d0 <.LSM101>:
    return (uint8_t)(*(self->SPIxBUF));
    35d0:	1e 00 78    	mov.w     [w14], w0
    35d2:	30 00 90    	mov.w     [w0+6], w0
    35d4:	10 00 78    	mov.w     [w0], w0
    35d6:	00 40 78    	mov.b     w0, w0

000035d8 <.LSM102>:
}
    35d8:	00 80 fa    	ulnk      
    35da:	00 00 06    	return    

000035dc <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    35dc:	04 00 fa    	lnk       #0x4
    35de:	00 0f 78    	mov.w     w0, [w14]
    35e0:	11 07 98    	mov.w     w1, [w14+2]

000035e2 <.LSM1>:
    if (val)
    35e2:	1e 00 90    	mov.w     [w14+2], w0
    35e4:	00 00 e0    	cp0.w     w0
    35e6:	0d 00 32    	bra       Z, 0x3602 <.L2>

000035e8 <.LSM2>:
        bitset(self->port, self->bit);
    35e8:	1e 00 78    	mov.w     [w14], w0
    35ea:	10 00 78    	mov.w     [w0], w0
    35ec:	9e 00 78    	mov.w     [w14], w1
    35ee:	91 00 78    	mov.w     [w1], w1
    35f0:	11 01 78    	mov.w     [w1], w2
    35f2:	9e 00 78    	mov.w     [w14], w1
    35f4:	e1 40 90    	mov.b     [w1+6], w1
    35f6:	81 80 fb    	ze        w1, w1
    35f8:	13 00 20    	mov.w     #0x1, w3
    35fa:	81 18 dd    	sl.w      w3, w1, w1
    35fc:	82 80 70    	ior.w     w1, w2, w1
    35fe:	01 08 78    	mov.w     w1, [w0]
    3600:	0d 00 37    	bra       0x361c <.L1>

00003602 <.L2>:
    else
        bitclear(self->port, self->bit);
    3602:	1e 00 78    	mov.w     [w14], w0
    3604:	10 00 78    	mov.w     [w0], w0
    3606:	9e 00 78    	mov.w     [w14], w1
    3608:	91 00 78    	mov.w     [w1], w1
    360a:	11 01 78    	mov.w     [w1], w2
    360c:	9e 00 78    	mov.w     [w14], w1
    360e:	e1 40 90    	mov.b     [w1+6], w1
    3610:	81 80 fb    	ze        w1, w1
    3612:	13 00 20    	mov.w     #0x1, w3
    3614:	81 18 dd    	sl.w      w3, w1, w1
    3616:	81 80 ea    	com.w     w1, w1
    3618:	81 00 61    	and.w     w2, w1, w1
    361a:	01 08 78    	mov.w     w1, [w0]

0000361c <.L1>:
}
    361c:	00 80 fa    	ulnk      
    361e:	00 00 06    	return    

00003620 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    3620:	02 00 fa    	lnk       #0x2
    3622:	00 0f 78    	mov.w     w0, [w14]

00003624 <.LSM6>:
    return bitread(self->port, self->bit);
    3624:	1e 00 78    	mov.w     [w14], w0
    3626:	10 00 78    	mov.w     [w0], w0
    3628:	90 00 78    	mov.w     [w0], w1
    362a:	1e 00 78    	mov.w     [w14], w0
    362c:	60 40 90    	mov.b     [w0+6], w0
    362e:	00 80 fb    	ze        w0, w0
    3630:	12 00 20    	mov.w     #0x1, w2
    3632:	00 10 dd    	sl.w      w2, w0, w0
    3634:	00 80 60    	and.w     w1, w0, w0
    3636:	00 f0 a7    	btsc.w    w0, #0xf
    3638:	00 00 ea    	neg.w     w0, w0
    363a:	00 00 ea    	neg.w     w0, w0
    363c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000363e <.LSM7>:
}
    363e:	00 80 fa    	ulnk      
    3640:	00 00 06    	return    

00003642 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    3642:	02 00 fa    	lnk       #0x2
    3644:	00 0f 78    	mov.w     w0, [w14]

00003646 <.LSM9>:
    AD1CHS = self->annum;
    3646:	1e 00 78    	mov.w     [w14], w0
    3648:	40 00 90    	mov.w     [w0+8], w0
    364a:	40 19 88    	mov.w     w0, 0x328

0000364c <.LSM10>:
    AD1CON1bits.SAMP = 1;
    364c:	20 23 a8    	bset.b    0x320, #0x1

0000364e <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    364e:	00 00 00    	nop       

00003650 <.L6>:
    3650:	00 19 80    	mov.w     0x320, w0
    3652:	61 00 60    	and.w     w0, #0x1, w0
    3654:	00 00 e0    	cp0.w     w0
    3656:	fc ff 32    	bra       Z, 0x3650 <.L6>

00003658 <.LSM12>:
    return ADC1BUF0;
    3658:	00 18 80    	mov.w     0x300, w0

0000365a <.LSM13>:
}
    365a:	00 80 fa    	ulnk      
    365c:	00 00 06    	return    

0000365e <_init_pin>:

void init_pin(void) {
    365e:	02 00 fa    	lnk       #0x2

00003660 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3660:	40 6d 20    	mov.w     #0x6d4, w0
    3662:	80 1f 78    	mov.w     w0, [w15++]
    3664:	47 01 20    	mov.w     #0x14, w7
    3666:	00 43 eb    	clr.b     w6
    3668:	80 82 eb    	setm.w    w5
    366a:	54 c0 b3    	mov.b     #0x5, w4
    366c:	80 01 eb    	clr.w     w3
    366e:	82 2d 20    	mov.w     #0x2d8, w2
    3670:	a1 2d 20    	mov.w     #0x2da, w1
    3672:	e0 86 20    	mov.w     #0x86e, w0
    3674:	08 01 07    	rcall     0x3886 <_pin_init>
    3676:	8f 87 e9    	dec2.w    w15, w15

00003678 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3678:	80 6d 20    	mov.w     #0x6d8, w0
    367a:	80 1f 78    	mov.w     w0, [w15++]
    367c:	97 01 20    	mov.w     #0x19, w7
    367e:	86 c0 b3    	mov.b     #0x8, w6
    3680:	80 82 eb    	setm.w    w5
    3682:	44 c0 b3    	mov.b     #0x4, w4
    3684:	80 01 eb    	clr.w     w3
    3686:	82 2d 20    	mov.w     #0x2d8, w2
    3688:	a1 2d 20    	mov.w     #0x2da, w1
    368a:	40 88 20    	mov.w     #0x884, w0
    368c:	fc 00 07    	rcall     0x3886 <_pin_init>
    368e:	8f 87 e9    	dec2.w    w15, w15

00003690 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3690:	a0 6c 20    	mov.w     #0x6ca, w0
    3692:	80 1f 78    	mov.w     w0, [w15++]
    3694:	a7 00 20    	mov.w     #0xa, w7
    3696:	00 43 eb    	clr.b     w6
    3698:	80 82 eb    	setm.w    w5
    369a:	44 c0 b3    	mov.b     #0x4, w4
    369c:	80 01 eb    	clr.w     w3
    369e:	82 2e 20    	mov.w     #0x2e8, w2
    36a0:	a1 2e 20    	mov.w     #0x2ea, w1
    36a2:	a0 89 20    	mov.w     #0x89a, w0
    36a4:	f0 00 07    	rcall     0x3886 <_pin_init>
    36a6:	8f 87 e9    	dec2.w    w15, w15

000036a8 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    36a8:	00 6d 20    	mov.w     #0x6d0, w0
    36aa:	80 1f 78    	mov.w     w0, [w15++]
    36ac:	17 01 20    	mov.w     #0x11, w7
    36ae:	86 c0 b3    	mov.b     #0x8, w6
    36b0:	80 82 eb    	setm.w    w5
    36b2:	54 c0 b3    	mov.b     #0x5, w4
    36b4:	80 01 eb    	clr.w     w3
    36b6:	82 2e 20    	mov.w     #0x2e8, w2
    36b8:	a1 2e 20    	mov.w     #0x2ea, w1
    36ba:	00 8b 20    	mov.w     #0x8b0, w0
    36bc:	e4 00 07    	rcall     0x3886 <_pin_init>
    36be:	8f 87 e9    	dec2.w    w15, w15

000036c0 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    36c0:	c0 6d 20    	mov.w     #0x6dc, w0
    36c2:	80 1f 78    	mov.w     w0, [w15++]
    36c4:	d7 01 20    	mov.w     #0x1d, w7
    36c6:	86 c0 b3    	mov.b     #0x8, w6
    36c8:	f5 00 20    	mov.w     #0xf, w5
    36ca:	f4 c0 b3    	mov.b     #0xf, w4
    36cc:	23 4e 20    	mov.w     #0x4e2, w3
    36ce:	82 2c 20    	mov.w     #0x2c8, w2
    36d0:	a1 2c 20    	mov.w     #0x2ca, w1
    36d2:	60 8c 20    	mov.w     #0x8c6, w0
    36d4:	d8 00 07    	rcall     0x3886 <_pin_init>
    36d6:	8f 87 e9    	dec2.w    w15, w15

000036d8 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    36d8:	00 6d 20    	mov.w     #0x6d0, w0
    36da:	80 1f 78    	mov.w     w0, [w15++]
    36dc:	07 01 20    	mov.w     #0x10, w7
    36de:	00 43 eb    	clr.b     w6
    36e0:	80 82 eb    	setm.w    w5
    36e2:	34 c0 b3    	mov.b     #0x3, w4
    36e4:	80 01 eb    	clr.w     w3
    36e6:	82 2e 20    	mov.w     #0x2e8, w2
    36e8:	a1 2e 20    	mov.w     #0x2ea, w1
    36ea:	c0 8d 20    	mov.w     #0x8dc, w0
    36ec:	cc 00 07    	rcall     0x3886 <_pin_init>
    36ee:	8f 87 e9    	dec2.w    w15, w15

000036f0 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    36f0:	20 6c 20    	mov.w     #0x6c2, w0
    36f2:	80 1f 78    	mov.w     w0, [w15++]
    36f4:	27 00 20    	mov.w     #0x2, w7
    36f6:	00 43 eb    	clr.b     w6
    36f8:	80 82 eb    	setm.w    w5
    36fa:	84 c0 b3    	mov.b     #0x8, w4
    36fc:	80 01 eb    	clr.w     w3
    36fe:	82 2d 20    	mov.w     #0x2d8, w2
    3700:	a1 2d 20    	mov.w     #0x2da, w1
    3702:	20 8f 20    	mov.w     #0x8f2, w0
    3704:	c0 00 07    	rcall     0x3886 <_pin_init>
    3706:	8f 87 e9    	dec2.w    w15, w15

00003708 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3708:	c0 6c 20    	mov.w     #0x6cc, w0
    370a:	80 1f 78    	mov.w     w0, [w15++]
    370c:	c7 00 20    	mov.w     #0xc, w7
    370e:	00 43 eb    	clr.b     w6
    3710:	80 82 eb    	setm.w    w5
    3712:	b4 c0 b3    	mov.b     #0xb, w4
    3714:	80 01 eb    	clr.w     w3
    3716:	82 2d 20    	mov.w     #0x2d8, w2
    3718:	a1 2d 20    	mov.w     #0x2da, w1
    371a:	80 90 20    	mov.w     #0x908, w0
    371c:	b4 00 07    	rcall     0x3886 <_pin_init>
    371e:	8f 87 e9    	dec2.w    w15, w15

00003720 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3720:	40 6c 20    	mov.w     #0x6c4, w0
    3722:	80 1f 78    	mov.w     w0, [w15++]
    3724:	47 00 20    	mov.w     #0x4, w7
    3726:	00 43 eb    	clr.b     w6
    3728:	80 82 eb    	setm.w    w5
    372a:	94 c0 b3    	mov.b     #0x9, w4
    372c:	80 01 eb    	clr.w     w3
    372e:	82 2d 20    	mov.w     #0x2d8, w2
    3730:	a1 2d 20    	mov.w     #0x2da, w1
    3732:	e0 91 20    	mov.w     #0x91e, w0
    3734:	a8 00 07    	rcall     0x3886 <_pin_init>
    3736:	8f 87 e9    	dec2.w    w15, w15

00003738 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3738:	20 6c 20    	mov.w     #0x6c2, w0
    373a:	80 1f 78    	mov.w     w0, [w15++]
    373c:	37 00 20    	mov.w     #0x3, w7
    373e:	86 c0 b3    	mov.b     #0x8, w6
    3740:	80 82 eb    	setm.w    w5
    3742:	a4 c0 b3    	mov.b     #0xa, w4
    3744:	80 01 eb    	clr.w     w3
    3746:	82 2d 20    	mov.w     #0x2d8, w2
    3748:	a1 2d 20    	mov.w     #0x2da, w1
    374a:	40 93 20    	mov.w     #0x934, w0
    374c:	9c 00 07    	rcall     0x3886 <_pin_init>
    374e:	8f 87 e9    	dec2.w    w15, w15

00003750 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3750:	a0 6c 20    	mov.w     #0x6ca, w0
    3752:	80 1f 78    	mov.w     w0, [w15++]
    3754:	b7 00 20    	mov.w     #0xb, w7
    3756:	86 c0 b3    	mov.b     #0x8, w6
    3758:	80 82 eb    	setm.w    w5
    375a:	00 42 eb    	clr.b     w4
    375c:	80 01 eb    	clr.w     w3
    375e:	82 2d 20    	mov.w     #0x2d8, w2
    3760:	a1 2d 20    	mov.w     #0x2da, w1
    3762:	a0 94 20    	mov.w     #0x94a, w0
    3764:	90 00 07    	rcall     0x3886 <_pin_init>
    3766:	8f 87 e9    	dec2.w    w15, w15

00003768 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3768:	80 6d 20    	mov.w     #0x6d8, w0
    376a:	80 1f 78    	mov.w     w0, [w15++]
    376c:	87 01 20    	mov.w     #0x18, w7
    376e:	00 43 eb    	clr.b     w6
    3770:	80 82 eb    	setm.w    w5
    3772:	14 c0 b3    	mov.b     #0x1, w4
    3774:	80 01 eb    	clr.w     w3
    3776:	82 2d 20    	mov.w     #0x2d8, w2
    3778:	a1 2d 20    	mov.w     #0x2da, w1
    377a:	00 96 20    	mov.w     #0x960, w0
    377c:	84 00 07    	rcall     0x3886 <_pin_init>
    377e:	8f 87 e9    	dec2.w    w15, w15

00003780 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3780:	60 6d 20    	mov.w     #0x6d6, w0
    3782:	80 1f 78    	mov.w     w0, [w15++]
    3784:	77 01 20    	mov.w     #0x17, w7
    3786:	86 c0 b3    	mov.b     #0x8, w6
    3788:	80 82 eb    	setm.w    w5
    378a:	24 c0 b3    	mov.b     #0x2, w4
    378c:	80 01 eb    	clr.w     w3
    378e:	82 2d 20    	mov.w     #0x2d8, w2
    3790:	a1 2d 20    	mov.w     #0x2da, w1
    3792:	60 97 20    	mov.w     #0x976, w0
    3794:	78 00 07    	rcall     0x3886 <_pin_init>
    3796:	8f 87 e9    	dec2.w    w15, w15

00003798 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3798:	60 6d 20    	mov.w     #0x6d6, w0
    379a:	80 1f 78    	mov.w     w0, [w15++]
    379c:	67 01 20    	mov.w     #0x16, w7
    379e:	00 43 eb    	clr.b     w6
    37a0:	80 82 eb    	setm.w    w5
    37a2:	34 c0 b3    	mov.b     #0x3, w4
    37a4:	80 01 eb    	clr.w     w3
    37a6:	82 2d 20    	mov.w     #0x2d8, w2
    37a8:	a1 2d 20    	mov.w     #0x2da, w1
    37aa:	c0 98 20    	mov.w     #0x98c, w0
    37ac:	6c 00 07    	rcall     0x3886 <_pin_init>
    37ae:	8f 87 e9    	dec2.w    w15, w15

000037b0 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    37b0:	00 6c 20    	mov.w     #0x6c0, w0
    37b2:	80 1f 78    	mov.w     w0, [w15++]
    37b4:	80 03 eb    	clr.w     w7
    37b6:	00 43 eb    	clr.b     w6
    37b8:	80 02 eb    	clr.w     w5
    37ba:	00 42 eb    	clr.b     w4
    37bc:	23 4e 20    	mov.w     #0x4e2, w3
    37be:	82 2c 20    	mov.w     #0x2c8, w2
    37c0:	a1 2c 20    	mov.w     #0x2ca, w1
    37c2:	00 a1 20    	mov.w     #0xa10, w0
    37c4:	60 00 07    	rcall     0x3886 <_pin_init>
    37c6:	8f 87 e9    	dec2.w    w15, w15

000037c8 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    37c8:	00 6c 20    	mov.w     #0x6c0, w0
    37ca:	80 1f 78    	mov.w     w0, [w15++]
    37cc:	17 00 20    	mov.w     #0x1, w7
    37ce:	86 c0 b3    	mov.b     #0x8, w6
    37d0:	15 00 20    	mov.w     #0x1, w5
    37d2:	14 c0 b3    	mov.b     #0x1, w4
    37d4:	23 4e 20    	mov.w     #0x4e2, w3
    37d6:	82 2c 20    	mov.w     #0x2c8, w2
    37d8:	a1 2c 20    	mov.w     #0x2ca, w1
    37da:	a0 9f 20    	mov.w     #0x9fa, w0
    37dc:	54 00 07    	rcall     0x3886 <_pin_init>
    37de:	8f 87 e9    	dec2.w    w15, w15

000037e0 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    37e0:	c0 6c 20    	mov.w     #0x6cc, w0
    37e2:	80 1f 78    	mov.w     w0, [w15++]
    37e4:	d7 00 20    	mov.w     #0xd, w7
    37e6:	86 c0 b3    	mov.b     #0x8, w6
    37e8:	25 00 20    	mov.w     #0x2, w5
    37ea:	24 c0 b3    	mov.b     #0x2, w4
    37ec:	23 4e 20    	mov.w     #0x4e2, w3
    37ee:	82 2c 20    	mov.w     #0x2c8, w2
    37f0:	a1 2c 20    	mov.w     #0x2ca, w1
    37f2:	40 9e 20    	mov.w     #0x9e4, w0
    37f4:	48 00 07    	rcall     0x3886 <_pin_init>
    37f6:	8f 87 e9    	dec2.w    w15, w15

000037f8 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    37f8:	00 00 eb    	clr.w     w0
    37fa:	80 1f 78    	mov.w     w0, [w15++]
    37fc:	80 83 eb    	setm.w    w7
    37fe:	00 43 eb    	clr.b     w6
    3800:	35 00 20    	mov.w     #0x3, w5
    3802:	34 c0 b3    	mov.b     #0x3, w4
    3804:	23 4e 20    	mov.w     #0x4e2, w3
    3806:	82 2c 20    	mov.w     #0x2c8, w2
    3808:	a1 2c 20    	mov.w     #0x2ca, w1
    380a:	e0 9c 20    	mov.w     #0x9ce, w0
    380c:	3c 00 07    	rcall     0x3886 <_pin_init>
    380e:	8f 87 e9    	dec2.w    w15, w15

00003810 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3810:	c0 6d 20    	mov.w     #0x6dc, w0
    3812:	80 1f 78    	mov.w     w0, [w15++]
    3814:	c7 01 20    	mov.w     #0x1c, w7
    3816:	00 43 eb    	clr.b     w6
    3818:	45 00 20    	mov.w     #0x4, w5
    381a:	44 c0 b3    	mov.b     #0x4, w4
    381c:	23 4e 20    	mov.w     #0x4e2, w3
    381e:	82 2c 20    	mov.w     #0x2c8, w2
    3820:	a1 2c 20    	mov.w     #0x2ca, w1
    3822:	80 9b 20    	mov.w     #0x9b8, w0
    3824:	30 00 07    	rcall     0x3886 <_pin_init>
    3826:	8f 87 e9    	dec2.w    w15, w15

00003828 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3828:	20 6d 20    	mov.w     #0x6d2, w0
    382a:	80 1f 78    	mov.w     w0, [w15++]
    382c:	27 01 20    	mov.w     #0x12, w7
    382e:	00 43 eb    	clr.b     w6
    3830:	55 00 20    	mov.w     #0x5, w5
    3832:	54 c0 b3    	mov.b     #0x5, w4
    3834:	23 4e 20    	mov.w     #0x4e2, w3
    3836:	82 2c 20    	mov.w     #0x2c8, w2
    3838:	a1 2c 20    	mov.w     #0x2ca, w1
    383a:	20 9a 20    	mov.w     #0x9a2, w0
    383c:	24 00 07    	rcall     0x3886 <_pin_init>
    383e:	8f 87 e9    	dec2.w    w15, w15

00003840 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    3840:	00 00 eb    	clr.w     w0
    3842:	00 0f 78    	mov.w     w0, [w14]
    3844:	07 00 37    	bra       0x3854 <.L8>

00003846 <.L9>:
        pin_digitalIn(&D[i]);
    3846:	1e 00 78    	mov.w     [w14], w0
    3848:	76 00 b9    	mul.su    w0, #0x16, w0
    384a:	80 00 78    	mov.w     w0, w1
    384c:	e0 86 20    	mov.w     #0x86e, w0
    384e:	00 80 40    	add.w     w1, w0, w0
    3850:	46 00 07    	rcall     0x38de <_pin_digitalIn>

00003852 <.LSM37>:
    3852:	1e 0f e8    	inc.w     [w14], [w14]

00003854 <.L8>:
    3854:	1e 00 78    	mov.w     [w14], w0
    3856:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    3858:	f6 ff 36    	bra       LEU, 0x3846 <.L9>

0000385a <.LSM38>:
    for (i = 0; i<6; i++)
    385a:	00 00 eb    	clr.w     w0
    385c:	00 0f 78    	mov.w     w0, [w14]
    385e:	07 00 37    	bra       0x386e <.L10>

00003860 <.L11>:
        pin_analogIn(&A[i]);
    3860:	1e 00 78    	mov.w     [w14], w0
    3862:	76 00 b9    	mul.su    w0, #0x16, w0
    3864:	80 00 78    	mov.w     w0, w1
    3866:	20 9a 20    	mov.w     #0x9a2, w0
    3868:	00 80 40    	add.w     w1, w0, w0
    386a:	95 00 07    	rcall     0x3996 <_pin_analogIn>

0000386c <.LSM40>:
    386c:	1e 0f e8    	inc.w     [w14], [w14]

0000386e <.L10>:
    386e:	1e 00 78    	mov.w     [w14], w0
    3870:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3872:	f6 ff 36    	bra       LEU, 0x3860 <.L11>

00003874 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x00E0; 
    3874:	00 0e 20    	mov.w     #0xe0, w0
    3876:	00 19 88    	mov.w     w0, 0x320

00003878 <.LSM42>:
    AD1CON2 = 0;
    3878:	22 23 ef    	clr.w     0x322

0000387a <.LSM43>:
    AD1CON3 = 0x0C40;
    387a:	00 c4 20    	mov.w     #0xc40, w0
    387c:	20 19 88    	mov.w     w0, 0x324

0000387e <.LSM44>:
    AD1CHS = 0;
    387e:	28 23 ef    	clr.w     0x328

00003880 <.LSM45>:
    AD1CON1bits.ADON = 1;
    3880:	21 e3 a8    	bset.b    0x321, #0x7

00003882 <.LSM46>:
}
    3882:	00 80 fa    	ulnk      
    3884:	00 00 06    	return    

00003886 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    3886:	10 00 fa    	lnk       #0x10
    3888:	00 0f 78    	mov.w     w0, [w14]
    388a:	11 07 98    	mov.w     w1, [w14+2]
    388c:	22 07 98    	mov.w     w2, [w14+4]
    388e:	33 07 98    	mov.w     w3, [w14+6]
    3890:	04 4f 98    	mov.b     w4, [w14+8]
    3892:	55 07 98    	mov.w     w5, [w14+10]
    3894:	46 4f 98    	mov.b     w6, [w14+12]
    3896:	77 07 98    	mov.w     w7, [w14+14]

00003898 <.LSM48>:
    self->port = port;
    3898:	1e 00 78    	mov.w     [w14], w0
    389a:	9e 00 90    	mov.w     [w14+2], w1
    389c:	01 08 78    	mov.w     w1, [w0]

0000389e <.LSM49>:
    self->tris = tris;
    389e:	1e 00 78    	mov.w     [w14], w0
    38a0:	ae 00 90    	mov.w     [w14+4], w1
    38a2:	11 00 98    	mov.w     w1, [w0+2]

000038a4 <.LSM50>:
    self->ans = ans;
    38a4:	1e 00 78    	mov.w     [w14], w0
    38a6:	be 00 90    	mov.w     [w14+6], w1
    38a8:	21 00 98    	mov.w     w1, [w0+4]

000038aa <.LSM51>:
    self->bit = bit;
    38aa:	1e 00 78    	mov.w     [w14], w0
    38ac:	8e 48 90    	mov.b     [w14+8], w1
    38ae:	61 40 98    	mov.b     w1, [w0+6]

000038b0 <.LSM52>:
    self->annum = annum;
    38b0:	1e 00 78    	mov.w     [w14], w0
    38b2:	de 00 90    	mov.w     [w14+10], w1
    38b4:	41 00 98    	mov.w     w1, [w0+8]

000038b6 <.LSM53>:
    self->rpshift = rpshift;
    38b6:	1e 00 78    	mov.w     [w14], w0
    38b8:	ce 48 90    	mov.b     [w14+12], w1
    38ba:	21 48 98    	mov.b     w1, [w0+10]

000038bc <.LSM54>:
    self->rpnum = rpnum;
    38bc:	fe 00 90    	mov.w     [w14+14], w1
    38be:	1e 00 78    	mov.w     [w14], w0
    38c0:	61 00 98    	mov.w     w1, [w0+12]

000038c2 <.LSM55>:
    self->rpor = rpor;
    38c2:	1e 00 78    	mov.w     [w14], w0
    38c4:	ce b8 97    	mov.w     [w14-8], w1
    38c6:	71 00 98    	mov.w     w1, [w0+14]

000038c8 <.LSM56>:
    self->owner = NULL;
    38c8:	1e 00 78    	mov.w     [w14], w0
    38ca:	80 00 eb    	clr.w     w1
    38cc:	01 08 98    	mov.w     w1, [w0+16]

000038ce <.LSM57>:
    self->write = NULL;
    38ce:	1e 00 78    	mov.w     [w14], w0
    38d0:	80 00 eb    	clr.w     w1
    38d2:	11 08 98    	mov.w     w1, [w0+18]

000038d4 <.LSM58>:
    self->read = NULL;
    38d4:	1e 00 78    	mov.w     [w14], w0
    38d6:	80 00 eb    	clr.w     w1
    38d8:	21 08 98    	mov.w     w1, [w0+20]

000038da <.LSM59>:
}
    38da:	00 80 fa    	ulnk      
    38dc:	00 00 06    	return    

000038de <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    38de:	02 00 fa    	lnk       #0x2
    38e0:	00 0f 78    	mov.w     w0, [w14]

000038e2 <.LSM61>:
    if (self->ans)
    38e2:	1e 00 78    	mov.w     [w14], w0
    38e4:	20 00 90    	mov.w     [w0+4], w0
    38e6:	00 00 e0    	cp0.w     w0
    38e8:	0d 00 32    	bra       Z, 0x3904 <.L14>

000038ea <.LSM62>:
        bitclear(self->ans, self->bit);
    38ea:	1e 00 78    	mov.w     [w14], w0
    38ec:	20 00 90    	mov.w     [w0+4], w0
    38ee:	9e 00 78    	mov.w     [w14], w1
    38f0:	a1 00 90    	mov.w     [w1+4], w1
    38f2:	11 01 78    	mov.w     [w1], w2
    38f4:	9e 00 78    	mov.w     [w14], w1
    38f6:	e1 40 90    	mov.b     [w1+6], w1
    38f8:	81 80 fb    	ze        w1, w1
    38fa:	13 00 20    	mov.w     #0x1, w3
    38fc:	81 18 dd    	sl.w      w3, w1, w1
    38fe:	81 80 ea    	com.w     w1, w1
    3900:	81 00 61    	and.w     w2, w1, w1
    3902:	01 08 78    	mov.w     w1, [w0]

00003904 <.L14>:
    bitset(self->tris, self->bit);
    3904:	1e 00 78    	mov.w     [w14], w0
    3906:	10 00 90    	mov.w     [w0+2], w0
    3908:	9e 00 78    	mov.w     [w14], w1
    390a:	91 00 90    	mov.w     [w1+2], w1
    390c:	11 01 78    	mov.w     [w1], w2
    390e:	9e 00 78    	mov.w     [w14], w1
    3910:	e1 40 90    	mov.b     [w1+6], w1
    3912:	81 80 fb    	ze        w1, w1
    3914:	13 00 20    	mov.w     #0x1, w3
    3916:	81 18 dd    	sl.w      w3, w1, w1
    3918:	82 80 70    	ior.w     w1, w2, w1
    391a:	01 08 78    	mov.w     w1, [w0]

0000391c <.LSM64>:
    self->write = NULL;
    391c:	1e 00 78    	mov.w     [w14], w0
    391e:	80 00 eb    	clr.w     w1
    3920:	11 08 98    	mov.w     w1, [w0+18]

00003922 <.LSM65>:
    self->read = __digitalRead;    
    3922:	1e 00 78    	mov.w     [w14], w0
    3924:	01 62 23    	mov.w     #0x3620, w1
    3926:	21 08 98    	mov.w     w1, [w0+20]

00003928 <.LSM66>:
}
    3928:	00 80 fa    	ulnk      
    392a:	00 00 06    	return    

0000392c <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    392c:	02 00 fa    	lnk       #0x2
    392e:	00 0f 78    	mov.w     w0, [w14]

00003930 <.LSM68>:
    if (self->ans)
    3930:	1e 00 78    	mov.w     [w14], w0
    3932:	20 00 90    	mov.w     [w0+4], w0
    3934:	00 00 e0    	cp0.w     w0
    3936:	0d 00 32    	bra       Z, 0x3952 <.L16>

00003938 <.LSM69>:
        bitclear(self->ans, self->bit);
    3938:	1e 00 78    	mov.w     [w14], w0
    393a:	20 00 90    	mov.w     [w0+4], w0
    393c:	9e 00 78    	mov.w     [w14], w1
    393e:	a1 00 90    	mov.w     [w1+4], w1
    3940:	11 01 78    	mov.w     [w1], w2
    3942:	9e 00 78    	mov.w     [w14], w1
    3944:	e1 40 90    	mov.b     [w1+6], w1
    3946:	81 80 fb    	ze        w1, w1
    3948:	13 00 20    	mov.w     #0x1, w3
    394a:	81 18 dd    	sl.w      w3, w1, w1
    394c:	81 80 ea    	com.w     w1, w1
    394e:	81 00 61    	and.w     w2, w1, w1
    3950:	01 08 78    	mov.w     w1, [w0]

00003952 <.L16>:
    bitclear(self->port, self->bit);
    3952:	1e 00 78    	mov.w     [w14], w0
    3954:	10 00 78    	mov.w     [w0], w0
    3956:	9e 00 78    	mov.w     [w14], w1
    3958:	91 00 78    	mov.w     [w1], w1
    395a:	11 01 78    	mov.w     [w1], w2
    395c:	9e 00 78    	mov.w     [w14], w1
    395e:	e1 40 90    	mov.b     [w1+6], w1
    3960:	81 80 fb    	ze        w1, w1
    3962:	13 00 20    	mov.w     #0x1, w3
    3964:	81 18 dd    	sl.w      w3, w1, w1
    3966:	81 80 ea    	com.w     w1, w1
    3968:	81 00 61    	and.w     w2, w1, w1
    396a:	01 08 78    	mov.w     w1, [w0]

0000396c <.LSM71>:
    bitclear(self->tris, self->bit);
    396c:	1e 00 78    	mov.w     [w14], w0
    396e:	10 00 90    	mov.w     [w0+2], w0
    3970:	9e 00 78    	mov.w     [w14], w1
    3972:	91 00 90    	mov.w     [w1+2], w1
    3974:	11 01 78    	mov.w     [w1], w2
    3976:	9e 00 78    	mov.w     [w14], w1
    3978:	e1 40 90    	mov.b     [w1+6], w1
    397a:	81 80 fb    	ze        w1, w1
    397c:	13 00 20    	mov.w     #0x1, w3
    397e:	81 18 dd    	sl.w      w3, w1, w1
    3980:	81 80 ea    	com.w     w1, w1
    3982:	81 00 61    	and.w     w2, w1, w1
    3984:	01 08 78    	mov.w     w1, [w0]

00003986 <.LSM72>:
    self->write = __digitalWrite;
    3986:	1e 00 78    	mov.w     [w14], w0
    3988:	c1 5d 23    	mov.w     #0x35dc, w1
    398a:	11 08 98    	mov.w     w1, [w0+18]

0000398c <.LSM73>:
    self->read = __digitalRead;
    398c:	1e 00 78    	mov.w     [w14], w0
    398e:	01 62 23    	mov.w     #0x3620, w1
    3990:	21 08 98    	mov.w     w1, [w0+20]

00003992 <.LSM74>:
}
    3992:	00 80 fa    	ulnk      
    3994:	00 00 06    	return    

00003996 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    3996:	02 00 fa    	lnk       #0x2
    3998:	00 0f 78    	mov.w     w0, [w14]

0000399a <.LSM76>:
    if (!(self->ans))
    399a:	1e 00 78    	mov.w     [w14], w0
    399c:	20 00 90    	mov.w     [w0+4], w0
    399e:	00 00 e0    	cp0.w     w0
    39a0:	1f 00 32    	bra       Z, 0x39e0 <.L20>

000039a2 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    39a2:	1e 00 78    	mov.w     [w14], w0
    39a4:	10 00 90    	mov.w     [w0+2], w0
    39a6:	9e 00 78    	mov.w     [w14], w1
    39a8:	91 00 90    	mov.w     [w1+2], w1
    39aa:	11 01 78    	mov.w     [w1], w2
    39ac:	9e 00 78    	mov.w     [w14], w1
    39ae:	e1 40 90    	mov.b     [w1+6], w1
    39b0:	81 80 fb    	ze        w1, w1
    39b2:	13 00 20    	mov.w     #0x1, w3
    39b4:	81 18 dd    	sl.w      w3, w1, w1
    39b6:	82 80 70    	ior.w     w1, w2, w1
    39b8:	01 08 78    	mov.w     w1, [w0]

000039ba <.LSM78>:
    bitset(self->ans, self->bit);
    39ba:	1e 00 78    	mov.w     [w14], w0
    39bc:	20 00 90    	mov.w     [w0+4], w0
    39be:	9e 00 78    	mov.w     [w14], w1
    39c0:	a1 00 90    	mov.w     [w1+4], w1
    39c2:	11 01 78    	mov.w     [w1], w2
    39c4:	9e 00 78    	mov.w     [w14], w1
    39c6:	e1 40 90    	mov.b     [w1+6], w1
    39c8:	81 80 fb    	ze        w1, w1
    39ca:	13 00 20    	mov.w     #0x1, w3
    39cc:	81 18 dd    	sl.w      w3, w1, w1
    39ce:	82 80 70    	ior.w     w1, w2, w1
    39d0:	01 08 78    	mov.w     w1, [w0]

000039d2 <.LSM79>:
    self->write = NULL;
    39d2:	1e 00 78    	mov.w     [w14], w0
    39d4:	80 00 eb    	clr.w     w1
    39d6:	11 08 98    	mov.w     w1, [w0+18]

000039d8 <.LSM80>:
    self->read = __analogRead;
    39d8:	1e 00 78    	mov.w     [w14], w0
    39da:	21 64 23    	mov.w     #0x3642, w1
    39dc:	21 08 98    	mov.w     w1, [w0+20]
    39de:	01 00 37    	bra       0x39e2 <.L17>

000039e0 <.L20>:
    39e0:	00 00 00    	nop       

000039e2 <.L17>:
}
    39e2:	00 80 fa    	ulnk      
    39e4:	00 00 06    	return    

000039e6 <_pin_set>:

void pin_set(_PIN *self) {
    39e6:	02 00 fa    	lnk       #0x2
    39e8:	00 0f 78    	mov.w     w0, [w14]

000039ea <.LSM84>:
    if (self->write==__digitalWrite)
    39ea:	1e 00 78    	mov.w     [w14], w0
    39ec:	90 08 90    	mov.w     [w0+18], w1
    39ee:	c0 5d 23    	mov.w     #0x35dc, w0
    39f0:	80 8f 50    	sub.w     w1, w0, [w15]
    39f2:	0c 00 3a    	bra       NZ, 0x3a0c <.L21>

000039f4 <.LSM85>:
        bitset(self->port, self->bit);
    39f4:	1e 00 78    	mov.w     [w14], w0
    39f6:	10 00 78    	mov.w     [w0], w0
    39f8:	9e 00 78    	mov.w     [w14], w1
    39fa:	91 00 78    	mov.w     [w1], w1
    39fc:	11 01 78    	mov.w     [w1], w2
    39fe:	9e 00 78    	mov.w     [w14], w1
    3a00:	e1 40 90    	mov.b     [w1+6], w1
    3a02:	81 80 fb    	ze        w1, w1
    3a04:	13 00 20    	mov.w     #0x1, w3
    3a06:	81 18 dd    	sl.w      w3, w1, w1
    3a08:	82 80 70    	ior.w     w1, w2, w1
    3a0a:	01 08 78    	mov.w     w1, [w0]

00003a0c <.L21>:
}
    3a0c:	00 80 fa    	ulnk      
    3a0e:	00 00 06    	return    

00003a10 <_pin_clear>:

void pin_clear(_PIN *self) {
    3a10:	02 00 fa    	lnk       #0x2
    3a12:	00 0f 78    	mov.w     w0, [w14]

00003a14 <.LSM88>:
    if (self->write==__digitalWrite)
    3a14:	1e 00 78    	mov.w     [w14], w0
    3a16:	90 08 90    	mov.w     [w0+18], w1
    3a18:	c0 5d 23    	mov.w     #0x35dc, w0
    3a1a:	80 8f 50    	sub.w     w1, w0, [w15]
    3a1c:	0d 00 3a    	bra       NZ, 0x3a38 <.L23>

00003a1e <.LSM89>:
        bitclear(self->port, self->bit);
    3a1e:	1e 00 78    	mov.w     [w14], w0
    3a20:	10 00 78    	mov.w     [w0], w0
    3a22:	9e 00 78    	mov.w     [w14], w1
    3a24:	91 00 78    	mov.w     [w1], w1
    3a26:	11 01 78    	mov.w     [w1], w2
    3a28:	9e 00 78    	mov.w     [w14], w1
    3a2a:	e1 40 90    	mov.b     [w1+6], w1
    3a2c:	81 80 fb    	ze        w1, w1
    3a2e:	13 00 20    	mov.w     #0x1, w3
    3a30:	81 18 dd    	sl.w      w3, w1, w1
    3a32:	81 80 ea    	com.w     w1, w1
    3a34:	81 00 61    	and.w     w2, w1, w1
    3a36:	01 08 78    	mov.w     w1, [w0]

00003a38 <.L23>:
}
    3a38:	00 80 fa    	ulnk      
    3a3a:	00 00 06    	return    

00003a3c <_pin_toggle>:

void pin_toggle(_PIN *self) {
    3a3c:	02 00 fa    	lnk       #0x2
    3a3e:	00 0f 78    	mov.w     w0, [w14]

00003a40 <.LSM92>:
    if (self->write==__digitalWrite)
    3a40:	1e 00 78    	mov.w     [w14], w0
    3a42:	90 08 90    	mov.w     [w0+18], w1
    3a44:	c0 5d 23    	mov.w     #0x35dc, w0
    3a46:	80 8f 50    	sub.w     w1, w0, [w15]
    3a48:	0c 00 3a    	bra       NZ, 0x3a62 <.L25>

00003a4a <.LSM93>:
        bitflip(self->port, self->bit);
    3a4a:	1e 00 78    	mov.w     [w14], w0
    3a4c:	10 00 78    	mov.w     [w0], w0
    3a4e:	9e 00 78    	mov.w     [w14], w1
    3a50:	91 00 78    	mov.w     [w1], w1
    3a52:	11 01 78    	mov.w     [w1], w2
    3a54:	9e 00 78    	mov.w     [w14], w1
    3a56:	e1 40 90    	mov.b     [w1+6], w1
    3a58:	81 80 fb    	ze        w1, w1
    3a5a:	13 00 20    	mov.w     #0x1, w3
    3a5c:	81 18 dd    	sl.w      w3, w1, w1
    3a5e:	81 00 69    	xor.w     w2, w1, w1
    3a60:	01 08 78    	mov.w     w1, [w0]

00003a62 <.L25>:
}
    3a62:	00 80 fa    	ulnk      
    3a64:	00 00 06    	return    

00003a66 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3a66:	04 00 fa    	lnk       #0x4
    3a68:	00 0f 78    	mov.w     w0, [w14]
    3a6a:	11 07 98    	mov.w     w1, [w14+2]

00003a6c <.LSM96>:
    if (self->write)
    3a6c:	1e 00 78    	mov.w     [w14], w0
    3a6e:	10 08 90    	mov.w     [w0+18], w0
    3a70:	00 00 e0    	cp0.w     w0
    3a72:	05 00 32    	bra       Z, 0x3a7e <.L27>

00003a74 <.LSM97>:
        self->write(self, val);
    3a74:	1e 00 78    	mov.w     [w14], w0
    3a76:	10 09 90    	mov.w     [w0+18], w2
    3a78:	9e 00 90    	mov.w     [w14+2], w1
    3a7a:	1e 00 78    	mov.w     [w14], w0
    3a7c:	02 00 01    	call      w2

00003a7e <.L27>:
}
    3a7e:	00 80 fa    	ulnk      
    3a80:	00 00 06    	return    

00003a82 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3a82:	02 00 fa    	lnk       #0x2
    3a84:	00 0f 78    	mov.w     w0, [w14]

00003a86 <.LSM100>:
    if (self->read)
    3a86:	1e 00 78    	mov.w     [w14], w0
    3a88:	20 08 90    	mov.w     [w0+20], w0
    3a8a:	00 00 e0    	cp0.w     w0
    3a8c:	05 00 32    	bra       Z, 0x3a98 <.L30>

00003a8e <.LSM101>:
        return self->read(self);
    3a8e:	1e 00 78    	mov.w     [w14], w0
    3a90:	a0 08 90    	mov.w     [w0+20], w1
    3a92:	1e 00 78    	mov.w     [w14], w0
    3a94:	01 00 01    	call      w1
    3a96:	01 00 37    	bra       0x3a9a <.L31>

00003a98 <.L30>:
    else
        return 0xFFFF;
    3a98:	00 80 eb    	setm.w    w0

00003a9a <.L31>:
}
    3a9a:	00 80 fa    	ulnk      
    3a9c:	00 00 06    	return    

00003a9e <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    3a9e:	08 00 fa    	lnk       #0x8
    3aa0:	30 07 98    	mov.w     w0, [w14+6]

00003aa2 <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3aa2:	3e 00 90    	mov.w     [w14+6], w0
    3aa4:	00 08 90    	mov.w     [w0+16], w0
    3aa6:	00 0f 78    	mov.w     w0, [w14]

00003aa8 <.LSM2>:
    temp.w[0] = 0;
    3aa8:	00 00 eb    	clr.w     w0
    3aaa:	10 07 98    	mov.w     w0, [w14+2]

00003aac <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    3aac:	1e 00 78    	mov.w     [w14], w0
    3aae:	30 00 90    	mov.w     [w0+6], w0
    3ab0:	10 00 78    	mov.w     [w0], w0
    3ab2:	20 07 98    	mov.w     w0, [w14+4]

00003ab4 <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    3ab4:	1e 02 90    	mov.w     [w14+2], w4
    3ab6:	ae 02 90    	mov.w     [w14+4], w5
    3ab8:	1e 00 78    	mov.w     [w14], w0
    3aba:	20 00 90    	mov.w     [w0+4], w0
    3abc:	10 00 78    	mov.w     [w0], w0
    3abe:	80 00 eb    	clr.w     w1
    3ac0:	00 01 be    	mov.d     w0, w2
    3ac2:	04 00 be    	mov.d     w4, w0
    3ac4:	f0 ec 07    	rcall     0x14a6 <___udivsi3>
    3ac6:	00 00 78    	mov.w     w0, w0

00003ac8 <.LSM5>:
}
    3ac8:	00 80 fa    	ulnk      
    3aca:	00 00 06    	return    

00003acc <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    3acc:	0a 00 fa    	lnk       #0xa
    3ace:	30 07 98    	mov.w     w0, [w14+6]
    3ad0:	41 07 98    	mov.w     w1, [w14+8]

00003ad2 <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3ad2:	3e 00 90    	mov.w     [w14+6], w0
    3ad4:	00 08 90    	mov.w     [w0+16], w0
    3ad6:	00 0f 78    	mov.w     w0, [w14]

00003ad8 <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    3ad8:	4e 00 90    	mov.w     [w14+8], w0
    3ada:	61 01 b8    	mul.uu    w0, #0x1, w2
    3adc:	1e 00 78    	mov.w     [w14], w0
    3ade:	20 00 90    	mov.w     [w0+4], w0
    3ae0:	10 00 78    	mov.w     [w0], w0
    3ae2:	80 00 eb    	clr.w     w1
    3ae4:	00 9a b9    	mul.ss    w3, w0, w4
    3ae6:	04 02 78    	mov.w     w4, w4
    3ae8:	02 8b b9    	mul.ss    w1, w2, w6
    3aea:	86 02 78    	mov.w     w6, w5
    3aec:	05 02 42    	add.w     w4, w5, w4
    3aee:	00 10 b8    	mul.uu    w2, w0, w0
    3af0:	01 02 42    	add.w     w4, w1, w4
    3af2:	84 00 78    	mov.w     w4, w1
    3af4:	10 07 98    	mov.w     w0, [w14+2]
    3af6:	21 07 98    	mov.w     w1, [w14+4]

00003af8 <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    3af8:	1e 00 78    	mov.w     [w14], w0
    3afa:	30 00 90    	mov.w     [w0+6], w0
    3afc:	ae 00 90    	mov.w     [w14+4], w1
    3afe:	01 08 78    	mov.w     w1, [w0]

00003b00 <.LSM10>:
}
    3b00:	00 80 fa    	ulnk      
    3b02:	00 00 06    	return    

00003b04 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    3b04:	08 00 fa    	lnk       #0x8
    3b06:	30 07 98    	mov.w     w0, [w14+6]

00003b08 <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3b08:	3e 00 90    	mov.w     [w14+6], w0
    3b0a:	00 08 90    	mov.w     [w0+16], w0
    3b0c:	00 0f 78    	mov.w     w0, [w14]

00003b0e <.LSM13>:
    temp.w[0] = 0;
    3b0e:	00 00 eb    	clr.w     w0
    3b10:	10 07 98    	mov.w     w0, [w14+2]

00003b12 <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    3b12:	1e 00 78    	mov.w     [w14], w0
    3b14:	20 00 90    	mov.w     [w0+4], w0
    3b16:	90 00 78    	mov.w     [w0], w1
    3b18:	1e 00 78    	mov.w     [w14], w0
    3b1a:	60 00 90    	mov.w     [w0+12], w0
    3b1c:	00 80 50    	sub.w     w1, w0, w0
    3b1e:	20 07 98    	mov.w     w0, [w14+4]

00003b20 <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    3b20:	1e 02 90    	mov.w     [w14+2], w4
    3b22:	ae 02 90    	mov.w     [w14+4], w5
    3b24:	1e 00 78    	mov.w     [w14], w0
    3b26:	70 00 90    	mov.w     [w0+14], w0
    3b28:	80 00 eb    	clr.w     w1
    3b2a:	00 01 be    	mov.d     w0, w2
    3b2c:	04 00 be    	mov.d     w4, w0
    3b2e:	bb ec 07    	rcall     0x14a6 <___udivsi3>
    3b30:	00 00 78    	mov.w     w0, w0

00003b32 <.LSM16>:
}
    3b32:	00 80 fa    	ulnk      
    3b34:	00 00 06    	return    

00003b36 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    3b36:	0a 00 fa    	lnk       #0xa
    3b38:	30 07 98    	mov.w     w0, [w14+6]
    3b3a:	41 07 98    	mov.w     w1, [w14+8]

00003b3c <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3b3c:	3e 00 90    	mov.w     [w14+6], w0
    3b3e:	00 08 90    	mov.w     [w0+16], w0
    3b40:	00 0f 78    	mov.w     w0, [w14]

00003b42 <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    3b42:	4e 00 90    	mov.w     [w14+8], w0
    3b44:	61 01 b8    	mul.uu    w0, #0x1, w2
    3b46:	1e 00 78    	mov.w     [w14], w0
    3b48:	70 00 90    	mov.w     [w0+14], w0
    3b4a:	80 00 eb    	clr.w     w1
    3b4c:	00 9a b9    	mul.ss    w3, w0, w4
    3b4e:	04 02 78    	mov.w     w4, w4
    3b50:	02 8b b9    	mul.ss    w1, w2, w6
    3b52:	86 02 78    	mov.w     w6, w5
    3b54:	05 02 42    	add.w     w4, w5, w4
    3b56:	00 10 b8    	mul.uu    w2, w0, w0
    3b58:	01 02 42    	add.w     w4, w1, w4
    3b5a:	84 00 78    	mov.w     w4, w1
    3b5c:	10 07 98    	mov.w     w0, [w14+2]
    3b5e:	21 07 98    	mov.w     w1, [w14+4]

00003b60 <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    3b60:	1e 00 78    	mov.w     [w14], w0
    3b62:	20 00 90    	mov.w     [w0+4], w0
    3b64:	9e 00 78    	mov.w     [w14], w1
    3b66:	61 01 90    	mov.w     [w1+12], w2
    3b68:	ae 00 90    	mov.w     [w14+4], w1
    3b6a:	81 00 41    	add.w     w2, w1, w1
    3b6c:	01 08 78    	mov.w     w1, [w0]

00003b6e <.LSM21>:
}
    3b6e:	00 80 fa    	ulnk      
    3b70:	00 00 06    	return    

00003b72 <_init_oc>:

void init_oc(void) {
    3b72:	00 00 fa    	lnk       #0x0

00003b74 <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    3b74:	26 01 20    	mov.w     #0x12, w6
    3b76:	85 19 20    	mov.w     #0x198, w5
    3b78:	64 19 20    	mov.w     #0x196, w4
    3b7a:	43 19 20    	mov.w     #0x194, w3
    3b7c:	22 19 20    	mov.w     #0x192, w2
    3b7e:	01 19 20    	mov.w     #0x190, w1
    3b80:	20 b4 20    	mov.w     #0xb42, w0
    3b82:	42 00 07    	rcall     0x3c08 <_oc_init>

00003b84 <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    3b84:	36 01 20    	mov.w     #0x13, w6
    3b86:	25 1a 20    	mov.w     #0x1a2, w5
    3b88:	04 1a 20    	mov.w     #0x1a0, w4
    3b8a:	e3 19 20    	mov.w     #0x19e, w3
    3b8c:	c2 19 20    	mov.w     #0x19c, w2
    3b8e:	a1 19 20    	mov.w     #0x19a, w1
    3b90:	40 b5 20    	mov.w     #0xb54, w0
    3b92:	3a 00 07    	rcall     0x3c08 <_oc_init>

00003b94 <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    3b94:	46 01 20    	mov.w     #0x14, w6
    3b96:	c5 1a 20    	mov.w     #0x1ac, w5
    3b98:	a4 1a 20    	mov.w     #0x1aa, w4
    3b9a:	83 1a 20    	mov.w     #0x1a8, w3
    3b9c:	62 1a 20    	mov.w     #0x1a6, w2
    3b9e:	41 1a 20    	mov.w     #0x1a4, w1
    3ba0:	60 b6 20    	mov.w     #0xb66, w0
    3ba2:	32 00 07    	rcall     0x3c08 <_oc_init>

00003ba4 <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    3ba4:	56 01 20    	mov.w     #0x15, w6
    3ba6:	65 1b 20    	mov.w     #0x1b6, w5
    3ba8:	44 1b 20    	mov.w     #0x1b4, w4
    3baa:	23 1b 20    	mov.w     #0x1b2, w3
    3bac:	02 1b 20    	mov.w     #0x1b0, w2
    3bae:	e1 1a 20    	mov.w     #0x1ae, w1
    3bb0:	80 b7 20    	mov.w     #0xb78, w0
    3bb2:	2a 00 07    	rcall     0x3c08 <_oc_init>

00003bb4 <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    3bb4:	66 01 20    	mov.w     #0x16, w6
    3bb6:	05 1c 20    	mov.w     #0x1c0, w5
    3bb8:	e4 1b 20    	mov.w     #0x1be, w4
    3bba:	c3 1b 20    	mov.w     #0x1bc, w3
    3bbc:	a2 1b 20    	mov.w     #0x1ba, w2
    3bbe:	81 1b 20    	mov.w     #0x1b8, w1
    3bc0:	a0 b8 20    	mov.w     #0xb8a, w0
    3bc2:	22 00 07    	rcall     0x3c08 <_oc_init>

00003bc4 <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    3bc4:	76 01 20    	mov.w     #0x17, w6
    3bc6:	a5 1c 20    	mov.w     #0x1ca, w5
    3bc8:	84 1c 20    	mov.w     #0x1c8, w4
    3bca:	63 1c 20    	mov.w     #0x1c6, w3
    3bcc:	42 1c 20    	mov.w     #0x1c4, w2
    3bce:	21 1c 20    	mov.w     #0x1c2, w1
    3bd0:	c0 b9 20    	mov.w     #0xb9c, w0
    3bd2:	1a 00 07    	rcall     0x3c08 <_oc_init>

00003bd4 <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    3bd4:	86 01 20    	mov.w     #0x18, w6
    3bd6:	45 1d 20    	mov.w     #0x1d4, w5
    3bd8:	24 1d 20    	mov.w     #0x1d2, w4
    3bda:	03 1d 20    	mov.w     #0x1d0, w3
    3bdc:	e2 1c 20    	mov.w     #0x1ce, w2
    3bde:	c1 1c 20    	mov.w     #0x1cc, w1
    3be0:	e0 ba 20    	mov.w     #0xbae, w0
    3be2:	12 00 07    	rcall     0x3c08 <_oc_init>

00003be4 <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    3be4:	96 01 20    	mov.w     #0x19, w6
    3be6:	e5 1d 20    	mov.w     #0x1de, w5
    3be8:	c4 1d 20    	mov.w     #0x1dc, w4
    3bea:	a3 1d 20    	mov.w     #0x1da, w3
    3bec:	82 1d 20    	mov.w     #0x1d8, w2
    3bee:	61 1d 20    	mov.w     #0x1d6, w1
    3bf0:	00 bc 20    	mov.w     #0xbc0, w0
    3bf2:	0a 00 07    	rcall     0x3c08 <_oc_init>

00003bf4 <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    3bf4:	36 02 20    	mov.w     #0x23, w6
    3bf6:	85 1e 20    	mov.w     #0x1e8, w5
    3bf8:	64 1e 20    	mov.w     #0x1e6, w4
    3bfa:	43 1e 20    	mov.w     #0x1e4, w3
    3bfc:	22 1e 20    	mov.w     #0x1e2, w2
    3bfe:	01 1e 20    	mov.w     #0x1e0, w1
    3c00:	20 bd 20    	mov.w     #0xbd2, w0
    3c02:	02 00 07    	rcall     0x3c08 <_oc_init>

00003c04 <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    3c04:	00 80 fa    	ulnk      
    3c06:	00 00 06    	return    

00003c08 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    3c08:	0e 00 fa    	lnk       #0xe
    3c0a:	00 0f 78    	mov.w     w0, [w14]
    3c0c:	11 07 98    	mov.w     w1, [w14+2]
    3c0e:	22 07 98    	mov.w     w2, [w14+4]
    3c10:	33 07 98    	mov.w     w3, [w14+6]
    3c12:	44 07 98    	mov.w     w4, [w14+8]
    3c14:	55 07 98    	mov.w     w5, [w14+10]
    3c16:	66 07 98    	mov.w     w6, [w14+12]

00003c18 <.LSM34>:
    self->OCxCON1 = OCxCON1;
    3c18:	1e 00 78    	mov.w     [w14], w0
    3c1a:	9e 00 90    	mov.w     [w14+2], w1
    3c1c:	01 08 78    	mov.w     w1, [w0]

00003c1e <.LSM35>:
    self->OCxCON2 = OCxCON2;
    3c1e:	1e 00 78    	mov.w     [w14], w0
    3c20:	ae 00 90    	mov.w     [w14+4], w1
    3c22:	11 00 98    	mov.w     w1, [w0+2]

00003c24 <.LSM36>:
    self->OCxRS = OCxRS;
    3c24:	1e 00 78    	mov.w     [w14], w0
    3c26:	be 00 90    	mov.w     [w14+6], w1
    3c28:	21 00 98    	mov.w     w1, [w0+4]

00003c2a <.LSM37>:
    self->OCxR = OCxR;
    3c2a:	1e 00 78    	mov.w     [w14], w0
    3c2c:	ce 00 90    	mov.w     [w14+8], w1
    3c2e:	31 00 98    	mov.w     w1, [w0+6]

00003c30 <.LSM38>:
    self->OCxTMR = OCxTMR;
    3c30:	1e 00 78    	mov.w     [w14], w0
    3c32:	de 00 90    	mov.w     [w14+10], w1
    3c34:	41 00 98    	mov.w     w1, [w0+8]

00003c36 <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    3c36:	1e 00 78    	mov.w     [w14], w0
    3c38:	01 e8 23    	mov.w     #0x3e80, w1
    3c3a:	61 00 98    	mov.w     w1, [w0+12]

00003c3c <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    3c3c:	1e 00 78    	mov.w     [w14], w0
    3c3e:	01 e8 23    	mov.w     #0x3e80, w1
    3c40:	71 00 98    	mov.w     w1, [w0+14]

00003c42 <.LSM41>:
    self->rpnum = rpnum;
    3c42:	1e 00 78    	mov.w     [w14], w0
    3c44:	ee 00 90    	mov.w     [w14+12], w1
    3c46:	51 00 98    	mov.w     w1, [w0+10]

00003c48 <.LSM42>:
    self->pin = NULL;
    3c48:	1e 00 78    	mov.w     [w14], w0
    3c4a:	80 00 eb    	clr.w     w1
    3c4c:	01 08 98    	mov.w     w1, [w0+16]

00003c4e <.LSM43>:
}
    3c4e:	00 80 fa    	ulnk      
    3c50:	00 00 06    	return    

00003c52 <_oc_free>:

void oc_free(_OC *self) {
    3c52:	02 00 fa    	lnk       #0x2
    3c54:	00 0f 78    	mov.w     w0, [w14]

00003c56 <.LSM45>:
    *(self->OCxCON1) = 0;
    3c56:	1e 00 78    	mov.w     [w14], w0
    3c58:	10 00 78    	mov.w     [w0], w0
    3c5a:	80 00 eb    	clr.w     w1
    3c5c:	01 08 78    	mov.w     w1, [w0]

00003c5e <.LSM46>:
    *(self->OCxCON2) = 0;
    3c5e:	1e 00 78    	mov.w     [w14], w0
    3c60:	10 00 90    	mov.w     [w0+2], w0
    3c62:	80 00 eb    	clr.w     w1
    3c64:	01 08 78    	mov.w     w1, [w0]

00003c66 <.LSM47>:
    if (self->pin) {
    3c66:	1e 00 78    	mov.w     [w14], w0
    3c68:	00 08 90    	mov.w     [w0+16], w0
    3c6a:	00 00 e0    	cp0.w     w0
    3c6c:	2f 00 32    	bra       Z, 0x3ccc <.L7>

00003c6e <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3c6e:	11 3a 80    	mov.w     0x742, w1
    3c70:	f0 0b 20    	mov.w     #0xbf, w0
    3c72:	00 81 60    	and.w     w1, w0, w2
    3c74:	60 04 20    	mov.w     #0x46, w0
    3c76:	71 05 20    	mov.w     #0x57, w1
    3c78:	23 74 20    	mov.w     #0x742, w3
    3c7a:	80 49 78    	mov.b     w0, [w3]
    3c7c:	81 49 78    	mov.b     w1, [w3]
    3c7e:	82 49 78    	mov.b     w2, [w3]

00003c80 <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    3c80:	1e 00 78    	mov.w     [w14], w0
    3c82:	00 08 90    	mov.w     [w0+16], w0
    3c84:	70 00 90    	mov.w     [w0+14], w0
    3c86:	9e 00 78    	mov.w     [w14], w1
    3c88:	81 08 90    	mov.w     [w1+16], w1
    3c8a:	f1 00 90    	mov.w     [w1+14], w1
    3c8c:	11 01 78    	mov.w     [w1], w2
    3c8e:	9e 00 78    	mov.w     [w14], w1
    3c90:	81 08 90    	mov.w     [w1+16], w1
    3c92:	a1 48 90    	mov.b     [w1+10], w1
    3c94:	81 80 fb    	ze        w1, w1
    3c96:	f3 03 20    	mov.w     #0x3f, w3
    3c98:	81 18 dd    	sl.w      w3, w1, w1
    3c9a:	81 80 ea    	com.w     w1, w1
    3c9c:	81 00 61    	and.w     w2, w1, w1
    3c9e:	01 08 78    	mov.w     w1, [w0]

00003ca0 <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3ca0:	11 3a 80    	mov.w     0x742, w1
    3ca2:	00 04 20    	mov.w     #0x40, w0
    3ca4:	01 01 70    	ior.w     w0, w1, w2
    3ca6:	60 04 20    	mov.w     #0x46, w0
    3ca8:	71 05 20    	mov.w     #0x57, w1
    3caa:	23 74 20    	mov.w     #0x742, w3
    3cac:	80 49 78    	mov.b     w0, [w3]
    3cae:	81 49 78    	mov.b     w1, [w3]
    3cb0:	82 49 78    	mov.b     w2, [w3]

00003cb2 <.LSM51>:
        self->pin->owner = NULL;
    3cb2:	1e 00 78    	mov.w     [w14], w0
    3cb4:	00 08 90    	mov.w     [w0+16], w0
    3cb6:	80 00 eb    	clr.w     w1
    3cb8:	01 08 98    	mov.w     w1, [w0+16]

00003cba <.LSM52>:
        pin_digitalOut(self->pin);
    3cba:	1e 00 78    	mov.w     [w14], w0
    3cbc:	00 08 90    	mov.w     [w0+16], w0
    3cbe:	36 fe 07    	rcall     0x392c <_pin_digitalOut>

00003cc0 <.LSM53>:
        pin_clear(self->pin);
    3cc0:	1e 00 78    	mov.w     [w14], w0
    3cc2:	00 08 90    	mov.w     [w0+16], w0
    3cc4:	a5 fe 07    	rcall     0x3a10 <_pin_clear>

00003cc6 <.LSM54>:
        self->pin = NULL;
    3cc6:	1e 00 78    	mov.w     [w14], w0
    3cc8:	80 00 eb    	clr.w     w1
    3cca:	01 08 98    	mov.w     w1, [w0+16]

00003ccc <.L7>:
    }
}
    3ccc:	00 80 fa    	ulnk      
    3cce:	00 00 06    	return    

00003cd0 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    3cd0:	10 00 fa    	lnk       #0x10
    3cd2:	88 1f 78    	mov.w     w8, [w15++]
    3cd4:	20 07 98    	mov.w     w0, [w14+4]
    3cd6:	31 07 98    	mov.w     w1, [w14+6]
    3cd8:	42 07 98    	mov.w     w2, [w14+8]
    3cda:	54 07 98    	mov.w     w4, [w14+10]
    3cdc:	65 07 98    	mov.w     w5, [w14+12]
    3cde:	73 07 98    	mov.w     w3, [w14+14]

00003ce0 <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    3ce0:	3e 00 90    	mov.w     [w14+6], w0
    3ce2:	60 00 90    	mov.w     [w0+12], w0
    3ce4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3ce6:	9c 00 32    	bra       Z, 0x3e20 <.L18>

00003ce8 <.LSM58>:
        return;
    if (pin->owner==NULL) {
    3ce8:	3e 00 90    	mov.w     [w14+6], w0
    3cea:	00 08 90    	mov.w     [w0+16], w0
    3cec:	00 00 e0    	cp0.w     w0
    3cee:	33 00 3a    	bra       NZ, 0x3d56 <.L12>

00003cf0 <.LSM59>:
        self->pin = pin;
    3cf0:	2e 00 90    	mov.w     [w14+4], w0
    3cf2:	be 00 90    	mov.w     [w14+6], w1
    3cf4:	01 08 98    	mov.w     w1, [w0+16]

00003cf6 <.LSM60>:
        pin->owner = (void *)self;
    3cf6:	3e 00 90    	mov.w     [w14+6], w0
    3cf8:	ae 00 90    	mov.w     [w14+4], w1
    3cfa:	01 08 98    	mov.w     w1, [w0+16]

00003cfc <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3cfc:	11 3a 80    	mov.w     0x742, w1
    3cfe:	f0 0b 20    	mov.w     #0xbf, w0
    3d00:	00 81 60    	and.w     w1, w0, w2
    3d02:	60 04 20    	mov.w     #0x46, w0
    3d04:	71 05 20    	mov.w     #0x57, w1
    3d06:	23 74 20    	mov.w     #0x742, w3
    3d08:	80 49 78    	mov.b     w0, [w3]
    3d0a:	81 49 78    	mov.b     w1, [w3]
    3d0c:	82 49 78    	mov.b     w2, [w3]

00003d0e <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    3d0e:	3e 00 90    	mov.w     [w14+6], w0
    3d10:	70 00 90    	mov.w     [w0+14], w0
    3d12:	be 00 90    	mov.w     [w14+6], w1
    3d14:	f1 00 90    	mov.w     [w1+14], w1
    3d16:	11 01 78    	mov.w     [w1], w2
    3d18:	be 00 90    	mov.w     [w14+6], w1
    3d1a:	a1 48 90    	mov.b     [w1+10], w1
    3d1c:	81 80 fb    	ze        w1, w1
    3d1e:	f3 03 20    	mov.w     #0x3f, w3
    3d20:	81 18 dd    	sl.w      w3, w1, w1
    3d22:	81 80 ea    	com.w     w1, w1
    3d24:	81 00 61    	and.w     w2, w1, w1
    3d26:	01 08 78    	mov.w     w1, [w0]

00003d28 <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3d28:	3e 00 90    	mov.w     [w14+6], w0
    3d2a:	70 00 90    	mov.w     [w0+14], w0
    3d2c:	be 00 90    	mov.w     [w14+6], w1
    3d2e:	f1 00 90    	mov.w     [w1+14], w1
    3d30:	11 01 78    	mov.w     [w1], w2
    3d32:	ae 00 90    	mov.w     [w14+4], w1
    3d34:	d1 01 90    	mov.w     [w1+10], w3
    3d36:	be 00 90    	mov.w     [w14+6], w1
    3d38:	a1 48 90    	mov.b     [w1+10], w1
    3d3a:	81 80 fb    	ze        w1, w1
    3d3c:	81 18 dd    	sl.w      w3, w1, w1
    3d3e:	82 80 70    	ior.w     w1, w2, w1
    3d40:	01 08 78    	mov.w     w1, [w0]

00003d42 <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3d42:	11 3a 80    	mov.w     0x742, w1
    3d44:	00 04 20    	mov.w     #0x40, w0
    3d46:	01 01 70    	ior.w     w0, w1, w2
    3d48:	60 04 20    	mov.w     #0x46, w0
    3d4a:	71 05 20    	mov.w     #0x57, w1
    3d4c:	23 74 20    	mov.w     #0x742, w3
    3d4e:	80 49 78    	mov.b     w0, [w3]
    3d50:	81 49 78    	mov.b     w1, [w3]
    3d52:	82 49 78    	mov.b     w2, [w3]
    3d54:	05 00 37    	bra       0x3d60 <.L13>

00003d56 <.L12>:
    } else if (pin->owner!=(void *)self) {
    3d56:	3e 00 90    	mov.w     [w14+6], w0
    3d58:	80 08 90    	mov.w     [w0+16], w1
    3d5a:	2e 00 90    	mov.w     [w14+4], w0
    3d5c:	80 8f 50    	sub.w     w1, w0, [w15]
    3d5e:	62 00 3a    	bra       NZ, 0x3e24 <.L19>

00003d60 <.L13>:
        return;
    }
    if (timer) {
    3d60:	4e 00 90    	mov.w     [w14+8], w0
    3d62:	00 00 e0    	cp0.w     w0
    3d64:	1c 00 32    	bra       Z, 0x3d9e <.L14>

00003d66 <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    3d66:	2e 00 90    	mov.w     [w14+4], w0
    3d68:	10 00 78    	mov.w     [w0], w0
    3d6a:	ce 00 90    	mov.w     [w14+8], w1
    3d6c:	e1 00 90    	mov.w     [w1+12], w1
    3d6e:	ca 08 dd    	sl.w      w1, #0xa, w1
    3d70:	61 00 b3    	ior.w     #0x6, w1
    3d72:	01 08 78    	mov.w     w1, [w0]

00003d74 <.LSM68>:
        *(self->OCxCON2) = 0x001F & 0x000F; //timer5
    3d74:	2e 00 90    	mov.w     [w14+4], w0
    3d76:	10 00 90    	mov.w     [w0+2], w0
    3d78:	f1 00 20    	mov.w     #0xf, w1
    3d7a:	01 08 78    	mov.w     w1, [w0]

00003d7c <.LSM69>:
        timer_setFreq(timer, freq);
    3d7c:	5e 01 90    	mov.w     [w14+10], w2
    3d7e:	ee 01 90    	mov.w     [w14+12], w3
    3d80:	4e 00 90    	mov.w     [w14+8], w0
    3d82:	e3 f8 07    	rcall     0x2f4a <_timer_setFreq>

00003d84 <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    3d84:	2e 00 90    	mov.w     [w14+4], w0
    3d86:	20 00 90    	mov.w     [w0+4], w0
    3d88:	ce 00 90    	mov.w     [w14+8], w1
    3d8a:	91 00 90    	mov.w     [w1+2], w1
    3d8c:	91 00 78    	mov.w     [w1], w1
    3d8e:	01 08 78    	mov.w     w1, [w0]

00003d90 <.LSM71>:
        *(self->OCxTMR) = 0;
    3d90:	2e 00 90    	mov.w     [w14+4], w0
    3d92:	40 00 90    	mov.w     [w0+8], w0
    3d94:	80 00 eb    	clr.w     w1
    3d96:	01 08 78    	mov.w     w1, [w0]

00003d98 <.LSM72>:
        timer_start(timer);
    3d98:	4e 00 90    	mov.w     [w14+8], w0
    3d9a:	0c f9 07    	rcall     0x2fb4 <_timer_start>
    3d9c:	25 00 37    	bra       0x3de8 <.L15>

00003d9e <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    3d9e:	2e 00 90    	mov.w     [w14+4], w0
    3da0:	10 00 78    	mov.w     [w0], w0
    3da2:	61 c0 21    	mov.w     #0x1c06, w1
    3da4:	01 08 78    	mov.w     w1, [w0]

00003da6 <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    3da6:	2e 00 90    	mov.w     [w14+4], w0
    3da8:	10 00 90    	mov.w     [w0+2], w0
    3daa:	f1 01 20    	mov.w     #0x1f, w1
    3dac:	01 08 78    	mov.w     w1, [w0]

00003dae <.LSM75>:
        if (freq<(FCY/65536.))
    3dae:	18 c0 b3    	mov.b     #0x1, w8
    3db0:	02 40 22    	mov.w     #0x2400, w2
    3db2:	43 37 24    	mov.w     #0x4374, w3
    3db4:	5e 00 90    	mov.w     [w14+10], w0
    3db6:	ee 00 90    	mov.w     [w14+12], w1
    3db8:	ce ea 07    	rcall     0x1356 <___eqsf2>
    3dba:	00 00 e0    	cp0.w     w0
    3dbc:	01 00 35    	bra       LT, 0x3dc0 <.L16>
    3dbe:	00 44 eb    	clr.b     w8

00003dc0 <.L16>:
    3dc0:	08 04 e0    	cp0.b     w8
    3dc2:	05 00 32    	bra       Z, 0x3dce <.L17>

00003dc4 <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    3dc4:	2e 00 90    	mov.w     [w14+4], w0
    3dc6:	20 00 90    	mov.w     [w0+4], w0
    3dc8:	80 80 eb    	setm.w    w1
    3dca:	01 08 78    	mov.w     w1, [w0]
    3dcc:	0d 00 37    	bra       0x3de8 <.L15>

00003dce <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    3dce:	2e 00 90    	mov.w     [w14+4], w0
    3dd0:	20 04 90    	mov.w     [w0+4], w8
    3dd2:	5e 01 90    	mov.w     [w14+10], w2
    3dd4:	ee 01 90    	mov.w     [w14+12], w3
    3dd6:	00 40 22    	mov.w     #0x2400, w0
    3dd8:	41 b7 24    	mov.w     #0x4b74, w1
    3dda:	7b ea 07    	rcall     0x12d2 <___divsf3>
    3ddc:	02 00 20    	mov.w     #0x0, w2
    3dde:	03 f8 23    	mov.w     #0x3f80, w3
    3de0:	1a ea 07    	rcall     0x1216 <___subsf3>
    3de2:	bd ea 07    	rcall     0x135e <___fixunssfsi>
    3de4:	00 00 78    	mov.w     w0, w0
    3de6:	00 0c 78    	mov.w     w0, [w8]

00003de8 <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    3de8:	7e 00 90    	mov.w     [w14+14], w0
    3dea:	61 01 b8    	mul.uu    w0, #0x1, w2
    3dec:	2e 00 90    	mov.w     [w14+4], w0
    3dee:	20 00 90    	mov.w     [w0+4], w0
    3df0:	10 00 78    	mov.w     [w0], w0
    3df2:	80 00 eb    	clr.w     w1
    3df4:	00 9a b9    	mul.ss    w3, w0, w4
    3df6:	04 02 78    	mov.w     w4, w4
    3df8:	02 8b b9    	mul.ss    w1, w2, w6
    3dfa:	86 02 78    	mov.w     w6, w5
    3dfc:	05 02 42    	add.w     w4, w5, w4
    3dfe:	00 10 b8    	mul.uu    w2, w0, w0
    3e00:	01 02 42    	add.w     w4, w1, w4
    3e02:	84 00 78    	mov.w     w4, w1
    3e04:	00 8f be    	mov.d     w0, [w14]

00003e06 <.LSM79>:
    *(self->OCxR) = temp.w[1];
    3e06:	2e 00 90    	mov.w     [w14+4], w0
    3e08:	30 00 90    	mov.w     [w0+6], w0
    3e0a:	9e 00 90    	mov.w     [w14+2], w1
    3e0c:	01 08 78    	mov.w     w1, [w0]

00003e0e <.LSM80>:
    self->pin->write = __pwmWrite;
    3e0e:	2e 00 90    	mov.w     [w14+4], w0
    3e10:	00 08 90    	mov.w     [w0+16], w0
    3e12:	c1 ac 23    	mov.w     #0x3acc, w1
    3e14:	11 08 98    	mov.w     w1, [w0+18]

00003e16 <.LSM81>:
    self->pin->read = __pwmRead;
    3e16:	2e 00 90    	mov.w     [w14+4], w0
    3e18:	00 08 90    	mov.w     [w0+16], w0
    3e1a:	e1 a9 23    	mov.w     #0x3a9e, w1
    3e1c:	21 08 98    	mov.w     w1, [w0+20]
    3e1e:	03 00 37    	bra       0x3e26 <.L9>

00003e20 <.L18>:
    3e20:	00 00 00    	nop       
    3e22:	01 00 37    	bra       0x3e26 <.L9>

00003e24 <.L19>:
    3e24:	00 00 00    	nop       

00003e26 <.L9>:
}
    3e26:	4f 04 78    	mov.w     [--w15], w8
    3e28:	00 80 fa    	ulnk      
    3e2a:	00 00 06    	return    

00003e2c <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    3e2c:	14 00 fa    	lnk       #0x14
    3e2e:	20 07 98    	mov.w     w0, [w14+4]
    3e30:	31 07 98    	mov.w     w1, [w14+6]
    3e32:	42 07 98    	mov.w     w2, [w14+8]
    3e34:	54 07 98    	mov.w     w4, [w14+10]
    3e36:	65 07 98    	mov.w     w5, [w14+12]
    3e38:	76 07 98    	mov.w     w6, [w14+14]
    3e3a:	07 0f 98    	mov.w     w7, [w14+16]
    3e3c:	13 0f 98    	mov.w     w3, [w14+18]

00003e3e <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    3e3e:	3e 00 90    	mov.w     [w14+6], w0
    3e40:	60 00 90    	mov.w     [w0+12], w0
    3e42:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3e44:	87 00 32    	bra       Z, 0x3f54 <.L25>

00003e46 <.LSM87>:
        return;
    if (pin->owner==NULL) {
    3e46:	3e 00 90    	mov.w     [w14+6], w0
    3e48:	00 08 90    	mov.w     [w0+16], w0
    3e4a:	00 00 e0    	cp0.w     w0
    3e4c:	33 00 3a    	bra       NZ, 0x3eb4 <.L23>

00003e4e <.LSM88>:
        self->pin = pin;
    3e4e:	2e 00 90    	mov.w     [w14+4], w0
    3e50:	be 00 90    	mov.w     [w14+6], w1
    3e52:	01 08 98    	mov.w     w1, [w0+16]

00003e54 <.LSM89>:
        pin->owner = (void *)self;
    3e54:	3e 00 90    	mov.w     [w14+6], w0
    3e56:	ae 00 90    	mov.w     [w14+4], w1
    3e58:	01 08 98    	mov.w     w1, [w0+16]

00003e5a <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3e5a:	11 3a 80    	mov.w     0x742, w1
    3e5c:	f0 0b 20    	mov.w     #0xbf, w0
    3e5e:	00 81 60    	and.w     w1, w0, w2
    3e60:	60 04 20    	mov.w     #0x46, w0
    3e62:	71 05 20    	mov.w     #0x57, w1
    3e64:	23 74 20    	mov.w     #0x742, w3
    3e66:	80 49 78    	mov.b     w0, [w3]
    3e68:	81 49 78    	mov.b     w1, [w3]
    3e6a:	82 49 78    	mov.b     w2, [w3]

00003e6c <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    3e6c:	3e 00 90    	mov.w     [w14+6], w0
    3e6e:	70 00 90    	mov.w     [w0+14], w0
    3e70:	be 00 90    	mov.w     [w14+6], w1
    3e72:	f1 00 90    	mov.w     [w1+14], w1
    3e74:	11 01 78    	mov.w     [w1], w2
    3e76:	be 00 90    	mov.w     [w14+6], w1
    3e78:	a1 48 90    	mov.b     [w1+10], w1
    3e7a:	81 80 fb    	ze        w1, w1
    3e7c:	f3 03 20    	mov.w     #0x3f, w3
    3e7e:	81 18 dd    	sl.w      w3, w1, w1
    3e80:	81 80 ea    	com.w     w1, w1
    3e82:	81 00 61    	and.w     w2, w1, w1
    3e84:	01 08 78    	mov.w     w1, [w0]

00003e86 <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3e86:	3e 00 90    	mov.w     [w14+6], w0
    3e88:	70 00 90    	mov.w     [w0+14], w0
    3e8a:	be 00 90    	mov.w     [w14+6], w1
    3e8c:	f1 00 90    	mov.w     [w1+14], w1
    3e8e:	11 01 78    	mov.w     [w1], w2
    3e90:	ae 00 90    	mov.w     [w14+4], w1
    3e92:	d1 01 90    	mov.w     [w1+10], w3
    3e94:	be 00 90    	mov.w     [w14+6], w1
    3e96:	a1 48 90    	mov.b     [w1+10], w1
    3e98:	81 80 fb    	ze        w1, w1
    3e9a:	81 18 dd    	sl.w      w3, w1, w1
    3e9c:	82 80 70    	ior.w     w1, w2, w1
    3e9e:	01 08 78    	mov.w     w1, [w0]

00003ea0 <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3ea0:	11 3a 80    	mov.w     0x742, w1
    3ea2:	00 04 20    	mov.w     #0x40, w0
    3ea4:	01 01 70    	ior.w     w0, w1, w2
    3ea6:	60 04 20    	mov.w     #0x46, w0
    3ea8:	71 05 20    	mov.w     #0x57, w1
    3eaa:	23 74 20    	mov.w     #0x742, w3
    3eac:	80 49 78    	mov.b     w0, [w3]
    3eae:	81 49 78    	mov.b     w1, [w3]
    3eb0:	82 49 78    	mov.b     w2, [w3]
    3eb2:	05 00 37    	bra       0x3ebe <.L24>

00003eb4 <.L23>:
    } else if (pin->owner!=(void *)self) {
    3eb4:	3e 00 90    	mov.w     [w14+6], w0
    3eb6:	80 08 90    	mov.w     [w0+16], w1
    3eb8:	2e 00 90    	mov.w     [w14+4], w0
    3eba:	80 8f 50    	sub.w     w1, w0, [w15]
    3ebc:	4d 00 3a    	bra       NZ, 0x3f58 <.L26>

00003ebe <.L24>:
        return;
    }
    if (timer) {
    3ebe:	4e 00 90    	mov.w     [w14+8], w0
    3ec0:	00 00 e0    	cp0.w     w0
    3ec2:	4b 00 32    	bra       Z, 0x3f5a <.L20>

00003ec4 <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    3ec4:	02 40 22    	mov.w     #0x2400, w2
    3ec6:	43 b7 24    	mov.w     #0x4b74, w3
    3ec8:	7e 00 90    	mov.w     [w14+14], w0
    3eca:	8e 08 90    	mov.w     [w14+16], w1
    3ecc:	b8 ea 07    	rcall     0x143e <___mulsf3>
    3ece:	47 ea 07    	rcall     0x135e <___fixunssfsi>
    3ed0:	80 00 78    	mov.w     w0, w1
    3ed2:	2e 00 90    	mov.w     [w14+4], w0
    3ed4:	61 00 98    	mov.w     w1, [w0+12]

00003ed6 <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    3ed6:	7e 01 90    	mov.w     [w14+14], w2
    3ed8:	8e 09 90    	mov.w     [w14+16], w3
    3eda:	3e b8 97    	mov.w     [w14-10], w0
    3edc:	ce b8 97    	mov.w     [w14-8], w1
    3ede:	9b e9 07    	rcall     0x1216 <___subsf3>
    3ee0:	02 40 22    	mov.w     #0x2400, w2
    3ee2:	43 b7 24    	mov.w     #0x4b74, w3
    3ee4:	ac ea 07    	rcall     0x143e <___mulsf3>
    3ee6:	3b ea 07    	rcall     0x135e <___fixunssfsi>
    3ee8:	80 00 78    	mov.w     w0, w1
    3eea:	2e 00 90    	mov.w     [w14+4], w0
    3eec:	71 00 98    	mov.w     w1, [w0+14]

00003eee <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    3eee:	2e 00 90    	mov.w     [w14+4], w0
    3ef0:	10 00 78    	mov.w     [w0], w0
    3ef2:	f1 c0 21    	mov.w     #0x1c0f, w1
    3ef4:	01 08 78    	mov.w     w1, [w0]

00003ef6 <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    3ef6:	2e 00 90    	mov.w     [w14+4], w0
    3ef8:	10 00 90    	mov.w     [w0+2], w0
    3efa:	ce 00 90    	mov.w     [w14+8], w1
    3efc:	71 01 90    	mov.w     [w1+14], w2
    3efe:	01 08 20    	mov.w     #0x80, w1
    3f00:	82 80 70    	ior.w     w1, w2, w1
    3f02:	01 08 78    	mov.w     w1, [w0]

00003f04 <.LSM100>:
        *(self->OCxR) = 1;
    3f04:	2e 00 90    	mov.w     [w14+4], w0
    3f06:	30 00 90    	mov.w     [w0+6], w0
    3f08:	11 00 20    	mov.w     #0x1, w1
    3f0a:	01 08 78    	mov.w     w1, [w0]

00003f0c <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    3f0c:	1e 08 90    	mov.w     [w14+18], w0
    3f0e:	61 01 b8    	mul.uu    w0, #0x1, w2
    3f10:	2e 00 90    	mov.w     [w14+4], w0
    3f12:	70 00 90    	mov.w     [w0+14], w0
    3f14:	80 00 eb    	clr.w     w1
    3f16:	00 9a b9    	mul.ss    w3, w0, w4
    3f18:	04 02 78    	mov.w     w4, w4
    3f1a:	02 8b b9    	mul.ss    w1, w2, w6
    3f1c:	86 02 78    	mov.w     w6, w5
    3f1e:	05 02 42    	add.w     w4, w5, w4
    3f20:	00 10 b8    	mul.uu    w2, w0, w0
    3f22:	01 02 42    	add.w     w4, w1, w4
    3f24:	84 00 78    	mov.w     w4, w1
    3f26:	00 8f be    	mov.d     w0, [w14]

00003f28 <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    3f28:	2e 00 90    	mov.w     [w14+4], w0
    3f2a:	20 00 90    	mov.w     [w0+4], w0
    3f2c:	ae 00 90    	mov.w     [w14+4], w1
    3f2e:	61 01 90    	mov.w     [w1+12], w2
    3f30:	9e 00 90    	mov.w     [w14+2], w1
    3f32:	81 00 41    	add.w     w2, w1, w1
    3f34:	01 08 78    	mov.w     w1, [w0]

00003f36 <.LSM103>:
        timer_setPeriod(timer, interval);
    3f36:	5e 01 90    	mov.w     [w14+10], w2
    3f38:	ee 01 90    	mov.w     [w14+12], w3
    3f3a:	4e 00 90    	mov.w     [w14+8], w0
    3f3c:	6c f7 07    	rcall     0x2e16 <_timer_setPeriod>

00003f3e <.LSM104>:
        timer_start(timer);
    3f3e:	4e 00 90    	mov.w     [w14+8], w0
    3f40:	39 f8 07    	rcall     0x2fb4 <_timer_start>

00003f42 <.LSM105>:
        self->pin->write = __servoWrite;
    3f42:	2e 00 90    	mov.w     [w14+4], w0
    3f44:	00 08 90    	mov.w     [w0+16], w0
    3f46:	61 b3 23    	mov.w     #0x3b36, w1
    3f48:	11 08 98    	mov.w     w1, [w0+18]

00003f4a <.LSM106>:
        self->pin->read = __servoRead;
    3f4a:	2e 00 90    	mov.w     [w14+4], w0
    3f4c:	00 08 90    	mov.w     [w0+16], w0
    3f4e:	41 b0 23    	mov.w     #0x3b04, w1
    3f50:	21 08 98    	mov.w     w1, [w0+20]
    3f52:	03 00 37    	bra       0x3f5a <.L20>

00003f54 <.L25>:
    3f54:	00 00 00    	nop       
    3f56:	01 00 37    	bra       0x3f5a <.L20>

00003f58 <.L26>:
    3f58:	00 00 00    	nop       

00003f5a <.L20>:
    }
}
    3f5a:	00 80 fa    	ulnk      
    3f5c:	00 00 06    	return    

00003f5e <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    3f5e:	00 00 fa    	lnk       #0x0

00003f60 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f60:	74 c0 b3    	mov.b     #0x7, w4
    3f62:	63 4e 20    	mov.w     #0x4e6, w3
    3f64:	82 2d 20    	mov.w     #0x2d8, w2
    3f66:	a1 2d 20    	mov.w     #0x2da, w1
    3f68:	00 80 20    	mov.w     #0x800, w0
    3f6a:	20 00 07    	rcall     0x3fac <_led_init>

00003f6c <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3f6c:	00 42 eb    	clr.b     w4
    3f6e:	a3 4e 20    	mov.w     #0x4ea, w3
    3f70:	82 2e 20    	mov.w     #0x2e8, w2
    3f72:	a1 2e 20    	mov.w     #0x2ea, w1
    3f74:	80 80 20    	mov.w     #0x808, w0
    3f76:	1a 00 07    	rcall     0x3fac <_led_init>

00003f78 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3f78:	14 c0 b3    	mov.b     #0x1, w4
    3f7a:	a3 4e 20    	mov.w     #0x4ea, w3
    3f7c:	82 2e 20    	mov.w     #0x2e8, w2
    3f7e:	a1 2e 20    	mov.w     #0x2ea, w1
    3f80:	00 81 20    	mov.w     #0x810, w0
    3f82:	14 00 07    	rcall     0x3fac <_led_init>

00003f84 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3f84:	f4 c0 b3    	mov.b     #0xf, w4
    3f86:	43 4e 20    	mov.w     #0x4e4, w3
    3f88:	02 2d 20    	mov.w     #0x2d0, w2
    3f8a:	21 2d 20    	mov.w     #0x2d2, w1
    3f8c:	80 81 20    	mov.w     #0x818, w0
    3f8e:	ad 00 07    	rcall     0x40ea <_sw_init>

00003f90 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3f90:	c4 c0 b3    	mov.b     #0xc, w4
    3f92:	43 4e 20    	mov.w     #0x4e4, w3
    3f94:	02 2d 20    	mov.w     #0x2d0, w2
    3f96:	21 2d 20    	mov.w     #0x2d2, w1
    3f98:	00 82 20    	mov.w     #0x820, w0
    3f9a:	a7 00 07    	rcall     0x40ea <_sw_init>

00003f9c <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3f9c:	c4 c0 b3    	mov.b     #0xc, w4
    3f9e:	23 4e 20    	mov.w     #0x4e2, w3
    3fa0:	82 2c 20    	mov.w     #0x2c8, w2
    3fa2:	a1 2c 20    	mov.w     #0x2ca, w1
    3fa4:	80 82 20    	mov.w     #0x828, w0
    3fa6:	a1 00 07    	rcall     0x40ea <_sw_init>

00003fa8 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    3fa8:	00 80 fa    	ulnk      
    3faa:	00 00 06    	return    

00003fac <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    3fac:	0a 00 fa    	lnk       #0xa
    3fae:	00 0f 78    	mov.w     w0, [w14]
    3fb0:	11 07 98    	mov.w     w1, [w14+2]
    3fb2:	22 07 98    	mov.w     w2, [w14+4]
    3fb4:	33 07 98    	mov.w     w3, [w14+6]
    3fb6:	04 4f 98    	mov.b     w4, [w14+8]

00003fb8 <.LSM9>:
    self->port = port;
    3fb8:	1e 00 78    	mov.w     [w14], w0
    3fba:	9e 00 90    	mov.w     [w14+2], w1
    3fbc:	01 08 78    	mov.w     w1, [w0]

00003fbe <.LSM10>:
    self->tris = tris;
    3fbe:	1e 00 78    	mov.w     [w14], w0
    3fc0:	ae 00 90    	mov.w     [w14+4], w1
    3fc2:	11 00 98    	mov.w     w1, [w0+2]

00003fc4 <.LSM11>:
    self->ans = ans;
    3fc4:	1e 00 78    	mov.w     [w14], w0
    3fc6:	be 00 90    	mov.w     [w14+6], w1
    3fc8:	21 00 98    	mov.w     w1, [w0+4]

00003fca <.LSM12>:
    self->bit = bit;
    3fca:	1e 00 78    	mov.w     [w14], w0
    3fcc:	8e 48 90    	mov.b     [w14+8], w1
    3fce:	61 40 98    	mov.b     w1, [w0+6]

00003fd0 <.LSM13>:

    bitclear(self->ans, self->bit);
    3fd0:	1e 00 78    	mov.w     [w14], w0
    3fd2:	20 00 90    	mov.w     [w0+4], w0
    3fd4:	9e 00 78    	mov.w     [w14], w1
    3fd6:	a1 00 90    	mov.w     [w1+4], w1
    3fd8:	11 01 78    	mov.w     [w1], w2
    3fda:	9e 00 78    	mov.w     [w14], w1
    3fdc:	e1 40 90    	mov.b     [w1+6], w1
    3fde:	81 80 fb    	ze        w1, w1
    3fe0:	13 00 20    	mov.w     #0x1, w3
    3fe2:	81 18 dd    	sl.w      w3, w1, w1
    3fe4:	81 80 ea    	com.w     w1, w1
    3fe6:	81 00 61    	and.w     w2, w1, w1
    3fe8:	01 08 78    	mov.w     w1, [w0]

00003fea <.LSM14>:
    bitclear(self->port, self->bit);
    3fea:	1e 00 78    	mov.w     [w14], w0
    3fec:	10 00 78    	mov.w     [w0], w0
    3fee:	9e 00 78    	mov.w     [w14], w1
    3ff0:	91 00 78    	mov.w     [w1], w1
    3ff2:	11 01 78    	mov.w     [w1], w2
    3ff4:	9e 00 78    	mov.w     [w14], w1
    3ff6:	e1 40 90    	mov.b     [w1+6], w1
    3ff8:	81 80 fb    	ze        w1, w1
    3ffa:	13 00 20    	mov.w     #0x1, w3
    3ffc:	81 18 dd    	sl.w      w3, w1, w1
    3ffe:	81 80 ea    	com.w     w1, w1
    4000:	81 00 61    	and.w     w2, w1, w1
    4002:	01 08 78    	mov.w     w1, [w0]

00004004 <.LSM15>:
    bitclear(self->tris, self->bit);
    4004:	1e 00 78    	mov.w     [w14], w0
    4006:	10 00 90    	mov.w     [w0+2], w0
    4008:	9e 00 78    	mov.w     [w14], w1
    400a:	91 00 90    	mov.w     [w1+2], w1
    400c:	11 01 78    	mov.w     [w1], w2
    400e:	9e 00 78    	mov.w     [w14], w1
    4010:	e1 40 90    	mov.b     [w1+6], w1
    4012:	81 80 fb    	ze        w1, w1
    4014:	13 00 20    	mov.w     #0x1, w3
    4016:	81 18 dd    	sl.w      w3, w1, w1
    4018:	81 80 ea    	com.w     w1, w1
    401a:	81 00 61    	and.w     w2, w1, w1
    401c:	01 08 78    	mov.w     w1, [w0]

0000401e <.LSM16>:
}
    401e:	00 80 fa    	ulnk      
    4020:	00 00 06    	return    

00004022 <_led_on>:

void led_on(_LED *self) {
    4022:	02 00 fa    	lnk       #0x2
    4024:	00 0f 78    	mov.w     w0, [w14]

00004026 <.LSM18>:
    bitset(self->port, self->bit);
    4026:	1e 00 78    	mov.w     [w14], w0
    4028:	10 00 78    	mov.w     [w0], w0
    402a:	9e 00 78    	mov.w     [w14], w1
    402c:	91 00 78    	mov.w     [w1], w1
    402e:	11 01 78    	mov.w     [w1], w2
    4030:	9e 00 78    	mov.w     [w14], w1
    4032:	e1 40 90    	mov.b     [w1+6], w1
    4034:	81 80 fb    	ze        w1, w1
    4036:	13 00 20    	mov.w     #0x1, w3
    4038:	81 18 dd    	sl.w      w3, w1, w1
    403a:	82 80 70    	ior.w     w1, w2, w1
    403c:	01 08 78    	mov.w     w1, [w0]

0000403e <.LSM19>:
}
    403e:	00 80 fa    	ulnk      
    4040:	00 00 06    	return    

00004042 <_led_off>:

void led_off(_LED *self) {
    4042:	02 00 fa    	lnk       #0x2
    4044:	00 0f 78    	mov.w     w0, [w14]

00004046 <.LSM21>:
    bitclear(self->port, self->bit);
    4046:	1e 00 78    	mov.w     [w14], w0
    4048:	10 00 78    	mov.w     [w0], w0
    404a:	9e 00 78    	mov.w     [w14], w1
    404c:	91 00 78    	mov.w     [w1], w1
    404e:	11 01 78    	mov.w     [w1], w2
    4050:	9e 00 78    	mov.w     [w14], w1
    4052:	e1 40 90    	mov.b     [w1+6], w1
    4054:	81 80 fb    	ze        w1, w1
    4056:	13 00 20    	mov.w     #0x1, w3
    4058:	81 18 dd    	sl.w      w3, w1, w1
    405a:	81 80 ea    	com.w     w1, w1
    405c:	81 00 61    	and.w     w2, w1, w1
    405e:	01 08 78    	mov.w     w1, [w0]

00004060 <.LSM22>:
}
    4060:	00 80 fa    	ulnk      
    4062:	00 00 06    	return    

00004064 <_led_toggle>:

void led_toggle(_LED *self) {
    4064:	02 00 fa    	lnk       #0x2
    4066:	00 0f 78    	mov.w     w0, [w14]

00004068 <.LSM24>:
    bitflip(self->port, self->bit);
    4068:	1e 00 78    	mov.w     [w14], w0
    406a:	10 00 78    	mov.w     [w0], w0
    406c:	9e 00 78    	mov.w     [w14], w1
    406e:	91 00 78    	mov.w     [w1], w1
    4070:	11 01 78    	mov.w     [w1], w2
    4072:	9e 00 78    	mov.w     [w14], w1
    4074:	e1 40 90    	mov.b     [w1+6], w1
    4076:	81 80 fb    	ze        w1, w1
    4078:	13 00 20    	mov.w     #0x1, w3
    407a:	81 18 dd    	sl.w      w3, w1, w1
    407c:	81 00 69    	xor.w     w2, w1, w1
    407e:	01 08 78    	mov.w     w1, [w0]

00004080 <.LSM25>:
}
    4080:	00 80 fa    	ulnk      
    4082:	00 00 06    	return    

00004084 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    4084:	04 00 fa    	lnk       #0x4
    4086:	00 0f 78    	mov.w     w0, [w14]
    4088:	11 07 98    	mov.w     w1, [w14+2]

0000408a <.LSM27>:
    if (val)
    408a:	1e 00 90    	mov.w     [w14+2], w0
    408c:	00 00 e0    	cp0.w     w0
    408e:	0d 00 32    	bra       Z, 0x40aa <.L7>

00004090 <.LSM28>:
        bitset(self->port, self->bit);
    4090:	1e 00 78    	mov.w     [w14], w0
    4092:	10 00 78    	mov.w     [w0], w0
    4094:	9e 00 78    	mov.w     [w14], w1
    4096:	91 00 78    	mov.w     [w1], w1
    4098:	11 01 78    	mov.w     [w1], w2
    409a:	9e 00 78    	mov.w     [w14], w1
    409c:	e1 40 90    	mov.b     [w1+6], w1
    409e:	81 80 fb    	ze        w1, w1
    40a0:	13 00 20    	mov.w     #0x1, w3
    40a2:	81 18 dd    	sl.w      w3, w1, w1
    40a4:	82 80 70    	ior.w     w1, w2, w1
    40a6:	01 08 78    	mov.w     w1, [w0]
    40a8:	0d 00 37    	bra       0x40c4 <.L6>

000040aa <.L7>:
    else
        bitclear(self->port, self->bit);
    40aa:	1e 00 78    	mov.w     [w14], w0
    40ac:	10 00 78    	mov.w     [w0], w0
    40ae:	9e 00 78    	mov.w     [w14], w1
    40b0:	91 00 78    	mov.w     [w1], w1
    40b2:	11 01 78    	mov.w     [w1], w2
    40b4:	9e 00 78    	mov.w     [w14], w1
    40b6:	e1 40 90    	mov.b     [w1+6], w1
    40b8:	81 80 fb    	ze        w1, w1
    40ba:	13 00 20    	mov.w     #0x1, w3
    40bc:	81 18 dd    	sl.w      w3, w1, w1
    40be:	81 80 ea    	com.w     w1, w1
    40c0:	81 00 61    	and.w     w2, w1, w1
    40c2:	01 08 78    	mov.w     w1, [w0]

000040c4 <.L6>:
}
    40c4:	00 80 fa    	ulnk      
    40c6:	00 00 06    	return    

000040c8 <_led_read>:

uint16_t led_read(_LED *self) {
    40c8:	02 00 fa    	lnk       #0x2
    40ca:	00 0f 78    	mov.w     w0, [w14]

000040cc <.LSM32>:
    return bitread(self->port, self->bit);
    40cc:	1e 00 78    	mov.w     [w14], w0
    40ce:	10 00 78    	mov.w     [w0], w0
    40d0:	90 00 78    	mov.w     [w0], w1
    40d2:	1e 00 78    	mov.w     [w14], w0
    40d4:	60 40 90    	mov.b     [w0+6], w0
    40d6:	00 80 fb    	ze        w0, w0
    40d8:	12 00 20    	mov.w     #0x1, w2
    40da:	00 10 dd    	sl.w      w2, w0, w0
    40dc:	00 80 60    	and.w     w1, w0, w0
    40de:	00 f0 a7    	btsc.w    w0, #0xf
    40e0:	00 00 ea    	neg.w     w0, w0
    40e2:	00 00 ea    	neg.w     w0, w0
    40e4:	4f 00 de    	lsr.w     w0, #0xf, w0

000040e6 <.LSM33>:
}
    40e6:	00 80 fa    	ulnk      
    40e8:	00 00 06    	return    

000040ea <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    40ea:	0a 00 fa    	lnk       #0xa
    40ec:	00 0f 78    	mov.w     w0, [w14]
    40ee:	11 07 98    	mov.w     w1, [w14+2]
    40f0:	22 07 98    	mov.w     w2, [w14+4]
    40f2:	33 07 98    	mov.w     w3, [w14+6]
    40f4:	04 4f 98    	mov.b     w4, [w14+8]

000040f6 <.LSM35>:
    self->port = port;
    40f6:	1e 00 78    	mov.w     [w14], w0
    40f8:	9e 00 90    	mov.w     [w14+2], w1
    40fa:	01 08 78    	mov.w     w1, [w0]

000040fc <.LSM36>:
    self->tris = tris;
    40fc:	1e 00 78    	mov.w     [w14], w0
    40fe:	ae 00 90    	mov.w     [w14+4], w1
    4100:	11 00 98    	mov.w     w1, [w0+2]

00004102 <.LSM37>:
    self->ans = ans;
    4102:	1e 00 78    	mov.w     [w14], w0
    4104:	be 00 90    	mov.w     [w14+6], w1
    4106:	21 00 98    	mov.w     w1, [w0+4]

00004108 <.LSM38>:
    self->bit = bit;
    4108:	1e 00 78    	mov.w     [w14], w0
    410a:	8e 48 90    	mov.b     [w14+8], w1
    410c:	61 40 98    	mov.b     w1, [w0+6]

0000410e <.LSM39>:

    bitclear(self->ans, self->bit);
    410e:	1e 00 78    	mov.w     [w14], w0
    4110:	20 00 90    	mov.w     [w0+4], w0
    4112:	9e 00 78    	mov.w     [w14], w1
    4114:	a1 00 90    	mov.w     [w1+4], w1
    4116:	11 01 78    	mov.w     [w1], w2
    4118:	9e 00 78    	mov.w     [w14], w1
    411a:	e1 40 90    	mov.b     [w1+6], w1
    411c:	81 80 fb    	ze        w1, w1
    411e:	13 00 20    	mov.w     #0x1, w3
    4120:	81 18 dd    	sl.w      w3, w1, w1
    4122:	81 80 ea    	com.w     w1, w1
    4124:	81 00 61    	and.w     w2, w1, w1
    4126:	01 08 78    	mov.w     w1, [w0]

00004128 <.LSM40>:
    bitset(self->tris, self->bit);
    4128:	1e 00 78    	mov.w     [w14], w0
    412a:	10 00 90    	mov.w     [w0+2], w0
    412c:	9e 00 78    	mov.w     [w14], w1
    412e:	91 00 90    	mov.w     [w1+2], w1
    4130:	11 01 78    	mov.w     [w1], w2
    4132:	9e 00 78    	mov.w     [w14], w1
    4134:	e1 40 90    	mov.b     [w1+6], w1
    4136:	81 80 fb    	ze        w1, w1
    4138:	13 00 20    	mov.w     #0x1, w3
    413a:	81 18 dd    	sl.w      w3, w1, w1
    413c:	82 80 70    	ior.w     w1, w2, w1
    413e:	01 08 78    	mov.w     w1, [w0]

00004140 <.LSM41>:
}
    4140:	00 80 fa    	ulnk      
    4142:	00 00 06    	return    

00004144 <_sw_read>:

uint16_t sw_read(_SW *self) {
    4144:	02 00 fa    	lnk       #0x2
    4146:	00 0f 78    	mov.w     w0, [w14]

00004148 <.LSM43>:
    return bitread(self->port, self->bit);
    4148:	1e 00 78    	mov.w     [w14], w0
    414a:	10 00 78    	mov.w     [w0], w0
    414c:	90 00 78    	mov.w     [w0], w1
    414e:	1e 00 78    	mov.w     [w14], w0
    4150:	60 40 90    	mov.b     [w0+6], w0
    4152:	00 80 fb    	ze        w0, w0
    4154:	12 00 20    	mov.w     #0x1, w2
    4156:	00 10 dd    	sl.w      w2, w0, w0
    4158:	00 80 60    	and.w     w1, w0, w0
    415a:	00 f0 a7    	btsc.w    w0, #0xf
    415c:	00 00 ea    	neg.w     w0, w0
    415e:	00 00 ea    	neg.w     w0, w0
    4160:	4f 00 de    	lsr.w     w0, #0xf, w0

00004162 <.LSM44>:
}
    4162:	00 80 fa    	ulnk      
    4164:	00 00 06    	return    

00004166 <_init_md>:
#include "md.h"

_MD md1, md2, mdp;

void init_md(void) {
    4166:	00 00 fa    	lnk       #0x0

00004168 <.LSM1>:
    md_init(&md1, &D[8], &D[7], 1e3, &oc7);
    4168:	e4 ba 20    	mov.w     #0xbae, w4
    416a:	83 3e 20    	mov.w     #0x3e8, w3
    416c:	82 90 20    	mov.w     #0x908, w2
    416e:	e1 91 20    	mov.w     #0x91e, w1
    4170:	c0 db 20    	mov.w     #0xdbc, w0
    4172:	0e 00 07    	rcall     0x4190 <_md_init>

00004174 <.LSM2>:
    md_init(&md2, &D[5], &D[6], 1e3, &oc5);
    4174:	a4 b8 20    	mov.w     #0xb8a, w4
    4176:	83 3e 20    	mov.w     #0x3e8, w3
    4178:	22 8f 20    	mov.w     #0x8f2, w2
    417a:	c1 8d 20    	mov.w     #0x8dc, w1
    417c:	a0 dc 20    	mov.w     #0xdca, w0
    417e:	08 00 07    	rcall     0x4190 <_md_init>

00004180 <.LSM3>:
    md_init(&mdp, NULL, NULL, 1e3, NULL);
    4180:	00 02 eb    	clr.w     w4
    4182:	83 3e 20    	mov.w     #0x3e8, w3
    4184:	00 01 eb    	clr.w     w2
    4186:	80 00 eb    	clr.w     w1
    4188:	80 dd 20    	mov.w     #0xdd8, w0
    418a:	02 00 07    	rcall     0x4190 <_md_init>

0000418c <.LSM4>:
}
    418c:	00 80 fa    	ulnk      
    418e:	00 00 06    	return    

00004190 <_md_init>:

void md_init(_MD *self, _PIN *pin1, _PIN *pin2, uint16_t freq, _OC *oc) {
    4190:	0a 00 fa    	lnk       #0xa
    4192:	00 0f 78    	mov.w     w0, [w14]
    4194:	11 07 98    	mov.w     w1, [w14+2]
    4196:	22 07 98    	mov.w     w2, [w14+4]
    4198:	33 07 98    	mov.w     w3, [w14+6]
    419a:	44 07 98    	mov.w     w4, [w14+8]

0000419c <.LSM6>:
    self->dir = 0;
    419c:	1e 00 78    	mov.w     [w14], w0
    419e:	80 40 eb    	clr.b     w1
    41a0:	01 48 78    	mov.b     w1, [w0]

000041a2 <.LSM7>:
    self->speed = 0;
    41a2:	1e 00 78    	mov.w     [w14], w0
    41a4:	80 00 eb    	clr.w     w1
    41a6:	11 00 98    	mov.w     w1, [w0+2]

000041a8 <.LSM8>:
    self->freq = freq;
    41a8:	1e 00 78    	mov.w     [w14], w0
    41aa:	be 00 90    	mov.w     [w14+6], w1
    41ac:	21 00 98    	mov.w     w1, [w0+4]

000041ae <.LSM9>:
    self->pins[0] = pin1;
    41ae:	1e 00 78    	mov.w     [w14], w0
    41b0:	9e 00 90    	mov.w     [w14+2], w1
    41b2:	41 00 98    	mov.w     w1, [w0+8]

000041b4 <.LSM10>:
    self->pins[1] = pin2;
    41b4:	1e 00 78    	mov.w     [w14], w0
    41b6:	ae 00 90    	mov.w     [w14+4], w1
    41b8:	51 00 98    	mov.w     w1, [w0+10]

000041ba <.LSM11>:
    self->braked = 0;
    41ba:	1e 00 78    	mov.w     [w14], w0
    41bc:	80 40 eb    	clr.b     w1
    41be:	61 40 98    	mov.b     w1, [w0+6]

000041c0 <.LSM12>:
    self->oc = oc;
    41c0:	1e 00 78    	mov.w     [w14], w0
    41c2:	ce 00 90    	mov.w     [w14+8], w1
    41c4:	61 00 98    	mov.w     w1, [w0+12]

000041c6 <.LSM13>:

    if (self != &mdp) {
    41c6:	80 dd 20    	mov.w     #0xdd8, w0
    41c8:	9e 00 78    	mov.w     [w14], w1
    41ca:	80 8f 50    	sub.w     w1, w0, [w15]
    41cc:	17 00 32    	bra       Z, 0x41fc <.L2>

000041ce <.LSM14>:
        oc_pwm(self->oc, self->pins[0], &timer5, freq, 0);
    41ce:	3e 00 90    	mov.w     [w14+6], w0
    41d0:	80 00 eb    	clr.w     w1
    41d2:	e0 e8 07    	rcall     0x1394 <___floatunsisf>
    41d4:	1e 01 78    	mov.w     [w14], w2
    41d6:	c2 03 90    	mov.w     [w2+8], w7
    41d8:	1e 01 78    	mov.w     [w14], w2
    41da:	62 03 90    	mov.w     [w2+12], w6
    41dc:	80 01 eb    	clr.w     w3
    41de:	00 02 be    	mov.d     w0, w4
    41e0:	42 d6 20    	mov.w     #0xd64, w2
    41e2:	87 00 78    	mov.w     w7, w1
    41e4:	06 00 78    	mov.w     w6, w0
    41e6:	74 fd 07    	rcall     0x3cd0 <_oc_pwm>

000041e8 <.LSM15>:
        OC5CON2 = 0x000F; //synchronize to timer5
    41e8:	f0 00 20    	mov.w     #0xf, w0
    41ea:	d0 0d 88    	mov.w     w0, 0x1ba

000041ec <.LSM16>:
        OC7CON2 = 0x000F;
    41ec:	f0 00 20    	mov.w     #0xf, w0
    41ee:	70 0e 88    	mov.w     w0, 0x1ce

000041f0 <.LSM17>:
        pin_digitalOut(self->pins[1]);
    41f0:	1e 00 78    	mov.w     [w14], w0
    41f2:	50 00 90    	mov.w     [w0+10], w0
    41f4:	9b fb 07    	rcall     0x392c <_pin_digitalOut>

000041f6 <.LSM18>:
        pin_clear(self->pins[1]);
    41f6:	1e 00 78    	mov.w     [w14], w0
    41f8:	50 00 90    	mov.w     [w0+10], w0
    41fa:	0a fc 07    	rcall     0x3a10 <_pin_clear>

000041fc <.L2>:
    }
}
    41fc:	00 80 fa    	ulnk      
    41fe:	00 00 06    	return    

00004200 <_md_free>:

void md_free(_MD *self) {
    4200:	02 00 fa    	lnk       #0x2
    4202:	00 0f 78    	mov.w     w0, [w14]

00004204 <.LSM21>:
    // clear owned pins/oc's
}
    4204:	00 80 fa    	ulnk      
    4206:	00 00 06    	return    

00004208 <_md_brake>:

void md_brake(_MD *self) {
    4208:	02 00 fa    	lnk       #0x2
    420a:	00 0f 78    	mov.w     w0, [w14]

0000420c <.LSM23>:
    self->braked = 1;
    420c:	1e 00 78    	mov.w     [w14], w0
    420e:	11 c0 b3    	mov.b     #0x1, w1
    4210:	61 40 98    	mov.b     w1, [w0+6]

00004212 <.LSM24>:
    if (self == &mdp) {
    4212:	80 dd 20    	mov.w     #0xdd8, w0
    4214:	9e 00 78    	mov.w     [w14], w1
    4216:	80 8f 50    	sub.w     w1, w0, [w15]
    4218:	05 00 3a    	bra       NZ, 0x4224 <.L6>

0000421a <.LSM25>:
        md_brake(&md1);
    421a:	c0 db 20    	mov.w     #0xdbc, w0
    421c:	f5 ff 07    	rcall     0x4208 <_md_brake>

0000421e <.LSM26>:
        md_brake(&md2);
    421e:	a0 dc 20    	mov.w     #0xdca, w0
    4220:	f3 ff 07    	rcall     0x4208 <_md_brake>
    4222:	08 00 37    	bra       0x4234 <.L5>

00004224 <.L6>:
    } else {
        pin_write(self->pins[0], 0);
    4224:	1e 00 78    	mov.w     [w14], w0
    4226:	40 00 90    	mov.w     [w0+8], w0
    4228:	80 00 eb    	clr.w     w1
    422a:	1d fc 07    	rcall     0x3a66 <_pin_write>

0000422c <.LSM28>:
        pin_write(self->pins[1], 0);
    422c:	1e 00 78    	mov.w     [w14], w0
    422e:	50 00 90    	mov.w     [w0+10], w0
    4230:	80 00 eb    	clr.w     w1
    4232:	19 fc 07    	rcall     0x3a66 <_pin_write>

00004234 <.L5>:
    }
}
    4234:	00 80 fa    	ulnk      
    4236:	00 00 06    	return    

00004238 <_md_run>:

void md_run(_MD *self) {
    4238:	02 00 fa    	lnk       #0x2
    423a:	00 0f 78    	mov.w     w0, [w14]

0000423c <.LSM31>:
    self->braked = 0;
    423c:	1e 00 78    	mov.w     [w14], w0
    423e:	80 40 eb    	clr.b     w1
    4240:	61 40 98    	mov.b     w1, [w0+6]

00004242 <.LSM32>:
    if (self == &mdp) {
    4242:	80 dd 20    	mov.w     #0xdd8, w0
    4244:	9e 00 78    	mov.w     [w14], w1
    4246:	80 8f 50    	sub.w     w1, w0, [w15]
    4248:	05 00 3a    	bra       NZ, 0x4254 <.L9>

0000424a <.LSM33>:
        md_run(&md1);
    424a:	c0 db 20    	mov.w     #0xdbc, w0
    424c:	f5 ff 07    	rcall     0x4238 <_md_run>

0000424e <.LSM34>:
        md_run(&md2);
    424e:	a0 dc 20    	mov.w     #0xdca, w0
    4250:	f3 ff 07    	rcall     0x4238 <_md_run>
    4252:	08 00 37    	bra       0x4264 <.L8>

00004254 <.L9>:
    } else {
        md_velocity(self, self->speed, self->dir);
    4254:	1e 00 78    	mov.w     [w14], w0
    4256:	90 40 78    	mov.b     [w0], w1
    4258:	1e 00 78    	mov.w     [w14], w0
    425a:	10 00 90    	mov.w     [w0+2], w0
    425c:	01 41 78    	mov.b     w1, w2
    425e:	80 00 78    	mov.w     w0, w1
    4260:	1e 00 78    	mov.w     [w14], w0
    4262:	66 00 07    	rcall     0x4330 <_md_velocity>

00004264 <.L8>:
    }
}
    4264:	00 80 fa    	ulnk      
    4266:	00 00 06    	return    

00004268 <_md_speed>:

void md_speed(_MD *self, uint16_t speed) {
    4268:	04 00 fa    	lnk       #0x4
    426a:	00 0f 78    	mov.w     w0, [w14]
    426c:	11 07 98    	mov.w     w1, [w14+2]

0000426e <.LSM38>:
    self->speed = speed;
    426e:	1e 00 78    	mov.w     [w14], w0
    4270:	9e 00 90    	mov.w     [w14+2], w1
    4272:	11 00 98    	mov.w     w1, [w0+2]

00004274 <.LSM39>:

    if (self == &mdp) {
    4274:	80 dd 20    	mov.w     #0xdd8, w0
    4276:	9e 00 78    	mov.w     [w14], w1
    4278:	80 8f 50    	sub.w     w1, w0, [w15]
    427a:	0b 00 3a    	bra       NZ, 0x4292 <.L12>

0000427c <.LSM40>:
        md_speed(&md1, self->speed);
    427c:	1e 00 78    	mov.w     [w14], w0
    427e:	10 00 90    	mov.w     [w0+2], w0
    4280:	80 00 78    	mov.w     w0, w1
    4282:	c0 db 20    	mov.w     #0xdbc, w0
    4284:	f1 ff 07    	rcall     0x4268 <_md_speed>

00004286 <.LSM41>:
        md_speed(&md2, self->speed);
    4286:	1e 00 78    	mov.w     [w14], w0
    4288:	10 00 90    	mov.w     [w0+2], w0
    428a:	80 00 78    	mov.w     w0, w1
    428c:	a0 dc 20    	mov.w     #0xdca, w0
    428e:	ec ff 07    	rcall     0x4268 <_md_speed>
    4290:	0d 00 37    	bra       0x42ac <.L11>

00004292 <.L12>:
    } else if (!self->braked) {
    4292:	1e 00 78    	mov.w     [w14], w0
    4294:	60 40 90    	mov.b     [w0+6], w0
    4296:	00 04 e0    	cp0.b     w0
    4298:	09 00 3a    	bra       NZ, 0x42ac <.L11>

0000429a <.LSM43>:
        pin_write(self->pins[self->dir], speed);
    429a:	1e 00 78    	mov.w     [w14], w0
    429c:	10 40 78    	mov.b     [w0], w0
    429e:	00 80 fb    	ze        w0, w0
    42a0:	9e 00 78    	mov.w     [w14], w1
    42a2:	64 00 40    	add.w     w0, #0x4, w0
    42a4:	00 00 40    	add.w     w0, w0, w0
    42a6:	61 00 78    	mov.w     [w1+w0], w0
    42a8:	9e 00 90    	mov.w     [w14+2], w1
    42aa:	dd fb 07    	rcall     0x3a66 <_pin_write>

000042ac <.L11>:
    }
}
    42ac:	00 80 fa    	ulnk      
    42ae:	00 00 06    	return    

000042b0 <_md_direction>:

void md_direction(_MD *self, uint8_t dir) {
    42b0:	04 00 fa    	lnk       #0x4
    42b2:	88 1f 78    	mov.w     w8, [w15++]
    42b4:	00 0f 78    	mov.w     w0, [w14]
    42b6:	21 47 98    	mov.b     w1, [w14+2]

000042b8 <.LSM46>:
    if (self->dir == dir) {
    42b8:	1e 00 78    	mov.w     [w14], w0
    42ba:	90 40 78    	mov.b     [w0], w1
    42bc:	2e 40 90    	mov.b     [w14+2], w0
    42be:	80 cf 50    	sub.b     w1, w0, [w15]
    42c0:	33 00 32    	bra       Z, 0x4328 <.L18>

000042c2 <.LSM47>:
        return;
    }
    self->dir = dir;
    42c2:	1e 00 78    	mov.w     [w14], w0
    42c4:	ae 40 90    	mov.b     [w14+2], w1
    42c6:	01 48 78    	mov.b     w1, [w0]

000042c8 <.LSM48>:

    if (self == &mdp) {
    42c8:	80 dd 20    	mov.w     #0xdd8, w0
    42ca:	9e 00 78    	mov.w     [w14], w1
    42cc:	80 8f 50    	sub.w     w1, w0, [w15]
    42ce:	07 00 3a    	bra       NZ, 0x42de <.L17>

000042d0 <.LSM49>:
        md_direction(&md1, dir);
    42d0:	ae 40 90    	mov.b     [w14+2], w1
    42d2:	c0 db 20    	mov.w     #0xdbc, w0
    42d4:	ed ff 07    	rcall     0x42b0 <_md_direction>

000042d6 <.LSM50>:
        md_direction(&md2, dir);
    42d6:	ae 40 90    	mov.b     [w14+2], w1
    42d8:	a0 dc 20    	mov.w     #0xdca, w0
    42da:	ea ff 07    	rcall     0x42b0 <_md_direction>
    42dc:	26 00 37    	bra       0x432a <.L14>

000042de <.L17>:
    } else {
        oc_free(self->oc);
    42de:	1e 00 78    	mov.w     [w14], w0
    42e0:	60 00 90    	mov.w     [w0+12], w0
    42e2:	b7 fc 07    	rcall     0x3c52 <_oc_free>

000042e4 <.LSM52>:
        oc_pwm(self->oc, self->pins[dir], &timer5, self->freq, self->speed);
    42e4:	1e 00 78    	mov.w     [w14], w0
    42e6:	10 04 90    	mov.w     [w0+2], w8
    42e8:	1e 00 78    	mov.w     [w14], w0
    42ea:	20 00 90    	mov.w     [w0+4], w0
    42ec:	80 00 eb    	clr.w     w1
    42ee:	52 e8 07    	rcall     0x1394 <___floatunsisf>
    42f0:	2e 41 90    	mov.b     [w14+2], w2
    42f2:	02 81 fb    	ze        w2, w2
    42f4:	9e 01 78    	mov.w     [w14], w3
    42f6:	64 01 41    	add.w     w2, #0x4, w2
    42f8:	02 01 41    	add.w     w2, w2, w2
    42fa:	e3 03 79    	mov.w     [w3+w2], w7
    42fc:	1e 01 78    	mov.w     [w14], w2
    42fe:	62 03 90    	mov.w     [w2+12], w6
    4300:	88 01 78    	mov.w     w8, w3
    4302:	00 02 be    	mov.d     w0, w4
    4304:	42 d6 20    	mov.w     #0xd64, w2
    4306:	87 00 78    	mov.w     w7, w1
    4308:	06 00 78    	mov.w     w6, w0
    430a:	e2 fc 07    	rcall     0x3cd0 <_oc_pwm>

0000430c <.LSM53>:
        OC5CON2 = 0x000F; //synchronize to timer5
    430c:	f0 00 20    	mov.w     #0xf, w0
    430e:	d0 0d 88    	mov.w     w0, 0x1ba

00004310 <.LSM54>:
        OC7CON2 = 0x000F;
    4310:	f0 00 20    	mov.w     #0xf, w0
    4312:	70 0e 88    	mov.w     w0, 0x1ce

00004314 <.LSM55>:
        pin_clear(self->pins[!dir]);
    4314:	2e 40 90    	mov.b     [w14+2], w0
    4316:	00 80 fb    	ze        w0, w0
    4318:	00 00 e9    	dec.w     w0, w0
    431a:	4f 00 de    	lsr.w     w0, #0xf, w0
    431c:	9e 00 78    	mov.w     [w14], w1
    431e:	64 00 40    	add.w     w0, #0x4, w0
    4320:	00 00 40    	add.w     w0, w0, w0
    4322:	61 00 78    	mov.w     [w1+w0], w0
    4324:	75 fb 07    	rcall     0x3a10 <_pin_clear>
    4326:	01 00 37    	bra       0x432a <.L14>

00004328 <.L18>:
    4328:	00 00 00    	nop       

0000432a <.L14>:
    }
}
    432a:	4f 04 78    	mov.w     [--w15], w8
    432c:	00 80 fa    	ulnk      
    432e:	00 00 06    	return    

00004330 <_md_velocity>:

void md_velocity(_MD *self, uint16_t speed, uint8_t dir) {
    4330:	06 00 fa    	lnk       #0x6
    4332:	00 0f 78    	mov.w     w0, [w14]
    4334:	11 07 98    	mov.w     w1, [w14+2]
    4336:	42 47 98    	mov.b     w2, [w14+4]

00004338 <.LSM59>:
    md_speed(self, speed);
    4338:	9e 00 90    	mov.w     [w14+2], w1
    433a:	1e 00 78    	mov.w     [w14], w0
    433c:	95 ff 07    	rcall     0x4268 <_md_speed>

0000433e <.LSM60>:
    md_direction(self, dir);
    433e:	ce 40 90    	mov.b     [w14+4], w1
    4340:	1e 00 78    	mov.w     [w14], w0
    4342:	b6 ff 07    	rcall     0x42b0 <_md_direction>

00004344 <.LSM61>:
}    4344:	00 80 fa    	ulnk      
    4346:	00 00 06    	return    

00004348 <_wait>:


_LED *green_led, *red_led, *blue_led;

void wait(void) {
    4348:	00 00 fa    	lnk       #0x0

0000434a <.LSM1>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    434a:	01 42 80    	mov.w     0x840, w1
    434c:	10 42 80    	mov.w     0x842, w0
    434e:	80 8f 50    	sub.w     w1, w0, [w15]
    4350:	06 00 32    	bra       Z, 0x435e <.L2>

00004352 <.LSM2>:
        last_state = state;
    4352:	00 42 80    	mov.w     0x840, w0
    4354:	10 42 88    	mov.w     w0, 0x842

00004356 <.LSM3>:
        pin_toggle(DIR);
    4356:	90 41 80    	mov.w     0x832, w0
    4358:	71 fb 07    	rcall     0x3a3c <_pin_toggle>

0000435a <.LSM4>:
        led_on(red_led);
    435a:	80 42 80    	mov.w     0x850, w0
    435c:	62 fe 07    	rcall     0x4022 <_led_on>

0000435e <.L2>:
    }

    // Perform state tasks

    // Check for state transitions
    if (timer_flag(&timer2)) {
    435e:	20 d2 20    	mov.w     #0xd22, w0
    4360:	47 f6 07    	rcall     0x2ff0 <_timer_flag>
    4362:	00 00 e0    	cp0.w     w0
    4364:	05 00 32    	bra       Z, 0x4370 <.L3>

00004366 <.LSM6>:
        timer_lower(&timer2);
    4366:	20 d2 20    	mov.w     #0xd22, w0
    4368:	54 f6 07    	rcall     0x3012 <_timer_lower>

0000436a <.LSM7>:
        counter = counter + 1;
    436a:	20 42 80    	mov.w     0x844, w0
    436c:	00 00 e8    	inc.w     w0, w0
    436e:	20 42 88    	mov.w     w0, 0x844

00004370 <.L3>:
    }
    if (counter > countLimit) {
    4370:	21 42 80    	mov.w     0x844, w1
    4372:	30 43 80    	mov.w     0x866, w0
    4374:	80 8f 50    	sub.w     w1, w0, [w15]
    4376:	03 00 36    	bra       LEU, 0x437e <.L4>

00004378 <.LSM9>:
        state = drive;
    4378:	e0 38 24    	mov.w     #0x438e, w0
    437a:	00 42 88    	mov.w     w0, 0x840

0000437c <.LSM10>:
        counter = 0;
    437c:	44 28 ef    	clr.w     0x844

0000437e <.L4>:
    }


    if (state != last_state) {  // if we are leaving the state, do clean up stuff
    437e:	01 42 80    	mov.w     0x840, w1
    4380:	10 42 80    	mov.w     0x842, w0
    4382:	80 8f 50    	sub.w     w1, w0, [w15]
    4384:	02 00 32    	bra       Z, 0x438a <.L1>

00004386 <.LSM12>:
        led_off(red_led);
    4386:	80 42 80    	mov.w     0x850, w0
    4388:	5c fe 07    	rcall     0x4042 <_led_off>

0000438a <.L1>:
    }
}
    438a:	00 80 fa    	ulnk      
    438c:	00 00 06    	return    

0000438e <_drive>:

void drive(void) {
    438e:	00 00 fa    	lnk       #0x0

00004390 <.LSM15>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    4390:	01 42 80    	mov.w     0x840, w1
    4392:	10 42 80    	mov.w     0x842, w0
    4394:	80 8f 50    	sub.w     w1, w0, [w15]
    4396:	04 00 32    	bra       Z, 0x43a0 <.L7>

00004398 <.LSM16>:
        last_state = state;
    4398:	00 42 80    	mov.w     0x840, w0
    439a:	10 42 88    	mov.w     w0, 0x842

0000439c <.LSM17>:
        led_on(green_led);
    439c:	70 42 80    	mov.w     0x84e, w0
    439e:	41 fe 07    	rcall     0x4022 <_led_on>

000043a0 <.L7>:
    }

    // Perform state tasks
    // Step motor
    if (timer_flag(&timer2)) {
    43a0:	20 d2 20    	mov.w     #0xd22, w0
    43a2:	26 f6 07    	rcall     0x2ff0 <_timer_flag>
    43a4:	00 00 e0    	cp0.w     w0
    43a6:	07 00 32    	bra       Z, 0x43b6 <.L8>

000043a8 <.LSM19>:
        timer_lower(&timer2);
    43a8:	20 d2 20    	mov.w     #0xd22, w0
    43aa:	33 f6 07    	rcall     0x3012 <_timer_lower>

000043ac <.LSM20>:
        pin_toggle(STEP);
    43ac:	80 41 80    	mov.w     0x830, w0
    43ae:	46 fb 07    	rcall     0x3a3c <_pin_toggle>

000043b0 <.LSM21>:
        // steps = steps + 1;
        // if (steps >= stepLimit) {
        //     pin_toggle(DIR);
        //     steps = 0;
        // }
        counter = counter + 1;
    43b0:	20 42 80    	mov.w     0x844, w0
    43b2:	00 00 e8    	inc.w     w0, w0
    43b4:	20 42 88    	mov.w     w0, 0x844

000043b6 <.L8>:
    }
    if (counter > countLimit) {
    43b6:	21 42 80    	mov.w     0x844, w1
    43b8:	30 43 80    	mov.w     0x866, w0
    43ba:	80 8f 50    	sub.w     w1, w0, [w15]
    43bc:	03 00 36    	bra       LEU, 0x43c4 <.L9>

000043be <.LSM23>:
        state = wait;
    43be:	80 34 24    	mov.w     #0x4348, w0
    43c0:	00 42 88    	mov.w     w0, 0x840

000043c2 <.LSM24>:
        counter = 0;
    43c2:	44 28 ef    	clr.w     0x844

000043c4 <.L9>:
    }

    // Check for state transitions

    if (state != last_state) {  // if we are leaving the state, do clean up stuff
    43c4:	01 42 80    	mov.w     0x840, w1
    43c6:	10 42 80    	mov.w     0x842, w0
    43c8:	80 8f 50    	sub.w     w1, w0, [w15]
    43ca:	02 00 32    	bra       Z, 0x43d0 <.L6>

000043cc <.LSM26>:
        led_off(green_led);
    43cc:	70 42 80    	mov.w     0x84e, w0
    43ce:	39 fe 07    	rcall     0x4042 <_led_off>

000043d0 <.L6>:
    }
}
    43d0:	00 80 fa    	ulnk      
    43d2:	00 00 06    	return    

000043d4 <_VendorRequests>:

void VendorRequests(void) {
    43d4:	02 00 fa    	lnk       #0x2

000043d6 <.LSM29>:
    WORD temp;
    switch (USB_setup.bRequest) {
    43d6:	80 85 20    	mov.w     #0x858, w0
    43d8:	10 40 90    	mov.b     [w0+1], w0
    43da:	00 80 fb    	ze        w0, w0
    43dc:	00 00 e0    	cp0.w     w0
    43de:	03 00 32    	bra       Z, 0x43e6 <.L13>
    43e0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    43e2:	0b 00 32    	bra       Z, 0x43fa <.L14>
    43e4:	24 00 37    	bra       0x442e <.L16>

000043e6 <.L13>:
        case SET_VALS:
            state = USB_setup.wValue.w;
    43e6:	80 85 20    	mov.w     #0x858, w0
    43e8:	10 00 90    	mov.w     [w0+2], w0
    43ea:	00 42 88    	mov.w     w0, 0x840

000043ec <.LSM31>:
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    43ec:	40 c0 20    	mov.w     #0xc04, w0
    43ee:	80 40 eb    	clr.b     w1
    43f0:	01 48 78    	mov.b     w1, [w0]

000043f2 <.LSM32>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    43f2:	50 c0 20    	mov.w     #0xc05, w0
    43f4:	81 cc b3    	mov.b     #0xc8, w1
    43f6:	01 48 78    	mov.b     w1, [w0]

000043f8 <.LSM33>:
            break;
    43f8:	1d 00 37    	bra       0x4434 <.L11>

000043fa <.L14>:
        case GET_VALS:
            temp.w = val1;
    43fa:	50 42 80    	mov.w     0x84a, w0
    43fc:	00 0f 78    	mov.w     w0, [w14]

000043fe <.LSM35>:
            BD[EP0IN].address[0] = temp.b[0];
    43fe:	30 60 80    	mov.w     0xc06, w0
    4400:	9e 40 78    	mov.b     [w14], w1
    4402:	01 48 78    	mov.b     w1, [w0]

00004404 <.LSM36>:
            BD[EP0IN].address[1] = temp.b[1];
    4404:	30 60 80    	mov.w     0xc06, w0
    4406:	00 00 e8    	inc.w     w0, w0
    4408:	9e 40 90    	mov.b     [w14+1], w1
    440a:	01 48 78    	mov.b     w1, [w0]

0000440c <.LSM37>:
            temp.w = val2;
    440c:	60 42 80    	mov.w     0x84c, w0
    440e:	00 0f 78    	mov.w     w0, [w14]

00004410 <.LSM38>:
            BD[EP0IN].address[2] = temp.b[0];
    4410:	30 60 80    	mov.w     0xc06, w0
    4412:	00 80 e8    	inc2.w    w0, w0
    4414:	9e 40 78    	mov.b     [w14], w1
    4416:	01 48 78    	mov.b     w1, [w0]

00004418 <.LSM39>:
            BD[EP0IN].address[3] = temp.b[1];
    4418:	30 60 80    	mov.w     0xc06, w0
    441a:	63 00 40    	add.w     w0, #0x3, w0
    441c:	9e 40 90    	mov.b     [w14+1], w1
    441e:	01 48 78    	mov.b     w1, [w0]

00004420 <.LSM40>:
            BD[EP0IN].bytecount = 4;    // set EP0 IN byte count to 4
    4420:	40 c0 20    	mov.w     #0xc04, w0
    4422:	41 c0 b3    	mov.b     #0x4, w1
    4424:	01 48 78    	mov.b     w1, [w0]

00004426 <.LSM41>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4426:	50 c0 20    	mov.w     #0xc05, w0
    4428:	81 cc b3    	mov.b     #0xc8, w1
    442a:	01 48 78    	mov.b     w1, [w0]

0000442c <.LSM42>:
            break;            
    442c:	03 00 37    	bra       0x4434 <.L11>

0000442e <.L16>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    442e:	60 c8 bf    	mov.b     0x860, WREG
    4430:	00 04 a0    	bset.b    w0, #0x0
    4432:	60 e8 b7    	mov.b     WREG, 0x860

00004434 <.L11>:
    }
}
    4434:	00 80 fa    	ulnk      
    4436:	00 00 06    	return    

00004438 <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    4438:	00 00 fa    	lnk       #0x0

0000443a <.LSM46>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    443a:	60 c8 bf    	mov.b     0x860, WREG
    443c:	00 04 a0    	bset.b    w0, #0x0
    443e:	60 e8 b7    	mov.b     WREG, 0x860

00004440 <.LSM47>:
    }
}
    4440:	00 80 fa    	ulnk      
    4442:	00 00 06    	return    

00004444 <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    4444:	00 00 fa    	lnk       #0x0

00004446 <.LSM49>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4446:	60 c8 bf    	mov.b     0x860, WREG
    4448:	00 04 a0    	bset.b    w0, #0x0
    444a:	60 e8 b7    	mov.b     WREG, 0x860

0000444c <.LSM50>:
    }
}
    444c:	00 80 fa    	ulnk      
    444e:	00 00 06    	return    

00004450 <_main>:

int16_t main(void) {
    4450:	00 00 fa    	lnk       #0x0

00004452 <.LSM52>:
    init_clock();
    4452:	00 10 20    	mov.w     #0x100, w0
    4454:	20 3a 88    	mov.w     w0, 0x744

00004456 <.LSM53>:
    init_ui();
    4456:	83 fd 07    	rcall     0x3f5e <_init_ui>

00004458 <.LSM54>:
    init_spi();
    4458:	5d f6 07    	rcall     0x3114 <_init_spi>

0000445a <.LSM55>:
    init_oc();
    445a:	8b fb 07    	rcall     0x3b72 <_init_oc>

0000445c <.LSM56>:
    init_pin();
    445c:	00 f9 07    	rcall     0x365e <_init_pin>

0000445e <.LSM57>:
    init_uart();
    445e:	9c ea 07    	rcall     0x1998 <_init_uart>

00004460 <.LSM58>:
    init_timer();
    4460:	6f f4 07    	rcall     0x2d40 <_init_timer>

00004462 <.LSM59>:
    init_md();
    4462:	81 fe 07    	rcall     0x4166 <_init_md>

00004464 <.LSM60>:

    led_on(&led1);//LED to tell if it is in run mode
    4464:	00 80 20    	mov.w     #0x800, w0
    4466:	dd fd 07    	rcall     0x4022 <_led_on>

00004468 <.LSM61>:

    timer_setPeriod(&timer2, .001);
    4468:	f2 26 21    	mov.w     #0x126f, w2
    446a:	33 a8 23    	mov.w     #0x3a83, w3
    446c:	20 d2 20    	mov.w     #0xd22, w0
    446e:	d3 f4 07    	rcall     0x2e16 <_timer_setPeriod>

00004470 <.LSM62>:
    timer_start(&timer2);
    4470:	20 d2 20    	mov.w     #0xd22, w0
    4472:	a0 f5 07    	rcall     0x2fb4 <_timer_start>

00004474 <.LSM63>:

    // Comment these pins later
    STEP = &D[0];
    4474:	e0 86 20    	mov.w     #0x86e, w0
    4476:	80 41 88    	mov.w     w0, 0x830

00004478 <.LSM64>:
    DIR = &D[1];
    4478:	40 88 20    	mov.w     #0x884, w0
    447a:	90 41 88    	mov.w     w0, 0x832

0000447c <.LSM65>:
    SLP = &D[2];
    447c:	a0 89 20    	mov.w     #0x89a, w0
    447e:	a0 41 88    	mov.w     w0, 0x834

00004480 <.LSM66>:
    ENABLE = &D[3];
    4480:	00 8b 20    	mov.w     #0x8b0, w0
    4482:	b0 41 88    	mov.w     w0, 0x836

00004484 <.LSM67>:
    PFD = &D[4];
    4484:	60 8c 20    	mov.w     #0x8c6, w0
    4486:	c0 41 88    	mov.w     w0, 0x838

00004488 <.LSM68>:
    RST = &D[5];
    4488:	c0 8d 20    	mov.w     #0x8dc, w0
    448a:	d0 41 88    	mov.w     w0, 0x83a

0000448c <.LSM69>:
    MS1 = &D[6];
    448c:	20 8f 20    	mov.w     #0x8f2, w0
    448e:	e0 41 88    	mov.w     w0, 0x83c

00004490 <.LSM70>:
    MS2 = &D[7];
    4490:	80 90 20    	mov.w     #0x908, w0
    4492:	f0 41 88    	mov.w     w0, 0x83e

00004494 <.LSM71>:

    pin_digitalOut(STEP);
    4494:	80 41 80    	mov.w     0x830, w0
    4496:	4a fa 07    	rcall     0x392c <_pin_digitalOut>

00004498 <.LSM72>:
    pin_digitalOut(DIR);
    4498:	90 41 80    	mov.w     0x832, w0
    449a:	48 fa 07    	rcall     0x392c <_pin_digitalOut>

0000449c <.LSM73>:
    pin_digitalOut(SLP);
    449c:	a0 41 80    	mov.w     0x834, w0
    449e:	46 fa 07    	rcall     0x392c <_pin_digitalOut>

000044a0 <.LSM74>:
    pin_digitalOut(ENABLE);
    44a0:	b0 41 80    	mov.w     0x836, w0
    44a2:	44 fa 07    	rcall     0x392c <_pin_digitalOut>

000044a4 <.LSM75>:
    pin_digitalOut(PFD);
    44a4:	c0 41 80    	mov.w     0x838, w0
    44a6:	42 fa 07    	rcall     0x392c <_pin_digitalOut>

000044a8 <.LSM76>:
    pin_digitalOut(RST);
    44a8:	d0 41 80    	mov.w     0x83a, w0
    44aa:	40 fa 07    	rcall     0x392c <_pin_digitalOut>

000044ac <.LSM77>:
    pin_digitalOut(MS1);
    44ac:	e0 41 80    	mov.w     0x83c, w0
    44ae:	3e fa 07    	rcall     0x392c <_pin_digitalOut>

000044b0 <.LSM78>:
    pin_digitalOut(MS2);
    44b0:	f0 41 80    	mov.w     0x83e, w0
    44b2:	3c fa 07    	rcall     0x392c <_pin_digitalOut>

000044b4 <.LSM79>:

    pin_clear(STEP);
    44b4:	80 41 80    	mov.w     0x830, w0
    44b6:	ac fa 07    	rcall     0x3a10 <_pin_clear>

000044b8 <.LSM80>:
    pin_set(DIR);
    44b8:	90 41 80    	mov.w     0x832, w0
    44ba:	95 fa 07    	rcall     0x39e6 <_pin_set>

000044bc <.LSM81>:
    pin_set(SLP);
    44bc:	a0 41 80    	mov.w     0x834, w0
    44be:	93 fa 07    	rcall     0x39e6 <_pin_set>

000044c0 <.LSM82>:
    pin_clear(ENABLE);
    44c0:	b0 41 80    	mov.w     0x836, w0
    44c2:	a6 fa 07    	rcall     0x3a10 <_pin_clear>

000044c4 <.LSM83>:
    pin_clear(PFD);
    44c4:	c0 41 80    	mov.w     0x838, w0
    44c6:	a4 fa 07    	rcall     0x3a10 <_pin_clear>

000044c8 <.LSM84>:
    pin_set(RST);
    44c8:	d0 41 80    	mov.w     0x83a, w0
    44ca:	8d fa 07    	rcall     0x39e6 <_pin_set>

000044cc <.LSM85>:
    pin_clear(MS1);
    44cc:	e0 41 80    	mov.w     0x83c, w0
    44ce:	a0 fa 07    	rcall     0x3a10 <_pin_clear>

000044d0 <.LSM86>:
    pin_clear(MS2);
    44d0:	f0 41 80    	mov.w     0x83e, w0
    44d2:	9e fa 07    	rcall     0x3a10 <_pin_clear>

000044d4 <.LSM87>:

    // InitUSB();                              // initialize the USB registers and serial interface engine
    // while (USB_USWSTAT!=CONFIG_STATE) {     // while the peripheral is not configured...
    //     ServiceUSB();                       // ...service USB requests
    // }

    green_led = &led2;
    44d4:	80 80 20    	mov.w     #0x808, w0
    44d6:	70 42 88    	mov.w     w0, 0x84e

000044d8 <.LSM88>:
    red_led = &led1;
    44d8:	00 80 20    	mov.w     #0x800, w0
    44da:	80 42 88    	mov.w     w0, 0x850

000044dc <.LSM89>:
    blue_led = &led3;
    44dc:	00 81 20    	mov.w     #0x810, w0
    44de:	90 42 88    	mov.w     w0, 0x852

000044e0 <.LSM90>:

    state = wait;
    44e0:	80 34 24    	mov.w     #0x4348, w0
    44e2:	00 42 88    	mov.w     w0, 0x840

000044e4 <.LSM91>:
    last_state = (STATE_HANDLER_T)NULL;
    44e4:	42 28 ef    	clr.w     0x842

000044e6 <.L20>:

    while (1) {
        state();
    44e6:	00 42 80    	mov.w     0x840, w0
    44e8:	00 00 01    	call      w0

000044ea <.LSM93>:
    }
    44ea:	fd ff 37    	bra       0x44e6 <.L20>
Disassembly of section .dinit:

000044ec <.dinit>:
    44ec:	30 08 00    	nop       
    44ee:	24 00 00    	nop       
    44f0:	80 00 00    	nop       
    44f2:	66 08 00    	nop       
    44f4:	04 00 00    	nop       
    44f6:	82 00 00    	nop       
    44f8:	d0 07 d0    	sl.w      [++w0], w15
    44fa:	00 00 00    	nop       
    44fc:	e4 0b 00    	nop       
    44fe:	10 00 00    	nop       
    4500:	82 00 00    	nop       
    4502:	bd 37 86    	mov.w     0xc6f6, w13
    4504:	33 bd 37    	bra       0xffffbf6c
    4506:	06 35 bd    	subr.w    0x1506
    4508:	37 86 36    	bra       LEU, 0xffff5178
    450a:	bd 37 86    	mov.w     0xc6f6, w13
    450c:	37 00 00    	nop       
    450e:	0c 0d 00    	nop       
    4510:	6e 00 00    	nop       
    4512:	80 00 00    	nop       
    4514:	00 08 00    	nop       
    4516:	30 00 00    	nop       
    4518:	80 00 00    	nop       
    451a:	6e 08 00    	nop       
    451c:	b8 01 00    	nop       
    451e:	80 00 00    	nop       
    4520:	7a 0d 00    	nop       
    4522:	42 00 00    	nop       
    4524:	80 00 00    	nop       
    4526:	42 0b 00    	nop       
    4528:	a2 00 00    	nop       
    452a:	80 00 00    	nop       
    452c:	26 0a 00    	nop       
    452e:	1c 01 00    	nop       
    4530:	80 00 00    	nop       
    4532:	6a 08 00    	nop       
    4534:	04 00 00    	nop       
    4536:	80 00 00    	nop       
    4538:	80 0c 00    	nop       
    453a:	8c 00 00    	nop       
    453c:	80 00 00    	nop       
    453e:	00 0c 00    	nop       
    4540:	80 00 00    	nop       
    4542:	80 00 00    	nop       
    4544:	54 08 00    	nop       
    4546:	12 00 00    	nop       
    4548:	80 00 00    	nop       
    454a:	bc 0d 00    	nop       
    454c:	2a 00 00    	nop       
    454e:	80 00 00    	nop       
    4550:	00 00 00    	nop       
Disassembly of section .text:

00004552 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    4552:	02 00 fa    	lnk       #0x2
    4554:	00 0f 78    	mov.w     w0, [w14]

00004556 <.LSM1>:
    v ^= v >> 8;
    4556:	1e 00 78    	mov.w     [w14], w0
    4558:	48 00 de    	lsr.w     w0, #0x8, w0
    455a:	1e 0f 68    	xor.w     w0, [w14], [w14]

0000455c <.LSM2>:
    v ^= v >> 4;
    455c:	1e 00 78    	mov.w     [w14], w0
    455e:	44 00 de    	lsr.w     w0, #0x4, w0
    4560:	1e 0f 68    	xor.w     w0, [w14], [w14]

00004562 <.LSM3>:
    v ^= v >> 2;
    4562:	1e 00 78    	mov.w     [w14], w0
    4564:	42 00 de    	lsr.w     w0, #0x2, w0
    4566:	1e 0f 68    	xor.w     w0, [w14], [w14]

00004568 <.LSM4>:
    v ^= v >> 1;
    4568:	1e 00 78    	mov.w     [w14], w0
    456a:	00 00 d1    	lsr.w     w0, w0
    456c:	1e 0f 68    	xor.w     w0, [w14], [w14]

0000456e <.LSM5>:
    return v & 1;
    456e:	1e 00 78    	mov.w     [w14], w0
    4570:	00 40 78    	mov.b     w0, w0
    4572:	61 40 60    	and.b     w0, #0x1, w0

00004574 <.LSM6>:
}
    4574:	00 80 fa    	ulnk      
    4576:	00 00 06    	return    
Disassembly of section .isr:

00004578 <__DefaultInterrupt>:
    4578:	00 40 da    	.pword 0xda4000
    457a:	00 00 fe    	reset     
