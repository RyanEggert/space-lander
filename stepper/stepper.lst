
stepper.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	4f e0 20    	mov.w     #0xe04, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	40 74 24    	mov.w     #0x4744, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	9c 46 02    	call      0x469c <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	60 08 20    	mov.w     #0x86, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	da 45 04    	goto      0x45da <_drive>
    11e4:	00 00 00 
    11e6:	94 45 04    	goto      0x4594 <_wait>
    11e8:	00 00 00 
    11ea:	d0 35 04    	goto      0x35d0 <___digitalRead>
    11ec:	00 00 00 
    11ee:	8c 35 04    	goto      0x358c <___digitalWrite>
    11f0:	00 00 00 
    11f2:	f2 35 04    	goto      0x35f2 <___analogRead>
    11f4:	00 00 00 
    11f6:	7c 3a 04    	goto      0x3a7c <___pwmWrite>
    11f8:	00 00 00 
    11fa:	4e 3a 04    	goto      0x3a4e <___pwmRead>
    11fc:	00 00 00 
    11fe:	e6 3a 04    	goto      0x3ae6 <___servoWrite>
    1200:	00 00 00 
    1202:	b4 3a 04    	goto      0x3ab4 <___servoRead>
    1204:	00 00 00 
    1206:	e4 15 04    	goto      0x15e4 <___putc_nobuffer>
    1208:	00 00 00 
    120a:	26 16 04    	goto      0x1626 <___putc_buffer>
    120c:	00 00 00 
    120e:	08 16 04    	goto      0x1608 <___getc_nobuffer>
    1210:	00 00 00 
    1212:	1e 17 04    	goto      0x171e <___getc_buffer>
    1214:	00 00 00 

00001216 <___subsf3>:
    1216:	03 f0 a2    	btg.w     w3, #0xf

00001218 <___addsf3>:
    1218:	88 9f be    	mov.d     w8, [w15++]
    121a:	8a 9f be    	mov.d     w10, [w15++]
    121c:	8c 1f 78    	mov.w     w12, [w15++]
    121e:	f9 00 07    	rcall     0x1412 <__funpack2>
    1220:	00 01 33    	bra       N, 0x1422 <__fPropagateNaN>
    1222:	64 50 e1    	cp.w      w10, #0x4
    1224:	4f 00 32    	bra       Z, 0x12c4 <aisinfinite>

00001226 <checkspecialb>:
    1226:	64 20 e1    	cp.w      w4, #0x4
    1228:	52 00 32    	bra       Z, 0x12ce <return2>
    122a:	03 82 6c    	xor.w     w9, w3, w4
    122c:	07 00 3b    	bra       NN, 0x123c <getsign>
    122e:	09 05 d0    	sl.w      w9, w10
    1230:	03 06 d0    	sl.w      w3, w12
    1232:	82 0f 54    	sub.w     w8, w2, [w15]
    1234:	0c 06 5d    	subb.w    w10, w12, w12
    1236:	02 00 39    	bra       NC, 0x123c <getsign>
    1238:	02 00 32    	bra       Z, 0x123e <gotsign>
    123a:	89 01 78    	mov.w     w9, w3

0000123c <getsign>:
    123c:	03 06 78    	mov.w     w3, w12

0000123e <gotsign>:
    123e:	85 82 55    	sub.w     w11, w5, w5
    1240:	04 00 3d    	bra       GE, 0x124a <expcanonical>
    1242:	00 03 fd    	exch      w0, w6
    1244:	81 03 fd    	exch      w1, w7
    1246:	85 02 ea    	neg.w     w5, w5
    1248:	8b 85 42    	add.w     w5, w11, w11

0000124a <expcanonical>:
    124a:	84 0f 72    	ior.w     w4, w4, [w15]
    124c:	02 00 3b    	bra       NN, 0x1252 <nonegate>
    124e:	60 00 10    	subr.w    w0, #0x0, w0
    1250:	e0 80 18    	subbr.w   w1, #0x0, w1

00001252 <nonegate>:
    1252:	60 11 b8    	mul.uu    w2, #0x0, w2
    1254:	00 05 eb    	clr.w     w10
    1256:	7a 28 e1    	cp.w      w5, #0x1a
    1258:	0a 00 39    	bra       NC, 0x126e <aligniter>
    125a:	06 00 78    	mov.w     w6, w0
    125c:	c7 5d dd    	sl.w      w11, #0x7, w11
    125e:	f7 07 b2    	and.w     #0x7f, w7
    1260:	87 80 75    	ior.w     w11, w7, w1
    1262:	2d 00 37    	bra       0x12be <signoff>

00001264 <align>:
    1264:	82 81 71    	ior.w     w3, w2, w3
    1266:	0a 01 78    	mov.w     w10, w2
    1268:	61 05 60    	and.w     w0, #0x1, w10
    126a:	81 80 d1    	asr.w     w1, w1
    126c:	00 80 d3    	rrc.w     w0, w0

0000126e <aligniter>:
    126e:	85 02 e9    	dec.w     w5, w5
    1270:	f9 ff 3b    	bra       NN, 0x1264 <align>

00001272 <aligned>:
    1272:	06 04 40    	add.w     w0, w6, w8
    1274:	87 84 48    	addc.w    w1, w7, w9
    1276:	02 00 3b    	bra       NN, 0x127c <normalizesum>
    1278:	60 04 14    	subr.w    w8, #0x0, w8
    127a:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000127c <normalizesum>:
    127c:	09 88 a3    	btst.z    w9, #0x8
    127e:	07 00 32    	bra       Z, 0x128e <checknormal>
    1280:	8a 81 71    	ior.w     w3, w10, w3
    1282:	82 81 71    	ior.w     w3, w2, w3
    1284:	61 01 64    	and.w     w8, #0x1, w2
    1286:	89 04 d1    	lsr.w     w9, w9
    1288:	08 84 d3    	rrc.w     w8, w8
    128a:	8b 05 e8    	inc.w     w11, w11
    128c:	17 00 37    	bra       0x12bc <round>

0000128e <checknormal>:
    128e:	09 78 a3    	btst.z    w9, #0x7
    1290:	13 00 3a    	bra       NZ, 0x12b8 <discardguard>

00001292 <underflow>:
    1292:	0b 00 e0    	cp0.w     w11
    1294:	13 00 34    	bra       LE, 0x12bc <round>
    1296:	8b 05 e9    	dec.w     w11, w11
    1298:	08 04 44    	add.w     w8, w8, w8
    129a:	89 84 4c    	addc.w    w9, w9, w9
    129c:	0a 44 74    	ior.b     w8, w10, w8
    129e:	09 78 a3    	btst.z    w9, #0x7
    12a0:	0d 00 3a    	bra       NZ, 0x12bc <round>

000012a2 <normalizeloop>:
    12a2:	0b 00 e0    	cp0.w     w11
    12a4:	07 00 34    	bra       LE, 0x12b4 <normalizeexit>
    12a6:	8b 05 e9    	dec.w     w11, w11
    12a8:	08 04 44    	add.w     w8, w8, w8
    12aa:	89 84 4c    	addc.w    w9, w9, w9
    12ac:	01 00 3a    	bra       NZ, 0x12b0 <normalizetest>
    12ae:	0b 00 20    	mov.w     #0x0, w11

000012b0 <normalizetest>:
    12b0:	09 78 a3    	btst.z    w9, #0x7
    12b2:	f7 ff 32    	bra       Z, 0x12a2 <normalizeloop>

000012b4 <normalizeexit>:
    12b4:	00 01 eb    	clr.w     w2
    12b6:	02 00 37    	bra       0x12bc <round>

000012b8 <discardguard>:
    12b8:	82 81 71    	ior.w     w3, w2, w3
    12ba:	0a 01 78    	mov.w     w10, w2

000012bc <round>:
    12bc:	6f 00 07    	rcall     0x139c <__fpack>

000012be <signoff>:
    12be:	0c f0 a7    	btsc.w    w12, #0xf
    12c0:	01 f0 a0    	bset.w    w1, #0xf
    12c2:	b8 00 37    	bra       0x1434 <__fbopExit>

000012c4 <aisinfinite>:
    12c4:	64 20 e1    	cp.w      w4, #0x4
    12c6:	02 00 3a    	bra       NZ, 0x12cc <return8>
    12c8:	83 8f 6c    	xor.w     w9, w3, [w15]
    12ca:	b8 00 33    	bra       N, 0x143c <__fbopReturnNaN>

000012cc <return8>:
    12cc:	08 01 be    	mov.d     w8, w2

000012ce <return2>:
    12ce:	02 00 be    	mov.d     w2, w0
    12d0:	b1 00 37    	bra       0x1434 <__fbopExit>

000012d2 <___divsf3>:
    12d2:	88 9f be    	mov.d     w8, [w15++]
    12d4:	8a 9f be    	mov.d     w10, [w15++]
    12d6:	8c 1f 78    	mov.w     w12, [w15++]
    12d8:	9c 00 07    	rcall     0x1412 <__funpack2>
    12da:	a3 00 33    	bra       N, 0x1422 <__fPropagateNaN>
    12dc:	03 86 6c    	xor.w     w9, w3, w12
    12de:	64 50 e1    	cp.w      w10, #0x4
    12e0:	2e 00 32    	bra       Z, 0x133e <aisinfinite>
    12e2:	64 20 e1    	cp.w      w4, #0x4
    12e4:	33 00 32    	bra       Z, 0x134c <returnZero>
    12e6:	61 50 e1    	cp.w      w10, #0x1
    12e8:	2f 00 32    	bra       Z, 0x1348 <aiszero>
    12ea:	61 20 e1    	cp.w      w4, #0x1
    12ec:	31 00 32    	bra       Z, 0x1350 <returnInf>

000012ee <finitenonzero>:
    12ee:	85 85 55    	sub.w     w11, w5, w11
    12f0:	eb 07 b0    	add.w     #0x7e, w11
    12f2:	09 00 20    	mov.w     #0x0, w9
    12f4:	08 04 20    	mov.w     #0x40, w8
    12f6:	05 00 37    	bra       0x1302 <diventry>

000012f8 <divnext>:
    12f8:	08 04 44    	add.w     w8, w8, w8
    12fa:	89 84 4c    	addc.w    w9, w9, w9
    12fc:	0a 00 31    	bra       C, 0x1312 <divdone>

000012fe <divloop>:
    12fe:	06 03 43    	add.w     w6, w6, w6
    1300:	87 83 4b    	addc.w    w7, w7, w7

00001302 <diventry>:
    1302:	00 01 53    	sub.w     w6, w0, w2
    1304:	81 81 5b    	subb.w    w7, w1, w3
    1306:	f8 ff 33    	bra       N, 0x12f8 <divnext>
    1308:	02 03 be    	mov.d     w2, w6
    130a:	08 00 a0    	bset.w    w8, #0x0
    130c:	08 04 44    	add.w     w8, w8, w8
    130e:	89 84 4c    	addc.w    w9, w9, w9
    1310:	f6 ff 39    	bra       NC, 0x12fe <divloop>

00001312 <divdone>:
    1312:	c6 39 dd    	sl.w      w7, #0x6, w3
    1314:	83 01 73    	ior.w     w6, w3, w3
    1316:	01 00 32    	bra       Z, 0x131a <stickyok>
    1318:	13 00 20    	mov.w     #0x1, w3

0000131a <stickyok>:
    131a:	89 04 d1    	lsr.w     w9, w9
    131c:	08 84 d3    	rrc.w     w8, w8
    131e:	09 98 a3    	btst.z    w9, #0x9
    1320:	05 00 32    	bra       Z, 0x132c <guardused>
    1322:	08 00 a7    	btsc.w    w8, #0x0
    1324:	03 00 a0    	bset.w    w3, #0x0
    1326:	89 04 d1    	lsr.w     w9, w9
    1328:	08 84 d3    	rrc.w     w8, w8
    132a:	8b 05 e8    	inc.w     w11, w11

0000132c <guardused>:
    132c:	89 04 d1    	lsr.w     w9, w9
    132e:	08 84 d3    	rrc.w     w8, w8
    1330:	00 01 eb    	clr.w     w2
    1332:	02 81 d2    	rlc.w     w2, w2
    1334:	33 00 07    	rcall     0x139c <__fpack>

00001336 <return0>:
    1336:	01 f0 a1    	bclr.w    w1, #0xf
    1338:	0c f0 a7    	btsc.w    w12, #0xf
    133a:	01 f0 a0    	bset.w    w1, #0xf
    133c:	7b 00 37    	bra       0x1434 <__fbopExit>

0000133e <aisinfinite>:
    133e:	64 20 e1    	cp.w      w4, #0x4
    1340:	7d 00 32    	bra       Z, 0x143c <__fbopReturnNaN>

00001342 <return8>:
    1342:	08 01 be    	mov.d     w8, w2

00001344 <return2>:
    1344:	02 00 be    	mov.d     w2, w0
    1346:	f7 ff 37    	bra       0x1336 <return0>

00001348 <aiszero>:
    1348:	61 20 e1    	cp.w      w4, #0x1
    134a:	78 00 32    	bra       Z, 0x143c <__fbopReturnNaN>

0000134c <returnZero>:
    134c:	60 00 b8    	mul.uu    w0, #0x0, w0
    134e:	f3 ff 37    	bra       0x1336 <return0>

00001350 <returnInf>:
    1350:	00 00 20    	mov.w     #0x0, w0
    1352:	01 f8 27    	mov.w     #0x7f80, w1
    1354:	f0 ff 37    	bra       0x1336 <return0>

00001356 <___eqsf2>:
    1356:	14 00 20    	mov.w     #0x1, w4
    1358:	b8 00 37    	bra       0x14ca <__fcompare>

0000135a <___gesf2>:
    135a:	f4 ff 2f    	mov.w     #0xffff, w4
    135c:	b6 00 37    	bra       0x14ca <__fcompare>

0000135e <___fixunssfsi>:
    135e:	00 01 be    	mov.d     w0, w2
    1360:	43 00 07    	rcall     0x13e8 <__funpack>
    1362:	04 70 a7    	btsc.w    w4, #0x7
    1364:	03 f0 a1    	bclr.w    w3, #0xf
    1366:	03 f8 a3    	btst.z    w3, #0xf
    1368:	13 00 3a    	bra       NZ, 0x1390 <returnzero>
    136a:	65 09 b1    	sub.w     #0x96, w5
    136c:	10 00 32    	bra       Z, 0x138e <exit>
    136e:	09 00 35    	bra       LT, 0x1382 <shiftright>
    1370:	69 28 e1    	cp.w      w5, #0x9
    1372:	02 00 35    	bra       LT, 0x1378 <shiftleft>
    1374:	01 00 28    	mov.w     #0x8000, w1
    1376:	00 00 05    	retlw.w   #0x0, w0

00001378 <shiftleft>:
    1378:	00 00 40    	add.w     w0, w0, w0
    137a:	81 80 48    	addc.w    w1, w1, w1
    137c:	85 02 e9    	dec.w     w5, w5
    137e:	fc ff 3a    	bra       NZ, 0x1378 <shiftleft>
    1380:	00 00 06    	return    

00001382 <shiftright>:
    1382:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1384:	05 00 35    	bra       LT, 0x1390 <returnzero>

00001386 <shiftrightloop>:
    1386:	81 00 d1    	lsr.w     w1, w1
    1388:	00 80 d3    	rrc.w     w0, w0
    138a:	85 02 e8    	inc.w     w5, w5
    138c:	fc ff 3a    	bra       NZ, 0x1386 <shiftrightloop>

0000138e <exit>:
    138e:	00 00 06    	return    

00001390 <returnzero>:
    1390:	80 00 eb    	clr.w     w1
    1392:	00 00 05    	retlw.w   #0x0, w0

00001394 <___floatunsisf>:
    1394:	60 11 b8    	mul.uu    w2, #0x0, w2
    1396:	b4 00 37    	bra       0x1500 <___floatundisf>

00001398 <___nesf2>:
    1398:	04 00 20    	mov.w     #0x0, w4
    139a:	97 00 37    	bra       0x14ca <__fcompare>

0000139c <__fpack>:
    139c:	81 00 20    	mov.w     #0x8, w1
    139e:	61 80 55    	sub.w     w11, #0x1, w0
    13a0:	0b 00 3d    	bra       GE, 0x13b8 <notsubnormal>
    13a2:	0b 00 20    	mov.w     #0x0, w11
    13a4:	61 fe 2f    	mov.w     #0xffe6, w1
    13a6:	01 00 e1    	cp.w      w0, w1
    13a8:	1d 00 34    	bra       LE, 0x13e4 <zerosig>

000013aa <subnormal>:
    13aa:	82 81 71    	ior.w     w3, w2, w3
    13ac:	61 01 64    	and.w     w8, #0x1, w2
    13ae:	89 04 d1    	lsr.w     w9, w9
    13b0:	08 84 d3    	rrc.w     w8, w8
    13b2:	00 00 e8    	inc.w     w0, w0
    13b4:	fa ff 3a    	bra       NZ, 0x13aa <subnormal>
    13b6:	71 00 20    	mov.w     #0x7, w1

000013b8 <notsubnormal>:
    13b8:	61 00 64    	and.w     w8, #0x1, w0
    13ba:	03 00 70    	ior.w     w0, w3, w0
    13bc:	02 00 60    	and.w     w0, w2, w0
    13be:	09 00 32    	bra       Z, 0x13d2 <packupandgo>
    13c0:	61 04 44    	add.w     w8, #0x1, w8
    13c2:	e0 84 4c    	addc.w    w9, #0x0, w9
    13c4:	09 88 a5    	btst.z    w9, w1
    13c6:	05 00 32    	bra       Z, 0x13d2 <packupandgo>
    13c8:	8b 05 e8    	inc.w     w11, w11
    13ca:	68 08 e1    	cp.w      w1, #0x8
    13cc:	02 00 3a    	bra       NZ, 0x13d2 <packupandgo>
    13ce:	89 04 d1    	lsr.w     w9, w9
    13d0:	08 84 d3    	rrc.w     w8, w8

000013d2 <packupandgo>:
    13d2:	f2 0f 20    	mov.w     #0xff, w2
    13d4:	02 58 e1    	cp.w      w11, w2
    13d6:	05 00 3d    	bra       GE, 0x13e2 <overflow>
    13d8:	c7 5d dd    	sl.w      w11, #0x7, w11
    13da:	f9 07 b2    	and.w     #0x7f, w9
    13dc:	89 80 75    	ior.w     w11, w9, w1
    13de:	08 00 78    	mov.w     w8, w0
    13e0:	00 00 06    	return    

000013e2 <overflow>:
    13e2:	0b f8 27    	mov.w     #0x7f80, w11

000013e4 <zerosig>:
    13e4:	8b 00 78    	mov.w     w11, w1
    13e6:	00 00 05    	retlw.w   #0x0, w0

000013e8 <__funpack>:
    13e8:	c7 0a de    	lsr.w     w1, #0x7, w5
    13ea:	f1 07 b2    	and.w     #0x7f, w1
    13ec:	f5 0f b2    	and.w     #0xff, w5
    13ee:	08 00 32    	bra       Z, 0x1400 <zeroorsub>
    13f0:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13f2:	02 00 32    	bra       Z, 0x13f8 <nanorinf>

000013f4 <finitereturn>:
    13f4:	01 70 a0    	bset.w    w1, #0x7
    13f6:	24 00 05    	retlw.w   #0x2, w4

000013f8 <nanorinf>:
    13f8:	81 0f 70    	ior.w     w0, w1, [w15]
    13fa:	01 00 32    	bra       Z, 0x13fe <infinite>
    13fc:	04 08 05    	retlw.w   #0x80, w4

000013fe <infinite>:
    13fe:	44 00 05    	retlw.w   #0x4, w4

00001400 <zeroorsub>:
    1400:	81 0f 70    	ior.w     w0, w1, [w15]
    1402:	02 00 3a    	bra       NZ, 0x1408 <subnormal>
    1404:	14 00 05    	retlw.w   #0x1, w4

00001406 <normalize>:
    1406:	85 02 e9    	dec.w     w5, w5

00001408 <subnormal>:
    1408:	00 00 40    	add.w     w0, w0, w0
    140a:	81 c0 48    	addc.b    w1, w1, w1
    140c:	fc ff 3b    	bra       NN, 0x1406 <normalize>
    140e:	01 70 a0    	bset.w    w1, #0x7
    1410:	24 00 05    	retlw.w   #0x2, w4

00001412 <__funpack2>:
    1412:	00 04 be    	mov.d     w0, w8
    1414:	e9 ff 07    	rcall     0x13e8 <__funpack>
    1416:	00 03 be    	mov.d     w0, w6
    1418:	04 05 be    	mov.d     w4, w10
    141a:	02 00 be    	mov.d     w2, w0
    141c:	e5 ff 07    	rcall     0x13e8 <__funpack>
    141e:	84 4f 75    	ior.b     w10, w4, [w15]
    1420:	00 00 06    	return    

00001422 <__fPropagateNaN>:
    1422:	02 00 be    	mov.d     w2, w0
    1424:	64 50 e1    	cp.w      w10, #0x4
    1426:	05 00 36    	bra       LEU, 0x1432 <return0>
    1428:	64 20 e1    	cp.w      w4, #0x4
    142a:	02 00 36    	bra       LEU, 0x1430 <return8>
    142c:	09 68 a3    	btst.z    w9, #0x6
    142e:	01 00 3a    	bra       NZ, 0x1432 <return0>

00001430 <return8>:
    1430:	08 00 be    	mov.d     w8, w0

00001432 <return0>:
    1432:	01 60 a0    	bset.w    w1, #0x6

00001434 <__fbopExit>:
    1434:	4f 06 78    	mov.w     [--w15], w12
    1436:	4f 05 be    	mov.d     [--w15], w10
    1438:	4f 04 be    	mov.d     [--w15], w8
    143a:	00 00 06    	return    

0000143c <__fbopReturnNaN>:
    143c:	f0 ff 2f    	mov.w     #0xffff, w0
    143e:	f1 ff 27    	mov.w     #0x7fff, w1
    1440:	f9 ff 37    	bra       0x1434 <__fbopExit>

00001442 <___mulsf3>:
    1442:	88 9f be    	mov.d     w8, [w15++]
    1444:	8a 9f be    	mov.d     w10, [w15++]
    1446:	8c 1f 78    	mov.w     w12, [w15++]
    1448:	e4 ff 07    	rcall     0x1412 <__funpack2>
    144a:	eb ff 33    	bra       N, 0x1422 <__fPropagateNaN>
    144c:	03 86 6c    	xor.w     w9, w3, w12
    144e:	64 50 e1    	cp.w      w10, #0x4
    1450:	24 00 32    	bra       Z, 0x149a <aisinfinite>
    1452:	64 20 e1    	cp.w      w4, #0x4
    1454:	27 00 32    	bra       Z, 0x14a4 <bisinfinite>
    1456:	61 50 e1    	cp.w      w10, #0x1
    1458:	22 00 32    	bra       Z, 0x149e <return8>
    145a:	61 20 e1    	cp.w      w4, #0x1
    145c:	21 00 32    	bra       Z, 0x14a0 <return2>
    145e:	8b 85 42    	add.w     w5, w11, w11
    1460:	eb 07 b1    	sub.w     #0x7e, w11
    1462:	01 34 b8    	mul.uu    w6, w1, w8
    1464:	00 3a b8    	mul.uu    w7, w0, w4
    1466:	08 04 42    	add.w     w4, w8, w8
    1468:	89 84 4a    	addc.w    w5, w9, w9
    146a:	01 3a b8    	mul.uu    w7, w1, w4
    146c:	00 30 b8    	mul.uu    w6, w0, w0
    146e:	88 80 40    	add.w     w1, w8, w1
    1470:	09 01 4a    	addc.w    w4, w9, w2
    1472:	04 00 33    	bra       N, 0x147c <formsticky>
    1474:	00 00 40    	add.w     w0, w0, w0
    1476:	81 80 48    	addc.w    w1, w1, w1
    1478:	02 01 49    	addc.w    w2, w2, w2
    147a:	8b 05 e9    	dec.w     w11, w11

0000147c <formsticky>:
    147c:	c9 09 dd    	sl.w      w1, #0x9, w3
    147e:	83 01 70    	ior.w     w0, w3, w3
    1480:	01 00 32    	bra       Z, 0x1484 <formRandSig>
    1482:	13 00 20    	mov.w     #0x1, w3

00001484 <formRandSig>:
    1484:	c8 14 de    	lsr.w     w2, #0x8, w9
    1486:	48 14 dd    	sl.w      w2, #0x8, w8
    1488:	47 09 de    	lsr.w     w1, #0x7, w2
    148a:	12 00 b2    	and.w     #0x1, w2
    148c:	c8 08 de    	lsr.w     w1, #0x8, w1
    148e:	08 84 70    	ior.w     w1, w8, w8
    1490:	85 ff 07    	rcall     0x139c <__fpack>

00001492 <return0>:
    1492:	01 f0 a1    	bclr.w    w1, #0xf
    1494:	0c f0 a7    	btsc.w    w12, #0xf
    1496:	01 f0 a0    	bset.w    w1, #0xf
    1498:	cd ff 37    	bra       0x1434 <__fbopExit>

0000149a <aisinfinite>:
    149a:	61 20 e1    	cp.w      w4, #0x1
    149c:	cf ff 32    	bra       Z, 0x143c <__fbopReturnNaN>

0000149e <return8>:
    149e:	08 01 be    	mov.d     w8, w2

000014a0 <return2>:
    14a0:	02 00 be    	mov.d     w2, w0
    14a2:	f7 ff 37    	bra       0x1492 <return0>

000014a4 <bisinfinite>:
    14a4:	61 50 e1    	cp.w      w10, #0x1
    14a6:	fc ff 3a    	bra       NZ, 0x14a0 <return2>
    14a8:	c9 ff 37    	bra       0x143c <__fbopReturnNaN>

000014aa <___udivsi3>:
    14aa:	60 22 b8    	mul.uu    w4, #0x0, w4
    14ac:	06 02 20    	mov.w     #0x20, w6

000014ae <nextbit>:
    14ae:	00 00 d0    	sl.w      w0, w0
    14b0:	81 80 d2    	rlc.w     w1, w1
    14b2:	04 82 d2    	rlc.w     w4, w4
    14b4:	85 82 d2    	rlc.w     w5, w5
    14b6:	00 00 a0    	bset.w    w0, #0x0
    14b8:	02 02 52    	sub.w     w4, w2, w4
    14ba:	83 82 5a    	subb.w    w5, w3, w5
    14bc:	03 00 31    	bra       C, 0x14c4 <iterate>
    14be:	02 02 42    	add.w     w4, w2, w4
    14c0:	83 82 4a    	addc.w    w5, w3, w5
    14c2:	00 00 a1    	bclr.w    w0, #0x0

000014c4 <iterate>:
    14c4:	06 03 e9    	dec.w     w6, w6
    14c6:	f3 ff 3a    	bra       NZ, 0x14ae <nextbit>
    14c8:	00 00 06    	return    

000014ca <__fcompare>:
    14ca:	88 9f be    	mov.d     w8, [w15++]
    14cc:	8a 9f be    	mov.d     w10, [w15++]
    14ce:	84 1f 78    	mov.w     w4, [w15++]
    14d0:	a0 ff 07    	rcall     0x1412 <__funpack2>
    14d2:	4f 00 78    	mov.w     [--w15], w0
    14d4:	11 00 33    	bra       N, 0x14f8 <exit>
    14d6:	f0 ff 2f    	mov.w     #0xffff, w0
    14d8:	83 8f 6c    	xor.w     w9, w3, [w15]
    14da:	06 00 3b    	bra       NN, 0x14e8 <comparemag>
    14dc:	04 05 65    	and.w     w10, w4, w10
    14de:	0a 00 a7    	btsc.w    w10, #0x0
    14e0:	08 00 37    	bra       0x14f2 <returnEqual>
    14e2:	09 f0 a6    	btss.w    w9, #0xf
    14e4:	10 00 20    	mov.w     #0x1, w0
    14e6:	08 00 37    	bra       0x14f8 <exit>

000014e8 <comparemag>:
    14e8:	82 0f 54    	sub.w     w8, w2, [w15]
    14ea:	83 8f 5c    	subb.w    w9, w3, [w15]
    14ec:	03 00 39    	bra       NC, 0x14f4 <adjust>
    14ee:	10 00 20    	mov.w     #0x1, w0
    14f0:	01 00 3e    	bra       GTU, 0x14f4 <adjust>

000014f2 <returnEqual>:
    14f2:	00 00 20    	mov.w     #0x0, w0

000014f4 <adjust>:
    14f4:	09 f0 a7    	btsc.w    w9, #0xf
    14f6:	00 00 ea    	neg.w     w0, w0

000014f8 <exit>:
    14f8:	4f 05 be    	mov.d     [--w15], w10
    14fa:	4f 04 be    	mov.d     [--w15], w8
    14fc:	00 00 e0    	cp0.w     w0
    14fe:	00 00 06    	return    

00001500 <___floatundisf>:
    1500:	88 9f be    	mov.d     w8, [w15++]
    1502:	8a 9f be    	mov.d     w10, [w15++]
    1504:	00 82 70    	ior.w     w1, w0, w4
    1506:	04 02 71    	ior.w     w2, w4, w4
    1508:	04 82 71    	ior.w     w3, w4, w4
    150a:	26 00 32    	bra       Z, 0x1558 <return0>
    150c:	00 04 be    	mov.d     w0, w8
    150e:	02 00 be    	mov.d     w2, w0
    1510:	60 11 b8    	mul.uu    w2, #0x0, w2
    1512:	6b 09 20    	mov.w     #0x96, w11
    1514:	95 02 20    	mov.w     #0x29, w5
    1516:	01 82 cf    	ff1l      w1, w4
    1518:	0a 00 39    	bra       NC, 0x152e <fixshift>
    151a:	05 41 b1    	sub.b     #0x10, w5
    151c:	00 82 cf    	ff1l      w0, w4
    151e:	07 00 39    	bra       NC, 0x152e <fixshift>
    1520:	05 41 b1    	sub.b     #0x10, w5
    1522:	09 82 cf    	ff1l      w9, w4
    1524:	04 00 39    	bra       NC, 0x152e <fixshift>
    1526:	05 41 b1    	sub.b     #0x10, w5
    1528:	08 82 cf    	ff1l      w8, w4
    152a:	01 00 39    	bra       NC, 0x152e <fixshift>
    152c:	05 41 b1    	sub.b     #0x10, w5

0000152e <fixshift>:
    152e:	05 42 52    	sub.b     w4, w5, w4
    1530:	12 00 32    	bra       Z, 0x1556 <round>
    1532:	0a 00 3b    	bra       NN, 0x1548 <shiftleft>

00001534 <shiftright>:
    1534:	82 81 71    	ior.w     w3, w2, w3
    1536:	61 01 64    	and.w     w8, #0x1, w2
    1538:	81 00 d1    	lsr.w     w1, w1
    153a:	00 80 d3    	rrc.w     w0, w0
    153c:	89 84 d3    	rrc.w     w9, w9
    153e:	08 84 d3    	rrc.w     w8, w8
    1540:	8b 05 e8    	inc.w     w11, w11
    1542:	04 42 e8    	inc.b     w4, w4
    1544:	f7 ff 3a    	bra       NZ, 0x1534 <shiftright>
    1546:	07 00 37    	bra       0x1556 <round>

00001548 <shiftleft>:
    1548:	08 04 44    	add.w     w8, w8, w8
    154a:	89 84 4c    	addc.w    w9, w9, w9
    154c:	00 00 48    	addc.w    w0, w0, w0
    154e:	81 80 48    	addc.w    w1, w1, w1
    1550:	8b 05 e9    	dec.w     w11, w11
    1552:	04 42 e9    	dec.b     w4, w4
    1554:	f9 ff 3a    	bra       NZ, 0x1548 <shiftleft>

00001556 <round>:
    1556:	22 ff 07    	rcall     0x139c <__fpack>

00001558 <return0>:
    1558:	4f 05 be    	mov.d     [--w15], w10
    155a:	4f 04 be    	mov.d     [--w15], w8
    155c:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	0a 2c 04    	goto      0x2c0a <__T1Interrupt>
    1026:	00 00 00 
    1028:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	38 2c 04    	goto      0x2c38 <__T2Interrupt>
    1032:	00 00 00 
    1034:	66 2c 04    	goto      0x2c66 <__T3Interrupt>
    1036:	00 00 00 
    1038:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	0a 18 04    	goto      0x180a <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	dc 17 04    	goto      0x17dc <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	94 2c 04    	goto      0x2c94 <__T4Interrupt>
    1072:	00 00 00 
    1074:	c2 2c 04    	goto      0x2cc2 <__T5Interrupt>
    1076:	00 00 00 
    1078:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	66 18 04    	goto      0x1866 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	38 18 04    	goto      0x1838 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	c2 18 04    	goto      0x18c2 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	94 18 04    	goto      0x1894 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	1e 19 04    	goto      0x191e <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	f0 18 04    	goto      0x18f0 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	d6 47 04    	goto      0x47d6 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000955e <_Device>:
    955e:	12 01       	.word 0x112
    9560:	00 02       	.word 0x200
    9562:	00 00       	.word 0
    9564:	00 40       	.word 0x4000
    9566:	66 66       	.word 0x6666
    9568:	03 00       	.word 0x3
    956a:	00 00       	.word 0
    956c:	01 02       	.word 0x201
    956e:	00 01       	.word 0x100

00009570 <_Configuration1>:
    9570:	09 02       	.word 0x209
    9572:	12 00       	.word 0x12
    9574:	01 01       	.word 0x101
    9576:	00 a0       	.word 0xa000
    9578:	32 09       	.word 0x932
    957a:	04 00       	.word 0x4
    957c:	00 00       	.word 0
    957e:	ff 00       	.word 0xff
    9580:	ff 00       	.word 0xff

00009582 <_String0>:
    9582:	04 03       	.word 0x304
    9584:	09 04       	.word 0x409

00009586 <_String1>:
    9586:	1a 03       	.word 0x31a
    9588:	4f 00       	.word 0x4f
    958a:	6c 00       	.word 0x6c
    958c:	69 00       	.word 0x69
    958e:	6e 00       	.word 0x6e
    9590:	20 00       	.word 0x20
    9592:	43 00       	.word 0x43
    9594:	6f 00       	.word 0x6f
    9596:	6c 00       	.word 0x6c
    9598:	6c 00       	.word 0x6c
    959a:	65 00       	.word 0x65
    959c:	67 00       	.word 0x67
    959e:	65 00       	.word 0x65

000095a0 <_String2>:
    95a0:	44 03       	.word 0x344
    95a2:	45 00       	.word 0x45
    95a4:	6c 00       	.word 0x6c
    95a6:	65 00       	.word 0x65
    95a8:	63 00       	.word 0x63
    95aa:	61 00       	.word 0x61
    95ac:	6e 00       	.word 0x6e
    95ae:	69 00       	.word 0x69
    95b0:	73 00       	.word 0x73
    95b2:	6d 00       	.word 0x6d
    95b4:	73 00       	.word 0x73
    95b6:	20 00       	.word 0x20
    95b8:	4d 00       	.word 0x4d
    95ba:	69 00       	.word 0x69
    95bc:	6e 00       	.word 0x6e
    95be:	69 00       	.word 0x69
    95c0:	70 00       	.word 0x70
    95c2:	72 00       	.word 0x72
    95c4:	6f 00       	.word 0x6f
    95c6:	6a 00       	.word 0x6a
    95c8:	65 00       	.word 0x65
    95ca:	63 00       	.word 0x63
    95cc:	74 00       	.word 0x74
    95ce:	20 00       	.word 0x20
    95d0:	32 00       	.word 0x32
    95d2:	20 00       	.word 0x20
    95d4:	46 00       	.word 0x46
    95d6:	69 00       	.word 0x69
    95d8:	72 00       	.word 0x72
    95da:	6d 00       	.word 0x6d
    95dc:	77 00       	.word 0x77
    95de:	61 00       	.word 0x61
    95e0:	72 00       	.word 0x72
    95e2:	65 00       	.word 0x65
Disassembly of section .text:

000015e4 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    15e4:	04 00 fa    	lnk       #0x4
    15e6:	00 0f 78    	mov.w     w0, [w14]
    15e8:	21 47 98    	mov.b     w1, [w14+2]

000015ea <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    15ea:	00 00 00    	nop       

000015ec <.L2>:
    15ec:	1e 00 78    	mov.w     [w14], w0
    15ee:	10 00 90    	mov.w     [w0+2], w0
    15f0:	90 00 78    	mov.w     [w0], w1
    15f2:	00 20 20    	mov.w     #0x200, w0
    15f4:	00 80 60    	and.w     w1, w0, w0
    15f6:	00 00 e0    	cp0.w     w0
    15f8:	f9 ff 3a    	bra       NZ, 0x15ec <.L2>

000015fa <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    15fa:	1e 00 78    	mov.w     [w14], w0
    15fc:	20 00 90    	mov.w     [w0+4], w0
    15fe:	ae 40 90    	mov.b     [w14+2], w1
    1600:	81 80 fb    	ze        w1, w1
    1602:	01 08 78    	mov.w     w1, [w0]

00001604 <.LSM3>:
}
    1604:	00 80 fa    	ulnk      
    1606:	00 00 06    	return    

00001608 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1608:	02 00 fa    	lnk       #0x2
    160a:	00 0f 78    	mov.w     w0, [w14]

0000160c <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    160c:	00 00 00    	nop       

0000160e <.L4>:
    160e:	1e 00 78    	mov.w     [w14], w0
    1610:	10 00 90    	mov.w     [w0+2], w0
    1612:	10 00 78    	mov.w     [w0], w0
    1614:	61 00 60    	and.w     w0, #0x1, w0
    1616:	00 00 e0    	cp0.w     w0
    1618:	fa ff 32    	bra       Z, 0x160e <.L4>

0000161a <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    161a:	1e 00 78    	mov.w     [w14], w0
    161c:	30 00 90    	mov.w     [w0+6], w0
    161e:	10 00 78    	mov.w     [w0], w0
    1620:	00 40 78    	mov.b     w0, w0

00001622 <.LSM7>:
}
    1622:	00 80 fa    	ulnk      
    1624:	00 00 06    	return    

00001626 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    1626:	04 00 fa    	lnk       #0x4
    1628:	00 0f 78    	mov.w     w0, [w14]
    162a:	21 47 98    	mov.b     w1, [w14+2]

0000162c <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    162c:	00 00 00    	nop       

0000162e <.L6>:
    162e:	1e 00 78    	mov.w     [w14], w0
    1630:	d0 10 90    	mov.w     [w0+42], w1
    1632:	1e 00 78    	mov.w     [w14], w0
    1634:	20 10 90    	mov.w     [w0+36], w0
    1636:	80 8f 50    	sub.w     w1, w0, [w15]
    1638:	fa ff 32    	bra       Z, 0x162e <.L6>

0000163a <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    163a:	ff 3f fc    	disi      #0x3fff

0000163c <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    163c:	1e 00 78    	mov.w     [w14], w0
    163e:	90 10 90    	mov.w     [w0+34], w1
    1640:	1e 00 78    	mov.w     [w14], w0
    1642:	40 10 90    	mov.w     [w0+40], w0
    1644:	00 80 40    	add.w     w1, w0, w0
    1646:	ae 40 90    	mov.b     [w14+2], w1
    1648:	01 48 78    	mov.b     w1, [w0]

0000164a <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    164a:	1e 00 78    	mov.w     [w14], w0
    164c:	40 10 90    	mov.w     [w0+40], w0
    164e:	80 00 e8    	inc.w     w0, w1
    1650:	1e 00 78    	mov.w     [w14], w0
    1652:	20 10 90    	mov.w     [w0+36], w0
    1654:	00 01 78    	mov.w     w0, w2
    1656:	11 00 09    	repeat    #0x11
    1658:	82 80 d8    	div.uw    w1, w2
    165a:	80 00 fd    	exch      w0, w1
    165c:	80 00 78    	mov.w     w0, w1
    165e:	1e 00 78    	mov.w     [w14], w0
    1660:	41 10 98    	mov.w     w1, [w0+40]

00001662 <.LSM13>:
    self->TXbuffer.count++;
    1662:	1e 00 78    	mov.w     [w14], w0
    1664:	50 10 90    	mov.w     [w0+42], w0
    1666:	80 00 e8    	inc.w     w0, w1
    1668:	1e 00 78    	mov.w     [w14], w0
    166a:	51 10 98    	mov.w     w1, [w0+42]

0000166c <.LSM14>:
    enable_interrupts();
    166c:	52 20 ef    	clr.w     0x52

0000166e <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    166e:	1e 00 78    	mov.w     [w14], w0
    1670:	d0 10 90    	mov.w     [w0+42], w1
    1672:	1e 00 78    	mov.w     [w14], w0
    1674:	30 18 90    	mov.w     [w0+54], w0
    1676:	80 8f 50    	sub.w     w1, w0, [w15]
    1678:	08 00 39    	bra       NC, 0x168a <.L5>

0000167a <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    167a:	1e 00 78    	mov.w     [w14], w0
    167c:	10 00 90    	mov.w     [w0+2], w0
    167e:	9e 00 78    	mov.w     [w14], w1
    1680:	91 00 90    	mov.w     [w1+2], w1
    1682:	11 01 78    	mov.w     [w1], w2
    1684:	01 40 20    	mov.w     #0x400, w1
    1686:	82 80 70    	ior.w     w1, w2, w1
    1688:	01 08 78    	mov.w     w1, [w0]

0000168a <.L5>:
                                                    // transmission
}
    168a:	00 80 fa    	ulnk      
    168c:	00 00 06    	return    

0000168e <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    168e:	04 00 fa    	lnk       #0x4
    1690:	10 07 98    	mov.w     w0, [w14+2]

00001692 <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1692:	1e 00 90    	mov.w     [w14+2], w0
    1694:	50 00 90    	mov.w     [w0+10], w0
    1696:	9e 00 90    	mov.w     [w14+2], w1
    1698:	d1 00 90    	mov.w     [w1+10], w1
    169a:	11 01 78    	mov.w     [w1], w2
    169c:	9e 00 90    	mov.w     [w14+2], w1
    169e:	e1 48 90    	mov.b     [w1+14], w1
    16a0:	81 80 fb    	ze        w1, w1
    16a2:	13 00 20    	mov.w     #0x1, w3
    16a4:	81 18 dd    	sl.w      w3, w1, w1
    16a6:	81 80 ea    	com.w     w1, w1
    16a8:	81 00 61    	and.w     w2, w1, w1
    16aa:	01 08 78    	mov.w     w1, [w0]

000016ac <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    16ac:	1e 00 90    	mov.w     [w14+2], w0
    16ae:	50 10 90    	mov.w     [w0+42], w0
    16b0:	00 00 e0    	cp0.w     w0
    16b2:	27 00 3a    	bra       NZ, 0x1702 <.L13>

000016b4 <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    16b4:	1e 00 90    	mov.w     [w14+2], w0
    16b6:	10 00 90    	mov.w     [w0+2], w0
    16b8:	9e 00 90    	mov.w     [w14+2], w1
    16ba:	91 00 90    	mov.w     [w1+2], w1
    16bc:	11 01 78    	mov.w     [w1], w2
    16be:	f1 bf 2f    	mov.w     #0xfbff, w1
    16c0:	81 00 61    	and.w     w2, w1, w1
    16c2:	01 08 78    	mov.w     w1, [w0]

000016c4 <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    16c4:	1f 00 37    	bra       0x1704 <.L10>

000016c6 <.L12>:
        disable_interrupts();
    16c6:	ff 3f fc    	disi      #0x3fff

000016c8 <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    16c8:	1e 00 90    	mov.w     [w14+2], w0
    16ca:	90 10 90    	mov.w     [w0+34], w1
    16cc:	1e 00 90    	mov.w     [w14+2], w0
    16ce:	30 10 90    	mov.w     [w0+38], w0
    16d0:	00 80 40    	add.w     w1, w0, w0
    16d2:	10 4f 78    	mov.b     [w0], [w14]

000016d4 <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    16d4:	1e 00 90    	mov.w     [w14+2], w0
    16d6:	30 10 90    	mov.w     [w0+38], w0
    16d8:	80 00 e8    	inc.w     w0, w1
    16da:	1e 00 90    	mov.w     [w14+2], w0
    16dc:	20 10 90    	mov.w     [w0+36], w0
    16de:	00 01 78    	mov.w     w0, w2
    16e0:	11 00 09    	repeat    #0x11
    16e2:	82 80 d8    	div.uw    w1, w2
    16e4:	80 00 fd    	exch      w0, w1
    16e6:	80 00 78    	mov.w     w0, w1
    16e8:	1e 00 90    	mov.w     [w14+2], w0
    16ea:	31 10 98    	mov.w     w1, [w0+38]

000016ec <.LSM26>:
        self->TXbuffer.count--;
    16ec:	1e 00 90    	mov.w     [w14+2], w0
    16ee:	50 10 90    	mov.w     [w0+42], w0
    16f0:	80 00 e9    	dec.w     w0, w1
    16f2:	1e 00 90    	mov.w     [w14+2], w0
    16f4:	51 10 98    	mov.w     w1, [w0+42]

000016f6 <.LSM27>:
        enable_interrupts();
    16f6:	52 20 ef    	clr.w     0x52

000016f8 <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    16f8:	1e 00 90    	mov.w     [w14+2], w0
    16fa:	20 00 90    	mov.w     [w0+4], w0
    16fc:	9e 80 fb    	ze        [w14], w1
    16fe:	01 08 78    	mov.w     w1, [w0]
    1700:	01 00 37    	bra       0x1704 <.L10>

00001702 <.L13>:
    1702:	00 00 00    	nop       

00001704 <.L10>:
    1704:	1e 00 90    	mov.w     [w14+2], w0
    1706:	10 00 90    	mov.w     [w0+2], w0
    1708:	90 00 78    	mov.w     [w0], w1
    170a:	00 20 20    	mov.w     #0x200, w0
    170c:	00 80 60    	and.w     w1, w0, w0
    170e:	00 00 e0    	cp0.w     w0
    1710:	04 00 3a    	bra       NZ, 0x171a <.L8>
    1712:	1e 00 90    	mov.w     [w14+2], w0
    1714:	50 10 90    	mov.w     [w0+42], w0
    1716:	00 00 e0    	cp0.w     w0
    1718:	d6 ff 3a    	bra       NZ, 0x16c6 <.L12>

0000171a <.L8>:
    }
}
    171a:	00 80 fa    	ulnk      
    171c:	00 00 06    	return    

0000171e <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    171e:	04 00 fa    	lnk       #0x4
    1720:	10 07 98    	mov.w     w0, [w14+2]

00001722 <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    1722:	00 00 00    	nop       

00001724 <.L15>:
    1724:	1e 00 90    	mov.w     [w14+2], w0
    1726:	20 18 90    	mov.w     [w0+52], w0
    1728:	00 00 e0    	cp0.w     w0
    172a:	fc ff 32    	bra       Z, 0x1724 <.L15>

0000172c <.LSM33>:
    disable_interrupts();
    172c:	ff 3f fc    	disi      #0x3fff

0000172e <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    172e:	1e 00 90    	mov.w     [w14+2], w0
    1730:	e0 10 90    	mov.w     [w0+44], w1
    1732:	1e 00 90    	mov.w     [w14+2], w0
    1734:	00 18 90    	mov.w     [w0+48], w0
    1736:	00 80 40    	add.w     w1, w0, w0
    1738:	10 4f 78    	mov.b     [w0], [w14]

0000173a <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    173a:	1e 00 90    	mov.w     [w14+2], w0
    173c:	00 18 90    	mov.w     [w0+48], w0
    173e:	80 00 e8    	inc.w     w0, w1
    1740:	1e 00 90    	mov.w     [w14+2], w0
    1742:	70 10 90    	mov.w     [w0+46], w0
    1744:	00 01 78    	mov.w     w0, w2
    1746:	11 00 09    	repeat    #0x11
    1748:	82 80 d8    	div.uw    w1, w2
    174a:	80 00 fd    	exch      w0, w1
    174c:	80 00 78    	mov.w     w0, w1
    174e:	1e 00 90    	mov.w     [w14+2], w0
    1750:	01 18 98    	mov.w     w1, [w0+48]

00001752 <.LSM36>:
    self->RXbuffer.count--;
    1752:	1e 00 90    	mov.w     [w14+2], w0
    1754:	20 18 90    	mov.w     [w0+52], w0
    1756:	80 00 e9    	dec.w     w0, w1
    1758:	1e 00 90    	mov.w     [w14+2], w0
    175a:	21 18 98    	mov.w     w1, [w0+52]

0000175c <.LSM37>:
    enable_interrupts();
    175c:	52 20 ef    	clr.w     0x52

0000175e <.LSM38>:
    return ch;
    175e:	1e 40 78    	mov.b     [w14], w0

00001760 <.LSM39>:
}
    1760:	00 80 fa    	ulnk      
    1762:	00 00 06    	return    

00001764 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    1764:	02 00 fa    	lnk       #0x2
    1766:	00 0f 78    	mov.w     w0, [w14]

00001768 <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1768:	1e 00 78    	mov.w     [w14], w0
    176a:	50 00 90    	mov.w     [w0+10], w0
    176c:	9e 00 78    	mov.w     [w14], w1
    176e:	d1 00 90    	mov.w     [w1+10], w1
    1770:	11 01 78    	mov.w     [w1], w2
    1772:	9e 00 78    	mov.w     [w14], w1
    1774:	f1 48 90    	mov.b     [w1+15], w1
    1776:	81 80 fb    	ze        w1, w1
    1778:	13 00 20    	mov.w     #0x1, w3
    177a:	81 18 dd    	sl.w      w3, w1, w1
    177c:	81 80 ea    	com.w     w1, w1
    177e:	81 00 61    	and.w     w2, w1, w1
    1780:	01 08 78    	mov.w     w1, [w0]

00001782 <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    1782:	1d 00 37    	bra       0x17be <.L17>

00001784 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    1784:	ff 3f fc    	disi      #0x3fff

00001786 <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    1786:	1e 00 78    	mov.w     [w14], w0
    1788:	e0 10 90    	mov.w     [w0+44], w1
    178a:	1e 00 78    	mov.w     [w14], w0
    178c:	10 18 90    	mov.w     [w0+50], w0
    178e:	00 80 40    	add.w     w1, w0, w0
    1790:	9e 00 78    	mov.w     [w14], w1
    1792:	b1 00 90    	mov.w     [w1+6], w1
    1794:	91 00 78    	mov.w     [w1], w1
    1796:	81 40 78    	mov.b     w1, w1
    1798:	01 48 78    	mov.b     w1, [w0]

0000179a <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    179a:	1e 00 78    	mov.w     [w14], w0
    179c:	10 18 90    	mov.w     [w0+50], w0
    179e:	80 00 e8    	inc.w     w0, w1
    17a0:	1e 00 78    	mov.w     [w14], w0
    17a2:	70 10 90    	mov.w     [w0+46], w0
    17a4:	00 01 78    	mov.w     w0, w2
    17a6:	11 00 09    	repeat    #0x11
    17a8:	82 80 d8    	div.uw    w1, w2
    17aa:	80 00 fd    	exch      w0, w1
    17ac:	80 00 78    	mov.w     w0, w1
    17ae:	1e 00 78    	mov.w     [w14], w0
    17b0:	11 18 98    	mov.w     w1, [w0+50]

000017b2 <.LSM46>:
        self->RXbuffer.count++;
    17b2:	1e 00 78    	mov.w     [w14], w0
    17b4:	20 18 90    	mov.w     [w0+52], w0
    17b6:	80 00 e8    	inc.w     w0, w1
    17b8:	1e 00 78    	mov.w     [w14], w0
    17ba:	21 18 98    	mov.w     w1, [w0+52]

000017bc <.LSM47>:
        enable_interrupts();
    17bc:	52 20 ef    	clr.w     0x52

000017be <.L17>:
    17be:	1e 00 78    	mov.w     [w14], w0
    17c0:	10 00 90    	mov.w     [w0+2], w0
    17c2:	10 00 78    	mov.w     [w0], w0
    17c4:	61 00 60    	and.w     w0, #0x1, w0
    17c6:	00 40 78    	mov.b     w0, w0
    17c8:	00 04 e0    	cp0.b     w0
    17ca:	06 00 32    	bra       Z, 0x17d8 <.L16>

000017cc <.LSM49>:
    17cc:	1e 00 78    	mov.w     [w14], w0
    17ce:	a0 18 90    	mov.w     [w0+52], w1
    17d0:	1e 00 78    	mov.w     [w14], w0
    17d2:	70 10 90    	mov.w     [w0+46], w0

000017d4 <.LSM50>:
    17d4:	80 8f 50    	sub.w     w1, w0, [w15]
    17d6:	d6 ff 3a    	bra       NZ, 0x1784 <.L19>

000017d8 <.L16>:
    }
}
    17d8:	00 80 fa    	ulnk      
    17da:	00 00 06    	return    

000017dc <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    17dc:	36 00 f8    	push      0x36
    17de:	80 9f be    	mov.d     w0, [w15++]
    17e0:	82 9f be    	mov.d     w2, [w15++]
    17e2:	84 9f be    	mov.d     w4, [w15++]
    17e4:	86 9f be    	mov.d     w6, [w15++]
    17e6:	32 00 f8    	push      0x32
    17e8:	34 00 f8    	push      0x34
    17ea:	10 00 20    	mov.w     #0x1, w0
    17ec:	a0 01 88    	mov.w     w0, 0x34
    17ee:	00 20 20    	mov.w     #0x200, w0
    17f0:	90 01 88    	mov.w     w0, 0x32
    17f2:	00 00 fa    	lnk       #0x0

000017f4 <.LSM53>:
    __serviceTxInterrupt(&uart1);
    17f4:	c0 a2 20    	mov.w     #0xa2c, w0
    17f6:	4b ff 07    	rcall     0x168e <___serviceTxInterrupt>

000017f8 <.LSM54>:
}
    17f8:	00 80 fa    	ulnk      
    17fa:	34 00 f9    	pop       0x34
    17fc:	32 00 f9    	pop       0x32
    17fe:	4f 03 be    	mov.d     [--w15], w6
    1800:	4f 02 be    	mov.d     [--w15], w4
    1802:	4f 01 be    	mov.d     [--w15], w2
    1804:	4f 00 be    	mov.d     [--w15], w0
    1806:	36 00 f9    	pop       0x36
    1808:	00 40 06    	retfie    

0000180a <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    180a:	36 00 f8    	push      0x36
    180c:	80 9f be    	mov.d     w0, [w15++]
    180e:	82 9f be    	mov.d     w2, [w15++]
    1810:	84 9f be    	mov.d     w4, [w15++]
    1812:	86 9f be    	mov.d     w6, [w15++]
    1814:	32 00 f8    	push      0x32
    1816:	34 00 f8    	push      0x34
    1818:	10 00 20    	mov.w     #0x1, w0
    181a:	a0 01 88    	mov.w     w0, 0x34
    181c:	00 20 20    	mov.w     #0x200, w0
    181e:	90 01 88    	mov.w     w0, 0x32
    1820:	00 00 fa    	lnk       #0x0

00001822 <.LSM56>:
    __serviceRxInterrupt(&uart1);
    1822:	c0 a2 20    	mov.w     #0xa2c, w0
    1824:	9f ff 07    	rcall     0x1764 <___serviceRxInterrupt>

00001826 <.LSM57>:
}
    1826:	00 80 fa    	ulnk      
    1828:	34 00 f9    	pop       0x34
    182a:	32 00 f9    	pop       0x32
    182c:	4f 03 be    	mov.d     [--w15], w6
    182e:	4f 02 be    	mov.d     [--w15], w4
    1830:	4f 01 be    	mov.d     [--w15], w2
    1832:	4f 00 be    	mov.d     [--w15], w0
    1834:	36 00 f9    	pop       0x36
    1836:	00 40 06    	retfie    

00001838 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    1838:	36 00 f8    	push      0x36
    183a:	80 9f be    	mov.d     w0, [w15++]
    183c:	82 9f be    	mov.d     w2, [w15++]
    183e:	84 9f be    	mov.d     w4, [w15++]
    1840:	86 9f be    	mov.d     w6, [w15++]
    1842:	32 00 f8    	push      0x32
    1844:	34 00 f8    	push      0x34
    1846:	10 00 20    	mov.w     #0x1, w0
    1848:	a0 01 88    	mov.w     w0, 0x34
    184a:	00 20 20    	mov.w     #0x200, w0
    184c:	90 01 88    	mov.w     w0, 0x32
    184e:	00 00 fa    	lnk       #0x0

00001850 <.LSM59>:
    __serviceTxInterrupt(&uart2);
    1850:	80 a6 20    	mov.w     #0xa68, w0
    1852:	1d ff 07    	rcall     0x168e <___serviceTxInterrupt>

00001854 <.LSM60>:
}
    1854:	00 80 fa    	ulnk      
    1856:	34 00 f9    	pop       0x34
    1858:	32 00 f9    	pop       0x32
    185a:	4f 03 be    	mov.d     [--w15], w6
    185c:	4f 02 be    	mov.d     [--w15], w4
    185e:	4f 01 be    	mov.d     [--w15], w2
    1860:	4f 00 be    	mov.d     [--w15], w0
    1862:	36 00 f9    	pop       0x36
    1864:	00 40 06    	retfie    

00001866 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    1866:	36 00 f8    	push      0x36
    1868:	80 9f be    	mov.d     w0, [w15++]
    186a:	82 9f be    	mov.d     w2, [w15++]
    186c:	84 9f be    	mov.d     w4, [w15++]
    186e:	86 9f be    	mov.d     w6, [w15++]
    1870:	32 00 f8    	push      0x32
    1872:	34 00 f8    	push      0x34
    1874:	10 00 20    	mov.w     #0x1, w0
    1876:	a0 01 88    	mov.w     w0, 0x34
    1878:	00 20 20    	mov.w     #0x200, w0
    187a:	90 01 88    	mov.w     w0, 0x32
    187c:	00 00 fa    	lnk       #0x0

0000187e <.LSM62>:
    __serviceRxInterrupt(&uart2);
    187e:	80 a6 20    	mov.w     #0xa68, w0
    1880:	71 ff 07    	rcall     0x1764 <___serviceRxInterrupt>

00001882 <.LSM63>:
}
    1882:	00 80 fa    	ulnk      
    1884:	34 00 f9    	pop       0x34
    1886:	32 00 f9    	pop       0x32
    1888:	4f 03 be    	mov.d     [--w15], w6
    188a:	4f 02 be    	mov.d     [--w15], w4
    188c:	4f 01 be    	mov.d     [--w15], w2
    188e:	4f 00 be    	mov.d     [--w15], w0
    1890:	36 00 f9    	pop       0x36
    1892:	00 40 06    	retfie    

00001894 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    1894:	36 00 f8    	push      0x36
    1896:	80 9f be    	mov.d     w0, [w15++]
    1898:	82 9f be    	mov.d     w2, [w15++]
    189a:	84 9f be    	mov.d     w4, [w15++]
    189c:	86 9f be    	mov.d     w6, [w15++]
    189e:	32 00 f8    	push      0x32
    18a0:	34 00 f8    	push      0x34
    18a2:	10 00 20    	mov.w     #0x1, w0
    18a4:	a0 01 88    	mov.w     w0, 0x34
    18a6:	00 20 20    	mov.w     #0x200, w0
    18a8:	90 01 88    	mov.w     w0, 0x32
    18aa:	00 00 fa    	lnk       #0x0

000018ac <.LSM65>:
    __serviceTxInterrupt(&uart3);
    18ac:	40 aa 20    	mov.w     #0xaa4, w0
    18ae:	ef fe 07    	rcall     0x168e <___serviceTxInterrupt>

000018b0 <.LSM66>:
}
    18b0:	00 80 fa    	ulnk      
    18b2:	34 00 f9    	pop       0x34
    18b4:	32 00 f9    	pop       0x32
    18b6:	4f 03 be    	mov.d     [--w15], w6
    18b8:	4f 02 be    	mov.d     [--w15], w4
    18ba:	4f 01 be    	mov.d     [--w15], w2
    18bc:	4f 00 be    	mov.d     [--w15], w0
    18be:	36 00 f9    	pop       0x36
    18c0:	00 40 06    	retfie    

000018c2 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    18c2:	36 00 f8    	push      0x36
    18c4:	80 9f be    	mov.d     w0, [w15++]
    18c6:	82 9f be    	mov.d     w2, [w15++]
    18c8:	84 9f be    	mov.d     w4, [w15++]
    18ca:	86 9f be    	mov.d     w6, [w15++]
    18cc:	32 00 f8    	push      0x32
    18ce:	34 00 f8    	push      0x34
    18d0:	10 00 20    	mov.w     #0x1, w0
    18d2:	a0 01 88    	mov.w     w0, 0x34
    18d4:	00 20 20    	mov.w     #0x200, w0
    18d6:	90 01 88    	mov.w     w0, 0x32
    18d8:	00 00 fa    	lnk       #0x0

000018da <.LSM68>:
    __serviceRxInterrupt(&uart3);
    18da:	40 aa 20    	mov.w     #0xaa4, w0
    18dc:	43 ff 07    	rcall     0x1764 <___serviceRxInterrupt>

000018de <.LSM69>:
}
    18de:	00 80 fa    	ulnk      
    18e0:	34 00 f9    	pop       0x34
    18e2:	32 00 f9    	pop       0x32
    18e4:	4f 03 be    	mov.d     [--w15], w6
    18e6:	4f 02 be    	mov.d     [--w15], w4
    18e8:	4f 01 be    	mov.d     [--w15], w2
    18ea:	4f 00 be    	mov.d     [--w15], w0
    18ec:	36 00 f9    	pop       0x36
    18ee:	00 40 06    	retfie    

000018f0 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    18f0:	36 00 f8    	push      0x36
    18f2:	80 9f be    	mov.d     w0, [w15++]
    18f4:	82 9f be    	mov.d     w2, [w15++]
    18f6:	84 9f be    	mov.d     w4, [w15++]
    18f8:	86 9f be    	mov.d     w6, [w15++]
    18fa:	32 00 f8    	push      0x32
    18fc:	34 00 f8    	push      0x34
    18fe:	10 00 20    	mov.w     #0x1, w0
    1900:	a0 01 88    	mov.w     w0, 0x34
    1902:	00 20 20    	mov.w     #0x200, w0
    1904:	90 01 88    	mov.w     w0, 0x32
    1906:	00 00 fa    	lnk       #0x0

00001908 <.LSM71>:
    __serviceTxInterrupt(&uart4);
    1908:	00 ae 20    	mov.w     #0xae0, w0
    190a:	c1 fe 07    	rcall     0x168e <___serviceTxInterrupt>

0000190c <.LSM72>:
}
    190c:	00 80 fa    	ulnk      
    190e:	34 00 f9    	pop       0x34
    1910:	32 00 f9    	pop       0x32
    1912:	4f 03 be    	mov.d     [--w15], w6
    1914:	4f 02 be    	mov.d     [--w15], w4
    1916:	4f 01 be    	mov.d     [--w15], w2
    1918:	4f 00 be    	mov.d     [--w15], w0
    191a:	36 00 f9    	pop       0x36
    191c:	00 40 06    	retfie    

0000191e <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    191e:	36 00 f8    	push      0x36
    1920:	80 9f be    	mov.d     w0, [w15++]
    1922:	82 9f be    	mov.d     w2, [w15++]
    1924:	84 9f be    	mov.d     w4, [w15++]
    1926:	86 9f be    	mov.d     w6, [w15++]
    1928:	32 00 f8    	push      0x32
    192a:	34 00 f8    	push      0x34
    192c:	10 00 20    	mov.w     #0x1, w0
    192e:	a0 01 88    	mov.w     w0, 0x34
    1930:	00 20 20    	mov.w     #0x200, w0
    1932:	90 01 88    	mov.w     w0, 0x32
    1934:	00 00 fa    	lnk       #0x0

00001936 <.LSM74>:
    __serviceRxInterrupt(&uart4);
    1936:	00 ae 20    	mov.w     #0xae0, w0
    1938:	15 ff 07    	rcall     0x1764 <___serviceRxInterrupt>

0000193a <.LSM75>:
}
    193a:	00 80 fa    	ulnk      
    193c:	34 00 f9    	pop       0x34
    193e:	32 00 f9    	pop       0x32
    1940:	4f 03 be    	mov.d     [--w15], w6
    1942:	4f 02 be    	mov.d     [--w15], w4
    1944:	4f 01 be    	mov.d     [--w15], w2
    1946:	4f 00 be    	mov.d     [--w15], w0
    1948:	36 00 f9    	pop       0x36
    194a:	00 40 06    	retfie    

0000194c <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    194c:	08 00 fa    	lnk       #0x8
    194e:	10 07 98    	mov.w     w0, [w14+2]
    1950:	21 07 98    	mov.w     w1, [w14+4]
    1952:	32 07 98    	mov.w     w2, [w14+6]

00001954 <.LSM77>:
    int16_t i;

    switch (handle) {
    1954:	1e 00 90    	mov.w     [w14+2], w0
    1956:	00 00 e0    	cp0.w     w0
    1958:	25 00 35    	bra       LT, 0x19a4 <.L37>
    195a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    195c:	03 00 34    	bra       LE, 0x1964 <.L30>
    195e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1960:	11 00 32    	bra       Z, 0x1984 <.L31>

00001962 <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    1962:	21 00 37    	bra       0x19a6 <.L34>

00001964 <.L30>:
    1964:	00 00 eb    	clr.w     w0
    1966:	00 0f 78    	mov.w     w0, [w14]
    1968:	08 00 37    	bra       0x197a <.L32>

0000196a <.L33>:
    196a:	2e 00 90    	mov.w     [w14+4], w0
    196c:	90 40 78    	mov.b     [w0], w1
    196e:	2e 00 90    	mov.w     [w14+4], w0
    1970:	00 00 e8    	inc.w     w0, w0
    1972:	20 07 98    	mov.w     w0, [w14+4]
    1974:	80 43 80    	mov.w     0x870, w0
    1976:	19 04 07    	rcall     0x21aa <_uart_putc>

00001978 <.LSM81>:
    1978:	1e 0f e8    	inc.w     [w14], [w14]

0000197a <.L32>:
    197a:	9e 00 78    	mov.w     [w14], w1
    197c:	3e 00 90    	mov.w     [w14+6], w0
    197e:	80 8f 50    	sub.w     w1, w0, [w15]
    1980:	f4 ff 39    	bra       NC, 0x196a <.L33>

00001982 <.LSM82>:
    1982:	11 00 37    	bra       0x19a6 <.L34>

00001984 <.L31>:
    1984:	00 00 eb    	clr.w     w0
    1986:	00 0f 78    	mov.w     w0, [w14]
    1988:	08 00 37    	bra       0x199a <.L35>

0000198a <.L36>:
    198a:	2e 00 90    	mov.w     [w14+4], w0
    198c:	90 40 78    	mov.b     [w0], w1
    198e:	2e 00 90    	mov.w     [w14+4], w0
    1990:	00 00 e8    	inc.w     w0, w0
    1992:	20 07 98    	mov.w     w0, [w14+4]
    1994:	90 43 80    	mov.w     0x872, w0
    1996:	09 04 07    	rcall     0x21aa <_uart_putc>

00001998 <.LSM85>:
    1998:	1e 0f e8    	inc.w     [w14], [w14]

0000199a <.L35>:
    199a:	9e 00 78    	mov.w     [w14], w1
    199c:	3e 00 90    	mov.w     [w14+6], w0
    199e:	80 8f 50    	sub.w     w1, w0, [w15]
    19a0:	f4 ff 39    	bra       NC, 0x198a <.L36>

000019a2 <.LSM86>:
    19a2:	01 00 37    	bra       0x19a6 <.L34>

000019a4 <.L37>:
    19a4:	00 00 00    	nop       

000019a6 <.L34>:
    }
    return len;
    19a6:	3e 00 90    	mov.w     [w14+6], w0

000019a8 <.LSM89>:
}
    19a8:	00 80 fa    	ulnk      
    19aa:	00 00 06    	return    

000019ac <_init_uart>:

void init_uart(void) {
    19ac:	00 00 fa    	lnk       #0x0

000019ae <.LSM91>:
    init_pin();
    19ae:	2f 0e 07    	rcall     0x360e <_init_pin>

000019b0 <.LSM92>:

    // pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    // pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    19b0:	40 00 20    	mov.w     #0x4, w0
    19b2:	80 1f 78    	mov.w     w0, [w15++]
    19b4:	30 00 20    	mov.w     #0x3, w0
    19b6:	80 1f 78    	mov.w     w0, [w15++]
    19b8:	80 c0 b3    	mov.b     #0x8, w0
    19ba:	80 1f 78    	mov.w     w0, [w15++]
    19bc:	00 40 eb    	clr.b     w0
    19be:	80 1f 78    	mov.w     w0, [w15++]
    19c0:	40 6a 20    	mov.w     #0x6a4, w0
    19c2:	80 1f 78    	mov.w     w0, [w15++]
    19c4:	40 6a 20    	mov.w     #0x6a4, w0
    19c6:	80 1f 78    	mov.w     w0, [w15++]
    19c8:	b0 c0 b3    	mov.b     #0xb, w0
    19ca:	80 1f 78    	mov.w     w0, [w15++]
    19cc:	c0 c0 b3    	mov.b     #0xc, w0
    19ce:	80 1f 78    	mov.w     w0, [w15++]
    19d0:	47 09 20    	mov.w     #0x94, w7
    19d2:	46 08 20    	mov.w     #0x84, w6
    19d4:	85 22 20    	mov.w     #0x228, w5
    19d6:	64 22 20    	mov.w     #0x226, w4
    19d8:	43 22 20    	mov.w     #0x224, w3
    19da:	22 22 20    	mov.w     #0x222, w2
    19dc:	01 22 20    	mov.w     #0x220, w1
    19de:	c0 a2 20    	mov.w     #0xa2c, w0
    19e0:	51 00 07    	rcall     0x1a84 <_uart_init>
    19e2:	f0 87 57    	sub.w     w15, #0x10, w15

000019e4 <.LSM93>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    19e4:	60 00 20    	mov.w     #0x6, w0
    19e6:	80 1f 78    	mov.w     w0, [w15++]
    19e8:	50 00 20    	mov.w     #0x5, w0
    19ea:	80 1f 78    	mov.w     w0, [w15++]
    19ec:	80 c0 b3    	mov.b     #0x8, w0
    19ee:	80 1f 78    	mov.w     w0, [w15++]
    19f0:	00 40 eb    	clr.b     w0
    19f2:	80 1f 78    	mov.w     w0, [w15++]
    19f4:	60 6a 20    	mov.w     #0x6a6, w0
    19f6:	80 1f 78    	mov.w     w0, [w15++]
    19f8:	60 6a 20    	mov.w     #0x6a6, w0
    19fa:	80 1f 78    	mov.w     w0, [w15++]
    19fc:	e0 c0 b3    	mov.b     #0xe, w0
    19fe:	80 1f 78    	mov.w     w0, [w15++]
    1a00:	f0 c0 b3    	mov.b     #0xf, w0
    1a02:	80 1f 78    	mov.w     w0, [w15++]
    1a04:	67 09 20    	mov.w     #0x96, w7
    1a06:	66 08 20    	mov.w     #0x86, w6
    1a08:	85 23 20    	mov.w     #0x238, w5
    1a0a:	64 23 20    	mov.w     #0x236, w4
    1a0c:	43 23 20    	mov.w     #0x234, w3
    1a0e:	22 23 20    	mov.w     #0x232, w2
    1a10:	01 23 20    	mov.w     #0x230, w1
    1a12:	80 a6 20    	mov.w     #0xa68, w0
    1a14:	37 00 07    	rcall     0x1a84 <_uart_init>
    1a16:	f0 87 57    	sub.w     w15, #0x10, w15

00001a18 <.LSM94>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    1a18:	d0 01 20    	mov.w     #0x1d, w0
    1a1a:	80 1f 78    	mov.w     w0, [w15++]
    1a1c:	c0 01 20    	mov.w     #0x1c, w0
    1a1e:	80 1f 78    	mov.w     w0, [w15++]
    1a20:	80 c0 b3    	mov.b     #0x8, w0
    1a22:	80 1f 78    	mov.w     w0, [w15++]
    1a24:	80 c0 b3    	mov.b     #0x8, w0
    1a26:	80 1f 78    	mov.w     w0, [w15++]
    1a28:	a0 6a 20    	mov.w     #0x6aa, w0
    1a2a:	80 1f 78    	mov.w     w0, [w15++]
    1a2c:	20 6a 20    	mov.w     #0x6a2, w0
    1a2e:	80 1f 78    	mov.w     w0, [w15++]
    1a30:	20 c0 b3    	mov.b     #0x2, w0
    1a32:	80 1f 78    	mov.w     w0, [w15++]
    1a34:	30 c0 b3    	mov.b     #0x3, w0
    1a36:	80 1f 78    	mov.w     w0, [w15++]
    1a38:	e7 09 20    	mov.w     #0x9e, w7
    1a3a:	e6 08 20    	mov.w     #0x8e, w6
    1a3c:	85 25 20    	mov.w     #0x258, w5
    1a3e:	64 25 20    	mov.w     #0x256, w4
    1a40:	43 25 20    	mov.w     #0x254, w3
    1a42:	22 25 20    	mov.w     #0x252, w2
    1a44:	01 25 20    	mov.w     #0x250, w1
    1a46:	40 aa 20    	mov.w     #0xaa4, w0
    1a48:	1d 00 07    	rcall     0x1a84 <_uart_init>
    1a4a:	f0 87 57    	sub.w     w15, #0x10, w15

00001a4c <.LSM95>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    1a4c:	f0 01 20    	mov.w     #0x1f, w0
    1a4e:	80 1f 78    	mov.w     w0, [w15++]
    1a50:	e0 01 20    	mov.w     #0x1e, w0
    1a52:	80 1f 78    	mov.w     w0, [w15++]
    1a54:	80 c0 b3    	mov.b     #0x8, w0
    1a56:	80 1f 78    	mov.w     w0, [w15++]
    1a58:	00 40 eb    	clr.b     w0
    1a5a:	80 1f 78    	mov.w     w0, [w15++]
    1a5c:	60 6b 20    	mov.w     #0x6b6, w0
    1a5e:	80 1f 78    	mov.w     w0, [w15++]
    1a60:	60 6b 20    	mov.w     #0x6b6, w0
    1a62:	80 1f 78    	mov.w     w0, [w15++]
    1a64:	80 c0 b3    	mov.b     #0x8, w0
    1a66:	80 1f 78    	mov.w     w0, [w15++]
    1a68:	90 c0 b3    	mov.b     #0x9, w0
    1a6a:	80 1f 78    	mov.w     w0, [w15++]
    1a6c:	e7 09 20    	mov.w     #0x9e, w7
    1a6e:	e6 08 20    	mov.w     #0x8e, w6
    1a70:	85 2b 20    	mov.w     #0x2b8, w5
    1a72:	64 2b 20    	mov.w     #0x2b6, w4
    1a74:	43 2b 20    	mov.w     #0x2b4, w3
    1a76:	22 2b 20    	mov.w     #0x2b2, w2
    1a78:	01 2b 20    	mov.w     #0x2b0, w1
    1a7a:	00 ae 20    	mov.w     #0xae0, w0
    1a7c:	03 00 07    	rcall     0x1a84 <_uart_init>
    1a7e:	f0 87 57    	sub.w     w15, #0x10, w15

00001a80 <.LSM96>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    // uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    //           0, NULL, 0, NULL, 0);

    // _stdout = &uart1;
    // _stderr = &uart1;

}
    1a80:	00 80 fa    	ulnk      
    1a82:	00 00 06    	return    

00001a84 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1a84:	10 00 fa    	lnk       #0x10
    1a86:	00 0f 78    	mov.w     w0, [w14]
    1a88:	11 07 98    	mov.w     w1, [w14+2]
    1a8a:	22 07 98    	mov.w     w2, [w14+4]
    1a8c:	33 07 98    	mov.w     w3, [w14+6]
    1a8e:	44 07 98    	mov.w     w4, [w14+8]
    1a90:	55 07 98    	mov.w     w5, [w14+10]
    1a92:	66 07 98    	mov.w     w6, [w14+12]
    1a94:	77 07 98    	mov.w     w7, [w14+14]

00001a96 <.LSM98>:
    self->UxMODE = UxMODE;
    1a96:	1e 00 78    	mov.w     [w14], w0
    1a98:	9e 00 90    	mov.w     [w14+2], w1
    1a9a:	01 08 78    	mov.w     w1, [w0]

00001a9c <.LSM99>:
    self->UxSTA = UxSTA;
    1a9c:	1e 00 78    	mov.w     [w14], w0
    1a9e:	ae 00 90    	mov.w     [w14+4], w1
    1aa0:	11 00 98    	mov.w     w1, [w0+2]

00001aa2 <.LSM100>:
    self->UxTXREG = UxTXREG;
    1aa2:	1e 00 78    	mov.w     [w14], w0
    1aa4:	be 00 90    	mov.w     [w14+6], w1
    1aa6:	21 00 98    	mov.w     w1, [w0+4]

00001aa8 <.LSM101>:
    self->UxRXREG = UxRXREG;
    1aa8:	1e 00 78    	mov.w     [w14], w0
    1aaa:	ce 00 90    	mov.w     [w14+8], w1
    1aac:	31 00 98    	mov.w     w1, [w0+6]

00001aae <.LSM102>:
    self->UxBRG = UxBRG;
    1aae:	1e 00 78    	mov.w     [w14], w0
    1ab0:	de 00 90    	mov.w     [w14+10], w1
    1ab2:	41 00 98    	mov.w     w1, [w0+8]

00001ab4 <.LSM103>:
    self->IFSy = IFSy;
    1ab4:	1e 00 78    	mov.w     [w14], w0
    1ab6:	ee 00 90    	mov.w     [w14+12], w1
    1ab8:	51 00 98    	mov.w     w1, [w0+10]

00001aba <.LSM104>:
    self->IECy = IECy;
    1aba:	1e 00 78    	mov.w     [w14], w0
    1abc:	fe 00 90    	mov.w     [w14+14], w1
    1abe:	61 00 98    	mov.w     w1, [w0+12]

00001ac0 <.LSM105>:
    self->UxTXIF = UxTXIF;
    1ac0:	1e 00 78    	mov.w     [w14], w0
    1ac2:	8e f8 97    	mov.b     [w14-8], w1
    1ac4:	61 48 98    	mov.b     w1, [w0+14]

00001ac6 <.LSM106>:
    self->UxRXIF = UxRXIF;
    1ac6:	1e 00 78    	mov.w     [w14], w0
    1ac8:	ee f0 97    	mov.b     [w14-10], w1
    1aca:	71 48 98    	mov.b     w1, [w0+15]

00001acc <.LSM107>:
    self->RXrpinr = RXrpinr;
    1acc:	1e 00 78    	mov.w     [w14], w0
    1ace:	ae b8 97    	mov.w     [w14-12], w1
    1ad0:	01 08 98    	mov.w     w1, [w0+16]

00001ad2 <.LSM108>:
    self->CTSrpinr = CTSrpinr;
    1ad2:	1e 00 78    	mov.w     [w14], w0
    1ad4:	9e b8 97    	mov.w     [w14-14], w1
    1ad6:	11 08 98    	mov.w     w1, [w0+18]

00001ad8 <.LSM109>:
    self->RXrpshift = RXrpshift;
    1ad8:	1e 00 78    	mov.w     [w14], w0
    1ada:	8e f0 97    	mov.b     [w14-16], w1
    1adc:	41 50 98    	mov.b     w1, [w0+20]

00001ade <.LSM110>:
    self->CTSrpshift = CTSrpshift;
    1ade:	1e 00 78    	mov.w     [w14], w0
    1ae0:	ee e8 97    	mov.b     [w14-18], w1
    1ae2:	51 50 98    	mov.b     w1, [w0+21]

00001ae4 <.LSM111>:
    self->TXrpnum = TXrpnum;
    1ae4:	1e 00 78    	mov.w     [w14], w0
    1ae6:	ee b0 97    	mov.w     [w14-20], w1
    1ae8:	31 08 98    	mov.w     w1, [w0+22]

00001aea <.LSM112>:
    self->RTSrpnum = RTSrpnum;
    1aea:	1e 00 78    	mov.w     [w14], w0
    1aec:	de b0 97    	mov.w     [w14-22], w1
    1aee:	41 08 98    	mov.w     w1, [w0+24]

00001af0 <.LSM113>:
    self->TX = NULL;
    1af0:	1e 00 78    	mov.w     [w14], w0
    1af2:	80 00 eb    	clr.w     w1
    1af4:	51 08 98    	mov.w     w1, [w0+26]

00001af6 <.LSM114>:
    self->RX = NULL;
    1af6:	1e 00 78    	mov.w     [w14], w0
    1af8:	80 00 eb    	clr.w     w1
    1afa:	61 08 98    	mov.w     w1, [w0+28]

00001afc <.LSM115>:
    self->RTS = NULL;
    1afc:	1e 00 78    	mov.w     [w14], w0
    1afe:	80 00 eb    	clr.w     w1
    1b00:	71 08 98    	mov.w     w1, [w0+30]

00001b02 <.LSM116>:
    self->CTS = NULL;
    1b02:	1e 00 78    	mov.w     [w14], w0
    1b04:	80 00 eb    	clr.w     w1
    1b06:	01 10 98    	mov.w     w1, [w0+32]

00001b08 <.LSM117>:
    self->TXbuffer.data = NULL;
    1b08:	1e 00 78    	mov.w     [w14], w0
    1b0a:	80 00 eb    	clr.w     w1
    1b0c:	11 10 98    	mov.w     w1, [w0+34]

00001b0e <.LSM118>:
    self->TXbuffer.length = 0;
    1b0e:	1e 00 78    	mov.w     [w14], w0
    1b10:	80 00 eb    	clr.w     w1
    1b12:	21 10 98    	mov.w     w1, [w0+36]

00001b14 <.LSM119>:
    self->TXbuffer.head = 0;
    1b14:	1e 00 78    	mov.w     [w14], w0
    1b16:	80 00 eb    	clr.w     w1
    1b18:	31 10 98    	mov.w     w1, [w0+38]

00001b1a <.LSM120>:
    self->TXbuffer.tail = 0;
    1b1a:	1e 00 78    	mov.w     [w14], w0
    1b1c:	80 00 eb    	clr.w     w1
    1b1e:	41 10 98    	mov.w     w1, [w0+40]

00001b20 <.LSM121>:
    self->TXbuffer.count = 0;
    1b20:	1e 00 78    	mov.w     [w14], w0
    1b22:	80 00 eb    	clr.w     w1
    1b24:	51 10 98    	mov.w     w1, [w0+42]

00001b26 <.LSM122>:
    self->RXbuffer.data = NULL;
    1b26:	1e 00 78    	mov.w     [w14], w0
    1b28:	80 00 eb    	clr.w     w1
    1b2a:	61 10 98    	mov.w     w1, [w0+44]

00001b2c <.LSM123>:
    self->RXbuffer.length = 0;
    1b2c:	1e 00 78    	mov.w     [w14], w0
    1b2e:	80 00 eb    	clr.w     w1
    1b30:	71 10 98    	mov.w     w1, [w0+46]

00001b32 <.LSM124>:
    self->RXbuffer.head = 0;
    1b32:	1e 00 78    	mov.w     [w14], w0
    1b34:	80 00 eb    	clr.w     w1
    1b36:	01 18 98    	mov.w     w1, [w0+48]

00001b38 <.LSM125>:
    self->RXbuffer.tail = 0;
    1b38:	1e 00 78    	mov.w     [w14], w0
    1b3a:	80 00 eb    	clr.w     w1
    1b3c:	11 18 98    	mov.w     w1, [w0+50]

00001b3e <.LSM126>:
    self->RXbuffer.count = 0;
    1b3e:	1e 00 78    	mov.w     [w14], w0
    1b40:	80 00 eb    	clr.w     w1
    1b42:	21 18 98    	mov.w     w1, [w0+52]

00001b44 <.LSM127>:
    self->TXthreshold = 1;
    1b44:	1e 00 78    	mov.w     [w14], w0
    1b46:	11 00 20    	mov.w     #0x1, w1
    1b48:	31 18 98    	mov.w     w1, [w0+54]

00001b4a <.LSM128>:
    self->putc = NULL;
    1b4a:	1e 00 78    	mov.w     [w14], w0
    1b4c:	80 00 eb    	clr.w     w1
    1b4e:	41 18 98    	mov.w     w1, [w0+56]

00001b50 <.LSM129>:
    self->getc = NULL;
    1b50:	1e 00 78    	mov.w     [w14], w0
    1b52:	80 00 eb    	clr.w     w1
    1b54:	51 18 98    	mov.w     w1, [w0+58]

00001b56 <.LSM130>:
}
    1b56:	00 80 fa    	ulnk      
    1b58:	00 00 06    	return    

00001b5a <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1b5a:	10 00 fa    	lnk       #0x10
    1b5c:	88 1f 78    	mov.w     w8, [w15++]
    1b5e:	00 0f 78    	mov.w     w0, [w14]
    1b60:	11 07 98    	mov.w     w1, [w14+2]
    1b62:	22 07 98    	mov.w     w2, [w14+4]
    1b64:	33 07 98    	mov.w     w3, [w14+6]
    1b66:	44 07 98    	mov.w     w4, [w14+8]
    1b68:	56 07 98    	mov.w     w6, [w14+10]
    1b6a:	67 07 98    	mov.w     w7, [w14+12]
    1b6c:	65 4f 98    	mov.b     w5, [w14+14]

00001b6e <.LSM132>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1b6e:	1e 00 78    	mov.w     [w14], w0
    1b70:	10 00 78    	mov.w     [w0], w0
    1b72:	80 00 eb    	clr.w     w1
    1b74:	01 08 78    	mov.w     w1, [w0]

00001b76 <.LSM133>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1b76:	1e 00 90    	mov.w     [w14+2], w0
    1b78:	60 00 90    	mov.w     [w0+12], w0
    1b7a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b7c:	0e 02 32    	bra       Z, 0x1f9a <.L73>
    1b7e:	2e 00 90    	mov.w     [w14+4], w0
    1b80:	60 00 90    	mov.w     [w0+12], w0
    1b82:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b84:	0c 02 32    	bra       Z, 0x1f9e <.L74>

00001b86 <.LSM134>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1b86:	1e 00 90    	mov.w     [w14+2], w0
    1b88:	00 08 90    	mov.w     [w0+16], w0
    1b8a:	00 00 e0    	cp0.w     w0
    1b8c:	69 00 3a    	bra       NZ, 0x1c60 <.L44>
    1b8e:	2e 00 90    	mov.w     [w14+4], w0
    1b90:	00 08 90    	mov.w     [w0+16], w0
    1b92:	00 00 e0    	cp0.w     w0
    1b94:	65 00 3a    	bra       NZ, 0x1c60 <.L44>

00001b96 <.LSM135>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1b96:	1e 00 90    	mov.w     [w14+2], w0
    1b98:	a1 0e 07    	rcall     0x38dc <_pin_digitalOut>

00001b9a <.LSM136>:
        pin_set(TX);
    1b9a:	1e 00 90    	mov.w     [w14+2], w0
    1b9c:	fc 0e 07    	rcall     0x3996 <_pin_set>

00001b9e <.LSM137>:
        pin_digitalIn(RX);
    1b9e:	2e 00 90    	mov.w     [w14+4], w0
    1ba0:	76 0e 07    	rcall     0x388e <_pin_digitalIn>

00001ba2 <.LSM138>:
        self->TX = TX;
    1ba2:	1e 00 78    	mov.w     [w14], w0
    1ba4:	9e 00 90    	mov.w     [w14+2], w1
    1ba6:	51 08 98    	mov.w     w1, [w0+26]

00001ba8 <.LSM139>:
        TX->owner = (void *)self;
    1ba8:	1e 00 90    	mov.w     [w14+2], w0
    1baa:	9e 00 78    	mov.w     [w14], w1
    1bac:	01 08 98    	mov.w     w1, [w0+16]

00001bae <.LSM140>:
        TX->write = NULL;
    1bae:	1e 00 90    	mov.w     [w14+2], w0
    1bb0:	80 00 eb    	clr.w     w1
    1bb2:	11 08 98    	mov.w     w1, [w0+18]

00001bb4 <.LSM141>:
        TX->read = NULL;
    1bb4:	1e 00 90    	mov.w     [w14+2], w0
    1bb6:	80 00 eb    	clr.w     w1
    1bb8:	21 08 98    	mov.w     w1, [w0+20]

00001bba <.LSM142>:
        self->RX = RX;
    1bba:	1e 00 78    	mov.w     [w14], w0
    1bbc:	ae 00 90    	mov.w     [w14+4], w1
    1bbe:	61 08 98    	mov.w     w1, [w0+28]

00001bc0 <.LSM143>:
        RX->owner = (void *)self;
    1bc0:	2e 00 90    	mov.w     [w14+4], w0
    1bc2:	9e 00 78    	mov.w     [w14], w1
    1bc4:	01 08 98    	mov.w     w1, [w0+16]

00001bc6 <.LSM144>:
        RX->write = NULL;
    1bc6:	2e 00 90    	mov.w     [w14+4], w0
    1bc8:	80 00 eb    	clr.w     w1
    1bca:	11 08 98    	mov.w     w1, [w0+18]

00001bcc <.LSM145>:
        RX->read = NULL;
    1bcc:	2e 00 90    	mov.w     [w14+4], w0
    1bce:	80 00 eb    	clr.w     w1
    1bd0:	21 08 98    	mov.w     w1, [w0+20]

00001bd2 <.LSM146>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1bd2:	11 3a 80    	mov.w     0x742, w1
    1bd4:	f0 0b 20    	mov.w     #0xbf, w0
    1bd6:	00 81 60    	and.w     w1, w0, w2
    1bd8:	60 04 20    	mov.w     #0x46, w0
    1bda:	71 05 20    	mov.w     #0x57, w1
    1bdc:	23 74 20    	mov.w     #0x742, w3
    1bde:	80 49 78    	mov.b     w0, [w3]
    1be0:	81 49 78    	mov.b     w1, [w3]
    1be2:	82 49 78    	mov.b     w2, [w3]

00001be4 <.LSM147>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    1be4:	1e 00 90    	mov.w     [w14+2], w0
    1be6:	70 00 90    	mov.w     [w0+14], w0
    1be8:	9e 00 90    	mov.w     [w14+2], w1
    1bea:	f1 00 90    	mov.w     [w1+14], w1
    1bec:	11 01 78    	mov.w     [w1], w2
    1bee:	9e 00 90    	mov.w     [w14+2], w1
    1bf0:	a1 48 90    	mov.b     [w1+10], w1
    1bf2:	81 80 fb    	ze        w1, w1
    1bf4:	f3 03 20    	mov.w     #0x3f, w3
    1bf6:	81 18 dd    	sl.w      w3, w1, w1
    1bf8:	81 80 ea    	com.w     w1, w1
    1bfa:	81 00 61    	and.w     w2, w1, w1
    1bfc:	01 08 78    	mov.w     w1, [w0]

00001bfe <.LSM148>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    1bfe:	1e 00 90    	mov.w     [w14+2], w0
    1c00:	70 00 90    	mov.w     [w0+14], w0
    1c02:	9e 00 90    	mov.w     [w14+2], w1
    1c04:	f1 00 90    	mov.w     [w1+14], w1
    1c06:	11 01 78    	mov.w     [w1], w2
    1c08:	9e 00 78    	mov.w     [w14], w1
    1c0a:	b1 09 90    	mov.w     [w1+22], w3
    1c0c:	9e 00 90    	mov.w     [w14+2], w1
    1c0e:	a1 48 90    	mov.b     [w1+10], w1
    1c10:	81 80 fb    	ze        w1, w1
    1c12:	81 18 dd    	sl.w      w3, w1, w1
    1c14:	82 80 70    	ior.w     w1, w2, w1
    1c16:	01 08 78    	mov.w     w1, [w0]

00001c18 <.LSM149>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    1c18:	1e 00 78    	mov.w     [w14], w0
    1c1a:	00 08 90    	mov.w     [w0+16], w0
    1c1c:	9e 00 78    	mov.w     [w14], w1
    1c1e:	81 08 90    	mov.w     [w1+16], w1
    1c20:	11 01 78    	mov.w     [w1], w2
    1c22:	9e 00 78    	mov.w     [w14], w1
    1c24:	c1 50 90    	mov.b     [w1+20], w1
    1c26:	81 80 fb    	ze        w1, w1
    1c28:	f3 03 20    	mov.w     #0x3f, w3
    1c2a:	81 18 dd    	sl.w      w3, w1, w1
    1c2c:	81 80 ea    	com.w     w1, w1
    1c2e:	81 00 61    	and.w     w2, w1, w1
    1c30:	01 08 78    	mov.w     w1, [w0]

00001c32 <.LSM150>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    1c32:	1e 00 78    	mov.w     [w14], w0
    1c34:	00 08 90    	mov.w     [w0+16], w0
    1c36:	9e 00 78    	mov.w     [w14], w1
    1c38:	81 08 90    	mov.w     [w1+16], w1
    1c3a:	11 01 78    	mov.w     [w1], w2
    1c3c:	ae 00 90    	mov.w     [w14+4], w1
    1c3e:	e1 01 90    	mov.w     [w1+12], w3
    1c40:	9e 00 78    	mov.w     [w14], w1
    1c42:	c1 50 90    	mov.b     [w1+20], w1
    1c44:	81 80 fb    	ze        w1, w1
    1c46:	81 18 dd    	sl.w      w3, w1, w1
    1c48:	82 80 70    	ior.w     w1, w2, w1
    1c4a:	01 08 78    	mov.w     w1, [w0]

00001c4c <.LSM151>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    1c4c:	11 3a 80    	mov.w     0x742, w1
    1c4e:	00 04 20    	mov.w     #0x40, w0
    1c50:	01 01 70    	ior.w     w0, w1, w2
    1c52:	60 04 20    	mov.w     #0x46, w0
    1c54:	71 05 20    	mov.w     #0x57, w1
    1c56:	23 74 20    	mov.w     #0x742, w3
    1c58:	80 49 78    	mov.b     w0, [w3]
    1c5a:	81 49 78    	mov.b     w1, [w3]
    1c5c:	82 49 78    	mov.b     w2, [w3]
    1c5e:	0a 00 37    	bra       0x1c74 <.L45>

00001c60 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    1c60:	1e 00 78    	mov.w     [w14], w0
    1c62:	d0 08 90    	mov.w     [w0+26], w1
    1c64:	1e 00 90    	mov.w     [w14+2], w0
    1c66:	80 8f 50    	sub.w     w1, w0, [w15]
    1c68:	9c 01 3a    	bra       NZ, 0x1fa2 <.L75>
    1c6a:	1e 00 78    	mov.w     [w14], w0
    1c6c:	e0 08 90    	mov.w     [w0+28], w1
    1c6e:	2e 00 90    	mov.w     [w14+4], w0
    1c70:	80 8f 50    	sub.w     w1, w0, [w15]
    1c72:	99 01 3a    	bra       NZ, 0x1fa6 <.L76>

00001c74 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    1c74:	3e 00 90    	mov.w     [w14+6], w0
    1c76:	00 00 e0    	cp0.w     w0
    1c78:	87 00 32    	bra       Z, 0x1d88 <.L47>
    1c7a:	4e 00 90    	mov.w     [w14+8], w0
    1c7c:	00 00 e0    	cp0.w     w0
    1c7e:	84 00 32    	bra       Z, 0x1d88 <.L47>

00001c80 <.LSM154>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    1c80:	3e 00 90    	mov.w     [w14+6], w0
    1c82:	60 00 90    	mov.w     [w0+12], w0
    1c84:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c86:	91 01 32    	bra       Z, 0x1faa <.L77>
    1c88:	4e 00 90    	mov.w     [w14+8], w0
    1c8a:	60 00 90    	mov.w     [w0+12], w0
    1c8c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c8e:	8f 01 32    	bra       Z, 0x1fae <.L78>

00001c90 <.LSM155>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    1c90:	3e 00 90    	mov.w     [w14+6], w0
    1c92:	00 08 90    	mov.w     [w0+16], w0
    1c94:	00 00 e0    	cp0.w     w0
    1c96:	69 00 3a    	bra       NZ, 0x1d6a <.L50>
    1c98:	4e 00 90    	mov.w     [w14+8], w0
    1c9a:	00 08 90    	mov.w     [w0+16], w0
    1c9c:	00 00 e0    	cp0.w     w0
    1c9e:	65 00 3a    	bra       NZ, 0x1d6a <.L50>

00001ca0 <.LSM156>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    1ca0:	3e 00 90    	mov.w     [w14+6], w0
    1ca2:	1c 0e 07    	rcall     0x38dc <_pin_digitalOut>

00001ca4 <.LSM157>:
            pin_set(RTS);
    1ca4:	3e 00 90    	mov.w     [w14+6], w0
    1ca6:	77 0e 07    	rcall     0x3996 <_pin_set>

00001ca8 <.LSM158>:
            pin_digitalIn(CTS);
    1ca8:	4e 00 90    	mov.w     [w14+8], w0
    1caa:	f1 0d 07    	rcall     0x388e <_pin_digitalIn>

00001cac <.LSM159>:
            self->RTS = RTS;
    1cac:	1e 00 78    	mov.w     [w14], w0
    1cae:	be 00 90    	mov.w     [w14+6], w1
    1cb0:	71 08 98    	mov.w     w1, [w0+30]

00001cb2 <.LSM160>:
            RTS->owner = (void *)self;
    1cb2:	3e 00 90    	mov.w     [w14+6], w0
    1cb4:	9e 00 78    	mov.w     [w14], w1
    1cb6:	01 08 98    	mov.w     w1, [w0+16]

00001cb8 <.LSM161>:
            RTS->write = NULL;
    1cb8:	3e 00 90    	mov.w     [w14+6], w0
    1cba:	80 00 eb    	clr.w     w1
    1cbc:	11 08 98    	mov.w     w1, [w0+18]

00001cbe <.LSM162>:
            RTS->read = NULL;
    1cbe:	3e 00 90    	mov.w     [w14+6], w0
    1cc0:	80 00 eb    	clr.w     w1
    1cc2:	21 08 98    	mov.w     w1, [w0+20]

00001cc4 <.LSM163>:
            self->CTS = CTS;
    1cc4:	1e 00 78    	mov.w     [w14], w0
    1cc6:	ce 00 90    	mov.w     [w14+8], w1
    1cc8:	01 10 98    	mov.w     w1, [w0+32]

00001cca <.LSM164>:
            CTS->owner = (void *)self;
    1cca:	4e 00 90    	mov.w     [w14+8], w0
    1ccc:	9e 00 78    	mov.w     [w14], w1
    1cce:	01 08 98    	mov.w     w1, [w0+16]

00001cd0 <.LSM165>:
            CTS->write = NULL;
    1cd0:	4e 00 90    	mov.w     [w14+8], w0
    1cd2:	80 00 eb    	clr.w     w1
    1cd4:	11 08 98    	mov.w     w1, [w0+18]

00001cd6 <.LSM166>:
            CTS->read = NULL;
    1cd6:	4e 00 90    	mov.w     [w14+8], w0
    1cd8:	80 00 eb    	clr.w     w1
    1cda:	21 08 98    	mov.w     w1, [w0+20]

00001cdc <.LSM167>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    1cdc:	11 3a 80    	mov.w     0x742, w1
    1cde:	f0 0b 20    	mov.w     #0xbf, w0
    1ce0:	00 81 60    	and.w     w1, w0, w2
    1ce2:	60 04 20    	mov.w     #0x46, w0
    1ce4:	71 05 20    	mov.w     #0x57, w1
    1ce6:	23 74 20    	mov.w     #0x742, w3
    1ce8:	80 49 78    	mov.b     w0, [w3]
    1cea:	81 49 78    	mov.b     w1, [w3]
    1cec:	82 49 78    	mov.b     w2, [w3]

00001cee <.LSM168>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    1cee:	3e 00 90    	mov.w     [w14+6], w0
    1cf0:	70 00 90    	mov.w     [w0+14], w0
    1cf2:	be 00 90    	mov.w     [w14+6], w1
    1cf4:	f1 00 90    	mov.w     [w1+14], w1
    1cf6:	11 01 78    	mov.w     [w1], w2
    1cf8:	be 00 90    	mov.w     [w14+6], w1
    1cfa:	a1 48 90    	mov.b     [w1+10], w1
    1cfc:	81 80 fb    	ze        w1, w1
    1cfe:	f3 03 20    	mov.w     #0x3f, w3
    1d00:	81 18 dd    	sl.w      w3, w1, w1
    1d02:	81 80 ea    	com.w     w1, w1
    1d04:	81 00 61    	and.w     w2, w1, w1
    1d06:	01 08 78    	mov.w     w1, [w0]

00001d08 <.LSM169>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    1d08:	3e 00 90    	mov.w     [w14+6], w0
    1d0a:	70 00 90    	mov.w     [w0+14], w0
    1d0c:	be 00 90    	mov.w     [w14+6], w1
    1d0e:	f1 00 90    	mov.w     [w1+14], w1
    1d10:	11 01 78    	mov.w     [w1], w2
    1d12:	9e 00 78    	mov.w     [w14], w1
    1d14:	c1 09 90    	mov.w     [w1+24], w3
    1d16:	be 00 90    	mov.w     [w14+6], w1
    1d18:	a1 48 90    	mov.b     [w1+10], w1
    1d1a:	81 80 fb    	ze        w1, w1
    1d1c:	81 18 dd    	sl.w      w3, w1, w1
    1d1e:	82 80 70    	ior.w     w1, w2, w1
    1d20:	01 08 78    	mov.w     w1, [w0]

00001d22 <.LSM170>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    1d22:	1e 00 78    	mov.w     [w14], w0
    1d24:	10 08 90    	mov.w     [w0+18], w0
    1d26:	9e 00 78    	mov.w     [w14], w1
    1d28:	91 08 90    	mov.w     [w1+18], w1
    1d2a:	11 01 78    	mov.w     [w1], w2
    1d2c:	9e 00 78    	mov.w     [w14], w1
    1d2e:	d1 50 90    	mov.b     [w1+21], w1
    1d30:	81 80 fb    	ze        w1, w1
    1d32:	f3 03 20    	mov.w     #0x3f, w3
    1d34:	81 18 dd    	sl.w      w3, w1, w1
    1d36:	81 80 ea    	com.w     w1, w1
    1d38:	81 00 61    	and.w     w2, w1, w1
    1d3a:	01 08 78    	mov.w     w1, [w0]

00001d3c <.LSM171>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    1d3c:	1e 00 78    	mov.w     [w14], w0
    1d3e:	10 08 90    	mov.w     [w0+18], w0
    1d40:	9e 00 78    	mov.w     [w14], w1
    1d42:	91 08 90    	mov.w     [w1+18], w1
    1d44:	11 01 78    	mov.w     [w1], w2
    1d46:	ce 00 90    	mov.w     [w14+8], w1
    1d48:	e1 01 90    	mov.w     [w1+12], w3
    1d4a:	9e 00 78    	mov.w     [w14], w1
    1d4c:	d1 50 90    	mov.b     [w1+21], w1
    1d4e:	81 80 fb    	ze        w1, w1
    1d50:	81 18 dd    	sl.w      w3, w1, w1
    1d52:	82 80 70    	ior.w     w1, w2, w1
    1d54:	01 08 78    	mov.w     w1, [w0]

00001d56 <.LSM172>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    1d56:	11 3a 80    	mov.w     0x742, w1
    1d58:	00 04 20    	mov.w     #0x40, w0
    1d5a:	01 01 70    	ior.w     w0, w1, w2
    1d5c:	60 04 20    	mov.w     #0x46, w0
    1d5e:	71 05 20    	mov.w     #0x57, w1
    1d60:	23 74 20    	mov.w     #0x742, w3
    1d62:	80 49 78    	mov.b     w0, [w3]
    1d64:	81 49 78    	mov.b     w1, [w3]
    1d66:	82 49 78    	mov.b     w2, [w3]
    1d68:	0a 00 37    	bra       0x1d7e <.L51>

00001d6a <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    1d6a:	1e 00 78    	mov.w     [w14], w0
    1d6c:	f0 08 90    	mov.w     [w0+30], w1
    1d6e:	3e 00 90    	mov.w     [w14+6], w0
    1d70:	80 8f 50    	sub.w     w1, w0, [w15]
    1d72:	1f 01 3a    	bra       NZ, 0x1fb2 <.L79>
    1d74:	1e 00 78    	mov.w     [w14], w0
    1d76:	80 10 90    	mov.w     [w0+32], w1
    1d78:	4e 00 90    	mov.w     [w14+8], w0
    1d7a:	80 8f 50    	sub.w     w1, w0, [w15]
    1d7c:	1c 01 3a    	bra       NZ, 0x1fb6 <.L80>

00001d7e <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    1d7e:	1e 00 78    	mov.w     [w14], w0
    1d80:	10 00 78    	mov.w     [w0], w0
    1d82:	01 20 20    	mov.w     #0x200, w1
    1d84:	01 08 78    	mov.w     w1, [w0]
    1d86:	06 00 37    	bra       0x1d94 <.L53>

00001d88 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    1d88:	3e 00 90    	mov.w     [w14+6], w0
    1d8a:	00 00 e0    	cp0.w     w0
    1d8c:	16 01 3a    	bra       NZ, 0x1fba <.L81>
    1d8e:	4e 00 90    	mov.w     [w14+8], w0
    1d90:	00 00 e0    	cp0.w     w0
    1d92:	15 01 3a    	bra       NZ, 0x1fbe <.L82>

00001d94 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    1d94:	18 c0 b3    	mov.b     #0x1, w8
    1d96:	02 40 22    	mov.w     #0x2400, w2
    1d98:	43 a7 24    	mov.w     #0x4a74, w3
    1d9a:	5e 00 90    	mov.w     [w14+10], w0
    1d9c:	ee 00 90    	mov.w     [w14+12], w1
    1d9e:	dd fa 07    	rcall     0x135a <___gesf2>
    1da0:	00 00 e0    	cp0.w     w0
    1da2:	01 00 3c    	bra       GT, 0x1da6 <.L55>
    1da4:	00 44 eb    	clr.b     w8

00001da6 <.L55>:
    1da6:	08 04 e0    	cp0.b     w8
    1da8:	04 00 32    	bra       Z, 0x1db2 <.L56>

00001daa <.LSM177>:
        baudrate = FCY/4.;
    1daa:	00 40 22    	mov.w     #0x2400, w0
    1dac:	41 a7 24    	mov.w     #0x4a74, w1
    1dae:	50 07 98    	mov.w     w0, [w14+10]
    1db0:	61 07 98    	mov.w     w1, [w14+12]

00001db2 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    1db2:	18 c0 b3    	mov.b     #0x1, w8
    1db4:	02 40 22    	mov.w     #0x2400, w2
    1db6:	43 17 24    	mov.w     #0x4174, w3
    1db8:	5e 00 90    	mov.w     [w14+10], w0
    1dba:	ee 00 90    	mov.w     [w14+12], w1
    1dbc:	cc fa 07    	rcall     0x1356 <___eqsf2>
    1dbe:	00 00 e0    	cp0.w     w0
    1dc0:	01 00 35    	bra       LT, 0x1dc4 <.L57>
    1dc2:	00 44 eb    	clr.b     w8

00001dc4 <.L57>:
    1dc4:	08 04 e0    	cp0.b     w8
    1dc6:	04 00 32    	bra       Z, 0x1dd0 <.L58>

00001dc8 <.LSM179>:
        baudrate = FCY/(16.*65536.);
    1dc8:	00 40 22    	mov.w     #0x2400, w0
    1dca:	41 17 24    	mov.w     #0x4174, w1
    1dcc:	50 07 98    	mov.w     w0, [w14+10]
    1dce:	61 07 98    	mov.w     w1, [w14+12]

00001dd0 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    1dd0:	18 c0 b3    	mov.b     #0x1, w8
    1dd2:	02 40 22    	mov.w     #0x2400, w2
    1dd4:	43 27 24    	mov.w     #0x4274, w3
    1dd6:	5e 00 90    	mov.w     [w14+10], w0
    1dd8:	ee 00 90    	mov.w     [w14+12], w1
    1dda:	bd fa 07    	rcall     0x1356 <___eqsf2>
    1ddc:	00 00 e0    	cp0.w     w0
    1dde:	01 00 34    	bra       LE, 0x1de2 <.L59>
    1de0:	00 44 eb    	clr.b     w8

00001de2 <.L59>:
    1de2:	08 04 e0    	cp0.b     w8
    1de4:	0f 00 32    	bra       Z, 0x1e04 <.L60>

00001de6 <.LSM181>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    1de6:	1e 00 78    	mov.w     [w14], w0
    1de8:	40 04 90    	mov.w     [w0+8], w8
    1dea:	5e 01 90    	mov.w     [w14+10], w2
    1dec:	ee 01 90    	mov.w     [w14+12], w3
    1dee:	00 40 22    	mov.w     #0x2400, w0
    1df0:	41 97 24    	mov.w     #0x4974, w1
    1df2:	6f fa 07    	rcall     0x12d2 <___divsf3>
    1df4:	02 00 20    	mov.w     #0x0, w2
    1df6:	03 f0 23    	mov.w     #0x3f00, w3
    1df8:	0f fa 07    	rcall     0x1218 <___addsf3>
    1dfa:	b1 fa 07    	rcall     0x135e <___fixunssfsi>
    1dfc:	00 00 78    	mov.w     w0, w0
    1dfe:	00 00 e9    	dec.w     w0, w0
    1e00:	00 0c 78    	mov.w     w0, [w8]
    1e02:	15 00 37    	bra       0x1e2e <.L61>

00001e04 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    1e04:	1e 00 78    	mov.w     [w14], w0
    1e06:	10 00 78    	mov.w     [w0], w0
    1e08:	9e 00 78    	mov.w     [w14], w1
    1e0a:	91 00 78    	mov.w     [w1], w1
    1e0c:	91 00 78    	mov.w     [w1], w1
    1e0e:	01 30 a0    	bset.w    w1, #0x3
    1e10:	01 08 78    	mov.w     w1, [w0]

00001e12 <.LSM183>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    1e12:	1e 00 78    	mov.w     [w14], w0
    1e14:	40 04 90    	mov.w     [w0+8], w8
    1e16:	5e 01 90    	mov.w     [w14+10], w2
    1e18:	ee 01 90    	mov.w     [w14+12], w3
    1e1a:	00 40 22    	mov.w     #0x2400, w0
    1e1c:	41 a7 24    	mov.w     #0x4a74, w1
    1e1e:	59 fa 07    	rcall     0x12d2 <___divsf3>
    1e20:	02 00 20    	mov.w     #0x0, w2
    1e22:	03 f0 23    	mov.w     #0x3f00, w3
    1e24:	f9 f9 07    	rcall     0x1218 <___addsf3>
    1e26:	9b fa 07    	rcall     0x135e <___fixunssfsi>
    1e28:	00 00 78    	mov.w     w0, w0
    1e2a:	00 00 e9    	dec.w     w0, w0
    1e2c:	00 0c 78    	mov.w     w0, [w8]

00001e2e <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    1e2e:	ee 48 90    	mov.b     [w14+14], w1
    1e30:	50 c4 b3    	mov.b     #0x45, w0
    1e32:	80 cf 50    	sub.b     w1, w0, [w15]
    1e34:	04 00 32    	bra       Z, 0x1e3e <.L62>
    1e36:	ee 48 90    	mov.b     [w14+14], w1
    1e38:	50 c6 b3    	mov.b     #0x65, w0
    1e3a:	80 cf 50    	sub.b     w1, w0, [w15]
    1e3c:	08 00 3a    	bra       NZ, 0x1e4e <.L63>

00001e3e <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    1e3e:	1e 00 78    	mov.w     [w14], w0
    1e40:	10 00 78    	mov.w     [w0], w0
    1e42:	9e 00 78    	mov.w     [w14], w1
    1e44:	91 00 78    	mov.w     [w1], w1
    1e46:	91 00 78    	mov.w     [w1], w1
    1e48:	01 10 a0    	bset.w    w1, #0x1
    1e4a:	01 08 78    	mov.w     w1, [w0]
    1e4c:	18 00 37    	bra       0x1e7e <.L64>

00001e4e <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    1e4e:	ee 48 90    	mov.b     [w14+14], w1
    1e50:	f0 c4 b3    	mov.b     #0x4f, w0
    1e52:	80 cf 50    	sub.b     w1, w0, [w15]
    1e54:	04 00 32    	bra       Z, 0x1e5e <.L65>
    1e56:	ee 48 90    	mov.b     [w14+14], w1
    1e58:	f0 c6 b3    	mov.b     #0x6f, w0
    1e5a:	80 cf 50    	sub.b     w1, w0, [w15]
    1e5c:	08 00 3a    	bra       NZ, 0x1e6e <.L66>

00001e5e <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    1e5e:	1e 00 78    	mov.w     [w14], w0
    1e60:	10 00 78    	mov.w     [w0], w0
    1e62:	9e 00 78    	mov.w     [w14], w1
    1e64:	91 00 78    	mov.w     [w1], w1
    1e66:	91 00 78    	mov.w     [w1], w1
    1e68:	01 20 a0    	bset.w    w1, #0x2
    1e6a:	01 08 78    	mov.w     w1, [w0]
    1e6c:	08 00 37    	bra       0x1e7e <.L64>

00001e6e <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    1e6e:	ee 48 90    	mov.b     [w14+14], w1
    1e70:	e0 c4 b3    	mov.b     #0x4e, w0
    1e72:	80 cf 50    	sub.b     w1, w0, [w15]
    1e74:	04 00 32    	bra       Z, 0x1e7e <.L64>
    1e76:	ee 48 90    	mov.b     [w14+14], w1
    1e78:	e0 c6 b3    	mov.b     #0x6e, w0
    1e7a:	80 cf 50    	sub.b     w1, w0, [w15]
    1e7c:	a2 00 3a    	bra       NZ, 0x1fc2 <.L83>

00001e7e <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    1e7e:	4e b8 97    	mov.w     [w14-8], w0
    1e80:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1e82:	08 00 3a    	bra       NZ, 0x1e94 <.L67>

00001e84 <.LSM190>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    1e84:	1e 00 78    	mov.w     [w14], w0
    1e86:	10 00 78    	mov.w     [w0], w0
    1e88:	9e 00 78    	mov.w     [w14], w1
    1e8a:	91 00 78    	mov.w     [w1], w1
    1e8c:	91 00 78    	mov.w     [w1], w1
    1e8e:	01 00 a0    	bset.w    w1, #0x0
    1e90:	01 08 78    	mov.w     w1, [w0]
    1e92:	03 00 37    	bra       0x1e9a <.L68>

00001e94 <.L67>:
    } else if (stopbits!=1) {
    1e94:	4e b8 97    	mov.w     [w14-8], w0
    1e96:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1e98:	96 00 3a    	bra       NZ, 0x1fc6 <.L84>

00001e9a <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    1e9a:	2e b8 97    	mov.w     [w14-12], w0
    1e9c:	00 00 e0    	cp0.w     w0
    1e9e:	04 00 3a    	bra       NZ, 0x1ea8 <.L69>

00001ea0 <.LSM193>:
        self->putc = __putc_nobuffer;
    1ea0:	1e 00 78    	mov.w     [w14], w0
    1ea2:	41 5e 21    	mov.w     #0x15e4, w1
    1ea4:	41 18 98    	mov.w     w1, [w0+56]
    1ea6:	36 00 37    	bra       0x1f14 <.L70>

00001ea8 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    1ea8:	1e 00 78    	mov.w     [w14], w0
    1eaa:	10 00 90    	mov.w     [w0+2], w0
    1eac:	9e 00 78    	mov.w     [w14], w1
    1eae:	91 00 90    	mov.w     [w1+2], w1
    1eb0:	11 01 78    	mov.w     [w1], w2
    1eb2:	01 00 22    	mov.w     #0x2000, w1
    1eb4:	82 80 70    	ior.w     w1, w2, w1
    1eb6:	01 08 78    	mov.w     w1, [w0]

00001eb8 <.LSM195>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    1eb8:	1e 00 78    	mov.w     [w14], w0
    1eba:	ae b8 97    	mov.w     [w14-12], w1
    1ebc:	11 10 98    	mov.w     w1, [w0+34]

00001ebe <.LSM196>:
        self->TXbuffer.length = TXbufferlen;
    1ebe:	1e 00 78    	mov.w     [w14], w0
    1ec0:	9e b8 97    	mov.w     [w14-14], w1
    1ec2:	21 10 98    	mov.w     w1, [w0+36]

00001ec4 <.LSM197>:
        self->TXbuffer.head = 0;
    1ec4:	1e 00 78    	mov.w     [w14], w0
    1ec6:	80 00 eb    	clr.w     w1
    1ec8:	31 10 98    	mov.w     w1, [w0+38]

00001eca <.LSM198>:
        self->TXbuffer.tail = 0;
    1eca:	1e 00 78    	mov.w     [w14], w0
    1ecc:	80 00 eb    	clr.w     w1
    1ece:	41 10 98    	mov.w     w1, [w0+40]

00001ed0 <.LSM199>:
        self->TXbuffer.count = 0;
    1ed0:	1e 00 78    	mov.w     [w14], w0
    1ed2:	80 00 eb    	clr.w     w1
    1ed4:	51 10 98    	mov.w     w1, [w0+42]

00001ed6 <.LSM200>:
        self->TXthreshold = TXthreshold;
    1ed6:	1e 00 78    	mov.w     [w14], w0
    1ed8:	be b8 97    	mov.w     [w14-10], w1
    1eda:	31 18 98    	mov.w     w1, [w0+54]

00001edc <.LSM201>:
        self->putc = __putc_buffer;
    1edc:	1e 00 78    	mov.w     [w14], w0
    1ede:	61 62 21    	mov.w     #0x1626, w1
    1ee0:	41 18 98    	mov.w     w1, [w0+56]

00001ee2 <.LSM202>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1ee2:	1e 00 78    	mov.w     [w14], w0
    1ee4:	50 00 90    	mov.w     [w0+10], w0
    1ee6:	9e 00 78    	mov.w     [w14], w1
    1ee8:	d1 00 90    	mov.w     [w1+10], w1
    1eea:	11 01 78    	mov.w     [w1], w2
    1eec:	9e 00 78    	mov.w     [w14], w1
    1eee:	e1 48 90    	mov.b     [w1+14], w1
    1ef0:	81 80 fb    	ze        w1, w1
    1ef2:	13 00 20    	mov.w     #0x1, w3
    1ef4:	81 18 dd    	sl.w      w3, w1, w1
    1ef6:	81 80 ea    	com.w     w1, w1
    1ef8:	81 00 61    	and.w     w2, w1, w1
    1efa:	01 08 78    	mov.w     w1, [w0]

00001efc <.LSM203>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    1efc:	1e 00 78    	mov.w     [w14], w0
    1efe:	60 00 90    	mov.w     [w0+12], w0
    1f00:	9e 00 78    	mov.w     [w14], w1
    1f02:	e1 00 90    	mov.w     [w1+12], w1
    1f04:	11 01 78    	mov.w     [w1], w2
    1f06:	9e 00 78    	mov.w     [w14], w1
    1f08:	e1 48 90    	mov.b     [w1+14], w1
    1f0a:	81 80 fb    	ze        w1, w1
    1f0c:	13 00 20    	mov.w     #0x1, w3
    1f0e:	81 18 dd    	sl.w      w3, w1, w1
    1f10:	82 80 70    	ior.w     w1, w2, w1
    1f12:	01 08 78    	mov.w     w1, [w0]

00001f14 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    1f14:	0e b8 97    	mov.w     [w14-16], w0
    1f16:	00 00 e0    	cp0.w     w0
    1f18:	04 00 3a    	bra       NZ, 0x1f22 <.L71>

00001f1a <.LSM205>:
        self->getc = __getc_nobuffer;
    1f1a:	1e 00 78    	mov.w     [w14], w0
    1f1c:	81 60 21    	mov.w     #0x1608, w1
    1f1e:	51 18 98    	mov.w     w1, [w0+58]
    1f20:	2b 00 37    	bra       0x1f78 <.L72>

00001f22 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    1f22:	1e 00 78    	mov.w     [w14], w0
    1f24:	8e b8 97    	mov.w     [w14-16], w1
    1f26:	61 10 98    	mov.w     w1, [w0+44]

00001f28 <.LSM207>:
        self->RXbuffer.length = RXbufferlen;
    1f28:	1e 00 78    	mov.w     [w14], w0
    1f2a:	fe b0 97    	mov.w     [w14-18], w1
    1f2c:	71 10 98    	mov.w     w1, [w0+46]

00001f2e <.LSM208>:
        self->RXbuffer.head = 0;
    1f2e:	1e 00 78    	mov.w     [w14], w0
    1f30:	80 00 eb    	clr.w     w1
    1f32:	01 18 98    	mov.w     w1, [w0+48]

00001f34 <.LSM209>:
        self->RXbuffer.tail = 0;
    1f34:	1e 00 78    	mov.w     [w14], w0
    1f36:	80 00 eb    	clr.w     w1
    1f38:	11 18 98    	mov.w     w1, [w0+50]

00001f3a <.LSM210>:
        self->RXbuffer.count = 0;
    1f3a:	1e 00 78    	mov.w     [w14], w0
    1f3c:	80 00 eb    	clr.w     w1
    1f3e:	21 18 98    	mov.w     w1, [w0+52]

00001f40 <.LSM211>:
        self->getc = __getc_buffer;
    1f40:	1e 00 78    	mov.w     [w14], w0
    1f42:	e1 71 21    	mov.w     #0x171e, w1
    1f44:	51 18 98    	mov.w     w1, [w0+58]

00001f46 <.LSM212>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1f46:	1e 00 78    	mov.w     [w14], w0
    1f48:	50 00 90    	mov.w     [w0+10], w0
    1f4a:	9e 00 78    	mov.w     [w14], w1
    1f4c:	d1 00 90    	mov.w     [w1+10], w1
    1f4e:	11 01 78    	mov.w     [w1], w2
    1f50:	9e 00 78    	mov.w     [w14], w1
    1f52:	f1 48 90    	mov.b     [w1+15], w1
    1f54:	81 80 fb    	ze        w1, w1
    1f56:	13 00 20    	mov.w     #0x1, w3
    1f58:	81 18 dd    	sl.w      w3, w1, w1
    1f5a:	81 80 ea    	com.w     w1, w1
    1f5c:	81 00 61    	and.w     w2, w1, w1
    1f5e:	01 08 78    	mov.w     w1, [w0]

00001f60 <.LSM213>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    1f60:	1e 00 78    	mov.w     [w14], w0
    1f62:	60 00 90    	mov.w     [w0+12], w0
    1f64:	9e 00 78    	mov.w     [w14], w1
    1f66:	e1 00 90    	mov.w     [w1+12], w1
    1f68:	11 01 78    	mov.w     [w1], w2
    1f6a:	9e 00 78    	mov.w     [w14], w1
    1f6c:	f1 48 90    	mov.b     [w1+15], w1
    1f6e:	81 80 fb    	ze        w1, w1
    1f70:	13 00 20    	mov.w     #0x1, w3
    1f72:	81 18 dd    	sl.w      w3, w1, w1
    1f74:	82 80 70    	ior.w     w1, w2, w1
    1f76:	01 08 78    	mov.w     w1, [w0]

00001f78 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    1f78:	1e 00 78    	mov.w     [w14], w0
    1f7a:	10 00 78    	mov.w     [w0], w0
    1f7c:	9e 00 78    	mov.w     [w14], w1
    1f7e:	91 00 78    	mov.w     [w1], w1
    1f80:	11 01 78    	mov.w     [w1], w2
    1f82:	01 00 28    	mov.w     #0x8000, w1
    1f84:	82 80 70    	ior.w     w1, w2, w1
    1f86:	01 08 78    	mov.w     w1, [w0]

00001f88 <.LSM215>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    1f88:	1e 00 78    	mov.w     [w14], w0
    1f8a:	10 00 90    	mov.w     [w0+2], w0
    1f8c:	9e 00 78    	mov.w     [w14], w1
    1f8e:	91 00 90    	mov.w     [w1+2], w1
    1f90:	11 01 78    	mov.w     [w1], w2
    1f92:	01 40 20    	mov.w     #0x400, w1
    1f94:	82 80 70    	ior.w     w1, w2, w1
    1f96:	01 08 78    	mov.w     w1, [w0]
    1f98:	17 00 37    	bra       0x1fc8 <.L40>

00001f9a <.L73>:
    1f9a:	00 00 00    	nop       
    1f9c:	15 00 37    	bra       0x1fc8 <.L40>

00001f9e <.L74>:
    1f9e:	00 00 00    	nop       
    1fa0:	13 00 37    	bra       0x1fc8 <.L40>

00001fa2 <.L75>:
    1fa2:	00 00 00    	nop       
    1fa4:	11 00 37    	bra       0x1fc8 <.L40>

00001fa6 <.L76>:
    1fa6:	00 00 00    	nop       
    1fa8:	0f 00 37    	bra       0x1fc8 <.L40>

00001faa <.L77>:
    1faa:	00 00 00    	nop       
    1fac:	0d 00 37    	bra       0x1fc8 <.L40>

00001fae <.L78>:
    1fae:	00 00 00    	nop       
    1fb0:	0b 00 37    	bra       0x1fc8 <.L40>

00001fb2 <.L79>:
    1fb2:	00 00 00    	nop       
    1fb4:	09 00 37    	bra       0x1fc8 <.L40>

00001fb6 <.L80>:
    1fb6:	00 00 00    	nop       
    1fb8:	07 00 37    	bra       0x1fc8 <.L40>

00001fba <.L81>:
    1fba:	00 00 00    	nop       
    1fbc:	05 00 37    	bra       0x1fc8 <.L40>

00001fbe <.L82>:
    1fbe:	00 00 00    	nop       
    1fc0:	03 00 37    	bra       0x1fc8 <.L40>

00001fc2 <.L83>:
    1fc2:	00 00 00    	nop       
    1fc4:	01 00 37    	bra       0x1fc8 <.L40>

00001fc6 <.L84>:
    1fc6:	00 00 00    	nop       

00001fc8 <.L40>:
}
    1fc8:	4f 04 78    	mov.w     [--w15], w8
    1fca:	00 80 fa    	ulnk      
    1fcc:	00 00 06    	return    

00001fce <_uart_close>:

void uart_close(_UART *self) {
    1fce:	02 00 fa    	lnk       #0x2
    1fd0:	00 0f 78    	mov.w     w0, [w14]

00001fd2 <.LSM225>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    1fd2:	1e 00 78    	mov.w     [w14], w0
    1fd4:	10 00 90    	mov.w     [w0+2], w0
    1fd6:	9e 00 78    	mov.w     [w14], w1
    1fd8:	91 00 90    	mov.w     [w1+2], w1
    1fda:	11 01 78    	mov.w     [w1], w2
    1fdc:	f1 bf 2f    	mov.w     #0xfbff, w1
    1fde:	81 00 61    	and.w     w2, w1, w1
    1fe0:	01 08 78    	mov.w     w1, [w0]

00001fe2 <.LSM226>:
    *(self->UxMODE) = 0;        // Disable UART module
    1fe2:	1e 00 78    	mov.w     [w14], w0
    1fe4:	10 00 78    	mov.w     [w0], w0
    1fe6:	80 00 eb    	clr.w     w1
    1fe8:	01 08 78    	mov.w     w1, [w0]

00001fea <.LSM227>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    1fea:	1e 00 78    	mov.w     [w14], w0
    1fec:	60 00 90    	mov.w     [w0+12], w0
    1fee:	9e 00 78    	mov.w     [w14], w1
    1ff0:	e1 00 90    	mov.w     [w1+12], w1
    1ff2:	11 01 78    	mov.w     [w1], w2
    1ff4:	9e 00 78    	mov.w     [w14], w1
    1ff6:	e1 48 90    	mov.b     [w1+14], w1
    1ff8:	81 80 fb    	ze        w1, w1
    1ffa:	13 00 20    	mov.w     #0x1, w3
    1ffc:	81 18 dd    	sl.w      w3, w1, w1
    1ffe:	81 80 ea    	com.w     w1, w1
    2000:	81 00 61    	and.w     w2, w1, w1
    2002:	01 08 78    	mov.w     w1, [w0]

00002004 <.LSM228>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2004:	1e 00 78    	mov.w     [w14], w0
    2006:	60 00 90    	mov.w     [w0+12], w0
    2008:	9e 00 78    	mov.w     [w14], w1
    200a:	e1 00 90    	mov.w     [w1+12], w1
    200c:	11 01 78    	mov.w     [w1], w2
    200e:	9e 00 78    	mov.w     [w14], w1
    2010:	f1 48 90    	mov.b     [w1+15], w1
    2012:	81 80 fb    	ze        w1, w1
    2014:	13 00 20    	mov.w     #0x1, w3
    2016:	81 18 dd    	sl.w      w3, w1, w1
    2018:	81 80 ea    	com.w     w1, w1
    201a:	81 00 61    	and.w     w2, w1, w1
    201c:	01 08 78    	mov.w     w1, [w0]

0000201e <.LSM229>:
    self->putc = NULL;
    201e:	1e 00 78    	mov.w     [w14], w0
    2020:	80 00 eb    	clr.w     w1
    2022:	41 18 98    	mov.w     w1, [w0+56]

00002024 <.LSM230>:
    self->getc = NULL;
    2024:	1e 00 78    	mov.w     [w14], w0
    2026:	80 00 eb    	clr.w     w1
    2028:	51 18 98    	mov.w     w1, [w0+58]

0000202a <.LSM231>:
    if (self->TX) {
    202a:	1e 00 78    	mov.w     [w14], w0
    202c:	50 08 90    	mov.w     [w0+26], w0
    202e:	00 00 e0    	cp0.w     w0
    2030:	2f 00 32    	bra       Z, 0x2090 <.L86>

00002032 <.LSM232>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2032:	11 3a 80    	mov.w     0x742, w1
    2034:	f0 0b 20    	mov.w     #0xbf, w0
    2036:	00 81 60    	and.w     w1, w0, w2
    2038:	60 04 20    	mov.w     #0x46, w0
    203a:	71 05 20    	mov.w     #0x57, w1
    203c:	23 74 20    	mov.w     #0x742, w3
    203e:	80 49 78    	mov.b     w0, [w3]
    2040:	81 49 78    	mov.b     w1, [w3]
    2042:	82 49 78    	mov.b     w2, [w3]

00002044 <.LSM233>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2044:	1e 00 78    	mov.w     [w14], w0
    2046:	50 08 90    	mov.w     [w0+26], w0
    2048:	70 00 90    	mov.w     [w0+14], w0
    204a:	9e 00 78    	mov.w     [w14], w1
    204c:	d1 08 90    	mov.w     [w1+26], w1
    204e:	f1 00 90    	mov.w     [w1+14], w1
    2050:	11 01 78    	mov.w     [w1], w2
    2052:	9e 00 78    	mov.w     [w14], w1
    2054:	d1 08 90    	mov.w     [w1+26], w1
    2056:	a1 48 90    	mov.b     [w1+10], w1
    2058:	81 80 fb    	ze        w1, w1
    205a:	f3 03 20    	mov.w     #0x3f, w3
    205c:	81 18 dd    	sl.w      w3, w1, w1
    205e:	81 80 ea    	com.w     w1, w1
    2060:	81 00 61    	and.w     w2, w1, w1
    2062:	01 08 78    	mov.w     w1, [w0]

00002064 <.LSM234>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2064:	11 3a 80    	mov.w     0x742, w1
    2066:	00 04 20    	mov.w     #0x40, w0
    2068:	01 01 70    	ior.w     w0, w1, w2
    206a:	60 04 20    	mov.w     #0x46, w0
    206c:	71 05 20    	mov.w     #0x57, w1
    206e:	23 74 20    	mov.w     #0x742, w3
    2070:	80 49 78    	mov.b     w0, [w3]
    2072:	81 49 78    	mov.b     w1, [w3]
    2074:	82 49 78    	mov.b     w2, [w3]

00002076 <.LSM235>:
        self->TX->owner = NULL;
    2076:	1e 00 78    	mov.w     [w14], w0
    2078:	50 08 90    	mov.w     [w0+26], w0
    207a:	80 00 eb    	clr.w     w1
    207c:	01 08 98    	mov.w     w1, [w0+16]

0000207e <.LSM236>:
        pin_digitalOut(self->TX);
    207e:	1e 00 78    	mov.w     [w14], w0
    2080:	50 08 90    	mov.w     [w0+26], w0
    2082:	2c 0c 07    	rcall     0x38dc <_pin_digitalOut>

00002084 <.LSM237>:
        pin_set(self->TX);
    2084:	1e 00 78    	mov.w     [w14], w0
    2086:	50 08 90    	mov.w     [w0+26], w0
    2088:	86 0c 07    	rcall     0x3996 <_pin_set>

0000208a <.LSM238>:
        self->TX = NULL;
    208a:	1e 00 78    	mov.w     [w14], w0
    208c:	80 00 eb    	clr.w     w1
    208e:	51 08 98    	mov.w     w1, [w0+26]

00002090 <.L86>:
    }
    if (self->RX) {
    2090:	1e 00 78    	mov.w     [w14], w0
    2092:	60 08 90    	mov.w     [w0+28], w0
    2094:	00 00 e0    	cp0.w     w0
    2096:	28 00 32    	bra       Z, 0x20e8 <.L87>

00002098 <.LSM240>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2098:	11 3a 80    	mov.w     0x742, w1
    209a:	f0 0b 20    	mov.w     #0xbf, w0
    209c:	00 81 60    	and.w     w1, w0, w2
    209e:	60 04 20    	mov.w     #0x46, w0
    20a0:	71 05 20    	mov.w     #0x57, w1
    20a2:	23 74 20    	mov.w     #0x742, w3
    20a4:	80 49 78    	mov.b     w0, [w3]
    20a6:	81 49 78    	mov.b     w1, [w3]
    20a8:	82 49 78    	mov.b     w2, [w3]

000020aa <.LSM241>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    20aa:	1e 00 78    	mov.w     [w14], w0
    20ac:	00 08 90    	mov.w     [w0+16], w0
    20ae:	9e 00 78    	mov.w     [w14], w1
    20b0:	81 08 90    	mov.w     [w1+16], w1
    20b2:	11 01 78    	mov.w     [w1], w2
    20b4:	9e 00 78    	mov.w     [w14], w1
    20b6:	c1 50 90    	mov.b     [w1+20], w1
    20b8:	81 80 fb    	ze        w1, w1
    20ba:	f3 03 20    	mov.w     #0x3f, w3
    20bc:	81 18 dd    	sl.w      w3, w1, w1
    20be:	82 80 70    	ior.w     w1, w2, w1
    20c0:	01 08 78    	mov.w     w1, [w0]

000020c2 <.LSM242>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    20c2:	11 3a 80    	mov.w     0x742, w1
    20c4:	00 04 20    	mov.w     #0x40, w0
    20c6:	01 01 70    	ior.w     w0, w1, w2
    20c8:	60 04 20    	mov.w     #0x46, w0
    20ca:	71 05 20    	mov.w     #0x57, w1
    20cc:	23 74 20    	mov.w     #0x742, w3
    20ce:	80 49 78    	mov.b     w0, [w3]
    20d0:	81 49 78    	mov.b     w1, [w3]
    20d2:	82 49 78    	mov.b     w2, [w3]

000020d4 <.LSM243>:
        self->RX->owner = NULL;
    20d4:	1e 00 78    	mov.w     [w14], w0
    20d6:	60 08 90    	mov.w     [w0+28], w0
    20d8:	80 00 eb    	clr.w     w1
    20da:	01 08 98    	mov.w     w1, [w0+16]

000020dc <.LSM244>:
        pin_digitalIn(self->RX);
    20dc:	1e 00 78    	mov.w     [w14], w0
    20de:	60 08 90    	mov.w     [w0+28], w0
    20e0:	d6 0b 07    	rcall     0x388e <_pin_digitalIn>

000020e2 <.LSM245>:
        self->RX = NULL;
    20e2:	1e 00 78    	mov.w     [w14], w0
    20e4:	80 00 eb    	clr.w     w1
    20e6:	61 08 98    	mov.w     w1, [w0+28]

000020e8 <.L87>:
    }
    if (self->RTS) {
    20e8:	1e 00 78    	mov.w     [w14], w0
    20ea:	70 08 90    	mov.w     [w0+30], w0
    20ec:	00 00 e0    	cp0.w     w0
    20ee:	2f 00 32    	bra       Z, 0x214e <.L88>

000020f0 <.LSM247>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    20f0:	11 3a 80    	mov.w     0x742, w1
    20f2:	f0 0b 20    	mov.w     #0xbf, w0
    20f4:	00 81 60    	and.w     w1, w0, w2
    20f6:	60 04 20    	mov.w     #0x46, w0
    20f8:	71 05 20    	mov.w     #0x57, w1
    20fa:	23 74 20    	mov.w     #0x742, w3
    20fc:	80 49 78    	mov.b     w0, [w3]
    20fe:	81 49 78    	mov.b     w1, [w3]
    2100:	82 49 78    	mov.b     w2, [w3]

00002102 <.LSM248>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2102:	1e 00 78    	mov.w     [w14], w0
    2104:	70 08 90    	mov.w     [w0+30], w0
    2106:	70 00 90    	mov.w     [w0+14], w0
    2108:	9e 00 78    	mov.w     [w14], w1
    210a:	f1 08 90    	mov.w     [w1+30], w1
    210c:	f1 00 90    	mov.w     [w1+14], w1
    210e:	11 01 78    	mov.w     [w1], w2
    2110:	9e 00 78    	mov.w     [w14], w1
    2112:	f1 08 90    	mov.w     [w1+30], w1
    2114:	a1 48 90    	mov.b     [w1+10], w1
    2116:	81 80 fb    	ze        w1, w1
    2118:	f3 03 20    	mov.w     #0x3f, w3
    211a:	81 18 dd    	sl.w      w3, w1, w1
    211c:	81 80 ea    	com.w     w1, w1
    211e:	81 00 61    	and.w     w2, w1, w1
    2120:	01 08 78    	mov.w     w1, [w0]

00002122 <.LSM249>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2122:	11 3a 80    	mov.w     0x742, w1
    2124:	00 04 20    	mov.w     #0x40, w0
    2126:	01 01 70    	ior.w     w0, w1, w2
    2128:	60 04 20    	mov.w     #0x46, w0
    212a:	71 05 20    	mov.w     #0x57, w1
    212c:	23 74 20    	mov.w     #0x742, w3
    212e:	80 49 78    	mov.b     w0, [w3]
    2130:	81 49 78    	mov.b     w1, [w3]
    2132:	82 49 78    	mov.b     w2, [w3]

00002134 <.LSM250>:
        self->RTS->owner = NULL;
    2134:	1e 00 78    	mov.w     [w14], w0
    2136:	70 08 90    	mov.w     [w0+30], w0
    2138:	80 00 eb    	clr.w     w1
    213a:	01 08 98    	mov.w     w1, [w0+16]

0000213c <.LSM251>:
        pin_digitalOut(self->RTS);
    213c:	1e 00 78    	mov.w     [w14], w0
    213e:	70 08 90    	mov.w     [w0+30], w0
    2140:	cd 0b 07    	rcall     0x38dc <_pin_digitalOut>

00002142 <.LSM252>:
        pin_set(self->RTS);
    2142:	1e 00 78    	mov.w     [w14], w0
    2144:	70 08 90    	mov.w     [w0+30], w0
    2146:	27 0c 07    	rcall     0x3996 <_pin_set>

00002148 <.LSM253>:
        self->RTS = NULL;
    2148:	1e 00 78    	mov.w     [w14], w0
    214a:	80 00 eb    	clr.w     w1
    214c:	71 08 98    	mov.w     w1, [w0+30]

0000214e <.L88>:
    }
    if (self->CTS) {
    214e:	1e 00 78    	mov.w     [w14], w0
    2150:	00 10 90    	mov.w     [w0+32], w0
    2152:	00 00 e0    	cp0.w     w0
    2154:	28 00 32    	bra       Z, 0x21a6 <.L85>

00002156 <.LSM255>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2156:	11 3a 80    	mov.w     0x742, w1
    2158:	f0 0b 20    	mov.w     #0xbf, w0
    215a:	00 81 60    	and.w     w1, w0, w2
    215c:	60 04 20    	mov.w     #0x46, w0
    215e:	71 05 20    	mov.w     #0x57, w1
    2160:	23 74 20    	mov.w     #0x742, w3
    2162:	80 49 78    	mov.b     w0, [w3]
    2164:	81 49 78    	mov.b     w1, [w3]
    2166:	82 49 78    	mov.b     w2, [w3]

00002168 <.LSM256>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2168:	1e 00 78    	mov.w     [w14], w0
    216a:	10 08 90    	mov.w     [w0+18], w0
    216c:	9e 00 78    	mov.w     [w14], w1
    216e:	91 08 90    	mov.w     [w1+18], w1
    2170:	11 01 78    	mov.w     [w1], w2
    2172:	9e 00 78    	mov.w     [w14], w1
    2174:	d1 50 90    	mov.b     [w1+21], w1
    2176:	81 80 fb    	ze        w1, w1
    2178:	f3 03 20    	mov.w     #0x3f, w3
    217a:	81 18 dd    	sl.w      w3, w1, w1
    217c:	82 80 70    	ior.w     w1, w2, w1
    217e:	01 08 78    	mov.w     w1, [w0]

00002180 <.LSM257>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2180:	11 3a 80    	mov.w     0x742, w1
    2182:	00 04 20    	mov.w     #0x40, w0
    2184:	01 01 70    	ior.w     w0, w1, w2
    2186:	60 04 20    	mov.w     #0x46, w0
    2188:	71 05 20    	mov.w     #0x57, w1
    218a:	23 74 20    	mov.w     #0x742, w3
    218c:	80 49 78    	mov.b     w0, [w3]
    218e:	81 49 78    	mov.b     w1, [w3]
    2190:	82 49 78    	mov.b     w2, [w3]

00002192 <.LSM258>:
        self->CTS->owner = NULL;
    2192:	1e 00 78    	mov.w     [w14], w0
    2194:	00 10 90    	mov.w     [w0+32], w0
    2196:	80 00 eb    	clr.w     w1
    2198:	01 08 98    	mov.w     w1, [w0+16]

0000219a <.LSM259>:
        pin_digitalIn(self->CTS);
    219a:	1e 00 78    	mov.w     [w14], w0
    219c:	00 10 90    	mov.w     [w0+32], w0
    219e:	77 0b 07    	rcall     0x388e <_pin_digitalIn>

000021a0 <.LSM260>:
        self->CTS = NULL;
    21a0:	1e 00 78    	mov.w     [w14], w0
    21a2:	80 00 eb    	clr.w     w1
    21a4:	01 10 98    	mov.w     w1, [w0+32]

000021a6 <.L85>:
    }
}
    21a6:	00 80 fa    	ulnk      
    21a8:	00 00 06    	return    

000021aa <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    21aa:	04 00 fa    	lnk       #0x4
    21ac:	00 0f 78    	mov.w     w0, [w14]
    21ae:	21 47 98    	mov.b     w1, [w14+2]

000021b0 <.LSM263>:
    if (self->putc)
    21b0:	1e 00 78    	mov.w     [w14], w0
    21b2:	40 18 90    	mov.w     [w0+56], w0
    21b4:	00 00 e0    	cp0.w     w0
    21b6:	05 00 32    	bra       Z, 0x21c2 <.L90>

000021b8 <.LSM264>:
        self->putc(self, ch);
    21b8:	1e 00 78    	mov.w     [w14], w0
    21ba:	40 19 90    	mov.w     [w0+56], w2
    21bc:	ae 40 90    	mov.b     [w14+2], w1
    21be:	1e 00 78    	mov.w     [w14], w0
    21c0:	02 00 01    	call      w2

000021c2 <.L90>:
}
    21c2:	00 80 fa    	ulnk      
    21c4:	00 00 06    	return    

000021c6 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    21c6:	02 00 fa    	lnk       #0x2
    21c8:	00 0f 78    	mov.w     w0, [w14]

000021ca <.LSM267>:
    if (self->getc)
    21ca:	1e 00 78    	mov.w     [w14], w0
    21cc:	50 18 90    	mov.w     [w0+58], w0
    21ce:	00 00 e0    	cp0.w     w0
    21d0:	05 00 32    	bra       Z, 0x21dc <.L93>

000021d2 <.LSM268>:
        return self->getc(self);
    21d2:	1e 00 78    	mov.w     [w14], w0
    21d4:	d0 18 90    	mov.w     [w0+58], w1
    21d6:	1e 00 78    	mov.w     [w14], w0
    21d8:	01 00 01    	call      w1
    21da:	01 00 37    	bra       0x21de <.L94>

000021dc <.L93>:
    else
        return 0xFF;
    21dc:	00 c0 eb    	setm.b    w0

000021de <.L94>:
}
    21de:	00 80 fa    	ulnk      
    21e0:	00 00 06    	return    

000021e2 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    21e2:	02 00 fa    	lnk       #0x2
    21e4:	00 0f 78    	mov.w     w0, [w14]

000021e6 <.LSM272>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    21e6:	1e 00 78    	mov.w     [w14], w0
    21e8:	10 00 90    	mov.w     [w0+2], w0
    21ea:	90 00 78    	mov.w     [w0], w1
    21ec:	00 40 20    	mov.w     #0x400, w0
    21ee:	00 80 60    	and.w     w1, w0, w0
    21f0:	00 00 e0    	cp0.w     w0
    21f2:	08 00 3a    	bra       NZ, 0x2204 <.L95>

000021f4 <.LSM273>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    21f4:	1e 00 78    	mov.w     [w14], w0
    21f6:	10 00 90    	mov.w     [w0+2], w0
    21f8:	9e 00 78    	mov.w     [w14], w1
    21fa:	91 00 90    	mov.w     [w1+2], w1
    21fc:	11 01 78    	mov.w     [w1], w2
    21fe:	01 40 20    	mov.w     #0x400, w1
    2200:	82 80 70    	ior.w     w1, w2, w1
    2202:	01 08 78    	mov.w     w1, [w0]

00002204 <.L95>:
}
    2204:	00 80 fa    	ulnk      
    2206:	00 00 06    	return    

00002208 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2208:	04 00 fa    	lnk       #0x4
    220a:	00 0f 78    	mov.w     w0, [w14]
    220c:	11 07 98    	mov.w     w1, [w14+2]

0000220e <.LSM276>:
    while (*str)
    220e:	08 00 37    	bra       0x2220 <.L98>

00002210 <.L99>:
        uart_putc(self, *str++);
    2210:	1e 00 90    	mov.w     [w14+2], w0
    2212:	10 40 78    	mov.b     [w0], w0
    2214:	9e 00 90    	mov.w     [w14+2], w1
    2216:	81 00 e8    	inc.w     w1, w1
    2218:	11 07 98    	mov.w     w1, [w14+2]
    221a:	80 40 78    	mov.b     w0, w1
    221c:	1e 00 78    	mov.w     [w14], w0
    221e:	c5 ff 07    	rcall     0x21aa <_uart_putc>

00002220 <.L98>:
    2220:	1e 00 90    	mov.w     [w14+2], w0
    2222:	10 40 78    	mov.b     [w0], w0
    2224:	00 04 e0    	cp0.b     w0
    2226:	f4 ff 3a    	bra       NZ, 0x2210 <.L99>

00002228 <.LSM279>:
    uart_flushTxBuffer(self);
    2228:	1e 00 78    	mov.w     [w14], w0
    222a:	db ff 07    	rcall     0x21e2 <_uart_flushTxBuffer>

0000222c <.LSM280>:
}
    222c:	00 80 fa    	ulnk      
    222e:	00 00 06    	return    

00002230 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2230:	0a 00 fa    	lnk       #0xa
    2232:	20 07 98    	mov.w     w0, [w14+4]
    2234:	31 07 98    	mov.w     w1, [w14+6]
    2236:	42 07 98    	mov.w     w2, [w14+8]

00002238 <.LSM282>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2238:	4e 00 90    	mov.w     [w14+8], w0
    223a:	00 00 e0    	cp0.w     w0
    223c:	87 00 32    	bra       Z, 0x234c <.L113>

0000223e <.LSM283>:
        return;

    if (len==1) {
    223e:	4e 00 90    	mov.w     [w14+8], w0
    2240:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2242:	04 00 3a    	bra       NZ, 0x224c <.L103>

00002244 <.LSM284>:
        *str = '\0';
    2244:	3e 00 90    	mov.w     [w14+6], w0
    2246:	80 40 eb    	clr.b     w1
    2248:	01 48 78    	mov.b     w1, [w0]

0000224a <.LSM285>:
        return;
    224a:	81 00 37    	bra       0x234e <.L100>

0000224c <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    224c:	b1 c1 b3    	mov.b     #0x1b, w1
    224e:	2e 00 90    	mov.w     [w14+4], w0
    2250:	ac ff 07    	rcall     0x21aa <_uart_putc>

00002252 <.LSM287>:
    uart_putc(self, '7');
    2252:	71 c3 b3    	mov.b     #0x37, w1
    2254:	2e 00 90    	mov.w     [w14+4], w0
    2256:	a9 ff 07    	rcall     0x21aa <_uart_putc>

00002258 <.LSM288>:
    uart_flushTxBuffer(self);
    2258:	2e 00 90    	mov.w     [w14+4], w0
    225a:	c3 ff 07    	rcall     0x21e2 <_uart_flushTxBuffer>

0000225c <.LSM289>:
    start = str;
    225c:	be 00 90    	mov.w     [w14+6], w1
    225e:	11 07 98    	mov.w     w1, [w14+2]

00002260 <.LSM290>:
    left = len;
    2260:	ce 00 90    	mov.w     [w14+8], w1
    2262:	01 0f 78    	mov.w     w1, [w14]
    2264:	03 00 37    	bra       0x226c <.L112>

00002266 <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2266:	00 00 00    	nop       
    2268:	01 00 37    	bra       0x226c <.L112>

0000226a <.L115>:
    226a:	00 00 00    	nop       

0000226c <.L112>:
    226c:	2e 00 90    	mov.w     [w14+4], w0
    226e:	ab ff 07    	rcall     0x21c6 <_uart_getc>
    2270:	be 00 90    	mov.w     [w14+6], w1
    2272:	80 48 78    	mov.b     w0, [w1]

00002274 <.LSM293>:
    2274:	3e 00 90    	mov.w     [w14+6], w0
    2276:	10 40 78    	mov.b     [w0], w0
    2278:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    227a:	0c 00 3a    	bra       NZ, 0x2294 <.L104>

0000227c <.LSM294>:

    *str = '\0';                            // Terminarte the string with null
    227c:	3e 00 90    	mov.w     [w14+6], w0
    227e:	80 40 eb    	clr.b     w1
    2280:	01 48 78    	mov.b     w1, [w0]

00002282 <.LSM295>:
    uart_putc(self, '\n');                  // Send newline and
    2282:	a1 c0 b3    	mov.b     #0xa, w1
    2284:	2e 00 90    	mov.w     [w14+4], w0
    2286:	91 ff 07    	rcall     0x21aa <_uart_putc>

00002288 <.LSM296>:
    uart_putc(self, '\r');                  //   carriage return
    2288:	d1 c0 b3    	mov.b     #0xd, w1
    228a:	2e 00 90    	mov.w     [w14+4], w0
    228c:	8e ff 07    	rcall     0x21aa <_uart_putc>

0000228e <.LSM297>:
    uart_flushTxBuffer(self);
    228e:	2e 00 90    	mov.w     [w14+4], w0
    2290:	a8 ff 07    	rcall     0x21e2 <_uart_flushTxBuffer>
    2292:	5d 00 37    	bra       0x234e <.L100>

00002294 <.L104>:
    2294:	3e 00 90    	mov.w     [w14+6], w0
    2296:	10 40 78    	mov.b     [w0], w0
    2298:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    229a:	16 00 3a    	bra       NZ, 0x22c8 <.L105>

0000229c <.LSM299>:
    229c:	b1 c1 b3    	mov.b     #0x1b, w1
    229e:	2e 00 90    	mov.w     [w14+4], w0
    22a0:	84 ff 07    	rcall     0x21aa <_uart_putc>

000022a2 <.LSM300>:
    22a2:	81 c3 b3    	mov.b     #0x38, w1
    22a4:	2e 00 90    	mov.w     [w14+4], w0
    22a6:	81 ff 07    	rcall     0x21aa <_uart_putc>

000022a8 <.LSM301>:
    22a8:	b1 c1 b3    	mov.b     #0x1b, w1
    22aa:	2e 00 90    	mov.w     [w14+4], w0
    22ac:	7e ff 07    	rcall     0x21aa <_uart_putc>

000022ae <.LSM302>:
    22ae:	b1 c5 b3    	mov.b     #0x5b, w1
    22b0:	2e 00 90    	mov.w     [w14+4], w0
    22b2:	7b ff 07    	rcall     0x21aa <_uart_putc>

000022b4 <.LSM303>:
    22b4:	b1 c4 b3    	mov.b     #0x4b, w1
    22b6:	2e 00 90    	mov.w     [w14+4], w0
    22b8:	78 ff 07    	rcall     0x21aa <_uart_putc>

000022ba <.LSM304>:
    22ba:	2e 00 90    	mov.w     [w14+4], w0
    22bc:	92 ff 07    	rcall     0x21e2 <_uart_flushTxBuffer>

000022be <.LSM305>:
    22be:	9e 00 90    	mov.w     [w14+2], w1
    22c0:	31 07 98    	mov.w     w1, [w14+6]

000022c2 <.LSM306>:
    22c2:	ce 00 90    	mov.w     [w14+8], w1
    22c4:	01 0f 78    	mov.w     w1, [w14]

000022c6 <.LSM307>:
    22c6:	41 00 37    	bra       0x234a <.L106>

000022c8 <.L105>:
    22c8:	3e 00 90    	mov.w     [w14+6], w0
    22ca:	10 40 78    	mov.b     [w0], w0
    22cc:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    22ce:	05 00 32    	bra       Z, 0x22da <.L107>

000022d0 <.LSM309>:
    22d0:	3e 00 90    	mov.w     [w14+6], w0
    22d2:	90 40 78    	mov.b     [w0], w1

000022d4 <.LSM310>:
    22d4:	f0 c7 b3    	mov.b     #0x7f, w0
    22d6:	80 cf 50    	sub.b     w1, w0, [w15]
    22d8:	1a 00 3a    	bra       NZ, 0x230e <.L108>

000022da <.L107>:
    22da:	be 00 90    	mov.w     [w14+6], w1
    22dc:	1e 00 90    	mov.w     [w14+2], w0
    22de:	80 8f 50    	sub.w     w1, w0, [w15]
    22e0:	10 00 36    	bra       LEU, 0x2302 <.L109>

000022e2 <.LSM312>:
    22e2:	81 c0 b3    	mov.b     #0x8, w1
    22e4:	2e 00 90    	mov.w     [w14+4], w0
    22e6:	61 ff 07    	rcall     0x21aa <_uart_putc>

000022e8 <.LSM313>:
    22e8:	01 c2 b3    	mov.b     #0x20, w1
    22ea:	2e 00 90    	mov.w     [w14+4], w0
    22ec:	5e ff 07    	rcall     0x21aa <_uart_putc>

000022ee <.LSM314>:
    22ee:	81 c0 b3    	mov.b     #0x8, w1
    22f0:	2e 00 90    	mov.w     [w14+4], w0
    22f2:	5b ff 07    	rcall     0x21aa <_uart_putc>

000022f4 <.LSM315>:
    22f4:	2e 00 90    	mov.w     [w14+4], w0
    22f6:	75 ff 07    	rcall     0x21e2 <_uart_flushTxBuffer>

000022f8 <.LSM316>:
    22f8:	3e 00 90    	mov.w     [w14+6], w0
    22fa:	00 00 e9    	dec.w     w0, w0
    22fc:	30 07 98    	mov.w     w0, [w14+6]

000022fe <.LSM317>:
    22fe:	1e 0f e8    	inc.w     [w14], [w14]
    2300:	05 00 37    	bra       0x230c <.L110>

00002302 <.L109>:
    2302:	71 c0 b3    	mov.b     #0x7, w1
    2304:	2e 00 90    	mov.w     [w14+4], w0
    2306:	51 ff 07    	rcall     0x21aa <_uart_putc>

00002308 <.LSM319>:
    2308:	2e 00 90    	mov.w     [w14+4], w0
    230a:	6b ff 07    	rcall     0x21e2 <_uart_flushTxBuffer>

0000230c <.L110>:
    230c:	1e 00 37    	bra       0x234a <.L106>

0000230e <.L108>:
    230e:	1e 00 78    	mov.w     [w14], w0
    2310:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2312:	06 00 3a    	bra       NZ, 0x2320 <.L111>

00002314 <.LSM322>:
    2314:	71 c0 b3    	mov.b     #0x7, w1
    2316:	2e 00 90    	mov.w     [w14+4], w0
    2318:	48 ff 07    	rcall     0x21aa <_uart_putc>

0000231a <.LSM323>:
    231a:	2e 00 90    	mov.w     [w14+4], w0
    231c:	62 ff 07    	rcall     0x21e2 <_uart_flushTxBuffer>

0000231e <.LSM324>:
    231e:	15 00 37    	bra       0x234a <.L106>

00002320 <.L111>:
    2320:	3e 00 90    	mov.w     [w14+6], w0
    2322:	10 40 78    	mov.b     [w0], w0
    2324:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2326:	9f ff 36    	bra       LEU, 0x2266 <.L114>
    2328:	3e 00 90    	mov.w     [w14+6], w0
    232a:	90 40 78    	mov.b     [w0], w1
    232c:	e0 c7 b3    	mov.b     #0x7e, w0
    232e:	80 cf 50    	sub.b     w1, w0, [w15]
    2330:	9c ff 3e    	bra       GTU, 0x226a <.L115>

00002332 <.LSM326>:
    2332:	3e 00 90    	mov.w     [w14+6], w0
    2334:	10 40 78    	mov.b     [w0], w0
    2336:	80 40 78    	mov.b     w0, w1
    2338:	2e 00 90    	mov.w     [w14+4], w0
    233a:	37 ff 07    	rcall     0x21aa <_uart_putc>

0000233c <.LSM327>:
    233c:	2e 00 90    	mov.w     [w14+4], w0
    233e:	51 ff 07    	rcall     0x21e2 <_uart_flushTxBuffer>

00002340 <.LSM328>:
    2340:	3e 00 90    	mov.w     [w14+6], w0
    2342:	00 00 e8    	inc.w     w0, w0
    2344:	30 07 98    	mov.w     w0, [w14+6]

00002346 <.LSM329>:
    2346:	1e 0f e9    	dec.w     [w14], [w14]

00002348 <.LSM330>:
    2348:	91 ff 37    	bra       0x226c <.L112>

0000234a <.L106>:
    234a:	90 ff 37    	bra       0x226c <.L112>

0000234c <.L113>:
    234c:	00 00 00    	nop       

0000234e <.L100>:
}
    234e:	00 80 fa    	ulnk      
    2350:	00 00 06    	return    

00002352 <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    2352:	04 00 fa    	lnk       #0x4

00002354 <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    2354:	94 24 a8    	bset.b    0x494, #0x1

00002356 <.LSM2>:
    U1ADDR = 0;
    2356:	96 24 ef    	clr.w     0x496

00002358 <.LSM3>:
    U1EIR = 0xFF;
    2358:	f0 0f 20    	mov.w     #0xff, w0
    235a:	70 24 88    	mov.w     w0, 0x48e

0000235c <.LSM4>:
    U1CONbits.PPBRST = 0;
    235c:	94 24 a9    	bclr.b    0x494, #0x1

0000235e <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    235e:	a0 4a 20    	mov.w     #0x4aa, w0
    2360:	10 07 98    	mov.w     w0, [w14+2]

00002362 <.LSM6>:
    for (n = 0; n<16; n++)
    2362:	00 40 eb    	clr.b     w0
    2364:	00 4f 78    	mov.b     w0, [w14]
    2366:	07 00 37    	bra       0x2376 <.L2>

00002368 <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    2368:	1e 80 fb    	ze        [w14], w0
    236a:	00 00 40    	add.w     w0, w0, w0
    236c:	9e 00 90    	mov.w     [w14+2], w1
    236e:	00 80 40    	add.w     w1, w0, w0
    2370:	80 00 eb    	clr.w     w1
    2372:	01 08 78    	mov.w     w1, [w0]

00002374 <.LSM8>:
    2374:	1e 4f e8    	inc.b     [w14], [w14]

00002376 <.L2>:
    2376:	1e 40 78    	mov.b     [w14], w0
    2378:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    237a:	f6 ff 36    	bra       LEU, 0x2368 <.L3>

0000237c <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    237c:	d0 00 20    	mov.w     #0xd, w0
    237e:	50 25 88    	mov.w     w0, 0x4aa

00002380 <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2380:	00 c0 20    	mov.w     #0xc00, w0
    2382:	01 c4 b3    	mov.b     #0x40, w1
    2384:	01 48 78    	mov.b     w1, [w0]

00002386 <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    2386:	00 c8 20    	mov.w     #0xc80, w0
    2388:	10 60 88    	mov.w     w0, 0xc02

0000238a <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    238a:	10 c0 20    	mov.w     #0xc01, w0
    238c:	81 c8 b3    	mov.b     #0x88, w1
    238e:	01 48 78    	mov.b     w1, [w0]

00002390 <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    2390:	00 cc 20    	mov.w     #0xcc0, w0
    2392:	30 60 88    	mov.w     w0, 0xc06

00002394 <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    2394:	50 c0 20    	mov.w     #0xc05, w0
    2396:	81 c0 b3    	mov.b     #0x8, w1
    2398:	01 48 78    	mov.b     w1, [w0]

0000239a <.LSM15>:
    U1CNFG1 = 0x00;
    239a:	a6 24 ef    	clr.w     0x4a6

0000239c <.LSM16>:
    U1CNFG2 = 0x00;
    239c:	a8 24 ef    	clr.w     0x4a8

0000239e <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    239e:	00 c0 20    	mov.w     #0xc00, w0
    23a0:	48 00 de    	lsr.w     w0, #0x8, w0
    23a2:	c0 24 88    	mov.w     w0, 0x498

000023a4 <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    23a4:	86 44 a8    	bset.b    0x486, #0x2

000023a6 <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    23a6:	86 e4 a8    	bset.b    0x486, #0x7

000023a8 <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    23a8:	88 04 a8    	bset.b    0x488, #0x0

000023aa <.LSM21>:
    U1CONbits.PKTDIS = 0;
    23aa:	94 a4 a9    	bclr.b    0x494, #0x5

000023ac <.LSM22>:
    USB_curr_config = 0x00;
    23ac:	65 68 ef    	clr.b     0x865

000023ae <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    23ae:	68 68 ef    	clr.b     0x868

000023b0 <.LSM24>:
    USB_device_status = 0x01;
    23b0:	10 c0 b3    	mov.b     #0x1, w0
    23b2:	66 e8 b7    	mov.b     WREG, 0x866

000023b4 <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    23b4:	00 d0 20    	mov.w     #0xd00, w0
    23b6:	80 c0 eb    	setm.b    w1
    23b8:	01 48 78    	mov.b     w1, [w0]

000023ba <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    23ba:	10 d0 20    	mov.w     #0xd01, w0
    23bc:	80 c0 eb    	setm.b    w1
    23be:	01 48 78    	mov.b     w1, [w0]

000023c0 <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    23c0:	00 00 00    	nop       

000023c2 <.L4>:
    23c2:	a1 24 80    	mov.w     0x494, w1
    23c4:	00 04 20    	mov.w     #0x40, w0
    23c6:	00 80 60    	and.w     w1, w0, w0
    23c8:	00 00 e0    	cp0.w     w0
    23ca:	fb ff 3a    	bra       NZ, 0x23c2 <.L4>

000023cc <.LSM28>:
}
    23cc:	00 80 fa    	ulnk      
    23ce:	00 00 06    	return    

000023d0 <_ServiceUSB>:

void ServiceUSB(void) {
    23d0:	06 00 fa    	lnk       #0x6

000023d2 <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    23d2:	50 24 80    	mov.w     0x48a, w0
    23d4:	62 00 60    	and.w     w0, #0x2, w0
    23d6:	00 00 e0    	cp0.w     w0
    23d8:	05 00 32    	bra       Z, 0x23e4 <.L6>

000023da <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    23da:	f0 0f 20    	mov.w     #0xff, w0
    23dc:	70 24 88    	mov.w     w0, 0x48e

000023de <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    23de:	20 00 20    	mov.w     #0x2, w0
    23e0:	50 24 88    	mov.w     w0, 0x48a
    23e2:	90 00 37    	bra       0x2504 <.L5>

000023e4 <.L6>:
    } else if (U1IRbits.SOFIF) {
    23e4:	50 24 80    	mov.w     0x48a, w0
    23e6:	64 00 60    	and.w     w0, #0x4, w0
    23e8:	00 00 e0    	cp0.w     w0
    23ea:	03 00 32    	bra       Z, 0x23f2 <.L8>

000023ec <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    23ec:	40 00 20    	mov.w     #0x4, w0
    23ee:	50 24 88    	mov.w     w0, 0x48a
    23f0:	89 00 37    	bra       0x2504 <.L5>

000023f2 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    23f2:	50 24 80    	mov.w     0x48a, w0
    23f4:	70 00 60    	and.w     w0, #0x10, w0
    23f6:	00 00 e0    	cp0.w     w0
    23f8:	03 00 32    	bra       Z, 0x2400 <.L9>

000023fa <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    23fa:	00 01 20    	mov.w     #0x10, w0
    23fc:	50 24 88    	mov.w     w0, 0x48a
    23fe:	82 00 37    	bra       0x2504 <.L5>

00002400 <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    2400:	51 24 80    	mov.w     0x48a, w1
    2402:	00 02 20    	mov.w     #0x20, w0
    2404:	00 80 60    	and.w     w1, w0, w0
    2406:	00 00 e0    	cp0.w     w0
    2408:	03 00 32    	bra       Z, 0x2410 <.L10>

0000240a <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    240a:	00 02 20    	mov.w     #0x20, w0
    240c:	50 24 88    	mov.w     w0, 0x48a
    240e:	7a 00 37    	bra       0x2504 <.L5>

00002410 <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    2410:	51 24 80    	mov.w     0x48a, w1
    2412:	00 08 20    	mov.w     #0x80, w0
    2414:	00 80 60    	and.w     w1, w0, w0
    2416:	00 00 e0    	cp0.w     w0
    2418:	03 00 32    	bra       Z, 0x2420 <.L11>

0000241a <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    241a:	00 08 20    	mov.w     #0x80, w0
    241c:	50 24 88    	mov.w     w0, 0x48a
    241e:	72 00 37    	bra       0x2504 <.L5>

00002420 <.L11>:
    } else if (U1IRbits.URSTIF) {
    2420:	50 24 80    	mov.w     0x48a, w0
    2422:	61 00 60    	and.w     w0, #0x1, w0
    2424:	00 00 e0    	cp0.w     w0
    2426:	34 00 32    	bra       Z, 0x2490 <.L12>

00002428 <.LSM42>:
        USB_curr_config = 0x00;
    2428:	65 68 ef    	clr.b     0x865

0000242a <.LSM43>:
        while (U1IRbits.TRNIF) {
    242a:	08 00 37    	bra       0x243c <.L13>

0000242c <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    242c:	80 00 20    	mov.w     #0x8, w0
    242e:	50 24 88    	mov.w     w0, 0x48a

00002430 <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    2430:	00 00 00    	nop       

00002432 <.LSM46>:
            __builtin_nop();
    2432:	00 00 00    	nop       

00002434 <.LSM47>:
            __builtin_nop();
    2434:	00 00 00    	nop       

00002436 <.LSM48>:
            __builtin_nop();
    2436:	00 00 00    	nop       

00002438 <.LSM49>:
            __builtin_nop();
    2438:	00 00 00    	nop       

0000243a <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    243a:	00 00 00    	nop       

0000243c <.L13>:
    243c:	50 24 80    	mov.w     0x48a, w0
    243e:	68 00 60    	and.w     w0, #0x8, w0
    2440:	00 00 e0    	cp0.w     w0
    2442:	f4 ff 3a    	bra       NZ, 0x242c <.L14>

00002444 <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    2444:	a0 4a 20    	mov.w     #0x4aa, w0
    2446:	10 07 98    	mov.w     w0, [w14+2]

00002448 <.LSM53>:
        for (n = 0; n<16; n++)
    2448:	00 40 eb    	clr.b     w0
    244a:	00 4f 78    	mov.b     w0, [w14]
    244c:	07 00 37    	bra       0x245c <.L15>

0000244e <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    244e:	1e 80 fb    	ze        [w14], w0
    2450:	00 00 40    	add.w     w0, w0, w0
    2452:	9e 00 90    	mov.w     [w14+2], w1
    2454:	00 80 40    	add.w     w1, w0, w0
    2456:	80 00 eb    	clr.w     w1
    2458:	01 08 78    	mov.w     w1, [w0]

0000245a <.LSM55>:
    245a:	1e 4f e8    	inc.b     [w14], [w14]

0000245c <.L15>:
    245c:	1e 40 78    	mov.b     [w14], w0
    245e:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    2460:	f6 ff 36    	bra       LEU, 0x244e <.L16>

00002462 <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2462:	00 c0 20    	mov.w     #0xc00, w0
    2464:	01 c4 b3    	mov.b     #0x40, w1
    2466:	01 48 78    	mov.b     w1, [w0]

00002468 <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    2468:	00 c8 20    	mov.w     #0xc80, w0
    246a:	10 60 88    	mov.w     w0, 0xc02

0000246c <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    246c:	10 c0 20    	mov.w     #0xc01, w0
    246e:	81 c8 b3    	mov.b     #0x88, w1
    2470:	01 48 78    	mov.b     w1, [w0]

00002472 <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    2472:	00 cc 20    	mov.w     #0xcc0, w0
    2474:	30 60 88    	mov.w     w0, 0xc06

00002476 <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    2476:	50 c0 20    	mov.w     #0xc05, w0
    2478:	81 c0 b3    	mov.b     #0x8, w1
    247a:	01 48 78    	mov.b     w1, [w0]

0000247c <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    247c:	96 24 ef    	clr.w     0x496

0000247e <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    247e:	f0 0f 20    	mov.w     #0xff, w0
    2480:	50 24 88    	mov.w     w0, 0x48a

00002482 <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    2482:	d0 00 20    	mov.w     #0xd, w0
    2484:	50 25 88    	mov.w     w0, 0x4aa

00002486 <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    2486:	10 c0 b3    	mov.b     #0x1, w0
    2488:	68 e8 b7    	mov.b     WREG, 0x868

0000248a <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    248a:	10 c0 b3    	mov.b     #0x1, w0
    248c:	66 e8 b7    	mov.b     WREG, 0x866
    248e:	3a 00 37    	bra       0x2504 <.L5>

00002490 <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    2490:	50 24 80    	mov.w     0x48a, w0
    2492:	68 00 60    	and.w     w0, #0x8, w0
    2494:	00 00 e0    	cp0.w     w0
    2496:	36 00 32    	bra       Z, 0x2504 <.L5>

00002498 <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    2498:	90 24 80    	mov.w     0x492, w0
    249a:	43 00 de    	lsr.w     w0, #0x3, w0
    249c:	c2 00 dd    	sl.w      w0, #0x2, w1
    249e:	00 c0 20    	mov.w     #0xc00, w0
    24a0:	00 80 40    	add.w     w1, w0, w0
    24a2:	20 07 98    	mov.w     w0, [w14+4]

000024a4 <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    24a4:	2e 00 90    	mov.w     [w14+4], w0
    24a6:	10 40 90    	mov.b     [w0+1], w0
    24a8:	59 e8 b7    	mov.b     WREG, 0x859

000024aa <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    24aa:	2e 00 90    	mov.w     [w14+4], w0
    24ac:	10 40 78    	mov.b     [w0], w0
    24ae:	58 e8 b7    	mov.b     WREG, 0x858

000024b0 <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    24b0:	2e 00 90    	mov.w     [w14+4], w0
    24b2:	10 00 90    	mov.w     [w0+2], w0
    24b4:	d0 42 88    	mov.w     w0, 0x85a

000024b6 <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    24b6:	90 24 80    	mov.w     0x492, w0
    24b8:	00 40 78    	mov.b     w0, w0
    24ba:	67 e8 b7    	mov.b     WREG, 0x867

000024bc <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    24bc:	80 00 20    	mov.w     #0x8, w0
    24be:	50 24 88    	mov.w     w0, 0x48a

000024c0 <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    24c0:	64 68 ef    	clr.b     0x864

000024c2 <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    24c2:	59 c8 bf    	mov.b     0x859, WREG
    24c4:	80 80 fb    	ze        w0, w1
    24c6:	c0 03 20    	mov.w     #0x3c, w0
    24c8:	00 80 60    	and.w     w1, w0, w0
    24ca:	41 02 20    	mov.w     #0x24, w1
    24cc:	81 0f 50    	sub.w     w0, w1, [w15]
    24ce:	08 00 32    	bra       Z, 0x24e0 <.L19>
    24d0:	41 03 20    	mov.w     #0x34, w1
    24d2:	81 0f 50    	sub.w     w0, w1, [w15]
    24d4:	03 00 32    	bra       Z, 0x24dc <.L20>
    24d6:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    24d8:	05 00 32    	bra       Z, 0x24e4 <.L18>
    24da:	05 00 37    	bra       0x24e6 <.L17>

000024dc <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    24dc:	15 00 07    	rcall     0x2508 <_ProcessSetupToken>

000024de <.LSM76>:
                break;
    24de:	03 00 37    	bra       0x24e6 <.L17>

000024e0 <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    24e0:	dc 02 07    	rcall     0x2a9a <_ProcessInToken>

000024e2 <.LSM78>:
                break;
    24e2:	01 00 37    	bra       0x24e6 <.L17>

000024e4 <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    24e4:	0e 03 07    	rcall     0x2b02 <_ProcessOutToken>

000024e6 <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    24e6:	64 c8 bf    	mov.b     0x864, WREG
    24e8:	00 80 fb    	ze        w0, w0
    24ea:	61 00 60    	and.w     w0, #0x1, w0
    24ec:	00 40 78    	mov.b     w0, w0
    24ee:	00 04 e0    	cp0.b     w0
    24f0:	09 00 32    	bra       Z, 0x2504 <.L5>

000024f2 <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    24f2:	00 c0 20    	mov.w     #0xc00, w0
    24f4:	01 c4 b3    	mov.b     #0x40, w1
    24f6:	01 48 78    	mov.b     w1, [w0]

000024f8 <.LSM82>:
            BD[EP0IN].status = 0x84;
    24f8:	50 c0 20    	mov.w     #0xc05, w0
    24fa:	41 c8 b3    	mov.b     #0x84, w1
    24fc:	01 48 78    	mov.b     w1, [w0]

000024fe <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    24fe:	10 c0 20    	mov.w     #0xc01, w0
    2500:	41 c8 b3    	mov.b     #0x84, w1
    2502:	01 48 78    	mov.b     w1, [w0]

00002504 <.L5>:
        }
    }
}
    2504:	00 80 fa    	ulnk      
    2506:	00 00 06    	return    

00002508 <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    2508:	02 00 fa    	lnk       #0x2

0000250a <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    250a:	d1 42 80    	mov.w     0x85a, w1
    250c:	01 0f 78    	mov.w     w1, [w14]

0000250e <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    250e:	1e 00 78    	mov.w     [w14], w0
    2510:	90 40 78    	mov.b     [w0], w1
    2512:	c0 85 20    	mov.w     #0x85c, w0
    2514:	01 48 78    	mov.b     w1, [w0]
    2516:	1e 0f e8    	inc.w     [w14], [w14]

00002518 <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    2518:	1e 00 78    	mov.w     [w14], w0
    251a:	90 40 78    	mov.b     [w0], w1
    251c:	c0 85 20    	mov.w     #0x85c, w0
    251e:	11 40 98    	mov.b     w1, [w0+1]
    2520:	1e 0f e8    	inc.w     [w14], [w14]

00002522 <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    2522:	1e 00 78    	mov.w     [w14], w0
    2524:	90 40 78    	mov.b     [w0], w1
    2526:	c0 85 20    	mov.w     #0x85c, w0
    2528:	21 40 98    	mov.b     w1, [w0+2]
    252a:	1e 0f e8    	inc.w     [w14], [w14]

0000252c <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    252c:	1e 00 78    	mov.w     [w14], w0
    252e:	90 40 78    	mov.b     [w0], w1
    2530:	c0 85 20    	mov.w     #0x85c, w0
    2532:	31 40 98    	mov.b     w1, [w0+3]
    2534:	1e 0f e8    	inc.w     [w14], [w14]

00002536 <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    2536:	1e 00 78    	mov.w     [w14], w0
    2538:	90 40 78    	mov.b     [w0], w1
    253a:	c0 85 20    	mov.w     #0x85c, w0
    253c:	41 40 98    	mov.b     w1, [w0+4]
    253e:	1e 0f e8    	inc.w     [w14], [w14]

00002540 <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    2540:	1e 00 78    	mov.w     [w14], w0
    2542:	90 40 78    	mov.b     [w0], w1
    2544:	c0 85 20    	mov.w     #0x85c, w0
    2546:	51 40 98    	mov.b     w1, [w0+5]
    2548:	1e 0f e8    	inc.w     [w14], [w14]

0000254a <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    254a:	1e 00 78    	mov.w     [w14], w0
    254c:	90 40 78    	mov.b     [w0], w1
    254e:	c0 85 20    	mov.w     #0x85c, w0
    2550:	61 40 98    	mov.b     w1, [w0+6]
    2552:	1e 0f e8    	inc.w     [w14], [w14]

00002554 <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    2554:	1e 00 78    	mov.w     [w14], w0
    2556:	90 40 78    	mov.b     [w0], w1
    2558:	c0 85 20    	mov.w     #0x85c, w0
    255a:	71 40 98    	mov.b     w1, [w0+7]
    255c:	1e 0f e8    	inc.w     [w14], [w14]

0000255e <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    255e:	00 c0 20    	mov.w     #0xc00, w0
    2560:	01 c4 b3    	mov.b     #0x40, w1
    2562:	01 48 78    	mov.b     w1, [w0]

00002564 <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    2564:	50 c0 20    	mov.w     #0xc05, w0
    2566:	81 c0 b3    	mov.b     #0x8, w1
    2568:	01 48 78    	mov.b     w1, [w0]

0000256a <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    256a:	c0 85 20    	mov.w     #0x85c, w0
    256c:	10 40 78    	mov.b     [w0], w0
    256e:	00 04 e0    	cp0.b     w0
    2570:	06 00 35    	bra       LT, 0x257e <.L22>
    2572:	c0 85 20    	mov.w     #0x85c, w0
    2574:	30 00 90    	mov.w     [w0+6], w0
    2576:	00 00 e0    	cp0.w     w0
    2578:	02 00 32    	bra       Z, 0x257e <.L22>
    257a:	80 cc b3    	mov.b     #0xc8, w0
    257c:	01 00 37    	bra       0x2580 <.L23>

0000257e <.L22>:
    257e:	80 c8 b3    	mov.b     #0x88, w0

00002580 <.L23>:
    2580:	11 c0 20    	mov.w     #0xc01, w1
    2582:	80 48 78    	mov.b     w0, [w1]

00002584 <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    2584:	94 a4 a9    	bclr.b    0x494, #0x5

00002586 <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    2586:	00 d0 20    	mov.w     #0xd00, w0
    2588:	80 c0 eb    	setm.b    w1
    258a:	01 48 78    	mov.b     w1, [w0]

0000258c <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    258c:	10 d0 20    	mov.w     #0xd01, w0
    258e:	80 c0 eb    	setm.b    w1
    2590:	01 48 78    	mov.b     w1, [w0]

00002592 <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    2592:	c0 85 20    	mov.w     #0x85c, w0
    2594:	10 40 78    	mov.b     [w0], w0
    2596:	80 80 fb    	ze        w0, w1
    2598:	00 06 20    	mov.w     #0x60, w0
    259a:	00 80 60    	and.w     w1, w0, w0
    259c:	00 00 e0    	cp0.w     w0
    259e:	04 00 32    	bra       Z, 0x25a8 <.L25>
    25a0:	01 04 20    	mov.w     #0x40, w1
    25a2:	81 0f 50    	sub.w     w0, w1, [w15]
    25a4:	03 00 32    	bra       Z, 0x25ac <.L26>
    25a6:	04 00 37    	bra       0x25b0 <.L28>

000025a8 <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    25a8:	08 00 07    	rcall     0x25ba <_StandardRequests>

000025aa <.LSM103>:
            break;
    25aa:	05 00 37    	bra       0x25b6 <.L21>

000025ac <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    25ac:	39 10 07    	rcall     0x4620 <_VendorRequests>

000025ae <.LSM105>:
            break;
    25ae:	03 00 37    	bra       0x25b6 <.L21>

000025b0 <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    25b0:	64 c8 bf    	mov.b     0x864, WREG
    25b2:	00 04 a0    	bset.b    w0, #0x0
    25b4:	64 e8 b7    	mov.b     WREG, 0x864

000025b6 <.L21>:
    }
}
    25b6:	00 80 fa    	ulnk      
    25b8:	00 00 06    	return    

000025ba <_StandardRequests>:

void StandardRequests(void) {
    25ba:	06 00 fa    	lnk       #0x6

000025bc <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    25bc:	c0 85 20    	mov.w     #0x85c, w0
    25be:	10 40 90    	mov.b     [w0+1], w0
    25c0:	00 80 fb    	ze        w0, w0
    25c2:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    25c4:	79 01 32    	bra       Z, 0x28b8 <.L34>
    25c6:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    25c8:	0c 00 3c    	bra       GT, 0x25e2 <.L39>
    25ca:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25cc:	bf 00 32    	bra       Z, 0x274c <.L32>
    25ce:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    25d0:	03 00 3c    	bra       GT, 0x25d8
    25d2:	00 00 e0    	cp0.w     w0
    25d4:	12 00 32    	bra       Z, 0x25fa <.L31>
    25d6:	5c 02 37    	bra       0x2a90 <.L30>

000025d8 <.L40>:
    25d8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    25da:	b8 00 32    	bra       Z, 0x274c <.L32>
    25dc:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    25de:	4c 01 32    	bra       Z, 0x2878 <.L33>
    25e0:	57 02 37    	bra       0x2a90 <.L30>

000025e2 <.L39>:
    25e2:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    25e4:	ef 01 32    	bra       Z, 0x29c4 <.L36>
    25e6:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    25e8:	03 00 3c    	bra       GT, 0x25f0 <.L41>
    25ea:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    25ec:	e0 01 32    	bra       Z, 0x29ae <.L35>
    25ee:	50 02 37    	bra       0x2a90 <.L30>

000025f0 <.L41>:
    25f0:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    25f2:	12 02 32    	bra       Z, 0x2a18 <.L37>
    25f4:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    25f6:	2b 02 32    	bra       Z, 0x2a4e <.L38>
    25f8:	4b 02 37    	bra       0x2a90 <.L30>

000025fa <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    25fa:	c0 85 20    	mov.w     #0x85c, w0
    25fc:	10 40 78    	mov.b     [w0], w0
    25fe:	00 80 fb    	ze        w0, w0
    2600:	7f 00 60    	and.w     w0, #0x1f, w0
    2602:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2604:	13 00 32    	bra       Z, 0x262c <.L44>
    2606:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2608:	32 00 32    	bra       Z, 0x266e <.L45>
    260a:	00 00 e0    	cp0.w     w0
    260c:	9a 00 3a    	bra       NZ, 0x2742 <.L128>

0000260e <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    260e:	30 60 80    	mov.w     0xc06, w0
    2610:	61 86 20    	mov.w     #0x866, w1
    2612:	91 40 78    	mov.b     [w1], w1
    2614:	01 48 78    	mov.b     w1, [w0]

00002616 <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    2616:	30 60 80    	mov.w     0xc06, w0
    2618:	00 00 e8    	inc.w     w0, w0
    261a:	80 40 eb    	clr.b     w1
    261c:	01 48 78    	mov.b     w1, [w0]

0000261e <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    261e:	40 c0 20    	mov.w     #0xc04, w0
    2620:	21 c0 b3    	mov.b     #0x2, w1
    2622:	01 48 78    	mov.b     w1, [w0]

00002624 <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    2624:	50 c0 20    	mov.w     #0xc05, w0
    2626:	81 cc b3    	mov.b     #0xc8, w1
    2628:	01 48 78    	mov.b     w1, [w0]

0000262a <.LSM115>:
                    break;
    262a:	8f 00 37    	bra       0x274a <.L46>

0000262c <.L44>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    262c:	68 c8 bf    	mov.b     0x868, WREG
    262e:	00 80 fb    	ze        w0, w0
    2630:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2632:	03 00 32    	bra       Z, 0x263a <.L48>
    2634:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2636:	05 00 32    	bra       Z, 0x2642 <.L49>
    2638:	19 00 37    	bra       0x266c <.L47>

0000263a <.L48>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    263a:	64 c8 bf    	mov.b     0x864, WREG
    263c:	00 04 a0    	bset.b    w0, #0x0
    263e:	64 e8 b7    	mov.b     WREG, 0x864

00002640 <.LSM118>:
                            break;
    2640:	15 00 37    	bra       0x266c <.L47>

00002642 <.L49>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    2642:	c0 85 20    	mov.w     #0x85c, w0
    2644:	40 40 90    	mov.b     [w0+4], w0
    2646:	00 04 e0    	cp0.b     w0
    2648:	0e 00 3a    	bra       NZ, 0x2666 <.L50>

0000264a <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    264a:	30 60 80    	mov.w     0xc06, w0
    264c:	80 40 eb    	clr.b     w1
    264e:	01 48 78    	mov.b     w1, [w0]

00002650 <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    2650:	30 60 80    	mov.w     0xc06, w0
    2652:	00 00 e8    	inc.w     w0, w0
    2654:	80 40 eb    	clr.b     w1
    2656:	01 48 78    	mov.b     w1, [w0]

00002658 <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    2658:	40 c0 20    	mov.w     #0xc04, w0
    265a:	21 c0 b3    	mov.b     #0x2, w1
    265c:	01 48 78    	mov.b     w1, [w0]

0000265e <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    265e:	50 c0 20    	mov.w     #0xc05, w0
    2660:	81 cc b3    	mov.b     #0xc8, w1
    2662:	01 48 78    	mov.b     w1, [w0]
    2664:	03 00 37    	bra       0x266c <.L47>

00002666 <.L50>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    2666:	64 c8 bf    	mov.b     0x864, WREG
    2668:	00 04 a0    	bset.b    w0, #0x0
    266a:	64 e8 b7    	mov.b     WREG, 0x864

0000266c <.L47>:
                            }
                    }
                    break;
    266c:	6e 00 37    	bra       0x274a <.L46>

0000266e <.L45>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    266e:	68 c8 bf    	mov.b     0x868, WREG
    2670:	00 80 fb    	ze        w0, w0
    2672:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2674:	03 00 32    	bra       Z, 0x267c <.L52>
    2676:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2678:	29 00 32    	bra       Z, 0x26cc <.L53>
    267a:	5f 00 37    	bra       0x273a <.L129>

0000267c <.L52>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    267c:	c0 85 20    	mov.w     #0x85c, w0
    267e:	40 40 90    	mov.b     [w0+4], w0
    2680:	00 80 fb    	ze        w0, w0
    2682:	6f 00 60    	and.w     w0, #0xf, w0
    2684:	00 00 e0    	cp0.w     w0
    2686:	1e 00 3a    	bra       NZ, 0x26c4 <.L54>

00002688 <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    2688:	31 60 80    	mov.w     0xc06, w1
    268a:	c0 85 20    	mov.w     #0x85c, w0
    268c:	40 40 90    	mov.b     [w0+4], w0
    268e:	00 04 e0    	cp0.b     w0
    2690:	07 00 3d    	bra       GE, 0x26a0 <.L55>
    2692:	50 c0 20    	mov.w     #0xc05, w0
    2694:	10 40 78    	mov.b     [w0], w0
    2696:	00 80 fb    	ze        w0, w0
    2698:	64 00 60    	and.w     w0, #0x4, w0
    269a:	42 80 de    	asr.w     w0, #0x2, w0
    269c:	00 40 78    	mov.b     w0, w0
    269e:	06 00 37    	bra       0x26ac <.L56>

000026a0 <.L55>:
    26a0:	10 c0 20    	mov.w     #0xc01, w0
    26a2:	10 40 78    	mov.b     [w0], w0
    26a4:	00 80 fb    	ze        w0, w0
    26a6:	64 00 60    	and.w     w0, #0x4, w0
    26a8:	42 80 de    	asr.w     w0, #0x2, w0
    26aa:	00 40 78    	mov.b     w0, w0

000026ac <.L56>:
    26ac:	80 48 78    	mov.b     w0, [w1]

000026ae <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    26ae:	30 60 80    	mov.w     0xc06, w0
    26b0:	00 00 e8    	inc.w     w0, w0
    26b2:	80 40 eb    	clr.b     w1
    26b4:	01 48 78    	mov.b     w1, [w0]

000026b6 <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    26b6:	40 c0 20    	mov.w     #0xc04, w0
    26b8:	21 c0 b3    	mov.b     #0x2, w1
    26ba:	01 48 78    	mov.b     w1, [w0]

000026bc <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    26bc:	50 c0 20    	mov.w     #0xc05, w0
    26be:	81 cc b3    	mov.b     #0xc8, w1
    26c0:	01 48 78    	mov.b     w1, [w0]
    26c2:	03 00 37    	bra       0x26ca <.L57>

000026c4 <.L54>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    26c4:	64 c8 bf    	mov.b     0x864, WREG
    26c6:	00 04 a0    	bset.b    w0, #0x0
    26c8:	64 e8 b7    	mov.b     WREG, 0x864

000026ca <.L57>:
                            }
                            break;
    26ca:	3a 00 37    	bra       0x2740 <.L58>

000026cc <.L53>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    26cc:	a0 4a 20    	mov.w     #0x4aa, w0
    26ce:	10 07 98    	mov.w     w0, [w14+2]

000026d0 <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    26d0:	c0 85 20    	mov.w     #0x85c, w0
    26d2:	40 40 90    	mov.b     [w0+4], w0
    26d4:	6f 4f 60    	and.b     w0, #0xf, [w14]

000026d6 <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    26d6:	1e 80 fb    	ze        [w14], w0
    26d8:	00 00 40    	add.w     w0, w0, w0
    26da:	80 00 78    	mov.w     w0, w1
    26dc:	c0 85 20    	mov.w     #0x85c, w0
    26de:	40 40 90    	mov.b     [w0+4], w0
    26e0:	00 00 fb    	se        w0, w0
    26e2:	4f 00 de    	lsr.w     w0, #0xf, w0
    26e4:	01 00 70    	ior.w     w0, w1, w0
    26e6:	c2 00 dd    	sl.w      w0, #0x2, w1
    26e8:	00 c0 20    	mov.w     #0xc00, w0
    26ea:	00 80 40    	add.w     w1, w0, w0
    26ec:	20 07 98    	mov.w     w0, [w14+4]

000026ee <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    26ee:	1e 80 fb    	ze        [w14], w0
    26f0:	00 00 40    	add.w     w0, w0, w0
    26f2:	9e 00 90    	mov.w     [w14+2], w1
    26f4:	00 80 40    	add.w     w1, w0, w0
    26f6:	90 00 78    	mov.w     [w0], w1
    26f8:	c0 85 20    	mov.w     #0x85c, w0
    26fa:	40 40 90    	mov.b     [w0+4], w0
    26fc:	00 04 e0    	cp0.b     w0
    26fe:	02 00 3d    	bra       GE, 0x2704 <.L59>
    2700:	40 00 20    	mov.w     #0x4, w0
    2702:	01 00 37    	bra       0x2706 <.L60>

00002704 <.L59>:
    2704:	80 00 20    	mov.w     #0x8, w0

00002706 <.L60>:
    2706:	00 80 60    	and.w     w1, w0, w0
    2708:	00 00 e0    	cp0.w     w0
    270a:	13 00 32    	bra       Z, 0x2732 <.L61>

0000270c <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    270c:	30 60 80    	mov.w     0xc06, w0
    270e:	ae 00 90    	mov.w     [w14+4], w1
    2710:	91 40 90    	mov.b     [w1+1], w1
    2712:	81 80 fb    	ze        w1, w1
    2714:	e4 80 60    	and.w     w1, #0x4, w1
    2716:	c2 88 de    	asr.w     w1, #0x2, w1
    2718:	81 40 78    	mov.b     w1, w1
    271a:	01 48 78    	mov.b     w1, [w0]

0000271c <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    271c:	30 60 80    	mov.w     0xc06, w0
    271e:	00 00 e8    	inc.w     w0, w0
    2720:	80 40 eb    	clr.b     w1
    2722:	01 48 78    	mov.b     w1, [w0]

00002724 <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    2724:	40 c0 20    	mov.w     #0xc04, w0
    2726:	21 c0 b3    	mov.b     #0x2, w1
    2728:	01 48 78    	mov.b     w1, [w0]

0000272a <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    272a:	50 c0 20    	mov.w     #0xc05, w0
    272c:	81 cc b3    	mov.b     #0xc8, w1
    272e:	01 48 78    	mov.b     w1, [w0]
    2730:	03 00 37    	bra       0x2738

00002732 <.L61>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    2732:	64 c8 bf    	mov.b     0x864, WREG
    2734:	00 04 a0    	bset.b    w0, #0x0
    2736:	64 e8 b7    	mov.b     WREG, 0x864

00002738 <.L62>:
                            }
                            break;
    2738:	03 00 37    	bra       0x2740 <.L58>

0000273a <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    273a:	64 c8 bf    	mov.b     0x864, WREG
    273c:	00 04 a0    	bset.b    w0, #0x0
    273e:	64 e8 b7    	mov.b     WREG, 0x864

00002740 <.L58>:
                    }
                    break;
    2740:	04 00 37    	bra       0x274a <.L46>

00002742 <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    2742:	64 c8 bf    	mov.b     0x864, WREG
    2744:	00 04 a0    	bset.b    w0, #0x0
    2746:	64 e8 b7    	mov.b     WREG, 0x864

00002748 <.LSM147>:
            }
            break;
    2748:	a6 01 37    	bra       0x2a96 <.L29>

0000274a <.L46>:
    274a:	a5 01 37    	bra       0x2a96 <.L29>

0000274c <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    274c:	c0 85 20    	mov.w     #0x85c, w0
    274e:	10 40 78    	mov.b     [w0], w0
    2750:	00 80 fb    	ze        w0, w0
    2752:	7f 00 60    	and.w     w0, #0x1f, w0
    2754:	00 00 e0    	cp0.w     w0
    2756:	03 00 32    	bra       Z, 0x275e <.L65>
    2758:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    275a:	1e 00 32    	bra       Z, 0x2798 <.L66>
    275c:	88 00 37    	bra       0x286e <.L130>

0000275e <.L65>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    275e:	c0 85 20    	mov.w     #0x85c, w0
    2760:	20 40 90    	mov.b     [w0+2], w0
    2762:	00 80 fb    	ze        w0, w0
    2764:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2766:	14 00 3a    	bra       NZ, 0x2790 <.L131>

00002768 <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    2768:	c0 85 20    	mov.w     #0x85c, w0
    276a:	10 40 90    	mov.b     [w0+1], w0
    276c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    276e:	06 00 3a    	bra       NZ, 0x277c <.L69>

00002770 <.LSM151>:
                                USB_device_status &= 0xFE;
    2770:	61 86 20    	mov.w     #0x866, w1
    2772:	91 40 78    	mov.b     [w1], w1
    2774:	e0 cf b3    	mov.b     #0xfe, w0
    2776:	00 c0 60    	and.b     w1, w0, w0
    2778:	66 e8 b7    	mov.b     WREG, 0x866
    277a:	03 00 37    	bra       0x2782 <.L70>

0000277c <.L69>:
                            else
                                USB_device_status |= 0x01;
    277c:	66 c8 bf    	mov.b     0x866, WREG
    277e:	00 04 a0    	bset.b    w0, #0x0
    2780:	66 e8 b7    	mov.b     WREG, 0x866

00002782 <.L70>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    2782:	40 c0 20    	mov.w     #0xc04, w0
    2784:	80 40 eb    	clr.b     w1
    2786:	01 48 78    	mov.b     w1, [w0]

00002788 <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    2788:	50 c0 20    	mov.w     #0xc05, w0
    278a:	81 cc b3    	mov.b     #0xc8, w1
    278c:	01 48 78    	mov.b     w1, [w0]

0000278e <.LSM155>:
                            break;
    278e:	03 00 37    	bra       0x2796 <.L71>

00002790 <.L131>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    2790:	64 c8 bf    	mov.b     0x864, WREG
    2792:	00 04 a0    	bset.b    w0, #0x0
    2794:	64 e8 b7    	mov.b     WREG, 0x864

00002796 <.L71>:
                    }
                    break;
    2796:	6f 00 37    	bra       0x2876 <.L72>

00002798 <.L66>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    2798:	68 c8 bf    	mov.b     0x868, WREG
    279a:	00 80 fb    	ze        w0, w0
    279c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    279e:	03 00 32    	bra       Z, 0x27a6 <.L74>
    27a0:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    27a2:	12 00 32    	bra       Z, 0x27c8 <.L75>
    27a4:	60 00 37    	bra       0x2866 <.L132>

000027a6 <.L74>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    27a6:	c0 85 20    	mov.w     #0x85c, w0
    27a8:	40 40 90    	mov.b     [w0+4], w0
    27aa:	00 80 fb    	ze        w0, w0
    27ac:	6f 00 60    	and.w     w0, #0xf, w0
    27ae:	00 00 e0    	cp0.w     w0
    27b0:	07 00 3a    	bra       NZ, 0x27c0 <.L76>

000027b2 <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    27b2:	40 c0 20    	mov.w     #0xc04, w0
    27b4:	80 40 eb    	clr.b     w1
    27b6:	01 48 78    	mov.b     w1, [w0]

000027b8 <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    27b8:	50 c0 20    	mov.w     #0xc05, w0
    27ba:	81 cc b3    	mov.b     #0xc8, w1
    27bc:	01 48 78    	mov.b     w1, [w0]
    27be:	03 00 37    	bra       0x27c6 <.L77>

000027c0 <.L76>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    27c0:	64 c8 bf    	mov.b     0x864, WREG
    27c2:	00 04 a0    	bset.b    w0, #0x0
    27c4:	64 e8 b7    	mov.b     WREG, 0x864

000027c6 <.L77>:
                            }
                            break;
    27c6:	52 00 37    	bra       0x286c <.L78>

000027c8 <.L75>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    27c8:	a0 4a 20    	mov.w     #0x4aa, w0
    27ca:	10 07 98    	mov.w     w0, [w14+2]

000027cc <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    27cc:	c0 85 20    	mov.w     #0x85c, w0
    27ce:	40 40 90    	mov.b     [w0+4], w0
    27d0:	6f 4f 60    	and.b     w0, #0xf, [w14]
    27d2:	1e 40 78    	mov.b     [w14], w0
    27d4:	00 04 e0    	cp0.b     w0
    27d6:	3b 00 32    	bra       Z, 0x284e <.L79>

000027d8 <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    27d8:	1e 80 fb    	ze        [w14], w0
    27da:	00 00 40    	add.w     w0, w0, w0
    27dc:	80 00 78    	mov.w     w0, w1
    27de:	c0 85 20    	mov.w     #0x85c, w0
    27e0:	40 40 90    	mov.b     [w0+4], w0
    27e2:	00 00 fb    	se        w0, w0
    27e4:	4f 00 de    	lsr.w     w0, #0xf, w0
    27e6:	01 00 70    	ior.w     w0, w1, w0
    27e8:	c2 00 dd    	sl.w      w0, #0x2, w1
    27ea:	00 c0 20    	mov.w     #0xc00, w0
    27ec:	00 80 40    	add.w     w1, w0, w0
    27ee:	20 07 98    	mov.w     w0, [w14+4]

000027f0 <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    27f0:	c0 85 20    	mov.w     #0x85c, w0
    27f2:	40 40 90    	mov.b     [w0+4], w0
    27f4:	00 04 e0    	cp0.b     w0
    27f6:	16 00 3d    	bra       GE, 0x2824 <.L80>

000027f8 <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    27f8:	1e 80 fb    	ze        [w14], w0
    27fa:	00 00 40    	add.w     w0, w0, w0
    27fc:	9e 00 90    	mov.w     [w14+2], w1
    27fe:	00 80 40    	add.w     w1, w0, w0
    2800:	10 00 78    	mov.w     [w0], w0
    2802:	64 00 60    	and.w     w0, #0x4, w0
    2804:	00 00 e0    	cp0.w     w0
    2806:	0a 00 32    	bra       Z, 0x281c <.L81>

00002808 <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    2808:	c0 85 20    	mov.w     #0x85c, w0
    280a:	10 40 90    	mov.b     [w0+1], w0
    280c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    280e:	02 00 3a    	bra       NZ, 0x2814 <.L82>
    2810:	00 40 eb    	clr.b     w0
    2812:	01 00 37    	bra       0x2816

00002814 <.L82>:
    2814:	40 c8 b3    	mov.b     #0x84, w0

00002816 <.L83>:
    2816:	ae 00 90    	mov.w     [w14+4], w1
    2818:	90 40 98    	mov.b     w0, [w1+1]
    281a:	19 00 37    	bra       0x284e <.L79>

0000281c <.L81>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    281c:	64 c8 bf    	mov.b     0x864, WREG
    281e:	00 04 a0    	bset.b    w0, #0x0
    2820:	64 e8 b7    	mov.b     WREG, 0x864
    2822:	15 00 37    	bra       0x284e <.L79>

00002824 <.L80>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    2824:	1e 80 fb    	ze        [w14], w0
    2826:	00 00 40    	add.w     w0, w0, w0
    2828:	9e 00 90    	mov.w     [w14+2], w1
    282a:	00 80 40    	add.w     w1, w0, w0
    282c:	10 00 78    	mov.w     [w0], w0
    282e:	68 00 60    	and.w     w0, #0x8, w0
    2830:	00 00 e0    	cp0.w     w0
    2832:	0a 00 32    	bra       Z, 0x2848 <.L84>

00002834 <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    2834:	c0 85 20    	mov.w     #0x85c, w0
    2836:	10 40 90    	mov.b     [w0+1], w0
    2838:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    283a:	02 00 3a    	bra       NZ, 0x2840 <.L85>
    283c:	80 c8 b3    	mov.b     #0x88, w0
    283e:	01 00 37    	bra       0x2842 <.L86>

00002840 <.L85>:
    2840:	40 c8 b3    	mov.b     #0x84, w0

00002842 <.L86>:
    2842:	ae 00 90    	mov.w     [w14+4], w1
    2844:	90 40 98    	mov.b     w0, [w1+1]
    2846:	03 00 37    	bra       0x284e <.L79>

00002848 <.L84>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    2848:	64 c8 bf    	mov.b     0x864, WREG
    284a:	00 04 a0    	bset.b    w0, #0x0
    284c:	64 e8 b7    	mov.b     WREG, 0x864

0000284e <.L79>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    284e:	64 c8 bf    	mov.b     0x864, WREG
    2850:	00 80 fb    	ze        w0, w0
    2852:	61 00 60    	and.w     w0, #0x1, w0
    2854:	00 00 e0    	cp0.w     w0
    2856:	06 00 3a    	bra       NZ, 0x2864 <.L87>

00002858 <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    2858:	40 c0 20    	mov.w     #0xc04, w0
    285a:	80 40 eb    	clr.b     w1
    285c:	01 48 78    	mov.b     w1, [w0]

0000285e <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    285e:	50 c0 20    	mov.w     #0xc05, w0
    2860:	81 cc b3    	mov.b     #0xc8, w1
    2862:	01 48 78    	mov.b     w1, [w0]

00002864 <.L87>:
                            }
                            break;
    2864:	03 00 37    	bra       0x286c <.L78>

00002866 <.L132>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    2866:	64 c8 bf    	mov.b     0x864, WREG
    2868:	00 04 a0    	bset.b    w0, #0x0
    286a:	64 e8 b7    	mov.b     WREG, 0x864

0000286c <.L78>:
                    }
                    break;
    286c:	04 00 37    	bra       0x2876 <.L72>

0000286e <.L130>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    286e:	64 c8 bf    	mov.b     0x864, WREG
    2870:	00 04 a0    	bset.b    w0, #0x0
    2872:	64 e8 b7    	mov.b     WREG, 0x864

00002874 <.LSM181>:
            }
            break;
    2874:	10 01 37    	bra       0x2a96 <.L29>

00002876 <.L72>:
    2876:	0f 01 37    	bra       0x2a96 <.L29>

00002878 <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    2878:	c0 85 20    	mov.w     #0x85c, w0
    287a:	20 40 90    	mov.b     [w0+2], w0
    287c:	00 04 e0    	cp0.b     w0
    287e:	04 00 3d    	bra       GE, 0x2888 <.L88>

00002880 <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    2880:	64 c8 bf    	mov.b     0x864, WREG
    2882:	00 04 a0    	bset.b    w0, #0x0
    2884:	64 e8 b7    	mov.b     WREG, 0x864

00002886 <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    2886:	07 01 37    	bra       0x2a96 <.L29>

00002888 <.L88>:
    2888:	c0 85 20    	mov.w     #0x85c, w0
    288a:	90 40 78    	mov.b     [w0], w1
    288c:	00 d0 20    	mov.w     #0xd00, w0
    288e:	01 48 78    	mov.b     w1, [w0]

00002890 <.LSM186>:
    2890:	c0 85 20    	mov.w     #0x85c, w0
    2892:	90 40 90    	mov.b     [w0+1], w1
    2894:	10 d0 20    	mov.w     #0xd01, w0
    2896:	01 48 78    	mov.b     w1, [w0]

00002898 <.LSM187>:
    2898:	c0 85 20    	mov.w     #0x85c, w0
    289a:	10 00 90    	mov.w     [w0+2], w0
    289c:	10 68 88    	mov.w     w0, 0xd02

0000289e <.LSM188>:
    289e:	c0 85 20    	mov.w     #0x85c, w0
    28a0:	20 00 90    	mov.w     [w0+4], w0
    28a2:	20 68 88    	mov.w     w0, 0xd04

000028a4 <.LSM189>:
    28a4:	c0 85 20    	mov.w     #0x85c, w0
    28a6:	30 00 90    	mov.w     [w0+6], w0
    28a8:	30 68 88    	mov.w     w0, 0xd06

000028aa <.LSM190>:
    28aa:	40 c0 20    	mov.w     #0xc04, w0
    28ac:	80 40 eb    	clr.b     w1
    28ae:	01 48 78    	mov.b     w1, [w0]

000028b0 <.LSM191>:
    28b0:	50 c0 20    	mov.w     #0xc05, w0
    28b2:	81 cc b3    	mov.b     #0xc8, w1
    28b4:	01 48 78    	mov.b     w1, [w0]

000028b6 <.LSM192>:
    28b6:	ef 00 37    	bra       0x2a96 <.L29>

000028b8 <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    28b8:	c0 85 20    	mov.w     #0x85c, w0
    28ba:	90 40 78    	mov.b     [w0], w1
    28bc:	00 d0 20    	mov.w     #0xd00, w0
    28be:	01 48 78    	mov.b     w1, [w0]

000028c0 <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    28c0:	c0 85 20    	mov.w     #0x85c, w0
    28c2:	90 40 90    	mov.b     [w0+1], w1
    28c4:	10 d0 20    	mov.w     #0xd01, w0
    28c6:	01 48 78    	mov.b     w1, [w0]

000028c8 <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    28c8:	c0 85 20    	mov.w     #0x85c, w0
    28ca:	10 00 90    	mov.w     [w0+2], w0
    28cc:	10 68 88    	mov.w     w0, 0xd02

000028ce <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    28ce:	c0 85 20    	mov.w     #0x85c, w0
    28d0:	20 00 90    	mov.w     [w0+4], w0
    28d2:	20 68 88    	mov.w     w0, 0xd04

000028d4 <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    28d4:	c0 85 20    	mov.w     #0x85c, w0
    28d6:	30 00 90    	mov.w     [w0+6], w0
    28d8:	30 68 88    	mov.w     w0, 0xd06

000028da <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    28da:	c0 85 20    	mov.w     #0x85c, w0
    28dc:	30 40 90    	mov.b     [w0+3], w0
    28de:	00 80 fb    	ze        w0, w0
    28e0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    28e2:	14 00 32    	bra       Z, 0x290c <.L92>
    28e4:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    28e6:	36 00 32    	bra       Z, 0x2954 <.L93>
    28e8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    28ea:	5c 00 3a    	bra       NZ, 0x29a4 <.L133>

000028ec <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    28ec:	e0 55 29    	mov.w     #0x955e, w0
    28ee:	40 68 88    	mov.w     w0, 0xd08

000028f0 <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    28f0:	40 68 80    	mov.w     0xd08, w0
    28f2:	10 40 78    	mov.b     [w0], w0
    28f4:	00 80 fb    	ze        w0, w0
    28f6:	50 68 88    	mov.w     w0, 0xd0a

000028f8 <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    28f8:	c0 85 20    	mov.w     #0x85c, w0
    28fa:	b0 00 90    	mov.w     [w0+6], w1
    28fc:	50 68 80    	mov.w     0xd0a, w0
    28fe:	80 8f 50    	sub.w     w1, w0, [w15]
    2900:	03 00 31    	bra       C, 0x2908 <.L94>

00002902 <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    2902:	c0 85 20    	mov.w     #0x85c, w0
    2904:	30 00 90    	mov.w     [w0+6], w0
    2906:	50 68 88    	mov.w     w0, 0xd0a

00002908 <.L94>:
                    }
                    SendDataPacket();
    2908:	22 01 07    	rcall     0x2b4e <_SendDataPacket>

0000290a <.LSM204>:
                    break;
    290a:	50 00 37    	bra       0x29ac <.L95>

0000290c <.L92>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    290c:	c0 85 20    	mov.w     #0x85c, w0
    290e:	20 40 90    	mov.b     [w0+2], w0
    2910:	00 80 fb    	ze        w0, w0
    2912:	00 00 e0    	cp0.w     w0
    2914:	03 00 3a    	bra       NZ, 0x291c <.L134>

00002916 <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    2916:	00 57 29    	mov.w     #0x9570, w0
    2918:	40 68 88    	mov.w     w0, 0xd08

0000291a <.LSM207>:
                            break;
    291a:	03 00 37    	bra       0x2922 <.L98>

0000291c <.L134>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    291c:	64 c8 bf    	mov.b     0x864, WREG
    291e:	00 04 a0    	bset.b    w0, #0x0
    2920:	64 e8 b7    	mov.b     WREG, 0x864

00002922 <.L98>:
                    }
                    if (!(USB_error_flags&0x01)) {
    2922:	64 c8 bf    	mov.b     0x864, WREG
    2924:	00 80 fb    	ze        w0, w0
    2926:	61 00 60    	and.w     w0, #0x1, w0
    2928:	00 00 e0    	cp0.w     w0
    292a:	13 00 3a    	bra       NZ, 0x2952 <.L99>

0000292c <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    292c:	40 68 80    	mov.w     0xd08, w0
    292e:	00 80 e8    	inc2.w    w0, w0
    2930:	90 40 78    	mov.b     [w0], w1
    2932:	a0 d0 20    	mov.w     #0xd0a, w0
    2934:	01 48 78    	mov.b     w1, [w0]

00002936 <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    2936:	40 68 80    	mov.w     0xd08, w0
    2938:	63 00 40    	add.w     w0, #0x3, w0
    293a:	90 40 78    	mov.b     [w0], w1
    293c:	b0 d0 20    	mov.w     #0xd0b, w0
    293e:	01 48 78    	mov.b     w1, [w0]

00002940 <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    2940:	c0 85 20    	mov.w     #0x85c, w0
    2942:	b0 00 90    	mov.w     [w0+6], w1
    2944:	50 68 80    	mov.w     0xd0a, w0
    2946:	80 8f 50    	sub.w     w1, w0, [w15]
    2948:	03 00 31    	bra       C, 0x2950 <.L100>

0000294a <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    294a:	c0 85 20    	mov.w     #0x85c, w0
    294c:	30 00 90    	mov.w     [w0+6], w0
    294e:	50 68 88    	mov.w     w0, 0xd0a

00002950 <.L100>:
                        }
                        SendDataPacket();
    2950:	fe 00 07    	rcall     0x2b4e <_SendDataPacket>

00002952 <.L99>:
                    }
                    break;
    2952:	2c 00 37    	bra       0x29ac <.L95>

00002954 <.L93>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    2954:	c0 85 20    	mov.w     #0x85c, w0
    2956:	20 40 90    	mov.b     [w0+2], w0
    2958:	00 80 fb    	ze        w0, w0
    295a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    295c:	07 00 32    	bra       Z, 0x296c <.L103>
    295e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2960:	08 00 32    	bra       Z, 0x2972 <.L104>
    2962:	00 00 e0    	cp0.w     w0
    2964:	09 00 3a    	bra       NZ, 0x2978 <.L135>

00002966 <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    2966:	20 58 29    	mov.w     #0x9582, w0
    2968:	40 68 88    	mov.w     w0, 0xd08

0000296a <.LSM218>:
                            break;
    296a:	09 00 37    	bra       0x297e <.L105>

0000296c <.L103>:
                        case 1:
                            USB_request.data_ptr = String1;
    296c:	60 58 29    	mov.w     #0x9586, w0
    296e:	40 68 88    	mov.w     w0, 0xd08

00002970 <.LSM220>:
                            break;
    2970:	06 00 37    	bra       0x297e <.L105>

00002972 <.L104>:
                        case 2:
                            USB_request.data_ptr = String2;
    2972:	00 5a 29    	mov.w     #0x95a0, w0
    2974:	40 68 88    	mov.w     w0, 0xd08

00002976 <.LSM222>:
                            break;
    2976:	03 00 37    	bra       0x297e <.L105>

00002978 <.L135>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    2978:	64 c8 bf    	mov.b     0x864, WREG
    297a:	00 04 a0    	bset.b    w0, #0x0
    297c:	64 e8 b7    	mov.b     WREG, 0x864

0000297e <.L105>:
                    }
                    if (!(USB_error_flags&0x01)) {
    297e:	64 c8 bf    	mov.b     0x864, WREG
    2980:	00 80 fb    	ze        w0, w0
    2982:	61 00 60    	and.w     w0, #0x1, w0
    2984:	00 00 e0    	cp0.w     w0
    2986:	0d 00 3a    	bra       NZ, 0x29a2 <.L106>

00002988 <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    2988:	40 68 80    	mov.w     0xd08, w0
    298a:	10 40 78    	mov.b     [w0], w0
    298c:	00 80 fb    	ze        w0, w0
    298e:	50 68 88    	mov.w     w0, 0xd0a

00002990 <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    2990:	c0 85 20    	mov.w     #0x85c, w0
    2992:	b0 00 90    	mov.w     [w0+6], w1
    2994:	50 68 80    	mov.w     0xd0a, w0
    2996:	80 8f 50    	sub.w     w1, w0, [w15]
    2998:	03 00 31    	bra       C, 0x29a0 <.L107>

0000299a <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    299a:	c0 85 20    	mov.w     #0x85c, w0
    299c:	30 00 90    	mov.w     [w0+6], w0
    299e:	50 68 88    	mov.w     w0, 0xd0a

000029a0 <.L107>:
                        }
                        SendDataPacket();
    29a0:	d6 00 07    	rcall     0x2b4e <_SendDataPacket>

000029a2 <.L106>:
                    }
                    break;
    29a2:	04 00 37    	bra       0x29ac <.L95>

000029a4 <.L133>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    29a4:	64 c8 bf    	mov.b     0x864, WREG
    29a6:	00 04 a0    	bset.b    w0, #0x0
    29a8:	64 e8 b7    	mov.b     WREG, 0x864

000029aa <.LSM231>:
            }
            break;
    29aa:	75 00 37    	bra       0x2a96 <.L29>

000029ac <.L95>:
    29ac:	74 00 37    	bra       0x2a96 <.L29>

000029ae <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    29ae:	30 60 80    	mov.w     0xc06, w0
    29b0:	51 86 20    	mov.w     #0x865, w1
    29b2:	91 40 78    	mov.b     [w1], w1
    29b4:	01 48 78    	mov.b     w1, [w0]

000029b6 <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    29b6:	40 c0 20    	mov.w     #0xc04, w0
    29b8:	11 c0 b3    	mov.b     #0x1, w1
    29ba:	01 48 78    	mov.b     w1, [w0]

000029bc <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    29bc:	50 c0 20    	mov.w     #0xc05, w0
    29be:	81 cc b3    	mov.b     #0xc8, w1
    29c0:	01 48 78    	mov.b     w1, [w0]

000029c2 <.LSM235>:
            break;
    29c2:	69 00 37    	bra       0x2a96 <.L29>

000029c4 <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    29c4:	c0 85 20    	mov.w     #0x85c, w0
    29c6:	20 40 90    	mov.b     [w0+2], w0
    29c8:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    29ca:	22 00 3e    	bra       GTU, 0x2a10 <.L108>

000029cc <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    29cc:	a0 4a 20    	mov.w     #0x4aa, w0
    29ce:	10 07 98    	mov.w     w0, [w14+2]

000029d0 <.LSM238>:
                for (n = 1; n<16; n++)
    29d0:	10 c0 b3    	mov.b     #0x1, w0
    29d2:	00 4f 78    	mov.b     w0, [w14]
    29d4:	07 00 37    	bra       0x29e4 <.L109>

000029d6 <.L110>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    29d6:	1e 80 fb    	ze        [w14], w0
    29d8:	00 00 40    	add.w     w0, w0, w0
    29da:	9e 00 90    	mov.w     [w14+2], w1
    29dc:	00 80 40    	add.w     w1, w0, w0
    29de:	80 00 eb    	clr.w     w1
    29e0:	01 08 78    	mov.w     w1, [w0]

000029e2 <.LSM240>:
    29e2:	1e 4f e8    	inc.b     [w14], [w14]

000029e4 <.L109>:
    29e4:	1e 40 78    	mov.b     [w14], w0
    29e6:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    29e8:	f6 ff 36    	bra       LEU, 0x29d6 <.L110>

000029ea <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    29ea:	c0 85 20    	mov.w     #0x85c, w0
    29ec:	20 40 90    	mov.b     [w0+2], w0
    29ee:	65 e8 b7    	mov.b     WREG, 0x865
    29f0:	65 c8 bf    	mov.b     0x865, WREG
    29f2:	00 80 fb    	ze        w0, w0
    29f4:	00 00 e0    	cp0.w     w0
    29f6:	03 00 3a    	bra       NZ, 0x29fe <.L136>

000029f8 <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    29f8:	20 c0 b3    	mov.b     #0x2, w0
    29fa:	68 e8 b7    	mov.b     WREG, 0x868

000029fc <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    29fc:	02 00 37    	bra       0x2a02 <.L113>

000029fe <.L136>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    29fe:	30 c0 b3    	mov.b     #0x3, w0
    2a00:	68 e8 b7    	mov.b     WREG, 0x868

00002a02 <.L113>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    2a02:	40 c0 20    	mov.w     #0xc04, w0
    2a04:	80 40 eb    	clr.b     w1
    2a06:	01 48 78    	mov.b     w1, [w0]

00002a08 <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    2a08:	50 c0 20    	mov.w     #0xc05, w0
    2a0a:	81 cc b3    	mov.b     #0xc8, w1
    2a0c:	01 48 78    	mov.b     w1, [w0]

00002a0e <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    2a0e:	43 00 37    	bra       0x2a96 <.L29>

00002a10 <.L108>:
    2a10:	64 c8 bf    	mov.b     0x864, WREG
    2a12:	00 04 a0    	bset.b    w0, #0x0
    2a14:	64 e8 b7    	mov.b     WREG, 0x864

00002a16 <.LSM249>:
    2a16:	3f 00 37    	bra       0x2a96 <.L29>

00002a18 <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    2a18:	68 c8 bf    	mov.b     0x868, WREG
    2a1a:	00 80 fb    	ze        w0, w0
    2a1c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2a1e:	13 00 3a    	bra       NZ, 0x2a46 <.L137>

00002a20 <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    2a20:	c0 85 20    	mov.w     #0x85c, w0
    2a22:	40 40 90    	mov.b     [w0+4], w0
    2a24:	00 04 e0    	cp0.b     w0
    2a26:	0a 00 3a    	bra       NZ, 0x2a3c <.L117>

00002a28 <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    2a28:	30 60 80    	mov.w     0xc06, w0
    2a2a:	80 40 eb    	clr.b     w1
    2a2c:	01 48 78    	mov.b     w1, [w0]

00002a2e <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    2a2e:	40 c0 20    	mov.w     #0xc04, w0
    2a30:	11 c0 b3    	mov.b     #0x1, w1
    2a32:	01 48 78    	mov.b     w1, [w0]

00002a34 <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    2a34:	50 c0 20    	mov.w     #0xc05, w0
    2a36:	81 cc b3    	mov.b     #0xc8, w1
    2a38:	01 48 78    	mov.b     w1, [w0]
    2a3a:	03 00 37    	bra       0x2a42 <.L118>

00002a3c <.L117>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    2a3c:	64 c8 bf    	mov.b     0x864, WREG
    2a3e:	00 04 a0    	bset.b    w0, #0x0
    2a40:	64 e8 b7    	mov.b     WREG, 0x864

00002a42 <.L118>:
                    }
                    break;
    2a42:	00 00 00    	nop       

00002a44 <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    2a44:	28 00 37    	bra       0x2a96 <.L29>

00002a46 <.L137>:
    2a46:	64 c8 bf    	mov.b     0x864, WREG
    2a48:	00 04 a0    	bset.b    w0, #0x0
    2a4a:	64 e8 b7    	mov.b     WREG, 0x864

00002a4c <.LSM259>:
    2a4c:	24 00 37    	bra       0x2a96 <.L29>

00002a4e <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    2a4e:	68 c8 bf    	mov.b     0x868, WREG
    2a50:	00 80 fb    	ze        w0, w0
    2a52:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    2a54:	19 00 3a    	bra       NZ, 0x2a88 <.L138>

00002a56 <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    2a56:	c0 85 20    	mov.w     #0x85c, w0
    2a58:	40 40 90    	mov.b     [w0+4], w0
    2a5a:	00 04 e0    	cp0.b     w0
    2a5c:	10 00 3a    	bra       NZ, 0x2a7e <.L122>

00002a5e <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    2a5e:	c0 85 20    	mov.w     #0x85c, w0
    2a60:	20 40 90    	mov.b     [w0+2], w0
    2a62:	00 80 fb    	ze        w0, w0
    2a64:	00 00 e0    	cp0.w     w0
    2a66:	07 00 3a    	bra       NZ, 0x2a76 <.L139>

00002a68 <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    2a68:	40 c0 20    	mov.w     #0xc04, w0
    2a6a:	80 40 eb    	clr.b     w1
    2a6c:	01 48 78    	mov.b     w1, [w0]

00002a6e <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    2a6e:	50 c0 20    	mov.w     #0xc05, w0
    2a70:	81 cc b3    	mov.b     #0xc8, w1
    2a72:	01 48 78    	mov.b     w1, [w0]

00002a74 <.LSM265>:
                                break;
    2a74:	07 00 37    	bra       0x2a84 <.L126>

00002a76 <.L139>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    2a76:	64 c8 bf    	mov.b     0x864, WREG
    2a78:	00 04 a0    	bset.b    w0, #0x0
    2a7a:	64 e8 b7    	mov.b     WREG, 0x864
    2a7c:	03 00 37    	bra       0x2a84 <.L126>

00002a7e <.L122>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    2a7e:	64 c8 bf    	mov.b     0x864, WREG
    2a80:	00 04 a0    	bset.b    w0, #0x0
    2a82:	64 e8 b7    	mov.b     WREG, 0x864

00002a84 <.L126>:
                    }
                    break;
    2a84:	00 00 00    	nop       

00002a86 <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    2a86:	07 00 37    	bra       0x2a96 <.L29>

00002a88 <.L138>:
    2a88:	64 c8 bf    	mov.b     0x864, WREG
    2a8a:	00 04 a0    	bset.b    w0, #0x0
    2a8c:	64 e8 b7    	mov.b     WREG, 0x864

00002a8e <.LSM271>:
    2a8e:	03 00 37    	bra       0x2a96 <.L29>

00002a90 <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    2a90:	64 c8 bf    	mov.b     0x864, WREG
    2a92:	00 04 a0    	bset.b    w0, #0x0
    2a94:	64 e8 b7    	mov.b     WREG, 0x864

00002a96 <.L29>:
    }
}
    2a96:	00 80 fa    	ulnk      
    2a98:	00 00 06    	return    

00002a9a <_ProcessInToken>:

void ProcessInToken(void) {
    2a9a:	00 00 fa    	lnk       #0x0

00002a9c <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    2a9c:	67 c8 bf    	mov.b     0x867, WREG
    2a9e:	80 80 fb    	ze        w0, w1
    2aa0:	00 0f 20    	mov.w     #0xf0, w0
    2aa2:	00 80 60    	and.w     w1, w0, w0
    2aa4:	00 00 e0    	cp0.w     w0
    2aa6:	2b 00 3a    	bra       NZ, 0x2afe <.L140>

00002aa8 <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    2aa8:	00 d0 20    	mov.w     #0xd00, w0
    2aaa:	10 40 78    	mov.b     [w0], w0
    2aac:	80 80 fb    	ze        w0, w1
    2aae:	00 06 20    	mov.w     #0x60, w0
    2ab0:	00 80 60    	and.w     w1, w0, w0
    2ab2:	01 02 20    	mov.w     #0x20, w1
    2ab4:	81 0f 50    	sub.w     w0, w1, [w15]
    2ab6:	1f 00 32    	bra       Z, 0x2af6 <.L154>
    2ab8:	01 04 20    	mov.w     #0x40, w1
    2aba:	81 0f 50    	sub.w     w0, w1, [w15]
    2abc:	1a 00 32    	bra       Z, 0x2af2 <.L146>
    2abe:	00 00 e0    	cp0.w     w0
    2ac0:	1d 00 3a    	bra       NZ, 0x2afc <.L155>

00002ac2 <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    2ac2:	10 d0 20    	mov.w     #0xd01, w0
    2ac4:	10 40 78    	mov.b     [w0], w0
    2ac6:	00 80 fb    	ze        w0, w0
    2ac8:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2aca:	03 00 32    	bra       Z, 0x2ad2 <.L148>
    2acc:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    2ace:	0e 00 32    	bra       Z, 0x2aec <.L149>

00002ad0 <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    2ad0:	13 00 37    	bra       0x2af8 <.L143>

00002ad2 <.L148>:
    2ad2:	20 d0 20    	mov.w     #0xd02, w0
    2ad4:	10 40 78    	mov.b     [w0], w0
    2ad6:	00 80 fb    	ze        w0, w0
    2ad8:	b0 24 88    	mov.w     w0, 0x496
    2ada:	b0 24 80    	mov.w     0x496, w0
    2adc:	00 00 e0    	cp0.w     w0
    2ade:	03 00 3a    	bra       NZ, 0x2ae6 <.L153>

00002ae0 <.LSM280>:
    2ae0:	10 c0 b3    	mov.b     #0x1, w0
    2ae2:	68 e8 b7    	mov.b     WREG, 0x868

00002ae4 <.LSM281>:
    2ae4:	02 00 37    	bra       0x2aea <.L152>

00002ae6 <.L153>:
    2ae6:	20 c0 b3    	mov.b     #0x2, w0
    2ae8:	68 e8 b7    	mov.b     WREG, 0x868

00002aea <.L152>:
    2aea:	02 00 37    	bra       0x2af0 <.L147>

00002aec <.L149>:
    2aec:	30 00 07    	rcall     0x2b4e <_SendDataPacket>

00002aee <.LSM285>:
    2aee:	00 00 00    	nop       

00002af0 <.L147>:
    2af0:	03 00 37    	bra       0x2af8 <.L143>

00002af2 <.L146>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    2af2:	c8 0d 07    	rcall     0x4684 <_VendorRequestsIn>

00002af4 <.LSM288>:
                    break;
    2af4:	01 00 37    	bra       0x2af8 <.L143>

00002af6 <.L154>:
    2af6:	00 00 00    	nop       

00002af8 <.L143>:
            }
            break;
    2af8:	00 00 00    	nop       
    2afa:	01 00 37    	bra       0x2afe <.L140>

00002afc <.L155>:
    2afc:	00 00 00    	nop       

00002afe <.L140>:
    }
}
    2afe:	00 80 fa    	ulnk      
    2b00:	00 00 06    	return    

00002b02 <_ProcessOutToken>:

void ProcessOutToken(void) {
    2b02:	00 00 fa    	lnk       #0x0

00002b04 <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    2b04:	67 c8 bf    	mov.b     0x867, WREG
    2b06:	80 80 fb    	ze        w0, w1
    2b08:	00 0f 20    	mov.w     #0xf0, w0
    2b0a:	00 80 60    	and.w     w1, w0, w0
    2b0c:	00 00 e0    	cp0.w     w0
    2b0e:	1d 00 3a    	bra       NZ, 0x2b4a <.L156>

00002b10 <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    2b10:	00 d0 20    	mov.w     #0xd00, w0
    2b12:	10 40 78    	mov.b     [w0], w0
    2b14:	80 80 fb    	ze        w0, w1
    2b16:	00 06 20    	mov.w     #0x60, w0
    2b18:	00 80 60    	and.w     w1, w0, w0
    2b1a:	01 02 20    	mov.w     #0x20, w1
    2b1c:	81 0f 50    	sub.w     w0, w1, [w15]
    2b1e:	05 00 32    	bra       Z, 0x2b2a <.L163>
    2b20:	01 04 20    	mov.w     #0x40, w1
    2b22:	81 0f 50    	sub.w     w0, w1, [w15]
    2b24:	04 00 3a    	bra       NZ, 0x2b2e <.L164>

00002b26 <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    2b26:	b4 0d 07    	rcall     0x4690 <_VendorRequestsOut>

00002b28 <.LSM296>:
                    break;
    2b28:	03 00 37    	bra       0x2b30 <.L159>

00002b2a <.L163>:
    2b2a:	00 00 00    	nop       
    2b2c:	01 00 37    	bra       0x2b30 <.L159>

00002b2e <.L164>:
    2b2e:	00 00 00    	nop       

00002b30 <.L159>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2b30:	00 c0 20    	mov.w     #0xc00, w0
    2b32:	01 c4 b3    	mov.b     #0x40, w1
    2b34:	01 48 78    	mov.b     w1, [w0]

00002b36 <.LSM300>:
            BD[EP0OUT].status = 0x88;
    2b36:	10 c0 20    	mov.w     #0xc01, w0
    2b38:	81 c8 b3    	mov.b     #0x88, w1
    2b3a:	01 48 78    	mov.b     w1, [w0]

00002b3c <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    2b3c:	40 c0 20    	mov.w     #0xc04, w0
    2b3e:	80 40 eb    	clr.b     w1
    2b40:	01 48 78    	mov.b     w1, [w0]

00002b42 <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    2b42:	50 c0 20    	mov.w     #0xc05, w0
    2b44:	81 cc b3    	mov.b     #0xc8, w1
    2b46:	01 48 78    	mov.b     w1, [w0]

00002b48 <.LSM303>:
            break;
    2b48:	00 00 00    	nop       

00002b4a <.L156>:
    }
}
    2b4a:	00 80 fa    	ulnk      
    2b4c:	00 00 06    	return    

00002b4e <_SendDataPacket>:

void SendDataPacket(void) {
    2b4e:	02 00 fa    	lnk       #0x2

00002b50 <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    2b50:	51 68 80    	mov.w     0xd0a, w1
    2b52:	f0 03 20    	mov.w     #0x3f, w0
    2b54:	80 8f 50    	sub.w     w1, w0, [w15]
    2b56:	0b 00 3e    	bra       GTU, 0x2b6e <.L166>

00002b58 <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    2b58:	50 68 80    	mov.w     0xd0a, w0
    2b5a:	00 4f 78    	mov.b     w0, [w14]

00002b5c <.LSM308>:
        USB_request.bytes_left.w = 0;
    2b5c:	00 00 eb    	clr.w     w0
    2b5e:	50 68 88    	mov.w     w0, 0xd0a

00002b60 <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    2b60:	00 d0 20    	mov.w     #0xd00, w0
    2b62:	80 c0 eb    	setm.b    w1
    2b64:	01 48 78    	mov.b     w1, [w0]

00002b66 <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    2b66:	10 d0 20    	mov.w     #0xd01, w0
    2b68:	80 c0 eb    	setm.b    w1
    2b6a:	01 48 78    	mov.b     w1, [w0]
    2b6c:	05 00 37    	bra       0x2b78 <.L167>

00002b6e <.L166>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    2b6e:	00 c4 b3    	mov.b     #0x40, w0
    2b70:	00 4f 78    	mov.b     w0, [w14]

00002b72 <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    2b72:	50 68 80    	mov.w     0xd0a, w0
    2b74:	00 04 b1    	sub.w     #0x40, w0
    2b76:	50 68 88    	mov.w     w0, 0xd0a

00002b78 <.L167>:
    }
    for (n = 0; n<packet_length; n++) {
    2b78:	00 40 eb    	clr.b     w0
    2b7a:	10 47 98    	mov.b     w0, [w14+1]
    2b7c:	0c 00 37    	bra       0x2b96 <.L168>

00002b7e <.L169>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    2b7e:	31 60 80    	mov.w     0xc06, w1
    2b80:	1e 40 90    	mov.b     [w14+1], w0
    2b82:	00 80 fb    	ze        w0, w0
    2b84:	80 80 40    	add.w     w1, w0, w1
    2b86:	40 68 80    	mov.w     0xd08, w0
    2b88:	10 41 78    	mov.b     [w0], w2
    2b8a:	82 48 78    	mov.b     w2, [w1]
    2b8c:	00 00 e8    	inc.w     w0, w0
    2b8e:	40 68 88    	mov.w     w0, 0xd08

00002b90 <.LSM315>:
    2b90:	1e 40 90    	mov.b     [w14+1], w0
    2b92:	00 40 e8    	inc.b     w0, w0
    2b94:	10 47 98    	mov.b     w0, [w14+1]

00002b96 <.L168>:
    2b96:	1e 40 90    	mov.b     [w14+1], w0
    2b98:	9e 4f 50    	sub.b     w0, [w14], [w15]
    2b9a:	f1 ff 39    	bra       NC, 0x2b7e <.L169>

00002b9c <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    2b9c:	40 c0 20    	mov.w     #0xc04, w0
    2b9e:	1e 48 78    	mov.b     [w14], [w0]

00002ba0 <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    2ba0:	50 c0 20    	mov.w     #0xc05, w0
    2ba2:	10 40 78    	mov.b     [w0], w0
    2ba4:	00 c0 ea    	com.b     w0, w0
    2ba6:	02 c4 b3    	mov.b     #0x40, w2
    2ba8:	82 40 60    	and.b     w0, w2, w1
    2baa:	80 c8 b3    	mov.b     #0x88, w0
    2bac:	00 c0 70    	ior.b     w1, w0, w0
    2bae:	80 40 78    	mov.b     w0, w1
    2bb0:	50 c0 20    	mov.w     #0xc05, w0
    2bb2:	01 48 78    	mov.b     w1, [w0]

00002bb4 <.LSM318>:
}
    2bb4:	00 80 fa    	ulnk      
    2bb6:	00 00 06    	return    

00002bb8 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    2bb8:	02 00 fa    	lnk       #0x2
    2bba:	00 0f 78    	mov.w     w0, [w14]

00002bbc <.LSM1>:
    timer_lower(self);
    2bbc:	1e 00 78    	mov.w     [w14], w0
    2bbe:	01 02 07    	rcall     0x2fc2 <_timer_lower>

00002bc0 <.LSM2>:
    if (self->every) {
    2bc0:	1e 00 78    	mov.w     [w14], w0
    2bc2:	10 08 90    	mov.w     [w0+18], w0
    2bc4:	00 00 e0    	cp0.w     w0
    2bc6:	05 00 32    	bra       Z, 0x2bd2 <.L2>

00002bc8 <.LSM3>:
        self->every(self);
    2bc8:	1e 00 78    	mov.w     [w14], w0
    2bca:	90 08 90    	mov.w     [w0+18], w1
    2bcc:	1e 00 78    	mov.w     [w14], w0
    2bce:	01 00 01    	call      w1
    2bd0:	1a 00 37    	bra       0x2c06 <.L1>

00002bd2 <.L2>:
    } else if (self->after) {
    2bd2:	1e 00 78    	mov.w     [w14], w0
    2bd4:	20 08 90    	mov.w     [w0+20], w0
    2bd6:	00 00 e0    	cp0.w     w0
    2bd8:	14 00 32    	bra       Z, 0x2c02 <.L4>

00002bda <.LSM5>:
        if (self->aftercount) {
    2bda:	1e 00 78    	mov.w     [w14], w0
    2bdc:	00 08 90    	mov.w     [w0+16], w0
    2bde:	00 00 e0    	cp0.w     w0
    2be0:	0a 00 32    	bra       Z, 0x2bf6 <.L5>

00002be2 <.LSM6>:
            self->after(self);
    2be2:	1e 00 78    	mov.w     [w14], w0
    2be4:	a0 08 90    	mov.w     [w0+20], w1
    2be6:	1e 00 78    	mov.w     [w14], w0
    2be8:	01 00 01    	call      w1

00002bea <.LSM7>:
            self->aftercount--;
    2bea:	1e 00 78    	mov.w     [w14], w0
    2bec:	00 08 90    	mov.w     [w0+16], w0
    2bee:	80 00 e9    	dec.w     w0, w1
    2bf0:	1e 00 78    	mov.w     [w14], w0
    2bf2:	01 08 98    	mov.w     w1, [w0+16]
    2bf4:	08 00 37    	bra       0x2c06 <.L1>

00002bf6 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2bf6:	1e 00 78    	mov.w     [w14], w0
    2bf8:	0c 02 07    	rcall     0x3012 <_timer_disableInterrupt>

00002bfa <.LSM9>:
            self->after = NULL;
    2bfa:	1e 00 78    	mov.w     [w14], w0
    2bfc:	80 00 eb    	clr.w     w1
    2bfe:	21 08 98    	mov.w     w1, [w0+20]
    2c00:	02 00 37    	bra       0x2c06 <.L1>

00002c02 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    2c02:	1e 00 78    	mov.w     [w14], w0
    2c04:	06 02 07    	rcall     0x3012 <_timer_disableInterrupt>

00002c06 <.L1>:
    }
}
    2c06:	00 80 fa    	ulnk      
    2c08:	00 00 06    	return    

00002c0a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    2c0a:	36 00 f8    	push      0x36
    2c0c:	80 9f be    	mov.d     w0, [w15++]
    2c0e:	82 9f be    	mov.d     w2, [w15++]
    2c10:	84 9f be    	mov.d     w4, [w15++]
    2c12:	86 9f be    	mov.d     w6, [w15++]
    2c14:	32 00 f8    	push      0x32
    2c16:	34 00 f8    	push      0x34
    2c18:	10 00 20    	mov.w     #0x1, w0
    2c1a:	a0 01 88    	mov.w     w0, 0x34
    2c1c:	00 20 20    	mov.w     #0x200, w0
    2c1e:	90 01 88    	mov.w     w0, 0x32
    2c20:	00 00 fa    	lnk       #0x0

00002c22 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    2c22:	c0 d0 20    	mov.w     #0xd0c, w0
    2c24:	c9 ff 07    	rcall     0x2bb8 <_timer_serviceInterrupt>

00002c26 <.LSM14>:
}
    2c26:	00 80 fa    	ulnk      
    2c28:	34 00 f9    	pop       0x34
    2c2a:	32 00 f9    	pop       0x32
    2c2c:	4f 03 be    	mov.d     [--w15], w6
    2c2e:	4f 02 be    	mov.d     [--w15], w4
    2c30:	4f 01 be    	mov.d     [--w15], w2
    2c32:	4f 00 be    	mov.d     [--w15], w0
    2c34:	36 00 f9    	pop       0x36
    2c36:	00 40 06    	retfie    

00002c38 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2c38:	36 00 f8    	push      0x36
    2c3a:	80 9f be    	mov.d     w0, [w15++]
    2c3c:	82 9f be    	mov.d     w2, [w15++]
    2c3e:	84 9f be    	mov.d     w4, [w15++]
    2c40:	86 9f be    	mov.d     w6, [w15++]
    2c42:	32 00 f8    	push      0x32
    2c44:	34 00 f8    	push      0x34
    2c46:	10 00 20    	mov.w     #0x1, w0
    2c48:	a0 01 88    	mov.w     w0, 0x34
    2c4a:	00 20 20    	mov.w     #0x200, w0
    2c4c:	90 01 88    	mov.w     w0, 0x32
    2c4e:	00 00 fa    	lnk       #0x0

00002c50 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    2c50:	20 d2 20    	mov.w     #0xd22, w0
    2c52:	b2 ff 07    	rcall     0x2bb8 <_timer_serviceInterrupt>

00002c54 <.LSM17>:
}
    2c54:	00 80 fa    	ulnk      
    2c56:	34 00 f9    	pop       0x34
    2c58:	32 00 f9    	pop       0x32
    2c5a:	4f 03 be    	mov.d     [--w15], w6
    2c5c:	4f 02 be    	mov.d     [--w15], w4
    2c5e:	4f 01 be    	mov.d     [--w15], w2
    2c60:	4f 00 be    	mov.d     [--w15], w0
    2c62:	36 00 f9    	pop       0x36
    2c64:	00 40 06    	retfie    

00002c66 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    2c66:	36 00 f8    	push      0x36
    2c68:	80 9f be    	mov.d     w0, [w15++]
    2c6a:	82 9f be    	mov.d     w2, [w15++]
    2c6c:	84 9f be    	mov.d     w4, [w15++]
    2c6e:	86 9f be    	mov.d     w6, [w15++]
    2c70:	32 00 f8    	push      0x32
    2c72:	34 00 f8    	push      0x34
    2c74:	10 00 20    	mov.w     #0x1, w0
    2c76:	a0 01 88    	mov.w     w0, 0x34
    2c78:	00 20 20    	mov.w     #0x200, w0
    2c7a:	90 01 88    	mov.w     w0, 0x32
    2c7c:	00 00 fa    	lnk       #0x0

00002c7e <.LSM19>:
    timer_serviceInterrupt(&timer3);
    2c7e:	80 d3 20    	mov.w     #0xd38, w0
    2c80:	9b ff 07    	rcall     0x2bb8 <_timer_serviceInterrupt>

00002c82 <.LSM20>:
}
    2c82:	00 80 fa    	ulnk      
    2c84:	34 00 f9    	pop       0x34
    2c86:	32 00 f9    	pop       0x32
    2c88:	4f 03 be    	mov.d     [--w15], w6
    2c8a:	4f 02 be    	mov.d     [--w15], w4
    2c8c:	4f 01 be    	mov.d     [--w15], w2
    2c8e:	4f 00 be    	mov.d     [--w15], w0
    2c90:	36 00 f9    	pop       0x36
    2c92:	00 40 06    	retfie    

00002c94 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    2c94:	36 00 f8    	push      0x36
    2c96:	80 9f be    	mov.d     w0, [w15++]
    2c98:	82 9f be    	mov.d     w2, [w15++]
    2c9a:	84 9f be    	mov.d     w4, [w15++]
    2c9c:	86 9f be    	mov.d     w6, [w15++]
    2c9e:	32 00 f8    	push      0x32
    2ca0:	34 00 f8    	push      0x34
    2ca2:	10 00 20    	mov.w     #0x1, w0
    2ca4:	a0 01 88    	mov.w     w0, 0x34
    2ca6:	00 20 20    	mov.w     #0x200, w0
    2ca8:	90 01 88    	mov.w     w0, 0x32
    2caa:	00 00 fa    	lnk       #0x0

00002cac <.LSM22>:
    timer_serviceInterrupt(&timer4);
    2cac:	e0 d4 20    	mov.w     #0xd4e, w0
    2cae:	84 ff 07    	rcall     0x2bb8 <_timer_serviceInterrupt>

00002cb0 <.LSM23>:
}
    2cb0:	00 80 fa    	ulnk      
    2cb2:	34 00 f9    	pop       0x34
    2cb4:	32 00 f9    	pop       0x32
    2cb6:	4f 03 be    	mov.d     [--w15], w6
    2cb8:	4f 02 be    	mov.d     [--w15], w4
    2cba:	4f 01 be    	mov.d     [--w15], w2
    2cbc:	4f 00 be    	mov.d     [--w15], w0
    2cbe:	36 00 f9    	pop       0x36
    2cc0:	00 40 06    	retfie    

00002cc2 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    2cc2:	36 00 f8    	push      0x36
    2cc4:	80 9f be    	mov.d     w0, [w15++]
    2cc6:	82 9f be    	mov.d     w2, [w15++]
    2cc8:	84 9f be    	mov.d     w4, [w15++]
    2cca:	86 9f be    	mov.d     w6, [w15++]
    2ccc:	32 00 f8    	push      0x32
    2cce:	34 00 f8    	push      0x34
    2cd0:	10 00 20    	mov.w     #0x1, w0
    2cd2:	a0 01 88    	mov.w     w0, 0x34
    2cd4:	00 20 20    	mov.w     #0x200, w0
    2cd6:	90 01 88    	mov.w     w0, 0x32
    2cd8:	00 00 fa    	lnk       #0x0

00002cda <.LSM25>:
    timer_serviceInterrupt(&timer5);
    2cda:	40 d6 20    	mov.w     #0xd64, w0
    2cdc:	6d ff 07    	rcall     0x2bb8 <_timer_serviceInterrupt>

00002cde <.LSM26>:
}
    2cde:	00 80 fa    	ulnk      
    2ce0:	34 00 f9    	pop       0x34
    2ce2:	32 00 f9    	pop       0x32
    2ce4:	4f 03 be    	mov.d     [--w15], w6
    2ce6:	4f 02 be    	mov.d     [--w15], w4
    2ce8:	4f 01 be    	mov.d     [--w15], w2
    2cea:	4f 00 be    	mov.d     [--w15], w0
    2cec:	36 00 f9    	pop       0x36
    2cee:	00 40 06    	retfie    

00002cf0 <_init_timer>:

void init_timer(void) {
    2cf0:	00 00 fa    	lnk       #0x0

00002cf2 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    2cf2:	b0 00 20    	mov.w     #0xb, w0
    2cf4:	80 1f 78    	mov.w     w0, [w15++]
    2cf6:	47 00 20    	mov.w     #0x4, w7
    2cf8:	36 c0 b3    	mov.b     #0x3, w6
    2cfa:	45 09 20    	mov.w     #0x94, w5
    2cfc:	44 08 20    	mov.w     #0x84, w4
    2cfe:	03 10 20    	mov.w     #0x100, w3
    2d00:	22 10 20    	mov.w     #0x102, w2
    2d02:	41 10 20    	mov.w     #0x104, w1
    2d04:	c0 d0 20    	mov.w     #0xd0c, w0
    2d06:	33 00 07    	rcall     0x2d6e <_timer_init>
    2d08:	8f 87 e9    	dec2.w    w15, w15

00002d0a <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    2d0a:	c0 00 20    	mov.w     #0xc, w0
    2d0c:	80 1f 78    	mov.w     w0, [w15++]
    2d0e:	80 03 eb    	clr.w     w7
    2d10:	76 c0 b3    	mov.b     #0x7, w6
    2d12:	45 09 20    	mov.w     #0x94, w5
    2d14:	44 08 20    	mov.w     #0x84, w4
    2d16:	63 10 20    	mov.w     #0x106, w3
    2d18:	c2 10 20    	mov.w     #0x10c, w2
    2d1a:	01 11 20    	mov.w     #0x110, w1
    2d1c:	20 d2 20    	mov.w     #0xd22, w0
    2d1e:	27 00 07    	rcall     0x2d6e <_timer_init>
    2d20:	8f 87 e9    	dec2.w    w15, w15

00002d22 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    2d22:	d0 00 20    	mov.w     #0xd, w0
    2d24:	80 1f 78    	mov.w     w0, [w15++]
    2d26:	17 00 20    	mov.w     #0x1, w7
    2d28:	86 c0 b3    	mov.b     #0x8, w6
    2d2a:	45 09 20    	mov.w     #0x94, w5
    2d2c:	44 08 20    	mov.w     #0x84, w4
    2d2e:	a3 10 20    	mov.w     #0x10a, w3
    2d30:	e2 10 20    	mov.w     #0x10e, w2
    2d32:	21 11 20    	mov.w     #0x112, w1
    2d34:	80 d3 20    	mov.w     #0xd38, w0
    2d36:	1b 00 07    	rcall     0x2d6e <_timer_init>
    2d38:	8f 87 e9    	dec2.w    w15, w15

00002d3a <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    2d3a:	e0 00 20    	mov.w     #0xe, w0
    2d3c:	80 1f 78    	mov.w     w0, [w15++]
    2d3e:	27 00 20    	mov.w     #0x2, w7
    2d40:	b6 c0 b3    	mov.b     #0xb, w6
    2d42:	65 09 20    	mov.w     #0x96, w5
    2d44:	64 08 20    	mov.w     #0x86, w4
    2d46:	43 11 20    	mov.w     #0x114, w3
    2d48:	a2 11 20    	mov.w     #0x11a, w2
    2d4a:	e1 11 20    	mov.w     #0x11e, w1
    2d4c:	e0 d4 20    	mov.w     #0xd4e, w0
    2d4e:	0f 00 07    	rcall     0x2d6e <_timer_init>
    2d50:	8f 87 e9    	dec2.w    w15, w15

00002d52 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    2d52:	f0 00 20    	mov.w     #0xf, w0
    2d54:	80 1f 78    	mov.w     w0, [w15++]
    2d56:	37 00 20    	mov.w     #0x3, w7
    2d58:	c6 c0 b3    	mov.b     #0xc, w6
    2d5a:	65 09 20    	mov.w     #0x96, w5
    2d5c:	64 08 20    	mov.w     #0x86, w4
    2d5e:	83 11 20    	mov.w     #0x118, w3
    2d60:	c2 11 20    	mov.w     #0x11c, w2
    2d62:	01 12 20    	mov.w     #0x120, w1
    2d64:	40 d6 20    	mov.w     #0xd64, w0
    2d66:	03 00 07    	rcall     0x2d6e <_timer_init>
    2d68:	8f 87 e9    	dec2.w    w15, w15

00002d6a <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    2d6a:	00 80 fa    	ulnk      
    2d6c:	00 00 06    	return    

00002d6e <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    2d6e:	10 00 fa    	lnk       #0x10
    2d70:	00 0f 78    	mov.w     w0, [w14]
    2d72:	11 07 98    	mov.w     w1, [w14+2]
    2d74:	22 07 98    	mov.w     w2, [w14+4]
    2d76:	33 07 98    	mov.w     w3, [w14+6]
    2d78:	44 07 98    	mov.w     w4, [w14+8]
    2d7a:	55 07 98    	mov.w     w5, [w14+10]
    2d7c:	46 4f 98    	mov.b     w6, [w14+12]
    2d7e:	77 07 98    	mov.w     w7, [w14+14]

00002d80 <.LSM35>:
    self->TxCON = TxCON;
    2d80:	1e 00 78    	mov.w     [w14], w0
    2d82:	9e 00 90    	mov.w     [w14+2], w1
    2d84:	01 08 78    	mov.w     w1, [w0]

00002d86 <.LSM36>:
    self->PRx = PRx;
    2d86:	1e 00 78    	mov.w     [w14], w0
    2d88:	ae 00 90    	mov.w     [w14+4], w1
    2d8a:	11 00 98    	mov.w     w1, [w0+2]

00002d8c <.LSM37>:
    self->TMRx = TMRx;
    2d8c:	1e 00 78    	mov.w     [w14], w0
    2d8e:	be 00 90    	mov.w     [w14+6], w1
    2d90:	21 00 98    	mov.w     w1, [w0+4]

00002d92 <.LSM38>:
    self->IFSy = IFSy;
    2d92:	1e 00 78    	mov.w     [w14], w0
    2d94:	ce 00 90    	mov.w     [w14+8], w1
    2d96:	31 00 98    	mov.w     w1, [w0+6]

00002d98 <.LSM39>:
    self->IECy = IECy;
    2d98:	1e 00 78    	mov.w     [w14], w0
    2d9a:	de 00 90    	mov.w     [w14+10], w1
    2d9c:	41 00 98    	mov.w     w1, [w0+8]

00002d9e <.LSM40>:
    self->flagbit = flagbit;
    2d9e:	1e 00 78    	mov.w     [w14], w0
    2da0:	ce 48 90    	mov.b     [w14+12], w1
    2da2:	21 48 98    	mov.b     w1, [w0+10]

00002da4 <.LSM41>:
    self->octselnum = octselnum;
    2da4:	1e 00 78    	mov.w     [w14], w0
    2da6:	fe 00 90    	mov.w     [w14+14], w1
    2da8:	61 00 98    	mov.w     w1, [w0+12]

00002daa <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    2daa:	1e 00 78    	mov.w     [w14], w0
    2dac:	ce b8 97    	mov.w     [w14-8], w1
    2dae:	71 00 98    	mov.w     w1, [w0+14]

00002db0 <.LSM43>:
    self->aftercount = 0;
    2db0:	1e 00 78    	mov.w     [w14], w0
    2db2:	80 00 eb    	clr.w     w1
    2db4:	01 08 98    	mov.w     w1, [w0+16]

00002db6 <.LSM44>:
    self->every = NULL;
    2db6:	1e 00 78    	mov.w     [w14], w0
    2db8:	80 00 eb    	clr.w     w1
    2dba:	11 08 98    	mov.w     w1, [w0+18]

00002dbc <.LSM45>:
    self->after = NULL;
    2dbc:	1e 00 78    	mov.w     [w14], w0
    2dbe:	80 00 eb    	clr.w     w1
    2dc0:	21 08 98    	mov.w     w1, [w0+20]

00002dc2 <.LSM46>:
}
    2dc2:	00 80 fa    	ulnk      
    2dc4:	00 00 06    	return    

00002dc6 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    2dc6:	06 00 fa    	lnk       #0x6
    2dc8:	88 1f 78    	mov.w     w8, [w15++]
    2dca:	00 0f 78    	mov.w     w0, [w14]
    2dcc:	12 07 98    	mov.w     w2, [w14+2]
    2dce:	23 07 98    	mov.w     w3, [w14+4]

00002dd0 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    2dd0:	18 c0 b3    	mov.b     #0x1, w8
    2dd2:	d2 7b 23    	mov.w     #0x37bd, w2
    2dd4:	63 f8 23    	mov.w     #0x3f86, w3
    2dd6:	1e 00 90    	mov.w     [w14+2], w0
    2dd8:	ae 00 90    	mov.w     [w14+4], w1
    2dda:	bf f2 07    	rcall     0x135a <___gesf2>
    2ddc:	00 00 e0    	cp0.w     w0
    2dde:	01 00 3c    	bra       GT, 0x2de2 <.L14>
    2de0:	00 44 eb    	clr.b     w8

00002de2 <.L14>:
    2de2:	08 04 e0    	cp0.b     w8
    2de4:	69 00 3a    	bra       NZ, 0x2eb8 <.L23>

00002de6 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    2de6:	18 c0 b3    	mov.b     #0x1, w8
    2de8:	d2 7b 23    	mov.w     #0x37bd, w2
    2dea:	63 e8 23    	mov.w     #0x3e86, w3
    2dec:	1e 00 90    	mov.w     [w14+2], w0
    2dee:	ae 00 90    	mov.w     [w14+4], w1
    2df0:	b4 f2 07    	rcall     0x135a <___gesf2>
    2df2:	00 00 e0    	cp0.w     w0
    2df4:	01 00 3c    	bra       GT, 0x2df8 <.L17>
    2df6:	00 44 eb    	clr.b     w8

00002df8 <.L17>:
    2df8:	08 04 e0    	cp0.b     w8
    2dfa:	12 00 32    	bra       Z, 0x2e20 <.L18>

00002dfc <.LSM50>:
        timer_stop(self);
    2dfc:	1e 00 78    	mov.w     [w14], w0
    2dfe:	c4 00 07    	rcall     0x2f88 <_timer_stop>

00002e00 <.LSM51>:
        poke(self->TxCON, 0x0030);
    2e00:	1e 00 78    	mov.w     [w14], w0
    2e02:	10 00 78    	mov.w     [w0], w0
    2e04:	01 03 20    	mov.w     #0x30, w1
    2e06:	01 08 78    	mov.w     w1, [w0]

00002e08 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2e08:	1e 00 78    	mov.w     [w14], w0
    2e0a:	10 04 90    	mov.w     [w0+2], w8
    2e0c:	02 40 22    	mov.w     #0x2400, w2
    2e0e:	43 77 24    	mov.w     #0x4774, w3
    2e10:	1e 00 90    	mov.w     [w14+2], w0
    2e12:	ae 00 90    	mov.w     [w14+4], w1
    2e14:	16 f3 07    	rcall     0x1442 <___mulsf3>
    2e16:	a3 f2 07    	rcall     0x135e <___fixunssfsi>
    2e18:	00 00 78    	mov.w     w0, w0
    2e1a:	00 00 e9    	dec.w     w0, w0
    2e1c:	00 0c 78    	mov.w     w0, [w8]
    2e1e:	4d 00 37    	bra       0x2eba <.L13>

00002e20 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    2e20:	18 c0 b3    	mov.b     #0x1, w8
    2e22:	d2 7b 23    	mov.w     #0x37bd, w2
    2e24:	63 d0 23    	mov.w     #0x3d06, w3
    2e26:	1e 00 90    	mov.w     [w14+2], w0
    2e28:	ae 00 90    	mov.w     [w14+4], w1
    2e2a:	97 f2 07    	rcall     0x135a <___gesf2>
    2e2c:	00 00 e0    	cp0.w     w0
    2e2e:	01 00 3c    	bra       GT, 0x2e32 <.L19>
    2e30:	00 44 eb    	clr.b     w8

00002e32 <.L19>:
    2e32:	08 04 e0    	cp0.b     w8
    2e34:	12 00 32    	bra       Z, 0x2e5a <.L20>

00002e36 <.LSM54>:
        timer_stop(self);
    2e36:	1e 00 78    	mov.w     [w14], w0
    2e38:	a7 00 07    	rcall     0x2f88 <_timer_stop>

00002e3a <.LSM55>:
        poke(self->TxCON, 0x0020);
    2e3a:	1e 00 78    	mov.w     [w14], w0
    2e3c:	10 00 78    	mov.w     [w0], w0
    2e3e:	01 02 20    	mov.w     #0x20, w1
    2e40:	01 08 78    	mov.w     w1, [w0]

00002e42 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    2e42:	1e 00 78    	mov.w     [w14], w0
    2e44:	10 04 90    	mov.w     [w0+2], w8
    2e46:	02 40 22    	mov.w     #0x2400, w2
    2e48:	43 87 24    	mov.w     #0x4874, w3
    2e4a:	1e 00 90    	mov.w     [w14+2], w0
    2e4c:	ae 00 90    	mov.w     [w14+4], w1
    2e4e:	f9 f2 07    	rcall     0x1442 <___mulsf3>
    2e50:	86 f2 07    	rcall     0x135e <___fixunssfsi>
    2e52:	00 00 78    	mov.w     w0, w0
    2e54:	00 00 e9    	dec.w     w0, w0
    2e56:	00 0c 78    	mov.w     w0, [w8]
    2e58:	30 00 37    	bra       0x2eba <.L13>

00002e5a <.L20>:
    } else if (period>(65536.*TCY)) {
    2e5a:	18 c0 b3    	mov.b     #0x1, w8
    2e5c:	d2 7b 23    	mov.w     #0x37bd, w2
    2e5e:	63 b8 23    	mov.w     #0x3b86, w3
    2e60:	1e 00 90    	mov.w     [w14+2], w0
    2e62:	ae 00 90    	mov.w     [w14+4], w1
    2e64:	7a f2 07    	rcall     0x135a <___gesf2>
    2e66:	00 00 e0    	cp0.w     w0
    2e68:	01 00 3c    	bra       GT, 0x2e6c <.L21>
    2e6a:	00 44 eb    	clr.b     w8

00002e6c <.L21>:
    2e6c:	08 04 e0    	cp0.b     w8
    2e6e:	12 00 32    	bra       Z, 0x2e94 <.L22>

00002e70 <.LSM58>:
        timer_stop(self);
    2e70:	1e 00 78    	mov.w     [w14], w0
    2e72:	8a 00 07    	rcall     0x2f88 <_timer_stop>

00002e74 <.LSM59>:
        poke(self->TxCON, 0x0010);
    2e74:	1e 00 78    	mov.w     [w14], w0
    2e76:	10 00 78    	mov.w     [w0], w0
    2e78:	01 01 20    	mov.w     #0x10, w1
    2e7a:	01 08 78    	mov.w     w1, [w0]

00002e7c <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    2e7c:	1e 00 78    	mov.w     [w14], w0
    2e7e:	10 04 90    	mov.w     [w0+2], w8
    2e80:	02 40 22    	mov.w     #0x2400, w2
    2e82:	43 9f 24    	mov.w     #0x49f4, w3
    2e84:	1e 00 90    	mov.w     [w14+2], w0
    2e86:	ae 00 90    	mov.w     [w14+4], w1
    2e88:	dc f2 07    	rcall     0x1442 <___mulsf3>
    2e8a:	69 f2 07    	rcall     0x135e <___fixunssfsi>
    2e8c:	00 00 78    	mov.w     w0, w0
    2e8e:	00 00 e9    	dec.w     w0, w0
    2e90:	00 0c 78    	mov.w     w0, [w8]
    2e92:	13 00 37    	bra       0x2eba <.L13>

00002e94 <.L22>:
    } else {
        timer_stop(self);
    2e94:	1e 00 78    	mov.w     [w14], w0
    2e96:	78 00 07    	rcall     0x2f88 <_timer_stop>

00002e98 <.LSM62>:
        poke(self->TxCON, 0x0000);
    2e98:	1e 00 78    	mov.w     [w14], w0
    2e9a:	10 00 78    	mov.w     [w0], w0
    2e9c:	80 00 eb    	clr.w     w1
    2e9e:	01 08 78    	mov.w     w1, [w0]

00002ea0 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    2ea0:	1e 00 78    	mov.w     [w14], w0
    2ea2:	10 04 90    	mov.w     [w0+2], w8
    2ea4:	02 40 22    	mov.w     #0x2400, w2
    2ea6:	43 b7 24    	mov.w     #0x4b74, w3
    2ea8:	1e 00 90    	mov.w     [w14+2], w0
    2eaa:	ae 00 90    	mov.w     [w14+4], w1
    2eac:	ca f2 07    	rcall     0x1442 <___mulsf3>
    2eae:	57 f2 07    	rcall     0x135e <___fixunssfsi>
    2eb0:	00 00 78    	mov.w     w0, w0
    2eb2:	00 00 e9    	dec.w     w0, w0
    2eb4:	00 0c 78    	mov.w     w0, [w8]
    2eb6:	01 00 37    	bra       0x2eba <.L13>

00002eb8 <.L23>:
    2eb8:	00 00 00    	nop       

00002eba <.L13>:
    }
}
    2eba:	4f 04 78    	mov.w     [--w15], w8
    2ebc:	00 80 fa    	ulnk      
    2ebe:	00 00 06    	return    

00002ec0 <_timer_period>:

float timer_period(_TIMER *self) {
    2ec0:	04 00 fa    	lnk       #0x4
    2ec2:	88 9f be    	mov.d     w8, [w15++]
    2ec4:	10 07 98    	mov.w     w0, [w14+2]

00002ec6 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2ec6:	1e 00 90    	mov.w     [w14+2], w0
    2ec8:	10 00 78    	mov.w     [w0], w0
    2eca:	90 00 78    	mov.w     [w0], w1
    2ecc:	00 03 20    	mov.w     #0x30, w0
    2ece:	00 80 60    	and.w     w1, w0, w0
    2ed0:	44 00 de    	lsr.w     w0, #0x4, w0
    2ed2:	00 0f 78    	mov.w     w0, [w14]

00002ed4 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2ed4:	1e 00 78    	mov.w     [w14], w0
    2ed6:	c2 00 dd    	sl.w      w0, #0x2, w1
    2ed8:	a0 be 20    	mov.w     #0xbea, w0
    2eda:	00 80 40    	add.w     w1, w0, w0
    2edc:	10 04 be    	mov.d     [w0], w8
    2ede:	1e 00 90    	mov.w     [w14+2], w0
    2ee0:	10 00 90    	mov.w     [w0+2], w0
    2ee2:	10 00 78    	mov.w     [w0], w0
    2ee4:	80 00 eb    	clr.w     w1
    2ee6:	56 f2 07    	rcall     0x1394 <___floatunsisf>
    2ee8:	02 00 20    	mov.w     #0x0, w2
    2eea:	03 f8 23    	mov.w     #0x3f80, w3
    2eec:	95 f1 07    	rcall     0x1218 <___addsf3>
    2eee:	00 01 be    	mov.d     w0, w2
    2ef0:	08 00 be    	mov.d     w8, w0
    2ef2:	a7 f2 07    	rcall     0x1442 <___mulsf3>

00002ef4 <.LSM69>:
}
    2ef4:	4f 04 be    	mov.d     [--w15], w8
    2ef6:	00 80 fa    	ulnk      
    2ef8:	00 00 06    	return    

00002efa <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    2efa:	06 00 fa    	lnk       #0x6
    2efc:	00 0f 78    	mov.w     w0, [w14]
    2efe:	12 07 98    	mov.w     w2, [w14+2]
    2f00:	23 07 98    	mov.w     w3, [w14+4]

00002f02 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    2f02:	1e 01 90    	mov.w     [w14+2], w2
    2f04:	ae 01 90    	mov.w     [w14+4], w3
    2f06:	00 00 20    	mov.w     #0x0, w0
    2f08:	01 f8 23    	mov.w     #0x3f80, w1
    2f0a:	e3 f1 07    	rcall     0x12d2 <___divsf3>
    2f0c:	00 01 be    	mov.d     w0, w2
    2f0e:	1e 00 78    	mov.w     [w14], w0
    2f10:	5a ff 07    	rcall     0x2dc6 <_timer_setPeriod>

00002f12 <.LSM72>:
}
    2f12:	00 80 fa    	ulnk      
    2f14:	00 00 06    	return    

00002f16 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2f16:	02 00 fa    	lnk       #0x2
    2f18:	00 0f 78    	mov.w     w0, [w14]

00002f1a <.LSM74>:
    return 1./timer_period(self);
    2f1a:	1e 00 78    	mov.w     [w14], w0
    2f1c:	d1 ff 07    	rcall     0x2ec0 <_timer_period>
    2f1e:	00 01 be    	mov.d     w0, w2
    2f20:	00 00 20    	mov.w     #0x0, w0
    2f22:	01 f8 23    	mov.w     #0x3f80, w1
    2f24:	d6 f1 07    	rcall     0x12d2 <___divsf3>

00002f26 <.LSM75>:
}
    2f26:	00 80 fa    	ulnk      
    2f28:	00 00 06    	return    

00002f2a <_timer_time>:

float timer_time(_TIMER *self) {
    2f2a:	04 00 fa    	lnk       #0x4
    2f2c:	88 9f be    	mov.d     w8, [w15++]
    2f2e:	10 07 98    	mov.w     w0, [w14+2]

00002f30 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2f30:	1e 00 90    	mov.w     [w14+2], w0
    2f32:	10 00 78    	mov.w     [w0], w0
    2f34:	90 00 78    	mov.w     [w0], w1
    2f36:	00 03 20    	mov.w     #0x30, w0
    2f38:	00 80 60    	and.w     w1, w0, w0
    2f3a:	44 00 de    	lsr.w     w0, #0x4, w0
    2f3c:	00 0f 78    	mov.w     w0, [w14]

00002f3e <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2f3e:	1e 00 78    	mov.w     [w14], w0
    2f40:	c2 00 dd    	sl.w      w0, #0x2, w1
    2f42:	a0 be 20    	mov.w     #0xbea, w0
    2f44:	00 80 40    	add.w     w1, w0, w0
    2f46:	10 04 be    	mov.d     [w0], w8
    2f48:	1e 00 90    	mov.w     [w14+2], w0
    2f4a:	10 00 90    	mov.w     [w0+2], w0
    2f4c:	10 00 78    	mov.w     [w0], w0
    2f4e:	80 00 eb    	clr.w     w1
    2f50:	21 f2 07    	rcall     0x1394 <___floatunsisf>
    2f52:	02 00 20    	mov.w     #0x0, w2
    2f54:	03 f8 23    	mov.w     #0x3f80, w3
    2f56:	60 f1 07    	rcall     0x1218 <___addsf3>
    2f58:	00 01 be    	mov.d     w0, w2
    2f5a:	08 00 be    	mov.d     w8, w0
    2f5c:	72 f2 07    	rcall     0x1442 <___mulsf3>

00002f5e <.LSM79>:
}
    2f5e:	4f 04 be    	mov.d     [--w15], w8
    2f60:	00 80 fa    	ulnk      
    2f62:	00 00 06    	return    

00002f64 <_timer_start>:

void timer_start(_TIMER *self) {
    2f64:	02 00 fa    	lnk       #0x2
    2f66:	00 0f 78    	mov.w     w0, [w14]

00002f68 <.LSM81>:
    timer_lower(self);
    2f68:	1e 00 78    	mov.w     [w14], w0
    2f6a:	2b 00 07    	rcall     0x2fc2 <_timer_lower>

00002f6c <.LSM82>:
    poke(self->TMRx, 0);
    2f6c:	1e 00 78    	mov.w     [w14], w0
    2f6e:	20 00 90    	mov.w     [w0+4], w0
    2f70:	80 00 eb    	clr.w     w1
    2f72:	01 08 78    	mov.w     w1, [w0]

00002f74 <.LSM83>:
    bitset(self->TxCON, 15);
    2f74:	1e 00 78    	mov.w     [w14], w0
    2f76:	10 00 78    	mov.w     [w0], w0
    2f78:	9e 00 78    	mov.w     [w14], w1
    2f7a:	91 00 78    	mov.w     [w1], w1
    2f7c:	11 01 78    	mov.w     [w1], w2
    2f7e:	01 00 28    	mov.w     #0x8000, w1
    2f80:	82 80 70    	ior.w     w1, w2, w1
    2f82:	01 08 78    	mov.w     w1, [w0]

00002f84 <.LSM84>:
}
    2f84:	00 80 fa    	ulnk      
    2f86:	00 00 06    	return    

00002f88 <_timer_stop>:

void timer_stop(_TIMER *self) {
    2f88:	02 00 fa    	lnk       #0x2
    2f8a:	00 0f 78    	mov.w     w0, [w14]

00002f8c <.LSM86>:
    bitclear(self->TxCON, 15);
    2f8c:	1e 00 78    	mov.w     [w14], w0
    2f8e:	10 00 78    	mov.w     [w0], w0
    2f90:	9e 00 78    	mov.w     [w14], w1
    2f92:	91 00 78    	mov.w     [w1], w1
    2f94:	11 01 78    	mov.w     [w1], w2
    2f96:	f1 ff 27    	mov.w     #0x7fff, w1
    2f98:	81 00 61    	and.w     w2, w1, w1
    2f9a:	01 08 78    	mov.w     w1, [w0]

00002f9c <.LSM87>:
}
    2f9c:	00 80 fa    	ulnk      
    2f9e:	00 00 06    	return    

00002fa0 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    2fa0:	02 00 fa    	lnk       #0x2
    2fa2:	00 0f 78    	mov.w     w0, [w14]

00002fa4 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    2fa4:	1e 00 78    	mov.w     [w14], w0
    2fa6:	30 00 90    	mov.w     [w0+6], w0
    2fa8:	90 00 78    	mov.w     [w0], w1
    2faa:	1e 00 78    	mov.w     [w14], w0
    2fac:	20 48 90    	mov.b     [w0+10], w0
    2fae:	00 80 fb    	ze        w0, w0
    2fb0:	12 00 20    	mov.w     #0x1, w2
    2fb2:	00 10 dd    	sl.w      w2, w0, w0
    2fb4:	00 80 60    	and.w     w1, w0, w0
    2fb6:	00 f0 a7    	btsc.w    w0, #0xf
    2fb8:	00 00 ea    	neg.w     w0, w0
    2fba:	00 00 ea    	neg.w     w0, w0
    2fbc:	4f 00 de    	lsr.w     w0, #0xf, w0

00002fbe <.LSM90>:
}
    2fbe:	00 80 fa    	ulnk      
    2fc0:	00 00 06    	return    

00002fc2 <_timer_lower>:

void timer_lower(_TIMER *self) {
    2fc2:	02 00 fa    	lnk       #0x2
    2fc4:	00 0f 78    	mov.w     w0, [w14]

00002fc6 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    2fc6:	1e 00 78    	mov.w     [w14], w0
    2fc8:	30 00 90    	mov.w     [w0+6], w0
    2fca:	9e 00 78    	mov.w     [w14], w1
    2fcc:	b1 00 90    	mov.w     [w1+6], w1
    2fce:	11 01 78    	mov.w     [w1], w2
    2fd0:	9e 00 78    	mov.w     [w14], w1
    2fd2:	a1 48 90    	mov.b     [w1+10], w1
    2fd4:	81 80 fb    	ze        w1, w1
    2fd6:	13 00 20    	mov.w     #0x1, w3
    2fd8:	81 18 dd    	sl.w      w3, w1, w1
    2fda:	81 80 ea    	com.w     w1, w1
    2fdc:	81 00 61    	and.w     w2, w1, w1
    2fde:	01 08 78    	mov.w     w1, [w0]

00002fe0 <.LSM93>:
}
    2fe0:	00 80 fa    	ulnk      
    2fe2:	00 00 06    	return    

00002fe4 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    2fe4:	02 00 fa    	lnk       #0x2
    2fe6:	00 0f 78    	mov.w     w0, [w14]

00002fe8 <.LSM95>:
    return peek(self->TMRx);
    2fe8:	1e 00 78    	mov.w     [w14], w0
    2fea:	20 00 90    	mov.w     [w0+4], w0
    2fec:	10 00 78    	mov.w     [w0], w0

00002fee <.LSM96>:
}
    2fee:	00 80 fa    	ulnk      
    2ff0:	00 00 06    	return    

00002ff2 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    2ff2:	02 00 fa    	lnk       #0x2
    2ff4:	00 0f 78    	mov.w     w0, [w14]

00002ff6 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    2ff6:	1e 00 78    	mov.w     [w14], w0
    2ff8:	40 00 90    	mov.w     [w0+8], w0
    2ffa:	9e 00 78    	mov.w     [w14], w1
    2ffc:	c1 00 90    	mov.w     [w1+8], w1
    2ffe:	11 01 78    	mov.w     [w1], w2
    3000:	9e 00 78    	mov.w     [w14], w1
    3002:	a1 48 90    	mov.b     [w1+10], w1
    3004:	81 80 fb    	ze        w1, w1
    3006:	13 00 20    	mov.w     #0x1, w3
    3008:	81 18 dd    	sl.w      w3, w1, w1
    300a:	82 80 70    	ior.w     w1, w2, w1
    300c:	01 08 78    	mov.w     w1, [w0]

0000300e <.LSM99>:
}
    300e:	00 80 fa    	ulnk      
    3010:	00 00 06    	return    

00003012 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3012:	02 00 fa    	lnk       #0x2
    3014:	00 0f 78    	mov.w     w0, [w14]

00003016 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    3016:	1e 00 78    	mov.w     [w14], w0
    3018:	40 00 90    	mov.w     [w0+8], w0
    301a:	9e 00 78    	mov.w     [w14], w1
    301c:	c1 00 90    	mov.w     [w1+8], w1
    301e:	11 01 78    	mov.w     [w1], w2
    3020:	9e 00 78    	mov.w     [w14], w1
    3022:	a1 48 90    	mov.b     [w1+10], w1
    3024:	81 80 fb    	ze        w1, w1
    3026:	13 00 20    	mov.w     #0x1, w3
    3028:	81 18 dd    	sl.w      w3, w1, w1
    302a:	81 80 ea    	com.w     w1, w1
    302c:	81 00 61    	and.w     w2, w1, w1
    302e:	01 08 78    	mov.w     w1, [w0]

00003030 <.LSM102>:
}
    3030:	00 80 fa    	ulnk      
    3032:	00 00 06    	return    

00003034 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3034:	08 00 fa    	lnk       #0x8
    3036:	00 0f 78    	mov.w     w0, [w14]
    3038:	12 07 98    	mov.w     w2, [w14+2]
    303a:	23 07 98    	mov.w     w3, [w14+4]
    303c:	31 07 98    	mov.w     w1, [w14+6]

0000303e <.LSM104>:
    timer_disableInterrupt(self);
    303e:	1e 00 78    	mov.w     [w14], w0
    3040:	e8 ff 07    	rcall     0x3012 <_timer_disableInterrupt>

00003042 <.LSM105>:
    timer_setPeriod(self, interval);
    3042:	1e 01 90    	mov.w     [w14+2], w2
    3044:	ae 01 90    	mov.w     [w14+4], w3
    3046:	1e 00 78    	mov.w     [w14], w0
    3048:	be fe 07    	rcall     0x2dc6 <_timer_setPeriod>

0000304a <.LSM106>:
    self->aftercount = 0;
    304a:	1e 00 78    	mov.w     [w14], w0
    304c:	80 00 eb    	clr.w     w1
    304e:	01 08 98    	mov.w     w1, [w0+16]

00003050 <.LSM107>:
    self->every = callback;
    3050:	1e 00 78    	mov.w     [w14], w0
    3052:	be 00 90    	mov.w     [w14+6], w1
    3054:	11 08 98    	mov.w     w1, [w0+18]

00003056 <.LSM108>:
    self->after = NULL;
    3056:	1e 00 78    	mov.w     [w14], w0
    3058:	80 00 eb    	clr.w     w1
    305a:	21 08 98    	mov.w     w1, [w0+20]

0000305c <.LSM109>:
    timer_enableInterrupt(self);
    305c:	1e 00 78    	mov.w     [w14], w0
    305e:	c9 ff 07    	rcall     0x2ff2 <_timer_enableInterrupt>

00003060 <.LSM110>:
    timer_start(self);
    3060:	1e 00 78    	mov.w     [w14], w0
    3062:	80 ff 07    	rcall     0x2f64 <_timer_start>

00003064 <.LSM111>:
}
    3064:	00 80 fa    	ulnk      
    3066:	00 00 06    	return    

00003068 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    3068:	0a 00 fa    	lnk       #0xa
    306a:	00 0f 78    	mov.w     w0, [w14]
    306c:	12 07 98    	mov.w     w2, [w14+2]
    306e:	23 07 98    	mov.w     w3, [w14+4]
    3070:	31 07 98    	mov.w     w1, [w14+6]
    3072:	44 07 98    	mov.w     w4, [w14+8]

00003074 <.LSM113>:
    timer_disableInterrupt(self);
    3074:	1e 00 78    	mov.w     [w14], w0
    3076:	cd ff 07    	rcall     0x3012 <_timer_disableInterrupt>

00003078 <.LSM114>:
    timer_setPeriod(self, delay);
    3078:	1e 01 90    	mov.w     [w14+2], w2
    307a:	ae 01 90    	mov.w     [w14+4], w3
    307c:	1e 00 78    	mov.w     [w14], w0
    307e:	a3 fe 07    	rcall     0x2dc6 <_timer_setPeriod>

00003080 <.LSM115>:
    self->aftercount = num_times;
    3080:	1e 00 78    	mov.w     [w14], w0
    3082:	be 00 90    	mov.w     [w14+6], w1
    3084:	01 08 98    	mov.w     w1, [w0+16]

00003086 <.LSM116>:
    self->every = NULL;
    3086:	1e 00 78    	mov.w     [w14], w0
    3088:	80 00 eb    	clr.w     w1
    308a:	11 08 98    	mov.w     w1, [w0+18]

0000308c <.LSM117>:
    self->after = callback;
    308c:	1e 00 78    	mov.w     [w14], w0
    308e:	ce 00 90    	mov.w     [w14+8], w1
    3090:	21 08 98    	mov.w     w1, [w0+20]

00003092 <.LSM118>:
    timer_enableInterrupt(self);
    3092:	1e 00 78    	mov.w     [w14], w0
    3094:	ae ff 07    	rcall     0x2ff2 <_timer_enableInterrupt>

00003096 <.LSM119>:
    timer_start(self);
    3096:	1e 00 78    	mov.w     [w14], w0
    3098:	65 ff 07    	rcall     0x2f64 <_timer_start>

0000309a <.LSM120>:
}
    309a:	00 80 fa    	ulnk      
    309c:	00 00 06    	return    

0000309e <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    309e:	02 00 fa    	lnk       #0x2
    30a0:	00 0f 78    	mov.w     w0, [w14]

000030a2 <.LSM122>:
    timer_disableInterrupt(self);
    30a2:	1e 00 78    	mov.w     [w14], w0
    30a4:	b6 ff 07    	rcall     0x3012 <_timer_disableInterrupt>

000030a6 <.LSM123>:
    timer_lower(self);
    30a6:	1e 00 78    	mov.w     [w14], w0
    30a8:	8c ff 07    	rcall     0x2fc2 <_timer_lower>

000030aa <.LSM124>:
    timer_stop(self);
    30aa:	1e 00 78    	mov.w     [w14], w0
    30ac:	6d ff 07    	rcall     0x2f88 <_timer_stop>

000030ae <.LSM125>:
    self->aftercount = 0;
    30ae:	1e 00 78    	mov.w     [w14], w0
    30b0:	80 00 eb    	clr.w     w1
    30b2:	01 08 98    	mov.w     w1, [w0+16]

000030b4 <.LSM126>:
    self->every = NULL;
    30b4:	1e 00 78    	mov.w     [w14], w0
    30b6:	80 00 eb    	clr.w     w1
    30b8:	11 08 98    	mov.w     w1, [w0+18]

000030ba <.LSM127>:
    self->after = NULL;
    30ba:	1e 00 78    	mov.w     [w14], w0
    30bc:	80 00 eb    	clr.w     w1
    30be:	21 08 98    	mov.w     w1, [w0+20]

000030c0 <.LSM128>:
}
    30c0:	00 80 fa    	ulnk      
    30c2:	00 00 06    	return    

000030c4 <_init_spi>:
#include "spi.h"

_SPI spi1, spi2, spi3;

void init_spi(void) {
    30c4:	00 00 fa    	lnk       #0x0

000030c6 <.LSM1>:
    spi_init(&spi1, (uint16_t *)&SPI1STAT, (uint16_t *)&SPI1CON1, 
    30c6:	80 00 20    	mov.w     #0x8, w0
    30c8:	80 1f 78    	mov.w     w0, [w15++]
    30ca:	77 00 20    	mov.w     #0x7, w7
    30cc:	00 43 eb    	clr.b     w6
    30ce:	85 6a 20    	mov.w     #0x6a8, w5
    30d0:	84 24 20    	mov.w     #0x248, w4
    30d2:	43 24 20    	mov.w     #0x244, w3
    30d4:	22 24 20    	mov.w     #0x242, w2
    30d6:	01 24 20    	mov.w     #0x240, w1
    30d8:	a0 d7 20    	mov.w     #0xd7a, w0
    30da:	1b 00 07    	rcall     0x3112 <_spi_init>
    30dc:	8f 87 e9    	dec2.w    w15, w15

000030de <.LSM2>:
             (uint16_t *)&SPI1CON2, (uint16_t *)&SPI1BUF, 
             (uint16_t *)&RPINR20, 0, 7, 8);
    spi_init(&spi2, (uint16_t *)&SPI2STAT, (uint16_t *)&SPI2CON1, 
    30de:	b0 00 20    	mov.w     #0xb, w0
    30e0:	80 1f 78    	mov.w     w0, [w15++]
    30e2:	a7 00 20    	mov.w     #0xa, w7
    30e4:	00 43 eb    	clr.b     w6
    30e6:	c5 6a 20    	mov.w     #0x6ac, w5
    30e8:	84 26 20    	mov.w     #0x268, w4
    30ea:	43 26 20    	mov.w     #0x264, w3
    30ec:	22 26 20    	mov.w     #0x262, w2
    30ee:	01 26 20    	mov.w     #0x260, w1
    30f0:	00 d9 20    	mov.w     #0xd90, w0
    30f2:	0f 00 07    	rcall     0x3112 <_spi_init>
    30f4:	8f 87 e9    	dec2.w    w15, w15

000030f6 <.LSM3>:
             (uint16_t *)&SPI2CON2, (uint16_t *)&SPI2BUF, 
             (uint16_t *)&RPINR22, 0, 10, 11);
    spi_init(&spi3, (uint16_t *)&SPI3STAT, (uint16_t *)&SPI3CON1, 
    30f6:	10 02 20    	mov.w     #0x21, w0
    30f8:	80 1f 78    	mov.w     w0, [w15++]
    30fa:	07 02 20    	mov.w     #0x20, w7
    30fc:	00 43 eb    	clr.b     w6
    30fe:	85 6b 20    	mov.w     #0x6b8, w5
    3100:	84 28 20    	mov.w     #0x288, w4
    3102:	43 28 20    	mov.w     #0x284, w3
    3104:	22 28 20    	mov.w     #0x282, w2
    3106:	01 28 20    	mov.w     #0x280, w1
    3108:	60 da 20    	mov.w     #0xda6, w0
    310a:	03 00 07    	rcall     0x3112 <_spi_init>
    310c:	8f 87 e9    	dec2.w    w15, w15

0000310e <.LSM4>:
             (uint16_t *)&SPI3CON2, (uint16_t *)&SPI3BUF, 
             (uint16_t *)&RPINR28, 0, 32, 33);
}
    310e:	00 80 fa    	ulnk      
    3110:	00 00 06    	return    

00003112 <_spi_init>:

void spi_init(_SPI *self, uint16_t *SPIxSTAT, uint16_t *SPIxCON1, 
              uint16_t *SPIxCON2, uint16_t *SPIxBUF, 
              uint16_t *MISOrpinr, uint8_t MISOrpshift, 
              int16_t MOSIrpnum, int16_t SCKrpnum) {
    3112:	10 00 fa    	lnk       #0x10
    3114:	00 0f 78    	mov.w     w0, [w14]
    3116:	11 07 98    	mov.w     w1, [w14+2]
    3118:	22 07 98    	mov.w     w2, [w14+4]
    311a:	33 07 98    	mov.w     w3, [w14+6]
    311c:	44 07 98    	mov.w     w4, [w14+8]
    311e:	55 07 98    	mov.w     w5, [w14+10]
    3120:	46 4f 98    	mov.b     w6, [w14+12]
    3122:	77 07 98    	mov.w     w7, [w14+14]

00003124 <.LSM6>:
    self->SPIxSTAT = SPIxSTAT;
    3124:	1e 00 78    	mov.w     [w14], w0
    3126:	9e 00 90    	mov.w     [w14+2], w1
    3128:	01 08 78    	mov.w     w1, [w0]

0000312a <.LSM7>:
    self->SPIxCON1 = SPIxCON1;
    312a:	1e 00 78    	mov.w     [w14], w0
    312c:	ae 00 90    	mov.w     [w14+4], w1
    312e:	11 00 98    	mov.w     w1, [w0+2]

00003130 <.LSM8>:
    self->SPIxCON2 = SPIxCON2;
    3130:	1e 00 78    	mov.w     [w14], w0
    3132:	be 00 90    	mov.w     [w14+6], w1
    3134:	21 00 98    	mov.w     w1, [w0+4]

00003136 <.LSM9>:
    self->SPIxBUF = SPIxBUF;
    3136:	1e 00 78    	mov.w     [w14], w0
    3138:	ce 00 90    	mov.w     [w14+8], w1
    313a:	31 00 98    	mov.w     w1, [w0+6]

0000313c <.LSM10>:
    self->MISOrpinr = MISOrpinr;
    313c:	1e 00 78    	mov.w     [w14], w0
    313e:	de 00 90    	mov.w     [w14+10], w1
    3140:	41 00 98    	mov.w     w1, [w0+8]

00003142 <.LSM11>:
    self->MISOrpshift = MISOrpshift;
    3142:	1e 00 78    	mov.w     [w14], w0
    3144:	ce 48 90    	mov.b     [w14+12], w1
    3146:	21 48 98    	mov.b     w1, [w0+10]

00003148 <.LSM12>:
    self->MOSIrpnum = MOSIrpnum;
    3148:	1e 00 78    	mov.w     [w14], w0
    314a:	fe 00 90    	mov.w     [w14+14], w1
    314c:	61 00 98    	mov.w     w1, [w0+12]

0000314e <.LSM13>:
    self->SCKrpnum = SCKrpnum;
    314e:	1e 00 78    	mov.w     [w14], w0
    3150:	ce b8 97    	mov.w     [w14-8], w1
    3152:	71 00 98    	mov.w     w1, [w0+14]

00003154 <.LSM14>:
    self->MISO = NULL;
    3154:	1e 00 78    	mov.w     [w14], w0
    3156:	80 00 eb    	clr.w     w1
    3158:	01 08 98    	mov.w     w1, [w0+16]

0000315a <.LSM15>:
    self->MOSI = NULL;
    315a:	1e 00 78    	mov.w     [w14], w0
    315c:	80 00 eb    	clr.w     w1
    315e:	11 08 98    	mov.w     w1, [w0+18]

00003160 <.LSM16>:
    self->SCK = NULL;
    3160:	1e 00 78    	mov.w     [w14], w0
    3162:	80 00 eb    	clr.w     w1
    3164:	21 08 98    	mov.w     w1, [w0+20]

00003166 <.LSM17>:
}
    3166:	00 80 fa    	ulnk      
    3168:	00 00 06    	return    

0000316a <_spi_open>:

void spi_open(_SPI *self, _PIN *MISO, _PIN *MOSI, _PIN *SCK, float freq, uint8_t mode) {
    316a:	1a 00 fa    	lnk       #0x1a
    316c:	88 1f 78    	mov.w     w8, [w15++]
    316e:	60 07 98    	mov.w     w0, [w14+12]
    3170:	71 07 98    	mov.w     w1, [w14+14]
    3172:	02 0f 98    	mov.w     w2, [w14+16]
    3174:	13 0f 98    	mov.w     w3, [w14+18]
    3176:	24 0f 98    	mov.w     w4, [w14+20]
    3178:	35 0f 98    	mov.w     w5, [w14+22]
    317a:	06 5f 98    	mov.b     w6, [w14+24]

0000317c <.LSM19>:
    uint16_t primary, secondary;
    uint16_t modebits[4] = { 0x0100, 0x0000, 0x0140, 0x0040 };
    317c:	00 10 20    	mov.w     #0x100, w0
    317e:	20 07 98    	mov.w     w0, [w14+4]
    3180:	00 00 eb    	clr.w     w0
    3182:	30 07 98    	mov.w     w0, [w14+6]
    3184:	00 14 20    	mov.w     #0x140, w0
    3186:	40 07 98    	mov.w     w0, [w14+8]
    3188:	00 04 20    	mov.w     #0x40, w0
    318a:	50 07 98    	mov.w     w0, [w14+10]

0000318c <.LSM20>:

    if ((MISO->rpnum==-1) || (MOSI->rpnum==-1) || (SCK->rpnum==-1))
    318c:	7e 00 90    	mov.w     [w14+14], w0
    318e:	60 00 90    	mov.w     [w0+12], w0
    3190:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3192:	37 01 32    	bra       Z, 0x3402 <.L21>
    3194:	0e 08 90    	mov.w     [w14+16], w0
    3196:	60 00 90    	mov.w     [w0+12], w0
    3198:	e1 0f 40    	add.w     w0, #0x1, [w15]
    319a:	35 01 32    	bra       Z, 0x3406 <.L22>
    319c:	1e 08 90    	mov.w     [w14+18], w0
    319e:	60 00 90    	mov.w     [w0+12], w0
    31a0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    31a2:	33 01 32    	bra       Z, 0x340a <.L23>

000031a4 <.LSM21>:
        return; // At least one of the specified pins is not an RP pin
    if ((MISO->owner==NULL) && (MOSI->owner==NULL) && (SCK->owner==NULL)) {
    31a4:	7e 00 90    	mov.w     [w14+14], w0
    31a6:	00 08 90    	mov.w     [w0+16], w0
    31a8:	00 00 e0    	cp0.w     w0
    31aa:	97 00 3a    	bra       NZ, 0x32da <.L7>
    31ac:	0e 08 90    	mov.w     [w14+16], w0
    31ae:	00 08 90    	mov.w     [w0+16], w0
    31b0:	00 00 e0    	cp0.w     w0
    31b2:	93 00 3a    	bra       NZ, 0x32da <.L7>
    31b4:	1e 08 90    	mov.w     [w14+18], w0
    31b6:	00 08 90    	mov.w     [w0+16], w0
    31b8:	00 00 e0    	cp0.w     w0
    31ba:	8f 00 3a    	bra       NZ, 0x32da <.L7>

000031bc <.LSM22>:
        // All of the specified pins are available and RP pins, so configure 
        // as specified
        pin_digitalIn(MISO);
    31bc:	7e 00 90    	mov.w     [w14+14], w0
    31be:	67 03 07    	rcall     0x388e <_pin_digitalIn>

000031c0 <.LSM23>:
        pin_digitalOut(MOSI);
    31c0:	0e 08 90    	mov.w     [w14+16], w0
    31c2:	8c 03 07    	rcall     0x38dc <_pin_digitalOut>

000031c4 <.LSM24>:
        pin_set(MOSI);
    31c4:	0e 08 90    	mov.w     [w14+16], w0
    31c6:	e7 03 07    	rcall     0x3996 <_pin_set>

000031c8 <.LSM25>:
        pin_digitalOut(SCK);
    31c8:	1e 08 90    	mov.w     [w14+18], w0
    31ca:	88 03 07    	rcall     0x38dc <_pin_digitalOut>

000031cc <.LSM26>:
        pin_clear(SCK);
    31cc:	1e 08 90    	mov.w     [w14+18], w0
    31ce:	f8 03 07    	rcall     0x39c0 <_pin_clear>

000031d0 <.LSM27>:
        self->MISO = MISO;
    31d0:	6e 00 90    	mov.w     [w14+12], w0
    31d2:	fe 00 90    	mov.w     [w14+14], w1
    31d4:	01 08 98    	mov.w     w1, [w0+16]

000031d6 <.LSM28>:
        MISO->owner = (void *)self;
    31d6:	7e 00 90    	mov.w     [w14+14], w0
    31d8:	ee 00 90    	mov.w     [w14+12], w1
    31da:	01 08 98    	mov.w     w1, [w0+16]

000031dc <.LSM29>:
        MISO->write = NULL;
    31dc:	7e 00 90    	mov.w     [w14+14], w0
    31de:	80 00 eb    	clr.w     w1
    31e0:	11 08 98    	mov.w     w1, [w0+18]

000031e2 <.LSM30>:
        MISO->read = NULL;
    31e2:	7e 00 90    	mov.w     [w14+14], w0
    31e4:	80 00 eb    	clr.w     w1
    31e6:	21 08 98    	mov.w     w1, [w0+20]

000031e8 <.LSM31>:
        self->MOSI = MOSI;
    31e8:	6e 00 90    	mov.w     [w14+12], w0
    31ea:	8e 08 90    	mov.w     [w14+16], w1
    31ec:	11 08 98    	mov.w     w1, [w0+18]

000031ee <.LSM32>:
        MOSI->owner = (void *)self;
    31ee:	0e 08 90    	mov.w     [w14+16], w0
    31f0:	ee 00 90    	mov.w     [w14+12], w1
    31f2:	01 08 98    	mov.w     w1, [w0+16]

000031f4 <.LSM33>:
        MOSI->write = NULL;
    31f4:	0e 08 90    	mov.w     [w14+16], w0
    31f6:	80 00 eb    	clr.w     w1
    31f8:	11 08 98    	mov.w     w1, [w0+18]

000031fa <.LSM34>:
        MOSI->read = NULL;
    31fa:	0e 08 90    	mov.w     [w14+16], w0
    31fc:	80 00 eb    	clr.w     w1
    31fe:	21 08 98    	mov.w     w1, [w0+20]

00003200 <.LSM35>:
        self->SCK = SCK;
    3200:	6e 00 90    	mov.w     [w14+12], w0
    3202:	9e 08 90    	mov.w     [w14+18], w1
    3204:	21 08 98    	mov.w     w1, [w0+20]

00003206 <.LSM36>:
        SCK->owner = (void *)self;
    3206:	1e 08 90    	mov.w     [w14+18], w0
    3208:	ee 00 90    	mov.w     [w14+12], w1
    320a:	01 08 98    	mov.w     w1, [w0+16]

0000320c <.LSM37>:
        SCK->write = NULL;
    320c:	1e 08 90    	mov.w     [w14+18], w0
    320e:	80 00 eb    	clr.w     w1
    3210:	11 08 98    	mov.w     w1, [w0+18]

00003212 <.LSM38>:
        SCK->read = NULL;
    3212:	1e 08 90    	mov.w     [w14+18], w0
    3214:	80 00 eb    	clr.w     w1
    3216:	21 08 98    	mov.w     w1, [w0+20]

00003218 <.LSM39>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3218:	11 3a 80    	mov.w     0x742, w1
    321a:	f0 0b 20    	mov.w     #0xbf, w0
    321c:	00 81 60    	and.w     w1, w0, w2
    321e:	60 04 20    	mov.w     #0x46, w0
    3220:	71 05 20    	mov.w     #0x57, w1
    3222:	23 74 20    	mov.w     #0x742, w3
    3224:	80 49 78    	mov.b     w0, [w3]
    3226:	81 49 78    	mov.b     w1, [w3]
    3228:	82 49 78    	mov.b     w2, [w3]

0000322a <.LSM40>:
        *(self->MISOrpinr) &= ~(0x3F<<(self->MISOrpshift));
    322a:	6e 00 90    	mov.w     [w14+12], w0
    322c:	40 00 90    	mov.w     [w0+8], w0
    322e:	ee 00 90    	mov.w     [w14+12], w1
    3230:	c1 00 90    	mov.w     [w1+8], w1
    3232:	11 01 78    	mov.w     [w1], w2
    3234:	ee 00 90    	mov.w     [w14+12], w1
    3236:	a1 48 90    	mov.b     [w1+10], w1
    3238:	81 80 fb    	ze        w1, w1
    323a:	f3 03 20    	mov.w     #0x3f, w3
    323c:	81 18 dd    	sl.w      w3, w1, w1
    323e:	81 80 ea    	com.w     w1, w1
    3240:	81 00 61    	and.w     w2, w1, w1
    3242:	01 08 78    	mov.w     w1, [w0]

00003244 <.LSM41>:
        *(self->MISOrpinr) |= (MISO->rpnum)<<(self->MISOrpshift);
    3244:	6e 00 90    	mov.w     [w14+12], w0
    3246:	40 00 90    	mov.w     [w0+8], w0
    3248:	ee 00 90    	mov.w     [w14+12], w1
    324a:	c1 00 90    	mov.w     [w1+8], w1
    324c:	11 01 78    	mov.w     [w1], w2
    324e:	fe 00 90    	mov.w     [w14+14], w1
    3250:	e1 01 90    	mov.w     [w1+12], w3
    3252:	ee 00 90    	mov.w     [w14+12], w1
    3254:	a1 48 90    	mov.b     [w1+10], w1
    3256:	81 80 fb    	ze        w1, w1
    3258:	81 18 dd    	sl.w      w3, w1, w1
    325a:	82 80 70    	ior.w     w1, w2, w1
    325c:	01 08 78    	mov.w     w1, [w0]

0000325e <.LSM42>:
        *(MOSI->rpor) &= ~(0x3F<<(MOSI->rpshift));
    325e:	0e 08 90    	mov.w     [w14+16], w0
    3260:	70 00 90    	mov.w     [w0+14], w0
    3262:	8e 08 90    	mov.w     [w14+16], w1
    3264:	f1 00 90    	mov.w     [w1+14], w1
    3266:	11 01 78    	mov.w     [w1], w2
    3268:	8e 08 90    	mov.w     [w14+16], w1
    326a:	a1 48 90    	mov.b     [w1+10], w1
    326c:	81 80 fb    	ze        w1, w1
    326e:	f3 03 20    	mov.w     #0x3f, w3
    3270:	81 18 dd    	sl.w      w3, w1, w1
    3272:	81 80 ea    	com.w     w1, w1
    3274:	81 00 61    	and.w     w2, w1, w1
    3276:	01 08 78    	mov.w     w1, [w0]

00003278 <.LSM43>:
        *(MOSI->rpor) |= (self->MOSIrpnum)<<(MOSI->rpshift);
    3278:	0e 08 90    	mov.w     [w14+16], w0
    327a:	70 00 90    	mov.w     [w0+14], w0
    327c:	8e 08 90    	mov.w     [w14+16], w1
    327e:	f1 00 90    	mov.w     [w1+14], w1
    3280:	11 01 78    	mov.w     [w1], w2
    3282:	ee 00 90    	mov.w     [w14+12], w1
    3284:	e1 01 90    	mov.w     [w1+12], w3
    3286:	8e 08 90    	mov.w     [w14+16], w1
    3288:	a1 48 90    	mov.b     [w1+10], w1
    328a:	81 80 fb    	ze        w1, w1
    328c:	81 18 dd    	sl.w      w3, w1, w1
    328e:	82 80 70    	ior.w     w1, w2, w1
    3290:	01 08 78    	mov.w     w1, [w0]

00003292 <.LSM44>:
        *(SCK->rpor) &= ~(0x3F<<(SCK->rpshift));
    3292:	1e 08 90    	mov.w     [w14+18], w0
    3294:	70 00 90    	mov.w     [w0+14], w0
    3296:	9e 08 90    	mov.w     [w14+18], w1
    3298:	f1 00 90    	mov.w     [w1+14], w1
    329a:	11 01 78    	mov.w     [w1], w2
    329c:	9e 08 90    	mov.w     [w14+18], w1
    329e:	a1 48 90    	mov.b     [w1+10], w1
    32a0:	81 80 fb    	ze        w1, w1
    32a2:	f3 03 20    	mov.w     #0x3f, w3
    32a4:	81 18 dd    	sl.w      w3, w1, w1
    32a6:	81 80 ea    	com.w     w1, w1
    32a8:	81 00 61    	and.w     w2, w1, w1
    32aa:	01 08 78    	mov.w     w1, [w0]

000032ac <.LSM45>:
        *(SCK->rpor) |= (self->SCKrpnum)<<(SCK->rpshift);
    32ac:	1e 08 90    	mov.w     [w14+18], w0
    32ae:	70 00 90    	mov.w     [w0+14], w0
    32b0:	9e 08 90    	mov.w     [w14+18], w1
    32b2:	f1 00 90    	mov.w     [w1+14], w1
    32b4:	11 01 78    	mov.w     [w1], w2
    32b6:	ee 00 90    	mov.w     [w14+12], w1
    32b8:	f1 01 90    	mov.w     [w1+14], w3
    32ba:	9e 08 90    	mov.w     [w14+18], w1
    32bc:	a1 48 90    	mov.b     [w1+10], w1
    32be:	81 80 fb    	ze        w1, w1
    32c0:	81 18 dd    	sl.w      w3, w1, w1
    32c2:	82 80 70    	ior.w     w1, w2, w1
    32c4:	01 08 78    	mov.w     w1, [w0]

000032c6 <.LSM46>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    32c6:	11 3a 80    	mov.w     0x742, w1
    32c8:	00 04 20    	mov.w     #0x40, w0
    32ca:	01 01 70    	ior.w     w0, w1, w2
    32cc:	60 04 20    	mov.w     #0x46, w0
    32ce:	71 05 20    	mov.w     #0x57, w1
    32d0:	23 74 20    	mov.w     #0x742, w3
    32d2:	80 49 78    	mov.b     w0, [w3]
    32d4:	81 49 78    	mov.b     w1, [w3]
    32d6:	82 49 78    	mov.b     w2, [w3]
    32d8:	0f 00 37    	bra       0x32f8 <.L8>

000032da <.L7>:
    } else if ((self->MISO!=MISO) || (self->MOSI!=MOSI) || (self->SCK!=SCK)) {
    32da:	6e 00 90    	mov.w     [w14+12], w0
    32dc:	80 08 90    	mov.w     [w0+16], w1
    32de:	7e 00 90    	mov.w     [w14+14], w0
    32e0:	80 8f 50    	sub.w     w1, w0, [w15]
    32e2:	95 00 3a    	bra       NZ, 0x340e <.L24>
    32e4:	6e 00 90    	mov.w     [w14+12], w0
    32e6:	90 08 90    	mov.w     [w0+18], w1
    32e8:	0e 08 90    	mov.w     [w14+16], w0
    32ea:	80 8f 50    	sub.w     w1, w0, [w15]
    32ec:	92 00 3a    	bra       NZ, 0x3412 <.L25>
    32ee:	6e 00 90    	mov.w     [w14+12], w0
    32f0:	a0 08 90    	mov.w     [w0+20], w1
    32f2:	1e 08 90    	mov.w     [w14+18], w0
    32f4:	80 8f 50    	sub.w     w1, w0, [w15]
    32f6:	8f 00 3a    	bra       NZ, 0x3416 <.L26>

000032f8 <.L8>:
        return; // At least one of the specified pins does not match the 
                // previous assignment
    }
    // Clip freq to be in allowable range of values
    if (freq>(FCY/2.))
    32f8:	18 c0 b3    	mov.b     #0x1, w8
    32fa:	02 40 22    	mov.w     #0x2400, w2
    32fc:	43 af 24    	mov.w     #0x4af4, w3
    32fe:	2e 08 90    	mov.w     [w14+20], w0
    3300:	be 08 90    	mov.w     [w14+22], w1
    3302:	2b f0 07    	rcall     0x135a <___gesf2>
    3304:	00 00 e0    	cp0.w     w0
    3306:	01 00 3c    	bra       GT, 0x330a <.L10>
    3308:	00 44 eb    	clr.b     w8

0000330a <.L10>:
    330a:	08 04 e0    	cp0.b     w8
    330c:	04 00 32    	bra       Z, 0x3316 <.L11>

0000330e <.LSM49>:
        freq = FCY/2.;
    330e:	00 40 22    	mov.w     #0x2400, w0
    3310:	41 af 24    	mov.w     #0x4af4, w1
    3312:	20 0f 98    	mov.w     w0, [w14+20]
    3314:	31 0f 98    	mov.w     w1, [w14+22]

00003316 <.L11>:
    if (freq<(FCY/(64.*8.)))
    3316:	18 c0 b3    	mov.b     #0x1, w8
    3318:	02 40 22    	mov.w     #0x2400, w2
    331a:	43 6f 24    	mov.w     #0x46f4, w3
    331c:	2e 08 90    	mov.w     [w14+20], w0
    331e:	be 08 90    	mov.w     [w14+22], w1
    3320:	1a f0 07    	rcall     0x1356 <___eqsf2>
    3322:	00 00 e0    	cp0.w     w0
    3324:	01 00 35    	bra       LT, 0x3328 <.L12>
    3326:	00 44 eb    	clr.b     w8

00003328 <.L12>:
    3328:	08 04 e0    	cp0.b     w8
    332a:	04 00 32    	bra       Z, 0x3334 <.L13>

0000332c <.LSM51>:
        freq = FCY/(64.*8.);
    332c:	00 40 22    	mov.w     #0x2400, w0
    332e:	41 6f 24    	mov.w     #0x46f4, w1
    3330:	20 0f 98    	mov.w     w0, [w14+20]
    3332:	31 0f 98    	mov.w     w1, [w14+22]

00003334 <.L13>:
    // Select primary prescale bits
    if (freq<=(FCY/(2.*64.))) {
    3334:	18 c0 b3    	mov.b     #0x1, w8
    3336:	02 40 22    	mov.w     #0x2400, w2
    3338:	43 7f 24    	mov.w     #0x47f4, w3
    333a:	2e 08 90    	mov.w     [w14+20], w0
    333c:	be 08 90    	mov.w     [w14+22], w1
    333e:	0b f0 07    	rcall     0x1356 <___eqsf2>
    3340:	00 00 e0    	cp0.w     w0
    3342:	01 00 34    	bra       LE, 0x3346 <.L14>
    3344:	00 44 eb    	clr.b     w8

00003346 <.L14>:
    3346:	08 04 e0    	cp0.b     w8
    3348:	0a 00 32    	bra       Z, 0x335e <.L15>

0000334a <.LSM53>:
        freq *= 64.;
    334a:	02 00 20    	mov.w     #0x0, w2
    334c:	03 28 24    	mov.w     #0x4280, w3
    334e:	2e 08 90    	mov.w     [w14+20], w0
    3350:	be 08 90    	mov.w     [w14+22], w1
    3352:	77 f0 07    	rcall     0x1442 <___mulsf3>
    3354:	20 0f 98    	mov.w     w0, [w14+20]
    3356:	31 0f 98    	mov.w     w1, [w14+22]

00003358 <.LSM54>:
        primary = 0;    // Set primary prescale bits for 64:1
    3358:	00 00 eb    	clr.w     w0
    335a:	00 0f 78    	mov.w     w0, [w14]
    335c:	2c 00 37    	bra       0x33b6 <.L16>

0000335e <.L15>:
    } else if (freq<=(FCY/(2.*16.))) {
    335e:	18 c0 b3    	mov.b     #0x1, w8
    3360:	02 40 22    	mov.w     #0x2400, w2
    3362:	43 8f 24    	mov.w     #0x48f4, w3
    3364:	2e 08 90    	mov.w     [w14+20], w0
    3366:	be 08 90    	mov.w     [w14+22], w1
    3368:	f6 ef 07    	rcall     0x1356 <___eqsf2>
    336a:	00 00 e0    	cp0.w     w0
    336c:	01 00 34    	bra       LE, 0x3370 <.L17>
    336e:	00 44 eb    	clr.b     w8

00003370 <.L17>:
    3370:	08 04 e0    	cp0.b     w8
    3372:	0a 00 32    	bra       Z, 0x3388 <.L18>

00003374 <.LSM56>:
        freq *= 16.;
    3374:	02 00 20    	mov.w     #0x0, w2
    3376:	03 18 24    	mov.w     #0x4180, w3
    3378:	2e 08 90    	mov.w     [w14+20], w0
    337a:	be 08 90    	mov.w     [w14+22], w1
    337c:	62 f0 07    	rcall     0x1442 <___mulsf3>
    337e:	20 0f 98    	mov.w     w0, [w14+20]
    3380:	31 0f 98    	mov.w     w1, [w14+22]

00003382 <.LSM57>:
        primary = 1;    // Set primary prescale bits for 16:1
    3382:	10 00 20    	mov.w     #0x1, w0
    3384:	00 0f 78    	mov.w     w0, [w14]
    3386:	17 00 37    	bra       0x33b6 <.L16>

00003388 <.L18>:
    } else if (freq<=(FCY/(2.*4.))) {
    3388:	18 c0 b3    	mov.b     #0x1, w8
    338a:	02 40 22    	mov.w     #0x2400, w2
    338c:	43 9f 24    	mov.w     #0x49f4, w3
    338e:	2e 08 90    	mov.w     [w14+20], w0
    3390:	be 08 90    	mov.w     [w14+22], w1
    3392:	e1 ef 07    	rcall     0x1356 <___eqsf2>
    3394:	00 00 e0    	cp0.w     w0
    3396:	01 00 34    	bra       LE, 0x339a <.L19>
    3398:	00 44 eb    	clr.b     w8

0000339a <.L19>:
    339a:	08 04 e0    	cp0.b     w8
    339c:	0a 00 32    	bra       Z, 0x33b2 <.L20>

0000339e <.LSM59>:
        freq *= 4.;
    339e:	02 00 20    	mov.w     #0x0, w2
    33a0:	03 08 24    	mov.w     #0x4080, w3
    33a2:	2e 08 90    	mov.w     [w14+20], w0
    33a4:	be 08 90    	mov.w     [w14+22], w1
    33a6:	4d f0 07    	rcall     0x1442 <___mulsf3>
    33a8:	20 0f 98    	mov.w     w0, [w14+20]
    33aa:	31 0f 98    	mov.w     w1, [w14+22]

000033ac <.LSM60>:
        primary = 2;    // Set primary prescale bits for 4:1
    33ac:	20 00 20    	mov.w     #0x2, w0
    33ae:	00 0f 78    	mov.w     w0, [w14]
    33b0:	02 00 37    	bra       0x33b6 <.L16>

000033b2 <.L20>:
    } else {
        primary = 3;    // Set primary prescale bits for 1:1
    33b2:	30 00 20    	mov.w     #0x3, w0
    33b4:	00 0f 78    	mov.w     w0, [w14]

000033b6 <.L16>:
    }
    // Compute secondary prescale value to get closest SPI clock freq to that 
    // specified
    secondary = (uint16_t)(0.5+FCY/freq);
    33b6:	2e 09 90    	mov.w     [w14+20], w2
    33b8:	be 09 90    	mov.w     [w14+22], w3
    33ba:	00 40 22    	mov.w     #0x2400, w0
    33bc:	41 b7 24    	mov.w     #0x4b74, w1
    33be:	89 ef 07    	rcall     0x12d2 <___divsf3>
    33c0:	02 00 20    	mov.w     #0x0, w2
    33c2:	03 f0 23    	mov.w     #0x3f00, w3
    33c4:	29 ef 07    	rcall     0x1218 <___addsf3>
    33c6:	cb ef 07    	rcall     0x135e <___fixunssfsi>
    33c8:	10 07 98    	mov.w     w0, [w14+2]

000033ca <.LSM63>:
    secondary = (8-secondary)<<2;   // Map secondary prescale bits for SPIxCON1
    33ca:	1e 00 90    	mov.w     [w14+2], w0
    33cc:	68 00 10    	subr.w    w0, #0x8, w0
    33ce:	42 00 dd    	sl.w      w0, #0x2, w0
    33d0:	10 07 98    	mov.w     w0, [w14+2]

000033d2 <.LSM64>:
    // Configure the SPI module
    //   set SPI module to 8-bit master mode, SMP = 0
    //   set CKE and CKP bits according to the SPI mode specified
    //   set SPRE and PPRE bits to get the closest SPI clock freq to that 
    //   specified
    *(self->SPIxCON1) = 0x0020 | modebits[mode & 0x03] | primary | secondary;
    33d2:	6e 00 90    	mov.w     [w14+12], w0
    33d4:	90 00 90    	mov.w     [w0+2], w1
    33d6:	0e 58 90    	mov.b     [w14+24], w0
    33d8:	00 80 fb    	ze        w0, w0
    33da:	63 00 60    	and.w     w0, #0x3, w0
    33dc:	00 00 40    	add.w     w0, w0, w0
    33de:	64 01 47    	add.w     w14, #0x4, w2
    33e0:	00 00 41    	add.w     w2, w0, w0
    33e2:	10 00 78    	mov.w     [w0], w0
    33e4:	1e 01 70    	ior.w     w0, [w14], w2
    33e6:	1e 00 90    	mov.w     [w14+2], w0
    33e8:	02 01 70    	ior.w     w0, w2, w2
    33ea:	00 02 20    	mov.w     #0x20, w0
    33ec:	02 00 70    	ior.w     w0, w2, w0
    33ee:	80 08 78    	mov.w     w0, [w1]

000033f0 <.LSM65>:
    *(self->SPIxCON2) = 0;
    33f0:	6e 00 90    	mov.w     [w14+12], w0
    33f2:	20 00 90    	mov.w     [w0+4], w0
    33f4:	80 00 eb    	clr.w     w1
    33f6:	01 08 78    	mov.w     w1, [w0]

000033f8 <.LSM66>:
    // Enable the SPI module and clear status flags
    *(self->SPIxSTAT) = 0x8000;
    33f8:	6e 00 90    	mov.w     [w14+12], w0
    33fa:	10 00 78    	mov.w     [w0], w0
    33fc:	01 00 28    	mov.w     #0x8000, w1
    33fe:	01 08 78    	mov.w     w1, [w0]
    3400:	0b 00 37    	bra       0x3418 <.L3>

00003402 <.L21>:
    3402:	00 00 00    	nop       
    3404:	09 00 37    	bra       0x3418 <.L3>

00003406 <.L22>:
    3406:	00 00 00    	nop       
    3408:	07 00 37    	bra       0x3418 <.L3>

0000340a <.L23>:
    340a:	00 00 00    	nop       
    340c:	05 00 37    	bra       0x3418 <.L3>

0000340e <.L24>:
    340e:	00 00 00    	nop       
    3410:	03 00 37    	bra       0x3418 <.L3>

00003412 <.L25>:
    3412:	00 00 00    	nop       
    3414:	01 00 37    	bra       0x3418 <.L3>

00003416 <.L26>:
    3416:	00 00 00    	nop       

00003418 <.L3>:
}
    3418:	4f 04 78    	mov.w     [--w15], w8
    341a:	00 80 fa    	ulnk      
    341c:	00 00 06    	return    

0000341e <_spi_close>:

void spi_close(_SPI *self) {
    341e:	02 00 fa    	lnk       #0x2
    3420:	00 0f 78    	mov.w     w0, [w14]

00003422 <.LSM71>:
    *(self->SPIxSTAT) = 0;
    3422:	1e 00 78    	mov.w     [w14], w0
    3424:	10 00 78    	mov.w     [w0], w0
    3426:	80 00 eb    	clr.w     w1
    3428:	01 08 78    	mov.w     w1, [w0]

0000342a <.LSM72>:
    *(self->SPIxCON1) = 0;
    342a:	1e 00 78    	mov.w     [w14], w0
    342c:	10 00 90    	mov.w     [w0+2], w0
    342e:	80 00 eb    	clr.w     w1
    3430:	01 08 78    	mov.w     w1, [w0]

00003432 <.LSM73>:
    *(self->SPIxCON2) = 0;
    3432:	1e 00 78    	mov.w     [w14], w0
    3434:	20 00 90    	mov.w     [w0+4], w0
    3436:	80 00 eb    	clr.w     w1
    3438:	01 08 78    	mov.w     w1, [w0]

0000343a <.LSM74>:
    if (self->MISO) {
    343a:	1e 00 78    	mov.w     [w14], w0
    343c:	00 08 90    	mov.w     [w0+16], w0
    343e:	00 00 e0    	cp0.w     w0
    3440:	28 00 32    	bra       Z, 0x3492 <.L28>

00003442 <.LSM75>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3442:	11 3a 80    	mov.w     0x742, w1
    3444:	f0 0b 20    	mov.w     #0xbf, w0
    3446:	00 81 60    	and.w     w1, w0, w2
    3448:	60 04 20    	mov.w     #0x46, w0
    344a:	71 05 20    	mov.w     #0x57, w1
    344c:	23 74 20    	mov.w     #0x742, w3
    344e:	80 49 78    	mov.b     w0, [w3]
    3450:	81 49 78    	mov.b     w1, [w3]
    3452:	82 49 78    	mov.b     w2, [w3]

00003454 <.LSM76>:
        *(self->MISOrpinr) |= 0x3F<<(self->MISOrpshift);
    3454:	1e 00 78    	mov.w     [w14], w0
    3456:	40 00 90    	mov.w     [w0+8], w0
    3458:	9e 00 78    	mov.w     [w14], w1
    345a:	c1 00 90    	mov.w     [w1+8], w1
    345c:	11 01 78    	mov.w     [w1], w2
    345e:	9e 00 78    	mov.w     [w14], w1
    3460:	a1 48 90    	mov.b     [w1+10], w1
    3462:	81 80 fb    	ze        w1, w1
    3464:	f3 03 20    	mov.w     #0x3f, w3
    3466:	81 18 dd    	sl.w      w3, w1, w1
    3468:	82 80 70    	ior.w     w1, w2, w1
    346a:	01 08 78    	mov.w     w1, [w0]

0000346c <.LSM77>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    346c:	11 3a 80    	mov.w     0x742, w1
    346e:	00 04 20    	mov.w     #0x40, w0
    3470:	01 01 70    	ior.w     w0, w1, w2
    3472:	60 04 20    	mov.w     #0x46, w0
    3474:	71 05 20    	mov.w     #0x57, w1
    3476:	23 74 20    	mov.w     #0x742, w3
    3478:	80 49 78    	mov.b     w0, [w3]
    347a:	81 49 78    	mov.b     w1, [w3]
    347c:	82 49 78    	mov.b     w2, [w3]

0000347e <.LSM78>:
        self->MISO->owner = NULL;
    347e:	1e 00 78    	mov.w     [w14], w0
    3480:	00 08 90    	mov.w     [w0+16], w0
    3482:	80 00 eb    	clr.w     w1
    3484:	01 08 98    	mov.w     w1, [w0+16]

00003486 <.LSM79>:
        pin_digitalIn(self->MISO);
    3486:	1e 00 78    	mov.w     [w14], w0
    3488:	00 08 90    	mov.w     [w0+16], w0
    348a:	01 02 07    	rcall     0x388e <_pin_digitalIn>

0000348c <.LSM80>:
        self->MISO = NULL;
    348c:	1e 00 78    	mov.w     [w14], w0
    348e:	80 00 eb    	clr.w     w1
    3490:	01 08 98    	mov.w     w1, [w0+16]

00003492 <.L28>:
    }
    if (self->MOSI) {
    3492:	1e 00 78    	mov.w     [w14], w0
    3494:	10 08 90    	mov.w     [w0+18], w0
    3496:	00 00 e0    	cp0.w     w0
    3498:	2f 00 32    	bra       Z, 0x34f8 <.L29>

0000349a <.LSM82>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    349a:	11 3a 80    	mov.w     0x742, w1
    349c:	f0 0b 20    	mov.w     #0xbf, w0
    349e:	00 81 60    	and.w     w1, w0, w2
    34a0:	60 04 20    	mov.w     #0x46, w0
    34a2:	71 05 20    	mov.w     #0x57, w1
    34a4:	23 74 20    	mov.w     #0x742, w3
    34a6:	80 49 78    	mov.b     w0, [w3]
    34a8:	81 49 78    	mov.b     w1, [w3]
    34aa:	82 49 78    	mov.b     w2, [w3]

000034ac <.LSM83>:
        *(self->MOSI->rpor) &= ~(0x3F<<(self->MOSI->rpshift));
    34ac:	1e 00 78    	mov.w     [w14], w0
    34ae:	10 08 90    	mov.w     [w0+18], w0
    34b0:	70 00 90    	mov.w     [w0+14], w0
    34b2:	9e 00 78    	mov.w     [w14], w1
    34b4:	91 08 90    	mov.w     [w1+18], w1
    34b6:	f1 00 90    	mov.w     [w1+14], w1
    34b8:	11 01 78    	mov.w     [w1], w2
    34ba:	9e 00 78    	mov.w     [w14], w1
    34bc:	91 08 90    	mov.w     [w1+18], w1
    34be:	a1 48 90    	mov.b     [w1+10], w1
    34c0:	81 80 fb    	ze        w1, w1
    34c2:	f3 03 20    	mov.w     #0x3f, w3
    34c4:	81 18 dd    	sl.w      w3, w1, w1
    34c6:	81 80 ea    	com.w     w1, w1
    34c8:	81 00 61    	and.w     w2, w1, w1
    34ca:	01 08 78    	mov.w     w1, [w0]

000034cc <.LSM84>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    34cc:	11 3a 80    	mov.w     0x742, w1
    34ce:	00 04 20    	mov.w     #0x40, w0
    34d0:	01 01 70    	ior.w     w0, w1, w2
    34d2:	60 04 20    	mov.w     #0x46, w0
    34d4:	71 05 20    	mov.w     #0x57, w1
    34d6:	23 74 20    	mov.w     #0x742, w3
    34d8:	80 49 78    	mov.b     w0, [w3]
    34da:	81 49 78    	mov.b     w1, [w3]
    34dc:	82 49 78    	mov.b     w2, [w3]

000034de <.LSM85>:
        self->MOSI->owner = NULL;
    34de:	1e 00 78    	mov.w     [w14], w0
    34e0:	10 08 90    	mov.w     [w0+18], w0
    34e2:	80 00 eb    	clr.w     w1
    34e4:	01 08 98    	mov.w     w1, [w0+16]

000034e6 <.LSM86>:
        pin_digitalOut(self->MOSI);
    34e6:	1e 00 78    	mov.w     [w14], w0
    34e8:	10 08 90    	mov.w     [w0+18], w0
    34ea:	f8 01 07    	rcall     0x38dc <_pin_digitalOut>

000034ec <.LSM87>:
        pin_set(self->MOSI);
    34ec:	1e 00 78    	mov.w     [w14], w0
    34ee:	10 08 90    	mov.w     [w0+18], w0
    34f0:	52 02 07    	rcall     0x3996 <_pin_set>

000034f2 <.LSM88>:
        self->MOSI = NULL;
    34f2:	1e 00 78    	mov.w     [w14], w0
    34f4:	80 00 eb    	clr.w     w1
    34f6:	11 08 98    	mov.w     w1, [w0+18]

000034f8 <.L29>:
    }
    if (self->SCK) {
    34f8:	1e 00 78    	mov.w     [w14], w0
    34fa:	20 08 90    	mov.w     [w0+20], w0
    34fc:	00 00 e0    	cp0.w     w0
    34fe:	2f 00 32    	bra       Z, 0x355e <.L27>

00003500 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3500:	11 3a 80    	mov.w     0x742, w1
    3502:	f0 0b 20    	mov.w     #0xbf, w0
    3504:	00 81 60    	and.w     w1, w0, w2
    3506:	60 04 20    	mov.w     #0x46, w0
    3508:	71 05 20    	mov.w     #0x57, w1
    350a:	23 74 20    	mov.w     #0x742, w3
    350c:	80 49 78    	mov.b     w0, [w3]
    350e:	81 49 78    	mov.b     w1, [w3]
    3510:	82 49 78    	mov.b     w2, [w3]

00003512 <.LSM91>:
        *(self->SCK->rpor) &= ~(0x3F<<(self->SCK->rpshift));
    3512:	1e 00 78    	mov.w     [w14], w0
    3514:	20 08 90    	mov.w     [w0+20], w0
    3516:	70 00 90    	mov.w     [w0+14], w0
    3518:	9e 00 78    	mov.w     [w14], w1
    351a:	a1 08 90    	mov.w     [w1+20], w1
    351c:	f1 00 90    	mov.w     [w1+14], w1
    351e:	11 01 78    	mov.w     [w1], w2
    3520:	9e 00 78    	mov.w     [w14], w1
    3522:	a1 08 90    	mov.w     [w1+20], w1
    3524:	a1 48 90    	mov.b     [w1+10], w1
    3526:	81 80 fb    	ze        w1, w1
    3528:	f3 03 20    	mov.w     #0x3f, w3
    352a:	81 18 dd    	sl.w      w3, w1, w1
    352c:	81 80 ea    	com.w     w1, w1
    352e:	81 00 61    	and.w     w2, w1, w1
    3530:	01 08 78    	mov.w     w1, [w0]

00003532 <.LSM92>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3532:	11 3a 80    	mov.w     0x742, w1
    3534:	00 04 20    	mov.w     #0x40, w0
    3536:	01 01 70    	ior.w     w0, w1, w2
    3538:	60 04 20    	mov.w     #0x46, w0
    353a:	71 05 20    	mov.w     #0x57, w1
    353c:	23 74 20    	mov.w     #0x742, w3
    353e:	80 49 78    	mov.b     w0, [w3]
    3540:	81 49 78    	mov.b     w1, [w3]
    3542:	82 49 78    	mov.b     w2, [w3]

00003544 <.LSM93>:
        self->SCK->owner = NULL;
    3544:	1e 00 78    	mov.w     [w14], w0
    3546:	20 08 90    	mov.w     [w0+20], w0
    3548:	80 00 eb    	clr.w     w1
    354a:	01 08 98    	mov.w     w1, [w0+16]

0000354c <.LSM94>:
        pin_digitalOut(self->SCK);
    354c:	1e 00 78    	mov.w     [w14], w0
    354e:	20 08 90    	mov.w     [w0+20], w0
    3550:	c5 01 07    	rcall     0x38dc <_pin_digitalOut>

00003552 <.LSM95>:
        pin_clear(self->SCK);
    3552:	1e 00 78    	mov.w     [w14], w0
    3554:	20 08 90    	mov.w     [w0+20], w0
    3556:	34 02 07    	rcall     0x39c0 <_pin_clear>

00003558 <.LSM96>:
        self->SCK = NULL;
    3558:	1e 00 78    	mov.w     [w14], w0
    355a:	80 00 eb    	clr.w     w1
    355c:	21 08 98    	mov.w     w1, [w0+20]

0000355e <.L27>:
    }
}
    355e:	00 80 fa    	ulnk      
    3560:	00 00 06    	return    

00003562 <_spi_transfer>:

uint8_t spi_transfer(_SPI *self, uint8_t val) {
    3562:	04 00 fa    	lnk       #0x4
    3564:	00 0f 78    	mov.w     w0, [w14]
    3566:	21 47 98    	mov.b     w1, [w14+2]

00003568 <.LSM99>:
    *(self->SPIxBUF) = (uint16_t)val;
    3568:	1e 00 78    	mov.w     [w14], w0
    356a:	30 00 90    	mov.w     [w0+6], w0
    356c:	ae 40 90    	mov.b     [w14+2], w1
    356e:	81 80 fb    	ze        w1, w1
    3570:	01 08 78    	mov.w     w1, [w0]

00003572 <.LSM100>:
    while (bitread(self->SPIxSTAT, 0)==0) {}
    3572:	00 00 00    	nop       

00003574 <.L32>:
    3574:	1e 00 78    	mov.w     [w14], w0
    3576:	10 00 78    	mov.w     [w0], w0
    3578:	10 00 78    	mov.w     [w0], w0
    357a:	61 00 60    	and.w     w0, #0x1, w0
    357c:	00 00 e0    	cp0.w     w0
    357e:	fa ff 32    	bra       Z, 0x3574 <.L32>

00003580 <.LSM101>:
    return (uint8_t)(*(self->SPIxBUF));
    3580:	1e 00 78    	mov.w     [w14], w0
    3582:	30 00 90    	mov.w     [w0+6], w0
    3584:	10 00 78    	mov.w     [w0], w0
    3586:	00 40 78    	mov.b     w0, w0

00003588 <.LSM102>:
}
    3588:	00 80 fa    	ulnk      
    358a:	00 00 06    	return    

0000358c <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    358c:	04 00 fa    	lnk       #0x4
    358e:	00 0f 78    	mov.w     w0, [w14]
    3590:	11 07 98    	mov.w     w1, [w14+2]

00003592 <.LSM1>:
    if (val)
    3592:	1e 00 90    	mov.w     [w14+2], w0
    3594:	00 00 e0    	cp0.w     w0
    3596:	0d 00 32    	bra       Z, 0x35b2 <.L2>

00003598 <.LSM2>:
        bitset(self->port, self->bit);
    3598:	1e 00 78    	mov.w     [w14], w0
    359a:	10 00 78    	mov.w     [w0], w0
    359c:	9e 00 78    	mov.w     [w14], w1
    359e:	91 00 78    	mov.w     [w1], w1
    35a0:	11 01 78    	mov.w     [w1], w2
    35a2:	9e 00 78    	mov.w     [w14], w1
    35a4:	e1 40 90    	mov.b     [w1+6], w1
    35a6:	81 80 fb    	ze        w1, w1
    35a8:	13 00 20    	mov.w     #0x1, w3
    35aa:	81 18 dd    	sl.w      w3, w1, w1
    35ac:	82 80 70    	ior.w     w1, w2, w1
    35ae:	01 08 78    	mov.w     w1, [w0]
    35b0:	0d 00 37    	bra       0x35cc <.L1>

000035b2 <.L2>:
    else
        bitclear(self->port, self->bit);
    35b2:	1e 00 78    	mov.w     [w14], w0
    35b4:	10 00 78    	mov.w     [w0], w0
    35b6:	9e 00 78    	mov.w     [w14], w1
    35b8:	91 00 78    	mov.w     [w1], w1
    35ba:	11 01 78    	mov.w     [w1], w2
    35bc:	9e 00 78    	mov.w     [w14], w1
    35be:	e1 40 90    	mov.b     [w1+6], w1
    35c0:	81 80 fb    	ze        w1, w1
    35c2:	13 00 20    	mov.w     #0x1, w3
    35c4:	81 18 dd    	sl.w      w3, w1, w1
    35c6:	81 80 ea    	com.w     w1, w1
    35c8:	81 00 61    	and.w     w2, w1, w1
    35ca:	01 08 78    	mov.w     w1, [w0]

000035cc <.L1>:
}
    35cc:	00 80 fa    	ulnk      
    35ce:	00 00 06    	return    

000035d0 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    35d0:	02 00 fa    	lnk       #0x2
    35d2:	00 0f 78    	mov.w     w0, [w14]

000035d4 <.LSM6>:
    return bitread(self->port, self->bit);
    35d4:	1e 00 78    	mov.w     [w14], w0
    35d6:	10 00 78    	mov.w     [w0], w0
    35d8:	90 00 78    	mov.w     [w0], w1
    35da:	1e 00 78    	mov.w     [w14], w0
    35dc:	60 40 90    	mov.b     [w0+6], w0
    35de:	00 80 fb    	ze        w0, w0
    35e0:	12 00 20    	mov.w     #0x1, w2
    35e2:	00 10 dd    	sl.w      w2, w0, w0
    35e4:	00 80 60    	and.w     w1, w0, w0
    35e6:	00 f0 a7    	btsc.w    w0, #0xf
    35e8:	00 00 ea    	neg.w     w0, w0
    35ea:	00 00 ea    	neg.w     w0, w0
    35ec:	4f 00 de    	lsr.w     w0, #0xf, w0

000035ee <.LSM7>:
}
    35ee:	00 80 fa    	ulnk      
    35f0:	00 00 06    	return    

000035f2 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    35f2:	02 00 fa    	lnk       #0x2
    35f4:	00 0f 78    	mov.w     w0, [w14]

000035f6 <.LSM9>:
    AD1CHS = self->annum;
    35f6:	1e 00 78    	mov.w     [w14], w0
    35f8:	40 00 90    	mov.w     [w0+8], w0
    35fa:	40 19 88    	mov.w     w0, 0x328

000035fc <.LSM10>:
    AD1CON1bits.SAMP = 1;
    35fc:	20 23 a8    	bset.b    0x320, #0x1

000035fe <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    35fe:	00 00 00    	nop       

00003600 <.L6>:
    3600:	00 19 80    	mov.w     0x320, w0
    3602:	61 00 60    	and.w     w0, #0x1, w0
    3604:	00 00 e0    	cp0.w     w0
    3606:	fc ff 32    	bra       Z, 0x3600 <.L6>

00003608 <.LSM12>:
    return ADC1BUF0;
    3608:	00 18 80    	mov.w     0x300, w0

0000360a <.LSM13>:
}
    360a:	00 80 fa    	ulnk      
    360c:	00 00 06    	return    

0000360e <_init_pin>:

void init_pin(void) {
    360e:	02 00 fa    	lnk       #0x2

00003610 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3610:	40 6d 20    	mov.w     #0x6d4, w0
    3612:	80 1f 78    	mov.w     w0, [w15++]
    3614:	47 01 20    	mov.w     #0x14, w7
    3616:	00 43 eb    	clr.b     w6
    3618:	80 82 eb    	setm.w    w5
    361a:	54 c0 b3    	mov.b     #0x5, w4
    361c:	80 01 eb    	clr.w     w3
    361e:	82 2d 20    	mov.w     #0x2d8, w2
    3620:	a1 2d 20    	mov.w     #0x2da, w1
    3622:	40 87 20    	mov.w     #0x874, w0
    3624:	08 01 07    	rcall     0x3836 <_pin_init>
    3626:	8f 87 e9    	dec2.w    w15, w15

00003628 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3628:	80 6d 20    	mov.w     #0x6d8, w0
    362a:	80 1f 78    	mov.w     w0, [w15++]
    362c:	97 01 20    	mov.w     #0x19, w7
    362e:	86 c0 b3    	mov.b     #0x8, w6
    3630:	80 82 eb    	setm.w    w5
    3632:	44 c0 b3    	mov.b     #0x4, w4
    3634:	80 01 eb    	clr.w     w3
    3636:	82 2d 20    	mov.w     #0x2d8, w2
    3638:	a1 2d 20    	mov.w     #0x2da, w1
    363a:	a0 88 20    	mov.w     #0x88a, w0
    363c:	fc 00 07    	rcall     0x3836 <_pin_init>
    363e:	8f 87 e9    	dec2.w    w15, w15

00003640 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3640:	a0 6c 20    	mov.w     #0x6ca, w0
    3642:	80 1f 78    	mov.w     w0, [w15++]
    3644:	a7 00 20    	mov.w     #0xa, w7
    3646:	00 43 eb    	clr.b     w6
    3648:	80 82 eb    	setm.w    w5
    364a:	44 c0 b3    	mov.b     #0x4, w4
    364c:	80 01 eb    	clr.w     w3
    364e:	82 2e 20    	mov.w     #0x2e8, w2
    3650:	a1 2e 20    	mov.w     #0x2ea, w1
    3652:	00 8a 20    	mov.w     #0x8a0, w0
    3654:	f0 00 07    	rcall     0x3836 <_pin_init>
    3656:	8f 87 e9    	dec2.w    w15, w15

00003658 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3658:	00 6d 20    	mov.w     #0x6d0, w0
    365a:	80 1f 78    	mov.w     w0, [w15++]
    365c:	17 01 20    	mov.w     #0x11, w7
    365e:	86 c0 b3    	mov.b     #0x8, w6
    3660:	80 82 eb    	setm.w    w5
    3662:	54 c0 b3    	mov.b     #0x5, w4
    3664:	80 01 eb    	clr.w     w3
    3666:	82 2e 20    	mov.w     #0x2e8, w2
    3668:	a1 2e 20    	mov.w     #0x2ea, w1
    366a:	60 8b 20    	mov.w     #0x8b6, w0
    366c:	e4 00 07    	rcall     0x3836 <_pin_init>
    366e:	8f 87 e9    	dec2.w    w15, w15

00003670 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3670:	c0 6d 20    	mov.w     #0x6dc, w0
    3672:	80 1f 78    	mov.w     w0, [w15++]
    3674:	d7 01 20    	mov.w     #0x1d, w7
    3676:	86 c0 b3    	mov.b     #0x8, w6
    3678:	f5 00 20    	mov.w     #0xf, w5
    367a:	f4 c0 b3    	mov.b     #0xf, w4
    367c:	23 4e 20    	mov.w     #0x4e2, w3
    367e:	82 2c 20    	mov.w     #0x2c8, w2
    3680:	a1 2c 20    	mov.w     #0x2ca, w1
    3682:	c0 8c 20    	mov.w     #0x8cc, w0
    3684:	d8 00 07    	rcall     0x3836 <_pin_init>
    3686:	8f 87 e9    	dec2.w    w15, w15

00003688 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3688:	00 6d 20    	mov.w     #0x6d0, w0
    368a:	80 1f 78    	mov.w     w0, [w15++]
    368c:	07 01 20    	mov.w     #0x10, w7
    368e:	00 43 eb    	clr.b     w6
    3690:	80 82 eb    	setm.w    w5
    3692:	34 c0 b3    	mov.b     #0x3, w4
    3694:	80 01 eb    	clr.w     w3
    3696:	82 2e 20    	mov.w     #0x2e8, w2
    3698:	a1 2e 20    	mov.w     #0x2ea, w1
    369a:	20 8e 20    	mov.w     #0x8e2, w0
    369c:	cc 00 07    	rcall     0x3836 <_pin_init>
    369e:	8f 87 e9    	dec2.w    w15, w15

000036a0 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    36a0:	20 6c 20    	mov.w     #0x6c2, w0
    36a2:	80 1f 78    	mov.w     w0, [w15++]
    36a4:	27 00 20    	mov.w     #0x2, w7
    36a6:	00 43 eb    	clr.b     w6
    36a8:	80 82 eb    	setm.w    w5
    36aa:	84 c0 b3    	mov.b     #0x8, w4
    36ac:	80 01 eb    	clr.w     w3
    36ae:	82 2d 20    	mov.w     #0x2d8, w2
    36b0:	a1 2d 20    	mov.w     #0x2da, w1
    36b2:	80 8f 20    	mov.w     #0x8f8, w0
    36b4:	c0 00 07    	rcall     0x3836 <_pin_init>
    36b6:	8f 87 e9    	dec2.w    w15, w15

000036b8 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    36b8:	c0 6c 20    	mov.w     #0x6cc, w0
    36ba:	80 1f 78    	mov.w     w0, [w15++]
    36bc:	c7 00 20    	mov.w     #0xc, w7
    36be:	00 43 eb    	clr.b     w6
    36c0:	80 82 eb    	setm.w    w5
    36c2:	b4 c0 b3    	mov.b     #0xb, w4
    36c4:	80 01 eb    	clr.w     w3
    36c6:	82 2d 20    	mov.w     #0x2d8, w2
    36c8:	a1 2d 20    	mov.w     #0x2da, w1
    36ca:	e0 90 20    	mov.w     #0x90e, w0
    36cc:	b4 00 07    	rcall     0x3836 <_pin_init>
    36ce:	8f 87 e9    	dec2.w    w15, w15

000036d0 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    36d0:	40 6c 20    	mov.w     #0x6c4, w0
    36d2:	80 1f 78    	mov.w     w0, [w15++]
    36d4:	47 00 20    	mov.w     #0x4, w7
    36d6:	00 43 eb    	clr.b     w6
    36d8:	80 82 eb    	setm.w    w5
    36da:	94 c0 b3    	mov.b     #0x9, w4
    36dc:	80 01 eb    	clr.w     w3
    36de:	82 2d 20    	mov.w     #0x2d8, w2
    36e0:	a1 2d 20    	mov.w     #0x2da, w1
    36e2:	40 92 20    	mov.w     #0x924, w0
    36e4:	a8 00 07    	rcall     0x3836 <_pin_init>
    36e6:	8f 87 e9    	dec2.w    w15, w15

000036e8 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    36e8:	20 6c 20    	mov.w     #0x6c2, w0
    36ea:	80 1f 78    	mov.w     w0, [w15++]
    36ec:	37 00 20    	mov.w     #0x3, w7
    36ee:	86 c0 b3    	mov.b     #0x8, w6
    36f0:	80 82 eb    	setm.w    w5
    36f2:	a4 c0 b3    	mov.b     #0xa, w4
    36f4:	80 01 eb    	clr.w     w3
    36f6:	82 2d 20    	mov.w     #0x2d8, w2
    36f8:	a1 2d 20    	mov.w     #0x2da, w1
    36fa:	a0 93 20    	mov.w     #0x93a, w0
    36fc:	9c 00 07    	rcall     0x3836 <_pin_init>
    36fe:	8f 87 e9    	dec2.w    w15, w15

00003700 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3700:	a0 6c 20    	mov.w     #0x6ca, w0
    3702:	80 1f 78    	mov.w     w0, [w15++]
    3704:	b7 00 20    	mov.w     #0xb, w7
    3706:	86 c0 b3    	mov.b     #0x8, w6
    3708:	80 82 eb    	setm.w    w5
    370a:	00 42 eb    	clr.b     w4
    370c:	80 01 eb    	clr.w     w3
    370e:	82 2d 20    	mov.w     #0x2d8, w2
    3710:	a1 2d 20    	mov.w     #0x2da, w1
    3712:	00 95 20    	mov.w     #0x950, w0
    3714:	90 00 07    	rcall     0x3836 <_pin_init>
    3716:	8f 87 e9    	dec2.w    w15, w15

00003718 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3718:	80 6d 20    	mov.w     #0x6d8, w0
    371a:	80 1f 78    	mov.w     w0, [w15++]
    371c:	87 01 20    	mov.w     #0x18, w7
    371e:	00 43 eb    	clr.b     w6
    3720:	80 82 eb    	setm.w    w5
    3722:	14 c0 b3    	mov.b     #0x1, w4
    3724:	80 01 eb    	clr.w     w3
    3726:	82 2d 20    	mov.w     #0x2d8, w2
    3728:	a1 2d 20    	mov.w     #0x2da, w1
    372a:	60 96 20    	mov.w     #0x966, w0
    372c:	84 00 07    	rcall     0x3836 <_pin_init>
    372e:	8f 87 e9    	dec2.w    w15, w15

00003730 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3730:	60 6d 20    	mov.w     #0x6d6, w0
    3732:	80 1f 78    	mov.w     w0, [w15++]
    3734:	77 01 20    	mov.w     #0x17, w7
    3736:	86 c0 b3    	mov.b     #0x8, w6
    3738:	80 82 eb    	setm.w    w5
    373a:	24 c0 b3    	mov.b     #0x2, w4
    373c:	80 01 eb    	clr.w     w3
    373e:	82 2d 20    	mov.w     #0x2d8, w2
    3740:	a1 2d 20    	mov.w     #0x2da, w1
    3742:	c0 97 20    	mov.w     #0x97c, w0
    3744:	78 00 07    	rcall     0x3836 <_pin_init>
    3746:	8f 87 e9    	dec2.w    w15, w15

00003748 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3748:	60 6d 20    	mov.w     #0x6d6, w0
    374a:	80 1f 78    	mov.w     w0, [w15++]
    374c:	67 01 20    	mov.w     #0x16, w7
    374e:	00 43 eb    	clr.b     w6
    3750:	80 82 eb    	setm.w    w5
    3752:	34 c0 b3    	mov.b     #0x3, w4
    3754:	80 01 eb    	clr.w     w3
    3756:	82 2d 20    	mov.w     #0x2d8, w2
    3758:	a1 2d 20    	mov.w     #0x2da, w1
    375a:	20 99 20    	mov.w     #0x992, w0
    375c:	6c 00 07    	rcall     0x3836 <_pin_init>
    375e:	8f 87 e9    	dec2.w    w15, w15

00003760 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3760:	00 6c 20    	mov.w     #0x6c0, w0
    3762:	80 1f 78    	mov.w     w0, [w15++]
    3764:	80 03 eb    	clr.w     w7
    3766:	00 43 eb    	clr.b     w6
    3768:	80 02 eb    	clr.w     w5
    376a:	00 42 eb    	clr.b     w4
    376c:	23 4e 20    	mov.w     #0x4e2, w3
    376e:	82 2c 20    	mov.w     #0x2c8, w2
    3770:	a1 2c 20    	mov.w     #0x2ca, w1
    3772:	60 a1 20    	mov.w     #0xa16, w0
    3774:	60 00 07    	rcall     0x3836 <_pin_init>
    3776:	8f 87 e9    	dec2.w    w15, w15

00003778 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3778:	00 6c 20    	mov.w     #0x6c0, w0
    377a:	80 1f 78    	mov.w     w0, [w15++]
    377c:	17 00 20    	mov.w     #0x1, w7
    377e:	86 c0 b3    	mov.b     #0x8, w6
    3780:	15 00 20    	mov.w     #0x1, w5
    3782:	14 c0 b3    	mov.b     #0x1, w4
    3784:	23 4e 20    	mov.w     #0x4e2, w3
    3786:	82 2c 20    	mov.w     #0x2c8, w2
    3788:	a1 2c 20    	mov.w     #0x2ca, w1
    378a:	00 a0 20    	mov.w     #0xa00, w0
    378c:	54 00 07    	rcall     0x3836 <_pin_init>
    378e:	8f 87 e9    	dec2.w    w15, w15

00003790 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3790:	c0 6c 20    	mov.w     #0x6cc, w0
    3792:	80 1f 78    	mov.w     w0, [w15++]
    3794:	d7 00 20    	mov.w     #0xd, w7
    3796:	86 c0 b3    	mov.b     #0x8, w6
    3798:	25 00 20    	mov.w     #0x2, w5
    379a:	24 c0 b3    	mov.b     #0x2, w4
    379c:	23 4e 20    	mov.w     #0x4e2, w3
    379e:	82 2c 20    	mov.w     #0x2c8, w2
    37a0:	a1 2c 20    	mov.w     #0x2ca, w1
    37a2:	a0 9e 20    	mov.w     #0x9ea, w0
    37a4:	48 00 07    	rcall     0x3836 <_pin_init>
    37a6:	8f 87 e9    	dec2.w    w15, w15

000037a8 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    37a8:	00 00 eb    	clr.w     w0
    37aa:	80 1f 78    	mov.w     w0, [w15++]
    37ac:	80 83 eb    	setm.w    w7
    37ae:	00 43 eb    	clr.b     w6
    37b0:	35 00 20    	mov.w     #0x3, w5
    37b2:	34 c0 b3    	mov.b     #0x3, w4
    37b4:	23 4e 20    	mov.w     #0x4e2, w3
    37b6:	82 2c 20    	mov.w     #0x2c8, w2
    37b8:	a1 2c 20    	mov.w     #0x2ca, w1
    37ba:	40 9d 20    	mov.w     #0x9d4, w0
    37bc:	3c 00 07    	rcall     0x3836 <_pin_init>
    37be:	8f 87 e9    	dec2.w    w15, w15

000037c0 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    37c0:	c0 6d 20    	mov.w     #0x6dc, w0
    37c2:	80 1f 78    	mov.w     w0, [w15++]
    37c4:	c7 01 20    	mov.w     #0x1c, w7
    37c6:	00 43 eb    	clr.b     w6
    37c8:	45 00 20    	mov.w     #0x4, w5
    37ca:	44 c0 b3    	mov.b     #0x4, w4
    37cc:	23 4e 20    	mov.w     #0x4e2, w3
    37ce:	82 2c 20    	mov.w     #0x2c8, w2
    37d0:	a1 2c 20    	mov.w     #0x2ca, w1
    37d2:	e0 9b 20    	mov.w     #0x9be, w0
    37d4:	30 00 07    	rcall     0x3836 <_pin_init>
    37d6:	8f 87 e9    	dec2.w    w15, w15

000037d8 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    37d8:	20 6d 20    	mov.w     #0x6d2, w0
    37da:	80 1f 78    	mov.w     w0, [w15++]
    37dc:	27 01 20    	mov.w     #0x12, w7
    37de:	00 43 eb    	clr.b     w6
    37e0:	55 00 20    	mov.w     #0x5, w5
    37e2:	54 c0 b3    	mov.b     #0x5, w4
    37e4:	23 4e 20    	mov.w     #0x4e2, w3
    37e6:	82 2c 20    	mov.w     #0x2c8, w2
    37e8:	a1 2c 20    	mov.w     #0x2ca, w1
    37ea:	80 9a 20    	mov.w     #0x9a8, w0
    37ec:	24 00 07    	rcall     0x3836 <_pin_init>
    37ee:	8f 87 e9    	dec2.w    w15, w15

000037f0 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    37f0:	00 00 eb    	clr.w     w0
    37f2:	00 0f 78    	mov.w     w0, [w14]
    37f4:	07 00 37    	bra       0x3804 <.L8>

000037f6 <.L9>:
        pin_digitalIn(&D[i]);
    37f6:	1e 00 78    	mov.w     [w14], w0
    37f8:	76 00 b9    	mul.su    w0, #0x16, w0
    37fa:	80 00 78    	mov.w     w0, w1
    37fc:	40 87 20    	mov.w     #0x874, w0
    37fe:	00 80 40    	add.w     w1, w0, w0
    3800:	46 00 07    	rcall     0x388e <_pin_digitalIn>

00003802 <.LSM37>:
    3802:	1e 0f e8    	inc.w     [w14], [w14]

00003804 <.L8>:
    3804:	1e 00 78    	mov.w     [w14], w0
    3806:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    3808:	f6 ff 36    	bra       LEU, 0x37f6 <.L9>

0000380a <.LSM38>:
    for (i = 0; i<6; i++)
    380a:	00 00 eb    	clr.w     w0
    380c:	00 0f 78    	mov.w     w0, [w14]
    380e:	07 00 37    	bra       0x381e <.L10>

00003810 <.L11>:
        pin_analogIn(&A[i]);
    3810:	1e 00 78    	mov.w     [w14], w0
    3812:	76 00 b9    	mul.su    w0, #0x16, w0
    3814:	80 00 78    	mov.w     w0, w1
    3816:	80 9a 20    	mov.w     #0x9a8, w0
    3818:	00 80 40    	add.w     w1, w0, w0
    381a:	95 00 07    	rcall     0x3946 <_pin_analogIn>

0000381c <.LSM40>:
    381c:	1e 0f e8    	inc.w     [w14], [w14]

0000381e <.L10>:
    381e:	1e 00 78    	mov.w     [w14], w0
    3820:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3822:	f6 ff 36    	bra       LEU, 0x3810 <.L11>

00003824 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    3824:	00 2e 20    	mov.w     #0x2e0, w0
    3826:	00 19 88    	mov.w     w0, 0x320

00003828 <.LSM42>:
    AD1CON2 = 0;
    3828:	22 23 ef    	clr.w     0x322

0000382a <.LSM43>:
    AD1CON3 = 0x0C40;
    382a:	00 c4 20    	mov.w     #0xc40, w0
    382c:	20 19 88    	mov.w     w0, 0x324

0000382e <.LSM44>:
    AD1CHS = 0;
    382e:	28 23 ef    	clr.w     0x328

00003830 <.LSM45>:
    AD1CON1bits.ADON = 1;
    3830:	21 e3 a8    	bset.b    0x321, #0x7

00003832 <.LSM46>:
}
    3832:	00 80 fa    	ulnk      
    3834:	00 00 06    	return    

00003836 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    3836:	10 00 fa    	lnk       #0x10
    3838:	00 0f 78    	mov.w     w0, [w14]
    383a:	11 07 98    	mov.w     w1, [w14+2]
    383c:	22 07 98    	mov.w     w2, [w14+4]
    383e:	33 07 98    	mov.w     w3, [w14+6]
    3840:	04 4f 98    	mov.b     w4, [w14+8]
    3842:	55 07 98    	mov.w     w5, [w14+10]
    3844:	46 4f 98    	mov.b     w6, [w14+12]
    3846:	77 07 98    	mov.w     w7, [w14+14]

00003848 <.LSM48>:
    self->port = port;
    3848:	1e 00 78    	mov.w     [w14], w0
    384a:	9e 00 90    	mov.w     [w14+2], w1
    384c:	01 08 78    	mov.w     w1, [w0]

0000384e <.LSM49>:
    self->tris = tris;
    384e:	1e 00 78    	mov.w     [w14], w0
    3850:	ae 00 90    	mov.w     [w14+4], w1
    3852:	11 00 98    	mov.w     w1, [w0+2]

00003854 <.LSM50>:
    self->ans = ans;
    3854:	1e 00 78    	mov.w     [w14], w0
    3856:	be 00 90    	mov.w     [w14+6], w1
    3858:	21 00 98    	mov.w     w1, [w0+4]

0000385a <.LSM51>:
    self->bit = bit;
    385a:	1e 00 78    	mov.w     [w14], w0
    385c:	8e 48 90    	mov.b     [w14+8], w1
    385e:	61 40 98    	mov.b     w1, [w0+6]

00003860 <.LSM52>:
    self->annum = annum;
    3860:	1e 00 78    	mov.w     [w14], w0
    3862:	de 00 90    	mov.w     [w14+10], w1
    3864:	41 00 98    	mov.w     w1, [w0+8]

00003866 <.LSM53>:
    self->rpshift = rpshift;
    3866:	1e 00 78    	mov.w     [w14], w0
    3868:	ce 48 90    	mov.b     [w14+12], w1
    386a:	21 48 98    	mov.b     w1, [w0+10]

0000386c <.LSM54>:
    self->rpnum = rpnum;
    386c:	fe 00 90    	mov.w     [w14+14], w1
    386e:	1e 00 78    	mov.w     [w14], w0
    3870:	61 00 98    	mov.w     w1, [w0+12]

00003872 <.LSM55>:
    self->rpor = rpor;
    3872:	1e 00 78    	mov.w     [w14], w0
    3874:	ce b8 97    	mov.w     [w14-8], w1
    3876:	71 00 98    	mov.w     w1, [w0+14]

00003878 <.LSM56>:
    self->owner = NULL;
    3878:	1e 00 78    	mov.w     [w14], w0
    387a:	80 00 eb    	clr.w     w1
    387c:	01 08 98    	mov.w     w1, [w0+16]

0000387e <.LSM57>:
    self->write = NULL;
    387e:	1e 00 78    	mov.w     [w14], w0
    3880:	80 00 eb    	clr.w     w1
    3882:	11 08 98    	mov.w     w1, [w0+18]

00003884 <.LSM58>:
    self->read = NULL;
    3884:	1e 00 78    	mov.w     [w14], w0
    3886:	80 00 eb    	clr.w     w1
    3888:	21 08 98    	mov.w     w1, [w0+20]

0000388a <.LSM59>:
}
    388a:	00 80 fa    	ulnk      
    388c:	00 00 06    	return    

0000388e <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    388e:	02 00 fa    	lnk       #0x2
    3890:	00 0f 78    	mov.w     w0, [w14]

00003892 <.LSM61>:
    if (self->ans)
    3892:	1e 00 78    	mov.w     [w14], w0
    3894:	20 00 90    	mov.w     [w0+4], w0
    3896:	00 00 e0    	cp0.w     w0
    3898:	0d 00 32    	bra       Z, 0x38b4 <.L14>

0000389a <.LSM62>:
        bitclear(self->ans, self->bit);
    389a:	1e 00 78    	mov.w     [w14], w0
    389c:	20 00 90    	mov.w     [w0+4], w0
    389e:	9e 00 78    	mov.w     [w14], w1
    38a0:	a1 00 90    	mov.w     [w1+4], w1
    38a2:	11 01 78    	mov.w     [w1], w2
    38a4:	9e 00 78    	mov.w     [w14], w1
    38a6:	e1 40 90    	mov.b     [w1+6], w1
    38a8:	81 80 fb    	ze        w1, w1
    38aa:	13 00 20    	mov.w     #0x1, w3
    38ac:	81 18 dd    	sl.w      w3, w1, w1
    38ae:	81 80 ea    	com.w     w1, w1
    38b0:	81 00 61    	and.w     w2, w1, w1
    38b2:	01 08 78    	mov.w     w1, [w0]

000038b4 <.L14>:
    bitset(self->tris, self->bit);
    38b4:	1e 00 78    	mov.w     [w14], w0
    38b6:	10 00 90    	mov.w     [w0+2], w0
    38b8:	9e 00 78    	mov.w     [w14], w1
    38ba:	91 00 90    	mov.w     [w1+2], w1
    38bc:	11 01 78    	mov.w     [w1], w2
    38be:	9e 00 78    	mov.w     [w14], w1
    38c0:	e1 40 90    	mov.b     [w1+6], w1
    38c2:	81 80 fb    	ze        w1, w1
    38c4:	13 00 20    	mov.w     #0x1, w3
    38c6:	81 18 dd    	sl.w      w3, w1, w1
    38c8:	82 80 70    	ior.w     w1, w2, w1
    38ca:	01 08 78    	mov.w     w1, [w0]

000038cc <.LSM64>:
    self->write = NULL;
    38cc:	1e 00 78    	mov.w     [w14], w0
    38ce:	80 00 eb    	clr.w     w1
    38d0:	11 08 98    	mov.w     w1, [w0+18]

000038d2 <.LSM65>:
    self->read = __digitalRead;    
    38d2:	1e 00 78    	mov.w     [w14], w0
    38d4:	01 5d 23    	mov.w     #0x35d0, w1
    38d6:	21 08 98    	mov.w     w1, [w0+20]

000038d8 <.LSM66>:
}
    38d8:	00 80 fa    	ulnk      
    38da:	00 00 06    	return    

000038dc <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    38dc:	02 00 fa    	lnk       #0x2
    38de:	00 0f 78    	mov.w     w0, [w14]

000038e0 <.LSM68>:
    if (self->ans)
    38e0:	1e 00 78    	mov.w     [w14], w0
    38e2:	20 00 90    	mov.w     [w0+4], w0
    38e4:	00 00 e0    	cp0.w     w0
    38e6:	0d 00 32    	bra       Z, 0x3902 <.L16>

000038e8 <.LSM69>:
        bitclear(self->ans, self->bit);
    38e8:	1e 00 78    	mov.w     [w14], w0
    38ea:	20 00 90    	mov.w     [w0+4], w0
    38ec:	9e 00 78    	mov.w     [w14], w1
    38ee:	a1 00 90    	mov.w     [w1+4], w1
    38f0:	11 01 78    	mov.w     [w1], w2
    38f2:	9e 00 78    	mov.w     [w14], w1
    38f4:	e1 40 90    	mov.b     [w1+6], w1
    38f6:	81 80 fb    	ze        w1, w1
    38f8:	13 00 20    	mov.w     #0x1, w3
    38fa:	81 18 dd    	sl.w      w3, w1, w1
    38fc:	81 80 ea    	com.w     w1, w1
    38fe:	81 00 61    	and.w     w2, w1, w1
    3900:	01 08 78    	mov.w     w1, [w0]

00003902 <.L16>:
    bitclear(self->port, self->bit);
    3902:	1e 00 78    	mov.w     [w14], w0
    3904:	10 00 78    	mov.w     [w0], w0
    3906:	9e 00 78    	mov.w     [w14], w1
    3908:	91 00 78    	mov.w     [w1], w1
    390a:	11 01 78    	mov.w     [w1], w2
    390c:	9e 00 78    	mov.w     [w14], w1
    390e:	e1 40 90    	mov.b     [w1+6], w1
    3910:	81 80 fb    	ze        w1, w1
    3912:	13 00 20    	mov.w     #0x1, w3
    3914:	81 18 dd    	sl.w      w3, w1, w1
    3916:	81 80 ea    	com.w     w1, w1
    3918:	81 00 61    	and.w     w2, w1, w1
    391a:	01 08 78    	mov.w     w1, [w0]

0000391c <.LSM71>:
    bitclear(self->tris, self->bit);
    391c:	1e 00 78    	mov.w     [w14], w0
    391e:	10 00 90    	mov.w     [w0+2], w0
    3920:	9e 00 78    	mov.w     [w14], w1
    3922:	91 00 90    	mov.w     [w1+2], w1
    3924:	11 01 78    	mov.w     [w1], w2
    3926:	9e 00 78    	mov.w     [w14], w1
    3928:	e1 40 90    	mov.b     [w1+6], w1
    392a:	81 80 fb    	ze        w1, w1
    392c:	13 00 20    	mov.w     #0x1, w3
    392e:	81 18 dd    	sl.w      w3, w1, w1
    3930:	81 80 ea    	com.w     w1, w1
    3932:	81 00 61    	and.w     w2, w1, w1
    3934:	01 08 78    	mov.w     w1, [w0]

00003936 <.LSM72>:
    self->write = __digitalWrite;
    3936:	1e 00 78    	mov.w     [w14], w0
    3938:	c1 58 23    	mov.w     #0x358c, w1
    393a:	11 08 98    	mov.w     w1, [w0+18]

0000393c <.LSM73>:
    self->read = __digitalRead;
    393c:	1e 00 78    	mov.w     [w14], w0
    393e:	01 5d 23    	mov.w     #0x35d0, w1
    3940:	21 08 98    	mov.w     w1, [w0+20]

00003942 <.LSM74>:
}
    3942:	00 80 fa    	ulnk      
    3944:	00 00 06    	return    

00003946 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    3946:	02 00 fa    	lnk       #0x2
    3948:	00 0f 78    	mov.w     w0, [w14]

0000394a <.LSM76>:
    if (!(self->ans))
    394a:	1e 00 78    	mov.w     [w14], w0
    394c:	20 00 90    	mov.w     [w0+4], w0
    394e:	00 00 e0    	cp0.w     w0
    3950:	1f 00 32    	bra       Z, 0x3990 <.L20>

00003952 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    3952:	1e 00 78    	mov.w     [w14], w0
    3954:	10 00 90    	mov.w     [w0+2], w0
    3956:	9e 00 78    	mov.w     [w14], w1
    3958:	91 00 90    	mov.w     [w1+2], w1
    395a:	11 01 78    	mov.w     [w1], w2
    395c:	9e 00 78    	mov.w     [w14], w1
    395e:	e1 40 90    	mov.b     [w1+6], w1
    3960:	81 80 fb    	ze        w1, w1
    3962:	13 00 20    	mov.w     #0x1, w3
    3964:	81 18 dd    	sl.w      w3, w1, w1
    3966:	82 80 70    	ior.w     w1, w2, w1
    3968:	01 08 78    	mov.w     w1, [w0]

0000396a <.LSM78>:
    bitset(self->ans, self->bit);
    396a:	1e 00 78    	mov.w     [w14], w0
    396c:	20 00 90    	mov.w     [w0+4], w0
    396e:	9e 00 78    	mov.w     [w14], w1
    3970:	a1 00 90    	mov.w     [w1+4], w1
    3972:	11 01 78    	mov.w     [w1], w2
    3974:	9e 00 78    	mov.w     [w14], w1
    3976:	e1 40 90    	mov.b     [w1+6], w1
    3978:	81 80 fb    	ze        w1, w1
    397a:	13 00 20    	mov.w     #0x1, w3
    397c:	81 18 dd    	sl.w      w3, w1, w1
    397e:	82 80 70    	ior.w     w1, w2, w1
    3980:	01 08 78    	mov.w     w1, [w0]

00003982 <.LSM79>:
    self->write = NULL;
    3982:	1e 00 78    	mov.w     [w14], w0
    3984:	80 00 eb    	clr.w     w1
    3986:	11 08 98    	mov.w     w1, [w0+18]

00003988 <.LSM80>:
    self->read = __analogRead;
    3988:	1e 00 78    	mov.w     [w14], w0
    398a:	21 5f 23    	mov.w     #0x35f2, w1
    398c:	21 08 98    	mov.w     w1, [w0+20]
    398e:	01 00 37    	bra       0x3992 <.L17>

00003990 <.L20>:
    3990:	00 00 00    	nop       

00003992 <.L17>:
}
    3992:	00 80 fa    	ulnk      
    3994:	00 00 06    	return    

00003996 <_pin_set>:

void pin_set(_PIN *self) {
    3996:	02 00 fa    	lnk       #0x2
    3998:	00 0f 78    	mov.w     w0, [w14]

0000399a <.LSM84>:
    if (self->write==__digitalWrite)
    399a:	1e 00 78    	mov.w     [w14], w0
    399c:	90 08 90    	mov.w     [w0+18], w1
    399e:	c0 58 23    	mov.w     #0x358c, w0
    39a0:	80 8f 50    	sub.w     w1, w0, [w15]
    39a2:	0c 00 3a    	bra       NZ, 0x39bc <.L21>

000039a4 <.LSM85>:
        bitset(self->port, self->bit);
    39a4:	1e 00 78    	mov.w     [w14], w0
    39a6:	10 00 78    	mov.w     [w0], w0
    39a8:	9e 00 78    	mov.w     [w14], w1
    39aa:	91 00 78    	mov.w     [w1], w1
    39ac:	11 01 78    	mov.w     [w1], w2
    39ae:	9e 00 78    	mov.w     [w14], w1
    39b0:	e1 40 90    	mov.b     [w1+6], w1
    39b2:	81 80 fb    	ze        w1, w1
    39b4:	13 00 20    	mov.w     #0x1, w3
    39b6:	81 18 dd    	sl.w      w3, w1, w1
    39b8:	82 80 70    	ior.w     w1, w2, w1
    39ba:	01 08 78    	mov.w     w1, [w0]

000039bc <.L21>:
}
    39bc:	00 80 fa    	ulnk      
    39be:	00 00 06    	return    

000039c0 <_pin_clear>:

void pin_clear(_PIN *self) {
    39c0:	02 00 fa    	lnk       #0x2
    39c2:	00 0f 78    	mov.w     w0, [w14]

000039c4 <.LSM88>:
    if (self->write==__digitalWrite)
    39c4:	1e 00 78    	mov.w     [w14], w0
    39c6:	90 08 90    	mov.w     [w0+18], w1
    39c8:	c0 58 23    	mov.w     #0x358c, w0
    39ca:	80 8f 50    	sub.w     w1, w0, [w15]
    39cc:	0d 00 3a    	bra       NZ, 0x39e8 <.L23>

000039ce <.LSM89>:
        bitclear(self->port, self->bit);
    39ce:	1e 00 78    	mov.w     [w14], w0
    39d0:	10 00 78    	mov.w     [w0], w0
    39d2:	9e 00 78    	mov.w     [w14], w1
    39d4:	91 00 78    	mov.w     [w1], w1
    39d6:	11 01 78    	mov.w     [w1], w2
    39d8:	9e 00 78    	mov.w     [w14], w1
    39da:	e1 40 90    	mov.b     [w1+6], w1
    39dc:	81 80 fb    	ze        w1, w1
    39de:	13 00 20    	mov.w     #0x1, w3
    39e0:	81 18 dd    	sl.w      w3, w1, w1
    39e2:	81 80 ea    	com.w     w1, w1
    39e4:	81 00 61    	and.w     w2, w1, w1
    39e6:	01 08 78    	mov.w     w1, [w0]

000039e8 <.L23>:
}
    39e8:	00 80 fa    	ulnk      
    39ea:	00 00 06    	return    

000039ec <_pin_toggle>:

void pin_toggle(_PIN *self) {
    39ec:	02 00 fa    	lnk       #0x2
    39ee:	00 0f 78    	mov.w     w0, [w14]

000039f0 <.LSM92>:
    if (self->write==__digitalWrite)
    39f0:	1e 00 78    	mov.w     [w14], w0
    39f2:	90 08 90    	mov.w     [w0+18], w1
    39f4:	c0 58 23    	mov.w     #0x358c, w0
    39f6:	80 8f 50    	sub.w     w1, w0, [w15]
    39f8:	0c 00 3a    	bra       NZ, 0x3a12 <.L25>

000039fa <.LSM93>:
        bitflip(self->port, self->bit);
    39fa:	1e 00 78    	mov.w     [w14], w0
    39fc:	10 00 78    	mov.w     [w0], w0
    39fe:	9e 00 78    	mov.w     [w14], w1
    3a00:	91 00 78    	mov.w     [w1], w1
    3a02:	11 01 78    	mov.w     [w1], w2
    3a04:	9e 00 78    	mov.w     [w14], w1
    3a06:	e1 40 90    	mov.b     [w1+6], w1
    3a08:	81 80 fb    	ze        w1, w1
    3a0a:	13 00 20    	mov.w     #0x1, w3
    3a0c:	81 18 dd    	sl.w      w3, w1, w1
    3a0e:	81 00 69    	xor.w     w2, w1, w1
    3a10:	01 08 78    	mov.w     w1, [w0]

00003a12 <.L25>:
}
    3a12:	00 80 fa    	ulnk      
    3a14:	00 00 06    	return    

00003a16 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3a16:	04 00 fa    	lnk       #0x4
    3a18:	00 0f 78    	mov.w     w0, [w14]
    3a1a:	11 07 98    	mov.w     w1, [w14+2]

00003a1c <.LSM96>:
    if (self->write)
    3a1c:	1e 00 78    	mov.w     [w14], w0
    3a1e:	10 08 90    	mov.w     [w0+18], w0
    3a20:	00 00 e0    	cp0.w     w0
    3a22:	05 00 32    	bra       Z, 0x3a2e <.L27>

00003a24 <.LSM97>:
        self->write(self, val);
    3a24:	1e 00 78    	mov.w     [w14], w0
    3a26:	10 09 90    	mov.w     [w0+18], w2
    3a28:	9e 00 90    	mov.w     [w14+2], w1
    3a2a:	1e 00 78    	mov.w     [w14], w0
    3a2c:	02 00 01    	call      w2

00003a2e <.L27>:
}
    3a2e:	00 80 fa    	ulnk      
    3a30:	00 00 06    	return    

00003a32 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3a32:	02 00 fa    	lnk       #0x2
    3a34:	00 0f 78    	mov.w     w0, [w14]

00003a36 <.LSM100>:
    if (self->read)
    3a36:	1e 00 78    	mov.w     [w14], w0
    3a38:	20 08 90    	mov.w     [w0+20], w0
    3a3a:	00 00 e0    	cp0.w     w0
    3a3c:	05 00 32    	bra       Z, 0x3a48 <.L30>

00003a3e <.LSM101>:
        return self->read(self);
    3a3e:	1e 00 78    	mov.w     [w14], w0
    3a40:	a0 08 90    	mov.w     [w0+20], w1
    3a42:	1e 00 78    	mov.w     [w14], w0
    3a44:	01 00 01    	call      w1
    3a46:	01 00 37    	bra       0x3a4a <.L31>

00003a48 <.L30>:
    else
        return 0xFFFF;
    3a48:	00 80 eb    	setm.w    w0

00003a4a <.L31>:
}
    3a4a:	00 80 fa    	ulnk      
    3a4c:	00 00 06    	return    

00003a4e <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    3a4e:	08 00 fa    	lnk       #0x8
    3a50:	30 07 98    	mov.w     w0, [w14+6]

00003a52 <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3a52:	3e 00 90    	mov.w     [w14+6], w0
    3a54:	00 08 90    	mov.w     [w0+16], w0
    3a56:	00 0f 78    	mov.w     w0, [w14]

00003a58 <.LSM2>:
    temp.w[0] = 0;
    3a58:	00 00 eb    	clr.w     w0
    3a5a:	10 07 98    	mov.w     w0, [w14+2]

00003a5c <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    3a5c:	1e 00 78    	mov.w     [w14], w0
    3a5e:	30 00 90    	mov.w     [w0+6], w0
    3a60:	10 00 78    	mov.w     [w0], w0
    3a62:	20 07 98    	mov.w     w0, [w14+4]

00003a64 <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    3a64:	1e 02 90    	mov.w     [w14+2], w4
    3a66:	ae 02 90    	mov.w     [w14+4], w5
    3a68:	1e 00 78    	mov.w     [w14], w0
    3a6a:	20 00 90    	mov.w     [w0+4], w0
    3a6c:	10 00 78    	mov.w     [w0], w0
    3a6e:	80 00 eb    	clr.w     w1
    3a70:	00 01 be    	mov.d     w0, w2
    3a72:	04 00 be    	mov.d     w4, w0
    3a74:	1a ed 07    	rcall     0x14aa <___udivsi3>
    3a76:	00 00 78    	mov.w     w0, w0

00003a78 <.LSM5>:
}
    3a78:	00 80 fa    	ulnk      
    3a7a:	00 00 06    	return    

00003a7c <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    3a7c:	0a 00 fa    	lnk       #0xa
    3a7e:	30 07 98    	mov.w     w0, [w14+6]
    3a80:	41 07 98    	mov.w     w1, [w14+8]

00003a82 <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3a82:	3e 00 90    	mov.w     [w14+6], w0
    3a84:	00 08 90    	mov.w     [w0+16], w0
    3a86:	00 0f 78    	mov.w     w0, [w14]

00003a88 <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    3a88:	4e 00 90    	mov.w     [w14+8], w0
    3a8a:	61 01 b8    	mul.uu    w0, #0x1, w2
    3a8c:	1e 00 78    	mov.w     [w14], w0
    3a8e:	20 00 90    	mov.w     [w0+4], w0
    3a90:	10 00 78    	mov.w     [w0], w0
    3a92:	80 00 eb    	clr.w     w1
    3a94:	00 9a b9    	mul.ss    w3, w0, w4
    3a96:	04 02 78    	mov.w     w4, w4
    3a98:	02 8b b9    	mul.ss    w1, w2, w6
    3a9a:	86 02 78    	mov.w     w6, w5
    3a9c:	05 02 42    	add.w     w4, w5, w4
    3a9e:	00 10 b8    	mul.uu    w2, w0, w0
    3aa0:	01 02 42    	add.w     w4, w1, w4
    3aa2:	84 00 78    	mov.w     w4, w1
    3aa4:	10 07 98    	mov.w     w0, [w14+2]
    3aa6:	21 07 98    	mov.w     w1, [w14+4]

00003aa8 <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    3aa8:	1e 00 78    	mov.w     [w14], w0
    3aaa:	30 00 90    	mov.w     [w0+6], w0
    3aac:	ae 00 90    	mov.w     [w14+4], w1
    3aae:	01 08 78    	mov.w     w1, [w0]

00003ab0 <.LSM10>:
}
    3ab0:	00 80 fa    	ulnk      
    3ab2:	00 00 06    	return    

00003ab4 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    3ab4:	08 00 fa    	lnk       #0x8
    3ab6:	30 07 98    	mov.w     w0, [w14+6]

00003ab8 <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3ab8:	3e 00 90    	mov.w     [w14+6], w0
    3aba:	00 08 90    	mov.w     [w0+16], w0
    3abc:	00 0f 78    	mov.w     w0, [w14]

00003abe <.LSM13>:
    temp.w[0] = 0;
    3abe:	00 00 eb    	clr.w     w0
    3ac0:	10 07 98    	mov.w     w0, [w14+2]

00003ac2 <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    3ac2:	1e 00 78    	mov.w     [w14], w0
    3ac4:	20 00 90    	mov.w     [w0+4], w0
    3ac6:	90 00 78    	mov.w     [w0], w1
    3ac8:	1e 00 78    	mov.w     [w14], w0
    3aca:	60 00 90    	mov.w     [w0+12], w0
    3acc:	00 80 50    	sub.w     w1, w0, w0
    3ace:	20 07 98    	mov.w     w0, [w14+4]

00003ad0 <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    3ad0:	1e 02 90    	mov.w     [w14+2], w4
    3ad2:	ae 02 90    	mov.w     [w14+4], w5
    3ad4:	1e 00 78    	mov.w     [w14], w0
    3ad6:	70 00 90    	mov.w     [w0+14], w0
    3ad8:	80 00 eb    	clr.w     w1
    3ada:	00 01 be    	mov.d     w0, w2
    3adc:	04 00 be    	mov.d     w4, w0
    3ade:	e5 ec 07    	rcall     0x14aa <___udivsi3>
    3ae0:	00 00 78    	mov.w     w0, w0

00003ae2 <.LSM16>:
}
    3ae2:	00 80 fa    	ulnk      
    3ae4:	00 00 06    	return    

00003ae6 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    3ae6:	0a 00 fa    	lnk       #0xa
    3ae8:	30 07 98    	mov.w     w0, [w14+6]
    3aea:	41 07 98    	mov.w     w1, [w14+8]

00003aec <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3aec:	3e 00 90    	mov.w     [w14+6], w0
    3aee:	00 08 90    	mov.w     [w0+16], w0
    3af0:	00 0f 78    	mov.w     w0, [w14]

00003af2 <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    3af2:	4e 00 90    	mov.w     [w14+8], w0
    3af4:	61 01 b8    	mul.uu    w0, #0x1, w2
    3af6:	1e 00 78    	mov.w     [w14], w0
    3af8:	70 00 90    	mov.w     [w0+14], w0
    3afa:	80 00 eb    	clr.w     w1
    3afc:	00 9a b9    	mul.ss    w3, w0, w4
    3afe:	04 02 78    	mov.w     w4, w4
    3b00:	02 8b b9    	mul.ss    w1, w2, w6
    3b02:	86 02 78    	mov.w     w6, w5
    3b04:	05 02 42    	add.w     w4, w5, w4
    3b06:	00 10 b8    	mul.uu    w2, w0, w0
    3b08:	01 02 42    	add.w     w4, w1, w4
    3b0a:	84 00 78    	mov.w     w4, w1
    3b0c:	10 07 98    	mov.w     w0, [w14+2]
    3b0e:	21 07 98    	mov.w     w1, [w14+4]

00003b10 <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    3b10:	1e 00 78    	mov.w     [w14], w0
    3b12:	20 00 90    	mov.w     [w0+4], w0
    3b14:	9e 00 78    	mov.w     [w14], w1
    3b16:	61 01 90    	mov.w     [w1+12], w2
    3b18:	ae 00 90    	mov.w     [w14+4], w1
    3b1a:	81 00 41    	add.w     w2, w1, w1
    3b1c:	01 08 78    	mov.w     w1, [w0]

00003b1e <.LSM21>:
}
    3b1e:	00 80 fa    	ulnk      
    3b20:	00 00 06    	return    

00003b22 <_init_oc>:

void init_oc(void) {
    3b22:	00 00 fa    	lnk       #0x0

00003b24 <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    3b24:	26 01 20    	mov.w     #0x12, w6
    3b26:	85 19 20    	mov.w     #0x198, w5
    3b28:	64 19 20    	mov.w     #0x196, w4
    3b2a:	43 19 20    	mov.w     #0x194, w3
    3b2c:	22 19 20    	mov.w     #0x192, w2
    3b2e:	01 19 20    	mov.w     #0x190, w1
    3b30:	80 b4 20    	mov.w     #0xb48, w0
    3b32:	42 00 07    	rcall     0x3bb8 <_oc_init>

00003b34 <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    3b34:	36 01 20    	mov.w     #0x13, w6
    3b36:	25 1a 20    	mov.w     #0x1a2, w5
    3b38:	04 1a 20    	mov.w     #0x1a0, w4
    3b3a:	e3 19 20    	mov.w     #0x19e, w3
    3b3c:	c2 19 20    	mov.w     #0x19c, w2
    3b3e:	a1 19 20    	mov.w     #0x19a, w1
    3b40:	a0 b5 20    	mov.w     #0xb5a, w0
    3b42:	3a 00 07    	rcall     0x3bb8 <_oc_init>

00003b44 <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    3b44:	46 01 20    	mov.w     #0x14, w6
    3b46:	c5 1a 20    	mov.w     #0x1ac, w5
    3b48:	a4 1a 20    	mov.w     #0x1aa, w4
    3b4a:	83 1a 20    	mov.w     #0x1a8, w3
    3b4c:	62 1a 20    	mov.w     #0x1a6, w2
    3b4e:	41 1a 20    	mov.w     #0x1a4, w1
    3b50:	c0 b6 20    	mov.w     #0xb6c, w0
    3b52:	32 00 07    	rcall     0x3bb8 <_oc_init>

00003b54 <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    3b54:	56 01 20    	mov.w     #0x15, w6
    3b56:	65 1b 20    	mov.w     #0x1b6, w5
    3b58:	44 1b 20    	mov.w     #0x1b4, w4
    3b5a:	23 1b 20    	mov.w     #0x1b2, w3
    3b5c:	02 1b 20    	mov.w     #0x1b0, w2
    3b5e:	e1 1a 20    	mov.w     #0x1ae, w1
    3b60:	e0 b7 20    	mov.w     #0xb7e, w0
    3b62:	2a 00 07    	rcall     0x3bb8 <_oc_init>

00003b64 <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    3b64:	66 01 20    	mov.w     #0x16, w6
    3b66:	05 1c 20    	mov.w     #0x1c0, w5
    3b68:	e4 1b 20    	mov.w     #0x1be, w4
    3b6a:	c3 1b 20    	mov.w     #0x1bc, w3
    3b6c:	a2 1b 20    	mov.w     #0x1ba, w2
    3b6e:	81 1b 20    	mov.w     #0x1b8, w1
    3b70:	00 b9 20    	mov.w     #0xb90, w0
    3b72:	22 00 07    	rcall     0x3bb8 <_oc_init>

00003b74 <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    3b74:	76 01 20    	mov.w     #0x17, w6
    3b76:	a5 1c 20    	mov.w     #0x1ca, w5
    3b78:	84 1c 20    	mov.w     #0x1c8, w4
    3b7a:	63 1c 20    	mov.w     #0x1c6, w3
    3b7c:	42 1c 20    	mov.w     #0x1c4, w2
    3b7e:	21 1c 20    	mov.w     #0x1c2, w1
    3b80:	20 ba 20    	mov.w     #0xba2, w0
    3b82:	1a 00 07    	rcall     0x3bb8 <_oc_init>

00003b84 <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    3b84:	86 01 20    	mov.w     #0x18, w6
    3b86:	45 1d 20    	mov.w     #0x1d4, w5
    3b88:	24 1d 20    	mov.w     #0x1d2, w4
    3b8a:	03 1d 20    	mov.w     #0x1d0, w3
    3b8c:	e2 1c 20    	mov.w     #0x1ce, w2
    3b8e:	c1 1c 20    	mov.w     #0x1cc, w1
    3b90:	40 bb 20    	mov.w     #0xbb4, w0
    3b92:	12 00 07    	rcall     0x3bb8 <_oc_init>

00003b94 <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    3b94:	96 01 20    	mov.w     #0x19, w6
    3b96:	e5 1d 20    	mov.w     #0x1de, w5
    3b98:	c4 1d 20    	mov.w     #0x1dc, w4
    3b9a:	a3 1d 20    	mov.w     #0x1da, w3
    3b9c:	82 1d 20    	mov.w     #0x1d8, w2
    3b9e:	61 1d 20    	mov.w     #0x1d6, w1
    3ba0:	60 bc 20    	mov.w     #0xbc6, w0
    3ba2:	0a 00 07    	rcall     0x3bb8 <_oc_init>

00003ba4 <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    3ba4:	36 02 20    	mov.w     #0x23, w6
    3ba6:	85 1e 20    	mov.w     #0x1e8, w5
    3ba8:	64 1e 20    	mov.w     #0x1e6, w4
    3baa:	43 1e 20    	mov.w     #0x1e4, w3
    3bac:	22 1e 20    	mov.w     #0x1e2, w2
    3bae:	01 1e 20    	mov.w     #0x1e0, w1
    3bb0:	80 bd 20    	mov.w     #0xbd8, w0
    3bb2:	02 00 07    	rcall     0x3bb8 <_oc_init>

00003bb4 <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    3bb4:	00 80 fa    	ulnk      
    3bb6:	00 00 06    	return    

00003bb8 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    3bb8:	0e 00 fa    	lnk       #0xe
    3bba:	00 0f 78    	mov.w     w0, [w14]
    3bbc:	11 07 98    	mov.w     w1, [w14+2]
    3bbe:	22 07 98    	mov.w     w2, [w14+4]
    3bc0:	33 07 98    	mov.w     w3, [w14+6]
    3bc2:	44 07 98    	mov.w     w4, [w14+8]
    3bc4:	55 07 98    	mov.w     w5, [w14+10]
    3bc6:	66 07 98    	mov.w     w6, [w14+12]

00003bc8 <.LSM34>:
    self->OCxCON1 = OCxCON1;
    3bc8:	1e 00 78    	mov.w     [w14], w0
    3bca:	9e 00 90    	mov.w     [w14+2], w1
    3bcc:	01 08 78    	mov.w     w1, [w0]

00003bce <.LSM35>:
    self->OCxCON2 = OCxCON2;
    3bce:	1e 00 78    	mov.w     [w14], w0
    3bd0:	ae 00 90    	mov.w     [w14+4], w1
    3bd2:	11 00 98    	mov.w     w1, [w0+2]

00003bd4 <.LSM36>:
    self->OCxRS = OCxRS;
    3bd4:	1e 00 78    	mov.w     [w14], w0
    3bd6:	be 00 90    	mov.w     [w14+6], w1
    3bd8:	21 00 98    	mov.w     w1, [w0+4]

00003bda <.LSM37>:
    self->OCxR = OCxR;
    3bda:	1e 00 78    	mov.w     [w14], w0
    3bdc:	ce 00 90    	mov.w     [w14+8], w1
    3bde:	31 00 98    	mov.w     w1, [w0+6]

00003be0 <.LSM38>:
    self->OCxTMR = OCxTMR;
    3be0:	1e 00 78    	mov.w     [w14], w0
    3be2:	de 00 90    	mov.w     [w14+10], w1
    3be4:	41 00 98    	mov.w     w1, [w0+8]

00003be6 <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    3be6:	1e 00 78    	mov.w     [w14], w0
    3be8:	01 e8 23    	mov.w     #0x3e80, w1
    3bea:	61 00 98    	mov.w     w1, [w0+12]

00003bec <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    3bec:	1e 00 78    	mov.w     [w14], w0
    3bee:	01 e8 23    	mov.w     #0x3e80, w1
    3bf0:	71 00 98    	mov.w     w1, [w0+14]

00003bf2 <.LSM41>:
    self->rpnum = rpnum;
    3bf2:	1e 00 78    	mov.w     [w14], w0
    3bf4:	ee 00 90    	mov.w     [w14+12], w1
    3bf6:	51 00 98    	mov.w     w1, [w0+10]

00003bf8 <.LSM42>:
    self->pin = NULL;
    3bf8:	1e 00 78    	mov.w     [w14], w0
    3bfa:	80 00 eb    	clr.w     w1
    3bfc:	01 08 98    	mov.w     w1, [w0+16]

00003bfe <.LSM43>:
}
    3bfe:	00 80 fa    	ulnk      
    3c00:	00 00 06    	return    

00003c02 <_oc_free>:

void oc_free(_OC *self) {
    3c02:	02 00 fa    	lnk       #0x2
    3c04:	00 0f 78    	mov.w     w0, [w14]

00003c06 <.LSM45>:
    *(self->OCxCON1) = 0;
    3c06:	1e 00 78    	mov.w     [w14], w0
    3c08:	10 00 78    	mov.w     [w0], w0
    3c0a:	80 00 eb    	clr.w     w1
    3c0c:	01 08 78    	mov.w     w1, [w0]

00003c0e <.LSM46>:
    *(self->OCxCON2) = 0;
    3c0e:	1e 00 78    	mov.w     [w14], w0
    3c10:	10 00 90    	mov.w     [w0+2], w0
    3c12:	80 00 eb    	clr.w     w1
    3c14:	01 08 78    	mov.w     w1, [w0]

00003c16 <.LSM47>:
    if (self->pin) {
    3c16:	1e 00 78    	mov.w     [w14], w0
    3c18:	00 08 90    	mov.w     [w0+16], w0
    3c1a:	00 00 e0    	cp0.w     w0
    3c1c:	2f 00 32    	bra       Z, 0x3c7c <.L7>

00003c1e <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3c1e:	11 3a 80    	mov.w     0x742, w1
    3c20:	f0 0b 20    	mov.w     #0xbf, w0
    3c22:	00 81 60    	and.w     w1, w0, w2
    3c24:	60 04 20    	mov.w     #0x46, w0
    3c26:	71 05 20    	mov.w     #0x57, w1
    3c28:	23 74 20    	mov.w     #0x742, w3
    3c2a:	80 49 78    	mov.b     w0, [w3]
    3c2c:	81 49 78    	mov.b     w1, [w3]
    3c2e:	82 49 78    	mov.b     w2, [w3]

00003c30 <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    3c30:	1e 00 78    	mov.w     [w14], w0
    3c32:	00 08 90    	mov.w     [w0+16], w0
    3c34:	70 00 90    	mov.w     [w0+14], w0
    3c36:	9e 00 78    	mov.w     [w14], w1
    3c38:	81 08 90    	mov.w     [w1+16], w1
    3c3a:	f1 00 90    	mov.w     [w1+14], w1
    3c3c:	11 01 78    	mov.w     [w1], w2
    3c3e:	9e 00 78    	mov.w     [w14], w1
    3c40:	81 08 90    	mov.w     [w1+16], w1
    3c42:	a1 48 90    	mov.b     [w1+10], w1
    3c44:	81 80 fb    	ze        w1, w1
    3c46:	f3 03 20    	mov.w     #0x3f, w3
    3c48:	81 18 dd    	sl.w      w3, w1, w1
    3c4a:	81 80 ea    	com.w     w1, w1
    3c4c:	81 00 61    	and.w     w2, w1, w1
    3c4e:	01 08 78    	mov.w     w1, [w0]

00003c50 <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3c50:	11 3a 80    	mov.w     0x742, w1
    3c52:	00 04 20    	mov.w     #0x40, w0
    3c54:	01 01 70    	ior.w     w0, w1, w2
    3c56:	60 04 20    	mov.w     #0x46, w0
    3c58:	71 05 20    	mov.w     #0x57, w1
    3c5a:	23 74 20    	mov.w     #0x742, w3
    3c5c:	80 49 78    	mov.b     w0, [w3]
    3c5e:	81 49 78    	mov.b     w1, [w3]
    3c60:	82 49 78    	mov.b     w2, [w3]

00003c62 <.LSM51>:
        self->pin->owner = NULL;
    3c62:	1e 00 78    	mov.w     [w14], w0
    3c64:	00 08 90    	mov.w     [w0+16], w0
    3c66:	80 00 eb    	clr.w     w1
    3c68:	01 08 98    	mov.w     w1, [w0+16]

00003c6a <.LSM52>:
        pin_digitalOut(self->pin);
    3c6a:	1e 00 78    	mov.w     [w14], w0
    3c6c:	00 08 90    	mov.w     [w0+16], w0
    3c6e:	36 fe 07    	rcall     0x38dc <_pin_digitalOut>

00003c70 <.LSM53>:
        pin_clear(self->pin);
    3c70:	1e 00 78    	mov.w     [w14], w0
    3c72:	00 08 90    	mov.w     [w0+16], w0
    3c74:	a5 fe 07    	rcall     0x39c0 <_pin_clear>

00003c76 <.LSM54>:
        self->pin = NULL;
    3c76:	1e 00 78    	mov.w     [w14], w0
    3c78:	80 00 eb    	clr.w     w1
    3c7a:	01 08 98    	mov.w     w1, [w0+16]

00003c7c <.L7>:
    }
}
    3c7c:	00 80 fa    	ulnk      
    3c7e:	00 00 06    	return    

00003c80 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    3c80:	10 00 fa    	lnk       #0x10
    3c82:	88 1f 78    	mov.w     w8, [w15++]
    3c84:	20 07 98    	mov.w     w0, [w14+4]
    3c86:	31 07 98    	mov.w     w1, [w14+6]
    3c88:	42 07 98    	mov.w     w2, [w14+8]
    3c8a:	54 07 98    	mov.w     w4, [w14+10]
    3c8c:	65 07 98    	mov.w     w5, [w14+12]
    3c8e:	73 07 98    	mov.w     w3, [w14+14]

00003c90 <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    3c90:	3e 00 90    	mov.w     [w14+6], w0
    3c92:	60 00 90    	mov.w     [w0+12], w0
    3c94:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3c96:	9c 00 32    	bra       Z, 0x3dd0 <.L18>

00003c98 <.LSM58>:
        return;
    if (pin->owner==NULL) {
    3c98:	3e 00 90    	mov.w     [w14+6], w0
    3c9a:	00 08 90    	mov.w     [w0+16], w0
    3c9c:	00 00 e0    	cp0.w     w0
    3c9e:	33 00 3a    	bra       NZ, 0x3d06 <.L12>

00003ca0 <.LSM59>:
        self->pin = pin;
    3ca0:	2e 00 90    	mov.w     [w14+4], w0
    3ca2:	be 00 90    	mov.w     [w14+6], w1
    3ca4:	01 08 98    	mov.w     w1, [w0+16]

00003ca6 <.LSM60>:
        pin->owner = (void *)self;
    3ca6:	3e 00 90    	mov.w     [w14+6], w0
    3ca8:	ae 00 90    	mov.w     [w14+4], w1
    3caa:	01 08 98    	mov.w     w1, [w0+16]

00003cac <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3cac:	11 3a 80    	mov.w     0x742, w1
    3cae:	f0 0b 20    	mov.w     #0xbf, w0
    3cb0:	00 81 60    	and.w     w1, w0, w2
    3cb2:	60 04 20    	mov.w     #0x46, w0
    3cb4:	71 05 20    	mov.w     #0x57, w1
    3cb6:	23 74 20    	mov.w     #0x742, w3
    3cb8:	80 49 78    	mov.b     w0, [w3]
    3cba:	81 49 78    	mov.b     w1, [w3]
    3cbc:	82 49 78    	mov.b     w2, [w3]

00003cbe <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    3cbe:	3e 00 90    	mov.w     [w14+6], w0
    3cc0:	70 00 90    	mov.w     [w0+14], w0
    3cc2:	be 00 90    	mov.w     [w14+6], w1
    3cc4:	f1 00 90    	mov.w     [w1+14], w1
    3cc6:	11 01 78    	mov.w     [w1], w2
    3cc8:	be 00 90    	mov.w     [w14+6], w1
    3cca:	a1 48 90    	mov.b     [w1+10], w1
    3ccc:	81 80 fb    	ze        w1, w1
    3cce:	f3 03 20    	mov.w     #0x3f, w3
    3cd0:	81 18 dd    	sl.w      w3, w1, w1
    3cd2:	81 80 ea    	com.w     w1, w1
    3cd4:	81 00 61    	and.w     w2, w1, w1
    3cd6:	01 08 78    	mov.w     w1, [w0]

00003cd8 <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3cd8:	3e 00 90    	mov.w     [w14+6], w0
    3cda:	70 00 90    	mov.w     [w0+14], w0
    3cdc:	be 00 90    	mov.w     [w14+6], w1
    3cde:	f1 00 90    	mov.w     [w1+14], w1
    3ce0:	11 01 78    	mov.w     [w1], w2
    3ce2:	ae 00 90    	mov.w     [w14+4], w1
    3ce4:	d1 01 90    	mov.w     [w1+10], w3
    3ce6:	be 00 90    	mov.w     [w14+6], w1
    3ce8:	a1 48 90    	mov.b     [w1+10], w1
    3cea:	81 80 fb    	ze        w1, w1
    3cec:	81 18 dd    	sl.w      w3, w1, w1
    3cee:	82 80 70    	ior.w     w1, w2, w1
    3cf0:	01 08 78    	mov.w     w1, [w0]

00003cf2 <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3cf2:	11 3a 80    	mov.w     0x742, w1
    3cf4:	00 04 20    	mov.w     #0x40, w0
    3cf6:	01 01 70    	ior.w     w0, w1, w2
    3cf8:	60 04 20    	mov.w     #0x46, w0
    3cfa:	71 05 20    	mov.w     #0x57, w1
    3cfc:	23 74 20    	mov.w     #0x742, w3
    3cfe:	80 49 78    	mov.b     w0, [w3]
    3d00:	81 49 78    	mov.b     w1, [w3]
    3d02:	82 49 78    	mov.b     w2, [w3]
    3d04:	05 00 37    	bra       0x3d10 <.L13>

00003d06 <.L12>:
    } else if (pin->owner!=(void *)self) {
    3d06:	3e 00 90    	mov.w     [w14+6], w0
    3d08:	80 08 90    	mov.w     [w0+16], w1
    3d0a:	2e 00 90    	mov.w     [w14+4], w0
    3d0c:	80 8f 50    	sub.w     w1, w0, [w15]
    3d0e:	62 00 3a    	bra       NZ, 0x3dd4 <.L19>

00003d10 <.L13>:
        return;
    }
    if (timer) {
    3d10:	4e 00 90    	mov.w     [w14+8], w0
    3d12:	00 00 e0    	cp0.w     w0
    3d14:	1c 00 32    	bra       Z, 0x3d4e <.L14>

00003d16 <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    3d16:	2e 00 90    	mov.w     [w14+4], w0
    3d18:	10 00 78    	mov.w     [w0], w0
    3d1a:	ce 00 90    	mov.w     [w14+8], w1
    3d1c:	e1 00 90    	mov.w     [w1+12], w1
    3d1e:	ca 08 dd    	sl.w      w1, #0xa, w1
    3d20:	61 00 b3    	ior.w     #0x6, w1
    3d22:	01 08 78    	mov.w     w1, [w0]

00003d24 <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    3d24:	2e 00 90    	mov.w     [w14+4], w0
    3d26:	10 00 90    	mov.w     [w0+2], w0
    3d28:	f1 01 20    	mov.w     #0x1f, w1
    3d2a:	01 08 78    	mov.w     w1, [w0]

00003d2c <.LSM69>:
        timer_setFreq(timer, freq);
    3d2c:	5e 01 90    	mov.w     [w14+10], w2
    3d2e:	ee 01 90    	mov.w     [w14+12], w3
    3d30:	4e 00 90    	mov.w     [w14+8], w0
    3d32:	e3 f8 07    	rcall     0x2efa <_timer_setFreq>

00003d34 <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    3d34:	2e 00 90    	mov.w     [w14+4], w0
    3d36:	20 00 90    	mov.w     [w0+4], w0
    3d38:	ce 00 90    	mov.w     [w14+8], w1
    3d3a:	91 00 90    	mov.w     [w1+2], w1
    3d3c:	91 00 78    	mov.w     [w1], w1
    3d3e:	01 08 78    	mov.w     w1, [w0]

00003d40 <.LSM71>:
        *(self->OCxTMR) = 0;
    3d40:	2e 00 90    	mov.w     [w14+4], w0
    3d42:	40 00 90    	mov.w     [w0+8], w0
    3d44:	80 00 eb    	clr.w     w1
    3d46:	01 08 78    	mov.w     w1, [w0]

00003d48 <.LSM72>:
        timer_start(timer);
    3d48:	4e 00 90    	mov.w     [w14+8], w0
    3d4a:	0c f9 07    	rcall     0x2f64 <_timer_start>
    3d4c:	25 00 37    	bra       0x3d98 <.L15>

00003d4e <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    3d4e:	2e 00 90    	mov.w     [w14+4], w0
    3d50:	10 00 78    	mov.w     [w0], w0
    3d52:	61 c0 21    	mov.w     #0x1c06, w1
    3d54:	01 08 78    	mov.w     w1, [w0]

00003d56 <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    3d56:	2e 00 90    	mov.w     [w14+4], w0
    3d58:	10 00 90    	mov.w     [w0+2], w0
    3d5a:	f1 01 20    	mov.w     #0x1f, w1
    3d5c:	01 08 78    	mov.w     w1, [w0]

00003d5e <.LSM75>:
        if (freq<(FCY/65536.))
    3d5e:	18 c0 b3    	mov.b     #0x1, w8
    3d60:	02 40 22    	mov.w     #0x2400, w2
    3d62:	43 37 24    	mov.w     #0x4374, w3
    3d64:	5e 00 90    	mov.w     [w14+10], w0
    3d66:	ee 00 90    	mov.w     [w14+12], w1
    3d68:	f6 ea 07    	rcall     0x1356 <___eqsf2>
    3d6a:	00 00 e0    	cp0.w     w0
    3d6c:	01 00 35    	bra       LT, 0x3d70 <.L16>
    3d6e:	00 44 eb    	clr.b     w8

00003d70 <.L16>:
    3d70:	08 04 e0    	cp0.b     w8
    3d72:	05 00 32    	bra       Z, 0x3d7e <.L17>

00003d74 <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    3d74:	2e 00 90    	mov.w     [w14+4], w0
    3d76:	20 00 90    	mov.w     [w0+4], w0
    3d78:	80 80 eb    	setm.w    w1
    3d7a:	01 08 78    	mov.w     w1, [w0]
    3d7c:	0d 00 37    	bra       0x3d98 <.L15>

00003d7e <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    3d7e:	2e 00 90    	mov.w     [w14+4], w0
    3d80:	20 04 90    	mov.w     [w0+4], w8
    3d82:	5e 01 90    	mov.w     [w14+10], w2
    3d84:	ee 01 90    	mov.w     [w14+12], w3
    3d86:	00 40 22    	mov.w     #0x2400, w0
    3d88:	41 b7 24    	mov.w     #0x4b74, w1
    3d8a:	a3 ea 07    	rcall     0x12d2 <___divsf3>
    3d8c:	02 00 20    	mov.w     #0x0, w2
    3d8e:	03 f8 23    	mov.w     #0x3f80, w3
    3d90:	42 ea 07    	rcall     0x1216 <___subsf3>
    3d92:	e5 ea 07    	rcall     0x135e <___fixunssfsi>
    3d94:	00 00 78    	mov.w     w0, w0
    3d96:	00 0c 78    	mov.w     w0, [w8]

00003d98 <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    3d98:	7e 00 90    	mov.w     [w14+14], w0
    3d9a:	61 01 b8    	mul.uu    w0, #0x1, w2
    3d9c:	2e 00 90    	mov.w     [w14+4], w0
    3d9e:	20 00 90    	mov.w     [w0+4], w0
    3da0:	10 00 78    	mov.w     [w0], w0
    3da2:	80 00 eb    	clr.w     w1
    3da4:	00 9a b9    	mul.ss    w3, w0, w4
    3da6:	04 02 78    	mov.w     w4, w4
    3da8:	02 8b b9    	mul.ss    w1, w2, w6
    3daa:	86 02 78    	mov.w     w6, w5
    3dac:	05 02 42    	add.w     w4, w5, w4
    3dae:	00 10 b8    	mul.uu    w2, w0, w0
    3db0:	01 02 42    	add.w     w4, w1, w4
    3db2:	84 00 78    	mov.w     w4, w1
    3db4:	00 8f be    	mov.d     w0, [w14]

00003db6 <.LSM79>:
    *(self->OCxR) = temp.w[1];
    3db6:	2e 00 90    	mov.w     [w14+4], w0
    3db8:	30 00 90    	mov.w     [w0+6], w0
    3dba:	9e 00 90    	mov.w     [w14+2], w1
    3dbc:	01 08 78    	mov.w     w1, [w0]

00003dbe <.LSM80>:
    self->pin->write = __pwmWrite;
    3dbe:	2e 00 90    	mov.w     [w14+4], w0
    3dc0:	00 08 90    	mov.w     [w0+16], w0
    3dc2:	c1 a7 23    	mov.w     #0x3a7c, w1
    3dc4:	11 08 98    	mov.w     w1, [w0+18]

00003dc6 <.LSM81>:
    self->pin->read = __pwmRead;
    3dc6:	2e 00 90    	mov.w     [w14+4], w0
    3dc8:	00 08 90    	mov.w     [w0+16], w0
    3dca:	e1 a4 23    	mov.w     #0x3a4e, w1
    3dcc:	21 08 98    	mov.w     w1, [w0+20]
    3dce:	03 00 37    	bra       0x3dd6 <.L9>

00003dd0 <.L18>:
    3dd0:	00 00 00    	nop       
    3dd2:	01 00 37    	bra       0x3dd6 <.L9>

00003dd4 <.L19>:
    3dd4:	00 00 00    	nop       

00003dd6 <.L9>:
}
    3dd6:	4f 04 78    	mov.w     [--w15], w8
    3dd8:	00 80 fa    	ulnk      
    3dda:	00 00 06    	return    

00003ddc <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    3ddc:	14 00 fa    	lnk       #0x14
    3dde:	20 07 98    	mov.w     w0, [w14+4]
    3de0:	31 07 98    	mov.w     w1, [w14+6]
    3de2:	42 07 98    	mov.w     w2, [w14+8]
    3de4:	54 07 98    	mov.w     w4, [w14+10]
    3de6:	65 07 98    	mov.w     w5, [w14+12]
    3de8:	76 07 98    	mov.w     w6, [w14+14]
    3dea:	07 0f 98    	mov.w     w7, [w14+16]
    3dec:	13 0f 98    	mov.w     w3, [w14+18]

00003dee <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    3dee:	3e 00 90    	mov.w     [w14+6], w0
    3df0:	60 00 90    	mov.w     [w0+12], w0
    3df2:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3df4:	87 00 32    	bra       Z, 0x3f04 <.L25>

00003df6 <.LSM87>:
        return;
    if (pin->owner==NULL) {
    3df6:	3e 00 90    	mov.w     [w14+6], w0
    3df8:	00 08 90    	mov.w     [w0+16], w0
    3dfa:	00 00 e0    	cp0.w     w0
    3dfc:	33 00 3a    	bra       NZ, 0x3e64 <.L23>

00003dfe <.LSM88>:
        self->pin = pin;
    3dfe:	2e 00 90    	mov.w     [w14+4], w0
    3e00:	be 00 90    	mov.w     [w14+6], w1
    3e02:	01 08 98    	mov.w     w1, [w0+16]

00003e04 <.LSM89>:
        pin->owner = (void *)self;
    3e04:	3e 00 90    	mov.w     [w14+6], w0
    3e06:	ae 00 90    	mov.w     [w14+4], w1
    3e08:	01 08 98    	mov.w     w1, [w0+16]

00003e0a <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3e0a:	11 3a 80    	mov.w     0x742, w1
    3e0c:	f0 0b 20    	mov.w     #0xbf, w0
    3e0e:	00 81 60    	and.w     w1, w0, w2
    3e10:	60 04 20    	mov.w     #0x46, w0
    3e12:	71 05 20    	mov.w     #0x57, w1
    3e14:	23 74 20    	mov.w     #0x742, w3
    3e16:	80 49 78    	mov.b     w0, [w3]
    3e18:	81 49 78    	mov.b     w1, [w3]
    3e1a:	82 49 78    	mov.b     w2, [w3]

00003e1c <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    3e1c:	3e 00 90    	mov.w     [w14+6], w0
    3e1e:	70 00 90    	mov.w     [w0+14], w0
    3e20:	be 00 90    	mov.w     [w14+6], w1
    3e22:	f1 00 90    	mov.w     [w1+14], w1
    3e24:	11 01 78    	mov.w     [w1], w2
    3e26:	be 00 90    	mov.w     [w14+6], w1
    3e28:	a1 48 90    	mov.b     [w1+10], w1
    3e2a:	81 80 fb    	ze        w1, w1
    3e2c:	f3 03 20    	mov.w     #0x3f, w3
    3e2e:	81 18 dd    	sl.w      w3, w1, w1
    3e30:	81 80 ea    	com.w     w1, w1
    3e32:	81 00 61    	and.w     w2, w1, w1
    3e34:	01 08 78    	mov.w     w1, [w0]

00003e36 <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    3e36:	3e 00 90    	mov.w     [w14+6], w0
    3e38:	70 00 90    	mov.w     [w0+14], w0
    3e3a:	be 00 90    	mov.w     [w14+6], w1
    3e3c:	f1 00 90    	mov.w     [w1+14], w1
    3e3e:	11 01 78    	mov.w     [w1], w2
    3e40:	ae 00 90    	mov.w     [w14+4], w1
    3e42:	d1 01 90    	mov.w     [w1+10], w3
    3e44:	be 00 90    	mov.w     [w14+6], w1
    3e46:	a1 48 90    	mov.b     [w1+10], w1
    3e48:	81 80 fb    	ze        w1, w1
    3e4a:	81 18 dd    	sl.w      w3, w1, w1
    3e4c:	82 80 70    	ior.w     w1, w2, w1
    3e4e:	01 08 78    	mov.w     w1, [w0]

00003e50 <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3e50:	11 3a 80    	mov.w     0x742, w1
    3e52:	00 04 20    	mov.w     #0x40, w0
    3e54:	01 01 70    	ior.w     w0, w1, w2
    3e56:	60 04 20    	mov.w     #0x46, w0
    3e58:	71 05 20    	mov.w     #0x57, w1
    3e5a:	23 74 20    	mov.w     #0x742, w3
    3e5c:	80 49 78    	mov.b     w0, [w3]
    3e5e:	81 49 78    	mov.b     w1, [w3]
    3e60:	82 49 78    	mov.b     w2, [w3]
    3e62:	05 00 37    	bra       0x3e6e <.L24>

00003e64 <.L23>:
    } else if (pin->owner!=(void *)self) {
    3e64:	3e 00 90    	mov.w     [w14+6], w0
    3e66:	80 08 90    	mov.w     [w0+16], w1
    3e68:	2e 00 90    	mov.w     [w14+4], w0
    3e6a:	80 8f 50    	sub.w     w1, w0, [w15]
    3e6c:	4d 00 3a    	bra       NZ, 0x3f08 <.L26>

00003e6e <.L24>:
        return;
    }
    if (timer) {
    3e6e:	4e 00 90    	mov.w     [w14+8], w0
    3e70:	00 00 e0    	cp0.w     w0
    3e72:	4b 00 32    	bra       Z, 0x3f0a <.L20>

00003e74 <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    3e74:	02 40 22    	mov.w     #0x2400, w2
    3e76:	43 b7 24    	mov.w     #0x4b74, w3
    3e78:	7e 00 90    	mov.w     [w14+14], w0
    3e7a:	8e 08 90    	mov.w     [w14+16], w1
    3e7c:	e2 ea 07    	rcall     0x1442 <___mulsf3>
    3e7e:	6f ea 07    	rcall     0x135e <___fixunssfsi>
    3e80:	80 00 78    	mov.w     w0, w1
    3e82:	2e 00 90    	mov.w     [w14+4], w0
    3e84:	61 00 98    	mov.w     w1, [w0+12]

00003e86 <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    3e86:	7e 01 90    	mov.w     [w14+14], w2
    3e88:	8e 09 90    	mov.w     [w14+16], w3
    3e8a:	3e b8 97    	mov.w     [w14-10], w0
    3e8c:	ce b8 97    	mov.w     [w14-8], w1
    3e8e:	c3 e9 07    	rcall     0x1216 <___subsf3>
    3e90:	02 40 22    	mov.w     #0x2400, w2
    3e92:	43 b7 24    	mov.w     #0x4b74, w3
    3e94:	d6 ea 07    	rcall     0x1442 <___mulsf3>
    3e96:	63 ea 07    	rcall     0x135e <___fixunssfsi>
    3e98:	80 00 78    	mov.w     w0, w1
    3e9a:	2e 00 90    	mov.w     [w14+4], w0
    3e9c:	71 00 98    	mov.w     w1, [w0+14]

00003e9e <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    3e9e:	2e 00 90    	mov.w     [w14+4], w0
    3ea0:	10 00 78    	mov.w     [w0], w0
    3ea2:	f1 c0 21    	mov.w     #0x1c0f, w1
    3ea4:	01 08 78    	mov.w     w1, [w0]

00003ea6 <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    3ea6:	2e 00 90    	mov.w     [w14+4], w0
    3ea8:	10 00 90    	mov.w     [w0+2], w0
    3eaa:	ce 00 90    	mov.w     [w14+8], w1
    3eac:	71 01 90    	mov.w     [w1+14], w2
    3eae:	01 08 20    	mov.w     #0x80, w1
    3eb0:	82 80 70    	ior.w     w1, w2, w1
    3eb2:	01 08 78    	mov.w     w1, [w0]

00003eb4 <.LSM100>:
        *(self->OCxR) = 1;
    3eb4:	2e 00 90    	mov.w     [w14+4], w0
    3eb6:	30 00 90    	mov.w     [w0+6], w0
    3eb8:	11 00 20    	mov.w     #0x1, w1
    3eba:	01 08 78    	mov.w     w1, [w0]

00003ebc <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    3ebc:	1e 08 90    	mov.w     [w14+18], w0
    3ebe:	61 01 b8    	mul.uu    w0, #0x1, w2
    3ec0:	2e 00 90    	mov.w     [w14+4], w0
    3ec2:	70 00 90    	mov.w     [w0+14], w0
    3ec4:	80 00 eb    	clr.w     w1
    3ec6:	00 9a b9    	mul.ss    w3, w0, w4
    3ec8:	04 02 78    	mov.w     w4, w4
    3eca:	02 8b b9    	mul.ss    w1, w2, w6
    3ecc:	86 02 78    	mov.w     w6, w5
    3ece:	05 02 42    	add.w     w4, w5, w4
    3ed0:	00 10 b8    	mul.uu    w2, w0, w0
    3ed2:	01 02 42    	add.w     w4, w1, w4
    3ed4:	84 00 78    	mov.w     w4, w1
    3ed6:	00 8f be    	mov.d     w0, [w14]

00003ed8 <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    3ed8:	2e 00 90    	mov.w     [w14+4], w0
    3eda:	20 00 90    	mov.w     [w0+4], w0
    3edc:	ae 00 90    	mov.w     [w14+4], w1
    3ede:	61 01 90    	mov.w     [w1+12], w2
    3ee0:	9e 00 90    	mov.w     [w14+2], w1
    3ee2:	81 00 41    	add.w     w2, w1, w1
    3ee4:	01 08 78    	mov.w     w1, [w0]

00003ee6 <.LSM103>:
        timer_setPeriod(timer, interval);
    3ee6:	5e 01 90    	mov.w     [w14+10], w2
    3ee8:	ee 01 90    	mov.w     [w14+12], w3
    3eea:	4e 00 90    	mov.w     [w14+8], w0
    3eec:	6c f7 07    	rcall     0x2dc6 <_timer_setPeriod>

00003eee <.LSM104>:
        timer_start(timer);
    3eee:	4e 00 90    	mov.w     [w14+8], w0
    3ef0:	39 f8 07    	rcall     0x2f64 <_timer_start>

00003ef2 <.LSM105>:
        self->pin->write = __servoWrite;
    3ef2:	2e 00 90    	mov.w     [w14+4], w0
    3ef4:	00 08 90    	mov.w     [w0+16], w0
    3ef6:	61 ae 23    	mov.w     #0x3ae6, w1
    3ef8:	11 08 98    	mov.w     w1, [w0+18]

00003efa <.LSM106>:
        self->pin->read = __servoRead;
    3efa:	2e 00 90    	mov.w     [w14+4], w0
    3efc:	00 08 90    	mov.w     [w0+16], w0
    3efe:	41 ab 23    	mov.w     #0x3ab4, w1
    3f00:	21 08 98    	mov.w     w1, [w0+20]
    3f02:	03 00 37    	bra       0x3f0a <.L20>

00003f04 <.L25>:
    3f04:	00 00 00    	nop       
    3f06:	01 00 37    	bra       0x3f0a <.L20>

00003f08 <.L26>:
    3f08:	00 00 00    	nop       

00003f0a <.L20>:
    }
}
    3f0a:	00 80 fa    	ulnk      
    3f0c:	00 00 06    	return    

00003f0e <_init_st>:
#include "ui.h"

_ST st_d;

void init_st(void) {
    3f0e:	00 00 fa    	lnk       #0x0

00003f10 <.LSM1>:
    st_init(&st_d, &D[0], &D[1], &D[2], &D[3], &D[4], &D[5], &D[6], &D[7], 1e3, &oc5, 0x7FFF);
    3f10:	f0 ff 27    	mov.w     #0x7fff, w0
    3f12:	80 1f 78    	mov.w     w0, [w15++]
    3f14:	00 b9 20    	mov.w     #0xb90, w0
    3f16:	80 1f 78    	mov.w     w0, [w15++]
    3f18:	80 3e 20    	mov.w     #0x3e8, w0
    3f1a:	80 1f 78    	mov.w     w0, [w15++]
    3f1c:	e0 90 20    	mov.w     #0x90e, w0
    3f1e:	80 1f 78    	mov.w     w0, [w15++]
    3f20:	87 8f 20    	mov.w     #0x8f8, w7
    3f22:	26 8e 20    	mov.w     #0x8e2, w6
    3f24:	c5 8c 20    	mov.w     #0x8cc, w5
    3f26:	64 8b 20    	mov.w     #0x8b6, w4
    3f28:	03 8a 20    	mov.w     #0x8a0, w3
    3f2a:	a2 88 20    	mov.w     #0x88a, w2
    3f2c:	41 87 20    	mov.w     #0x874, w1
    3f2e:	60 de 20    	mov.w     #0xde6, w0
    3f30:	04 00 07    	rcall     0x3f3a <_st_init>
    3f32:	e8 87 57    	sub.w     w15, #0x8, w15

00003f34 <.LSM2>:
    init_ui();
    3f34:	3a 01 07    	rcall     0x41aa <_init_ui>

00003f36 <.LSM3>:
}
    3f36:	00 80 fa    	ulnk      
    3f38:	00 00 06    	return    

00003f3a <_st_init>:

void st_init(_ST *self, _PIN *pin1, _PIN *pin2, _PIN *pin3, _PIN *pin4, _PIN *pin5, _PIN *pin6, _PIN *pin7, _PIN *pin8, uint16_t freq, _OC *oc, uint16_t duty_cyc) {
    3f3a:	12 00 fa    	lnk       #0x12
    3f3c:	10 07 98    	mov.w     w0, [w14+2]
    3f3e:	21 07 98    	mov.w     w1, [w14+4]
    3f40:	32 07 98    	mov.w     w2, [w14+6]
    3f42:	43 07 98    	mov.w     w3, [w14+8]
    3f44:	54 07 98    	mov.w     w4, [w14+10]
    3f46:	65 07 98    	mov.w     w5, [w14+12]
    3f48:	76 07 98    	mov.w     w6, [w14+14]
    3f4a:	07 0f 98    	mov.w     w7, [w14+16]

00003f4c <.LSM5>:
    self->dir = 0;
    3f4c:	1e 00 90    	mov.w     [w14+2], w0
    3f4e:	80 40 eb    	clr.b     w1
    3f50:	01 48 78    	mov.b     w1, [w0]

00003f52 <.LSM6>:
    self->speed = 0;
    3f52:	1e 01 90    	mov.w     [w14+2], w2
    3f54:	60 00 b8    	mul.uu    w0, #0x0, w0
    3f56:	10 01 98    	mov.w     w0, [w2+2]
    3f58:	21 01 98    	mov.w     w1, [w2+4]

00003f5a <.LSM7>:
    self->step_size = 0;
    3f5a:	1e 00 90    	mov.w     [w14+2], w0
    3f5c:	80 00 eb    	clr.w     w1
    3f5e:	31 00 98    	mov.w     w1, [w0+6]

00003f60 <.LSM8>:
    self->state = 0;
    3f60:	1e 00 90    	mov.w     [w14+2], w0
    3f62:	80 40 eb    	clr.b     w1
    3f64:	01 48 98    	mov.b     w1, [w0+8]

00003f66 <.LSM9>:
    self->duty_cyc = duty_cyc;
    3f66:	1e 00 90    	mov.w     [w14+2], w0
    3f68:	9e b8 97    	mov.w     [w14-14], w1
    3f6a:	51 00 98    	mov.w     w1, [w0+10]

00003f6c <.LSM10>:
    self->pins[0] = pin1;   // STEP
    3f6c:	1e 00 90    	mov.w     [w14+2], w0
    3f6e:	2e 01 90    	mov.w     [w14+4], w2
    3f70:	62 00 98    	mov.w     w2, [w0+12]

00003f72 <.LSM11>:
    self->pins[1] = pin2;   // DIR
    3f72:	1e 00 90    	mov.w     [w14+2], w0
    3f74:	be 00 90    	mov.w     [w14+6], w1
    3f76:	71 00 98    	mov.w     w1, [w0+14]

00003f78 <.LSM12>:
    self->pins[2] = pin3;   // SLP
    3f78:	1e 00 90    	mov.w     [w14+2], w0
    3f7a:	4e 01 90    	mov.w     [w14+8], w2
    3f7c:	02 08 98    	mov.w     w2, [w0+16]

00003f7e <.LSM13>:
    self->pins[3] = pin4;   // ENABLE
    3f7e:	1e 00 90    	mov.w     [w14+2], w0
    3f80:	de 00 90    	mov.w     [w14+10], w1
    3f82:	11 08 98    	mov.w     w1, [w0+18]

00003f84 <.LSM14>:
    self->pins[4] = pin5;   // PFD
    3f84:	1e 00 90    	mov.w     [w14+2], w0
    3f86:	6e 01 90    	mov.w     [w14+12], w2
    3f88:	22 08 98    	mov.w     w2, [w0+20]

00003f8a <.LSM15>:
    self->pins[5] = pin6;   // RST
    3f8a:	1e 00 90    	mov.w     [w14+2], w0
    3f8c:	fe 00 90    	mov.w     [w14+14], w1
    3f8e:	31 08 98    	mov.w     w1, [w0+22]

00003f90 <.LSM16>:
    self->pins[6] = pin7;   // MS1
    3f90:	1e 00 90    	mov.w     [w14+2], w0
    3f92:	0e 09 90    	mov.w     [w14+16], w2
    3f94:	42 08 98    	mov.w     w2, [w0+24]

00003f96 <.LSM17>:
    self->pins[7] = pin8;   // MS2
    3f96:	1e 00 90    	mov.w     [w14+2], w0
    3f98:	ce b8 97    	mov.w     [w14-8], w1
    3f9a:	51 08 98    	mov.w     w1, [w0+26]

00003f9c <.LSM18>:
    self->oc = oc;
    3f9c:	1e 00 90    	mov.w     [w14+2], w0
    3f9e:	2e b9 97    	mov.w     [w14-12], w2
    3fa0:	62 08 98    	mov.w     w2, [w0+28]

00003fa2 <.LSM19>:

    int i;
    for (i=0; i<8; i++) {
    3fa2:	00 00 eb    	clr.w     w0
    3fa4:	00 0f 78    	mov.w     w0, [w14]
    3fa6:	07 00 37    	bra       0x3fb6 <.L3>

00003fa8 <.L4>:
        pin_digitalOut(self->pins[i]);
    3fa8:	9e 00 90    	mov.w     [w14+2], w1
    3faa:	1e 01 78    	mov.w     [w14], w2
    3fac:	66 00 41    	add.w     w2, #0x6, w0
    3fae:	00 00 40    	add.w     w0, w0, w0
    3fb0:	61 00 78    	mov.w     [w1+w0], w0
    3fb2:	94 fc 07    	rcall     0x38dc <_pin_digitalOut>

00003fb4 <.LSM21>:
    3fb4:	1e 0f e8    	inc.w     [w14], [w14]

00003fb6 <.L3>:
    3fb6:	1e 00 78    	mov.w     [w14], w0
    3fb8:	e7 0f 50    	sub.w     w0, #0x7, [w15]
    3fba:	f6 ff 34    	bra       LE, 0x3fa8 <.L4>

00003fbc <.LSM22>:
    }
    oc_pwm(self->oc, self->pins[0], &timer5, self->speed, 0);
    3fbc:	1e 00 90    	mov.w     [w14+2], w0
    3fbe:	a0 00 90    	mov.w     [w0+4], w1
    3fc0:	10 00 90    	mov.w     [w0+2], w0
    3fc2:	1e 01 90    	mov.w     [w14+2], w2
    3fc4:	e2 03 90    	mov.w     [w2+12], w7
    3fc6:	1e 01 90    	mov.w     [w14+2], w2
    3fc8:	62 0b 90    	mov.w     [w2+28], w6
    3fca:	80 01 eb    	clr.w     w3
    3fcc:	00 02 be    	mov.d     w0, w4
    3fce:	42 d6 20    	mov.w     #0xd64, w2
    3fd0:	87 00 78    	mov.w     w7, w1
    3fd2:	06 00 78    	mov.w     w6, w0
    3fd4:	55 fe 07    	rcall     0x3c80 <_oc_pwm>

00003fd6 <.LSM23>:
    OC5CON2 = 0x000F; //synchronize to timer5
    3fd6:	f0 00 20    	mov.w     #0xf, w0
    3fd8:	d0 0d 88    	mov.w     w0, 0x1ba

00003fda <.LSM24>:
    OC7CON2 = 0x000F;
    3fda:	f0 00 20    	mov.w     #0xf, w0
    3fdc:	70 0e 88    	mov.w     w0, 0x1ce

00003fde <.LSM25>:
    st_state(&st_d, self->state);      // turn on controller
    3fde:	1e 00 90    	mov.w     [w14+2], w0
    3fe0:	00 48 90    	mov.b     [w0+8], w0
    3fe2:	80 40 78    	mov.b     w0, w1
    3fe4:	60 de 20    	mov.w     #0xde6, w0
    3fe6:	05 00 07    	rcall     0x3ff2 <_st_state>

00003fe8 <.LSM26>:
    st_step_size(&st_d, 0); // full step
    3fe8:	80 40 eb    	clr.b     w1
    3fea:	60 de 20    	mov.w     #0xde6, w0
    3fec:	ae 00 07    	rcall     0x414a <_st_step_size>

00003fee <.LSM27>:
}
    3fee:	00 80 fa    	ulnk      
    3ff0:	00 00 06    	return    

00003ff2 <_st_state>:

void st_state(_ST *self, uint8_t state) {
    3ff2:	04 00 fa    	lnk       #0x4
    3ff4:	00 0f 78    	mov.w     w0, [w14]
    3ff6:	21 47 98    	mov.b     w1, [w14+2]

00003ff8 <.LSM29>:
    self->state = state;
    3ff8:	1e 00 78    	mov.w     [w14], w0
    3ffa:	ae 40 90    	mov.b     [w14+2], w1
    3ffc:	01 48 98    	mov.b     w1, [w0+8]

00003ffe <.LSM30>:
    if (state) { // 1 = Turn stepper drive on
    3ffe:	2e 40 90    	mov.b     [w14+2], w0
    4000:	00 04 e0    	cp0.b     w0
    4002:	1f 00 32    	bra       Z, 0x4042 <.L6>

00004004 <.LSM31>:
        pin_set(self->pins[5]);     // RST = HI
    4004:	1e 00 78    	mov.w     [w14], w0
    4006:	30 08 90    	mov.w     [w0+22], w0
    4008:	c6 fc 07    	rcall     0x3996 <_pin_set>

0000400a <.LSM32>:
        pin_set(self->pins[2]);     // SLP = HI
    400a:	1e 00 78    	mov.w     [w14], w0
    400c:	00 08 90    	mov.w     [w0+16], w0
    400e:	c3 fc 07    	rcall     0x3996 <_pin_set>

00004010 <.LSM33>:
        pin_clear(self->pins[4]);   // PFD = LO
    4010:	1e 00 78    	mov.w     [w14], w0
    4012:	20 08 90    	mov.w     [w0+20], w0
    4014:	d5 fc 07    	rcall     0x39c0 <_pin_clear>

00004016 <.LSM34>:
        pin_clear(self->pins[3]);   // ENABLE = LO
    4016:	1e 00 78    	mov.w     [w14], w0
    4018:	10 08 90    	mov.w     [w0+18], w0
    401a:	d2 fc 07    	rcall     0x39c0 <_pin_clear>

0000401c <.LSM35>:
        oc_free(self->oc);
    401c:	1e 00 78    	mov.w     [w14], w0
    401e:	60 08 90    	mov.w     [w0+28], w0
    4020:	f0 fd 07    	rcall     0x3c02 <_oc_free>

00004022 <.LSM36>:
        oc_pwm(self->oc, self->pins[0], &timer5, self->speed, self->duty_cyc);
    4022:	1e 00 78    	mov.w     [w14], w0
    4024:	50 01 90    	mov.w     [w0+10], w2
    4026:	1e 00 78    	mov.w     [w14], w0
    4028:	a0 00 90    	mov.w     [w0+4], w1
    402a:	10 00 90    	mov.w     [w0+2], w0
    402c:	9e 01 78    	mov.w     [w14], w3
    402e:	e3 03 90    	mov.w     [w3+12], w7
    4030:	9e 01 78    	mov.w     [w14], w3
    4032:	63 0b 90    	mov.w     [w3+28], w6
    4034:	82 01 78    	mov.w     w2, w3
    4036:	00 02 be    	mov.d     w0, w4
    4038:	42 d6 20    	mov.w     #0xd64, w2
    403a:	87 00 78    	mov.w     w7, w1
    403c:	06 00 78    	mov.w     w6, w0
    403e:	20 fe 07    	rcall     0x3c80 <_oc_pwm>
    4040:	1c 00 37    	bra       0x407a <.L5>

00004042 <.L6>:
    }
    else {  // 0 = Turn stepper drive off
        pin_clear(self->pins[5]);   // RST = LO
    4042:	1e 00 78    	mov.w     [w14], w0
    4044:	30 08 90    	mov.w     [w0+22], w0
    4046:	bc fc 07    	rcall     0x39c0 <_pin_clear>

00004048 <.LSM38>:
        pin_clear(self->pins[2]);   // SLP = LO
    4048:	1e 00 78    	mov.w     [w14], w0
    404a:	00 08 90    	mov.w     [w0+16], w0
    404c:	b9 fc 07    	rcall     0x39c0 <_pin_clear>

0000404e <.LSM39>:
        pin_set(self->pins[4]);     // PFD = HI
    404e:	1e 00 78    	mov.w     [w14], w0
    4050:	20 08 90    	mov.w     [w0+20], w0
    4052:	a1 fc 07    	rcall     0x3996 <_pin_set>

00004054 <.LSM40>:
        pin_set(self->pins[3]);     // ENABLE = HI
    4054:	1e 00 78    	mov.w     [w14], w0
    4056:	10 08 90    	mov.w     [w0+18], w0
    4058:	9e fc 07    	rcall     0x3996 <_pin_set>

0000405a <.LSM41>:
        oc_free(self->oc);
    405a:	1e 00 78    	mov.w     [w14], w0
    405c:	60 08 90    	mov.w     [w0+28], w0
    405e:	d1 fd 07    	rcall     0x3c02 <_oc_free>

00004060 <.LSM42>:
        oc_pwm(self->oc, self->pins[0], &timer5, self->speed, 0);
    4060:	1e 00 78    	mov.w     [w14], w0
    4062:	a0 00 90    	mov.w     [w0+4], w1
    4064:	10 00 90    	mov.w     [w0+2], w0
    4066:	1e 01 78    	mov.w     [w14], w2
    4068:	e2 03 90    	mov.w     [w2+12], w7
    406a:	1e 01 78    	mov.w     [w14], w2
    406c:	62 0b 90    	mov.w     [w2+28], w6
    406e:	80 01 eb    	clr.w     w3
    4070:	00 02 be    	mov.d     w0, w4
    4072:	42 d6 20    	mov.w     #0xd64, w2
    4074:	87 00 78    	mov.w     w7, w1
    4076:	06 00 78    	mov.w     w6, w0
    4078:	03 fe 07    	rcall     0x3c80 <_oc_pwm>

0000407a <.L5>:
    }
}
    407a:	00 80 fa    	ulnk      
    407c:	00 00 06    	return    

0000407e <_st_speed>:

void st_speed(_ST *self, float speed) {
    407e:	06 00 fa    	lnk       #0x6
    4080:	88 1f 78    	mov.w     w8, [w15++]
    4082:	00 0f 78    	mov.w     w0, [w14]
    4084:	12 07 98    	mov.w     w2, [w14+2]
    4086:	23 07 98    	mov.w     w3, [w14+4]

00004088 <.LSM45>:
    // speed = 1.6 deg/step / (360 deg/rev) * freq step/sec
    //       = 0.004*freq rev/sec
    if (speed > 0) {
    4088:	18 c0 b3    	mov.b     #0x1, w8
    408a:	60 11 b8    	mul.uu    w2, #0x0, w2
    408c:	1e 00 90    	mov.w     [w14+2], w0
    408e:	ae 00 90    	mov.w     [w14+4], w1
    4090:	64 e9 07    	rcall     0x135a <___gesf2>
    4092:	00 00 e0    	cp0.w     w0
    4094:	01 00 3c    	bra       GT, 0x4098 <.L9>
    4096:	00 44 eb    	clr.b     w8

00004098 <.L9>:
    4098:	08 04 e0    	cp0.b     w8
    409a:	1f 00 32    	bra       Z, 0x40da <.L10>

0000409c <.LSM46>:
        if (self->speed != speed) {
    409c:	1e 00 78    	mov.w     [w14], w0
    409e:	a0 00 90    	mov.w     [w0+4], w1
    40a0:	10 00 90    	mov.w     [w0+2], w0
    40a2:	1e 01 90    	mov.w     [w14+2], w2
    40a4:	ae 01 90    	mov.w     [w14+4], w3
    40a6:	78 e9 07    	rcall     0x1398 <___nesf2>
    40a8:	00 00 e0    	cp0.w     w0
    40aa:	1a 00 32    	bra       Z, 0x40e0 <.L11>

000040ac <.LSM47>:
            oc_free(self->oc);
    40ac:	1e 00 78    	mov.w     [w14], w0
    40ae:	60 08 90    	mov.w     [w0+28], w0
    40b0:	a8 fd 07    	rcall     0x3c02 <_oc_free>

000040b2 <.LSM48>:
            oc_pwm(self->oc, self->pins[0], &timer5, self->speed, self->duty_cyc);
    40b2:	1e 00 78    	mov.w     [w14], w0
    40b4:	50 01 90    	mov.w     [w0+10], w2
    40b6:	1e 00 78    	mov.w     [w14], w0
    40b8:	a0 00 90    	mov.w     [w0+4], w1
    40ba:	10 00 90    	mov.w     [w0+2], w0
    40bc:	9e 01 78    	mov.w     [w14], w3
    40be:	e3 03 90    	mov.w     [w3+12], w7
    40c0:	9e 01 78    	mov.w     [w14], w3
    40c2:	63 0b 90    	mov.w     [w3+28], w6
    40c4:	82 01 78    	mov.w     w2, w3
    40c6:	00 02 be    	mov.d     w0, w4
    40c8:	42 d6 20    	mov.w     #0xd64, w2
    40ca:	87 00 78    	mov.w     w7, w1
    40cc:	06 00 78    	mov.w     w6, w0
    40ce:	d8 fd 07    	rcall     0x3c80 <_oc_pwm>

000040d0 <.LSM49>:
            OC5CON2 = 0x000F; //synchronize to timer5
    40d0:	f0 00 20    	mov.w     #0xf, w0
    40d2:	d0 0d 88    	mov.w     w0, 0x1ba

000040d4 <.LSM50>:
            OC7CON2 = 0x000F;
    40d4:	f0 00 20    	mov.w     #0xf, w0
    40d6:	70 0e 88    	mov.w     w0, 0x1ce
    40d8:	03 00 37    	bra       0x40e0 <.L11>

000040da <.L10>:
        }
    }
    else {
        oc_free(self->oc);
    40da:	1e 00 78    	mov.w     [w14], w0
    40dc:	60 08 90    	mov.w     [w0+28], w0
    40de:	91 fd 07    	rcall     0x3c02 <_oc_free>

000040e0 <.L11>:
    }
    // else {
        // oc_free(self->oc);
    // }
    self->speed = speed;
    40e0:	1e 00 78    	mov.w     [w14], w0
    40e2:	1e 01 90    	mov.w     [w14+2], w2
    40e4:	ae 01 90    	mov.w     [w14+4], w3
    40e6:	12 00 98    	mov.w     w2, [w0+2]
    40e8:	23 00 98    	mov.w     w3, [w0+4]

000040ea <.LSM53>:
}
    40ea:	4f 04 78    	mov.w     [--w15], w8
    40ec:	00 80 fa    	ulnk      
    40ee:	00 00 06    	return    

000040f0 <_st_direction>:

void st_direction(_ST *self, uint8_t dir) {
    40f0:	04 00 fa    	lnk       #0x4
    40f2:	00 0f 78    	mov.w     w0, [w14]
    40f4:	21 47 98    	mov.b     w1, [w14+2]

000040f6 <.LSM55>:
    if (dir) {
    40f6:	2e 40 90    	mov.b     [w14+2], w0
    40f8:	00 04 e0    	cp0.b     w0
    40fa:	04 00 32    	bra       Z, 0x4104 <.L15>

000040fc <.LSM56>:
        pin_set(self->pins[1]);
    40fc:	1e 00 78    	mov.w     [w14], w0
    40fe:	70 00 90    	mov.w     [w0+14], w0
    4100:	4a fc 07    	rcall     0x3996 <_pin_set>
    4102:	03 00 37    	bra       0x410a <.L16>

00004104 <.L15>:
    }
    else {
        pin_clear(self->pins[1]);
    4104:	1e 00 78    	mov.w     [w14], w0
    4106:	70 00 90    	mov.w     [w0+14], w0
    4108:	5b fc 07    	rcall     0x39c0 <_pin_clear>

0000410a <.L16>:
    }
    if (self->dir != dir) {
    410a:	1e 00 78    	mov.w     [w14], w0
    410c:	90 40 78    	mov.b     [w0], w1
    410e:	2e 40 90    	mov.b     [w14+2], w0
    4110:	80 cf 50    	sub.b     w1, w0, [w15]
    4112:	16 00 32    	bra       Z, 0x4140 <.L17>

00004114 <.LSM59>:
        oc_free(self->oc);
    4114:	1e 00 78    	mov.w     [w14], w0
    4116:	60 08 90    	mov.w     [w0+28], w0
    4118:	74 fd 07    	rcall     0x3c02 <_oc_free>

0000411a <.LSM60>:
        oc_pwm(self->oc, self->pins[0], &timer5, self->speed, self->duty_cyc);        
    411a:	1e 00 78    	mov.w     [w14], w0
    411c:	50 01 90    	mov.w     [w0+10], w2
    411e:	1e 00 78    	mov.w     [w14], w0
    4120:	a0 00 90    	mov.w     [w0+4], w1
    4122:	10 00 90    	mov.w     [w0+2], w0
    4124:	9e 01 78    	mov.w     [w14], w3
    4126:	e3 03 90    	mov.w     [w3+12], w7
    4128:	9e 01 78    	mov.w     [w14], w3
    412a:	63 0b 90    	mov.w     [w3+28], w6
    412c:	82 01 78    	mov.w     w2, w3
    412e:	00 02 be    	mov.d     w0, w4
    4130:	42 d6 20    	mov.w     #0xd64, w2
    4132:	87 00 78    	mov.w     w7, w1
    4134:	06 00 78    	mov.w     w6, w0
    4136:	a4 fd 07    	rcall     0x3c80 <_oc_pwm>

00004138 <.LSM61>:
        OC5CON2 = 0x000F; //synchronize to timer5
    4138:	f0 00 20    	mov.w     #0xf, w0
    413a:	d0 0d 88    	mov.w     w0, 0x1ba

0000413c <.LSM62>:
        OC7CON2 = 0x000F;
    413c:	f0 00 20    	mov.w     #0xf, w0
    413e:	70 0e 88    	mov.w     w0, 0x1ce

00004140 <.L17>:
    }
    self->dir = dir;
    4140:	1e 00 78    	mov.w     [w14], w0
    4142:	ae 40 90    	mov.b     [w14+2], w1
    4144:	01 48 78    	mov.b     w1, [w0]

00004146 <.LSM64>:
    // pin_clear(self->pins[!dir]);
}
    4146:	00 80 fa    	ulnk      
    4148:	00 00 06    	return    

0000414a <_st_step_size>:

void st_step_size(_ST *self, uint8_t size) {
    414a:	04 00 fa    	lnk       #0x4
    414c:	00 0f 78    	mov.w     w0, [w14]
    414e:	21 47 98    	mov.b     w1, [w14+2]

00004150 <.LSM66>:
    self->step_size = size;
    4150:	2e 40 90    	mov.b     [w14+2], w0
    4152:	80 80 fb    	ze        w0, w1
    4154:	1e 00 78    	mov.w     [w14], w0
    4156:	31 00 98    	mov.w     w1, [w0+6]

00004158 <.LSM67>:
    if (size == 0) {    // full step
    4158:	2e 40 90    	mov.b     [w14+2], w0
    415a:	00 04 e0    	cp0.b     w0
    415c:	07 00 3a    	bra       NZ, 0x416c <.L19>

0000415e <.LSM68>:
        pin_clear(self->pins[6]);
    415e:	1e 00 78    	mov.w     [w14], w0
    4160:	40 08 90    	mov.w     [w0+24], w0
    4162:	2e fc 07    	rcall     0x39c0 <_pin_clear>

00004164 <.LSM69>:
        pin_clear(self->pins[7]);
    4164:	1e 00 78    	mov.w     [w14], w0
    4166:	50 08 90    	mov.w     [w0+26], w0
    4168:	2b fc 07    	rcall     0x39c0 <_pin_clear>
    416a:	1d 00 37    	bra       0x41a6 <.L18>

0000416c <.L19>:
    }
    else if (size == 1) {   // half step
    416c:	2e 40 90    	mov.b     [w14+2], w0
    416e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4170:	07 00 3a    	bra       NZ, 0x4180 <.L21>

00004172 <.LSM71>:
        pin_set(self->pins[6]);
    4172:	1e 00 78    	mov.w     [w14], w0
    4174:	40 08 90    	mov.w     [w0+24], w0
    4176:	0f fc 07    	rcall     0x3996 <_pin_set>

00004178 <.LSM72>:
        pin_clear(self->pins[7]);
    4178:	1e 00 78    	mov.w     [w14], w0
    417a:	50 08 90    	mov.w     [w0+26], w0
    417c:	21 fc 07    	rcall     0x39c0 <_pin_clear>
    417e:	13 00 37    	bra       0x41a6 <.L18>

00004180 <.L21>:
    }
    else if (size == 2) {   // quarter step
    4180:	2e 40 90    	mov.b     [w14+2], w0
    4182:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    4184:	07 00 3a    	bra       NZ, 0x4194 <.L22>

00004186 <.LSM74>:
        pin_clear(self->pins[6]);
    4186:	1e 00 78    	mov.w     [w14], w0
    4188:	40 08 90    	mov.w     [w0+24], w0
    418a:	1a fc 07    	rcall     0x39c0 <_pin_clear>

0000418c <.LSM75>:
        pin_set(self->pins[7]);
    418c:	1e 00 78    	mov.w     [w14], w0
    418e:	50 08 90    	mov.w     [w0+26], w0
    4190:	02 fc 07    	rcall     0x3996 <_pin_set>
    4192:	09 00 37    	bra       0x41a6 <.L18>

00004194 <.L22>:
    }
    else if (size == 3) {   // quarter step
    4194:	2e 40 90    	mov.b     [w14+2], w0
    4196:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    4198:	06 00 3a    	bra       NZ, 0x41a6 <.L18>

0000419a <.LSM77>:
        pin_set(self->pins[6]);
    419a:	1e 00 78    	mov.w     [w14], w0
    419c:	40 08 90    	mov.w     [w0+24], w0
    419e:	fb fb 07    	rcall     0x3996 <_pin_set>

000041a0 <.LSM78>:
        pin_set(self->pins[7]);
    41a0:	1e 00 78    	mov.w     [w14], w0
    41a2:	50 08 90    	mov.w     [w0+26], w0
    41a4:	f8 fb 07    	rcall     0x3996 <_pin_set>

000041a6 <.L18>:
    }
}    41a6:	00 80 fa    	ulnk      
    41a8:	00 00 06    	return    

000041aa <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    41aa:	00 00 fa    	lnk       #0x0

000041ac <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    41ac:	74 c0 b3    	mov.b     #0x7, w4
    41ae:	63 4e 20    	mov.w     #0x4e6, w3
    41b0:	82 2d 20    	mov.w     #0x2d8, w2
    41b2:	a1 2d 20    	mov.w     #0x2da, w1
    41b4:	00 80 20    	mov.w     #0x800, w0
    41b6:	20 00 07    	rcall     0x41f8 <_led_init>

000041b8 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    41b8:	00 42 eb    	clr.b     w4
    41ba:	a3 4e 20    	mov.w     #0x4ea, w3
    41bc:	82 2e 20    	mov.w     #0x2e8, w2
    41be:	a1 2e 20    	mov.w     #0x2ea, w1
    41c0:	80 80 20    	mov.w     #0x808, w0
    41c2:	1a 00 07    	rcall     0x41f8 <_led_init>

000041c4 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    41c4:	14 c0 b3    	mov.b     #0x1, w4
    41c6:	a3 4e 20    	mov.w     #0x4ea, w3
    41c8:	82 2e 20    	mov.w     #0x2e8, w2
    41ca:	a1 2e 20    	mov.w     #0x2ea, w1
    41cc:	00 81 20    	mov.w     #0x810, w0
    41ce:	14 00 07    	rcall     0x41f8 <_led_init>

000041d0 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    41d0:	f4 c0 b3    	mov.b     #0xf, w4
    41d2:	43 4e 20    	mov.w     #0x4e4, w3
    41d4:	02 2d 20    	mov.w     #0x2d0, w2
    41d6:	21 2d 20    	mov.w     #0x2d2, w1
    41d8:	80 81 20    	mov.w     #0x818, w0
    41da:	ad 00 07    	rcall     0x4336 <_sw_init>

000041dc <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    41dc:	c4 c0 b3    	mov.b     #0xc, w4
    41de:	43 4e 20    	mov.w     #0x4e4, w3
    41e0:	02 2d 20    	mov.w     #0x2d0, w2
    41e2:	21 2d 20    	mov.w     #0x2d2, w1
    41e4:	00 82 20    	mov.w     #0x820, w0
    41e6:	a7 00 07    	rcall     0x4336 <_sw_init>

000041e8 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    41e8:	c4 c0 b3    	mov.b     #0xc, w4
    41ea:	23 4e 20    	mov.w     #0x4e2, w3
    41ec:	82 2c 20    	mov.w     #0x2c8, w2
    41ee:	a1 2c 20    	mov.w     #0x2ca, w1
    41f0:	80 82 20    	mov.w     #0x828, w0
    41f2:	a1 00 07    	rcall     0x4336 <_sw_init>

000041f4 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    41f4:	00 80 fa    	ulnk      
    41f6:	00 00 06    	return    

000041f8 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    41f8:	0a 00 fa    	lnk       #0xa
    41fa:	00 0f 78    	mov.w     w0, [w14]
    41fc:	11 07 98    	mov.w     w1, [w14+2]
    41fe:	22 07 98    	mov.w     w2, [w14+4]
    4200:	33 07 98    	mov.w     w3, [w14+6]
    4202:	04 4f 98    	mov.b     w4, [w14+8]

00004204 <.LSM9>:
    self->port = port;
    4204:	1e 00 78    	mov.w     [w14], w0
    4206:	9e 00 90    	mov.w     [w14+2], w1
    4208:	01 08 78    	mov.w     w1, [w0]

0000420a <.LSM10>:
    self->tris = tris;
    420a:	1e 00 78    	mov.w     [w14], w0
    420c:	ae 00 90    	mov.w     [w14+4], w1
    420e:	11 00 98    	mov.w     w1, [w0+2]

00004210 <.LSM11>:
    self->ans = ans;
    4210:	1e 00 78    	mov.w     [w14], w0
    4212:	be 00 90    	mov.w     [w14+6], w1
    4214:	21 00 98    	mov.w     w1, [w0+4]

00004216 <.LSM12>:
    self->bit = bit;
    4216:	1e 00 78    	mov.w     [w14], w0
    4218:	8e 48 90    	mov.b     [w14+8], w1
    421a:	61 40 98    	mov.b     w1, [w0+6]

0000421c <.LSM13>:

    bitclear(self->ans, self->bit);
    421c:	1e 00 78    	mov.w     [w14], w0
    421e:	20 00 90    	mov.w     [w0+4], w0
    4220:	9e 00 78    	mov.w     [w14], w1
    4222:	a1 00 90    	mov.w     [w1+4], w1
    4224:	11 01 78    	mov.w     [w1], w2
    4226:	9e 00 78    	mov.w     [w14], w1
    4228:	e1 40 90    	mov.b     [w1+6], w1
    422a:	81 80 fb    	ze        w1, w1
    422c:	13 00 20    	mov.w     #0x1, w3
    422e:	81 18 dd    	sl.w      w3, w1, w1
    4230:	81 80 ea    	com.w     w1, w1
    4232:	81 00 61    	and.w     w2, w1, w1
    4234:	01 08 78    	mov.w     w1, [w0]

00004236 <.LSM14>:
    bitclear(self->port, self->bit);
    4236:	1e 00 78    	mov.w     [w14], w0
    4238:	10 00 78    	mov.w     [w0], w0
    423a:	9e 00 78    	mov.w     [w14], w1
    423c:	91 00 78    	mov.w     [w1], w1
    423e:	11 01 78    	mov.w     [w1], w2
    4240:	9e 00 78    	mov.w     [w14], w1
    4242:	e1 40 90    	mov.b     [w1+6], w1
    4244:	81 80 fb    	ze        w1, w1
    4246:	13 00 20    	mov.w     #0x1, w3
    4248:	81 18 dd    	sl.w      w3, w1, w1
    424a:	81 80 ea    	com.w     w1, w1
    424c:	81 00 61    	and.w     w2, w1, w1
    424e:	01 08 78    	mov.w     w1, [w0]

00004250 <.LSM15>:
    bitclear(self->tris, self->bit);
    4250:	1e 00 78    	mov.w     [w14], w0
    4252:	10 00 90    	mov.w     [w0+2], w0
    4254:	9e 00 78    	mov.w     [w14], w1
    4256:	91 00 90    	mov.w     [w1+2], w1
    4258:	11 01 78    	mov.w     [w1], w2
    425a:	9e 00 78    	mov.w     [w14], w1
    425c:	e1 40 90    	mov.b     [w1+6], w1
    425e:	81 80 fb    	ze        w1, w1
    4260:	13 00 20    	mov.w     #0x1, w3
    4262:	81 18 dd    	sl.w      w3, w1, w1
    4264:	81 80 ea    	com.w     w1, w1
    4266:	81 00 61    	and.w     w2, w1, w1
    4268:	01 08 78    	mov.w     w1, [w0]

0000426a <.LSM16>:
}
    426a:	00 80 fa    	ulnk      
    426c:	00 00 06    	return    

0000426e <_led_on>:

void led_on(_LED *self) {
    426e:	02 00 fa    	lnk       #0x2
    4270:	00 0f 78    	mov.w     w0, [w14]

00004272 <.LSM18>:
    bitset(self->port, self->bit);
    4272:	1e 00 78    	mov.w     [w14], w0
    4274:	10 00 78    	mov.w     [w0], w0
    4276:	9e 00 78    	mov.w     [w14], w1
    4278:	91 00 78    	mov.w     [w1], w1
    427a:	11 01 78    	mov.w     [w1], w2
    427c:	9e 00 78    	mov.w     [w14], w1
    427e:	e1 40 90    	mov.b     [w1+6], w1
    4280:	81 80 fb    	ze        w1, w1
    4282:	13 00 20    	mov.w     #0x1, w3
    4284:	81 18 dd    	sl.w      w3, w1, w1
    4286:	82 80 70    	ior.w     w1, w2, w1
    4288:	01 08 78    	mov.w     w1, [w0]

0000428a <.LSM19>:
}
    428a:	00 80 fa    	ulnk      
    428c:	00 00 06    	return    

0000428e <_led_off>:

void led_off(_LED *self) {
    428e:	02 00 fa    	lnk       #0x2
    4290:	00 0f 78    	mov.w     w0, [w14]

00004292 <.LSM21>:
    bitclear(self->port, self->bit);
    4292:	1e 00 78    	mov.w     [w14], w0
    4294:	10 00 78    	mov.w     [w0], w0
    4296:	9e 00 78    	mov.w     [w14], w1
    4298:	91 00 78    	mov.w     [w1], w1
    429a:	11 01 78    	mov.w     [w1], w2
    429c:	9e 00 78    	mov.w     [w14], w1
    429e:	e1 40 90    	mov.b     [w1+6], w1
    42a0:	81 80 fb    	ze        w1, w1
    42a2:	13 00 20    	mov.w     #0x1, w3
    42a4:	81 18 dd    	sl.w      w3, w1, w1
    42a6:	81 80 ea    	com.w     w1, w1
    42a8:	81 00 61    	and.w     w2, w1, w1
    42aa:	01 08 78    	mov.w     w1, [w0]

000042ac <.LSM22>:
}
    42ac:	00 80 fa    	ulnk      
    42ae:	00 00 06    	return    

000042b0 <_led_toggle>:

void led_toggle(_LED *self) {
    42b0:	02 00 fa    	lnk       #0x2
    42b2:	00 0f 78    	mov.w     w0, [w14]

000042b4 <.LSM24>:
    bitflip(self->port, self->bit);
    42b4:	1e 00 78    	mov.w     [w14], w0
    42b6:	10 00 78    	mov.w     [w0], w0
    42b8:	9e 00 78    	mov.w     [w14], w1
    42ba:	91 00 78    	mov.w     [w1], w1
    42bc:	11 01 78    	mov.w     [w1], w2
    42be:	9e 00 78    	mov.w     [w14], w1
    42c0:	e1 40 90    	mov.b     [w1+6], w1
    42c2:	81 80 fb    	ze        w1, w1
    42c4:	13 00 20    	mov.w     #0x1, w3
    42c6:	81 18 dd    	sl.w      w3, w1, w1
    42c8:	81 00 69    	xor.w     w2, w1, w1
    42ca:	01 08 78    	mov.w     w1, [w0]

000042cc <.LSM25>:
}
    42cc:	00 80 fa    	ulnk      
    42ce:	00 00 06    	return    

000042d0 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    42d0:	04 00 fa    	lnk       #0x4
    42d2:	00 0f 78    	mov.w     w0, [w14]
    42d4:	11 07 98    	mov.w     w1, [w14+2]

000042d6 <.LSM27>:
    if (val)
    42d6:	1e 00 90    	mov.w     [w14+2], w0
    42d8:	00 00 e0    	cp0.w     w0
    42da:	0d 00 32    	bra       Z, 0x42f6 <.L7>

000042dc <.LSM28>:
        bitset(self->port, self->bit);
    42dc:	1e 00 78    	mov.w     [w14], w0
    42de:	10 00 78    	mov.w     [w0], w0
    42e0:	9e 00 78    	mov.w     [w14], w1
    42e2:	91 00 78    	mov.w     [w1], w1
    42e4:	11 01 78    	mov.w     [w1], w2
    42e6:	9e 00 78    	mov.w     [w14], w1
    42e8:	e1 40 90    	mov.b     [w1+6], w1
    42ea:	81 80 fb    	ze        w1, w1
    42ec:	13 00 20    	mov.w     #0x1, w3
    42ee:	81 18 dd    	sl.w      w3, w1, w1
    42f0:	82 80 70    	ior.w     w1, w2, w1
    42f2:	01 08 78    	mov.w     w1, [w0]
    42f4:	0d 00 37    	bra       0x4310 <.L6>

000042f6 <.L7>:
    else
        bitclear(self->port, self->bit);
    42f6:	1e 00 78    	mov.w     [w14], w0
    42f8:	10 00 78    	mov.w     [w0], w0
    42fa:	9e 00 78    	mov.w     [w14], w1
    42fc:	91 00 78    	mov.w     [w1], w1
    42fe:	11 01 78    	mov.w     [w1], w2
    4300:	9e 00 78    	mov.w     [w14], w1
    4302:	e1 40 90    	mov.b     [w1+6], w1
    4304:	81 80 fb    	ze        w1, w1
    4306:	13 00 20    	mov.w     #0x1, w3
    4308:	81 18 dd    	sl.w      w3, w1, w1
    430a:	81 80 ea    	com.w     w1, w1
    430c:	81 00 61    	and.w     w2, w1, w1
    430e:	01 08 78    	mov.w     w1, [w0]

00004310 <.L6>:
}
    4310:	00 80 fa    	ulnk      
    4312:	00 00 06    	return    

00004314 <_led_read>:

uint16_t led_read(_LED *self) {
    4314:	02 00 fa    	lnk       #0x2
    4316:	00 0f 78    	mov.w     w0, [w14]

00004318 <.LSM32>:
    return bitread(self->port, self->bit);
    4318:	1e 00 78    	mov.w     [w14], w0
    431a:	10 00 78    	mov.w     [w0], w0
    431c:	90 00 78    	mov.w     [w0], w1
    431e:	1e 00 78    	mov.w     [w14], w0
    4320:	60 40 90    	mov.b     [w0+6], w0
    4322:	00 80 fb    	ze        w0, w0
    4324:	12 00 20    	mov.w     #0x1, w2
    4326:	00 10 dd    	sl.w      w2, w0, w0
    4328:	00 80 60    	and.w     w1, w0, w0
    432a:	00 f0 a7    	btsc.w    w0, #0xf
    432c:	00 00 ea    	neg.w     w0, w0
    432e:	00 00 ea    	neg.w     w0, w0
    4330:	4f 00 de    	lsr.w     w0, #0xf, w0

00004332 <.LSM33>:
}
    4332:	00 80 fa    	ulnk      
    4334:	00 00 06    	return    

00004336 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    4336:	0a 00 fa    	lnk       #0xa
    4338:	00 0f 78    	mov.w     w0, [w14]
    433a:	11 07 98    	mov.w     w1, [w14+2]
    433c:	22 07 98    	mov.w     w2, [w14+4]
    433e:	33 07 98    	mov.w     w3, [w14+6]
    4340:	04 4f 98    	mov.b     w4, [w14+8]

00004342 <.LSM35>:
    self->port = port;
    4342:	1e 00 78    	mov.w     [w14], w0
    4344:	9e 00 90    	mov.w     [w14+2], w1
    4346:	01 08 78    	mov.w     w1, [w0]

00004348 <.LSM36>:
    self->tris = tris;
    4348:	1e 00 78    	mov.w     [w14], w0
    434a:	ae 00 90    	mov.w     [w14+4], w1
    434c:	11 00 98    	mov.w     w1, [w0+2]

0000434e <.LSM37>:
    self->ans = ans;
    434e:	1e 00 78    	mov.w     [w14], w0
    4350:	be 00 90    	mov.w     [w14+6], w1
    4352:	21 00 98    	mov.w     w1, [w0+4]

00004354 <.LSM38>:
    self->bit = bit;
    4354:	1e 00 78    	mov.w     [w14], w0
    4356:	8e 48 90    	mov.b     [w14+8], w1
    4358:	61 40 98    	mov.b     w1, [w0+6]

0000435a <.LSM39>:

    bitclear(self->ans, self->bit);
    435a:	1e 00 78    	mov.w     [w14], w0
    435c:	20 00 90    	mov.w     [w0+4], w0
    435e:	9e 00 78    	mov.w     [w14], w1
    4360:	a1 00 90    	mov.w     [w1+4], w1
    4362:	11 01 78    	mov.w     [w1], w2
    4364:	9e 00 78    	mov.w     [w14], w1
    4366:	e1 40 90    	mov.b     [w1+6], w1
    4368:	81 80 fb    	ze        w1, w1
    436a:	13 00 20    	mov.w     #0x1, w3
    436c:	81 18 dd    	sl.w      w3, w1, w1
    436e:	81 80 ea    	com.w     w1, w1
    4370:	81 00 61    	and.w     w2, w1, w1
    4372:	01 08 78    	mov.w     w1, [w0]

00004374 <.LSM40>:
    bitset(self->tris, self->bit);
    4374:	1e 00 78    	mov.w     [w14], w0
    4376:	10 00 90    	mov.w     [w0+2], w0
    4378:	9e 00 78    	mov.w     [w14], w1
    437a:	91 00 90    	mov.w     [w1+2], w1
    437c:	11 01 78    	mov.w     [w1], w2
    437e:	9e 00 78    	mov.w     [w14], w1
    4380:	e1 40 90    	mov.b     [w1+6], w1
    4382:	81 80 fb    	ze        w1, w1
    4384:	13 00 20    	mov.w     #0x1, w3
    4386:	81 18 dd    	sl.w      w3, w1, w1
    4388:	82 80 70    	ior.w     w1, w2, w1
    438a:	01 08 78    	mov.w     w1, [w0]

0000438c <.LSM41>:
}
    438c:	00 80 fa    	ulnk      
    438e:	00 00 06    	return    

00004390 <_sw_read>:

uint16_t sw_read(_SW *self) {
    4390:	02 00 fa    	lnk       #0x2
    4392:	00 0f 78    	mov.w     w0, [w14]

00004394 <.LSM43>:
    return bitread(self->port, self->bit);
    4394:	1e 00 78    	mov.w     [w14], w0
    4396:	10 00 78    	mov.w     [w0], w0
    4398:	90 00 78    	mov.w     [w0], w1
    439a:	1e 00 78    	mov.w     [w14], w0
    439c:	60 40 90    	mov.b     [w0+6], w0
    439e:	00 80 fb    	ze        w0, w0
    43a0:	12 00 20    	mov.w     #0x1, w2
    43a2:	00 10 dd    	sl.w      w2, w0, w0
    43a4:	00 80 60    	and.w     w1, w0, w0
    43a6:	00 f0 a7    	btsc.w    w0, #0xf
    43a8:	00 00 ea    	neg.w     w0, w0
    43aa:	00 00 ea    	neg.w     w0, w0
    43ac:	4f 00 de    	lsr.w     w0, #0xf, w0

000043ae <.LSM44>:
}
    43ae:	00 80 fa    	ulnk      
    43b0:	00 00 06    	return    

000043b2 <_init_md>:
#include "md.h"

_MD md1, md2, mdp;

void init_md(void) {
    43b2:	00 00 fa    	lnk       #0x0

000043b4 <.LSM1>:
    md_init(&md1, &D[8], &D[7], 1e3, &oc7);
    43b4:	44 bb 20    	mov.w     #0xbb4, w4
    43b6:	83 3e 20    	mov.w     #0x3e8, w3
    43b8:	e2 90 20    	mov.w     #0x90e, w2
    43ba:	41 92 20    	mov.w     #0x924, w1
    43bc:	c0 db 20    	mov.w     #0xdbc, w0
    43be:	0e 00 07    	rcall     0x43dc <_md_init>

000043c0 <.LSM2>:
    md_init(&md2, &D[5], &D[6], 1e3, &oc5);
    43c0:	04 b9 20    	mov.w     #0xb90, w4
    43c2:	83 3e 20    	mov.w     #0x3e8, w3
    43c4:	82 8f 20    	mov.w     #0x8f8, w2
    43c6:	21 8e 20    	mov.w     #0x8e2, w1
    43c8:	a0 dc 20    	mov.w     #0xdca, w0
    43ca:	08 00 07    	rcall     0x43dc <_md_init>

000043cc <.LSM3>:
    md_init(&mdp, NULL, NULL, 1e3, NULL);
    43cc:	00 02 eb    	clr.w     w4
    43ce:	83 3e 20    	mov.w     #0x3e8, w3
    43d0:	00 01 eb    	clr.w     w2
    43d2:	80 00 eb    	clr.w     w1
    43d4:	80 dd 20    	mov.w     #0xdd8, w0
    43d6:	02 00 07    	rcall     0x43dc <_md_init>

000043d8 <.LSM4>:
}
    43d8:	00 80 fa    	ulnk      
    43da:	00 00 06    	return    

000043dc <_md_init>:

void md_init(_MD *self, _PIN *pin1, _PIN *pin2, uint16_t freq, _OC *oc) {
    43dc:	0a 00 fa    	lnk       #0xa
    43de:	00 0f 78    	mov.w     w0, [w14]
    43e0:	11 07 98    	mov.w     w1, [w14+2]
    43e2:	22 07 98    	mov.w     w2, [w14+4]
    43e4:	33 07 98    	mov.w     w3, [w14+6]
    43e6:	44 07 98    	mov.w     w4, [w14+8]

000043e8 <.LSM6>:
    self->dir = 0;
    43e8:	1e 00 78    	mov.w     [w14], w0
    43ea:	80 40 eb    	clr.b     w1
    43ec:	01 48 78    	mov.b     w1, [w0]

000043ee <.LSM7>:
    self->speed = 0;
    43ee:	1e 00 78    	mov.w     [w14], w0
    43f0:	80 00 eb    	clr.w     w1
    43f2:	11 00 98    	mov.w     w1, [w0+2]

000043f4 <.LSM8>:
    self->freq = freq;
    43f4:	1e 00 78    	mov.w     [w14], w0
    43f6:	be 00 90    	mov.w     [w14+6], w1
    43f8:	21 00 98    	mov.w     w1, [w0+4]

000043fa <.LSM9>:
    self->pins[0] = pin1;
    43fa:	1e 00 78    	mov.w     [w14], w0
    43fc:	9e 00 90    	mov.w     [w14+2], w1
    43fe:	41 00 98    	mov.w     w1, [w0+8]

00004400 <.LSM10>:
    self->pins[1] = pin2;
    4400:	1e 00 78    	mov.w     [w14], w0
    4402:	ae 00 90    	mov.w     [w14+4], w1
    4404:	51 00 98    	mov.w     w1, [w0+10]

00004406 <.LSM11>:
    self->braked = 0;
    4406:	1e 00 78    	mov.w     [w14], w0
    4408:	80 40 eb    	clr.b     w1
    440a:	61 40 98    	mov.b     w1, [w0+6]

0000440c <.LSM12>:
    self->oc = oc;
    440c:	1e 00 78    	mov.w     [w14], w0
    440e:	ce 00 90    	mov.w     [w14+8], w1
    4410:	61 00 98    	mov.w     w1, [w0+12]

00004412 <.LSM13>:

    if (self != &mdp) {
    4412:	80 dd 20    	mov.w     #0xdd8, w0
    4414:	9e 00 78    	mov.w     [w14], w1
    4416:	80 8f 50    	sub.w     w1, w0, [w15]
    4418:	17 00 32    	bra       Z, 0x4448 <.L2>

0000441a <.LSM14>:
        oc_pwm(self->oc, self->pins[0], &timer5, freq, 0);
    441a:	3e 00 90    	mov.w     [w14+6], w0
    441c:	80 00 eb    	clr.w     w1
    441e:	ba e7 07    	rcall     0x1394 <___floatunsisf>
    4420:	1e 01 78    	mov.w     [w14], w2
    4422:	c2 03 90    	mov.w     [w2+8], w7
    4424:	1e 01 78    	mov.w     [w14], w2
    4426:	62 03 90    	mov.w     [w2+12], w6
    4428:	80 01 eb    	clr.w     w3
    442a:	00 02 be    	mov.d     w0, w4
    442c:	42 d6 20    	mov.w     #0xd64, w2
    442e:	87 00 78    	mov.w     w7, w1
    4430:	06 00 78    	mov.w     w6, w0
    4432:	26 fc 07    	rcall     0x3c80 <_oc_pwm>

00004434 <.LSM15>:
        OC5CON2 = 0x000F; //synchronize to timer5
    4434:	f0 00 20    	mov.w     #0xf, w0
    4436:	d0 0d 88    	mov.w     w0, 0x1ba

00004438 <.LSM16>:
        OC7CON2 = 0x000F;
    4438:	f0 00 20    	mov.w     #0xf, w0
    443a:	70 0e 88    	mov.w     w0, 0x1ce

0000443c <.LSM17>:
        pin_digitalOut(self->pins[1]);
    443c:	1e 00 78    	mov.w     [w14], w0
    443e:	50 00 90    	mov.w     [w0+10], w0
    4440:	4d fa 07    	rcall     0x38dc <_pin_digitalOut>

00004442 <.LSM18>:
        pin_clear(self->pins[1]);
    4442:	1e 00 78    	mov.w     [w14], w0
    4444:	50 00 90    	mov.w     [w0+10], w0
    4446:	bc fa 07    	rcall     0x39c0 <_pin_clear>

00004448 <.L2>:
    }
}
    4448:	00 80 fa    	ulnk      
    444a:	00 00 06    	return    

0000444c <_md_free>:

void md_free(_MD *self) {
    444c:	02 00 fa    	lnk       #0x2
    444e:	00 0f 78    	mov.w     w0, [w14]

00004450 <.LSM21>:
    // clear owned pins/oc's
}
    4450:	00 80 fa    	ulnk      
    4452:	00 00 06    	return    

00004454 <_md_brake>:

void md_brake(_MD *self) {
    4454:	02 00 fa    	lnk       #0x2
    4456:	00 0f 78    	mov.w     w0, [w14]

00004458 <.LSM23>:
    self->braked = 1;
    4458:	1e 00 78    	mov.w     [w14], w0
    445a:	11 c0 b3    	mov.b     #0x1, w1
    445c:	61 40 98    	mov.b     w1, [w0+6]

0000445e <.LSM24>:
    if (self == &mdp) {
    445e:	80 dd 20    	mov.w     #0xdd8, w0
    4460:	9e 00 78    	mov.w     [w14], w1
    4462:	80 8f 50    	sub.w     w1, w0, [w15]
    4464:	05 00 3a    	bra       NZ, 0x4470 <.L6>

00004466 <.LSM25>:
        md_brake(&md1);
    4466:	c0 db 20    	mov.w     #0xdbc, w0
    4468:	f5 ff 07    	rcall     0x4454 <_md_brake>

0000446a <.LSM26>:
        md_brake(&md2);
    446a:	a0 dc 20    	mov.w     #0xdca, w0
    446c:	f3 ff 07    	rcall     0x4454 <_md_brake>
    446e:	08 00 37    	bra       0x4480 <.L5>

00004470 <.L6>:
    } else {
        pin_write(self->pins[0], 0);
    4470:	1e 00 78    	mov.w     [w14], w0
    4472:	40 00 90    	mov.w     [w0+8], w0
    4474:	80 00 eb    	clr.w     w1
    4476:	cf fa 07    	rcall     0x3a16 <_pin_write>

00004478 <.LSM28>:
        pin_write(self->pins[1], 0);
    4478:	1e 00 78    	mov.w     [w14], w0
    447a:	50 00 90    	mov.w     [w0+10], w0
    447c:	80 00 eb    	clr.w     w1
    447e:	cb fa 07    	rcall     0x3a16 <_pin_write>

00004480 <.L5>:
    }
}
    4480:	00 80 fa    	ulnk      
    4482:	00 00 06    	return    

00004484 <_md_run>:

void md_run(_MD *self) {
    4484:	02 00 fa    	lnk       #0x2
    4486:	00 0f 78    	mov.w     w0, [w14]

00004488 <.LSM31>:
    self->braked = 0;
    4488:	1e 00 78    	mov.w     [w14], w0
    448a:	80 40 eb    	clr.b     w1
    448c:	61 40 98    	mov.b     w1, [w0+6]

0000448e <.LSM32>:
    if (self == &mdp) {
    448e:	80 dd 20    	mov.w     #0xdd8, w0
    4490:	9e 00 78    	mov.w     [w14], w1
    4492:	80 8f 50    	sub.w     w1, w0, [w15]
    4494:	05 00 3a    	bra       NZ, 0x44a0 <.L9>

00004496 <.LSM33>:
        md_run(&md1);
    4496:	c0 db 20    	mov.w     #0xdbc, w0
    4498:	f5 ff 07    	rcall     0x4484 <_md_run>

0000449a <.LSM34>:
        md_run(&md2);
    449a:	a0 dc 20    	mov.w     #0xdca, w0
    449c:	f3 ff 07    	rcall     0x4484 <_md_run>
    449e:	08 00 37    	bra       0x44b0 <.L8>

000044a0 <.L9>:
    } else {
        md_velocity(self, self->speed, self->dir);
    44a0:	1e 00 78    	mov.w     [w14], w0
    44a2:	90 40 78    	mov.b     [w0], w1
    44a4:	1e 00 78    	mov.w     [w14], w0
    44a6:	10 00 90    	mov.w     [w0+2], w0
    44a8:	01 41 78    	mov.b     w1, w2
    44aa:	80 00 78    	mov.w     w0, w1
    44ac:	1e 00 78    	mov.w     [w14], w0
    44ae:	66 00 07    	rcall     0x457c <_md_velocity>

000044b0 <.L8>:
    }
}
    44b0:	00 80 fa    	ulnk      
    44b2:	00 00 06    	return    

000044b4 <_md_speed>:

void md_speed(_MD *self, uint16_t speed) {
    44b4:	04 00 fa    	lnk       #0x4
    44b6:	00 0f 78    	mov.w     w0, [w14]
    44b8:	11 07 98    	mov.w     w1, [w14+2]

000044ba <.LSM38>:
    self->speed = speed;
    44ba:	1e 00 78    	mov.w     [w14], w0
    44bc:	9e 00 90    	mov.w     [w14+2], w1
    44be:	11 00 98    	mov.w     w1, [w0+2]

000044c0 <.LSM39>:

    if (self == &mdp) {
    44c0:	80 dd 20    	mov.w     #0xdd8, w0
    44c2:	9e 00 78    	mov.w     [w14], w1
    44c4:	80 8f 50    	sub.w     w1, w0, [w15]
    44c6:	0b 00 3a    	bra       NZ, 0x44de <.L12>

000044c8 <.LSM40>:
        md_speed(&md1, self->speed);
    44c8:	1e 00 78    	mov.w     [w14], w0
    44ca:	10 00 90    	mov.w     [w0+2], w0
    44cc:	80 00 78    	mov.w     w0, w1
    44ce:	c0 db 20    	mov.w     #0xdbc, w0
    44d0:	f1 ff 07    	rcall     0x44b4 <_md_speed>

000044d2 <.LSM41>:
        md_speed(&md2, self->speed);
    44d2:	1e 00 78    	mov.w     [w14], w0
    44d4:	10 00 90    	mov.w     [w0+2], w0
    44d6:	80 00 78    	mov.w     w0, w1
    44d8:	a0 dc 20    	mov.w     #0xdca, w0
    44da:	ec ff 07    	rcall     0x44b4 <_md_speed>
    44dc:	0d 00 37    	bra       0x44f8 <.L11>

000044de <.L12>:
    } else if (!self->braked) {
    44de:	1e 00 78    	mov.w     [w14], w0
    44e0:	60 40 90    	mov.b     [w0+6], w0
    44e2:	00 04 e0    	cp0.b     w0
    44e4:	09 00 3a    	bra       NZ, 0x44f8 <.L11>

000044e6 <.LSM43>:
        pin_write(self->pins[self->dir], speed);
    44e6:	1e 00 78    	mov.w     [w14], w0
    44e8:	10 40 78    	mov.b     [w0], w0
    44ea:	00 80 fb    	ze        w0, w0
    44ec:	9e 00 78    	mov.w     [w14], w1
    44ee:	64 00 40    	add.w     w0, #0x4, w0
    44f0:	00 00 40    	add.w     w0, w0, w0
    44f2:	61 00 78    	mov.w     [w1+w0], w0
    44f4:	9e 00 90    	mov.w     [w14+2], w1
    44f6:	8f fa 07    	rcall     0x3a16 <_pin_write>

000044f8 <.L11>:
    }
}
    44f8:	00 80 fa    	ulnk      
    44fa:	00 00 06    	return    

000044fc <_md_direction>:

void md_direction(_MD *self, uint8_t dir) {
    44fc:	04 00 fa    	lnk       #0x4
    44fe:	88 1f 78    	mov.w     w8, [w15++]
    4500:	00 0f 78    	mov.w     w0, [w14]
    4502:	21 47 98    	mov.b     w1, [w14+2]

00004504 <.LSM46>:
    if (self->dir == dir) {
    4504:	1e 00 78    	mov.w     [w14], w0
    4506:	90 40 78    	mov.b     [w0], w1
    4508:	2e 40 90    	mov.b     [w14+2], w0
    450a:	80 cf 50    	sub.b     w1, w0, [w15]
    450c:	33 00 32    	bra       Z, 0x4574 <.L18>

0000450e <.LSM47>:
        return;
    }
    self->dir = dir;
    450e:	1e 00 78    	mov.w     [w14], w0
    4510:	ae 40 90    	mov.b     [w14+2], w1
    4512:	01 48 78    	mov.b     w1, [w0]

00004514 <.LSM48>:

    if (self == &mdp) {
    4514:	80 dd 20    	mov.w     #0xdd8, w0
    4516:	9e 00 78    	mov.w     [w14], w1
    4518:	80 8f 50    	sub.w     w1, w0, [w15]
    451a:	07 00 3a    	bra       NZ, 0x452a <.L17>

0000451c <.LSM49>:
        md_direction(&md1, dir);
    451c:	ae 40 90    	mov.b     [w14+2], w1
    451e:	c0 db 20    	mov.w     #0xdbc, w0
    4520:	ed ff 07    	rcall     0x44fc <_md_direction>

00004522 <.LSM50>:
        md_direction(&md2, dir);
    4522:	ae 40 90    	mov.b     [w14+2], w1
    4524:	a0 dc 20    	mov.w     #0xdca, w0
    4526:	ea ff 07    	rcall     0x44fc <_md_direction>
    4528:	26 00 37    	bra       0x4576 <.L14>

0000452a <.L17>:
    } else {
        oc_free(self->oc);
    452a:	1e 00 78    	mov.w     [w14], w0
    452c:	60 00 90    	mov.w     [w0+12], w0
    452e:	69 fb 07    	rcall     0x3c02 <_oc_free>

00004530 <.LSM52>:
        oc_pwm(self->oc, self->pins[dir], &timer5, self->freq, self->speed);
    4530:	1e 00 78    	mov.w     [w14], w0
    4532:	10 04 90    	mov.w     [w0+2], w8
    4534:	1e 00 78    	mov.w     [w14], w0
    4536:	20 00 90    	mov.w     [w0+4], w0
    4538:	80 00 eb    	clr.w     w1
    453a:	2c e7 07    	rcall     0x1394 <___floatunsisf>
    453c:	2e 41 90    	mov.b     [w14+2], w2
    453e:	02 81 fb    	ze        w2, w2
    4540:	9e 01 78    	mov.w     [w14], w3
    4542:	64 01 41    	add.w     w2, #0x4, w2
    4544:	02 01 41    	add.w     w2, w2, w2
    4546:	e3 03 79    	mov.w     [w3+w2], w7
    4548:	1e 01 78    	mov.w     [w14], w2
    454a:	62 03 90    	mov.w     [w2+12], w6
    454c:	88 01 78    	mov.w     w8, w3
    454e:	00 02 be    	mov.d     w0, w4
    4550:	42 d6 20    	mov.w     #0xd64, w2
    4552:	87 00 78    	mov.w     w7, w1
    4554:	06 00 78    	mov.w     w6, w0
    4556:	94 fb 07    	rcall     0x3c80 <_oc_pwm>

00004558 <.LSM53>:
        OC5CON2 = 0x000F; //synchronize to timer5
    4558:	f0 00 20    	mov.w     #0xf, w0
    455a:	d0 0d 88    	mov.w     w0, 0x1ba

0000455c <.LSM54>:
        OC7CON2 = 0x000F;
    455c:	f0 00 20    	mov.w     #0xf, w0
    455e:	70 0e 88    	mov.w     w0, 0x1ce

00004560 <.LSM55>:
        pin_clear(self->pins[!dir]);
    4560:	2e 40 90    	mov.b     [w14+2], w0
    4562:	00 80 fb    	ze        w0, w0
    4564:	00 00 e9    	dec.w     w0, w0
    4566:	4f 00 de    	lsr.w     w0, #0xf, w0
    4568:	9e 00 78    	mov.w     [w14], w1
    456a:	64 00 40    	add.w     w0, #0x4, w0
    456c:	00 00 40    	add.w     w0, w0, w0
    456e:	61 00 78    	mov.w     [w1+w0], w0
    4570:	27 fa 07    	rcall     0x39c0 <_pin_clear>
    4572:	01 00 37    	bra       0x4576 <.L14>

00004574 <.L18>:
    4574:	00 00 00    	nop       

00004576 <.L14>:
    }
}
    4576:	4f 04 78    	mov.w     [--w15], w8
    4578:	00 80 fa    	ulnk      
    457a:	00 00 06    	return    

0000457c <_md_velocity>:

void md_velocity(_MD *self, uint16_t speed, uint8_t dir) {
    457c:	06 00 fa    	lnk       #0x6
    457e:	00 0f 78    	mov.w     w0, [w14]
    4580:	11 07 98    	mov.w     w1, [w14+2]
    4582:	42 47 98    	mov.b     w2, [w14+4]

00004584 <.LSM59>:
    md_speed(self, speed);
    4584:	9e 00 90    	mov.w     [w14+2], w1
    4586:	1e 00 78    	mov.w     [w14], w0
    4588:	95 ff 07    	rcall     0x44b4 <_md_speed>

0000458a <.LSM60>:
    md_direction(self, dir);
    458a:	ce 40 90    	mov.b     [w14+4], w1
    458c:	1e 00 78    	mov.w     [w14], w0
    458e:	b6 ff 07    	rcall     0x44fc <_md_direction>

00004590 <.LSM61>:
}    4590:	00 80 fa    	ulnk      
    4592:	00 00 06    	return    

00004594 <_wait>:
uint16_t val1, val2;

_LED *green_led, *red_led, *blue_led;

void wait(void) {
    4594:	00 00 fa    	lnk       #0x0

00004596 <.LSM1>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    4596:	21 42 80    	mov.w     0x844, w1
    4598:	30 42 80    	mov.w     0x846, w0
    459a:	80 8f 50    	sub.w     w1, w0, [w15]
    459c:	06 00 32    	bra       Z, 0x45aa <.L2>

0000459e <.LSM2>:
        last_state = state;
    459e:	20 42 80    	mov.w     0x844, w0
    45a0:	30 42 88    	mov.w     w0, 0x846

000045a2 <.LSM3>:
        pin_toggle(DIR);
    45a2:	90 41 80    	mov.w     0x832, w0
    45a4:	23 fa 07    	rcall     0x39ec <_pin_toggle>

000045a6 <.LSM4>:
        led_on(red_led);
    45a6:	a0 42 80    	mov.w     0x854, w0
    45a8:	62 fe 07    	rcall     0x426e <_led_on>

000045aa <.L2>:
    }

    // Perform state tasks

    // Check for state transitions
    if (timer_flag(&timer2)) {
    45aa:	20 d2 20    	mov.w     #0xd22, w0
    45ac:	f9 f4 07    	rcall     0x2fa0 <_timer_flag>
    45ae:	00 00 e0    	cp0.w     w0
    45b0:	05 00 32    	bra       Z, 0x45bc <.L3>

000045b2 <.LSM6>:
        timer_lower(&timer2);
    45b2:	20 d2 20    	mov.w     #0xd22, w0
    45b4:	06 f5 07    	rcall     0x2fc2 <_timer_lower>

000045b6 <.LSM7>:
        counter = counter + 1;
    45b6:	40 42 80    	mov.w     0x848, w0
    45b8:	00 00 e8    	inc.w     w0, w0
    45ba:	40 42 88    	mov.w     w0, 0x848

000045bc <.L3>:
    }
    if (counter > countLimit) {
    45bc:	41 42 80    	mov.w     0x848, w1
    45be:	50 43 80    	mov.w     0x86a, w0
    45c0:	80 8f 50    	sub.w     w1, w0, [w15]
    45c2:	03 00 36    	bra       LEU, 0x45ca <.L4>

000045c4 <.LSM9>:
        state = drive;
    45c4:	a0 5d 24    	mov.w     #0x45da, w0
    45c6:	20 42 88    	mov.w     w0, 0x844

000045c8 <.LSM10>:
        counter = 0;
    45c8:	48 28 ef    	clr.w     0x848

000045ca <.L4>:
    }


    if (state != last_state) {  // if we are leaving the state, do clean up stuff
    45ca:	21 42 80    	mov.w     0x844, w1
    45cc:	30 42 80    	mov.w     0x846, w0
    45ce:	80 8f 50    	sub.w     w1, w0, [w15]
    45d0:	02 00 32    	bra       Z, 0x45d6 <.L1>

000045d2 <.LSM12>:
        led_off(red_led);
    45d2:	a0 42 80    	mov.w     0x854, w0
    45d4:	5c fe 07    	rcall     0x428e <_led_off>

000045d6 <.L1>:
    }
}
    45d6:	00 80 fa    	ulnk      
    45d8:	00 00 06    	return    

000045da <_drive>:

void drive(void) {
    45da:	00 00 fa    	lnk       #0x0

000045dc <.LSM15>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    45dc:	21 42 80    	mov.w     0x844, w1
    45de:	30 42 80    	mov.w     0x846, w0
    45e0:	80 8f 50    	sub.w     w1, w0, [w15]
    45e2:	04 00 32    	bra       Z, 0x45ec <.L7>

000045e4 <.LSM16>:
        last_state = state;
    45e4:	20 42 80    	mov.w     0x844, w0
    45e6:	30 42 88    	mov.w     w0, 0x846

000045e8 <.LSM17>:
        led_on(green_led);
    45e8:	90 42 80    	mov.w     0x852, w0
    45ea:	41 fe 07    	rcall     0x426e <_led_on>

000045ec <.L7>:
    }

    // Perform state tasks
    // Step motor
    if (timer_flag(&timer2)) {
    45ec:	20 d2 20    	mov.w     #0xd22, w0
    45ee:	d8 f4 07    	rcall     0x2fa0 <_timer_flag>
    45f0:	00 00 e0    	cp0.w     w0
    45f2:	14 00 32    	bra       Z, 0x461c <.L6>

000045f4 <.LSM19>:
        timer_lower(&timer2);
    45f4:	20 d2 20    	mov.w     #0xd22, w0
    45f6:	e5 f4 07    	rcall     0x2fc2 <_timer_lower>

000045f8 <.LSM20>:
        // if (timerCounter >= timerCountLimit) {
        //     timerCounter = 0;
            pin_toggle(STEP);
    45f8:	80 41 80    	mov.w     0x830, w0
    45fa:	f8 f9 07    	rcall     0x39ec <_pin_toggle>

000045fc <.LSM21>:
        //     if (timerDir == 1) {
        //         // switch timerDir
        //         if (timerCountLimit <= 0) {
        //             timerCountLimit = 490;
        //             timerDir = 0;                    
        //         }
        //         else {
        //             timerCountLimit = timerCountLimit + timerIncr;
        //         }
        //     }
        //     else if (timerDir == 0) {
        //         // switch timerDir
        //         if (timerCountLimit >= 500) {
        //             timerCountLimit = 490;
        //             timerDir = 1;                    
        //         }
        //         else {
        //             timerCountLimit = timerCountLimit - timerIncr;
        //         }
        //     }
        // }
        // else {
        //     timerCounter = timerCounter + 1;
        // }
        counter = counter + 1;
    45fc:	40 42 80    	mov.w     0x848, w0
    45fe:	00 00 e8    	inc.w     w0, w0
    4600:	40 42 88    	mov.w     w0, 0x848

00004602 <.LSM22>:
    // }
    if (counter > countLimit) {
    4602:	41 42 80    	mov.w     0x848, w1
    4604:	50 43 80    	mov.w     0x86a, w0
    4606:	80 8f 50    	sub.w     w1, w0, [w15]
    4608:	03 00 36    	bra       LEU, 0x4610 <.L9>

0000460a <.LSM23>:
        state = wait;
    460a:	40 59 24    	mov.w     #0x4594, w0
    460c:	20 42 88    	mov.w     w0, 0x844

0000460e <.LSM24>:
        counter = 0;
    460e:	48 28 ef    	clr.w     0x848

00004610 <.L9>:
    }

    // Check for state transitions

    if (state != last_state) {  // if we are leaving the state, do clean up stuff
    4610:	21 42 80    	mov.w     0x844, w1
    4612:	30 42 80    	mov.w     0x846, w0
    4614:	80 8f 50    	sub.w     w1, w0, [w15]
    4616:	02 00 32    	bra       Z, 0x461c <.L6>

00004618 <.LSM26>:
        led_off(green_led);
    4618:	90 42 80    	mov.w     0x852, w0
    461a:	39 fe 07    	rcall     0x428e <_led_off>

0000461c <.L6>:
    }
}
}
    461c:	00 80 fa    	ulnk      
    461e:	00 00 06    	return    

00004620 <_VendorRequests>:

void VendorRequests(void) {
    4620:	02 00 fa    	lnk       #0x2

00004622 <.LSM29>:
    WORD temp;
    switch (USB_setup.bRequest) {
    4622:	c0 85 20    	mov.w     #0x85c, w0
    4624:	10 40 90    	mov.b     [w0+1], w0
    4626:	00 80 fb    	ze        w0, w0
    4628:	00 00 e0    	cp0.w     w0
    462a:	03 00 32    	bra       Z, 0x4632 <.L12>
    462c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    462e:	0b 00 32    	bra       Z, 0x4646 <.L13>
    4630:	24 00 37    	bra       0x467a <.L15>

00004632 <.L12>:
        case SET_VALS:
            state = USB_setup.wValue.w;
    4632:	c0 85 20    	mov.w     #0x85c, w0
    4634:	10 00 90    	mov.w     [w0+2], w0
    4636:	20 42 88    	mov.w     w0, 0x844

00004638 <.LSM31>:
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    4638:	40 c0 20    	mov.w     #0xc04, w0
    463a:	80 40 eb    	clr.b     w1
    463c:	01 48 78    	mov.b     w1, [w0]

0000463e <.LSM32>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    463e:	50 c0 20    	mov.w     #0xc05, w0
    4640:	81 cc b3    	mov.b     #0xc8, w1
    4642:	01 48 78    	mov.b     w1, [w0]

00004644 <.LSM33>:
            break;
    4644:	1d 00 37    	bra       0x4680 <.L10>

00004646 <.L13>:
        case GET_VALS:
            temp.w = val1;
    4646:	70 42 80    	mov.w     0x84e, w0
    4648:	00 0f 78    	mov.w     w0, [w14]

0000464a <.LSM35>:
            BD[EP0IN].address[0] = temp.b[0];
    464a:	30 60 80    	mov.w     0xc06, w0
    464c:	9e 40 78    	mov.b     [w14], w1
    464e:	01 48 78    	mov.b     w1, [w0]

00004650 <.LSM36>:
            BD[EP0IN].address[1] = temp.b[1];
    4650:	30 60 80    	mov.w     0xc06, w0
    4652:	00 00 e8    	inc.w     w0, w0
    4654:	9e 40 90    	mov.b     [w14+1], w1
    4656:	01 48 78    	mov.b     w1, [w0]

00004658 <.LSM37>:
            temp.w = val2;
    4658:	80 42 80    	mov.w     0x850, w0
    465a:	00 0f 78    	mov.w     w0, [w14]

0000465c <.LSM38>:
            BD[EP0IN].address[2] = temp.b[0];
    465c:	30 60 80    	mov.w     0xc06, w0
    465e:	00 80 e8    	inc2.w    w0, w0
    4660:	9e 40 78    	mov.b     [w14], w1
    4662:	01 48 78    	mov.b     w1, [w0]

00004664 <.LSM39>:
            BD[EP0IN].address[3] = temp.b[1];
    4664:	30 60 80    	mov.w     0xc06, w0
    4666:	63 00 40    	add.w     w0, #0x3, w0
    4668:	9e 40 90    	mov.b     [w14+1], w1
    466a:	01 48 78    	mov.b     w1, [w0]

0000466c <.LSM40>:
            BD[EP0IN].bytecount = 4;    // set EP0 IN byte count to 4
    466c:	40 c0 20    	mov.w     #0xc04, w0
    466e:	41 c0 b3    	mov.b     #0x4, w1
    4670:	01 48 78    	mov.b     w1, [w0]

00004672 <.LSM41>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4672:	50 c0 20    	mov.w     #0xc05, w0
    4674:	81 cc b3    	mov.b     #0xc8, w1
    4676:	01 48 78    	mov.b     w1, [w0]

00004678 <.LSM42>:
            break;            
    4678:	03 00 37    	bra       0x4680 <.L10>

0000467a <.L15>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    467a:	64 c8 bf    	mov.b     0x864, WREG
    467c:	00 04 a0    	bset.b    w0, #0x0
    467e:	64 e8 b7    	mov.b     WREG, 0x864

00004680 <.L10>:
    }
}
    4680:	00 80 fa    	ulnk      
    4682:	00 00 06    	return    

00004684 <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    4684:	00 00 fa    	lnk       #0x0

00004686 <.LSM46>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4686:	64 c8 bf    	mov.b     0x864, WREG
    4688:	00 04 a0    	bset.b    w0, #0x0
    468a:	64 e8 b7    	mov.b     WREG, 0x864

0000468c <.LSM47>:
    }
}
    468c:	00 80 fa    	ulnk      
    468e:	00 00 06    	return    

00004690 <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    4690:	00 00 fa    	lnk       #0x0

00004692 <.LSM49>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4692:	64 c8 bf    	mov.b     0x864, WREG
    4694:	00 04 a0    	bset.b    w0, #0x0
    4696:	64 e8 b7    	mov.b     WREG, 0x864

00004698 <.LSM50>:
    }
}
    4698:	00 80 fa    	ulnk      
    469a:	00 00 06    	return    

0000469c <_main>:

int16_t main(void) {
    469c:	06 00 fa    	lnk       #0x6

0000469e <.LSM52>:
    init_clock();
    469e:	00 10 20    	mov.w     #0x100, w0
    46a0:	20 3a 88    	mov.w     w0, 0x744

000046a2 <.LSM53>:
    init_ui();
    46a2:	83 fd 07    	rcall     0x41aa <_init_ui>

000046a4 <.LSM54>:
    init_spi();
    46a4:	0f f5 07    	rcall     0x30c4 <_init_spi>

000046a6 <.LSM55>:
    init_oc();
    46a6:	3d fa 07    	rcall     0x3b22 <_init_oc>

000046a8 <.LSM56>:
    init_pin();
    46a8:	b2 f7 07    	rcall     0x360e <_init_pin>

000046aa <.LSM57>:
    init_uart();
    46aa:	80 e9 07    	rcall     0x19ac <_init_uart>

000046ac <.LSM58>:
    init_timer();
    46ac:	21 f3 07    	rcall     0x2cf0 <_init_timer>

000046ae <.LSM59>:
    init_md();
    46ae:	81 fe 07    	rcall     0x43b2 <_init_md>

000046b0 <.LSM60>:
    init_st();
    46b0:	2e fc 07    	rcall     0x3f0e <_init_st>

000046b2 <.LSM61>:

    LEFT = &D[12];
    46b2:	c0 97 20    	mov.w     #0x97c, w0
    46b4:	00 42 88    	mov.w     w0, 0x840

000046b6 <.LSM62>:
    RIGHT = &D[13];
    46b6:	20 99 20    	mov.w     #0x992, w0
    46b8:	10 42 88    	mov.w     w0, 0x842

000046ba <.LSM63>:

    led_on(&led1);//LED to tell if it is in run mode
    46ba:	00 80 20    	mov.w     #0x800, w0
    46bc:	d8 fd 07    	rcall     0x426e <_led_on>

000046be <.LSM64>:

    timer_setPeriod(&timer2, .001);
    46be:	f2 26 21    	mov.w     #0x126f, w2
    46c0:	33 a8 23    	mov.w     #0x3a83, w3
    46c2:	20 d2 20    	mov.w     #0xd22, w0
    46c4:	80 f3 07    	rcall     0x2dc6 <_timer_setPeriod>

000046c6 <.LSM65>:
    timer_start(&timer2);
    46c6:	20 d2 20    	mov.w     #0xd22, w0
    46c8:	4d f4 07    	rcall     0x2f64 <_timer_start>

000046ca <.LSM66>:

    // // Comment these pins later
    // STEP = &D[0];
    // DIR = &D[1];
    // SLP = &D[2];
    // ENABLE = &D[3];
    // // PFD not initializing properly...
    // PFD = &D[4];
    // RST = &D[5];
    // MS1 = &D[6];
    // MS2 = &D[7];

    // pin_digitalOut(STEP);
    // pin_digitalOut(DIR);
    // pin_digitalOut(SLP);
    // pin_digitalOut(ENABLE);
    // pin_digitalOut(PFD);
    // pin_digitalOut(RST);
    // pin_digitalOut(MS1);
    // pin_digitalOut(MS2);

    // pin_clear(STEP);
    // pin_set(DIR);
    // pin_set(SLP);
    // pin_clear(ENABLE);
    // pin_clear(PFD);
    // pin_set(RST);
    // pin_clear(MS1);
    // pin_clear(MS2);

    // InitUSB();                              // initialize the USB registers and serial interface engine
    // while (USB_USWSTAT!=CONFIG_STATE) {     // while the peripheral is not configured...
    //     ServiceUSB();                       // ...service USB requests
    // }

    green_led = &led2;
    46ca:	80 80 20    	mov.w     #0x808, w0
    46cc:	90 42 88    	mov.w     w0, 0x852

000046ce <.LSM67>:
    red_led = &led1;
    46ce:	00 80 20    	mov.w     #0x800, w0
    46d0:	a0 42 88    	mov.w     w0, 0x854

000046d2 <.LSM68>:
    blue_led = &led3;
    46d2:	00 81 20    	mov.w     #0x810, w0
    46d4:	b0 42 88    	mov.w     w0, 0x856

000046d6 <.LSM69>:

    state = wait;
    46d6:	40 59 24    	mov.w     #0x4594, w0
    46d8:	20 42 88    	mov.w     w0, 0x844

000046da <.LSM70>:
    last_state = (STATE_HANDLER_T)NULL;
    46da:	46 28 ef    	clr.w     0x846

000046dc <.LSM71>:

    float freq = 100.0;
    46dc:	00 00 20    	mov.w     #0x0, w0
    46de:	81 2c 24    	mov.w     #0x42c8, w1
    46e0:	00 8f be    	mov.d     w0, [w14]

000046e2 <.LSM72>:
    uint16_t accel = 10;
    46e2:	a0 00 20    	mov.w     #0xa, w0
    46e4:	20 07 98    	mov.w     w0, [w14+4]

000046e6 <.LSM73>:
    st_state(&st_d, 1);
    46e6:	11 c0 b3    	mov.b     #0x1, w1
    46e8:	60 de 20    	mov.w     #0xde6, w0
    46ea:	83 fc 07    	rcall     0x3ff2 <_st_state>
    46ec:	01 00 37    	bra       0x46f0 <.L22>

000046ee <.L23>:

    while (1) {
        // state();
        if (timer_flag(&timer2)) {
            if (pin_read(LEFT)) {
                st_direction(&st_d, 0);
                st_speed(&st_d, freq);
                led_on(&led1);
                led_off(&led3);
            }
            else if (pin_read(RIGHT)) {
                st_direction(&st_d, 1);
                st_speed(&st_d, freq);
                led_off(&led1);
                led_on(&led3);
            }
            else {
                st_speed(&st_d, 0);
                led_off(&led1);
                led_off(&led3);
            }
        }
    }
    46ee:	00 00 00    	nop       

000046f0 <.L22>:
    46f0:	20 d2 20    	mov.w     #0xd22, w0
    46f2:	56 f4 07    	rcall     0x2fa0 <_timer_flag>
    46f4:	00 00 e0    	cp0.w     w0
    46f6:	fb ff 32    	bra       Z, 0x46ee <.L23>

000046f8 <.LSM76>:
    46f8:	00 42 80    	mov.w     0x840, w0
    46fa:	9b f9 07    	rcall     0x3a32 <_pin_read>
    46fc:	00 00 e0    	cp0.w     w0
    46fe:	0b 00 32    	bra       Z, 0x4716 <.L20>

00004700 <.LSM77>:
    4700:	80 40 eb    	clr.b     w1
    4702:	60 de 20    	mov.w     #0xde6, w0
    4704:	f5 fc 07    	rcall     0x40f0 <_st_direction>

00004706 <.LSM78>:
    4706:	1e 01 be    	mov.d     [w14], w2
    4708:	60 de 20    	mov.w     #0xde6, w0
    470a:	b9 fc 07    	rcall     0x407e <_st_speed>

0000470c <.LSM79>:
    470c:	00 80 20    	mov.w     #0x800, w0
    470e:	af fd 07    	rcall     0x426e <_led_on>

00004710 <.LSM80>:
    4710:	00 81 20    	mov.w     #0x810, w0
    4712:	bd fd 07    	rcall     0x428e <_led_off>

00004714 <.LSM81>:
    4714:	ed ff 37    	bra       0x46f0 <.L22>

00004716 <.L20>:
    4716:	10 42 80    	mov.w     0x842, w0
    4718:	8c f9 07    	rcall     0x3a32 <_pin_read>
    471a:	00 00 e0    	cp0.w     w0
    471c:	0b 00 32    	bra       Z, 0x4734 <.L21>

0000471e <.LSM83>:
    471e:	11 c0 b3    	mov.b     #0x1, w1
    4720:	60 de 20    	mov.w     #0xde6, w0
    4722:	e6 fc 07    	rcall     0x40f0 <_st_direction>

00004724 <.LSM84>:
    4724:	1e 01 be    	mov.d     [w14], w2
    4726:	60 de 20    	mov.w     #0xde6, w0
    4728:	aa fc 07    	rcall     0x407e <_st_speed>

0000472a <.LSM85>:
    472a:	00 80 20    	mov.w     #0x800, w0
    472c:	b0 fd 07    	rcall     0x428e <_led_off>

0000472e <.LSM86>:
    472e:	00 81 20    	mov.w     #0x810, w0
    4730:	9e fd 07    	rcall     0x426e <_led_on>

00004732 <.LSM87>:
    4732:	de ff 37    	bra       0x46f0 <.L22>

00004734 <.L21>:
    4734:	60 11 b8    	mul.uu    w2, #0x0, w2
    4736:	60 de 20    	mov.w     #0xde6, w0
    4738:	a2 fc 07    	rcall     0x407e <_st_speed>

0000473a <.LSM89>:
    473a:	00 80 20    	mov.w     #0x800, w0
    473c:	a8 fd 07    	rcall     0x428e <_led_off>

0000473e <.LSM90>:
    473e:	00 81 20    	mov.w     #0x810, w0
    4740:	a6 fd 07    	rcall     0x428e <_led_off>

00004742 <.LSM91>:
    4742:	d6 ff 37    	bra       0x46f0 <.L22>
Disassembly of section .dinit:

00004744 <.dinit>:
    4744:	30 08 00    	nop       
    4746:	28 00 00    	nop       
    4748:	80 00 00    	nop       
    474a:	6a 08 00    	nop       
    474c:	06 00 00    	nop       
    474e:	82 00 00    	nop       
    4750:	c4 09 14    	subr.w    w8, [--w4], [w3]
    4752:	01 01 00    	nop       
    4754:	ea 0b 00    	nop       
    4756:	10 00 00    	nop       
    4758:	82 00 00    	nop       
    475a:	bd 37 86    	mov.w     0xc6f6, w13
    475c:	33 bd 37    	bra       0xffffc1c4
    475e:	06 35 bd    	subr.w    0x1506
    4760:	37 86 36    	bra       LEU, 0xffff53d0
    4762:	bd 37 86    	mov.w     0xc6f6, w13
    4764:	37 00 00    	nop       
    4766:	0c 0d 00    	nop       
    4768:	6e 00 00    	nop       
    476a:	80 00 00    	nop       
    476c:	00 08 00    	nop       
    476e:	30 00 00    	nop       
    4770:	80 00 00    	nop       
    4772:	74 08 00    	nop       
    4774:	b8 01 00    	nop       
    4776:	80 00 00    	nop       
    4778:	7a 0d 00    	nop       
    477a:	42 00 00    	nop       
    477c:	80 00 00    	nop       
    477e:	48 0b 00    	nop       
    4780:	a2 00 00    	nop       
    4782:	80 00 00    	nop       
    4784:	2c 0a 00    	nop       
    4786:	1c 01 00    	nop       
    4788:	80 00 00    	nop       
    478a:	70 08 00    	nop       
    478c:	04 00 00    	nop       
    478e:	80 00 00    	nop       
    4790:	80 0c 00    	nop       
    4792:	8c 00 00    	nop       
    4794:	80 00 00    	nop       
    4796:	00 0c 00    	nop       
    4798:	80 00 00    	nop       
    479a:	80 00 00    	nop       
    479c:	58 08 00    	nop       
    479e:	12 00 00    	nop       
    47a0:	80 00 00    	nop       
    47a2:	bc 0d 00    	nop       
    47a4:	2a 00 00    	nop       
    47a6:	80 00 00    	nop       
    47a8:	e6 0d 00    	nop       
    47aa:	1e 00 00    	nop       
    47ac:	80 00 00    	nop       
    47ae:	00 00 00    	nop       
Disassembly of section .text:

000047b0 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    47b0:	02 00 fa    	lnk       #0x2
    47b2:	00 0f 78    	mov.w     w0, [w14]

000047b4 <.LSM1>:
    v ^= v >> 8;
    47b4:	1e 00 78    	mov.w     [w14], w0
    47b6:	48 00 de    	lsr.w     w0, #0x8, w0
    47b8:	1e 0f 68    	xor.w     w0, [w14], [w14]

000047ba <.LSM2>:
    v ^= v >> 4;
    47ba:	1e 00 78    	mov.w     [w14], w0
    47bc:	44 00 de    	lsr.w     w0, #0x4, w0
    47be:	1e 0f 68    	xor.w     w0, [w14], [w14]

000047c0 <.LSM3>:
    v ^= v >> 2;
    47c0:	1e 00 78    	mov.w     [w14], w0
    47c2:	42 00 de    	lsr.w     w0, #0x2, w0
    47c4:	1e 0f 68    	xor.w     w0, [w14], [w14]

000047c6 <.LSM4>:
    v ^= v >> 1;
    47c6:	1e 00 78    	mov.w     [w14], w0
    47c8:	00 00 d1    	lsr.w     w0, w0
    47ca:	1e 0f 68    	xor.w     w0, [w14], [w14]

000047cc <.LSM5>:
    return v & 1;
    47cc:	1e 00 78    	mov.w     [w14], w0
    47ce:	00 40 78    	mov.b     w0, w0
    47d0:	61 40 60    	and.b     w0, #0x1, w0

000047d2 <.LSM6>:
}
    47d2:	00 80 fa    	ulnk      
    47d4:	00 00 06    	return    
Disassembly of section .isr:

000047d6 <__DefaultInterrupt>:
    47d6:	00 40 da    	.pword 0xda4000
    47d8:	00 00 fe    	reset     
