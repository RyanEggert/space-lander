# import bootloadercmd as b

env = Environment(PIC='24FJ128GB206',
                  CC='xc16-gcc',
                  PROGSUFFIX='.elf',
                  CFLAGS='-g -omf=elf -x c -mcpu=$PIC',
                  LINKFLAGS='-omf=elf -mcpu=$PIC -Wl,--script="app_p24FJ128GB206.gld"',
                  CPPPATH=['../lib', '../include'])
env.PrependENVPath('PATH', '/opt/microchip/xc16/v1.25/bin')
env.PrependENVPath('PATH', '/opt/microchip/xc16/v1.25/bin')
bin2hex = Builder(action='xc16-bin2hex $SOURCE -omf=elf',
                  suffix='hex',
                  src_suffix='elf')
env.Append(BUILDERS={'Hex': bin2hex})
build_list = Builder(action='xc16-objdump -S -D $SOURCE > $TARGET',
               suffix='lst',
               src_suffix='elf')
env.Append(BUILDERS={'List': build_list})

env.Program('rocket_main', ['main.c',
                            '../lib/common.c',
                            '../lib/pin.c',
                            '../lib/ui.c',
                            '../lib/timer.c',
                            '../lib/quad.c',
                            '../lib/stops.c',
                            '../lib/oc.c',
                            '../lib/i2c.c',
                            '../lib/servo.c',
                            '../lib/uart.c',
                            '../lib/usb.c',
                            '../lib/dcm.c',
                            '../lib/stepper.c',
                            'descriptors.c'])

<<<<<<< HEAD
# print('Creating builder to load hex file via bootloader...')
# def load_function(target, source, env):
#     bl = b.bootloadercmd()
#     bl.import_hex(source[0].rstr())
#     bl.write_device()
#     bl.bootloader.start_user()
#     bl.bootloader.close()
#     return None

# load = Builder(action=load_function,
#                suffix = 'none',
#                src_suffix = 'hex')

# env.Append(BUILDERS = {'Load' : load})

env.Hex('rocket_main')
env.List('rocket_main')
# env.Load('rocket_main')