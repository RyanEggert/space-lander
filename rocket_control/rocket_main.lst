
rocket_main.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	ef 65 22    	mov.w     #0x265e, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	00 4d 25    	mov.w     #0x54d0, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	3e 4e 02    	call      0x4e3e <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	40 01 20    	mov.w     #0x14, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	38 3d 04    	goto      0x3d38 <___digitalRead>
    11e4:	00 00 00 
    11e6:	f4 3c 04    	goto      0x3cf4 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	5a 3d 04    	goto      0x3d5a <___analogRead>
    11ec:	00 00 00 
    11ee:	e4 53 04    	goto      0x53e4 <__read_quad1>
    11f0:	00 00 00 
    11f2:	ee 53 04    	goto      0x53ee <__read_quad2>
    11f4:	00 00 00 
    11f6:	cc 53 04    	goto      0x53cc <__timer_read_quad1>
    11f8:	00 00 00 
    11fa:	d8 53 04    	goto      0x53d8 <__timer_read_quad2>
    11fc:	00 00 00 
    11fe:	16 2a 04    	goto      0x2a16 <___putc_nobuffer>
    1200:	00 00 00 
    1202:	58 2a 04    	goto      0x2a58 <___putc_buffer>
    1204:	00 00 00 
    1206:	3a 2a 04    	goto      0x2a3a <___getc_nobuffer>
    1208:	00 00 00 
    120a:	50 2b 04    	goto      0x2b50 <___getc_buffer>
    120c:	00 00 00 
    120e:	e4 41 04    	goto      0x41e4 <___pwmWrite>
    1210:	00 00 00 
    1212:	b6 41 04    	goto      0x41b6 <___pwmRead>
    1214:	00 00 00 
    1216:	4e 42 04    	goto      0x424e <___servoWrite>
    1218:	00 00 00 
    121a:	1c 42 04    	goto      0x421c <___servoRead>
    121c:	00 00 00 
    121e:	fe 19 04    	goto      0x19fe <_prout>
    1220:	00 00 00 
    1222:	9e 1d 04    	goto      0x1d9e <_prout>
    1224:	00 00 00 
    1226:	f8 26 04    	goto      0x26f8 <_closeall>
    1228:	00 00 00 
    122a:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    122c:	00 00 00 

0000122e <_close>:
    122e:	0a 00 fa    	lnk       #0xa
    1230:	11 00 20    	mov.w     #0x1, w1
    1232:	b1 bf 9f    	mov.w     w1, [w15-10]
    1234:	c0 bf 9f    	mov.w     w0, [w15-8]
    1236:	6a 80 57    	sub.w     w15, #0xa, w0
    1238:	7b 0a 07    	rcall     0x2730 <_doclose>
    123a:	4f b8 97    	mov.w     [w15-8], w0
    123c:	00 80 fa    	ulnk      
    123e:	00 00 06    	return    

00001240 <_remove>:
    1240:	0a 00 fa    	lnk       #0xa
    1242:	51 00 20    	mov.w     #0x5, w1
    1244:	b1 bf 9f    	mov.w     w1, [w15-10]
    1246:	c0 bf 9f    	mov.w     w0, [w15-8]
    1248:	6a 80 57    	sub.w     w15, #0xa, w0
    124a:	74 0a 07    	rcall     0x2734 <_doremove>
    124c:	5f b8 97    	mov.w     [w15-6], w0
    124e:	00 80 fa    	ulnk      
    1250:	00 00 06    	return    

00001252 <_sbrk>:
    1252:	88 9f be    	mov.d     w8, [w15++]
    1254:	80 04 78    	mov.w     w0, w9
    1256:	e0 32 81    	mov.w     0x265c, w0
    1258:	00 00 e0    	cp0.w     w0
    125a:	04 00 3a    	bra       NZ, 0x1264 <.L2>
    125c:	0e 00 07    	rcall     0x127a <_brk>
    125e:	00 84 eb    	setm.w    w8
    1260:	00 00 e0    	cp0.w     w0
    1262:	08 00 35    	bra       LT, 0x1274 <.L3>

00001264 <.L2>:
    1264:	e8 32 81    	mov.w     0x265c, w8
    1266:	09 00 e0    	cp0.w     w9
    1268:	05 00 32    	bra       Z, 0x1274 <.L3>
    126a:	09 00 44    	add.w     w8, w9, w0
    126c:	06 00 07    	rcall     0x127a <_brk>
    126e:	00 00 e0    	cp0.w     w0
    1270:	01 00 3d    	bra       GE, 0x1274 <.L3>
    1272:	00 84 eb    	setm.w    w8

00001274 <.L3>:
    1274:	08 00 78    	mov.w     w8, w0
    1276:	4f 04 be    	mov.d     [--w15], w8
    1278:	00 00 06    	return    

0000127a <_brk>:
    127a:	80 00 78    	mov.w     w0, w1
    127c:	01 00 e0    	cp0.w     w1
    127e:	03 00 3a    	bra       NZ, 0x1286 <.L2>
    1280:	00 00 20    	mov.w     #0x0, w0
    1282:	e0 32 89    	mov.w     w0, 0x265c
    1284:	00 00 05    	retlw.w   #0x0, w0

00001286 <.L2>:
    1286:	00 80 eb    	setm.w    w0
    1288:	02 00 20    	mov.w     #0x0, w2
    128a:	82 8f 50    	sub.w     w1, w2, [w15]
    128c:	02 00 3e    	bra       GTU, 0x1292 <.L3>
    128e:	e1 32 89    	mov.w     w1, 0x265c
    1290:	00 00 eb    	clr.w     w0

00001292 <.L3>:
    1292:	00 00 06    	return    

00001294 <___subsf3>:
    1294:	03 f0 a2    	btg.w     w3, #0xf

00001296 <___addsf3>:
    1296:	88 9f be    	mov.d     w8, [w15++]
    1298:	8a 9f be    	mov.d     w10, [w15++]
    129a:	8c 1f 78    	mov.w     w12, [w15++]
    129c:	ff 00 07    	rcall     0x149c <__funpack2>
    129e:	06 01 33    	bra       N, 0x14ac <__fPropagateNaN>
    12a0:	64 50 e1    	cp.w      w10, #0x4
    12a2:	4f 00 32    	bra       Z, 0x1342 <aisinfinite>

000012a4 <checkspecialb>:
    12a4:	64 20 e1    	cp.w      w4, #0x4
    12a6:	52 00 32    	bra       Z, 0x134c <return2>
    12a8:	03 82 6c    	xor.w     w9, w3, w4
    12aa:	07 00 3b    	bra       NN, 0x12ba <getsign>
    12ac:	09 05 d0    	sl.w      w9, w10
    12ae:	03 06 d0    	sl.w      w3, w12
    12b0:	82 0f 54    	sub.w     w8, w2, [w15]
    12b2:	0c 06 5d    	subb.w    w10, w12, w12
    12b4:	02 00 39    	bra       NC, 0x12ba <getsign>
    12b6:	02 00 32    	bra       Z, 0x12bc <gotsign>
    12b8:	89 01 78    	mov.w     w9, w3

000012ba <getsign>:
    12ba:	03 06 78    	mov.w     w3, w12

000012bc <gotsign>:
    12bc:	85 82 55    	sub.w     w11, w5, w5
    12be:	04 00 3d    	bra       GE, 0x12c8 <expcanonical>
    12c0:	00 03 fd    	exch      w0, w6
    12c2:	81 03 fd    	exch      w1, w7
    12c4:	85 02 ea    	neg.w     w5, w5
    12c6:	8b 85 42    	add.w     w5, w11, w11

000012c8 <expcanonical>:
    12c8:	84 0f 72    	ior.w     w4, w4, [w15]
    12ca:	02 00 3b    	bra       NN, 0x12d0 <nonegate>
    12cc:	60 00 10    	subr.w    w0, #0x0, w0
    12ce:	e0 80 18    	subbr.w   w1, #0x0, w1

000012d0 <nonegate>:
    12d0:	60 11 b8    	mul.uu    w2, #0x0, w2
    12d2:	00 05 eb    	clr.w     w10
    12d4:	7a 28 e1    	cp.w      w5, #0x1a
    12d6:	0a 00 39    	bra       NC, 0x12ec <aligniter>
    12d8:	06 00 78    	mov.w     w6, w0
    12da:	c7 5d dd    	sl.w      w11, #0x7, w11
    12dc:	f7 07 b2    	and.w     #0x7f, w7
    12de:	87 80 75    	ior.w     w11, w7, w1
    12e0:	2d 00 37    	bra       0x133c <signoff>

000012e2 <align>:
    12e2:	82 81 71    	ior.w     w3, w2, w3
    12e4:	0a 01 78    	mov.w     w10, w2
    12e6:	61 05 60    	and.w     w0, #0x1, w10
    12e8:	81 80 d1    	asr.w     w1, w1
    12ea:	00 80 d3    	rrc.w     w0, w0

000012ec <aligniter>:
    12ec:	85 02 e9    	dec.w     w5, w5
    12ee:	f9 ff 3b    	bra       NN, 0x12e2 <align>

000012f0 <aligned>:
    12f0:	06 04 40    	add.w     w0, w6, w8
    12f2:	87 84 48    	addc.w    w1, w7, w9
    12f4:	02 00 3b    	bra       NN, 0x12fa <normalizesum>
    12f6:	60 04 14    	subr.w    w8, #0x0, w8
    12f8:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012fa <normalizesum>:
    12fa:	09 88 a3    	btst.z    w9, #0x8
    12fc:	07 00 32    	bra       Z, 0x130c <checknormal>
    12fe:	8a 81 71    	ior.w     w3, w10, w3
    1300:	82 81 71    	ior.w     w3, w2, w3
    1302:	61 01 64    	and.w     w8, #0x1, w2
    1304:	89 04 d1    	lsr.w     w9, w9
    1306:	08 84 d3    	rrc.w     w8, w8
    1308:	8b 05 e8    	inc.w     w11, w11
    130a:	17 00 37    	bra       0x133a <round>

0000130c <checknormal>:
    130c:	09 78 a3    	btst.z    w9, #0x7
    130e:	13 00 3a    	bra       NZ, 0x1336 <discardguard>

00001310 <underflow>:
    1310:	0b 00 e0    	cp0.w     w11
    1312:	13 00 34    	bra       LE, 0x133a <round>
    1314:	8b 05 e9    	dec.w     w11, w11
    1316:	08 04 44    	add.w     w8, w8, w8
    1318:	89 84 4c    	addc.w    w9, w9, w9
    131a:	0a 44 74    	ior.b     w8, w10, w8
    131c:	09 78 a3    	btst.z    w9, #0x7
    131e:	0d 00 3a    	bra       NZ, 0x133a <round>

00001320 <normalizeloop>:
    1320:	0b 00 e0    	cp0.w     w11
    1322:	07 00 34    	bra       LE, 0x1332 <normalizeexit>
    1324:	8b 05 e9    	dec.w     w11, w11
    1326:	08 04 44    	add.w     w8, w8, w8
    1328:	89 84 4c    	addc.w    w9, w9, w9
    132a:	01 00 3a    	bra       NZ, 0x132e <normalizetest>
    132c:	0b 00 20    	mov.w     #0x0, w11

0000132e <normalizetest>:
    132e:	09 78 a3    	btst.z    w9, #0x7
    1330:	f7 ff 32    	bra       Z, 0x1320 <normalizeloop>

00001332 <normalizeexit>:
    1332:	00 01 eb    	clr.w     w2
    1334:	02 00 37    	bra       0x133a <round>

00001336 <discardguard>:
    1336:	82 81 71    	ior.w     w3, w2, w3
    1338:	0a 01 78    	mov.w     w10, w2

0000133a <round>:
    133a:	75 00 07    	rcall     0x1426 <__fpack>

0000133c <signoff>:
    133c:	0c f0 a7    	btsc.w    w12, #0xf
    133e:	01 f0 a0    	bset.w    w1, #0xf
    1340:	be 00 37    	bra       0x14be <__fbopExit>

00001342 <aisinfinite>:
    1342:	64 20 e1    	cp.w      w4, #0x4
    1344:	02 00 3a    	bra       NZ, 0x134a <return8>
    1346:	83 8f 6c    	xor.w     w9, w3, [w15]
    1348:	be 00 33    	bra       N, 0x14c6 <__fbopReturnNaN>

0000134a <return8>:
    134a:	08 01 be    	mov.d     w8, w2

0000134c <return2>:
    134c:	02 00 be    	mov.d     w2, w0
    134e:	b7 00 37    	bra       0x14be <__fbopExit>

00001350 <___divsf3>:
    1350:	88 9f be    	mov.d     w8, [w15++]
    1352:	8a 9f be    	mov.d     w10, [w15++]
    1354:	8c 1f 78    	mov.w     w12, [w15++]
    1356:	a2 00 07    	rcall     0x149c <__funpack2>
    1358:	a9 00 33    	bra       N, 0x14ac <__fPropagateNaN>
    135a:	03 86 6c    	xor.w     w9, w3, w12
    135c:	64 50 e1    	cp.w      w10, #0x4
    135e:	2e 00 32    	bra       Z, 0x13bc <aisinfinite>
    1360:	64 20 e1    	cp.w      w4, #0x4
    1362:	33 00 32    	bra       Z, 0x13ca <returnZero>
    1364:	61 50 e1    	cp.w      w10, #0x1
    1366:	2f 00 32    	bra       Z, 0x13c6 <aiszero>
    1368:	61 20 e1    	cp.w      w4, #0x1
    136a:	31 00 32    	bra       Z, 0x13ce <returnInf>

0000136c <finitenonzero>:
    136c:	85 85 55    	sub.w     w11, w5, w11
    136e:	eb 07 b0    	add.w     #0x7e, w11
    1370:	09 00 20    	mov.w     #0x0, w9
    1372:	08 04 20    	mov.w     #0x40, w8
    1374:	05 00 37    	bra       0x1380 <diventry>

00001376 <divnext>:
    1376:	08 04 44    	add.w     w8, w8, w8
    1378:	89 84 4c    	addc.w    w9, w9, w9
    137a:	0a 00 31    	bra       C, 0x1390 <divdone>

0000137c <divloop>:
    137c:	06 03 43    	add.w     w6, w6, w6
    137e:	87 83 4b    	addc.w    w7, w7, w7

00001380 <diventry>:
    1380:	00 01 53    	sub.w     w6, w0, w2
    1382:	81 81 5b    	subb.w    w7, w1, w3
    1384:	f8 ff 33    	bra       N, 0x1376 <divnext>
    1386:	02 03 be    	mov.d     w2, w6
    1388:	08 00 a0    	bset.w    w8, #0x0
    138a:	08 04 44    	add.w     w8, w8, w8
    138c:	89 84 4c    	addc.w    w9, w9, w9
    138e:	f6 ff 39    	bra       NC, 0x137c <divloop>

00001390 <divdone>:
    1390:	c6 39 dd    	sl.w      w7, #0x6, w3
    1392:	83 01 73    	ior.w     w6, w3, w3
    1394:	01 00 32    	bra       Z, 0x1398 <stickyok>
    1396:	13 00 20    	mov.w     #0x1, w3

00001398 <stickyok>:
    1398:	89 04 d1    	lsr.w     w9, w9
    139a:	08 84 d3    	rrc.w     w8, w8
    139c:	09 98 a3    	btst.z    w9, #0x9
    139e:	05 00 32    	bra       Z, 0x13aa <guardused>
    13a0:	08 00 a7    	btsc.w    w8, #0x0
    13a2:	03 00 a0    	bset.w    w3, #0x0
    13a4:	89 04 d1    	lsr.w     w9, w9
    13a6:	08 84 d3    	rrc.w     w8, w8
    13a8:	8b 05 e8    	inc.w     w11, w11

000013aa <guardused>:
    13aa:	89 04 d1    	lsr.w     w9, w9
    13ac:	08 84 d3    	rrc.w     w8, w8
    13ae:	00 01 eb    	clr.w     w2
    13b0:	02 81 d2    	rlc.w     w2, w2
    13b2:	39 00 07    	rcall     0x1426 <__fpack>

000013b4 <return0>:
    13b4:	01 f0 a1    	bclr.w    w1, #0xf
    13b6:	0c f0 a7    	btsc.w    w12, #0xf
    13b8:	01 f0 a0    	bset.w    w1, #0xf
    13ba:	81 00 37    	bra       0x14be <__fbopExit>

000013bc <aisinfinite>:
    13bc:	64 20 e1    	cp.w      w4, #0x4
    13be:	83 00 32    	bra       Z, 0x14c6 <__fbopReturnNaN>

000013c0 <return8>:
    13c0:	08 01 be    	mov.d     w8, w2

000013c2 <return2>:
    13c2:	02 00 be    	mov.d     w2, w0
    13c4:	f7 ff 37    	bra       0x13b4 <return0>

000013c6 <aiszero>:
    13c6:	61 20 e1    	cp.w      w4, #0x1
    13c8:	7e 00 32    	bra       Z, 0x14c6 <__fbopReturnNaN>

000013ca <returnZero>:
    13ca:	60 00 b8    	mul.uu    w0, #0x0, w0
    13cc:	f3 ff 37    	bra       0x13b4 <return0>

000013ce <returnInf>:
    13ce:	00 00 20    	mov.w     #0x0, w0
    13d0:	01 f8 27    	mov.w     #0x7f80, w1
    13d2:	f0 ff 37    	bra       0x13b4 <return0>

000013d4 <___eqsf2>:
    13d4:	14 00 20    	mov.w     #0x1, w4
    13d6:	e5 00 37    	bra       0x15a2 <__fcompare>

000013d8 <___gesf2>:
    13d8:	f4 ff 2f    	mov.w     #0xffff, w4
    13da:	e3 00 37    	bra       0x15a2 <__fcompare>

000013dc <___fixunssfsi>:
    13dc:	00 01 be    	mov.d     w0, w2
    13de:	49 00 07    	rcall     0x1472 <__funpack>
    13e0:	04 70 a7    	btsc.w    w4, #0x7
    13e2:	03 f0 a1    	bclr.w    w3, #0xf
    13e4:	03 f8 a3    	btst.z    w3, #0xf
    13e6:	13 00 3a    	bra       NZ, 0x140e <returnzero>
    13e8:	65 09 b1    	sub.w     #0x96, w5
    13ea:	10 00 32    	bra       Z, 0x140c <exit>
    13ec:	09 00 35    	bra       LT, 0x1400 <shiftright>
    13ee:	69 28 e1    	cp.w      w5, #0x9
    13f0:	02 00 35    	bra       LT, 0x13f6 <shiftleft>
    13f2:	01 00 28    	mov.w     #0x8000, w1
    13f4:	00 00 05    	retlw.w   #0x0, w0

000013f6 <shiftleft>:
    13f6:	00 00 40    	add.w     w0, w0, w0
    13f8:	81 80 48    	addc.w    w1, w1, w1
    13fa:	85 02 e9    	dec.w     w5, w5
    13fc:	fc ff 3a    	bra       NZ, 0x13f6 <shiftleft>
    13fe:	00 00 06    	return    

00001400 <shiftright>:
    1400:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1402:	05 00 35    	bra       LT, 0x140e <returnzero>

00001404 <shiftrightloop>:
    1404:	81 00 d1    	lsr.w     w1, w1
    1406:	00 80 d3    	rrc.w     w0, w0
    1408:	85 02 e8    	inc.w     w5, w5
    140a:	fc ff 3a    	bra       NZ, 0x1404 <shiftrightloop>

0000140c <exit>:
    140c:	00 00 06    	return    

0000140e <returnzero>:
    140e:	80 00 eb    	clr.w     w1
    1410:	00 00 05    	retlw.w   #0x0, w0

00001412 <___floatunsisf>:
    1412:	60 11 b8    	mul.uu    w2, #0x0, w2
    1414:	e1 00 37    	bra       0x15d8 <___floatundisf>

00001416 <_floorf>:
    1416:	00 01 eb    	clr.w     w2
    1418:	9d 00 07    	rcall     0x1554 <__fchop>
    141a:	04 00 32    	bra       Z, 0x1424 <exit>
    141c:	02 00 20    	mov.w     #0x0, w2
    141e:	03 f8 23    	mov.w     #0x3f80, w3
    1420:	01 f0 a7    	btsc.w    w1, #0xf
    1422:	38 ff 07    	rcall     0x1294 <___subsf3>

00001424 <exit>:
    1424:	00 00 06    	return    

00001426 <__fpack>:
    1426:	81 00 20    	mov.w     #0x8, w1
    1428:	61 80 55    	sub.w     w11, #0x1, w0
    142a:	0b 00 3d    	bra       GE, 0x1442 <notsubnormal>
    142c:	0b 00 20    	mov.w     #0x0, w11
    142e:	61 fe 2f    	mov.w     #0xffe6, w1
    1430:	01 00 e1    	cp.w      w0, w1
    1432:	1d 00 34    	bra       LE, 0x146e <zerosig>

00001434 <subnormal>:
    1434:	82 81 71    	ior.w     w3, w2, w3
    1436:	61 01 64    	and.w     w8, #0x1, w2
    1438:	89 04 d1    	lsr.w     w9, w9
    143a:	08 84 d3    	rrc.w     w8, w8
    143c:	00 00 e8    	inc.w     w0, w0
    143e:	fa ff 3a    	bra       NZ, 0x1434 <subnormal>
    1440:	71 00 20    	mov.w     #0x7, w1

00001442 <notsubnormal>:
    1442:	61 00 64    	and.w     w8, #0x1, w0
    1444:	03 00 70    	ior.w     w0, w3, w0
    1446:	02 00 60    	and.w     w0, w2, w0
    1448:	09 00 32    	bra       Z, 0x145c <packupandgo>
    144a:	61 04 44    	add.w     w8, #0x1, w8
    144c:	e0 84 4c    	addc.w    w9, #0x0, w9
    144e:	09 88 a5    	btst.z    w9, w1
    1450:	05 00 32    	bra       Z, 0x145c <packupandgo>
    1452:	8b 05 e8    	inc.w     w11, w11
    1454:	68 08 e1    	cp.w      w1, #0x8
    1456:	02 00 3a    	bra       NZ, 0x145c <packupandgo>
    1458:	89 04 d1    	lsr.w     w9, w9
    145a:	08 84 d3    	rrc.w     w8, w8

0000145c <packupandgo>:
    145c:	f2 0f 20    	mov.w     #0xff, w2
    145e:	02 58 e1    	cp.w      w11, w2
    1460:	05 00 3d    	bra       GE, 0x146c <overflow>
    1462:	c7 5d dd    	sl.w      w11, #0x7, w11
    1464:	f9 07 b2    	and.w     #0x7f, w9
    1466:	89 80 75    	ior.w     w11, w9, w1
    1468:	08 00 78    	mov.w     w8, w0
    146a:	00 00 06    	return    

0000146c <overflow>:
    146c:	0b f8 27    	mov.w     #0x7f80, w11

0000146e <zerosig>:
    146e:	8b 00 78    	mov.w     w11, w1
    1470:	00 00 05    	retlw.w   #0x0, w0

00001472 <__funpack>:
    1472:	c7 0a de    	lsr.w     w1, #0x7, w5
    1474:	f1 07 b2    	and.w     #0x7f, w1
    1476:	f5 0f b2    	and.w     #0xff, w5
    1478:	08 00 32    	bra       Z, 0x148a <zeroorsub>
    147a:	e1 cf 42    	add.b     w5, #0x1, [w15]
    147c:	02 00 32    	bra       Z, 0x1482 <nanorinf>

0000147e <finitereturn>:
    147e:	01 70 a0    	bset.w    w1, #0x7
    1480:	24 00 05    	retlw.w   #0x2, w4

00001482 <nanorinf>:
    1482:	81 0f 70    	ior.w     w0, w1, [w15]
    1484:	01 00 32    	bra       Z, 0x1488 <infinite>
    1486:	04 08 05    	retlw.w   #0x80, w4

00001488 <infinite>:
    1488:	44 00 05    	retlw.w   #0x4, w4

0000148a <zeroorsub>:
    148a:	81 0f 70    	ior.w     w0, w1, [w15]
    148c:	02 00 3a    	bra       NZ, 0x1492 <subnormal>
    148e:	14 00 05    	retlw.w   #0x1, w4

00001490 <normalize>:
    1490:	85 02 e9    	dec.w     w5, w5

00001492 <subnormal>:
    1492:	00 00 40    	add.w     w0, w0, w0
    1494:	81 c0 48    	addc.b    w1, w1, w1
    1496:	fc ff 3b    	bra       NN, 0x1490 <normalize>
    1498:	01 70 a0    	bset.w    w1, #0x7
    149a:	24 00 05    	retlw.w   #0x2, w4

0000149c <__funpack2>:
    149c:	00 04 be    	mov.d     w0, w8
    149e:	e9 ff 07    	rcall     0x1472 <__funpack>
    14a0:	00 03 be    	mov.d     w0, w6
    14a2:	04 05 be    	mov.d     w4, w10
    14a4:	02 00 be    	mov.d     w2, w0
    14a6:	e5 ff 07    	rcall     0x1472 <__funpack>
    14a8:	84 4f 75    	ior.b     w10, w4, [w15]
    14aa:	00 00 06    	return    

000014ac <__fPropagateNaN>:
    14ac:	02 00 be    	mov.d     w2, w0
    14ae:	64 50 e1    	cp.w      w10, #0x4
    14b0:	05 00 36    	bra       LEU, 0x14bc <return0>
    14b2:	64 20 e1    	cp.w      w4, #0x4
    14b4:	02 00 36    	bra       LEU, 0x14ba <return8>
    14b6:	09 68 a3    	btst.z    w9, #0x6
    14b8:	01 00 3a    	bra       NZ, 0x14bc <return0>

000014ba <return8>:
    14ba:	08 00 be    	mov.d     w8, w0

000014bc <return0>:
    14bc:	01 60 a0    	bset.w    w1, #0x6

000014be <__fbopExit>:
    14be:	4f 06 78    	mov.w     [--w15], w12
    14c0:	4f 05 be    	mov.d     [--w15], w10
    14c2:	4f 04 be    	mov.d     [--w15], w8
    14c4:	00 00 06    	return    

000014c6 <__fbopReturnNaN>:
    14c6:	f0 ff 2f    	mov.w     #0xffff, w0
    14c8:	f1 ff 27    	mov.w     #0x7fff, w1
    14ca:	f9 ff 37    	bra       0x14be <__fbopExit>

000014cc <___mulsf3>:
    14cc:	88 9f be    	mov.d     w8, [w15++]
    14ce:	8a 9f be    	mov.d     w10, [w15++]
    14d0:	8c 1f 78    	mov.w     w12, [w15++]
    14d2:	e4 ff 07    	rcall     0x149c <__funpack2>
    14d4:	eb ff 33    	bra       N, 0x14ac <__fPropagateNaN>
    14d6:	03 86 6c    	xor.w     w9, w3, w12
    14d8:	64 50 e1    	cp.w      w10, #0x4
    14da:	24 00 32    	bra       Z, 0x1524 <aisinfinite>
    14dc:	64 20 e1    	cp.w      w4, #0x4
    14de:	27 00 32    	bra       Z, 0x152e <bisinfinite>
    14e0:	61 50 e1    	cp.w      w10, #0x1
    14e2:	22 00 32    	bra       Z, 0x1528 <return8>
    14e4:	61 20 e1    	cp.w      w4, #0x1
    14e6:	21 00 32    	bra       Z, 0x152a <return2>
    14e8:	8b 85 42    	add.w     w5, w11, w11
    14ea:	eb 07 b1    	sub.w     #0x7e, w11
    14ec:	01 34 b8    	mul.uu    w6, w1, w8
    14ee:	00 3a b8    	mul.uu    w7, w0, w4
    14f0:	08 04 42    	add.w     w4, w8, w8
    14f2:	89 84 4a    	addc.w    w5, w9, w9
    14f4:	01 3a b8    	mul.uu    w7, w1, w4
    14f6:	00 30 b8    	mul.uu    w6, w0, w0
    14f8:	88 80 40    	add.w     w1, w8, w1
    14fa:	09 01 4a    	addc.w    w4, w9, w2
    14fc:	04 00 33    	bra       N, 0x1506 <formsticky>
    14fe:	00 00 40    	add.w     w0, w0, w0
    1500:	81 80 48    	addc.w    w1, w1, w1
    1502:	02 01 49    	addc.w    w2, w2, w2
    1504:	8b 05 e9    	dec.w     w11, w11

00001506 <formsticky>:
    1506:	c9 09 dd    	sl.w      w1, #0x9, w3
    1508:	83 01 70    	ior.w     w0, w3, w3
    150a:	01 00 32    	bra       Z, 0x150e <formRandSig>
    150c:	13 00 20    	mov.w     #0x1, w3

0000150e <formRandSig>:
    150e:	c8 14 de    	lsr.w     w2, #0x8, w9
    1510:	48 14 dd    	sl.w      w2, #0x8, w8
    1512:	47 09 de    	lsr.w     w1, #0x7, w2
    1514:	12 00 b2    	and.w     #0x1, w2
    1516:	c8 08 de    	lsr.w     w1, #0x8, w1
    1518:	08 84 70    	ior.w     w1, w8, w8
    151a:	85 ff 07    	rcall     0x1426 <__fpack>

0000151c <return0>:
    151c:	01 f0 a1    	bclr.w    w1, #0xf
    151e:	0c f0 a7    	btsc.w    w12, #0xf
    1520:	01 f0 a0    	bset.w    w1, #0xf
    1522:	cd ff 37    	bra       0x14be <__fbopExit>

00001524 <aisinfinite>:
    1524:	61 20 e1    	cp.w      w4, #0x1
    1526:	cf ff 32    	bra       Z, 0x14c6 <__fbopReturnNaN>

00001528 <return8>:
    1528:	08 01 be    	mov.d     w8, w2

0000152a <return2>:
    152a:	02 00 be    	mov.d     w2, w0
    152c:	f7 ff 37    	bra       0x151c <return0>

0000152e <bisinfinite>:
    152e:	61 50 e1    	cp.w      w10, #0x1
    1530:	fc ff 3a    	bra       NZ, 0x152a <return2>
    1532:	c9 ff 37    	bra       0x14c6 <__fbopReturnNaN>

00001534 <___udivsi3>:
    1534:	60 22 b8    	mul.uu    w4, #0x0, w4
    1536:	06 02 20    	mov.w     #0x20, w6

00001538 <nextbit>:
    1538:	00 00 d0    	sl.w      w0, w0
    153a:	81 80 d2    	rlc.w     w1, w1
    153c:	04 82 d2    	rlc.w     w4, w4
    153e:	85 82 d2    	rlc.w     w5, w5
    1540:	00 00 a0    	bset.w    w0, #0x0
    1542:	02 02 52    	sub.w     w4, w2, w4
    1544:	83 82 5a    	subb.w    w5, w3, w5
    1546:	03 00 31    	bra       C, 0x154e <iterate>
    1548:	02 02 42    	add.w     w4, w2, w4
    154a:	83 82 4a    	addc.w    w5, w3, w5
    154c:	00 00 a1    	bclr.w    w0, #0x0

0000154e <iterate>:
    154e:	06 03 e9    	dec.w     w6, w6
    1550:	f3 ff 3a    	bra       NZ, 0x1538 <nextbit>
    1552:	00 00 06    	return    

00001554 <__fchop>:
    1554:	88 9f be    	mov.d     w8, [w15++]
    1556:	8a 9f be    	mov.d     w10, [w15++]
    1558:	00 03 be    	mov.d     w0, w6
    155a:	8b ff 07    	rcall     0x1472 <__funpack>
    155c:	85 05 78    	mov.w     w5, w11
    155e:	82 81 52    	sub.w     w5, w2, w3
    1560:	02 00 20    	mov.w     #0x0, w2
    1562:	62 20 e1    	cp.w      w4, #0x2
    1564:	04 00 3a    	bra       NZ, 0x156e <return6>
    1566:	f3 07 b1    	sub.w     #0x7f, w3
    1568:	04 00 35    	bra       LT, 0x1572 <result0>
    156a:	77 18 e1    	cp.w      w3, #0x17
    156c:	04 00 35    	bra       LT, 0x1576 <chop>

0000156e <return6>:
    156e:	06 00 be    	mov.d     w6, w0
    1570:	14 00 37    	bra       0x159a <return0>

00001572 <result0>:
    1572:	60 00 b8    	mul.uu    w0, #0x0, w0
    1574:	0f 00 37    	bra       0x1594 <signit>

00001576 <chop>:
    1576:	f5 0f 20    	mov.w     #0xff, w5
    1578:	fa ff 2f    	mov.w     #0xffff, w10

0000157a <shiftloop>:
    157a:	85 02 d1    	lsr.w     w5, w5
    157c:	0a 85 d3    	rrc.w     w10, w10
    157e:	83 01 e9    	dec.w     w3, w3
    1580:	fc ff 3b    	bra       NN, 0x157a <shiftloop>
    1582:	81 84 62    	and.w     w5, w1, w9
    1584:	00 04 65    	and.w     w10, w0, w8
    1586:	89 0f 74    	ior.w     w8, w9, [w15]
    1588:	f2 ff 32    	bra       Z, 0x156e <return6>
    158a:	85 82 ea    	com.w     w5, w5
    158c:	0a 85 ea    	com.w     w10, w10
    158e:	81 84 62    	and.w     w5, w1, w9
    1590:	00 04 65    	and.w     w10, w0, w8
    1592:	49 ff 07    	rcall     0x1426 <__fpack>

00001594 <signit>:
    1594:	07 f0 a7    	btsc.w    w7, #0xf
    1596:	01 f0 a0    	bset.w    w1, #0xf
    1598:	00 81 eb    	setm.w    w2

0000159a <return0>:
    159a:	02 00 e0    	cp0.w     w2
    159c:	4f 05 be    	mov.d     [--w15], w10
    159e:	4f 04 be    	mov.d     [--w15], w8
    15a0:	00 00 06    	return    

000015a2 <__fcompare>:
    15a2:	88 9f be    	mov.d     w8, [w15++]
    15a4:	8a 9f be    	mov.d     w10, [w15++]
    15a6:	84 1f 78    	mov.w     w4, [w15++]
    15a8:	79 ff 07    	rcall     0x149c <__funpack2>
    15aa:	4f 00 78    	mov.w     [--w15], w0
    15ac:	11 00 33    	bra       N, 0x15d0 <exit>
    15ae:	f0 ff 2f    	mov.w     #0xffff, w0
    15b0:	83 8f 6c    	xor.w     w9, w3, [w15]
    15b2:	06 00 3b    	bra       NN, 0x15c0 <comparemag>
    15b4:	04 05 65    	and.w     w10, w4, w10
    15b6:	0a 00 a7    	btsc.w    w10, #0x0
    15b8:	08 00 37    	bra       0x15ca <returnEqual>
    15ba:	09 f0 a6    	btss.w    w9, #0xf
    15bc:	10 00 20    	mov.w     #0x1, w0
    15be:	08 00 37    	bra       0x15d0 <exit>

000015c0 <comparemag>:
    15c0:	82 0f 54    	sub.w     w8, w2, [w15]
    15c2:	83 8f 5c    	subb.w    w9, w3, [w15]
    15c4:	03 00 39    	bra       NC, 0x15cc <adjust>
    15c6:	10 00 20    	mov.w     #0x1, w0
    15c8:	01 00 3e    	bra       GTU, 0x15cc <adjust>

000015ca <returnEqual>:
    15ca:	00 00 20    	mov.w     #0x0, w0

000015cc <adjust>:
    15cc:	09 f0 a7    	btsc.w    w9, #0xf
    15ce:	00 00 ea    	neg.w     w0, w0

000015d0 <exit>:
    15d0:	4f 05 be    	mov.d     [--w15], w10
    15d2:	4f 04 be    	mov.d     [--w15], w8
    15d4:	00 00 e0    	cp0.w     w0
    15d6:	00 00 06    	return    

000015d8 <___floatundisf>:
    15d8:	88 9f be    	mov.d     w8, [w15++]
    15da:	8a 9f be    	mov.d     w10, [w15++]
    15dc:	00 82 70    	ior.w     w1, w0, w4
    15de:	04 02 71    	ior.w     w2, w4, w4
    15e0:	04 82 71    	ior.w     w3, w4, w4
    15e2:	26 00 32    	bra       Z, 0x1630 <return0>
    15e4:	00 04 be    	mov.d     w0, w8
    15e6:	02 00 be    	mov.d     w2, w0
    15e8:	60 11 b8    	mul.uu    w2, #0x0, w2
    15ea:	6b 09 20    	mov.w     #0x96, w11
    15ec:	95 02 20    	mov.w     #0x29, w5
    15ee:	01 82 cf    	ff1l      w1, w4
    15f0:	0a 00 39    	bra       NC, 0x1606 <fixshift>
    15f2:	05 41 b1    	sub.b     #0x10, w5
    15f4:	00 82 cf    	ff1l      w0, w4
    15f6:	07 00 39    	bra       NC, 0x1606 <fixshift>
    15f8:	05 41 b1    	sub.b     #0x10, w5
    15fa:	09 82 cf    	ff1l      w9, w4
    15fc:	04 00 39    	bra       NC, 0x1606 <fixshift>
    15fe:	05 41 b1    	sub.b     #0x10, w5
    1600:	08 82 cf    	ff1l      w8, w4
    1602:	01 00 39    	bra       NC, 0x1606 <fixshift>
    1604:	05 41 b1    	sub.b     #0x10, w5

00001606 <fixshift>:
    1606:	05 42 52    	sub.b     w4, w5, w4
    1608:	12 00 32    	bra       Z, 0x162e <round>
    160a:	0a 00 3b    	bra       NN, 0x1620 <shiftleft>

0000160c <shiftright>:
    160c:	82 81 71    	ior.w     w3, w2, w3
    160e:	61 01 64    	and.w     w8, #0x1, w2
    1610:	81 00 d1    	lsr.w     w1, w1
    1612:	00 80 d3    	rrc.w     w0, w0
    1614:	89 84 d3    	rrc.w     w9, w9
    1616:	08 84 d3    	rrc.w     w8, w8
    1618:	8b 05 e8    	inc.w     w11, w11
    161a:	04 42 e8    	inc.b     w4, w4
    161c:	f7 ff 3a    	bra       NZ, 0x160c <shiftright>
    161e:	07 00 37    	bra       0x162e <round>

00001620 <shiftleft>:
    1620:	08 04 44    	add.w     w8, w8, w8
    1622:	89 84 4c    	addc.w    w9, w9, w9
    1624:	00 00 48    	addc.w    w0, w0, w0
    1626:	81 80 48    	addc.w    w1, w1, w1
    1628:	8b 05 e9    	dec.w     w11, w11
    162a:	04 42 e9    	dec.b     w4, w4
    162c:	f9 ff 3a    	bra       NZ, 0x1620 <shiftleft>

0000162e <round>:
    162e:	fb fe 07    	rcall     0x1426 <__fpack>

00001630 <return0>:
    1630:	4f 05 be    	mov.d     [--w15], w10
    1632:	4f 04 be    	mov.d     [--w15], w8
    1634:	00 00 06    	return    

00001636 <_findmem>:
    1636:	88 9f be    	mov.d     w8, [w15++]
    1638:	00 04 78    	mov.w     w0, w8

0000163a <.L14>:
    163a:	81 32 81    	mov.w     0x2650, w1
    163c:	01 00 e0    	cp0.w     w1
    163e:	02 00 32    	bra       Z, 0x1644 <.L2>
    1640:	01 00 78    	mov.w     w1, w0
    1642:	0d 00 37    	bra       0x165e <.L3>

00001644 <.L2>:
    1644:	91 32 81    	mov.w     0x2652, w1
    1646:	20 65 22    	mov.w     #0x2652, w0
    1648:	04 00 37    	bra       0x1652 <.L4>

0000164a <.L6>:
    164a:	91 0f 54    	sub.w     w8, [w1], [w15]
    164c:	25 00 36    	bra       LEU, 0x1698 <.L5>
    164e:	01 80 e8    	inc2.w    w1, w0
    1650:	91 00 90    	mov.w     [w1+2], w1

00001652 <.L4>:
    1652:	01 00 e0    	cp0.w     w1
    1654:	fa ff 3a    	bra       NZ, 0x164a <.L6>
    1656:	10 00 37    	bra       0x1678 <.L7>

00001658 <.L8>:
    1658:	92 0f 54    	sub.w     w8, [w2], [w15]
    165a:	1e 00 36    	bra       LEU, 0x1698 <.L5>
    165c:	02 80 e8    	inc2.w    w2, w0

0000165e <.L3>:
    165e:	10 01 78    	mov.w     [w0], w2
    1660:	02 00 e0    	cp0.w     w2
    1662:	fa ff 3a    	bra       NZ, 0x1658 <.L8>
    1664:	11 01 78    	mov.w     [w1], w2
    1666:	91 32 81    	mov.w     0x2652, w1
    1668:	20 65 22    	mov.w     #0x2652, w0
    166a:	04 00 37    	bra       0x1674 <.L9>

0000166c <.L10>:
    166c:	91 0f 54    	sub.w     w8, [w1], [w15]
    166e:	14 00 36    	bra       LEU, 0x1698 <.L5>
    1670:	01 80 e8    	inc2.w    w1, w0
    1672:	91 00 90    	mov.w     [w1+2], w1

00001674 <.L9>:
    1674:	82 8f 50    	sub.w     w1, w2, [w15]
    1676:	fa ff 3a    	bra       NZ, 0x166c <.L10>

00001678 <.L7>:
    1678:	c9 32 81    	mov.w     0x2658, w9

0000167a <.L13>:
    167a:	88 8f 54    	sub.w     w9, w8, [w15]
    167c:	01 00 31    	bra       C, 0x1680 <.L11>
    167e:	88 04 78    	mov.w     w8, w9

00001680 <.L11>:
    1680:	09 00 78    	mov.w     w9, w0
    1682:	b2 00 07    	rcall     0x17e8 <__Getmem>
    1684:	00 00 e0    	cp0.w     w0
    1686:	04 00 3a    	bra       NZ, 0x1690 <.L12>
    1688:	88 8f 54    	sub.w     w9, w8, [w15]
    168a:	05 00 32    	bra       Z, 0x1696 <.L15>
    168c:	89 04 d1    	lsr.w     w9, w9
    168e:	f5 ff 37    	bra       0x167a <.L13>

00001690 <.L12>:
    1690:	09 18 78    	mov.w     w9, [w0++]
    1692:	ff 04 07    	rcall     0x2092 <_free>
    1694:	d2 ff 37    	bra       0x163a <.L14>

00001696 <.L15>:
    1696:	00 00 eb    	clr.w     w0

00001698 <.L5>:
    1698:	4f 04 be    	mov.d     [--w15], w8
    169a:	00 00 06    	return    

0000169c <_malloc>:
    169c:	88 1f 78    	mov.w     w8, [w15++]
    169e:	63 04 40    	add.w     w0, #0x3, w8
    16a0:	08 00 a1    	bclr.w    w8, #0x0
    16a2:	80 00 eb    	clr.w     w1
    16a4:	80 0f 54    	sub.w     w8, w0, [w15]
    16a6:	21 00 36    	bra       LEU, 0x16ea <.L17>
    16a8:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    16aa:	01 00 3e    	bra       GTU, 0x16ae <.L18>
    16ac:	48 00 20    	mov.w     #0x4, w8

000016ae <.L18>:
    16ae:	08 00 78    	mov.w     w8, w0
    16b0:	c2 ff 07    	rcall     0x1636 <_findmem>
    16b2:	80 00 eb    	clr.w     w1
    16b4:	00 00 e0    	cp0.w     w0
    16b6:	19 00 32    	bra       Z, 0x16ea <.L17>
    16b8:	90 00 78    	mov.w     [w0], w1
    16ba:	91 01 78    	mov.w     [w1], w3
    16bc:	64 81 51    	sub.w     w3, #0x4, w2
    16be:	88 0f 51    	sub.w     w2, w8, [w15]
    16c0:	03 00 31    	bra       C, 0x16c8 <.L19>
    16c2:	11 01 90    	mov.w     [w1+2], w2
    16c4:	02 08 78    	mov.w     w2, [w0]
    16c6:	07 00 37    	bra       0x16d6 <.L20>

000016c8 <.L19>:
    16c8:	08 81 40    	add.w     w1, w8, w2
    16ca:	02 08 78    	mov.w     w2, [w0]
    16cc:	91 01 90    	mov.w     [w1+2], w3
    16ce:	13 01 98    	mov.w     w3, [w2+2]
    16d0:	10 01 78    	mov.w     [w0], w2
    16d2:	11 09 14    	subr.w    w8, [w1], [w2]
    16d4:	88 08 78    	mov.w     w8, [w1]

000016d6 <.L20>:
    16d6:	10 01 78    	mov.w     [w0], w2
    16d8:	00 00 eb    	clr.w     w0
    16da:	02 00 e0    	cp0.w     w2
    16dc:	04 00 32    	bra       Z, 0x16e6 <.L21>
    16de:	92 01 90    	mov.w     [w2+2], w3
    16e0:	03 00 e0    	cp0.w     w3
    16e2:	01 00 32    	bra       Z, 0x16e6 <.L21>
    16e4:	02 80 e8    	inc2.w    w2, w0

000016e6 <.L21>:
    16e6:	80 32 89    	mov.w     w0, 0x2650
    16e8:	81 80 e8    	inc2.w    w1, w1

000016ea <.L17>:
    16ea:	01 00 78    	mov.w     w1, w0
    16ec:	4f 04 78    	mov.w     [--w15], w8
    16ee:	00 00 06    	return    

000016f0 <_memcpy>:
    16f0:	80 01 78    	mov.w     w0, w3
    16f2:	02 00 37    	bra       0x16f8 <.L2>

000016f4 <.L3>:
    16f4:	b1 59 78    	mov.b     [w1++], [w3++]
    16f6:	02 01 e9    	dec.w     w2, w2

000016f8 <.L2>:
    16f8:	02 00 e0    	cp0.w     w2
    16fa:	fc ff 3a    	bra       NZ, 0x16f4 <.L3>
    16fc:	00 00 06    	return    

000016fe <_puts>:
    16fe:	81 3f 22    	mov.w     #0x23f8, w1
    1700:	80 04 07    	rcall     0x2002 <_fputs>
    1702:	80 00 78    	mov.w     w0, w1
    1704:	00 80 eb    	setm.w    w0
    1706:	01 00 e0    	cp0.w     w1
    1708:	04 00 35    	bra       LT, 0x1712 <.L2>
    170a:	81 3f 22    	mov.w     #0x23f8, w1
    170c:	a0 00 20    	mov.w     #0xa, w0
    170e:	51 01 07    	rcall     0x19b2 <_fputc>
    1710:	4f 80 de    	asr.w     w0, #0xf, w0

00001712 <.L2>:
    1712:	00 00 06    	return    

00001714 <_strcmp>:
    1714:	02 00 37    	bra       0x171a <.L2>

00001716 <.L4>:
    1716:	02 04 e0    	cp0.b     w2
    1718:	0b 00 32    	bra       Z, 0x1730 <.L5>

0000171a <.L2>:
    171a:	81 01 78    	mov.w     w1, w3
    171c:	00 02 78    	mov.w     w0, w4
    171e:	30 41 78    	mov.b     [w0++], w2
    1720:	b1 4f 51    	sub.b     w2, [w1++], [w15]
    1722:	f9 ff 32    	bra       Z, 0x1716 <.L4>
    1724:	10 00 20    	mov.w     #0x1, w0
    1726:	14 42 78    	mov.b     [w4], w4
    1728:	93 4f 52    	sub.b     w4, [w3], [w15]
    172a:	03 00 31    	bra       C, 0x1732 <.L3>
    172c:	00 80 eb    	setm.w    w0
    172e:	00 00 06    	return    

00001730 <.L5>:
    1730:	00 00 eb    	clr.w     w0

00001732 <.L3>:
    1732:	00 00 06    	return    

00001734 <_strtoll>:
    1734:	e4 87 47    	add.w     w15, #0x4, w15
    1736:	88 9f be    	mov.d     w8, [w15++]
    1738:	8a 9f be    	mov.d     w10, [w15++]
    173a:	8c 1f 78    	mov.w     w12, [w15++]
    173c:	8e 1f 78    	mov.w     w14, [w15++]
    173e:	00 05 78    	mov.w     w0, w10
    1740:	01 07 78    	mov.w     w1, w14
    1742:	02 06 78    	mov.w     w2, w12
    1744:	0e 00 e0    	cp0.w     w14
    1746:	01 00 3a    	bra       NZ, 0x174a <.L2>
    1748:	6e 87 57    	sub.w     w15, #0xe, w14

0000174a <.L2>:
    174a:	8a 05 78    	mov.w     w10, w11

0000174c <.L3>:
    174c:	8b 04 78    	mov.w     w11, w9
    174e:	89 05 78    	mov.w     w9, w11
    1750:	3b 44 78    	mov.b     [w11++], w8
    1752:	08 00 fb    	se        w8, w0
    1754:	19 01 07    	rcall     0x1988 <_isspace>
    1756:	00 00 e0    	cp0.w     w0
    1758:	f9 ff 3a    	bra       NZ, 0x174c <.L3>
    175a:	d0 c2 b3    	mov.b     #0x2d, w0
    175c:	80 4f 54    	sub.b     w8, w0, [w15]
    175e:	03 00 32    	bra       Z, 0x1766 <.L4>
    1760:	00 c0 e9    	dec2.b    w0, w0
    1762:	80 4f 54    	sub.b     w8, w0, [w15]
    1764:	02 00 3a    	bra       NZ, 0x176a <.L14>

00001766 <.L4>:
    1766:	89 04 e8    	inc.w     w9, w9
    1768:	01 00 37    	bra       0x176c <.L5>

0000176a <.L14>:
    176a:	00 44 78    	mov.b     w0, w8

0000176c <.L5>:
    176c:	0c 01 78    	mov.w     w12, w2
    176e:	8e 00 78    	mov.w     w14, w1
    1770:	09 00 78    	mov.w     w9, w0
    1772:	44 00 07    	rcall     0x17fc <__Stoull>
    1774:	9e 8f 54    	sub.w     w9, [w14], [w15]
    1776:	01 00 3a    	bra       NZ, 0x177a <.L6>
    1778:	0a 0f 78    	mov.w     w10, [w14]

0000177a <.L6>:
    177a:	9e 0f 55    	sub.w     w10, [w14], [w15]
    177c:	05 00 3a    	bra       NZ, 0x1788 <.L7>
    177e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1780:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1782:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1784:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1786:	17 00 3a    	bra       NZ, 0x17b6 <.L8>

00001788 <.L7>:
    1788:	b4 c2 b3    	mov.b     #0x2b, w4
    178a:	84 4f 54    	sub.b     w8, w4, [w15]
    178c:	09 00 3a    	bra       NZ, 0x17a0 <.L9>
    178e:	f4 ff 2f    	mov.w     #0xffff, w4
    1790:	f5 ff 27    	mov.w     #0x7fff, w5
    1792:	60 33 b8    	mul.uu    w6, #0x0, w6
    1794:	04 00 e1    	cp.w      w0, w4
    1796:	05 88 e1    	cpb.w     w1, w5
    1798:	06 90 e1    	cpb.w     w2, w6
    179a:	07 98 e1    	cpb.w     w3, w7
    179c:	0c 00 3e    	bra       GTU, 0x17b6 <.L8>
    179e:	1e 00 37    	bra       0x17dc <.L12>

000017a0 <.L9>:
    17a0:	d4 c2 b3    	mov.b     #0x2d, w4
    17a2:	84 4f 54    	sub.b     w8, w4, [w15]
    17a4:	1b 00 3a    	bra       NZ, 0x17dc <.L12>
    17a6:	04 00 20    	mov.w     #0x0, w4
    17a8:	05 00 28    	mov.w     #0x8000, w5
    17aa:	60 33 b8    	mul.uu    w6, #0x0, w6
    17ac:	04 00 e1    	cp.w      w0, w4
    17ae:	05 88 e1    	cpb.w     w1, w5
    17b0:	06 90 e1    	cpb.w     w2, w6
    17b2:	07 98 e1    	cpb.w     w3, w7
    17b4:	0d 00 36    	bra       LEU, 0x17d0 <.L11>

000017b6 <.L8>:
    17b6:	20 02 20    	mov.w     #0x22, w0
    17b8:	a0 32 89    	mov.w     w0, 0x2654
    17ba:	f0 ff 2f    	mov.w     #0xffff, w0
    17bc:	f1 ff 27    	mov.w     #0x7fff, w1
    17be:	60 11 b8    	mul.uu    w2, #0x0, w2
    17c0:	d4 c2 b3    	mov.b     #0x2d, w4
    17c2:	84 4f 54    	sub.b     w8, w4, [w15]
    17c4:	0b 00 3a    	bra       NZ, 0x17dc <.L12>
    17c6:	00 00 20    	mov.w     #0x0, w0
    17c8:	01 00 28    	mov.w     #0x8000, w1
    17ca:	f2 ff 2f    	mov.w     #0xffff, w2
    17cc:	f3 ff 2f    	mov.w     #0xffff, w3
    17ce:	06 00 37    	bra       0x17dc <.L12>

000017d0 <.L11>:
    17d0:	60 22 b8    	mul.uu    w4, #0x0, w4
    17d2:	60 33 b8    	mul.uu    w6, #0x0, w6
    17d4:	00 00 52    	sub.w     w4, w0, w0
    17d6:	81 80 5a    	subb.w    w5, w1, w1
    17d8:	02 01 5b    	subb.w    w6, w2, w2
    17da:	83 81 5b    	subb.w    w7, w3, w3

000017dc <.L12>:
    17dc:	4f 07 78    	mov.w     [--w15], w14
    17de:	4f 06 78    	mov.w     [--w15], w12
    17e0:	4f 05 be    	mov.d     [--w15], w10
    17e2:	4f 04 be    	mov.d     [--w15], w8
    17e4:	4f 00 b1    	sub.w     #0x4, w15
    17e6:	00 00 06    	return    

000017e8 <__Getmem>:
    17e8:	80 00 78    	mov.w     w0, w1
    17ea:	00 00 eb    	clr.w     w0
    17ec:	01 00 e0    	cp0.w     w1
    17ee:	05 00 34    	bra       LE, 0x17fa <.L2>
    17f0:	01 00 78    	mov.w     w1, w0
    17f2:	2f fd 07    	rcall     0x1252 <_sbrk>
    17f4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    17f6:	01 00 3a    	bra       NZ, 0x17fa <.L2>
    17f8:	00 00 eb    	clr.w     w0

000017fa <.L2>:
    17fa:	00 00 06    	return    

000017fc <__Stoull>:
    17fc:	0f 02 b0    	add.w     #0x20, w15
    17fe:	88 9f be    	mov.d     w8, [w15++]
    1800:	8a 9f be    	mov.d     w10, [w15++]
    1802:	8c 9f be    	mov.d     w12, [w15++]
    1804:	8e 1f 78    	mov.w     w14, [w15++]
    1806:	80 b7 9f    	mov.w     w0, [w15-32]
    1808:	01 07 78    	mov.w     w1, w14
    180a:	82 06 78    	mov.w     w2, w13
    180c:	00 04 78    	mov.w     w0, w8

0000180e <.L2>:
    180e:	08 06 78    	mov.w     w8, w12
    1810:	0c 04 78    	mov.w     w12, w8
    1812:	38 40 78    	mov.b     [w8++], w0
    1814:	e0 e7 9f    	mov.b     w0, [w15-26]
    1816:	80 40 78    	mov.b     w0, w1
    1818:	01 00 fb    	se        w1, w0
    181a:	b6 00 07    	rcall     0x1988 <_isspace>
    181c:	00 00 e0    	cp0.w     w0
    181e:	f7 ff 3a    	bra       NZ, 0x180e <.L2>
    1820:	d0 c2 b3    	mov.b     #0x2d, w0
    1822:	6f e1 97    	mov.b     [w15-26], w2
    1824:	80 4f 51    	sub.b     w2, w0, [w15]
    1826:	03 00 32    	bra       Z, 0x182e <.L3>
    1828:	00 c0 e9    	dec2.b    w0, w0
    182a:	80 4f 51    	sub.b     w2, w0, [w15]
    182c:	02 00 3a    	bra       NZ, 0x1832 <.L19>

0000182e <.L3>:
    182e:	0c 06 e8    	inc.w     w12, w12
    1830:	01 00 37    	bra       0x1834 <.L4>

00001832 <.L19>:
    1832:	e0 e7 9f    	mov.b     w0, [w15-26]

00001834 <.L4>:
    1834:	0d 00 e0    	cp0.w     w13
    1836:	05 00 35    	bra       LT, 0x1842 <.L5>
    1838:	e1 8f 56    	sub.w     w13, #0x1, [w15]
    183a:	03 00 32    	bra       Z, 0x1842 <.L5>
    183c:	40 02 20    	mov.w     #0x24, w0
    183e:	80 8f 56    	sub.w     w13, w0, [w15]
    1840:	07 00 34    	bra       LE, 0x1850 <.L6>

00001842 <.L5>:
    1842:	60 44 b8    	mul.uu    w8, #0x0, w8
    1844:	60 55 b8    	mul.uu    w10, #0x0, w10
    1846:	0e 00 e0    	cp0.w     w14
    1848:	97 00 32    	bra       Z, 0x1978 <.L7>
    184a:	0f b2 97    	mov.w     [w15-32], w4
    184c:	04 0f 78    	mov.w     w4, [w14]
    184e:	94 00 37    	bra       0x1978 <.L7>

00001850 <.L6>:
    1850:	0d 00 e0    	cp0.w     w13
    1852:	0e 00 32    	bra       Z, 0x1870 <.L8>
    1854:	f0 8f 56    	sub.w     w13, #0x10, [w15]
    1856:	1a 00 3a    	bra       NZ, 0x188c <.L9>
    1858:	00 c3 b3    	mov.b     #0x30, w0
    185a:	9c 4f 10    	subr.b    w0, [w12], [w15]
    185c:	17 00 3a    	bra       NZ, 0x188c <.L9>
    185e:	1c 40 90    	mov.b     [w12+1], w0
    1860:	81 c7 b3    	mov.b     #0x78, w1
    1862:	81 4f 50    	sub.b     w0, w1, [w15]
    1864:	03 00 32    	bra       Z, 0x186c <.L10>
    1866:	81 c5 b3    	mov.b     #0x58, w1
    1868:	81 4f 50    	sub.b     w0, w1, [w15]
    186a:	10 00 3a    	bra       NZ, 0x188c <.L9>

0000186c <.L10>:
    186c:	0c 86 e8    	inc2.w    w12, w12
    186e:	0e 00 37    	bra       0x188c <.L9>

00001870 <.L8>:
    1870:	ad 00 20    	mov.w     #0xa, w13
    1872:	00 c3 b3    	mov.b     #0x30, w0
    1874:	9c 4f 10    	subr.b    w0, [w12], [w15]
    1876:	0a 00 3a    	bra       NZ, 0x188c <.L9>
    1878:	1c 40 90    	mov.b     [w12+1], w0
    187a:	81 c7 b3    	mov.b     #0x78, w1
    187c:	81 4f 50    	sub.b     w0, w1, [w15]
    187e:	04 00 32    	bra       Z, 0x1888 <.L11>
    1880:	8d 00 20    	mov.w     #0x8, w13
    1882:	81 c5 b3    	mov.b     #0x58, w1
    1884:	81 4f 50    	sub.b     w0, w1, [w15]
    1886:	02 00 3a    	bra       NZ, 0x188c <.L9>

00001888 <.L11>:
    1888:	0c 86 e8    	inc2.w    w12, w12
    188a:	0d 01 20    	mov.w     #0x10, w13

0000188c <.L9>:
    188c:	0c 00 78    	mov.w     w12, w0

0000188e <.L12>:
    188e:	80 00 78    	mov.w     w0, w1
    1890:	01 00 78    	mov.w     w1, w0
    1892:	02 c3 b3    	mov.b     #0x30, w2
    1894:	b0 4f 11    	subr.b    w2, [w0++], [w15]
    1896:	fb ff 32    	bra       Z, 0x188e <.L12>
    1898:	e1 af 9f    	mov.w     w1, [w15-36]
    189a:	81 02 78    	mov.w     w1, w5
    189c:	95 b7 9f    	mov.w     w5, [w15-30]
    189e:	60 44 b8    	mul.uu    w8, #0x0, w8
    18a0:	60 55 b8    	mul.uu    w10, #0x0, w10
    18a2:	8c bf 9f    	mov.w     w12, [w15-16]
    18a4:	1c 00 37    	bra       0x18de <.L13>

000018a6 <.L14>:
    18a6:	41 53 22    	mov.w     #0x2534, w1
    18a8:	81 40 50    	sub.b     w0, w1, w1
    18aa:	e1 df 9f    	mov.b     w1, [w15-34]
    18ac:	61 6a b9    	mul.su    w13, #0x1, w4
    18ae:	61 2b b9    	mul.su    w5, #0x1, w6
    18b0:	08 00 be    	mov.d     w8, w0
    18b2:	0a 01 be    	mov.d     w10, w2
    18b4:	5b 08 07    	rcall     0x296c <___muldi3>
    18b6:	ef da 97    	mov.b     [w15-34], w5
    18b8:	05 02 fb    	se        w5, w4
    18ba:	cf a2 de    	asr.w     w4, #0xf, w5
    18bc:	61 2b b9    	mul.su    w5, #0x1, w6
    18be:	c4 b7 9f    	mov.w     w4, [w15-24]
    18c0:	d5 b7 9f    	mov.w     w5, [w15-22]
    18c2:	e6 b7 9f    	mov.w     w6, [w15-20]
    18c4:	f7 b7 9f    	mov.w     w7, [w15-18]
    18c6:	a8 af 9f    	mov.w     w8, [w15-44]
    18c8:	b9 af 9f    	mov.w     w9, [w15-42]
    18ca:	ca af 9f    	mov.w     w10, [w15-40]
    18cc:	db af 9f    	mov.w     w11, [w15-38]
    18ce:	4f b2 97    	mov.w     [w15-24], w4
    18d0:	df b2 97    	mov.w     [w15-22], w5
    18d2:	6f b3 97    	mov.w     [w15-20], w6
    18d4:	ff b3 97    	mov.w     [w15-18], w7
    18d6:	00 04 42    	add.w     w4, w0, w8
    18d8:	81 84 4a    	addc.w    w5, w1, w9
    18da:	02 05 4b    	addc.w    w6, w2, w10
    18dc:	83 85 4b    	addc.w    w7, w3, w11

000018de <.L13>:
    18de:	9f b2 97    	mov.w     [w15-30], w5
    18e0:	a5 b7 9f    	mov.w     w5, [w15-28]
    18e2:	05 03 78    	mov.w     w5, w6
    18e4:	36 00 fb    	se        [w6++], w0
    18e6:	96 b7 9f    	mov.w     w6, [w15-30]
    18e8:	57 00 07    	rcall     0x1998 <_tolower>
    18ea:	0d 01 78    	mov.w     w13, w2
    18ec:	80 00 78    	mov.w     w0, w1
    18ee:	40 53 22    	mov.w     #0x2534, w0
    18f0:	56 04 07    	rcall     0x219e <_memchr>
    18f2:	00 00 e0    	cp0.w     w0
    18f4:	d8 ff 3a    	bra       NZ, 0x18a6 <.L14>
    18f6:	0f be 97    	mov.w     [w15-16], w12
    18f8:	af b3 97    	mov.w     [w15-28], w7
    18fa:	87 0f 56    	sub.w     w12, w7, [w15]
    18fc:	07 00 3a    	bra       NZ, 0x190c <.L15>
    18fe:	60 44 b8    	mul.uu    w8, #0x0, w8
    1900:	60 55 b8    	mul.uu    w10, #0x0, w10
    1902:	0e 00 e0    	cp0.w     w14
    1904:	39 00 32    	bra       Z, 0x1978 <.L7>
    1906:	0f b6 97    	mov.w     [w15-32], w12
    1908:	0c 0f 78    	mov.w     w12, [w14]
    190a:	36 00 37    	bra       0x1978 <.L7>

0000190c <.L15>:
    190c:	2f b0 97    	mov.w     [w15-28], w0
    190e:	6f a9 97    	mov.w     [w15-36], w2
    1910:	82 00 50    	sub.w     w0, w2, w1
    1912:	90 55 22    	mov.w     #0x2559, w0
    1914:	60 c0 7e    	mov.b     [w0+w13], w0
    1916:	00 00 fb    	se        w0, w0
    1918:	00 80 50    	sub.w     w1, w0, w0
    191a:	20 00 33    	bra       N, 0x195c <.L16>
    191c:	19 00 3a    	bra       NZ, 0x1950 <.L17>
    191e:	6f da 97    	mov.b     [w15-34], w4
    1920:	04 00 fb    	se        w4, w0
    1922:	cf 80 de    	asr.w     w0, #0xf, w1
    1924:	61 09 b9    	mul.su    w1, #0x1, w2
    1926:	00 00 54    	sub.w     w8, w0, w0
    1928:	81 80 5c    	subb.w    w9, w1, w1
    192a:	02 01 5d    	subb.w    w10, w2, w2
    192c:	83 81 5d    	subb.w    w11, w3, w3
    192e:	00 40 e1    	cp.w      w8, w0
    1930:	01 c8 e1    	cpb.w     w9, w1
    1932:	02 d0 e1    	cpb.w     w10, w2
    1934:	03 d8 e1    	cpb.w     w11, w3
    1936:	0c 00 39    	bra       NC, 0x1950 <.L17>
    1938:	61 6a b9    	mul.su    w13, #0x1, w4
    193a:	61 2b b9    	mul.su    w5, #0x1, w6
    193c:	ae 07 07    	rcall     0x289a <___udivdi3>
    193e:	2f aa 97    	mov.w     [w15-44], w4
    1940:	bf aa 97    	mov.w     [w15-42], w5
    1942:	4f ab 97    	mov.w     [w15-40], w6
    1944:	df ab 97    	mov.w     [w15-38], w7
    1946:	04 00 e1    	cp.w      w0, w4
    1948:	05 88 e1    	cpb.w     w1, w5
    194a:	06 90 e1    	cpb.w     w2, w6
    194c:	07 98 e1    	cpb.w     w3, w7
    194e:	06 00 32    	bra       Z, 0x195c <.L16>

00001950 <.L17>:
    1950:	20 02 20    	mov.w     #0x22, w0
    1952:	a0 32 89    	mov.w     w0, 0x2654
    1954:	f8 ff 2f    	mov.w     #0xffff, w8
    1956:	f9 ff 2f    	mov.w     #0xffff, w9
    1958:	08 05 be    	mov.d     w8, w10
    195a:	0a 00 37    	bra       0x1970 <.L18>

0000195c <.L16>:
    195c:	d0 c2 b3    	mov.b     #0x2d, w0
    195e:	ef e2 97    	mov.b     [w15-26], w5
    1960:	80 cf 52    	sub.b     w5, w0, [w15]
    1962:	06 00 3a    	bra       NZ, 0x1970 <.L18>
    1964:	60 00 b8    	mul.uu    w0, #0x0, w0
    1966:	60 11 b8    	mul.uu    w2, #0x0, w2
    1968:	08 04 50    	sub.w     w0, w8, w8
    196a:	89 84 58    	subb.w    w1, w9, w9
    196c:	0a 05 59    	subb.w    w2, w10, w10
    196e:	8b 85 59    	subb.w    w3, w11, w11

00001970 <.L18>:
    1970:	0e 00 e0    	cp0.w     w14
    1972:	02 00 32    	bra       Z, 0x1978 <.L7>
    1974:	2f b3 97    	mov.w     [w15-28], w6
    1976:	06 0f 78    	mov.w     w6, [w14]

00001978 <.L7>:
    1978:	08 00 be    	mov.d     w8, w0
    197a:	0a 01 be    	mov.d     w10, w2
    197c:	4f 07 78    	mov.w     [--w15], w14
    197e:	4f 06 be    	mov.d     [--w15], w12
    1980:	4f 05 be    	mov.d     [--w15], w10
    1982:	4f 04 be    	mov.d     [--w15], w8
    1984:	0f 02 b1    	sub.w     #0x20, w15
    1986:	00 00 06    	return    

00001988 <_isspace>:
    1988:	69 00 e1    	cp.w      w0, #0x9
    198a:	04 00 35    	bra       LT, 0x1994 <nomatch>
    198c:	6d 00 e1    	cp.w      w0, #0xd
    198e:	03 00 34    	bra       LE, 0x1996 <match>
    1990:	00 02 b1    	sub.w     #0x20, w0
    1992:	01 00 32    	bra       Z, 0x1996 <match>

00001994 <nomatch>:
    1994:	00 00 05    	retlw.w   #0x0, w0

00001996 <match>:
    1996:	10 00 05    	retlw.w   #0x1, w0

00001998 <_tolower>:
    1998:	80 00 78    	mov.w     w0, w1
    199a:	11 04 b1    	sub.w     #0x41, w1
    199c:	03 00 35    	bra       LT, 0x19a4 <nomatch>
    199e:	91 01 b1    	sub.w     #0x19, w1
    19a0:	01 00 3c    	bra       GT, 0x19a4 <nomatch>

000019a2 <match>:
    19a2:	00 50 a0    	bset.w    w0, #0x5

000019a4 <nomatch>:
    19a4:	00 00 06    	return    

000019a6 <__Geterrno>:
    19a6:	b0 32 81    	mov.w     0x2656, w0
    19a8:	00 00 e0    	cp0.w     w0
    19aa:	01 00 32    	bra       Z, 0x19ae <.L2>
    19ac:	00 00 01    	call      w0

000019ae <.L2>:
    19ae:	40 65 22    	mov.w     #0x2654, w0
    19b0:	00 00 06    	return    

000019b2 <_fputc>:
    19b2:	88 9f be    	mov.d     w8, [w15++]
    19b4:	8a 1f 78    	mov.w     w10, [w15++]
    19b6:	00 04 be    	mov.d     w0, w8
    19b8:	c9 00 90    	mov.w     [w9+8], w1
    19ba:	69 00 90    	mov.w     [w9+12], w0
    19bc:	80 8f 50    	sub.w     w1, w0, [w15]
    19be:	05 00 39    	bra       NC, 0x19ca <.L2>
    19c0:	09 00 78    	mov.w     w9, w0
    19c2:	13 04 07    	rcall     0x21ea <__Fwprep>
    19c4:	80 80 eb    	setm.w    w1
    19c6:	00 00 e0    	cp0.w     w0
    19c8:	16 00 35    	bra       LT, 0x19f6 <.L3>

000019ca <.L2>:
    19ca:	08 45 78    	mov.b     w8, w10
    19cc:	49 00 90    	mov.w     [w9+8], w0
    19ce:	08 58 78    	mov.b     w8, [w0++]
    19d0:	c0 04 98    	mov.w     w0, [w9+8]
    19d2:	19 00 78    	mov.w     [w9], w0
    19d4:	00 b8 a3    	btst.z    w0, #0xb
    19d6:	04 00 3a    	bra       NZ, 0x19e0 <.L4>
    19d8:	00 a8 a3    	btst.z    w0, #0xa
    19da:	07 00 32    	bra       Z, 0x19ea <.L5>
    19dc:	ea 4f 54    	sub.b     w8, #0xa, [w15]
    19de:	05 00 3a    	bra       NZ, 0x19ea <.L5>

000019e0 <.L4>:
    19e0:	09 00 78    	mov.w     w9, w0
    19e2:	d4 02 07    	rcall     0x1f8c <__DNKfflush>
    19e4:	80 80 eb    	setm.w    w1
    19e6:	00 00 e0    	cp0.w     w0
    19e8:	06 00 3a    	bra       NZ, 0x19f6 <.L3>

000019ea <.L5>:
    19ea:	00 c0 20    	mov.w     #0xc00, w0
    19ec:	19 00 60    	and.w     w0, [w9], w0
    19ee:	02 00 32    	bra       Z, 0x19f4 <.L6>
    19f0:	49 00 90    	mov.w     [w9+8], w0
    19f2:	e0 04 98    	mov.w     w0, [w9+12]

000019f4 <.L6>:
    19f4:	8a 80 fb    	ze        w10, w1

000019f6 <.L3>:
    19f6:	01 00 78    	mov.w     w1, w0
    19f8:	4f 05 78    	mov.w     [--w15], w10
    19fa:	4f 04 be    	mov.d     [--w15], w8
    19fc:	00 00 06    	return    

000019fe <_prout>:
    19fe:	88 1f 78    	mov.w     w8, [w15++]
    1a00:	02 04 78    	mov.w     w2, w8
    1a02:	08 01 78    	mov.w     w8, w2
    1a04:	75 fe 07    	rcall     0x16f0 <_memcpy>
    1a06:	08 00 40    	add.w     w0, w8, w0
    1a08:	4f 04 78    	mov.w     [--w15], w8
    1a0a:	00 00 06    	return    

00001a0c <__sprintf_cdnopuxX>:
    1a0c:	00 00 fa    	lnk       #0x0
    1a0e:	88 1f 78    	mov.w     w8, [w15++]
    1a10:	00 04 78    	mov.w     w0, w8
    1a12:	ea 81 57    	sub.w     w15, #0xa, w3
    1a14:	3f b9 97    	mov.w     [w15-10], w2
    1a16:	88 00 78    	mov.w     w8, w1
    1a18:	e0 9f 21    	mov.w     #0x19fe, w0
    1a1a:	07 00 07    	rcall     0x1a2a <___Printf_cdnopuxX>
    1a1c:	00 00 e0    	cp0.w     w0
    1a1e:	02 00 35    	bra       LT, 0x1a24 <.L3>
    1a20:	80 40 eb    	clr.b     w1
    1a22:	01 74 78    	mov.b     w1, [w8+w0]

00001a24 <.L3>:
    1a24:	4f 04 78    	mov.w     [--w15], w8
    1a26:	00 80 fa    	ulnk      
    1a28:	00 00 06    	return    

00001a2a <___Printf_cdnopuxX>:
    1a2a:	62 00 fa    	lnk       #0x62
    1a2c:	88 9f be    	mov.d     w8, [w15++]
    1a2e:	8a 1f 78    	mov.w     w10, [w15++]
    1a30:	00 05 78    	mov.w     w0, w10
    1a32:	81 04 78    	mov.w     w1, w9
    1a34:	02 04 78    	mov.w     w2, w8
    1a36:	83 00 78    	mov.w     w3, w1
    1a38:	80 f9 2f    	mov.w     #0xff98, w0
    1a3a:	0f 00 40    	add.w     w0, w15, w0
    1a3c:	08 06 07    	rcall     0x264e <__Vacopy>
    1a3e:	9a 97 9f    	mov.w     w10, [w15-94]
    1a40:	a9 97 9f    	mov.w     w9, [w15-92]
    1a42:	00 00 eb    	clr.w     w0
    1a44:	b0 9f 9f    	mov.w     w0, [w15-74]

00001a46 <.L31>:
    1a46:	18 85 fb    	ze        [w8], w10
    1a48:	8a 04 fb    	se        w10, w9
    1a4a:	0a 05 ea    	neg.w     w10, w10
    1a4c:	4f 55 de    	lsr.w     w10, #0xf, w10
    1a4e:	50 02 20    	mov.w     #0x25, w0
    1a50:	80 8f 54    	sub.w     w9, w0, [w15]
    1a52:	0d 00 32    	bra       Z, 0x1a6e <.L3>
    1a54:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    1a56:	0b 00 3a    	bra       NZ, 0x1a6e <.L3>
    1a58:	0a 01 78    	mov.w     w10, w2
    1a5a:	88 00 78    	mov.w     w8, w1
    1a5c:	2f 90 97    	mov.w     [w15-92], w0
    1a5e:	9f 91 97    	mov.w     [w15-94], w3
    1a60:	03 00 01    	call      w3
    1a62:	a0 97 9f    	mov.w     w0, [w15-92]
    1a64:	00 00 e0    	cp0.w     w0
    1a66:	8e 00 32    	bra       Z, 0x1b84 <.L27>
    1a68:	3f 98 97    	mov.w     [w15-74], w0
    1a6a:	00 00 e8    	inc.w     w0, w0
    1a6c:	b0 9f 9f    	mov.w     w0, [w15-74]

00001a6e <.L3>:
    1a6e:	0a 04 44    	add.w     w8, w10, w8
    1a70:	50 02 20    	mov.w     #0x25, w0
    1a72:	80 8f 54    	sub.w     w9, w0, [w15]
    1a74:	04 00 32    	bra       Z, 0x1a7e <.L5>
    1a76:	09 00 e0    	cp0.w     w9
    1a78:	e6 ff 3a    	bra       NZ, 0x1a46 <.L31>
    1a7a:	3f 98 97    	mov.w     [w15-74], w0
    1a7c:	84 00 37    	bra       0x1b86 <.L4>

00001a7e <.L5>:
    1a7e:	00 00 eb    	clr.w     w0
    1a80:	90 9f 9f    	mov.w     w0, [w15-78]
    1a82:	80 9f 9f    	mov.w     w0, [w15-80]
    1a84:	f0 97 9f    	mov.w     w0, [w15-82]
    1a86:	e0 97 9f    	mov.w     w0, [w15-84]
    1a88:	d0 97 9f    	mov.w     w0, [w15-86]
    1a8a:	c0 97 9f    	mov.w     w0, [w15-88]
    1a8c:	07 00 37    	bra       0x1a9c <.L34>

00001a8e <.L8>:
    1a8e:	61 60 22    	mov.w     #0x2606, w1
    1a90:	01 00 50    	sub.w     w0, w1, w0
    1a92:	00 00 40    	add.w     w0, w0, w0
    1a94:	a1 5f 22    	mov.w     #0x25fa, w1
    1a96:	61 00 78    	mov.w     [w1+w0], w0
    1a98:	df 98 97    	mov.w     [w15-70], w1
    1a9a:	01 00 70    	ior.w     w0, w1, w0

00001a9c <.L34>:
    1a9c:	d0 9f 9f    	mov.w     w0, [w15-70]
    1a9e:	88 04 78    	mov.w     w8, w9
    1aa0:	09 04 78    	mov.w     w9, w8
    1aa2:	38 45 78    	mov.b     [w8++], w10
    1aa4:	8a 00 fb    	se        w10, w1
    1aa6:	60 60 22    	mov.w     #0x2606, w0
    1aa8:	84 03 07    	rcall     0x21b2 <_strchr>
    1aaa:	00 00 e0    	cp0.w     w0
    1aac:	f0 ff 3a    	bra       NZ, 0x1a8e <.L8>
    1aae:	a1 c2 b3    	mov.b     #0x2a, w1
    1ab0:	81 4f 55    	sub.b     w10, w1, [w15]
    1ab2:	0e 00 3a    	bra       NZ, 0x1ad0 <.L9>
    1ab4:	cf 88 97    	mov.w     [w15-104], w1
    1ab6:	01 80 e9    	dec2.w    w1, w0
    1ab8:	c0 8f 9f    	mov.w     w0, [w15-104]
    1aba:	10 00 78    	mov.w     [w0], w0
    1abc:	c0 9f 9f    	mov.w     w0, [w15-72]
    1abe:	00 00 e0    	cp0.w     w0
    1ac0:	05 00 3d    	bra       GE, 0x1acc <.L10>
    1ac2:	00 00 ea    	neg.w     w0, w0
    1ac4:	c0 9f 9f    	mov.w     w0, [w15-72]
    1ac6:	5f 98 97    	mov.w     [w15-70], w0
    1ac8:	00 20 a0    	bset.w    w0, #0x2
    1aca:	d0 9f 9f    	mov.w     w0, [w15-70]

00001acc <.L10>:
    1acc:	09 04 e8    	inc.w     w9, w8
    1ace:	0f 00 37    	bra       0x1aee <.L11>

00001ad0 <.L9>:
    1ad0:	c0 9f 9f    	mov.w     w0, [w15-72]
    1ad2:	00 00 eb    	clr.w     w0
    1ad4:	05 00 37    	bra       0x1ae0 <.L32>

00001ad6 <.L14>:
    1ad6:	f2 ff 27    	mov.w     #0x7fff, w2
    1ad8:	82 0f 50    	sub.w     w0, w2, [w15]
    1ada:	02 00 32    	bra       Z, 0x1ae0 <.L32>
    1adc:	6a 01 b9    	mul.su    w0, #0xa, w2
    1ade:	02 80 40    	add.w     w1, w2, w0

00001ae0 <.L32>:
    1ae0:	09 04 78    	mov.w     w9, w8
    1ae2:	88 04 78    	mov.w     w8, w9
    1ae4:	b9 00 fb    	se        [w9++], w1
    1ae6:	01 03 b1    	sub.w     #0x30, w1
    1ae8:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1aea:	f5 ff 36    	bra       LEU, 0x1ad6 <.L14>
    1aec:	c0 9f 9f    	mov.w     w0, [w15-72]

00001aee <.L11>:
    1aee:	e0 c2 b3    	mov.b     #0x2e, w0
    1af0:	98 4f 10    	subr.b    w0, [w8], [w15]
    1af2:	02 00 32    	bra       Z, 0x1af8 <.L15>
    1af4:	00 80 eb    	setm.w    w0
    1af6:	19 00 37    	bra       0x1b2a <.L35>

00001af8 <.L15>:
    1af8:	a0 c2 b3    	mov.b     #0x2a, w0
    1afa:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1afc:	07 00 3a    	bra       NZ, 0x1b0c <.L17>
    1afe:	cf 88 97    	mov.w     [w15-104], w1
    1b00:	01 80 e9    	dec2.w    w1, w0
    1b02:	c0 8f 9f    	mov.w     w0, [w15-104]
    1b04:	10 00 78    	mov.w     [w0], w0
    1b06:	a0 9f 9f    	mov.w     w0, [w15-76]
    1b08:	08 04 e8    	inc.w     w8, w8
    1b0a:	10 00 37    	bra       0x1b2c <.L16>

00001b0c <.L17>:
    1b0c:	00 00 eb    	clr.w     w0
    1b0e:	a0 9f 9f    	mov.w     w0, [w15-76]
    1b10:	88 00 78    	mov.w     w8, w1
    1b12:	05 00 37    	bra       0x1b1e <.L33>

00001b14 <.L20>:
    1b14:	f3 ff 27    	mov.w     #0x7fff, w3
    1b16:	83 0f 50    	sub.w     w0, w3, [w15]
    1b18:	02 00 32    	bra       Z, 0x1b1e <.L33>
    1b1a:	6a 02 b9    	mul.su    w0, #0xa, w4
    1b1c:	04 00 41    	add.w     w2, w4, w0

00001b1e <.L33>:
    1b1e:	01 04 78    	mov.w     w1, w8
    1b20:	88 00 78    	mov.w     w8, w1
    1b22:	31 01 fb    	se        [w1++], w2
    1b24:	02 03 b1    	sub.w     #0x30, w2
    1b26:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1b28:	f5 ff 36    	bra       LEU, 0x1b14 <.L20>

00001b2a <.L35>:
    1b2a:	a0 9f 9f    	mov.w     w0, [w15-76]

00001b2c <.L16>:
    1b2c:	98 44 78    	mov.b     [w8], w9
    1b2e:	89 00 fb    	se        w9, w1
    1b30:	20 5f 22    	mov.w     #0x25f2, w0
    1b32:	3f 03 07    	rcall     0x21b2 <_strchr>
    1b34:	00 00 e0    	cp0.w     w0
    1b36:	02 00 32    	bra       Z, 0x1b3c <.L25>
    1b38:	08 04 e8    	inc.w     w8, w8
    1b3a:	01 00 37    	bra       0x1b3e <.L21>

00001b3c <.L25>:
    1b3c:	80 44 eb    	clr.b     w9

00001b3e <.L21>:
    1b3e:	c9 7f 9f    	mov.b     w9, [w15-68]
    1b40:	80 c6 b3    	mov.b     #0x68, w0
    1b42:	80 cf 54    	sub.b     w9, w0, [w15]
    1b44:	04 00 3a    	bra       NZ, 0x1b4e <.L22>
    1b46:	98 cf 14    	subr.b    w9, [w8], [w15]
    1b48:	0a 00 3a    	bra       NZ, 0x1b5e <.L23>
    1b4a:	66 40 50    	sub.b     w0, #0x6, w0
    1b4c:	06 00 37    	bra       0x1b5a <.L36>

00001b4e <.L22>:
    1b4e:	c0 c6 b3    	mov.b     #0x6c, w0
    1b50:	80 cf 54    	sub.b     w9, w0, [w15]
    1b52:	05 00 3a    	bra       NZ, 0x1b5e <.L23>
    1b54:	98 cf 14    	subr.b    w9, [w8], [w15]
    1b56:	03 00 3a    	bra       NZ, 0x1b5e <.L23>
    1b58:	65 40 40    	add.b     w0, #0x5, w0

00001b5a <.L36>:
    1b5a:	c0 7f 9f    	mov.b     w0, [w15-68]
    1b5c:	08 04 e8    	inc.w     w8, w8

00001b5e <.L23>:
    1b5e:	18 01 fb    	se        [w8], w2
    1b60:	e3 fb 2f    	mov.w     #0xffbe, w3
    1b62:	8f 81 41    	add.w     w3, w15, w3
    1b64:	81 f9 2f    	mov.w     #0xff98, w1
    1b66:	8f 80 40    	add.w     w1, w15, w1
    1b68:	a0 f9 2f    	mov.w     #0xff9a, w0
    1b6a:	0f 00 40    	add.w     w0, w15, w0
    1b6c:	10 00 07    	rcall     0x1b8e <___Putfld_cdnopuxX>
    1b6e:	00 00 e0    	cp0.w     w0
    1b70:	09 00 3a    	bra       NZ, 0x1b84 <.L27>
    1b72:	e1 fb 2f    	mov.w     #0xffbe, w1
    1b74:	8f 80 40    	add.w     w1, w15, w1
    1b76:	a0 f9 2f    	mov.w     #0xff9a, w0
    1b78:	0f 00 40    	add.w     w0, w15, w0
    1b7a:	ad 04 07    	rcall     0x24d6 <__Puttxt>
    1b7c:	00 00 e0    	cp0.w     w0
    1b7e:	02 00 35    	bra       LT, 0x1b84 <.L27>
    1b80:	08 04 e8    	inc.w     w8, w8
    1b82:	61 ff 37    	bra       0x1a46 <.L31>

00001b84 <.L27>:
    1b84:	00 80 eb    	setm.w    w0

00001b86 <.L4>:
    1b86:	4f 05 78    	mov.w     [--w15], w10
    1b88:	4f 04 be    	mov.d     [--w15], w8
    1b8a:	00 80 fa    	ulnk      
    1b8c:	00 00 06    	return    

00001b8e <___Putfld_cdnopuxX>:
    1b8e:	88 1f 78    	mov.w     w8, [w15++]
    1b90:	e4 c6 b3    	mov.b     #0x6e, w4
    1b92:	84 4f 51    	sub.b     w2, w4, [w15]
    1b94:	b6 00 32    	bra       Z, 0x1d02 <.L7>
    1b96:	10 00 3c    	bra       GT, 0x1bb8 <.L9>
    1b98:	6b 42 52    	sub.b     w4, #0xb, w4
    1b9a:	84 4f 51    	sub.b     w2, w4, [w15]
    1b9c:	18 00 32    	bra       Z, 0x1bce <.L5>
    1b9e:	05 00 3c    	bra       GT, 0x1baa <.L10>
    1ba0:	54 c2 b3    	mov.b     #0x25, w4
    1ba2:	84 4f 51    	sub.b     w2, w4, [w15]
    1ba4:	ee 00 32    	bra       Z, 0x1d82 <.L3>
    1ba6:	84 c5 b3    	mov.b     #0x58, w4
    1ba8:	0f 00 37    	bra       0x1bc8 <.L47>

00001baa <.L10>:
    1baa:	44 c6 b3    	mov.b     #0x64, w4
    1bac:	84 4f 51    	sub.b     w2, w4, [w15]
    1bae:	14 00 32    	bra       Z, 0x1bd8 <.L6>
    1bb0:	65 42 42    	add.b     w4, #0x5, w4
    1bb2:	84 4f 51    	sub.b     w2, w4, [w15]
    1bb4:	e9 00 3a    	bra       NZ, 0x1d88 <.L2>
    1bb6:	10 00 37    	bra       0x1bd8 <.L6>

00001bb8 <.L9>:
    1bb8:	04 c7 b3    	mov.b     #0x70, w4
    1bba:	84 4f 51    	sub.b     w2, w4, [w15]
    1bbc:	d5 00 32    	bra       Z, 0x1d68 <.L8>
    1bbe:	53 00 35    	bra       LT, 0x1c66 <.L4>
    1bc0:	65 42 42    	add.b     w4, #0x5, w4
    1bc2:	84 4f 51    	sub.b     w2, w4, [w15]
    1bc4:	50 00 32    	bra       Z, 0x1c66 <.L4>
    1bc6:	63 42 42    	add.b     w4, #0x3, w4

00001bc8 <.L47>:
    1bc8:	84 4f 51    	sub.b     w2, w4, [w15]
    1bca:	de 00 3a    	bra       NZ, 0x1d88 <.L2>
    1bcc:	4c 00 37    	bra       0x1c66 <.L4>

00001bce <.L5>:
    1bce:	11 81 e9    	dec2.w    [w1], w2
    1bd0:	82 08 78    	mov.w     w2, [w1]
    1bd2:	f0 00 90    	mov.w     [w0+14], w1
    1bd4:	12 41 78    	mov.b     [w2], w2
    1bd6:	d6 00 37    	bra       0x1d84 <.L53>

00001bd8 <.L6>:
    1bd8:	20 62 90    	mov.b     [w0+34], w4
    1bda:	c5 c6 b3    	mov.b     #0x6c, w5
    1bdc:	85 4f 52    	sub.b     w4, w5, [w15]
    1bde:	07 00 3a    	bra       NZ, 0x1bee <.L12>
    1be0:	91 02 78    	mov.w     [w1], w5
    1be2:	64 82 52    	sub.w     w5, #0x4, w4
    1be4:	84 08 78    	mov.w     w4, [w1]
    1be6:	14 02 be    	mov.d     [w4], w4
    1be8:	4f ab de    	asr.w     w5, #0xf, w6
    1bea:	86 03 78    	mov.w     w6, w7
    1bec:	11 00 37    	bra       0x1c10 <.L13>

00001bee <.L12>:
    1bee:	15 c7 b3    	mov.b     #0x71, w5
    1bf0:	85 4f 52    	sub.b     w4, w5, [w15]
    1bf2:	03 00 32    	bra       Z, 0x1bfa <.L43>
    1bf4:	a5 c6 b3    	mov.b     #0x6a, w5
    1bf6:	85 4f 52    	sub.b     w4, w5, [w15]
    1bf8:	06 00 3a    	bra       NZ, 0x1c06 <.L15>

00001bfa <.L43>:
    1bfa:	91 02 78    	mov.w     [w1], w5
    1bfc:	68 82 52    	sub.w     w5, #0x8, w4
    1bfe:	84 08 78    	mov.w     w4, [w1]
    1c00:	54 03 be    	mov.d     [++w4], w6
    1c02:	44 02 be    	mov.d     [--w4], w4
    1c04:	05 00 37    	bra       0x1c10 <.L13>

00001c06 <.L15>:
    1c06:	11 82 e9    	dec2.w    [w1], w4
    1c08:	84 08 78    	mov.w     w4, [w1]
    1c0a:	14 02 78    	mov.w     [w4], w4
    1c0c:	cf a2 de    	asr.w     w4, #0xf, w5
    1c0e:	61 2b b9    	mul.su    w5, #0x1, w6

00001c10 <.L13>:
    1c10:	04 98 be    	mov.d     w4, [w0++]
    1c12:	06 90 be    	mov.d     w6, [w0--]
    1c14:	a0 60 90    	mov.b     [w0+34], w1
    1c16:	88 c6 b3    	mov.b     #0x68, w8
    1c18:	88 cf 50    	sub.b     w1, w8, [w15]
    1c1a:	0d 00 32    	bra       Z, 0x1c36 <.L19>
    1c1c:	28 c6 b3    	mov.b     #0x62, w8
    1c1e:	88 cf 50    	sub.b     w1, w8, [w15]
    1c20:	04 00 3a    	bra       NZ, 0x1c2a <.L18>
    1c22:	04 02 fb    	se        w4, w4
    1c24:	cf a2 de    	asr.w     w4, #0xf, w5
    1c26:	61 2b b9    	mul.su    w5, #0x1, w6
    1c28:	08 00 37    	bra       0x1c3a <.L44>

00001c2a <.L18>:
    1c2a:	48 c7 b3    	mov.b     #0x74, w8
    1c2c:	88 cf 50    	sub.b     w1, w8, [w15]
    1c2e:	03 00 32    	bra       Z, 0x1c36 <.L19>
    1c30:	66 44 44    	add.b     w8, #0x6, w8
    1c32:	88 cf 50    	sub.b     w1, w8, [w15]
    1c34:	04 00 3a    	bra       NZ, 0x1c3e <.L17>

00001c36 <.L19>:
    1c36:	cf a2 de    	asr.w     w4, #0xf, w5
    1c38:	61 2b b9    	mul.su    w5, #0x1, w6

00001c3a <.L44>:
    1c3a:	04 98 be    	mov.d     w4, [w0++]
    1c3c:	06 90 be    	mov.d     w6, [w0--]

00001c3e <.L17>:
    1c3e:	30 02 be    	mov.d     [w0++], w4
    1c40:	20 03 be    	mov.d     [w0--], w6
    1c42:	f0 00 90    	mov.w     [w0+14], w1
    1c44:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1c46:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1c48:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1c4a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1c4c:	02 00 3d    	bra       GE, 0x1c52 <.L20>
    1c4e:	d4 c2 b3    	mov.b     #0x2d, w4
    1c50:	08 00 37    	bra       0x1c62 <.L45>

00001c52 <.L20>:
    1c52:	00 12 90    	mov.w     [w0+32], w4
    1c54:	04 18 a3    	btst.z    w4, #0x1
    1c56:	02 00 32    	bra       Z, 0x1c5c <.L22>
    1c58:	b4 c2 b3    	mov.b     #0x2b, w4
    1c5a:	03 00 37    	bra       0x1c62 <.L45>

00001c5c <.L22>:
    1c5c:	04 08 a3    	btst.z    w4, #0x0
    1c5e:	4c 00 32    	bra       Z, 0x1cf8 <.L31>
    1c60:	04 c2 b3    	mov.b     #0x20, w4

00001c62 <.L45>:
    1c62:	84 f1 78    	mov.b     w4, [w3+w1]
    1c64:	47 00 37    	bra       0x1cf4 <.L54>

00001c66 <.L4>:
    1c66:	20 62 90    	mov.b     [w0+34], w4
    1c68:	c5 c6 b3    	mov.b     #0x6c, w5
    1c6a:	85 4f 52    	sub.b     w4, w5, [w15]
    1c6c:	06 00 3a    	bra       NZ, 0x1c7a <.L23>
    1c6e:	91 02 78    	mov.w     [w1], w5
    1c70:	64 82 52    	sub.w     w5, #0x4, w4
    1c72:	84 08 78    	mov.w     w4, [w1]
    1c74:	14 02 be    	mov.d     [w4], w4
    1c76:	60 33 b8    	mul.uu    w6, #0x0, w6
    1c78:	11 00 37    	bra       0x1c9c <.L24>

00001c7a <.L23>:
    1c7a:	15 c7 b3    	mov.b     #0x71, w5
    1c7c:	85 4f 52    	sub.b     w4, w5, [w15]
    1c7e:	03 00 32    	bra       Z, 0x1c86 <.L48>
    1c80:	a5 c6 b3    	mov.b     #0x6a, w5
    1c82:	85 4f 52    	sub.b     w4, w5, [w15]
    1c84:	06 00 3a    	bra       NZ, 0x1c92 <.L26>

00001c86 <.L48>:
    1c86:	91 02 78    	mov.w     [w1], w5
    1c88:	68 82 52    	sub.w     w5, #0x8, w4
    1c8a:	84 08 78    	mov.w     w4, [w1]
    1c8c:	54 03 be    	mov.d     [++w4], w6
    1c8e:	44 02 be    	mov.d     [--w4], w4
    1c90:	05 00 37    	bra       0x1c9c <.L24>

00001c92 <.L26>:
    1c92:	11 82 e9    	dec2.w    [w1], w4
    1c94:	84 08 78    	mov.w     w4, [w1]
    1c96:	14 02 78    	mov.w     [w4], w4
    1c98:	80 02 eb    	clr.w     w5
    1c9a:	60 33 b8    	mul.uu    w6, #0x0, w6

00001c9c <.L24>:
    1c9c:	04 98 be    	mov.d     w4, [w0++]
    1c9e:	06 90 be    	mov.d     w6, [w0--]
    1ca0:	a0 60 90    	mov.b     [w0+34], w1
    1ca2:	88 c6 b3    	mov.b     #0x68, w8
    1ca4:	88 cf 50    	sub.b     w1, w8, [w15]
    1ca6:	0d 00 32    	bra       Z, 0x1cc2 <.L30>
    1ca8:	28 c6 b3    	mov.b     #0x62, w8
    1caa:	88 cf 50    	sub.b     w1, w8, [w15]
    1cac:	04 00 3a    	bra       NZ, 0x1cb6 <.L29>
    1cae:	04 82 fb    	ze        w4, w4
    1cb0:	80 02 eb    	clr.w     w5
    1cb2:	60 33 b8    	mul.uu    w6, #0x0, w6
    1cb4:	08 00 37    	bra       0x1cc6 <.L49>

00001cb6 <.L29>:
    1cb6:	48 c7 b3    	mov.b     #0x74, w8
    1cb8:	88 cf 50    	sub.b     w1, w8, [w15]
    1cba:	03 00 32    	bra       Z, 0x1cc2 <.L30>
    1cbc:	66 44 44    	add.b     w8, #0x6, w8
    1cbe:	88 cf 50    	sub.b     w1, w8, [w15]
    1cc0:	04 00 3a    	bra       NZ, 0x1cca <.L28>

00001cc2 <.L30>:
    1cc2:	80 02 eb    	clr.w     w5
    1cc4:	60 33 b8    	mul.uu    w6, #0x0, w6

00001cc6 <.L49>:
    1cc6:	04 98 be    	mov.d     w4, [w0++]
    1cc8:	06 90 be    	mov.d     w6, [w0--]

00001cca <.L28>:
    1cca:	80 10 90    	mov.w     [w0+32], w1
    1ccc:	01 38 a3    	btst.z    w1, #0x3
    1cce:	14 00 32    	bra       Z, 0x1cf8 <.L31>
    1cd0:	30 02 be    	mov.d     [w0++], w4
    1cd2:	20 03 be    	mov.d     [w0--], w6
    1cd4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1cd6:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1cd8:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1cda:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1cdc:	0d 00 32    	bra       Z, 0x1cf8 <.L31>
    1cde:	81 c7 b3    	mov.b     #0x78, w1
    1ce0:	81 4f 51    	sub.b     w2, w1, [w15]
    1ce2:	03 00 32    	bra       Z, 0x1cea <.L32>
    1ce4:	81 c5 b3    	mov.b     #0x58, w1
    1ce6:	81 4f 51    	sub.b     w2, w1, [w15]
    1ce8:	07 00 3a    	bra       NZ, 0x1cf8 <.L31>

00001cea <.L32>:
    1cea:	f0 00 90    	mov.w     [w0+14], w1
    1cec:	04 c3 b3    	mov.b     #0x30, w4
    1cee:	84 f1 78    	mov.b     w4, [w3+w1]
    1cf0:	81 00 e8    	inc.w     w1, w1
    1cf2:	82 f1 78    	mov.b     w2, [w3+w1]

00001cf4 <.L54>:
    1cf4:	81 00 e8    	inc.w     w1, w1
    1cf6:	71 00 98    	mov.w     w1, [w0+14]

00001cf8 <.L31>:
    1cf8:	f0 00 90    	mov.w     [w0+14], w1
    1cfa:	81 81 41    	add.w     w3, w1, w3
    1cfc:	63 00 98    	mov.w     w3, [w0+12]
    1cfe:	82 40 78    	mov.b     w2, w1
    1d00:	3e 00 37    	bra       0x1d7e <.L52>

00001d02 <.L7>:
    1d02:	a0 61 90    	mov.b     [w0+34], w3
    1d04:	c4 c6 b3    	mov.b     #0x6c, w4
    1d06:	11 81 e9    	dec2.w    [w1], w2
    1d08:	84 cf 51    	sub.b     w3, w4, [w15]
    1d0a:	22 00 32    	bra       Z, 0x1d50 <.L37>
    1d0c:	0a 00 3c    	bra       GT, 0x1d22 <.L41>
    1d0e:	64 42 52    	sub.b     w4, #0x4, w4
    1d10:	84 cf 51    	sub.b     w3, w4, [w15]
    1d12:	25 00 32    	bra       Z, 0x1d5e <.L51>
    1d14:	04 c2 e8    	inc2.b    w4, w4
    1d16:	84 cf 51    	sub.b     w3, w4, [w15]
    1d18:	13 00 32    	bra       Z, 0x1d40 <.L36>
    1d1a:	68 42 52    	sub.b     w4, #0x8, w4
    1d1c:	84 cf 51    	sub.b     w3, w4, [w15]
    1d1e:	1e 00 3a    	bra       NZ, 0x1d5c <.L33>
    1d20:	0a 00 37    	bra       0x1d36 <.L55>

00001d22 <.L41>:
    1d22:	44 c7 b3    	mov.b     #0x74, w4
    1d24:	84 cf 51    	sub.b     w3, w4, [w15]
    1d26:	1b 00 32    	bra       Z, 0x1d5e <.L51>
    1d28:	66 42 42    	add.b     w4, #0x6, w4
    1d2a:	84 cf 51    	sub.b     w3, w4, [w15]
    1d2c:	18 00 32    	bra       Z, 0x1d5e <.L51>
    1d2e:	69 42 52    	sub.b     w4, #0x9, w4
    1d30:	84 cf 51    	sub.b     w3, w4, [w15]
    1d32:	14 00 3a    	bra       NZ, 0x1d5c <.L33>
    1d34:	05 00 37    	bra       0x1d40 <.L36>

00001d36 <.L55>:
    1d36:	82 08 78    	mov.w     w2, [w1]
    1d38:	92 00 78    	mov.w     [w2], w1
    1d3a:	40 58 90    	mov.b     [w0+28], w0
    1d3c:	80 48 78    	mov.b     w0, [w1]
    1d3e:	2c 00 37    	bra       0x1d98 <.L11>

00001d40 <.L36>:
    1d40:	82 08 78    	mov.w     w2, [w1]
    1d42:	92 00 78    	mov.w     [w2], w1
    1d44:	60 0a 90    	mov.w     [w0+28], w4
    1d46:	cf a2 de    	asr.w     w4, #0xf, w5
    1d48:	61 2b b9    	mul.su    w5, #0x1, w6
    1d4a:	84 98 be    	mov.d     w4, [w1++]
    1d4c:	86 90 be    	mov.d     w6, [w1--]
    1d4e:	24 00 37    	bra       0x1d98 <.L11>

00001d50 <.L37>:
    1d50:	82 08 78    	mov.w     w2, [w1]
    1d52:	92 00 78    	mov.w     [w2], w1
    1d54:	60 09 90    	mov.w     [w0+28], w2
    1d56:	cf 91 de    	asr.w     w2, #0xf, w3
    1d58:	82 88 be    	mov.d     w2, [w1]
    1d5a:	1e 00 37    	bra       0x1d98 <.L11>

00001d5c <.L33>:
    1d5c:	11 81 e9    	dec2.w    [w1], w2

00001d5e <.L51>:
    1d5e:	82 08 78    	mov.w     w2, [w1]
    1d60:	92 00 78    	mov.w     [w2], w1
    1d62:	60 08 90    	mov.w     [w0+28], w0
    1d64:	80 08 78    	mov.w     w0, [w1]
    1d66:	18 00 37    	bra       0x1d98 <.L11>

00001d68 <.L8>:
    1d68:	11 81 e9    	dec2.w    [w1], w2
    1d6a:	82 08 78    	mov.w     w2, [w1]
    1d6c:	12 02 78    	mov.w     [w2], w4
    1d6e:	cf a2 de    	asr.w     w4, #0xf, w5
    1d70:	61 2b b9    	mul.su    w5, #0x1, w6
    1d72:	04 98 be    	mov.d     w4, [w0++]
    1d74:	06 90 be    	mov.d     w6, [w0--]
    1d76:	f0 00 90    	mov.w     [w0+14], w1
    1d78:	81 81 41    	add.w     w3, w1, w3
    1d7a:	63 00 98    	mov.w     w3, [w0+12]
    1d7c:	81 c7 b3    	mov.b     #0x78, w1

00001d7e <.L52>:
    1d7e:	7c 02 07    	rcall     0x2278 <__Litob>
    1d80:	0b 00 37    	bra       0x1d98 <.L11>

00001d82 <.L3>:
    1d82:	f0 00 90    	mov.w     [w0+14], w1

00001d84 <.L53>:
    1d84:	82 f1 78    	mov.b     w2, [w3+w1]
    1d86:	06 00 37    	bra       0x1d94 <.L50>

00001d88 <.L2>:
    1d88:	f0 00 90    	mov.w     [w0+14], w1
    1d8a:	81 81 41    	add.w     w3, w1, w3
    1d8c:	02 04 e0    	cp0.b     w2
    1d8e:	01 00 3a    	bra       NZ, 0x1d92 <.L42>
    1d90:	52 c2 b3    	mov.b     #0x25, w2

00001d92 <.L42>:
    1d92:	82 49 78    	mov.b     w2, [w3]

00001d94 <.L50>:
    1d94:	81 00 e8    	inc.w     w1, w1
    1d96:	71 00 98    	mov.w     w1, [w0+14]

00001d98 <.L11>:
    1d98:	00 00 eb    	clr.w     w0
    1d9a:	4f 04 78    	mov.w     [--w15], w8
    1d9c:	00 00 06    	return    

00001d9e <_prout>:
    1d9e:	88 9f be    	mov.d     w8, [w15++]
    1da0:	00 04 78    	mov.w     w0, w8
    1da2:	01 00 78    	mov.w     w1, w0
    1da4:	82 04 78    	mov.w     w2, w9
    1da6:	88 01 78    	mov.w     w8, w3
    1da8:	09 01 78    	mov.w     w9, w2
    1daa:	11 00 20    	mov.w     #0x1, w1
    1dac:	a4 01 07    	rcall     0x20f6 <_fwrite>
    1dae:	89 0f 50    	sub.w     w0, w9, [w15]
    1db0:	01 00 32    	bra       Z, 0x1db4 <.L2>
    1db2:	00 04 eb    	clr.w     w8

00001db4 <.L2>:
    1db4:	08 00 78    	mov.w     w8, w0
    1db6:	4f 04 be    	mov.d     [--w15], w8
    1db8:	00 00 06    	return    

00001dba <__printf_s>:
    1dba:	00 00 fa    	lnk       #0x0
    1dbc:	e8 81 57    	sub.w     w15, #0x8, w3
    1dbe:	4f b9 97    	mov.w     [w15-8], w2
    1dc0:	81 3f 22    	mov.w     #0x23f8, w1
    1dc2:	e0 d9 21    	mov.w     #0x1d9e, w0
    1dc4:	02 00 07    	rcall     0x1dca <___Printf_s>
    1dc6:	00 80 fa    	ulnk      
    1dc8:	00 00 06    	return    

00001dca <___Printf_s>:
    1dca:	62 00 fa    	lnk       #0x62
    1dcc:	88 9f be    	mov.d     w8, [w15++]
    1dce:	8a 1f 78    	mov.w     w10, [w15++]
    1dd0:	00 05 78    	mov.w     w0, w10
    1dd2:	81 04 78    	mov.w     w1, w9
    1dd4:	02 04 78    	mov.w     w2, w8
    1dd6:	83 00 78    	mov.w     w3, w1
    1dd8:	80 f9 2f    	mov.w     #0xff98, w0
    1dda:	0f 00 40    	add.w     w0, w15, w0
    1ddc:	38 04 07    	rcall     0x264e <__Vacopy>
    1dde:	9a 97 9f    	mov.w     w10, [w15-94]
    1de0:	a9 97 9f    	mov.w     w9, [w15-92]
    1de2:	00 00 eb    	clr.w     w0
    1de4:	b0 9f 9f    	mov.w     w0, [w15-74]

00001de6 <.L31>:
    1de6:	18 85 fb    	ze        [w8], w10
    1de8:	8a 04 fb    	se        w10, w9
    1dea:	0a 05 ea    	neg.w     w10, w10
    1dec:	4f 55 de    	lsr.w     w10, #0xf, w10
    1dee:	50 02 20    	mov.w     #0x25, w0
    1df0:	80 8f 54    	sub.w     w9, w0, [w15]
    1df2:	0d 00 32    	bra       Z, 0x1e0e <.L3>
    1df4:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    1df6:	0b 00 3a    	bra       NZ, 0x1e0e <.L3>
    1df8:	0a 01 78    	mov.w     w10, w2
    1dfa:	88 00 78    	mov.w     w8, w1
    1dfc:	2f 90 97    	mov.w     [w15-92], w0
    1dfe:	9f 91 97    	mov.w     [w15-94], w3
    1e00:	03 00 01    	call      w3
    1e02:	a0 97 9f    	mov.w     w0, [w15-92]
    1e04:	00 00 e0    	cp0.w     w0
    1e06:	8e 00 32    	bra       Z, 0x1f24 <.L27>
    1e08:	3f 98 97    	mov.w     [w15-74], w0
    1e0a:	00 00 e8    	inc.w     w0, w0
    1e0c:	b0 9f 9f    	mov.w     w0, [w15-74]

00001e0e <.L3>:
    1e0e:	0a 04 44    	add.w     w8, w10, w8
    1e10:	50 02 20    	mov.w     #0x25, w0
    1e12:	80 8f 54    	sub.w     w9, w0, [w15]
    1e14:	04 00 32    	bra       Z, 0x1e1e <.L5>
    1e16:	09 00 e0    	cp0.w     w9
    1e18:	e6 ff 3a    	bra       NZ, 0x1de6 <.L31>
    1e1a:	3f 98 97    	mov.w     [w15-74], w0
    1e1c:	84 00 37    	bra       0x1f26 <.L4>

00001e1e <.L5>:
    1e1e:	00 00 eb    	clr.w     w0
    1e20:	90 9f 9f    	mov.w     w0, [w15-78]
    1e22:	80 9f 9f    	mov.w     w0, [w15-80]
    1e24:	f0 97 9f    	mov.w     w0, [w15-82]
    1e26:	e0 97 9f    	mov.w     w0, [w15-84]
    1e28:	d0 97 9f    	mov.w     w0, [w15-86]
    1e2a:	c0 97 9f    	mov.w     w0, [w15-88]
    1e2c:	07 00 37    	bra       0x1e3c <.L34>

00001e2e <.L8>:
    1e2e:	01 62 22    	mov.w     #0x2620, w1
    1e30:	01 00 50    	sub.w     w0, w1, w0
    1e32:	00 00 40    	add.w     w0, w0, w0
    1e34:	41 61 22    	mov.w     #0x2614, w1
    1e36:	61 00 78    	mov.w     [w1+w0], w0
    1e38:	df 98 97    	mov.w     [w15-70], w1
    1e3a:	01 00 70    	ior.w     w0, w1, w0

00001e3c <.L34>:
    1e3c:	d0 9f 9f    	mov.w     w0, [w15-70]
    1e3e:	88 04 78    	mov.w     w8, w9
    1e40:	09 04 78    	mov.w     w9, w8
    1e42:	38 45 78    	mov.b     [w8++], w10
    1e44:	8a 00 fb    	se        w10, w1
    1e46:	00 62 22    	mov.w     #0x2620, w0
    1e48:	b4 01 07    	rcall     0x21b2 <_strchr>
    1e4a:	00 00 e0    	cp0.w     w0
    1e4c:	f0 ff 3a    	bra       NZ, 0x1e2e <.L8>
    1e4e:	a1 c2 b3    	mov.b     #0x2a, w1
    1e50:	81 4f 55    	sub.b     w10, w1, [w15]
    1e52:	0e 00 3a    	bra       NZ, 0x1e70 <.L9>
    1e54:	cf 88 97    	mov.w     [w15-104], w1
    1e56:	01 80 e9    	dec2.w    w1, w0
    1e58:	c0 8f 9f    	mov.w     w0, [w15-104]
    1e5a:	10 00 78    	mov.w     [w0], w0
    1e5c:	c0 9f 9f    	mov.w     w0, [w15-72]
    1e5e:	00 00 e0    	cp0.w     w0
    1e60:	05 00 3d    	bra       GE, 0x1e6c <.L10>
    1e62:	00 00 ea    	neg.w     w0, w0
    1e64:	c0 9f 9f    	mov.w     w0, [w15-72]
    1e66:	5f 98 97    	mov.w     [w15-70], w0
    1e68:	00 20 a0    	bset.w    w0, #0x2
    1e6a:	d0 9f 9f    	mov.w     w0, [w15-70]

00001e6c <.L10>:
    1e6c:	09 04 e8    	inc.w     w9, w8
    1e6e:	0f 00 37    	bra       0x1e8e <.L11>

00001e70 <.L9>:
    1e70:	c0 9f 9f    	mov.w     w0, [w15-72]
    1e72:	00 00 eb    	clr.w     w0
    1e74:	05 00 37    	bra       0x1e80 <.L32>

00001e76 <.L14>:
    1e76:	f2 ff 27    	mov.w     #0x7fff, w2
    1e78:	82 0f 50    	sub.w     w0, w2, [w15]
    1e7a:	02 00 32    	bra       Z, 0x1e80 <.L32>
    1e7c:	6a 01 b9    	mul.su    w0, #0xa, w2
    1e7e:	02 80 40    	add.w     w1, w2, w0

00001e80 <.L32>:
    1e80:	09 04 78    	mov.w     w9, w8
    1e82:	88 04 78    	mov.w     w8, w9
    1e84:	b9 00 fb    	se        [w9++], w1
    1e86:	01 03 b1    	sub.w     #0x30, w1
    1e88:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1e8a:	f5 ff 36    	bra       LEU, 0x1e76 <.L14>
    1e8c:	c0 9f 9f    	mov.w     w0, [w15-72]

00001e8e <.L11>:
    1e8e:	e0 c2 b3    	mov.b     #0x2e, w0
    1e90:	98 4f 10    	subr.b    w0, [w8], [w15]
    1e92:	02 00 32    	bra       Z, 0x1e98 <.L15>
    1e94:	00 80 eb    	setm.w    w0
    1e96:	19 00 37    	bra       0x1eca <.L35>

00001e98 <.L15>:
    1e98:	a0 c2 b3    	mov.b     #0x2a, w0
    1e9a:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1e9c:	07 00 3a    	bra       NZ, 0x1eac <.L17>
    1e9e:	cf 88 97    	mov.w     [w15-104], w1
    1ea0:	01 80 e9    	dec2.w    w1, w0
    1ea2:	c0 8f 9f    	mov.w     w0, [w15-104]
    1ea4:	10 00 78    	mov.w     [w0], w0
    1ea6:	a0 9f 9f    	mov.w     w0, [w15-76]
    1ea8:	08 04 e8    	inc.w     w8, w8
    1eaa:	10 00 37    	bra       0x1ecc <.L16>

00001eac <.L17>:
    1eac:	00 00 eb    	clr.w     w0
    1eae:	a0 9f 9f    	mov.w     w0, [w15-76]
    1eb0:	88 00 78    	mov.w     w8, w1
    1eb2:	05 00 37    	bra       0x1ebe <.L33>

00001eb4 <.L20>:
    1eb4:	f3 ff 27    	mov.w     #0x7fff, w3
    1eb6:	83 0f 50    	sub.w     w0, w3, [w15]
    1eb8:	02 00 32    	bra       Z, 0x1ebe <.L33>
    1eba:	6a 02 b9    	mul.su    w0, #0xa, w4
    1ebc:	04 00 41    	add.w     w2, w4, w0

00001ebe <.L33>:
    1ebe:	01 04 78    	mov.w     w1, w8
    1ec0:	88 00 78    	mov.w     w8, w1
    1ec2:	31 01 fb    	se        [w1++], w2
    1ec4:	02 03 b1    	sub.w     #0x30, w2
    1ec6:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1ec8:	f5 ff 36    	bra       LEU, 0x1eb4 <.L20>

00001eca <.L35>:
    1eca:	a0 9f 9f    	mov.w     w0, [w15-76]

00001ecc <.L16>:
    1ecc:	98 44 78    	mov.b     [w8], w9
    1ece:	89 00 fb    	se        w9, w1
    1ed0:	c0 60 22    	mov.w     #0x260c, w0
    1ed2:	6f 01 07    	rcall     0x21b2 <_strchr>
    1ed4:	00 00 e0    	cp0.w     w0
    1ed6:	02 00 32    	bra       Z, 0x1edc <.L25>
    1ed8:	08 04 e8    	inc.w     w8, w8
    1eda:	01 00 37    	bra       0x1ede <.L21>

00001edc <.L25>:
    1edc:	80 44 eb    	clr.b     w9

00001ede <.L21>:
    1ede:	c9 7f 9f    	mov.b     w9, [w15-68]
    1ee0:	80 c6 b3    	mov.b     #0x68, w0
    1ee2:	80 cf 54    	sub.b     w9, w0, [w15]
    1ee4:	04 00 3a    	bra       NZ, 0x1eee <.L22>
    1ee6:	98 cf 14    	subr.b    w9, [w8], [w15]
    1ee8:	0a 00 3a    	bra       NZ, 0x1efe <.L23>
    1eea:	66 40 50    	sub.b     w0, #0x6, w0
    1eec:	06 00 37    	bra       0x1efa <.L36>

00001eee <.L22>:
    1eee:	c0 c6 b3    	mov.b     #0x6c, w0
    1ef0:	80 cf 54    	sub.b     w9, w0, [w15]
    1ef2:	05 00 3a    	bra       NZ, 0x1efe <.L23>
    1ef4:	98 cf 14    	subr.b    w9, [w8], [w15]
    1ef6:	03 00 3a    	bra       NZ, 0x1efe <.L23>
    1ef8:	65 40 40    	add.b     w0, #0x5, w0

00001efa <.L36>:
    1efa:	c0 7f 9f    	mov.b     w0, [w15-68]
    1efc:	08 04 e8    	inc.w     w8, w8

00001efe <.L23>:
    1efe:	18 01 fb    	se        [w8], w2
    1f00:	e3 fb 2f    	mov.w     #0xffbe, w3
    1f02:	8f 81 41    	add.w     w3, w15, w3
    1f04:	81 f9 2f    	mov.w     #0xff98, w1
    1f06:	8f 80 40    	add.w     w1, w15, w1
    1f08:	a0 f9 2f    	mov.w     #0xff9a, w0
    1f0a:	0f 00 40    	add.w     w0, w15, w0
    1f0c:	10 00 07    	rcall     0x1f2e <___Putfld_s>
    1f0e:	00 00 e0    	cp0.w     w0
    1f10:	09 00 3a    	bra       NZ, 0x1f24 <.L27>
    1f12:	e1 fb 2f    	mov.w     #0xffbe, w1
    1f14:	8f 80 40    	add.w     w1, w15, w1
    1f16:	a0 f9 2f    	mov.w     #0xff9a, w0
    1f18:	0f 00 40    	add.w     w0, w15, w0
    1f1a:	dd 02 07    	rcall     0x24d6 <__Puttxt>
    1f1c:	00 00 e0    	cp0.w     w0
    1f1e:	02 00 35    	bra       LT, 0x1f24 <.L27>
    1f20:	08 04 e8    	inc.w     w8, w8
    1f22:	61 ff 37    	bra       0x1de6 <.L31>

00001f24 <.L27>:
    1f24:	00 80 eb    	setm.w    w0

00001f26 <.L4>:
    1f26:	4f 05 78    	mov.w     [--w15], w10
    1f28:	4f 04 be    	mov.d     [--w15], w8
    1f2a:	00 80 fa    	ulnk      
    1f2c:	00 00 06    	return    

00001f2e <___Putfld_s>:
    1f2e:	88 9f be    	mov.d     w8, [w15++]
    1f30:	8a 1f 78    	mov.w     w10, [w15++]
    1f32:	00 04 78    	mov.w     w0, w8
    1f34:	30 c5 b3    	mov.b     #0x53, w0
    1f36:	80 4f 51    	sub.b     w2, w0, [w15]
    1f38:	08 00 32    	bra       Z, 0x1f4a <.L4>
    1f3a:	30 c7 b3    	mov.b     #0x73, w0
    1f3c:	80 4f 51    	sub.b     w2, w0, [w15]
    1f3e:	05 00 32    	bra       Z, 0x1f4a <.L4>
    1f40:	51 c2 b3    	mov.b     #0x25, w1
    1f42:	78 00 90    	mov.w     [w8+14], w0
    1f44:	81 4f 51    	sub.b     w2, w1, [w15]
    1f46:	17 00 3a    	bra       NZ, 0x1f76 <.L9>
    1f48:	14 00 37    	bra       0x1f72 <.L11>

00001f4a <.L4>:
    1f4a:	11 80 e9    	dec2.w    [w1], w0
    1f4c:	80 08 78    	mov.w     w0, [w1]
    1f4e:	10 05 78    	mov.w     [w0], w10
    1f50:	6a 04 98    	mov.w     w10, [w8+12]
    1f52:	d8 0c 90    	mov.w     [w8+26], w9
    1f54:	09 00 e0    	cp0.w     w9
    1f56:	04 00 3d    	bra       GE, 0x1f60 <.L5>
    1f58:	0a 00 78    	mov.w     w10, w0
    1f5a:	37 01 07    	rcall     0x21ca <_strlen>
    1f5c:	80 04 78    	mov.w     w0, w9
    1f5e:	07 00 37    	bra       0x1f6e <.L6>

00001f60 <.L5>:
    1f60:	09 01 78    	mov.w     w9, w2
    1f62:	80 00 eb    	clr.w     w1
    1f64:	0a 00 78    	mov.w     w10, w0
    1f66:	1b 01 07    	rcall     0x219e <_memchr>
    1f68:	00 00 e0    	cp0.w     w0
    1f6a:	01 00 32    	bra       Z, 0x1f6e <.L6>
    1f6c:	8a 04 50    	sub.w     w0, w10, w9

00001f6e <.L6>:
    1f6e:	19 0c 98    	mov.w     w9, [w8+18]
    1f70:	09 00 37    	bra       0x1f84 <.L7>

00001f72 <.L11>:
    1f72:	82 71 78    	mov.b     w2, [w3+w0]
    1f74:	05 00 37    	bra       0x1f80 <.L10>

00001f76 <.L9>:
    1f76:	80 81 41    	add.w     w3, w0, w3
    1f78:	02 04 e0    	cp0.b     w2
    1f7a:	01 00 3a    	bra       NZ, 0x1f7e <.L8>
    1f7c:	01 41 78    	mov.b     w1, w2

00001f7e <.L8>:
    1f7e:	82 49 78    	mov.b     w2, [w3]

00001f80 <.L10>:
    1f80:	00 00 e8    	inc.w     w0, w0
    1f82:	70 04 98    	mov.w     w0, [w8+14]

00001f84 <.L7>:
    1f84:	00 00 eb    	clr.w     w0
    1f86:	4f 05 78    	mov.w     [--w15], w10
    1f88:	4f 04 be    	mov.d     [--w15], w8
    1f8a:	00 00 06    	return    

00001f8c <__DNKfflush>:
    1f8c:	88 9f be    	mov.d     w8, [w15++]
    1f8e:	8a 1f 78    	mov.w     w10, [w15++]
    1f90:	00 04 78    	mov.w     w0, w8
    1f92:	08 00 e0    	cp0.w     w8
    1f94:	0d 00 3a    	bra       NZ, 0x1fb0 <.L2>
    1f96:	68 44 22    	mov.w     #0x2446, w8
    1f98:	70 05 44    	add.w     w8, #0x10, w10
    1f9a:	80 04 eb    	clr.w     w9

00001f9c <.L4>:
    1f9c:	58 00 78    	mov.w     [++w8], w0
    1f9e:	00 00 e0    	cp0.w     w0
    1fa0:	04 00 32    	bra       Z, 0x1faa <.L3>
    1fa2:	f4 ff 07    	rcall     0x1f8c <__DNKfflush>
    1fa4:	00 00 e0    	cp0.w     w0
    1fa6:	01 00 3d    	bra       GE, 0x1faa <.L3>
    1fa8:	80 84 eb    	setm.w    w9

00001faa <.L3>:
    1faa:	8a 0f 54    	sub.w     w8, w10, [w15]
    1fac:	f7 ff 3a    	bra       NZ, 0x1f9c <.L4>
    1fae:	25 00 37    	bra       0x1ffa <.L5>

00001fb0 <.L2>:
    1fb0:	00 00 22    	mov.w     #0x2000, w0
    1fb2:	18 00 60    	and.w     w0, [w8], w0
    1fb4:	80 04 eb    	clr.w     w9
    1fb6:	21 00 32    	bra       Z, 0x1ffa <.L5>
    1fb8:	a8 04 90    	mov.w     [w8+4], w9
    1fba:	0f 00 37    	bra       0x1fda <.L6>

00001fbc <.L8>:
    1fbc:	09 01 51    	sub.w     w2, w9, w2
    1fbe:	38 40 90    	mov.b     [w8+3], w0
    1fc0:	00 00 fb    	se        w0, w0
    1fc2:	89 00 78    	mov.w     w9, w1
    1fc4:	dc 06 07    	rcall     0x2d7e <_write>
    1fc6:	00 00 e0    	cp0.w     w0
    1fc8:	07 00 3c    	bra       GT, 0x1fd8 <.L7>
    1fca:	28 00 90    	mov.w     [w8+4], w0
    1fcc:	40 04 98    	mov.w     w0, [w8+8]
    1fce:	60 04 98    	mov.w     w0, [w8+12]
    1fd0:	50 0c 98    	mov.w     w0, [w8+26]
    1fd2:	18 90 a0    	bset.w    [w8], #0x9
    1fd4:	80 84 eb    	setm.w    w9
    1fd6:	11 00 37    	bra       0x1ffa <.L5>

00001fd8 <.L7>:
    1fd8:	80 84 44    	add.w     w9, w0, w9

00001fda <.L6>:
    1fda:	48 01 90    	mov.w     [w8+8], w2
    1fdc:	82 8f 54    	sub.w     w9, w2, [w15]
    1fde:	ee ff 39    	bra       NC, 0x1fbc <.L8>
    1fe0:	28 00 90    	mov.w     [w8+4], w0
    1fe2:	40 04 98    	mov.w     w0, [w8+8]
    1fe4:	98 00 78    	mov.w     [w8], w1
    1fe6:	02 c0 20    	mov.w     #0xc00, w2
    1fe8:	02 81 60    	and.w     w1, w2, w2
    1fea:	01 00 3a    	bra       NZ, 0x1fee <.L9>
    1fec:	38 00 90    	mov.w     [w8+6], w0

00001fee <.L9>:
    1fee:	01 e8 a3    	btst.z    w1, #0xe
    1ff0:	02 00 32    	bra       Z, 0x1ff6 <.L10>
    1ff2:	60 04 98    	mov.w     w0, [w8+12]
    1ff4:	01 00 37    	bra       0x1ff8 <.L13>

00001ff6 <.L10>:
    1ff6:	50 0c 98    	mov.w     w0, [w8+26]

00001ff8 <.L13>:
    1ff8:	80 04 eb    	clr.w     w9

00001ffa <.L5>:
    1ffa:	09 00 78    	mov.w     w9, w0
    1ffc:	4f 05 78    	mov.w     [--w15], w10
    1ffe:	4f 04 be    	mov.d     [--w15], w8
    2000:	00 00 06    	return    

00002002 <_fputs>:
    2002:	88 9f be    	mov.d     w8, [w15++]
    2004:	8a 9f be    	mov.d     w10, [w15++]
    2006:	80 04 78    	mov.w     w0, w9
    2008:	01 04 78    	mov.w     w1, w8
    200a:	2c 00 37    	bra       0x2064 <.L2>

0000200c <.L9>:
    200c:	c8 00 90    	mov.w     [w8+8], w1
    200e:	68 00 90    	mov.w     [w8+12], w0
    2010:	80 8f 50    	sub.w     w1, w0, [w15]
    2012:	04 00 39    	bra       NC, 0x201c <.L3>
    2014:	08 00 78    	mov.w     w8, w0
    2016:	e9 00 07    	rcall     0x21ea <__Fwprep>
    2018:	00 00 e0    	cp0.w     w0
    201a:	37 00 35    	bra       LT, 0x208a <.L13>

0000201c <.L3>:
    201c:	00 40 20    	mov.w     #0x400, w0
    201e:	18 00 60    	and.w     w0, [w8], w0
    2020:	09 00 32    	bra       Z, 0x2034 <.L5>
    2022:	a1 00 20    	mov.w     #0xa, w1
    2024:	09 00 78    	mov.w     w9, w0
    2026:	d7 00 07    	rcall     0x21d6 <_strrchr>
    2028:	80 05 78    	mov.w     w0, w11
    202a:	0b 00 e0    	cp0.w     w11
    202c:	03 00 32    	bra       Z, 0x2034 <.L5>
    202e:	61 85 14    	subr.w    w9, #0x1, w10
    2030:	0a 85 45    	add.w     w11, w10, w10
    2032:	04 00 37    	bra       0x203c <.L6>

00002034 <.L5>:
    2034:	09 00 78    	mov.w     w9, w0
    2036:	c9 00 07    	rcall     0x21ca <_strlen>
    2038:	00 05 78    	mov.w     w0, w10
    203a:	80 05 eb    	clr.w     w11

0000203c <.L6>:
    203c:	48 00 90    	mov.w     [w8+8], w0
    203e:	e8 00 90    	mov.w     [w8+12], w1
    2040:	80 80 50    	sub.w     w1, w0, w1
    2042:	8a 8f 50    	sub.w     w1, w10, [w15]
    2044:	02 00 31    	bra       C, 0x204a <.L7>
    2046:	01 05 78    	mov.w     w1, w10
    2048:	80 05 eb    	clr.w     w11

0000204a <.L7>:
    204a:	0a 01 78    	mov.w     w10, w2
    204c:	89 00 78    	mov.w     w9, w1
    204e:	50 fb 07    	rcall     0x16f0 <_memcpy>
    2050:	48 00 90    	mov.w     [w8+8], w0
    2052:	0a 00 40    	add.w     w0, w10, w0
    2054:	40 04 98    	mov.w     w0, [w8+8]
    2056:	0b 00 e0    	cp0.w     w11
    2058:	04 00 32    	bra       Z, 0x2062 <.L8>
    205a:	08 00 78    	mov.w     w8, w0
    205c:	97 ff 07    	rcall     0x1f8c <__DNKfflush>
    205e:	00 00 e0    	cp0.w     w0
    2060:	14 00 3a    	bra       NZ, 0x208a <.L13>

00002062 <.L8>:
    2062:	8a 84 44    	add.w     w9, w10, w9

00002064 <.L2>:
    2064:	19 04 e0    	cp0.b     [w9]
    2066:	d2 ff 3a    	bra       NZ, 0x200c <.L9>
    2068:	00 80 20    	mov.w     #0x800, w0
    206a:	18 00 60    	and.w     w0, [w8], w0
    206c:	06 00 32    	bra       Z, 0x207a <.L10>
    206e:	08 00 78    	mov.w     w8, w0
    2070:	8d ff 07    	rcall     0x1f8c <__DNKfflush>
    2072:	80 00 78    	mov.w     w0, w1
    2074:	00 80 eb    	setm.w    w0
    2076:	01 00 e0    	cp0.w     w1
    2078:	09 00 3a    	bra       NZ, 0x208c <.L4>

0000207a <.L10>:
    207a:	01 c0 20    	mov.w     #0xc00, w1
    207c:	98 80 60    	and.w     w1, [w8], w1
    207e:	00 00 eb    	clr.w     w0
    2080:	05 00 32    	bra       Z, 0x208c <.L4>
    2082:	48 00 90    	mov.w     [w8+8], w0
    2084:	60 04 98    	mov.w     w0, [w8+12]
    2086:	00 00 eb    	clr.w     w0
    2088:	01 00 37    	bra       0x208c <.L4>

0000208a <.L13>:
    208a:	00 80 eb    	setm.w    w0

0000208c <.L4>:
    208c:	4f 05 be    	mov.d     [--w15], w10
    208e:	4f 04 be    	mov.d     [--w15], w8
    2090:	00 00 06    	return    

00002092 <_free>:
    2092:	00 00 e0    	cp0.w     w0
    2094:	2f 00 32    	bra       Z, 0x20f4 <.L1>
    2096:	c0 01 78    	mov.w     [--w0], w3
    2098:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    209a:	2c 00 36    	bra       LEU, 0x20f4 <.L1>
    209c:	03 08 a3    	btst.z    w3, #0x0
    209e:	2a 00 3a    	bra       NZ, 0x20f4 <.L1>
    20a0:	91 32 81    	mov.w     0x2652, w1
    20a2:	01 00 e0    	cp0.w     w1
    20a4:	02 00 32    	bra       Z, 0x20aa <.L3>
    20a6:	81 0f 50    	sub.w     w0, w1, [w15]
    20a8:	04 00 31    	bra       C, 0x20b2 <.L7>

000020aa <.L3>:
    20aa:	11 00 98    	mov.w     w1, [w0+2]
    20ac:	90 32 89    	mov.w     w0, 0x2652
    20ae:	16 00 37    	bra       0x20dc <.L5>

000020b0 <.L11>:
    20b0:	82 00 78    	mov.w     w2, w1

000020b2 <.L7>:
    20b2:	11 01 90    	mov.w     [w1+2], w2
    20b4:	02 00 e0    	cp0.w     w2
    20b6:	02 00 32    	bra       Z, 0x20bc <.L6>
    20b8:	80 0f 51    	sub.w     w2, w0, [w15]
    20ba:	fa ff 39    	bra       NC, 0x20b0 <.L11>

000020bc <.L6>:
    20bc:	11 02 78    	mov.w     [w1], w4
    20be:	84 82 40    	add.w     w1, w4, w5
    20c0:	85 0f 50    	sub.w     w0, w5, [w15]
    20c2:	18 00 39    	bra       NC, 0x20f4 <.L1>
    20c4:	80 8f 52    	sub.w     w5, w0, [w15]
    20c6:	03 00 3a    	bra       NZ, 0x20ce <.L8>
    20c8:	83 08 42    	add.w     w4, w3, [w1]
    20ca:	01 00 78    	mov.w     w1, w0
    20cc:	07 00 37    	bra       0x20dc <.L5>

000020ce <.L8>:
    20ce:	02 00 e0    	cp0.w     w2
    20d0:	03 00 32    	bra       Z, 0x20d8 <.L9>
    20d2:	83 01 40    	add.w     w0, w3, w3
    20d4:	83 0f 51    	sub.w     w2, w3, [w15]
    20d6:	0e 00 39    	bra       NC, 0x20f4 <.L1>

000020d8 <.L9>:
    20d8:	12 00 98    	mov.w     w2, [w0+2]
    20da:	90 00 98    	mov.w     w0, [w1+2]

000020dc <.L5>:
    20dc:	90 00 90    	mov.w     [w0+2], w1
    20de:	01 00 e0    	cp0.w     w1
    20e0:	09 00 32    	bra       Z, 0x20f4 <.L1>
    20e2:	10 01 40    	add.w     w0, [w0], w2
    20e4:	82 8f 50    	sub.w     w1, w2, [w15]
    20e6:	06 00 3a    	bra       NZ, 0x20f4 <.L1>
    20e8:	02 65 22    	mov.w     #0x2650, w2
    20ea:	00 09 eb    	clr.w     [w2]
    20ec:	10 01 78    	mov.w     [w0], w2
    20ee:	11 08 41    	add.w     w2, [w1], [w0]
    20f0:	91 00 90    	mov.w     [w1+2], w1
    20f2:	11 00 98    	mov.w     w1, [w0+2]

000020f4 <.L1>:
    20f4:	00 00 06    	return    

000020f6 <_fwrite>:
    20f6:	88 9f be    	mov.d     w8, [w15++]
    20f8:	8a 9f be    	mov.d     w10, [w15++]
    20fa:	8c 9f be    	mov.d     w12, [w15++]
    20fc:	8e 1f 78    	mov.w     w14, [w15++]
    20fe:	00 06 78    	mov.w     w0, w12
    2100:	01 04 78    	mov.w     w1, w8
    2102:	02 00 78    	mov.w     w2, w0
    2104:	83 04 78    	mov.w     w3, w9
    2106:	08 81 b9    	mul.ss    w0, w8, w2
    2108:	02 07 78    	mov.w     w2, w14
    210a:	02 00 e0    	cp0.w     w2
    210c:	42 00 32    	bra       Z, 0x2192 <.L11>
    210e:	08 00 e0    	cp0.w     w8
    2110:	41 00 32    	bra       Z, 0x2194 <.L2>
    2112:	82 05 78    	mov.w     w2, w11

00002114 <.L8>:
    2114:	c9 00 90    	mov.w     [w9+8], w1
    2116:	69 00 90    	mov.w     [w9+12], w0
    2118:	80 8f 50    	sub.w     w1, w0, [w15]
    211a:	04 00 39    	bra       NC, 0x2124 <.L3>
    211c:	09 00 78    	mov.w     w9, w0
    211e:	65 00 07    	rcall     0x21ea <__Fwprep>
    2120:	00 00 e0    	cp0.w     w0
    2122:	29 00 35    	bra       LT, 0x2176 <.L4>

00002124 <.L3>:
    2124:	00 40 20    	mov.w     #0x400, w0
    2126:	19 00 60    	and.w     w0, [w9], w0
    2128:	0a 00 32    	bra       Z, 0x213e <.L12>
    212a:	0b 01 78    	mov.w     w11, w2
    212c:	a1 00 20    	mov.w     #0xa, w1
    212e:	0c 00 78    	mov.w     w12, w0
    2130:	36 00 07    	rcall     0x219e <_memchr>
    2132:	80 06 78    	mov.w     w0, w13
    2134:	0d 00 e0    	cp0.w     w13
    2136:	06 00 32    	bra       Z, 0x2144 <.L13>
    2138:	61 05 16    	subr.w    w12, #0x1, w10
    213a:	0a 85 46    	add.w     w13, w10, w10
    213c:	04 00 37    	bra       0x2146 <.L5>

0000213e <.L12>:
    213e:	0b 05 78    	mov.w     w11, w10
    2140:	80 06 eb    	clr.w     w13
    2142:	01 00 37    	bra       0x2146 <.L5>

00002144 <.L13>:
    2144:	0b 05 78    	mov.w     w11, w10

00002146 <.L5>:
    2146:	49 00 90    	mov.w     [w9+8], w0
    2148:	e9 00 90    	mov.w     [w9+12], w1
    214a:	80 80 50    	sub.w     w1, w0, w1
    214c:	8a 8f 50    	sub.w     w1, w10, [w15]
    214e:	02 00 31    	bra       C, 0x2154 <.L6>
    2150:	01 05 78    	mov.w     w1, w10
    2152:	80 06 eb    	clr.w     w13

00002154 <.L6>:
    2154:	0a 01 78    	mov.w     w10, w2
    2156:	8c 00 78    	mov.w     w12, w1
    2158:	cb fa 07    	rcall     0x16f0 <_memcpy>
    215a:	8a 85 55    	sub.w     w11, w10, w11
    215c:	49 00 90    	mov.w     [w9+8], w0
    215e:	0a 00 40    	add.w     w0, w10, w0
    2160:	c0 04 98    	mov.w     w0, [w9+8]
    2162:	0d 00 e0    	cp0.w     w13
    2164:	04 00 32    	bra       Z, 0x216e <.L7>
    2166:	09 00 78    	mov.w     w9, w0
    2168:	11 ff 07    	rcall     0x1f8c <__DNKfflush>
    216a:	00 00 e0    	cp0.w     w0
    216c:	04 00 3a    	bra       NZ, 0x2176 <.L4>

0000216e <.L7>:
    216e:	0b 00 e0    	cp0.w     w11
    2170:	02 00 32    	bra       Z, 0x2176 <.L4>
    2172:	0a 06 46    	add.w     w12, w10, w12
    2174:	cf ff 37    	bra       0x2114 <.L8>

00002176 <.L4>:
    2176:	00 80 20    	mov.w     #0x800, w0
    2178:	19 00 60    	and.w     w0, [w9], w0
    217a:	02 00 32    	bra       Z, 0x2180 <.L9>
    217c:	09 00 78    	mov.w     w9, w0
    217e:	06 ff 07    	rcall     0x1f8c <__DNKfflush>

00002180 <.L9>:
    2180:	00 c0 20    	mov.w     #0xc00, w0
    2182:	19 00 60    	and.w     w0, [w9], w0
    2184:	02 00 32    	bra       Z, 0x218a <.L10>
    2186:	49 00 90    	mov.w     [w9+8], w0
    2188:	e0 04 98    	mov.w     w0, [w9+12]

0000218a <.L10>:
    218a:	8b 05 57    	sub.w     w14, w11, w11
    218c:	11 00 09    	repeat    #0x11
    218e:	88 85 d8    	div.uw    w11, w8
    2190:	01 00 37    	bra       0x2194 <.L2>

00002192 <.L11>:
    2192:	00 00 eb    	clr.w     w0

00002194 <.L2>:
    2194:	4f 07 78    	mov.w     [--w15], w14
    2196:	4f 06 be    	mov.d     [--w15], w12
    2198:	4f 05 be    	mov.d     [--w15], w10
    219a:	4f 04 be    	mov.d     [--w15], w8
    219c:	00 00 06    	return    

0000219e <_memchr>:
    219e:	03 00 37    	bra       0x21a6 <.L2>

000021a0 <.L4>:
    21a0:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    21a2:	05 00 32    	bra       Z, 0x21ae <.L5>
    21a4:	02 01 e9    	dec.w     w2, w2

000021a6 <.L2>:
    21a6:	80 01 78    	mov.w     w0, w3
    21a8:	02 00 e0    	cp0.w     w2
    21aa:	fa ff 3a    	bra       NZ, 0x21a0 <.L4>
    21ac:	00 00 05    	retlw.w   #0x0, w0

000021ae <.L5>:
    21ae:	03 00 78    	mov.w     w3, w0
    21b0:	00 00 06    	return    

000021b2 <_strchr>:
    21b2:	02 00 37    	bra       0x21b8 <.L2>

000021b4 <.L4>:
    21b4:	03 04 e0    	cp0.b     w3
    21b6:	06 00 32    	bra       Z, 0x21c4 <.L5>

000021b8 <.L2>:
    21b8:	00 01 78    	mov.w     w0, w2
    21ba:	02 00 78    	mov.w     w2, w0
    21bc:	b0 41 78    	mov.b     [w0++], w3
    21be:	81 cf 51    	sub.b     w3, w1, [w15]
    21c0:	f9 ff 3a    	bra       NZ, 0x21b4 <.L4>
    21c2:	01 00 37    	bra       0x21c6 <.L3>

000021c4 <.L5>:
    21c4:	00 01 eb    	clr.w     w2

000021c6 <.L3>:
    21c6:	02 00 78    	mov.w     w2, w0
    21c8:	00 00 06    	return    

000021ca <_strlen>:
    21ca:	80 00 78    	mov.w     w0, w1

000021cc <.L2>:
    21cc:	01 01 78    	mov.w     w1, w2
    21ce:	31 04 e0    	cp0.b     [w1++]
    21d0:	fd ff 3a    	bra       NZ, 0x21cc <.L2>
    21d2:	00 00 51    	sub.w     w2, w0, w0
    21d4:	00 00 06    	return    

000021d6 <_strrchr>:
    21d6:	00 01 eb    	clr.w     w2

000021d8 <.L3>:
    21d8:	00 02 78    	mov.w     w0, w4
    21da:	b0 41 78    	mov.b     [w0++], w3
    21dc:	81 cf 51    	sub.b     w3, w1, [w15]
    21de:	01 00 3a    	bra       NZ, 0x21e2 <.L2>
    21e0:	04 01 78    	mov.w     w4, w2

000021e2 <.L2>:
    21e2:	03 04 e0    	cp0.b     w3
    21e4:	f9 ff 3a    	bra       NZ, 0x21d8 <.L3>
    21e6:	02 00 78    	mov.w     w2, w0
    21e8:	00 00 06    	return    

000021ea <__Fwprep>:
    21ea:	88 9f be    	mov.d     w8, [w15++]
    21ec:	8a 1f 78    	mov.w     w10, [w15++]
    21ee:	00 04 78    	mov.w     w0, w8
    21f0:	c8 00 90    	mov.w     [w8+8], w1
    21f2:	68 01 90    	mov.w     [w8+12], w2
    21f4:	00 00 eb    	clr.w     w0
    21f6:	82 8f 50    	sub.w     w1, w2, [w15]
    21f8:	3c 00 39    	bra       NC, 0x2272 <.L2>
    21fa:	18 00 78    	mov.w     [w8], w0
    21fc:	22 00 29    	mov.w     #0x9002, w2
    21fe:	02 01 60    	and.w     w0, w2, w2
    2200:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    2202:	07 00 32    	bra       Z, 0x2212 <.L3>
    2204:	01 20 24    	mov.w     #0x4200, w1
    2206:	00 00 e0    	cp0.w     w0
    2208:	01 00 3d    	bra       GE, 0x220c <.L4>
    220a:	01 20 20    	mov.w     #0x200, w1

0000220c <.L4>:
    220c:	00 8c 70    	ior.w     w1, w0, [w8]
    220e:	00 80 eb    	setm.w    w0
    2210:	30 00 37    	bra       0x2272 <.L2>

00002212 <.L3>:
    2212:	02 00 26    	mov.w     #0x6000, w2
    2214:	02 00 60    	and.w     w0, w2, w0
    2216:	82 0f 50    	sub.w     w0, w2, [w15]
    2218:	09 00 3a    	bra       NZ, 0x222c <.L5>
    221a:	38 00 90    	mov.w     [w8+6], w0
    221c:	80 8f 50    	sub.w     w1, w0, [w15]
    221e:	06 00 39    	bra       NC, 0x222c <.L5>
    2220:	08 00 78    	mov.w     w8, w0
    2222:	b4 fe 07    	rcall     0x1f8c <__DNKfflush>
    2224:	80 00 78    	mov.w     w0, w1
    2226:	00 80 eb    	setm.w    w0
    2228:	01 00 e0    	cp0.w     w1
    222a:	23 00 3a    	bra       NZ, 0x2272 <.L2>

0000222c <.L5>:
    222c:	18 05 78    	mov.w     [w8], w10
    222e:	00 c0 20    	mov.w     #0xc00, w0
    2230:	00 00 65    	and.w     w10, w0, w0
    2232:	18 00 3a    	bra       NZ, 0x2264 <.L6>
    2234:	a8 04 90    	mov.w     [w8+4], w9
    2236:	60 02 20    	mov.w     #0x26, w0
    2238:	08 00 40    	add.w     w0, w8, w0
    223a:	80 8f 54    	sub.w     w9, w0, [w15]
    223c:	13 00 3a    	bra       NZ, 0x2264 <.L6>
    223e:	00 20 20    	mov.w     #0x200, w0
    2240:	2d fa 07    	rcall     0x169c <_malloc>
    2242:	20 04 98    	mov.w     w0, [w8+4]
    2244:	00 00 e0    	cp0.w     w0
    2246:	05 00 3a    	bra       NZ, 0x2252 <.L7>
    2248:	29 04 98    	mov.w     w9, [w8+4]
    224a:	49 04 98    	mov.w     w9, [w8+8]
    224c:	89 04 e8    	inc.w     w9, w9
    224e:	39 04 98    	mov.w     w9, [w8+6]
    2250:	08 00 37    	bra       0x2262 <.L11>

00002252 <.L7>:
    2252:	0a 60 a0    	bset.w    w10, #0x6
    2254:	0a 0c 78    	mov.w     w10, [w8]
    2256:	40 04 98    	mov.w     w0, [w8+8]
    2258:	01 20 20    	mov.w     #0x200, w1
    225a:	80 80 40    	add.w     w1, w0, w1
    225c:	31 04 98    	mov.w     w1, [w8+6]
    225e:	40 0c 98    	mov.w     w0, [w8+24]
    2260:	50 0c 98    	mov.w     w0, [w8+26]

00002262 <.L11>:
    2262:	f9 01 07    	rcall     0x2656 <__Closreg>

00002264 <.L6>:
    2264:	28 00 90    	mov.w     [w8+4], w0
    2266:	50 04 98    	mov.w     w0, [w8+10]
    2268:	38 00 90    	mov.w     [w8+6], w0
    226a:	60 04 98    	mov.w     w0, [w8+12]
    226c:	00 00 26    	mov.w     #0x6000, w0
    226e:	18 0c 70    	ior.w     w0, [w8], [w8]
    2270:	00 00 eb    	clr.w     w0

00002272 <.L2>:
    2272:	4f 05 78    	mov.w     [--w15], w10
    2274:	4f 04 be    	mov.d     [--w15], w8
    2276:	00 00 06    	return    

00002278 <__Litob>:
    2278:	fc 87 47    	add.w     w15, #0x1c, w15
    227a:	88 9f be    	mov.d     w8, [w15++]
    227c:	8a 9f be    	mov.d     w10, [w15++]
    227e:	8c 9f be    	mov.d     w12, [w15++]
    2280:	8e 1f 78    	mov.w     w14, [w15++]
    2282:	00 06 78    	mov.w     w0, w12
    2284:	80 c5 b3    	mov.b     #0x58, w0
    2286:	80 cf 50    	sub.b     w1, w0, [w15]
    2288:	0a 00 32    	bra       Z, 0x229e <.L35>
    228a:	77 40 40    	add.b     w0, #0x17, w0
    228c:	80 cf 50    	sub.b     w1, w0, [w15]
    228e:	0a 00 32    	bra       Z, 0x22a4 <.L36>
    2290:	69 40 40    	add.b     w0, #0x9, w0
    2292:	80 cf 50    	sub.b     w1, w0, [w15]
    2294:	0b 00 32    	bra       Z, 0x22ac <.L37>
    2296:	10 5e 22    	mov.w     #0x25e1, w0
    2298:	80 bf 9f    	mov.w     w0, [w15-16]
    229a:	ae 00 20    	mov.w     #0xa, w14
    229c:	0a 00 37    	bra       0x22b2 <.L2>

0000229e <.L35>:
    229e:	02 5d 22    	mov.w     #0x25d0, w2
    22a0:	82 bf 9f    	mov.w     w2, [w15-16]
    22a2:	06 00 37    	bra       0x22b0 <.L46>

000022a4 <.L36>:
    22a4:	13 5e 22    	mov.w     #0x25e1, w3
    22a6:	83 bf 9f    	mov.w     w3, [w15-16]
    22a8:	8e 00 20    	mov.w     #0x8, w14
    22aa:	03 00 37    	bra       0x22b2 <.L2>

000022ac <.L37>:
    22ac:	14 5e 22    	mov.w     #0x25e1, w4
    22ae:	84 bf 9f    	mov.w     w4, [w15-16]

000022b0 <.L46>:
    22b0:	0e 01 20    	mov.w     #0x10, w14

000022b2 <.L2>:
    22b2:	3c 02 be    	mov.d     [w12++], w4
    22b4:	2c 03 be    	mov.d     [w12--], w6
    22b6:	06 05 be    	mov.d     w6, w10
    22b8:	04 04 be    	mov.d     w4, w8
    22ba:	40 c6 b3    	mov.b     #0x64, w0
    22bc:	80 cf 50    	sub.b     w1, w0, [w15]
    22be:	03 00 32    	bra       Z, 0x22c6 <.L3>
    22c0:	65 40 40    	add.b     w0, #0x5, w0
    22c2:	80 cf 50    	sub.b     w1, w0, [w15]
    22c4:	0b 00 3a    	bra       NZ, 0x22dc <.L4>

000022c6 <.L3>:
    22c6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    22c8:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    22ca:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    22cc:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    22ce:	06 00 3d    	bra       GE, 0x22dc <.L4>
    22d0:	60 00 b8    	mul.uu    w0, #0x0, w0
    22d2:	60 11 b8    	mul.uu    w2, #0x0, w2
    22d4:	04 04 50    	sub.w     w0, w4, w8
    22d6:	85 84 58    	subb.w    w1, w5, w9
    22d8:	06 05 59    	subb.w    w2, w6, w10
    22da:	87 85 59    	subb.w    w3, w7, w11

000022dc <.L4>:
    22dc:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    22de:	04 00 32    	bra       Z, 0x22e8 <.L38>
    22e0:	40 00 20    	mov.w     #0x4, w0
    22e2:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    22e4:	38 00 3a    	bra       NZ, 0x2356 <.L51>
    22e6:	01 00 37    	bra       0x22ea <.L6>

000022e8 <.L38>:
    22e8:	30 00 20    	mov.w     #0x3, w0

000022ea <.L6>:
    22ea:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    22ec:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    22ee:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    22f0:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    22f2:	04 00 3a    	bra       NZ, 0x22fc <.L8>
    22f4:	dc 08 90    	mov.w     [w12+26], w1
    22f6:	8d 01 20    	mov.w     #0x18, w13
    22f8:	01 00 e0    	cp0.w     w1
    22fa:	06 00 32    	bra       Z, 0x2308 <.L9>

000022fc <.L8>:
    22fc:	8e 00 e9    	dec.w     w14, w1
    22fe:	88 80 60    	and.w     w1, w8, w1
    2300:	8f ba 97    	mov.w     [w15-16], w5
    2302:	e5 c0 78    	mov.b     [w5+w1], w1
    2304:	f1 ef 9f    	mov.b     w1, [w15-17]
    2306:	7d 01 20    	mov.w     #0x17, w13

00002308 <.L9>:
    2308:	80 00 78    	mov.w     w0, w1

0000230a <.LB101>:
    230a:	81 00 e9    	dec.w     w1, w1
    230c:	05 00 33    	bra       N, 0x2318 <.LE101>
    230e:	8b 05 d1    	lsr.w     w11, w11
    2310:	0a 85 d3    	rrc.w     w10, w10
    2312:	89 84 d3    	rrc.w     w9, w9
    2314:	08 84 d3    	rrc.w     w8, w8
    2316:	f9 ff 37    	bra       0x230a <.LB101>

00002318 <.LE101>:
    2318:	08 9e be    	mov.d     w8, [w12++]
    231a:	0a 96 be    	mov.d     w10, [w12--]
    231c:	12 00 37    	bra       0x2342 <.L10>

0000231e <.L12>:
    231e:	8d 06 e9    	dec.w     w13, w13
    2320:	8e 00 e9    	dec.w     w14, w1
    2322:	84 80 60    	and.w     w1, w4, w1
    2324:	0f b9 97    	mov.w     [w15-16], w2
    2326:	e2 c1 78    	mov.b     [w2+w1], w3
    2328:	82 fd 2f    	mov.w     #0xffd8, w2
    232a:	0f 01 41    	add.w     w2, w15, w2
    232c:	03 f1 7e    	mov.b     w3, [w2+w13]
    232e:	80 00 78    	mov.w     w0, w1

00002330 <.LB115>:
    2330:	81 00 e9    	dec.w     w1, w1
    2332:	05 00 33    	bra       N, 0x233e <.LE115>
    2334:	87 83 d1    	asr.w     w7, w7
    2336:	06 83 d3    	rrc.w     w6, w6
    2338:	85 82 d3    	rrc.w     w5, w5
    233a:	04 82 d3    	rrc.w     w4, w4
    233c:	f9 ff 37    	bra       0x2330 <.LB115>

0000233e <.LE115>:
    233e:	04 9e be    	mov.d     w4, [w12++]
    2340:	06 96 be    	mov.d     w6, [w12--]

00002342 <.L10>:
    2342:	3c 02 be    	mov.d     [w12++], w4
    2344:	2c 03 be    	mov.d     [w12--], w6
    2346:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2348:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    234a:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    234c:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    234e:	8b 00 34    	bra       LE, 0x2466 <.L11>
    2350:	0d 00 e0    	cp0.w     w13
    2352:	e5 ff 3c    	bra       GT, 0x231e <.L12>
    2354:	88 00 37    	bra       0x2466 <.L11>

00002356 <.L51>:
    2356:	2c 60 90    	mov.b     [w12+34], w0
    2358:	81 c6 b3    	mov.b     #0x68, w1
    235a:	81 4f 50    	sub.b     w0, w1, [w15]
    235c:	0b 00 32    	bra       Z, 0x2374 <.L14>
    235e:	06 00 3c    	bra       GT, 0x236c <.L16>
    2360:	00 04 e0    	cp0.b     w0
    2362:	08 00 32    	bra       Z, 0x2374 <.L14>
    2364:	e6 c0 50    	sub.b     w1, #0x6, w1
    2366:	81 4f 50    	sub.b     w0, w1, [w15]
    2368:	4e 00 3a    	bra       NZ, 0x2406 <.L13>
    236a:	04 00 37    	bra       0x2374 <.L14>

0000236c <.L16>:
    236c:	c1 c6 b3    	mov.b     #0x6c, w1
    236e:	81 4f 50    	sub.b     w0, w1, [w15]
    2370:	4a 00 3a    	bra       NZ, 0x2406 <.L13>
    2372:	21 00 37    	bra       0x23b6 <.L52>

00002374 <.L14>:
    2374:	08 00 e0    	cp0.w     w8
    2376:	04 00 3a    	bra       NZ, 0x2380 <.L17>
    2378:	5c 08 90    	mov.w     [w12+26], w0
    237a:	8d 01 20    	mov.w     #0x18, w13
    237c:	00 00 e0    	cp0.w     w0
    237e:	06 00 32    	bra       Z, 0x238c <.L18>

00002380 <.L17>:
    2380:	11 00 09    	repeat    #0x11
    2382:	0e 84 d8    	div.uw    w8, w14
    2384:	0f b9 97    	mov.w     [w15-16], w2
    2386:	e2 c0 78    	mov.b     [w2+w1], w1
    2388:	f1 ef 9f    	mov.b     w1, [w15-17]
    238a:	7d 01 20    	mov.w     #0x17, w13

0000238c <.L18>:
    238c:	11 00 09    	repeat    #0x11
    238e:	0e 84 d8    	div.uw    w8, w14
    2390:	0a 00 37    	bra       0x23a6 <.L47>

00002392 <.L21>:
    2392:	11 00 09    	repeat    #0x11
    2394:	0e 04 d8    	div.sw    w8, w14
    2396:	8d 06 e9    	dec.w     w13, w13
    2398:	0e 81 b9    	mul.ss    w0, w14, w2
    239a:	02 04 54    	sub.w     w8, w2, w8
    239c:	8f b8 97    	mov.w     [w15-16], w1
    239e:	61 41 7c    	mov.b     [w1+w8], w2
    23a0:	81 fd 2f    	mov.w     #0xffd8, w1
    23a2:	8f 80 40    	add.w     w1, w15, w1
    23a4:	82 f0 7e    	mov.b     w2, [w1+w13]

000023a6 <.L47>:
    23a6:	00 04 78    	mov.w     w0, w8
    23a8:	08 00 e0    	cp0.w     w8
    23aa:	02 00 32    	bra       Z, 0x23b0 <.L20>
    23ac:	0d 00 e0    	cp0.w     w13
    23ae:	f1 ff 3c    	bra       GT, 0x2392 <.L21>

000023b0 <.L20>:
    23b0:	cf c4 de    	asr.w     w8, #0xf, w9
    23b2:	61 4d b9    	mul.su    w9, #0x1, w10
    23b4:	25 00 37    	bra       0x2400 <.L50>

000023b6 <.L52>:
    23b6:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    23b8:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    23ba:	04 00 3a    	bra       NZ, 0x23c4 <.L22>
    23bc:	5c 08 90    	mov.w     [w12+26], w0
    23be:	8d 01 20    	mov.w     #0x18, w13
    23c0:	00 00 e0    	cp0.w     w0
    23c2:	07 00 32    	bra       Z, 0x23d2 <.L23>

000023c4 <.L22>:
    23c4:	61 71 b9    	mul.su    w14, #0x1, w2
    23c6:	08 00 be    	mov.d     w8, w0
    23c8:	c6 01 07    	rcall     0x2756 <___umodsi3>
    23ca:	8f b9 97    	mov.w     [w15-16], w3
    23cc:	e3 41 78    	mov.b     [w3+w0], w3
    23ce:	f3 ef 9f    	mov.b     w3, [w15-17]
    23d0:	7d 01 20    	mov.w     #0x17, w13

000023d2 <.L23>:
    23d2:	61 71 b9    	mul.su    w14, #0x1, w2
    23d4:	08 00 be    	mov.d     w8, w0
    23d6:	ae f8 07    	rcall     0x1534 <___udivsi3>
    23d8:	0b 00 37    	bra       0x23f0 <.L48>

000023da <.L26>:
    23da:	61 71 b9    	mul.su    w14, #0x1, w2
    23dc:	08 00 be    	mov.d     w8, w0
    23de:	ac 01 07    	rcall     0x2738 <___divsi3>
    23e0:	8d 06 e9    	dec.w     w13, w13
    23e2:	00 f1 b9    	mul.ss    w14, w0, w2
    23e4:	02 04 54    	sub.w     w8, w2, w8
    23e6:	0f ba 97    	mov.w     [w15-16], w4
    23e8:	e4 42 7c    	mov.b     [w4+w8], w5
    23ea:	84 fd 2f    	mov.w     #0xffd8, w4
    23ec:	0f 02 42    	add.w     w4, w15, w4
    23ee:	05 f2 7e    	mov.b     w5, [w4+w13]

000023f0 <.L48>:
    23f0:	00 04 be    	mov.d     w0, w8
    23f2:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    23f4:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    23f6:	02 00 32    	bra       Z, 0x23fc <.L25>
    23f8:	0d 00 e0    	cp0.w     w13
    23fa:	ef ff 3c    	bra       GT, 0x23da <.L26>

000023fc <.L25>:
    23fc:	4f cd de    	asr.w     w9, #0xf, w10
    23fe:	8a 05 78    	mov.w     w10, w11

00002400 <.L50>:
    2400:	08 9e be    	mov.d     w8, [w12++]
    2402:	0a 96 be    	mov.d     w10, [w12--]
    2404:	30 00 37    	bra       0x2466 <.L11>

00002406 <.L13>:
    2406:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2408:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    240a:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    240c:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    240e:	04 00 3a    	bra       NZ, 0x2418 <.L27>
    2410:	5c 08 90    	mov.w     [w12+26], w0
    2412:	8d 01 20    	mov.w     #0x18, w13
    2414:	00 00 e0    	cp0.w     w0
    2416:	09 00 32    	bra       Z, 0x242a <.L28>

00002418 <.L27>:
    2418:	61 72 b9    	mul.su    w14, #0x1, w4
    241a:	61 2b b9    	mul.su    w5, #0x1, w6
    241c:	08 00 be    	mov.d     w8, w0
    241e:	0a 01 be    	mov.d     w10, w2
    2420:	43 02 07    	rcall     0x28a8 <___umoddi3>
    2422:	0f ba 97    	mov.w     [w15-16], w4
    2424:	64 42 78    	mov.b     [w4+w0], w4
    2426:	f4 ef 9f    	mov.b     w4, [w15-17]
    2428:	7d 01 20    	mov.w     #0x17, w13

0000242a <.L28>:
    242a:	61 72 b9    	mul.su    w14, #0x1, w4
    242c:	61 2b b9    	mul.su    w5, #0x1, w6
    242e:	08 00 be    	mov.d     w8, w0
    2430:	0a 01 be    	mov.d     w10, w2
    2432:	33 02 07    	rcall     0x289a <___udivdi3>
    2434:	0d 00 37    	bra       0x2450 <.L49>

00002436 <.L30>:
    2436:	61 72 b9    	mul.su    w14, #0x1, w4
    2438:	61 2b b9    	mul.su    w5, #0x1, w6
    243a:	08 00 be    	mov.d     w8, w0
    243c:	0a 01 be    	mov.d     w10, w2
    243e:	38 02 07    	rcall     0x28b0 <___divdi3>
    2440:	8d 06 e9    	dec.w     w13, w13
    2442:	00 f2 b9    	mul.ss    w14, w0, w4
    2444:	04 04 54    	sub.w     w8, w4, w8
    2446:	8f ba 97    	mov.w     [w15-16], w5
    2448:	65 42 7c    	mov.b     [w5+w8], w4
    244a:	85 fd 2f    	mov.w     #0xffd8, w5
    244c:	8f 82 42    	add.w     w5, w15, w5
    244e:	84 f2 7e    	mov.b     w4, [w5+w13]

00002450 <.L49>:
    2450:	00 9e be    	mov.d     w0, [w12++]
    2452:	02 96 be    	mov.d     w2, [w12--]
    2454:	3c 04 be    	mov.d     [w12++], w8
    2456:	2c 05 be    	mov.d     [w12--], w10
    2458:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    245a:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    245c:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    245e:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    2460:	02 00 34    	bra       LE, 0x2466 <.L11>
    2462:	0d 00 e0    	cp0.w     w13
    2464:	e8 ff 3c    	bra       GT, 0x2436 <.L30>

00002466 <.L11>:
    2466:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    2468:	10 00 3a    	bra       NZ, 0x248a <.L31>
    246a:	0c 10 90    	mov.w     [w12+32], w0
    246c:	00 38 a3    	btst.z    w0, #0x3
    246e:	0d 00 32    	bra       Z, 0x248a <.L31>
    2470:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    2472:	06 00 3e    	bra       GTU, 0x2480 <.L32>
    2474:	85 fd 2f    	mov.w     #0xffd8, w5
    2476:	8f 82 42    	add.w     w5, w15, w5
    2478:	e5 c0 7e    	mov.b     [w5+w13], w1
    247a:	00 c3 b3    	mov.b     #0x30, w0
    247c:	80 cf 50    	sub.b     w1, w0, [w15]
    247e:	05 00 32    	bra       Z, 0x248a <.L31>

00002480 <.L32>:
    2480:	8d 06 e9    	dec.w     w13, w13
    2482:	02 c3 b3    	mov.b     #0x30, w2
    2484:	81 fd 2f    	mov.w     #0xffd8, w1
    2486:	8f 80 40    	add.w     w1, w15, w1
    2488:	82 f0 7e    	mov.b     w2, [w1+w13]

0000248a <.L31>:
    248a:	78 81 16    	subr.w    w13, #0x18, w2
    248c:	12 0e 98    	mov.w     w2, [w12+18]
    248e:	6c 00 90    	mov.w     [w12+12], w0
    2490:	83 fd 2f    	mov.w     #0xffd8, w3
    2492:	8f 81 41    	add.w     w3, w15, w3
    2494:	8d 80 41    	add.w     w3, w13, w1
    2496:	2c f9 07    	rcall     0x16f0 <_memcpy>
    2498:	1c 08 90    	mov.w     [w12+18], w0
    249a:	dc 08 90    	mov.w     [w12+26], w1
    249c:	81 0f 50    	sub.w     w0, w1, [w15]
    249e:	06 00 3d    	bra       GE, 0x24ac <.L33>
    24a0:	00 80 50    	sub.w     w1, w0, w0
    24a2:	00 0e 98    	mov.w     w0, [w12+16]
    24a4:	0c 10 90    	mov.w     [w12+32], w0
    24a6:	00 40 a1    	bclr.w    w0, #0x4
    24a8:	00 16 98    	mov.w     w0, [w12+32]
    24aa:	0f 00 37    	bra       0x24ca <.L1>

000024ac <.L33>:
    24ac:	01 00 e0    	cp0.w     w1
    24ae:	0d 00 3d    	bra       GE, 0x24ca <.L1>
    24b0:	8c 10 90    	mov.w     [w12+32], w1
    24b2:	f4 80 60    	and.w     w1, #0x14, w1
    24b4:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    24b6:	09 00 3a    	bra       NZ, 0x24ca <.L1>
    24b8:	7c 09 90    	mov.w     [w12+30], w2
    24ba:	fc 00 90    	mov.w     [w12+14], w1
    24bc:	81 00 51    	sub.w     w2, w1, w1
    24be:	0c 09 90    	mov.w     [w12+16], w2
    24c0:	82 80 50    	sub.w     w1, w2, w1
    24c2:	00 80 50    	sub.w     w1, w0, w0
    24c4:	42 40 a9    	bclr.b    0x42, #0x2
    24c6:	01 00 34    	bra       LE, 0x24ca <.L1>
    24c8:	00 0e 98    	mov.w     w0, [w12+16]

000024ca <.L1>:
    24ca:	4f 07 78    	mov.w     [--w15], w14
    24cc:	4f 06 be    	mov.d     [--w15], w12
    24ce:	4f 05 be    	mov.d     [--w15], w10
    24d0:	4f 04 be    	mov.d     [--w15], w8
    24d2:	cf 01 b1    	sub.w     #0x1c, w15
    24d4:	00 00 06    	return    

000024d6 <__Puttxt>:
    24d6:	04 00 fa    	lnk       #0x4
    24d8:	88 9f be    	mov.d     w8, [w15++]
    24da:	8a 9f be    	mov.d     w10, [w15++]
    24dc:	8c 1f 78    	mov.w     w12, [w15++]
    24de:	00 04 78    	mov.w     w0, w8
    24e0:	01 06 78    	mov.w     w1, w12
    24e2:	f8 0d 90    	mov.w     [w8+30], w11
    24e4:	78 00 90    	mov.w     [w8+14], w0
    24e6:	80 85 55    	sub.w     w11, w0, w11
    24e8:	08 08 90    	mov.w     [w8+16], w0
    24ea:	80 85 55    	sub.w     w11, w0, w11
    24ec:	18 08 90    	mov.w     [w8+18], w0
    24ee:	80 85 55    	sub.w     w11, w0, w11
    24f0:	28 08 90    	mov.w     [w8+20], w0
    24f2:	80 85 55    	sub.w     w11, w0, w11
    24f4:	38 08 90    	mov.w     [w8+22], w0
    24f6:	80 85 55    	sub.w     w11, w0, w11
    24f8:	48 08 90    	mov.w     [w8+24], w0
    24fa:	80 85 55    	sub.w     w11, w0, w11
    24fc:	00 02 22    	mov.w     #0x2020, w0
    24fe:	90 bf 9f    	mov.w     w0, [w15-14]
    2500:	00 03 23    	mov.w     #0x3030, w0
    2502:	a0 bf 9f    	mov.w     w0, [w15-12]
    2504:	08 10 90    	mov.w     [w8+32], w0
    2506:	00 28 a3    	btst.z    w0, #0x2
    2508:	15 00 3a    	bra       NZ, 0x2534 <.L2>
    250a:	0b 00 e0    	cp0.w     w11
    250c:	13 00 34    	bra       LE, 0x2534 <.L2>
    250e:	0b 05 78    	mov.w     w11, w10

00002510 <.L5>:
    2510:	8a 04 78    	mov.w     w10, w9
    2512:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    2514:	01 00 36    	bra       LEU, 0x2518 <.L3>
    2516:	29 00 20    	mov.w     #0x2, w9

00002518 <.L3>:
    2518:	c8 01 90    	mov.w     [w8+8], w3
    251a:	09 01 78    	mov.w     w9, w2
    251c:	ee 80 57    	sub.w     w15, #0xe, w1
    251e:	58 00 90    	mov.w     [w8+10], w0
    2520:	03 00 01    	call      w3
    2522:	50 04 98    	mov.w     w0, [w8+10]
    2524:	00 00 e0    	cp0.w     w0
    2526:	8c 00 32    	bra       Z, 0x2640 <.L29>
    2528:	68 08 90    	mov.w     [w8+28], w0
    252a:	09 00 40    	add.w     w0, w9, w0
    252c:	60 0c 98    	mov.w     w0, [w8+28]
    252e:	09 05 55    	sub.w     w10, w9, w10
    2530:	42 40 a9    	bclr.b    0x42, #0x2
    2532:	ee ff 3c    	bra       GT, 0x2510 <.L5>

00002534 <.L2>:
    2534:	78 01 90    	mov.w     [w8+14], w2
    2536:	02 00 e0    	cp0.w     w2
    2538:	0c 00 34    	bra       LE, 0x2552 <.L6>
    253a:	c8 01 90    	mov.w     [w8+8], w3
    253c:	8c 00 78    	mov.w     w12, w1
    253e:	58 00 90    	mov.w     [w8+10], w0
    2540:	03 00 01    	call      w3
    2542:	50 04 98    	mov.w     w0, [w8+10]
    2544:	80 80 eb    	setm.w    w1
    2546:	00 00 e0    	cp0.w     w0
    2548:	7c 00 32    	bra       Z, 0x2642 <.L4>
    254a:	e8 08 90    	mov.w     [w8+28], w1
    254c:	78 00 90    	mov.w     [w8+14], w0
    254e:	00 80 40    	add.w     w1, w0, w0
    2550:	60 0c 98    	mov.w     w0, [w8+28]

00002552 <.L6>:
    2552:	88 0c 90    	mov.w     [w8+16], w9

00002554 <.L30>:
    2554:	09 00 e0    	cp0.w     w9
    2556:	11 00 34    	bra       LE, 0x257a <.L7>
    2558:	09 05 78    	mov.w     w9, w10
    255a:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    255c:	01 00 36    	bra       LEU, 0x2560 <.L8>
    255e:	2a 00 20    	mov.w     #0x2, w10

00002560 <.L8>:
    2560:	c8 01 90    	mov.w     [w8+8], w3
    2562:	0a 01 78    	mov.w     w10, w2
    2564:	ec 80 57    	sub.w     w15, #0xc, w1
    2566:	58 00 90    	mov.w     [w8+10], w0
    2568:	03 00 01    	call      w3
    256a:	50 04 98    	mov.w     w0, [w8+10]
    256c:	00 00 e0    	cp0.w     w0
    256e:	68 00 32    	bra       Z, 0x2640 <.L29>
    2570:	68 08 90    	mov.w     [w8+28], w0
    2572:	0a 00 40    	add.w     w0, w10, w0
    2574:	60 0c 98    	mov.w     w0, [w8+28]
    2576:	8a 84 54    	sub.w     w9, w10, w9
    2578:	ed ff 37    	bra       0x2554 <.L30>

0000257a <.L7>:
    257a:	18 09 90    	mov.w     [w8+18], w2
    257c:	02 00 e0    	cp0.w     w2
    257e:	0c 00 34    	bra       LE, 0x2598 <.L10>
    2580:	c8 01 90    	mov.w     [w8+8], w3
    2582:	e8 00 90    	mov.w     [w8+12], w1
    2584:	58 00 90    	mov.w     [w8+10], w0
    2586:	03 00 01    	call      w3
    2588:	50 04 98    	mov.w     w0, [w8+10]
    258a:	80 80 eb    	setm.w    w1
    258c:	00 00 e0    	cp0.w     w0
    258e:	59 00 32    	bra       Z, 0x2642 <.L4>
    2590:	e8 08 90    	mov.w     [w8+28], w1
    2592:	18 08 90    	mov.w     [w8+18], w0
    2594:	00 80 40    	add.w     w1, w0, w0
    2596:	60 0c 98    	mov.w     w0, [w8+28]

00002598 <.L10>:
    2598:	a8 0c 90    	mov.w     [w8+20], w9

0000259a <.L31>:
    259a:	09 00 e0    	cp0.w     w9
    259c:	11 00 34    	bra       LE, 0x25c0 <.L11>
    259e:	09 05 78    	mov.w     w9, w10
    25a0:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    25a2:	01 00 36    	bra       LEU, 0x25a6 <.L12>
    25a4:	2a 00 20    	mov.w     #0x2, w10

000025a6 <.L12>:
    25a6:	c8 01 90    	mov.w     [w8+8], w3
    25a8:	0a 01 78    	mov.w     w10, w2
    25aa:	ec 80 57    	sub.w     w15, #0xc, w1
    25ac:	58 00 90    	mov.w     [w8+10], w0
    25ae:	03 00 01    	call      w3
    25b0:	50 04 98    	mov.w     w0, [w8+10]
    25b2:	00 00 e0    	cp0.w     w0
    25b4:	45 00 32    	bra       Z, 0x2640 <.L29>
    25b6:	68 08 90    	mov.w     [w8+28], w0
    25b8:	0a 00 40    	add.w     w0, w10, w0
    25ba:	60 0c 98    	mov.w     w0, [w8+28]
    25bc:	8a 84 54    	sub.w     w9, w10, w9
    25be:	ed ff 37    	bra       0x259a <.L31>

000025c0 <.L11>:
    25c0:	38 09 90    	mov.w     [w8+22], w2
    25c2:	02 00 e0    	cp0.w     w2
    25c4:	0e 00 34    	bra       LE, 0x25e2 <.L14>
    25c6:	e8 00 90    	mov.w     [w8+12], w1
    25c8:	18 08 90    	mov.w     [w8+18], w0
    25ca:	80 80 40    	add.w     w1, w0, w1
    25cc:	c8 01 90    	mov.w     [w8+8], w3
    25ce:	58 00 90    	mov.w     [w8+10], w0
    25d0:	03 00 01    	call      w3
    25d2:	50 04 98    	mov.w     w0, [w8+10]
    25d4:	80 80 eb    	setm.w    w1
    25d6:	00 00 e0    	cp0.w     w0
    25d8:	34 00 32    	bra       Z, 0x2642 <.L4>
    25da:	e8 08 90    	mov.w     [w8+28], w1
    25dc:	38 08 90    	mov.w     [w8+22], w0
    25de:	00 80 40    	add.w     w1, w0, w0
    25e0:	60 0c 98    	mov.w     w0, [w8+28]

000025e2 <.L14>:
    25e2:	c8 0c 90    	mov.w     [w8+24], w9

000025e4 <.L32>:
    25e4:	09 00 e0    	cp0.w     w9
    25e6:	11 00 34    	bra       LE, 0x260a <.L15>
    25e8:	09 05 78    	mov.w     w9, w10
    25ea:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    25ec:	01 00 36    	bra       LEU, 0x25f0 <.L16>
    25ee:	2a 00 20    	mov.w     #0x2, w10

000025f0 <.L16>:
    25f0:	c8 01 90    	mov.w     [w8+8], w3
    25f2:	0a 01 78    	mov.w     w10, w2
    25f4:	ec 80 57    	sub.w     w15, #0xc, w1
    25f6:	58 00 90    	mov.w     [w8+10], w0
    25f8:	03 00 01    	call      w3
    25fa:	50 04 98    	mov.w     w0, [w8+10]
    25fc:	00 00 e0    	cp0.w     w0
    25fe:	20 00 32    	bra       Z, 0x2640 <.L29>
    2600:	68 08 90    	mov.w     [w8+28], w0
    2602:	0a 00 40    	add.w     w0, w10, w0
    2604:	60 0c 98    	mov.w     w0, [w8+28]
    2606:	8a 84 54    	sub.w     w9, w10, w9
    2608:	ed ff 37    	bra       0x25e4 <.L32>

0000260a <.L15>:
    260a:	08 10 90    	mov.w     [w8+32], w0
    260c:	80 00 eb    	clr.w     w1
    260e:	00 28 a3    	btst.z    w0, #0x2
    2610:	18 00 32    	bra       Z, 0x2642 <.L4>
    2612:	0b 00 e0    	cp0.w     w11
    2614:	16 00 34    	bra       LE, 0x2642 <.L4>
    2616:	8b 04 78    	mov.w     w11, w9

00002618 <.L19>:
    2618:	09 05 78    	mov.w     w9, w10
    261a:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    261c:	01 00 36    	bra       LEU, 0x2620 <.L18>
    261e:	2a 00 20    	mov.w     #0x2, w10

00002620 <.L18>:
    2620:	c8 01 90    	mov.w     [w8+8], w3
    2622:	0a 01 78    	mov.w     w10, w2
    2624:	ee 80 57    	sub.w     w15, #0xe, w1
    2626:	58 00 90    	mov.w     [w8+10], w0
    2628:	03 00 01    	call      w3
    262a:	50 04 98    	mov.w     w0, [w8+10]
    262c:	00 00 e0    	cp0.w     w0
    262e:	08 00 32    	bra       Z, 0x2640 <.L29>
    2630:	68 08 90    	mov.w     [w8+28], w0
    2632:	0a 00 40    	add.w     w0, w10, w0
    2634:	60 0c 98    	mov.w     w0, [w8+28]
    2636:	8a 84 54    	sub.w     w9, w10, w9
    2638:	42 40 a9    	bclr.b    0x42, #0x2
    263a:	ee ff 3c    	bra       GT, 0x2618 <.L19>
    263c:	80 00 eb    	clr.w     w1
    263e:	01 00 37    	bra       0x2642 <.L4>

00002640 <.L29>:
    2640:	80 80 eb    	setm.w    w1

00002642 <.L4>:
    2642:	01 00 78    	mov.w     w1, w0
    2644:	4f 06 78    	mov.w     [--w15], w12
    2646:	4f 05 be    	mov.d     [--w15], w10
    2648:	4f 04 be    	mov.d     [--w15], w8
    264a:	00 80 fa    	ulnk      
    264c:	00 00 06    	return    

0000264e <__Vacopy>:
    264e:	01 08 78    	mov.w     w1, [w0]
    2650:	00 00 06    	return    

00002652 <_closeallreg>:
    2652:	80 6f 22    	mov.w     #0x26f8, w0
    2654:	61 00 37    	bra       0x2718 <__Atexit>

00002656 <__Closreg>:
    2656:	88 1f 78    	mov.w     w8, [w15++]
    2658:	a8 65 22    	mov.w     #0x265a, w8
    265a:	18 04 e0    	cp0.b     [w8]
    265c:	03 00 3a    	bra       NZ, 0x2664 <.L2>
    265e:	f9 ff 07    	rcall     0x2652 <_closeallreg>
    2660:	20 c0 b3    	mov.b     #0x2, w0
    2662:	00 4c 78    	mov.b     w0, [w8]

00002664 <.L2>:
    2664:	4f 04 78    	mov.w     [--w15], w8
    2666:	00 00 06    	return    

00002668 <_fclose>:
    2668:	88 9f be    	mov.d     w8, [w15++]
    266a:	00 04 78    	mov.w     w0, w8
    266c:	08 00 78    	mov.w     w8, w0
    266e:	8e fc 07    	rcall     0x1f8c <__DNKfflush>
    2670:	80 04 78    	mov.w     w0, w9
    2672:	00 04 20    	mov.w     #0x40, w0
    2674:	18 00 60    	and.w     w0, [w8], w0
    2676:	02 00 32    	bra       Z, 0x267c <.L5>
    2678:	28 00 90    	mov.w     [w8+4], w0
    267a:	0b fd 07    	rcall     0x2092 <_free>

0000267c <.L5>:
    267c:	00 00 eb    	clr.w     w0
    267e:	20 04 98    	mov.w     w0, [w8+4]
    2680:	38 40 90    	mov.b     [w8+3], w0
    2682:	00 04 e0    	cp0.b     w0
    2684:	05 00 35    	bra       LT, 0x2690 <.L6>
    2686:	00 00 fb    	se        w0, w0
    2688:	d2 f5 07    	rcall     0x122e <_close>
    268a:	00 00 e0    	cp0.w     w0
    268c:	01 00 32    	bra       Z, 0x2690 <.L6>
    268e:	80 84 eb    	setm.w    w9

00002690 <.L6>:
    2690:	18 10 90    	mov.w     [w8+34], w0
    2692:	00 00 e0    	cp0.w     w0
    2694:	08 00 32    	bra       Z, 0x26a6 <.L7>
    2696:	d4 f5 07    	rcall     0x1240 <_remove>
    2698:	00 00 e0    	cp0.w     w0
    269a:	01 00 32    	bra       Z, 0x269e <.L8>
    269c:	80 84 eb    	setm.w    w9

0000269e <.L8>:
    269e:	18 10 90    	mov.w     [w8+34], w0
    26a0:	f8 fc 07    	rcall     0x2092 <_free>
    26a2:	00 00 eb    	clr.w     w0
    26a4:	10 14 98    	mov.w     w0, [w8+34]

000026a6 <.L7>:
    26a6:	00 08 20    	mov.w     #0x80, w0
    26a8:	18 00 60    	and.w     w0, [w8], w0
    26aa:	15 00 32    	bra       Z, 0x26d6 <.L9>
    26ac:	00 01 eb    	clr.w     w2
    26ae:	60 00 b8    	mul.uu    w0, #0x0, w0

000026b0 <.L12>:
    26b0:	83 44 22    	mov.w     #0x2448, w3
    26b2:	02 02 d0    	sl.w      w2, w4
    26b4:	63 02 7a    	mov.w     [w3+w4], w4
    26b6:	88 0f 52    	sub.w     w4, w8, [w15]
    26b8:	05 00 3a    	bra       NZ, 0x26c4 <.L10>
    26ba:	00 00 40    	add.w     w0, w0, w0
    26bc:	81 80 48    	addc.w    w1, w1, w1
    26be:	00 80 41    	add.w     w3, w0, w0
    26c0:	00 08 eb    	clr.w     [w0]
    26c2:	06 00 37    	bra       0x26d0 <.L11>

000026c4 <.L10>:
    26c4:	61 00 40    	add.w     w0, #0x1, w0
    26c6:	e0 80 48    	addc.w    w1, #0x0, w1
    26c8:	02 01 e8    	inc.w     w2, w2
    26ca:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    26cc:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    26ce:	f0 ff 3a    	bra       NZ, 0x26b0 <.L12>

000026d0 <.L11>:
    26d0:	08 00 78    	mov.w     w8, w0
    26d2:	df fc 07    	rcall     0x2092 <_free>
    26d4:	0e 00 37    	bra       0x26f2 <.L13>

000026d6 <.L9>:
    26d6:	00 0c 78    	mov.w     w0, [w8]
    26d8:	00 c0 eb    	setm.b    w0
    26da:	30 44 98    	mov.b     w0, [w8+3]
    26dc:	60 02 20    	mov.w     #0x26, w0
    26de:	08 00 40    	add.w     w0, w8, w0
    26e0:	20 04 98    	mov.w     w0, [w8+4]
    26e2:	40 04 98    	mov.w     w0, [w8+8]
    26e4:	50 04 98    	mov.w     w0, [w8+10]
    26e6:	40 0c 98    	mov.w     w0, [w8+24]
    26e8:	60 04 98    	mov.w     w0, [w8+12]
    26ea:	50 0c 98    	mov.w     w0, [w8+26]
    26ec:	70 04 98    	mov.w     w0, [w8+14]
    26ee:	76 00 44    	add.w     w8, #0x16, w0
    26f0:	00 0c 98    	mov.w     w0, [w8+16]

000026f2 <.L13>:
    26f2:	09 00 78    	mov.w     w9, w0
    26f4:	4f 04 be    	mov.d     [--w15], w8
    26f6:	00 00 06    	return    

000026f8 <_closeall>:
    26f8:	88 1f 78    	mov.w     w8, [w15++]
    26fa:	00 04 eb    	clr.w     w8

000026fc <.L18>:
    26fc:	61 40 b8    	mul.uu    w8, #0x1, w0
    26fe:	e2 ff 2f    	mov.w     #0xfffe, w2
    2700:	f3 ff 2f    	mov.w     #0xffff, w3
    2702:	2c 00 07    	rcall     0x275c <___mulp32eds3>
    2704:	62 45 22    	mov.w     #0x2456, w2
    2706:	62 00 78    	mov.w     [w2+w0], w0
    2708:	00 00 e0    	cp0.w     w0
    270a:	01 00 32    	bra       Z, 0x270e <.L17>
    270c:	ad ff 07    	rcall     0x2668 <_fclose>

0000270e <.L17>:
    270e:	08 04 e8    	inc.w     w8, w8
    2710:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    2712:	f4 ff 3a    	bra       NZ, 0x26fc <.L18>
    2714:	4f 04 78    	mov.w     [--w15], w8
    2716:	00 00 06    	return    

00002718 <__Atexit>:
    2718:	01 00 20    	mov.w     #0x0, w1
    271a:	01 00 e0    	cp0.w     w1
    271c:	08 00 32    	bra       Z, 0x272e <.L1>
    271e:	01 00 80    	mov.w     0x0, w1
    2720:	01 00 e0    	cp0.w     w1
    2722:	05 00 32    	bra       Z, 0x272e <.L1>
    2724:	81 00 e9    	dec.w     w1, w1
    2726:	01 00 88    	mov.w     w1, 0x0
    2728:	81 00 d0    	sl.w      w1, w1
    272a:	02 00 80    	mov.w     0x0, w2
    272c:	00 b1 78    	mov.w     w0, [w2+w1]

0000272e <.L1>:
    272e:	00 00 06    	return    

00002730 <_doclose>:
    2730:	00 c0 da    	.pword 0xdac000
    2732:	00 00 06    	return    

00002734 <_doremove>:
    2734:	00 c0 da    	.pword 0xdac000
    2736:	00 00 06    	return    

00002738 <___divsi3>:
    2738:	83 9f 68    	xor.w     w1, w3, [w15++]
    273a:	01 00 e0    	cp0.w     w1
    273c:	02 00 3d    	bra       GE, 0x2742 <divtestb>
    273e:	60 00 10    	subr.w    w0, #0x0, w0
    2740:	e0 80 18    	subbr.w   w1, #0x0, w1

00002742 <divtestb>:
    2742:	03 00 e0    	cp0.w     w3
    2744:	02 00 3d    	bra       GE, 0x274a <calcquot>
    2746:	60 01 11    	subr.w    w2, #0x0, w2
    2748:	e0 81 19    	subbr.w   w3, #0x0, w3

0000274a <calcquot>:
    274a:	f4 f6 07    	rcall     0x1534 <___udivsi3>
    274c:	4f 00 e0    	cp0.w     [--w15]
    274e:	02 00 3b    	bra       NN, 0x2754 <returnq>
    2750:	60 00 10    	subr.w    w0, #0x0, w0
    2752:	e0 80 18    	subbr.w   w1, #0x0, w1

00002754 <returnq>:
    2754:	00 00 06    	return    

00002756 <___umodsi3>:
    2756:	ee f6 07    	rcall     0x1534 <___udivsi3>
    2758:	04 00 be    	mov.d     w4, w0
    275a:	00 00 06    	return    

0000275c <___mulp32eds3>:
    275c:	02 0a b9    	mul.su    w1, w2, w4
    275e:	00 1b b9    	mul.su    w3, w0, w6
    2760:	02 00 b8    	mul.uu    w0, w2, w0
    2762:	81 00 42    	add.w     w4, w1, w1
    2764:	81 00 43    	add.w     w6, w1, w1
    2766:	00 00 06    	return    

00002768 <___PplusBdi>:
    2768:	88 9f be    	mov.d     w8, [w15++]
    276a:	8a 9f be    	mov.d     w10, [w15++]
    276c:	30 04 42    	add.w     w4, [w0++], w8
    276e:	b0 84 4a    	addc.w    w5, [w0++], w9
    2770:	30 05 4b    	addc.w    w6, [w0++], w10
    2772:	90 85 4b    	addc.w    w7, [w0], w11
    2774:	60 00 b1    	sub.w     #0x6, w0
    2776:	08 98 be    	mov.d     w8, [w0++]
    2778:	0a 90 be    	mov.d     w10, [w0--]
    277a:	04 40 e1    	cp.w      w8, w4
    277c:	05 c8 e1    	cpb.w     w9, w5
    277e:	06 d0 e1    	cpb.w     w10, w6
    2780:	07 d8 e1    	cpb.w     w11, w7
    2782:	02 00 31    	bra       C, 0x2788 <.L1>
    2784:	68 00 40    	add.w     w0, #0x8, w0
    2786:	10 08 e8    	inc.w     [w0], [w0]

00002788 <.L1>:
    2788:	4f 05 be    	mov.d     [--w15], w10
    278a:	4f 04 be    	mov.d     [--w15], w8
    278c:	00 00 06    	return    

0000278e <___PminusBdi>:
    278e:	88 9f be    	mov.d     w8, [w15++]
    2790:	8a 9f be    	mov.d     w10, [w15++]
    2792:	30 04 be    	mov.d     [w0++], w8
    2794:	20 05 be    	mov.d     [w0--], w10
    2796:	04 18 54    	sub.w     w8, w4, [w0++]
    2798:	05 98 5c    	subb.w    w9, w5, [w0++]
    279a:	06 18 5d    	subb.w    w10, w6, [w0++]
    279c:	07 98 5d    	subb.w    w11, w7, [w0++]
    279e:	11 00 20    	mov.w     #0x1, w1
    27a0:	04 40 e1    	cp.w      w8, w4
    27a2:	05 c8 e1    	cpb.w     w9, w5
    27a4:	06 d0 e1    	cpb.w     w10, w6
    27a6:	07 d8 e1    	cpb.w     w11, w7
    27a8:	01 00 39    	bra       NC, 0x27ac <.L4>
    27aa:	80 00 eb    	clr.w     w1

000027ac <.L4>:
    27ac:	10 88 10    	subr.w    w1, [w0], [w0]
    27ae:	4f 05 be    	mov.d     [--w15], w10
    27b0:	4f 04 be    	mov.d     [--w15], w8
    27b2:	00 00 06    	return    

000027b4 <___udivmoddi3>:
    27b4:	12 00 fa    	lnk       #0x12
    27b6:	88 9f be    	mov.d     w8, [w15++]
    27b8:	8a 9f be    	mov.d     w10, [w15++]
    27ba:	8c 9f be    	mov.d     w12, [w15++]
    27bc:	e0 b7 9f    	mov.w     w0, [w15-20]
    27be:	f1 b7 9f    	mov.w     w1, [w15-18]
    27c0:	82 bf 9f    	mov.w     w2, [w15-16]
    27c2:	93 bf 9f    	mov.w     w3, [w15-14]
    27c4:	06 05 be    	mov.d     w6, w10
    27c6:	04 04 be    	mov.d     w4, w8
    27c8:	00 00 eb    	clr.w     w0
    27ca:	d0 b7 9f    	mov.w     w0, [w15-22]
    27cc:	c0 b7 9f    	mov.w     w0, [w15-24]
    27ce:	b0 b7 9f    	mov.w     w0, [w15-26]
    27d0:	a0 b7 9f    	mov.w     w0, [w15-28]
    27d2:	90 b7 9f    	mov.w     w0, [w15-30]
    27d4:	00 06 eb    	clr.w     w12

000027d6 <.L9>:
    27d6:	5f b1 97    	mov.w     [w15-22], w2
    27d8:	cf b0 97    	mov.w     [w15-24], w1
    27da:	82 01 41    	add.w     w2, w2, w3
    27dc:	3f b0 97    	mov.w     [w15-26], w0
    27de:	02 00 e0    	cp0.w     w2
    27e0:	04 00 3d    	bra       GE, 0x27ea <.L6>
    27e2:	37 00 07    	rcall     0x2852 <.LPA0>
    27e4:	7e 80 57    	sub.w     w15, #0x1e, w0
    27e6:	c0 ff 07    	rcall     0x2768 <___PplusBdi>
    27e8:	03 00 37    	bra       0x27f0 <.L7>

000027ea <.L6>:
    27ea:	33 00 07    	rcall     0x2852 <.LPA0>
    27ec:	7e 80 57    	sub.w     w15, #0x1e, w0
    27ee:	cf ff 07    	rcall     0x278e <___PminusBdi>

000027f0 <.L7>:
    27f0:	df b6 97    	mov.w     [w15-22], w13
    27f2:	0d 00 e0    	cp0.w     w13
    27f4:	0c 00 35    	bra       LT, 0x280e <.L8>
    27f6:	6f b2 97    	mov.w     [w15-20], w4
    27f8:	ff b2 97    	mov.w     [w15-18], w5
    27fa:	0f bb 97    	mov.w     [w15-16], w6
    27fc:	9f bb 97    	mov.w     [w15-14], w7
    27fe:	10 00 20    	mov.w     #0x1, w0
    2800:	01 00 20    	mov.w     #0x0, w1
    2802:	60 11 b8    	mul.uu    w2, #0x0, w2
    2804:	00 02 72    	ior.w     w4, w0, w4
    2806:	81 82 72    	ior.w     w5, w1, w5
    2808:	02 03 73    	ior.w     w6, w2, w6
    280a:	83 83 73    	ior.w     w7, w3, w7
    280c:	1b 00 07    	rcall     0x2844 <L0>

0000280e <.L8>:
    280e:	0c 06 e8    	inc.w     w12, w12
    2810:	01 04 20    	mov.w     #0x40, w1
    2812:	81 0f 56    	sub.w     w12, w1, [w15]
    2814:	e0 ff 3a    	bra       NZ, 0x27d6 <.L9>
    2816:	0d 00 e0    	cp0.w     w13
    2818:	04 00 3d    	bra       GE, 0x2822 <.L10>
    281a:	08 02 be    	mov.d     w8, w4
    281c:	0a 03 be    	mov.d     w10, w6
    281e:	7e 80 57    	sub.w     w15, #0x1e, w0
    2820:	a3 ff 07    	rcall     0x2768 <___PplusBdi>

00002822 <.L10>:
    2822:	5f a8 97    	mov.w     [w15-38], w0
    2824:	00 00 e0    	cp0.w     w0
    2826:	05 00 3a    	bra       NZ, 0x2832 <.L11>
    2828:	1f b2 97    	mov.w     [w15-30], w4
    282a:	af b2 97    	mov.w     [w15-28], w5
    282c:	3f b3 97    	mov.w     [w15-26], w6
    282e:	cf b3 97    	mov.w     [w15-24], w7
    2830:	09 00 07    	rcall     0x2844 <L0>

00002832 <.L11>:
    2832:	6f b0 97    	mov.w     [w15-20], w0
    2834:	ff b0 97    	mov.w     [w15-18], w1
    2836:	0f b9 97    	mov.w     [w15-16], w2
    2838:	9f b9 97    	mov.w     [w15-14], w3
    283a:	4f 06 be    	mov.d     [--w15], w12
    283c:	4f 05 be    	mov.d     [--w15], w10
    283e:	4f 04 be    	mov.d     [--w15], w8
    2840:	00 80 fa    	ulnk      
    2842:	00 00 06    	return    

00002844 <L0>:
    2844:	01 00 07    	rcall     0x2848 <.LPA5>
    2846:	00 00 06    	return    

00002848 <.LPA5>:
    2848:	a4 b7 9f    	mov.w     w4, [w15-28]
    284a:	b5 b7 9f    	mov.w     w5, [w15-26]
    284c:	c6 b7 9f    	mov.w     w6, [w15-24]
    284e:	d7 b7 9f    	mov.w     w7, [w15-22]
    2850:	00 00 06    	return    

00002852 <.LPA0>:
    2852:	4f 09 de    	lsr.w     w1, #0xf, w2
    2854:	82 81 71    	ior.w     w3, w2, w3
    2856:	b3 b7 9f    	mov.w     w3, [w15-26]
    2858:	4f 01 de    	lsr.w     w0, #0xf, w2
    285a:	81 80 40    	add.w     w1, w1, w1
    285c:	82 80 70    	ior.w     w1, w2, w1
    285e:	a1 b7 9f    	mov.w     w1, [w15-28]
    2860:	8f b0 97    	mov.w     [w15-32], w1
    2862:	4f 09 de    	lsr.w     w1, #0xf, w2
    2864:	00 00 40    	add.w     w0, w0, w0
    2866:	02 00 70    	ior.w     w0, w2, w0
    2868:	90 b7 9f    	mov.w     w0, [w15-30]
    286a:	7f a8 97    	mov.w     [w15-34], w0
    286c:	4f 01 de    	lsr.w     w0, #0xf, w2
    286e:	81 80 40    	add.w     w1, w1, w1
    2870:	82 80 70    	ior.w     w1, w2, w1
    2872:	81 b7 9f    	mov.w     w1, [w15-32]
    2874:	0d 00 07    	rcall     0x2890 <.LPA4>
    2876:	4f 3a de    	lsr.w     w7, #0xf, w4
    2878:	00 00 40    	add.w     w0, w0, w0
    287a:	04 00 70    	ior.w     w0, w4, w0
    287c:	f0 af 9f    	mov.w     w0, [w15-34]
    287e:	08 00 07    	rcall     0x2890 <.LPA4>
    2880:	04 02 42    	add.w     w4, w4, w4
    2882:	85 82 4a    	addc.w    w5, w5, w5
    2884:	06 03 4b    	addc.w    w6, w6, w6
    2886:	87 83 4b    	addc.w    w7, w7, w7
    2888:	df ff 07    	rcall     0x2848 <.LPA5>
    288a:	08 02 be    	mov.d     w8, w4
    288c:	0a 03 be    	mov.d     w10, w6
    288e:	00 00 06    	return    

00002890 <.LPA4>:
    2890:	2f b2 97    	mov.w     [w15-28], w4
    2892:	bf b2 97    	mov.w     [w15-26], w5
    2894:	4f b3 97    	mov.w     [w15-24], w6
    2896:	df b3 97    	mov.w     [w15-22], w7
    2898:	00 00 06    	return    

0000289a <___udivdi3>:
    289a:	88 1f 78    	mov.w     w8, [w15++]
    289c:	18 00 20    	mov.w     #0x1, w8
    289e:	88 1f 78    	mov.w     w8, [w15++]
    28a0:	89 ff 07    	rcall     0x27b4 <___udivmoddi3>
    28a2:	8f 87 e9    	dec2.w    w15, w15
    28a4:	4f 04 78    	mov.w     [--w15], w8
    28a6:	00 00 06    	return    

000028a8 <___umoddi3>:
    28a8:	80 1f eb    	clr.w     [w15++]
    28aa:	84 ff 07    	rcall     0x27b4 <___udivmoddi3>
    28ac:	8f 87 e9    	dec2.w    w15, w15
    28ae:	00 00 06    	return    

000028b0 <___divdi3>:
    28b0:	88 9f be    	mov.d     w8, [w15++]
    28b2:	8a 9f be    	mov.d     w10, [w15++]
    28b4:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    28b6:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    28b8:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    28ba:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    28bc:	0c 00 3d    	bra       GE, 0x28d6 <.L15>
    28be:	60 44 b8    	mul.uu    w8, #0x0, w8
    28c0:	60 55 b8    	mul.uu    w10, #0x0, w10
    28c2:	00 00 54    	sub.w     w8, w0, w0
    28c4:	81 80 5c    	subb.w    w9, w1, w1
    28c6:	02 01 5d    	subb.w    w10, w2, w2
    28c8:	83 81 5d    	subb.w    w11, w3, w3
    28ca:	18 00 20    	mov.w     #0x1, w8
    28cc:	15 00 07    	rcall     0x28f8 <L0>
    28ce:	08 00 3d    	bra       GE, 0x28e0 <.L16>
    28d0:	18 00 07    	rcall     0x2902 <.LPA1>
    28d2:	00 04 eb    	clr.w     w8
    28d4:	05 00 37    	bra       0x28e0 <.L16>

000028d6 <.L15>:
    28d6:	00 04 eb    	clr.w     w8
    28d8:	0f 00 07    	rcall     0x28f8 <L0>
    28da:	02 00 3d    	bra       GE, 0x28e0 <.L16>
    28dc:	12 00 07    	rcall     0x2902 <.LPA1>
    28de:	18 00 20    	mov.w     #0x1, w8

000028e0 <.L16>:
    28e0:	dc ff 07    	rcall     0x289a <___udivdi3>
    28e2:	08 00 e0    	cp0.w     w8
    28e4:	06 00 32    	bra       Z, 0x28f2 <.L17>
    28e6:	60 22 b8    	mul.uu    w4, #0x0, w4
    28e8:	60 33 b8    	mul.uu    w6, #0x0, w6
    28ea:	00 00 52    	sub.w     w4, w0, w0
    28ec:	81 80 5a    	subb.w    w5, w1, w1
    28ee:	02 01 5b    	subb.w    w6, w2, w2
    28f0:	83 81 5b    	subb.w    w7, w3, w3

000028f2 <.L17>:
    28f2:	4f 05 be    	mov.d     [--w15], w10
    28f4:	4f 04 be    	mov.d     [--w15], w8
    28f6:	00 00 06    	return    

000028f8 <L0>:
    28f8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    28fa:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    28fc:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    28fe:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2900:	00 00 06    	return    

00002902 <.LPA1>:
    2902:	60 44 b8    	mul.uu    w8, #0x0, w8
    2904:	60 55 b8    	mul.uu    w10, #0x0, w10
    2906:	04 02 54    	sub.w     w8, w4, w4
    2908:	85 82 5c    	subb.w    w9, w5, w5
    290a:	06 03 5d    	subb.w    w10, w6, w6
    290c:	87 83 5d    	subb.w    w11, w7, w7
    290e:	00 00 06    	return    

00002910 <___moddi3>:
    2910:	88 9f be    	mov.d     w8, [w15++]
    2912:	8a 9f be    	mov.d     w10, [w15++]
    2914:	8c 1f 78    	mov.w     w12, [w15++]
    2916:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2918:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    291a:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    291c:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    291e:	0d 00 3d    	bra       GE, 0x293a <.L21>
    2920:	60 44 b8    	mul.uu    w8, #0x0, w8
    2922:	60 55 b8    	mul.uu    w10, #0x0, w10
    2924:	00 00 54    	sub.w     w8, w0, w0
    2926:	81 80 5c    	subb.w    w9, w1, w1
    2928:	02 01 5d    	subb.w    w10, w2, w2
    292a:	83 81 5d    	subb.w    w11, w3, w3
    292c:	1c 00 20    	mov.w     #0x1, w12
    292e:	08 20 e1    	cp.w      w4, w8
    2930:	09 a8 e1    	cpb.w     w5, w9
    2932:	0a b0 e1    	cpb.w     w6, w10
    2934:	0b b8 e1    	cpb.w     w7, w11
    2936:	0d 00 3d    	bra       GE, 0x2952 <.L22>
    2938:	08 00 37    	bra       0x294a <.L26>

0000293a <.L21>:
    293a:	00 06 eb    	clr.w     w12
    293c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    293e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2940:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2942:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2944:	06 00 3d    	bra       GE, 0x2952 <.L22>
    2946:	60 44 b8    	mul.uu    w8, #0x0, w8
    2948:	60 55 b8    	mul.uu    w10, #0x0, w10

0000294a <.L26>:
    294a:	04 02 54    	sub.w     w8, w4, w4
    294c:	85 82 5c    	subb.w    w9, w5, w5
    294e:	06 03 5d    	subb.w    w10, w6, w6
    2950:	87 83 5d    	subb.w    w11, w7, w7

00002952 <.L22>:
    2952:	aa ff 07    	rcall     0x28a8 <___umoddi3>
    2954:	0c 00 e0    	cp0.w     w12
    2956:	06 00 32    	bra       Z, 0x2964 <.L23>
    2958:	60 22 b8    	mul.uu    w4, #0x0, w4
    295a:	60 33 b8    	mul.uu    w6, #0x0, w6
    295c:	00 00 52    	sub.w     w4, w0, w0
    295e:	81 80 5a    	subb.w    w5, w1, w1
    2960:	02 01 5b    	subb.w    w6, w2, w2
    2962:	83 81 5b    	subb.w    w7, w3, w3

00002964 <.L23>:
    2964:	4f 06 78    	mov.w     [--w15], w12
    2966:	4f 05 be    	mov.d     [--w15], w10
    2968:	4f 04 be    	mov.d     [--w15], w8
    296a:	00 00 06    	return    

0000296c <___muldi3>:
    296c:	88 9f be    	mov.d     w8, [w15++]
    296e:	8a 9f be    	mov.d     w10, [w15++]
    2970:	8c 1f 78    	mov.w     w12, [w15++]
    2972:	00 06 eb    	clr.w     w12
    2974:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2976:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2978:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    297a:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    297c:	07 00 3d    	bra       GE, 0x298c <.L2>
    297e:	60 44 b8    	mul.uu    w8, #0x0, w8
    2980:	60 55 b8    	mul.uu    w10, #0x0, w10
    2982:	00 00 54    	sub.w     w8, w0, w0
    2984:	81 80 5c    	subb.w    w9, w1, w1
    2986:	02 01 5d    	subb.w    w10, w2, w2
    2988:	83 81 5d    	subb.w    w11, w3, w3
    298a:	1c 00 20    	mov.w     #0x1, w12

0000298c <.L2>:
    298c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    298e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2990:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2992:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2994:	07 00 3d    	bra       GE, 0x29a4 <.L3>
    2996:	60 44 b8    	mul.uu    w8, #0x0, w8
    2998:	60 55 b8    	mul.uu    w10, #0x0, w10
    299a:	04 02 54    	sub.w     w8, w4, w4
    299c:	85 82 5c    	subb.w    w9, w5, w5
    299e:	06 03 5d    	subb.w    w10, w6, w6
    29a0:	87 83 5d    	subb.w    w11, w7, w7
    29a2:	0c 00 a2    	btg.w     w12, #0x0

000029a4 <.L3>:
    29a4:	0c 00 07    	rcall     0x29be <___umuldi3>
    29a6:	0c 00 e0    	cp0.w     w12
    29a8:	06 00 32    	bra       Z, 0x29b6 <.L4>
    29aa:	60 22 b8    	mul.uu    w4, #0x0, w4
    29ac:	60 33 b8    	mul.uu    w6, #0x0, w6
    29ae:	00 00 52    	sub.w     w4, w0, w0
    29b0:	81 80 5a    	subb.w    w5, w1, w1
    29b2:	02 01 5b    	subb.w    w6, w2, w2
    29b4:	83 81 5b    	subb.w    w7, w3, w3

000029b6 <.L4>:
    29b6:	4f 06 78    	mov.w     [--w15], w12
    29b8:	4f 05 be    	mov.d     [--w15], w10
    29ba:	4f 04 be    	mov.d     [--w15], w8
    29bc:	00 00 06    	return    

000029be <___umuldi3>:
    29be:	88 9f be    	mov.d     w8, [w15++]
    29c0:	8a 9f be    	mov.d     w10, [w15++]
    29c2:	8c 9f be    	mov.d     w12, [w15++]
    29c4:	04 04 b8    	mul.uu    w0, w4, w8
    29c6:	05 06 b8    	mul.uu    w0, w5, w12
    29c8:	89 04 46    	add.w     w12, w9, w9
    29ca:	60 85 4e    	addc.w    w13, #0x0, w10
    29cc:	06 06 b8    	mul.uu    w0, w6, w12
    29ce:	0a 05 46    	add.w     w12, w10, w10
    29d0:	e0 85 4e    	addc.w    w13, #0x0, w11
    29d2:	07 06 b8    	mul.uu    w0, w7, w12
    29d4:	8b 05 46    	add.w     w12, w11, w11
    29d6:	04 0e b8    	mul.uu    w1, w4, w12
    29d8:	89 04 46    	add.w     w12, w9, w9
    29da:	0a 85 4e    	addc.w    w13, w10, w10
    29dc:	e0 85 4d    	addc.w    w11, #0x0, w11
    29de:	05 0e b8    	mul.uu    w1, w5, w12
    29e0:	0a 05 46    	add.w     w12, w10, w10
    29e2:	8b 85 4e    	addc.w    w13, w11, w11
    29e4:	06 0e b8    	mul.uu    w1, w6, w12
    29e6:	8b 05 46    	add.w     w12, w11, w11
    29e8:	04 16 b8    	mul.uu    w2, w4, w12
    29ea:	0a 05 46    	add.w     w12, w10, w10
    29ec:	8b 85 4e    	addc.w    w13, w11, w11
    29ee:	05 16 b8    	mul.uu    w2, w5, w12
    29f0:	8b 05 46    	add.w     w12, w11, w11
    29f2:	04 1e b8    	mul.uu    w3, w4, w12
    29f4:	8b 05 46    	add.w     w12, w11, w11
    29f6:	08 00 be    	mov.d     w8, w0
    29f8:	0a 01 be    	mov.d     w10, w2
    29fa:	4f 06 be    	mov.d     [--w15], w12
    29fc:	4f 05 be    	mov.d     [--w15], w10
    29fe:	4f 04 be    	mov.d     [--w15], w8
    2a00:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	3a 38 04    	goto      0x383a <__T1Interrupt>
    1026:	00 00 00 
    1028:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	68 38 04    	goto      0x3868 <__T2Interrupt>
    1032:	00 00 00 
    1034:	96 38 04    	goto      0x3896 <__T3Interrupt>
    1036:	00 00 00 
    1038:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	3c 2c 04    	goto      0x2c3c <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	0e 2c 04    	goto      0x2c0e <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	c4 38 04    	goto      0x38c4 <__T4Interrupt>
    1072:	00 00 00 
    1074:	f2 38 04    	goto      0x38f2 <__T5Interrupt>
    1076:	00 00 00 
    1078:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	98 2c 04    	goto      0x2c98 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	6a 2c 04    	goto      0x2c6a <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	f4 2c 04    	goto      0x2cf4 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	c6 2c 04    	goto      0x2cc6 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	50 2d 04    	goto      0x2d50 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	22 2d 04    	goto      0x2d22 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	b6 57 04    	goto      0x57b6 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000aa02 <.LC0>:
    aa02:	25 30       	.word 0x3025
    aa04:	32 58       	.word 0x5832
    aa06:	00 0a       	.word 0xa00

0000aa07 <.LC1>:
    aa07:	00 00       	.word 0

0000aa09 <.LC2>:
    aa09:	00 00       	.word 0
    aa0b:	00 00       	.word 0
	...

0000aa0e <.LC3>:
    aa0e:	53 54       	.word 0x5453
    aa10:	41 52       	.word 0x5241
    aa12:	54 0a       	.word 0xa54
    aa14:	0d 00       	.word 0xd
Disassembly of section .text:

00002a16 <___putc_nobuffer>:
_PIN AJTX, AJRX;

uint8_t HW_TXBUF[1024], HW_RXBUF[1024];

void __putc_nobuffer(_UART *self, uint8_t ch) {
    2a16:	04 00 fa    	lnk       #0x4
    2a18:	00 0f 78    	mov.w     w0, [w14]
    2a1a:	21 47 98    	mov.b     w1, [w14+2]

00002a1c <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    2a1c:	00 00 00    	nop       

00002a1e <.L2>:
    2a1e:	1e 00 78    	mov.w     [w14], w0
    2a20:	10 00 90    	mov.w     [w0+2], w0
    2a22:	90 00 78    	mov.w     [w0], w1
    2a24:	00 20 20    	mov.w     #0x200, w0
    2a26:	00 80 60    	and.w     w1, w0, w0
    2a28:	00 00 e0    	cp0.w     w0
    2a2a:	f9 ff 3a    	bra       NZ, 0x2a1e <.L2>

00002a2c <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    2a2c:	1e 00 78    	mov.w     [w14], w0
    2a2e:	20 00 90    	mov.w     [w0+4], w0
    2a30:	ae 40 90    	mov.b     [w14+2], w1
    2a32:	81 80 fb    	ze        w1, w1
    2a34:	01 08 78    	mov.w     w1, [w0]

00002a36 <.LSM3>:
}
    2a36:	00 80 fa    	ulnk      
    2a38:	00 00 06    	return    

00002a3a <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    2a3a:	02 00 fa    	lnk       #0x2
    2a3c:	00 0f 78    	mov.w     w0, [w14]

00002a3e <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    2a3e:	00 00 00    	nop       

00002a40 <.L4>:
    2a40:	1e 00 78    	mov.w     [w14], w0
    2a42:	10 00 90    	mov.w     [w0+2], w0
    2a44:	10 00 78    	mov.w     [w0], w0
    2a46:	61 00 60    	and.w     w0, #0x1, w0
    2a48:	00 00 e0    	cp0.w     w0
    2a4a:	fa ff 32    	bra       Z, 0x2a40 <.L4>

00002a4c <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    2a4c:	1e 00 78    	mov.w     [w14], w0
    2a4e:	30 00 90    	mov.w     [w0+6], w0
    2a50:	10 00 78    	mov.w     [w0], w0
    2a52:	00 40 78    	mov.b     w0, w0

00002a54 <.LSM7>:
}
    2a54:	00 80 fa    	ulnk      
    2a56:	00 00 06    	return    

00002a58 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    2a58:	04 00 fa    	lnk       #0x4
    2a5a:	00 0f 78    	mov.w     w0, [w14]
    2a5c:	21 47 98    	mov.b     w1, [w14+2]

00002a5e <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    2a5e:	00 00 00    	nop       

00002a60 <.L6>:
    2a60:	1e 00 78    	mov.w     [w14], w0
    2a62:	d0 10 90    	mov.w     [w0+42], w1
    2a64:	1e 00 78    	mov.w     [w14], w0
    2a66:	20 10 90    	mov.w     [w0+36], w0
    2a68:	80 8f 50    	sub.w     w1, w0, [w15]
    2a6a:	fa ff 32    	bra       Z, 0x2a60 <.L6>

00002a6c <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    2a6c:	ff 3f fc    	disi      #0x3fff

00002a6e <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    2a6e:	1e 00 78    	mov.w     [w14], w0
    2a70:	90 10 90    	mov.w     [w0+34], w1
    2a72:	1e 00 78    	mov.w     [w14], w0
    2a74:	40 10 90    	mov.w     [w0+40], w0
    2a76:	00 80 40    	add.w     w1, w0, w0
    2a78:	ae 40 90    	mov.b     [w14+2], w1
    2a7a:	01 48 78    	mov.b     w1, [w0]

00002a7c <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    2a7c:	1e 00 78    	mov.w     [w14], w0
    2a7e:	40 10 90    	mov.w     [w0+40], w0
    2a80:	80 00 e8    	inc.w     w0, w1
    2a82:	1e 00 78    	mov.w     [w14], w0
    2a84:	20 10 90    	mov.w     [w0+36], w0
    2a86:	00 01 78    	mov.w     w0, w2
    2a88:	11 00 09    	repeat    #0x11
    2a8a:	82 80 d8    	div.uw    w1, w2
    2a8c:	80 00 fd    	exch      w0, w1
    2a8e:	80 00 78    	mov.w     w0, w1
    2a90:	1e 00 78    	mov.w     [w14], w0
    2a92:	41 10 98    	mov.w     w1, [w0+40]

00002a94 <.LSM13>:
    self->TXbuffer.count++;
    2a94:	1e 00 78    	mov.w     [w14], w0
    2a96:	50 10 90    	mov.w     [w0+42], w0
    2a98:	80 00 e8    	inc.w     w0, w1
    2a9a:	1e 00 78    	mov.w     [w14], w0
    2a9c:	51 10 98    	mov.w     w1, [w0+42]

00002a9e <.LSM14>:
    enable_interrupts();
    2a9e:	52 20 ef    	clr.w     0x52

00002aa0 <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    2aa0:	1e 00 78    	mov.w     [w14], w0
    2aa2:	d0 10 90    	mov.w     [w0+42], w1
    2aa4:	1e 00 78    	mov.w     [w14], w0
    2aa6:	30 18 90    	mov.w     [w0+54], w0
    2aa8:	80 8f 50    	sub.w     w1, w0, [w15]
    2aaa:	08 00 39    	bra       NC, 0x2abc <.L5>

00002aac <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    2aac:	1e 00 78    	mov.w     [w14], w0
    2aae:	10 00 90    	mov.w     [w0+2], w0
    2ab0:	9e 00 78    	mov.w     [w14], w1
    2ab2:	91 00 90    	mov.w     [w1+2], w1
    2ab4:	11 01 78    	mov.w     [w1], w2
    2ab6:	01 40 20    	mov.w     #0x400, w1
    2ab8:	82 80 70    	ior.w     w1, w2, w1
    2aba:	01 08 78    	mov.w     w1, [w0]

00002abc <.L5>:
                                                    // transmission
}
    2abc:	00 80 fa    	ulnk      
    2abe:	00 00 06    	return    

00002ac0 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    2ac0:	04 00 fa    	lnk       #0x4
    2ac2:	10 07 98    	mov.w     w0, [w14+2]

00002ac4 <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2ac4:	1e 00 90    	mov.w     [w14+2], w0
    2ac6:	50 00 90    	mov.w     [w0+10], w0
    2ac8:	9e 00 90    	mov.w     [w14+2], w1
    2aca:	d1 00 90    	mov.w     [w1+10], w1
    2acc:	11 01 78    	mov.w     [w1], w2
    2ace:	9e 00 90    	mov.w     [w14+2], w1
    2ad0:	e1 48 90    	mov.b     [w1+14], w1
    2ad2:	81 80 fb    	ze        w1, w1
    2ad4:	13 00 20    	mov.w     #0x1, w3
    2ad6:	81 18 dd    	sl.w      w3, w1, w1
    2ad8:	81 80 ea    	com.w     w1, w1
    2ada:	81 00 61    	and.w     w2, w1, w1
    2adc:	01 08 78    	mov.w     w1, [w0]

00002ade <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    2ade:	1e 00 90    	mov.w     [w14+2], w0
    2ae0:	50 10 90    	mov.w     [w0+42], w0
    2ae2:	00 00 e0    	cp0.w     w0
    2ae4:	27 00 3a    	bra       NZ, 0x2b34 <.L13>

00002ae6 <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    2ae6:	1e 00 90    	mov.w     [w14+2], w0
    2ae8:	10 00 90    	mov.w     [w0+2], w0
    2aea:	9e 00 90    	mov.w     [w14+2], w1
    2aec:	91 00 90    	mov.w     [w1+2], w1
    2aee:	11 01 78    	mov.w     [w1], w2
    2af0:	f1 bf 2f    	mov.w     #0xfbff, w1
    2af2:	81 00 61    	and.w     w2, w1, w1
    2af4:	01 08 78    	mov.w     w1, [w0]

00002af6 <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    2af6:	1f 00 37    	bra       0x2b36 <.L10>

00002af8 <.L12>:
        disable_interrupts();
    2af8:	ff 3f fc    	disi      #0x3fff

00002afa <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    2afa:	1e 00 90    	mov.w     [w14+2], w0
    2afc:	90 10 90    	mov.w     [w0+34], w1
    2afe:	1e 00 90    	mov.w     [w14+2], w0
    2b00:	30 10 90    	mov.w     [w0+38], w0
    2b02:	00 80 40    	add.w     w1, w0, w0
    2b04:	10 4f 78    	mov.b     [w0], [w14]

00002b06 <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    2b06:	1e 00 90    	mov.w     [w14+2], w0
    2b08:	30 10 90    	mov.w     [w0+38], w0
    2b0a:	80 00 e8    	inc.w     w0, w1
    2b0c:	1e 00 90    	mov.w     [w14+2], w0
    2b0e:	20 10 90    	mov.w     [w0+36], w0
    2b10:	00 01 78    	mov.w     w0, w2
    2b12:	11 00 09    	repeat    #0x11
    2b14:	82 80 d8    	div.uw    w1, w2
    2b16:	80 00 fd    	exch      w0, w1
    2b18:	80 00 78    	mov.w     w0, w1
    2b1a:	1e 00 90    	mov.w     [w14+2], w0
    2b1c:	31 10 98    	mov.w     w1, [w0+38]

00002b1e <.LSM26>:
        self->TXbuffer.count--;
    2b1e:	1e 00 90    	mov.w     [w14+2], w0
    2b20:	50 10 90    	mov.w     [w0+42], w0
    2b22:	80 00 e9    	dec.w     w0, w1
    2b24:	1e 00 90    	mov.w     [w14+2], w0
    2b26:	51 10 98    	mov.w     w1, [w0+42]

00002b28 <.LSM27>:
        enable_interrupts();
    2b28:	52 20 ef    	clr.w     0x52

00002b2a <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    2b2a:	1e 00 90    	mov.w     [w14+2], w0
    2b2c:	20 00 90    	mov.w     [w0+4], w0
    2b2e:	9e 80 fb    	ze        [w14], w1
    2b30:	01 08 78    	mov.w     w1, [w0]
    2b32:	01 00 37    	bra       0x2b36 <.L10>

00002b34 <.L13>:
    2b34:	00 00 00    	nop       

00002b36 <.L10>:
    2b36:	1e 00 90    	mov.w     [w14+2], w0
    2b38:	10 00 90    	mov.w     [w0+2], w0
    2b3a:	90 00 78    	mov.w     [w0], w1
    2b3c:	00 20 20    	mov.w     #0x200, w0
    2b3e:	00 80 60    	and.w     w1, w0, w0
    2b40:	00 00 e0    	cp0.w     w0
    2b42:	04 00 3a    	bra       NZ, 0x2b4c <.L8>
    2b44:	1e 00 90    	mov.w     [w14+2], w0
    2b46:	50 10 90    	mov.w     [w0+42], w0
    2b48:	00 00 e0    	cp0.w     w0
    2b4a:	d6 ff 3a    	bra       NZ, 0x2af8 <.L12>

00002b4c <.L8>:
    }
}
    2b4c:	00 80 fa    	ulnk      
    2b4e:	00 00 06    	return    

00002b50 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    2b50:	04 00 fa    	lnk       #0x4
    2b52:	10 07 98    	mov.w     w0, [w14+2]

00002b54 <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    2b54:	00 00 00    	nop       

00002b56 <.L15>:
    2b56:	1e 00 90    	mov.w     [w14+2], w0
    2b58:	20 18 90    	mov.w     [w0+52], w0
    2b5a:	00 00 e0    	cp0.w     w0
    2b5c:	fc ff 32    	bra       Z, 0x2b56 <.L15>

00002b5e <.LSM33>:
    disable_interrupts();
    2b5e:	ff 3f fc    	disi      #0x3fff

00002b60 <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    2b60:	1e 00 90    	mov.w     [w14+2], w0
    2b62:	e0 10 90    	mov.w     [w0+44], w1
    2b64:	1e 00 90    	mov.w     [w14+2], w0
    2b66:	00 18 90    	mov.w     [w0+48], w0
    2b68:	00 80 40    	add.w     w1, w0, w0
    2b6a:	10 4f 78    	mov.b     [w0], [w14]

00002b6c <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    2b6c:	1e 00 90    	mov.w     [w14+2], w0
    2b6e:	00 18 90    	mov.w     [w0+48], w0
    2b70:	80 00 e8    	inc.w     w0, w1
    2b72:	1e 00 90    	mov.w     [w14+2], w0
    2b74:	70 10 90    	mov.w     [w0+46], w0
    2b76:	00 01 78    	mov.w     w0, w2
    2b78:	11 00 09    	repeat    #0x11
    2b7a:	82 80 d8    	div.uw    w1, w2
    2b7c:	80 00 fd    	exch      w0, w1
    2b7e:	80 00 78    	mov.w     w0, w1
    2b80:	1e 00 90    	mov.w     [w14+2], w0
    2b82:	01 18 98    	mov.w     w1, [w0+48]

00002b84 <.LSM36>:
    self->RXbuffer.count--;
    2b84:	1e 00 90    	mov.w     [w14+2], w0
    2b86:	20 18 90    	mov.w     [w0+52], w0
    2b88:	80 00 e9    	dec.w     w0, w1
    2b8a:	1e 00 90    	mov.w     [w14+2], w0
    2b8c:	21 18 98    	mov.w     w1, [w0+52]

00002b8e <.LSM37>:
    enable_interrupts();
    2b8e:	52 20 ef    	clr.w     0x52

00002b90 <.LSM38>:
    return ch;
    2b90:	1e 40 78    	mov.b     [w14], w0

00002b92 <.LSM39>:
}
    2b92:	00 80 fa    	ulnk      
    2b94:	00 00 06    	return    

00002b96 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    2b96:	02 00 fa    	lnk       #0x2
    2b98:	00 0f 78    	mov.w     w0, [w14]

00002b9a <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2b9a:	1e 00 78    	mov.w     [w14], w0
    2b9c:	50 00 90    	mov.w     [w0+10], w0
    2b9e:	9e 00 78    	mov.w     [w14], w1
    2ba0:	d1 00 90    	mov.w     [w1+10], w1
    2ba2:	11 01 78    	mov.w     [w1], w2
    2ba4:	9e 00 78    	mov.w     [w14], w1
    2ba6:	f1 48 90    	mov.b     [w1+15], w1
    2ba8:	81 80 fb    	ze        w1, w1
    2baa:	13 00 20    	mov.w     #0x1, w3
    2bac:	81 18 dd    	sl.w      w3, w1, w1
    2bae:	81 80 ea    	com.w     w1, w1
    2bb0:	81 00 61    	and.w     w2, w1, w1
    2bb2:	01 08 78    	mov.w     w1, [w0]

00002bb4 <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    2bb4:	1d 00 37    	bra       0x2bf0 <.L17>

00002bb6 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    2bb6:	ff 3f fc    	disi      #0x3fff

00002bb8 <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    2bb8:	1e 00 78    	mov.w     [w14], w0
    2bba:	e0 10 90    	mov.w     [w0+44], w1
    2bbc:	1e 00 78    	mov.w     [w14], w0
    2bbe:	10 18 90    	mov.w     [w0+50], w0
    2bc0:	00 80 40    	add.w     w1, w0, w0
    2bc2:	9e 00 78    	mov.w     [w14], w1
    2bc4:	b1 00 90    	mov.w     [w1+6], w1
    2bc6:	91 00 78    	mov.w     [w1], w1
    2bc8:	81 40 78    	mov.b     w1, w1
    2bca:	01 48 78    	mov.b     w1, [w0]

00002bcc <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    2bcc:	1e 00 78    	mov.w     [w14], w0
    2bce:	10 18 90    	mov.w     [w0+50], w0
    2bd0:	80 00 e8    	inc.w     w0, w1
    2bd2:	1e 00 78    	mov.w     [w14], w0
    2bd4:	70 10 90    	mov.w     [w0+46], w0
    2bd6:	00 01 78    	mov.w     w0, w2
    2bd8:	11 00 09    	repeat    #0x11
    2bda:	82 80 d8    	div.uw    w1, w2
    2bdc:	80 00 fd    	exch      w0, w1
    2bde:	80 00 78    	mov.w     w0, w1
    2be0:	1e 00 78    	mov.w     [w14], w0
    2be2:	11 18 98    	mov.w     w1, [w0+50]

00002be4 <.LSM46>:
        self->RXbuffer.count++;
    2be4:	1e 00 78    	mov.w     [w14], w0
    2be6:	20 18 90    	mov.w     [w0+52], w0
    2be8:	80 00 e8    	inc.w     w0, w1
    2bea:	1e 00 78    	mov.w     [w14], w0
    2bec:	21 18 98    	mov.w     w1, [w0+52]

00002bee <.LSM47>:
        enable_interrupts();
    2bee:	52 20 ef    	clr.w     0x52

00002bf0 <.L17>:
    2bf0:	1e 00 78    	mov.w     [w14], w0
    2bf2:	10 00 90    	mov.w     [w0+2], w0
    2bf4:	10 00 78    	mov.w     [w0], w0
    2bf6:	61 00 60    	and.w     w0, #0x1, w0
    2bf8:	00 40 78    	mov.b     w0, w0
    2bfa:	00 04 e0    	cp0.b     w0
    2bfc:	06 00 32    	bra       Z, 0x2c0a <.L16>

00002bfe <.LSM49>:
    2bfe:	1e 00 78    	mov.w     [w14], w0
    2c00:	a0 18 90    	mov.w     [w0+52], w1
    2c02:	1e 00 78    	mov.w     [w14], w0
    2c04:	70 10 90    	mov.w     [w0+46], w0

00002c06 <.LSM50>:
    2c06:	80 8f 50    	sub.w     w1, w0, [w15]
    2c08:	d6 ff 3a    	bra       NZ, 0x2bb6 <.L19>

00002c0a <.L16>:
    }
}
    2c0a:	00 80 fa    	ulnk      
    2c0c:	00 00 06    	return    

00002c0e <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    2c0e:	36 00 f8    	push      0x36
    2c10:	80 9f be    	mov.d     w0, [w15++]
    2c12:	82 9f be    	mov.d     w2, [w15++]
    2c14:	84 9f be    	mov.d     w4, [w15++]
    2c16:	86 9f be    	mov.d     w6, [w15++]
    2c18:	32 00 f8    	push      0x32
    2c1a:	34 00 f8    	push      0x34
    2c1c:	10 00 20    	mov.w     #0x1, w0
    2c1e:	a0 01 88    	mov.w     w0, 0x34
    2c20:	00 20 20    	mov.w     #0x200, w0
    2c22:	90 01 88    	mov.w     w0, 0x32
    2c24:	00 00 fa    	lnk       #0x0

00002c26 <.LSM53>:
    __serviceTxInterrupt(&uart1);
    2c26:	a0 85 21    	mov.w     #0x185a, w0
    2c28:	4b ff 07    	rcall     0x2ac0 <___serviceTxInterrupt>

00002c2a <.LSM54>:
}
    2c2a:	00 80 fa    	ulnk      
    2c2c:	34 00 f9    	pop       0x34
    2c2e:	32 00 f9    	pop       0x32
    2c30:	4f 03 be    	mov.d     [--w15], w6
    2c32:	4f 02 be    	mov.d     [--w15], w4
    2c34:	4f 01 be    	mov.d     [--w15], w2
    2c36:	4f 00 be    	mov.d     [--w15], w0
    2c38:	36 00 f9    	pop       0x36
    2c3a:	00 40 06    	retfie    

00002c3c <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    2c3c:	36 00 f8    	push      0x36
    2c3e:	80 9f be    	mov.d     w0, [w15++]
    2c40:	82 9f be    	mov.d     w2, [w15++]
    2c42:	84 9f be    	mov.d     w4, [w15++]
    2c44:	86 9f be    	mov.d     w6, [w15++]
    2c46:	32 00 f8    	push      0x32
    2c48:	34 00 f8    	push      0x34
    2c4a:	10 00 20    	mov.w     #0x1, w0
    2c4c:	a0 01 88    	mov.w     w0, 0x34
    2c4e:	00 20 20    	mov.w     #0x200, w0
    2c50:	90 01 88    	mov.w     w0, 0x32
    2c52:	00 00 fa    	lnk       #0x0

00002c54 <.LSM56>:
    __serviceRxInterrupt(&uart1);
    2c54:	a0 85 21    	mov.w     #0x185a, w0
    2c56:	9f ff 07    	rcall     0x2b96 <___serviceRxInterrupt>

00002c58 <.LSM57>:
}
    2c58:	00 80 fa    	ulnk      
    2c5a:	34 00 f9    	pop       0x34
    2c5c:	32 00 f9    	pop       0x32
    2c5e:	4f 03 be    	mov.d     [--w15], w6
    2c60:	4f 02 be    	mov.d     [--w15], w4
    2c62:	4f 01 be    	mov.d     [--w15], w2
    2c64:	4f 00 be    	mov.d     [--w15], w0
    2c66:	36 00 f9    	pop       0x36
    2c68:	00 40 06    	retfie    

00002c6a <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    2c6a:	36 00 f8    	push      0x36
    2c6c:	80 9f be    	mov.d     w0, [w15++]
    2c6e:	82 9f be    	mov.d     w2, [w15++]
    2c70:	84 9f be    	mov.d     w4, [w15++]
    2c72:	86 9f be    	mov.d     w6, [w15++]
    2c74:	32 00 f8    	push      0x32
    2c76:	34 00 f8    	push      0x34
    2c78:	10 00 20    	mov.w     #0x1, w0
    2c7a:	a0 01 88    	mov.w     w0, 0x34
    2c7c:	00 20 20    	mov.w     #0x200, w0
    2c7e:	90 01 88    	mov.w     w0, 0x32
    2c80:	00 00 fa    	lnk       #0x0

00002c82 <.LSM59>:
    __serviceTxInterrupt(&uart2);
    2c82:	60 89 21    	mov.w     #0x1896, w0
    2c84:	1d ff 07    	rcall     0x2ac0 <___serviceTxInterrupt>

00002c86 <.LSM60>:
}
    2c86:	00 80 fa    	ulnk      
    2c88:	34 00 f9    	pop       0x34
    2c8a:	32 00 f9    	pop       0x32
    2c8c:	4f 03 be    	mov.d     [--w15], w6
    2c8e:	4f 02 be    	mov.d     [--w15], w4
    2c90:	4f 01 be    	mov.d     [--w15], w2
    2c92:	4f 00 be    	mov.d     [--w15], w0
    2c94:	36 00 f9    	pop       0x36
    2c96:	00 40 06    	retfie    

00002c98 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2c98:	36 00 f8    	push      0x36
    2c9a:	80 9f be    	mov.d     w0, [w15++]
    2c9c:	82 9f be    	mov.d     w2, [w15++]
    2c9e:	84 9f be    	mov.d     w4, [w15++]
    2ca0:	86 9f be    	mov.d     w6, [w15++]
    2ca2:	32 00 f8    	push      0x32
    2ca4:	34 00 f8    	push      0x34
    2ca6:	10 00 20    	mov.w     #0x1, w0
    2ca8:	a0 01 88    	mov.w     w0, 0x34
    2caa:	00 20 20    	mov.w     #0x200, w0
    2cac:	90 01 88    	mov.w     w0, 0x32
    2cae:	00 00 fa    	lnk       #0x0

00002cb0 <.LSM62>:
    __serviceRxInterrupt(&uart2);
    2cb0:	60 89 21    	mov.w     #0x1896, w0
    2cb2:	71 ff 07    	rcall     0x2b96 <___serviceRxInterrupt>

00002cb4 <.LSM63>:
}
    2cb4:	00 80 fa    	ulnk      
    2cb6:	34 00 f9    	pop       0x34
    2cb8:	32 00 f9    	pop       0x32
    2cba:	4f 03 be    	mov.d     [--w15], w6
    2cbc:	4f 02 be    	mov.d     [--w15], w4
    2cbe:	4f 01 be    	mov.d     [--w15], w2
    2cc0:	4f 00 be    	mov.d     [--w15], w0
    2cc2:	36 00 f9    	pop       0x36
    2cc4:	00 40 06    	retfie    

00002cc6 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    2cc6:	36 00 f8    	push      0x36
    2cc8:	80 9f be    	mov.d     w0, [w15++]
    2cca:	82 9f be    	mov.d     w2, [w15++]
    2ccc:	84 9f be    	mov.d     w4, [w15++]
    2cce:	86 9f be    	mov.d     w6, [w15++]
    2cd0:	32 00 f8    	push      0x32
    2cd2:	34 00 f8    	push      0x34
    2cd4:	10 00 20    	mov.w     #0x1, w0
    2cd6:	a0 01 88    	mov.w     w0, 0x34
    2cd8:	00 20 20    	mov.w     #0x200, w0
    2cda:	90 01 88    	mov.w     w0, 0x32
    2cdc:	00 00 fa    	lnk       #0x0

00002cde <.LSM65>:
    __serviceTxInterrupt(&uart3);
    2cde:	20 8d 21    	mov.w     #0x18d2, w0
    2ce0:	ef fe 07    	rcall     0x2ac0 <___serviceTxInterrupt>

00002ce2 <.LSM66>:
}
    2ce2:	00 80 fa    	ulnk      
    2ce4:	34 00 f9    	pop       0x34
    2ce6:	32 00 f9    	pop       0x32
    2ce8:	4f 03 be    	mov.d     [--w15], w6
    2cea:	4f 02 be    	mov.d     [--w15], w4
    2cec:	4f 01 be    	mov.d     [--w15], w2
    2cee:	4f 00 be    	mov.d     [--w15], w0
    2cf0:	36 00 f9    	pop       0x36
    2cf2:	00 40 06    	retfie    

00002cf4 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    2cf4:	36 00 f8    	push      0x36
    2cf6:	80 9f be    	mov.d     w0, [w15++]
    2cf8:	82 9f be    	mov.d     w2, [w15++]
    2cfa:	84 9f be    	mov.d     w4, [w15++]
    2cfc:	86 9f be    	mov.d     w6, [w15++]
    2cfe:	32 00 f8    	push      0x32
    2d00:	34 00 f8    	push      0x34
    2d02:	10 00 20    	mov.w     #0x1, w0
    2d04:	a0 01 88    	mov.w     w0, 0x34
    2d06:	00 20 20    	mov.w     #0x200, w0
    2d08:	90 01 88    	mov.w     w0, 0x32
    2d0a:	00 00 fa    	lnk       #0x0

00002d0c <.LSM68>:
    __serviceRxInterrupt(&uart3);
    2d0c:	20 8d 21    	mov.w     #0x18d2, w0
    2d0e:	43 ff 07    	rcall     0x2b96 <___serviceRxInterrupt>

00002d10 <.LSM69>:
}
    2d10:	00 80 fa    	ulnk      
    2d12:	34 00 f9    	pop       0x34
    2d14:	32 00 f9    	pop       0x32
    2d16:	4f 03 be    	mov.d     [--w15], w6
    2d18:	4f 02 be    	mov.d     [--w15], w4
    2d1a:	4f 01 be    	mov.d     [--w15], w2
    2d1c:	4f 00 be    	mov.d     [--w15], w0
    2d1e:	36 00 f9    	pop       0x36
    2d20:	00 40 06    	retfie    

00002d22 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    2d22:	36 00 f8    	push      0x36
    2d24:	80 9f be    	mov.d     w0, [w15++]
    2d26:	82 9f be    	mov.d     w2, [w15++]
    2d28:	84 9f be    	mov.d     w4, [w15++]
    2d2a:	86 9f be    	mov.d     w6, [w15++]
    2d2c:	32 00 f8    	push      0x32
    2d2e:	34 00 f8    	push      0x34
    2d30:	10 00 20    	mov.w     #0x1, w0
    2d32:	a0 01 88    	mov.w     w0, 0x34
    2d34:	00 20 20    	mov.w     #0x200, w0
    2d36:	90 01 88    	mov.w     w0, 0x32
    2d38:	00 00 fa    	lnk       #0x0

00002d3a <.LSM71>:
    __serviceTxInterrupt(&uart4);
    2d3a:	e0 90 21    	mov.w     #0x190e, w0
    2d3c:	c1 fe 07    	rcall     0x2ac0 <___serviceTxInterrupt>

00002d3e <.LSM72>:
}
    2d3e:	00 80 fa    	ulnk      
    2d40:	34 00 f9    	pop       0x34
    2d42:	32 00 f9    	pop       0x32
    2d44:	4f 03 be    	mov.d     [--w15], w6
    2d46:	4f 02 be    	mov.d     [--w15], w4
    2d48:	4f 01 be    	mov.d     [--w15], w2
    2d4a:	4f 00 be    	mov.d     [--w15], w0
    2d4c:	36 00 f9    	pop       0x36
    2d4e:	00 40 06    	retfie    

00002d50 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    2d50:	36 00 f8    	push      0x36
    2d52:	80 9f be    	mov.d     w0, [w15++]
    2d54:	82 9f be    	mov.d     w2, [w15++]
    2d56:	84 9f be    	mov.d     w4, [w15++]
    2d58:	86 9f be    	mov.d     w6, [w15++]
    2d5a:	32 00 f8    	push      0x32
    2d5c:	34 00 f8    	push      0x34
    2d5e:	10 00 20    	mov.w     #0x1, w0
    2d60:	a0 01 88    	mov.w     w0, 0x34
    2d62:	00 20 20    	mov.w     #0x200, w0
    2d64:	90 01 88    	mov.w     w0, 0x32
    2d66:	00 00 fa    	lnk       #0x0

00002d68 <.LSM74>:
    __serviceRxInterrupt(&uart4);
    2d68:	e0 90 21    	mov.w     #0x190e, w0
    2d6a:	15 ff 07    	rcall     0x2b96 <___serviceRxInterrupt>

00002d6c <.LSM75>:
}
    2d6c:	00 80 fa    	ulnk      
    2d6e:	34 00 f9    	pop       0x34
    2d70:	32 00 f9    	pop       0x32
    2d72:	4f 03 be    	mov.d     [--w15], w6
    2d74:	4f 02 be    	mov.d     [--w15], w4
    2d76:	4f 01 be    	mov.d     [--w15], w2
    2d78:	4f 00 be    	mov.d     [--w15], w0
    2d7a:	36 00 f9    	pop       0x36
    2d7c:	00 40 06    	retfie    

00002d7e <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2d7e:	08 00 fa    	lnk       #0x8
    2d80:	10 07 98    	mov.w     w0, [w14+2]
    2d82:	21 07 98    	mov.w     w1, [w14+4]
    2d84:	32 07 98    	mov.w     w2, [w14+6]

00002d86 <.LSM77>:
    int16_t i;

    switch (handle) {
    2d86:	1e 00 90    	mov.w     [w14+2], w0
    2d88:	00 00 e0    	cp0.w     w0
    2d8a:	25 00 35    	bra       LT, 0x2dd6 <.L37>
    2d8c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2d8e:	03 00 34    	bra       LE, 0x2d96 <.L30>
    2d90:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2d92:	11 00 32    	bra       Z, 0x2db6 <.L31>

00002d94 <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    2d94:	21 00 37    	bra       0x2dd8 <.L34>

00002d96 <.L30>:
    2d96:	00 00 eb    	clr.w     w0
    2d98:	00 0f 78    	mov.w     w0, [w14]
    2d9a:	08 00 37    	bra       0x2dac <.L32>

00002d9c <.L33>:
    2d9c:	2e 00 90    	mov.w     [w14+4], w0
    2d9e:	90 40 78    	mov.b     [w0], w1
    2da0:	2e 00 90    	mov.w     [w14+4], w0
    2da2:	00 00 e8    	inc.w     w0, w0
    2da4:	20 07 98    	mov.w     w0, [w14+4]
    2da6:	b0 42 80    	mov.w     0x856, w0
    2da8:	4b 04 07    	rcall     0x3640 <_uart_putc>

00002daa <.LSM81>:
    2daa:	1e 0f e8    	inc.w     [w14], [w14]

00002dac <.L32>:
    2dac:	9e 00 78    	mov.w     [w14], w1
    2dae:	3e 00 90    	mov.w     [w14+6], w0
    2db0:	80 8f 50    	sub.w     w1, w0, [w15]
    2db2:	f4 ff 39    	bra       NC, 0x2d9c <.L33>

00002db4 <.LSM82>:
    2db4:	11 00 37    	bra       0x2dd8 <.L34>

00002db6 <.L31>:
    2db6:	00 00 eb    	clr.w     w0
    2db8:	00 0f 78    	mov.w     w0, [w14]
    2dba:	08 00 37    	bra       0x2dcc <.L35>

00002dbc <.L36>:
    2dbc:	2e 00 90    	mov.w     [w14+4], w0
    2dbe:	90 40 78    	mov.b     [w0], w1
    2dc0:	2e 00 90    	mov.w     [w14+4], w0
    2dc2:	00 00 e8    	inc.w     w0, w0
    2dc4:	20 07 98    	mov.w     w0, [w14+4]
    2dc6:	c0 42 80    	mov.w     0x858, w0
    2dc8:	3b 04 07    	rcall     0x3640 <_uart_putc>

00002dca <.LSM85>:
    2dca:	1e 0f e8    	inc.w     [w14], [w14]

00002dcc <.L35>:
    2dcc:	9e 00 78    	mov.w     [w14], w1
    2dce:	3e 00 90    	mov.w     [w14+6], w0
    2dd0:	80 8f 50    	sub.w     w1, w0, [w15]
    2dd2:	f4 ff 39    	bra       NC, 0x2dbc <.L36>

00002dd4 <.LSM86>:
    2dd4:	01 00 37    	bra       0x2dd8 <.L34>

00002dd6 <.L37>:
    2dd6:	00 00 00    	nop       

00002dd8 <.L34>:
    }
    return len;
    2dd8:	3e 00 90    	mov.w     [w14+6], w0

00002dda <.LSM89>:
}
    2dda:	00 80 fa    	ulnk      
    2ddc:	00 00 06    	return    

00002dde <_init_uart>:

void init_uart(void) {
    2dde:	00 00 fa    	lnk       #0x0

00002de0 <.LSM91>:
    init_pin();
    2de0:	ca 07 07    	rcall     0x3d76 <_init_pin>

00002de2 <.LSM92>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2de2:	40 6d 20    	mov.w     #0x6d4, w0
    2de4:	80 1f 78    	mov.w     w0, [w15++]
    2de6:	57 01 20    	mov.w     #0x15, w7
    2de8:	86 c0 b3    	mov.b     #0x8, w6
    2dea:	80 82 eb    	setm.w    w5
    2dec:	64 c0 b3    	mov.b     #0x6, w4
    2dee:	80 01 eb    	clr.w     w3
    2df0:	02 2f 20    	mov.w     #0x2f0, w2
    2df2:	21 2f 20    	mov.w     #0x2f2, w1
    2df4:	a0 94 21    	mov.w     #0x194a, w0
    2df6:	d3 08 07    	rcall     0x3f9e <_pin_init>
    2df8:	8f 87 e9    	dec2.w    w15, w15

00002dfa <.LSM93>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2dfa:	a0 6d 20    	mov.w     #0x6da, w0
    2dfc:	80 1f 78    	mov.w     w0, [w15++]
    2dfe:	a7 01 20    	mov.w     #0x1a, w7
    2e00:	00 43 eb    	clr.b     w6
    2e02:	80 82 eb    	setm.w    w5
    2e04:	74 c0 b3    	mov.b     #0x7, w4
    2e06:	80 01 eb    	clr.w     w3
    2e08:	02 2f 20    	mov.w     #0x2f0, w2
    2e0a:	21 2f 20    	mov.w     #0x2f2, w1
    2e0c:	00 96 21    	mov.w     #0x1960, w0
    2e0e:	c7 08 07    	rcall     0x3f9e <_pin_init>
    2e10:	8f 87 e9    	dec2.w    w15, w15

00002e12 <.LSM94>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    2e12:	40 00 20    	mov.w     #0x4, w0
    2e14:	80 1f 78    	mov.w     w0, [w15++]
    2e16:	30 00 20    	mov.w     #0x3, w0
    2e18:	80 1f 78    	mov.w     w0, [w15++]
    2e1a:	80 c0 b3    	mov.b     #0x8, w0
    2e1c:	80 1f 78    	mov.w     w0, [w15++]
    2e1e:	00 40 eb    	clr.b     w0
    2e20:	80 1f 78    	mov.w     w0, [w15++]
    2e22:	40 6a 20    	mov.w     #0x6a4, w0
    2e24:	80 1f 78    	mov.w     w0, [w15++]
    2e26:	40 6a 20    	mov.w     #0x6a4, w0
    2e28:	80 1f 78    	mov.w     w0, [w15++]
    2e2a:	b0 c0 b3    	mov.b     #0xb, w0
    2e2c:	80 1f 78    	mov.w     w0, [w15++]
    2e2e:	c0 c0 b3    	mov.b     #0xc, w0
    2e30:	80 1f 78    	mov.w     w0, [w15++]
    2e32:	47 09 20    	mov.w     #0x94, w7
    2e34:	46 08 20    	mov.w     #0x84, w6
    2e36:	85 22 20    	mov.w     #0x228, w5
    2e38:	64 22 20    	mov.w     #0x226, w4
    2e3a:	43 22 20    	mov.w     #0x224, w3
    2e3c:	22 22 20    	mov.w     #0x222, w2
    2e3e:	01 22 20    	mov.w     #0x220, w1
    2e40:	a0 85 21    	mov.w     #0x185a, w0
    2e42:	6b 00 07    	rcall     0x2f1a <_uart_init>
    2e44:	f0 87 57    	sub.w     w15, #0x10, w15

00002e46 <.LSM95>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    2e46:	60 00 20    	mov.w     #0x6, w0
    2e48:	80 1f 78    	mov.w     w0, [w15++]
    2e4a:	50 00 20    	mov.w     #0x5, w0
    2e4c:	80 1f 78    	mov.w     w0, [w15++]
    2e4e:	80 c0 b3    	mov.b     #0x8, w0
    2e50:	80 1f 78    	mov.w     w0, [w15++]
    2e52:	00 40 eb    	clr.b     w0
    2e54:	80 1f 78    	mov.w     w0, [w15++]
    2e56:	60 6a 20    	mov.w     #0x6a6, w0
    2e58:	80 1f 78    	mov.w     w0, [w15++]
    2e5a:	60 6a 20    	mov.w     #0x6a6, w0
    2e5c:	80 1f 78    	mov.w     w0, [w15++]
    2e5e:	e0 c0 b3    	mov.b     #0xe, w0
    2e60:	80 1f 78    	mov.w     w0, [w15++]
    2e62:	f0 c0 b3    	mov.b     #0xf, w0
    2e64:	80 1f 78    	mov.w     w0, [w15++]
    2e66:	67 09 20    	mov.w     #0x96, w7
    2e68:	66 08 20    	mov.w     #0x86, w6
    2e6a:	85 23 20    	mov.w     #0x238, w5
    2e6c:	64 23 20    	mov.w     #0x236, w4
    2e6e:	43 23 20    	mov.w     #0x234, w3
    2e70:	22 23 20    	mov.w     #0x232, w2
    2e72:	01 23 20    	mov.w     #0x230, w1
    2e74:	60 89 21    	mov.w     #0x1896, w0
    2e76:	51 00 07    	rcall     0x2f1a <_uart_init>
    2e78:	f0 87 57    	sub.w     w15, #0x10, w15

00002e7a <.LSM96>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    2e7a:	d0 01 20    	mov.w     #0x1d, w0
    2e7c:	80 1f 78    	mov.w     w0, [w15++]
    2e7e:	c0 01 20    	mov.w     #0x1c, w0
    2e80:	80 1f 78    	mov.w     w0, [w15++]
    2e82:	80 c0 b3    	mov.b     #0x8, w0
    2e84:	80 1f 78    	mov.w     w0, [w15++]
    2e86:	80 c0 b3    	mov.b     #0x8, w0
    2e88:	80 1f 78    	mov.w     w0, [w15++]
    2e8a:	a0 6a 20    	mov.w     #0x6aa, w0
    2e8c:	80 1f 78    	mov.w     w0, [w15++]
    2e8e:	20 6a 20    	mov.w     #0x6a2, w0
    2e90:	80 1f 78    	mov.w     w0, [w15++]
    2e92:	20 c0 b3    	mov.b     #0x2, w0
    2e94:	80 1f 78    	mov.w     w0, [w15++]
    2e96:	30 c0 b3    	mov.b     #0x3, w0
    2e98:	80 1f 78    	mov.w     w0, [w15++]
    2e9a:	e7 09 20    	mov.w     #0x9e, w7
    2e9c:	e6 08 20    	mov.w     #0x8e, w6
    2e9e:	85 25 20    	mov.w     #0x258, w5
    2ea0:	64 25 20    	mov.w     #0x256, w4
    2ea2:	43 25 20    	mov.w     #0x254, w3
    2ea4:	22 25 20    	mov.w     #0x252, w2
    2ea6:	01 25 20    	mov.w     #0x250, w1
    2ea8:	20 8d 21    	mov.w     #0x18d2, w0
    2eaa:	37 00 07    	rcall     0x2f1a <_uart_init>
    2eac:	f0 87 57    	sub.w     w15, #0x10, w15

00002eae <.LSM97>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    2eae:	f0 01 20    	mov.w     #0x1f, w0
    2eb0:	80 1f 78    	mov.w     w0, [w15++]
    2eb2:	e0 01 20    	mov.w     #0x1e, w0
    2eb4:	80 1f 78    	mov.w     w0, [w15++]
    2eb6:	80 c0 b3    	mov.b     #0x8, w0
    2eb8:	80 1f 78    	mov.w     w0, [w15++]
    2eba:	00 40 eb    	clr.b     w0
    2ebc:	80 1f 78    	mov.w     w0, [w15++]
    2ebe:	60 6b 20    	mov.w     #0x6b6, w0
    2ec0:	80 1f 78    	mov.w     w0, [w15++]
    2ec2:	60 6b 20    	mov.w     #0x6b6, w0
    2ec4:	80 1f 78    	mov.w     w0, [w15++]
    2ec6:	80 c0 b3    	mov.b     #0x8, w0
    2ec8:	80 1f 78    	mov.w     w0, [w15++]
    2eca:	90 c0 b3    	mov.b     #0x9, w0
    2ecc:	80 1f 78    	mov.w     w0, [w15++]
    2ece:	e7 09 20    	mov.w     #0x9e, w7
    2ed0:	e6 08 20    	mov.w     #0x8e, w6
    2ed2:	85 2b 20    	mov.w     #0x2b8, w5
    2ed4:	64 2b 20    	mov.w     #0x2b6, w4
    2ed6:	43 2b 20    	mov.w     #0x2b4, w3
    2ed8:	22 2b 20    	mov.w     #0x2b2, w2
    2eda:	01 2b 20    	mov.w     #0x2b0, w1
    2edc:	e0 90 21    	mov.w     #0x190e, w0
    2ede:	1d 00 07    	rcall     0x2f1a <_uart_init>
    2ee0:	f0 87 57    	sub.w     w15, #0x10, w15

00002ee2 <.LSM98>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    2ee2:	00 40 20    	mov.w     #0x400, w0
    2ee4:	80 1f 78    	mov.w     w0, [w15++]
    2ee6:	60 d7 21    	mov.w     #0x1d76, w0
    2ee8:	80 1f 78    	mov.w     w0, [w15++]
    2eea:	00 40 20    	mov.w     #0x400, w0
    2eec:	80 1f 78    	mov.w     w0, [w15++]
    2eee:	60 97 21    	mov.w     #0x1976, w0
    2ef0:	80 1f 78    	mov.w     w0, [w15++]
    2ef2:	00 00 eb    	clr.w     w0
    2ef4:	80 1f 78    	mov.w     w0, [w15++]
    2ef6:	10 00 20    	mov.w     #0x1, w0
    2ef8:	80 1f 78    	mov.w     w0, [w15++]
    2efa:	e5 c4 b3    	mov.b     #0x4e, w5
    2efc:	06 00 20    	mov.w     #0x0, w6
    2efe:	67 69 24    	mov.w     #0x4696, w7
    2f00:	00 02 eb    	clr.w     w4
    2f02:	80 01 eb    	clr.w     w3
    2f04:	02 96 21    	mov.w     #0x1960, w2
    2f06:	a1 94 21    	mov.w     #0x194a, w1
    2f08:	a0 85 21    	mov.w     #0x185a, w0
    2f0a:	72 00 07    	rcall     0x2ff0 <_uart_open>
    2f0c:	ec 87 57    	sub.w     w15, #0xc, w15

00002f0e <.LSM99>:
              0, HW_TXBUF, 1024, HW_RXBUF, 1024);

    _stdout = &uart1;
    2f0e:	a0 85 21    	mov.w     #0x185a, w0
    2f10:	b0 42 88    	mov.w     w0, 0x856

00002f12 <.LSM100>:
    _stderr = &uart1;
    2f12:	a0 85 21    	mov.w     #0x185a, w0
    2f14:	c0 42 88    	mov.w     w0, 0x858

00002f16 <.LSM101>:

}
    2f16:	00 80 fa    	ulnk      
    2f18:	00 00 06    	return    

00002f1a <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2f1a:	10 00 fa    	lnk       #0x10
    2f1c:	00 0f 78    	mov.w     w0, [w14]
    2f1e:	11 07 98    	mov.w     w1, [w14+2]
    2f20:	22 07 98    	mov.w     w2, [w14+4]
    2f22:	33 07 98    	mov.w     w3, [w14+6]
    2f24:	44 07 98    	mov.w     w4, [w14+8]
    2f26:	55 07 98    	mov.w     w5, [w14+10]
    2f28:	66 07 98    	mov.w     w6, [w14+12]
    2f2a:	77 07 98    	mov.w     w7, [w14+14]

00002f2c <.LSM103>:
    self->UxMODE = UxMODE;
    2f2c:	1e 00 78    	mov.w     [w14], w0
    2f2e:	9e 00 90    	mov.w     [w14+2], w1
    2f30:	01 08 78    	mov.w     w1, [w0]

00002f32 <.LSM104>:
    self->UxSTA = UxSTA;
    2f32:	1e 00 78    	mov.w     [w14], w0
    2f34:	ae 00 90    	mov.w     [w14+4], w1
    2f36:	11 00 98    	mov.w     w1, [w0+2]

00002f38 <.LSM105>:
    self->UxTXREG = UxTXREG;
    2f38:	1e 00 78    	mov.w     [w14], w0
    2f3a:	be 00 90    	mov.w     [w14+6], w1
    2f3c:	21 00 98    	mov.w     w1, [w0+4]

00002f3e <.LSM106>:
    self->UxRXREG = UxRXREG;
    2f3e:	1e 00 78    	mov.w     [w14], w0
    2f40:	ce 00 90    	mov.w     [w14+8], w1
    2f42:	31 00 98    	mov.w     w1, [w0+6]

00002f44 <.LSM107>:
    self->UxBRG = UxBRG;
    2f44:	1e 00 78    	mov.w     [w14], w0
    2f46:	de 00 90    	mov.w     [w14+10], w1
    2f48:	41 00 98    	mov.w     w1, [w0+8]

00002f4a <.LSM108>:
    self->IFSy = IFSy;
    2f4a:	1e 00 78    	mov.w     [w14], w0
    2f4c:	ee 00 90    	mov.w     [w14+12], w1
    2f4e:	51 00 98    	mov.w     w1, [w0+10]

00002f50 <.LSM109>:
    self->IECy = IECy;
    2f50:	1e 00 78    	mov.w     [w14], w0
    2f52:	fe 00 90    	mov.w     [w14+14], w1
    2f54:	61 00 98    	mov.w     w1, [w0+12]

00002f56 <.LSM110>:
    self->UxTXIF = UxTXIF;
    2f56:	1e 00 78    	mov.w     [w14], w0
    2f58:	8e f8 97    	mov.b     [w14-8], w1
    2f5a:	61 48 98    	mov.b     w1, [w0+14]

00002f5c <.LSM111>:
    self->UxRXIF = UxRXIF;
    2f5c:	1e 00 78    	mov.w     [w14], w0
    2f5e:	ee f0 97    	mov.b     [w14-10], w1
    2f60:	71 48 98    	mov.b     w1, [w0+15]

00002f62 <.LSM112>:
    self->RXrpinr = RXrpinr;
    2f62:	1e 00 78    	mov.w     [w14], w0
    2f64:	ae b8 97    	mov.w     [w14-12], w1
    2f66:	01 08 98    	mov.w     w1, [w0+16]

00002f68 <.LSM113>:
    self->CTSrpinr = CTSrpinr;
    2f68:	1e 00 78    	mov.w     [w14], w0
    2f6a:	9e b8 97    	mov.w     [w14-14], w1
    2f6c:	11 08 98    	mov.w     w1, [w0+18]

00002f6e <.LSM114>:
    self->RXrpshift = RXrpshift;
    2f6e:	1e 00 78    	mov.w     [w14], w0
    2f70:	8e f0 97    	mov.b     [w14-16], w1
    2f72:	41 50 98    	mov.b     w1, [w0+20]

00002f74 <.LSM115>:
    self->CTSrpshift = CTSrpshift;
    2f74:	1e 00 78    	mov.w     [w14], w0
    2f76:	ee e8 97    	mov.b     [w14-18], w1
    2f78:	51 50 98    	mov.b     w1, [w0+21]

00002f7a <.LSM116>:
    self->TXrpnum = TXrpnum;
    2f7a:	1e 00 78    	mov.w     [w14], w0
    2f7c:	ee b0 97    	mov.w     [w14-20], w1
    2f7e:	31 08 98    	mov.w     w1, [w0+22]

00002f80 <.LSM117>:
    self->RTSrpnum = RTSrpnum;
    2f80:	1e 00 78    	mov.w     [w14], w0
    2f82:	de b0 97    	mov.w     [w14-22], w1
    2f84:	41 08 98    	mov.w     w1, [w0+24]

00002f86 <.LSM118>:
    self->TX = NULL;
    2f86:	1e 00 78    	mov.w     [w14], w0
    2f88:	80 00 eb    	clr.w     w1
    2f8a:	51 08 98    	mov.w     w1, [w0+26]

00002f8c <.LSM119>:
    self->RX = NULL;
    2f8c:	1e 00 78    	mov.w     [w14], w0
    2f8e:	80 00 eb    	clr.w     w1
    2f90:	61 08 98    	mov.w     w1, [w0+28]

00002f92 <.LSM120>:
    self->RTS = NULL;
    2f92:	1e 00 78    	mov.w     [w14], w0
    2f94:	80 00 eb    	clr.w     w1
    2f96:	71 08 98    	mov.w     w1, [w0+30]

00002f98 <.LSM121>:
    self->CTS = NULL;
    2f98:	1e 00 78    	mov.w     [w14], w0
    2f9a:	80 00 eb    	clr.w     w1
    2f9c:	01 10 98    	mov.w     w1, [w0+32]

00002f9e <.LSM122>:
    self->TXbuffer.data = NULL;
    2f9e:	1e 00 78    	mov.w     [w14], w0
    2fa0:	80 00 eb    	clr.w     w1
    2fa2:	11 10 98    	mov.w     w1, [w0+34]

00002fa4 <.LSM123>:
    self->TXbuffer.length = 0;
    2fa4:	1e 00 78    	mov.w     [w14], w0
    2fa6:	80 00 eb    	clr.w     w1
    2fa8:	21 10 98    	mov.w     w1, [w0+36]

00002faa <.LSM124>:
    self->TXbuffer.head = 0;
    2faa:	1e 00 78    	mov.w     [w14], w0
    2fac:	80 00 eb    	clr.w     w1
    2fae:	31 10 98    	mov.w     w1, [w0+38]

00002fb0 <.LSM125>:
    self->TXbuffer.tail = 0;
    2fb0:	1e 00 78    	mov.w     [w14], w0
    2fb2:	80 00 eb    	clr.w     w1
    2fb4:	41 10 98    	mov.w     w1, [w0+40]

00002fb6 <.LSM126>:
    self->TXbuffer.count = 0;
    2fb6:	1e 00 78    	mov.w     [w14], w0
    2fb8:	80 00 eb    	clr.w     w1
    2fba:	51 10 98    	mov.w     w1, [w0+42]

00002fbc <.LSM127>:
    self->RXbuffer.data = NULL;
    2fbc:	1e 00 78    	mov.w     [w14], w0
    2fbe:	80 00 eb    	clr.w     w1
    2fc0:	61 10 98    	mov.w     w1, [w0+44]

00002fc2 <.LSM128>:
    self->RXbuffer.length = 0;
    2fc2:	1e 00 78    	mov.w     [w14], w0
    2fc4:	80 00 eb    	clr.w     w1
    2fc6:	71 10 98    	mov.w     w1, [w0+46]

00002fc8 <.LSM129>:
    self->RXbuffer.head = 0;
    2fc8:	1e 00 78    	mov.w     [w14], w0
    2fca:	80 00 eb    	clr.w     w1
    2fcc:	01 18 98    	mov.w     w1, [w0+48]

00002fce <.LSM130>:
    self->RXbuffer.tail = 0;
    2fce:	1e 00 78    	mov.w     [w14], w0
    2fd0:	80 00 eb    	clr.w     w1
    2fd2:	11 18 98    	mov.w     w1, [w0+50]

00002fd4 <.LSM131>:
    self->RXbuffer.count = 0;
    2fd4:	1e 00 78    	mov.w     [w14], w0
    2fd6:	80 00 eb    	clr.w     w1
    2fd8:	21 18 98    	mov.w     w1, [w0+52]

00002fda <.LSM132>:
    self->TXthreshold = 1;
    2fda:	1e 00 78    	mov.w     [w14], w0
    2fdc:	11 00 20    	mov.w     #0x1, w1
    2fde:	31 18 98    	mov.w     w1, [w0+54]

00002fe0 <.LSM133>:
    self->putc = NULL;
    2fe0:	1e 00 78    	mov.w     [w14], w0
    2fe2:	80 00 eb    	clr.w     w1
    2fe4:	41 18 98    	mov.w     w1, [w0+56]

00002fe6 <.LSM134>:
    self->getc = NULL;
    2fe6:	1e 00 78    	mov.w     [w14], w0
    2fe8:	80 00 eb    	clr.w     w1
    2fea:	51 18 98    	mov.w     w1, [w0+58]

00002fec <.LSM135>:
}
    2fec:	00 80 fa    	ulnk      
    2fee:	00 00 06    	return    

00002ff0 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    2ff0:	10 00 fa    	lnk       #0x10
    2ff2:	88 1f 78    	mov.w     w8, [w15++]
    2ff4:	00 0f 78    	mov.w     w0, [w14]
    2ff6:	11 07 98    	mov.w     w1, [w14+2]
    2ff8:	22 07 98    	mov.w     w2, [w14+4]
    2ffa:	33 07 98    	mov.w     w3, [w14+6]
    2ffc:	44 07 98    	mov.w     w4, [w14+8]
    2ffe:	56 07 98    	mov.w     w6, [w14+10]
    3000:	67 07 98    	mov.w     w7, [w14+12]
    3002:	65 4f 98    	mov.b     w5, [w14+14]

00003004 <.LSM137>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    3004:	1e 00 78    	mov.w     [w14], w0
    3006:	10 00 78    	mov.w     [w0], w0
    3008:	80 00 eb    	clr.w     w1
    300a:	01 08 78    	mov.w     w1, [w0]

0000300c <.LSM138>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    300c:	1e 00 90    	mov.w     [w14+2], w0
    300e:	60 00 90    	mov.w     [w0+12], w0
    3010:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3012:	0e 02 32    	bra       Z, 0x3430 <.L73>
    3014:	2e 00 90    	mov.w     [w14+4], w0
    3016:	60 00 90    	mov.w     [w0+12], w0
    3018:	e1 0f 40    	add.w     w0, #0x1, [w15]
    301a:	0c 02 32    	bra       Z, 0x3434 <.L74>

0000301c <.LSM139>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    301c:	1e 00 90    	mov.w     [w14+2], w0
    301e:	00 08 90    	mov.w     [w0+16], w0
    3020:	00 00 e0    	cp0.w     w0
    3022:	69 00 3a    	bra       NZ, 0x30f6 <.L44>
    3024:	2e 00 90    	mov.w     [w14+4], w0
    3026:	00 08 90    	mov.w     [w0+16], w0
    3028:	00 00 e0    	cp0.w     w0
    302a:	65 00 3a    	bra       NZ, 0x30f6 <.L44>

0000302c <.LSM140>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    302c:	1e 00 90    	mov.w     [w14+2], w0
    302e:	0a 08 07    	rcall     0x4044 <_pin_digitalOut>

00003030 <.LSM141>:
        pin_set(TX);
    3030:	1e 00 90    	mov.w     [w14+2], w0
    3032:	65 08 07    	rcall     0x40fe <_pin_set>

00003034 <.LSM142>:
        pin_digitalIn(RX);
    3034:	2e 00 90    	mov.w     [w14+4], w0
    3036:	df 07 07    	rcall     0x3ff6 <_pin_digitalIn>

00003038 <.LSM143>:
        self->TX = TX;
    3038:	1e 00 78    	mov.w     [w14], w0
    303a:	9e 00 90    	mov.w     [w14+2], w1
    303c:	51 08 98    	mov.w     w1, [w0+26]

0000303e <.LSM144>:
        TX->owner = (void *)self;
    303e:	1e 00 90    	mov.w     [w14+2], w0
    3040:	9e 00 78    	mov.w     [w14], w1
    3042:	01 08 98    	mov.w     w1, [w0+16]

00003044 <.LSM145>:
        TX->write = NULL;
    3044:	1e 00 90    	mov.w     [w14+2], w0
    3046:	80 00 eb    	clr.w     w1
    3048:	11 08 98    	mov.w     w1, [w0+18]

0000304a <.LSM146>:
        TX->read = NULL;
    304a:	1e 00 90    	mov.w     [w14+2], w0
    304c:	80 00 eb    	clr.w     w1
    304e:	21 08 98    	mov.w     w1, [w0+20]

00003050 <.LSM147>:
        self->RX = RX;
    3050:	1e 00 78    	mov.w     [w14], w0
    3052:	ae 00 90    	mov.w     [w14+4], w1
    3054:	61 08 98    	mov.w     w1, [w0+28]

00003056 <.LSM148>:
        RX->owner = (void *)self;
    3056:	2e 00 90    	mov.w     [w14+4], w0
    3058:	9e 00 78    	mov.w     [w14], w1
    305a:	01 08 98    	mov.w     w1, [w0+16]

0000305c <.LSM149>:
        RX->write = NULL;
    305c:	2e 00 90    	mov.w     [w14+4], w0
    305e:	80 00 eb    	clr.w     w1
    3060:	11 08 98    	mov.w     w1, [w0+18]

00003062 <.LSM150>:
        RX->read = NULL;
    3062:	2e 00 90    	mov.w     [w14+4], w0
    3064:	80 00 eb    	clr.w     w1
    3066:	21 08 98    	mov.w     w1, [w0+20]

00003068 <.LSM151>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3068:	11 3a 80    	mov.w     0x742, w1
    306a:	f0 0b 20    	mov.w     #0xbf, w0
    306c:	00 81 60    	and.w     w1, w0, w2
    306e:	60 04 20    	mov.w     #0x46, w0
    3070:	71 05 20    	mov.w     #0x57, w1
    3072:	23 74 20    	mov.w     #0x742, w3
    3074:	80 49 78    	mov.b     w0, [w3]
    3076:	81 49 78    	mov.b     w1, [w3]
    3078:	82 49 78    	mov.b     w2, [w3]

0000307a <.LSM152>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    307a:	1e 00 90    	mov.w     [w14+2], w0
    307c:	70 00 90    	mov.w     [w0+14], w0
    307e:	9e 00 90    	mov.w     [w14+2], w1
    3080:	f1 00 90    	mov.w     [w1+14], w1
    3082:	11 01 78    	mov.w     [w1], w2
    3084:	9e 00 90    	mov.w     [w14+2], w1
    3086:	a1 48 90    	mov.b     [w1+10], w1
    3088:	81 80 fb    	ze        w1, w1
    308a:	f3 03 20    	mov.w     #0x3f, w3
    308c:	81 18 dd    	sl.w      w3, w1, w1
    308e:	81 80 ea    	com.w     w1, w1
    3090:	81 00 61    	and.w     w2, w1, w1
    3092:	01 08 78    	mov.w     w1, [w0]

00003094 <.LSM153>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    3094:	1e 00 90    	mov.w     [w14+2], w0
    3096:	70 00 90    	mov.w     [w0+14], w0
    3098:	9e 00 90    	mov.w     [w14+2], w1
    309a:	f1 00 90    	mov.w     [w1+14], w1
    309c:	11 01 78    	mov.w     [w1], w2
    309e:	9e 00 78    	mov.w     [w14], w1
    30a0:	b1 09 90    	mov.w     [w1+22], w3
    30a2:	9e 00 90    	mov.w     [w14+2], w1
    30a4:	a1 48 90    	mov.b     [w1+10], w1
    30a6:	81 80 fb    	ze        w1, w1
    30a8:	81 18 dd    	sl.w      w3, w1, w1
    30aa:	82 80 70    	ior.w     w1, w2, w1
    30ac:	01 08 78    	mov.w     w1, [w0]

000030ae <.LSM154>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    30ae:	1e 00 78    	mov.w     [w14], w0
    30b0:	00 08 90    	mov.w     [w0+16], w0
    30b2:	9e 00 78    	mov.w     [w14], w1
    30b4:	81 08 90    	mov.w     [w1+16], w1
    30b6:	11 01 78    	mov.w     [w1], w2
    30b8:	9e 00 78    	mov.w     [w14], w1
    30ba:	c1 50 90    	mov.b     [w1+20], w1
    30bc:	81 80 fb    	ze        w1, w1
    30be:	f3 03 20    	mov.w     #0x3f, w3
    30c0:	81 18 dd    	sl.w      w3, w1, w1
    30c2:	81 80 ea    	com.w     w1, w1
    30c4:	81 00 61    	and.w     w2, w1, w1
    30c6:	01 08 78    	mov.w     w1, [w0]

000030c8 <.LSM155>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    30c8:	1e 00 78    	mov.w     [w14], w0
    30ca:	00 08 90    	mov.w     [w0+16], w0
    30cc:	9e 00 78    	mov.w     [w14], w1
    30ce:	81 08 90    	mov.w     [w1+16], w1
    30d0:	11 01 78    	mov.w     [w1], w2
    30d2:	ae 00 90    	mov.w     [w14+4], w1
    30d4:	e1 01 90    	mov.w     [w1+12], w3
    30d6:	9e 00 78    	mov.w     [w14], w1
    30d8:	c1 50 90    	mov.b     [w1+20], w1
    30da:	81 80 fb    	ze        w1, w1
    30dc:	81 18 dd    	sl.w      w3, w1, w1
    30de:	82 80 70    	ior.w     w1, w2, w1
    30e0:	01 08 78    	mov.w     w1, [w0]

000030e2 <.LSM156>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    30e2:	11 3a 80    	mov.w     0x742, w1
    30e4:	00 04 20    	mov.w     #0x40, w0
    30e6:	01 01 70    	ior.w     w0, w1, w2
    30e8:	60 04 20    	mov.w     #0x46, w0
    30ea:	71 05 20    	mov.w     #0x57, w1
    30ec:	23 74 20    	mov.w     #0x742, w3
    30ee:	80 49 78    	mov.b     w0, [w3]
    30f0:	81 49 78    	mov.b     w1, [w3]
    30f2:	82 49 78    	mov.b     w2, [w3]
    30f4:	0a 00 37    	bra       0x310a <.L45>

000030f6 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    30f6:	1e 00 78    	mov.w     [w14], w0
    30f8:	d0 08 90    	mov.w     [w0+26], w1
    30fa:	1e 00 90    	mov.w     [w14+2], w0
    30fc:	80 8f 50    	sub.w     w1, w0, [w15]
    30fe:	9c 01 3a    	bra       NZ, 0x3438 <.L75>
    3100:	1e 00 78    	mov.w     [w14], w0
    3102:	e0 08 90    	mov.w     [w0+28], w1
    3104:	2e 00 90    	mov.w     [w14+4], w0
    3106:	80 8f 50    	sub.w     w1, w0, [w15]
    3108:	99 01 3a    	bra       NZ, 0x343c <.L76>

0000310a <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    310a:	3e 00 90    	mov.w     [w14+6], w0
    310c:	00 00 e0    	cp0.w     w0
    310e:	87 00 32    	bra       Z, 0x321e <.L47>
    3110:	4e 00 90    	mov.w     [w14+8], w0
    3112:	00 00 e0    	cp0.w     w0
    3114:	84 00 32    	bra       Z, 0x321e <.L47>

00003116 <.LSM159>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    3116:	3e 00 90    	mov.w     [w14+6], w0
    3118:	60 00 90    	mov.w     [w0+12], w0
    311a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    311c:	91 01 32    	bra       Z, 0x3440 <.L77>
    311e:	4e 00 90    	mov.w     [w14+8], w0
    3120:	60 00 90    	mov.w     [w0+12], w0
    3122:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3124:	8f 01 32    	bra       Z, 0x3444 <.L78>

00003126 <.LSM160>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    3126:	3e 00 90    	mov.w     [w14+6], w0
    3128:	00 08 90    	mov.w     [w0+16], w0
    312a:	00 00 e0    	cp0.w     w0
    312c:	69 00 3a    	bra       NZ, 0x3200 <.L50>
    312e:	4e 00 90    	mov.w     [w14+8], w0
    3130:	00 08 90    	mov.w     [w0+16], w0
    3132:	00 00 e0    	cp0.w     w0
    3134:	65 00 3a    	bra       NZ, 0x3200 <.L50>

00003136 <.LSM161>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    3136:	3e 00 90    	mov.w     [w14+6], w0
    3138:	85 07 07    	rcall     0x4044 <_pin_digitalOut>

0000313a <.LSM162>:
            pin_set(RTS);
    313a:	3e 00 90    	mov.w     [w14+6], w0
    313c:	e0 07 07    	rcall     0x40fe <_pin_set>

0000313e <.LSM163>:
            pin_digitalIn(CTS);
    313e:	4e 00 90    	mov.w     [w14+8], w0
    3140:	5a 07 07    	rcall     0x3ff6 <_pin_digitalIn>

00003142 <.LSM164>:
            self->RTS = RTS;
    3142:	1e 00 78    	mov.w     [w14], w0
    3144:	be 00 90    	mov.w     [w14+6], w1
    3146:	71 08 98    	mov.w     w1, [w0+30]

00003148 <.LSM165>:
            RTS->owner = (void *)self;
    3148:	3e 00 90    	mov.w     [w14+6], w0
    314a:	9e 00 78    	mov.w     [w14], w1
    314c:	01 08 98    	mov.w     w1, [w0+16]

0000314e <.LSM166>:
            RTS->write = NULL;
    314e:	3e 00 90    	mov.w     [w14+6], w0
    3150:	80 00 eb    	clr.w     w1
    3152:	11 08 98    	mov.w     w1, [w0+18]

00003154 <.LSM167>:
            RTS->read = NULL;
    3154:	3e 00 90    	mov.w     [w14+6], w0
    3156:	80 00 eb    	clr.w     w1
    3158:	21 08 98    	mov.w     w1, [w0+20]

0000315a <.LSM168>:
            self->CTS = CTS;
    315a:	1e 00 78    	mov.w     [w14], w0
    315c:	ce 00 90    	mov.w     [w14+8], w1
    315e:	01 10 98    	mov.w     w1, [w0+32]

00003160 <.LSM169>:
            CTS->owner = (void *)self;
    3160:	4e 00 90    	mov.w     [w14+8], w0
    3162:	9e 00 78    	mov.w     [w14], w1
    3164:	01 08 98    	mov.w     w1, [w0+16]

00003166 <.LSM170>:
            CTS->write = NULL;
    3166:	4e 00 90    	mov.w     [w14+8], w0
    3168:	80 00 eb    	clr.w     w1
    316a:	11 08 98    	mov.w     w1, [w0+18]

0000316c <.LSM171>:
            CTS->read = NULL;
    316c:	4e 00 90    	mov.w     [w14+8], w0
    316e:	80 00 eb    	clr.w     w1
    3170:	21 08 98    	mov.w     w1, [w0+20]

00003172 <.LSM172>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    3172:	11 3a 80    	mov.w     0x742, w1
    3174:	f0 0b 20    	mov.w     #0xbf, w0
    3176:	00 81 60    	and.w     w1, w0, w2
    3178:	60 04 20    	mov.w     #0x46, w0
    317a:	71 05 20    	mov.w     #0x57, w1
    317c:	23 74 20    	mov.w     #0x742, w3
    317e:	80 49 78    	mov.b     w0, [w3]
    3180:	81 49 78    	mov.b     w1, [w3]
    3182:	82 49 78    	mov.b     w2, [w3]

00003184 <.LSM173>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    3184:	3e 00 90    	mov.w     [w14+6], w0
    3186:	70 00 90    	mov.w     [w0+14], w0
    3188:	be 00 90    	mov.w     [w14+6], w1
    318a:	f1 00 90    	mov.w     [w1+14], w1
    318c:	11 01 78    	mov.w     [w1], w2
    318e:	be 00 90    	mov.w     [w14+6], w1
    3190:	a1 48 90    	mov.b     [w1+10], w1
    3192:	81 80 fb    	ze        w1, w1
    3194:	f3 03 20    	mov.w     #0x3f, w3
    3196:	81 18 dd    	sl.w      w3, w1, w1
    3198:	81 80 ea    	com.w     w1, w1
    319a:	81 00 61    	and.w     w2, w1, w1
    319c:	01 08 78    	mov.w     w1, [w0]

0000319e <.LSM174>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    319e:	3e 00 90    	mov.w     [w14+6], w0
    31a0:	70 00 90    	mov.w     [w0+14], w0
    31a2:	be 00 90    	mov.w     [w14+6], w1
    31a4:	f1 00 90    	mov.w     [w1+14], w1
    31a6:	11 01 78    	mov.w     [w1], w2
    31a8:	9e 00 78    	mov.w     [w14], w1
    31aa:	c1 09 90    	mov.w     [w1+24], w3
    31ac:	be 00 90    	mov.w     [w14+6], w1
    31ae:	a1 48 90    	mov.b     [w1+10], w1
    31b0:	81 80 fb    	ze        w1, w1
    31b2:	81 18 dd    	sl.w      w3, w1, w1
    31b4:	82 80 70    	ior.w     w1, w2, w1
    31b6:	01 08 78    	mov.w     w1, [w0]

000031b8 <.LSM175>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    31b8:	1e 00 78    	mov.w     [w14], w0
    31ba:	10 08 90    	mov.w     [w0+18], w0
    31bc:	9e 00 78    	mov.w     [w14], w1
    31be:	91 08 90    	mov.w     [w1+18], w1
    31c0:	11 01 78    	mov.w     [w1], w2
    31c2:	9e 00 78    	mov.w     [w14], w1
    31c4:	d1 50 90    	mov.b     [w1+21], w1
    31c6:	81 80 fb    	ze        w1, w1
    31c8:	f3 03 20    	mov.w     #0x3f, w3
    31ca:	81 18 dd    	sl.w      w3, w1, w1
    31cc:	81 80 ea    	com.w     w1, w1
    31ce:	81 00 61    	and.w     w2, w1, w1
    31d0:	01 08 78    	mov.w     w1, [w0]

000031d2 <.LSM176>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    31d2:	1e 00 78    	mov.w     [w14], w0
    31d4:	10 08 90    	mov.w     [w0+18], w0
    31d6:	9e 00 78    	mov.w     [w14], w1
    31d8:	91 08 90    	mov.w     [w1+18], w1
    31da:	11 01 78    	mov.w     [w1], w2
    31dc:	ce 00 90    	mov.w     [w14+8], w1
    31de:	e1 01 90    	mov.w     [w1+12], w3
    31e0:	9e 00 78    	mov.w     [w14], w1
    31e2:	d1 50 90    	mov.b     [w1+21], w1
    31e4:	81 80 fb    	ze        w1, w1
    31e6:	81 18 dd    	sl.w      w3, w1, w1
    31e8:	82 80 70    	ior.w     w1, w2, w1
    31ea:	01 08 78    	mov.w     w1, [w0]

000031ec <.LSM177>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    31ec:	11 3a 80    	mov.w     0x742, w1
    31ee:	00 04 20    	mov.w     #0x40, w0
    31f0:	01 01 70    	ior.w     w0, w1, w2
    31f2:	60 04 20    	mov.w     #0x46, w0
    31f4:	71 05 20    	mov.w     #0x57, w1
    31f6:	23 74 20    	mov.w     #0x742, w3
    31f8:	80 49 78    	mov.b     w0, [w3]
    31fa:	81 49 78    	mov.b     w1, [w3]
    31fc:	82 49 78    	mov.b     w2, [w3]
    31fe:	0a 00 37    	bra       0x3214 <.L51>

00003200 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    3200:	1e 00 78    	mov.w     [w14], w0
    3202:	f0 08 90    	mov.w     [w0+30], w1
    3204:	3e 00 90    	mov.w     [w14+6], w0
    3206:	80 8f 50    	sub.w     w1, w0, [w15]
    3208:	1f 01 3a    	bra       NZ, 0x3448 <.L79>
    320a:	1e 00 78    	mov.w     [w14], w0
    320c:	80 10 90    	mov.w     [w0+32], w1
    320e:	4e 00 90    	mov.w     [w14+8], w0
    3210:	80 8f 50    	sub.w     w1, w0, [w15]
    3212:	1c 01 3a    	bra       NZ, 0x344c <.L80>

00003214 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    3214:	1e 00 78    	mov.w     [w14], w0
    3216:	10 00 78    	mov.w     [w0], w0
    3218:	01 20 20    	mov.w     #0x200, w1
    321a:	01 08 78    	mov.w     w1, [w0]
    321c:	06 00 37    	bra       0x322a <.L53>

0000321e <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    321e:	3e 00 90    	mov.w     [w14+6], w0
    3220:	00 00 e0    	cp0.w     w0
    3222:	16 01 3a    	bra       NZ, 0x3450 <.L81>
    3224:	4e 00 90    	mov.w     [w14+8], w0
    3226:	00 00 e0    	cp0.w     w0
    3228:	15 01 3a    	bra       NZ, 0x3454 <.L82>

0000322a <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    322a:	18 c0 b3    	mov.b     #0x1, w8
    322c:	02 40 22    	mov.w     #0x2400, w2
    322e:	43 a7 24    	mov.w     #0x4a74, w3
    3230:	5e 00 90    	mov.w     [w14+10], w0
    3232:	ee 00 90    	mov.w     [w14+12], w1
    3234:	d1 f0 07    	rcall     0x13d8 <___gesf2>
    3236:	00 00 e0    	cp0.w     w0
    3238:	01 00 3c    	bra       GT, 0x323c <.L55>
    323a:	00 44 eb    	clr.b     w8

0000323c <.L55>:
    323c:	08 04 e0    	cp0.b     w8
    323e:	04 00 32    	bra       Z, 0x3248 <.L56>

00003240 <.LSM182>:
        baudrate = FCY/4.;
    3240:	00 40 22    	mov.w     #0x2400, w0
    3242:	41 a7 24    	mov.w     #0x4a74, w1
    3244:	50 07 98    	mov.w     w0, [w14+10]
    3246:	61 07 98    	mov.w     w1, [w14+12]

00003248 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    3248:	18 c0 b3    	mov.b     #0x1, w8
    324a:	02 40 22    	mov.w     #0x2400, w2
    324c:	43 17 24    	mov.w     #0x4174, w3
    324e:	5e 00 90    	mov.w     [w14+10], w0
    3250:	ee 00 90    	mov.w     [w14+12], w1
    3252:	c0 f0 07    	rcall     0x13d4 <___eqsf2>
    3254:	00 00 e0    	cp0.w     w0
    3256:	01 00 35    	bra       LT, 0x325a <.L57>
    3258:	00 44 eb    	clr.b     w8

0000325a <.L57>:
    325a:	08 04 e0    	cp0.b     w8
    325c:	04 00 32    	bra       Z, 0x3266 <.L58>

0000325e <.LSM184>:
        baudrate = FCY/(16.*65536.);
    325e:	00 40 22    	mov.w     #0x2400, w0
    3260:	41 17 24    	mov.w     #0x4174, w1
    3262:	50 07 98    	mov.w     w0, [w14+10]
    3264:	61 07 98    	mov.w     w1, [w14+12]

00003266 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    3266:	18 c0 b3    	mov.b     #0x1, w8
    3268:	02 40 22    	mov.w     #0x2400, w2
    326a:	43 27 24    	mov.w     #0x4274, w3
    326c:	5e 00 90    	mov.w     [w14+10], w0
    326e:	ee 00 90    	mov.w     [w14+12], w1
    3270:	b1 f0 07    	rcall     0x13d4 <___eqsf2>
    3272:	00 00 e0    	cp0.w     w0
    3274:	01 00 34    	bra       LE, 0x3278 <.L59>
    3276:	00 44 eb    	clr.b     w8

00003278 <.L59>:
    3278:	08 04 e0    	cp0.b     w8
    327a:	0f 00 32    	bra       Z, 0x329a <.L60>

0000327c <.LSM186>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    327c:	1e 00 78    	mov.w     [w14], w0
    327e:	40 04 90    	mov.w     [w0+8], w8
    3280:	5e 01 90    	mov.w     [w14+10], w2
    3282:	ee 01 90    	mov.w     [w14+12], w3
    3284:	00 40 22    	mov.w     #0x2400, w0
    3286:	41 97 24    	mov.w     #0x4974, w1
    3288:	63 f0 07    	rcall     0x1350 <___divsf3>
    328a:	02 00 20    	mov.w     #0x0, w2
    328c:	03 f0 23    	mov.w     #0x3f00, w3
    328e:	03 f0 07    	rcall     0x1296 <___addsf3>
    3290:	a5 f0 07    	rcall     0x13dc <___fixunssfsi>
    3292:	00 00 78    	mov.w     w0, w0
    3294:	00 00 e9    	dec.w     w0, w0
    3296:	00 0c 78    	mov.w     w0, [w8]
    3298:	15 00 37    	bra       0x32c4 <.L61>

0000329a <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    329a:	1e 00 78    	mov.w     [w14], w0
    329c:	10 00 78    	mov.w     [w0], w0
    329e:	9e 00 78    	mov.w     [w14], w1
    32a0:	91 00 78    	mov.w     [w1], w1
    32a2:	91 00 78    	mov.w     [w1], w1
    32a4:	01 30 a0    	bset.w    w1, #0x3
    32a6:	01 08 78    	mov.w     w1, [w0]

000032a8 <.LSM188>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    32a8:	1e 00 78    	mov.w     [w14], w0
    32aa:	40 04 90    	mov.w     [w0+8], w8
    32ac:	5e 01 90    	mov.w     [w14+10], w2
    32ae:	ee 01 90    	mov.w     [w14+12], w3
    32b0:	00 40 22    	mov.w     #0x2400, w0
    32b2:	41 a7 24    	mov.w     #0x4a74, w1
    32b4:	4d f0 07    	rcall     0x1350 <___divsf3>
    32b6:	02 00 20    	mov.w     #0x0, w2
    32b8:	03 f0 23    	mov.w     #0x3f00, w3
    32ba:	ed ef 07    	rcall     0x1296 <___addsf3>
    32bc:	8f f0 07    	rcall     0x13dc <___fixunssfsi>
    32be:	00 00 78    	mov.w     w0, w0
    32c0:	00 00 e9    	dec.w     w0, w0
    32c2:	00 0c 78    	mov.w     w0, [w8]

000032c4 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    32c4:	ee 48 90    	mov.b     [w14+14], w1
    32c6:	50 c4 b3    	mov.b     #0x45, w0
    32c8:	80 cf 50    	sub.b     w1, w0, [w15]
    32ca:	04 00 32    	bra       Z, 0x32d4 <.L62>
    32cc:	ee 48 90    	mov.b     [w14+14], w1
    32ce:	50 c6 b3    	mov.b     #0x65, w0
    32d0:	80 cf 50    	sub.b     w1, w0, [w15]
    32d2:	08 00 3a    	bra       NZ, 0x32e4 <.L63>

000032d4 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    32d4:	1e 00 78    	mov.w     [w14], w0
    32d6:	10 00 78    	mov.w     [w0], w0
    32d8:	9e 00 78    	mov.w     [w14], w1
    32da:	91 00 78    	mov.w     [w1], w1
    32dc:	91 00 78    	mov.w     [w1], w1
    32de:	01 10 a0    	bset.w    w1, #0x1
    32e0:	01 08 78    	mov.w     w1, [w0]
    32e2:	18 00 37    	bra       0x3314 <.L64>

000032e4 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    32e4:	ee 48 90    	mov.b     [w14+14], w1
    32e6:	f0 c4 b3    	mov.b     #0x4f, w0
    32e8:	80 cf 50    	sub.b     w1, w0, [w15]
    32ea:	04 00 32    	bra       Z, 0x32f4 <.L65>
    32ec:	ee 48 90    	mov.b     [w14+14], w1
    32ee:	f0 c6 b3    	mov.b     #0x6f, w0
    32f0:	80 cf 50    	sub.b     w1, w0, [w15]
    32f2:	08 00 3a    	bra       NZ, 0x3304 <.L66>

000032f4 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    32f4:	1e 00 78    	mov.w     [w14], w0
    32f6:	10 00 78    	mov.w     [w0], w0
    32f8:	9e 00 78    	mov.w     [w14], w1
    32fa:	91 00 78    	mov.w     [w1], w1
    32fc:	91 00 78    	mov.w     [w1], w1
    32fe:	01 20 a0    	bset.w    w1, #0x2
    3300:	01 08 78    	mov.w     w1, [w0]
    3302:	08 00 37    	bra       0x3314 <.L64>

00003304 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    3304:	ee 48 90    	mov.b     [w14+14], w1
    3306:	e0 c4 b3    	mov.b     #0x4e, w0
    3308:	80 cf 50    	sub.b     w1, w0, [w15]
    330a:	04 00 32    	bra       Z, 0x3314 <.L64>
    330c:	ee 48 90    	mov.b     [w14+14], w1
    330e:	e0 c6 b3    	mov.b     #0x6e, w0
    3310:	80 cf 50    	sub.b     w1, w0, [w15]
    3312:	a2 00 3a    	bra       NZ, 0x3458 <.L83>

00003314 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    3314:	4e b8 97    	mov.w     [w14-8], w0
    3316:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3318:	08 00 3a    	bra       NZ, 0x332a <.L67>

0000331a <.LSM195>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    331a:	1e 00 78    	mov.w     [w14], w0
    331c:	10 00 78    	mov.w     [w0], w0
    331e:	9e 00 78    	mov.w     [w14], w1
    3320:	91 00 78    	mov.w     [w1], w1
    3322:	91 00 78    	mov.w     [w1], w1
    3324:	01 00 a0    	bset.w    w1, #0x0
    3326:	01 08 78    	mov.w     w1, [w0]
    3328:	03 00 37    	bra       0x3330 <.L68>

0000332a <.L67>:
    } else if (stopbits!=1) {
    332a:	4e b8 97    	mov.w     [w14-8], w0
    332c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    332e:	96 00 3a    	bra       NZ, 0x345c <.L84>

00003330 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    3330:	2e b8 97    	mov.w     [w14-12], w0
    3332:	00 00 e0    	cp0.w     w0
    3334:	04 00 3a    	bra       NZ, 0x333e <.L69>

00003336 <.LSM198>:
        self->putc = __putc_nobuffer;
    3336:	1e 00 78    	mov.w     [w14], w0
    3338:	61 a1 22    	mov.w     #0x2a16, w1
    333a:	41 18 98    	mov.w     w1, [w0+56]
    333c:	36 00 37    	bra       0x33aa <.L70>

0000333e <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    333e:	1e 00 78    	mov.w     [w14], w0
    3340:	10 00 90    	mov.w     [w0+2], w0
    3342:	9e 00 78    	mov.w     [w14], w1
    3344:	91 00 90    	mov.w     [w1+2], w1
    3346:	11 01 78    	mov.w     [w1], w2
    3348:	01 00 22    	mov.w     #0x2000, w1
    334a:	82 80 70    	ior.w     w1, w2, w1
    334c:	01 08 78    	mov.w     w1, [w0]

0000334e <.LSM200>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    334e:	1e 00 78    	mov.w     [w14], w0
    3350:	ae b8 97    	mov.w     [w14-12], w1
    3352:	11 10 98    	mov.w     w1, [w0+34]

00003354 <.LSM201>:
        self->TXbuffer.length = TXbufferlen;
    3354:	1e 00 78    	mov.w     [w14], w0
    3356:	9e b8 97    	mov.w     [w14-14], w1
    3358:	21 10 98    	mov.w     w1, [w0+36]

0000335a <.LSM202>:
        self->TXbuffer.head = 0;
    335a:	1e 00 78    	mov.w     [w14], w0
    335c:	80 00 eb    	clr.w     w1
    335e:	31 10 98    	mov.w     w1, [w0+38]

00003360 <.LSM203>:
        self->TXbuffer.tail = 0;
    3360:	1e 00 78    	mov.w     [w14], w0
    3362:	80 00 eb    	clr.w     w1
    3364:	41 10 98    	mov.w     w1, [w0+40]

00003366 <.LSM204>:
        self->TXbuffer.count = 0;
    3366:	1e 00 78    	mov.w     [w14], w0
    3368:	80 00 eb    	clr.w     w1
    336a:	51 10 98    	mov.w     w1, [w0+42]

0000336c <.LSM205>:
        self->TXthreshold = TXthreshold;
    336c:	1e 00 78    	mov.w     [w14], w0
    336e:	be b8 97    	mov.w     [w14-10], w1
    3370:	31 18 98    	mov.w     w1, [w0+54]

00003372 <.LSM206>:
        self->putc = __putc_buffer;
    3372:	1e 00 78    	mov.w     [w14], w0
    3374:	81 a5 22    	mov.w     #0x2a58, w1
    3376:	41 18 98    	mov.w     w1, [w0+56]

00003378 <.LSM207>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    3378:	1e 00 78    	mov.w     [w14], w0
    337a:	50 00 90    	mov.w     [w0+10], w0
    337c:	9e 00 78    	mov.w     [w14], w1
    337e:	d1 00 90    	mov.w     [w1+10], w1
    3380:	11 01 78    	mov.w     [w1], w2
    3382:	9e 00 78    	mov.w     [w14], w1
    3384:	e1 48 90    	mov.b     [w1+14], w1
    3386:	81 80 fb    	ze        w1, w1
    3388:	13 00 20    	mov.w     #0x1, w3
    338a:	81 18 dd    	sl.w      w3, w1, w1
    338c:	81 80 ea    	com.w     w1, w1
    338e:	81 00 61    	and.w     w2, w1, w1
    3390:	01 08 78    	mov.w     w1, [w0]

00003392 <.LSM208>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    3392:	1e 00 78    	mov.w     [w14], w0
    3394:	60 00 90    	mov.w     [w0+12], w0
    3396:	9e 00 78    	mov.w     [w14], w1
    3398:	e1 00 90    	mov.w     [w1+12], w1
    339a:	11 01 78    	mov.w     [w1], w2
    339c:	9e 00 78    	mov.w     [w14], w1
    339e:	e1 48 90    	mov.b     [w1+14], w1
    33a0:	81 80 fb    	ze        w1, w1
    33a2:	13 00 20    	mov.w     #0x1, w3
    33a4:	81 18 dd    	sl.w      w3, w1, w1
    33a6:	82 80 70    	ior.w     w1, w2, w1
    33a8:	01 08 78    	mov.w     w1, [w0]

000033aa <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    33aa:	0e b8 97    	mov.w     [w14-16], w0
    33ac:	00 00 e0    	cp0.w     w0
    33ae:	04 00 3a    	bra       NZ, 0x33b8 <.L71>

000033b0 <.LSM210>:
        self->getc = __getc_nobuffer;
    33b0:	1e 00 78    	mov.w     [w14], w0
    33b2:	a1 a3 22    	mov.w     #0x2a3a, w1
    33b4:	51 18 98    	mov.w     w1, [w0+58]
    33b6:	2b 00 37    	bra       0x340e <.L72>

000033b8 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    33b8:	1e 00 78    	mov.w     [w14], w0
    33ba:	8e b8 97    	mov.w     [w14-16], w1
    33bc:	61 10 98    	mov.w     w1, [w0+44]

000033be <.LSM212>:
        self->RXbuffer.length = RXbufferlen;
    33be:	1e 00 78    	mov.w     [w14], w0
    33c0:	fe b0 97    	mov.w     [w14-18], w1
    33c2:	71 10 98    	mov.w     w1, [w0+46]

000033c4 <.LSM213>:
        self->RXbuffer.head = 0;
    33c4:	1e 00 78    	mov.w     [w14], w0
    33c6:	80 00 eb    	clr.w     w1
    33c8:	01 18 98    	mov.w     w1, [w0+48]

000033ca <.LSM214>:
        self->RXbuffer.tail = 0;
    33ca:	1e 00 78    	mov.w     [w14], w0
    33cc:	80 00 eb    	clr.w     w1
    33ce:	11 18 98    	mov.w     w1, [w0+50]

000033d0 <.LSM215>:
        self->RXbuffer.count = 0;
    33d0:	1e 00 78    	mov.w     [w14], w0
    33d2:	80 00 eb    	clr.w     w1
    33d4:	21 18 98    	mov.w     w1, [w0+52]

000033d6 <.LSM216>:
        self->getc = __getc_buffer;
    33d6:	1e 00 78    	mov.w     [w14], w0
    33d8:	01 b5 22    	mov.w     #0x2b50, w1
    33da:	51 18 98    	mov.w     w1, [w0+58]

000033dc <.LSM217>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    33dc:	1e 00 78    	mov.w     [w14], w0
    33de:	50 00 90    	mov.w     [w0+10], w0
    33e0:	9e 00 78    	mov.w     [w14], w1
    33e2:	d1 00 90    	mov.w     [w1+10], w1
    33e4:	11 01 78    	mov.w     [w1], w2
    33e6:	9e 00 78    	mov.w     [w14], w1
    33e8:	f1 48 90    	mov.b     [w1+15], w1
    33ea:	81 80 fb    	ze        w1, w1
    33ec:	13 00 20    	mov.w     #0x1, w3
    33ee:	81 18 dd    	sl.w      w3, w1, w1
    33f0:	81 80 ea    	com.w     w1, w1
    33f2:	81 00 61    	and.w     w2, w1, w1
    33f4:	01 08 78    	mov.w     w1, [w0]

000033f6 <.LSM218>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    33f6:	1e 00 78    	mov.w     [w14], w0
    33f8:	60 00 90    	mov.w     [w0+12], w0
    33fa:	9e 00 78    	mov.w     [w14], w1
    33fc:	e1 00 90    	mov.w     [w1+12], w1
    33fe:	11 01 78    	mov.w     [w1], w2
    3400:	9e 00 78    	mov.w     [w14], w1
    3402:	f1 48 90    	mov.b     [w1+15], w1
    3404:	81 80 fb    	ze        w1, w1
    3406:	13 00 20    	mov.w     #0x1, w3
    3408:	81 18 dd    	sl.w      w3, w1, w1
    340a:	82 80 70    	ior.w     w1, w2, w1
    340c:	01 08 78    	mov.w     w1, [w0]

0000340e <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    340e:	1e 00 78    	mov.w     [w14], w0
    3410:	10 00 78    	mov.w     [w0], w0
    3412:	9e 00 78    	mov.w     [w14], w1
    3414:	91 00 78    	mov.w     [w1], w1
    3416:	11 01 78    	mov.w     [w1], w2
    3418:	01 00 28    	mov.w     #0x8000, w1
    341a:	82 80 70    	ior.w     w1, w2, w1
    341c:	01 08 78    	mov.w     w1, [w0]

0000341e <.LSM220>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    341e:	1e 00 78    	mov.w     [w14], w0
    3420:	10 00 90    	mov.w     [w0+2], w0
    3422:	9e 00 78    	mov.w     [w14], w1
    3424:	91 00 90    	mov.w     [w1+2], w1
    3426:	11 01 78    	mov.w     [w1], w2
    3428:	01 40 20    	mov.w     #0x400, w1
    342a:	82 80 70    	ior.w     w1, w2, w1
    342c:	01 08 78    	mov.w     w1, [w0]
    342e:	17 00 37    	bra       0x345e <.L40>

00003430 <.L73>:
    3430:	00 00 00    	nop       
    3432:	15 00 37    	bra       0x345e <.L40>

00003434 <.L74>:
    3434:	00 00 00    	nop       
    3436:	13 00 37    	bra       0x345e <.L40>

00003438 <.L75>:
    3438:	00 00 00    	nop       
    343a:	11 00 37    	bra       0x345e <.L40>

0000343c <.L76>:
    343c:	00 00 00    	nop       
    343e:	0f 00 37    	bra       0x345e <.L40>

00003440 <.L77>:
    3440:	00 00 00    	nop       
    3442:	0d 00 37    	bra       0x345e <.L40>

00003444 <.L78>:
    3444:	00 00 00    	nop       
    3446:	0b 00 37    	bra       0x345e <.L40>

00003448 <.L79>:
    3448:	00 00 00    	nop       
    344a:	09 00 37    	bra       0x345e <.L40>

0000344c <.L80>:
    344c:	00 00 00    	nop       
    344e:	07 00 37    	bra       0x345e <.L40>

00003450 <.L81>:
    3450:	00 00 00    	nop       
    3452:	05 00 37    	bra       0x345e <.L40>

00003454 <.L82>:
    3454:	00 00 00    	nop       
    3456:	03 00 37    	bra       0x345e <.L40>

00003458 <.L83>:
    3458:	00 00 00    	nop       
    345a:	01 00 37    	bra       0x345e <.L40>

0000345c <.L84>:
    345c:	00 00 00    	nop       

0000345e <.L40>:
}
    345e:	4f 04 78    	mov.w     [--w15], w8
    3460:	00 80 fa    	ulnk      
    3462:	00 00 06    	return    

00003464 <_uart_close>:

void uart_close(_UART *self) {
    3464:	02 00 fa    	lnk       #0x2
    3466:	00 0f 78    	mov.w     w0, [w14]

00003468 <.LSM230>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    3468:	1e 00 78    	mov.w     [w14], w0
    346a:	10 00 90    	mov.w     [w0+2], w0
    346c:	9e 00 78    	mov.w     [w14], w1
    346e:	91 00 90    	mov.w     [w1+2], w1
    3470:	11 01 78    	mov.w     [w1], w2
    3472:	f1 bf 2f    	mov.w     #0xfbff, w1
    3474:	81 00 61    	and.w     w2, w1, w1
    3476:	01 08 78    	mov.w     w1, [w0]

00003478 <.LSM231>:
    *(self->UxMODE) = 0;        // Disable UART module
    3478:	1e 00 78    	mov.w     [w14], w0
    347a:	10 00 78    	mov.w     [w0], w0
    347c:	80 00 eb    	clr.w     w1
    347e:	01 08 78    	mov.w     w1, [w0]

00003480 <.LSM232>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    3480:	1e 00 78    	mov.w     [w14], w0
    3482:	60 00 90    	mov.w     [w0+12], w0
    3484:	9e 00 78    	mov.w     [w14], w1
    3486:	e1 00 90    	mov.w     [w1+12], w1
    3488:	11 01 78    	mov.w     [w1], w2
    348a:	9e 00 78    	mov.w     [w14], w1
    348c:	e1 48 90    	mov.b     [w1+14], w1
    348e:	81 80 fb    	ze        w1, w1
    3490:	13 00 20    	mov.w     #0x1, w3
    3492:	81 18 dd    	sl.w      w3, w1, w1
    3494:	81 80 ea    	com.w     w1, w1
    3496:	81 00 61    	and.w     w2, w1, w1
    3498:	01 08 78    	mov.w     w1, [w0]

0000349a <.LSM233>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    349a:	1e 00 78    	mov.w     [w14], w0
    349c:	60 00 90    	mov.w     [w0+12], w0
    349e:	9e 00 78    	mov.w     [w14], w1
    34a0:	e1 00 90    	mov.w     [w1+12], w1
    34a2:	11 01 78    	mov.w     [w1], w2
    34a4:	9e 00 78    	mov.w     [w14], w1
    34a6:	f1 48 90    	mov.b     [w1+15], w1
    34a8:	81 80 fb    	ze        w1, w1
    34aa:	13 00 20    	mov.w     #0x1, w3
    34ac:	81 18 dd    	sl.w      w3, w1, w1
    34ae:	81 80 ea    	com.w     w1, w1
    34b0:	81 00 61    	and.w     w2, w1, w1
    34b2:	01 08 78    	mov.w     w1, [w0]

000034b4 <.LSM234>:
    self->putc = NULL;
    34b4:	1e 00 78    	mov.w     [w14], w0
    34b6:	80 00 eb    	clr.w     w1
    34b8:	41 18 98    	mov.w     w1, [w0+56]

000034ba <.LSM235>:
    self->getc = NULL;
    34ba:	1e 00 78    	mov.w     [w14], w0
    34bc:	80 00 eb    	clr.w     w1
    34be:	51 18 98    	mov.w     w1, [w0+58]

000034c0 <.LSM236>:
    if (self->TX) {
    34c0:	1e 00 78    	mov.w     [w14], w0
    34c2:	50 08 90    	mov.w     [w0+26], w0
    34c4:	00 00 e0    	cp0.w     w0
    34c6:	2f 00 32    	bra       Z, 0x3526 <.L86>

000034c8 <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    34c8:	11 3a 80    	mov.w     0x742, w1
    34ca:	f0 0b 20    	mov.w     #0xbf, w0
    34cc:	00 81 60    	and.w     w1, w0, w2
    34ce:	60 04 20    	mov.w     #0x46, w0
    34d0:	71 05 20    	mov.w     #0x57, w1
    34d2:	23 74 20    	mov.w     #0x742, w3
    34d4:	80 49 78    	mov.b     w0, [w3]
    34d6:	81 49 78    	mov.b     w1, [w3]
    34d8:	82 49 78    	mov.b     w2, [w3]

000034da <.LSM238>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    34da:	1e 00 78    	mov.w     [w14], w0
    34dc:	50 08 90    	mov.w     [w0+26], w0
    34de:	70 00 90    	mov.w     [w0+14], w0
    34e0:	9e 00 78    	mov.w     [w14], w1
    34e2:	d1 08 90    	mov.w     [w1+26], w1
    34e4:	f1 00 90    	mov.w     [w1+14], w1
    34e6:	11 01 78    	mov.w     [w1], w2
    34e8:	9e 00 78    	mov.w     [w14], w1
    34ea:	d1 08 90    	mov.w     [w1+26], w1
    34ec:	a1 48 90    	mov.b     [w1+10], w1
    34ee:	81 80 fb    	ze        w1, w1
    34f0:	f3 03 20    	mov.w     #0x3f, w3
    34f2:	81 18 dd    	sl.w      w3, w1, w1
    34f4:	81 80 ea    	com.w     w1, w1
    34f6:	81 00 61    	and.w     w2, w1, w1
    34f8:	01 08 78    	mov.w     w1, [w0]

000034fa <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    34fa:	11 3a 80    	mov.w     0x742, w1
    34fc:	00 04 20    	mov.w     #0x40, w0
    34fe:	01 01 70    	ior.w     w0, w1, w2
    3500:	60 04 20    	mov.w     #0x46, w0
    3502:	71 05 20    	mov.w     #0x57, w1
    3504:	23 74 20    	mov.w     #0x742, w3
    3506:	80 49 78    	mov.b     w0, [w3]
    3508:	81 49 78    	mov.b     w1, [w3]
    350a:	82 49 78    	mov.b     w2, [w3]

0000350c <.LSM240>:
        self->TX->owner = NULL;
    350c:	1e 00 78    	mov.w     [w14], w0
    350e:	50 08 90    	mov.w     [w0+26], w0
    3510:	80 00 eb    	clr.w     w1
    3512:	01 08 98    	mov.w     w1, [w0+16]

00003514 <.LSM241>:
        pin_digitalOut(self->TX);
    3514:	1e 00 78    	mov.w     [w14], w0
    3516:	50 08 90    	mov.w     [w0+26], w0
    3518:	95 05 07    	rcall     0x4044 <_pin_digitalOut>

0000351a <.LSM242>:
        pin_set(self->TX);
    351a:	1e 00 78    	mov.w     [w14], w0
    351c:	50 08 90    	mov.w     [w0+26], w0
    351e:	ef 05 07    	rcall     0x40fe <_pin_set>

00003520 <.LSM243>:
        self->TX = NULL;
    3520:	1e 00 78    	mov.w     [w14], w0
    3522:	80 00 eb    	clr.w     w1
    3524:	51 08 98    	mov.w     w1, [w0+26]

00003526 <.L86>:
    }
    if (self->RX) {
    3526:	1e 00 78    	mov.w     [w14], w0
    3528:	60 08 90    	mov.w     [w0+28], w0
    352a:	00 00 e0    	cp0.w     w0
    352c:	28 00 32    	bra       Z, 0x357e <.L87>

0000352e <.LSM245>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    352e:	11 3a 80    	mov.w     0x742, w1
    3530:	f0 0b 20    	mov.w     #0xbf, w0
    3532:	00 81 60    	and.w     w1, w0, w2
    3534:	60 04 20    	mov.w     #0x46, w0
    3536:	71 05 20    	mov.w     #0x57, w1
    3538:	23 74 20    	mov.w     #0x742, w3
    353a:	80 49 78    	mov.b     w0, [w3]
    353c:	81 49 78    	mov.b     w1, [w3]
    353e:	82 49 78    	mov.b     w2, [w3]

00003540 <.LSM246>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    3540:	1e 00 78    	mov.w     [w14], w0
    3542:	00 08 90    	mov.w     [w0+16], w0
    3544:	9e 00 78    	mov.w     [w14], w1
    3546:	81 08 90    	mov.w     [w1+16], w1
    3548:	11 01 78    	mov.w     [w1], w2
    354a:	9e 00 78    	mov.w     [w14], w1
    354c:	c1 50 90    	mov.b     [w1+20], w1
    354e:	81 80 fb    	ze        w1, w1
    3550:	f3 03 20    	mov.w     #0x3f, w3
    3552:	81 18 dd    	sl.w      w3, w1, w1
    3554:	82 80 70    	ior.w     w1, w2, w1
    3556:	01 08 78    	mov.w     w1, [w0]

00003558 <.LSM247>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3558:	11 3a 80    	mov.w     0x742, w1
    355a:	00 04 20    	mov.w     #0x40, w0
    355c:	01 01 70    	ior.w     w0, w1, w2
    355e:	60 04 20    	mov.w     #0x46, w0
    3560:	71 05 20    	mov.w     #0x57, w1
    3562:	23 74 20    	mov.w     #0x742, w3
    3564:	80 49 78    	mov.b     w0, [w3]
    3566:	81 49 78    	mov.b     w1, [w3]
    3568:	82 49 78    	mov.b     w2, [w3]

0000356a <.LSM248>:
        self->RX->owner = NULL;
    356a:	1e 00 78    	mov.w     [w14], w0
    356c:	60 08 90    	mov.w     [w0+28], w0
    356e:	80 00 eb    	clr.w     w1
    3570:	01 08 98    	mov.w     w1, [w0+16]

00003572 <.LSM249>:
        pin_digitalIn(self->RX);
    3572:	1e 00 78    	mov.w     [w14], w0
    3574:	60 08 90    	mov.w     [w0+28], w0
    3576:	3f 05 07    	rcall     0x3ff6 <_pin_digitalIn>

00003578 <.LSM250>:
        self->RX = NULL;
    3578:	1e 00 78    	mov.w     [w14], w0
    357a:	80 00 eb    	clr.w     w1
    357c:	61 08 98    	mov.w     w1, [w0+28]

0000357e <.L87>:
    }
    if (self->RTS) {
    357e:	1e 00 78    	mov.w     [w14], w0
    3580:	70 08 90    	mov.w     [w0+30], w0
    3582:	00 00 e0    	cp0.w     w0
    3584:	2f 00 32    	bra       Z, 0x35e4 <.L88>

00003586 <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3586:	11 3a 80    	mov.w     0x742, w1
    3588:	f0 0b 20    	mov.w     #0xbf, w0
    358a:	00 81 60    	and.w     w1, w0, w2
    358c:	60 04 20    	mov.w     #0x46, w0
    358e:	71 05 20    	mov.w     #0x57, w1
    3590:	23 74 20    	mov.w     #0x742, w3
    3592:	80 49 78    	mov.b     w0, [w3]
    3594:	81 49 78    	mov.b     w1, [w3]
    3596:	82 49 78    	mov.b     w2, [w3]

00003598 <.LSM253>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    3598:	1e 00 78    	mov.w     [w14], w0
    359a:	70 08 90    	mov.w     [w0+30], w0
    359c:	70 00 90    	mov.w     [w0+14], w0
    359e:	9e 00 78    	mov.w     [w14], w1
    35a0:	f1 08 90    	mov.w     [w1+30], w1
    35a2:	f1 00 90    	mov.w     [w1+14], w1
    35a4:	11 01 78    	mov.w     [w1], w2
    35a6:	9e 00 78    	mov.w     [w14], w1
    35a8:	f1 08 90    	mov.w     [w1+30], w1
    35aa:	a1 48 90    	mov.b     [w1+10], w1
    35ac:	81 80 fb    	ze        w1, w1
    35ae:	f3 03 20    	mov.w     #0x3f, w3
    35b0:	81 18 dd    	sl.w      w3, w1, w1
    35b2:	81 80 ea    	com.w     w1, w1
    35b4:	81 00 61    	and.w     w2, w1, w1
    35b6:	01 08 78    	mov.w     w1, [w0]

000035b8 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    35b8:	11 3a 80    	mov.w     0x742, w1
    35ba:	00 04 20    	mov.w     #0x40, w0
    35bc:	01 01 70    	ior.w     w0, w1, w2
    35be:	60 04 20    	mov.w     #0x46, w0
    35c0:	71 05 20    	mov.w     #0x57, w1
    35c2:	23 74 20    	mov.w     #0x742, w3
    35c4:	80 49 78    	mov.b     w0, [w3]
    35c6:	81 49 78    	mov.b     w1, [w3]
    35c8:	82 49 78    	mov.b     w2, [w3]

000035ca <.LSM255>:
        self->RTS->owner = NULL;
    35ca:	1e 00 78    	mov.w     [w14], w0
    35cc:	70 08 90    	mov.w     [w0+30], w0
    35ce:	80 00 eb    	clr.w     w1
    35d0:	01 08 98    	mov.w     w1, [w0+16]

000035d2 <.LSM256>:
        pin_digitalOut(self->RTS);
    35d2:	1e 00 78    	mov.w     [w14], w0
    35d4:	70 08 90    	mov.w     [w0+30], w0
    35d6:	36 05 07    	rcall     0x4044 <_pin_digitalOut>

000035d8 <.LSM257>:
        pin_set(self->RTS);
    35d8:	1e 00 78    	mov.w     [w14], w0
    35da:	70 08 90    	mov.w     [w0+30], w0
    35dc:	90 05 07    	rcall     0x40fe <_pin_set>

000035de <.LSM258>:
        self->RTS = NULL;
    35de:	1e 00 78    	mov.w     [w14], w0
    35e0:	80 00 eb    	clr.w     w1
    35e2:	71 08 98    	mov.w     w1, [w0+30]

000035e4 <.L88>:
    }
    if (self->CTS) {
    35e4:	1e 00 78    	mov.w     [w14], w0
    35e6:	00 10 90    	mov.w     [w0+32], w0
    35e8:	00 00 e0    	cp0.w     w0
    35ea:	28 00 32    	bra       Z, 0x363c <.L85>

000035ec <.LSM260>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    35ec:	11 3a 80    	mov.w     0x742, w1
    35ee:	f0 0b 20    	mov.w     #0xbf, w0
    35f0:	00 81 60    	and.w     w1, w0, w2
    35f2:	60 04 20    	mov.w     #0x46, w0
    35f4:	71 05 20    	mov.w     #0x57, w1
    35f6:	23 74 20    	mov.w     #0x742, w3
    35f8:	80 49 78    	mov.b     w0, [w3]
    35fa:	81 49 78    	mov.b     w1, [w3]
    35fc:	82 49 78    	mov.b     w2, [w3]

000035fe <.LSM261>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    35fe:	1e 00 78    	mov.w     [w14], w0
    3600:	10 08 90    	mov.w     [w0+18], w0
    3602:	9e 00 78    	mov.w     [w14], w1
    3604:	91 08 90    	mov.w     [w1+18], w1
    3606:	11 01 78    	mov.w     [w1], w2
    3608:	9e 00 78    	mov.w     [w14], w1
    360a:	d1 50 90    	mov.b     [w1+21], w1
    360c:	81 80 fb    	ze        w1, w1
    360e:	f3 03 20    	mov.w     #0x3f, w3
    3610:	81 18 dd    	sl.w      w3, w1, w1
    3612:	82 80 70    	ior.w     w1, w2, w1
    3614:	01 08 78    	mov.w     w1, [w0]

00003616 <.LSM262>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3616:	11 3a 80    	mov.w     0x742, w1
    3618:	00 04 20    	mov.w     #0x40, w0
    361a:	01 01 70    	ior.w     w0, w1, w2
    361c:	60 04 20    	mov.w     #0x46, w0
    361e:	71 05 20    	mov.w     #0x57, w1
    3620:	23 74 20    	mov.w     #0x742, w3
    3622:	80 49 78    	mov.b     w0, [w3]
    3624:	81 49 78    	mov.b     w1, [w3]
    3626:	82 49 78    	mov.b     w2, [w3]

00003628 <.LSM263>:
        self->CTS->owner = NULL;
    3628:	1e 00 78    	mov.w     [w14], w0
    362a:	00 10 90    	mov.w     [w0+32], w0
    362c:	80 00 eb    	clr.w     w1
    362e:	01 08 98    	mov.w     w1, [w0+16]

00003630 <.LSM264>:
        pin_digitalIn(self->CTS);
    3630:	1e 00 78    	mov.w     [w14], w0
    3632:	00 10 90    	mov.w     [w0+32], w0
    3634:	e0 04 07    	rcall     0x3ff6 <_pin_digitalIn>

00003636 <.LSM265>:
        self->CTS = NULL;
    3636:	1e 00 78    	mov.w     [w14], w0
    3638:	80 00 eb    	clr.w     w1
    363a:	01 10 98    	mov.w     w1, [w0+32]

0000363c <.L85>:
    }
}
    363c:	00 80 fa    	ulnk      
    363e:	00 00 06    	return    

00003640 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    3640:	04 00 fa    	lnk       #0x4
    3642:	00 0f 78    	mov.w     w0, [w14]
    3644:	21 47 98    	mov.b     w1, [w14+2]

00003646 <.LSM268>:
    if (self->putc)
    3646:	1e 00 78    	mov.w     [w14], w0
    3648:	40 18 90    	mov.w     [w0+56], w0
    364a:	00 00 e0    	cp0.w     w0
    364c:	05 00 32    	bra       Z, 0x3658 <.L90>

0000364e <.LSM269>:
        self->putc(self, ch);
    364e:	1e 00 78    	mov.w     [w14], w0
    3650:	40 19 90    	mov.w     [w0+56], w2
    3652:	ae 40 90    	mov.b     [w14+2], w1
    3654:	1e 00 78    	mov.w     [w14], w0
    3656:	02 00 01    	call      w2

00003658 <.L90>:
}
    3658:	00 80 fa    	ulnk      
    365a:	00 00 06    	return    

0000365c <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    365c:	02 00 fa    	lnk       #0x2
    365e:	00 0f 78    	mov.w     w0, [w14]

00003660 <.LSM272>:
    if (self->getc)
    3660:	1e 00 78    	mov.w     [w14], w0
    3662:	50 18 90    	mov.w     [w0+58], w0
    3664:	00 00 e0    	cp0.w     w0
    3666:	05 00 32    	bra       Z, 0x3672 <.L93>

00003668 <.LSM273>:
        return self->getc(self);
    3668:	1e 00 78    	mov.w     [w14], w0
    366a:	d0 18 90    	mov.w     [w0+58], w1
    366c:	1e 00 78    	mov.w     [w14], w0
    366e:	01 00 01    	call      w1
    3670:	01 00 37    	bra       0x3674 <.L94>

00003672 <.L93>:
    else
        return 0xFF;
    3672:	00 c0 eb    	setm.b    w0

00003674 <.L94>:
}
    3674:	00 80 fa    	ulnk      
    3676:	00 00 06    	return    

00003678 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    3678:	02 00 fa    	lnk       #0x2
    367a:	00 0f 78    	mov.w     w0, [w14]

0000367c <.LSM277>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    367c:	1e 00 78    	mov.w     [w14], w0
    367e:	10 00 90    	mov.w     [w0+2], w0
    3680:	90 00 78    	mov.w     [w0], w1
    3682:	00 40 20    	mov.w     #0x400, w0
    3684:	00 80 60    	and.w     w1, w0, w0
    3686:	00 00 e0    	cp0.w     w0
    3688:	08 00 3a    	bra       NZ, 0x369a <.L95>

0000368a <.LSM278>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    368a:	1e 00 78    	mov.w     [w14], w0
    368c:	10 00 90    	mov.w     [w0+2], w0
    368e:	9e 00 78    	mov.w     [w14], w1
    3690:	91 00 90    	mov.w     [w1+2], w1
    3692:	11 01 78    	mov.w     [w1], w2
    3694:	01 40 20    	mov.w     #0x400, w1
    3696:	82 80 70    	ior.w     w1, w2, w1
    3698:	01 08 78    	mov.w     w1, [w0]

0000369a <.L95>:
}
    369a:	00 80 fa    	ulnk      
    369c:	00 00 06    	return    

0000369e <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    369e:	04 00 fa    	lnk       #0x4
    36a0:	00 0f 78    	mov.w     w0, [w14]
    36a2:	11 07 98    	mov.w     w1, [w14+2]

000036a4 <.LSM281>:
    while (*str)
    36a4:	08 00 37    	bra       0x36b6 <.L98>

000036a6 <.L99>:
        uart_putc(self, *str++);
    36a6:	1e 00 90    	mov.w     [w14+2], w0
    36a8:	10 40 78    	mov.b     [w0], w0
    36aa:	9e 00 90    	mov.w     [w14+2], w1
    36ac:	81 00 e8    	inc.w     w1, w1
    36ae:	11 07 98    	mov.w     w1, [w14+2]
    36b0:	80 40 78    	mov.b     w0, w1
    36b2:	1e 00 78    	mov.w     [w14], w0
    36b4:	c5 ff 07    	rcall     0x3640 <_uart_putc>

000036b6 <.L98>:
    36b6:	1e 00 90    	mov.w     [w14+2], w0
    36b8:	10 40 78    	mov.b     [w0], w0
    36ba:	00 04 e0    	cp0.b     w0
    36bc:	f4 ff 3a    	bra       NZ, 0x36a6 <.L99>

000036be <.LSM284>:
    uart_flushTxBuffer(self);
    36be:	1e 00 78    	mov.w     [w14], w0
    36c0:	db ff 07    	rcall     0x3678 <_uart_flushTxBuffer>

000036c2 <.LSM285>:
}
    36c2:	00 80 fa    	ulnk      
    36c4:	00 00 06    	return    

000036c6 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    36c6:	0a 00 fa    	lnk       #0xa
    36c8:	20 07 98    	mov.w     w0, [w14+4]
    36ca:	31 07 98    	mov.w     w1, [w14+6]
    36cc:	42 07 98    	mov.w     w2, [w14+8]

000036ce <.LSM287>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    36ce:	4e 00 90    	mov.w     [w14+8], w0
    36d0:	00 00 e0    	cp0.w     w0
    36d2:	87 00 32    	bra       Z, 0x37e2 <.L113>

000036d4 <.LSM288>:
        return;

    if (len==1) {
    36d4:	4e 00 90    	mov.w     [w14+8], w0
    36d6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    36d8:	04 00 3a    	bra       NZ, 0x36e2 <.L103>

000036da <.LSM289>:
        *str = '\0';
    36da:	3e 00 90    	mov.w     [w14+6], w0
    36dc:	80 40 eb    	clr.b     w1
    36de:	01 48 78    	mov.b     w1, [w0]

000036e0 <.LSM290>:
        return;
    36e0:	81 00 37    	bra       0x37e4 <.L100>

000036e2 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    36e2:	b1 c1 b3    	mov.b     #0x1b, w1
    36e4:	2e 00 90    	mov.w     [w14+4], w0
    36e6:	ac ff 07    	rcall     0x3640 <_uart_putc>

000036e8 <.LSM292>:
    uart_putc(self, '7');
    36e8:	71 c3 b3    	mov.b     #0x37, w1
    36ea:	2e 00 90    	mov.w     [w14+4], w0
    36ec:	a9 ff 07    	rcall     0x3640 <_uart_putc>

000036ee <.LSM293>:
    uart_flushTxBuffer(self);
    36ee:	2e 00 90    	mov.w     [w14+4], w0
    36f0:	c3 ff 07    	rcall     0x3678 <_uart_flushTxBuffer>

000036f2 <.LSM294>:
    start = str;
    36f2:	be 00 90    	mov.w     [w14+6], w1
    36f4:	11 07 98    	mov.w     w1, [w14+2]

000036f6 <.LSM295>:
    left = len;
    36f6:	ce 00 90    	mov.w     [w14+8], w1
    36f8:	01 0f 78    	mov.w     w1, [w14]
    36fa:	03 00 37    	bra       0x3702 <.L112>

000036fc <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    36fc:	00 00 00    	nop       
    36fe:	01 00 37    	bra       0x3702 <.L112>

00003700 <.L115>:
    3700:	00 00 00    	nop       

00003702 <.L112>:
    3702:	2e 00 90    	mov.w     [w14+4], w0
    3704:	ab ff 07    	rcall     0x365c <_uart_getc>
    3706:	be 00 90    	mov.w     [w14+6], w1
    3708:	80 48 78    	mov.b     w0, [w1]

0000370a <.LSM298>:
    370a:	3e 00 90    	mov.w     [w14+6], w0
    370c:	10 40 78    	mov.b     [w0], w0
    370e:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3710:	0c 00 3a    	bra       NZ, 0x372a <.L104>

00003712 <.LSM299>:

    *str = '\0';                            // Terminarte the string with null
    3712:	3e 00 90    	mov.w     [w14+6], w0
    3714:	80 40 eb    	clr.b     w1
    3716:	01 48 78    	mov.b     w1, [w0]

00003718 <.LSM300>:
    uart_putc(self, '\n');                  // Send newline and
    3718:	a1 c0 b3    	mov.b     #0xa, w1
    371a:	2e 00 90    	mov.w     [w14+4], w0
    371c:	91 ff 07    	rcall     0x3640 <_uart_putc>

0000371e <.LSM301>:
    uart_putc(self, '\r');                  //   carriage return
    371e:	d1 c0 b3    	mov.b     #0xd, w1
    3720:	2e 00 90    	mov.w     [w14+4], w0
    3722:	8e ff 07    	rcall     0x3640 <_uart_putc>

00003724 <.LSM302>:
    uart_flushTxBuffer(self);
    3724:	2e 00 90    	mov.w     [w14+4], w0
    3726:	a8 ff 07    	rcall     0x3678 <_uart_flushTxBuffer>
    3728:	5d 00 37    	bra       0x37e4 <.L100>

0000372a <.L104>:
    372a:	3e 00 90    	mov.w     [w14+6], w0
    372c:	10 40 78    	mov.b     [w0], w0
    372e:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    3730:	16 00 3a    	bra       NZ, 0x375e <.L105>

00003732 <.LSM304>:
    3732:	b1 c1 b3    	mov.b     #0x1b, w1
    3734:	2e 00 90    	mov.w     [w14+4], w0
    3736:	84 ff 07    	rcall     0x3640 <_uart_putc>

00003738 <.LSM305>:
    3738:	81 c3 b3    	mov.b     #0x38, w1
    373a:	2e 00 90    	mov.w     [w14+4], w0
    373c:	81 ff 07    	rcall     0x3640 <_uart_putc>

0000373e <.LSM306>:
    373e:	b1 c1 b3    	mov.b     #0x1b, w1
    3740:	2e 00 90    	mov.w     [w14+4], w0
    3742:	7e ff 07    	rcall     0x3640 <_uart_putc>

00003744 <.LSM307>:
    3744:	b1 c5 b3    	mov.b     #0x5b, w1
    3746:	2e 00 90    	mov.w     [w14+4], w0
    3748:	7b ff 07    	rcall     0x3640 <_uart_putc>

0000374a <.LSM308>:
    374a:	b1 c4 b3    	mov.b     #0x4b, w1
    374c:	2e 00 90    	mov.w     [w14+4], w0
    374e:	78 ff 07    	rcall     0x3640 <_uart_putc>

00003750 <.LSM309>:
    3750:	2e 00 90    	mov.w     [w14+4], w0
    3752:	92 ff 07    	rcall     0x3678 <_uart_flushTxBuffer>

00003754 <.LSM310>:
    3754:	9e 00 90    	mov.w     [w14+2], w1
    3756:	31 07 98    	mov.w     w1, [w14+6]

00003758 <.LSM311>:
    3758:	ce 00 90    	mov.w     [w14+8], w1
    375a:	01 0f 78    	mov.w     w1, [w14]

0000375c <.LSM312>:
    375c:	41 00 37    	bra       0x37e0 <.L106>

0000375e <.L105>:
    375e:	3e 00 90    	mov.w     [w14+6], w0
    3760:	10 40 78    	mov.b     [w0], w0
    3762:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    3764:	05 00 32    	bra       Z, 0x3770 <.L107>

00003766 <.LSM314>:
    3766:	3e 00 90    	mov.w     [w14+6], w0
    3768:	90 40 78    	mov.b     [w0], w1

0000376a <.LSM315>:
    376a:	f0 c7 b3    	mov.b     #0x7f, w0
    376c:	80 cf 50    	sub.b     w1, w0, [w15]
    376e:	1a 00 3a    	bra       NZ, 0x37a4 <.L108>

00003770 <.L107>:
    3770:	be 00 90    	mov.w     [w14+6], w1
    3772:	1e 00 90    	mov.w     [w14+2], w0
    3774:	80 8f 50    	sub.w     w1, w0, [w15]
    3776:	10 00 36    	bra       LEU, 0x3798 <.L109>

00003778 <.LSM317>:
    3778:	81 c0 b3    	mov.b     #0x8, w1
    377a:	2e 00 90    	mov.w     [w14+4], w0
    377c:	61 ff 07    	rcall     0x3640 <_uart_putc>

0000377e <.LSM318>:
    377e:	01 c2 b3    	mov.b     #0x20, w1
    3780:	2e 00 90    	mov.w     [w14+4], w0
    3782:	5e ff 07    	rcall     0x3640 <_uart_putc>

00003784 <.LSM319>:
    3784:	81 c0 b3    	mov.b     #0x8, w1
    3786:	2e 00 90    	mov.w     [w14+4], w0
    3788:	5b ff 07    	rcall     0x3640 <_uart_putc>

0000378a <.LSM320>:
    378a:	2e 00 90    	mov.w     [w14+4], w0
    378c:	75 ff 07    	rcall     0x3678 <_uart_flushTxBuffer>

0000378e <.LSM321>:
    378e:	3e 00 90    	mov.w     [w14+6], w0
    3790:	00 00 e9    	dec.w     w0, w0
    3792:	30 07 98    	mov.w     w0, [w14+6]

00003794 <.LSM322>:
    3794:	1e 0f e8    	inc.w     [w14], [w14]
    3796:	05 00 37    	bra       0x37a2 <.L110>

00003798 <.L109>:
    3798:	71 c0 b3    	mov.b     #0x7, w1
    379a:	2e 00 90    	mov.w     [w14+4], w0
    379c:	51 ff 07    	rcall     0x3640 <_uart_putc>

0000379e <.LSM324>:
    379e:	2e 00 90    	mov.w     [w14+4], w0
    37a0:	6b ff 07    	rcall     0x3678 <_uart_flushTxBuffer>

000037a2 <.L110>:
    37a2:	1e 00 37    	bra       0x37e0 <.L106>

000037a4 <.L108>:
    37a4:	1e 00 78    	mov.w     [w14], w0
    37a6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    37a8:	06 00 3a    	bra       NZ, 0x37b6 <.L111>

000037aa <.LSM327>:
    37aa:	71 c0 b3    	mov.b     #0x7, w1
    37ac:	2e 00 90    	mov.w     [w14+4], w0
    37ae:	48 ff 07    	rcall     0x3640 <_uart_putc>

000037b0 <.LSM328>:
    37b0:	2e 00 90    	mov.w     [w14+4], w0
    37b2:	62 ff 07    	rcall     0x3678 <_uart_flushTxBuffer>

000037b4 <.LSM329>:
    37b4:	15 00 37    	bra       0x37e0 <.L106>

000037b6 <.L111>:
    37b6:	3e 00 90    	mov.w     [w14+6], w0
    37b8:	10 40 78    	mov.b     [w0], w0
    37ba:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    37bc:	9f ff 36    	bra       LEU, 0x36fc <.L114>
    37be:	3e 00 90    	mov.w     [w14+6], w0
    37c0:	90 40 78    	mov.b     [w0], w1
    37c2:	e0 c7 b3    	mov.b     #0x7e, w0
    37c4:	80 cf 50    	sub.b     w1, w0, [w15]
    37c6:	9c ff 3e    	bra       GTU, 0x3700 <.L115>

000037c8 <.LSM331>:
    37c8:	3e 00 90    	mov.w     [w14+6], w0
    37ca:	10 40 78    	mov.b     [w0], w0
    37cc:	80 40 78    	mov.b     w0, w1
    37ce:	2e 00 90    	mov.w     [w14+4], w0
    37d0:	37 ff 07    	rcall     0x3640 <_uart_putc>

000037d2 <.LSM332>:
    37d2:	2e 00 90    	mov.w     [w14+4], w0
    37d4:	51 ff 07    	rcall     0x3678 <_uart_flushTxBuffer>

000037d6 <.LSM333>:
    37d6:	3e 00 90    	mov.w     [w14+6], w0
    37d8:	00 00 e8    	inc.w     w0, w0
    37da:	30 07 98    	mov.w     w0, [w14+6]

000037dc <.LSM334>:
    37dc:	1e 0f e9    	dec.w     [w14], [w14]

000037de <.LSM335>:
    37de:	91 ff 37    	bra       0x3702 <.L112>

000037e0 <.L106>:
    37e0:	90 ff 37    	bra       0x3702 <.L112>

000037e2 <.L113>:
    37e2:	00 00 00    	nop       

000037e4 <.L100>:
}
    37e4:	00 80 fa    	ulnk      
    37e6:	00 00 06    	return    

000037e8 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    37e8:	02 00 fa    	lnk       #0x2
    37ea:	00 0f 78    	mov.w     w0, [w14]

000037ec <.LSM1>:
    timer_lower(self);
    37ec:	1e 00 78    	mov.w     [w14], w0
    37ee:	01 02 07    	rcall     0x3bf2 <_timer_lower>

000037f0 <.LSM2>:
    if (self->every) {
    37f0:	1e 00 78    	mov.w     [w14], w0
    37f2:	10 08 90    	mov.w     [w0+18], w0
    37f4:	00 00 e0    	cp0.w     w0
    37f6:	05 00 32    	bra       Z, 0x3802 <.L2>

000037f8 <.LSM3>:
        self->every(self);
    37f8:	1e 00 78    	mov.w     [w14], w0
    37fa:	90 08 90    	mov.w     [w0+18], w1
    37fc:	1e 00 78    	mov.w     [w14], w0
    37fe:	01 00 01    	call      w1
    3800:	1a 00 37    	bra       0x3836 <.L1>

00003802 <.L2>:
    } else if (self->after) {
    3802:	1e 00 78    	mov.w     [w14], w0
    3804:	20 08 90    	mov.w     [w0+20], w0
    3806:	00 00 e0    	cp0.w     w0
    3808:	14 00 32    	bra       Z, 0x3832 <.L4>

0000380a <.LSM5>:
        if (self->aftercount) {
    380a:	1e 00 78    	mov.w     [w14], w0
    380c:	00 08 90    	mov.w     [w0+16], w0
    380e:	00 00 e0    	cp0.w     w0
    3810:	0a 00 32    	bra       Z, 0x3826 <.L5>

00003812 <.LSM6>:
            self->after(self);
    3812:	1e 00 78    	mov.w     [w14], w0
    3814:	a0 08 90    	mov.w     [w0+20], w1
    3816:	1e 00 78    	mov.w     [w14], w0
    3818:	01 00 01    	call      w1

0000381a <.LSM7>:
            self->aftercount--;
    381a:	1e 00 78    	mov.w     [w14], w0
    381c:	00 08 90    	mov.w     [w0+16], w0
    381e:	80 00 e9    	dec.w     w0, w1
    3820:	1e 00 78    	mov.w     [w14], w0
    3822:	01 08 98    	mov.w     w1, [w0+16]
    3824:	08 00 37    	bra       0x3836 <.L1>

00003826 <.L5>:
        } else {
            timer_disableInterrupt(self);
    3826:	1e 00 78    	mov.w     [w14], w0
    3828:	0c 02 07    	rcall     0x3c42 <_timer_disableInterrupt>

0000382a <.LSM9>:
            self->after = NULL;
    382a:	1e 00 78    	mov.w     [w14], w0
    382c:	80 00 eb    	clr.w     w1
    382e:	21 08 98    	mov.w     w1, [w0+20]
    3830:	02 00 37    	bra       0x3836 <.L1>

00003832 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    3832:	1e 00 78    	mov.w     [w14], w0
    3834:	06 02 07    	rcall     0x3c42 <_timer_disableInterrupt>

00003836 <.L1>:
    }
}
    3836:	00 80 fa    	ulnk      
    3838:	00 00 06    	return    

0000383a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    383a:	36 00 f8    	push      0x36
    383c:	80 9f be    	mov.d     w0, [w15++]
    383e:	82 9f be    	mov.d     w2, [w15++]
    3840:	84 9f be    	mov.d     w4, [w15++]
    3842:	86 9f be    	mov.d     w6, [w15++]
    3844:	32 00 f8    	push      0x32
    3846:	34 00 f8    	push      0x34
    3848:	10 00 20    	mov.w     #0x1, w0
    384a:	a0 01 88    	mov.w     w0, 0x34
    384c:	00 20 20    	mov.w     #0x200, w0
    384e:	90 01 88    	mov.w     w0, 0x32
    3850:	00 00 fa    	lnk       #0x0

00003852 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    3852:	80 45 22    	mov.w     #0x2458, w0
    3854:	c9 ff 07    	rcall     0x37e8 <_timer_serviceInterrupt>

00003856 <.LSM14>:
}
    3856:	00 80 fa    	ulnk      
    3858:	34 00 f9    	pop       0x34
    385a:	32 00 f9    	pop       0x32
    385c:	4f 03 be    	mov.d     [--w15], w6
    385e:	4f 02 be    	mov.d     [--w15], w4
    3860:	4f 01 be    	mov.d     [--w15], w2
    3862:	4f 00 be    	mov.d     [--w15], w0
    3864:	36 00 f9    	pop       0x36
    3866:	00 40 06    	retfie    

00003868 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    3868:	36 00 f8    	push      0x36
    386a:	80 9f be    	mov.d     w0, [w15++]
    386c:	82 9f be    	mov.d     w2, [w15++]
    386e:	84 9f be    	mov.d     w4, [w15++]
    3870:	86 9f be    	mov.d     w6, [w15++]
    3872:	32 00 f8    	push      0x32
    3874:	34 00 f8    	push      0x34
    3876:	10 00 20    	mov.w     #0x1, w0
    3878:	a0 01 88    	mov.w     w0, 0x34
    387a:	00 20 20    	mov.w     #0x200, w0
    387c:	90 01 88    	mov.w     w0, 0x32
    387e:	00 00 fa    	lnk       #0x0

00003880 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    3880:	e0 46 22    	mov.w     #0x246e, w0
    3882:	b2 ff 07    	rcall     0x37e8 <_timer_serviceInterrupt>

00003884 <.LSM17>:
}
    3884:	00 80 fa    	ulnk      
    3886:	34 00 f9    	pop       0x34
    3888:	32 00 f9    	pop       0x32
    388a:	4f 03 be    	mov.d     [--w15], w6
    388c:	4f 02 be    	mov.d     [--w15], w4
    388e:	4f 01 be    	mov.d     [--w15], w2
    3890:	4f 00 be    	mov.d     [--w15], w0
    3892:	36 00 f9    	pop       0x36
    3894:	00 40 06    	retfie    

00003896 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    3896:	36 00 f8    	push      0x36
    3898:	80 9f be    	mov.d     w0, [w15++]
    389a:	82 9f be    	mov.d     w2, [w15++]
    389c:	84 9f be    	mov.d     w4, [w15++]
    389e:	86 9f be    	mov.d     w6, [w15++]
    38a0:	32 00 f8    	push      0x32
    38a2:	34 00 f8    	push      0x34
    38a4:	10 00 20    	mov.w     #0x1, w0
    38a6:	a0 01 88    	mov.w     w0, 0x34
    38a8:	00 20 20    	mov.w     #0x200, w0
    38aa:	90 01 88    	mov.w     w0, 0x32
    38ac:	00 00 fa    	lnk       #0x0

000038ae <.LSM19>:
    timer_serviceInterrupt(&timer3);
    38ae:	40 48 22    	mov.w     #0x2484, w0
    38b0:	9b ff 07    	rcall     0x37e8 <_timer_serviceInterrupt>

000038b2 <.LSM20>:
}
    38b2:	00 80 fa    	ulnk      
    38b4:	34 00 f9    	pop       0x34
    38b6:	32 00 f9    	pop       0x32
    38b8:	4f 03 be    	mov.d     [--w15], w6
    38ba:	4f 02 be    	mov.d     [--w15], w4
    38bc:	4f 01 be    	mov.d     [--w15], w2
    38be:	4f 00 be    	mov.d     [--w15], w0
    38c0:	36 00 f9    	pop       0x36
    38c2:	00 40 06    	retfie    

000038c4 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    38c4:	36 00 f8    	push      0x36
    38c6:	80 9f be    	mov.d     w0, [w15++]
    38c8:	82 9f be    	mov.d     w2, [w15++]
    38ca:	84 9f be    	mov.d     w4, [w15++]
    38cc:	86 9f be    	mov.d     w6, [w15++]
    38ce:	32 00 f8    	push      0x32
    38d0:	34 00 f8    	push      0x34
    38d2:	10 00 20    	mov.w     #0x1, w0
    38d4:	a0 01 88    	mov.w     w0, 0x34
    38d6:	00 20 20    	mov.w     #0x200, w0
    38d8:	90 01 88    	mov.w     w0, 0x32
    38da:	00 00 fa    	lnk       #0x0

000038dc <.LSM22>:
    timer_serviceInterrupt(&timer4);
    38dc:	a0 49 22    	mov.w     #0x249a, w0
    38de:	84 ff 07    	rcall     0x37e8 <_timer_serviceInterrupt>

000038e0 <.LSM23>:
}
    38e0:	00 80 fa    	ulnk      
    38e2:	34 00 f9    	pop       0x34
    38e4:	32 00 f9    	pop       0x32
    38e6:	4f 03 be    	mov.d     [--w15], w6
    38e8:	4f 02 be    	mov.d     [--w15], w4
    38ea:	4f 01 be    	mov.d     [--w15], w2
    38ec:	4f 00 be    	mov.d     [--w15], w0
    38ee:	36 00 f9    	pop       0x36
    38f0:	00 40 06    	retfie    

000038f2 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    38f2:	36 00 f8    	push      0x36
    38f4:	80 9f be    	mov.d     w0, [w15++]
    38f6:	82 9f be    	mov.d     w2, [w15++]
    38f8:	84 9f be    	mov.d     w4, [w15++]
    38fa:	86 9f be    	mov.d     w6, [w15++]
    38fc:	32 00 f8    	push      0x32
    38fe:	34 00 f8    	push      0x34
    3900:	10 00 20    	mov.w     #0x1, w0
    3902:	a0 01 88    	mov.w     w0, 0x34
    3904:	00 20 20    	mov.w     #0x200, w0
    3906:	90 01 88    	mov.w     w0, 0x32
    3908:	00 00 fa    	lnk       #0x0

0000390a <.LSM25>:
    timer_serviceInterrupt(&timer5);
    390a:	00 4b 22    	mov.w     #0x24b0, w0
    390c:	6d ff 07    	rcall     0x37e8 <_timer_serviceInterrupt>

0000390e <.LSM26>:
}
    390e:	00 80 fa    	ulnk      
    3910:	34 00 f9    	pop       0x34
    3912:	32 00 f9    	pop       0x32
    3914:	4f 03 be    	mov.d     [--w15], w6
    3916:	4f 02 be    	mov.d     [--w15], w4
    3918:	4f 01 be    	mov.d     [--w15], w2
    391a:	4f 00 be    	mov.d     [--w15], w0
    391c:	36 00 f9    	pop       0x36
    391e:	00 40 06    	retfie    

00003920 <_init_timer>:

void init_timer(void) {
    3920:	00 00 fa    	lnk       #0x0

00003922 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    3922:	b0 00 20    	mov.w     #0xb, w0
    3924:	80 1f 78    	mov.w     w0, [w15++]
    3926:	47 00 20    	mov.w     #0x4, w7
    3928:	36 c0 b3    	mov.b     #0x3, w6
    392a:	45 09 20    	mov.w     #0x94, w5
    392c:	44 08 20    	mov.w     #0x84, w4
    392e:	03 10 20    	mov.w     #0x100, w3
    3930:	22 10 20    	mov.w     #0x102, w2
    3932:	41 10 20    	mov.w     #0x104, w1
    3934:	80 45 22    	mov.w     #0x2458, w0
    3936:	33 00 07    	rcall     0x399e <_timer_init>
    3938:	8f 87 e9    	dec2.w    w15, w15

0000393a <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    393a:	c0 00 20    	mov.w     #0xc, w0
    393c:	80 1f 78    	mov.w     w0, [w15++]
    393e:	80 03 eb    	clr.w     w7
    3940:	76 c0 b3    	mov.b     #0x7, w6
    3942:	45 09 20    	mov.w     #0x94, w5
    3944:	44 08 20    	mov.w     #0x84, w4
    3946:	63 10 20    	mov.w     #0x106, w3
    3948:	c2 10 20    	mov.w     #0x10c, w2
    394a:	01 11 20    	mov.w     #0x110, w1
    394c:	e0 46 22    	mov.w     #0x246e, w0
    394e:	27 00 07    	rcall     0x399e <_timer_init>
    3950:	8f 87 e9    	dec2.w    w15, w15

00003952 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    3952:	d0 00 20    	mov.w     #0xd, w0
    3954:	80 1f 78    	mov.w     w0, [w15++]
    3956:	17 00 20    	mov.w     #0x1, w7
    3958:	86 c0 b3    	mov.b     #0x8, w6
    395a:	45 09 20    	mov.w     #0x94, w5
    395c:	44 08 20    	mov.w     #0x84, w4
    395e:	a3 10 20    	mov.w     #0x10a, w3
    3960:	e2 10 20    	mov.w     #0x10e, w2
    3962:	21 11 20    	mov.w     #0x112, w1
    3964:	40 48 22    	mov.w     #0x2484, w0
    3966:	1b 00 07    	rcall     0x399e <_timer_init>
    3968:	8f 87 e9    	dec2.w    w15, w15

0000396a <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    396a:	e0 00 20    	mov.w     #0xe, w0
    396c:	80 1f 78    	mov.w     w0, [w15++]
    396e:	27 00 20    	mov.w     #0x2, w7
    3970:	b6 c0 b3    	mov.b     #0xb, w6
    3972:	65 09 20    	mov.w     #0x96, w5
    3974:	64 08 20    	mov.w     #0x86, w4
    3976:	43 11 20    	mov.w     #0x114, w3
    3978:	a2 11 20    	mov.w     #0x11a, w2
    397a:	e1 11 20    	mov.w     #0x11e, w1
    397c:	a0 49 22    	mov.w     #0x249a, w0
    397e:	0f 00 07    	rcall     0x399e <_timer_init>
    3980:	8f 87 e9    	dec2.w    w15, w15

00003982 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    3982:	f0 00 20    	mov.w     #0xf, w0
    3984:	80 1f 78    	mov.w     w0, [w15++]
    3986:	37 00 20    	mov.w     #0x3, w7
    3988:	c6 c0 b3    	mov.b     #0xc, w6
    398a:	65 09 20    	mov.w     #0x96, w5
    398c:	64 08 20    	mov.w     #0x86, w4
    398e:	83 11 20    	mov.w     #0x118, w3
    3990:	c2 11 20    	mov.w     #0x11c, w2
    3992:	01 12 20    	mov.w     #0x120, w1
    3994:	00 4b 22    	mov.w     #0x24b0, w0
    3996:	03 00 07    	rcall     0x399e <_timer_init>
    3998:	8f 87 e9    	dec2.w    w15, w15

0000399a <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    399a:	00 80 fa    	ulnk      
    399c:	00 00 06    	return    

0000399e <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    399e:	10 00 fa    	lnk       #0x10
    39a0:	00 0f 78    	mov.w     w0, [w14]
    39a2:	11 07 98    	mov.w     w1, [w14+2]
    39a4:	22 07 98    	mov.w     w2, [w14+4]
    39a6:	33 07 98    	mov.w     w3, [w14+6]
    39a8:	44 07 98    	mov.w     w4, [w14+8]
    39aa:	55 07 98    	mov.w     w5, [w14+10]
    39ac:	46 4f 98    	mov.b     w6, [w14+12]
    39ae:	77 07 98    	mov.w     w7, [w14+14]

000039b0 <.LSM35>:
    self->TxCON = TxCON;
    39b0:	1e 00 78    	mov.w     [w14], w0
    39b2:	9e 00 90    	mov.w     [w14+2], w1
    39b4:	01 08 78    	mov.w     w1, [w0]

000039b6 <.LSM36>:
    self->PRx = PRx;
    39b6:	1e 00 78    	mov.w     [w14], w0
    39b8:	ae 00 90    	mov.w     [w14+4], w1
    39ba:	11 00 98    	mov.w     w1, [w0+2]

000039bc <.LSM37>:
    self->TMRx = TMRx;
    39bc:	1e 00 78    	mov.w     [w14], w0
    39be:	be 00 90    	mov.w     [w14+6], w1
    39c0:	21 00 98    	mov.w     w1, [w0+4]

000039c2 <.LSM38>:
    self->IFSy = IFSy;
    39c2:	1e 00 78    	mov.w     [w14], w0
    39c4:	ce 00 90    	mov.w     [w14+8], w1
    39c6:	31 00 98    	mov.w     w1, [w0+6]

000039c8 <.LSM39>:
    self->IECy = IECy;
    39c8:	1e 00 78    	mov.w     [w14], w0
    39ca:	de 00 90    	mov.w     [w14+10], w1
    39cc:	41 00 98    	mov.w     w1, [w0+8]

000039ce <.LSM40>:
    self->flagbit = flagbit;
    39ce:	1e 00 78    	mov.w     [w14], w0
    39d0:	ce 48 90    	mov.b     [w14+12], w1
    39d2:	21 48 98    	mov.b     w1, [w0+10]

000039d4 <.LSM41>:
    self->octselnum = octselnum;
    39d4:	1e 00 78    	mov.w     [w14], w0
    39d6:	fe 00 90    	mov.w     [w14+14], w1
    39d8:	61 00 98    	mov.w     w1, [w0+12]

000039da <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    39da:	1e 00 78    	mov.w     [w14], w0
    39dc:	ce b8 97    	mov.w     [w14-8], w1
    39de:	71 00 98    	mov.w     w1, [w0+14]

000039e0 <.LSM43>:
    self->aftercount = 0;
    39e0:	1e 00 78    	mov.w     [w14], w0
    39e2:	80 00 eb    	clr.w     w1
    39e4:	01 08 98    	mov.w     w1, [w0+16]

000039e6 <.LSM44>:
    self->every = NULL;
    39e6:	1e 00 78    	mov.w     [w14], w0
    39e8:	80 00 eb    	clr.w     w1
    39ea:	11 08 98    	mov.w     w1, [w0+18]

000039ec <.LSM45>:
    self->after = NULL;
    39ec:	1e 00 78    	mov.w     [w14], w0
    39ee:	80 00 eb    	clr.w     w1
    39f0:	21 08 98    	mov.w     w1, [w0+20]

000039f2 <.LSM46>:
}
    39f2:	00 80 fa    	ulnk      
    39f4:	00 00 06    	return    

000039f6 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    39f6:	06 00 fa    	lnk       #0x6
    39f8:	88 1f 78    	mov.w     w8, [w15++]
    39fa:	00 0f 78    	mov.w     w0, [w14]
    39fc:	12 07 98    	mov.w     w2, [w14+2]
    39fe:	23 07 98    	mov.w     w3, [w14+4]

00003a00 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    3a00:	18 c0 b3    	mov.b     #0x1, w8
    3a02:	d2 7b 23    	mov.w     #0x37bd, w2
    3a04:	63 f8 23    	mov.w     #0x3f86, w3
    3a06:	1e 00 90    	mov.w     [w14+2], w0
    3a08:	ae 00 90    	mov.w     [w14+4], w1
    3a0a:	e6 ec 07    	rcall     0x13d8 <___gesf2>
    3a0c:	00 00 e0    	cp0.w     w0
    3a0e:	01 00 3c    	bra       GT, 0x3a12 <.L14>
    3a10:	00 44 eb    	clr.b     w8

00003a12 <.L14>:
    3a12:	08 04 e0    	cp0.b     w8
    3a14:	69 00 3a    	bra       NZ, 0x3ae8 <.L23>

00003a16 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    3a16:	18 c0 b3    	mov.b     #0x1, w8
    3a18:	d2 7b 23    	mov.w     #0x37bd, w2
    3a1a:	63 e8 23    	mov.w     #0x3e86, w3
    3a1c:	1e 00 90    	mov.w     [w14+2], w0
    3a1e:	ae 00 90    	mov.w     [w14+4], w1
    3a20:	db ec 07    	rcall     0x13d8 <___gesf2>
    3a22:	00 00 e0    	cp0.w     w0
    3a24:	01 00 3c    	bra       GT, 0x3a28 <.L17>
    3a26:	00 44 eb    	clr.b     w8

00003a28 <.L17>:
    3a28:	08 04 e0    	cp0.b     w8
    3a2a:	12 00 32    	bra       Z, 0x3a50 <.L18>

00003a2c <.LSM50>:
        timer_stop(self);
    3a2c:	1e 00 78    	mov.w     [w14], w0
    3a2e:	c4 00 07    	rcall     0x3bb8 <_timer_stop>

00003a30 <.LSM51>:
        poke(self->TxCON, 0x0030);
    3a30:	1e 00 78    	mov.w     [w14], w0
    3a32:	10 00 78    	mov.w     [w0], w0
    3a34:	01 03 20    	mov.w     #0x30, w1
    3a36:	01 08 78    	mov.w     w1, [w0]

00003a38 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    3a38:	1e 00 78    	mov.w     [w14], w0
    3a3a:	10 04 90    	mov.w     [w0+2], w8
    3a3c:	02 40 22    	mov.w     #0x2400, w2
    3a3e:	43 77 24    	mov.w     #0x4774, w3
    3a40:	1e 00 90    	mov.w     [w14+2], w0
    3a42:	ae 00 90    	mov.w     [w14+4], w1
    3a44:	43 ed 07    	rcall     0x14cc <___mulsf3>
    3a46:	ca ec 07    	rcall     0x13dc <___fixunssfsi>
    3a48:	00 00 78    	mov.w     w0, w0
    3a4a:	00 00 e9    	dec.w     w0, w0
    3a4c:	00 0c 78    	mov.w     w0, [w8]
    3a4e:	4d 00 37    	bra       0x3aea <.L13>

00003a50 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    3a50:	18 c0 b3    	mov.b     #0x1, w8
    3a52:	d2 7b 23    	mov.w     #0x37bd, w2
    3a54:	63 d0 23    	mov.w     #0x3d06, w3
    3a56:	1e 00 90    	mov.w     [w14+2], w0
    3a58:	ae 00 90    	mov.w     [w14+4], w1
    3a5a:	be ec 07    	rcall     0x13d8 <___gesf2>
    3a5c:	00 00 e0    	cp0.w     w0
    3a5e:	01 00 3c    	bra       GT, 0x3a62 <.L19>
    3a60:	00 44 eb    	clr.b     w8

00003a62 <.L19>:
    3a62:	08 04 e0    	cp0.b     w8
    3a64:	12 00 32    	bra       Z, 0x3a8a <.L20>

00003a66 <.LSM54>:
        timer_stop(self);
    3a66:	1e 00 78    	mov.w     [w14], w0
    3a68:	a7 00 07    	rcall     0x3bb8 <_timer_stop>

00003a6a <.LSM55>:
        poke(self->TxCON, 0x0020);
    3a6a:	1e 00 78    	mov.w     [w14], w0
    3a6c:	10 00 78    	mov.w     [w0], w0
    3a6e:	01 02 20    	mov.w     #0x20, w1
    3a70:	01 08 78    	mov.w     w1, [w0]

00003a72 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    3a72:	1e 00 78    	mov.w     [w14], w0
    3a74:	10 04 90    	mov.w     [w0+2], w8
    3a76:	02 40 22    	mov.w     #0x2400, w2
    3a78:	43 87 24    	mov.w     #0x4874, w3
    3a7a:	1e 00 90    	mov.w     [w14+2], w0
    3a7c:	ae 00 90    	mov.w     [w14+4], w1
    3a7e:	26 ed 07    	rcall     0x14cc <___mulsf3>
    3a80:	ad ec 07    	rcall     0x13dc <___fixunssfsi>
    3a82:	00 00 78    	mov.w     w0, w0
    3a84:	00 00 e9    	dec.w     w0, w0
    3a86:	00 0c 78    	mov.w     w0, [w8]
    3a88:	30 00 37    	bra       0x3aea <.L13>

00003a8a <.L20>:
    } else if (period>(65536.*TCY)) {
    3a8a:	18 c0 b3    	mov.b     #0x1, w8
    3a8c:	d2 7b 23    	mov.w     #0x37bd, w2
    3a8e:	63 b8 23    	mov.w     #0x3b86, w3
    3a90:	1e 00 90    	mov.w     [w14+2], w0
    3a92:	ae 00 90    	mov.w     [w14+4], w1
    3a94:	a1 ec 07    	rcall     0x13d8 <___gesf2>
    3a96:	00 00 e0    	cp0.w     w0
    3a98:	01 00 3c    	bra       GT, 0x3a9c <.L21>
    3a9a:	00 44 eb    	clr.b     w8

00003a9c <.L21>:
    3a9c:	08 04 e0    	cp0.b     w8
    3a9e:	12 00 32    	bra       Z, 0x3ac4 <.L22>

00003aa0 <.LSM58>:
        timer_stop(self);
    3aa0:	1e 00 78    	mov.w     [w14], w0
    3aa2:	8a 00 07    	rcall     0x3bb8 <_timer_stop>

00003aa4 <.LSM59>:
        poke(self->TxCON, 0x0010);
    3aa4:	1e 00 78    	mov.w     [w14], w0
    3aa6:	10 00 78    	mov.w     [w0], w0
    3aa8:	01 01 20    	mov.w     #0x10, w1
    3aaa:	01 08 78    	mov.w     w1, [w0]

00003aac <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3aac:	1e 00 78    	mov.w     [w14], w0
    3aae:	10 04 90    	mov.w     [w0+2], w8
    3ab0:	02 40 22    	mov.w     #0x2400, w2
    3ab2:	43 9f 24    	mov.w     #0x49f4, w3
    3ab4:	1e 00 90    	mov.w     [w14+2], w0
    3ab6:	ae 00 90    	mov.w     [w14+4], w1
    3ab8:	09 ed 07    	rcall     0x14cc <___mulsf3>
    3aba:	90 ec 07    	rcall     0x13dc <___fixunssfsi>
    3abc:	00 00 78    	mov.w     w0, w0
    3abe:	00 00 e9    	dec.w     w0, w0
    3ac0:	00 0c 78    	mov.w     w0, [w8]
    3ac2:	13 00 37    	bra       0x3aea <.L13>

00003ac4 <.L22>:
    } else {
        timer_stop(self);
    3ac4:	1e 00 78    	mov.w     [w14], w0
    3ac6:	78 00 07    	rcall     0x3bb8 <_timer_stop>

00003ac8 <.LSM62>:
        poke(self->TxCON, 0x0000);
    3ac8:	1e 00 78    	mov.w     [w14], w0
    3aca:	10 00 78    	mov.w     [w0], w0
    3acc:	80 00 eb    	clr.w     w1
    3ace:	01 08 78    	mov.w     w1, [w0]

00003ad0 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    3ad0:	1e 00 78    	mov.w     [w14], w0
    3ad2:	10 04 90    	mov.w     [w0+2], w8
    3ad4:	02 40 22    	mov.w     #0x2400, w2
    3ad6:	43 b7 24    	mov.w     #0x4b74, w3
    3ad8:	1e 00 90    	mov.w     [w14+2], w0
    3ada:	ae 00 90    	mov.w     [w14+4], w1
    3adc:	f7 ec 07    	rcall     0x14cc <___mulsf3>
    3ade:	7e ec 07    	rcall     0x13dc <___fixunssfsi>
    3ae0:	00 00 78    	mov.w     w0, w0
    3ae2:	00 00 e9    	dec.w     w0, w0
    3ae4:	00 0c 78    	mov.w     w0, [w8]
    3ae6:	01 00 37    	bra       0x3aea <.L13>

00003ae8 <.L23>:
    3ae8:	00 00 00    	nop       

00003aea <.L13>:
    }
}
    3aea:	4f 04 78    	mov.w     [--w15], w8
    3aec:	00 80 fa    	ulnk      
    3aee:	00 00 06    	return    

00003af0 <_timer_period>:

float timer_period(_TIMER *self) {
    3af0:	04 00 fa    	lnk       #0x4
    3af2:	88 9f be    	mov.d     w8, [w15++]
    3af4:	10 07 98    	mov.w     w0, [w14+2]

00003af6 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3af6:	1e 00 90    	mov.w     [w14+2], w0
    3af8:	10 00 78    	mov.w     [w0], w0
    3afa:	90 00 78    	mov.w     [w0], w1
    3afc:	00 03 20    	mov.w     #0x30, w0
    3afe:	00 80 60    	and.w     w1, w0, w0
    3b00:	44 00 de    	lsr.w     w0, #0x4, w0
    3b02:	00 0f 78    	mov.w     w0, [w14]

00003b04 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3b04:	1e 00 78    	mov.w     [w14], w0
    3b06:	c2 00 dd    	sl.w      w0, #0x2, w1
    3b08:	60 62 22    	mov.w     #0x2626, w0
    3b0a:	00 80 40    	add.w     w1, w0, w0
    3b0c:	10 04 be    	mov.d     [w0], w8
    3b0e:	1e 00 90    	mov.w     [w14+2], w0
    3b10:	10 00 90    	mov.w     [w0+2], w0
    3b12:	10 00 78    	mov.w     [w0], w0
    3b14:	80 00 eb    	clr.w     w1
    3b16:	7d ec 07    	rcall     0x1412 <___floatunsisf>
    3b18:	02 00 20    	mov.w     #0x0, w2
    3b1a:	03 f8 23    	mov.w     #0x3f80, w3
    3b1c:	bc eb 07    	rcall     0x1296 <___addsf3>
    3b1e:	00 01 be    	mov.d     w0, w2
    3b20:	08 00 be    	mov.d     w8, w0
    3b22:	d4 ec 07    	rcall     0x14cc <___mulsf3>

00003b24 <.LSM69>:
}
    3b24:	4f 04 be    	mov.d     [--w15], w8
    3b26:	00 80 fa    	ulnk      
    3b28:	00 00 06    	return    

00003b2a <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    3b2a:	06 00 fa    	lnk       #0x6
    3b2c:	00 0f 78    	mov.w     w0, [w14]
    3b2e:	12 07 98    	mov.w     w2, [w14+2]
    3b30:	23 07 98    	mov.w     w3, [w14+4]

00003b32 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    3b32:	1e 01 90    	mov.w     [w14+2], w2
    3b34:	ae 01 90    	mov.w     [w14+4], w3
    3b36:	00 00 20    	mov.w     #0x0, w0
    3b38:	01 f8 23    	mov.w     #0x3f80, w1
    3b3a:	0a ec 07    	rcall     0x1350 <___divsf3>
    3b3c:	00 01 be    	mov.d     w0, w2
    3b3e:	1e 00 78    	mov.w     [w14], w0
    3b40:	5a ff 07    	rcall     0x39f6 <_timer_setPeriod>

00003b42 <.LSM72>:
}
    3b42:	00 80 fa    	ulnk      
    3b44:	00 00 06    	return    

00003b46 <_timer_freq>:

float timer_freq(_TIMER *self) {
    3b46:	02 00 fa    	lnk       #0x2
    3b48:	00 0f 78    	mov.w     w0, [w14]

00003b4a <.LSM74>:
    return 1./timer_period(self);
    3b4a:	1e 00 78    	mov.w     [w14], w0
    3b4c:	d1 ff 07    	rcall     0x3af0 <_timer_period>
    3b4e:	00 01 be    	mov.d     w0, w2
    3b50:	00 00 20    	mov.w     #0x0, w0
    3b52:	01 f8 23    	mov.w     #0x3f80, w1
    3b54:	fd eb 07    	rcall     0x1350 <___divsf3>

00003b56 <.LSM75>:
}
    3b56:	00 80 fa    	ulnk      
    3b58:	00 00 06    	return    

00003b5a <_timer_time>:

float timer_time(_TIMER *self) {
    3b5a:	04 00 fa    	lnk       #0x4
    3b5c:	88 9f be    	mov.d     w8, [w15++]
    3b5e:	10 07 98    	mov.w     w0, [w14+2]

00003b60 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3b60:	1e 00 90    	mov.w     [w14+2], w0
    3b62:	10 00 78    	mov.w     [w0], w0
    3b64:	90 00 78    	mov.w     [w0], w1
    3b66:	00 03 20    	mov.w     #0x30, w0
    3b68:	00 80 60    	and.w     w1, w0, w0
    3b6a:	44 00 de    	lsr.w     w0, #0x4, w0
    3b6c:	00 0f 78    	mov.w     w0, [w14]

00003b6e <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3b6e:	1e 00 78    	mov.w     [w14], w0
    3b70:	c2 00 dd    	sl.w      w0, #0x2, w1
    3b72:	60 62 22    	mov.w     #0x2626, w0
    3b74:	00 80 40    	add.w     w1, w0, w0
    3b76:	10 04 be    	mov.d     [w0], w8
    3b78:	1e 00 90    	mov.w     [w14+2], w0
    3b7a:	10 00 90    	mov.w     [w0+2], w0
    3b7c:	10 00 78    	mov.w     [w0], w0
    3b7e:	80 00 eb    	clr.w     w1
    3b80:	48 ec 07    	rcall     0x1412 <___floatunsisf>
    3b82:	02 00 20    	mov.w     #0x0, w2
    3b84:	03 f8 23    	mov.w     #0x3f80, w3
    3b86:	87 eb 07    	rcall     0x1296 <___addsf3>
    3b88:	00 01 be    	mov.d     w0, w2
    3b8a:	08 00 be    	mov.d     w8, w0
    3b8c:	9f ec 07    	rcall     0x14cc <___mulsf3>

00003b8e <.LSM79>:
}
    3b8e:	4f 04 be    	mov.d     [--w15], w8
    3b90:	00 80 fa    	ulnk      
    3b92:	00 00 06    	return    

00003b94 <_timer_start>:

void timer_start(_TIMER *self) {
    3b94:	02 00 fa    	lnk       #0x2
    3b96:	00 0f 78    	mov.w     w0, [w14]

00003b98 <.LSM81>:
    timer_lower(self);
    3b98:	1e 00 78    	mov.w     [w14], w0
    3b9a:	2b 00 07    	rcall     0x3bf2 <_timer_lower>

00003b9c <.LSM82>:
    poke(self->TMRx, 0);
    3b9c:	1e 00 78    	mov.w     [w14], w0
    3b9e:	20 00 90    	mov.w     [w0+4], w0
    3ba0:	80 00 eb    	clr.w     w1
    3ba2:	01 08 78    	mov.w     w1, [w0]

00003ba4 <.LSM83>:
    bitset(self->TxCON, 15);
    3ba4:	1e 00 78    	mov.w     [w14], w0
    3ba6:	10 00 78    	mov.w     [w0], w0
    3ba8:	9e 00 78    	mov.w     [w14], w1
    3baa:	91 00 78    	mov.w     [w1], w1
    3bac:	11 01 78    	mov.w     [w1], w2
    3bae:	01 00 28    	mov.w     #0x8000, w1
    3bb0:	82 80 70    	ior.w     w1, w2, w1
    3bb2:	01 08 78    	mov.w     w1, [w0]

00003bb4 <.LSM84>:
}
    3bb4:	00 80 fa    	ulnk      
    3bb6:	00 00 06    	return    

00003bb8 <_timer_stop>:

void timer_stop(_TIMER *self) {
    3bb8:	02 00 fa    	lnk       #0x2
    3bba:	00 0f 78    	mov.w     w0, [w14]

00003bbc <.LSM86>:
    bitclear(self->TxCON, 15);
    3bbc:	1e 00 78    	mov.w     [w14], w0
    3bbe:	10 00 78    	mov.w     [w0], w0
    3bc0:	9e 00 78    	mov.w     [w14], w1
    3bc2:	91 00 78    	mov.w     [w1], w1
    3bc4:	11 01 78    	mov.w     [w1], w2
    3bc6:	f1 ff 27    	mov.w     #0x7fff, w1
    3bc8:	81 00 61    	and.w     w2, w1, w1
    3bca:	01 08 78    	mov.w     w1, [w0]

00003bcc <.LSM87>:
}
    3bcc:	00 80 fa    	ulnk      
    3bce:	00 00 06    	return    

00003bd0 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    3bd0:	02 00 fa    	lnk       #0x2
    3bd2:	00 0f 78    	mov.w     w0, [w14]

00003bd4 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    3bd4:	1e 00 78    	mov.w     [w14], w0
    3bd6:	30 00 90    	mov.w     [w0+6], w0
    3bd8:	90 00 78    	mov.w     [w0], w1
    3bda:	1e 00 78    	mov.w     [w14], w0
    3bdc:	20 48 90    	mov.b     [w0+10], w0
    3bde:	00 80 fb    	ze        w0, w0
    3be0:	12 00 20    	mov.w     #0x1, w2
    3be2:	00 10 dd    	sl.w      w2, w0, w0
    3be4:	00 80 60    	and.w     w1, w0, w0
    3be6:	00 f0 a7    	btsc.w    w0, #0xf
    3be8:	00 00 ea    	neg.w     w0, w0
    3bea:	00 00 ea    	neg.w     w0, w0
    3bec:	4f 00 de    	lsr.w     w0, #0xf, w0

00003bee <.LSM90>:
}
    3bee:	00 80 fa    	ulnk      
    3bf0:	00 00 06    	return    

00003bf2 <_timer_lower>:

void timer_lower(_TIMER *self) {
    3bf2:	02 00 fa    	lnk       #0x2
    3bf4:	00 0f 78    	mov.w     w0, [w14]

00003bf6 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3bf6:	1e 00 78    	mov.w     [w14], w0
    3bf8:	30 00 90    	mov.w     [w0+6], w0
    3bfa:	9e 00 78    	mov.w     [w14], w1
    3bfc:	b1 00 90    	mov.w     [w1+6], w1
    3bfe:	11 01 78    	mov.w     [w1], w2
    3c00:	9e 00 78    	mov.w     [w14], w1
    3c02:	a1 48 90    	mov.b     [w1+10], w1
    3c04:	81 80 fb    	ze        w1, w1
    3c06:	13 00 20    	mov.w     #0x1, w3
    3c08:	81 18 dd    	sl.w      w3, w1, w1
    3c0a:	81 80 ea    	com.w     w1, w1
    3c0c:	81 00 61    	and.w     w2, w1, w1
    3c0e:	01 08 78    	mov.w     w1, [w0]

00003c10 <.LSM93>:
}
    3c10:	00 80 fa    	ulnk      
    3c12:	00 00 06    	return    

00003c14 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    3c14:	02 00 fa    	lnk       #0x2
    3c16:	00 0f 78    	mov.w     w0, [w14]

00003c18 <.LSM95>:
    return peek(self->TMRx);
    3c18:	1e 00 78    	mov.w     [w14], w0
    3c1a:	20 00 90    	mov.w     [w0+4], w0
    3c1c:	10 00 78    	mov.w     [w0], w0

00003c1e <.LSM96>:
}
    3c1e:	00 80 fa    	ulnk      
    3c20:	00 00 06    	return    

00003c22 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    3c22:	02 00 fa    	lnk       #0x2
    3c24:	00 0f 78    	mov.w     w0, [w14]

00003c26 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    3c26:	1e 00 78    	mov.w     [w14], w0
    3c28:	40 00 90    	mov.w     [w0+8], w0
    3c2a:	9e 00 78    	mov.w     [w14], w1
    3c2c:	c1 00 90    	mov.w     [w1+8], w1
    3c2e:	11 01 78    	mov.w     [w1], w2
    3c30:	9e 00 78    	mov.w     [w14], w1
    3c32:	a1 48 90    	mov.b     [w1+10], w1
    3c34:	81 80 fb    	ze        w1, w1
    3c36:	13 00 20    	mov.w     #0x1, w3
    3c38:	81 18 dd    	sl.w      w3, w1, w1
    3c3a:	82 80 70    	ior.w     w1, w2, w1
    3c3c:	01 08 78    	mov.w     w1, [w0]

00003c3e <.LSM99>:
}
    3c3e:	00 80 fa    	ulnk      
    3c40:	00 00 06    	return    

00003c42 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3c42:	02 00 fa    	lnk       #0x2
    3c44:	00 0f 78    	mov.w     w0, [w14]

00003c46 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    3c46:	1e 00 78    	mov.w     [w14], w0
    3c48:	40 00 90    	mov.w     [w0+8], w0
    3c4a:	9e 00 78    	mov.w     [w14], w1
    3c4c:	c1 00 90    	mov.w     [w1+8], w1
    3c4e:	11 01 78    	mov.w     [w1], w2
    3c50:	9e 00 78    	mov.w     [w14], w1
    3c52:	a1 48 90    	mov.b     [w1+10], w1
    3c54:	81 80 fb    	ze        w1, w1
    3c56:	13 00 20    	mov.w     #0x1, w3
    3c58:	81 18 dd    	sl.w      w3, w1, w1
    3c5a:	81 80 ea    	com.w     w1, w1
    3c5c:	81 00 61    	and.w     w2, w1, w1
    3c5e:	01 08 78    	mov.w     w1, [w0]

00003c60 <.LSM102>:
}
    3c60:	00 80 fa    	ulnk      
    3c62:	00 00 06    	return    

00003c64 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3c64:	08 00 fa    	lnk       #0x8
    3c66:	00 0f 78    	mov.w     w0, [w14]
    3c68:	12 07 98    	mov.w     w2, [w14+2]
    3c6a:	23 07 98    	mov.w     w3, [w14+4]
    3c6c:	31 07 98    	mov.w     w1, [w14+6]

00003c6e <.LSM104>:
    timer_disableInterrupt(self);
    3c6e:	1e 00 78    	mov.w     [w14], w0
    3c70:	e8 ff 07    	rcall     0x3c42 <_timer_disableInterrupt>

00003c72 <.LSM105>:
    timer_setPeriod(self, interval);
    3c72:	1e 01 90    	mov.w     [w14+2], w2
    3c74:	ae 01 90    	mov.w     [w14+4], w3
    3c76:	1e 00 78    	mov.w     [w14], w0
    3c78:	be fe 07    	rcall     0x39f6 <_timer_setPeriod>

00003c7a <.LSM106>:
    self->aftercount = 0;
    3c7a:	1e 00 78    	mov.w     [w14], w0
    3c7c:	80 00 eb    	clr.w     w1
    3c7e:	01 08 98    	mov.w     w1, [w0+16]

00003c80 <.LSM107>:
    self->every = callback;
    3c80:	1e 00 78    	mov.w     [w14], w0
    3c82:	be 00 90    	mov.w     [w14+6], w1
    3c84:	11 08 98    	mov.w     w1, [w0+18]

00003c86 <.LSM108>:
    self->after = NULL;
    3c86:	1e 00 78    	mov.w     [w14], w0
    3c88:	80 00 eb    	clr.w     w1
    3c8a:	21 08 98    	mov.w     w1, [w0+20]

00003c8c <.LSM109>:
    timer_enableInterrupt(self);
    3c8c:	1e 00 78    	mov.w     [w14], w0
    3c8e:	c9 ff 07    	rcall     0x3c22 <_timer_enableInterrupt>

00003c90 <.LSM110>:
    timer_start(self);
    3c90:	1e 00 78    	mov.w     [w14], w0
    3c92:	80 ff 07    	rcall     0x3b94 <_timer_start>

00003c94 <.LSM111>:
}
    3c94:	00 80 fa    	ulnk      
    3c96:	00 00 06    	return    

00003c98 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    3c98:	0a 00 fa    	lnk       #0xa
    3c9a:	00 0f 78    	mov.w     w0, [w14]
    3c9c:	12 07 98    	mov.w     w2, [w14+2]
    3c9e:	23 07 98    	mov.w     w3, [w14+4]
    3ca0:	31 07 98    	mov.w     w1, [w14+6]
    3ca2:	44 07 98    	mov.w     w4, [w14+8]

00003ca4 <.LSM113>:
    timer_disableInterrupt(self);
    3ca4:	1e 00 78    	mov.w     [w14], w0
    3ca6:	cd ff 07    	rcall     0x3c42 <_timer_disableInterrupt>

00003ca8 <.LSM114>:
    timer_setPeriod(self, delay);
    3ca8:	1e 01 90    	mov.w     [w14+2], w2
    3caa:	ae 01 90    	mov.w     [w14+4], w3
    3cac:	1e 00 78    	mov.w     [w14], w0
    3cae:	a3 fe 07    	rcall     0x39f6 <_timer_setPeriod>

00003cb0 <.LSM115>:
    self->aftercount = num_times;
    3cb0:	1e 00 78    	mov.w     [w14], w0
    3cb2:	be 00 90    	mov.w     [w14+6], w1
    3cb4:	01 08 98    	mov.w     w1, [w0+16]

00003cb6 <.LSM116>:
    self->every = NULL;
    3cb6:	1e 00 78    	mov.w     [w14], w0
    3cb8:	80 00 eb    	clr.w     w1
    3cba:	11 08 98    	mov.w     w1, [w0+18]

00003cbc <.LSM117>:
    self->after = callback;
    3cbc:	1e 00 78    	mov.w     [w14], w0
    3cbe:	ce 00 90    	mov.w     [w14+8], w1
    3cc0:	21 08 98    	mov.w     w1, [w0+20]

00003cc2 <.LSM118>:
    timer_enableInterrupt(self);
    3cc2:	1e 00 78    	mov.w     [w14], w0
    3cc4:	ae ff 07    	rcall     0x3c22 <_timer_enableInterrupt>

00003cc6 <.LSM119>:
    timer_start(self);
    3cc6:	1e 00 78    	mov.w     [w14], w0
    3cc8:	65 ff 07    	rcall     0x3b94 <_timer_start>

00003cca <.LSM120>:
}
    3cca:	00 80 fa    	ulnk      
    3ccc:	00 00 06    	return    

00003cce <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    3cce:	02 00 fa    	lnk       #0x2
    3cd0:	00 0f 78    	mov.w     w0, [w14]

00003cd2 <.LSM122>:
    timer_disableInterrupt(self);
    3cd2:	1e 00 78    	mov.w     [w14], w0
    3cd4:	b6 ff 07    	rcall     0x3c42 <_timer_disableInterrupt>

00003cd6 <.LSM123>:
    timer_lower(self);
    3cd6:	1e 00 78    	mov.w     [w14], w0
    3cd8:	8c ff 07    	rcall     0x3bf2 <_timer_lower>

00003cda <.LSM124>:
    timer_stop(self);
    3cda:	1e 00 78    	mov.w     [w14], w0
    3cdc:	6d ff 07    	rcall     0x3bb8 <_timer_stop>

00003cde <.LSM125>:
    self->aftercount = 0;
    3cde:	1e 00 78    	mov.w     [w14], w0
    3ce0:	80 00 eb    	clr.w     w1
    3ce2:	01 08 98    	mov.w     w1, [w0+16]

00003ce4 <.LSM126>:
    self->every = NULL;
    3ce4:	1e 00 78    	mov.w     [w14], w0
    3ce6:	80 00 eb    	clr.w     w1
    3ce8:	11 08 98    	mov.w     w1, [w0+18]

00003cea <.LSM127>:
    self->after = NULL;
    3cea:	1e 00 78    	mov.w     [w14], w0
    3cec:	80 00 eb    	clr.w     w1
    3cee:	21 08 98    	mov.w     w1, [w0+20]

00003cf0 <.LSM128>:
}
    3cf0:	00 80 fa    	ulnk      
    3cf2:	00 00 06    	return    

00003cf4 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    3cf4:	04 00 fa    	lnk       #0x4
    3cf6:	00 0f 78    	mov.w     w0, [w14]
    3cf8:	11 07 98    	mov.w     w1, [w14+2]

00003cfa <.LSM1>:
    if (val)
    3cfa:	1e 00 90    	mov.w     [w14+2], w0
    3cfc:	00 00 e0    	cp0.w     w0
    3cfe:	0d 00 32    	bra       Z, 0x3d1a <.L2>

00003d00 <.LSM2>:
        bitset(self->port, self->bit);
    3d00:	1e 00 78    	mov.w     [w14], w0
    3d02:	10 00 78    	mov.w     [w0], w0
    3d04:	9e 00 78    	mov.w     [w14], w1
    3d06:	91 00 78    	mov.w     [w1], w1
    3d08:	11 01 78    	mov.w     [w1], w2
    3d0a:	9e 00 78    	mov.w     [w14], w1
    3d0c:	e1 40 90    	mov.b     [w1+6], w1
    3d0e:	81 80 fb    	ze        w1, w1
    3d10:	13 00 20    	mov.w     #0x1, w3
    3d12:	81 18 dd    	sl.w      w3, w1, w1
    3d14:	82 80 70    	ior.w     w1, w2, w1
    3d16:	01 08 78    	mov.w     w1, [w0]
    3d18:	0d 00 37    	bra       0x3d34 <.L1>

00003d1a <.L2>:
    else
        bitclear(self->port, self->bit);
    3d1a:	1e 00 78    	mov.w     [w14], w0
    3d1c:	10 00 78    	mov.w     [w0], w0
    3d1e:	9e 00 78    	mov.w     [w14], w1
    3d20:	91 00 78    	mov.w     [w1], w1
    3d22:	11 01 78    	mov.w     [w1], w2
    3d24:	9e 00 78    	mov.w     [w14], w1
    3d26:	e1 40 90    	mov.b     [w1+6], w1
    3d28:	81 80 fb    	ze        w1, w1
    3d2a:	13 00 20    	mov.w     #0x1, w3
    3d2c:	81 18 dd    	sl.w      w3, w1, w1
    3d2e:	81 80 ea    	com.w     w1, w1
    3d30:	81 00 61    	and.w     w2, w1, w1
    3d32:	01 08 78    	mov.w     w1, [w0]

00003d34 <.L1>:
}
    3d34:	00 80 fa    	ulnk      
    3d36:	00 00 06    	return    

00003d38 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    3d38:	02 00 fa    	lnk       #0x2
    3d3a:	00 0f 78    	mov.w     w0, [w14]

00003d3c <.LSM6>:
    return bitread(self->port, self->bit);
    3d3c:	1e 00 78    	mov.w     [w14], w0
    3d3e:	10 00 78    	mov.w     [w0], w0
    3d40:	90 00 78    	mov.w     [w0], w1
    3d42:	1e 00 78    	mov.w     [w14], w0
    3d44:	60 40 90    	mov.b     [w0+6], w0
    3d46:	00 80 fb    	ze        w0, w0
    3d48:	12 00 20    	mov.w     #0x1, w2
    3d4a:	00 10 dd    	sl.w      w2, w0, w0
    3d4c:	00 80 60    	and.w     w1, w0, w0
    3d4e:	00 f0 a7    	btsc.w    w0, #0xf
    3d50:	00 00 ea    	neg.w     w0, w0
    3d52:	00 00 ea    	neg.w     w0, w0
    3d54:	4f 00 de    	lsr.w     w0, #0xf, w0

00003d56 <.LSM7>:
}
    3d56:	00 80 fa    	ulnk      
    3d58:	00 00 06    	return    

00003d5a <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    3d5a:	02 00 fa    	lnk       #0x2
    3d5c:	00 0f 78    	mov.w     w0, [w14]

00003d5e <.LSM9>:
    AD1CHS = self->annum;
    3d5e:	1e 00 78    	mov.w     [w14], w0
    3d60:	40 00 90    	mov.w     [w0+8], w0
    3d62:	40 19 88    	mov.w     w0, 0x328

00003d64 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    3d64:	20 23 a8    	bset.b    0x320, #0x1

00003d66 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    3d66:	00 00 00    	nop       

00003d68 <.L6>:
    3d68:	00 19 80    	mov.w     0x320, w0
    3d6a:	61 00 60    	and.w     w0, #0x1, w0
    3d6c:	00 00 e0    	cp0.w     w0
    3d6e:	fc ff 32    	bra       Z, 0x3d68 <.L6>

00003d70 <.LSM12>:
    return ADC1BUF0;
    3d70:	00 18 80    	mov.w     0x300, w0

00003d72 <.LSM13>:
}
    3d72:	00 80 fa    	ulnk      
    3d74:	00 00 06    	return    

00003d76 <_init_pin>:

void init_pin(void) {
    3d76:	02 00 fa    	lnk       #0x2

00003d78 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3d78:	40 6d 20    	mov.w     #0x6d4, w0
    3d7a:	80 1f 78    	mov.w     w0, [w15++]
    3d7c:	47 01 20    	mov.w     #0x14, w7
    3d7e:	00 43 eb    	clr.b     w6
    3d80:	80 82 eb    	setm.w    w5
    3d82:	54 c0 b3    	mov.b     #0x5, w4
    3d84:	80 01 eb    	clr.w     w3
    3d86:	82 2d 20    	mov.w     #0x2d8, w2
    3d88:	a1 2d 20    	mov.w     #0x2da, w1
    3d8a:	60 17 22    	mov.w     #0x2176, w0
    3d8c:	08 01 07    	rcall     0x3f9e <_pin_init>
    3d8e:	8f 87 e9    	dec2.w    w15, w15

00003d90 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3d90:	80 6d 20    	mov.w     #0x6d8, w0
    3d92:	80 1f 78    	mov.w     w0, [w15++]
    3d94:	97 01 20    	mov.w     #0x19, w7
    3d96:	86 c0 b3    	mov.b     #0x8, w6
    3d98:	80 82 eb    	setm.w    w5
    3d9a:	44 c0 b3    	mov.b     #0x4, w4
    3d9c:	80 01 eb    	clr.w     w3
    3d9e:	82 2d 20    	mov.w     #0x2d8, w2
    3da0:	a1 2d 20    	mov.w     #0x2da, w1
    3da2:	c0 18 22    	mov.w     #0x218c, w0
    3da4:	fc 00 07    	rcall     0x3f9e <_pin_init>
    3da6:	8f 87 e9    	dec2.w    w15, w15

00003da8 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3da8:	a0 6c 20    	mov.w     #0x6ca, w0
    3daa:	80 1f 78    	mov.w     w0, [w15++]
    3dac:	a7 00 20    	mov.w     #0xa, w7
    3dae:	00 43 eb    	clr.b     w6
    3db0:	80 82 eb    	setm.w    w5
    3db2:	44 c0 b3    	mov.b     #0x4, w4
    3db4:	80 01 eb    	clr.w     w3
    3db6:	82 2e 20    	mov.w     #0x2e8, w2
    3db8:	a1 2e 20    	mov.w     #0x2ea, w1
    3dba:	20 1a 22    	mov.w     #0x21a2, w0
    3dbc:	f0 00 07    	rcall     0x3f9e <_pin_init>
    3dbe:	8f 87 e9    	dec2.w    w15, w15

00003dc0 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3dc0:	00 6d 20    	mov.w     #0x6d0, w0
    3dc2:	80 1f 78    	mov.w     w0, [w15++]
    3dc4:	17 01 20    	mov.w     #0x11, w7
    3dc6:	86 c0 b3    	mov.b     #0x8, w6
    3dc8:	80 82 eb    	setm.w    w5
    3dca:	54 c0 b3    	mov.b     #0x5, w4
    3dcc:	80 01 eb    	clr.w     w3
    3dce:	82 2e 20    	mov.w     #0x2e8, w2
    3dd0:	a1 2e 20    	mov.w     #0x2ea, w1
    3dd2:	80 1b 22    	mov.w     #0x21b8, w0
    3dd4:	e4 00 07    	rcall     0x3f9e <_pin_init>
    3dd6:	8f 87 e9    	dec2.w    w15, w15

00003dd8 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3dd8:	c0 6d 20    	mov.w     #0x6dc, w0
    3dda:	80 1f 78    	mov.w     w0, [w15++]
    3ddc:	d7 01 20    	mov.w     #0x1d, w7
    3dde:	86 c0 b3    	mov.b     #0x8, w6
    3de0:	f5 00 20    	mov.w     #0xf, w5
    3de2:	f4 c0 b3    	mov.b     #0xf, w4
    3de4:	23 4e 20    	mov.w     #0x4e2, w3
    3de6:	82 2c 20    	mov.w     #0x2c8, w2
    3de8:	a1 2c 20    	mov.w     #0x2ca, w1
    3dea:	e0 1c 22    	mov.w     #0x21ce, w0
    3dec:	d8 00 07    	rcall     0x3f9e <_pin_init>
    3dee:	8f 87 e9    	dec2.w    w15, w15

00003df0 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3df0:	00 6d 20    	mov.w     #0x6d0, w0
    3df2:	80 1f 78    	mov.w     w0, [w15++]
    3df4:	07 01 20    	mov.w     #0x10, w7
    3df6:	00 43 eb    	clr.b     w6
    3df8:	80 82 eb    	setm.w    w5
    3dfa:	34 c0 b3    	mov.b     #0x3, w4
    3dfc:	80 01 eb    	clr.w     w3
    3dfe:	82 2e 20    	mov.w     #0x2e8, w2
    3e00:	a1 2e 20    	mov.w     #0x2ea, w1
    3e02:	40 1e 22    	mov.w     #0x21e4, w0
    3e04:	cc 00 07    	rcall     0x3f9e <_pin_init>
    3e06:	8f 87 e9    	dec2.w    w15, w15

00003e08 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e08:	20 6c 20    	mov.w     #0x6c2, w0
    3e0a:	80 1f 78    	mov.w     w0, [w15++]
    3e0c:	27 00 20    	mov.w     #0x2, w7
    3e0e:	00 43 eb    	clr.b     w6
    3e10:	80 82 eb    	setm.w    w5
    3e12:	84 c0 b3    	mov.b     #0x8, w4
    3e14:	80 01 eb    	clr.w     w3
    3e16:	82 2d 20    	mov.w     #0x2d8, w2
    3e18:	a1 2d 20    	mov.w     #0x2da, w1
    3e1a:	a0 1f 22    	mov.w     #0x21fa, w0
    3e1c:	c0 00 07    	rcall     0x3f9e <_pin_init>
    3e1e:	8f 87 e9    	dec2.w    w15, w15

00003e20 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e20:	c0 6c 20    	mov.w     #0x6cc, w0
    3e22:	80 1f 78    	mov.w     w0, [w15++]
    3e24:	c7 00 20    	mov.w     #0xc, w7
    3e26:	00 43 eb    	clr.b     w6
    3e28:	80 82 eb    	setm.w    w5
    3e2a:	b4 c0 b3    	mov.b     #0xb, w4
    3e2c:	80 01 eb    	clr.w     w3
    3e2e:	82 2d 20    	mov.w     #0x2d8, w2
    3e30:	a1 2d 20    	mov.w     #0x2da, w1
    3e32:	00 21 22    	mov.w     #0x2210, w0
    3e34:	b4 00 07    	rcall     0x3f9e <_pin_init>
    3e36:	8f 87 e9    	dec2.w    w15, w15

00003e38 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e38:	40 6c 20    	mov.w     #0x6c4, w0
    3e3a:	80 1f 78    	mov.w     w0, [w15++]
    3e3c:	47 00 20    	mov.w     #0x4, w7
    3e3e:	00 43 eb    	clr.b     w6
    3e40:	80 82 eb    	setm.w    w5
    3e42:	94 c0 b3    	mov.b     #0x9, w4
    3e44:	80 01 eb    	clr.w     w3
    3e46:	82 2d 20    	mov.w     #0x2d8, w2
    3e48:	a1 2d 20    	mov.w     #0x2da, w1
    3e4a:	60 22 22    	mov.w     #0x2226, w0
    3e4c:	a8 00 07    	rcall     0x3f9e <_pin_init>
    3e4e:	8f 87 e9    	dec2.w    w15, w15

00003e50 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e50:	20 6c 20    	mov.w     #0x6c2, w0
    3e52:	80 1f 78    	mov.w     w0, [w15++]
    3e54:	37 00 20    	mov.w     #0x3, w7
    3e56:	86 c0 b3    	mov.b     #0x8, w6
    3e58:	80 82 eb    	setm.w    w5
    3e5a:	a4 c0 b3    	mov.b     #0xa, w4
    3e5c:	80 01 eb    	clr.w     w3
    3e5e:	82 2d 20    	mov.w     #0x2d8, w2
    3e60:	a1 2d 20    	mov.w     #0x2da, w1
    3e62:	c0 23 22    	mov.w     #0x223c, w0
    3e64:	9c 00 07    	rcall     0x3f9e <_pin_init>
    3e66:	8f 87 e9    	dec2.w    w15, w15

00003e68 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e68:	a0 6c 20    	mov.w     #0x6ca, w0
    3e6a:	80 1f 78    	mov.w     w0, [w15++]
    3e6c:	b7 00 20    	mov.w     #0xb, w7
    3e6e:	86 c0 b3    	mov.b     #0x8, w6
    3e70:	80 82 eb    	setm.w    w5
    3e72:	00 42 eb    	clr.b     w4
    3e74:	80 01 eb    	clr.w     w3
    3e76:	82 2d 20    	mov.w     #0x2d8, w2
    3e78:	a1 2d 20    	mov.w     #0x2da, w1
    3e7a:	20 25 22    	mov.w     #0x2252, w0
    3e7c:	90 00 07    	rcall     0x3f9e <_pin_init>
    3e7e:	8f 87 e9    	dec2.w    w15, w15

00003e80 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e80:	80 6d 20    	mov.w     #0x6d8, w0
    3e82:	80 1f 78    	mov.w     w0, [w15++]
    3e84:	87 01 20    	mov.w     #0x18, w7
    3e86:	00 43 eb    	clr.b     w6
    3e88:	80 82 eb    	setm.w    w5
    3e8a:	14 c0 b3    	mov.b     #0x1, w4
    3e8c:	80 01 eb    	clr.w     w3
    3e8e:	82 2d 20    	mov.w     #0x2d8, w2
    3e90:	a1 2d 20    	mov.w     #0x2da, w1
    3e92:	80 26 22    	mov.w     #0x2268, w0
    3e94:	84 00 07    	rcall     0x3f9e <_pin_init>
    3e96:	8f 87 e9    	dec2.w    w15, w15

00003e98 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e98:	60 6d 20    	mov.w     #0x6d6, w0
    3e9a:	80 1f 78    	mov.w     w0, [w15++]
    3e9c:	77 01 20    	mov.w     #0x17, w7
    3e9e:	86 c0 b3    	mov.b     #0x8, w6
    3ea0:	80 82 eb    	setm.w    w5
    3ea2:	24 c0 b3    	mov.b     #0x2, w4
    3ea4:	80 01 eb    	clr.w     w3
    3ea6:	82 2d 20    	mov.w     #0x2d8, w2
    3ea8:	a1 2d 20    	mov.w     #0x2da, w1
    3eaa:	e0 27 22    	mov.w     #0x227e, w0
    3eac:	78 00 07    	rcall     0x3f9e <_pin_init>
    3eae:	8f 87 e9    	dec2.w    w15, w15

00003eb0 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3eb0:	60 6d 20    	mov.w     #0x6d6, w0
    3eb2:	80 1f 78    	mov.w     w0, [w15++]
    3eb4:	67 01 20    	mov.w     #0x16, w7
    3eb6:	00 43 eb    	clr.b     w6
    3eb8:	80 82 eb    	setm.w    w5
    3eba:	34 c0 b3    	mov.b     #0x3, w4
    3ebc:	80 01 eb    	clr.w     w3
    3ebe:	82 2d 20    	mov.w     #0x2d8, w2
    3ec0:	a1 2d 20    	mov.w     #0x2da, w1
    3ec2:	40 29 22    	mov.w     #0x2294, w0
    3ec4:	6c 00 07    	rcall     0x3f9e <_pin_init>
    3ec6:	8f 87 e9    	dec2.w    w15, w15

00003ec8 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3ec8:	00 6c 20    	mov.w     #0x6c0, w0
    3eca:	80 1f 78    	mov.w     w0, [w15++]
    3ecc:	80 03 eb    	clr.w     w7
    3ece:	00 43 eb    	clr.b     w6
    3ed0:	80 02 eb    	clr.w     w5
    3ed2:	00 42 eb    	clr.b     w4
    3ed4:	23 4e 20    	mov.w     #0x4e2, w3
    3ed6:	82 2c 20    	mov.w     #0x2c8, w2
    3ed8:	a1 2c 20    	mov.w     #0x2ca, w1
    3eda:	80 31 22    	mov.w     #0x2318, w0
    3edc:	60 00 07    	rcall     0x3f9e <_pin_init>
    3ede:	8f 87 e9    	dec2.w    w15, w15

00003ee0 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3ee0:	00 6c 20    	mov.w     #0x6c0, w0
    3ee2:	80 1f 78    	mov.w     w0, [w15++]
    3ee4:	17 00 20    	mov.w     #0x1, w7
    3ee6:	86 c0 b3    	mov.b     #0x8, w6
    3ee8:	15 00 20    	mov.w     #0x1, w5
    3eea:	14 c0 b3    	mov.b     #0x1, w4
    3eec:	23 4e 20    	mov.w     #0x4e2, w3
    3eee:	82 2c 20    	mov.w     #0x2c8, w2
    3ef0:	a1 2c 20    	mov.w     #0x2ca, w1
    3ef2:	20 30 22    	mov.w     #0x2302, w0
    3ef4:	54 00 07    	rcall     0x3f9e <_pin_init>
    3ef6:	8f 87 e9    	dec2.w    w15, w15

00003ef8 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3ef8:	c0 6c 20    	mov.w     #0x6cc, w0
    3efa:	80 1f 78    	mov.w     w0, [w15++]
    3efc:	d7 00 20    	mov.w     #0xd, w7
    3efe:	86 c0 b3    	mov.b     #0x8, w6
    3f00:	25 00 20    	mov.w     #0x2, w5
    3f02:	24 c0 b3    	mov.b     #0x2, w4
    3f04:	23 4e 20    	mov.w     #0x4e2, w3
    3f06:	82 2c 20    	mov.w     #0x2c8, w2
    3f08:	a1 2c 20    	mov.w     #0x2ca, w1
    3f0a:	c0 2e 22    	mov.w     #0x22ec, w0
    3f0c:	48 00 07    	rcall     0x3f9e <_pin_init>
    3f0e:	8f 87 e9    	dec2.w    w15, w15

00003f10 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3f10:	00 00 eb    	clr.w     w0
    3f12:	80 1f 78    	mov.w     w0, [w15++]
    3f14:	80 83 eb    	setm.w    w7
    3f16:	00 43 eb    	clr.b     w6
    3f18:	35 00 20    	mov.w     #0x3, w5
    3f1a:	34 c0 b3    	mov.b     #0x3, w4
    3f1c:	23 4e 20    	mov.w     #0x4e2, w3
    3f1e:	82 2c 20    	mov.w     #0x2c8, w2
    3f20:	a1 2c 20    	mov.w     #0x2ca, w1
    3f22:	60 2d 22    	mov.w     #0x22d6, w0
    3f24:	3c 00 07    	rcall     0x3f9e <_pin_init>
    3f26:	8f 87 e9    	dec2.w    w15, w15

00003f28 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3f28:	c0 6d 20    	mov.w     #0x6dc, w0
    3f2a:	80 1f 78    	mov.w     w0, [w15++]
    3f2c:	c7 01 20    	mov.w     #0x1c, w7
    3f2e:	00 43 eb    	clr.b     w6
    3f30:	45 00 20    	mov.w     #0x4, w5
    3f32:	44 c0 b3    	mov.b     #0x4, w4
    3f34:	23 4e 20    	mov.w     #0x4e2, w3
    3f36:	82 2c 20    	mov.w     #0x2c8, w2
    3f38:	a1 2c 20    	mov.w     #0x2ca, w1
    3f3a:	00 2c 22    	mov.w     #0x22c0, w0
    3f3c:	30 00 07    	rcall     0x3f9e <_pin_init>
    3f3e:	8f 87 e9    	dec2.w    w15, w15

00003f40 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3f40:	20 6d 20    	mov.w     #0x6d2, w0
    3f42:	80 1f 78    	mov.w     w0, [w15++]
    3f44:	27 01 20    	mov.w     #0x12, w7
    3f46:	00 43 eb    	clr.b     w6
    3f48:	55 00 20    	mov.w     #0x5, w5
    3f4a:	54 c0 b3    	mov.b     #0x5, w4
    3f4c:	23 4e 20    	mov.w     #0x4e2, w3
    3f4e:	82 2c 20    	mov.w     #0x2c8, w2
    3f50:	a1 2c 20    	mov.w     #0x2ca, w1
    3f52:	a0 2a 22    	mov.w     #0x22aa, w0
    3f54:	24 00 07    	rcall     0x3f9e <_pin_init>
    3f56:	8f 87 e9    	dec2.w    w15, w15

00003f58 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    3f58:	00 00 eb    	clr.w     w0
    3f5a:	00 0f 78    	mov.w     w0, [w14]
    3f5c:	07 00 37    	bra       0x3f6c <.L8>

00003f5e <.L9>:
        pin_digitalIn(&D[i]);
    3f5e:	1e 00 78    	mov.w     [w14], w0
    3f60:	76 00 b9    	mul.su    w0, #0x16, w0
    3f62:	80 00 78    	mov.w     w0, w1
    3f64:	60 17 22    	mov.w     #0x2176, w0
    3f66:	00 80 40    	add.w     w1, w0, w0
    3f68:	46 00 07    	rcall     0x3ff6 <_pin_digitalIn>

00003f6a <.LSM37>:
    3f6a:	1e 0f e8    	inc.w     [w14], [w14]

00003f6c <.L8>:
    3f6c:	1e 00 78    	mov.w     [w14], w0
    3f6e:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    3f70:	f6 ff 36    	bra       LEU, 0x3f5e <.L9>

00003f72 <.LSM38>:
    for (i = 0; i<6; i++)
    3f72:	00 00 eb    	clr.w     w0
    3f74:	00 0f 78    	mov.w     w0, [w14]
    3f76:	07 00 37    	bra       0x3f86

00003f78 <.L11>:
        pin_analogIn(&A[i]);
    3f78:	1e 00 78    	mov.w     [w14], w0
    3f7a:	76 00 b9    	mul.su    w0, #0x16, w0
    3f7c:	80 00 78    	mov.w     w0, w1
    3f7e:	a0 2a 22    	mov.w     #0x22aa, w0
    3f80:	00 80 40    	add.w     w1, w0, w0
    3f82:	95 00 07    	rcall     0x40ae <_pin_analogIn>

00003f84 <.LSM40>:
    3f84:	1e 0f e8    	inc.w     [w14], [w14]

00003f86 <.L10>:
    3f86:	1e 00 78    	mov.w     [w14], w0
    3f88:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3f8a:	f6 ff 36    	bra       LEU, 0x3f78 <.L11>

00003f8c <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    3f8c:	00 2e 20    	mov.w     #0x2e0, w0
    3f8e:	00 19 88    	mov.w     w0, 0x320

00003f90 <.LSM42>:
    AD1CON2 = 0;
    3f90:	22 23 ef    	clr.w     0x322

00003f92 <.LSM43>:
    AD1CON3 = 0x0C40;
    3f92:	00 c4 20    	mov.w     #0xc40, w0
    3f94:	20 19 88    	mov.w     w0, 0x324

00003f96 <.LSM44>:
    AD1CHS = 0;
    3f96:	28 23 ef    	clr.w     0x328

00003f98 <.LSM45>:
    AD1CON1bits.ADON = 1;
    3f98:	21 e3 a8    	bset.b    0x321, #0x7

00003f9a <.LSM46>:
}
    3f9a:	00 80 fa    	ulnk      
    3f9c:	00 00 06    	return    

00003f9e <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    3f9e:	10 00 fa    	lnk       #0x10
    3fa0:	00 0f 78    	mov.w     w0, [w14]
    3fa2:	11 07 98    	mov.w     w1, [w14+2]
    3fa4:	22 07 98    	mov.w     w2, [w14+4]
    3fa6:	33 07 98    	mov.w     w3, [w14+6]
    3fa8:	04 4f 98    	mov.b     w4, [w14+8]
    3faa:	55 07 98    	mov.w     w5, [w14+10]
    3fac:	46 4f 98    	mov.b     w6, [w14+12]
    3fae:	77 07 98    	mov.w     w7, [w14+14]

00003fb0 <.LSM48>:
    self->port = port;
    3fb0:	1e 00 78    	mov.w     [w14], w0
    3fb2:	9e 00 90    	mov.w     [w14+2], w1
    3fb4:	01 08 78    	mov.w     w1, [w0]

00003fb6 <.LSM49>:
    self->tris = tris;
    3fb6:	1e 00 78    	mov.w     [w14], w0
    3fb8:	ae 00 90    	mov.w     [w14+4], w1
    3fba:	11 00 98    	mov.w     w1, [w0+2]

00003fbc <.LSM50>:
    self->ans = ans;
    3fbc:	1e 00 78    	mov.w     [w14], w0
    3fbe:	be 00 90    	mov.w     [w14+6], w1
    3fc0:	21 00 98    	mov.w     w1, [w0+4]

00003fc2 <.LSM51>:
    self->bit = bit;
    3fc2:	1e 00 78    	mov.w     [w14], w0
    3fc4:	8e 48 90    	mov.b     [w14+8], w1
    3fc6:	61 40 98    	mov.b     w1, [w0+6]

00003fc8 <.LSM52>:
    self->annum = annum;
    3fc8:	1e 00 78    	mov.w     [w14], w0
    3fca:	de 00 90    	mov.w     [w14+10], w1
    3fcc:	41 00 98    	mov.w     w1, [w0+8]

00003fce <.LSM53>:
    self->rpshift = rpshift;
    3fce:	1e 00 78    	mov.w     [w14], w0
    3fd0:	ce 48 90    	mov.b     [w14+12], w1
    3fd2:	21 48 98    	mov.b     w1, [w0+10]

00003fd4 <.LSM54>:
    self->rpnum = rpnum;
    3fd4:	fe 00 90    	mov.w     [w14+14], w1
    3fd6:	1e 00 78    	mov.w     [w14], w0
    3fd8:	61 00 98    	mov.w     w1, [w0+12]

00003fda <.LSM55>:
    self->rpor = rpor;
    3fda:	1e 00 78    	mov.w     [w14], w0
    3fdc:	ce b8 97    	mov.w     [w14-8], w1
    3fde:	71 00 98    	mov.w     w1, [w0+14]

00003fe0 <.LSM56>:
    self->owner = NULL;
    3fe0:	1e 00 78    	mov.w     [w14], w0
    3fe2:	80 00 eb    	clr.w     w1
    3fe4:	01 08 98    	mov.w     w1, [w0+16]

00003fe6 <.LSM57>:
    self->write = NULL;
    3fe6:	1e 00 78    	mov.w     [w14], w0
    3fe8:	80 00 eb    	clr.w     w1
    3fea:	11 08 98    	mov.w     w1, [w0+18]

00003fec <.LSM58>:
    self->read = NULL;
    3fec:	1e 00 78    	mov.w     [w14], w0
    3fee:	80 00 eb    	clr.w     w1
    3ff0:	21 08 98    	mov.w     w1, [w0+20]

00003ff2 <.LSM59>:
}
    3ff2:	00 80 fa    	ulnk      
    3ff4:	00 00 06    	return    

00003ff6 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    3ff6:	02 00 fa    	lnk       #0x2
    3ff8:	00 0f 78    	mov.w     w0, [w14]

00003ffa <.LSM61>:
    if (self->ans)
    3ffa:	1e 00 78    	mov.w     [w14], w0
    3ffc:	20 00 90    	mov.w     [w0+4], w0
    3ffe:	00 00 e0    	cp0.w     w0
    4000:	0d 00 32    	bra       Z, 0x401c <.L14>

00004002 <.LSM62>:
        bitclear(self->ans, self->bit);
    4002:	1e 00 78    	mov.w     [w14], w0
    4004:	20 00 90    	mov.w     [w0+4], w0
    4006:	9e 00 78    	mov.w     [w14], w1
    4008:	a1 00 90    	mov.w     [w1+4], w1
    400a:	11 01 78    	mov.w     [w1], w2
    400c:	9e 00 78    	mov.w     [w14], w1
    400e:	e1 40 90    	mov.b     [w1+6], w1
    4010:	81 80 fb    	ze        w1, w1
    4012:	13 00 20    	mov.w     #0x1, w3
    4014:	81 18 dd    	sl.w      w3, w1, w1
    4016:	81 80 ea    	com.w     w1, w1
    4018:	81 00 61    	and.w     w2, w1, w1
    401a:	01 08 78    	mov.w     w1, [w0]

0000401c <.L14>:
    bitset(self->tris, self->bit);
    401c:	1e 00 78    	mov.w     [w14], w0
    401e:	10 00 90    	mov.w     [w0+2], w0
    4020:	9e 00 78    	mov.w     [w14], w1
    4022:	91 00 90    	mov.w     [w1+2], w1
    4024:	11 01 78    	mov.w     [w1], w2
    4026:	9e 00 78    	mov.w     [w14], w1
    4028:	e1 40 90    	mov.b     [w1+6], w1
    402a:	81 80 fb    	ze        w1, w1
    402c:	13 00 20    	mov.w     #0x1, w3
    402e:	81 18 dd    	sl.w      w3, w1, w1
    4030:	82 80 70    	ior.w     w1, w2, w1
    4032:	01 08 78    	mov.w     w1, [w0]

00004034 <.LSM64>:
    self->write = NULL;
    4034:	1e 00 78    	mov.w     [w14], w0
    4036:	80 00 eb    	clr.w     w1
    4038:	11 08 98    	mov.w     w1, [w0+18]

0000403a <.LSM65>:
    self->read = __digitalRead;    
    403a:	1e 00 78    	mov.w     [w14], w0
    403c:	81 d3 23    	mov.w     #0x3d38, w1
    403e:	21 08 98    	mov.w     w1, [w0+20]

00004040 <.LSM66>:
}
    4040:	00 80 fa    	ulnk      
    4042:	00 00 06    	return    

00004044 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    4044:	02 00 fa    	lnk       #0x2
    4046:	00 0f 78    	mov.w     w0, [w14]

00004048 <.LSM68>:
    if (self->ans)
    4048:	1e 00 78    	mov.w     [w14], w0
    404a:	20 00 90    	mov.w     [w0+4], w0
    404c:	00 00 e0    	cp0.w     w0
    404e:	0d 00 32    	bra       Z, 0x406a <.L16>

00004050 <.LSM69>:
        bitclear(self->ans, self->bit);
    4050:	1e 00 78    	mov.w     [w14], w0
    4052:	20 00 90    	mov.w     [w0+4], w0
    4054:	9e 00 78    	mov.w     [w14], w1
    4056:	a1 00 90    	mov.w     [w1+4], w1
    4058:	11 01 78    	mov.w     [w1], w2
    405a:	9e 00 78    	mov.w     [w14], w1
    405c:	e1 40 90    	mov.b     [w1+6], w1
    405e:	81 80 fb    	ze        w1, w1
    4060:	13 00 20    	mov.w     #0x1, w3
    4062:	81 18 dd    	sl.w      w3, w1, w1
    4064:	81 80 ea    	com.w     w1, w1
    4066:	81 00 61    	and.w     w2, w1, w1
    4068:	01 08 78    	mov.w     w1, [w0]

0000406a <.L16>:
    bitclear(self->port, self->bit);
    406a:	1e 00 78    	mov.w     [w14], w0
    406c:	10 00 78    	mov.w     [w0], w0
    406e:	9e 00 78    	mov.w     [w14], w1
    4070:	91 00 78    	mov.w     [w1], w1
    4072:	11 01 78    	mov.w     [w1], w2
    4074:	9e 00 78    	mov.w     [w14], w1
    4076:	e1 40 90    	mov.b     [w1+6], w1
    4078:	81 80 fb    	ze        w1, w1
    407a:	13 00 20    	mov.w     #0x1, w3
    407c:	81 18 dd    	sl.w      w3, w1, w1
    407e:	81 80 ea    	com.w     w1, w1
    4080:	81 00 61    	and.w     w2, w1, w1
    4082:	01 08 78    	mov.w     w1, [w0]

00004084 <.LSM71>:
    bitclear(self->tris, self->bit);
    4084:	1e 00 78    	mov.w     [w14], w0
    4086:	10 00 90    	mov.w     [w0+2], w0
    4088:	9e 00 78    	mov.w     [w14], w1
    408a:	91 00 90    	mov.w     [w1+2], w1
    408c:	11 01 78    	mov.w     [w1], w2
    408e:	9e 00 78    	mov.w     [w14], w1
    4090:	e1 40 90    	mov.b     [w1+6], w1
    4092:	81 80 fb    	ze        w1, w1
    4094:	13 00 20    	mov.w     #0x1, w3
    4096:	81 18 dd    	sl.w      w3, w1, w1
    4098:	81 80 ea    	com.w     w1, w1
    409a:	81 00 61    	and.w     w2, w1, w1
    409c:	01 08 78    	mov.w     w1, [w0]

0000409e <.LSM72>:
    self->write = __digitalWrite;
    409e:	1e 00 78    	mov.w     [w14], w0
    40a0:	41 cf 23    	mov.w     #0x3cf4, w1
    40a2:	11 08 98    	mov.w     w1, [w0+18]

000040a4 <.LSM73>:
    self->read = __digitalRead;
    40a4:	1e 00 78    	mov.w     [w14], w0
    40a6:	81 d3 23    	mov.w     #0x3d38, w1
    40a8:	21 08 98    	mov.w     w1, [w0+20]

000040aa <.LSM74>:
}
    40aa:	00 80 fa    	ulnk      
    40ac:	00 00 06    	return    

000040ae <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    40ae:	02 00 fa    	lnk       #0x2
    40b0:	00 0f 78    	mov.w     w0, [w14]

000040b2 <.LSM76>:
    if (!(self->ans))
    40b2:	1e 00 78    	mov.w     [w14], w0
    40b4:	20 00 90    	mov.w     [w0+4], w0
    40b6:	00 00 e0    	cp0.w     w0
    40b8:	1f 00 32    	bra       Z, 0x40f8 <.L20>

000040ba <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    40ba:	1e 00 78    	mov.w     [w14], w0
    40bc:	10 00 90    	mov.w     [w0+2], w0
    40be:	9e 00 78    	mov.w     [w14], w1
    40c0:	91 00 90    	mov.w     [w1+2], w1
    40c2:	11 01 78    	mov.w     [w1], w2
    40c4:	9e 00 78    	mov.w     [w14], w1
    40c6:	e1 40 90    	mov.b     [w1+6], w1
    40c8:	81 80 fb    	ze        w1, w1
    40ca:	13 00 20    	mov.w     #0x1, w3
    40cc:	81 18 dd    	sl.w      w3, w1, w1
    40ce:	82 80 70    	ior.w     w1, w2, w1
    40d0:	01 08 78    	mov.w     w1, [w0]

000040d2 <.LSM78>:
    bitset(self->ans, self->bit);
    40d2:	1e 00 78    	mov.w     [w14], w0
    40d4:	20 00 90    	mov.w     [w0+4], w0
    40d6:	9e 00 78    	mov.w     [w14], w1
    40d8:	a1 00 90    	mov.w     [w1+4], w1
    40da:	11 01 78    	mov.w     [w1], w2
    40dc:	9e 00 78    	mov.w     [w14], w1
    40de:	e1 40 90    	mov.b     [w1+6], w1
    40e0:	81 80 fb    	ze        w1, w1
    40e2:	13 00 20    	mov.w     #0x1, w3
    40e4:	81 18 dd    	sl.w      w3, w1, w1
    40e6:	82 80 70    	ior.w     w1, w2, w1
    40e8:	01 08 78    	mov.w     w1, [w0]

000040ea <.LSM79>:
    self->write = NULL;
    40ea:	1e 00 78    	mov.w     [w14], w0
    40ec:	80 00 eb    	clr.w     w1
    40ee:	11 08 98    	mov.w     w1, [w0+18]

000040f0 <.LSM80>:
    self->read = __analogRead;
    40f0:	1e 00 78    	mov.w     [w14], w0
    40f2:	a1 d5 23    	mov.w     #0x3d5a, w1
    40f4:	21 08 98    	mov.w     w1, [w0+20]
    40f6:	01 00 37    	bra       0x40fa <.L17>

000040f8 <.L20>:
    40f8:	00 00 00    	nop       

000040fa <.L17>:
}
    40fa:	00 80 fa    	ulnk      
    40fc:	00 00 06    	return    

000040fe <_pin_set>:

void pin_set(_PIN *self) {
    40fe:	02 00 fa    	lnk       #0x2
    4100:	00 0f 78    	mov.w     w0, [w14]

00004102 <.LSM84>:
    if (self->write==__digitalWrite)
    4102:	1e 00 78    	mov.w     [w14], w0
    4104:	90 08 90    	mov.w     [w0+18], w1
    4106:	40 cf 23    	mov.w     #0x3cf4, w0
    4108:	80 8f 50    	sub.w     w1, w0, [w15]
    410a:	0c 00 3a    	bra       NZ, 0x4124 <.L21>

0000410c <.LSM85>:
        bitset(self->port, self->bit);
    410c:	1e 00 78    	mov.w     [w14], w0
    410e:	10 00 78    	mov.w     [w0], w0
    4110:	9e 00 78    	mov.w     [w14], w1
    4112:	91 00 78    	mov.w     [w1], w1
    4114:	11 01 78    	mov.w     [w1], w2
    4116:	9e 00 78    	mov.w     [w14], w1
    4118:	e1 40 90    	mov.b     [w1+6], w1
    411a:	81 80 fb    	ze        w1, w1
    411c:	13 00 20    	mov.w     #0x1, w3
    411e:	81 18 dd    	sl.w      w3, w1, w1
    4120:	82 80 70    	ior.w     w1, w2, w1
    4122:	01 08 78    	mov.w     w1, [w0]

00004124 <.L21>:
}
    4124:	00 80 fa    	ulnk      
    4126:	00 00 06    	return    

00004128 <_pin_clear>:

void pin_clear(_PIN *self) {
    4128:	02 00 fa    	lnk       #0x2
    412a:	00 0f 78    	mov.w     w0, [w14]

0000412c <.LSM88>:
    if (self->write==__digitalWrite)
    412c:	1e 00 78    	mov.w     [w14], w0
    412e:	90 08 90    	mov.w     [w0+18], w1
    4130:	40 cf 23    	mov.w     #0x3cf4, w0
    4132:	80 8f 50    	sub.w     w1, w0, [w15]
    4134:	0d 00 3a    	bra       NZ, 0x4150 <.L23>

00004136 <.LSM89>:
        bitclear(self->port, self->bit);
    4136:	1e 00 78    	mov.w     [w14], w0
    4138:	10 00 78    	mov.w     [w0], w0
    413a:	9e 00 78    	mov.w     [w14], w1
    413c:	91 00 78    	mov.w     [w1], w1
    413e:	11 01 78    	mov.w     [w1], w2
    4140:	9e 00 78    	mov.w     [w14], w1
    4142:	e1 40 90    	mov.b     [w1+6], w1
    4144:	81 80 fb    	ze        w1, w1
    4146:	13 00 20    	mov.w     #0x1, w3
    4148:	81 18 dd    	sl.w      w3, w1, w1
    414a:	81 80 ea    	com.w     w1, w1
    414c:	81 00 61    	and.w     w2, w1, w1
    414e:	01 08 78    	mov.w     w1, [w0]

00004150 <.L23>:
}
    4150:	00 80 fa    	ulnk      
    4152:	00 00 06    	return    

00004154 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    4154:	02 00 fa    	lnk       #0x2
    4156:	00 0f 78    	mov.w     w0, [w14]

00004158 <.LSM92>:
    if (self->write==__digitalWrite)
    4158:	1e 00 78    	mov.w     [w14], w0
    415a:	90 08 90    	mov.w     [w0+18], w1
    415c:	40 cf 23    	mov.w     #0x3cf4, w0
    415e:	80 8f 50    	sub.w     w1, w0, [w15]
    4160:	0c 00 3a    	bra       NZ, 0x417a <.L25>

00004162 <.LSM93>:
        bitflip(self->port, self->bit);
    4162:	1e 00 78    	mov.w     [w14], w0
    4164:	10 00 78    	mov.w     [w0], w0
    4166:	9e 00 78    	mov.w     [w14], w1
    4168:	91 00 78    	mov.w     [w1], w1
    416a:	11 01 78    	mov.w     [w1], w2
    416c:	9e 00 78    	mov.w     [w14], w1
    416e:	e1 40 90    	mov.b     [w1+6], w1
    4170:	81 80 fb    	ze        w1, w1
    4172:	13 00 20    	mov.w     #0x1, w3
    4174:	81 18 dd    	sl.w      w3, w1, w1
    4176:	81 00 69    	xor.w     w2, w1, w1
    4178:	01 08 78    	mov.w     w1, [w0]

0000417a <.L25>:
}
    417a:	00 80 fa    	ulnk      
    417c:	00 00 06    	return    

0000417e <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    417e:	04 00 fa    	lnk       #0x4
    4180:	00 0f 78    	mov.w     w0, [w14]
    4182:	11 07 98    	mov.w     w1, [w14+2]

00004184 <.LSM96>:
    if (self->write)
    4184:	1e 00 78    	mov.w     [w14], w0
    4186:	10 08 90    	mov.w     [w0+18], w0
    4188:	00 00 e0    	cp0.w     w0
    418a:	05 00 32    	bra       Z, 0x4196 <.L27>

0000418c <.LSM97>:
        self->write(self, val);
    418c:	1e 00 78    	mov.w     [w14], w0
    418e:	10 09 90    	mov.w     [w0+18], w2
    4190:	9e 00 90    	mov.w     [w14+2], w1
    4192:	1e 00 78    	mov.w     [w14], w0
    4194:	02 00 01    	call      w2

00004196 <.L27>:
}
    4196:	00 80 fa    	ulnk      
    4198:	00 00 06    	return    

0000419a <_pin_read>:

uint16_t pin_read(_PIN *self) {
    419a:	02 00 fa    	lnk       #0x2
    419c:	00 0f 78    	mov.w     w0, [w14]

0000419e <.LSM100>:
    if (self->read)
    419e:	1e 00 78    	mov.w     [w14], w0
    41a0:	20 08 90    	mov.w     [w0+20], w0
    41a2:	00 00 e0    	cp0.w     w0
    41a4:	05 00 32    	bra       Z, 0x41b0 <.L30>

000041a6 <.LSM101>:
        return self->read(self);
    41a6:	1e 00 78    	mov.w     [w14], w0
    41a8:	a0 08 90    	mov.w     [w0+20], w1
    41aa:	1e 00 78    	mov.w     [w14], w0
    41ac:	01 00 01    	call      w1
    41ae:	01 00 37    	bra       0x41b2 <.L31>

000041b0 <.L30>:
    else
        return 0xFFFF;
    41b0:	00 80 eb    	setm.w    w0

000041b2 <.L31>:
}
    41b2:	00 80 fa    	ulnk      
    41b4:	00 00 06    	return    

000041b6 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    41b6:	08 00 fa    	lnk       #0x8
    41b8:	30 07 98    	mov.w     w0, [w14+6]

000041ba <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    41ba:	3e 00 90    	mov.w     [w14+6], w0
    41bc:	00 08 90    	mov.w     [w0+16], w0
    41be:	00 0f 78    	mov.w     w0, [w14]

000041c0 <.LSM2>:
    temp.w[0] = 0;
    41c0:	00 00 eb    	clr.w     w0
    41c2:	10 07 98    	mov.w     w0, [w14+2]

000041c4 <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    41c4:	1e 00 78    	mov.w     [w14], w0
    41c6:	30 00 90    	mov.w     [w0+6], w0
    41c8:	10 00 78    	mov.w     [w0], w0
    41ca:	20 07 98    	mov.w     w0, [w14+4]

000041cc <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    41cc:	1e 02 90    	mov.w     [w14+2], w4
    41ce:	ae 02 90    	mov.w     [w14+4], w5
    41d0:	1e 00 78    	mov.w     [w14], w0
    41d2:	20 00 90    	mov.w     [w0+4], w0
    41d4:	10 00 78    	mov.w     [w0], w0
    41d6:	80 00 eb    	clr.w     w1
    41d8:	00 01 be    	mov.d     w0, w2
    41da:	04 00 be    	mov.d     w4, w0
    41dc:	ab e9 07    	rcall     0x1534 <___udivsi3>
    41de:	00 00 78    	mov.w     w0, w0

000041e0 <.LSM5>:
}
    41e0:	00 80 fa    	ulnk      
    41e2:	00 00 06    	return    

000041e4 <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    41e4:	0a 00 fa    	lnk       #0xa
    41e6:	30 07 98    	mov.w     w0, [w14+6]
    41e8:	41 07 98    	mov.w     w1, [w14+8]

000041ea <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    41ea:	3e 00 90    	mov.w     [w14+6], w0
    41ec:	00 08 90    	mov.w     [w0+16], w0
    41ee:	00 0f 78    	mov.w     w0, [w14]

000041f0 <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    41f0:	4e 00 90    	mov.w     [w14+8], w0
    41f2:	61 01 b8    	mul.uu    w0, #0x1, w2
    41f4:	1e 00 78    	mov.w     [w14], w0
    41f6:	20 00 90    	mov.w     [w0+4], w0
    41f8:	10 00 78    	mov.w     [w0], w0
    41fa:	80 00 eb    	clr.w     w1
    41fc:	00 9a b9    	mul.ss    w3, w0, w4
    41fe:	04 02 78    	mov.w     w4, w4
    4200:	02 8b b9    	mul.ss    w1, w2, w6
    4202:	86 02 78    	mov.w     w6, w5
    4204:	05 02 42    	add.w     w4, w5, w4
    4206:	00 10 b8    	mul.uu    w2, w0, w0
    4208:	01 02 42    	add.w     w4, w1, w4
    420a:	84 00 78    	mov.w     w4, w1
    420c:	10 07 98    	mov.w     w0, [w14+2]
    420e:	21 07 98    	mov.w     w1, [w14+4]

00004210 <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    4210:	1e 00 78    	mov.w     [w14], w0
    4212:	30 00 90    	mov.w     [w0+6], w0
    4214:	ae 00 90    	mov.w     [w14+4], w1
    4216:	01 08 78    	mov.w     w1, [w0]

00004218 <.LSM10>:
}
    4218:	00 80 fa    	ulnk      
    421a:	00 00 06    	return    

0000421c <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    421c:	08 00 fa    	lnk       #0x8
    421e:	30 07 98    	mov.w     w0, [w14+6]

00004220 <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    4220:	3e 00 90    	mov.w     [w14+6], w0
    4222:	00 08 90    	mov.w     [w0+16], w0
    4224:	00 0f 78    	mov.w     w0, [w14]

00004226 <.LSM13>:
    temp.w[0] = 0;
    4226:	00 00 eb    	clr.w     w0
    4228:	10 07 98    	mov.w     w0, [w14+2]

0000422a <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    422a:	1e 00 78    	mov.w     [w14], w0
    422c:	20 00 90    	mov.w     [w0+4], w0
    422e:	90 00 78    	mov.w     [w0], w1
    4230:	1e 00 78    	mov.w     [w14], w0
    4232:	60 00 90    	mov.w     [w0+12], w0
    4234:	00 80 50    	sub.w     w1, w0, w0
    4236:	20 07 98    	mov.w     w0, [w14+4]

00004238 <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    4238:	1e 02 90    	mov.w     [w14+2], w4
    423a:	ae 02 90    	mov.w     [w14+4], w5
    423c:	1e 00 78    	mov.w     [w14], w0
    423e:	70 00 90    	mov.w     [w0+14], w0
    4240:	80 00 eb    	clr.w     w1
    4242:	00 01 be    	mov.d     w0, w2
    4244:	04 00 be    	mov.d     w4, w0
    4246:	76 e9 07    	rcall     0x1534 <___udivsi3>
    4248:	00 00 78    	mov.w     w0, w0

0000424a <.LSM16>:
}
    424a:	00 80 fa    	ulnk      
    424c:	00 00 06    	return    

0000424e <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    424e:	0a 00 fa    	lnk       #0xa
    4250:	30 07 98    	mov.w     w0, [w14+6]
    4252:	41 07 98    	mov.w     w1, [w14+8]

00004254 <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    4254:	3e 00 90    	mov.w     [w14+6], w0
    4256:	00 08 90    	mov.w     [w0+16], w0
    4258:	00 0f 78    	mov.w     w0, [w14]

0000425a <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    425a:	4e 00 90    	mov.w     [w14+8], w0
    425c:	61 01 b8    	mul.uu    w0, #0x1, w2
    425e:	1e 00 78    	mov.w     [w14], w0
    4260:	70 00 90    	mov.w     [w0+14], w0
    4262:	80 00 eb    	clr.w     w1
    4264:	00 9a b9    	mul.ss    w3, w0, w4
    4266:	04 02 78    	mov.w     w4, w4
    4268:	02 8b b9    	mul.ss    w1, w2, w6
    426a:	86 02 78    	mov.w     w6, w5
    426c:	05 02 42    	add.w     w4, w5, w4
    426e:	00 10 b8    	mul.uu    w2, w0, w0
    4270:	01 02 42    	add.w     w4, w1, w4
    4272:	84 00 78    	mov.w     w4, w1
    4274:	10 07 98    	mov.w     w0, [w14+2]
    4276:	21 07 98    	mov.w     w1, [w14+4]

00004278 <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    4278:	1e 00 78    	mov.w     [w14], w0
    427a:	20 00 90    	mov.w     [w0+4], w0
    427c:	9e 00 78    	mov.w     [w14], w1
    427e:	61 01 90    	mov.w     [w1+12], w2
    4280:	ae 00 90    	mov.w     [w14+4], w1
    4282:	81 00 41    	add.w     w2, w1, w1
    4284:	01 08 78    	mov.w     w1, [w0]

00004286 <.LSM21>:
}
    4286:	00 80 fa    	ulnk      
    4288:	00 00 06    	return    

0000428a <_init_oc>:

void init_oc(void) {
    428a:	00 00 fa    	lnk       #0x0

0000428c <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    428c:	26 01 20    	mov.w     #0x12, w6
    428e:	85 19 20    	mov.w     #0x198, w5
    4290:	64 19 20    	mov.w     #0x196, w4
    4292:	43 19 20    	mov.w     #0x194, w3
    4294:	22 19 20    	mov.w     #0x192, w2
    4296:	01 19 20    	mov.w     #0x190, w1
    4298:	e0 32 22    	mov.w     #0x232e, w0
    429a:	42 00 07    	rcall     0x4320 <_oc_init>

0000429c <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    429c:	36 01 20    	mov.w     #0x13, w6
    429e:	25 1a 20    	mov.w     #0x1a2, w5
    42a0:	04 1a 20    	mov.w     #0x1a0, w4
    42a2:	e3 19 20    	mov.w     #0x19e, w3
    42a4:	c2 19 20    	mov.w     #0x19c, w2
    42a6:	a1 19 20    	mov.w     #0x19a, w1
    42a8:	00 34 22    	mov.w     #0x2340, w0
    42aa:	3a 00 07    	rcall     0x4320 <_oc_init>

000042ac <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    42ac:	46 01 20    	mov.w     #0x14, w6
    42ae:	c5 1a 20    	mov.w     #0x1ac, w5
    42b0:	a4 1a 20    	mov.w     #0x1aa, w4
    42b2:	83 1a 20    	mov.w     #0x1a8, w3
    42b4:	62 1a 20    	mov.w     #0x1a6, w2
    42b6:	41 1a 20    	mov.w     #0x1a4, w1
    42b8:	20 35 22    	mov.w     #0x2352, w0
    42ba:	32 00 07    	rcall     0x4320 <_oc_init>

000042bc <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    42bc:	56 01 20    	mov.w     #0x15, w6
    42be:	65 1b 20    	mov.w     #0x1b6, w5
    42c0:	44 1b 20    	mov.w     #0x1b4, w4
    42c2:	23 1b 20    	mov.w     #0x1b2, w3
    42c4:	02 1b 20    	mov.w     #0x1b0, w2
    42c6:	e1 1a 20    	mov.w     #0x1ae, w1
    42c8:	40 36 22    	mov.w     #0x2364, w0
    42ca:	2a 00 07    	rcall     0x4320 <_oc_init>

000042cc <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    42cc:	66 01 20    	mov.w     #0x16, w6
    42ce:	05 1c 20    	mov.w     #0x1c0, w5
    42d0:	e4 1b 20    	mov.w     #0x1be, w4
    42d2:	c3 1b 20    	mov.w     #0x1bc, w3
    42d4:	a2 1b 20    	mov.w     #0x1ba, w2
    42d6:	81 1b 20    	mov.w     #0x1b8, w1
    42d8:	60 37 22    	mov.w     #0x2376, w0
    42da:	22 00 07    	rcall     0x4320 <_oc_init>

000042dc <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    42dc:	76 01 20    	mov.w     #0x17, w6
    42de:	a5 1c 20    	mov.w     #0x1ca, w5
    42e0:	84 1c 20    	mov.w     #0x1c8, w4
    42e2:	63 1c 20    	mov.w     #0x1c6, w3
    42e4:	42 1c 20    	mov.w     #0x1c4, w2
    42e6:	21 1c 20    	mov.w     #0x1c2, w1
    42e8:	80 38 22    	mov.w     #0x2388, w0
    42ea:	1a 00 07    	rcall     0x4320 <_oc_init>

000042ec <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    42ec:	86 01 20    	mov.w     #0x18, w6
    42ee:	45 1d 20    	mov.w     #0x1d4, w5
    42f0:	24 1d 20    	mov.w     #0x1d2, w4
    42f2:	03 1d 20    	mov.w     #0x1d0, w3
    42f4:	e2 1c 20    	mov.w     #0x1ce, w2
    42f6:	c1 1c 20    	mov.w     #0x1cc, w1
    42f8:	a0 39 22    	mov.w     #0x239a, w0
    42fa:	12 00 07    	rcall     0x4320 <_oc_init>

000042fc <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    42fc:	96 01 20    	mov.w     #0x19, w6
    42fe:	e5 1d 20    	mov.w     #0x1de, w5
    4300:	c4 1d 20    	mov.w     #0x1dc, w4
    4302:	a3 1d 20    	mov.w     #0x1da, w3
    4304:	82 1d 20    	mov.w     #0x1d8, w2
    4306:	61 1d 20    	mov.w     #0x1d6, w1
    4308:	c0 3a 22    	mov.w     #0x23ac, w0
    430a:	0a 00 07    	rcall     0x4320 <_oc_init>

0000430c <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    430c:	36 02 20    	mov.w     #0x23, w6
    430e:	85 1e 20    	mov.w     #0x1e8, w5
    4310:	64 1e 20    	mov.w     #0x1e6, w4
    4312:	43 1e 20    	mov.w     #0x1e4, w3
    4314:	22 1e 20    	mov.w     #0x1e2, w2
    4316:	01 1e 20    	mov.w     #0x1e0, w1
    4318:	e0 3b 22    	mov.w     #0x23be, w0
    431a:	02 00 07    	rcall     0x4320 <_oc_init>

0000431c <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    431c:	00 80 fa    	ulnk      
    431e:	00 00 06    	return    

00004320 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    4320:	0e 00 fa    	lnk       #0xe
    4322:	00 0f 78    	mov.w     w0, [w14]
    4324:	11 07 98    	mov.w     w1, [w14+2]
    4326:	22 07 98    	mov.w     w2, [w14+4]
    4328:	33 07 98    	mov.w     w3, [w14+6]
    432a:	44 07 98    	mov.w     w4, [w14+8]
    432c:	55 07 98    	mov.w     w5, [w14+10]
    432e:	66 07 98    	mov.w     w6, [w14+12]

00004330 <.LSM34>:
    self->OCxCON1 = OCxCON1;
    4330:	1e 00 78    	mov.w     [w14], w0
    4332:	9e 00 90    	mov.w     [w14+2], w1
    4334:	01 08 78    	mov.w     w1, [w0]

00004336 <.LSM35>:
    self->OCxCON2 = OCxCON2;
    4336:	1e 00 78    	mov.w     [w14], w0
    4338:	ae 00 90    	mov.w     [w14+4], w1
    433a:	11 00 98    	mov.w     w1, [w0+2]

0000433c <.LSM36>:
    self->OCxRS = OCxRS;
    433c:	1e 00 78    	mov.w     [w14], w0
    433e:	be 00 90    	mov.w     [w14+6], w1
    4340:	21 00 98    	mov.w     w1, [w0+4]

00004342 <.LSM37>:
    self->OCxR = OCxR;
    4342:	1e 00 78    	mov.w     [w14], w0
    4344:	ce 00 90    	mov.w     [w14+8], w1
    4346:	31 00 98    	mov.w     w1, [w0+6]

00004348 <.LSM38>:
    self->OCxTMR = OCxTMR;
    4348:	1e 00 78    	mov.w     [w14], w0
    434a:	de 00 90    	mov.w     [w14+10], w1
    434c:	41 00 98    	mov.w     w1, [w0+8]

0000434e <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    434e:	1e 00 78    	mov.w     [w14], w0
    4350:	01 e8 23    	mov.w     #0x3e80, w1
    4352:	61 00 98    	mov.w     w1, [w0+12]

00004354 <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    4354:	1e 00 78    	mov.w     [w14], w0
    4356:	01 e8 23    	mov.w     #0x3e80, w1
    4358:	71 00 98    	mov.w     w1, [w0+14]

0000435a <.LSM41>:
    self->rpnum = rpnum;
    435a:	1e 00 78    	mov.w     [w14], w0
    435c:	ee 00 90    	mov.w     [w14+12], w1
    435e:	51 00 98    	mov.w     w1, [w0+10]

00004360 <.LSM42>:
    self->pin = NULL;
    4360:	1e 00 78    	mov.w     [w14], w0
    4362:	80 00 eb    	clr.w     w1
    4364:	01 08 98    	mov.w     w1, [w0+16]

00004366 <.LSM43>:
}
    4366:	00 80 fa    	ulnk      
    4368:	00 00 06    	return    

0000436a <_oc_free>:

void oc_free(_OC *self) {
    436a:	02 00 fa    	lnk       #0x2
    436c:	00 0f 78    	mov.w     w0, [w14]

0000436e <.LSM45>:
    *(self->OCxCON1) = 0;
    436e:	1e 00 78    	mov.w     [w14], w0
    4370:	10 00 78    	mov.w     [w0], w0
    4372:	80 00 eb    	clr.w     w1
    4374:	01 08 78    	mov.w     w1, [w0]

00004376 <.LSM46>:
    *(self->OCxCON2) = 0;
    4376:	1e 00 78    	mov.w     [w14], w0
    4378:	10 00 90    	mov.w     [w0+2], w0
    437a:	80 00 eb    	clr.w     w1
    437c:	01 08 78    	mov.w     w1, [w0]

0000437e <.LSM47>:
    if (self->pin) {
    437e:	1e 00 78    	mov.w     [w14], w0
    4380:	00 08 90    	mov.w     [w0+16], w0
    4382:	00 00 e0    	cp0.w     w0
    4384:	2f 00 32    	bra       Z, 0x43e4 <.L7>

00004386 <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    4386:	11 3a 80    	mov.w     0x742, w1
    4388:	f0 0b 20    	mov.w     #0xbf, w0
    438a:	00 81 60    	and.w     w1, w0, w2
    438c:	60 04 20    	mov.w     #0x46, w0
    438e:	71 05 20    	mov.w     #0x57, w1
    4390:	23 74 20    	mov.w     #0x742, w3
    4392:	80 49 78    	mov.b     w0, [w3]
    4394:	81 49 78    	mov.b     w1, [w3]
    4396:	82 49 78    	mov.b     w2, [w3]

00004398 <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    4398:	1e 00 78    	mov.w     [w14], w0
    439a:	00 08 90    	mov.w     [w0+16], w0
    439c:	70 00 90    	mov.w     [w0+14], w0
    439e:	9e 00 78    	mov.w     [w14], w1
    43a0:	81 08 90    	mov.w     [w1+16], w1
    43a2:	f1 00 90    	mov.w     [w1+14], w1
    43a4:	11 01 78    	mov.w     [w1], w2
    43a6:	9e 00 78    	mov.w     [w14], w1
    43a8:	81 08 90    	mov.w     [w1+16], w1
    43aa:	a1 48 90    	mov.b     [w1+10], w1
    43ac:	81 80 fb    	ze        w1, w1
    43ae:	f3 03 20    	mov.w     #0x3f, w3
    43b0:	81 18 dd    	sl.w      w3, w1, w1
    43b2:	81 80 ea    	com.w     w1, w1
    43b4:	81 00 61    	and.w     w2, w1, w1
    43b6:	01 08 78    	mov.w     w1, [w0]

000043b8 <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    43b8:	11 3a 80    	mov.w     0x742, w1
    43ba:	00 04 20    	mov.w     #0x40, w0
    43bc:	01 01 70    	ior.w     w0, w1, w2
    43be:	60 04 20    	mov.w     #0x46, w0
    43c0:	71 05 20    	mov.w     #0x57, w1
    43c2:	23 74 20    	mov.w     #0x742, w3
    43c4:	80 49 78    	mov.b     w0, [w3]
    43c6:	81 49 78    	mov.b     w1, [w3]
    43c8:	82 49 78    	mov.b     w2, [w3]

000043ca <.LSM51>:
        self->pin->owner = NULL;
    43ca:	1e 00 78    	mov.w     [w14], w0
    43cc:	00 08 90    	mov.w     [w0+16], w0
    43ce:	80 00 eb    	clr.w     w1
    43d0:	01 08 98    	mov.w     w1, [w0+16]

000043d2 <.LSM52>:
        pin_digitalOut(self->pin);
    43d2:	1e 00 78    	mov.w     [w14], w0
    43d4:	00 08 90    	mov.w     [w0+16], w0
    43d6:	36 fe 07    	rcall     0x4044 <_pin_digitalOut>

000043d8 <.LSM53>:
        pin_clear(self->pin);
    43d8:	1e 00 78    	mov.w     [w14], w0
    43da:	00 08 90    	mov.w     [w0+16], w0
    43dc:	a5 fe 07    	rcall     0x4128 <_pin_clear>

000043de <.LSM54>:
        self->pin = NULL;
    43de:	1e 00 78    	mov.w     [w14], w0
    43e0:	80 00 eb    	clr.w     w1
    43e2:	01 08 98    	mov.w     w1, [w0+16]

000043e4 <.L7>:
    }
}
    43e4:	00 80 fa    	ulnk      
    43e6:	00 00 06    	return    

000043e8 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    43e8:	10 00 fa    	lnk       #0x10
    43ea:	88 1f 78    	mov.w     w8, [w15++]
    43ec:	20 07 98    	mov.w     w0, [w14+4]
    43ee:	31 07 98    	mov.w     w1, [w14+6]
    43f0:	42 07 98    	mov.w     w2, [w14+8]
    43f2:	54 07 98    	mov.w     w4, [w14+10]
    43f4:	65 07 98    	mov.w     w5, [w14+12]
    43f6:	73 07 98    	mov.w     w3, [w14+14]

000043f8 <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    43f8:	3e 00 90    	mov.w     [w14+6], w0
    43fa:	60 00 90    	mov.w     [w0+12], w0
    43fc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    43fe:	8c 00 32    	bra       Z, 0x4518 <.L16>

00004400 <.LSM58>:
        return;
    if (pin->owner==NULL) {
    4400:	3e 00 90    	mov.w     [w14+6], w0
    4402:	00 08 90    	mov.w     [w0+16], w0
    4404:	00 00 e0    	cp0.w     w0
    4406:	33 00 3a    	bra       NZ, 0x446e <.L12>

00004408 <.LSM59>:
        self->pin = pin;
    4408:	2e 00 90    	mov.w     [w14+4], w0
    440a:	be 00 90    	mov.w     [w14+6], w1
    440c:	01 08 98    	mov.w     w1, [w0+16]

0000440e <.LSM60>:
        pin->owner = (void *)self;
    440e:	3e 00 90    	mov.w     [w14+6], w0
    4410:	ae 00 90    	mov.w     [w14+4], w1
    4412:	01 08 98    	mov.w     w1, [w0+16]

00004414 <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    4414:	11 3a 80    	mov.w     0x742, w1
    4416:	f0 0b 20    	mov.w     #0xbf, w0
    4418:	00 81 60    	and.w     w1, w0, w2
    441a:	60 04 20    	mov.w     #0x46, w0
    441c:	71 05 20    	mov.w     #0x57, w1
    441e:	23 74 20    	mov.w     #0x742, w3
    4420:	80 49 78    	mov.b     w0, [w3]
    4422:	81 49 78    	mov.b     w1, [w3]
    4424:	82 49 78    	mov.b     w2, [w3]

00004426 <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    4426:	3e 00 90    	mov.w     [w14+6], w0
    4428:	70 00 90    	mov.w     [w0+14], w0
    442a:	be 00 90    	mov.w     [w14+6], w1
    442c:	f1 00 90    	mov.w     [w1+14], w1
    442e:	11 01 78    	mov.w     [w1], w2
    4430:	be 00 90    	mov.w     [w14+6], w1
    4432:	a1 48 90    	mov.b     [w1+10], w1
    4434:	81 80 fb    	ze        w1, w1
    4436:	f3 03 20    	mov.w     #0x3f, w3
    4438:	81 18 dd    	sl.w      w3, w1, w1
    443a:	81 80 ea    	com.w     w1, w1
    443c:	81 00 61    	and.w     w2, w1, w1
    443e:	01 08 78    	mov.w     w1, [w0]

00004440 <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    4440:	3e 00 90    	mov.w     [w14+6], w0
    4442:	70 00 90    	mov.w     [w0+14], w0
    4444:	be 00 90    	mov.w     [w14+6], w1
    4446:	f1 00 90    	mov.w     [w1+14], w1
    4448:	11 01 78    	mov.w     [w1], w2
    444a:	ae 00 90    	mov.w     [w14+4], w1
    444c:	d1 01 90    	mov.w     [w1+10], w3
    444e:	be 00 90    	mov.w     [w14+6], w1
    4450:	a1 48 90    	mov.b     [w1+10], w1
    4452:	81 80 fb    	ze        w1, w1
    4454:	81 18 dd    	sl.w      w3, w1, w1
    4456:	82 80 70    	ior.w     w1, w2, w1
    4458:	01 08 78    	mov.w     w1, [w0]

0000445a <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    445a:	11 3a 80    	mov.w     0x742, w1
    445c:	00 04 20    	mov.w     #0x40, w0
    445e:	01 01 70    	ior.w     w0, w1, w2
    4460:	60 04 20    	mov.w     #0x46, w0
    4462:	71 05 20    	mov.w     #0x57, w1
    4464:	23 74 20    	mov.w     #0x742, w3
    4466:	80 49 78    	mov.b     w0, [w3]
    4468:	81 49 78    	mov.b     w1, [w3]
    446a:	82 49 78    	mov.b     w2, [w3]
    446c:	05 00 37    	bra       0x4478 <.L13>

0000446e <.L12>:
    } else if (pin->owner!=(void *)self) {
    446e:	3e 00 90    	mov.w     [w14+6], w0
    4470:	80 08 90    	mov.w     [w0+16], w1
    4472:	2e 00 90    	mov.w     [w14+4], w0
    4474:	80 8f 50    	sub.w     w1, w0, [w15]
    4476:	52 00 3a    	bra       NZ, 0x451c <.L17>

00004478 <.L13>:
        return;
    }
    if (timer) {
    4478:	4e 00 90    	mov.w     [w14+8], w0
    447a:	00 00 e0    	cp0.w     w0
    447c:	1c 00 32    	bra       Z, 0x44b6 <.L14>

0000447e <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    447e:	2e 00 90    	mov.w     [w14+4], w0
    4480:	10 00 78    	mov.w     [w0], w0
    4482:	ce 00 90    	mov.w     [w14+8], w1
    4484:	e1 00 90    	mov.w     [w1+12], w1
    4486:	ca 08 dd    	sl.w      w1, #0xa, w1
    4488:	61 00 b3    	ior.w     #0x6, w1
    448a:	01 08 78    	mov.w     w1, [w0]

0000448c <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    448c:	2e 00 90    	mov.w     [w14+4], w0
    448e:	10 00 90    	mov.w     [w0+2], w0
    4490:	f1 01 20    	mov.w     #0x1f, w1
    4492:	01 08 78    	mov.w     w1, [w0]

00004494 <.LSM69>:
        timer_setFreq(timer, freq);
    4494:	5e 01 90    	mov.w     [w14+10], w2
    4496:	ee 01 90    	mov.w     [w14+12], w3
    4498:	4e 00 90    	mov.w     [w14+8], w0
    449a:	47 fb 07    	rcall     0x3b2a <_timer_setFreq>

0000449c <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    449c:	2e 00 90    	mov.w     [w14+4], w0
    449e:	20 00 90    	mov.w     [w0+4], w0
    44a0:	ce 00 90    	mov.w     [w14+8], w1
    44a2:	91 00 90    	mov.w     [w1+2], w1
    44a4:	91 00 78    	mov.w     [w1], w1
    44a6:	01 08 78    	mov.w     w1, [w0]

000044a8 <.LSM71>:
        *(self->OCxTMR) = 0;
    44a8:	2e 00 90    	mov.w     [w14+4], w0
    44aa:	40 00 90    	mov.w     [w0+8], w0
    44ac:	80 00 eb    	clr.w     w1
    44ae:	01 08 78    	mov.w     w1, [w0]

000044b0 <.LSM72>:
        timer_start(timer);
    44b0:	4e 00 90    	mov.w     [w14+8], w0
    44b2:	70 fb 07    	rcall     0x3b94 <_timer_start>
    44b4:	15 00 37    	bra       0x44e0 <.L15>

000044b6 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    44b6:	2e 00 90    	mov.w     [w14+4], w0
    44b8:	10 00 78    	mov.w     [w0], w0
    44ba:	61 c0 21    	mov.w     #0x1c06, w1
    44bc:	01 08 78    	mov.w     w1, [w0]

000044be <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    44be:	2e 00 90    	mov.w     [w14+4], w0
    44c0:	10 00 90    	mov.w     [w0+2], w0
    44c2:	f1 01 20    	mov.w     #0x1f, w1
    44c4:	01 08 78    	mov.w     w1, [w0]

000044c6 <.LSM75>:
        // if (freq<(FCY/65536.))
        //     *(self->OCxRS) = 0xFFFF;
        // else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    44c6:	2e 00 90    	mov.w     [w14+4], w0
    44c8:	20 04 90    	mov.w     [w0+4], w8
    44ca:	5e 01 90    	mov.w     [w14+10], w2
    44cc:	ee 01 90    	mov.w     [w14+12], w3
    44ce:	00 40 22    	mov.w     #0x2400, w0
    44d0:	41 b7 24    	mov.w     #0x4b74, w1
    44d2:	3e e7 07    	rcall     0x1350 <___divsf3>
    44d4:	02 00 20    	mov.w     #0x0, w2
    44d6:	03 f8 23    	mov.w     #0x3f80, w3
    44d8:	dd e6 07    	rcall     0x1294 <___subsf3>
    44da:	80 e7 07    	rcall     0x13dc <___fixunssfsi>
    44dc:	00 00 78    	mov.w     w0, w0
    44de:	00 0c 78    	mov.w     w0, [w8]

000044e0 <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    44e0:	7e 00 90    	mov.w     [w14+14], w0
    44e2:	61 01 b8    	mul.uu    w0, #0x1, w2
    44e4:	2e 00 90    	mov.w     [w14+4], w0
    44e6:	20 00 90    	mov.w     [w0+4], w0
    44e8:	10 00 78    	mov.w     [w0], w0
    44ea:	80 00 eb    	clr.w     w1
    44ec:	00 9a b9    	mul.ss    w3, w0, w4
    44ee:	04 02 78    	mov.w     w4, w4
    44f0:	02 8b b9    	mul.ss    w1, w2, w6
    44f2:	86 02 78    	mov.w     w6, w5
    44f4:	05 02 42    	add.w     w4, w5, w4
    44f6:	00 10 b8    	mul.uu    w2, w0, w0
    44f8:	01 02 42    	add.w     w4, w1, w4
    44fa:	84 00 78    	mov.w     w4, w1
    44fc:	00 8f be    	mov.d     w0, [w14]

000044fe <.LSM77>:
    *(self->OCxR) = temp.w[1];
    44fe:	2e 00 90    	mov.w     [w14+4], w0
    4500:	30 00 90    	mov.w     [w0+6], w0
    4502:	9e 00 90    	mov.w     [w14+2], w1
    4504:	01 08 78    	mov.w     w1, [w0]

00004506 <.LSM78>:
    self->pin->write = __pwmWrite;
    4506:	2e 00 90    	mov.w     [w14+4], w0
    4508:	00 08 90    	mov.w     [w0+16], w0
    450a:	41 1e 24    	mov.w     #0x41e4, w1
    450c:	11 08 98    	mov.w     w1, [w0+18]

0000450e <.LSM79>:
    self->pin->read = __pwmRead;
    450e:	2e 00 90    	mov.w     [w14+4], w0
    4510:	00 08 90    	mov.w     [w0+16], w0
    4512:	61 1b 24    	mov.w     #0x41b6, w1
    4514:	21 08 98    	mov.w     w1, [w0+20]
    4516:	03 00 37    	bra       0x451e <.L9>

00004518 <.L16>:
    4518:	00 00 00    	nop       
    451a:	01 00 37    	bra       0x451e <.L9>

0000451c <.L17>:
    451c:	00 00 00    	nop       

0000451e <.L9>:
}
    451e:	4f 04 78    	mov.w     [--w15], w8
    4520:	00 80 fa    	ulnk      
    4522:	00 00 06    	return    

00004524 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    4524:	14 00 fa    	lnk       #0x14
    4526:	20 07 98    	mov.w     w0, [w14+4]
    4528:	31 07 98    	mov.w     w1, [w14+6]
    452a:	42 07 98    	mov.w     w2, [w14+8]
    452c:	54 07 98    	mov.w     w4, [w14+10]
    452e:	65 07 98    	mov.w     w5, [w14+12]
    4530:	76 07 98    	mov.w     w6, [w14+14]
    4532:	07 0f 98    	mov.w     w7, [w14+16]
    4534:	13 0f 98    	mov.w     w3, [w14+18]

00004536 <.LSM84>:
    WORD32 temp;

    if (pin->rpnum==-1)
    4536:	3e 00 90    	mov.w     [w14+6], w0
    4538:	60 00 90    	mov.w     [w0+12], w0
    453a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    453c:	87 00 32    	bra       Z, 0x464c <.L23>

0000453e <.LSM85>:
        return;
    if (pin->owner==NULL) {
    453e:	3e 00 90    	mov.w     [w14+6], w0
    4540:	00 08 90    	mov.w     [w0+16], w0
    4542:	00 00 e0    	cp0.w     w0
    4544:	33 00 3a    	bra       NZ, 0x45ac <.L21>

00004546 <.LSM86>:
        self->pin = pin;
    4546:	2e 00 90    	mov.w     [w14+4], w0
    4548:	be 00 90    	mov.w     [w14+6], w1
    454a:	01 08 98    	mov.w     w1, [w0+16]

0000454c <.LSM87>:
        pin->owner = (void *)self;
    454c:	3e 00 90    	mov.w     [w14+6], w0
    454e:	ae 00 90    	mov.w     [w14+4], w1
    4550:	01 08 98    	mov.w     w1, [w0+16]

00004552 <.LSM88>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    4552:	11 3a 80    	mov.w     0x742, w1
    4554:	f0 0b 20    	mov.w     #0xbf, w0
    4556:	00 81 60    	and.w     w1, w0, w2
    4558:	60 04 20    	mov.w     #0x46, w0
    455a:	71 05 20    	mov.w     #0x57, w1
    455c:	23 74 20    	mov.w     #0x742, w3
    455e:	80 49 78    	mov.b     w0, [w3]
    4560:	81 49 78    	mov.b     w1, [w3]
    4562:	82 49 78    	mov.b     w2, [w3]

00004564 <.LSM89>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    4564:	3e 00 90    	mov.w     [w14+6], w0
    4566:	70 00 90    	mov.w     [w0+14], w0
    4568:	be 00 90    	mov.w     [w14+6], w1
    456a:	f1 00 90    	mov.w     [w1+14], w1
    456c:	11 01 78    	mov.w     [w1], w2
    456e:	be 00 90    	mov.w     [w14+6], w1
    4570:	a1 48 90    	mov.b     [w1+10], w1
    4572:	81 80 fb    	ze        w1, w1
    4574:	f3 03 20    	mov.w     #0x3f, w3
    4576:	81 18 dd    	sl.w      w3, w1, w1
    4578:	81 80 ea    	com.w     w1, w1
    457a:	81 00 61    	and.w     w2, w1, w1
    457c:	01 08 78    	mov.w     w1, [w0]

0000457e <.LSM90>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    457e:	3e 00 90    	mov.w     [w14+6], w0
    4580:	70 00 90    	mov.w     [w0+14], w0
    4582:	be 00 90    	mov.w     [w14+6], w1
    4584:	f1 00 90    	mov.w     [w1+14], w1
    4586:	11 01 78    	mov.w     [w1], w2
    4588:	ae 00 90    	mov.w     [w14+4], w1
    458a:	d1 01 90    	mov.w     [w1+10], w3
    458c:	be 00 90    	mov.w     [w14+6], w1
    458e:	a1 48 90    	mov.b     [w1+10], w1
    4590:	81 80 fb    	ze        w1, w1
    4592:	81 18 dd    	sl.w      w3, w1, w1
    4594:	82 80 70    	ior.w     w1, w2, w1
    4596:	01 08 78    	mov.w     w1, [w0]

00004598 <.LSM91>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    4598:	11 3a 80    	mov.w     0x742, w1
    459a:	00 04 20    	mov.w     #0x40, w0
    459c:	01 01 70    	ior.w     w0, w1, w2
    459e:	60 04 20    	mov.w     #0x46, w0
    45a0:	71 05 20    	mov.w     #0x57, w1
    45a2:	23 74 20    	mov.w     #0x742, w3
    45a4:	80 49 78    	mov.b     w0, [w3]
    45a6:	81 49 78    	mov.b     w1, [w3]
    45a8:	82 49 78    	mov.b     w2, [w3]
    45aa:	05 00 37    	bra       0x45b6 <.L22>

000045ac <.L21>:
    } else if (pin->owner!=(void *)self) {
    45ac:	3e 00 90    	mov.w     [w14+6], w0
    45ae:	80 08 90    	mov.w     [w0+16], w1
    45b0:	2e 00 90    	mov.w     [w14+4], w0
    45b2:	80 8f 50    	sub.w     w1, w0, [w15]
    45b4:	4d 00 3a    	bra       NZ, 0x4650 <.L24>

000045b6 <.L22>:
        return;
    }
    if (timer) {
    45b6:	4e 00 90    	mov.w     [w14+8], w0
    45b8:	00 00 e0    	cp0.w     w0
    45ba:	4b 00 32    	bra       Z, 0x4652 <.L18>

000045bc <.LSM94>:
        self->servooffset = (uint16_t)(FCY*min_width);
    45bc:	02 40 22    	mov.w     #0x2400, w2
    45be:	43 b7 24    	mov.w     #0x4b74, w3
    45c0:	7e 00 90    	mov.w     [w14+14], w0
    45c2:	8e 08 90    	mov.w     [w14+16], w1
    45c4:	83 e7 07    	rcall     0x14cc <___mulsf3>
    45c6:	0a e7 07    	rcall     0x13dc <___fixunssfsi>
    45c8:	80 00 78    	mov.w     w0, w1
    45ca:	2e 00 90    	mov.w     [w14+4], w0
    45cc:	61 00 98    	mov.w     w1, [w0+12]

000045ce <.LSM95>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    45ce:	7e 01 90    	mov.w     [w14+14], w2
    45d0:	8e 09 90    	mov.w     [w14+16], w3
    45d2:	3e b8 97    	mov.w     [w14-10], w0
    45d4:	ce b8 97    	mov.w     [w14-8], w1
    45d6:	5e e6 07    	rcall     0x1294 <___subsf3>
    45d8:	02 40 22    	mov.w     #0x2400, w2
    45da:	43 b7 24    	mov.w     #0x4b74, w3
    45dc:	77 e7 07    	rcall     0x14cc <___mulsf3>
    45de:	fe e6 07    	rcall     0x13dc <___fixunssfsi>
    45e0:	80 00 78    	mov.w     w0, w1
    45e2:	2e 00 90    	mov.w     [w14+4], w0
    45e4:	71 00 98    	mov.w     w1, [w0+14]

000045e6 <.LSM96>:
        *(self->OCxCON1) = 0x1C0F;
    45e6:	2e 00 90    	mov.w     [w14+4], w0
    45e8:	10 00 78    	mov.w     [w0], w0
    45ea:	f1 c0 21    	mov.w     #0x1c0f, w1
    45ec:	01 08 78    	mov.w     w1, [w0]

000045ee <.LSM97>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    45ee:	2e 00 90    	mov.w     [w14+4], w0
    45f0:	10 00 90    	mov.w     [w0+2], w0
    45f2:	ce 00 90    	mov.w     [w14+8], w1
    45f4:	71 01 90    	mov.w     [w1+14], w2
    45f6:	01 08 20    	mov.w     #0x80, w1
    45f8:	82 80 70    	ior.w     w1, w2, w1
    45fa:	01 08 78    	mov.w     w1, [w0]

000045fc <.LSM98>:
        *(self->OCxR) = 1;
    45fc:	2e 00 90    	mov.w     [w14+4], w0
    45fe:	30 00 90    	mov.w     [w0+6], w0
    4600:	11 00 20    	mov.w     #0x1, w1
    4602:	01 08 78    	mov.w     w1, [w0]

00004604 <.LSM99>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    4604:	1e 08 90    	mov.w     [w14+18], w0
    4606:	61 01 b8    	mul.uu    w0, #0x1, w2
    4608:	2e 00 90    	mov.w     [w14+4], w0
    460a:	70 00 90    	mov.w     [w0+14], w0
    460c:	80 00 eb    	clr.w     w1
    460e:	00 9a b9    	mul.ss    w3, w0, w4
    4610:	04 02 78    	mov.w     w4, w4
    4612:	02 8b b9    	mul.ss    w1, w2, w6
    4614:	86 02 78    	mov.w     w6, w5
    4616:	05 02 42    	add.w     w4, w5, w4
    4618:	00 10 b8    	mul.uu    w2, w0, w0
    461a:	01 02 42    	add.w     w4, w1, w4
    461c:	84 00 78    	mov.w     w4, w1
    461e:	00 8f be    	mov.d     w0, [w14]

00004620 <.LSM100>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    4620:	2e 00 90    	mov.w     [w14+4], w0
    4622:	20 00 90    	mov.w     [w0+4], w0
    4624:	ae 00 90    	mov.w     [w14+4], w1
    4626:	61 01 90    	mov.w     [w1+12], w2
    4628:	9e 00 90    	mov.w     [w14+2], w1
    462a:	81 00 41    	add.w     w2, w1, w1
    462c:	01 08 78    	mov.w     w1, [w0]

0000462e <.LSM101>:
        timer_setPeriod(timer, interval);
    462e:	5e 01 90    	mov.w     [w14+10], w2
    4630:	ee 01 90    	mov.w     [w14+12], w3
    4632:	4e 00 90    	mov.w     [w14+8], w0
    4634:	e0 f9 07    	rcall     0x39f6 <_timer_setPeriod>

00004636 <.LSM102>:
        timer_start(timer);
    4636:	4e 00 90    	mov.w     [w14+8], w0
    4638:	ad fa 07    	rcall     0x3b94 <_timer_start>

0000463a <.LSM103>:
        self->pin->write = __servoWrite;
    463a:	2e 00 90    	mov.w     [w14+4], w0
    463c:	00 08 90    	mov.w     [w0+16], w0
    463e:	e1 24 24    	mov.w     #0x424e, w1
    4640:	11 08 98    	mov.w     w1, [w0+18]

00004642 <.LSM104>:
        self->pin->read = __servoRead;
    4642:	2e 00 90    	mov.w     [w14+4], w0
    4644:	00 08 90    	mov.w     [w0+16], w0
    4646:	c1 21 24    	mov.w     #0x421c, w1
    4648:	21 08 98    	mov.w     w1, [w0+20]
    464a:	03 00 37    	bra       0x4652 <.L18>

0000464c <.L23>:
    464c:	00 00 00    	nop       
    464e:	01 00 37    	bra       0x4652 <.L18>

00004650 <.L24>:
    4650:	00 00 00    	nop       

00004652 <.L18>:
    }
}
    4652:	00 80 fa    	ulnk      
    4654:	00 00 06    	return    

00004656 <_init_i2c>:

_I2C i2c1, i2c2, i2c3;
_PIN SCL3, SDA3;

void init_i2c(void) {
    4656:	00 00 fa    	lnk       #0x0

00004658 <.LSM1>:
    init_pin();
    4658:	8e fb 07    	rcall     0x3d76 <_init_pin>

0000465a <.LSM2>:

    pin_init(&SDA3, (uint16_t *)&PORTE, (uint16_t *)&TRISE, 
    465a:	00 00 eb    	clr.w     w0
    465c:	80 1f 78    	mov.w     w0, [w15++]
    465e:	80 83 eb    	setm.w    w7
    4660:	00 43 eb    	clr.b     w6
    4662:	80 82 eb    	setm.w    w5
    4664:	74 c0 b3    	mov.b     #0x7, w4
    4666:	80 01 eb    	clr.w     w3
    4668:	02 2e 20    	mov.w     #0x2e0, w2
    466a:	21 2e 20    	mov.w     #0x2e2, w1
    466c:	e0 51 22    	mov.w     #0x251e, w0
    466e:	97 fc 07    	rcall     0x3f9e <_pin_init>
    4670:	8f 87 e9    	dec2.w    w15, w15

00004672 <.LSM3>:
             (uint16_t *)NULL, 7, -1, 0, -1, (uint16_t *)NULL);
    pin_init(&SCL3, (uint16_t *)&PORTE, (uint16_t *)&TRISE, 
    4672:	00 00 eb    	clr.w     w0
    4674:	80 1f 78    	mov.w     w0, [w15++]
    4676:	80 83 eb    	setm.w    w7
    4678:	00 43 eb    	clr.b     w6
    467a:	80 82 eb    	setm.w    w5
    467c:	64 c0 b3    	mov.b     #0x6, w4
    467e:	80 01 eb    	clr.w     w3
    4680:	02 2e 20    	mov.w     #0x2e0, w2
    4682:	21 2e 20    	mov.w     #0x2e2, w1
    4684:	80 50 22    	mov.w     #0x2508, w0
    4686:	8b fc 07    	rcall     0x3f9e <_pin_init>
    4688:	8f 87 e9    	dec2.w    w15, w15

0000468a <.LSM4>:
             (uint16_t *)NULL, 6, -1, 0, -1, (uint16_t *)NULL);

    i2c_init(&i2c1, (uint16_t *)&I2C1RCV, (uint16_t *)&I2C1TRN, 
    468a:	c0 23 22    	mov.w     #0x223c, w0
    468c:	80 1f 78    	mov.w     w0, [w15++]
    468e:	60 22 22    	mov.w     #0x2226, w0
    4690:	80 1f 78    	mov.w     w0, [w15++]
    4692:	10 c0 b3    	mov.b     #0x1, w0
    4694:	80 1f 78    	mov.w     w0, [w15++]
    4696:	60 08 20    	mov.w     #0x86, w0
    4698:	80 1f 78    	mov.w     w0, [w15++]
    469a:	c7 20 20    	mov.w     #0x20c, w7
    469c:	a6 20 20    	mov.w     #0x20a, w6
    469e:	85 20 20    	mov.w     #0x208, w5
    46a0:	64 20 20    	mov.w     #0x206, w4
    46a2:	43 20 20    	mov.w     #0x204, w3
    46a4:	22 20 20    	mov.w     #0x202, w2
    46a6:	01 20 20    	mov.w     #0x200, w1
    46a8:	60 4c 22    	mov.w     #0x24c6, w0
    46aa:	27 00 07    	rcall     0x46fa <_i2c_init>
    46ac:	e8 87 57    	sub.w     w15, #0x8, w15

000046ae <.LSM5>:
             (uint16_t *)&I2C1BRG, (uint16_t *)&I2C1CON, 
             (uint16_t *)&I2C1STAT, (uint16_t *)&I2C1ADD, 
             (uint16_t *)&I2C1MSK, (uint16_t *)&IFS1, 1, 
             &D[8], &D[9]);
    i2c_init(&i2c2, (uint16_t *)&I2C2RCV, (uint16_t *)&I2C2TRN, 
    46ae:	80 1b 22    	mov.w     #0x21b8, w0
    46b0:	80 1f 78    	mov.w     w0, [w15++]
    46b2:	20 1a 22    	mov.w     #0x21a2, w0
    46b4:	80 1f 78    	mov.w     w0, [w15++]
    46b6:	20 c0 b3    	mov.b     #0x2, w0
    46b8:	80 1f 78    	mov.w     w0, [w15++]
    46ba:	a0 08 20    	mov.w     #0x8a, w0
    46bc:	80 1f 78    	mov.w     w0, [w15++]
    46be:	c7 21 20    	mov.w     #0x21c, w7
    46c0:	a6 21 20    	mov.w     #0x21a, w6
    46c2:	85 21 20    	mov.w     #0x218, w5
    46c4:	64 21 20    	mov.w     #0x216, w4
    46c6:	43 21 20    	mov.w     #0x214, w3
    46c8:	22 21 20    	mov.w     #0x212, w2
    46ca:	01 21 20    	mov.w     #0x210, w1
    46cc:	c0 4d 22    	mov.w     #0x24dc, w0
    46ce:	15 00 07    	rcall     0x46fa <_i2c_init>
    46d0:	e8 87 57    	sub.w     w15, #0x8, w15

000046d2 <.LSM6>:
             (uint16_t *)&I2C2BRG, (uint16_t *)&I2C2CON, 
             (uint16_t *)&I2C2STAT, (uint16_t *)&I2C2ADD, 
             (uint16_t *)&I2C2MSK, (uint16_t *)&IFS3, 2, 
             &D[2], &D[3]);
    i2c_init(&i2c3, (uint16_t *)&I2C3RCV, (uint16_t *)&I2C3TRN, 
    46d2:	80 50 22    	mov.w     #0x2508, w0
    46d4:	80 1f 78    	mov.w     w0, [w15++]
    46d6:	e0 51 22    	mov.w     #0x251e, w0
    46d8:	80 1f 78    	mov.w     w0, [w15++]
    46da:	50 c0 b3    	mov.b     #0x5, w0
    46dc:	80 1f 78    	mov.w     w0, [w15++]
    46de:	e0 08 20    	mov.w     #0x8e, w0
    46e0:	80 1f 78    	mov.w     w0, [w15++]
    46e2:	c7 27 20    	mov.w     #0x27c, w7
    46e4:	a6 27 20    	mov.w     #0x27a, w6
    46e6:	85 27 20    	mov.w     #0x278, w5
    46e8:	64 27 20    	mov.w     #0x276, w4
    46ea:	43 27 20    	mov.w     #0x274, w3
    46ec:	22 27 20    	mov.w     #0x272, w2
    46ee:	01 27 20    	mov.w     #0x270, w1
    46f0:	20 4f 22    	mov.w     #0x24f2, w0
    46f2:	03 00 07    	rcall     0x46fa <_i2c_init>
    46f4:	e8 87 57    	sub.w     w15, #0x8, w15

000046f6 <.LSM7>:
             (uint16_t *)&I2C3BRG, (uint16_t *)&I2C3CON, 
             (uint16_t *)&I2C3STAT, (uint16_t *)&I2C3ADD, 
             (uint16_t *)&I2C3MSK, (uint16_t *)&IFS5, 5, 
             &SDA3, &SCL3);
}
    46f6:	00 80 fa    	ulnk      
    46f8:	00 00 06    	return    

000046fa <_i2c_init>:

void i2c_init(_I2C *self, uint16_t *I2CxRCV, uint16_t *I2CxTRN, 
              uint16_t *I2CxBRG, uint16_t *I2CxCON, 
              uint16_t *I2CxSTAT, uint16_t *I2CxADD, 
              uint16_t *I2CxMSK, uint16_t *IFSy, 
              uint8_t MI2CxIF, _PIN *SDA, _PIN *SCL) {
    46fa:	10 00 fa    	lnk       #0x10
    46fc:	00 0f 78    	mov.w     w0, [w14]
    46fe:	11 07 98    	mov.w     w1, [w14+2]
    4700:	22 07 98    	mov.w     w2, [w14+4]
    4702:	33 07 98    	mov.w     w3, [w14+6]
    4704:	44 07 98    	mov.w     w4, [w14+8]
    4706:	55 07 98    	mov.w     w5, [w14+10]
    4708:	66 07 98    	mov.w     w6, [w14+12]
    470a:	77 07 98    	mov.w     w7, [w14+14]

0000470c <.LSM9>:
    self->I2CxRCV = I2CxRCV;
    470c:	1e 00 78    	mov.w     [w14], w0
    470e:	9e 00 90    	mov.w     [w14+2], w1
    4710:	01 08 78    	mov.w     w1, [w0]

00004712 <.LSM10>:
    self->I2CxTRN = I2CxTRN;
    4712:	1e 00 78    	mov.w     [w14], w0
    4714:	ae 00 90    	mov.w     [w14+4], w1
    4716:	11 00 98    	mov.w     w1, [w0+2]

00004718 <.LSM11>:
    self->I2CxBRG = I2CxBRG;
    4718:	1e 00 78    	mov.w     [w14], w0
    471a:	be 00 90    	mov.w     [w14+6], w1
    471c:	21 00 98    	mov.w     w1, [w0+4]

0000471e <.LSM12>:
    self->I2CxCON = I2CxCON;
    471e:	1e 00 78    	mov.w     [w14], w0
    4720:	ce 00 90    	mov.w     [w14+8], w1
    4722:	31 00 98    	mov.w     w1, [w0+6]

00004724 <.LSM13>:
    self->I2CxSTAT = I2CxSTAT;
    4724:	1e 00 78    	mov.w     [w14], w0
    4726:	de 00 90    	mov.w     [w14+10], w1
    4728:	41 00 98    	mov.w     w1, [w0+8]

0000472a <.LSM14>:
    self->I2CxADD = I2CxADD;
    472a:	1e 00 78    	mov.w     [w14], w0
    472c:	ee 00 90    	mov.w     [w14+12], w1
    472e:	51 00 98    	mov.w     w1, [w0+10]

00004730 <.LSM15>:
    self->I2CxMSK = I2CxMSK;
    4730:	1e 00 78    	mov.w     [w14], w0
    4732:	fe 00 90    	mov.w     [w14+14], w1
    4734:	61 00 98    	mov.w     w1, [w0+12]

00004736 <.LSM16>:
    self->IFSy = IFSy;
    4736:	1e 00 78    	mov.w     [w14], w0
    4738:	ce b8 97    	mov.w     [w14-8], w1
    473a:	71 00 98    	mov.w     w1, [w0+14]

0000473c <.LSM17>:
    self->MI2CxIF = MI2CxIF;
    473c:	1e 00 78    	mov.w     [w14], w0
    473e:	ee f0 97    	mov.b     [w14-10], w1
    4740:	01 50 98    	mov.b     w1, [w0+16]

00004742 <.LSM18>:
    self->SDA = SDA;
    4742:	1e 00 78    	mov.w     [w14], w0
    4744:	ae b8 97    	mov.w     [w14-12], w1
    4746:	11 08 98    	mov.w     w1, [w0+18]

00004748 <.LSM19>:
    self->SCL = SCL;
    4748:	1e 00 78    	mov.w     [w14], w0
    474a:	9e b8 97    	mov.w     [w14-14], w1
    474c:	21 08 98    	mov.w     w1, [w0+20]

0000474e <.LSM20>:
}
    474e:	00 80 fa    	ulnk      
    4750:	00 00 06    	return    

00004752 <_i2c_open>:

void i2c_open(_I2C *self, float freq) {
    4752:	06 00 fa    	lnk       #0x6
    4754:	88 1f 78    	mov.w     w8, [w15++]
    4756:	00 0f 78    	mov.w     w0, [w14]
    4758:	12 07 98    	mov.w     w2, [w14+2]
    475a:	23 07 98    	mov.w     w3, [w14+4]

0000475c <.LSM22>:
    uint16_t temp;

    // Disable I2C module
    *(self->I2CxCON) = 0;
    475c:	1e 00 78    	mov.w     [w14], w0
    475e:	30 00 90    	mov.w     [w0+6], w0
    4760:	80 00 eb    	clr.w     w1
    4762:	01 08 78    	mov.w     w1, [w0]

00004764 <.LSM23>:
    *(self->I2CxSTAT) = 0;
    4764:	1e 00 78    	mov.w     [w14], w0
    4766:	40 00 90    	mov.w     [w0+8], w0
    4768:	80 00 eb    	clr.w     w1
    476a:	01 08 78    	mov.w     w1, [w0]

0000476c <.LSM24>:
    if ((self->SDA->owner==NULL) && (self->SCL->owner==NULL)) {
    476c:	1e 00 78    	mov.w     [w14], w0
    476e:	10 08 90    	mov.w     [w0+18], w0
    4770:	00 08 90    	mov.w     [w0+16], w0
    4772:	00 00 e0    	cp0.w     w0
    4774:	5b 00 3a    	bra       NZ, 0x482c <.L11>
    4776:	1e 00 78    	mov.w     [w14], w0
    4778:	20 08 90    	mov.w     [w0+20], w0
    477a:	00 08 90    	mov.w     [w0+16], w0
    477c:	00 00 e0    	cp0.w     w0
    477e:	58 00 3a    	bra       NZ, 0x4830 <.L12>

00004780 <.LSM25>:
        // Both SDA and SCL are available, so assign to the I2C module
        pin_digitalIn(self->SDA);
    4780:	1e 00 78    	mov.w     [w14], w0
    4782:	10 08 90    	mov.w     [w0+18], w0
    4784:	38 fc 07    	rcall     0x3ff6 <_pin_digitalIn>

00004786 <.LSM26>:
        pin_digitalIn(self->SCL);
    4786:	1e 00 78    	mov.w     [w14], w0
    4788:	20 08 90    	mov.w     [w0+20], w0
    478a:	35 fc 07    	rcall     0x3ff6 <_pin_digitalIn>

0000478c <.LSM27>:
        self->SDA->owner = (void *)self;
    478c:	1e 00 78    	mov.w     [w14], w0
    478e:	10 08 90    	mov.w     [w0+18], w0
    4790:	9e 00 78    	mov.w     [w14], w1
    4792:	01 08 98    	mov.w     w1, [w0+16]

00004794 <.LSM28>:
        self->SDA->write = NULL;
    4794:	1e 00 78    	mov.w     [w14], w0
    4796:	10 08 90    	mov.w     [w0+18], w0
    4798:	80 00 eb    	clr.w     w1
    479a:	11 08 98    	mov.w     w1, [w0+18]

0000479c <.LSM29>:
        self->SDA->read = NULL;
    479c:	1e 00 78    	mov.w     [w14], w0
    479e:	10 08 90    	mov.w     [w0+18], w0
    47a0:	80 00 eb    	clr.w     w1
    47a2:	21 08 98    	mov.w     w1, [w0+20]

000047a4 <.LSM30>:
        self->SCL->owner = (void *)self;
    47a4:	1e 00 78    	mov.w     [w14], w0
    47a6:	20 08 90    	mov.w     [w0+20], w0
    47a8:	9e 00 78    	mov.w     [w14], w1
    47aa:	01 08 98    	mov.w     w1, [w0+16]

000047ac <.LSM31>:
        self->SCL->write = NULL;
    47ac:	1e 00 78    	mov.w     [w14], w0
    47ae:	20 08 90    	mov.w     [w0+20], w0
    47b0:	80 00 eb    	clr.w     w1
    47b2:	11 08 98    	mov.w     w1, [w0+18]

000047b4 <.LSM32>:
        self->SCL->read = NULL;
    47b4:	1e 00 78    	mov.w     [w14], w0
    47b6:	20 08 90    	mov.w     [w0+20], w0
    47b8:	80 00 eb    	clr.w     w1
    47ba:	21 08 98    	mov.w     w1, [w0+20]

000047bc <.LSM33>:
    } else {
        return; // At least one of SDA and SCL are being used by another 
                // peripheral
    }
    // Clip freq to be in allowable range of values
    if (freq<(FCY/(256.+(FCY/10e6))))
    47bc:	18 c0 b3    	mov.b     #0x1, w8
    47be:	d2 fc 29    	mov.w     #0x9fcd, w2
    47c0:	23 77 24    	mov.w     #0x4772, w3
    47c2:	1e 00 90    	mov.w     [w14+2], w0
    47c4:	ae 00 90    	mov.w     [w14+4], w1
    47c6:	06 e6 07    	rcall     0x13d4 <___eqsf2>
    47c8:	00 00 e0    	cp0.w     w0
    47ca:	01 00 35    	bra       LT, 0x47ce <.L5>
    47cc:	00 44 eb    	clr.b     w8

000047ce <.L5>:
    47ce:	08 04 e0    	cp0.b     w8
    47d0:	04 00 32    	bra       Z, 0x47da <.L7>

000047d2 <.LSM34>:
        freq = FCY/(256.+(FCY/10e6));
    47d2:	d0 fc 29    	mov.w     #0x9fcd, w0
    47d4:	21 77 24    	mov.w     #0x4772, w1
    47d6:	10 07 98    	mov.w     w0, [w14+2]
    47d8:	21 07 98    	mov.w     w1, [w14+4]

000047da <.L7>:
    if (freq>(FCY/(4.+(FCY/10e6))))
    47da:	18 c0 b3    	mov.b     #0x1, w8
    47dc:	c2 2d 26    	mov.w     #0x62dc, w2
    47de:	e3 a2 24    	mov.w     #0x4a2e, w3
    47e0:	1e 00 90    	mov.w     [w14+2], w0
    47e2:	ae 00 90    	mov.w     [w14+4], w1
    47e4:	f9 e5 07    	rcall     0x13d8 <___gesf2>
    47e6:	00 00 e0    	cp0.w     w0
    47e8:	01 00 3c    	bra       GT, 0x47ec <.L9>
    47ea:	00 44 eb    	clr.b     w8

000047ec <.L9>:
    47ec:	08 04 e0    	cp0.b     w8
    47ee:	04 00 32    	bra       Z, 0x47f8 <.L10>

000047f0 <.LSM36>:
        freq = FCY/(4.+(FCY/10e6));
    47f0:	c0 2d 26    	mov.w     #0x62dc, w0
    47f2:	e1 a2 24    	mov.w     #0x4a2e, w1
    47f4:	10 07 98    	mov.w     w0, [w14+2]
    47f6:	21 07 98    	mov.w     w1, [w14+4]

000047f8 <.L10>:
    // Compute BRG value to obtain closest value to that specified
    *(self->I2CxBRG) = (uint16_t)((FCY/freq)-(FCY/10e6)+0.5)-1;
    47f8:	1e 00 78    	mov.w     [w14], w0
    47fa:	20 04 90    	mov.w     [w0+4], w8
    47fc:	1e 01 90    	mov.w     [w14+2], w2
    47fe:	ae 01 90    	mov.w     [w14+4], w3
    4800:	00 40 22    	mov.w     #0x2400, w0
    4802:	41 b7 24    	mov.w     #0x4b74, w1
    4804:	a5 e5 07    	rcall     0x1350 <___divsf3>
    4806:	d2 cc 2c    	mov.w     #0xcccd, w2
    4808:	c3 fc 23    	mov.w     #0x3fcc, w3
    480a:	44 e5 07    	rcall     0x1294 <___subsf3>
    480c:	02 00 20    	mov.w     #0x0, w2
    480e:	03 f0 23    	mov.w     #0x3f00, w3
    4810:	42 e5 07    	rcall     0x1296 <___addsf3>
    4812:	e4 e5 07    	rcall     0x13dc <___fixunssfsi>
    4814:	00 00 78    	mov.w     w0, w0
    4816:	00 00 e9    	dec.w     w0, w0
    4818:	00 0c 78    	mov.w     w0, [w8]

0000481a <.LSM38>:
    bitset(self->I2CxCON, 15);  // Set I2Cx enable bit
    481a:	1e 00 78    	mov.w     [w14], w0
    481c:	30 00 90    	mov.w     [w0+6], w0
    481e:	9e 00 78    	mov.w     [w14], w1
    4820:	b1 00 90    	mov.w     [w1+6], w1
    4822:	11 01 78    	mov.w     [w1], w2
    4824:	01 00 28    	mov.w     #0x8000, w1
    4826:	82 80 70    	ior.w     w1, w2, w1
    4828:	01 08 78    	mov.w     w1, [w0]
    482a:	03 00 37    	bra       0x4832 <.L3>

0000482c <.L11>:
    482c:	00 00 00    	nop       
    482e:	01 00 37    	bra       0x4832 <.L3>

00004830 <.L12>:
    4830:	00 00 00    	nop       

00004832 <.L3>:
}
    4832:	4f 04 78    	mov.w     [--w15], w8
    4834:	00 80 fa    	ulnk      
    4836:	00 00 06    	return    

00004838 <_i2c_close>:

void i2c_close(_I2C *self) {
    4838:	02 00 fa    	lnk       #0x2
    483a:	00 0f 78    	mov.w     w0, [w14]

0000483c <.LSM42>:
    *(self->I2CxCON) = 0;
    483c:	1e 00 78    	mov.w     [w14], w0
    483e:	30 00 90    	mov.w     [w0+6], w0
    4840:	80 00 eb    	clr.w     w1
    4842:	01 08 78    	mov.w     w1, [w0]

00004844 <.LSM43>:
    *(self->I2CxSTAT) = 0;
    4844:	1e 00 78    	mov.w     [w14], w0
    4846:	40 00 90    	mov.w     [w0+8], w0
    4848:	80 00 eb    	clr.w     w1
    484a:	01 08 78    	mov.w     w1, [w0]

0000484c <.LSM44>:
    if (self->SDA->owner==(void *)self) {
    484c:	1e 00 78    	mov.w     [w14], w0
    484e:	10 08 90    	mov.w     [w0+18], w0
    4850:	00 08 90    	mov.w     [w0+16], w0
    4852:	9e 0f 50    	sub.w     w0, [w14], [w15]
    4854:	07 00 3a    	bra       NZ, 0x4864 <.L14>

00004856 <.LSM45>:
        pin_digitalIn(self->SDA);
    4856:	1e 00 78    	mov.w     [w14], w0
    4858:	10 08 90    	mov.w     [w0+18], w0
    485a:	cd fb 07    	rcall     0x3ff6 <_pin_digitalIn>

0000485c <.LSM46>:
        self->SDA->owner = NULL;
    485c:	1e 00 78    	mov.w     [w14], w0
    485e:	10 08 90    	mov.w     [w0+18], w0
    4860:	80 00 eb    	clr.w     w1
    4862:	01 08 98    	mov.w     w1, [w0+16]

00004864 <.L14>:
    }
    if (self->SCL->owner==(void *)self) {
    4864:	1e 00 78    	mov.w     [w14], w0
    4866:	20 08 90    	mov.w     [w0+20], w0
    4868:	00 08 90    	mov.w     [w0+16], w0
    486a:	9e 0f 50    	sub.w     w0, [w14], [w15]
    486c:	07 00 3a    	bra       NZ, 0x487c <.L13>

0000486e <.LSM48>:
        pin_digitalIn(self->SCL);
    486e:	1e 00 78    	mov.w     [w14], w0
    4870:	20 08 90    	mov.w     [w0+20], w0
    4872:	c1 fb 07    	rcall     0x3ff6 <_pin_digitalIn>

00004874 <.LSM49>:
        self->SCL->owner = NULL;
    4874:	1e 00 78    	mov.w     [w14], w0
    4876:	20 08 90    	mov.w     [w0+20], w0
    4878:	80 00 eb    	clr.w     w1
    487a:	01 08 98    	mov.w     w1, [w0+16]

0000487c <.L13>:
    }
}
    487c:	00 80 fa    	ulnk      
    487e:	00 00 06    	return    

00004880 <_i2c_start>:

void i2c_start(_I2C *self) {
    4880:	02 00 fa    	lnk       #0x2
    4882:	00 0f 78    	mov.w     w0, [w14]

00004884 <.LSM52>:
    bitset(self->I2CxCON, 0);   // Initiate a Start condition on I2Cx
    4884:	1e 00 78    	mov.w     [w14], w0
    4886:	30 00 90    	mov.w     [w0+6], w0
    4888:	9e 00 78    	mov.w     [w14], w1
    488a:	b1 00 90    	mov.w     [w1+6], w1
    488c:	91 00 78    	mov.w     [w1], w1
    488e:	01 00 a0    	bset.w    w1, #0x0
    4890:	01 08 78    	mov.w     w1, [w0]

00004892 <.LSM53>:
    while (bitread(self->I2CxCON, 0)==1) {}     // Wait until Start condition
    4892:	00 00 00    	nop       

00004894 <.L17>:
    4894:	1e 00 78    	mov.w     [w14], w0
    4896:	30 00 90    	mov.w     [w0+6], w0
    4898:	10 00 78    	mov.w     [w0], w0
    489a:	61 00 60    	and.w     w0, #0x1, w0
    489c:	00 40 78    	mov.b     w0, w0
    489e:	00 04 e0    	cp0.b     w0
    48a0:	f9 ff 3a    	bra       NZ, 0x4894 <.L17>

000048a2 <.LSM54>:
                                                //   clears
}
    48a2:	00 80 fa    	ulnk      
    48a4:	00 00 06    	return    

000048a6 <_i2c_restart>:

void i2c_restart(_I2C *self) {
    48a6:	02 00 fa    	lnk       #0x2
    48a8:	00 0f 78    	mov.w     w0, [w14]

000048aa <.LSM56>:
    bitset(self->I2CxCON, 1);   // Initiate a Repeated Start condition on I2Cx
    48aa:	1e 00 78    	mov.w     [w14], w0
    48ac:	30 00 90    	mov.w     [w0+6], w0
    48ae:	9e 00 78    	mov.w     [w14], w1
    48b0:	b1 00 90    	mov.w     [w1+6], w1
    48b2:	91 00 78    	mov.w     [w1], w1
    48b4:	01 10 a0    	bset.w    w1, #0x1
    48b6:	01 08 78    	mov.w     w1, [w0]

000048b8 <.LSM57>:
    while (bitread(self->I2CxCON, 1)==1) {}     // Wait until Repeated Start
    48b8:	00 00 00    	nop       

000048ba <.L19>:
    48ba:	1e 00 78    	mov.w     [w14], w0
    48bc:	30 00 90    	mov.w     [w0+6], w0
    48be:	10 00 78    	mov.w     [w0], w0
    48c0:	62 00 60    	and.w     w0, #0x2, w0
    48c2:	00 00 e0    	cp0.w     w0
    48c4:	fa ff 3a    	bra       NZ, 0x48ba <.L19>

000048c6 <.LSM58>:
                                                //   condition clears
}
    48c6:	00 80 fa    	ulnk      
    48c8:	00 00 06    	return    

000048ca <_i2c_ack>:

void i2c_ack(_I2C *self) {
    48ca:	02 00 fa    	lnk       #0x2
    48cc:	00 0f 78    	mov.w     w0, [w14]

000048ce <.LSM60>:
    bitclear(self->I2CxCON, 5); // Send ACK during Acknowledge
    48ce:	1e 00 78    	mov.w     [w14], w0
    48d0:	30 00 90    	mov.w     [w0+6], w0
    48d2:	9e 00 78    	mov.w     [w14], w1
    48d4:	b1 00 90    	mov.w     [w1+6], w1
    48d6:	11 01 78    	mov.w     [w1], w2
    48d8:	f1 fd 2f    	mov.w     #0xffdf, w1
    48da:	81 00 61    	and.w     w2, w1, w1
    48dc:	01 08 78    	mov.w     w1, [w0]

000048de <.LSM61>:
    bitset(self->I2CxCON, 4);   // Initiate an Acknowledge condition on I2Cx
    48de:	1e 00 78    	mov.w     [w14], w0
    48e0:	30 00 90    	mov.w     [w0+6], w0
    48e2:	9e 00 78    	mov.w     [w14], w1
    48e4:	b1 00 90    	mov.w     [w1+6], w1
    48e6:	91 00 78    	mov.w     [w1], w1
    48e8:	01 40 a0    	bset.w    w1, #0x4
    48ea:	01 08 78    	mov.w     w1, [w0]

000048ec <.LSM62>:
    while (bitread(self->I2CxCON, 4)==1) {}     // Wait until Acknowledge
    48ec:	00 00 00    	nop       

000048ee <.L21>:
    48ee:	1e 00 78    	mov.w     [w14], w0
    48f0:	30 00 90    	mov.w     [w0+6], w0
    48f2:	10 00 78    	mov.w     [w0], w0
    48f4:	70 00 60    	and.w     w0, #0x10, w0
    48f6:	00 00 e0    	cp0.w     w0
    48f8:	fa ff 3a    	bra       NZ, 0x48ee <.L21>

000048fa <.LSM63>:
                                                //   condition clears
}
    48fa:	00 80 fa    	ulnk      
    48fc:	00 00 06    	return    

000048fe <_i2c_nak>:

void i2c_nak(_I2C *self) {
    48fe:	02 00 fa    	lnk       #0x2
    4900:	00 0f 78    	mov.w     w0, [w14]

00004902 <.LSM65>:
    bitset(self->I2CxCON, 5);   // Send NACK during Acknowledge
    4902:	1e 00 78    	mov.w     [w14], w0
    4904:	30 00 90    	mov.w     [w0+6], w0
    4906:	9e 00 78    	mov.w     [w14], w1
    4908:	b1 00 90    	mov.w     [w1+6], w1
    490a:	11 01 78    	mov.w     [w1], w2
    490c:	01 02 20    	mov.w     #0x20, w1
    490e:	82 80 70    	ior.w     w1, w2, w1
    4910:	01 08 78    	mov.w     w1, [w0]

00004912 <.LSM66>:
    bitset(self->I2CxCON, 4);   // Initiate an Acknowldege condition on I2Cx
    4912:	1e 00 78    	mov.w     [w14], w0
    4914:	30 00 90    	mov.w     [w0+6], w0
    4916:	9e 00 78    	mov.w     [w14], w1
    4918:	b1 00 90    	mov.w     [w1+6], w1
    491a:	91 00 78    	mov.w     [w1], w1
    491c:	01 40 a0    	bset.w    w1, #0x4
    491e:	01 08 78    	mov.w     w1, [w0]

00004920 <.LSM67>:
    while (bitread(self->I2CxCON, 4)==1) {}     // Wait until Acknowledge
    4920:	00 00 00    	nop       

00004922 <.L23>:
    4922:	1e 00 78    	mov.w     [w14], w0
    4924:	30 00 90    	mov.w     [w0+6], w0
    4926:	10 00 78    	mov.w     [w0], w0
    4928:	70 00 60    	and.w     w0, #0x10, w0
    492a:	00 00 e0    	cp0.w     w0
    492c:	fa ff 3a    	bra       NZ, 0x4922 <.L23>

0000492e <.LSM68>:
                                                //   condition clears
}
    492e:	00 80 fa    	ulnk      
    4930:	00 00 06    	return    

00004932 <_i2c_stop>:

void i2c_stop(_I2C *self) {
    4932:	02 00 fa    	lnk       #0x2
    4934:	00 0f 78    	mov.w     w0, [w14]

00004936 <.LSM70>:
    bitset(self->I2CxCON, 2);   // Initiate a Stop condition on I2Cx
    4936:	1e 00 78    	mov.w     [w14], w0
    4938:	30 00 90    	mov.w     [w0+6], w0
    493a:	9e 00 78    	mov.w     [w14], w1
    493c:	b1 00 90    	mov.w     [w1+6], w1
    493e:	91 00 78    	mov.w     [w1], w1
    4940:	01 20 a0    	bset.w    w1, #0x2
    4942:	01 08 78    	mov.w     w1, [w0]

00004944 <.LSM71>:
    while (bitread(self->I2CxCON, 2)==1) {}     // Wait until Stop condition
    4944:	00 00 00    	nop       

00004946 <.L25>:
    4946:	1e 00 78    	mov.w     [w14], w0
    4948:	30 00 90    	mov.w     [w0+6], w0
    494a:	10 00 78    	mov.w     [w0], w0
    494c:	64 00 60    	and.w     w0, #0x4, w0
    494e:	00 00 e0    	cp0.w     w0
    4950:	fa ff 3a    	bra       NZ, 0x4946 <.L25>

00004952 <.LSM72>:
                                                //   clears
}
    4952:	00 80 fa    	ulnk      
    4954:	00 00 06    	return    

00004956 <_i2c_idle>:

void i2c_idle(_I2C *self) {
    4956:	02 00 fa    	lnk       #0x2
    4958:	00 0f 78    	mov.w     w0, [w14]

0000495a <.LSM74>:
    while (((*(self->I2CxCON))&0x1F) ||         // Wait until Start, Restart, 
    495a:	00 00 00    	nop       

0000495c <.L27>:
    495c:	1e 00 78    	mov.w     [w14], w0
    495e:	30 00 90    	mov.w     [w0+6], w0
    4960:	10 00 78    	mov.w     [w0], w0
    4962:	7f 00 60    	and.w     w0, #0x1f, w0
    4964:	00 00 e0    	cp0.w     w0
    4966:	fa ff 3a    	bra       NZ, 0x495c <.L27>

00004968 <.LSM75>:
           (bitread(self->I2CxSTAT, 14)==1)) {} //   Stop, Receive, Acknowledge, 
    4968:	1e 00 78    	mov.w     [w14], w0
    496a:	40 00 90    	mov.w     [w0+8], w0
    496c:	90 00 78    	mov.w     [w0], w1
    496e:	00 00 24    	mov.w     #0x4000, w0
    4970:	00 80 60    	and.w     w1, w0, w0

00004972 <.LSM76>:
    4972:	00 00 e0    	cp0.w     w0
    4974:	f3 ff 3a    	bra       NZ, 0x495c <.L27>

00004976 <.LSM77>:
                                                //   and Transmit conditions
                                                //   are all clear on I2Cx
}
    4976:	00 80 fa    	ulnk      
    4978:	00 00 06    	return    

0000497a <_i2c_putc>:

uint8_t i2c_putc(_I2C *self, uint8_t ch) {
    497a:	04 00 fa    	lnk       #0x4
    497c:	00 0f 78    	mov.w     w0, [w14]
    497e:	21 47 98    	mov.b     w1, [w14+2]

00004980 <.LSM79>:
    bitclear(self->IFSy, self->MI2CxIF);    // Lower master I2Cx interrupt flag
    4980:	1e 00 78    	mov.w     [w14], w0
    4982:	70 00 90    	mov.w     [w0+14], w0
    4984:	9e 00 78    	mov.w     [w14], w1
    4986:	f1 00 90    	mov.w     [w1+14], w1
    4988:	11 01 78    	mov.w     [w1], w2
    498a:	9e 00 78    	mov.w     [w14], w1
    498c:	81 50 90    	mov.b     [w1+16], w1
    498e:	81 80 fb    	ze        w1, w1
    4990:	13 00 20    	mov.w     #0x1, w3
    4992:	81 18 dd    	sl.w      w3, w1, w1
    4994:	81 80 ea    	com.w     w1, w1
    4996:	81 00 61    	and.w     w2, w1, w1
    4998:	01 08 78    	mov.w     w1, [w0]

0000499a <.LSM80>:
    *(self->I2CxTRN) = (uint16_t)ch;        // Initiate I2Cx data transmission
    499a:	1e 00 78    	mov.w     [w14], w0
    499c:	10 00 90    	mov.w     [w0+2], w0
    499e:	ae 40 90    	mov.b     [w14+2], w1
    49a0:	81 80 fb    	ze        w1, w1
    49a2:	01 08 78    	mov.w     w1, [w0]

000049a4 <.LSM81>:
    while (bitread(self->I2CxSTAT, 0)==1) {}    // Wait until tranmit completes 
    49a4:	00 00 00    	nop       

000049a6 <.L29>:
    49a6:	1e 00 78    	mov.w     [w14], w0
    49a8:	40 00 90    	mov.w     [w0+8], w0
    49aa:	10 00 78    	mov.w     [w0], w0
    49ac:	61 00 60    	and.w     w0, #0x1, w0
    49ae:	00 40 78    	mov.b     w0, w0
    49b0:	00 04 e0    	cp0.b     w0
    49b2:	f9 ff 3a    	bra       NZ, 0x49a6 <.L29>

000049b4 <.LSM82>:
                                                //   (8 clock cycles on SCLx)
    while (bitread(self->IFSy, self->MI2CxIF)==0) {}    // Wait for 9th clock
    49b4:	00 00 00    	nop       

000049b6 <.L30>:
    49b6:	1e 00 78    	mov.w     [w14], w0
    49b8:	70 00 90    	mov.w     [w0+14], w0
    49ba:	90 00 78    	mov.w     [w0], w1
    49bc:	1e 00 78    	mov.w     [w14], w0
    49be:	00 50 90    	mov.b     [w0+16], w0
    49c0:	00 80 fb    	ze        w0, w0
    49c2:	12 00 20    	mov.w     #0x1, w2
    49c4:	00 10 dd    	sl.w      w2, w0, w0
    49c6:	00 80 60    	and.w     w1, w0, w0
    49c8:	00 00 e0    	cp0.w     w0
    49ca:	f5 ff 32    	bra       Z, 0x49b6 <.L30>

000049cc <.LSM83>:
                                                        //   cycle on SCLx
    bitclear(self->IFSy, self->MI2CxIF);    // Lower master I2Cx interrupt flag
    49cc:	1e 00 78    	mov.w     [w14], w0
    49ce:	70 00 90    	mov.w     [w0+14], w0
    49d0:	9e 00 78    	mov.w     [w14], w1
    49d2:	f1 00 90    	mov.w     [w1+14], w1
    49d4:	11 01 78    	mov.w     [w1], w2
    49d6:	9e 00 78    	mov.w     [w14], w1
    49d8:	81 50 90    	mov.b     [w1+16], w1
    49da:	81 80 fb    	ze        w1, w1
    49dc:	13 00 20    	mov.w     #0x1, w3
    49de:	81 18 dd    	sl.w      w3, w1, w1
    49e0:	81 80 ea    	com.w     w1, w1
    49e2:	81 00 61    	and.w     w2, w1, w1
    49e4:	01 08 78    	mov.w     w1, [w0]

000049e6 <.LSM84>:
    return bitread(self->I2CxSTAT, 15);     // Return ACKSTAT bit of I2CxSTAT
    49e6:	1e 00 78    	mov.w     [w14], w0
    49e8:	40 00 90    	mov.w     [w0+8], w0
    49ea:	10 00 78    	mov.w     [w0], w0
    49ec:	4f 00 de    	lsr.w     w0, #0xf, w0
    49ee:	00 40 78    	mov.b     w0, w0

000049f0 <.LSM85>:
}
    49f0:	00 80 fa    	ulnk      
    49f2:	00 00 06    	return    

000049f4 <_i2c_getc>:

uint8_t i2c_getc(_I2C *self) {
    49f4:	02 00 fa    	lnk       #0x2
    49f6:	00 0f 78    	mov.w     w0, [w14]

000049f8 <.LSM87>:
    bitset(self->I2CxCON, 3);       // Initiate a Receive on I2Cx
    49f8:	1e 00 78    	mov.w     [w14], w0
    49fa:	30 00 90    	mov.w     [w0+6], w0
    49fc:	9e 00 78    	mov.w     [w14], w1
    49fe:	b1 00 90    	mov.w     [w1+6], w1
    4a00:	91 00 78    	mov.w     [w1], w1
    4a02:	01 30 a0    	bset.w    w1, #0x3
    4a04:	01 08 78    	mov.w     w1, [w0]

00004a06 <.LSM88>:
    while (bitread(self->I2CxCON, 3)==1) {}     // Wait until Receive condition 
    4a06:	00 00 00    	nop       

00004a08 <.L32>:
    4a08:	1e 00 78    	mov.w     [w14], w0
    4a0a:	30 00 90    	mov.w     [w0+6], w0
    4a0c:	10 00 78    	mov.w     [w0], w0
    4a0e:	68 00 60    	and.w     w0, #0x8, w0
    4a10:	00 00 e0    	cp0.w     w0
    4a12:	fa ff 3a    	bra       NZ, 0x4a08 <.L32>

00004a14 <.LSM89>:
                                                //   clears on I2Cx
    bitclear(self->I2CxSTAT, 6);                // Clear I2COV bit
    4a14:	1e 00 78    	mov.w     [w14], w0
    4a16:	40 00 90    	mov.w     [w0+8], w0
    4a18:	9e 00 78    	mov.w     [w14], w1
    4a1a:	c1 00 90    	mov.w     [w1+8], w1
    4a1c:	11 01 78    	mov.w     [w1], w2
    4a1e:	f1 fb 2f    	mov.w     #0xffbf, w1
    4a20:	81 00 61    	and.w     w2, w1, w1
    4a22:	01 08 78    	mov.w     w1, [w0]

00004a24 <.LSM90>:
    return (uint8_t)(*(self->I2CxRCV));         // Return the received byte
    4a24:	1e 00 78    	mov.w     [w14], w0
    4a26:	10 00 78    	mov.w     [w0], w0
    4a28:	10 00 78    	mov.w     [w0], w0
    4a2a:	00 40 78    	mov.b     w0, w0

00004a2c <.LSM91>:
}
    4a2c:	00 80 fa    	ulnk      
    4a2e:	00 00 06    	return    

00004a30 <_init_servo_driver>:

_SERVODRIVER sd1;
_SERVO orientation_servo, speed_ind_servo, fuel_ind_servo, servo0, servo1, servo2, servo3, servo4;

void init_servo_driver(_SERVODRIVER *self, _I2C *bus, float i2c_freq, uint8_t hardware_addr) {
    4a30:	0a 00 fa    	lnk       #0xa
    4a32:	00 0f 78    	mov.w     w0, [w14]
    4a34:	11 07 98    	mov.w     w1, [w14+2]
    4a36:	22 07 98    	mov.w     w2, [w14+4]
    4a38:	33 07 98    	mov.w     w3, [w14+6]
    4a3a:	04 4f 98    	mov.b     w4, [w14+8]

00004a3c <.LSM1>:
    /*
    Initializes an I2C servo driver device given an initialized _I2C object
    and its 6-bit slave hardware address, as configured on the device.
    */
    self -> bus = bus;
    4a3c:	1e 00 78    	mov.w     [w14], w0
    4a3e:	9e 00 90    	mov.w     [w14+2], w1
    4a40:	01 08 78    	mov.w     w1, [w0]

00004a42 <.LSM2>:
    self -> hardware_addr = 0x3F & (hardware_addr);
    4a42:	0e 48 90    	mov.b     [w14+8], w0
    4a44:	f2 c3 b3    	mov.b     #0x3f, w2
    4a46:	82 40 60    	and.b     w0, w2, w1
    4a48:	1e 00 78    	mov.w     [w14], w0
    4a4a:	21 40 98    	mov.b     w1, [w0+2]

00004a4c <.LSM3>:
    self -> i2c_addr = 0x40 | self -> hardware_addr; // Add preceding 1 to addr
    4a4c:	1e 00 78    	mov.w     [w14], w0
    4a4e:	a0 40 90    	mov.b     [w0+2], w1
    4a50:	00 c4 b3    	mov.b     #0x40, w0
    4a52:	80 c0 70    	ior.b     w1, w0, w1
    4a54:	1e 00 78    	mov.w     [w14], w0
    4a56:	31 40 98    	mov.b     w1, [w0+3]

00004a58 <.LSM4>:
    self -> mode1 = 0b00100001; // Suggested mode configuration
    4a58:	1e 00 78    	mov.w     [w14], w0
    4a5a:	11 c2 b3    	mov.b     #0x21, w1
    4a5c:	01 48 98    	mov.b     w1, [w0+8]

00004a5e <.LSM5>:
    self -> i2c_freq = i2c_freq;
    4a5e:	1e 00 78    	mov.w     [w14], w0
    4a60:	2e 01 90    	mov.w     [w14+4], w2
    4a62:	be 01 90    	mov.w     [w14+6], w3
    4a64:	22 00 98    	mov.w     w2, [w0+4]
    4a66:	33 00 98    	mov.w     w3, [w0+6]

00004a68 <.LSM6>:
    i2c_open(self -> bus, i2c_freq); // Open I2C bus
    4a68:	1e 00 78    	mov.w     [w14], w0
    4a6a:	10 00 78    	mov.w     [w0], w0
    4a6c:	2e 01 90    	mov.w     [w14+4], w2
    4a6e:	be 01 90    	mov.w     [w14+6], w3
    4a70:	70 fe 07    	rcall     0x4752 <_i2c_open>

00004a72 <.LSM7>:
}
    4a72:	00 80 fa    	ulnk      
    4a74:	00 00 06    	return    

00004a76 <_close_servo_driver_i2c>:

void close_servo_driver_i2c(_SERVODRIVER *self) {
    4a76:	02 00 fa    	lnk       #0x2
    4a78:	00 0f 78    	mov.w     w0, [w14]

00004a7a <.LSM9>:
    /*
    Closes I2C communication object for the specified servo driver
    */
    i2c_close(self -> bus);
    4a7a:	1e 00 78    	mov.w     [w14], w0
    4a7c:	10 00 78    	mov.w     [w0], w0
    4a7e:	dc fe 07    	rcall     0x4838 <_i2c_close>

00004a80 <.LSM10>:
}
    4a80:	00 80 fa    	ulnk      
    4a82:	00 00 06    	return    

00004a84 <_init_servo>:

void init_servo(_SERVO *self, _SERVODRIVER *sd, uint8_t number) {
    4a84:	06 00 fa    	lnk       #0x6
    4a86:	00 0f 78    	mov.w     w0, [w14]
    4a88:	11 07 98    	mov.w     w1, [w14+2]
    4a8a:	42 47 98    	mov.b     w2, [w14+4]

00004a8c <.LSM12>:
    /*
    Initializes a servo object connected to an I2C servo driver. Requires an
    object representing the controlling I2C servo driver and the servo's
    numerical address (0-16, incl.) on its controlling I2C servo driver.
    */
    self -> driver = sd;
    4a8c:	1e 00 78    	mov.w     [w14], w0
    4a8e:	9e 00 90    	mov.w     [w14+2], w1
    4a90:	01 08 78    	mov.w     w1, [w0]

00004a92 <.LSM13>:
    self -> num = number;
    4a92:	1e 00 78    	mov.w     [w14], w0
    4a94:	ce 40 90    	mov.b     [w14+4], w1
    4a96:	21 40 98    	mov.b     w1, [w0+2]

00004a98 <.LSM14>:
}
    4a98:	00 80 fa    	ulnk      
    4a9a:	00 00 06    	return    

00004a9c <_servo_driver_sleep>:


void servo_driver_sleep(_SERVODRIVER *self) {
    4a9c:	04 00 fa    	lnk       #0x4
    4a9e:	10 07 98    	mov.w     w0, [w14+2]

00004aa0 <.LSM16>:
    /*
    Puts servo driver into low-power sleep mode (to wake, use wake()) and
    stores mode1 settings to self -> mode1 for later reinstatement on wake.
    */
    servo_driver_begin_transmission(self, I2C_READ);
    4aa0:	11 c0 b3    	mov.b     #0x1, w1
    4aa2:	1e 00 90    	mov.w     [w14+2], w0
    4aa4:	e5 00 07    	rcall     0x4c70 <_servo_driver_begin_transmission>

00004aa6 <.LSM17>:
    self -> mode1 = servo_driver_read_register(self, PCA9685_MODE1);
    4aa6:	80 40 eb    	clr.b     w1
    4aa8:	1e 00 90    	mov.w     [w14+2], w0
    4aaa:	02 01 07    	rcall     0x4cb0 <_servo_driver_read_register>
    4aac:	9e 00 90    	mov.w     [w14+2], w1
    4aae:	80 48 98    	mov.b     w0, [w1+8]

00004ab0 <.LSM18>:
    uint8_t sleep_mode = (self -> mode1 & 0x7F) | 0x10;
    4ab0:	1e 00 90    	mov.w     [w14+2], w0
    4ab2:	00 48 90    	mov.b     [w0+8], w0
    4ab4:	f0 46 b2    	and.b     #0x6f, w0
    4ab6:	00 44 a0    	bset.b    w0, #0x4
    4ab8:	00 4f 78    	mov.b     w0, [w14]

00004aba <.LSM19>:
    servo_driver_end_transmission(self);
    4aba:	1e 00 90    	mov.w     [w14+2], w0
    4abc:	05 01 07    	rcall     0x4cc8 <_servo_driver_end_transmission>

00004abe <.LSM20>:
    // Put servo driver to sleep
    servo_driver_begin_transmission(self, I2C_WRITE);
    4abe:	80 40 eb    	clr.b     w1
    4ac0:	1e 00 90    	mov.w     [w14+2], w0
    4ac2:	d6 00 07    	rcall     0x4c70 <_servo_driver_begin_transmission>

00004ac4 <.LSM21>:
    servo_driver_write_register(self, PCA9685_MODE1, sleep_mode);
    4ac4:	1e 41 78    	mov.b     [w14], w2
    4ac6:	80 40 eb    	clr.b     w1
    4ac8:	1e 00 90    	mov.w     [w14+2], w0
    4aca:	e4 00 07    	rcall     0x4c94 <_servo_driver_write_register>

00004acc <.LSM22>:
    servo_driver_end_transmission(self);
    4acc:	1e 00 90    	mov.w     [w14+2], w0
    4ace:	fc 00 07    	rcall     0x4cc8 <_servo_driver_end_transmission>

00004ad0 <.LSM23>:
}
    4ad0:	00 80 fa    	ulnk      
    4ad2:	00 00 06    	return    

00004ad4 <_servo_driver_wake>:

void servo_driver_wake(_SERVODRIVER *self) {
    4ad4:	02 00 fa    	lnk       #0x2
    4ad6:	00 0f 78    	mov.w     w0, [w14]

00004ad8 <.LSM25>:
    /*
    Wakes servo driver from sleep (to sleep, use servo_driver_sleep()) and
    reinstates mode1 settings from pre-sleep period (uses self -> mode1).
    */

    servo_driver_begin_transmission(self, I2C_WRITE);
    4ad8:	80 40 eb    	clr.b     w1
    4ada:	1e 00 78    	mov.w     [w14], w0
    4adc:	c9 00 07    	rcall     0x4c70 <_servo_driver_begin_transmission>

00004ade <.LSM26>:
    servo_driver_write_register(self, PCA9685_MODE1, self -> mode1);
    4ade:	1e 00 78    	mov.w     [w14], w0
    4ae0:	00 48 90    	mov.b     [w0+8], w0
    4ae2:	00 41 78    	mov.b     w0, w2
    4ae4:	80 40 eb    	clr.b     w1
    4ae6:	1e 00 78    	mov.w     [w14], w0
    4ae8:	d5 00 07    	rcall     0x4c94 <_servo_driver_write_register>

00004aea <.LSM27>:
    servo_driver_end_transmission(self);
    4aea:	1e 00 78    	mov.w     [w14], w0
    4aec:	ed 00 07    	rcall     0x4cc8 <_servo_driver_end_transmission>

00004aee <.LSM28>:
    // __delay_us(500); // Oscillator takes max 500us to restart from sleep
    servo_driver_begin_transmission(self, I2C_WRITE);
    4aee:	80 40 eb    	clr.b     w1
    4af0:	1e 00 78    	mov.w     [w14], w0
    4af2:	be 00 07    	rcall     0x4c70 <_servo_driver_begin_transmission>

00004af4 <.LSM29>:
    servo_driver_write_register(self, PCA9685_MODE1, self -> mode1 | 0xa1);
    4af4:	1e 00 78    	mov.w     [w14], w0
    4af6:	80 48 90    	mov.b     [w0+8], w1
    4af8:	10 ca b3    	mov.b     #0xa1, w0
    4afa:	00 c0 70    	ior.b     w1, w0, w0
    4afc:	00 41 78    	mov.b     w0, w2
    4afe:	80 40 eb    	clr.b     w1
    4b00:	1e 00 78    	mov.w     [w14], w0
    4b02:	c8 00 07    	rcall     0x4c94 <_servo_driver_write_register>

00004b04 <.LSM30>:
    // 0xa1 ensures the raising of the restart bit, ALLCALL, and auto-increment
    servo_driver_end_transmission(self);
    4b04:	1e 00 78    	mov.w     [w14], w0
    4b06:	e0 00 07    	rcall     0x4cc8 <_servo_driver_end_transmission>

00004b08 <.LSM31>:
    // Servo driver is awake and functioning again!
}
    4b08:	00 80 fa    	ulnk      
    4b0a:	00 00 06    	return    

00004b0c <_servo_driver_reset>:

void servo_driver_reset(_SERVODRIVER *self) {
    4b0c:	02 00 fa    	lnk       #0x2
    4b0e:	00 0f 78    	mov.w     w0, [w14]

00004b10 <.LSM33>:
    /*
    Follows the software reset procedure outlined in the datasheet.
    */
    i2c_start(self -> bus);
    4b10:	1e 00 78    	mov.w     [w14], w0
    4b12:	10 00 78    	mov.w     [w0], w0
    4b14:	b5 fe 07    	rcall     0x4880 <_i2c_start>

00004b16 <.LSM34>:
    i2c_putc(self -> bus, 0x00);
    4b16:	1e 00 78    	mov.w     [w14], w0
    4b18:	10 00 78    	mov.w     [w0], w0
    4b1a:	80 40 eb    	clr.b     w1
    4b1c:	2e ff 07    	rcall     0x497a <_i2c_putc>

00004b1e <.LSM35>:
    i2c_putc(self -> bus, 0x06);
    4b1e:	1e 00 78    	mov.w     [w14], w0
    4b20:	10 00 78    	mov.w     [w0], w0
    4b22:	61 c0 b3    	mov.b     #0x6, w1
    4b24:	2a ff 07    	rcall     0x497a <_i2c_putc>

00004b26 <.LSM36>:
    i2c_close(self -> bus);
    4b26:	1e 00 78    	mov.w     [w14], w0
    4b28:	10 00 78    	mov.w     [w0], w0
    4b2a:	86 fe 07    	rcall     0x4838 <_i2c_close>

00004b2c <.LSM37>:
}
    4b2c:	00 80 fa    	ulnk      
    4b2e:	00 00 06    	return    

00004b30 <_servo_driver_set_pwm_freq>:

void servo_driver_set_pwm_freq(_SERVODRIVER *self, float freq) {
    4b30:	0c 00 fa    	lnk       #0xc
    4b32:	30 07 98    	mov.w     w0, [w14+6]
    4b34:	42 07 98    	mov.w     w2, [w14+8]
    4b36:	53 07 98    	mov.w     w3, [w14+10]

00004b38 <.LSM39>:
    /*
    Sets the PWM frequency (bounds 24Hz - 1526Hz). This involves sleeping and
    restarting the servo driver.
    */
    freq *= 0.9;  // Correct for overshoot in the frequency setting
    4b38:	62 66 26    	mov.w     #0x6666, w2
    4b3a:	63 f6 23    	mov.w     #0x3f66, w3
    4b3c:	4e 00 90    	mov.w     [w14+8], w0
    4b3e:	de 00 90    	mov.w     [w14+10], w1
    4b40:	c5 e4 07    	rcall     0x14cc <___mulsf3>
    4b42:	40 07 98    	mov.w     w0, [w14+8]
    4b44:	51 07 98    	mov.w     w1, [w14+10]

00004b46 <.LSM40>:
    float prescaleval = 25000000;
    4b46:	00 c2 2b    	mov.w     #0xbc20, w0
    4b48:	e1 bb 24    	mov.w     #0x4bbe, w1
    4b4a:	00 8f be    	mov.d     w0, [w14]

00004b4c <.LSM41>:
    prescaleval /= 4096;
    4b4c:	02 00 20    	mov.w     #0x0, w2
    4b4e:	03 58 24    	mov.w     #0x4580, w3
    4b50:	1e 00 be    	mov.d     [w14], w0
    4b52:	fe e3 07    	rcall     0x1350 <___divsf3>
    4b54:	00 8f be    	mov.d     w0, [w14]

00004b56 <.LSM42>:
    prescaleval /= freq;
    4b56:	4e 01 90    	mov.w     [w14+8], w2
    4b58:	de 01 90    	mov.w     [w14+10], w3
    4b5a:	1e 00 be    	mov.d     [w14], w0
    4b5c:	f9 e3 07    	rcall     0x1350 <___divsf3>
    4b5e:	00 8f be    	mov.d     w0, [w14]

00004b60 <.LSM43>:
    prescaleval -= 1;
    4b60:	02 00 20    	mov.w     #0x0, w2
    4b62:	03 f8 23    	mov.w     #0x3f80, w3
    4b64:	1e 00 be    	mov.d     [w14], w0
    4b66:	96 e3 07    	rcall     0x1294 <___subsf3>
    4b68:	00 8f be    	mov.d     w0, [w14]

00004b6a <.LSM44>:
    uint8_t prescale = floor(prescaleval + 0.5);
    4b6a:	02 00 20    	mov.w     #0x0, w2
    4b6c:	03 f0 23    	mov.w     #0x3f00, w3
    4b6e:	1e 00 be    	mov.d     [w14], w0
    4b70:	92 e3 07    	rcall     0x1296 <___addsf3>
    4b72:	51 e4 07    	rcall     0x1416 <_floorf>
    4b74:	33 e4 07    	rcall     0x13dc <___fixunssfsi>
    4b76:	40 47 98    	mov.b     w0, [w14+4]

00004b78 <.LSM45>:
    // PWM frequency can only be updated when servo driver is asleep.
    servo_driver_sleep(self);
    4b78:	3e 00 90    	mov.w     [w14+6], w0
    4b7a:	90 ff 07    	rcall     0x4a9c <_servo_driver_sleep>

00004b7c <.LSM46>:
    servo_driver_begin_transmission(self, I2C_WRITE);
    4b7c:	80 40 eb    	clr.b     w1
    4b7e:	3e 00 90    	mov.w     [w14+6], w0
    4b80:	77 00 07    	rcall     0x4c70 <_servo_driver_begin_transmission>

00004b82 <.LSM47>:
    servo_driver_write_register(self, PCA9685_PRESCALE, prescale);
    4b82:	4e 41 90    	mov.b     [w14+4], w2
    4b84:	e1 cf b3    	mov.b     #0xfe, w1
    4b86:	3e 00 90    	mov.w     [w14+6], w0
    4b88:	85 00 07    	rcall     0x4c94 <_servo_driver_write_register>

00004b8a <.LSM48>:
    servo_driver_end_transmission(self);
    4b8a:	3e 00 90    	mov.w     [w14+6], w0
    4b8c:	9d 00 07    	rcall     0x4cc8 <_servo_driver_end_transmission>

00004b8e <.LSM49>:
    servo_driver_wake(self);
    4b8e:	3e 00 90    	mov.w     [w14+6], w0
    4b90:	a1 ff 07    	rcall     0x4ad4 <_servo_driver_wake>

00004b92 <.LSM50>:
}
    4b92:	00 80 fa    	ulnk      
    4b94:	00 00 06    	return    

00004b96 <_servo_set_pwm>:

void servo_set_pwm(_SERVO *self, uint16_t on, uint16_t off) {
    4b96:	06 00 fa    	lnk       #0x6
    4b98:	00 0f 78    	mov.w     w0, [w14]
    4b9a:	11 07 98    	mov.w     w1, [w14+2]
    4b9c:	22 07 98    	mov.w     w2, [w14+4]

00004b9e <.LSM52>:
    /*
    Sets a PWM signal as specified by the datasheet by writing 16-bit on and
    "off" values into a series of four registers. This requires that auto-
    increment be enabled in the MODE1 register.
    */

    servo_driver_begin_transmission(self -> driver, I2C_WRITE);
    4b9e:	1e 00 78    	mov.w     [w14], w0
    4ba0:	10 00 78    	mov.w     [w0], w0
    4ba2:	80 40 eb    	clr.b     w1
    4ba4:	65 00 07    	rcall     0x4c70 <_servo_driver_begin_transmission>

00004ba6 <.LSM53>:
    i2c_putc(self -> driver -> bus, DEV0_ON_L + 4 * self -> num);
    4ba6:	1e 00 78    	mov.w     [w14], w0
    4ba8:	a0 40 90    	mov.b     [w0+2], w1
    4baa:	20 00 20    	mov.w     #0x2, w0
    4bac:	00 08 dd    	sl.w      w1, w0, w0
    4bae:	e6 40 40    	add.b     w0, #0x6, w1
    4bb0:	1e 00 78    	mov.w     [w14], w0
    4bb2:	10 00 78    	mov.w     [w0], w0
    4bb4:	10 00 78    	mov.w     [w0], w0
    4bb6:	e1 fe 07    	rcall     0x497a <_i2c_putc>

00004bb8 <.LSM54>:
    i2c_putc(self -> driver -> bus, on);
    4bb8:	1e 00 90    	mov.w     [w14+2], w0
    4bba:	80 40 78    	mov.b     w0, w1
    4bbc:	1e 00 78    	mov.w     [w14], w0
    4bbe:	10 00 78    	mov.w     [w0], w0
    4bc0:	10 00 78    	mov.w     [w0], w0
    4bc2:	db fe 07    	rcall     0x497a <_i2c_putc>

00004bc4 <.LSM55>:
    i2c_putc(self -> driver -> bus, on >> 8);
    4bc4:	1e 00 90    	mov.w     [w14+2], w0
    4bc6:	48 00 de    	lsr.w     w0, #0x8, w0
    4bc8:	80 40 78    	mov.b     w0, w1
    4bca:	1e 00 78    	mov.w     [w14], w0
    4bcc:	10 00 78    	mov.w     [w0], w0
    4bce:	10 00 78    	mov.w     [w0], w0
    4bd0:	d4 fe 07    	rcall     0x497a <_i2c_putc>

00004bd2 <.LSM56>:
    i2c_putc(self -> driver -> bus, off);
    4bd2:	2e 00 90    	mov.w     [w14+4], w0
    4bd4:	80 40 78    	mov.b     w0, w1
    4bd6:	1e 00 78    	mov.w     [w14], w0
    4bd8:	10 00 78    	mov.w     [w0], w0
    4bda:	10 00 78    	mov.w     [w0], w0
    4bdc:	ce fe 07    	rcall     0x497a <_i2c_putc>

00004bde <.LSM57>:
    i2c_putc(self -> driver -> bus, off >> 8);
    4bde:	2e 00 90    	mov.w     [w14+4], w0
    4be0:	48 00 de    	lsr.w     w0, #0x8, w0
    4be2:	80 40 78    	mov.b     w0, w1
    4be4:	1e 00 78    	mov.w     [w14], w0
    4be6:	10 00 78    	mov.w     [w0], w0
    4be8:	10 00 78    	mov.w     [w0], w0
    4bea:	c7 fe 07    	rcall     0x497a <_i2c_putc>

00004bec <.LSM58>:
    servo_driver_end_transmission(self -> driver);
    4bec:	1e 00 78    	mov.w     [w14], w0
    4bee:	10 00 78    	mov.w     [w0], w0
    4bf0:	6b 00 07    	rcall     0x4cc8 <_servo_driver_end_transmission>

00004bf2 <.LSM59>:
}
    4bf2:	00 80 fa    	ulnk      
    4bf4:	00 00 06    	return    

00004bf6 <_servo_set>:

void servo_set(_SERVO *self, uint16_t val, bool invert) {
    4bf6:	06 00 fa    	lnk       #0x6
    4bf8:	00 0f 78    	mov.w     w0, [w14]
    4bfa:	11 07 98    	mov.w     w1, [w14+2]
    4bfc:	42 47 98    	mov.b     w2, [w14+4]

00004bfe <.LSM61>:
    /*
    Sets pin without having to deal with on/off tick placement and properly
    handles a zero value as completely off.  Optional invert parameter supports
    inverting the pulse for sinking to ground.
    Val should be a value from 0 to 4095 inclusive.
    */
    // Clamp value between 0 and 4095 inclusive.
    if ( val > 4095) {
    4bfe:	9e 00 90    	mov.w     [w14+2], w1
    4c00:	f0 ff 20    	mov.w     #0xfff, w0
    4c02:	80 8f 50    	sub.w     w1, w0, [w15]
    4c04:	02 00 36    	bra       LEU, 0x4c0a <.L10>

00004c06 <.LSM62>:
        val = 4095;
    4c06:	f0 ff 20    	mov.w     #0xfff, w0
    4c08:	10 07 98    	mov.w     w0, [w14+2]

00004c0a <.L10>:
    }
    if (invert) {
    4c0a:	4e 40 90    	mov.b     [w14+4], w0
    4c0c:	00 04 e0    	cp0.b     w0
    4c0e:	19 00 32    	bra       Z, 0x4c42 <.L11>

00004c10 <.LSM64>:
        if (val == 0) {
    4c10:	1e 00 90    	mov.w     [w14+2], w0
    4c12:	00 00 e0    	cp0.w     w0
    4c14:	05 00 3a    	bra       NZ, 0x4c20 <.L12>

00004c16 <.LSM65>:
            // Special value for signal fully on.
            servo_set_pwm(self, 4096, 0);
    4c16:	00 01 eb    	clr.w     w2
    4c18:	01 00 21    	mov.w     #0x1000, w1
    4c1a:	1e 00 78    	mov.w     [w14], w0
    4c1c:	bc ff 07    	rcall     0x4b96 <_servo_set_pwm>
    4c1e:	26 00 37    	bra       0x4c6c <.L9>

00004c20 <.L12>:
        }
        else if (val == 4095) {
    4c20:	9e 00 90    	mov.w     [w14+2], w1
    4c22:	f0 ff 20    	mov.w     #0xfff, w0
    4c24:	80 8f 50    	sub.w     w1, w0, [w15]
    4c26:	05 00 3a    	bra       NZ, 0x4c32 <.L14>

00004c28 <.LSM67>:
            // Special value for signal fully off.
            servo_set_pwm(self, 0, 4096);
    4c28:	02 00 21    	mov.w     #0x1000, w2
    4c2a:	80 00 eb    	clr.w     w1
    4c2c:	1e 00 78    	mov.w     [w14], w0
    4c2e:	b3 ff 07    	rcall     0x4b96 <_servo_set_pwm>
    4c30:	1d 00 37    	bra       0x4c6c <.L9>

00004c32 <.L14>:
        }
        else {
            servo_set_pwm(self, 0, 4095 - val);
    4c32:	f1 ff 20    	mov.w     #0xfff, w1
    4c34:	1e 00 90    	mov.w     [w14+2], w0
    4c36:	00 80 50    	sub.w     w1, w0, w0
    4c38:	00 01 78    	mov.w     w0, w2
    4c3a:	80 00 eb    	clr.w     w1
    4c3c:	1e 00 78    	mov.w     [w14], w0
    4c3e:	ab ff 07    	rcall     0x4b96 <_servo_set_pwm>
    4c40:	15 00 37    	bra       0x4c6c <.L9>

00004c42 <.L11>:
        }
    }
    else {
        if (val == 4095) {
    4c42:	9e 00 90    	mov.w     [w14+2], w1
    4c44:	f0 ff 20    	mov.w     #0xfff, w0
    4c46:	80 8f 50    	sub.w     w1, w0, [w15]
    4c48:	05 00 3a    	bra       NZ, 0x4c54 <.L15>

00004c4a <.LSM70>:
            // Special value for signal fully on.
            servo_set_pwm(self, 4096, 0);
    4c4a:	00 01 eb    	clr.w     w2
    4c4c:	01 00 21    	mov.w     #0x1000, w1
    4c4e:	1e 00 78    	mov.w     [w14], w0
    4c50:	a2 ff 07    	rcall     0x4b96 <_servo_set_pwm>
    4c52:	0c 00 37    	bra       0x4c6c <.L9>

00004c54 <.L15>:
        }
        else if (val == 0) {
    4c54:	1e 00 90    	mov.w     [w14+2], w0
    4c56:	00 00 e0    	cp0.w     w0
    4c58:	05 00 3a    	bra       NZ, 0x4c64 <.L16>

00004c5a <.LSM72>:
            // Special value for signal fully off.
            servo_set_pwm(self, 0, 4096);
    4c5a:	02 00 21    	mov.w     #0x1000, w2
    4c5c:	80 00 eb    	clr.w     w1
    4c5e:	1e 00 78    	mov.w     [w14], w0
    4c60:	9a ff 07    	rcall     0x4b96 <_servo_set_pwm>
    4c62:	04 00 37    	bra       0x4c6c <.L9>

00004c64 <.L16>:
        }
        else {
            servo_set_pwm(self, 0, val);
    4c64:	1e 01 90    	mov.w     [w14+2], w2
    4c66:	80 00 eb    	clr.w     w1
    4c68:	1e 00 78    	mov.w     [w14], w0
    4c6a:	95 ff 07    	rcall     0x4b96 <_servo_set_pwm>

00004c6c <.L9>:
        }
    }
}
    4c6c:	00 80 fa    	ulnk      
    4c6e:	00 00 06    	return    

00004c70 <_servo_driver_begin_transmission>:


void servo_driver_begin_transmission(_SERVODRIVER *dest, uint8_t rw) {
    4c70:	06 00 fa    	lnk       #0x6
    4c72:	10 07 98    	mov.w     w0, [w14+2]
    4c74:	41 47 98    	mov.b     w1, [w14+4]

00004c76 <.LSM76>:
    /*
    Addresses the specified servo driver over I2C. This should be followed by
    the writing of registers/other commands to this servo driver. rw specifies
    whether the following operations will be "read" (rw=1) or "write" (rw=0)
    operations.
    */
    i2c_start(dest -> bus);
    4c76:	1e 00 90    	mov.w     [w14+2], w0
    4c78:	10 00 78    	mov.w     [w0], w0
    4c7a:	02 fe 07    	rcall     0x4880 <_i2c_start>

00004c7c <.LSM77>:
    uint8_t assembled_addr = (dest -> i2c_addr << 1) + rw;
    4c7c:	1e 00 90    	mov.w     [w14+2], w0
    4c7e:	30 40 90    	mov.b     [w0+3], w0
    4c80:	00 40 40    	add.b     w0, w0, w0
    4c82:	80 40 78    	mov.b     w0, w1
    4c84:	4e 40 90    	mov.b     [w14+4], w0
    4c86:	00 cf 40    	add.b     w1, w0, [w14]

00004c88 <.LSM78>:
    i2c_putc(dest -> bus, assembled_addr);
    4c88:	1e 00 90    	mov.w     [w14+2], w0
    4c8a:	10 00 78    	mov.w     [w0], w0
    4c8c:	9e 40 78    	mov.b     [w14], w1
    4c8e:	75 fe 07    	rcall     0x497a <_i2c_putc>

00004c90 <.LSM79>:
}
    4c90:	00 80 fa    	ulnk      
    4c92:	00 00 06    	return    

00004c94 <_servo_driver_write_register>:

void servo_driver_write_register(_SERVODRIVER *dest, uint8_t reg, uint8_t val) {
    4c94:	04 00 fa    	lnk       #0x4
    4c96:	00 0f 78    	mov.w     w0, [w14]
    4c98:	21 47 98    	mov.b     w1, [w14+2]
    4c9a:	32 47 98    	mov.b     w2, [w14+3]

00004c9c <.LSM81>:
    i2c_putc(dest -> bus, reg);
    4c9c:	1e 00 78    	mov.w     [w14], w0
    4c9e:	10 00 78    	mov.w     [w0], w0
    4ca0:	ae 40 90    	mov.b     [w14+2], w1
    4ca2:	6b fe 07    	rcall     0x497a <_i2c_putc>

00004ca4 <.LSM82>:
    i2c_putc(dest -> bus, val);
    4ca4:	1e 00 78    	mov.w     [w14], w0
    4ca6:	10 00 78    	mov.w     [w0], w0
    4ca8:	be 40 90    	mov.b     [w14+3], w1
    4caa:	67 fe 07    	rcall     0x497a <_i2c_putc>

00004cac <.LSM83>:
}
    4cac:	00 80 fa    	ulnk      
    4cae:	00 00 06    	return    

00004cb0 <_servo_driver_read_register>:

uint8_t servo_driver_read_register(_SERVODRIVER *dest, uint8_t reg) {
    4cb0:	04 00 fa    	lnk       #0x4
    4cb2:	00 0f 78    	mov.w     w0, [w14]
    4cb4:	21 47 98    	mov.b     w1, [w14+2]

00004cb6 <.LSM85>:
    i2c_putc(dest -> bus, reg);
    4cb6:	1e 00 78    	mov.w     [w14], w0
    4cb8:	10 00 78    	mov.w     [w0], w0
    4cba:	ae 40 90    	mov.b     [w14+2], w1
    4cbc:	5e fe 07    	rcall     0x497a <_i2c_putc>

00004cbe <.LSM86>:
    return i2c_getc(dest -> bus);
    4cbe:	1e 00 78    	mov.w     [w14], w0
    4cc0:	10 00 78    	mov.w     [w0], w0
    4cc2:	98 fe 07    	rcall     0x49f4 <_i2c_getc>

00004cc4 <.LSM87>:
}
    4cc4:	00 80 fa    	ulnk      
    4cc6:	00 00 06    	return    

00004cc8 <_servo_driver_end_transmission>:

void servo_driver_end_transmission(_SERVODRIVER *dest) {
    4cc8:	02 00 fa    	lnk       #0x2
    4cca:	00 0f 78    	mov.w     w0, [w14]

00004ccc <.LSM89>:
    i2c_stop(dest -> bus);
    4ccc:	1e 00 78    	mov.w     [w14], w0
    4cce:	10 00 78    	mov.w     [w0], w0
    4cd0:	30 fe 07    	rcall     0x4932 <_i2c_stop>

00004cd2 <.LSM90>:
}    4cd2:	00 80 fa    	ulnk      
    4cd4:	00 00 06    	return    

00004cd6 <_print_buffer>:

uint8_t MC_TXBUF[1024], MC_RXBUF[1024];
uint8_t TX_BUF[1024], RX_BUF[1024];

void print_buffer(uint8_t *buffer, uint16_t size) {
    4cd6:	0a 00 fa    	lnk       #0xa
    4cd8:	30 07 98    	mov.w     w0, [w14+6]
    4cda:	41 07 98    	mov.w     w1, [w14+8]

00004cdc <.LSM1>:
    int i;
    uint8_t* buf_str = (uint8_t*) malloc (2*size + 1);
    4cdc:	4e 00 90    	mov.w     [w14+8], w0
    4cde:	00 00 40    	add.w     w0, w0, w0
    4ce0:	00 00 e8    	inc.w     w0, w0
    4ce2:	dc e4 07    	rcall     0x169c <_malloc>
    4ce4:	20 07 98    	mov.w     w0, [w14+4]

00004ce6 <.LSM2>:
    uint8_t* buf_ptr = buf_str;
    4ce6:	ae 00 90    	mov.w     [w14+4], w1
    4ce8:	11 07 98    	mov.w     w1, [w14+2]

00004cea <.LSM3>:
    for (i = 0; i < size; i++)
    4cea:	00 00 eb    	clr.w     w0
    4cec:	00 0f 78    	mov.w     w0, [w14]
    4cee:	0f 00 37    	bra       0x4d0e <.L2>

00004cf0 <.L3>:
    {
        buf_ptr += sprintf(buf_ptr, "%02X", buffer[i]);
    4cf0:	1e 00 78    	mov.w     [w14], w0
    4cf2:	be 00 90    	mov.w     [w14+6], w1
    4cf4:	00 80 40    	add.w     w1, w0, w0
    4cf6:	10 40 78    	mov.b     [w0], w0
    4cf8:	80 80 fb    	ze        w0, w1
    4cfa:	1e 00 90    	mov.w     [w14+2], w0
    4cfc:	81 1f 78    	mov.w     w1, [w15++]
    4cfe:	21 a0 2a    	mov.w     #0xaa02, w1
    4d00:	81 1f 78    	mov.w     w1, [w15++]
    4d02:	84 e6 07    	rcall     0x1a0c <__sprintf_cdnopuxX>
    4d04:	e4 87 57    	sub.w     w15, #0x4, w15
    4d06:	9e 00 90    	mov.w     [w14+2], w1
    4d08:	00 80 40    	add.w     w1, w0, w0
    4d0a:	10 07 98    	mov.w     w0, [w14+2]

00004d0c <.LSM5>:
    4d0c:	1e 0f e8    	inc.w     [w14], [w14]

00004d0e <.L2>:
    4d0e:	9e 00 78    	mov.w     [w14], w1
    4d10:	4e 00 90    	mov.w     [w14+8], w0
    4d12:	80 8f 50    	sub.w     w1, w0, [w15]
    4d14:	ed ff 39    	bra       NC, 0x4cf0 <.L3>

00004d16 <.LSM6>:
    }
    sprintf(buf_ptr,"\n");
    4d16:	1e 00 90    	mov.w     [w14+2], w0
    4d18:	22 00 20    	mov.w     #0x2, w2
    4d1a:	71 a0 2a    	mov.w     #0xaa07, w1
    4d1c:	e9 e4 07    	rcall     0x16f0 <_memcpy>

00004d1e <.LSM7>:
    *(buf_ptr + 1) = '\0';
    4d1e:	1e 00 90    	mov.w     [w14+2], w0
    4d20:	00 00 e8    	inc.w     w0, w0
    4d22:	80 40 eb    	clr.b     w1
    4d24:	01 48 78    	mov.b     w1, [w0]

00004d26 <.LSM8>:
    printf("%s\n", buf_str);
    4d26:	2e 00 90    	mov.w     [w14+4], w0
    4d28:	ea e4 07    	rcall     0x16fe <_puts>

00004d2a <.LSM9>:
}
    4d2a:	00 80 fa    	ulnk      
    4d2c:	00 00 06    	return    

00004d2e <_check_for_string>:

char check_for_string(uint8_t *str) {
    4d2e:	06 00 fa    	lnk       #0x6
    4d30:	20 07 98    	mov.w     w0, [w14+4]

00004d32 <.LSM11>:
    /*
    If the input string buffer is "test", turn on led1 and return 1. Else 
    turn off led1 and return 0.
    */
    int rc = strcmp(str, "test");
    4d32:	91 a0 2a    	mov.w     #0xaa09, w1
    4d34:	2e 00 90    	mov.w     [w14+4], w0
    4d36:	ee e4 07    	rcall     0x1714 <_strcmp>
    4d38:	10 07 98    	mov.w     w0, [w14+2]

00004d3a <.LSM12>:
    char out;
    if (rc == 0) {
    4d3a:	1e 00 90    	mov.w     [w14+2], w0
    4d3c:	00 00 e0    	cp0.w     w0
    4d3e:	05 00 3a    	bra       NZ, 0x4d4a <.L5>

00004d40 <.LSM13>:
        led_on(&led1);
    4d40:	00 80 20    	mov.w     #0x800, w0
    4d42:	4a 01 07    	rcall     0x4fd8 <_led_on>

00004d44 <.LSM14>:
        out = 1;
    4d44:	10 c0 b3    	mov.b     #0x1, w0
    4d46:	00 4f 78    	mov.b     w0, [w14]
    4d48:	04 00 37    	bra       0x4d52 <.L6>

00004d4a <.L5>:
    } else {
        led_off(&led1);
    4d4a:	00 80 20    	mov.w     #0x800, w0
    4d4c:	55 01 07    	rcall     0x4ff8 <_led_off>

00004d4e <.LSM16>:
        out = 0;
    4d4e:	00 40 eb    	clr.b     w0
    4d50:	00 4f 78    	mov.b     w0, [w14]

00004d52 <.L6>:
    }
    return out;
    4d52:	1e 40 78    	mov.b     [w14], w0

00004d54 <.LSM18>:
}
    4d54:	00 80 fa    	ulnk      
    4d56:	00 00 06    	return    

00004d58 <_convert_msg>:

uint64_t convert_msg(uint8_t *str) {
    4d58:	0a 00 fa    	lnk       #0xa
    4d5a:	40 07 98    	mov.w     w0, [w14+8]

00004d5c <.LSM20>:
    /* 
    Interprets string buffer which represents a hexadecimal number and stores 
    the encoded value as a uint64_t
    */

    // sprintf(a, "%08x%08x\r\n", 0xffff, 40);
    // printf("%d\r\n", a[0]);
    // printf("%s", a);
    uint64_t decoded_msg = (uint64_t)strtoll(str, NULL, 16);
    4d5c:	02 01 20    	mov.w     #0x10, w2
    4d5e:	80 00 eb    	clr.w     w1
    4d60:	4e 00 90    	mov.w     [w14+8], w0
    4d62:	e8 e4 07    	rcall     0x1734 <_strtoll>
    4d64:	cf 80 de    	asr.w     w0, #0xf, w1
    4d66:	61 09 b9    	mul.su    w1, #0x1, w2
    4d68:	00 9f be    	mov.d     w0, [w14++]
    4d6a:	02 97 be    	mov.d     w2, [w14--]

00004d6c <.LSM21>:
    return decoded_msg;
    4d6c:	3e 00 be    	mov.d     [w14++], w0
    4d6e:	2e 01 be    	mov.d     [w14--], w2

00004d70 <.LSM22>:
}
    4d70:	00 80 fa    	ulnk      
    4d72:	00 00 06    	return    

00004d74 <_parse_addr>:

char parse_addr(uint64_t *msg) {
    4d74:	04 00 fa    	lnk       #0x4
    4d76:	10 07 98    	mov.w     w0, [w14+2]

00004d78 <.LSM24>:
    /*
    Parses the received message and returns a char representing whether this 
    information is addressed to this device.
    */
    // uint8_t msg_addr = (uint8_t)(*msg & ((uint64_t)(0xFF) << 56));
    uint8_t msg_addr = (uint8_t)(*msg & ((uint64_t)(0xFF)));
    4d78:	1e 00 90    	mov.w     [w14+2], w0
    4d7a:	50 01 be    	mov.d     [++w0], w2
    4d7c:	40 00 be    	mov.d     [--w0], w0
    4d7e:	10 47 98    	mov.b     w0, [w14+1]

00004d80 <.LSM25>:
    char is_recipient = 0;
    4d80:	00 40 eb    	clr.b     w0
    4d82:	00 4f 78    	mov.b     w0, [w14]

00004d84 <.LSM26>:
    if (msg_addr == LOCAL_ADDR) {
    4d84:	1e 40 90    	mov.b     [w14+1], w0
    4d86:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4d88:	02 00 3a    	bra       NZ, 0x4d8e <.L9>

00004d8a <.LSM27>:
        is_recipient = 1;
    4d8a:	10 c0 b3    	mov.b     #0x1, w0
    4d8c:	00 4f 78    	mov.b     w0, [w14]

00004d8e <.L9>:
    }
    return is_recipient;
    4d8e:	1e 40 78    	mov.b     [w14], w0

00004d90 <.LSM29>:
}
    4d90:	00 80 fa    	ulnk      
    4d92:	00 00 06    	return    

00004d94 <_setup_uart>:

void setup_uart() {
    4d94:	04 00 fa    	lnk       #0x4

00004d96 <.LSM31>:
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           // 0, TXBUF, 1024, RXBUF, 1024);

    // uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
    //            float baudrate, int8_t parity, int16_t stopbits, 
    //            uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
    //            uint8_t *RXbuffer, uint16_t RXbufferlen)

    // uart_open(&uart2, &D[0], &D[1], NULL, NULL, 115200., 'N', 1, 
    //           0, MC_TXBUF, 1024, MC_RXBUF, 1024);
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           0, TXBUF, 1024, RXBUF, 1024);
    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    4d96:	40 6d 20    	mov.w     #0x6d4, w0
    4d98:	80 1f 78    	mov.w     w0, [w15++]
    4d9a:	57 01 20    	mov.w     #0x15, w7
    4d9c:	86 c0 b3    	mov.b     #0x8, w6
    4d9e:	80 82 eb    	setm.w    w5
    4da0:	64 c0 b3    	mov.b     #0x6, w4
    4da2:	80 01 eb    	clr.w     w3
    4da4:	02 2f 20    	mov.w     #0x2f0, w2
    4da6:	21 2f 20    	mov.w     #0x2f2, w1
    4da8:	a0 94 21    	mov.w     #0x194a, w0
    4daa:	f9 f8 07    	rcall     0x3f9e <_pin_init>
    4dac:	8f 87 e9    	dec2.w    w15, w15

00004dae <.LSM32>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    4dae:	a0 6d 20    	mov.w     #0x6da, w0
    4db0:	80 1f 78    	mov.w     w0, [w15++]
    4db2:	a7 01 20    	mov.w     #0x1a, w7
    4db4:	00 43 eb    	clr.b     w6
    4db6:	80 82 eb    	setm.w    w5
    4db8:	74 c0 b3    	mov.b     #0x7, w4
    4dba:	80 01 eb    	clr.w     w3
    4dbc:	02 2f 20    	mov.w     #0x2f0, w2
    4dbe:	21 2f 20    	mov.w     #0x2f2, w1
    4dc0:	00 96 21    	mov.w     #0x1960, w0
    4dc2:	ed f8 07    	rcall     0x3f9e <_pin_init>
    4dc4:	8f 87 e9    	dec2.w    w15, w15

00004dc6 <.LSM33>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);
    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    4dc6:	00 40 20    	mov.w     #0x400, w0
    4dc8:	80 1f 78    	mov.w     w0, [w15++]
    4dca:	a0 45 21    	mov.w     #0x145a, w0
    4dcc:	80 1f 78    	mov.w     w0, [w15++]
    4dce:	00 40 20    	mov.w     #0x400, w0
    4dd0:	80 1f 78    	mov.w     w0, [w15++]
    4dd2:	a0 05 21    	mov.w     #0x105a, w0
    4dd4:	80 1f 78    	mov.w     w0, [w15++]
    4dd6:	00 00 eb    	clr.w     w0
    4dd8:	80 1f 78    	mov.w     w0, [w15++]
    4dda:	10 00 20    	mov.w     #0x1, w0
    4ddc:	80 1f 78    	mov.w     w0, [w15++]
    4dde:	e5 c4 b3    	mov.b     #0x4e, w5
    4de0:	06 00 20    	mov.w     #0x0, w6
    4de2:	67 69 24    	mov.w     #0x4696, w7
    4de4:	00 02 eb    	clr.w     w4
    4de6:	80 01 eb    	clr.w     w3
    4de8:	02 96 21    	mov.w     #0x1960, w2
    4dea:	a1 94 21    	mov.w     #0x194a, w1
    4dec:	a0 85 21    	mov.w     #0x185a, w0
    4dee:	00 f1 07    	rcall     0x2ff0 <_uart_open>
    4df0:	ec 87 57    	sub.w     w15, #0xc, w15

00004df2 <.LSM34>:
             0, TX_BUF, 1024, RX_BUF, 1024);
    _UART *_stdout, *_stderr;
    _stdout = &uart1;
    4df2:	a0 85 21    	mov.w     #0x185a, w0
    4df4:	00 0f 78    	mov.w     w0, [w14]

00004df6 <.LSM35>:
    _stderr = &uart1;
    4df6:	a0 85 21    	mov.w     #0x185a, w0
    4df8:	10 07 98    	mov.w     w0, [w14+2]

00004dfa <.LSM36>:
}
    4dfa:	00 80 fa    	ulnk      
    4dfc:	00 00 06    	return    

00004dfe <_setup>:

void setup() {
    4dfe:	00 00 fa    	lnk       #0x0

00004e00 <.LSM38>:
    printf("START\n\r");
    4e00:	e0 a0 2a    	mov.w     #0xaa0e, w0
    4e02:	80 1f 78    	mov.w     w0, [w15++]
    4e04:	da e7 07    	rcall     0x1dba <__printf_s>
    4e06:	8f 87 e9    	dec2.w    w15, w15

00004e08 <.LSM39>:
    timer_setPeriod(&timer1, 1);  // Timer for LED operation/status blink
    4e08:	02 00 20    	mov.w     #0x0, w2
    4e0a:	03 f8 23    	mov.w     #0x3f80, w3
    4e0c:	80 45 22    	mov.w     #0x2458, w0
    4e0e:	f3 f5 07    	rcall     0x39f6 <_timer_setPeriod>

00004e10 <.LSM40>:
    timer_setPeriod(&timer2, 0.5);
    4e10:	02 00 20    	mov.w     #0x0, w2
    4e12:	03 f0 23    	mov.w     #0x3f00, w3
    4e14:	e0 46 22    	mov.w     #0x246e, w0
    4e16:	ef f5 07    	rcall     0x39f6 <_timer_setPeriod>

00004e18 <.LSM41>:
    // ** period was 0.1 for rocket-motor-control branch; if shit goes wrong, this could be a culprit
    timer_setPeriod(&timer3, 0.01);
    4e18:	a2 70 2d    	mov.w     #0xd70a, w2
    4e1a:	33 c2 23    	mov.w     #0x3c23, w3
    4e1c:	40 48 22    	mov.w     #0x2484, w0
    4e1e:	eb f5 07    	rcall     0x39f6 <_timer_setPeriod>

00004e20 <.LSM42>:
    timer_start(&timer1);
    4e20:	80 45 22    	mov.w     #0x2458, w0
    4e22:	b8 f6 07    	rcall     0x3b94 <_timer_start>

00004e24 <.LSM43>:
    timer_start(&timer2);
    4e24:	e0 46 22    	mov.w     #0x246e, w0
    4e26:	b6 f6 07    	rcall     0x3b94 <_timer_start>

00004e28 <.LSM44>:
    timer_start(&timer3);
    4e28:	40 48 22    	mov.w     #0x2484, w0
    4e2a:	b4 f6 07    	rcall     0x3b94 <_timer_start>

00004e2c <.LSM45>:

    // quad_init(&quad1, &D[12], &D[13]); // quad1 uses pins D12 & D13
    // quad_every(&quad1, &timer5, 0.0000875); // quad1 will use timer5 interrupts

    // // Optional Quad Encoder Debug Pins
    // pin_digitalOut(&D[6]); // b0
    // pin_digitalOut(&D[7]); // b1
    // pin_digitalOut(&D[8]); // b2
    // pin_digitalOut(&D[9]); // b3

    // // Debug button output pins
    // pin_digitalOut(&D[11]);
    // pin_digitalOut(&D[10]);

    // // General use debugging output pin
    // pin_digitalOut(&D[2]);

    // Motor pins
    MOTOR_DIR = &D[0];
    4e2c:	60 17 22    	mov.w     #0x2176, w0
    4e2e:	80 42 88    	mov.w     w0, 0x850

00004e30 <.LSM46>:
    FWD = &D[2];
    4e30:	20 1a 22    	mov.w     #0x21a2, w0
    4e32:	90 42 88    	mov.w     w0, 0x852

00004e34 <.LSM47>:
    REV = &D[13];
    4e34:	40 29 22    	mov.w     #0x2294, w0
    4e36:	a0 42 88    	mov.w     w0, 0x854

00004e38 <.LSM48>:

    setup_uart();
    4e38:	ad ff 07    	rcall     0x4d94 <_setup_uart>

00004e3a <.LSM49>:

}
    4e3a:	00 80 fa    	ulnk      
    4e3c:	00 00 06    	return    

00004e3e <_main>:

int16_t main(void) {
    4e3e:	52 00 fa    	lnk       #0x52

00004e40 <.LSM51>:
        // printf("Starting Rocket Controller...\r\n");
    init_clock();
    4e40:	00 10 20    	mov.w     #0x100, w0
    4e42:	20 3a 88    	mov.w     w0, 0x744

00004e44 <.LSM52>:
    init_ui();
    4e44:	67 00 07    	rcall     0x4f14 <_init_ui>

00004e46 <.LSM53>:
    init_timer();
    4e46:	6c f5 07    	rcall     0x3920 <_init_timer>

00004e48 <.LSM54>:
    init_uart();
    4e48:	ca ef 07    	rcall     0x2dde <_init_uart>

00004e4a <.LSM55>:
    init_quad();
    4e4a:	ea 02 07    	rcall     0x5420 <_init_quad>

00004e4c <.LSM56>:
    init_pin();
    4e4c:	94 f7 07    	rcall     0x3d76 <_init_pin>

00004e4e <.LSM57>:
    init_oc();
    4e4e:	1d fa 07    	rcall     0x428a <_init_oc>

00004e50 <.LSM58>:
    // ***init_md:  may need to change md.c so it utilizes less DIO pins    
    init_md();
    4e50:	fd 03 07    	rcall     0x564c <_init_md>

00004e52 <.LSM59>:
    setup();
    4e52:	d5 ff 07    	rcall     0x4dfe <_setup>

00004e54 <.LSM60>:

    uint16_t counter = 0;
    4e54:	00 00 eb    	clr.w     w0
    4e56:	20 07 98    	mov.w     w0, [w14+4]

00004e58 <.LSM61>:
    uint8_t rec_msg [64];
    uint64_t msg;
    char is_recip = 0;
    4e58:	00 40 eb    	clr.b     w0
    4e5a:	60 47 98    	mov.b     w0, [w14+6]

00004e5c <.LSM62>:

    // Initialize motor vars/pins
    uint16_t MOTOR_SPEED = 0xC000;
    4e5c:	00 00 2c    	mov.w     #0xc000, w0
    4e5e:	00 0f 78    	mov.w     w0, [w14]

00004e60 <.LSM63>:
    uint16_t MOTOR_DIR_TRACK = 0;   // tracks vert dir of rocket
    4e60:	00 00 eb    	clr.w     w0
    4e62:	10 07 98    	mov.w     w0, [w14+2]

00004e64 <.LSM64>:
    pin_digitalOut(MOTOR_DIR);
    4e64:	80 42 80    	mov.w     0x850, w0
    4e66:	ee f8 07    	rcall     0x4044 <_pin_digitalOut>

00004e68 <.LSM65>:

    uint8_t direction = 1;
    4e68:	10 c0 b3    	mov.b     #0x1, w0
    4e6a:	70 47 98    	mov.b     w0, [w14+7]

00004e6c <.LSM66>:

    const uint16_t MOTOR_SPEED_LIMIT = 0xFFF0;
    4e6c:	00 ff 2f    	mov.w     #0xfff0, w0
    4e6e:	40 07 98    	mov.w     w0, [w14+8]

00004e70 <.LSM67>:
    const uint16_t GRAV_VAL = 0x00F0;
    4e70:	00 0f 20    	mov.w     #0xf0, w0
    4e72:	50 07 98    	mov.w     w0, [w14+10]

00004e74 <.LSM68>:
    const uint16_t THRUST_VAL = GRAV_VAL*2;
    4e74:	5e 00 90    	mov.w     [w14+10], w0
    4e76:	00 00 40    	add.w     w0, w0, w0
    4e78:	60 07 98    	mov.w     w0, [w14+12]

00004e7a <.LSM69>:
    uint16_t mot_speed = 0;
    4e7a:	00 00 eb    	clr.w     w0
    4e7c:	70 07 98    	mov.w     w0, [w14+14]

00004e7e <.LSM70>:
    int mot_dir = 0;
    4e7e:	00 00 eb    	clr.w     w0
    4e80:	00 0f 98    	mov.w     w0, [w14+16]

00004e82 <.LSM71>:
    pin_clear(MOTOR_DIR);
    4e82:	80 42 80    	mov.w     0x850, w0
    4e84:	51 f9 07    	rcall     0x4128 <_pin_clear>
    4e86:	01 00 37    	bra       0x4e8a <.L24>

00004e88 <.L25>:
    while (1) {

        // if (timer_flag(&timer2)) {
        //     timer_lower(&timer2);
        //     if (quad1.count % 2 == 0) {
        //         led_on(&led1);
        //     } else {
        //         led_off(&led1);
        //     }
        // }
        if (timer_flag(&timer3)) {
            timer_lower(&timer3);
            // uint16_t switch2 = !sw_read(&sw2);
            // uint16_t switch3 = !sw_read(&sw3);
            // // led_write(&led1, switch2);
            // led_write(&led3, switch3);

            // pin_write(&D[10], switch2);
            // pin_write(&D[11], switch3);

            // Handle rocket thrust
            if (pin_read(FWD)) { // Thrust on
                if (MOTOR_DIR_TRACK == 0) {  // rocket falling
                    if (MOTOR_SPEED > THRUST_VAL) {  // nonzero velocity
                        MOTOR_SPEED = MOTOR_SPEED - THRUST_VAL;
                    }
                    else {  // zero velocity
                        MOTOR_DIR_TRACK = 1;
                        MOTOR_SPEED = 0;
                    }
                }
                else { // rocket rising
                    if (MOTOR_SPEED < MOTOR_SPEED_LIMIT) {
                        MOTOR_SPEED = MOTOR_SPEED + THRUST_VAL;
                    }
                }
                // pin_set(MOTOR_DIR);
                // if (MOTOR_SPEED < MOTOR_SPEED_LIMIT) {
                //     MOTOR_SPEED = MOTOR_SPEED + THRUST_VAL;
                // }
                // md_speed(&mdp, MOTOR_SPEED);
                led_on(&led2);
            }
            else { // no thrust
                if (MOTOR_DIR_TRACK == 0) { // rocket falling
                    if (MOTOR_SPEED < MOTOR_SPEED_LIMIT) {
                        MOTOR_SPEED = MOTOR_SPEED + GRAV_VAL;
                    }
                }
                else {  // rocket rising
                    if (MOTOR_SPEED > THRUST_VAL) {
                        MOTOR_SPEED = MOTOR_SPEED - GRAV_VAL;
                    }
                    else {
                        MOTOR_DIR_TRACK = 0;
                        MOTOR_SPEED = GRAV_VAL;
                    }
                }
                led_off(&led2);
            }
            if (MOTOR_DIR_TRACK) {
                pin_set(MOTOR_DIR);
            }
            else {
                pin_clear(MOTOR_DIR);
            }
            md_speed(&mdp, MOTOR_SPEED);

        }
    }
    4e88:	00 00 00    	nop       

00004e8a <.L24>:
    4e8a:	40 48 22    	mov.w     #0x2484, w0
    4e8c:	a1 f6 07    	rcall     0x3bd0 <_timer_flag>
    4e8e:	00 00 e0    	cp0.w     w0
    4e90:	fb ff 32    	bra       Z, 0x4e88 <.L25>

00004e92 <.LSM74>:
    4e92:	40 48 22    	mov.w     #0x2484, w0
    4e94:	ae f6 07    	rcall     0x3bf2 <_timer_lower>

00004e96 <.LSM75>:
    4e96:	90 42 80    	mov.w     0x852, w0
    4e98:	80 f9 07    	rcall     0x419a <_pin_read>
    4e9a:	00 00 e0    	cp0.w     w0
    4e9c:	18 00 32    	bra       Z, 0x4ece <.L14>

00004e9e <.LSM76>:
    4e9e:	1e 00 90    	mov.w     [w14+2], w0
    4ea0:	00 00 e0    	cp0.w     w0
    4ea2:	0c 00 3a    	bra       NZ, 0x4ebc <.L15>

00004ea4 <.LSM77>:
    4ea4:	6e 00 90    	mov.w     [w14+12], w0
    4ea6:	9e 00 78    	mov.w     [w14], w1
    4ea8:	80 8f 50    	sub.w     w1, w0, [w15]
    4eaa:	03 00 36    	bra       LEU, 0x4eb2 <.L16>

00004eac <.LSM78>:
    4eac:	6e 00 90    	mov.w     [w14+12], w0
    4eae:	1e 0f 10    	subr.w    w0, [w14], [w14]
    4eb0:	0b 00 37    	bra       0x4ec8 <.L17>

00004eb2 <.L16>:
    4eb2:	10 00 20    	mov.w     #0x1, w0
    4eb4:	10 07 98    	mov.w     w0, [w14+2]

00004eb6 <.LSM80>:
    4eb6:	00 00 eb    	clr.w     w0
    4eb8:	00 0f 78    	mov.w     w0, [w14]
    4eba:	06 00 37    	bra       0x4ec8 <.L17>

00004ebc <.L15>:
    4ebc:	4e 00 90    	mov.w     [w14+8], w0
    4ebe:	9e 00 78    	mov.w     [w14], w1
    4ec0:	80 8f 50    	sub.w     w1, w0, [w15]
    4ec2:	02 00 31    	bra       C, 0x4ec8 <.L17>

00004ec4 <.LSM82>:
    4ec4:	6e 00 90    	mov.w     [w14+12], w0
    4ec6:	1e 0f 40    	add.w     w0, [w14], [w14]

00004ec8 <.L17>:
    4ec8:	80 80 20    	mov.w     #0x808, w0
    4eca:	86 00 07    	rcall     0x4fd8 <_led_on>
    4ecc:	17 00 37    	bra       0x4efc <.L18>

00004ece <.L14>:
    4ece:	1e 00 90    	mov.w     [w14+2], w0
    4ed0:	00 00 e0    	cp0.w     w0
    4ed2:	07 00 3a    	bra       NZ, 0x4ee2 <.L19>

00004ed4 <.LSM85>:
    4ed4:	4e 00 90    	mov.w     [w14+8], w0
    4ed6:	9e 00 78    	mov.w     [w14], w1
    4ed8:	80 8f 50    	sub.w     w1, w0, [w15]
    4eda:	0e 00 31    	bra       C, 0x4ef8 <.L20>

00004edc <.LSM86>:
    4edc:	5e 00 90    	mov.w     [w14+10], w0
    4ede:	1e 0f 40    	add.w     w0, [w14], [w14]
    4ee0:	0b 00 37    	bra       0x4ef8 <.L20>

00004ee2 <.L19>:
    4ee2:	6e 00 90    	mov.w     [w14+12], w0
    4ee4:	9e 00 78    	mov.w     [w14], w1
    4ee6:	80 8f 50    	sub.w     w1, w0, [w15]
    4ee8:	03 00 36    	bra       LEU, 0x4ef0 <.L21>

00004eea <.LSM88>:
    4eea:	5e 00 90    	mov.w     [w14+10], w0
    4eec:	1e 0f 10    	subr.w    w0, [w14], [w14]
    4eee:	04 00 37    	bra       0x4ef8 <.L20>

00004ef0 <.L21>:
    4ef0:	00 00 eb    	clr.w     w0
    4ef2:	10 07 98    	mov.w     w0, [w14+2]

00004ef4 <.LSM90>:
    4ef4:	de 00 90    	mov.w     [w14+10], w1
    4ef6:	01 0f 78    	mov.w     w1, [w14]

00004ef8 <.L20>:
    4ef8:	80 80 20    	mov.w     #0x808, w0
    4efa:	7e 00 07    	rcall     0x4ff8 <_led_off>

00004efc <.L18>:
    4efc:	1e 00 90    	mov.w     [w14+2], w0
    4efe:	00 00 e0    	cp0.w     w0
    4f00:	03 00 32    	bra       Z, 0x4f08 <.L22>

00004f02 <.LSM93>:
    4f02:	80 42 80    	mov.w     0x850, w0
    4f04:	fc f8 07    	rcall     0x40fe <_pin_set>
    4f06:	02 00 37    	bra       0x4f0c <.L23>

00004f08 <.L22>:
    4f08:	80 42 80    	mov.w     0x850, w0
    4f0a:	0e f9 07    	rcall     0x4128 <_pin_clear>

00004f0c <.L23>:
    4f0c:	9e 00 78    	mov.w     [w14], w1
    4f0e:	a0 59 22    	mov.w     #0x259a, w0
    4f10:	fc 03 07    	rcall     0x570a <_md_speed>

00004f12 <.LSM96>:
    4f12:	bb ff 37    	bra       0x4e8a <.L24>

00004f14 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    4f14:	00 00 fa    	lnk       #0x0

00004f16 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4f16:	74 c0 b3    	mov.b     #0x7, w4
    4f18:	63 4e 20    	mov.w     #0x4e6, w3
    4f1a:	82 2d 20    	mov.w     #0x2d8, w2
    4f1c:	a1 2d 20    	mov.w     #0x2da, w1
    4f1e:	00 80 20    	mov.w     #0x800, w0
    4f20:	20 00 07    	rcall     0x4f62 <_led_init>

00004f22 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4f22:	00 42 eb    	clr.b     w4
    4f24:	a3 4e 20    	mov.w     #0x4ea, w3
    4f26:	82 2e 20    	mov.w     #0x2e8, w2
    4f28:	a1 2e 20    	mov.w     #0x2ea, w1
    4f2a:	80 80 20    	mov.w     #0x808, w0
    4f2c:	1a 00 07    	rcall     0x4f62 <_led_init>

00004f2e <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4f2e:	14 c0 b3    	mov.b     #0x1, w4
    4f30:	a3 4e 20    	mov.w     #0x4ea, w3
    4f32:	82 2e 20    	mov.w     #0x2e8, w2
    4f34:	a1 2e 20    	mov.w     #0x2ea, w1
    4f36:	00 81 20    	mov.w     #0x810, w0
    4f38:	14 00 07    	rcall     0x4f62 <_led_init>

00004f3a <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    4f3a:	f4 c0 b3    	mov.b     #0xf, w4
    4f3c:	43 4e 20    	mov.w     #0x4e4, w3
    4f3e:	02 2d 20    	mov.w     #0x2d0, w2
    4f40:	21 2d 20    	mov.w     #0x2d2, w1
    4f42:	80 81 20    	mov.w     #0x818, w0
    4f44:	ad 00 07    	rcall     0x50a0 <_sw_init>

00004f46 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    4f46:	c4 c0 b3    	mov.b     #0xc, w4
    4f48:	43 4e 20    	mov.w     #0x4e4, w3
    4f4a:	02 2d 20    	mov.w     #0x2d0, w2
    4f4c:	21 2d 20    	mov.w     #0x2d2, w1
    4f4e:	00 82 20    	mov.w     #0x820, w0
    4f50:	a7 00 07    	rcall     0x50a0 <_sw_init>

00004f52 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4f52:	c4 c0 b3    	mov.b     #0xc, w4
    4f54:	23 4e 20    	mov.w     #0x4e2, w3
    4f56:	82 2c 20    	mov.w     #0x2c8, w2
    4f58:	a1 2c 20    	mov.w     #0x2ca, w1
    4f5a:	80 82 20    	mov.w     #0x828, w0
    4f5c:	a1 00 07    	rcall     0x50a0 <_sw_init>

00004f5e <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    4f5e:	00 80 fa    	ulnk      
    4f60:	00 00 06    	return    

00004f62 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    4f62:	0a 00 fa    	lnk       #0xa
    4f64:	00 0f 78    	mov.w     w0, [w14]
    4f66:	11 07 98    	mov.w     w1, [w14+2]
    4f68:	22 07 98    	mov.w     w2, [w14+4]
    4f6a:	33 07 98    	mov.w     w3, [w14+6]
    4f6c:	04 4f 98    	mov.b     w4, [w14+8]

00004f6e <.LSM9>:
    self->port = port;
    4f6e:	1e 00 78    	mov.w     [w14], w0
    4f70:	9e 00 90    	mov.w     [w14+2], w1
    4f72:	01 08 78    	mov.w     w1, [w0]

00004f74 <.LSM10>:
    self->tris = tris;
    4f74:	1e 00 78    	mov.w     [w14], w0
    4f76:	ae 00 90    	mov.w     [w14+4], w1
    4f78:	11 00 98    	mov.w     w1, [w0+2]

00004f7a <.LSM11>:
    self->ans = ans;
    4f7a:	1e 00 78    	mov.w     [w14], w0
    4f7c:	be 00 90    	mov.w     [w14+6], w1
    4f7e:	21 00 98    	mov.w     w1, [w0+4]

00004f80 <.LSM12>:
    self->bit = bit;
    4f80:	1e 00 78    	mov.w     [w14], w0
    4f82:	8e 48 90    	mov.b     [w14+8], w1
    4f84:	61 40 98    	mov.b     w1, [w0+6]

00004f86 <.LSM13>:

    bitclear(self->ans, self->bit);
    4f86:	1e 00 78    	mov.w     [w14], w0
    4f88:	20 00 90    	mov.w     [w0+4], w0
    4f8a:	9e 00 78    	mov.w     [w14], w1
    4f8c:	a1 00 90    	mov.w     [w1+4], w1
    4f8e:	11 01 78    	mov.w     [w1], w2
    4f90:	9e 00 78    	mov.w     [w14], w1
    4f92:	e1 40 90    	mov.b     [w1+6], w1
    4f94:	81 80 fb    	ze        w1, w1
    4f96:	13 00 20    	mov.w     #0x1, w3
    4f98:	81 18 dd    	sl.w      w3, w1, w1
    4f9a:	81 80 ea    	com.w     w1, w1
    4f9c:	81 00 61    	and.w     w2, w1, w1
    4f9e:	01 08 78    	mov.w     w1, [w0]

00004fa0 <.LSM14>:
    bitclear(self->port, self->bit);
    4fa0:	1e 00 78    	mov.w     [w14], w0
    4fa2:	10 00 78    	mov.w     [w0], w0
    4fa4:	9e 00 78    	mov.w     [w14], w1
    4fa6:	91 00 78    	mov.w     [w1], w1
    4fa8:	11 01 78    	mov.w     [w1], w2
    4faa:	9e 00 78    	mov.w     [w14], w1
    4fac:	e1 40 90    	mov.b     [w1+6], w1
    4fae:	81 80 fb    	ze        w1, w1
    4fb0:	13 00 20    	mov.w     #0x1, w3
    4fb2:	81 18 dd    	sl.w      w3, w1, w1
    4fb4:	81 80 ea    	com.w     w1, w1
    4fb6:	81 00 61    	and.w     w2, w1, w1
    4fb8:	01 08 78    	mov.w     w1, [w0]

00004fba <.LSM15>:
    bitclear(self->tris, self->bit);
    4fba:	1e 00 78    	mov.w     [w14], w0
    4fbc:	10 00 90    	mov.w     [w0+2], w0
    4fbe:	9e 00 78    	mov.w     [w14], w1
    4fc0:	91 00 90    	mov.w     [w1+2], w1
    4fc2:	11 01 78    	mov.w     [w1], w2
    4fc4:	9e 00 78    	mov.w     [w14], w1
    4fc6:	e1 40 90    	mov.b     [w1+6], w1
    4fc8:	81 80 fb    	ze        w1, w1
    4fca:	13 00 20    	mov.w     #0x1, w3
    4fcc:	81 18 dd    	sl.w      w3, w1, w1
    4fce:	81 80 ea    	com.w     w1, w1
    4fd0:	81 00 61    	and.w     w2, w1, w1
    4fd2:	01 08 78    	mov.w     w1, [w0]

00004fd4 <.LSM16>:
}
    4fd4:	00 80 fa    	ulnk      
    4fd6:	00 00 06    	return    

00004fd8 <_led_on>:

void led_on(_LED *self) {
    4fd8:	02 00 fa    	lnk       #0x2
    4fda:	00 0f 78    	mov.w     w0, [w14]

00004fdc <.LSM18>:
    bitset(self->port, self->bit);
    4fdc:	1e 00 78    	mov.w     [w14], w0
    4fde:	10 00 78    	mov.w     [w0], w0
    4fe0:	9e 00 78    	mov.w     [w14], w1
    4fe2:	91 00 78    	mov.w     [w1], w1
    4fe4:	11 01 78    	mov.w     [w1], w2
    4fe6:	9e 00 78    	mov.w     [w14], w1
    4fe8:	e1 40 90    	mov.b     [w1+6], w1
    4fea:	81 80 fb    	ze        w1, w1
    4fec:	13 00 20    	mov.w     #0x1, w3
    4fee:	81 18 dd    	sl.w      w3, w1, w1
    4ff0:	82 80 70    	ior.w     w1, w2, w1
    4ff2:	01 08 78    	mov.w     w1, [w0]

00004ff4 <.LSM19>:
}
    4ff4:	00 80 fa    	ulnk      
    4ff6:	00 00 06    	return    

00004ff8 <_led_off>:

void led_off(_LED *self) {
    4ff8:	02 00 fa    	lnk       #0x2
    4ffa:	00 0f 78    	mov.w     w0, [w14]

00004ffc <.LSM21>:
    bitclear(self->port, self->bit);
    4ffc:	1e 00 78    	mov.w     [w14], w0
    4ffe:	10 00 78    	mov.w     [w0], w0
    5000:	9e 00 78    	mov.w     [w14], w1
    5002:	91 00 78    	mov.w     [w1], w1
    5004:	11 01 78    	mov.w     [w1], w2
    5006:	9e 00 78    	mov.w     [w14], w1
    5008:	e1 40 90    	mov.b     [w1+6], w1
    500a:	81 80 fb    	ze        w1, w1
    500c:	13 00 20    	mov.w     #0x1, w3
    500e:	81 18 dd    	sl.w      w3, w1, w1
    5010:	81 80 ea    	com.w     w1, w1
    5012:	81 00 61    	and.w     w2, w1, w1
    5014:	01 08 78    	mov.w     w1, [w0]

00005016 <.LSM22>:
}
    5016:	00 80 fa    	ulnk      
    5018:	00 00 06    	return    

0000501a <_led_toggle>:

void led_toggle(_LED *self) {
    501a:	02 00 fa    	lnk       #0x2
    501c:	00 0f 78    	mov.w     w0, [w14]

0000501e <.LSM24>:
    bitflip(self->port, self->bit);
    501e:	1e 00 78    	mov.w     [w14], w0
    5020:	10 00 78    	mov.w     [w0], w0
    5022:	9e 00 78    	mov.w     [w14], w1
    5024:	91 00 78    	mov.w     [w1], w1
    5026:	11 01 78    	mov.w     [w1], w2
    5028:	9e 00 78    	mov.w     [w14], w1
    502a:	e1 40 90    	mov.b     [w1+6], w1
    502c:	81 80 fb    	ze        w1, w1
    502e:	13 00 20    	mov.w     #0x1, w3
    5030:	81 18 dd    	sl.w      w3, w1, w1
    5032:	81 00 69    	xor.w     w2, w1, w1
    5034:	01 08 78    	mov.w     w1, [w0]

00005036 <.LSM25>:
}
    5036:	00 80 fa    	ulnk      
    5038:	00 00 06    	return    

0000503a <_led_write>:

void led_write(_LED *self, uint16_t val) {
    503a:	04 00 fa    	lnk       #0x4
    503c:	00 0f 78    	mov.w     w0, [w14]
    503e:	11 07 98    	mov.w     w1, [w14+2]

00005040 <.LSM27>:
    if (val)
    5040:	1e 00 90    	mov.w     [w14+2], w0
    5042:	00 00 e0    	cp0.w     w0
    5044:	0d 00 32    	bra       Z, 0x5060 <.L7>

00005046 <.LSM28>:
        bitset(self->port, self->bit);
    5046:	1e 00 78    	mov.w     [w14], w0
    5048:	10 00 78    	mov.w     [w0], w0
    504a:	9e 00 78    	mov.w     [w14], w1
    504c:	91 00 78    	mov.w     [w1], w1
    504e:	11 01 78    	mov.w     [w1], w2
    5050:	9e 00 78    	mov.w     [w14], w1
    5052:	e1 40 90    	mov.b     [w1+6], w1
    5054:	81 80 fb    	ze        w1, w1
    5056:	13 00 20    	mov.w     #0x1, w3
    5058:	81 18 dd    	sl.w      w3, w1, w1
    505a:	82 80 70    	ior.w     w1, w2, w1
    505c:	01 08 78    	mov.w     w1, [w0]
    505e:	0d 00 37    	bra       0x507a <.L6>

00005060 <.L7>:
    else
        bitclear(self->port, self->bit);
    5060:	1e 00 78    	mov.w     [w14], w0
    5062:	10 00 78    	mov.w     [w0], w0
    5064:	9e 00 78    	mov.w     [w14], w1
    5066:	91 00 78    	mov.w     [w1], w1
    5068:	11 01 78    	mov.w     [w1], w2
    506a:	9e 00 78    	mov.w     [w14], w1
    506c:	e1 40 90    	mov.b     [w1+6], w1
    506e:	81 80 fb    	ze        w1, w1
    5070:	13 00 20    	mov.w     #0x1, w3
    5072:	81 18 dd    	sl.w      w3, w1, w1
    5074:	81 80 ea    	com.w     w1, w1
    5076:	81 00 61    	and.w     w2, w1, w1
    5078:	01 08 78    	mov.w     w1, [w0]

0000507a <.L6>:
}
    507a:	00 80 fa    	ulnk      
    507c:	00 00 06    	return    

0000507e <_led_read>:

uint16_t led_read(_LED *self) {
    507e:	02 00 fa    	lnk       #0x2
    5080:	00 0f 78    	mov.w     w0, [w14]

00005082 <.LSM32>:
    return bitread(self->port, self->bit);
    5082:	1e 00 78    	mov.w     [w14], w0
    5084:	10 00 78    	mov.w     [w0], w0
    5086:	90 00 78    	mov.w     [w0], w1
    5088:	1e 00 78    	mov.w     [w14], w0
    508a:	60 40 90    	mov.b     [w0+6], w0
    508c:	00 80 fb    	ze        w0, w0
    508e:	12 00 20    	mov.w     #0x1, w2
    5090:	00 10 dd    	sl.w      w2, w0, w0
    5092:	00 80 60    	and.w     w1, w0, w0
    5094:	00 f0 a7    	btsc.w    w0, #0xf
    5096:	00 00 ea    	neg.w     w0, w0
    5098:	00 00 ea    	neg.w     w0, w0
    509a:	4f 00 de    	lsr.w     w0, #0xf, w0

0000509c <.LSM33>:
}
    509c:	00 80 fa    	ulnk      
    509e:	00 00 06    	return    

000050a0 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    50a0:	0a 00 fa    	lnk       #0xa
    50a2:	00 0f 78    	mov.w     w0, [w14]
    50a4:	11 07 98    	mov.w     w1, [w14+2]
    50a6:	22 07 98    	mov.w     w2, [w14+4]
    50a8:	33 07 98    	mov.w     w3, [w14+6]
    50aa:	04 4f 98    	mov.b     w4, [w14+8]

000050ac <.LSM35>:
    self->port = port;
    50ac:	1e 00 78    	mov.w     [w14], w0
    50ae:	9e 00 90    	mov.w     [w14+2], w1
    50b0:	01 08 78    	mov.w     w1, [w0]

000050b2 <.LSM36>:
    self->tris = tris;
    50b2:	1e 00 78    	mov.w     [w14], w0
    50b4:	ae 00 90    	mov.w     [w14+4], w1
    50b6:	11 00 98    	mov.w     w1, [w0+2]

000050b8 <.LSM37>:
    self->ans = ans;
    50b8:	1e 00 78    	mov.w     [w14], w0
    50ba:	be 00 90    	mov.w     [w14+6], w1
    50bc:	21 00 98    	mov.w     w1, [w0+4]

000050be <.LSM38>:
    self->bit = bit;
    50be:	1e 00 78    	mov.w     [w14], w0
    50c0:	8e 48 90    	mov.b     [w14+8], w1
    50c2:	61 40 98    	mov.b     w1, [w0+6]

000050c4 <.LSM39>:

    bitclear(self->ans, self->bit);
    50c4:	1e 00 78    	mov.w     [w14], w0
    50c6:	20 00 90    	mov.w     [w0+4], w0
    50c8:	9e 00 78    	mov.w     [w14], w1
    50ca:	a1 00 90    	mov.w     [w1+4], w1
    50cc:	11 01 78    	mov.w     [w1], w2
    50ce:	9e 00 78    	mov.w     [w14], w1
    50d0:	e1 40 90    	mov.b     [w1+6], w1
    50d2:	81 80 fb    	ze        w1, w1
    50d4:	13 00 20    	mov.w     #0x1, w3
    50d6:	81 18 dd    	sl.w      w3, w1, w1
    50d8:	81 80 ea    	com.w     w1, w1
    50da:	81 00 61    	and.w     w2, w1, w1
    50dc:	01 08 78    	mov.w     w1, [w0]

000050de <.LSM40>:
    bitset(self->tris, self->bit);
    50de:	1e 00 78    	mov.w     [w14], w0
    50e0:	10 00 90    	mov.w     [w0+2], w0
    50e2:	9e 00 78    	mov.w     [w14], w1
    50e4:	91 00 90    	mov.w     [w1+2], w1
    50e6:	11 01 78    	mov.w     [w1], w2
    50e8:	9e 00 78    	mov.w     [w14], w1
    50ea:	e1 40 90    	mov.b     [w1+6], w1
    50ec:	81 80 fb    	ze        w1, w1
    50ee:	13 00 20    	mov.w     #0x1, w3
    50f0:	81 18 dd    	sl.w      w3, w1, w1
    50f2:	82 80 70    	ior.w     w1, w2, w1
    50f4:	01 08 78    	mov.w     w1, [w0]

000050f6 <.LSM41>:
}
    50f6:	00 80 fa    	ulnk      
    50f8:	00 00 06    	return    

000050fa <_sw_read>:

uint16_t sw_read(_SW *self) {
    50fa:	02 00 fa    	lnk       #0x2
    50fc:	00 0f 78    	mov.w     w0, [w14]

000050fe <.LSM43>:
    return bitread(self->port, self->bit);
    50fe:	1e 00 78    	mov.w     [w14], w0
    5100:	10 00 78    	mov.w     [w0], w0
    5102:	90 00 78    	mov.w     [w0], w1
    5104:	1e 00 78    	mov.w     [w14], w0
    5106:	60 40 90    	mov.b     [w0+6], w0
    5108:	00 80 fb    	ze        w0, w0
    510a:	12 00 20    	mov.w     #0x1, w2
    510c:	00 10 dd    	sl.w      w2, w0, w0
    510e:	00 80 60    	and.w     w1, w0, w0
    5110:	00 f0 a7    	btsc.w    w0, #0xf
    5112:	00 00 ea    	neg.w     w0, w0
    5114:	00 00 ea    	neg.w     w0, w0
    5116:	4f 00 de    	lsr.w     w0, #0xf, w0

00005118 <.LSM44>:
}
    5118:	00 80 fa    	ulnk      
    511a:	00 00 06    	return    

0000511c <_PID_FL_control>:
//     self -> integ_max = integ_max;

// }

float PID_FL_control(_PID_FL *self) {
    511c:	16 00 fa    	lnk       #0x16
    511e:	88 1f 78    	mov.w     w8, [w15++]
    5120:	20 0f 98    	mov.w     w0, [w14+20]

00005122 <.LSM1>:
    float error = self->set_point - self->position;
    5122:	2e 08 90    	mov.w     [w14+20], w0
    5124:	60 02 90    	mov.w     [w0+12], w4
    5126:	f0 02 90    	mov.w     [w0+14], w5
    5128:	2e 08 90    	mov.w     [w14+20], w0
    512a:	b0 08 90    	mov.w     [w0+22], w1
    512c:	20 08 90    	mov.w     [w0+20], w0
    512e:	00 01 be    	mov.d     w0, w2
    5130:	04 00 be    	mov.d     w4, w0
    5132:	b0 e0 07    	rcall     0x1294 <___subsf3>
    5134:	00 8f be    	mov.d     w0, [w14]

00005136 <.LSM2>:
    float deriv = (self->position - self->_prev_position) / self->dt;
    5136:	2e 08 90    	mov.w     [w14+20], w0
    5138:	20 0a 90    	mov.w     [w0+20], w4
    513a:	b0 0a 90    	mov.w     [w0+22], w5
    513c:	2e 08 90    	mov.w     [w14+20], w0
    513e:	d0 08 90    	mov.w     [w0+26], w1
    5140:	40 08 90    	mov.w     [w0+24], w0
    5142:	00 01 be    	mov.d     w0, w2
    5144:	04 00 be    	mov.d     w4, w0
    5146:	a6 e0 07    	rcall     0x1294 <___subsf3>
    5148:	00 02 be    	mov.d     w0, w4
    514a:	2e 08 90    	mov.w     [w14+20], w0
    514c:	90 08 90    	mov.w     [w0+18], w1
    514e:	00 08 90    	mov.w     [w0+16], w0
    5150:	00 01 be    	mov.d     w0, w2
    5152:	04 00 be    	mov.d     w4, w0
    5154:	fd e0 07    	rcall     0x1350 <___divsf3>
    5156:	20 07 98    	mov.w     w0, [w14+4]
    5158:	31 07 98    	mov.w     w1, [w14+6]

0000515a <.LSM3>:

    self->_integ_state += error;
    515a:	2e 08 90    	mov.w     [w14+20], w0
    515c:	f0 08 90    	mov.w     [w0+30], w1
    515e:	60 08 90    	mov.w     [w0+28], w0
    5160:	1e 01 be    	mov.d     [w14], w2
    5162:	99 e0 07    	rcall     0x1296 <___addsf3>
    5164:	2e 09 90    	mov.w     [w14+20], w2
    5166:	60 09 98    	mov.w     w0, [w2+28]
    5168:	71 09 98    	mov.w     w1, [w2+30]

0000516a <.LSM4>:

    if (self->_integ_state > self->integ_max) {
    516a:	2e 08 90    	mov.w     [w14+20], w0
    516c:	60 0a 90    	mov.w     [w0+28], w4
    516e:	f0 0a 90    	mov.w     [w0+30], w5
    5170:	2e 08 90    	mov.w     [w14+20], w0
    5172:	90 10 90    	mov.w     [w0+34], w1
    5174:	00 10 90    	mov.w     [w0+32], w0
    5176:	18 c0 b3    	mov.b     #0x1, w8
    5178:	00 01 be    	mov.d     w0, w2
    517a:	04 00 be    	mov.d     w4, w0
    517c:	2d e1 07    	rcall     0x13d8 <___gesf2>
    517e:	00 00 e0    	cp0.w     w0
    5180:	01 00 3c    	bra       GT, 0x5184 <.L2>
    5182:	00 44 eb    	clr.b     w8

00005184 <.L2>:
    5184:	08 04 e0    	cp0.b     w8
    5186:	07 00 32    	bra       Z, 0x5196 <.L3>

00005188 <.LSM5>:
        self->_integ_state = self->integ_max;
    5188:	2e 08 90    	mov.w     [w14+20], w0
    518a:	90 10 90    	mov.w     [w0+34], w1
    518c:	00 10 90    	mov.w     [w0+32], w0
    518e:	2e 09 90    	mov.w     [w14+20], w2
    5190:	60 09 98    	mov.w     w0, [w2+28]
    5192:	71 09 98    	mov.w     w1, [w2+30]
    5194:	15 00 37    	bra       0x51c0 <.L4>

00005196 <.L3>:
    } else if (self->_integ_state < self->integ_min) {
    5196:	2e 08 90    	mov.w     [w14+20], w0
    5198:	60 0a 90    	mov.w     [w0+28], w4
    519a:	f0 0a 90    	mov.w     [w0+30], w5
    519c:	2e 08 90    	mov.w     [w14+20], w0
    519e:	b0 10 90    	mov.w     [w0+38], w1
    51a0:	20 10 90    	mov.w     [w0+36], w0
    51a2:	18 c0 b3    	mov.b     #0x1, w8
    51a4:	00 01 be    	mov.d     w0, w2
    51a6:	04 00 be    	mov.d     w4, w0
    51a8:	15 e1 07    	rcall     0x13d4 <___eqsf2>
    51aa:	00 00 e0    	cp0.w     w0
    51ac:	01 00 35    	bra       LT, 0x51b0 <.L5>
    51ae:	00 44 eb    	clr.b     w8

000051b0 <.L5>:
    51b0:	08 04 e0    	cp0.b     w8
    51b2:	06 00 32    	bra       Z, 0x51c0 <.L4>

000051b4 <.LSM7>:
        self->_integ_state = self->integ_min;
    51b4:	2e 08 90    	mov.w     [w14+20], w0
    51b6:	b0 10 90    	mov.w     [w0+38], w1
    51b8:	20 10 90    	mov.w     [w0+36], w0
    51ba:	2e 09 90    	mov.w     [w14+20], w2
    51bc:	60 09 98    	mov.w     w0, [w2+28]
    51be:	71 09 98    	mov.w     w1, [w2+30]

000051c0 <.L4>:
    };

    float pterm = self->Kp * error;
    51c0:	2e 08 90    	mov.w     [w14+20], w0
    51c2:	10 00 be    	mov.d     [w0], w0
    51c4:	1e 01 be    	mov.d     [w14], w2
    51c6:	82 e1 07    	rcall     0x14cc <___mulsf3>
    51c8:	40 07 98    	mov.w     w0, [w14+8]
    51ca:	51 07 98    	mov.w     w1, [w14+10]

000051cc <.LSM9>:
    float iterm = self->Ki * self->_integ_state;
    51cc:	2e 08 90    	mov.w     [w14+20], w0
    51ce:	20 02 90    	mov.w     [w0+4], w4
    51d0:	b0 02 90    	mov.w     [w0+6], w5
    51d2:	2e 08 90    	mov.w     [w14+20], w0
    51d4:	f0 08 90    	mov.w     [w0+30], w1
    51d6:	60 08 90    	mov.w     [w0+28], w0
    51d8:	00 01 be    	mov.d     w0, w2
    51da:	04 00 be    	mov.d     w4, w0
    51dc:	77 e1 07    	rcall     0x14cc <___mulsf3>
    51de:	60 07 98    	mov.w     w0, [w14+12]
    51e0:	71 07 98    	mov.w     w1, [w14+14]

000051e2 <.LSM10>:
    float dterm = self->Kd * deriv;
    51e2:	2e 08 90    	mov.w     [w14+20], w0
    51e4:	d0 00 90    	mov.w     [w0+10], w1
    51e6:	40 00 90    	mov.w     [w0+8], w0
    51e8:	2e 01 90    	mov.w     [w14+4], w2
    51ea:	be 01 90    	mov.w     [w14+6], w3
    51ec:	6f e1 07    	rcall     0x14cc <___mulsf3>
    51ee:	00 0f 98    	mov.w     w0, [w14+16]
    51f0:	11 0f 98    	mov.w     w1, [w14+18]

000051f2 <.LSM11>:

    self->_prev_position = self->position;
    51f2:	2e 08 90    	mov.w     [w14+20], w0
    51f4:	b0 08 90    	mov.w     [w0+22], w1
    51f6:	20 08 90    	mov.w     [w0+20], w0
    51f8:	2e 09 90    	mov.w     [w14+20], w2
    51fa:	40 09 98    	mov.w     w0, [w2+24]
    51fc:	51 09 98    	mov.w     w1, [w2+26]

000051fe <.LSM12>:
    return pterm + iterm + dterm;
    51fe:	6e 01 90    	mov.w     [w14+12], w2
    5200:	fe 01 90    	mov.w     [w14+14], w3
    5202:	4e 00 90    	mov.w     [w14+8], w0
    5204:	de 00 90    	mov.w     [w14+10], w1
    5206:	47 e0 07    	rcall     0x1296 <___addsf3>
    5208:	0e 09 90    	mov.w     [w14+16], w2
    520a:	9e 09 90    	mov.w     [w14+18], w3
    520c:	44 e0 07    	rcall     0x1296 <___addsf3>

0000520e <.LSM13>:
}
    520e:	4f 04 78    	mov.w     [--w15], w8
    5210:	00 80 fa    	ulnk      
    5212:	00 00 06    	return    

00005214 <_PID_U32_control>:

uint32_t PID_U32_control(_PID_U32 *self) {
    5214:	16 00 fa    	lnk       #0x16
    5216:	88 9f be    	mov.d     w8, [w15++]
    5218:	20 0f 98    	mov.w     w0, [w14+20]

0000521a <.LSM15>:
    uint32_t error = self->set_point - self->position;
    521a:	2e 08 90    	mov.w     [w14+20], w0
    521c:	60 01 90    	mov.w     [w0+12], w2
    521e:	f0 01 90    	mov.w     [w0+14], w3
    5220:	2e 08 90    	mov.w     [w14+20], w0
    5222:	b0 08 90    	mov.w     [w0+22], w1
    5224:	20 08 90    	mov.w     [w0+20], w0
    5226:	00 1f 51    	sub.w     w2, w0, [w14++]
    5228:	01 97 59    	subb.w    w3, w1, [w14--]

0000522a <.LSM16>:
    float deriv = (self->position - self->_prev_position) / ((float)(self->dt));
    522a:	2e 08 90    	mov.w     [w14+20], w0
    522c:	20 09 90    	mov.w     [w0+20], w2
    522e:	b0 09 90    	mov.w     [w0+22], w3
    5230:	2e 08 90    	mov.w     [w14+20], w0
    5232:	d0 08 90    	mov.w     [w0+26], w1
    5234:	40 08 90    	mov.w     [w0+24], w0
    5236:	00 00 51    	sub.w     w2, w0, w0
    5238:	81 80 59    	subb.w    w3, w1, w1
    523a:	eb e0 07    	rcall     0x1412 <___floatunsisf>
    523c:	00 04 be    	mov.d     w0, w8
    523e:	2e 08 90    	mov.w     [w14+20], w0
    5240:	90 08 90    	mov.w     [w0+18], w1
    5242:	00 08 90    	mov.w     [w0+16], w0
    5244:	e6 e0 07    	rcall     0x1412 <___floatunsisf>
    5246:	00 01 be    	mov.d     w0, w2
    5248:	08 00 be    	mov.d     w8, w0
    524a:	82 e0 07    	rcall     0x1350 <___divsf3>
    524c:	20 07 98    	mov.w     w0, [w14+4]
    524e:	31 07 98    	mov.w     w1, [w14+6]

00005250 <.LSM17>:

    self->_integ_state += error;
    5250:	2e 08 90    	mov.w     [w14+20], w0
    5252:	f0 08 90    	mov.w     [w0+30], w1
    5254:	60 08 90    	mov.w     [w0+28], w0
    5256:	3e 01 40    	add.w     w0, [w14++], w2
    5258:	ae 81 48    	addc.w    w1, [w14--], w3
    525a:	02 00 be    	mov.d     w2, w0
    525c:	2e 09 90    	mov.w     [w14+20], w2
    525e:	60 09 98    	mov.w     w0, [w2+28]
    5260:	71 09 98    	mov.w     w1, [w2+30]

00005262 <.LSM18>:

    if (self->_integ_state > self->integ_max) {
    5262:	2e 08 90    	mov.w     [w14+20], w0
    5264:	60 09 90    	mov.w     [w0+28], w2
    5266:	f0 09 90    	mov.w     [w0+30], w3
    5268:	2e 08 90    	mov.w     [w14+20], w0
    526a:	90 10 90    	mov.w     [w0+34], w1
    526c:	00 10 90    	mov.w     [w0+32], w0
    526e:	80 0f 51    	sub.w     w2, w0, [w15]
    5270:	81 8f 59    	subb.w    w3, w1, [w15]
    5272:	07 00 36    	bra       LEU, 0x5282 <.L7>

00005274 <.LSM19>:
        self->_integ_state = self->integ_max;
    5274:	2e 08 90    	mov.w     [w14+20], w0
    5276:	90 10 90    	mov.w     [w0+34], w1
    5278:	00 10 90    	mov.w     [w0+32], w0
    527a:	2e 09 90    	mov.w     [w14+20], w2
    527c:	60 09 98    	mov.w     w0, [w2+28]
    527e:	71 09 98    	mov.w     w1, [w2+30]
    5280:	0f 00 37    	bra       0x52a0 <.L8>

00005282 <.L7>:
    } else if (self->_integ_state < self->integ_min) {
    5282:	2e 08 90    	mov.w     [w14+20], w0
    5284:	60 09 90    	mov.w     [w0+28], w2
    5286:	f0 09 90    	mov.w     [w0+30], w3
    5288:	2e 08 90    	mov.w     [w14+20], w0
    528a:	b0 10 90    	mov.w     [w0+38], w1
    528c:	20 10 90    	mov.w     [w0+36], w0
    528e:	80 0f 51    	sub.w     w2, w0, [w15]
    5290:	81 8f 59    	subb.w    w3, w1, [w15]
    5292:	06 00 31    	bra       C, 0x52a0 <.L8>

00005294 <.LSM21>:
        self->_integ_state = self->integ_min;
    5294:	2e 08 90    	mov.w     [w14+20], w0
    5296:	b0 10 90    	mov.w     [w0+38], w1
    5298:	20 10 90    	mov.w     [w0+36], w0
    529a:	2e 09 90    	mov.w     [w14+20], w2
    529c:	60 09 98    	mov.w     w0, [w2+28]
    529e:	71 09 98    	mov.w     w1, [w2+30]

000052a0 <.L8>:
    };

    uint32_t pterm = self->Kp * error;
    52a0:	2e 08 90    	mov.w     [w14+20], w0
    52a2:	10 00 be    	mov.d     [w0], w0
    52a4:	1e 01 78    	mov.w     [w14], w2
    52a6:	01 91 b9    	mul.ss    w2, w1, w2
    52a8:	02 01 78    	mov.w     w2, w2
    52aa:	9e 01 90    	mov.w     [w14+2], w3
    52ac:	00 9a b9    	mul.ss    w3, w0, w4
    52ae:	84 01 78    	mov.w     w4, w3
    52b0:	03 01 41    	add.w     w2, w3, w2
    52b2:	9e 01 78    	mov.w     [w14], w3
    52b4:	00 18 b8    	mul.uu    w3, w0, w0
    52b6:	01 01 41    	add.w     w2, w1, w2
    52b8:	82 00 78    	mov.w     w2, w1
    52ba:	40 07 98    	mov.w     w0, [w14+8]
    52bc:	51 07 98    	mov.w     w1, [w14+10]
    52be:	40 07 98    	mov.w     w0, [w14+8]
    52c0:	51 07 98    	mov.w     w1, [w14+10]

000052c2 <.LSM23>:
    uint32_t iterm = self->Ki * self->_integ_state;
    52c2:	2e 08 90    	mov.w     [w14+20], w0
    52c4:	20 01 90    	mov.w     [w0+4], w2
    52c6:	b0 01 90    	mov.w     [w0+6], w3
    52c8:	2e 08 90    	mov.w     [w14+20], w0
    52ca:	f0 08 90    	mov.w     [w0+30], w1
    52cc:	60 08 90    	mov.w     [w0+28], w0
    52ce:	00 9a b9    	mul.ss    w3, w0, w4
    52d0:	04 02 78    	mov.w     w4, w4
    52d2:	02 8b b9    	mul.ss    w1, w2, w6
    52d4:	86 02 78    	mov.w     w6, w5
    52d6:	05 02 42    	add.w     w4, w5, w4
    52d8:	00 10 b8    	mul.uu    w2, w0, w0
    52da:	01 02 42    	add.w     w4, w1, w4
    52dc:	84 00 78    	mov.w     w4, w1
    52de:	60 07 98    	mov.w     w0, [w14+12]
    52e0:	71 07 98    	mov.w     w1, [w14+14]
    52e2:	60 07 98    	mov.w     w0, [w14+12]
    52e4:	71 07 98    	mov.w     w1, [w14+14]

000052e6 <.LSM24>:
    uint32_t dterm = self->Kd * deriv;
    52e6:	2e 08 90    	mov.w     [w14+20], w0
    52e8:	d0 00 90    	mov.w     [w0+10], w1
    52ea:	40 00 90    	mov.w     [w0+8], w0
    52ec:	92 e0 07    	rcall     0x1412 <___floatunsisf>
    52ee:	2e 01 90    	mov.w     [w14+4], w2
    52f0:	be 01 90    	mov.w     [w14+6], w3
    52f2:	ec e0 07    	rcall     0x14cc <___mulsf3>
    52f4:	73 e0 07    	rcall     0x13dc <___fixunssfsi>
    52f6:	00 0f 98    	mov.w     w0, [w14+16]
    52f8:	11 0f 98    	mov.w     w1, [w14+18]

000052fa <.LSM25>:

    self->_prev_position = self->position;
    52fa:	2e 08 90    	mov.w     [w14+20], w0
    52fc:	b0 08 90    	mov.w     [w0+22], w1
    52fe:	20 08 90    	mov.w     [w0+20], w0
    5300:	2e 09 90    	mov.w     [w14+20], w2
    5302:	40 09 98    	mov.w     w0, [w2+24]
    5304:	51 09 98    	mov.w     w1, [w2+26]

00005306 <.LSM26>:
    return pterm + iterm + dterm;
    5306:	4e 01 90    	mov.w     [w14+8], w2
    5308:	de 01 90    	mov.w     [w14+10], w3
    530a:	6e 00 90    	mov.w     [w14+12], w0
    530c:	fe 00 90    	mov.w     [w14+14], w1
    530e:	02 01 40    	add.w     w0, w2, w2
    5310:	83 81 48    	addc.w    w1, w3, w3
    5312:	0e 08 90    	mov.w     [w14+16], w0
    5314:	9e 08 90    	mov.w     [w14+18], w1
    5316:	02 00 40    	add.w     w0, w2, w0
    5318:	83 80 48    	addc.w    w1, w3, w1

0000531a <.LSM27>:
}    531a:	4f 04 be    	mov.d     [--w15], w8
    531c:	00 80 fa    	ulnk      
    531e:	00 00 06    	return    

00005320 <_quad_read>:
// previous 1-bit binary readings of the quadrature encoder's A and B pins.

_QUAD quad1, quad2;

void quad_read(_QUAD *self) {
    5320:	04 00 fa    	lnk       #0x4
    5322:	10 07 98    	mov.w     w0, [w14+2]

00005324 <.LSM1>:
    disable_interrupts();
    5324:	ff 3f fc    	disi      #0x3fff

00005326 <.LSM2>:
    self -> a_curr = pin_read(self -> A);
    5326:	1e 00 90    	mov.w     [w14+2], w0
    5328:	00 08 90    	mov.w     [w0+16], w0
    532a:	37 f7 07    	rcall     0x419a <_pin_read>
    532c:	80 40 78    	mov.b     w0, w1
    532e:	1e 00 90    	mov.w     [w14+2], w0
    5330:	01 48 78    	mov.b     w1, [w0]

00005332 <.LSM3>:
    self -> b_curr = pin_read(self -> B);
    5332:	1e 00 90    	mov.w     [w14+2], w0
    5334:	10 08 90    	mov.w     [w0+18], w0
    5336:	31 f7 07    	rcall     0x419a <_pin_read>
    5338:	80 40 78    	mov.b     w0, w1
    533a:	1e 00 90    	mov.w     [w14+2], w0
    533c:	21 40 98    	mov.b     w1, [w0+2]

0000533e <.LSM4>:
    unsigned char latest_read = (self -> a_curr << 1) + self -> b_curr;
    533e:	1e 00 90    	mov.w     [w14+2], w0
    5340:	10 40 78    	mov.b     [w0], w0
    5342:	00 40 40    	add.b     w0, w0, w0
    5344:	80 40 78    	mov.b     w0, w1
    5346:	1e 00 90    	mov.w     [w14+2], w0
    5348:	20 40 90    	mov.b     [w0+2], w0
    534a:	00 cf 40    	add.b     w1, w0, [w14]

0000534c <.LSM5>:
    self -> encoder_read = ((self -> encoder_read << 2) + latest_read) & 0xF;
    534c:	1e 00 90    	mov.w     [w14+2], w0
    534e:	d0 40 90    	mov.b     [w0+5], w1
    5350:	20 00 20    	mov.w     #0x2, w0
    5352:	00 08 dd    	sl.w      w1, w0, w0
    5354:	1e 40 40    	add.b     w0, [w14], w0
    5356:	ef 40 60    	and.b     w0, #0xf, w1
    5358:	1e 00 90    	mov.w     [w14+2], w0
    535a:	51 40 98    	mov.b     w1, [w0+5]

0000535c <.LSM6>:
    int8_t delta = quad_lut[self -> encoder_read];
    535c:	1e 00 90    	mov.w     [w14+2], w0
    535e:	50 40 90    	mov.b     [w0+5], w0
    5360:	00 80 fb    	ze        w0, w0
    5362:	61 63 22    	mov.w     #0x2636, w1
    5364:	61 41 78    	mov.b     [w1+w0], w2
    5366:	12 47 98    	mov.b     w2, [w14+1]

00005368 <.LSM7>:

    if (self -> counter == 0) {
    5368:	1e 00 90    	mov.w     [w14+2], w0
    536a:	c0 00 90    	mov.w     [w0+8], w1
    536c:	30 00 90    	mov.w     [w0+6], w0
    536e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    5370:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    5372:	08 00 3a    	bra       NZ, 0x5384 <.L2>

00005374 <.LSM8>:
        if (delta == -1) {
    5374:	1e 40 90    	mov.b     [w14+1], w0
    5376:	e1 4f 40    	add.b     w0, #0x1, [w15]
    5378:	05 00 3a    	bra       NZ, 0x5384 <.L2>

0000537a <.LSM9>:
            self -> overflow += -1;
    537a:	1e 00 90    	mov.w     [w14+2], w0
    537c:	50 00 90    	mov.w     [w0+10], w0
    537e:	80 00 e9    	dec.w     w0, w1
    5380:	1e 00 90    	mov.w     [w14+2], w0
    5382:	51 00 98    	mov.w     w1, [w0+10]

00005384 <.L2>:
        }
    }

    self -> counter += delta;
    5384:	1e 00 90    	mov.w     [w14+2], w0
    5386:	30 01 90    	mov.w     [w0+6], w2
    5388:	c0 01 90    	mov.w     [w0+8], w3
    538a:	1e 40 90    	mov.b     [w14+1], w0
    538c:	00 00 fb    	se        w0, w0
    538e:	cf 80 de    	asr.w     w0, #0xf, w1
    5390:	02 00 40    	add.w     w0, w2, w0
    5392:	83 80 48    	addc.w    w1, w3, w1
    5394:	1e 01 90    	mov.w     [w14+2], w2
    5396:	30 01 98    	mov.w     w0, [w2+6]
    5398:	41 01 98    	mov.w     w1, [w2+8]

0000539a <.LSM11>:

    if (self -> counter == 0) {
    539a:	1e 00 90    	mov.w     [w14+2], w0
    539c:	c0 00 90    	mov.w     [w0+8], w1
    539e:	30 00 90    	mov.w     [w0+6], w0
    53a0:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    53a2:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    53a4:	08 00 3a    	bra       NZ, 0x53b6 <.L3>

000053a6 <.LSM12>:
        if (delta == 1) {
    53a6:	1e 40 90    	mov.b     [w14+1], w0
    53a8:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    53aa:	05 00 3a    	bra       NZ, 0x53b6 <.L3>

000053ac <.LSM13>:
            self -> overflow += 1;
    53ac:	1e 00 90    	mov.w     [w14+2], w0
    53ae:	50 00 90    	mov.w     [w0+10], w0
    53b0:	80 00 e8    	inc.w     w0, w1
    53b2:	1e 00 90    	mov.w     [w14+2], w0
    53b4:	51 00 98    	mov.w     w1, [w0+10]

000053b6 <.L3>:
        }
    }
    
    self -> a_prev = self -> a_curr;
    53b6:	1e 00 90    	mov.w     [w14+2], w0
    53b8:	90 40 78    	mov.b     [w0], w1
    53ba:	1e 00 90    	mov.w     [w14+2], w0
    53bc:	11 40 98    	mov.b     w1, [w0+1]

000053be <.LSM15>:
    self -> b_prev = self -> b_curr;
    53be:	1e 00 90    	mov.w     [w14+2], w0
    53c0:	a0 40 90    	mov.b     [w0+2], w1
    53c2:	1e 00 90    	mov.w     [w14+2], w0
    53c4:	31 40 98    	mov.b     w1, [w0+3]

000053c6 <.LSM16>:
    enable_interrupts();
    53c6:	52 20 ef    	clr.w     0x52

000053c8 <.LSM17>:
}
    53c8:	00 80 fa    	ulnk      
    53ca:	00 00 06    	return    

000053cc <__timer_read_quad1>:

void _timer_read_quad1(_TIMER *timer) {
    53cc:	02 00 fa    	lnk       #0x2
    53ce:	00 0f 78    	mov.w     w0, [w14]

000053d0 <.LSM19>:
    quad_read(&quad1);
    53d0:	80 5a 22    	mov.w     #0x25a8, w0
    53d2:	a6 ff 07    	rcall     0x5320 <_quad_read>

000053d4 <.LSM20>:
}
    53d4:	00 80 fa    	ulnk      
    53d6:	00 00 06    	return    

000053d8 <__timer_read_quad2>:

void _timer_read_quad2(_TIMER *timer) {
    53d8:	02 00 fa    	lnk       #0x2
    53da:	00 0f 78    	mov.w     w0, [w14]

000053dc <.LSM22>:
    quad_read(&quad2);
    53dc:	c0 5b 22    	mov.w     #0x25bc, w0
    53de:	a0 ff 07    	rcall     0x5320 <_quad_read>

000053e0 <.LSM23>:
}
    53e0:	00 80 fa    	ulnk      
    53e2:	00 00 06    	return    

000053e4 <__read_quad1>:

void _read_quad1(void) {
    53e4:	00 00 fa    	lnk       #0x0

000053e6 <.LSM25>:
    quad_read(&quad1);
    53e6:	80 5a 22    	mov.w     #0x25a8, w0
    53e8:	9b ff 07    	rcall     0x5320 <_quad_read>

000053ea <.LSM26>:
}
    53ea:	00 80 fa    	ulnk      
    53ec:	00 00 06    	return    

000053ee <__read_quad2>:

void _read_quad2(void) {
    53ee:	00 00 fa    	lnk       #0x0

000053f0 <.LSM28>:
    quad_read(&quad2);
    53f0:	c0 5b 22    	mov.w     #0x25bc, w0
    53f2:	96 ff 07    	rcall     0x5320 <_quad_read>

000053f4 <.LSM29>:
}
    53f4:	00 80 fa    	ulnk      
    53f6:	00 00 06    	return    

000053f8 <_init_quad_fxns>:

void init_quad_fxns(void) {
    53f8:	00 00 fa    	lnk       #0x0

000053fa <.LSM31>:
    /*
    Attaches the proper reading functions to each quadrature encoder object.
    */
    quad1.read = _read_quad1;
    53fa:	40 3e 25    	mov.w     #0x53e4, w0
    53fc:	a0 2d 89    	mov.w     w0, 0x25b4

000053fe <.LSM32>:
    quad2.read = _read_quad2;
    53fe:	e0 3e 25    	mov.w     #0x53ee, w0
    5400:	40 2e 89    	mov.w     w0, 0x25c8

00005402 <.LSM33>:
    quad1.timer_read = _timer_read_quad1;
    5402:	c0 3c 25    	mov.w     #0x53cc, w0
    5404:	b0 2d 89    	mov.w     w0, 0x25b6

00005406 <.LSM34>:
    quad2.timer_read = _timer_read_quad2;
    5406:	80 3d 25    	mov.w     #0x53d8, w0
    5408:	50 2e 89    	mov.w     w0, 0x25ca

0000540a <.LSM35>:
}
    540a:	00 80 fa    	ulnk      
    540c:	00 00 06    	return    

0000540e <_init_quad_ids>:

void init_quad_ids(void) {
    540e:	00 00 fa    	lnk       #0x0

00005410 <.LSM37>:
    /*
    Gives each quadrature encoder object a numerical identifier.
    */
    quad1.identifier = 1;
    5410:	c0 5a 22    	mov.w     #0x25ac, w0
    5412:	11 c0 b3    	mov.b     #0x1, w1
    5414:	01 48 78    	mov.b     w1, [w0]

00005416 <.LSM38>:
    quad2.identifier = 2;
    5416:	00 5c 22    	mov.w     #0x25c0, w0
    5418:	21 c0 b3    	mov.b     #0x2, w1
    541a:	01 48 78    	mov.b     w1, [w0]

0000541c <.LSM39>:
}
    541c:	00 80 fa    	ulnk      
    541e:	00 00 06    	return    

00005420 <_init_quad>:

void init_quad(void) {
    5420:	00 00 fa    	lnk       #0x0

00005422 <.LSM41>:
    /*
    Call this to initialize this quadrature library.
    */
    init_quad_ids();
    5422:	f5 ff 07    	rcall     0x540e <_init_quad_ids>

00005424 <.LSM42>:
    init_quad_fxns();
    5424:	e9 ff 07    	rcall     0x53f8 <_init_quad_fxns>

00005426 <.LSM43>:
}
    5426:	00 80 fa    	ulnk      
    5428:	00 00 06    	return    

0000542a <_quad_init>:

void quad_init(_QUAD *self, _PIN *in_A, _PIN *in_B) {
    542a:	06 00 fa    	lnk       #0x6
    542c:	00 0f 78    	mov.w     w0, [w14]
    542e:	11 07 98    	mov.w     w1, [w14+2]
    5430:	22 07 98    	mov.w     w2, [w14+4]

00005432 <.LSM45>:
    /*
    Initializes a quadrature encoder object connected to two digital input pins,
    in_A and in_B.
    */
    self -> A = in_A;
    5432:	1e 00 78    	mov.w     [w14], w0
    5434:	9e 00 90    	mov.w     [w14+2], w1
    5436:	01 08 98    	mov.w     w1, [w0+16]

00005438 <.LSM46>:
    self -> B = in_B;
    5438:	1e 00 78    	mov.w     [w14], w0
    543a:	ae 00 90    	mov.w     [w14+4], w1
    543c:	11 08 98    	mov.w     w1, [w0+18]

0000543e <.LSM47>:
    self -> a_prev = 0;
    543e:	1e 00 78    	mov.w     [w14], w0
    5440:	80 40 eb    	clr.b     w1
    5442:	11 40 98    	mov.b     w1, [w0+1]

00005444 <.LSM48>:
    self -> b_prev = 0;
    5444:	1e 00 78    	mov.w     [w14], w0
    5446:	80 40 eb    	clr.b     w1
    5448:	31 40 98    	mov.b     w1, [w0+3]

0000544a <.LSM49>:
    self -> overflow = 0;
    544a:	1e 00 78    	mov.w     [w14], w0
    544c:	80 00 eb    	clr.w     w1
    544e:	51 00 98    	mov.w     w1, [w0+10]

00005450 <.LSM50>:
    self -> counter = 0;
    5450:	1e 01 78    	mov.w     [w14], w2
    5452:	60 00 b8    	mul.uu    w0, #0x0, w0
    5454:	30 01 98    	mov.w     w0, [w2+6]
    5456:	41 01 98    	mov.w     w1, [w2+8]

00005458 <.LSM51>:

    pin_digitalIn(in_A);
    5458:	1e 00 90    	mov.w     [w14+2], w0
    545a:	cd f5 07    	rcall     0x3ff6 <_pin_digitalIn>

0000545c <.LSM52>:
    pin_digitalIn(in_B);
    545c:	2e 00 90    	mov.w     [w14+4], w0
    545e:	cb f5 07    	rcall     0x3ff6 <_pin_digitalIn>

00005460 <.LSM53>:
}
    5460:	00 80 fa    	ulnk      
    5462:	00 00 06    	return    

00005464 <_quad_every>:

void quad_every(_QUAD *self, _TIMER *timer, float interval) {
    5464:	08 00 fa    	lnk       #0x8
    5466:	00 0f 78    	mov.w     w0, [w14]
    5468:	11 07 98    	mov.w     w1, [w14+2]
    546a:	22 07 98    	mov.w     w2, [w14+4]
    546c:	33 07 98    	mov.w     w3, [w14+6]

0000546e <.LSM55>:
    /*
    Given an initialized _QUAD object, configures it to utilize the given
    _TIMER's interrupts to read the _QUAD at the specified time interval.
    */
    timer_every(timer, interval, self -> timer_read);
    546e:	1e 00 78    	mov.w     [w14], w0
    5470:	70 00 90    	mov.w     [w0+14], w0
    5472:	80 00 78    	mov.w     w0, w1
    5474:	2e 01 90    	mov.w     [w14+4], w2
    5476:	be 01 90    	mov.w     [w14+6], w3
    5478:	1e 00 90    	mov.w     [w14+2], w0
    547a:	f4 f3 07    	rcall     0x3c64 <_timer_every>

0000547c <.LSM56>:
}
    547c:	00 80 fa    	ulnk      
    547e:	00 00 06    	return    

00005480 <_quad_debug>:


void quad_debug(_QUAD *self, _PIN *lut3, _PIN *lut2, _PIN *lut1, _PIN *lut0 ) {
    5480:	0a 00 fa    	lnk       #0xa
    5482:	00 0f 78    	mov.w     w0, [w14]
    5484:	11 07 98    	mov.w     w1, [w14+2]
    5486:	22 07 98    	mov.w     w2, [w14+4]
    5488:	33 07 98    	mov.w     w3, [w14+6]
    548a:	44 07 98    	mov.w     w4, [w14+8]

0000548c <.LSM58>:
    /*
    Given a quadrature encoder object and four configured digital output pins,
    writes the value used to index the LUT across the four pins as follows--
        LUT Index Bit   |  Source
        [LSB --> MSB]   |
        ****************************************
              0 (LSB)   | most recent value of B
              1         | most recent value of A
              2         | previously read value of B
              3 (MSB)   | previously read value of A
    */
    pin_write(lut0, self -> b_curr); // b0
    548c:	1e 00 78    	mov.w     [w14], w0
    548e:	20 40 90    	mov.b     [w0+2], w0
    5490:	00 80 fb    	ze        w0, w0
    5492:	80 00 78    	mov.w     w0, w1
    5494:	4e 00 90    	mov.w     [w14+8], w0
    5496:	73 f6 07    	rcall     0x417e <_pin_write>

00005498 <.LSM59>:
    pin_write(lut1, self -> a_curr); // b1
    5498:	1e 00 78    	mov.w     [w14], w0
    549a:	10 40 78    	mov.b     [w0], w0
    549c:	00 80 fb    	ze        w0, w0
    549e:	80 00 78    	mov.w     w0, w1
    54a0:	3e 00 90    	mov.w     [w14+6], w0
    54a2:	6d f6 07    	rcall     0x417e <_pin_write>

000054a4 <.LSM60>:
    pin_write(lut2, self -> b_prev); // b2
    54a4:	1e 00 78    	mov.w     [w14], w0
    54a6:	30 40 90    	mov.b     [w0+3], w0
    54a8:	00 80 fb    	ze        w0, w0
    54aa:	80 00 78    	mov.w     w0, w1
    54ac:	2e 00 90    	mov.w     [w14+4], w0
    54ae:	67 f6 07    	rcall     0x417e <_pin_write>

000054b0 <.LSM61>:
    pin_write(lut3, self -> a_prev); // b3
    54b0:	1e 00 78    	mov.w     [w14], w0
    54b2:	10 40 90    	mov.b     [w0+1], w0
    54b4:	00 80 fb    	ze        w0, w0
    54b6:	80 00 78    	mov.w     w0, w1
    54b8:	1e 00 90    	mov.w     [w14+2], w0
    54ba:	61 f6 07    	rcall     0x417e <_pin_write>

000054bc <.LSM62>:
}
    54bc:	00 80 fa    	ulnk      
    54be:	00 00 06    	return    

000054c0 <_quad_reset_counter>:

void quad_reset_counter(_QUAD *self) {
    54c0:	02 00 fa    	lnk       #0x2
    54c2:	00 0f 78    	mov.w     w0, [w14]

000054c4 <.LSM64>:
    /*
    Resets the counter associated with the given quadrature encoder to zero.
    */
    self -> counter = 0;
    54c4:	1e 01 78    	mov.w     [w14], w2
    54c6:	60 00 b8    	mul.uu    w0, #0x0, w0
    54c8:	30 01 98    	mov.w     w0, [w2+6]
    54ca:	41 01 98    	mov.w     w1, [w2+8]

000054cc <.LSM65>:
}    54cc:	00 80 fa    	ulnk      
    54ce:	00 00 06    	return    
Disassembly of section .dinit:

000054d0 <.dinit>:
    54d0:	5a 08 00    	nop       
    54d2:	00 10 00    	nop       
    54d4:	80 00 00    	nop       
    54d6:	50 08 00    	nop       
    54d8:	06 00 00    	nop       
    54da:	80 00 00    	nop       
    54dc:	76 21 00    	nop       
    54de:	b8 01 00    	nop       
    54e0:	80 00 00    	nop       
    54e2:	00 08 00    	nop       
    54e4:	30 00 00    	nop       
    54e6:	80 00 00    	nop       
    54e8:	26 26 00    	nop       
    54ea:	10 00 00    	nop       
    54ec:	82 00 00    	nop       
    54ee:	bd 37 86    	mov.w     0xc6f6, w13
    54f0:	33 bd 37    	bra       0xffffcf58
    54f2:	06 35 bd    	subr.w    0x1506
    54f4:	37 86 36    	bra       LEU, 0xffff6164
    54f6:	bd 37 86    	mov.w     0xc6f6, w13
    54f8:	37 00 00    	nop       
    54fa:	58 24 00    	nop       
    54fc:	6e 00 00    	nop       
    54fe:	80 00 00    	nop       
    5500:	36 26 00    	nop       
    5502:	10 00 00    	nop       
    5504:	82 00 00    	nop       
    5506:	00 ff 01    	.pword 0x01ff00
    5508:	00 01 00    	nop       
    550a:	00 ff ff    	nopr      
    550c:	00 00 01    	call      w0
    550e:	00 01 ff    	nopr      
    5510:	00 00 00    	nop       
    5512:	a8 25 00    	nop       
    5514:	28 00 00    	nop       
    5516:	80 00 00    	nop       
    5518:	c6 24 00    	nop       
    551a:	6e 00 00    	nop       
    551c:	80 00 00    	nop       
    551e:	46 26 00    	nop       
    5520:	0a 00 00    	nop       
    5522:	80 00 00    	nop       
    5524:	30 08 00    	nop       
    5526:	20 00 00    	nop       
    5528:	80 00 00    	nop       
    552a:	5a 18 00    	nop       
    552c:	1c 09 00    	nop       
    552e:	80 00 00    	nop       
    5530:	56 08 00    	nop       
    5532:	04 00 00    	nop       
    5534:	80 00 00    	nop       
    5536:	7e 25 00    	nop       
    5538:	2a 00 00    	nop       
    553a:	80 00 00    	nop       
    553c:	2e 23 00    	nop       
    553e:	a2 00 00    	nop       
    5540:	80 00 00    	nop       
    5542:	58 26 00    	nop       
    5544:	02 00 00    	nop       
    5546:	82 00 00    	nop       
    5548:	04 00 00    	nop       
    554a:	50 26 00    	nop       
    554c:	04 00 00    	nop       
    554e:	80 00 00    	nop       
    5550:	d0 23 00    	nop       
    5552:	88 00 00    	nop       
    5554:	82 00 00    	nop       
    5556:	01 00 00    	nop       
    5558:	00 f6 23    	mov.w     #0x3f60, w0
    555a:	f7 23 f6    	.pword 0xf623f7
    555c:	23 f6 23    	mov.w     #0x3f62, w3
    555e:	f6 23 f6    	.pword 0xf623f6
    5560:	23 e6 23    	mov.w     #0x3e62, w3
	...
    5570:	00 02 08    	do        #0x200, 0x5776
    5572:	01 01 1e 
    5574:	24 1f 24    	mov.w     #0x41f2, w4
    5576:	1e 24 1e    	subbr.w   w12, [w14], [--w8]
    5578:	24 1e 24    	mov.w     #0x41e2, w4
    557a:	1e 24 0e    	bra       SA, 0x9db8
    557c:	24 00 00    	nop       
	...
    558a:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207a84a>
    558c:	08 02 02 
    558e:	46 24 47    	add.w     w14, [--w6], [--w8]
    5590:	24 46 24    	mov.w     #0x4462, w4
    5592:	46 24 46    	add.w     w12, [--w6], [--w8]
    5594:	24 46 24    	mov.w     #0x4462, w4
    5596:	36 24 00    	nop       
	...
    55a6:	d0 23 f8    	push      0x23d0
    55a8:	23 20 24    	mov.w     #0x4202, w3
	...
    55b2:	34 25 00    	nop       
    55b4:	4a 00 00    	nop       
    55b6:	82 00 00    	nop       
    55b8:	30 31 32    	bra       Z, 0xb81a
    55ba:	33 34 35    	bra       LT, 0xbe22
    55bc:	36 37 38    	bra       NOV, 0xc42a
    55be:	39 61 62    	and.b     w4, [w9++], [--w2]
    55c0:	63 64 65    	and.b     w10, #0x3, [--w8]
    55c2:	66 67 68    	xor.b     w0, #0x6, [--w14]
    55c4:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    55c6:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    55c8:	6f 70 71    	.pword 0x71706f
    55ca:	72 73 74    	.pword 0x747372
    55cc:	75 76 77    	.pword 0x777675
    55ce:	78 79 7a    	.pword 0x7a7978
    55d0:	00 00 00    	nop       
    55d2:	41 29 21    	mov.w     #0x1294, w1
    55d4:	1c 19 17    	subr.w    w14, [w12], [w2++]
    55d6:	16 15 14    	subr.w    w8, [w6], [w10--]
    55d8:	13 12 12    	subr.w    w4, [w3], [w4--]
    55da:	11 11 11    	subr.w    w2, [w1], [w2--]
    55dc:	10 10 10    	subr.w    w0, [w0], [w0--]
    55de:	0f 0f 0f    	bra       SB, 0x73fe
    55e0:	0f 0e 0e    	bra       SA, 0x7200
    55e2:	0e 0e 0e    	bra       SA, 0x7200
    55e4:	0e 0e 0d    	bra       OB, 0x7202
    55e6:	0d 0d 0d    	bra       OB, 0x7002
    55e8:	0d 0d 00    	nop       
    55ea:	54 26 00    	nop       
    55ec:	04 00 00    	nop       
    55ee:	80 00 00    	nop       
    55f0:	f2 25 00    	nop       
    55f2:	1a 00 00    	nop       
    55f4:	82 00 00    	nop       
    55f6:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    55f8:	74 7a 4c    	.pword 0x4c7a74
    55fa:	00 00 01    	call      w0
    55fc:	00 02 00    	nop       
    55fe:	04 00 08    	do        #0x4, 0x7602
    5600:	00 10 00 
    5602:	00 00 20    	mov.w     #0x0, w0
    5604:	2b 2d 23    	mov.w     #0x32d2, w11
    5606:	30 00 00    	nop       
    5608:	0c 26 00    	nop       
    560a:	1a 00 00    	nop       
    560c:	82 00 00    	nop       
    560e:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    5610:	74 7a 4c    	.pword 0x4c7a74
    5612:	00 00 01    	call      w0
    5614:	00 02 00    	nop       
    5616:	04 00 08    	do        #0x4, 0x761a
    5618:	00 10 00 
    561a:	00 00 20    	mov.w     #0x0, w0
    561c:	2b 2d 23    	mov.w     #0x32d2, w11
    561e:	30 00 00    	nop       
    5620:	d0 25 00    	nop       
    5622:	22 00 00    	nop       
    5624:	82 00 00    	nop       
    5626:	30 31 32    	bra       Z, 0xb888
    5628:	33 34 35    	bra       LT, 0xbe90
    562a:	36 37 38    	bra       NOV, 0xc498
    562c:	39 41 42    	add.b     w4, [w9++], w2
    562e:	43 44 45    	add.b     w10, [--w3], w8
    5630:	46 00 30    	bra       OV, 0x56be
    5632:	31 32 33    	bra       N, 0xba96
    5634:	34 35 36    	bra       LEU, 0xc09e
    5636:	37 38 39    	bra       NC, 0xc6a6
    5638:	61 62 63    	and.b     w6, #0x1, [--w4]
    563a:	64 65 66    	and.b     w12, #0x4, [--w10]
    563c:	00 00 00    	nop       
    563e:	5a 26 00    	nop       
    5640:	02 00 00    	nop       
    5642:	80 00 00    	nop       
    5644:	5c 26 00    	nop       
    5646:	02 00 00    	nop       
    5648:	80 00 00    	nop       
    564a:	00 00 00    	nop       
Disassembly of section .text:

0000564c <_init_md>:
#include "md.h"

_MD md1, md2, mdp;

void init_md(void) {
    564c:	00 00 fa    	lnk       #0x0

0000564e <.LSM1>:
    md_init(&md1, &D[6], &D[7], 1e3, &oc7);
    564e:	a4 39 22    	mov.w     #0x239a, w4
    5650:	83 3e 20    	mov.w     #0x3e8, w3
    5652:	02 21 22    	mov.w     #0x2210, w2
    5654:	a1 1f 22    	mov.w     #0x21fa, w1
    5656:	e0 57 22    	mov.w     #0x257e, w0
    5658:	02 00 07    	rcall     0x565e <_md_init>

0000565a <.LSM2>:
}
    565a:	00 80 fa    	ulnk      
    565c:	00 00 06    	return    

0000565e <_md_init>:

void md_init(_MD *self, _PIN *pin1, _PIN *pin2, uint16_t freq, _OC *oc) {
    565e:	0a 00 fa    	lnk       #0xa
    5660:	00 0f 78    	mov.w     w0, [w14]
    5662:	11 07 98    	mov.w     w1, [w14+2]
    5664:	22 07 98    	mov.w     w2, [w14+4]
    5666:	33 07 98    	mov.w     w3, [w14+6]
    5668:	44 07 98    	mov.w     w4, [w14+8]

0000566a <.LSM4>:
    self->dir = 0;
    566a:	1e 00 78    	mov.w     [w14], w0
    566c:	80 40 eb    	clr.b     w1
    566e:	01 48 78    	mov.b     w1, [w0]

00005670 <.LSM5>:
    self->speed = 0;
    5670:	1e 00 78    	mov.w     [w14], w0
    5672:	80 00 eb    	clr.w     w1
    5674:	11 00 98    	mov.w     w1, [w0+2]

00005676 <.LSM6>:
    self->freq = freq;
    5676:	1e 00 78    	mov.w     [w14], w0
    5678:	be 00 90    	mov.w     [w14+6], w1
    567a:	21 00 98    	mov.w     w1, [w0+4]

0000567c <.LSM7>:
    self->pins[0] = pin1;
    567c:	1e 00 78    	mov.w     [w14], w0
    567e:	9e 00 90    	mov.w     [w14+2], w1
    5680:	41 00 98    	mov.w     w1, [w0+8]

00005682 <.LSM8>:
    self->pins[1] = pin2;
    5682:	1e 00 78    	mov.w     [w14], w0
    5684:	ae 00 90    	mov.w     [w14+4], w1
    5686:	51 00 98    	mov.w     w1, [w0+10]

00005688 <.LSM9>:
    self->braked = 0;
    5688:	1e 00 78    	mov.w     [w14], w0
    568a:	80 40 eb    	clr.b     w1
    568c:	61 40 98    	mov.b     w1, [w0+6]

0000568e <.LSM10>:
    self->oc = oc;
    568e:	1e 00 78    	mov.w     [w14], w0
    5690:	ce 00 90    	mov.w     [w14+8], w1
    5692:	61 00 98    	mov.w     w1, [w0+12]

00005694 <.LSM11>:

    oc_pwm(self->oc, self->pins[0], &timer5, freq, 0);
    5694:	3e 00 90    	mov.w     [w14+6], w0
    5696:	80 00 eb    	clr.w     w1
    5698:	bc de 07    	rcall     0x1412 <___floatunsisf>
    569a:	1e 01 78    	mov.w     [w14], w2
    569c:	c2 03 90    	mov.w     [w2+8], w7
    569e:	1e 01 78    	mov.w     [w14], w2
    56a0:	62 03 90    	mov.w     [w2+12], w6
    56a2:	80 01 eb    	clr.w     w3
    56a4:	00 02 be    	mov.d     w0, w4
    56a6:	02 4b 22    	mov.w     #0x24b0, w2
    56a8:	87 00 78    	mov.w     w7, w1
    56aa:	06 00 78    	mov.w     w6, w0
    56ac:	9d f6 07    	rcall     0x43e8 <_oc_pwm>

000056ae <.LSM12>:
    OC5CON2 = 0x000F; //synchronize to timer5
    56ae:	f0 00 20    	mov.w     #0xf, w0
    56b0:	d0 0d 88    	mov.w     w0, 0x1ba

000056b2 <.LSM13>:
    OC7CON2 = 0x000F;
    56b2:	f0 00 20    	mov.w     #0xf, w0
    56b4:	70 0e 88    	mov.w     w0, 0x1ce

000056b6 <.LSM14>:
    pin_digitalOut(self->pins[1]);
    56b6:	1e 00 78    	mov.w     [w14], w0
    56b8:	50 00 90    	mov.w     [w0+10], w0
    56ba:	c4 f4 07    	rcall     0x4044 <_pin_digitalOut>

000056bc <.LSM15>:
    pin_clear(self->pins[1]);
    56bc:	1e 00 78    	mov.w     [w14], w0
    56be:	50 00 90    	mov.w     [w0+10], w0
    56c0:	33 f5 07    	rcall     0x4128 <_pin_clear>

000056c2 <.LSM16>:
}
    56c2:	00 80 fa    	ulnk      
    56c4:	00 00 06    	return    

000056c6 <_md_free>:

void md_free(_MD *self) {
    56c6:	02 00 fa    	lnk       #0x2
    56c8:	00 0f 78    	mov.w     w0, [w14]

000056ca <.LSM18>:
    // clear owned pins/oc's
}
    56ca:	00 80 fa    	ulnk      
    56cc:	00 00 06    	return    

000056ce <_md_brake>:

void md_brake(_MD *self) {
    56ce:	02 00 fa    	lnk       #0x2
    56d0:	00 0f 78    	mov.w     w0, [w14]

000056d2 <.LSM20>:
    self->braked = 1;
    56d2:	1e 00 78    	mov.w     [w14], w0
    56d4:	11 c0 b3    	mov.b     #0x1, w1
    56d6:	61 40 98    	mov.b     w1, [w0+6]

000056d8 <.LSM21>:
    pin_write(self->pins[0], 0);
    56d8:	1e 00 78    	mov.w     [w14], w0
    56da:	40 00 90    	mov.w     [w0+8], w0
    56dc:	80 00 eb    	clr.w     w1
    56de:	4f f5 07    	rcall     0x417e <_pin_write>

000056e0 <.LSM22>:
    pin_write(self->pins[1], 0);
    56e0:	1e 00 78    	mov.w     [w14], w0
    56e2:	50 00 90    	mov.w     [w0+10], w0
    56e4:	80 00 eb    	clr.w     w1
    56e6:	4b f5 07    	rcall     0x417e <_pin_write>

000056e8 <.LSM23>:
}
    56e8:	00 80 fa    	ulnk      
    56ea:	00 00 06    	return    

000056ec <_md_run>:

void md_run(_MD *self) {
    56ec:	02 00 fa    	lnk       #0x2
    56ee:	00 0f 78    	mov.w     w0, [w14]

000056f0 <.LSM25>:
    self->braked = 0;
    56f0:	1e 00 78    	mov.w     [w14], w0
    56f2:	80 40 eb    	clr.b     w1
    56f4:	61 40 98    	mov.b     w1, [w0+6]

000056f6 <.LSM26>:
    md_velocity(self, self->speed, self->dir);
    56f6:	1e 00 78    	mov.w     [w14], w0
    56f8:	90 40 78    	mov.b     [w0], w1
    56fa:	1e 00 78    	mov.w     [w14], w0
    56fc:	10 00 90    	mov.w     [w0+2], w0
    56fe:	01 41 78    	mov.b     w1, w2
    5700:	80 00 78    	mov.w     w0, w1
    5702:	1e 00 78    	mov.w     [w14], w0
    5704:	4c 00 07    	rcall     0x579e <_md_velocity>

00005706 <.LSM27>:
}
    5706:	00 80 fa    	ulnk      
    5708:	00 00 06    	return    

0000570a <_md_speed>:

void md_speed(_MD *self, uint16_t speed) {
    570a:	04 00 fa    	lnk       #0x4
    570c:	00 0f 78    	mov.w     w0, [w14]
    570e:	11 07 98    	mov.w     w1, [w14+2]

00005710 <.LSM29>:
    self->speed = speed;
    5710:	1e 00 78    	mov.w     [w14], w0
    5712:	9e 00 90    	mov.w     [w14+2], w1
    5714:	11 00 98    	mov.w     w1, [w0+2]

00005716 <.LSM30>:
    
    if (!self->braked) {
    5716:	1e 00 78    	mov.w     [w14], w0
    5718:	60 40 90    	mov.b     [w0+6], w0
    571a:	00 04 e0    	cp0.b     w0
    571c:	09 00 3a    	bra       NZ, 0x5730 <.L6>

0000571e <.LSM31>:
        pin_write(self->pins[self->dir], speed);
    571e:	1e 00 78    	mov.w     [w14], w0
    5720:	10 40 78    	mov.b     [w0], w0
    5722:	00 80 fb    	ze        w0, w0
    5724:	9e 00 78    	mov.w     [w14], w1
    5726:	64 00 40    	add.w     w0, #0x4, w0
    5728:	00 00 40    	add.w     w0, w0, w0
    572a:	61 00 78    	mov.w     [w1+w0], w0
    572c:	9e 00 90    	mov.w     [w14+2], w1
    572e:	27 f5 07    	rcall     0x417e <_pin_write>

00005730 <.L6>:
    }
}
    5730:	00 80 fa    	ulnk      
    5732:	00 00 06    	return    

00005734 <_md_direction>:

void md_direction(_MD *self, uint8_t dir) {
    5734:	04 00 fa    	lnk       #0x4
    5736:	88 1f 78    	mov.w     w8, [w15++]
    5738:	00 0f 78    	mov.w     w0, [w14]
    573a:	21 47 98    	mov.b     w1, [w14+2]

0000573c <.LSM34>:
    if (self->dir == dir) {
    573c:	1e 00 78    	mov.w     [w14], w0
    573e:	90 40 78    	mov.b     [w0], w1
    5740:	2e 40 90    	mov.b     [w14+2], w0
    5742:	80 cf 50    	sub.b     w1, w0, [w15]
    5744:	28 00 32    	bra       Z, 0x5796 <.L11>

00005746 <.LSM35>:
        return;
    }
    self->dir = dir;
    5746:	1e 00 78    	mov.w     [w14], w0
    5748:	ae 40 90    	mov.b     [w14+2], w1
    574a:	01 48 78    	mov.b     w1, [w0]

0000574c <.LSM36>:

    oc_free(self->oc);
    574c:	1e 00 78    	mov.w     [w14], w0
    574e:	60 00 90    	mov.w     [w0+12], w0
    5750:	0c f6 07    	rcall     0x436a <_oc_free>

00005752 <.LSM37>:
    oc_pwm(self->oc, self->pins[dir], &timer5, self->freq, self->speed);
    5752:	1e 00 78    	mov.w     [w14], w0
    5754:	10 04 90    	mov.w     [w0+2], w8
    5756:	1e 00 78    	mov.w     [w14], w0
    5758:	20 00 90    	mov.w     [w0+4], w0
    575a:	80 00 eb    	clr.w     w1
    575c:	5a de 07    	rcall     0x1412 <___floatunsisf>
    575e:	2e 41 90    	mov.b     [w14+2], w2
    5760:	02 81 fb    	ze        w2, w2
    5762:	9e 01 78    	mov.w     [w14], w3
    5764:	64 01 41    	add.w     w2, #0x4, w2
    5766:	02 01 41    	add.w     w2, w2, w2
    5768:	e3 03 79    	mov.w     [w3+w2], w7
    576a:	1e 01 78    	mov.w     [w14], w2
    576c:	62 03 90    	mov.w     [w2+12], w6
    576e:	88 01 78    	mov.w     w8, w3
    5770:	00 02 be    	mov.d     w0, w4
    5772:	02 4b 22    	mov.w     #0x24b0, w2
    5774:	87 00 78    	mov.w     w7, w1
    5776:	06 00 78    	mov.w     w6, w0
    5778:	37 f6 07    	rcall     0x43e8 <_oc_pwm>

0000577a <.LSM38>:
    OC5CON2 = 0x000F; //synchronize to timer5
    577a:	f0 00 20    	mov.w     #0xf, w0
    577c:	d0 0d 88    	mov.w     w0, 0x1ba

0000577e <.LSM39>:
    OC7CON2 = 0x000F;
    577e:	f0 00 20    	mov.w     #0xf, w0
    5780:	70 0e 88    	mov.w     w0, 0x1ce

00005782 <.LSM40>:
    pin_clear(self->pins[!dir]);
    5782:	2e 40 90    	mov.b     [w14+2], w0
    5784:	00 80 fb    	ze        w0, w0
    5786:	00 00 e9    	dec.w     w0, w0
    5788:	4f 00 de    	lsr.w     w0, #0xf, w0
    578a:	9e 00 78    	mov.w     [w14], w1
    578c:	64 00 40    	add.w     w0, #0x4, w0
    578e:	00 00 40    	add.w     w0, w0, w0
    5790:	61 00 78    	mov.w     [w1+w0], w0
    5792:	ca f4 07    	rcall     0x4128 <_pin_clear>
    5794:	01 00 37    	bra       0x5798 <.L8>

00005796 <.L11>:
    5796:	00 00 00    	nop       

00005798 <.L8>:
}
    5798:	4f 04 78    	mov.w     [--w15], w8
    579a:	00 80 fa    	ulnk      
    579c:	00 00 06    	return    

0000579e <_md_velocity>:

void md_velocity(_MD *self, uint16_t speed, uint8_t dir) {
    579e:	06 00 fa    	lnk       #0x6
    57a0:	00 0f 78    	mov.w     w0, [w14]
    57a2:	11 07 98    	mov.w     w1, [w14+2]
    57a4:	42 47 98    	mov.b     w2, [w14+4]

000057a6 <.LSM44>:
    md_speed(self, speed);
    57a6:	9e 00 90    	mov.w     [w14+2], w1
    57a8:	1e 00 78    	mov.w     [w14], w0
    57aa:	af ff 07    	rcall     0x570a <_md_speed>

000057ac <.LSM45>:
    md_direction(self, dir);
    57ac:	ce 40 90    	mov.b     [w14+4], w1
    57ae:	1e 00 78    	mov.w     [w14], w0
    57b0:	c1 ff 07    	rcall     0x5734 <_md_direction>

000057b2 <.LSM46>:
}    57b2:	00 80 fa    	ulnk      
    57b4:	00 00 06    	return    
Disassembly of section .isr:

000057b6 <__DefaultInterrupt>:
    57b6:	00 40 da    	.pword 0xda4000
    57b8:	00 00 fe    	reset     
