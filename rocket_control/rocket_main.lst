
rocket_main.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	8f 69 21    	mov.w     #0x1698, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	a0 e4 24    	mov.w     #0x4e4a, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	fa 4b 02    	call      0x4bfa <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	c0 07 20    	mov.w     #0x7c, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	ce 44 04    	goto      0x44ce <___digitalRead>
    11e4:	00 00 00 
    11e6:	8a 44 04    	goto      0x448a <___digitalWrite>
    11e8:	00 00 00 
    11ea:	f0 44 04    	goto      0x44f0 <___analogRead>
    11ec:	00 00 00 
    11ee:	2c 29 04    	goto      0x292c <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	6e 29 04    	goto      0x296e <___putc_buffer>
    11f4:	00 00 00 
    11f6:	50 29 04    	goto      0x2950 <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	66 2a 04    	goto      0x2a66 <___getc_buffer>
    11fc:	00 00 00 
    11fe:	22 1b 04    	goto      0x1b22 <_prout>
    1200:	00 00 00 
    1202:	86 25 04    	goto      0x2586 <_closeall>
    1204:	00 00 00 
    1206:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    1208:	00 00 00 

0000120a <_close>:
    120a:	0a 00 fa    	lnk       #0xa
    120c:	11 00 20    	mov.w     #0x1, w1
    120e:	b1 bf 9f    	mov.w     w1, [w15-10]
    1210:	c0 bf 9f    	mov.w     w0, [w15-8]
    1212:	6a 80 57    	sub.w     w15, #0xa, w0
    1214:	d4 09 07    	rcall     0x25be <_doclose>
    1216:	4f b8 97    	mov.w     [w15-8], w0
    1218:	00 80 fa    	ulnk      
    121a:	00 00 06    	return    

0000121c <_remove>:
    121c:	0a 00 fa    	lnk       #0xa
    121e:	51 00 20    	mov.w     #0x5, w1
    1220:	b1 bf 9f    	mov.w     w1, [w15-10]
    1222:	c0 bf 9f    	mov.w     w0, [w15-8]
    1224:	6a 80 57    	sub.w     w15, #0xa, w0
    1226:	cd 09 07    	rcall     0x25c2 <_doremove>
    1228:	5f b8 97    	mov.w     [w15-6], w0
    122a:	00 80 fa    	ulnk      
    122c:	00 00 06    	return    

0000122e <_sbrk>:
    122e:	88 9f be    	mov.d     w8, [w15++]
    1230:	80 04 78    	mov.w     w0, w9
    1232:	b0 b4 80    	mov.w     0x1696, w0
    1234:	00 00 e0    	cp0.w     w0
    1236:	04 00 3a    	bra       NZ, 0x1240 <.L2>
    1238:	0e 00 07    	rcall     0x1256 <_brk>
    123a:	00 84 eb    	setm.w    w8
    123c:	00 00 e0    	cp0.w     w0
    123e:	08 00 35    	bra       LT, 0x1250 <.L3>

00001240 <.L2>:
    1240:	b8 b4 80    	mov.w     0x1696, w8
    1242:	09 00 e0    	cp0.w     w9
    1244:	05 00 32    	bra       Z, 0x1250 <.L3>
    1246:	09 00 44    	add.w     w8, w9, w0
    1248:	06 00 07    	rcall     0x1256 <_brk>
    124a:	00 00 e0    	cp0.w     w0
    124c:	01 00 3d    	bra       GE, 0x1250 <.L3>
    124e:	00 84 eb    	setm.w    w8

00001250 <.L3>:
    1250:	08 00 78    	mov.w     w8, w0
    1252:	4f 04 be    	mov.d     [--w15], w8
    1254:	00 00 06    	return    

00001256 <_brk>:
    1256:	80 00 78    	mov.w     w0, w1
    1258:	01 00 e0    	cp0.w     w1
    125a:	03 00 3a    	bra       NZ, 0x1262 <.L2>
    125c:	00 00 20    	mov.w     #0x0, w0
    125e:	b0 b4 88    	mov.w     w0, 0x1696
    1260:	00 00 05    	retlw.w   #0x0, w0

00001262 <.L2>:
    1262:	00 80 eb    	setm.w    w0
    1264:	02 00 20    	mov.w     #0x0, w2
    1266:	82 8f 50    	sub.w     w1, w2, [w15]
    1268:	02 00 3e    	bra       GTU, 0x126e <.L3>
    126a:	b1 b4 88    	mov.w     w1, 0x1696
    126c:	00 00 eb    	clr.w     w0

0000126e <.L3>:
    126e:	00 00 06    	return    

00001270 <___subsf3>:
    1270:	03 f0 a2    	btg.w     w3, #0xf

00001272 <___addsf3>:
    1272:	88 9f be    	mov.d     w8, [w15++]
    1274:	8a 9f be    	mov.d     w10, [w15++]
    1276:	8c 1f 78    	mov.w     w12, [w15++]
    1278:	f7 00 07    	rcall     0x1468 <__funpack2>
    127a:	fe 00 33    	bra       N, 0x1478 <__fPropagateNaN>
    127c:	64 50 e1    	cp.w      w10, #0x4
    127e:	4f 00 32    	bra       Z, 0x131e <aisinfinite>

00001280 <checkspecialb>:
    1280:	64 20 e1    	cp.w      w4, #0x4
    1282:	52 00 32    	bra       Z, 0x1328 <return2>
    1284:	03 82 6c    	xor.w     w9, w3, w4
    1286:	07 00 3b    	bra       NN, 0x1296 <getsign>
    1288:	09 05 d0    	sl.w      w9, w10
    128a:	03 06 d0    	sl.w      w3, w12
    128c:	82 0f 54    	sub.w     w8, w2, [w15]
    128e:	0c 06 5d    	subb.w    w10, w12, w12
    1290:	02 00 39    	bra       NC, 0x1296 <getsign>
    1292:	02 00 32    	bra       Z, 0x1298 <gotsign>
    1294:	89 01 78    	mov.w     w9, w3

00001296 <getsign>:
    1296:	03 06 78    	mov.w     w3, w12

00001298 <gotsign>:
    1298:	85 82 55    	sub.w     w11, w5, w5
    129a:	04 00 3d    	bra       GE, 0x12a4 <expcanonical>
    129c:	00 03 fd    	exch      w0, w6
    129e:	81 03 fd    	exch      w1, w7
    12a0:	85 02 ea    	neg.w     w5, w5
    12a2:	8b 85 42    	add.w     w5, w11, w11

000012a4 <expcanonical>:
    12a4:	84 0f 72    	ior.w     w4, w4, [w15]
    12a6:	02 00 3b    	bra       NN, 0x12ac <nonegate>
    12a8:	60 00 10    	subr.w    w0, #0x0, w0
    12aa:	e0 80 18    	subbr.w   w1, #0x0, w1

000012ac <nonegate>:
    12ac:	60 11 b8    	mul.uu    w2, #0x0, w2
    12ae:	00 05 eb    	clr.w     w10
    12b0:	7a 28 e1    	cp.w      w5, #0x1a
    12b2:	0a 00 39    	bra       NC, 0x12c8 <aligniter>
    12b4:	06 00 78    	mov.w     w6, w0
    12b6:	c7 5d dd    	sl.w      w11, #0x7, w11
    12b8:	f7 07 b2    	and.w     #0x7f, w7
    12ba:	87 80 75    	ior.w     w11, w7, w1
    12bc:	2d 00 37    	bra       0x1318 <signoff>

000012be <align>:
    12be:	82 81 71    	ior.w     w3, w2, w3
    12c0:	0a 01 78    	mov.w     w10, w2
    12c2:	61 05 60    	and.w     w0, #0x1, w10
    12c4:	81 80 d1    	asr.w     w1, w1
    12c6:	00 80 d3    	rrc.w     w0, w0

000012c8 <aligniter>:
    12c8:	85 02 e9    	dec.w     w5, w5
    12ca:	f9 ff 3b    	bra       NN, 0x12be <align>

000012cc <aligned>:
    12cc:	06 04 40    	add.w     w0, w6, w8
    12ce:	87 84 48    	addc.w    w1, w7, w9
    12d0:	02 00 3b    	bra       NN, 0x12d6 <normalizesum>
    12d2:	60 04 14    	subr.w    w8, #0x0, w8
    12d4:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012d6 <normalizesum>:
    12d6:	09 88 a3    	btst.z    w9, #0x8
    12d8:	07 00 32    	bra       Z, 0x12e8 <checknormal>
    12da:	8a 81 71    	ior.w     w3, w10, w3
    12dc:	82 81 71    	ior.w     w3, w2, w3
    12de:	61 01 64    	and.w     w8, #0x1, w2
    12e0:	89 04 d1    	lsr.w     w9, w9
    12e2:	08 84 d3    	rrc.w     w8, w8
    12e4:	8b 05 e8    	inc.w     w11, w11
    12e6:	17 00 37    	bra       0x1316 <round>

000012e8 <checknormal>:
    12e8:	09 78 a3    	btst.z    w9, #0x7
    12ea:	13 00 3a    	bra       NZ, 0x1312 <discardguard>

000012ec <underflow>:
    12ec:	0b 00 e0    	cp0.w     w11
    12ee:	13 00 34    	bra       LE, 0x1316 <round>
    12f0:	8b 05 e9    	dec.w     w11, w11
    12f2:	08 04 44    	add.w     w8, w8, w8
    12f4:	89 84 4c    	addc.w    w9, w9, w9
    12f6:	0a 44 74    	ior.b     w8, w10, w8
    12f8:	09 78 a3    	btst.z    w9, #0x7
    12fa:	0d 00 3a    	bra       NZ, 0x1316 <round>

000012fc <normalizeloop>:
    12fc:	0b 00 e0    	cp0.w     w11
    12fe:	07 00 34    	bra       LE, 0x130e <normalizeexit>
    1300:	8b 05 e9    	dec.w     w11, w11
    1302:	08 04 44    	add.w     w8, w8, w8
    1304:	89 84 4c    	addc.w    w9, w9, w9
    1306:	01 00 3a    	bra       NZ, 0x130a <normalizetest>
    1308:	0b 00 20    	mov.w     #0x0, w11

0000130a <normalizetest>:
    130a:	09 78 a3    	btst.z    w9, #0x7
    130c:	f7 ff 32    	bra       Z, 0x12fc <normalizeloop>

0000130e <normalizeexit>:
    130e:	00 01 eb    	clr.w     w2
    1310:	02 00 37    	bra       0x1316 <round>

00001312 <discardguard>:
    1312:	82 81 71    	ior.w     w3, w2, w3
    1314:	0a 01 78    	mov.w     w10, w2

00001316 <round>:
    1316:	6d 00 07    	rcall     0x13f2 <__fpack>

00001318 <signoff>:
    1318:	0c f0 a7    	btsc.w    w12, #0xf
    131a:	01 f0 a0    	bset.w    w1, #0xf
    131c:	b6 00 37    	bra       0x148a <__fbopExit>

0000131e <aisinfinite>:
    131e:	64 20 e1    	cp.w      w4, #0x4
    1320:	02 00 3a    	bra       NZ, 0x1326 <return8>
    1322:	83 8f 6c    	xor.w     w9, w3, [w15]
    1324:	b6 00 33    	bra       N, 0x1492 <__fbopReturnNaN>

00001326 <return8>:
    1326:	08 01 be    	mov.d     w8, w2

00001328 <return2>:
    1328:	02 00 be    	mov.d     w2, w0
    132a:	af 00 37    	bra       0x148a <__fbopExit>

0000132c <___divsf3>:
    132c:	88 9f be    	mov.d     w8, [w15++]
    132e:	8a 9f be    	mov.d     w10, [w15++]
    1330:	8c 1f 78    	mov.w     w12, [w15++]
    1332:	9a 00 07    	rcall     0x1468 <__funpack2>
    1334:	a1 00 33    	bra       N, 0x1478 <__fPropagateNaN>
    1336:	03 86 6c    	xor.w     w9, w3, w12
    1338:	64 50 e1    	cp.w      w10, #0x4
    133a:	2e 00 32    	bra       Z, 0x1398 <aisinfinite>
    133c:	64 20 e1    	cp.w      w4, #0x4
    133e:	33 00 32    	bra       Z, 0x13a6 <returnZero>
    1340:	61 50 e1    	cp.w      w10, #0x1
    1342:	2f 00 32    	bra       Z, 0x13a2 <aiszero>
    1344:	61 20 e1    	cp.w      w4, #0x1
    1346:	31 00 32    	bra       Z, 0x13aa <returnInf>

00001348 <finitenonzero>:
    1348:	85 85 55    	sub.w     w11, w5, w11
    134a:	eb 07 b0    	add.w     #0x7e, w11
    134c:	09 00 20    	mov.w     #0x0, w9
    134e:	08 04 20    	mov.w     #0x40, w8
    1350:	05 00 37    	bra       0x135c <diventry>

00001352 <divnext>:
    1352:	08 04 44    	add.w     w8, w8, w8
    1354:	89 84 4c    	addc.w    w9, w9, w9
    1356:	0a 00 31    	bra       C, 0x136c <divdone>

00001358 <divloop>:
    1358:	06 03 43    	add.w     w6, w6, w6
    135a:	87 83 4b    	addc.w    w7, w7, w7

0000135c <diventry>:
    135c:	00 01 53    	sub.w     w6, w0, w2
    135e:	81 81 5b    	subb.w    w7, w1, w3
    1360:	f8 ff 33    	bra       N, 0x1352 <divnext>
    1362:	02 03 be    	mov.d     w2, w6
    1364:	08 00 a0    	bset.w    w8, #0x0
    1366:	08 04 44    	add.w     w8, w8, w8
    1368:	89 84 4c    	addc.w    w9, w9, w9
    136a:	f6 ff 39    	bra       NC, 0x1358 <divloop>

0000136c <divdone>:
    136c:	c6 39 dd    	sl.w      w7, #0x6, w3
    136e:	83 01 73    	ior.w     w6, w3, w3
    1370:	01 00 32    	bra       Z, 0x1374 <stickyok>
    1372:	13 00 20    	mov.w     #0x1, w3

00001374 <stickyok>:
    1374:	89 04 d1    	lsr.w     w9, w9
    1376:	08 84 d3    	rrc.w     w8, w8
    1378:	09 98 a3    	btst.z    w9, #0x9
    137a:	05 00 32    	bra       Z, 0x1386 <guardused>
    137c:	08 00 a7    	btsc.w    w8, #0x0
    137e:	03 00 a0    	bset.w    w3, #0x0
    1380:	89 04 d1    	lsr.w     w9, w9
    1382:	08 84 d3    	rrc.w     w8, w8
    1384:	8b 05 e8    	inc.w     w11, w11

00001386 <guardused>:
    1386:	89 04 d1    	lsr.w     w9, w9
    1388:	08 84 d3    	rrc.w     w8, w8
    138a:	00 01 eb    	clr.w     w2
    138c:	02 81 d2    	rlc.w     w2, w2
    138e:	31 00 07    	rcall     0x13f2 <__fpack>

00001390 <return0>:
    1390:	01 f0 a1    	bclr.w    w1, #0xf
    1392:	0c f0 a7    	btsc.w    w12, #0xf
    1394:	01 f0 a0    	bset.w    w1, #0xf
    1396:	79 00 37    	bra       0x148a <__fbopExit>

00001398 <aisinfinite>:
    1398:	64 20 e1    	cp.w      w4, #0x4
    139a:	7b 00 32    	bra       Z, 0x1492 <__fbopReturnNaN>

0000139c <return8>:
    139c:	08 01 be    	mov.d     w8, w2

0000139e <return2>:
    139e:	02 00 be    	mov.d     w2, w0
    13a0:	f7 ff 37    	bra       0x1390 <return0>

000013a2 <aiszero>:
    13a2:	61 20 e1    	cp.w      w4, #0x1
    13a4:	76 00 32    	bra       Z, 0x1492 <__fbopReturnNaN>

000013a6 <returnZero>:
    13a6:	60 00 b8    	mul.uu    w0, #0x0, w0
    13a8:	f3 ff 37    	bra       0x1390 <return0>

000013aa <returnInf>:
    13aa:	00 00 20    	mov.w     #0x0, w0
    13ac:	01 f8 27    	mov.w     #0x7f80, w1
    13ae:	f0 ff 37    	bra       0x1390 <return0>

000013b0 <___eqsf2>:
    13b0:	14 00 20    	mov.w     #0x1, w4
    13b2:	a6 00 37    	bra       0x1500 <__fcompare>

000013b4 <___gesf2>:
    13b4:	f4 ff 2f    	mov.w     #0xffff, w4
    13b6:	a4 00 37    	bra       0x1500 <__fcompare>

000013b8 <___fixunssfsi>:
    13b8:	00 01 be    	mov.d     w0, w2
    13ba:	41 00 07    	rcall     0x143e <__funpack>
    13bc:	04 70 a7    	btsc.w    w4, #0x7
    13be:	03 f0 a1    	bclr.w    w3, #0xf
    13c0:	03 f8 a3    	btst.z    w3, #0xf
    13c2:	13 00 3a    	bra       NZ, 0x13ea <returnzero>
    13c4:	65 09 b1    	sub.w     #0x96, w5
    13c6:	10 00 32    	bra       Z, 0x13e8 <exit>
    13c8:	09 00 35    	bra       LT, 0x13dc <shiftright>
    13ca:	69 28 e1    	cp.w      w5, #0x9
    13cc:	02 00 35    	bra       LT, 0x13d2 <shiftleft>
    13ce:	01 00 28    	mov.w     #0x8000, w1
    13d0:	00 00 05    	retlw.w   #0x0, w0

000013d2 <shiftleft>:
    13d2:	00 00 40    	add.w     w0, w0, w0
    13d4:	81 80 48    	addc.w    w1, w1, w1
    13d6:	85 02 e9    	dec.w     w5, w5
    13d8:	fc ff 3a    	bra       NZ, 0x13d2 <shiftleft>
    13da:	00 00 06    	return    

000013dc <shiftright>:
    13dc:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13de:	05 00 35    	bra       LT, 0x13ea <returnzero>

000013e0 <shiftrightloop>:
    13e0:	81 00 d1    	lsr.w     w1, w1
    13e2:	00 80 d3    	rrc.w     w0, w0
    13e4:	85 02 e8    	inc.w     w5, w5
    13e6:	fc ff 3a    	bra       NZ, 0x13e0 <shiftrightloop>

000013e8 <exit>:
    13e8:	00 00 06    	return    

000013ea <returnzero>:
    13ea:	80 00 eb    	clr.w     w1
    13ec:	00 00 05    	retlw.w   #0x0, w0

000013ee <___floatunsisf>:
    13ee:	60 11 b8    	mul.uu    w2, #0x0, w2
    13f0:	a2 00 37    	bra       0x1536 <___floatundisf>

000013f2 <__fpack>:
    13f2:	81 00 20    	mov.w     #0x8, w1
    13f4:	61 80 55    	sub.w     w11, #0x1, w0
    13f6:	0b 00 3d    	bra       GE, 0x140e <notsubnormal>
    13f8:	0b 00 20    	mov.w     #0x0, w11
    13fa:	61 fe 2f    	mov.w     #0xffe6, w1
    13fc:	01 00 e1    	cp.w      w0, w1
    13fe:	1d 00 34    	bra       LE, 0x143a <zerosig>

00001400 <subnormal>:
    1400:	82 81 71    	ior.w     w3, w2, w3
    1402:	61 01 64    	and.w     w8, #0x1, w2
    1404:	89 04 d1    	lsr.w     w9, w9
    1406:	08 84 d3    	rrc.w     w8, w8
    1408:	00 00 e8    	inc.w     w0, w0
    140a:	fa ff 3a    	bra       NZ, 0x1400 <subnormal>
    140c:	71 00 20    	mov.w     #0x7, w1

0000140e <notsubnormal>:
    140e:	61 00 64    	and.w     w8, #0x1, w0
    1410:	03 00 70    	ior.w     w0, w3, w0
    1412:	02 00 60    	and.w     w0, w2, w0
    1414:	09 00 32    	bra       Z, 0x1428 <packupandgo>
    1416:	61 04 44    	add.w     w8, #0x1, w8
    1418:	e0 84 4c    	addc.w    w9, #0x0, w9
    141a:	09 88 a5    	btst.z    w9, w1
    141c:	05 00 32    	bra       Z, 0x1428 <packupandgo>
    141e:	8b 05 e8    	inc.w     w11, w11
    1420:	68 08 e1    	cp.w      w1, #0x8
    1422:	02 00 3a    	bra       NZ, 0x1428 <packupandgo>
    1424:	89 04 d1    	lsr.w     w9, w9
    1426:	08 84 d3    	rrc.w     w8, w8

00001428 <packupandgo>:
    1428:	f2 0f 20    	mov.w     #0xff, w2
    142a:	02 58 e1    	cp.w      w11, w2
    142c:	05 00 3d    	bra       GE, 0x1438 <overflow>
    142e:	c7 5d dd    	sl.w      w11, #0x7, w11
    1430:	f9 07 b2    	and.w     #0x7f, w9
    1432:	89 80 75    	ior.w     w11, w9, w1
    1434:	08 00 78    	mov.w     w8, w0
    1436:	00 00 06    	return    

00001438 <overflow>:
    1438:	0b f8 27    	mov.w     #0x7f80, w11

0000143a <zerosig>:
    143a:	8b 00 78    	mov.w     w11, w1
    143c:	00 00 05    	retlw.w   #0x0, w0

0000143e <__funpack>:
    143e:	c7 0a de    	lsr.w     w1, #0x7, w5
    1440:	f1 07 b2    	and.w     #0x7f, w1
    1442:	f5 0f b2    	and.w     #0xff, w5
    1444:	08 00 32    	bra       Z, 0x1456 <zeroorsub>
    1446:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1448:	02 00 32    	bra       Z, 0x144e <nanorinf>

0000144a <finitereturn>:
    144a:	01 70 a0    	bset.w    w1, #0x7
    144c:	24 00 05    	retlw.w   #0x2, w4

0000144e <nanorinf>:
    144e:	81 0f 70    	ior.w     w0, w1, [w15]
    1450:	01 00 32    	bra       Z, 0x1454 <infinite>
    1452:	04 08 05    	retlw.w   #0x80, w4

00001454 <infinite>:
    1454:	44 00 05    	retlw.w   #0x4, w4

00001456 <zeroorsub>:
    1456:	81 0f 70    	ior.w     w0, w1, [w15]
    1458:	02 00 3a    	bra       NZ, 0x145e <subnormal>
    145a:	14 00 05    	retlw.w   #0x1, w4

0000145c <normalize>:
    145c:	85 02 e9    	dec.w     w5, w5

0000145e <subnormal>:
    145e:	00 00 40    	add.w     w0, w0, w0
    1460:	81 c0 48    	addc.b    w1, w1, w1
    1462:	fc ff 3b    	bra       NN, 0x145c <normalize>
    1464:	01 70 a0    	bset.w    w1, #0x7
    1466:	24 00 05    	retlw.w   #0x2, w4

00001468 <__funpack2>:
    1468:	00 04 be    	mov.d     w0, w8
    146a:	e9 ff 07    	rcall     0x143e <__funpack>
    146c:	00 03 be    	mov.d     w0, w6
    146e:	04 05 be    	mov.d     w4, w10
    1470:	02 00 be    	mov.d     w2, w0
    1472:	e5 ff 07    	rcall     0x143e <__funpack>
    1474:	84 4f 75    	ior.b     w10, w4, [w15]
    1476:	00 00 06    	return    

00001478 <__fPropagateNaN>:
    1478:	02 00 be    	mov.d     w2, w0
    147a:	64 50 e1    	cp.w      w10, #0x4
    147c:	05 00 36    	bra       LEU, 0x1488 <return0>
    147e:	64 20 e1    	cp.w      w4, #0x4
    1480:	02 00 36    	bra       LEU, 0x1486 <return8>
    1482:	09 68 a3    	btst.z    w9, #0x6
    1484:	01 00 3a    	bra       NZ, 0x1488 <return0>

00001486 <return8>:
    1486:	08 00 be    	mov.d     w8, w0

00001488 <return0>:
    1488:	01 60 a0    	bset.w    w1, #0x6

0000148a <__fbopExit>:
    148a:	4f 06 78    	mov.w     [--w15], w12
    148c:	4f 05 be    	mov.d     [--w15], w10
    148e:	4f 04 be    	mov.d     [--w15], w8
    1490:	00 00 06    	return    

00001492 <__fbopReturnNaN>:
    1492:	f0 ff 2f    	mov.w     #0xffff, w0
    1494:	f1 ff 27    	mov.w     #0x7fff, w1
    1496:	f9 ff 37    	bra       0x148a <__fbopExit>

00001498 <___mulsf3>:
    1498:	88 9f be    	mov.d     w8, [w15++]
    149a:	8a 9f be    	mov.d     w10, [w15++]
    149c:	8c 1f 78    	mov.w     w12, [w15++]
    149e:	e4 ff 07    	rcall     0x1468 <__funpack2>
    14a0:	eb ff 33    	bra       N, 0x1478 <__fPropagateNaN>
    14a2:	03 86 6c    	xor.w     w9, w3, w12
    14a4:	64 50 e1    	cp.w      w10, #0x4
    14a6:	24 00 32    	bra       Z, 0x14f0 <aisinfinite>
    14a8:	64 20 e1    	cp.w      w4, #0x4
    14aa:	27 00 32    	bra       Z, 0x14fa <bisinfinite>
    14ac:	61 50 e1    	cp.w      w10, #0x1
    14ae:	22 00 32    	bra       Z, 0x14f4 <return8>
    14b0:	61 20 e1    	cp.w      w4, #0x1
    14b2:	21 00 32    	bra       Z, 0x14f6 <return2>
    14b4:	8b 85 42    	add.w     w5, w11, w11
    14b6:	eb 07 b1    	sub.w     #0x7e, w11
    14b8:	01 34 b8    	mul.uu    w6, w1, w8
    14ba:	00 3a b8    	mul.uu    w7, w0, w4
    14bc:	08 04 42    	add.w     w4, w8, w8
    14be:	89 84 4a    	addc.w    w5, w9, w9
    14c0:	01 3a b8    	mul.uu    w7, w1, w4
    14c2:	00 30 b8    	mul.uu    w6, w0, w0
    14c4:	88 80 40    	add.w     w1, w8, w1
    14c6:	09 01 4a    	addc.w    w4, w9, w2
    14c8:	04 00 33    	bra       N, 0x14d2 <formsticky>
    14ca:	00 00 40    	add.w     w0, w0, w0
    14cc:	81 80 48    	addc.w    w1, w1, w1
    14ce:	02 01 49    	addc.w    w2, w2, w2
    14d0:	8b 05 e9    	dec.w     w11, w11

000014d2 <formsticky>:
    14d2:	c9 09 dd    	sl.w      w1, #0x9, w3
    14d4:	83 01 70    	ior.w     w0, w3, w3
    14d6:	01 00 32    	bra       Z, 0x14da <formRandSig>
    14d8:	13 00 20    	mov.w     #0x1, w3

000014da <formRandSig>:
    14da:	c8 14 de    	lsr.w     w2, #0x8, w9
    14dc:	48 14 dd    	sl.w      w2, #0x8, w8
    14de:	47 09 de    	lsr.w     w1, #0x7, w2
    14e0:	12 00 b2    	and.w     #0x1, w2
    14e2:	c8 08 de    	lsr.w     w1, #0x8, w1
    14e4:	08 84 70    	ior.w     w1, w8, w8
    14e6:	85 ff 07    	rcall     0x13f2 <__fpack>

000014e8 <return0>:
    14e8:	01 f0 a1    	bclr.w    w1, #0xf
    14ea:	0c f0 a7    	btsc.w    w12, #0xf
    14ec:	01 f0 a0    	bset.w    w1, #0xf
    14ee:	cd ff 37    	bra       0x148a <__fbopExit>

000014f0 <aisinfinite>:
    14f0:	61 20 e1    	cp.w      w4, #0x1
    14f2:	cf ff 32    	bra       Z, 0x1492 <__fbopReturnNaN>

000014f4 <return8>:
    14f4:	08 01 be    	mov.d     w8, w2

000014f6 <return2>:
    14f6:	02 00 be    	mov.d     w2, w0
    14f8:	f7 ff 37    	bra       0x14e8 <return0>

000014fa <bisinfinite>:
    14fa:	61 50 e1    	cp.w      w10, #0x1
    14fc:	fc ff 3a    	bra       NZ, 0x14f6 <return2>
    14fe:	c9 ff 37    	bra       0x1492 <__fbopReturnNaN>

00001500 <__fcompare>:
    1500:	88 9f be    	mov.d     w8, [w15++]
    1502:	8a 9f be    	mov.d     w10, [w15++]
    1504:	84 1f 78    	mov.w     w4, [w15++]
    1506:	b0 ff 07    	rcall     0x1468 <__funpack2>
    1508:	4f 00 78    	mov.w     [--w15], w0
    150a:	11 00 33    	bra       N, 0x152e <exit>
    150c:	f0 ff 2f    	mov.w     #0xffff, w0
    150e:	83 8f 6c    	xor.w     w9, w3, [w15]
    1510:	06 00 3b    	bra       NN, 0x151e <comparemag>
    1512:	04 05 65    	and.w     w10, w4, w10
    1514:	0a 00 a7    	btsc.w    w10, #0x0
    1516:	08 00 37    	bra       0x1528 <returnEqual>
    1518:	09 f0 a6    	btss.w    w9, #0xf
    151a:	10 00 20    	mov.w     #0x1, w0
    151c:	08 00 37    	bra       0x152e <exit>

0000151e <comparemag>:
    151e:	82 0f 54    	sub.w     w8, w2, [w15]
    1520:	83 8f 5c    	subb.w    w9, w3, [w15]
    1522:	03 00 39    	bra       NC, 0x152a <adjust>
    1524:	10 00 20    	mov.w     #0x1, w0
    1526:	01 00 3e    	bra       GTU, 0x152a <adjust>

00001528 <returnEqual>:
    1528:	00 00 20    	mov.w     #0x0, w0

0000152a <adjust>:
    152a:	09 f0 a7    	btsc.w    w9, #0xf
    152c:	00 00 ea    	neg.w     w0, w0

0000152e <exit>:
    152e:	4f 05 be    	mov.d     [--w15], w10
    1530:	4f 04 be    	mov.d     [--w15], w8
    1532:	00 00 e0    	cp0.w     w0
    1534:	00 00 06    	return    

00001536 <___floatundisf>:
    1536:	88 9f be    	mov.d     w8, [w15++]
    1538:	8a 9f be    	mov.d     w10, [w15++]
    153a:	00 82 70    	ior.w     w1, w0, w4
    153c:	04 02 71    	ior.w     w2, w4, w4
    153e:	04 82 71    	ior.w     w3, w4, w4
    1540:	26 00 32    	bra       Z, 0x158e <return0>
    1542:	00 04 be    	mov.d     w0, w8
    1544:	02 00 be    	mov.d     w2, w0
    1546:	60 11 b8    	mul.uu    w2, #0x0, w2
    1548:	6b 09 20    	mov.w     #0x96, w11
    154a:	95 02 20    	mov.w     #0x29, w5
    154c:	01 82 cf    	ff1l      w1, w4
    154e:	0a 00 39    	bra       NC, 0x1564 <fixshift>
    1550:	05 41 b1    	sub.b     #0x10, w5
    1552:	00 82 cf    	ff1l      w0, w4
    1554:	07 00 39    	bra       NC, 0x1564 <fixshift>
    1556:	05 41 b1    	sub.b     #0x10, w5
    1558:	09 82 cf    	ff1l      w9, w4
    155a:	04 00 39    	bra       NC, 0x1564 <fixshift>
    155c:	05 41 b1    	sub.b     #0x10, w5
    155e:	08 82 cf    	ff1l      w8, w4
    1560:	01 00 39    	bra       NC, 0x1564 <fixshift>
    1562:	05 41 b1    	sub.b     #0x10, w5

00001564 <fixshift>:
    1564:	05 42 52    	sub.b     w4, w5, w4
    1566:	12 00 32    	bra       Z, 0x158c <round>
    1568:	0a 00 3b    	bra       NN, 0x157e <shiftleft>

0000156a <shiftright>:
    156a:	82 81 71    	ior.w     w3, w2, w3
    156c:	61 01 64    	and.w     w8, #0x1, w2
    156e:	81 00 d1    	lsr.w     w1, w1
    1570:	00 80 d3    	rrc.w     w0, w0
    1572:	89 84 d3    	rrc.w     w9, w9
    1574:	08 84 d3    	rrc.w     w8, w8
    1576:	8b 05 e8    	inc.w     w11, w11
    1578:	04 42 e8    	inc.b     w4, w4
    157a:	f7 ff 3a    	bra       NZ, 0x156a <shiftright>
    157c:	07 00 37    	bra       0x158c <round>

0000157e <shiftleft>:
    157e:	08 04 44    	add.w     w8, w8, w8
    1580:	89 84 4c    	addc.w    w9, w9, w9
    1582:	00 00 48    	addc.w    w0, w0, w0
    1584:	81 80 48    	addc.w    w1, w1, w1
    1586:	8b 05 e9    	dec.w     w11, w11
    1588:	04 42 e9    	dec.b     w4, w4
    158a:	f9 ff 3a    	bra       NZ, 0x157e <shiftleft>

0000158c <round>:
    158c:	32 ff 07    	rcall     0x13f2 <__fpack>

0000158e <return0>:
    158e:	4f 05 be    	mov.d     [--w15], w10
    1590:	4f 04 be    	mov.d     [--w15], w8
    1592:	00 00 06    	return    

00001594 <_findmem>:
    1594:	88 9f be    	mov.d     w8, [w15++]
    1596:	00 04 78    	mov.w     w0, w8

00001598 <.L14>:
    1598:	d1 af 80    	mov.w     0x15fa, w1
    159a:	01 00 e0    	cp0.w     w1
    159c:	02 00 32    	bra       Z, 0x15a2 <.L2>
    159e:	01 00 78    	mov.w     w1, w0
    15a0:	0d 00 37    	bra       0x15bc <.L3>

000015a2 <.L2>:
    15a2:	e1 af 80    	mov.w     0x15fc, w1
    15a4:	c0 5f 21    	mov.w     #0x15fc, w0
    15a6:	04 00 37    	bra       0x15b0 <.L4>

000015a8 <.L6>:
    15a8:	91 0f 54    	sub.w     w8, [w1], [w15]
    15aa:	25 00 36    	bra       LEU, 0x15f6 <.L5>
    15ac:	01 80 e8    	inc2.w    w1, w0
    15ae:	91 00 90    	mov.w     [w1+2], w1

000015b0 <.L4>:
    15b0:	01 00 e0    	cp0.w     w1
    15b2:	fa ff 3a    	bra       NZ, 0x15a8 <.L6>
    15b4:	10 00 37    	bra       0x15d6 <.L7>

000015b6 <.L8>:
    15b6:	92 0f 54    	sub.w     w8, [w2], [w15]
    15b8:	1e 00 36    	bra       LEU, 0x15f6 <.L5>
    15ba:	02 80 e8    	inc2.w    w2, w0

000015bc <.L3>:
    15bc:	10 01 78    	mov.w     [w0], w2
    15be:	02 00 e0    	cp0.w     w2
    15c0:	fa ff 3a    	bra       NZ, 0x15b6 <.L8>
    15c2:	11 01 78    	mov.w     [w1], w2
    15c4:	e1 af 80    	mov.w     0x15fc, w1
    15c6:	c0 5f 21    	mov.w     #0x15fc, w0
    15c8:	04 00 37    	bra       0x15d2 <.L9>

000015ca <.L10>:
    15ca:	91 0f 54    	sub.w     w8, [w1], [w15]
    15cc:	14 00 36    	bra       LEU, 0x15f6 <.L5>
    15ce:	01 80 e8    	inc2.w    w1, w0
    15d0:	91 00 90    	mov.w     [w1+2], w1

000015d2 <.L9>:
    15d2:	82 8f 50    	sub.w     w1, w2, [w15]
    15d4:	fa ff 3a    	bra       NZ, 0x15ca <.L10>

000015d6 <.L7>:
    15d6:	f9 af 80    	mov.w     0x15fe, w9

000015d8 <.L13>:
    15d8:	88 8f 54    	sub.w     w9, w8, [w15]
    15da:	01 00 31    	bra       C, 0x15de <.L11>
    15dc:	88 04 78    	mov.w     w8, w9

000015de <.L11>:
    15de:	09 00 78    	mov.w     w9, w0
    15e0:	fb 00 07    	rcall     0x17d8 <__Getmem>
    15e2:	00 00 e0    	cp0.w     w0
    15e4:	04 00 3a    	bra       NZ, 0x15ee <.L12>
    15e6:	88 8f 54    	sub.w     w9, w8, [w15]
    15e8:	05 00 32    	bra       Z, 0x15f4 <.L15>
    15ea:	89 04 d1    	lsr.w     w9, w9
    15ec:	f5 ff 37    	bra       0x15d8 <.L13>

000015ee <.L12>:
    15ee:	09 18 78    	mov.w     w9, [w0++]
    15f0:	eb 04 07    	rcall     0x1fc8 <_free>
    15f2:	d2 ff 37    	bra       0x1598 <.L14>

000015f4 <.L15>:
    15f4:	00 00 eb    	clr.w     w0

000015f6 <.L5>:
    15f6:	4f 04 be    	mov.d     [--w15], w8
    15f8:	00 00 06    	return    

000015fa <_malloc>:
    15fa:	88 1f 78    	mov.w     w8, [w15++]
    15fc:	63 04 40    	add.w     w0, #0x3, w8
    15fe:	08 00 a1    	bclr.w    w8, #0x0
    1600:	80 00 eb    	clr.w     w1
    1602:	80 0f 54    	sub.w     w8, w0, [w15]
    1604:	21 00 36    	bra       LEU, 0x1648 <.L17>
    1606:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    1608:	01 00 3e    	bra       GTU, 0x160c <.L18>
    160a:	48 00 20    	mov.w     #0x4, w8

0000160c <.L18>:
    160c:	08 00 78    	mov.w     w8, w0
    160e:	c2 ff 07    	rcall     0x1594 <_findmem>
    1610:	80 00 eb    	clr.w     w1
    1612:	00 00 e0    	cp0.w     w0
    1614:	19 00 32    	bra       Z, 0x1648 <.L17>
    1616:	90 00 78    	mov.w     [w0], w1
    1618:	91 01 78    	mov.w     [w1], w3
    161a:	64 81 51    	sub.w     w3, #0x4, w2
    161c:	88 0f 51    	sub.w     w2, w8, [w15]
    161e:	03 00 31    	bra       C, 0x1626 <.L19>
    1620:	11 01 90    	mov.w     [w1+2], w2
    1622:	02 08 78    	mov.w     w2, [w0]
    1624:	07 00 37    	bra       0x1634 <.L20>

00001626 <.L19>:
    1626:	08 81 40    	add.w     w1, w8, w2
    1628:	02 08 78    	mov.w     w2, [w0]
    162a:	91 01 90    	mov.w     [w1+2], w3
    162c:	13 01 98    	mov.w     w3, [w2+2]
    162e:	10 01 78    	mov.w     [w0], w2
    1630:	11 09 14    	subr.w    w8, [w1], [w2]
    1632:	88 08 78    	mov.w     w8, [w1]

00001634 <.L20>:
    1634:	10 01 78    	mov.w     [w0], w2
    1636:	00 00 eb    	clr.w     w0
    1638:	02 00 e0    	cp0.w     w2
    163a:	04 00 32    	bra       Z, 0x1644 <.L21>
    163c:	92 01 90    	mov.w     [w2+2], w3
    163e:	03 00 e0    	cp0.w     w3
    1640:	01 00 32    	bra       Z, 0x1644 <.L21>
    1642:	02 80 e8    	inc2.w    w2, w0

00001644 <.L21>:
    1644:	d0 af 88    	mov.w     w0, 0x15fa
    1646:	81 80 e8    	inc2.w    w1, w1

00001648 <.L17>:
    1648:	01 00 78    	mov.w     w1, w0
    164a:	4f 04 78    	mov.w     [--w15], w8
    164c:	00 00 06    	return    

0000164e <_memcpy>:
    164e:	80 01 78    	mov.w     w0, w3
    1650:	02 00 37    	bra       0x1656 <.L2>

00001652 <.L3>:
    1652:	b1 59 78    	mov.b     [w1++], [w3++]
    1654:	02 01 e9    	dec.w     w2, w2

00001656 <.L2>:
    1656:	02 00 e0    	cp0.w     w2
    1658:	fc ff 3a    	bra       NZ, 0x1652 <.L3>
    165a:	00 00 06    	return    

0000165c <_puts>:
    165c:	01 3d 21    	mov.w     #0x13d0, w1
    165e:	6c 04 07    	rcall     0x1f38 <_fputs>
    1660:	80 00 78    	mov.w     w0, w1
    1662:	00 80 eb    	setm.w    w0
    1664:	01 00 e0    	cp0.w     w1
    1666:	04 00 35    	bra       LT, 0x1670 <.L2>
    1668:	01 3d 21    	mov.w     #0x13d0, w1
    166a:	a0 00 20    	mov.w     #0xa, w0
    166c:	34 02 07    	rcall     0x1ad6 <_fputc>
    166e:	4f 80 de    	asr.w     w0, #0xf, w0

00001670 <.L2>:
    1670:	00 00 06    	return    

00001672 <_strcmp>:
    1672:	02 00 37    	bra       0x1678 <.L2>

00001674 <.L4>:
    1674:	02 04 e0    	cp0.b     w2
    1676:	0b 00 32    	bra       Z, 0x168e <.L5>

00001678 <.L2>:
    1678:	81 01 78    	mov.w     w1, w3
    167a:	00 02 78    	mov.w     w0, w4
    167c:	30 41 78    	mov.b     [w0++], w2
    167e:	b1 4f 51    	sub.b     w2, [w1++], [w15]
    1680:	f9 ff 32    	bra       Z, 0x1674 <.L4>
    1682:	10 00 20    	mov.w     #0x1, w0
    1684:	14 42 78    	mov.b     [w4], w4
    1686:	93 4f 52    	sub.b     w4, [w3], [w15]
    1688:	03 00 31    	bra       C, 0x1690 <.L3>
    168a:	00 80 eb    	setm.w    w0
    168c:	00 00 06    	return    

0000168e <.L5>:
    168e:	00 00 eb    	clr.w     w0

00001690 <.L3>:
    1690:	00 00 06    	return    

00001692 <_strtol>:
    1692:	e4 87 47    	add.w     w15, #0x4, w15
    1694:	88 9f be    	mov.d     w8, [w15++]
    1696:	8a 9f be    	mov.d     w10, [w15++]
    1698:	8c 1f 78    	mov.w     w12, [w15++]
    169a:	8e 1f 78    	mov.w     w14, [w15++]
    169c:	00 05 78    	mov.w     w0, w10
    169e:	01 07 78    	mov.w     w1, w14
    16a0:	02 06 78    	mov.w     w2, w12
    16a2:	0e 00 e0    	cp0.w     w14
    16a4:	01 00 3a    	bra       NZ, 0x16a8 <.L2>
    16a6:	6e 87 57    	sub.w     w15, #0xe, w14

000016a8 <.L2>:
    16a8:	8a 05 78    	mov.w     w10, w11

000016aa <.L3>:
    16aa:	8b 04 78    	mov.w     w11, w9
    16ac:	89 05 78    	mov.w     w9, w11
    16ae:	3b 44 78    	mov.b     [w11++], w8
    16b0:	08 00 fb    	se        w8, w0
    16b2:	fc 01 07    	rcall     0x1aac <_isspace>
    16b4:	00 00 e0    	cp0.w     w0
    16b6:	f9 ff 3a    	bra       NZ, 0x16aa <.L3>
    16b8:	d0 c2 b3    	mov.b     #0x2d, w0
    16ba:	80 4f 54    	sub.b     w8, w0, [w15]
    16bc:	03 00 32    	bra       Z, 0x16c4 <.L4>
    16be:	00 c0 e9    	dec2.b    w0, w0
    16c0:	80 4f 54    	sub.b     w8, w0, [w15]
    16c2:	02 00 3a    	bra       NZ, 0x16c8 <.L14>

000016c4 <.L4>:
    16c4:	89 04 e8    	inc.w     w9, w9
    16c6:	01 00 37    	bra       0x16ca <.L5>

000016c8 <.L14>:
    16c8:	00 44 78    	mov.b     w0, w8

000016ca <.L5>:
    16ca:	0c 01 78    	mov.w     w12, w2
    16cc:	8e 00 78    	mov.w     w14, w1
    16ce:	09 00 78    	mov.w     w9, w0
    16d0:	8d 00 07    	rcall     0x17ec <__Stoul>
    16d2:	9e 8f 54    	sub.w     w9, [w14], [w15]
    16d4:	01 00 3a    	bra       NZ, 0x16d8 <.L6>
    16d6:	0a 0f 78    	mov.w     w10, [w14]

000016d8 <.L6>:
    16d8:	9e 0f 55    	sub.w     w10, [w14], [w15]
    16da:	03 00 3a    	bra       NZ, 0x16e2 <.L7>
    16dc:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    16de:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    16e0:	0f 00 3a    	bra       NZ, 0x1700 <.L8>

000016e2 <.L7>:
    16e2:	b2 c2 b3    	mov.b     #0x2b, w2
    16e4:	82 4f 54    	sub.b     w8, w2, [w15]
    16e6:	04 00 3a    	bra       NZ, 0x16f0 <.L9>
    16e8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    16ea:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    16ec:	15 00 3d    	bra       GE, 0x1718 <.L12>
    16ee:	08 00 37    	bra       0x1700 <.L8>

000016f0 <.L9>:
    16f0:	d2 c2 b3    	mov.b     #0x2d, w2
    16f2:	82 4f 54    	sub.b     w8, w2, [w15]
    16f4:	11 00 3a    	bra       NZ, 0x1718 <.L12>
    16f6:	02 00 20    	mov.w     #0x0, w2
    16f8:	03 00 28    	mov.w     #0x8000, w3
    16fa:	82 0f 50    	sub.w     w0, w2, [w15]
    16fc:	83 8f 58    	subb.w    w1, w3, [w15]
    16fe:	0a 00 36    	bra       LEU, 0x1714 <.L11>

00001700 <.L8>:
    1700:	20 02 20    	mov.w     #0x22, w0
    1702:	80 b4 88    	mov.w     w0, 0x1690
    1704:	f0 ff 2f    	mov.w     #0xffff, w0
    1706:	f1 ff 27    	mov.w     #0x7fff, w1
    1708:	d2 c2 b3    	mov.b     #0x2d, w2
    170a:	82 4f 54    	sub.b     w8, w2, [w15]
    170c:	05 00 3a    	bra       NZ, 0x1718 <.L12>
    170e:	00 00 20    	mov.w     #0x0, w0
    1710:	01 00 28    	mov.w     #0x8000, w1
    1712:	02 00 37    	bra       0x1718 <.L12>

00001714 <.L11>:
    1714:	60 00 10    	subr.w    w0, #0x0, w0
    1716:	e0 80 18    	subbr.w   w1, #0x0, w1

00001718 <.L12>:
    1718:	4f 07 78    	mov.w     [--w15], w14
    171a:	4f 06 78    	mov.w     [--w15], w12
    171c:	4f 05 be    	mov.d     [--w15], w10
    171e:	4f 04 be    	mov.d     [--w15], w8
    1720:	4f 00 b1    	sub.w     #0x4, w15
    1722:	00 00 06    	return    

00001724 <_strtoll>:
    1724:	e4 87 47    	add.w     w15, #0x4, w15
    1726:	88 9f be    	mov.d     w8, [w15++]
    1728:	8a 9f be    	mov.d     w10, [w15++]
    172a:	8c 1f 78    	mov.w     w12, [w15++]
    172c:	8e 1f 78    	mov.w     w14, [w15++]
    172e:	00 05 78    	mov.w     w0, w10
    1730:	01 07 78    	mov.w     w1, w14
    1732:	02 06 78    	mov.w     w2, w12
    1734:	0e 00 e0    	cp0.w     w14
    1736:	01 00 3a    	bra       NZ, 0x173a <.L2>
    1738:	6e 87 57    	sub.w     w15, #0xe, w14

0000173a <.L2>:
    173a:	8a 05 78    	mov.w     w10, w11

0000173c <.L3>:
    173c:	8b 04 78    	mov.w     w11, w9
    173e:	89 05 78    	mov.w     w9, w11
    1740:	3b 44 78    	mov.b     [w11++], w8
    1742:	08 00 fb    	se        w8, w0
    1744:	b3 01 07    	rcall     0x1aac <_isspace>
    1746:	00 00 e0    	cp0.w     w0
    1748:	f9 ff 3a    	bra       NZ, 0x173c <.L3>
    174a:	d0 c2 b3    	mov.b     #0x2d, w0
    174c:	80 4f 54    	sub.b     w8, w0, [w15]
    174e:	03 00 32    	bra       Z, 0x1756 <.L4>
    1750:	00 c0 e9    	dec2.b    w0, w0
    1752:	80 4f 54    	sub.b     w8, w0, [w15]
    1754:	02 00 3a    	bra       NZ, 0x175a <.L14>

00001756 <.L4>:
    1756:	89 04 e8    	inc.w     w9, w9
    1758:	01 00 37    	bra       0x175c <.L5>

0000175a <.L14>:
    175a:	00 44 78    	mov.b     w0, w8

0000175c <.L5>:
    175c:	0c 01 78    	mov.w     w12, w2
    175e:	8e 00 78    	mov.w     w14, w1
    1760:	09 00 78    	mov.w     w9, w0
    1762:	de 00 07    	rcall     0x1920 <__Stoull>
    1764:	9e 8f 54    	sub.w     w9, [w14], [w15]
    1766:	01 00 3a    	bra       NZ, 0x176a <.L6>
    1768:	0a 0f 78    	mov.w     w10, [w14]

0000176a <.L6>:
    176a:	9e 0f 55    	sub.w     w10, [w14], [w15]
    176c:	05 00 3a    	bra       NZ, 0x1778 <.L7>
    176e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1770:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1772:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1774:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1776:	17 00 3a    	bra       NZ, 0x17a6 <.L8>

00001778 <.L7>:
    1778:	b4 c2 b3    	mov.b     #0x2b, w4
    177a:	84 4f 54    	sub.b     w8, w4, [w15]
    177c:	09 00 3a    	bra       NZ, 0x1790 <.L9>
    177e:	f4 ff 2f    	mov.w     #0xffff, w4
    1780:	f5 ff 27    	mov.w     #0x7fff, w5
    1782:	60 33 b8    	mul.uu    w6, #0x0, w6
    1784:	04 00 e1    	cp.w      w0, w4
    1786:	05 88 e1    	cpb.w     w1, w5
    1788:	06 90 e1    	cpb.w     w2, w6
    178a:	07 98 e1    	cpb.w     w3, w7
    178c:	0c 00 3e    	bra       GTU, 0x17a6 <.L8>
    178e:	1e 00 37    	bra       0x17cc <.L12>

00001790 <.L9>:
    1790:	d4 c2 b3    	mov.b     #0x2d, w4
    1792:	84 4f 54    	sub.b     w8, w4, [w15]
    1794:	1b 00 3a    	bra       NZ, 0x17cc <.L12>
    1796:	04 00 20    	mov.w     #0x0, w4
    1798:	05 00 28    	mov.w     #0x8000, w5
    179a:	60 33 b8    	mul.uu    w6, #0x0, w6
    179c:	04 00 e1    	cp.w      w0, w4
    179e:	05 88 e1    	cpb.w     w1, w5
    17a0:	06 90 e1    	cpb.w     w2, w6
    17a2:	07 98 e1    	cpb.w     w3, w7
    17a4:	0d 00 36    	bra       LEU, 0x17c0 <.L11>

000017a6 <.L8>:
    17a6:	20 02 20    	mov.w     #0x22, w0
    17a8:	80 b4 88    	mov.w     w0, 0x1690
    17aa:	f0 ff 2f    	mov.w     #0xffff, w0
    17ac:	f1 ff 27    	mov.w     #0x7fff, w1
    17ae:	60 11 b8    	mul.uu    w2, #0x0, w2
    17b0:	d4 c2 b3    	mov.b     #0x2d, w4
    17b2:	84 4f 54    	sub.b     w8, w4, [w15]
    17b4:	0b 00 3a    	bra       NZ, 0x17cc <.L12>
    17b6:	00 00 20    	mov.w     #0x0, w0
    17b8:	01 00 28    	mov.w     #0x8000, w1
    17ba:	f2 ff 2f    	mov.w     #0xffff, w2
    17bc:	f3 ff 2f    	mov.w     #0xffff, w3
    17be:	06 00 37    	bra       0x17cc <.L12>

000017c0 <.L11>:
    17c0:	60 22 b8    	mul.uu    w4, #0x0, w4
    17c2:	60 33 b8    	mul.uu    w6, #0x0, w6
    17c4:	00 00 52    	sub.w     w4, w0, w0
    17c6:	81 80 5a    	subb.w    w5, w1, w1
    17c8:	02 01 5b    	subb.w    w6, w2, w2
    17ca:	83 81 5b    	subb.w    w7, w3, w3

000017cc <.L12>:
    17cc:	4f 07 78    	mov.w     [--w15], w14
    17ce:	4f 06 78    	mov.w     [--w15], w12
    17d0:	4f 05 be    	mov.d     [--w15], w10
    17d2:	4f 04 be    	mov.d     [--w15], w8
    17d4:	4f 00 b1    	sub.w     #0x4, w15
    17d6:	00 00 06    	return    

000017d8 <__Getmem>:
    17d8:	80 00 78    	mov.w     w0, w1
    17da:	00 00 eb    	clr.w     w0
    17dc:	01 00 e0    	cp0.w     w1
    17de:	05 00 34    	bra       LE, 0x17ea <.L2>
    17e0:	01 00 78    	mov.w     w1, w0
    17e2:	25 fd 07    	rcall     0x122e <_sbrk>
    17e4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    17e6:	01 00 3a    	bra       NZ, 0x17ea <.L2>
    17e8:	00 00 eb    	clr.w     w0

000017ea <.L2>:
    17ea:	00 00 06    	return    

000017ec <__Stoul>:
    17ec:	ee 87 47    	add.w     w15, #0xe, w15
    17ee:	88 9f be    	mov.d     w8, [w15++]
    17f0:	8a 9f be    	mov.d     w10, [w15++]
    17f2:	8c 9f be    	mov.d     w12, [w15++]
    17f4:	8e 1f 78    	mov.w     w14, [w15++]
    17f6:	f0 b7 9f    	mov.w     w0, [w15-18]
    17f8:	01 06 78    	mov.w     w1, w12
    17fa:	82 05 78    	mov.w     w2, w11
    17fc:	00 04 78    	mov.w     w0, w8

000017fe <.L2>:
    17fe:	08 05 78    	mov.w     w8, w10
    1800:	0a 04 78    	mov.w     w10, w8
    1802:	b8 46 78    	mov.b     [w8++], w13
    1804:	0d 00 fb    	se        w13, w0
    1806:	52 01 07    	rcall     0x1aac <_isspace>
    1808:	00 00 e0    	cp0.w     w0
    180a:	f9 ff 3a    	bra       NZ, 0x17fe <.L2>
    180c:	d0 c2 b3    	mov.b     #0x2d, w0
    180e:	80 cf 56    	sub.b     w13, w0, [w15]
    1810:	03 00 32    	bra       Z, 0x1818 <.L3>
    1812:	00 c0 e9    	dec2.b    w0, w0
    1814:	80 cf 56    	sub.b     w13, w0, [w15]
    1816:	02 00 3a    	bra       NZ, 0x181c <.L19>

00001818 <.L3>:
    1818:	0a 05 e8    	inc.w     w10, w10
    181a:	01 00 37    	bra       0x181e <.L4>

0000181c <.L19>:
    181c:	80 46 78    	mov.b     w0, w13

0000181e <.L4>:
    181e:	0b 00 e0    	cp0.w     w11
    1820:	05 00 35    	bra       LT, 0x182c <.L5>
    1822:	e1 8f 55    	sub.w     w11, #0x1, [w15]
    1824:	03 00 32    	bra       Z, 0x182c <.L5>
    1826:	40 02 20    	mov.w     #0x24, w0
    1828:	80 8f 55    	sub.w     w11, w0, [w15]
    182a:	06 00 34    	bra       LE, 0x1838 <.L6>

0000182c <.L5>:
    182c:	60 44 b8    	mul.uu    w8, #0x0, w8
    182e:	0c 00 e0    	cp0.w     w12
    1830:	70 00 32    	bra       Z, 0x1912 <.L7>
    1832:	7f b0 97    	mov.w     [w15-18], w0
    1834:	00 0e 78    	mov.w     w0, [w12]
    1836:	6d 00 37    	bra       0x1912 <.L7>

00001838 <.L6>:
    1838:	0b 00 e0    	cp0.w     w11
    183a:	0e 00 32    	bra       Z, 0x1858 <.L8>
    183c:	f0 8f 55    	sub.w     w11, #0x10, [w15]
    183e:	1a 00 3a    	bra       NZ, 0x1874 <.L9>
    1840:	00 c3 b3    	mov.b     #0x30, w0
    1842:	9a 4f 10    	subr.b    w0, [w10], [w15]
    1844:	17 00 3a    	bra       NZ, 0x1874 <.L9>
    1846:	1a 40 90    	mov.b     [w10+1], w0
    1848:	81 c7 b3    	mov.b     #0x78, w1
    184a:	81 4f 50    	sub.b     w0, w1, [w15]
    184c:	03 00 32    	bra       Z, 0x1854 <.L10>
    184e:	81 c5 b3    	mov.b     #0x58, w1
    1850:	81 4f 50    	sub.b     w0, w1, [w15]
    1852:	10 00 3a    	bra       NZ, 0x1874 <.L9>

00001854 <.L10>:
    1854:	0a 85 e8    	inc2.w    w10, w10
    1856:	0e 00 37    	bra       0x1874 <.L9>

00001858 <.L8>:
    1858:	ab 00 20    	mov.w     #0xa, w11
    185a:	00 c3 b3    	mov.b     #0x30, w0
    185c:	9a 4f 10    	subr.b    w0, [w10], [w15]
    185e:	0a 00 3a    	bra       NZ, 0x1874 <.L9>
    1860:	1a 40 90    	mov.b     [w10+1], w0
    1862:	81 c7 b3    	mov.b     #0x78, w1
    1864:	81 4f 50    	sub.b     w0, w1, [w15]
    1866:	04 00 32    	bra       Z, 0x1870 <.L11>
    1868:	8b 00 20    	mov.w     #0x8, w11
    186a:	81 c5 b3    	mov.b     #0x58, w1
    186c:	81 4f 50    	sub.b     w0, w1, [w15]
    186e:	02 00 3a    	bra       NZ, 0x1874 <.L9>

00001870 <.L11>:
    1870:	0a 85 e8    	inc2.w    w10, w10
    1872:	0b 01 20    	mov.w     #0x10, w11

00001874 <.L9>:
    1874:	0a 00 78    	mov.w     w10, w0

00001876 <.L12>:
    1876:	00 02 78    	mov.w     w0, w4
    1878:	04 00 78    	mov.w     w4, w0
    187a:	01 c3 b3    	mov.b     #0x30, w1
    187c:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    187e:	fb ff 32    	bra       Z, 0x1876 <.L12>
    1880:	04 07 78    	mov.w     w4, w14
    1882:	60 44 b8    	mul.uu    w8, #0x0, w8
    1884:	b4 b7 9f    	mov.w     w4, [w15-26]
    1886:	0d 00 37    	bra       0x18a2 <.L13>

00001888 <.L14>:
    1888:	a1 52 21    	mov.w     #0x152a, w1
    188a:	81 40 50    	sub.b     w0, w1, w1
    188c:	c1 ef 9f    	mov.b     w1, [w15-20]
    188e:	61 59 b9    	mul.su    w11, #0x1, w2
    1890:	08 00 be    	mov.d     w8, w0
    1892:	bb 06 07    	rcall     0x260a <___mulp32eds3>
    1894:	4f ea 97    	mov.b     [w15-20], w4
    1896:	04 01 fb    	se        w4, w2
    1898:	cf 91 de    	asr.w     w2, #0xf, w3
    189a:	c8 b7 9f    	mov.w     w8, [w15-24]
    189c:	d9 b7 9f    	mov.w     w9, [w15-22]
    189e:	02 04 40    	add.w     w0, w2, w8
    18a0:	83 84 48    	addc.w    w1, w3, w9

000018a2 <.L13>:
    18a2:	8e 02 78    	mov.w     w14, w5
    18a4:	3e 00 fb    	se        [w14++], w0
    18a6:	85 bf 9f    	mov.w     w5, [w15-16]
    18a8:	09 01 07    	rcall     0x1abc <_tolower>
    18aa:	0b 01 78    	mov.w     w11, w2
    18ac:	80 00 78    	mov.w     w0, w1
    18ae:	a0 52 21    	mov.w     #0x152a, w0
    18b0:	bd 03 07    	rcall     0x202c <_memchr>
    18b2:	8f ba 97    	mov.w     [w15-16], w5
    18b4:	00 00 e0    	cp0.w     w0
    18b6:	e8 ff 3a    	bra       NZ, 0x1888 <.L14>
    18b8:	3f b2 97    	mov.w     [w15-26], w4
    18ba:	85 0f 55    	sub.w     w10, w5, [w15]
    18bc:	05 00 3a    	bra       NZ, 0x18c8 <.L15>
    18be:	60 44 b8    	mul.uu    w8, #0x0, w8
    18c0:	0c 00 e0    	cp0.w     w12
    18c2:	27 00 32    	bra       Z, 0x1912 <.L7>
    18c4:	ff b2 97    	mov.w     [w15-18], w5
    18c6:	24 00 37    	bra       0x1910 <.L24>

000018c8 <.L15>:
    18c8:	04 82 52    	sub.w     w5, w4, w4
    18ca:	f0 54 21    	mov.w     #0x154f, w0
    18cc:	60 c0 7d    	mov.b     [w0+w11], w0
    18ce:	00 00 fb    	se        w0, w0
    18d0:	00 02 52    	sub.w     w4, w0, w4
    18d2:	17 00 33    	bra       N, 0x1902 <.L16>
    18d4:	11 00 3a    	bra       NZ, 0x18f8 <.L17>
    18d6:	4f e9 97    	mov.b     [w15-20], w2
    18d8:	02 00 fb    	se        w2, w0
    18da:	cf 80 de    	asr.w     w0, #0xf, w1
    18dc:	00 00 54    	sub.w     w8, w0, w0
    18de:	81 80 5c    	subb.w    w9, w1, w1
    18e0:	80 0f 54    	sub.w     w8, w0, [w15]
    18e2:	81 8f 5c    	subb.w    w9, w1, [w15]
    18e4:	09 00 39    	bra       NC, 0x18f8 <.L17>
    18e6:	61 59 b9    	mul.su    w11, #0x1, w2
    18e8:	85 bf 9f    	mov.w     w5, [w15-16]
    18ea:	7c 06 07    	rcall     0x25e4 <___udivsi3>
    18ec:	8f ba 97    	mov.w     [w15-16], w5
    18ee:	4f b1 97    	mov.w     [w15-24], w2
    18f0:	df b1 97    	mov.w     [w15-22], w3
    18f2:	82 0f 50    	sub.w     w0, w2, [w15]
    18f4:	83 8f 58    	subb.w    w1, w3, [w15]
    18f6:	05 00 32    	bra       Z, 0x1902 <.L16>

000018f8 <.L17>:
    18f8:	20 02 20    	mov.w     #0x22, w0
    18fa:	80 b4 88    	mov.w     w0, 0x1690
    18fc:	00 84 eb    	setm.w    w8
    18fe:	80 84 eb    	setm.w    w9
    1900:	05 00 37    	bra       0x190c <.L18>

00001902 <.L16>:
    1902:	d0 c2 b3    	mov.b     #0x2d, w0
    1904:	80 cf 56    	sub.b     w13, w0, [w15]
    1906:	02 00 3a    	bra       NZ, 0x190c <.L18>
    1908:	60 04 14    	subr.w    w8, #0x0, w8
    190a:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000190c <.L18>:
    190c:	0c 00 e0    	cp0.w     w12
    190e:	01 00 32    	bra       Z, 0x1912 <.L7>

00001910 <.L24>:
    1910:	05 0e 78    	mov.w     w5, [w12]

00001912 <.L7>:
    1912:	08 00 be    	mov.d     w8, w0
    1914:	4f 07 78    	mov.w     [--w15], w14
    1916:	4f 06 be    	mov.d     [--w15], w12
    1918:	4f 05 be    	mov.d     [--w15], w10
    191a:	4f 04 be    	mov.d     [--w15], w8
    191c:	ef 00 b1    	sub.w     #0xe, w15
    191e:	00 00 06    	return    

00001920 <__Stoull>:
    1920:	0f 02 b0    	add.w     #0x20, w15
    1922:	88 9f be    	mov.d     w8, [w15++]
    1924:	8a 9f be    	mov.d     w10, [w15++]
    1926:	8c 9f be    	mov.d     w12, [w15++]
    1928:	8e 1f 78    	mov.w     w14, [w15++]
    192a:	80 b7 9f    	mov.w     w0, [w15-32]
    192c:	01 07 78    	mov.w     w1, w14
    192e:	82 06 78    	mov.w     w2, w13
    1930:	00 04 78    	mov.w     w0, w8

00001932 <.L2>:
    1932:	08 06 78    	mov.w     w8, w12
    1934:	0c 04 78    	mov.w     w12, w8
    1936:	38 40 78    	mov.b     [w8++], w0
    1938:	e0 e7 9f    	mov.b     w0, [w15-26]
    193a:	80 40 78    	mov.b     w0, w1
    193c:	01 00 fb    	se        w1, w0
    193e:	b6 00 07    	rcall     0x1aac <_isspace>
    1940:	00 00 e0    	cp0.w     w0
    1942:	f7 ff 3a    	bra       NZ, 0x1932 <.L2>
    1944:	d0 c2 b3    	mov.b     #0x2d, w0
    1946:	6f e1 97    	mov.b     [w15-26], w2
    1948:	80 4f 51    	sub.b     w2, w0, [w15]
    194a:	03 00 32    	bra       Z, 0x1952 <.L3>
    194c:	00 c0 e9    	dec2.b    w0, w0
    194e:	80 4f 51    	sub.b     w2, w0, [w15]
    1950:	02 00 3a    	bra       NZ, 0x1956 <.L19>

00001952 <.L3>:
    1952:	0c 06 e8    	inc.w     w12, w12
    1954:	01 00 37    	bra       0x1958 <.L4>

00001956 <.L19>:
    1956:	e0 e7 9f    	mov.b     w0, [w15-26]

00001958 <.L4>:
    1958:	0d 00 e0    	cp0.w     w13
    195a:	05 00 35    	bra       LT, 0x1966 <.L5>
    195c:	e1 8f 56    	sub.w     w13, #0x1, [w15]
    195e:	03 00 32    	bra       Z, 0x1966 <.L5>
    1960:	40 02 20    	mov.w     #0x24, w0
    1962:	80 8f 56    	sub.w     w13, w0, [w15]
    1964:	07 00 34    	bra       LE, 0x1974 <.L6>

00001966 <.L5>:
    1966:	60 44 b8    	mul.uu    w8, #0x0, w8
    1968:	60 55 b8    	mul.uu    w10, #0x0, w10
    196a:	0e 00 e0    	cp0.w     w14
    196c:	97 00 32    	bra       Z, 0x1a9c <.L7>
    196e:	0f b2 97    	mov.w     [w15-32], w4
    1970:	04 0f 78    	mov.w     w4, [w14]
    1972:	94 00 37    	bra       0x1a9c <.L7>

00001974 <.L6>:
    1974:	0d 00 e0    	cp0.w     w13
    1976:	0e 00 32    	bra       Z, 0x1994 <.L8>
    1978:	f0 8f 56    	sub.w     w13, #0x10, [w15]
    197a:	1a 00 3a    	bra       NZ, 0x19b0 <.L9>
    197c:	00 c3 b3    	mov.b     #0x30, w0
    197e:	9c 4f 10    	subr.b    w0, [w12], [w15]
    1980:	17 00 3a    	bra       NZ, 0x19b0 <.L9>
    1982:	1c 40 90    	mov.b     [w12+1], w0
    1984:	81 c7 b3    	mov.b     #0x78, w1
    1986:	81 4f 50    	sub.b     w0, w1, [w15]
    1988:	03 00 32    	bra       Z, 0x1990 <.L10>
    198a:	81 c5 b3    	mov.b     #0x58, w1
    198c:	81 4f 50    	sub.b     w0, w1, [w15]
    198e:	10 00 3a    	bra       NZ, 0x19b0 <.L9>

00001990 <.L10>:
    1990:	0c 86 e8    	inc2.w    w12, w12
    1992:	0e 00 37    	bra       0x19b0 <.L9>

00001994 <.L8>:
    1994:	ad 00 20    	mov.w     #0xa, w13
    1996:	00 c3 b3    	mov.b     #0x30, w0
    1998:	9c 4f 10    	subr.b    w0, [w12], [w15]
    199a:	0a 00 3a    	bra       NZ, 0x19b0 <.L9>
    199c:	1c 40 90    	mov.b     [w12+1], w0
    199e:	81 c7 b3    	mov.b     #0x78, w1
    19a0:	81 4f 50    	sub.b     w0, w1, [w15]
    19a2:	04 00 32    	bra       Z, 0x19ac <.L11>
    19a4:	8d 00 20    	mov.w     #0x8, w13
    19a6:	81 c5 b3    	mov.b     #0x58, w1
    19a8:	81 4f 50    	sub.b     w0, w1, [w15]
    19aa:	02 00 3a    	bra       NZ, 0x19b0 <.L9>

000019ac <.L11>:
    19ac:	0c 86 e8    	inc2.w    w12, w12
    19ae:	0d 01 20    	mov.w     #0x10, w13

000019b0 <.L9>:
    19b0:	0c 00 78    	mov.w     w12, w0

000019b2 <.L12>:
    19b2:	80 00 78    	mov.w     w0, w1
    19b4:	01 00 78    	mov.w     w1, w0
    19b6:	02 c3 b3    	mov.b     #0x30, w2
    19b8:	b0 4f 11    	subr.b    w2, [w0++], [w15]
    19ba:	fb ff 32    	bra       Z, 0x19b2 <.L12>
    19bc:	e1 af 9f    	mov.w     w1, [w15-36]
    19be:	81 02 78    	mov.w     w1, w5
    19c0:	95 b7 9f    	mov.w     w5, [w15-30]
    19c2:	60 44 b8    	mul.uu    w8, #0x0, w8
    19c4:	60 55 b8    	mul.uu    w10, #0x0, w10
    19c6:	8c bf 9f    	mov.w     w12, [w15-16]
    19c8:	1c 00 37    	bra       0x1a02 <.L13>

000019ca <.L14>:
    19ca:	41 57 21    	mov.w     #0x1574, w1
    19cc:	81 40 50    	sub.b     w0, w1, w1
    19ce:	e1 df 9f    	mov.b     w1, [w15-34]
    19d0:	61 6a b9    	mul.su    w13, #0x1, w4
    19d2:	61 2b b9    	mul.su    w5, #0x1, w6
    19d4:	08 00 be    	mov.d     w8, w0
    19d6:	0a 01 be    	mov.d     w10, w2
    19d8:	20 07 07    	rcall     0x281a <___muldi3>
    19da:	ef da 97    	mov.b     [w15-34], w5
    19dc:	05 02 fb    	se        w5, w4
    19de:	cf a2 de    	asr.w     w4, #0xf, w5
    19e0:	61 2b b9    	mul.su    w5, #0x1, w6
    19e2:	c4 b7 9f    	mov.w     w4, [w15-24]
    19e4:	d5 b7 9f    	mov.w     w5, [w15-22]
    19e6:	e6 b7 9f    	mov.w     w6, [w15-20]
    19e8:	f7 b7 9f    	mov.w     w7, [w15-18]
    19ea:	a8 af 9f    	mov.w     w8, [w15-44]
    19ec:	b9 af 9f    	mov.w     w9, [w15-42]
    19ee:	ca af 9f    	mov.w     w10, [w15-40]
    19f0:	db af 9f    	mov.w     w11, [w15-38]
    19f2:	4f b2 97    	mov.w     [w15-24], w4
    19f4:	df b2 97    	mov.w     [w15-22], w5
    19f6:	6f b3 97    	mov.w     [w15-20], w6
    19f8:	ff b3 97    	mov.w     [w15-18], w7
    19fa:	00 04 42    	add.w     w4, w0, w8
    19fc:	81 84 4a    	addc.w    w5, w1, w9
    19fe:	02 05 4b    	addc.w    w6, w2, w10
    1a00:	83 85 4b    	addc.w    w7, w3, w11

00001a02 <.L13>:
    1a02:	9f b2 97    	mov.w     [w15-30], w5
    1a04:	a5 b7 9f    	mov.w     w5, [w15-28]
    1a06:	05 03 78    	mov.w     w5, w6
    1a08:	36 00 fb    	se        [w6++], w0
    1a0a:	96 b7 9f    	mov.w     w6, [w15-30]
    1a0c:	57 00 07    	rcall     0x1abc <_tolower>
    1a0e:	0d 01 78    	mov.w     w13, w2
    1a10:	80 00 78    	mov.w     w0, w1
    1a12:	40 57 21    	mov.w     #0x1574, w0
    1a14:	0b 03 07    	rcall     0x202c <_memchr>
    1a16:	00 00 e0    	cp0.w     w0
    1a18:	d8 ff 3a    	bra       NZ, 0x19ca <.L14>
    1a1a:	0f be 97    	mov.w     [w15-16], w12
    1a1c:	af b3 97    	mov.w     [w15-28], w7
    1a1e:	87 0f 56    	sub.w     w12, w7, [w15]
    1a20:	07 00 3a    	bra       NZ, 0x1a30 <.L15>
    1a22:	60 44 b8    	mul.uu    w8, #0x0, w8
    1a24:	60 55 b8    	mul.uu    w10, #0x0, w10
    1a26:	0e 00 e0    	cp0.w     w14
    1a28:	39 00 32    	bra       Z, 0x1a9c <.L7>
    1a2a:	0f b6 97    	mov.w     [w15-32], w12
    1a2c:	0c 0f 78    	mov.w     w12, [w14]
    1a2e:	36 00 37    	bra       0x1a9c <.L7>

00001a30 <.L15>:
    1a30:	2f b0 97    	mov.w     [w15-28], w0
    1a32:	6f a9 97    	mov.w     [w15-36], w2
    1a34:	82 00 50    	sub.w     w0, w2, w1
    1a36:	90 59 21    	mov.w     #0x1599, w0
    1a38:	60 c0 7e    	mov.b     [w0+w13], w0
    1a3a:	00 00 fb    	se        w0, w0
    1a3c:	00 80 50    	sub.w     w1, w0, w0
    1a3e:	20 00 33    	bra       N, 0x1a80 <.L16>
    1a40:	19 00 3a    	bra       NZ, 0x1a74 <.L17>
    1a42:	6f da 97    	mov.b     [w15-34], w4
    1a44:	04 00 fb    	se        w4, w0
    1a46:	cf 80 de    	asr.w     w0, #0xf, w1
    1a48:	61 09 b9    	mul.su    w1, #0x1, w2
    1a4a:	00 00 54    	sub.w     w8, w0, w0
    1a4c:	81 80 5c    	subb.w    w9, w1, w1
    1a4e:	02 01 5d    	subb.w    w10, w2, w2
    1a50:	83 81 5d    	subb.w    w11, w3, w3
    1a52:	00 40 e1    	cp.w      w8, w0
    1a54:	01 c8 e1    	cpb.w     w9, w1
    1a56:	02 d0 e1    	cpb.w     w10, w2
    1a58:	03 d8 e1    	cpb.w     w11, w3
    1a5a:	0c 00 39    	bra       NC, 0x1a74 <.L17>
    1a5c:	61 6a b9    	mul.su    w13, #0x1, w4
    1a5e:	61 2b b9    	mul.su    w5, #0x1, w6
    1a60:	73 06 07    	rcall     0x2748 <___udivdi3>
    1a62:	2f aa 97    	mov.w     [w15-44], w4
    1a64:	bf aa 97    	mov.w     [w15-42], w5
    1a66:	4f ab 97    	mov.w     [w15-40], w6
    1a68:	df ab 97    	mov.w     [w15-38], w7
    1a6a:	04 00 e1    	cp.w      w0, w4
    1a6c:	05 88 e1    	cpb.w     w1, w5
    1a6e:	06 90 e1    	cpb.w     w2, w6
    1a70:	07 98 e1    	cpb.w     w3, w7
    1a72:	06 00 32    	bra       Z, 0x1a80 <.L16>

00001a74 <.L17>:
    1a74:	20 02 20    	mov.w     #0x22, w0
    1a76:	80 b4 88    	mov.w     w0, 0x1690
    1a78:	f8 ff 2f    	mov.w     #0xffff, w8
    1a7a:	f9 ff 2f    	mov.w     #0xffff, w9
    1a7c:	08 05 be    	mov.d     w8, w10
    1a7e:	0a 00 37    	bra       0x1a94 <.L18>

00001a80 <.L16>:
    1a80:	d0 c2 b3    	mov.b     #0x2d, w0
    1a82:	ef e2 97    	mov.b     [w15-26], w5
    1a84:	80 cf 52    	sub.b     w5, w0, [w15]
    1a86:	06 00 3a    	bra       NZ, 0x1a94 <.L18>
    1a88:	60 00 b8    	mul.uu    w0, #0x0, w0
    1a8a:	60 11 b8    	mul.uu    w2, #0x0, w2
    1a8c:	08 04 50    	sub.w     w0, w8, w8
    1a8e:	89 84 58    	subb.w    w1, w9, w9
    1a90:	0a 05 59    	subb.w    w2, w10, w10
    1a92:	8b 85 59    	subb.w    w3, w11, w11

00001a94 <.L18>:
    1a94:	0e 00 e0    	cp0.w     w14
    1a96:	02 00 32    	bra       Z, 0x1a9c <.L7>
    1a98:	2f b3 97    	mov.w     [w15-28], w6
    1a9a:	06 0f 78    	mov.w     w6, [w14]

00001a9c <.L7>:
    1a9c:	08 00 be    	mov.d     w8, w0
    1a9e:	0a 01 be    	mov.d     w10, w2
    1aa0:	4f 07 78    	mov.w     [--w15], w14
    1aa2:	4f 06 be    	mov.d     [--w15], w12
    1aa4:	4f 05 be    	mov.d     [--w15], w10
    1aa6:	4f 04 be    	mov.d     [--w15], w8
    1aa8:	0f 02 b1    	sub.w     #0x20, w15
    1aaa:	00 00 06    	return    

00001aac <_isspace>:
    1aac:	69 00 e1    	cp.w      w0, #0x9
    1aae:	04 00 35    	bra       LT, 0x1ab8 <nomatch>
    1ab0:	6d 00 e1    	cp.w      w0, #0xd
    1ab2:	03 00 34    	bra       LE, 0x1aba <match>
    1ab4:	00 02 b1    	sub.w     #0x20, w0
    1ab6:	01 00 32    	bra       Z, 0x1aba <match>

00001ab8 <nomatch>:
    1ab8:	00 00 05    	retlw.w   #0x0, w0

00001aba <match>:
    1aba:	10 00 05    	retlw.w   #0x1, w0

00001abc <_tolower>:
    1abc:	80 00 78    	mov.w     w0, w1
    1abe:	11 04 b1    	sub.w     #0x41, w1
    1ac0:	03 00 35    	bra       LT, 0x1ac8 <nomatch>
    1ac2:	91 01 b1    	sub.w     #0x19, w1
    1ac4:	01 00 3c    	bra       GT, 0x1ac8 <nomatch>

00001ac6 <match>:
    1ac6:	00 50 a0    	bset.w    w0, #0x5

00001ac8 <nomatch>:
    1ac8:	00 00 06    	return    

00001aca <__Geterrno>:
    1aca:	90 b4 80    	mov.w     0x1692, w0
    1acc:	00 00 e0    	cp0.w     w0
    1ace:	01 00 32    	bra       Z, 0x1ad2 <.L2>
    1ad0:	00 00 01    	call      w0

00001ad2 <.L2>:
    1ad2:	00 69 21    	mov.w     #0x1690, w0
    1ad4:	00 00 06    	return    

00001ad6 <_fputc>:
    1ad6:	88 9f be    	mov.d     w8, [w15++]
    1ad8:	8a 1f 78    	mov.w     w10, [w15++]
    1ada:	00 04 be    	mov.d     w0, w8
    1adc:	c9 00 90    	mov.w     [w9+8], w1
    1ade:	69 00 90    	mov.w     [w9+12], w0
    1ae0:	80 8f 50    	sub.w     w1, w0, [w15]
    1ae2:	05 00 39    	bra       NC, 0x1aee <.L2>
    1ae4:	09 00 78    	mov.w     w9, w0
    1ae6:	c8 02 07    	rcall     0x2078 <__Fwprep>
    1ae8:	80 80 eb    	setm.w    w1
    1aea:	00 00 e0    	cp0.w     w0
    1aec:	16 00 35    	bra       LT, 0x1b1a <.L3>

00001aee <.L2>:
    1aee:	08 45 78    	mov.b     w8, w10
    1af0:	49 00 90    	mov.w     [w9+8], w0
    1af2:	08 58 78    	mov.b     w8, [w0++]
    1af4:	c0 04 98    	mov.w     w0, [w9+8]
    1af6:	19 00 78    	mov.w     [w9], w0
    1af8:	00 b8 a3    	btst.z    w0, #0xb
    1afa:	04 00 3a    	bra       NZ, 0x1b04 <.L4>
    1afc:	00 a8 a3    	btst.z    w0, #0xa
    1afe:	07 00 32    	bra       Z, 0x1b0e <.L5>
    1b00:	ea 4f 54    	sub.b     w8, #0xa, [w15]
    1b02:	05 00 3a    	bra       NZ, 0x1b0e <.L5>

00001b04 <.L4>:
    1b04:	09 00 78    	mov.w     w9, w0
    1b06:	dd 01 07    	rcall     0x1ec2 <__DNKfflush>
    1b08:	80 80 eb    	setm.w    w1
    1b0a:	00 00 e0    	cp0.w     w0
    1b0c:	06 00 3a    	bra       NZ, 0x1b1a <.L3>

00001b0e <.L5>:
    1b0e:	00 c0 20    	mov.w     #0xc00, w0
    1b10:	19 00 60    	and.w     w0, [w9], w0
    1b12:	02 00 32    	bra       Z, 0x1b18 <.L6>
    1b14:	49 00 90    	mov.w     [w9+8], w0
    1b16:	e0 04 98    	mov.w     w0, [w9+12]

00001b18 <.L6>:
    1b18:	8a 80 fb    	ze        w10, w1

00001b1a <.L3>:
    1b1a:	01 00 78    	mov.w     w1, w0
    1b1c:	4f 05 78    	mov.w     [--w15], w10
    1b1e:	4f 04 be    	mov.d     [--w15], w8
    1b20:	00 00 06    	return    

00001b22 <_prout>:
    1b22:	88 1f 78    	mov.w     w8, [w15++]
    1b24:	02 04 78    	mov.w     w2, w8
    1b26:	08 01 78    	mov.w     w8, w2
    1b28:	92 fd 07    	rcall     0x164e <_memcpy>
    1b2a:	08 00 40    	add.w     w0, w8, w0
    1b2c:	4f 04 78    	mov.w     [--w15], w8
    1b2e:	00 00 06    	return    

00001b30 <__sprintf_cdnopuxX>:
    1b30:	00 00 fa    	lnk       #0x0
    1b32:	88 1f 78    	mov.w     w8, [w15++]
    1b34:	00 04 78    	mov.w     w0, w8
    1b36:	ea 81 57    	sub.w     w15, #0xa, w3
    1b38:	3f b9 97    	mov.w     [w15-10], w2
    1b3a:	88 00 78    	mov.w     w8, w1
    1b3c:	20 b2 21    	mov.w     #0x1b22, w0
    1b3e:	07 00 07    	rcall     0x1b4e <___Printf_cdnopuxX>
    1b40:	00 00 e0    	cp0.w     w0
    1b42:	02 00 35    	bra       LT, 0x1b48 <.L3>
    1b44:	80 40 eb    	clr.b     w1
    1b46:	01 74 78    	mov.b     w1, [w8+w0]

00001b48 <.L3>:
    1b48:	4f 04 78    	mov.w     [--w15], w8
    1b4a:	00 80 fa    	ulnk      
    1b4c:	00 00 06    	return    

00001b4e <___Printf_cdnopuxX>:
    1b4e:	62 00 fa    	lnk       #0x62
    1b50:	88 9f be    	mov.d     w8, [w15++]
    1b52:	8a 1f 78    	mov.w     w10, [w15++]
    1b54:	00 05 78    	mov.w     w0, w10
    1b56:	81 04 78    	mov.w     w1, w9
    1b58:	02 04 78    	mov.w     w2, w8
    1b5a:	83 00 78    	mov.w     w3, w1
    1b5c:	80 f9 2f    	mov.w     #0xff98, w0
    1b5e:	0f 00 40    	add.w     w0, w15, w0
    1b60:	bd 04 07    	rcall     0x24dc <__Vacopy>
    1b62:	9a 97 9f    	mov.w     w10, [w15-94]
    1b64:	a9 97 9f    	mov.w     w9, [w15-92]
    1b66:	00 00 eb    	clr.w     w0
    1b68:	b0 9f 9f    	mov.w     w0, [w15-74]

00001b6a <.L31>:
    1b6a:	18 85 fb    	ze        [w8], w10
    1b6c:	8a 04 fb    	se        w10, w9
    1b6e:	0a 05 ea    	neg.w     w10, w10
    1b70:	4f 55 de    	lsr.w     w10, #0xf, w10
    1b72:	50 02 20    	mov.w     #0x25, w0
    1b74:	80 8f 54    	sub.w     w9, w0, [w15]
    1b76:	0d 00 32    	bra       Z, 0x1b92 <.L3>
    1b78:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    1b7a:	0b 00 3a    	bra       NZ, 0x1b92 <.L3>
    1b7c:	0a 01 78    	mov.w     w10, w2
    1b7e:	88 00 78    	mov.w     w8, w1
    1b80:	2f 90 97    	mov.w     [w15-92], w0
    1b82:	9f 91 97    	mov.w     [w15-94], w3
    1b84:	03 00 01    	call      w3
    1b86:	a0 97 9f    	mov.w     w0, [w15-92]
    1b88:	00 00 e0    	cp0.w     w0
    1b8a:	8e 00 32    	bra       Z, 0x1ca8 <.L27>
    1b8c:	3f 98 97    	mov.w     [w15-74], w0
    1b8e:	00 00 e8    	inc.w     w0, w0
    1b90:	b0 9f 9f    	mov.w     w0, [w15-74]

00001b92 <.L3>:
    1b92:	0a 04 44    	add.w     w8, w10, w8
    1b94:	50 02 20    	mov.w     #0x25, w0
    1b96:	80 8f 54    	sub.w     w9, w0, [w15]
    1b98:	04 00 32    	bra       Z, 0x1ba2 <.L5>
    1b9a:	09 00 e0    	cp0.w     w9
    1b9c:	e6 ff 3a    	bra       NZ, 0x1b6a <.L31>
    1b9e:	3f 98 97    	mov.w     [w15-74], w0
    1ba0:	84 00 37    	bra       0x1caa <.L4>

00001ba2 <.L5>:
    1ba2:	00 00 eb    	clr.w     w0
    1ba4:	90 9f 9f    	mov.w     w0, [w15-78]
    1ba6:	80 9f 9f    	mov.w     w0, [w15-80]
    1ba8:	f0 97 9f    	mov.w     w0, [w15-82]
    1baa:	e0 97 9f    	mov.w     w0, [w15-84]
    1bac:	d0 97 9f    	mov.w     w0, [w15-86]
    1bae:	c0 97 9f    	mov.w     w0, [w15-88]
    1bb0:	07 00 37    	bra       0x1bc0 <.L34>

00001bb2 <.L8>:
    1bb2:	41 5f 21    	mov.w     #0x15f4, w1
    1bb4:	01 00 50    	sub.w     w0, w1, w0
    1bb6:	00 00 40    	add.w     w0, w0, w0
    1bb8:	81 5e 21    	mov.w     #0x15e8, w1
    1bba:	61 00 78    	mov.w     [w1+w0], w0
    1bbc:	df 98 97    	mov.w     [w15-70], w1
    1bbe:	01 00 70    	ior.w     w0, w1, w0

00001bc0 <.L34>:
    1bc0:	d0 9f 9f    	mov.w     w0, [w15-70]
    1bc2:	88 04 78    	mov.w     w8, w9
    1bc4:	09 04 78    	mov.w     w9, w8
    1bc6:	38 45 78    	mov.b     [w8++], w10
    1bc8:	8a 00 fb    	se        w10, w1
    1bca:	40 5f 21    	mov.w     #0x15f4, w0
    1bcc:	39 02 07    	rcall     0x2040 <_strchr>
    1bce:	00 00 e0    	cp0.w     w0
    1bd0:	f0 ff 3a    	bra       NZ, 0x1bb2 <.L8>
    1bd2:	a1 c2 b3    	mov.b     #0x2a, w1
    1bd4:	81 4f 55    	sub.b     w10, w1, [w15]
    1bd6:	0e 00 3a    	bra       NZ, 0x1bf4 <.L9>
    1bd8:	cf 88 97    	mov.w     [w15-104], w1
    1bda:	01 80 e9    	dec2.w    w1, w0
    1bdc:	c0 8f 9f    	mov.w     w0, [w15-104]
    1bde:	10 00 78    	mov.w     [w0], w0
    1be0:	c0 9f 9f    	mov.w     w0, [w15-72]
    1be2:	00 00 e0    	cp0.w     w0
    1be4:	05 00 3d    	bra       GE, 0x1bf0 <.L10>
    1be6:	00 00 ea    	neg.w     w0, w0
    1be8:	c0 9f 9f    	mov.w     w0, [w15-72]
    1bea:	5f 98 97    	mov.w     [w15-70], w0
    1bec:	00 20 a0    	bset.w    w0, #0x2
    1bee:	d0 9f 9f    	mov.w     w0, [w15-70]

00001bf0 <.L10>:
    1bf0:	09 04 e8    	inc.w     w9, w8
    1bf2:	0f 00 37    	bra       0x1c12 <.L11>

00001bf4 <.L9>:
    1bf4:	c0 9f 9f    	mov.w     w0, [w15-72]
    1bf6:	00 00 eb    	clr.w     w0
    1bf8:	05 00 37    	bra       0x1c04 <.L32>

00001bfa <.L14>:
    1bfa:	f2 ff 27    	mov.w     #0x7fff, w2
    1bfc:	82 0f 50    	sub.w     w0, w2, [w15]
    1bfe:	02 00 32    	bra       Z, 0x1c04 <.L32>
    1c00:	6a 01 b9    	mul.su    w0, #0xa, w2
    1c02:	02 80 40    	add.w     w1, w2, w0

00001c04 <.L32>:
    1c04:	09 04 78    	mov.w     w9, w8
    1c06:	88 04 78    	mov.w     w8, w9
    1c08:	b9 00 fb    	se        [w9++], w1
    1c0a:	01 03 b1    	sub.w     #0x30, w1
    1c0c:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1c0e:	f5 ff 36    	bra       LEU, 0x1bfa <.L14>
    1c10:	c0 9f 9f    	mov.w     w0, [w15-72]

00001c12 <.L11>:
    1c12:	e0 c2 b3    	mov.b     #0x2e, w0
    1c14:	98 4f 10    	subr.b    w0, [w8], [w15]
    1c16:	02 00 32    	bra       Z, 0x1c1c <.L15>
    1c18:	00 80 eb    	setm.w    w0
    1c1a:	19 00 37    	bra       0x1c4e <.L35>

00001c1c <.L15>:
    1c1c:	a0 c2 b3    	mov.b     #0x2a, w0
    1c1e:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1c20:	07 00 3a    	bra       NZ, 0x1c30 <.L17>
    1c22:	cf 88 97    	mov.w     [w15-104], w1
    1c24:	01 80 e9    	dec2.w    w1, w0
    1c26:	c0 8f 9f    	mov.w     w0, [w15-104]
    1c28:	10 00 78    	mov.w     [w0], w0
    1c2a:	a0 9f 9f    	mov.w     w0, [w15-76]
    1c2c:	08 04 e8    	inc.w     w8, w8
    1c2e:	10 00 37    	bra       0x1c50 <.L16>

00001c30 <.L17>:
    1c30:	00 00 eb    	clr.w     w0
    1c32:	a0 9f 9f    	mov.w     w0, [w15-76]
    1c34:	88 00 78    	mov.w     w8, w1
    1c36:	05 00 37    	bra       0x1c42 <.L33>

00001c38 <.L20>:
    1c38:	f3 ff 27    	mov.w     #0x7fff, w3
    1c3a:	83 0f 50    	sub.w     w0, w3, [w15]
    1c3c:	02 00 32    	bra       Z, 0x1c42 <.L33>
    1c3e:	6a 02 b9    	mul.su    w0, #0xa, w4
    1c40:	04 00 41    	add.w     w2, w4, w0

00001c42 <.L33>:
    1c42:	01 04 78    	mov.w     w1, w8
    1c44:	88 00 78    	mov.w     w8, w1
    1c46:	31 01 fb    	se        [w1++], w2
    1c48:	02 03 b1    	sub.w     #0x30, w2
    1c4a:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1c4c:	f5 ff 36    	bra       LEU, 0x1c38 <.L20>

00001c4e <.L35>:
    1c4e:	a0 9f 9f    	mov.w     w0, [w15-76]

00001c50 <.L16>:
    1c50:	98 44 78    	mov.b     [w8], w9
    1c52:	89 00 fb    	se        w9, w1
    1c54:	00 5e 21    	mov.w     #0x15e0, w0
    1c56:	f4 01 07    	rcall     0x2040 <_strchr>
    1c58:	00 00 e0    	cp0.w     w0
    1c5a:	02 00 32    	bra       Z, 0x1c60 <.L25>
    1c5c:	08 04 e8    	inc.w     w8, w8
    1c5e:	01 00 37    	bra       0x1c62 <.L21>

00001c60 <.L25>:
    1c60:	80 44 eb    	clr.b     w9

00001c62 <.L21>:
    1c62:	c9 7f 9f    	mov.b     w9, [w15-68]
    1c64:	80 c6 b3    	mov.b     #0x68, w0
    1c66:	80 cf 54    	sub.b     w9, w0, [w15]
    1c68:	04 00 3a    	bra       NZ, 0x1c72 <.L22>
    1c6a:	98 cf 14    	subr.b    w9, [w8], [w15]
    1c6c:	0a 00 3a    	bra       NZ, 0x1c82 <.L23>
    1c6e:	66 40 50    	sub.b     w0, #0x6, w0
    1c70:	06 00 37    	bra       0x1c7e <.L36>

00001c72 <.L22>:
    1c72:	c0 c6 b3    	mov.b     #0x6c, w0
    1c74:	80 cf 54    	sub.b     w9, w0, [w15]
    1c76:	05 00 3a    	bra       NZ, 0x1c82 <.L23>
    1c78:	98 cf 14    	subr.b    w9, [w8], [w15]
    1c7a:	03 00 3a    	bra       NZ, 0x1c82 <.L23>
    1c7c:	65 40 40    	add.b     w0, #0x5, w0

00001c7e <.L36>:
    1c7e:	c0 7f 9f    	mov.b     w0, [w15-68]
    1c80:	08 04 e8    	inc.w     w8, w8

00001c82 <.L23>:
    1c82:	18 01 fb    	se        [w8], w2
    1c84:	e3 fb 2f    	mov.w     #0xffbe, w3
    1c86:	8f 81 41    	add.w     w3, w15, w3
    1c88:	81 f9 2f    	mov.w     #0xff98, w1
    1c8a:	8f 80 40    	add.w     w1, w15, w1
    1c8c:	a0 f9 2f    	mov.w     #0xff9a, w0
    1c8e:	0f 00 40    	add.w     w0, w15, w0
    1c90:	10 00 07    	rcall     0x1cb2 <___Putfld_cdnopuxX>
    1c92:	00 00 e0    	cp0.w     w0
    1c94:	09 00 3a    	bra       NZ, 0x1ca8 <.L27>
    1c96:	e1 fb 2f    	mov.w     #0xffbe, w1
    1c98:	8f 80 40    	add.w     w1, w15, w1
    1c9a:	a0 f9 2f    	mov.w     #0xff9a, w0
    1c9c:	0f 00 40    	add.w     w0, w15, w0
    1c9e:	62 03 07    	rcall     0x2364 <__Puttxt>
    1ca0:	00 00 e0    	cp0.w     w0
    1ca2:	02 00 35    	bra       LT, 0x1ca8 <.L27>
    1ca4:	08 04 e8    	inc.w     w8, w8
    1ca6:	61 ff 37    	bra       0x1b6a <.L31>

00001ca8 <.L27>:
    1ca8:	00 80 eb    	setm.w    w0

00001caa <.L4>:
    1caa:	4f 05 78    	mov.w     [--w15], w10
    1cac:	4f 04 be    	mov.d     [--w15], w8
    1cae:	00 80 fa    	ulnk      
    1cb0:	00 00 06    	return    

00001cb2 <___Putfld_cdnopuxX>:
    1cb2:	88 1f 78    	mov.w     w8, [w15++]
    1cb4:	e4 c6 b3    	mov.b     #0x6e, w4
    1cb6:	84 4f 51    	sub.b     w2, w4, [w15]
    1cb8:	b6 00 32    	bra       Z, 0x1e26 <.L7>
    1cba:	10 00 3c    	bra       GT, 0x1cdc <.L9>
    1cbc:	6b 42 52    	sub.b     w4, #0xb, w4
    1cbe:	84 4f 51    	sub.b     w2, w4, [w15]
    1cc0:	18 00 32    	bra       Z, 0x1cf2 <.L5>
    1cc2:	05 00 3c    	bra       GT, 0x1cce <.L10>
    1cc4:	54 c2 b3    	mov.b     #0x25, w4
    1cc6:	84 4f 51    	sub.b     w2, w4, [w15]
    1cc8:	ee 00 32    	bra       Z, 0x1ea6 <.L3>
    1cca:	84 c5 b3    	mov.b     #0x58, w4
    1ccc:	0f 00 37    	bra       0x1cec <.L47>

00001cce <.L10>:
    1cce:	44 c6 b3    	mov.b     #0x64, w4
    1cd0:	84 4f 51    	sub.b     w2, w4, [w15]
    1cd2:	14 00 32    	bra       Z, 0x1cfc <.L6>
    1cd4:	65 42 42    	add.b     w4, #0x5, w4
    1cd6:	84 4f 51    	sub.b     w2, w4, [w15]
    1cd8:	e9 00 3a    	bra       NZ, 0x1eac <.L2>
    1cda:	10 00 37    	bra       0x1cfc <.L6>

00001cdc <.L9>:
    1cdc:	04 c7 b3    	mov.b     #0x70, w4
    1cde:	84 4f 51    	sub.b     w2, w4, [w15]
    1ce0:	d5 00 32    	bra       Z, 0x1e8c <.L8>
    1ce2:	53 00 35    	bra       LT, 0x1d8a <.L4>
    1ce4:	65 42 42    	add.b     w4, #0x5, w4
    1ce6:	84 4f 51    	sub.b     w2, w4, [w15]
    1ce8:	50 00 32    	bra       Z, 0x1d8a <.L4>
    1cea:	63 42 42    	add.b     w4, #0x3, w4

00001cec <.L47>:
    1cec:	84 4f 51    	sub.b     w2, w4, [w15]
    1cee:	de 00 3a    	bra       NZ, 0x1eac <.L2>
    1cf0:	4c 00 37    	bra       0x1d8a <.L4>

00001cf2 <.L5>:
    1cf2:	11 81 e9    	dec2.w    [w1], w2
    1cf4:	82 08 78    	mov.w     w2, [w1]
    1cf6:	f0 00 90    	mov.w     [w0+14], w1
    1cf8:	12 41 78    	mov.b     [w2], w2
    1cfa:	d6 00 37    	bra       0x1ea8 <.L53>

00001cfc <.L6>:
    1cfc:	20 62 90    	mov.b     [w0+34], w4
    1cfe:	c5 c6 b3    	mov.b     #0x6c, w5
    1d00:	85 4f 52    	sub.b     w4, w5, [w15]
    1d02:	07 00 3a    	bra       NZ, 0x1d12 <.L12>
    1d04:	91 02 78    	mov.w     [w1], w5
    1d06:	64 82 52    	sub.w     w5, #0x4, w4
    1d08:	84 08 78    	mov.w     w4, [w1]
    1d0a:	14 02 be    	mov.d     [w4], w4
    1d0c:	4f ab de    	asr.w     w5, #0xf, w6
    1d0e:	86 03 78    	mov.w     w6, w7
    1d10:	11 00 37    	bra       0x1d34 <.L13>

00001d12 <.L12>:
    1d12:	15 c7 b3    	mov.b     #0x71, w5
    1d14:	85 4f 52    	sub.b     w4, w5, [w15]
    1d16:	03 00 32    	bra       Z, 0x1d1e <.L43>
    1d18:	a5 c6 b3    	mov.b     #0x6a, w5
    1d1a:	85 4f 52    	sub.b     w4, w5, [w15]
    1d1c:	06 00 3a    	bra       NZ, 0x1d2a <.L15>

00001d1e <.L43>:
    1d1e:	91 02 78    	mov.w     [w1], w5
    1d20:	68 82 52    	sub.w     w5, #0x8, w4
    1d22:	84 08 78    	mov.w     w4, [w1]
    1d24:	54 03 be    	mov.d     [++w4], w6
    1d26:	44 02 be    	mov.d     [--w4], w4
    1d28:	05 00 37    	bra       0x1d34 <.L13>

00001d2a <.L15>:
    1d2a:	11 82 e9    	dec2.w    [w1], w4
    1d2c:	84 08 78    	mov.w     w4, [w1]
    1d2e:	14 02 78    	mov.w     [w4], w4
    1d30:	cf a2 de    	asr.w     w4, #0xf, w5
    1d32:	61 2b b9    	mul.su    w5, #0x1, w6

00001d34 <.L13>:
    1d34:	04 98 be    	mov.d     w4, [w0++]
    1d36:	06 90 be    	mov.d     w6, [w0--]
    1d38:	a0 60 90    	mov.b     [w0+34], w1
    1d3a:	88 c6 b3    	mov.b     #0x68, w8
    1d3c:	88 cf 50    	sub.b     w1, w8, [w15]
    1d3e:	0d 00 32    	bra       Z, 0x1d5a <.L19>
    1d40:	28 c6 b3    	mov.b     #0x62, w8
    1d42:	88 cf 50    	sub.b     w1, w8, [w15]
    1d44:	04 00 3a    	bra       NZ, 0x1d4e <.L18>
    1d46:	04 02 fb    	se        w4, w4
    1d48:	cf a2 de    	asr.w     w4, #0xf, w5
    1d4a:	61 2b b9    	mul.su    w5, #0x1, w6
    1d4c:	08 00 37    	bra       0x1d5e <.L44>

00001d4e <.L18>:
    1d4e:	48 c7 b3    	mov.b     #0x74, w8
    1d50:	88 cf 50    	sub.b     w1, w8, [w15]
    1d52:	03 00 32    	bra       Z, 0x1d5a <.L19>
    1d54:	66 44 44    	add.b     w8, #0x6, w8
    1d56:	88 cf 50    	sub.b     w1, w8, [w15]
    1d58:	04 00 3a    	bra       NZ, 0x1d62 <.L17>

00001d5a <.L19>:
    1d5a:	cf a2 de    	asr.w     w4, #0xf, w5
    1d5c:	61 2b b9    	mul.su    w5, #0x1, w6

00001d5e <.L44>:
    1d5e:	04 98 be    	mov.d     w4, [w0++]
    1d60:	06 90 be    	mov.d     w6, [w0--]

00001d62 <.L17>:
    1d62:	30 02 be    	mov.d     [w0++], w4
    1d64:	20 03 be    	mov.d     [w0--], w6
    1d66:	f0 00 90    	mov.w     [w0+14], w1
    1d68:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1d6a:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1d6c:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1d6e:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1d70:	02 00 3d    	bra       GE, 0x1d76 <.L20>
    1d72:	d4 c2 b3    	mov.b     #0x2d, w4
    1d74:	08 00 37    	bra       0x1d86 <.L45>

00001d76 <.L20>:
    1d76:	00 12 90    	mov.w     [w0+32], w4
    1d78:	04 18 a3    	btst.z    w4, #0x1
    1d7a:	02 00 32    	bra       Z, 0x1d80 <.L22>
    1d7c:	b4 c2 b3    	mov.b     #0x2b, w4
    1d7e:	03 00 37    	bra       0x1d86 <.L45>

00001d80 <.L22>:
    1d80:	04 08 a3    	btst.z    w4, #0x0
    1d82:	4c 00 32    	bra       Z, 0x1e1c <.L31>
    1d84:	04 c2 b3    	mov.b     #0x20, w4

00001d86 <.L45>:
    1d86:	84 f1 78    	mov.b     w4, [w3+w1]
    1d88:	47 00 37    	bra       0x1e18 <.L54>

00001d8a <.L4>:
    1d8a:	20 62 90    	mov.b     [w0+34], w4
    1d8c:	c5 c6 b3    	mov.b     #0x6c, w5
    1d8e:	85 4f 52    	sub.b     w4, w5, [w15]
    1d90:	06 00 3a    	bra       NZ, 0x1d9e <.L23>
    1d92:	91 02 78    	mov.w     [w1], w5
    1d94:	64 82 52    	sub.w     w5, #0x4, w4
    1d96:	84 08 78    	mov.w     w4, [w1]
    1d98:	14 02 be    	mov.d     [w4], w4
    1d9a:	60 33 b8    	mul.uu    w6, #0x0, w6
    1d9c:	11 00 37    	bra       0x1dc0 <.L24>

00001d9e <.L23>:
    1d9e:	15 c7 b3    	mov.b     #0x71, w5
    1da0:	85 4f 52    	sub.b     w4, w5, [w15]
    1da2:	03 00 32    	bra       Z, 0x1daa <.L48>
    1da4:	a5 c6 b3    	mov.b     #0x6a, w5
    1da6:	85 4f 52    	sub.b     w4, w5, [w15]
    1da8:	06 00 3a    	bra       NZ, 0x1db6 <.L26>

00001daa <.L48>:
    1daa:	91 02 78    	mov.w     [w1], w5
    1dac:	68 82 52    	sub.w     w5, #0x8, w4
    1dae:	84 08 78    	mov.w     w4, [w1]
    1db0:	54 03 be    	mov.d     [++w4], w6
    1db2:	44 02 be    	mov.d     [--w4], w4
    1db4:	05 00 37    	bra       0x1dc0 <.L24>

00001db6 <.L26>:
    1db6:	11 82 e9    	dec2.w    [w1], w4
    1db8:	84 08 78    	mov.w     w4, [w1]
    1dba:	14 02 78    	mov.w     [w4], w4
    1dbc:	80 02 eb    	clr.w     w5
    1dbe:	60 33 b8    	mul.uu    w6, #0x0, w6

00001dc0 <.L24>:
    1dc0:	04 98 be    	mov.d     w4, [w0++]
    1dc2:	06 90 be    	mov.d     w6, [w0--]
    1dc4:	a0 60 90    	mov.b     [w0+34], w1
    1dc6:	88 c6 b3    	mov.b     #0x68, w8
    1dc8:	88 cf 50    	sub.b     w1, w8, [w15]
    1dca:	0d 00 32    	bra       Z, 0x1de6 <.L30>
    1dcc:	28 c6 b3    	mov.b     #0x62, w8
    1dce:	88 cf 50    	sub.b     w1, w8, [w15]
    1dd0:	04 00 3a    	bra       NZ, 0x1dda <.L29>
    1dd2:	04 82 fb    	ze        w4, w4
    1dd4:	80 02 eb    	clr.w     w5
    1dd6:	60 33 b8    	mul.uu    w6, #0x0, w6
    1dd8:	08 00 37    	bra       0x1dea <.L49>

00001dda <.L29>:
    1dda:	48 c7 b3    	mov.b     #0x74, w8
    1ddc:	88 cf 50    	sub.b     w1, w8, [w15]
    1dde:	03 00 32    	bra       Z, 0x1de6 <.L30>
    1de0:	66 44 44    	add.b     w8, #0x6, w8
    1de2:	88 cf 50    	sub.b     w1, w8, [w15]
    1de4:	04 00 3a    	bra       NZ, 0x1dee <.L28>

00001de6 <.L30>:
    1de6:	80 02 eb    	clr.w     w5
    1de8:	60 33 b8    	mul.uu    w6, #0x0, w6

00001dea <.L49>:
    1dea:	04 98 be    	mov.d     w4, [w0++]
    1dec:	06 90 be    	mov.d     w6, [w0--]

00001dee <.L28>:
    1dee:	80 10 90    	mov.w     [w0+32], w1
    1df0:	01 38 a3    	btst.z    w1, #0x3
    1df2:	14 00 32    	bra       Z, 0x1e1c <.L31>
    1df4:	30 02 be    	mov.d     [w0++], w4
    1df6:	20 03 be    	mov.d     [w0--], w6
    1df8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1dfa:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1dfc:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1dfe:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1e00:	0d 00 32    	bra       Z, 0x1e1c <.L31>
    1e02:	81 c7 b3    	mov.b     #0x78, w1
    1e04:	81 4f 51    	sub.b     w2, w1, [w15]
    1e06:	03 00 32    	bra       Z, 0x1e0e <.L32>
    1e08:	81 c5 b3    	mov.b     #0x58, w1
    1e0a:	81 4f 51    	sub.b     w2, w1, [w15]
    1e0c:	07 00 3a    	bra       NZ, 0x1e1c <.L31>

00001e0e <.L32>:
    1e0e:	f0 00 90    	mov.w     [w0+14], w1
    1e10:	04 c3 b3    	mov.b     #0x30, w4
    1e12:	84 f1 78    	mov.b     w4, [w3+w1]
    1e14:	81 00 e8    	inc.w     w1, w1
    1e16:	82 f1 78    	mov.b     w2, [w3+w1]

00001e18 <.L54>:
    1e18:	81 00 e8    	inc.w     w1, w1
    1e1a:	71 00 98    	mov.w     w1, [w0+14]

00001e1c <.L31>:
    1e1c:	f0 00 90    	mov.w     [w0+14], w1
    1e1e:	81 81 41    	add.w     w3, w1, w3
    1e20:	63 00 98    	mov.w     w3, [w0+12]
    1e22:	82 40 78    	mov.b     w2, w1
    1e24:	3e 00 37    	bra       0x1ea2 <.L52>

00001e26 <.L7>:
    1e26:	a0 61 90    	mov.b     [w0+34], w3
    1e28:	c4 c6 b3    	mov.b     #0x6c, w4
    1e2a:	11 81 e9    	dec2.w    [w1], w2
    1e2c:	84 cf 51    	sub.b     w3, w4, [w15]
    1e2e:	22 00 32    	bra       Z, 0x1e74 <.L37>
    1e30:	0a 00 3c    	bra       GT, 0x1e46 <.L41>
    1e32:	64 42 52    	sub.b     w4, #0x4, w4
    1e34:	84 cf 51    	sub.b     w3, w4, [w15]
    1e36:	25 00 32    	bra       Z, 0x1e82 <.L51>
    1e38:	04 c2 e8    	inc2.b    w4, w4
    1e3a:	84 cf 51    	sub.b     w3, w4, [w15]
    1e3c:	13 00 32    	bra       Z, 0x1e64 <.L36>
    1e3e:	68 42 52    	sub.b     w4, #0x8, w4
    1e40:	84 cf 51    	sub.b     w3, w4, [w15]
    1e42:	1e 00 3a    	bra       NZ, 0x1e80 <.L33>
    1e44:	0a 00 37    	bra       0x1e5a <.L55>

00001e46 <.L41>:
    1e46:	44 c7 b3    	mov.b     #0x74, w4
    1e48:	84 cf 51    	sub.b     w3, w4, [w15]
    1e4a:	1b 00 32    	bra       Z, 0x1e82 <.L51>
    1e4c:	66 42 42    	add.b     w4, #0x6, w4
    1e4e:	84 cf 51    	sub.b     w3, w4, [w15]
    1e50:	18 00 32    	bra       Z, 0x1e82 <.L51>
    1e52:	69 42 52    	sub.b     w4, #0x9, w4
    1e54:	84 cf 51    	sub.b     w3, w4, [w15]
    1e56:	14 00 3a    	bra       NZ, 0x1e80 <.L33>
    1e58:	05 00 37    	bra       0x1e64 <.L36>

00001e5a <.L55>:
    1e5a:	82 08 78    	mov.w     w2, [w1]
    1e5c:	92 00 78    	mov.w     [w2], w1
    1e5e:	40 58 90    	mov.b     [w0+28], w0
    1e60:	80 48 78    	mov.b     w0, [w1]
    1e62:	2c 00 37    	bra       0x1ebc <.L11>

00001e64 <.L36>:
    1e64:	82 08 78    	mov.w     w2, [w1]
    1e66:	92 00 78    	mov.w     [w2], w1
    1e68:	60 0a 90    	mov.w     [w0+28], w4
    1e6a:	cf a2 de    	asr.w     w4, #0xf, w5
    1e6c:	61 2b b9    	mul.su    w5, #0x1, w6
    1e6e:	84 98 be    	mov.d     w4, [w1++]
    1e70:	86 90 be    	mov.d     w6, [w1--]
    1e72:	24 00 37    	bra       0x1ebc <.L11>

00001e74 <.L37>:
    1e74:	82 08 78    	mov.w     w2, [w1]
    1e76:	92 00 78    	mov.w     [w2], w1
    1e78:	60 09 90    	mov.w     [w0+28], w2
    1e7a:	cf 91 de    	asr.w     w2, #0xf, w3
    1e7c:	82 88 be    	mov.d     w2, [w1]
    1e7e:	1e 00 37    	bra       0x1ebc <.L11>

00001e80 <.L33>:
    1e80:	11 81 e9    	dec2.w    [w1], w2

00001e82 <.L51>:
    1e82:	82 08 78    	mov.w     w2, [w1]
    1e84:	92 00 78    	mov.w     [w2], w1
    1e86:	60 08 90    	mov.w     [w0+28], w0
    1e88:	80 08 78    	mov.w     w0, [w1]
    1e8a:	18 00 37    	bra       0x1ebc <.L11>

00001e8c <.L8>:
    1e8c:	11 81 e9    	dec2.w    [w1], w2
    1e8e:	82 08 78    	mov.w     w2, [w1]
    1e90:	12 02 78    	mov.w     [w2], w4
    1e92:	cf a2 de    	asr.w     w4, #0xf, w5
    1e94:	61 2b b9    	mul.su    w5, #0x1, w6
    1e96:	04 98 be    	mov.d     w4, [w0++]
    1e98:	06 90 be    	mov.d     w6, [w0--]
    1e9a:	f0 00 90    	mov.w     [w0+14], w1
    1e9c:	81 81 41    	add.w     w3, w1, w3
    1e9e:	63 00 98    	mov.w     w3, [w0+12]
    1ea0:	81 c7 b3    	mov.b     #0x78, w1

00001ea2 <.L52>:
    1ea2:	31 01 07    	rcall     0x2106 <__Litob>
    1ea4:	0b 00 37    	bra       0x1ebc <.L11>

00001ea6 <.L3>:
    1ea6:	f0 00 90    	mov.w     [w0+14], w1

00001ea8 <.L53>:
    1ea8:	82 f1 78    	mov.b     w2, [w3+w1]
    1eaa:	06 00 37    	bra       0x1eb8 <.L50>

00001eac <.L2>:
    1eac:	f0 00 90    	mov.w     [w0+14], w1
    1eae:	81 81 41    	add.w     w3, w1, w3
    1eb0:	02 04 e0    	cp0.b     w2
    1eb2:	01 00 3a    	bra       NZ, 0x1eb6 <.L42>
    1eb4:	52 c2 b3    	mov.b     #0x25, w2

00001eb6 <.L42>:
    1eb6:	82 49 78    	mov.b     w2, [w3]

00001eb8 <.L50>:
    1eb8:	81 00 e8    	inc.w     w1, w1
    1eba:	71 00 98    	mov.w     w1, [w0+14]

00001ebc <.L11>:
    1ebc:	00 00 eb    	clr.w     w0
    1ebe:	4f 04 78    	mov.w     [--w15], w8
    1ec0:	00 00 06    	return    

00001ec2 <__DNKfflush>:
    1ec2:	88 9f be    	mov.d     w8, [w15++]
    1ec4:	8a 1f 78    	mov.w     w10, [w15++]
    1ec6:	00 04 78    	mov.w     w0, w8
    1ec8:	08 00 e0    	cp0.w     w8
    1eca:	0d 00 3a    	bra       NZ, 0x1ee6 <.L2>
    1ecc:	e8 41 21    	mov.w     #0x141e, w8
    1ece:	70 05 44    	add.w     w8, #0x10, w10
    1ed0:	80 04 eb    	clr.w     w9

00001ed2 <.L4>:
    1ed2:	58 00 78    	mov.w     [++w8], w0
    1ed4:	00 00 e0    	cp0.w     w0
    1ed6:	04 00 32    	bra       Z, 0x1ee0 <.L3>
    1ed8:	f4 ff 07    	rcall     0x1ec2 <__DNKfflush>
    1eda:	00 00 e0    	cp0.w     w0
    1edc:	01 00 3d    	bra       GE, 0x1ee0 <.L3>
    1ede:	80 84 eb    	setm.w    w9

00001ee0 <.L3>:
    1ee0:	8a 0f 54    	sub.w     w8, w10, [w15]
    1ee2:	f7 ff 3a    	bra       NZ, 0x1ed2 <.L4>
    1ee4:	25 00 37    	bra       0x1f30 <.L5>

00001ee6 <.L2>:
    1ee6:	00 00 22    	mov.w     #0x2000, w0
    1ee8:	18 00 60    	and.w     w0, [w8], w0
    1eea:	80 04 eb    	clr.w     w9
    1eec:	21 00 32    	bra       Z, 0x1f30 <.L5>
    1eee:	a8 04 90    	mov.w     [w8+4], w9
    1ef0:	0f 00 37    	bra       0x1f10 <.L6>

00001ef2 <.L8>:
    1ef2:	09 01 51    	sub.w     w2, w9, w2
    1ef4:	38 40 90    	mov.b     [w8+3], w0
    1ef6:	00 00 fb    	se        w0, w0
    1ef8:	89 00 78    	mov.w     w9, w1
    1efa:	cc 06 07    	rcall     0x2c94 <_write>
    1efc:	00 00 e0    	cp0.w     w0
    1efe:	07 00 3c    	bra       GT, 0x1f0e <.L7>
    1f00:	28 00 90    	mov.w     [w8+4], w0
    1f02:	40 04 98    	mov.w     w0, [w8+8]
    1f04:	60 04 98    	mov.w     w0, [w8+12]
    1f06:	50 0c 98    	mov.w     w0, [w8+26]
    1f08:	18 90 a0    	bset.w    [w8], #0x9
    1f0a:	80 84 eb    	setm.w    w9
    1f0c:	11 00 37    	bra       0x1f30 <.L5>

00001f0e <.L7>:
    1f0e:	80 84 44    	add.w     w9, w0, w9

00001f10 <.L6>:
    1f10:	48 01 90    	mov.w     [w8+8], w2
    1f12:	82 8f 54    	sub.w     w9, w2, [w15]
    1f14:	ee ff 39    	bra       NC, 0x1ef2 <.L8>
    1f16:	28 00 90    	mov.w     [w8+4], w0
    1f18:	40 04 98    	mov.w     w0, [w8+8]
    1f1a:	98 00 78    	mov.w     [w8], w1
    1f1c:	02 c0 20    	mov.w     #0xc00, w2
    1f1e:	02 81 60    	and.w     w1, w2, w2
    1f20:	01 00 3a    	bra       NZ, 0x1f24 <.L9>
    1f22:	38 00 90    	mov.w     [w8+6], w0

00001f24 <.L9>:
    1f24:	01 e8 a3    	btst.z    w1, #0xe
    1f26:	02 00 32    	bra       Z, 0x1f2c <.L10>
    1f28:	60 04 98    	mov.w     w0, [w8+12]
    1f2a:	01 00 37    	bra       0x1f2e <.L13>

00001f2c <.L10>:
    1f2c:	50 0c 98    	mov.w     w0, [w8+26]

00001f2e <.L13>:
    1f2e:	80 04 eb    	clr.w     w9

00001f30 <.L5>:
    1f30:	09 00 78    	mov.w     w9, w0
    1f32:	4f 05 78    	mov.w     [--w15], w10
    1f34:	4f 04 be    	mov.d     [--w15], w8
    1f36:	00 00 06    	return    

00001f38 <_fputs>:
    1f38:	88 9f be    	mov.d     w8, [w15++]
    1f3a:	8a 9f be    	mov.d     w10, [w15++]
    1f3c:	80 04 78    	mov.w     w0, w9
    1f3e:	01 04 78    	mov.w     w1, w8
    1f40:	2c 00 37    	bra       0x1f9a <.L2>

00001f42 <.L9>:
    1f42:	c8 00 90    	mov.w     [w8+8], w1
    1f44:	68 00 90    	mov.w     [w8+12], w0
    1f46:	80 8f 50    	sub.w     w1, w0, [w15]
    1f48:	04 00 39    	bra       NC, 0x1f52 <.L3>
    1f4a:	08 00 78    	mov.w     w8, w0
    1f4c:	95 00 07    	rcall     0x2078 <__Fwprep>
    1f4e:	00 00 e0    	cp0.w     w0
    1f50:	37 00 35    	bra       LT, 0x1fc0 <.L13>

00001f52 <.L3>:
    1f52:	00 40 20    	mov.w     #0x400, w0
    1f54:	18 00 60    	and.w     w0, [w8], w0
    1f56:	09 00 32    	bra       Z, 0x1f6a <.L5>
    1f58:	a1 00 20    	mov.w     #0xa, w1
    1f5a:	09 00 78    	mov.w     w9, w0
    1f5c:	83 00 07    	rcall     0x2064 <_strrchr>
    1f5e:	80 05 78    	mov.w     w0, w11
    1f60:	0b 00 e0    	cp0.w     w11
    1f62:	03 00 32    	bra       Z, 0x1f6a <.L5>
    1f64:	61 85 14    	subr.w    w9, #0x1, w10
    1f66:	0a 85 45    	add.w     w11, w10, w10
    1f68:	04 00 37    	bra       0x1f72 <.L6>

00001f6a <.L5>:
    1f6a:	09 00 78    	mov.w     w9, w0
    1f6c:	75 00 07    	rcall     0x2058 <_strlen>
    1f6e:	00 05 78    	mov.w     w0, w10
    1f70:	80 05 eb    	clr.w     w11

00001f72 <.L6>:
    1f72:	48 00 90    	mov.w     [w8+8], w0
    1f74:	e8 00 90    	mov.w     [w8+12], w1
    1f76:	80 80 50    	sub.w     w1, w0, w1
    1f78:	8a 8f 50    	sub.w     w1, w10, [w15]
    1f7a:	02 00 31    	bra       C, 0x1f80 <.L7>
    1f7c:	01 05 78    	mov.w     w1, w10
    1f7e:	80 05 eb    	clr.w     w11

00001f80 <.L7>:
    1f80:	0a 01 78    	mov.w     w10, w2
    1f82:	89 00 78    	mov.w     w9, w1
    1f84:	64 fb 07    	rcall     0x164e <_memcpy>
    1f86:	48 00 90    	mov.w     [w8+8], w0
    1f88:	0a 00 40    	add.w     w0, w10, w0
    1f8a:	40 04 98    	mov.w     w0, [w8+8]
    1f8c:	0b 00 e0    	cp0.w     w11
    1f8e:	04 00 32    	bra       Z, 0x1f98 <.L8>
    1f90:	08 00 78    	mov.w     w8, w0
    1f92:	97 ff 07    	rcall     0x1ec2 <__DNKfflush>
    1f94:	00 00 e0    	cp0.w     w0
    1f96:	14 00 3a    	bra       NZ, 0x1fc0 <.L13>

00001f98 <.L8>:
    1f98:	8a 84 44    	add.w     w9, w10, w9

00001f9a <.L2>:
    1f9a:	19 04 e0    	cp0.b     [w9]
    1f9c:	d2 ff 3a    	bra       NZ, 0x1f42 <.L9>
    1f9e:	00 80 20    	mov.w     #0x800, w0
    1fa0:	18 00 60    	and.w     w0, [w8], w0
    1fa2:	06 00 32    	bra       Z, 0x1fb0 <.L10>
    1fa4:	08 00 78    	mov.w     w8, w0
    1fa6:	8d ff 07    	rcall     0x1ec2 <__DNKfflush>
    1fa8:	80 00 78    	mov.w     w0, w1
    1faa:	00 80 eb    	setm.w    w0
    1fac:	01 00 e0    	cp0.w     w1
    1fae:	09 00 3a    	bra       NZ, 0x1fc2 <.L4>

00001fb0 <.L10>:
    1fb0:	01 c0 20    	mov.w     #0xc00, w1
    1fb2:	98 80 60    	and.w     w1, [w8], w1
    1fb4:	00 00 eb    	clr.w     w0
    1fb6:	05 00 32    	bra       Z, 0x1fc2 <.L4>
    1fb8:	48 00 90    	mov.w     [w8+8], w0
    1fba:	60 04 98    	mov.w     w0, [w8+12]
    1fbc:	00 00 eb    	clr.w     w0
    1fbe:	01 00 37    	bra       0x1fc2 <.L4>

00001fc0 <.L13>:
    1fc0:	00 80 eb    	setm.w    w0

00001fc2 <.L4>:
    1fc2:	4f 05 be    	mov.d     [--w15], w10
    1fc4:	4f 04 be    	mov.d     [--w15], w8
    1fc6:	00 00 06    	return    

00001fc8 <_free>:
    1fc8:	00 00 e0    	cp0.w     w0
    1fca:	2f 00 32    	bra       Z, 0x202a <.L1>
    1fcc:	c0 01 78    	mov.w     [--w0], w3
    1fce:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    1fd0:	2c 00 36    	bra       LEU, 0x202a <.L1>
    1fd2:	03 08 a3    	btst.z    w3, #0x0
    1fd4:	2a 00 3a    	bra       NZ, 0x202a <.L1>
    1fd6:	e1 af 80    	mov.w     0x15fc, w1
    1fd8:	01 00 e0    	cp0.w     w1
    1fda:	02 00 32    	bra       Z, 0x1fe0 <.L3>
    1fdc:	81 0f 50    	sub.w     w0, w1, [w15]
    1fde:	04 00 31    	bra       C, 0x1fe8 <.L7>

00001fe0 <.L3>:
    1fe0:	11 00 98    	mov.w     w1, [w0+2]
    1fe2:	e0 af 88    	mov.w     w0, 0x15fc
    1fe4:	16 00 37    	bra       0x2012 <.L5>

00001fe6 <.L11>:
    1fe6:	82 00 78    	mov.w     w2, w1

00001fe8 <.L7>:
    1fe8:	11 01 90    	mov.w     [w1+2], w2
    1fea:	02 00 e0    	cp0.w     w2
    1fec:	02 00 32    	bra       Z, 0x1ff2 <.L6>
    1fee:	80 0f 51    	sub.w     w2, w0, [w15]
    1ff0:	fa ff 39    	bra       NC, 0x1fe6 <.L11>

00001ff2 <.L6>:
    1ff2:	11 02 78    	mov.w     [w1], w4
    1ff4:	84 82 40    	add.w     w1, w4, w5
    1ff6:	85 0f 50    	sub.w     w0, w5, [w15]
    1ff8:	18 00 39    	bra       NC, 0x202a <.L1>
    1ffa:	80 8f 52    	sub.w     w5, w0, [w15]
    1ffc:	03 00 3a    	bra       NZ, 0x2004 <.L8>
    1ffe:	83 08 42    	add.w     w4, w3, [w1]
    2000:	01 00 78    	mov.w     w1, w0
    2002:	07 00 37    	bra       0x2012 <.L5>

00002004 <.L8>:
    2004:	02 00 e0    	cp0.w     w2
    2006:	03 00 32    	bra       Z, 0x200e <.L9>
    2008:	83 01 40    	add.w     w0, w3, w3
    200a:	83 0f 51    	sub.w     w2, w3, [w15]
    200c:	0e 00 39    	bra       NC, 0x202a <.L1>

0000200e <.L9>:
    200e:	12 00 98    	mov.w     w2, [w0+2]
    2010:	90 00 98    	mov.w     w0, [w1+2]

00002012 <.L5>:
    2012:	90 00 90    	mov.w     [w0+2], w1
    2014:	01 00 e0    	cp0.w     w1
    2016:	09 00 32    	bra       Z, 0x202a <.L1>
    2018:	10 01 40    	add.w     w0, [w0], w2
    201a:	82 8f 50    	sub.w     w1, w2, [w15]
    201c:	06 00 3a    	bra       NZ, 0x202a <.L1>
    201e:	a2 5f 21    	mov.w     #0x15fa, w2
    2020:	00 09 eb    	clr.w     [w2]
    2022:	10 01 78    	mov.w     [w0], w2
    2024:	11 08 41    	add.w     w2, [w1], [w0]
    2026:	91 00 90    	mov.w     [w1+2], w1
    2028:	11 00 98    	mov.w     w1, [w0+2]

0000202a <.L1>:
    202a:	00 00 06    	return    

0000202c <_memchr>:
    202c:	03 00 37    	bra       0x2034 <.L2>

0000202e <.L4>:
    202e:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    2030:	05 00 32    	bra       Z, 0x203c <.L5>
    2032:	02 01 e9    	dec.w     w2, w2

00002034 <.L2>:
    2034:	80 01 78    	mov.w     w0, w3
    2036:	02 00 e0    	cp0.w     w2
    2038:	fa ff 3a    	bra       NZ, 0x202e <.L4>
    203a:	00 00 05    	retlw.w   #0x0, w0

0000203c <.L5>:
    203c:	03 00 78    	mov.w     w3, w0
    203e:	00 00 06    	return    

00002040 <_strchr>:
    2040:	02 00 37    	bra       0x2046 <.L2>

00002042 <.L4>:
    2042:	03 04 e0    	cp0.b     w3
    2044:	06 00 32    	bra       Z, 0x2052 <.L5>

00002046 <.L2>:
    2046:	00 01 78    	mov.w     w0, w2
    2048:	02 00 78    	mov.w     w2, w0
    204a:	b0 41 78    	mov.b     [w0++], w3
    204c:	81 cf 51    	sub.b     w3, w1, [w15]
    204e:	f9 ff 3a    	bra       NZ, 0x2042 <.L4>
    2050:	01 00 37    	bra       0x2054 <.L3>

00002052 <.L5>:
    2052:	00 01 eb    	clr.w     w2

00002054 <.L3>:
    2054:	02 00 78    	mov.w     w2, w0
    2056:	00 00 06    	return    

00002058 <_strlen>:
    2058:	80 00 78    	mov.w     w0, w1

0000205a <.L2>:
    205a:	01 01 78    	mov.w     w1, w2
    205c:	31 04 e0    	cp0.b     [w1++]
    205e:	fd ff 3a    	bra       NZ, 0x205a <.L2>
    2060:	00 00 51    	sub.w     w2, w0, w0
    2062:	00 00 06    	return    

00002064 <_strrchr>:
    2064:	00 01 eb    	clr.w     w2

00002066 <.L3>:
    2066:	00 02 78    	mov.w     w0, w4
    2068:	b0 41 78    	mov.b     [w0++], w3
    206a:	81 cf 51    	sub.b     w3, w1, [w15]
    206c:	01 00 3a    	bra       NZ, 0x2070 <.L2>
    206e:	04 01 78    	mov.w     w4, w2

00002070 <.L2>:
    2070:	03 04 e0    	cp0.b     w3
    2072:	f9 ff 3a    	bra       NZ, 0x2066 <.L3>
    2074:	02 00 78    	mov.w     w2, w0
    2076:	00 00 06    	return    

00002078 <__Fwprep>:
    2078:	88 9f be    	mov.d     w8, [w15++]
    207a:	8a 1f 78    	mov.w     w10, [w15++]
    207c:	00 04 78    	mov.w     w0, w8
    207e:	c8 00 90    	mov.w     [w8+8], w1
    2080:	68 01 90    	mov.w     [w8+12], w2
    2082:	00 00 eb    	clr.w     w0
    2084:	82 8f 50    	sub.w     w1, w2, [w15]
    2086:	3c 00 39    	bra       NC, 0x2100 <.L2>
    2088:	18 00 78    	mov.w     [w8], w0
    208a:	22 00 29    	mov.w     #0x9002, w2
    208c:	02 01 60    	and.w     w0, w2, w2
    208e:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    2090:	07 00 32    	bra       Z, 0x20a0 <.L3>
    2092:	01 20 24    	mov.w     #0x4200, w1
    2094:	00 00 e0    	cp0.w     w0
    2096:	01 00 3d    	bra       GE, 0x209a <.L4>
    2098:	01 20 20    	mov.w     #0x200, w1

0000209a <.L4>:
    209a:	00 8c 70    	ior.w     w1, w0, [w8]
    209c:	00 80 eb    	setm.w    w0
    209e:	30 00 37    	bra       0x2100 <.L2>

000020a0 <.L3>:
    20a0:	02 00 26    	mov.w     #0x6000, w2
    20a2:	02 00 60    	and.w     w0, w2, w0
    20a4:	82 0f 50    	sub.w     w0, w2, [w15]
    20a6:	09 00 3a    	bra       NZ, 0x20ba <.L5>
    20a8:	38 00 90    	mov.w     [w8+6], w0
    20aa:	80 8f 50    	sub.w     w1, w0, [w15]
    20ac:	06 00 39    	bra       NC, 0x20ba <.L5>
    20ae:	08 00 78    	mov.w     w8, w0
    20b0:	08 ff 07    	rcall     0x1ec2 <__DNKfflush>
    20b2:	80 00 78    	mov.w     w0, w1
    20b4:	00 80 eb    	setm.w    w0
    20b6:	01 00 e0    	cp0.w     w1
    20b8:	23 00 3a    	bra       NZ, 0x2100 <.L2>

000020ba <.L5>:
    20ba:	18 05 78    	mov.w     [w8], w10
    20bc:	00 c0 20    	mov.w     #0xc00, w0
    20be:	00 00 65    	and.w     w10, w0, w0
    20c0:	18 00 3a    	bra       NZ, 0x20f2 <.L6>
    20c2:	a8 04 90    	mov.w     [w8+4], w9
    20c4:	60 02 20    	mov.w     #0x26, w0
    20c6:	08 00 40    	add.w     w0, w8, w0
    20c8:	80 8f 54    	sub.w     w9, w0, [w15]
    20ca:	13 00 3a    	bra       NZ, 0x20f2 <.L6>
    20cc:	00 20 20    	mov.w     #0x200, w0
    20ce:	95 fa 07    	rcall     0x15fa <_malloc>
    20d0:	20 04 98    	mov.w     w0, [w8+4]
    20d2:	00 00 e0    	cp0.w     w0
    20d4:	05 00 3a    	bra       NZ, 0x20e0 <.L7>
    20d6:	29 04 98    	mov.w     w9, [w8+4]
    20d8:	49 04 98    	mov.w     w9, [w8+8]
    20da:	89 04 e8    	inc.w     w9, w9
    20dc:	39 04 98    	mov.w     w9, [w8+6]
    20de:	08 00 37    	bra       0x20f0 <.L11>

000020e0 <.L7>:
    20e0:	0a 60 a0    	bset.w    w10, #0x6
    20e2:	0a 0c 78    	mov.w     w10, [w8]
    20e4:	40 04 98    	mov.w     w0, [w8+8]
    20e6:	01 20 20    	mov.w     #0x200, w1
    20e8:	80 80 40    	add.w     w1, w0, w1
    20ea:	31 04 98    	mov.w     w1, [w8+6]
    20ec:	40 0c 98    	mov.w     w0, [w8+24]
    20ee:	50 0c 98    	mov.w     w0, [w8+26]

000020f0 <.L11>:
    20f0:	f9 01 07    	rcall     0x24e4 <__Closreg>

000020f2 <.L6>:
    20f2:	28 00 90    	mov.w     [w8+4], w0
    20f4:	50 04 98    	mov.w     w0, [w8+10]
    20f6:	38 00 90    	mov.w     [w8+6], w0
    20f8:	60 04 98    	mov.w     w0, [w8+12]
    20fa:	00 00 26    	mov.w     #0x6000, w0
    20fc:	18 0c 70    	ior.w     w0, [w8], [w8]
    20fe:	00 00 eb    	clr.w     w0

00002100 <.L2>:
    2100:	4f 05 78    	mov.w     [--w15], w10
    2102:	4f 04 be    	mov.d     [--w15], w8
    2104:	00 00 06    	return    

00002106 <__Litob>:
    2106:	fc 87 47    	add.w     w15, #0x1c, w15
    2108:	88 9f be    	mov.d     w8, [w15++]
    210a:	8a 9f be    	mov.d     w10, [w15++]
    210c:	8c 9f be    	mov.d     w12, [w15++]
    210e:	8e 1f 78    	mov.w     w14, [w15++]
    2110:	00 06 78    	mov.w     w0, w12
    2112:	80 c5 b3    	mov.b     #0x58, w0
    2114:	80 cf 50    	sub.b     w1, w0, [w15]
    2116:	0a 00 32    	bra       Z, 0x212c <.L35>
    2118:	77 40 40    	add.b     w0, #0x17, w0
    211a:	80 cf 50    	sub.b     w1, w0, [w15]
    211c:	0a 00 32    	bra       Z, 0x2132 <.L36>
    211e:	69 40 40    	add.b     w0, #0x9, w0
    2120:	80 cf 50    	sub.b     w1, w0, [w15]
    2122:	0b 00 32    	bra       Z, 0x213a <.L37>
    2124:	f0 5c 21    	mov.w     #0x15cf, w0
    2126:	80 bf 9f    	mov.w     w0, [w15-16]
    2128:	ae 00 20    	mov.w     #0xa, w14
    212a:	0a 00 37    	bra       0x2140 <.L2>

0000212c <.L35>:
    212c:	e2 5b 21    	mov.w     #0x15be, w2
    212e:	82 bf 9f    	mov.w     w2, [w15-16]
    2130:	06 00 37    	bra       0x213e <.L46>

00002132 <.L36>:
    2132:	f3 5c 21    	mov.w     #0x15cf, w3
    2134:	83 bf 9f    	mov.w     w3, [w15-16]
    2136:	8e 00 20    	mov.w     #0x8, w14
    2138:	03 00 37    	bra       0x2140 <.L2>

0000213a <.L37>:
    213a:	f4 5c 21    	mov.w     #0x15cf, w4
    213c:	84 bf 9f    	mov.w     w4, [w15-16]

0000213e <.L46>:
    213e:	0e 01 20    	mov.w     #0x10, w14

00002140 <.L2>:
    2140:	3c 02 be    	mov.d     [w12++], w4
    2142:	2c 03 be    	mov.d     [w12--], w6
    2144:	06 05 be    	mov.d     w6, w10
    2146:	04 04 be    	mov.d     w4, w8
    2148:	40 c6 b3    	mov.b     #0x64, w0
    214a:	80 cf 50    	sub.b     w1, w0, [w15]
    214c:	03 00 32    	bra       Z, 0x2154 <.L3>
    214e:	65 40 40    	add.b     w0, #0x5, w0
    2150:	80 cf 50    	sub.b     w1, w0, [w15]
    2152:	0b 00 3a    	bra       NZ, 0x216a <.L4>

00002154 <.L3>:
    2154:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2156:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2158:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    215a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    215c:	06 00 3d    	bra       GE, 0x216a <.L4>
    215e:	60 00 b8    	mul.uu    w0, #0x0, w0
    2160:	60 11 b8    	mul.uu    w2, #0x0, w2
    2162:	04 04 50    	sub.w     w0, w4, w8
    2164:	85 84 58    	subb.w    w1, w5, w9
    2166:	06 05 59    	subb.w    w2, w6, w10
    2168:	87 85 59    	subb.w    w3, w7, w11

0000216a <.L4>:
    216a:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    216c:	04 00 32    	bra       Z, 0x2176 <.L38>
    216e:	40 00 20    	mov.w     #0x4, w0
    2170:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    2172:	38 00 3a    	bra       NZ, 0x21e4 <.L51>
    2174:	01 00 37    	bra       0x2178 <.L6>

00002176 <.L38>:
    2176:	30 00 20    	mov.w     #0x3, w0

00002178 <.L6>:
    2178:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    217a:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    217c:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    217e:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    2180:	04 00 3a    	bra       NZ, 0x218a <.L8>
    2182:	dc 08 90    	mov.w     [w12+26], w1
    2184:	8d 01 20    	mov.w     #0x18, w13
    2186:	01 00 e0    	cp0.w     w1
    2188:	06 00 32    	bra       Z, 0x2196 <.L9>

0000218a <.L8>:
    218a:	8e 00 e9    	dec.w     w14, w1
    218c:	88 80 60    	and.w     w1, w8, w1
    218e:	8f ba 97    	mov.w     [w15-16], w5
    2190:	e5 c0 78    	mov.b     [w5+w1], w1
    2192:	f1 ef 9f    	mov.b     w1, [w15-17]
    2194:	7d 01 20    	mov.w     #0x17, w13

00002196 <.L9>:
    2196:	80 00 78    	mov.w     w0, w1

00002198 <.LB101>:
    2198:	81 00 e9    	dec.w     w1, w1
    219a:	05 00 33    	bra       N, 0x21a6 <.LE101>
    219c:	8b 05 d1    	lsr.w     w11, w11
    219e:	0a 85 d3    	rrc.w     w10, w10
    21a0:	89 84 d3    	rrc.w     w9, w9
    21a2:	08 84 d3    	rrc.w     w8, w8
    21a4:	f9 ff 37    	bra       0x2198 <.LB101>

000021a6 <.LE101>:
    21a6:	08 9e be    	mov.d     w8, [w12++]
    21a8:	0a 96 be    	mov.d     w10, [w12--]
    21aa:	12 00 37    	bra       0x21d0 <.L10>

000021ac <.L12>:
    21ac:	8d 06 e9    	dec.w     w13, w13
    21ae:	8e 00 e9    	dec.w     w14, w1
    21b0:	84 80 60    	and.w     w1, w4, w1
    21b2:	0f b9 97    	mov.w     [w15-16], w2
    21b4:	e2 c1 78    	mov.b     [w2+w1], w3
    21b6:	82 fd 2f    	mov.w     #0xffd8, w2
    21b8:	0f 01 41    	add.w     w2, w15, w2
    21ba:	03 f1 7e    	mov.b     w3, [w2+w13]
    21bc:	80 00 78    	mov.w     w0, w1

000021be <.LB115>:
    21be:	81 00 e9    	dec.w     w1, w1
    21c0:	05 00 33    	bra       N, 0x21cc <.LE115>
    21c2:	87 83 d1    	asr.w     w7, w7
    21c4:	06 83 d3    	rrc.w     w6, w6
    21c6:	85 82 d3    	rrc.w     w5, w5
    21c8:	04 82 d3    	rrc.w     w4, w4
    21ca:	f9 ff 37    	bra       0x21be <.LB115>

000021cc <.LE115>:
    21cc:	04 9e be    	mov.d     w4, [w12++]
    21ce:	06 96 be    	mov.d     w6, [w12--]

000021d0 <.L10>:
    21d0:	3c 02 be    	mov.d     [w12++], w4
    21d2:	2c 03 be    	mov.d     [w12--], w6
    21d4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    21d6:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    21d8:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    21da:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    21dc:	8b 00 34    	bra       LE, 0x22f4 <.L11>
    21de:	0d 00 e0    	cp0.w     w13
    21e0:	e5 ff 3c    	bra       GT, 0x21ac <.L12>
    21e2:	88 00 37    	bra       0x22f4 <.L11>

000021e4 <.L51>:
    21e4:	2c 60 90    	mov.b     [w12+34], w0
    21e6:	81 c6 b3    	mov.b     #0x68, w1
    21e8:	81 4f 50    	sub.b     w0, w1, [w15]
    21ea:	0b 00 32    	bra       Z, 0x2202 <.L14>
    21ec:	06 00 3c    	bra       GT, 0x21fa <.L16>
    21ee:	00 04 e0    	cp0.b     w0
    21f0:	08 00 32    	bra       Z, 0x2202 <.L14>
    21f2:	e6 c0 50    	sub.b     w1, #0x6, w1
    21f4:	81 4f 50    	sub.b     w0, w1, [w15]
    21f6:	4e 00 3a    	bra       NZ, 0x2294 <.L13>
    21f8:	04 00 37    	bra       0x2202 <.L14>

000021fa <.L16>:
    21fa:	c1 c6 b3    	mov.b     #0x6c, w1
    21fc:	81 4f 50    	sub.b     w0, w1, [w15]
    21fe:	4a 00 3a    	bra       NZ, 0x2294 <.L13>
    2200:	21 00 37    	bra       0x2244 <.L52>

00002202 <.L14>:
    2202:	08 00 e0    	cp0.w     w8
    2204:	04 00 3a    	bra       NZ, 0x220e <.L17>
    2206:	5c 08 90    	mov.w     [w12+26], w0
    2208:	8d 01 20    	mov.w     #0x18, w13
    220a:	00 00 e0    	cp0.w     w0
    220c:	06 00 32    	bra       Z, 0x221a <.L18>

0000220e <.L17>:
    220e:	11 00 09    	repeat    #0x11
    2210:	0e 84 d8    	div.uw    w8, w14
    2212:	0f b9 97    	mov.w     [w15-16], w2
    2214:	e2 c0 78    	mov.b     [w2+w1], w1
    2216:	f1 ef 9f    	mov.b     w1, [w15-17]
    2218:	7d 01 20    	mov.w     #0x17, w13

0000221a <.L18>:
    221a:	11 00 09    	repeat    #0x11
    221c:	0e 84 d8    	div.uw    w8, w14
    221e:	0a 00 37    	bra       0x2234 <.L47>

00002220 <.L21>:
    2220:	11 00 09    	repeat    #0x11
    2222:	0e 04 d8    	div.sw    w8, w14
    2224:	8d 06 e9    	dec.w     w13, w13
    2226:	0e 81 b9    	mul.ss    w0, w14, w2
    2228:	02 04 54    	sub.w     w8, w2, w8
    222a:	8f b8 97    	mov.w     [w15-16], w1
    222c:	61 41 7c    	mov.b     [w1+w8], w2
    222e:	81 fd 2f    	mov.w     #0xffd8, w1
    2230:	8f 80 40    	add.w     w1, w15, w1
    2232:	82 f0 7e    	mov.b     w2, [w1+w13]

00002234 <.L47>:
    2234:	00 04 78    	mov.w     w0, w8
    2236:	08 00 e0    	cp0.w     w8
    2238:	02 00 32    	bra       Z, 0x223e <.L20>
    223a:	0d 00 e0    	cp0.w     w13
    223c:	f1 ff 3c    	bra       GT, 0x2220 <.L21>

0000223e <.L20>:
    223e:	cf c4 de    	asr.w     w8, #0xf, w9
    2240:	61 4d b9    	mul.su    w9, #0x1, w10
    2242:	25 00 37    	bra       0x228e <.L50>

00002244 <.L52>:
    2244:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2246:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    2248:	04 00 3a    	bra       NZ, 0x2252 <.L22>
    224a:	5c 08 90    	mov.w     [w12+26], w0
    224c:	8d 01 20    	mov.w     #0x18, w13
    224e:	00 00 e0    	cp0.w     w0
    2250:	07 00 32    	bra       Z, 0x2260 <.L23>

00002252 <.L22>:
    2252:	61 71 b9    	mul.su    w14, #0x1, w2
    2254:	08 00 be    	mov.d     w8, w0
    2256:	d6 01 07    	rcall     0x2604 <___umodsi3>
    2258:	8f b9 97    	mov.w     [w15-16], w3
    225a:	e3 41 78    	mov.b     [w3+w0], w3
    225c:	f3 ef 9f    	mov.b     w3, [w15-17]
    225e:	7d 01 20    	mov.w     #0x17, w13

00002260 <.L23>:
    2260:	61 71 b9    	mul.su    w14, #0x1, w2
    2262:	08 00 be    	mov.d     w8, w0
    2264:	bf 01 07    	rcall     0x25e4 <___udivsi3>
    2266:	0b 00 37    	bra       0x227e <.L48>

00002268 <.L26>:
    2268:	61 71 b9    	mul.su    w14, #0x1, w2
    226a:	08 00 be    	mov.d     w8, w0
    226c:	ac 01 07    	rcall     0x25c6 <___divsi3>
    226e:	8d 06 e9    	dec.w     w13, w13
    2270:	00 f1 b9    	mul.ss    w14, w0, w2
    2272:	02 04 54    	sub.w     w8, w2, w8
    2274:	0f ba 97    	mov.w     [w15-16], w4
    2276:	e4 42 7c    	mov.b     [w4+w8], w5
    2278:	84 fd 2f    	mov.w     #0xffd8, w4
    227a:	0f 02 42    	add.w     w4, w15, w4
    227c:	05 f2 7e    	mov.b     w5, [w4+w13]

0000227e <.L48>:
    227e:	00 04 be    	mov.d     w0, w8
    2280:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2282:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2284:	02 00 32    	bra       Z, 0x228a <.L25>
    2286:	0d 00 e0    	cp0.w     w13
    2288:	ef ff 3c    	bra       GT, 0x2268 <.L26>

0000228a <.L25>:
    228a:	4f cd de    	asr.w     w9, #0xf, w10
    228c:	8a 05 78    	mov.w     w10, w11

0000228e <.L50>:
    228e:	08 9e be    	mov.d     w8, [w12++]
    2290:	0a 96 be    	mov.d     w10, [w12--]
    2292:	30 00 37    	bra       0x22f4 <.L11>

00002294 <.L13>:
    2294:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2296:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    2298:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    229a:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    229c:	04 00 3a    	bra       NZ, 0x22a6 <.L27>
    229e:	5c 08 90    	mov.w     [w12+26], w0
    22a0:	8d 01 20    	mov.w     #0x18, w13
    22a2:	00 00 e0    	cp0.w     w0
    22a4:	09 00 32    	bra       Z, 0x22b8 <.L28>

000022a6 <.L27>:
    22a6:	61 72 b9    	mul.su    w14, #0x1, w4
    22a8:	61 2b b9    	mul.su    w5, #0x1, w6
    22aa:	08 00 be    	mov.d     w8, w0
    22ac:	0a 01 be    	mov.d     w10, w2
    22ae:	53 02 07    	rcall     0x2756 <___umoddi3>
    22b0:	0f ba 97    	mov.w     [w15-16], w4
    22b2:	64 42 78    	mov.b     [w4+w0], w4
    22b4:	f4 ef 9f    	mov.b     w4, [w15-17]
    22b6:	7d 01 20    	mov.w     #0x17, w13

000022b8 <.L28>:
    22b8:	61 72 b9    	mul.su    w14, #0x1, w4
    22ba:	61 2b b9    	mul.su    w5, #0x1, w6
    22bc:	08 00 be    	mov.d     w8, w0
    22be:	0a 01 be    	mov.d     w10, w2
    22c0:	43 02 07    	rcall     0x2748 <___udivdi3>
    22c2:	0d 00 37    	bra       0x22de <.L49>

000022c4 <.L30>:
    22c4:	61 72 b9    	mul.su    w14, #0x1, w4
    22c6:	61 2b b9    	mul.su    w5, #0x1, w6
    22c8:	08 00 be    	mov.d     w8, w0
    22ca:	0a 01 be    	mov.d     w10, w2
    22cc:	48 02 07    	rcall     0x275e <___divdi3>
    22ce:	8d 06 e9    	dec.w     w13, w13
    22d0:	00 f2 b9    	mul.ss    w14, w0, w4
    22d2:	04 04 54    	sub.w     w8, w4, w8
    22d4:	8f ba 97    	mov.w     [w15-16], w5
    22d6:	65 42 7c    	mov.b     [w5+w8], w4
    22d8:	85 fd 2f    	mov.w     #0xffd8, w5
    22da:	8f 82 42    	add.w     w5, w15, w5
    22dc:	84 f2 7e    	mov.b     w4, [w5+w13]

000022de <.L49>:
    22de:	00 9e be    	mov.d     w0, [w12++]
    22e0:	02 96 be    	mov.d     w2, [w12--]
    22e2:	3c 04 be    	mov.d     [w12++], w8
    22e4:	2c 05 be    	mov.d     [w12--], w10
    22e6:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    22e8:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    22ea:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    22ec:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    22ee:	02 00 34    	bra       LE, 0x22f4 <.L11>
    22f0:	0d 00 e0    	cp0.w     w13
    22f2:	e8 ff 3c    	bra       GT, 0x22c4 <.L30>

000022f4 <.L11>:
    22f4:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    22f6:	10 00 3a    	bra       NZ, 0x2318 <.L31>
    22f8:	0c 10 90    	mov.w     [w12+32], w0
    22fa:	00 38 a3    	btst.z    w0, #0x3
    22fc:	0d 00 32    	bra       Z, 0x2318 <.L31>
    22fe:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    2300:	06 00 3e    	bra       GTU, 0x230e <.L32>
    2302:	85 fd 2f    	mov.w     #0xffd8, w5
    2304:	8f 82 42    	add.w     w5, w15, w5
    2306:	e5 c0 7e    	mov.b     [w5+w13], w1
    2308:	00 c3 b3    	mov.b     #0x30, w0
    230a:	80 cf 50    	sub.b     w1, w0, [w15]
    230c:	05 00 32    	bra       Z, 0x2318 <.L31>

0000230e <.L32>:
    230e:	8d 06 e9    	dec.w     w13, w13
    2310:	02 c3 b3    	mov.b     #0x30, w2
    2312:	81 fd 2f    	mov.w     #0xffd8, w1
    2314:	8f 80 40    	add.w     w1, w15, w1
    2316:	82 f0 7e    	mov.b     w2, [w1+w13]

00002318 <.L31>:
    2318:	78 81 16    	subr.w    w13, #0x18, w2
    231a:	12 0e 98    	mov.w     w2, [w12+18]
    231c:	6c 00 90    	mov.w     [w12+12], w0
    231e:	83 fd 2f    	mov.w     #0xffd8, w3
    2320:	8f 81 41    	add.w     w3, w15, w3
    2322:	8d 80 41    	add.w     w3, w13, w1
    2324:	94 f9 07    	rcall     0x164e <_memcpy>
    2326:	1c 08 90    	mov.w     [w12+18], w0
    2328:	dc 08 90    	mov.w     [w12+26], w1
    232a:	81 0f 50    	sub.w     w0, w1, [w15]
    232c:	06 00 3d    	bra       GE, 0x233a <.L33>
    232e:	00 80 50    	sub.w     w1, w0, w0
    2330:	00 0e 98    	mov.w     w0, [w12+16]
    2332:	0c 10 90    	mov.w     [w12+32], w0
    2334:	00 40 a1    	bclr.w    w0, #0x4
    2336:	00 16 98    	mov.w     w0, [w12+32]
    2338:	0f 00 37    	bra       0x2358 <.L1>

0000233a <.L33>:
    233a:	01 00 e0    	cp0.w     w1
    233c:	0d 00 3d    	bra       GE, 0x2358 <.L1>
    233e:	8c 10 90    	mov.w     [w12+32], w1
    2340:	f4 80 60    	and.w     w1, #0x14, w1
    2342:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    2344:	09 00 3a    	bra       NZ, 0x2358 <.L1>
    2346:	7c 09 90    	mov.w     [w12+30], w2
    2348:	fc 00 90    	mov.w     [w12+14], w1
    234a:	81 00 51    	sub.w     w2, w1, w1
    234c:	0c 09 90    	mov.w     [w12+16], w2
    234e:	82 80 50    	sub.w     w1, w2, w1
    2350:	00 80 50    	sub.w     w1, w0, w0
    2352:	42 40 a9    	bclr.b    0x42, #0x2
    2354:	01 00 34    	bra       LE, 0x2358 <.L1>
    2356:	00 0e 98    	mov.w     w0, [w12+16]

00002358 <.L1>:
    2358:	4f 07 78    	mov.w     [--w15], w14
    235a:	4f 06 be    	mov.d     [--w15], w12
    235c:	4f 05 be    	mov.d     [--w15], w10
    235e:	4f 04 be    	mov.d     [--w15], w8
    2360:	cf 01 b1    	sub.w     #0x1c, w15
    2362:	00 00 06    	return    

00002364 <__Puttxt>:
    2364:	04 00 fa    	lnk       #0x4
    2366:	88 9f be    	mov.d     w8, [w15++]
    2368:	8a 9f be    	mov.d     w10, [w15++]
    236a:	8c 1f 78    	mov.w     w12, [w15++]
    236c:	00 04 78    	mov.w     w0, w8
    236e:	01 06 78    	mov.w     w1, w12
    2370:	f8 0d 90    	mov.w     [w8+30], w11
    2372:	78 00 90    	mov.w     [w8+14], w0
    2374:	80 85 55    	sub.w     w11, w0, w11
    2376:	08 08 90    	mov.w     [w8+16], w0
    2378:	80 85 55    	sub.w     w11, w0, w11
    237a:	18 08 90    	mov.w     [w8+18], w0
    237c:	80 85 55    	sub.w     w11, w0, w11
    237e:	28 08 90    	mov.w     [w8+20], w0
    2380:	80 85 55    	sub.w     w11, w0, w11
    2382:	38 08 90    	mov.w     [w8+22], w0
    2384:	80 85 55    	sub.w     w11, w0, w11
    2386:	48 08 90    	mov.w     [w8+24], w0
    2388:	80 85 55    	sub.w     w11, w0, w11
    238a:	00 02 22    	mov.w     #0x2020, w0
    238c:	90 bf 9f    	mov.w     w0, [w15-14]
    238e:	00 03 23    	mov.w     #0x3030, w0
    2390:	a0 bf 9f    	mov.w     w0, [w15-12]
    2392:	08 10 90    	mov.w     [w8+32], w0
    2394:	00 28 a3    	btst.z    w0, #0x2
    2396:	15 00 3a    	bra       NZ, 0x23c2 <.L2>
    2398:	0b 00 e0    	cp0.w     w11
    239a:	13 00 34    	bra       LE, 0x23c2 <.L2>
    239c:	0b 05 78    	mov.w     w11, w10

0000239e <.L5>:
    239e:	8a 04 78    	mov.w     w10, w9
    23a0:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    23a2:	01 00 36    	bra       LEU, 0x23a6 <.L3>
    23a4:	29 00 20    	mov.w     #0x2, w9

000023a6 <.L3>:
    23a6:	c8 01 90    	mov.w     [w8+8], w3
    23a8:	09 01 78    	mov.w     w9, w2
    23aa:	ee 80 57    	sub.w     w15, #0xe, w1
    23ac:	58 00 90    	mov.w     [w8+10], w0
    23ae:	03 00 01    	call      w3
    23b0:	50 04 98    	mov.w     w0, [w8+10]
    23b2:	00 00 e0    	cp0.w     w0
    23b4:	8c 00 32    	bra       Z, 0x24ce <.L29>
    23b6:	68 08 90    	mov.w     [w8+28], w0
    23b8:	09 00 40    	add.w     w0, w9, w0
    23ba:	60 0c 98    	mov.w     w0, [w8+28]
    23bc:	09 05 55    	sub.w     w10, w9, w10
    23be:	42 40 a9    	bclr.b    0x42, #0x2
    23c0:	ee ff 3c    	bra       GT, 0x239e <.L5>

000023c2 <.L2>:
    23c2:	78 01 90    	mov.w     [w8+14], w2
    23c4:	02 00 e0    	cp0.w     w2
    23c6:	0c 00 34    	bra       LE, 0x23e0 <.L6>
    23c8:	c8 01 90    	mov.w     [w8+8], w3
    23ca:	8c 00 78    	mov.w     w12, w1
    23cc:	58 00 90    	mov.w     [w8+10], w0
    23ce:	03 00 01    	call      w3
    23d0:	50 04 98    	mov.w     w0, [w8+10]
    23d2:	80 80 eb    	setm.w    w1
    23d4:	00 00 e0    	cp0.w     w0
    23d6:	7c 00 32    	bra       Z, 0x24d0 <.L4>
    23d8:	e8 08 90    	mov.w     [w8+28], w1
    23da:	78 00 90    	mov.w     [w8+14], w0
    23dc:	00 80 40    	add.w     w1, w0, w0
    23de:	60 0c 98    	mov.w     w0, [w8+28]

000023e0 <.L6>:
    23e0:	88 0c 90    	mov.w     [w8+16], w9

000023e2 <.L30>:
    23e2:	09 00 e0    	cp0.w     w9
    23e4:	11 00 34    	bra       LE, 0x2408 <.L7>
    23e6:	09 05 78    	mov.w     w9, w10
    23e8:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    23ea:	01 00 36    	bra       LEU, 0x23ee <.L8>
    23ec:	2a 00 20    	mov.w     #0x2, w10

000023ee <.L8>:
    23ee:	c8 01 90    	mov.w     [w8+8], w3
    23f0:	0a 01 78    	mov.w     w10, w2
    23f2:	ec 80 57    	sub.w     w15, #0xc, w1
    23f4:	58 00 90    	mov.w     [w8+10], w0
    23f6:	03 00 01    	call      w3
    23f8:	50 04 98    	mov.w     w0, [w8+10]
    23fa:	00 00 e0    	cp0.w     w0
    23fc:	68 00 32    	bra       Z, 0x24ce <.L29>
    23fe:	68 08 90    	mov.w     [w8+28], w0
    2400:	0a 00 40    	add.w     w0, w10, w0
    2402:	60 0c 98    	mov.w     w0, [w8+28]
    2404:	8a 84 54    	sub.w     w9, w10, w9
    2406:	ed ff 37    	bra       0x23e2 <.L30>

00002408 <.L7>:
    2408:	18 09 90    	mov.w     [w8+18], w2
    240a:	02 00 e0    	cp0.w     w2
    240c:	0c 00 34    	bra       LE, 0x2426 <.L10>
    240e:	c8 01 90    	mov.w     [w8+8], w3
    2410:	e8 00 90    	mov.w     [w8+12], w1
    2412:	58 00 90    	mov.w     [w8+10], w0
    2414:	03 00 01    	call      w3
    2416:	50 04 98    	mov.w     w0, [w8+10]
    2418:	80 80 eb    	setm.w    w1
    241a:	00 00 e0    	cp0.w     w0
    241c:	59 00 32    	bra       Z, 0x24d0 <.L4>
    241e:	e8 08 90    	mov.w     [w8+28], w1
    2420:	18 08 90    	mov.w     [w8+18], w0
    2422:	00 80 40    	add.w     w1, w0, w0
    2424:	60 0c 98    	mov.w     w0, [w8+28]

00002426 <.L10>:
    2426:	a8 0c 90    	mov.w     [w8+20], w9

00002428 <.L31>:
    2428:	09 00 e0    	cp0.w     w9
    242a:	11 00 34    	bra       LE, 0x244e <.L11>
    242c:	09 05 78    	mov.w     w9, w10
    242e:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    2430:	01 00 36    	bra       LEU, 0x2434 <.L12>
    2432:	2a 00 20    	mov.w     #0x2, w10

00002434 <.L12>:
    2434:	c8 01 90    	mov.w     [w8+8], w3
    2436:	0a 01 78    	mov.w     w10, w2
    2438:	ec 80 57    	sub.w     w15, #0xc, w1
    243a:	58 00 90    	mov.w     [w8+10], w0
    243c:	03 00 01    	call      w3
    243e:	50 04 98    	mov.w     w0, [w8+10]
    2440:	00 00 e0    	cp0.w     w0
    2442:	45 00 32    	bra       Z, 0x24ce <.L29>
    2444:	68 08 90    	mov.w     [w8+28], w0
    2446:	0a 00 40    	add.w     w0, w10, w0
    2448:	60 0c 98    	mov.w     w0, [w8+28]
    244a:	8a 84 54    	sub.w     w9, w10, w9
    244c:	ed ff 37    	bra       0x2428 <.L31>

0000244e <.L11>:
    244e:	38 09 90    	mov.w     [w8+22], w2
    2450:	02 00 e0    	cp0.w     w2
    2452:	0e 00 34    	bra       LE, 0x2470 <.L14>
    2454:	e8 00 90    	mov.w     [w8+12], w1
    2456:	18 08 90    	mov.w     [w8+18], w0
    2458:	80 80 40    	add.w     w1, w0, w1
    245a:	c8 01 90    	mov.w     [w8+8], w3
    245c:	58 00 90    	mov.w     [w8+10], w0
    245e:	03 00 01    	call      w3
    2460:	50 04 98    	mov.w     w0, [w8+10]
    2462:	80 80 eb    	setm.w    w1
    2464:	00 00 e0    	cp0.w     w0
    2466:	34 00 32    	bra       Z, 0x24d0 <.L4>
    2468:	e8 08 90    	mov.w     [w8+28], w1
    246a:	38 08 90    	mov.w     [w8+22], w0
    246c:	00 80 40    	add.w     w1, w0, w0
    246e:	60 0c 98    	mov.w     w0, [w8+28]

00002470 <.L14>:
    2470:	c8 0c 90    	mov.w     [w8+24], w9

00002472 <.L32>:
    2472:	09 00 e0    	cp0.w     w9
    2474:	11 00 34    	bra       LE, 0x2498 <.L15>
    2476:	09 05 78    	mov.w     w9, w10
    2478:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    247a:	01 00 36    	bra       LEU, 0x247e <.L16>
    247c:	2a 00 20    	mov.w     #0x2, w10

0000247e <.L16>:
    247e:	c8 01 90    	mov.w     [w8+8], w3
    2480:	0a 01 78    	mov.w     w10, w2
    2482:	ec 80 57    	sub.w     w15, #0xc, w1
    2484:	58 00 90    	mov.w     [w8+10], w0
    2486:	03 00 01    	call      w3
    2488:	50 04 98    	mov.w     w0, [w8+10]
    248a:	00 00 e0    	cp0.w     w0
    248c:	20 00 32    	bra       Z, 0x24ce <.L29>
    248e:	68 08 90    	mov.w     [w8+28], w0
    2490:	0a 00 40    	add.w     w0, w10, w0
    2492:	60 0c 98    	mov.w     w0, [w8+28]
    2494:	8a 84 54    	sub.w     w9, w10, w9
    2496:	ed ff 37    	bra       0x2472 <.L32>

00002498 <.L15>:
    2498:	08 10 90    	mov.w     [w8+32], w0
    249a:	80 00 eb    	clr.w     w1
    249c:	00 28 a3    	btst.z    w0, #0x2
    249e:	18 00 32    	bra       Z, 0x24d0 <.L4>
    24a0:	0b 00 e0    	cp0.w     w11
    24a2:	16 00 34    	bra       LE, 0x24d0 <.L4>
    24a4:	8b 04 78    	mov.w     w11, w9

000024a6 <.L19>:
    24a6:	09 05 78    	mov.w     w9, w10
    24a8:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    24aa:	01 00 36    	bra       LEU, 0x24ae <.L18>
    24ac:	2a 00 20    	mov.w     #0x2, w10

000024ae <.L18>:
    24ae:	c8 01 90    	mov.w     [w8+8], w3
    24b0:	0a 01 78    	mov.w     w10, w2
    24b2:	ee 80 57    	sub.w     w15, #0xe, w1
    24b4:	58 00 90    	mov.w     [w8+10], w0
    24b6:	03 00 01    	call      w3
    24b8:	50 04 98    	mov.w     w0, [w8+10]
    24ba:	00 00 e0    	cp0.w     w0
    24bc:	08 00 32    	bra       Z, 0x24ce <.L29>
    24be:	68 08 90    	mov.w     [w8+28], w0
    24c0:	0a 00 40    	add.w     w0, w10, w0
    24c2:	60 0c 98    	mov.w     w0, [w8+28]
    24c4:	8a 84 54    	sub.w     w9, w10, w9
    24c6:	42 40 a9    	bclr.b    0x42, #0x2
    24c8:	ee ff 3c    	bra       GT, 0x24a6 <.L19>
    24ca:	80 00 eb    	clr.w     w1
    24cc:	01 00 37    	bra       0x24d0 <.L4>

000024ce <.L29>:
    24ce:	80 80 eb    	setm.w    w1

000024d0 <.L4>:
    24d0:	01 00 78    	mov.w     w1, w0
    24d2:	4f 06 78    	mov.w     [--w15], w12
    24d4:	4f 05 be    	mov.d     [--w15], w10
    24d6:	4f 04 be    	mov.d     [--w15], w8
    24d8:	00 80 fa    	ulnk      
    24da:	00 00 06    	return    

000024dc <__Vacopy>:
    24dc:	01 08 78    	mov.w     w1, [w0]
    24de:	00 00 06    	return    

000024e0 <_closeallreg>:
    24e0:	60 58 22    	mov.w     #0x2586, w0
    24e2:	61 00 37    	bra       0x25a6 <__Atexit>

000024e4 <__Closreg>:
    24e4:	88 1f 78    	mov.w     w8, [w15++]
    24e6:	48 69 21    	mov.w     #0x1694, w8
    24e8:	18 04 e0    	cp0.b     [w8]
    24ea:	03 00 3a    	bra       NZ, 0x24f2 <.L2>
    24ec:	f9 ff 07    	rcall     0x24e0 <_closeallreg>
    24ee:	20 c0 b3    	mov.b     #0x2, w0
    24f0:	00 4c 78    	mov.b     w0, [w8]

000024f2 <.L2>:
    24f2:	4f 04 78    	mov.w     [--w15], w8
    24f4:	00 00 06    	return    

000024f6 <_fclose>:
    24f6:	88 9f be    	mov.d     w8, [w15++]
    24f8:	00 04 78    	mov.w     w0, w8
    24fa:	08 00 78    	mov.w     w8, w0
    24fc:	e2 fc 07    	rcall     0x1ec2 <__DNKfflush>
    24fe:	80 04 78    	mov.w     w0, w9
    2500:	00 04 20    	mov.w     #0x40, w0
    2502:	18 00 60    	and.w     w0, [w8], w0
    2504:	02 00 32    	bra       Z, 0x250a <.L5>
    2506:	28 00 90    	mov.w     [w8+4], w0
    2508:	5f fd 07    	rcall     0x1fc8 <_free>

0000250a <.L5>:
    250a:	00 00 eb    	clr.w     w0
    250c:	20 04 98    	mov.w     w0, [w8+4]
    250e:	38 40 90    	mov.b     [w8+3], w0
    2510:	00 04 e0    	cp0.b     w0
    2512:	05 00 35    	bra       LT, 0x251e <.L6>
    2514:	00 00 fb    	se        w0, w0
    2516:	79 f6 07    	rcall     0x120a <_close>
    2518:	00 00 e0    	cp0.w     w0
    251a:	01 00 32    	bra       Z, 0x251e <.L6>
    251c:	80 84 eb    	setm.w    w9

0000251e <.L6>:
    251e:	18 10 90    	mov.w     [w8+34], w0
    2520:	00 00 e0    	cp0.w     w0
    2522:	08 00 32    	bra       Z, 0x2534 <.L7>
    2524:	7b f6 07    	rcall     0x121c <_remove>
    2526:	00 00 e0    	cp0.w     w0
    2528:	01 00 32    	bra       Z, 0x252c <.L8>
    252a:	80 84 eb    	setm.w    w9

0000252c <.L8>:
    252c:	18 10 90    	mov.w     [w8+34], w0
    252e:	4c fd 07    	rcall     0x1fc8 <_free>
    2530:	00 00 eb    	clr.w     w0
    2532:	10 14 98    	mov.w     w0, [w8+34]

00002534 <.L7>:
    2534:	00 08 20    	mov.w     #0x80, w0
    2536:	18 00 60    	and.w     w0, [w8], w0
    2538:	15 00 32    	bra       Z, 0x2564 <.L9>
    253a:	00 01 eb    	clr.w     w2
    253c:	60 00 b8    	mul.uu    w0, #0x0, w0

0000253e <.L12>:
    253e:	03 42 21    	mov.w     #0x1420, w3
    2540:	02 02 d0    	sl.w      w2, w4
    2542:	63 02 7a    	mov.w     [w3+w4], w4
    2544:	88 0f 52    	sub.w     w4, w8, [w15]
    2546:	05 00 3a    	bra       NZ, 0x2552 <.L10>
    2548:	00 00 40    	add.w     w0, w0, w0
    254a:	81 80 48    	addc.w    w1, w1, w1
    254c:	00 80 41    	add.w     w3, w0, w0
    254e:	00 08 eb    	clr.w     [w0]
    2550:	06 00 37    	bra       0x255e <.L11>

00002552 <.L10>:
    2552:	61 00 40    	add.w     w0, #0x1, w0
    2554:	e0 80 48    	addc.w    w1, #0x0, w1
    2556:	02 01 e8    	inc.w     w2, w2
    2558:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    255a:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    255c:	f0 ff 3a    	bra       NZ, 0x253e <.L12>

0000255e <.L11>:
    255e:	08 00 78    	mov.w     w8, w0
    2560:	33 fd 07    	rcall     0x1fc8 <_free>
    2562:	0e 00 37    	bra       0x2580 <.L13>

00002564 <.L9>:
    2564:	00 0c 78    	mov.w     w0, [w8]
    2566:	00 c0 eb    	setm.b    w0
    2568:	30 44 98    	mov.b     w0, [w8+3]
    256a:	60 02 20    	mov.w     #0x26, w0
    256c:	08 00 40    	add.w     w0, w8, w0
    256e:	20 04 98    	mov.w     w0, [w8+4]
    2570:	40 04 98    	mov.w     w0, [w8+8]
    2572:	50 04 98    	mov.w     w0, [w8+10]
    2574:	40 0c 98    	mov.w     w0, [w8+24]
    2576:	60 04 98    	mov.w     w0, [w8+12]
    2578:	50 0c 98    	mov.w     w0, [w8+26]
    257a:	70 04 98    	mov.w     w0, [w8+14]
    257c:	76 00 44    	add.w     w8, #0x16, w0
    257e:	00 0c 98    	mov.w     w0, [w8+16]

00002580 <.L13>:
    2580:	09 00 78    	mov.w     w9, w0
    2582:	4f 04 be    	mov.d     [--w15], w8
    2584:	00 00 06    	return    

00002586 <_closeall>:
    2586:	88 1f 78    	mov.w     w8, [w15++]
    2588:	00 04 eb    	clr.w     w8

0000258a <.L18>:
    258a:	61 40 b8    	mul.uu    w8, #0x1, w0
    258c:	e2 ff 2f    	mov.w     #0xfffe, w2
    258e:	f3 ff 2f    	mov.w     #0xffff, w3
    2590:	3c 00 07    	rcall     0x260a <___mulp32eds3>
    2592:	e2 42 21    	mov.w     #0x142e, w2
    2594:	62 00 78    	mov.w     [w2+w0], w0
    2596:	00 00 e0    	cp0.w     w0
    2598:	01 00 32    	bra       Z, 0x259c <.L17>
    259a:	ad ff 07    	rcall     0x24f6 <_fclose>

0000259c <.L17>:
    259c:	08 04 e8    	inc.w     w8, w8
    259e:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    25a0:	f4 ff 3a    	bra       NZ, 0x258a <.L18>
    25a2:	4f 04 78    	mov.w     [--w15], w8
    25a4:	00 00 06    	return    

000025a6 <__Atexit>:
    25a6:	01 00 20    	mov.w     #0x0, w1
    25a8:	01 00 e0    	cp0.w     w1
    25aa:	08 00 32    	bra       Z, 0x25bc <.L1>
    25ac:	01 00 80    	mov.w     0x0, w1
    25ae:	01 00 e0    	cp0.w     w1
    25b0:	05 00 32    	bra       Z, 0x25bc <.L1>
    25b2:	81 00 e9    	dec.w     w1, w1
    25b4:	01 00 88    	mov.w     w1, 0x0
    25b6:	81 00 d0    	sl.w      w1, w1
    25b8:	02 00 80    	mov.w     0x0, w2
    25ba:	00 b1 78    	mov.w     w0, [w2+w1]

000025bc <.L1>:
    25bc:	00 00 06    	return    

000025be <_doclose>:
    25be:	00 c0 da    	.pword 0xdac000
    25c0:	00 00 06    	return    

000025c2 <_doremove>:
    25c2:	00 c0 da    	.pword 0xdac000
    25c4:	00 00 06    	return    

000025c6 <___divsi3>:
    25c6:	83 9f 68    	xor.w     w1, w3, [w15++]
    25c8:	01 00 e0    	cp0.w     w1
    25ca:	02 00 3d    	bra       GE, 0x25d0 <divtestb>
    25cc:	60 00 10    	subr.w    w0, #0x0, w0
    25ce:	e0 80 18    	subbr.w   w1, #0x0, w1

000025d0 <divtestb>:
    25d0:	03 00 e0    	cp0.w     w3
    25d2:	02 00 3d    	bra       GE, 0x25d8 <calcquot>
    25d4:	60 01 11    	subr.w    w2, #0x0, w2
    25d6:	e0 81 19    	subbr.w   w3, #0x0, w3

000025d8 <calcquot>:
    25d8:	05 00 07    	rcall     0x25e4 <___udivsi3>
    25da:	4f 00 e0    	cp0.w     [--w15]
    25dc:	02 00 3b    	bra       NN, 0x25e2 <returnq>
    25de:	60 00 10    	subr.w    w0, #0x0, w0
    25e0:	e0 80 18    	subbr.w   w1, #0x0, w1

000025e2 <returnq>:
    25e2:	00 00 06    	return    

000025e4 <___udivsi3>:
    25e4:	60 22 b8    	mul.uu    w4, #0x0, w4
    25e6:	06 02 20    	mov.w     #0x20, w6

000025e8 <nextbit>:
    25e8:	00 00 d0    	sl.w      w0, w0
    25ea:	81 80 d2    	rlc.w     w1, w1
    25ec:	04 82 d2    	rlc.w     w4, w4
    25ee:	85 82 d2    	rlc.w     w5, w5
    25f0:	00 00 a0    	bset.w    w0, #0x0
    25f2:	02 02 52    	sub.w     w4, w2, w4
    25f4:	83 82 5a    	subb.w    w5, w3, w5
    25f6:	03 00 31    	bra       C, 0x25fe <iterate>
    25f8:	02 02 42    	add.w     w4, w2, w4
    25fa:	83 82 4a    	addc.w    w5, w3, w5
    25fc:	00 00 a1    	bclr.w    w0, #0x0

000025fe <iterate>:
    25fe:	06 03 e9    	dec.w     w6, w6
    2600:	f3 ff 3a    	bra       NZ, 0x25e8 <nextbit>
    2602:	00 00 06    	return    

00002604 <___umodsi3>:
    2604:	ef ff 07    	rcall     0x25e4 <___udivsi3>
    2606:	04 00 be    	mov.d     w4, w0
    2608:	00 00 06    	return    

0000260a <___mulp32eds3>:
    260a:	02 0a b9    	mul.su    w1, w2, w4
    260c:	00 1b b9    	mul.su    w3, w0, w6
    260e:	02 00 b8    	mul.uu    w0, w2, w0
    2610:	81 00 42    	add.w     w4, w1, w1
    2612:	81 00 43    	add.w     w6, w1, w1
    2614:	00 00 06    	return    

00002616 <___PplusBdi>:
    2616:	88 9f be    	mov.d     w8, [w15++]
    2618:	8a 9f be    	mov.d     w10, [w15++]
    261a:	30 04 42    	add.w     w4, [w0++], w8
    261c:	b0 84 4a    	addc.w    w5, [w0++], w9
    261e:	30 05 4b    	addc.w    w6, [w0++], w10
    2620:	90 85 4b    	addc.w    w7, [w0], w11
    2622:	60 00 b1    	sub.w     #0x6, w0
    2624:	08 98 be    	mov.d     w8, [w0++]
    2626:	0a 90 be    	mov.d     w10, [w0--]
    2628:	04 40 e1    	cp.w      w8, w4
    262a:	05 c8 e1    	cpb.w     w9, w5
    262c:	06 d0 e1    	cpb.w     w10, w6
    262e:	07 d8 e1    	cpb.w     w11, w7
    2630:	02 00 31    	bra       C, 0x2636 <.L1>
    2632:	68 00 40    	add.w     w0, #0x8, w0
    2634:	10 08 e8    	inc.w     [w0], [w0]

00002636 <.L1>:
    2636:	4f 05 be    	mov.d     [--w15], w10
    2638:	4f 04 be    	mov.d     [--w15], w8
    263a:	00 00 06    	return    

0000263c <___PminusBdi>:
    263c:	88 9f be    	mov.d     w8, [w15++]
    263e:	8a 9f be    	mov.d     w10, [w15++]
    2640:	30 04 be    	mov.d     [w0++], w8
    2642:	20 05 be    	mov.d     [w0--], w10
    2644:	04 18 54    	sub.w     w8, w4, [w0++]
    2646:	05 98 5c    	subb.w    w9, w5, [w0++]
    2648:	06 18 5d    	subb.w    w10, w6, [w0++]
    264a:	07 98 5d    	subb.w    w11, w7, [w0++]
    264c:	11 00 20    	mov.w     #0x1, w1
    264e:	04 40 e1    	cp.w      w8, w4
    2650:	05 c8 e1    	cpb.w     w9, w5
    2652:	06 d0 e1    	cpb.w     w10, w6
    2654:	07 d8 e1    	cpb.w     w11, w7
    2656:	01 00 39    	bra       NC, 0x265a <.L4>
    2658:	80 00 eb    	clr.w     w1

0000265a <.L4>:
    265a:	10 88 10    	subr.w    w1, [w0], [w0]
    265c:	4f 05 be    	mov.d     [--w15], w10
    265e:	4f 04 be    	mov.d     [--w15], w8
    2660:	00 00 06    	return    

00002662 <___udivmoddi3>:
    2662:	12 00 fa    	lnk       #0x12
    2664:	88 9f be    	mov.d     w8, [w15++]
    2666:	8a 9f be    	mov.d     w10, [w15++]
    2668:	8c 9f be    	mov.d     w12, [w15++]
    266a:	e0 b7 9f    	mov.w     w0, [w15-20]
    266c:	f1 b7 9f    	mov.w     w1, [w15-18]
    266e:	82 bf 9f    	mov.w     w2, [w15-16]
    2670:	93 bf 9f    	mov.w     w3, [w15-14]
    2672:	06 05 be    	mov.d     w6, w10
    2674:	04 04 be    	mov.d     w4, w8
    2676:	00 00 eb    	clr.w     w0
    2678:	d0 b7 9f    	mov.w     w0, [w15-22]
    267a:	c0 b7 9f    	mov.w     w0, [w15-24]
    267c:	b0 b7 9f    	mov.w     w0, [w15-26]
    267e:	a0 b7 9f    	mov.w     w0, [w15-28]
    2680:	90 b7 9f    	mov.w     w0, [w15-30]
    2682:	00 06 eb    	clr.w     w12

00002684 <.L9>:
    2684:	5f b1 97    	mov.w     [w15-22], w2
    2686:	cf b0 97    	mov.w     [w15-24], w1
    2688:	82 01 41    	add.w     w2, w2, w3
    268a:	3f b0 97    	mov.w     [w15-26], w0
    268c:	02 00 e0    	cp0.w     w2
    268e:	04 00 3d    	bra       GE, 0x2698 <.L6>
    2690:	37 00 07    	rcall     0x2700 <.LPA0>
    2692:	7e 80 57    	sub.w     w15, #0x1e, w0
    2694:	c0 ff 07    	rcall     0x2616 <___PplusBdi>
    2696:	03 00 37    	bra       0x269e <.L7>

00002698 <.L6>:
    2698:	33 00 07    	rcall     0x2700 <.LPA0>
    269a:	7e 80 57    	sub.w     w15, #0x1e, w0
    269c:	cf ff 07    	rcall     0x263c <___PminusBdi>

0000269e <.L7>:
    269e:	df b6 97    	mov.w     [w15-22], w13
    26a0:	0d 00 e0    	cp0.w     w13
    26a2:	0c 00 35    	bra       LT, 0x26bc <.L8>
    26a4:	6f b2 97    	mov.w     [w15-20], w4
    26a6:	ff b2 97    	mov.w     [w15-18], w5
    26a8:	0f bb 97    	mov.w     [w15-16], w6
    26aa:	9f bb 97    	mov.w     [w15-14], w7
    26ac:	10 00 20    	mov.w     #0x1, w0
    26ae:	01 00 20    	mov.w     #0x0, w1
    26b0:	60 11 b8    	mul.uu    w2, #0x0, w2
    26b2:	00 02 72    	ior.w     w4, w0, w4
    26b4:	81 82 72    	ior.w     w5, w1, w5
    26b6:	02 03 73    	ior.w     w6, w2, w6
    26b8:	83 83 73    	ior.w     w7, w3, w7
    26ba:	1b 00 07    	rcall     0x26f2 <L0>

000026bc <.L8>:
    26bc:	0c 06 e8    	inc.w     w12, w12
    26be:	01 04 20    	mov.w     #0x40, w1
    26c0:	81 0f 56    	sub.w     w12, w1, [w15]
    26c2:	e0 ff 3a    	bra       NZ, 0x2684 <.L9>
    26c4:	0d 00 e0    	cp0.w     w13
    26c6:	04 00 3d    	bra       GE, 0x26d0 <.L10>
    26c8:	08 02 be    	mov.d     w8, w4
    26ca:	0a 03 be    	mov.d     w10, w6
    26cc:	7e 80 57    	sub.w     w15, #0x1e, w0
    26ce:	a3 ff 07    	rcall     0x2616 <___PplusBdi>

000026d0 <.L10>:
    26d0:	5f a8 97    	mov.w     [w15-38], w0
    26d2:	00 00 e0    	cp0.w     w0
    26d4:	05 00 3a    	bra       NZ, 0x26e0 <.L11>
    26d6:	1f b2 97    	mov.w     [w15-30], w4
    26d8:	af b2 97    	mov.w     [w15-28], w5
    26da:	3f b3 97    	mov.w     [w15-26], w6
    26dc:	cf b3 97    	mov.w     [w15-24], w7
    26de:	09 00 07    	rcall     0x26f2 <L0>

000026e0 <.L11>:
    26e0:	6f b0 97    	mov.w     [w15-20], w0
    26e2:	ff b0 97    	mov.w     [w15-18], w1
    26e4:	0f b9 97    	mov.w     [w15-16], w2
    26e6:	9f b9 97    	mov.w     [w15-14], w3
    26e8:	4f 06 be    	mov.d     [--w15], w12
    26ea:	4f 05 be    	mov.d     [--w15], w10
    26ec:	4f 04 be    	mov.d     [--w15], w8
    26ee:	00 80 fa    	ulnk      
    26f0:	00 00 06    	return    

000026f2 <L0>:
    26f2:	01 00 07    	rcall     0x26f6 <.LPA5>
    26f4:	00 00 06    	return    

000026f6 <.LPA5>:
    26f6:	a4 b7 9f    	mov.w     w4, [w15-28]
    26f8:	b5 b7 9f    	mov.w     w5, [w15-26]
    26fa:	c6 b7 9f    	mov.w     w6, [w15-24]
    26fc:	d7 b7 9f    	mov.w     w7, [w15-22]
    26fe:	00 00 06    	return    

00002700 <.LPA0>:
    2700:	4f 09 de    	lsr.w     w1, #0xf, w2
    2702:	82 81 71    	ior.w     w3, w2, w3
    2704:	b3 b7 9f    	mov.w     w3, [w15-26]
    2706:	4f 01 de    	lsr.w     w0, #0xf, w2
    2708:	81 80 40    	add.w     w1, w1, w1
    270a:	82 80 70    	ior.w     w1, w2, w1
    270c:	a1 b7 9f    	mov.w     w1, [w15-28]
    270e:	8f b0 97    	mov.w     [w15-32], w1
    2710:	4f 09 de    	lsr.w     w1, #0xf, w2
    2712:	00 00 40    	add.w     w0, w0, w0
    2714:	02 00 70    	ior.w     w0, w2, w0
    2716:	90 b7 9f    	mov.w     w0, [w15-30]
    2718:	7f a8 97    	mov.w     [w15-34], w0
    271a:	4f 01 de    	lsr.w     w0, #0xf, w2
    271c:	81 80 40    	add.w     w1, w1, w1
    271e:	82 80 70    	ior.w     w1, w2, w1
    2720:	81 b7 9f    	mov.w     w1, [w15-32]
    2722:	0d 00 07    	rcall     0x273e <.LPA4>
    2724:	4f 3a de    	lsr.w     w7, #0xf, w4
    2726:	00 00 40    	add.w     w0, w0, w0
    2728:	04 00 70    	ior.w     w0, w4, w0
    272a:	f0 af 9f    	mov.w     w0, [w15-34]
    272c:	08 00 07    	rcall     0x273e <.LPA4>
    272e:	04 02 42    	add.w     w4, w4, w4
    2730:	85 82 4a    	addc.w    w5, w5, w5
    2732:	06 03 4b    	addc.w    w6, w6, w6
    2734:	87 83 4b    	addc.w    w7, w7, w7
    2736:	df ff 07    	rcall     0x26f6 <.LPA5>
    2738:	08 02 be    	mov.d     w8, w4
    273a:	0a 03 be    	mov.d     w10, w6
    273c:	00 00 06    	return    

0000273e <.LPA4>:
    273e:	2f b2 97    	mov.w     [w15-28], w4
    2740:	bf b2 97    	mov.w     [w15-26], w5
    2742:	4f b3 97    	mov.w     [w15-24], w6
    2744:	df b3 97    	mov.w     [w15-22], w7
    2746:	00 00 06    	return    

00002748 <___udivdi3>:
    2748:	88 1f 78    	mov.w     w8, [w15++]
    274a:	18 00 20    	mov.w     #0x1, w8
    274c:	88 1f 78    	mov.w     w8, [w15++]
    274e:	89 ff 07    	rcall     0x2662 <___udivmoddi3>
    2750:	8f 87 e9    	dec2.w    w15, w15
    2752:	4f 04 78    	mov.w     [--w15], w8
    2754:	00 00 06    	return    

00002756 <___umoddi3>:
    2756:	80 1f eb    	clr.w     [w15++]
    2758:	84 ff 07    	rcall     0x2662 <___udivmoddi3>
    275a:	8f 87 e9    	dec2.w    w15, w15
    275c:	00 00 06    	return    

0000275e <___divdi3>:
    275e:	88 9f be    	mov.d     w8, [w15++]
    2760:	8a 9f be    	mov.d     w10, [w15++]
    2762:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2764:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2766:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2768:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    276a:	0c 00 3d    	bra       GE, 0x2784 <.L15>
    276c:	60 44 b8    	mul.uu    w8, #0x0, w8
    276e:	60 55 b8    	mul.uu    w10, #0x0, w10
    2770:	00 00 54    	sub.w     w8, w0, w0
    2772:	81 80 5c    	subb.w    w9, w1, w1
    2774:	02 01 5d    	subb.w    w10, w2, w2
    2776:	83 81 5d    	subb.w    w11, w3, w3
    2778:	18 00 20    	mov.w     #0x1, w8
    277a:	15 00 07    	rcall     0x27a6 <L0>
    277c:	08 00 3d    	bra       GE, 0x278e <.L16>
    277e:	18 00 07    	rcall     0x27b0 <.LPA1>
    2780:	00 04 eb    	clr.w     w8
    2782:	05 00 37    	bra       0x278e <.L16>

00002784 <.L15>:
    2784:	00 04 eb    	clr.w     w8
    2786:	0f 00 07    	rcall     0x27a6 <L0>
    2788:	02 00 3d    	bra       GE, 0x278e <.L16>
    278a:	12 00 07    	rcall     0x27b0 <.LPA1>
    278c:	18 00 20    	mov.w     #0x1, w8

0000278e <.L16>:
    278e:	dc ff 07    	rcall     0x2748 <___udivdi3>
    2790:	08 00 e0    	cp0.w     w8
    2792:	06 00 32    	bra       Z, 0x27a0 <.L17>
    2794:	60 22 b8    	mul.uu    w4, #0x0, w4
    2796:	60 33 b8    	mul.uu    w6, #0x0, w6
    2798:	00 00 52    	sub.w     w4, w0, w0
    279a:	81 80 5a    	subb.w    w5, w1, w1
    279c:	02 01 5b    	subb.w    w6, w2, w2
    279e:	83 81 5b    	subb.w    w7, w3, w3

000027a0 <.L17>:
    27a0:	4f 05 be    	mov.d     [--w15], w10
    27a2:	4f 04 be    	mov.d     [--w15], w8
    27a4:	00 00 06    	return    

000027a6 <L0>:
    27a6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    27a8:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    27aa:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    27ac:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    27ae:	00 00 06    	return    

000027b0 <.LPA1>:
    27b0:	60 44 b8    	mul.uu    w8, #0x0, w8
    27b2:	60 55 b8    	mul.uu    w10, #0x0, w10
    27b4:	04 02 54    	sub.w     w8, w4, w4
    27b6:	85 82 5c    	subb.w    w9, w5, w5
    27b8:	06 03 5d    	subb.w    w10, w6, w6
    27ba:	87 83 5d    	subb.w    w11, w7, w7
    27bc:	00 00 06    	return    

000027be <___moddi3>:
    27be:	88 9f be    	mov.d     w8, [w15++]
    27c0:	8a 9f be    	mov.d     w10, [w15++]
    27c2:	8c 1f 78    	mov.w     w12, [w15++]
    27c4:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    27c6:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    27c8:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    27ca:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    27cc:	0d 00 3d    	bra       GE, 0x27e8 <.L21>
    27ce:	60 44 b8    	mul.uu    w8, #0x0, w8
    27d0:	60 55 b8    	mul.uu    w10, #0x0, w10
    27d2:	00 00 54    	sub.w     w8, w0, w0
    27d4:	81 80 5c    	subb.w    w9, w1, w1
    27d6:	02 01 5d    	subb.w    w10, w2, w2
    27d8:	83 81 5d    	subb.w    w11, w3, w3
    27da:	1c 00 20    	mov.w     #0x1, w12
    27dc:	08 20 e1    	cp.w      w4, w8
    27de:	09 a8 e1    	cpb.w     w5, w9
    27e0:	0a b0 e1    	cpb.w     w6, w10
    27e2:	0b b8 e1    	cpb.w     w7, w11
    27e4:	0d 00 3d    	bra       GE, 0x2800 <.L22>
    27e6:	08 00 37    	bra       0x27f8 <.L26>

000027e8 <.L21>:
    27e8:	00 06 eb    	clr.w     w12
    27ea:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    27ec:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    27ee:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    27f0:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    27f2:	06 00 3d    	bra       GE, 0x2800 <.L22>
    27f4:	60 44 b8    	mul.uu    w8, #0x0, w8
    27f6:	60 55 b8    	mul.uu    w10, #0x0, w10

000027f8 <.L26>:
    27f8:	04 02 54    	sub.w     w8, w4, w4
    27fa:	85 82 5c    	subb.w    w9, w5, w5
    27fc:	06 03 5d    	subb.w    w10, w6, w6
    27fe:	87 83 5d    	subb.w    w11, w7, w7

00002800 <.L22>:
    2800:	aa ff 07    	rcall     0x2756 <___umoddi3>
    2802:	0c 00 e0    	cp0.w     w12
    2804:	06 00 32    	bra       Z, 0x2812 <.L23>
    2806:	60 22 b8    	mul.uu    w4, #0x0, w4
    2808:	60 33 b8    	mul.uu    w6, #0x0, w6
    280a:	00 00 52    	sub.w     w4, w0, w0
    280c:	81 80 5a    	subb.w    w5, w1, w1
    280e:	02 01 5b    	subb.w    w6, w2, w2
    2810:	83 81 5b    	subb.w    w7, w3, w3

00002812 <.L23>:
    2812:	4f 06 78    	mov.w     [--w15], w12
    2814:	4f 05 be    	mov.d     [--w15], w10
    2816:	4f 04 be    	mov.d     [--w15], w8
    2818:	00 00 06    	return    

0000281a <___muldi3>:
    281a:	88 9f be    	mov.d     w8, [w15++]
    281c:	8a 9f be    	mov.d     w10, [w15++]
    281e:	8c 1f 78    	mov.w     w12, [w15++]
    2820:	00 06 eb    	clr.w     w12
    2822:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2824:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2826:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2828:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    282a:	07 00 3d    	bra       GE, 0x283a <.L2>
    282c:	60 44 b8    	mul.uu    w8, #0x0, w8
    282e:	60 55 b8    	mul.uu    w10, #0x0, w10
    2830:	00 00 54    	sub.w     w8, w0, w0
    2832:	81 80 5c    	subb.w    w9, w1, w1
    2834:	02 01 5d    	subb.w    w10, w2, w2
    2836:	83 81 5d    	subb.w    w11, w3, w3
    2838:	1c 00 20    	mov.w     #0x1, w12

0000283a <.L2>:
    283a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    283c:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    283e:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2840:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2842:	07 00 3d    	bra       GE, 0x2852 <.L3>
    2844:	60 44 b8    	mul.uu    w8, #0x0, w8
    2846:	60 55 b8    	mul.uu    w10, #0x0, w10
    2848:	04 02 54    	sub.w     w8, w4, w4
    284a:	85 82 5c    	subb.w    w9, w5, w5
    284c:	06 03 5d    	subb.w    w10, w6, w6
    284e:	87 83 5d    	subb.w    w11, w7, w7
    2850:	0c 00 a2    	btg.w     w12, #0x0

00002852 <.L3>:
    2852:	0c 00 07    	rcall     0x286c <___umuldi3>
    2854:	0c 00 e0    	cp0.w     w12
    2856:	06 00 32    	bra       Z, 0x2864 <.L4>
    2858:	60 22 b8    	mul.uu    w4, #0x0, w4
    285a:	60 33 b8    	mul.uu    w6, #0x0, w6
    285c:	00 00 52    	sub.w     w4, w0, w0
    285e:	81 80 5a    	subb.w    w5, w1, w1
    2860:	02 01 5b    	subb.w    w6, w2, w2
    2862:	83 81 5b    	subb.w    w7, w3, w3

00002864 <.L4>:
    2864:	4f 06 78    	mov.w     [--w15], w12
    2866:	4f 05 be    	mov.d     [--w15], w10
    2868:	4f 04 be    	mov.d     [--w15], w8
    286a:	00 00 06    	return    

0000286c <___umuldi3>:
    286c:	88 9f be    	mov.d     w8, [w15++]
    286e:	8a 9f be    	mov.d     w10, [w15++]
    2870:	8c 9f be    	mov.d     w12, [w15++]
    2872:	04 04 b8    	mul.uu    w0, w4, w8
    2874:	05 06 b8    	mul.uu    w0, w5, w12
    2876:	89 04 46    	add.w     w12, w9, w9
    2878:	60 85 4e    	addc.w    w13, #0x0, w10
    287a:	06 06 b8    	mul.uu    w0, w6, w12
    287c:	0a 05 46    	add.w     w12, w10, w10
    287e:	e0 85 4e    	addc.w    w13, #0x0, w11
    2880:	07 06 b8    	mul.uu    w0, w7, w12
    2882:	8b 05 46    	add.w     w12, w11, w11
    2884:	04 0e b8    	mul.uu    w1, w4, w12
    2886:	89 04 46    	add.w     w12, w9, w9
    2888:	0a 85 4e    	addc.w    w13, w10, w10
    288a:	e0 85 4d    	addc.w    w11, #0x0, w11
    288c:	05 0e b8    	mul.uu    w1, w5, w12
    288e:	0a 05 46    	add.w     w12, w10, w10
    2890:	8b 85 4e    	addc.w    w13, w11, w11
    2892:	06 0e b8    	mul.uu    w1, w6, w12
    2894:	8b 05 46    	add.w     w12, w11, w11
    2896:	04 16 b8    	mul.uu    w2, w4, w12
    2898:	0a 05 46    	add.w     w12, w10, w10
    289a:	8b 85 4e    	addc.w    w13, w11, w11
    289c:	05 16 b8    	mul.uu    w2, w5, w12
    289e:	8b 05 46    	add.w     w12, w11, w11
    28a0:	04 1e b8    	mul.uu    w3, w4, w12
    28a2:	8b 05 46    	add.w     w12, w11, w11
    28a4:	08 00 be    	mov.d     w8, w0
    28a6:	0a 01 be    	mov.d     w10, w2
    28a8:	4f 06 be    	mov.d     [--w15], w12
    28aa:	4f 05 be    	mov.d     [--w15], w10
    28ac:	4f 04 be    	mov.d     [--w15], w8
    28ae:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	d0 3f 04    	goto      0x3fd0 <__T1Interrupt>
    1026:	00 00 00 
    1028:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	fe 3f 04    	goto      0x3ffe <__T2Interrupt>
    1032:	00 00 00 
    1034:	2c 40 04    	goto      0x402c <__T3Interrupt>
    1036:	00 00 00 
    1038:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	52 2b 04    	goto      0x2b52 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	24 2b 04    	goto      0x2b24 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	5a 40 04    	goto      0x405a <__T4Interrupt>
    1072:	00 00 00 
    1074:	88 40 04    	goto      0x4088 <__T5Interrupt>
    1076:	00 00 00 
    1078:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	ae 2b 04    	goto      0x2bae <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	80 2b 04    	goto      0x2b80 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	0a 2c 04    	goto      0x2c0a <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	dc 2b 04    	goto      0x2bdc <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	50 3f 04    	goto      0x3f50 <__USB1Interrupt>
    10ee:	00 00 00 
    10f0:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	66 2c 04    	goto      0x2c66 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	38 2c 04    	goto      0x2c38 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	e8 4f 04    	goto      0x4fe8 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a8b0 <.LC0-0x62>:
    a8b0:	12 01       	.word 0x112
    a8b2:	00 02       	.word 0x200
    a8b4:	00 00       	.word 0
    a8b6:	00 40       	.word 0x4000
    a8b8:	66 66       	.word 0x6666
    a8ba:	03 00       	.word 0x3
    a8bc:	00 00       	.word 0
    a8be:	01 02       	.word 0x201
    a8c0:	00 01       	.word 0x100
    a8c2:	09 02       	.word 0x209
    a8c4:	12 00       	.word 0x12
    a8c6:	01 01       	.word 0x101
    a8c8:	00 a0       	.word 0xa000
    a8ca:	32 09       	.word 0x932
    a8cc:	04 00       	.word 0x4
    a8ce:	00 00       	.word 0
    a8d0:	ff 00       	.word 0xff
    a8d2:	ff 00       	.word 0xff
    a8d4:	04 03       	.word 0x304
    a8d6:	09 04       	.word 0x409
    a8d8:	1a 03       	.word 0x31a
    a8da:	4f 00       	.word 0x4f
    a8dc:	6c 00       	.word 0x6c
    a8de:	69 00       	.word 0x69
    a8e0:	6e 00       	.word 0x6e
    a8e2:	20 00       	.word 0x20
    a8e4:	43 00       	.word 0x43
    a8e6:	6f 00       	.word 0x6f
    a8e8:	6c 00       	.word 0x6c
    a8ea:	6c 00       	.word 0x6c
    a8ec:	65 00       	.word 0x65
    a8ee:	67 00       	.word 0x67
    a8f0:	65 00       	.word 0x65
    a8f2:	20 03       	.word 0x320
    a8f4:	50 00       	.word 0x50
    a8f6:	49 00       	.word 0x49
    a8f8:	43 00       	.word 0x43
    a8fa:	32 00       	.word 0x32
    a8fc:	34 00       	.word 0x34
    a8fe:	46 00       	.word 0x46
    a900:	4a 00       	.word 0x4a
    a902:	31 00       	.word 0x31
    a904:	32 00       	.word 0x32
    a906:	38 00       	.word 0x38
    a908:	47 00       	.word 0x47
    a90a:	42 00       	.word 0x42
    a90c:	32 00       	.word 0x32
    a90e:	30 00       	.word 0x30
    a910:	36 00       	.word 0x36

0000a912 <.LC0>:
    a912:	25 30       	.word 0x3025
    a914:	34 78       	.word 0x7834
    a916:	25 30       	.word 0x3025
    a918:	34 78       	.word 0x7834
    a91a:	25 30       	.word 0x3025
    a91c:	34 78       	.word 0x7834
    a91e:	0d 00       	.word 0xd

0000a920 <.LC1>:
    a920:	25 30       	.word 0x3025
    a922:	32 58       	.word 0x5832
    a924:	00 0a       	.word 0xa00

0000a925 <.LC2>:
    a925:	00 00       	.word 0

0000a927 <.LC3>:
    a927:	00 00       	.word 0
    a929:	00 00       	.word 0
	...
Disassembly of section .text:

0000292c <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    292c:	04 00 fa    	lnk       #0x4
    292e:	00 0f 78    	mov.w     w0, [w14]
    2930:	21 47 98    	mov.b     w1, [w14+2]

00002932 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    2932:	00 00 00    	nop       

00002934 <.L2>:
    2934:	1e 00 78    	mov.w     [w14], w0
    2936:	10 00 90    	mov.w     [w0+2], w0
    2938:	90 00 78    	mov.w     [w0], w1
    293a:	00 20 20    	mov.w     #0x200, w0
    293c:	00 80 60    	and.w     w1, w0, w0
    293e:	00 00 e0    	cp0.w     w0
    2940:	f9 ff 3a    	bra       NZ, 0x2934 <.L2>

00002942 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    2942:	1e 00 78    	mov.w     [w14], w0
    2944:	20 00 90    	mov.w     [w0+4], w0
    2946:	ae 40 90    	mov.b     [w14+2], w1
    2948:	81 80 fb    	ze        w1, w1
    294a:	01 08 78    	mov.w     w1, [w0]

0000294c <.LSM3>:
}
    294c:	00 80 fa    	ulnk      
    294e:	00 00 06    	return    

00002950 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    2950:	02 00 fa    	lnk       #0x2
    2952:	00 0f 78    	mov.w     w0, [w14]

00002954 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    2954:	00 00 00    	nop       

00002956 <.L4>:
    2956:	1e 00 78    	mov.w     [w14], w0
    2958:	10 00 90    	mov.w     [w0+2], w0
    295a:	10 00 78    	mov.w     [w0], w0
    295c:	61 00 60    	and.w     w0, #0x1, w0
    295e:	00 00 e0    	cp0.w     w0
    2960:	fa ff 32    	bra       Z, 0x2956 <.L4>

00002962 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    2962:	1e 00 78    	mov.w     [w14], w0
    2964:	30 00 90    	mov.w     [w0+6], w0
    2966:	10 00 78    	mov.w     [w0], w0
    2968:	00 40 78    	mov.b     w0, w0

0000296a <.LSM7>:
}
    296a:	00 80 fa    	ulnk      
    296c:	00 00 06    	return    

0000296e <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    296e:	04 00 fa    	lnk       #0x4
    2970:	00 0f 78    	mov.w     w0, [w14]
    2972:	21 47 98    	mov.b     w1, [w14+2]

00002974 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    2974:	00 00 00    	nop       

00002976 <.L6>:
    2976:	1e 00 78    	mov.w     [w14], w0
    2978:	d0 10 90    	mov.w     [w0+42], w1
    297a:	1e 00 78    	mov.w     [w14], w0
    297c:	20 10 90    	mov.w     [w0+36], w0
    297e:	80 8f 50    	sub.w     w1, w0, [w15]
    2980:	fa ff 32    	bra       Z, 0x2976 <.L6>

00002982 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    2982:	ff 3f fc    	disi      #0x3fff

00002984 <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    2984:	1e 00 78    	mov.w     [w14], w0
    2986:	90 10 90    	mov.w     [w0+34], w1
    2988:	1e 00 78    	mov.w     [w14], w0
    298a:	40 10 90    	mov.w     [w0+40], w0
    298c:	00 80 40    	add.w     w1, w0, w0
    298e:	ae 40 90    	mov.b     [w14+2], w1
    2990:	01 48 78    	mov.b     w1, [w0]

00002992 <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    2992:	1e 00 78    	mov.w     [w14], w0
    2994:	40 10 90    	mov.w     [w0+40], w0
    2996:	80 00 e8    	inc.w     w0, w1
    2998:	1e 00 78    	mov.w     [w14], w0
    299a:	20 10 90    	mov.w     [w0+36], w0
    299c:	00 01 78    	mov.w     w0, w2
    299e:	11 00 09    	repeat    #0x11
    29a0:	82 80 d8    	div.uw    w1, w2
    29a2:	80 00 fd    	exch      w0, w1
    29a4:	80 00 78    	mov.w     w0, w1
    29a6:	1e 00 78    	mov.w     [w14], w0
    29a8:	41 10 98    	mov.w     w1, [w0+40]

000029aa <.LSM13>:
    self->TXbuffer.count++;
    29aa:	1e 00 78    	mov.w     [w14], w0
    29ac:	50 10 90    	mov.w     [w0+42], w0
    29ae:	80 00 e8    	inc.w     w0, w1
    29b0:	1e 00 78    	mov.w     [w14], w0
    29b2:	51 10 98    	mov.w     w1, [w0+42]

000029b4 <.LSM14>:
    enable_interrupts();
    29b4:	52 20 ef    	clr.w     0x52

000029b6 <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    29b6:	1e 00 78    	mov.w     [w14], w0
    29b8:	d0 10 90    	mov.w     [w0+42], w1
    29ba:	1e 00 78    	mov.w     [w14], w0
    29bc:	30 18 90    	mov.w     [w0+54], w0
    29be:	80 8f 50    	sub.w     w1, w0, [w15]
    29c0:	08 00 39    	bra       NC, 0x29d2 <.L5>

000029c2 <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    29c2:	1e 00 78    	mov.w     [w14], w0
    29c4:	10 00 90    	mov.w     [w0+2], w0
    29c6:	9e 00 78    	mov.w     [w14], w1
    29c8:	91 00 90    	mov.w     [w1+2], w1
    29ca:	11 01 78    	mov.w     [w1], w2
    29cc:	01 40 20    	mov.w     #0x400, w1
    29ce:	82 80 70    	ior.w     w1, w2, w1
    29d0:	01 08 78    	mov.w     w1, [w0]

000029d2 <.L5>:
                                                    // transmission
}
    29d2:	00 80 fa    	ulnk      
    29d4:	00 00 06    	return    

000029d6 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    29d6:	04 00 fa    	lnk       #0x4
    29d8:	10 07 98    	mov.w     w0, [w14+2]

000029da <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    29da:	1e 00 90    	mov.w     [w14+2], w0
    29dc:	50 00 90    	mov.w     [w0+10], w0
    29de:	9e 00 90    	mov.w     [w14+2], w1
    29e0:	d1 00 90    	mov.w     [w1+10], w1
    29e2:	11 01 78    	mov.w     [w1], w2
    29e4:	9e 00 90    	mov.w     [w14+2], w1
    29e6:	e1 48 90    	mov.b     [w1+14], w1
    29e8:	81 80 fb    	ze        w1, w1
    29ea:	13 00 20    	mov.w     #0x1, w3
    29ec:	81 18 dd    	sl.w      w3, w1, w1
    29ee:	81 80 ea    	com.w     w1, w1
    29f0:	81 00 61    	and.w     w2, w1, w1
    29f2:	01 08 78    	mov.w     w1, [w0]

000029f4 <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    29f4:	1e 00 90    	mov.w     [w14+2], w0
    29f6:	50 10 90    	mov.w     [w0+42], w0
    29f8:	00 00 e0    	cp0.w     w0
    29fa:	27 00 3a    	bra       NZ, 0x2a4a <.L13>

000029fc <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    29fc:	1e 00 90    	mov.w     [w14+2], w0
    29fe:	10 00 90    	mov.w     [w0+2], w0
    2a00:	9e 00 90    	mov.w     [w14+2], w1
    2a02:	91 00 90    	mov.w     [w1+2], w1
    2a04:	11 01 78    	mov.w     [w1], w2
    2a06:	f1 bf 2f    	mov.w     #0xfbff, w1
    2a08:	81 00 61    	and.w     w2, w1, w1
    2a0a:	01 08 78    	mov.w     w1, [w0]

00002a0c <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    2a0c:	1f 00 37    	bra       0x2a4c <.L10>

00002a0e <.L12>:
        disable_interrupts();
    2a0e:	ff 3f fc    	disi      #0x3fff

00002a10 <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    2a10:	1e 00 90    	mov.w     [w14+2], w0
    2a12:	90 10 90    	mov.w     [w0+34], w1
    2a14:	1e 00 90    	mov.w     [w14+2], w0
    2a16:	30 10 90    	mov.w     [w0+38], w0
    2a18:	00 80 40    	add.w     w1, w0, w0
    2a1a:	10 4f 78    	mov.b     [w0], [w14]

00002a1c <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    2a1c:	1e 00 90    	mov.w     [w14+2], w0
    2a1e:	30 10 90    	mov.w     [w0+38], w0
    2a20:	80 00 e8    	inc.w     w0, w1
    2a22:	1e 00 90    	mov.w     [w14+2], w0
    2a24:	20 10 90    	mov.w     [w0+36], w0
    2a26:	00 01 78    	mov.w     w0, w2
    2a28:	11 00 09    	repeat    #0x11
    2a2a:	82 80 d8    	div.uw    w1, w2
    2a2c:	80 00 fd    	exch      w0, w1
    2a2e:	80 00 78    	mov.w     w0, w1
    2a30:	1e 00 90    	mov.w     [w14+2], w0
    2a32:	31 10 98    	mov.w     w1, [w0+38]

00002a34 <.LSM26>:
        self->TXbuffer.count--;
    2a34:	1e 00 90    	mov.w     [w14+2], w0
    2a36:	50 10 90    	mov.w     [w0+42], w0
    2a38:	80 00 e9    	dec.w     w0, w1
    2a3a:	1e 00 90    	mov.w     [w14+2], w0
    2a3c:	51 10 98    	mov.w     w1, [w0+42]

00002a3e <.LSM27>:
        enable_interrupts();
    2a3e:	52 20 ef    	clr.w     0x52

00002a40 <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    2a40:	1e 00 90    	mov.w     [w14+2], w0
    2a42:	20 00 90    	mov.w     [w0+4], w0
    2a44:	9e 80 fb    	ze        [w14], w1
    2a46:	01 08 78    	mov.w     w1, [w0]
    2a48:	01 00 37    	bra       0x2a4c <.L10>

00002a4a <.L13>:
    2a4a:	00 00 00    	nop       

00002a4c <.L10>:
    2a4c:	1e 00 90    	mov.w     [w14+2], w0
    2a4e:	10 00 90    	mov.w     [w0+2], w0
    2a50:	90 00 78    	mov.w     [w0], w1
    2a52:	00 20 20    	mov.w     #0x200, w0
    2a54:	00 80 60    	and.w     w1, w0, w0
    2a56:	00 00 e0    	cp0.w     w0
    2a58:	04 00 3a    	bra       NZ, 0x2a62 <.L8>
    2a5a:	1e 00 90    	mov.w     [w14+2], w0
    2a5c:	50 10 90    	mov.w     [w0+42], w0
    2a5e:	00 00 e0    	cp0.w     w0
    2a60:	d6 ff 3a    	bra       NZ, 0x2a0e <.L12>

00002a62 <.L8>:
    }
}
    2a62:	00 80 fa    	ulnk      
    2a64:	00 00 06    	return    

00002a66 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    2a66:	04 00 fa    	lnk       #0x4
    2a68:	10 07 98    	mov.w     w0, [w14+2]

00002a6a <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    2a6a:	00 00 00    	nop       

00002a6c <.L15>:
    2a6c:	1e 00 90    	mov.w     [w14+2], w0
    2a6e:	20 18 90    	mov.w     [w0+52], w0
    2a70:	00 00 e0    	cp0.w     w0
    2a72:	fc ff 32    	bra       Z, 0x2a6c <.L15>

00002a74 <.LSM33>:
    disable_interrupts();
    2a74:	ff 3f fc    	disi      #0x3fff

00002a76 <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    2a76:	1e 00 90    	mov.w     [w14+2], w0
    2a78:	e0 10 90    	mov.w     [w0+44], w1
    2a7a:	1e 00 90    	mov.w     [w14+2], w0
    2a7c:	00 18 90    	mov.w     [w0+48], w0
    2a7e:	00 80 40    	add.w     w1, w0, w0
    2a80:	10 4f 78    	mov.b     [w0], [w14]

00002a82 <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    2a82:	1e 00 90    	mov.w     [w14+2], w0
    2a84:	00 18 90    	mov.w     [w0+48], w0
    2a86:	80 00 e8    	inc.w     w0, w1
    2a88:	1e 00 90    	mov.w     [w14+2], w0
    2a8a:	70 10 90    	mov.w     [w0+46], w0
    2a8c:	00 01 78    	mov.w     w0, w2
    2a8e:	11 00 09    	repeat    #0x11
    2a90:	82 80 d8    	div.uw    w1, w2
    2a92:	80 00 fd    	exch      w0, w1
    2a94:	80 00 78    	mov.w     w0, w1
    2a96:	1e 00 90    	mov.w     [w14+2], w0
    2a98:	01 18 98    	mov.w     w1, [w0+48]

00002a9a <.LSM36>:
    self->RXbuffer.count--;
    2a9a:	1e 00 90    	mov.w     [w14+2], w0
    2a9c:	20 18 90    	mov.w     [w0+52], w0
    2a9e:	80 00 e9    	dec.w     w0, w1
    2aa0:	1e 00 90    	mov.w     [w14+2], w0
    2aa2:	21 18 98    	mov.w     w1, [w0+52]

00002aa4 <.LSM37>:
    enable_interrupts();
    2aa4:	52 20 ef    	clr.w     0x52

00002aa6 <.LSM38>:
    return ch;
    2aa6:	1e 40 78    	mov.b     [w14], w0

00002aa8 <.LSM39>:
}
    2aa8:	00 80 fa    	ulnk      
    2aaa:	00 00 06    	return    

00002aac <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    2aac:	02 00 fa    	lnk       #0x2
    2aae:	00 0f 78    	mov.w     w0, [w14]

00002ab0 <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2ab0:	1e 00 78    	mov.w     [w14], w0
    2ab2:	50 00 90    	mov.w     [w0+10], w0
    2ab4:	9e 00 78    	mov.w     [w14], w1
    2ab6:	d1 00 90    	mov.w     [w1+10], w1
    2ab8:	11 01 78    	mov.w     [w1], w2
    2aba:	9e 00 78    	mov.w     [w14], w1
    2abc:	f1 48 90    	mov.b     [w1+15], w1
    2abe:	81 80 fb    	ze        w1, w1
    2ac0:	13 00 20    	mov.w     #0x1, w3
    2ac2:	81 18 dd    	sl.w      w3, w1, w1
    2ac4:	81 80 ea    	com.w     w1, w1
    2ac6:	81 00 61    	and.w     w2, w1, w1
    2ac8:	01 08 78    	mov.w     w1, [w0]

00002aca <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    2aca:	1d 00 37    	bra       0x2b06 <.L17>

00002acc <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    2acc:	ff 3f fc    	disi      #0x3fff

00002ace <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    2ace:	1e 00 78    	mov.w     [w14], w0
    2ad0:	e0 10 90    	mov.w     [w0+44], w1
    2ad2:	1e 00 78    	mov.w     [w14], w0
    2ad4:	10 18 90    	mov.w     [w0+50], w0
    2ad6:	00 80 40    	add.w     w1, w0, w0
    2ad8:	9e 00 78    	mov.w     [w14], w1
    2ada:	b1 00 90    	mov.w     [w1+6], w1
    2adc:	91 00 78    	mov.w     [w1], w1
    2ade:	81 40 78    	mov.b     w1, w1
    2ae0:	01 48 78    	mov.b     w1, [w0]

00002ae2 <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    2ae2:	1e 00 78    	mov.w     [w14], w0
    2ae4:	10 18 90    	mov.w     [w0+50], w0
    2ae6:	80 00 e8    	inc.w     w0, w1
    2ae8:	1e 00 78    	mov.w     [w14], w0
    2aea:	70 10 90    	mov.w     [w0+46], w0
    2aec:	00 01 78    	mov.w     w0, w2
    2aee:	11 00 09    	repeat    #0x11
    2af0:	82 80 d8    	div.uw    w1, w2
    2af2:	80 00 fd    	exch      w0, w1
    2af4:	80 00 78    	mov.w     w0, w1
    2af6:	1e 00 78    	mov.w     [w14], w0
    2af8:	11 18 98    	mov.w     w1, [w0+50]

00002afa <.LSM46>:
        self->RXbuffer.count++;
    2afa:	1e 00 78    	mov.w     [w14], w0
    2afc:	20 18 90    	mov.w     [w0+52], w0
    2afe:	80 00 e8    	inc.w     w0, w1
    2b00:	1e 00 78    	mov.w     [w14], w0
    2b02:	21 18 98    	mov.w     w1, [w0+52]

00002b04 <.LSM47>:
        enable_interrupts();
    2b04:	52 20 ef    	clr.w     0x52

00002b06 <.L17>:
    2b06:	1e 00 78    	mov.w     [w14], w0
    2b08:	10 00 90    	mov.w     [w0+2], w0
    2b0a:	10 00 78    	mov.w     [w0], w0
    2b0c:	61 00 60    	and.w     w0, #0x1, w0
    2b0e:	00 40 78    	mov.b     w0, w0
    2b10:	00 04 e0    	cp0.b     w0
    2b12:	06 00 32    	bra       Z, 0x2b20 <.L16>

00002b14 <.LSM49>:
    2b14:	1e 00 78    	mov.w     [w14], w0
    2b16:	a0 18 90    	mov.w     [w0+52], w1
    2b18:	1e 00 78    	mov.w     [w14], w0
    2b1a:	70 10 90    	mov.w     [w0+46], w0

00002b1c <.LSM50>:
    2b1c:	80 8f 50    	sub.w     w1, w0, [w15]
    2b1e:	d6 ff 3a    	bra       NZ, 0x2acc <.L19>

00002b20 <.L16>:
    }
}
    2b20:	00 80 fa    	ulnk      
    2b22:	00 00 06    	return    

00002b24 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    2b24:	36 00 f8    	push      0x36
    2b26:	80 9f be    	mov.d     w0, [w15++]
    2b28:	82 9f be    	mov.d     w2, [w15++]
    2b2a:	84 9f be    	mov.d     w4, [w15++]
    2b2c:	86 9f be    	mov.d     w6, [w15++]
    2b2e:	32 00 f8    	push      0x32
    2b30:	34 00 f8    	push      0x34
    2b32:	10 00 20    	mov.w     #0x1, w0
    2b34:	a0 01 88    	mov.w     w0, 0x34
    2b36:	00 20 20    	mov.w     #0x200, w0
    2b38:	90 01 88    	mov.w     w0, 0x32
    2b3a:	00 00 fa    	lnk       #0x0

00002b3c <.LSM53>:
    __serviceTxInterrupt(&uart1);
    2b3c:	c0 28 21    	mov.w     #0x128c, w0
    2b3e:	4b ff 07    	rcall     0x29d6 <___serviceTxInterrupt>

00002b40 <.LSM54>:
}
    2b40:	00 80 fa    	ulnk      
    2b42:	34 00 f9    	pop       0x34
    2b44:	32 00 f9    	pop       0x32
    2b46:	4f 03 be    	mov.d     [--w15], w6
    2b48:	4f 02 be    	mov.d     [--w15], w4
    2b4a:	4f 01 be    	mov.d     [--w15], w2
    2b4c:	4f 00 be    	mov.d     [--w15], w0
    2b4e:	36 00 f9    	pop       0x36
    2b50:	00 40 06    	retfie    

00002b52 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    2b52:	36 00 f8    	push      0x36
    2b54:	80 9f be    	mov.d     w0, [w15++]
    2b56:	82 9f be    	mov.d     w2, [w15++]
    2b58:	84 9f be    	mov.d     w4, [w15++]
    2b5a:	86 9f be    	mov.d     w6, [w15++]
    2b5c:	32 00 f8    	push      0x32
    2b5e:	34 00 f8    	push      0x34
    2b60:	10 00 20    	mov.w     #0x1, w0
    2b62:	a0 01 88    	mov.w     w0, 0x34
    2b64:	00 20 20    	mov.w     #0x200, w0
    2b66:	90 01 88    	mov.w     w0, 0x32
    2b68:	00 00 fa    	lnk       #0x0

00002b6a <.LSM56>:
    __serviceRxInterrupt(&uart1);
    2b6a:	c0 28 21    	mov.w     #0x128c, w0
    2b6c:	9f ff 07    	rcall     0x2aac <___serviceRxInterrupt>

00002b6e <.LSM57>:
}
    2b6e:	00 80 fa    	ulnk      
    2b70:	34 00 f9    	pop       0x34
    2b72:	32 00 f9    	pop       0x32
    2b74:	4f 03 be    	mov.d     [--w15], w6
    2b76:	4f 02 be    	mov.d     [--w15], w4
    2b78:	4f 01 be    	mov.d     [--w15], w2
    2b7a:	4f 00 be    	mov.d     [--w15], w0
    2b7c:	36 00 f9    	pop       0x36
    2b7e:	00 40 06    	retfie    

00002b80 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    2b80:	36 00 f8    	push      0x36
    2b82:	80 9f be    	mov.d     w0, [w15++]
    2b84:	82 9f be    	mov.d     w2, [w15++]
    2b86:	84 9f be    	mov.d     w4, [w15++]
    2b88:	86 9f be    	mov.d     w6, [w15++]
    2b8a:	32 00 f8    	push      0x32
    2b8c:	34 00 f8    	push      0x34
    2b8e:	10 00 20    	mov.w     #0x1, w0
    2b90:	a0 01 88    	mov.w     w0, 0x34
    2b92:	00 20 20    	mov.w     #0x200, w0
    2b94:	90 01 88    	mov.w     w0, 0x32
    2b96:	00 00 fa    	lnk       #0x0

00002b98 <.LSM59>:
    __serviceTxInterrupt(&uart2);
    2b98:	80 2c 21    	mov.w     #0x12c8, w0
    2b9a:	1d ff 07    	rcall     0x29d6 <___serviceTxInterrupt>

00002b9c <.LSM60>:
}
    2b9c:	00 80 fa    	ulnk      
    2b9e:	34 00 f9    	pop       0x34
    2ba0:	32 00 f9    	pop       0x32
    2ba2:	4f 03 be    	mov.d     [--w15], w6
    2ba4:	4f 02 be    	mov.d     [--w15], w4
    2ba6:	4f 01 be    	mov.d     [--w15], w2
    2ba8:	4f 00 be    	mov.d     [--w15], w0
    2baa:	36 00 f9    	pop       0x36
    2bac:	00 40 06    	retfie    

00002bae <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2bae:	36 00 f8    	push      0x36
    2bb0:	80 9f be    	mov.d     w0, [w15++]
    2bb2:	82 9f be    	mov.d     w2, [w15++]
    2bb4:	84 9f be    	mov.d     w4, [w15++]
    2bb6:	86 9f be    	mov.d     w6, [w15++]
    2bb8:	32 00 f8    	push      0x32
    2bba:	34 00 f8    	push      0x34
    2bbc:	10 00 20    	mov.w     #0x1, w0
    2bbe:	a0 01 88    	mov.w     w0, 0x34
    2bc0:	00 20 20    	mov.w     #0x200, w0
    2bc2:	90 01 88    	mov.w     w0, 0x32
    2bc4:	00 00 fa    	lnk       #0x0

00002bc6 <.LSM62>:
    __serviceRxInterrupt(&uart2);
    2bc6:	80 2c 21    	mov.w     #0x12c8, w0
    2bc8:	71 ff 07    	rcall     0x2aac <___serviceRxInterrupt>

00002bca <.LSM63>:
}
    2bca:	00 80 fa    	ulnk      
    2bcc:	34 00 f9    	pop       0x34
    2bce:	32 00 f9    	pop       0x32
    2bd0:	4f 03 be    	mov.d     [--w15], w6
    2bd2:	4f 02 be    	mov.d     [--w15], w4
    2bd4:	4f 01 be    	mov.d     [--w15], w2
    2bd6:	4f 00 be    	mov.d     [--w15], w0
    2bd8:	36 00 f9    	pop       0x36
    2bda:	00 40 06    	retfie    

00002bdc <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    2bdc:	36 00 f8    	push      0x36
    2bde:	80 9f be    	mov.d     w0, [w15++]
    2be0:	82 9f be    	mov.d     w2, [w15++]
    2be2:	84 9f be    	mov.d     w4, [w15++]
    2be4:	86 9f be    	mov.d     w6, [w15++]
    2be6:	32 00 f8    	push      0x32
    2be8:	34 00 f8    	push      0x34
    2bea:	10 00 20    	mov.w     #0x1, w0
    2bec:	a0 01 88    	mov.w     w0, 0x34
    2bee:	00 20 20    	mov.w     #0x200, w0
    2bf0:	90 01 88    	mov.w     w0, 0x32
    2bf2:	00 00 fa    	lnk       #0x0

00002bf4 <.LSM65>:
    __serviceTxInterrupt(&uart3);
    2bf4:	40 30 21    	mov.w     #0x1304, w0
    2bf6:	ef fe 07    	rcall     0x29d6 <___serviceTxInterrupt>

00002bf8 <.LSM66>:
}
    2bf8:	00 80 fa    	ulnk      
    2bfa:	34 00 f9    	pop       0x34
    2bfc:	32 00 f9    	pop       0x32
    2bfe:	4f 03 be    	mov.d     [--w15], w6
    2c00:	4f 02 be    	mov.d     [--w15], w4
    2c02:	4f 01 be    	mov.d     [--w15], w2
    2c04:	4f 00 be    	mov.d     [--w15], w0
    2c06:	36 00 f9    	pop       0x36
    2c08:	00 40 06    	retfie    

00002c0a <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    2c0a:	36 00 f8    	push      0x36
    2c0c:	80 9f be    	mov.d     w0, [w15++]
    2c0e:	82 9f be    	mov.d     w2, [w15++]
    2c10:	84 9f be    	mov.d     w4, [w15++]
    2c12:	86 9f be    	mov.d     w6, [w15++]
    2c14:	32 00 f8    	push      0x32
    2c16:	34 00 f8    	push      0x34
    2c18:	10 00 20    	mov.w     #0x1, w0
    2c1a:	a0 01 88    	mov.w     w0, 0x34
    2c1c:	00 20 20    	mov.w     #0x200, w0
    2c1e:	90 01 88    	mov.w     w0, 0x32
    2c20:	00 00 fa    	lnk       #0x0

00002c22 <.LSM68>:
    __serviceRxInterrupt(&uart3);
    2c22:	40 30 21    	mov.w     #0x1304, w0
    2c24:	43 ff 07    	rcall     0x2aac <___serviceRxInterrupt>

00002c26 <.LSM69>:
}
    2c26:	00 80 fa    	ulnk      
    2c28:	34 00 f9    	pop       0x34
    2c2a:	32 00 f9    	pop       0x32
    2c2c:	4f 03 be    	mov.d     [--w15], w6
    2c2e:	4f 02 be    	mov.d     [--w15], w4
    2c30:	4f 01 be    	mov.d     [--w15], w2
    2c32:	4f 00 be    	mov.d     [--w15], w0
    2c34:	36 00 f9    	pop       0x36
    2c36:	00 40 06    	retfie    

00002c38 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    2c38:	36 00 f8    	push      0x36
    2c3a:	80 9f be    	mov.d     w0, [w15++]
    2c3c:	82 9f be    	mov.d     w2, [w15++]
    2c3e:	84 9f be    	mov.d     w4, [w15++]
    2c40:	86 9f be    	mov.d     w6, [w15++]
    2c42:	32 00 f8    	push      0x32
    2c44:	34 00 f8    	push      0x34
    2c46:	10 00 20    	mov.w     #0x1, w0
    2c48:	a0 01 88    	mov.w     w0, 0x34
    2c4a:	00 20 20    	mov.w     #0x200, w0
    2c4c:	90 01 88    	mov.w     w0, 0x32
    2c4e:	00 00 fa    	lnk       #0x0

00002c50 <.LSM71>:
    __serviceTxInterrupt(&uart4);
    2c50:	00 34 21    	mov.w     #0x1340, w0
    2c52:	c1 fe 07    	rcall     0x29d6 <___serviceTxInterrupt>

00002c54 <.LSM72>:
}
    2c54:	00 80 fa    	ulnk      
    2c56:	34 00 f9    	pop       0x34
    2c58:	32 00 f9    	pop       0x32
    2c5a:	4f 03 be    	mov.d     [--w15], w6
    2c5c:	4f 02 be    	mov.d     [--w15], w4
    2c5e:	4f 01 be    	mov.d     [--w15], w2
    2c60:	4f 00 be    	mov.d     [--w15], w0
    2c62:	36 00 f9    	pop       0x36
    2c64:	00 40 06    	retfie    

00002c66 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    2c66:	36 00 f8    	push      0x36
    2c68:	80 9f be    	mov.d     w0, [w15++]
    2c6a:	82 9f be    	mov.d     w2, [w15++]
    2c6c:	84 9f be    	mov.d     w4, [w15++]
    2c6e:	86 9f be    	mov.d     w6, [w15++]
    2c70:	32 00 f8    	push      0x32
    2c72:	34 00 f8    	push      0x34
    2c74:	10 00 20    	mov.w     #0x1, w0
    2c76:	a0 01 88    	mov.w     w0, 0x34
    2c78:	00 20 20    	mov.w     #0x200, w0
    2c7a:	90 01 88    	mov.w     w0, 0x32
    2c7c:	00 00 fa    	lnk       #0x0

00002c7e <.LSM74>:
    __serviceRxInterrupt(&uart4);
    2c7e:	00 34 21    	mov.w     #0x1340, w0
    2c80:	15 ff 07    	rcall     0x2aac <___serviceRxInterrupt>

00002c82 <.LSM75>:
}
    2c82:	00 80 fa    	ulnk      
    2c84:	34 00 f9    	pop       0x34
    2c86:	32 00 f9    	pop       0x32
    2c88:	4f 03 be    	mov.d     [--w15], w6
    2c8a:	4f 02 be    	mov.d     [--w15], w4
    2c8c:	4f 01 be    	mov.d     [--w15], w2
    2c8e:	4f 00 be    	mov.d     [--w15], w0
    2c90:	36 00 f9    	pop       0x36
    2c92:	00 40 06    	retfie    

00002c94 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2c94:	08 00 fa    	lnk       #0x8
    2c96:	10 07 98    	mov.w     w0, [w14+2]
    2c98:	21 07 98    	mov.w     w1, [w14+4]
    2c9a:	32 07 98    	mov.w     w2, [w14+6]

00002c9c <.LSM77>:
    int16_t i;

    switch (handle) {
    2c9c:	1e 00 90    	mov.w     [w14+2], w0
    2c9e:	00 00 e0    	cp0.w     w0
    2ca0:	25 00 35    	bra       LT, 0x2cec <.L37>
    2ca2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2ca4:	03 00 34    	bra       LE, 0x2cac <.L30>
    2ca6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2ca8:	11 00 32    	bra       Z, 0x2ccc <.L31>

00002caa <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    2caa:	21 00 37    	bra       0x2cee <.L34>

00002cac <.L30>:
    2cac:	00 00 eb    	clr.w     w0
    2cae:	00 0f 78    	mov.w     w0, [w14]
    2cb0:	08 00 37    	bra       0x2cc2 <.L32>

00002cb2 <.L33>:
    2cb2:	2e 00 90    	mov.w     [w14+4], w0
    2cb4:	90 40 78    	mov.b     [w0], w1
    2cb6:	2e 00 90    	mov.w     [w14+4], w0
    2cb8:	00 00 e8    	inc.w     w0, w0
    2cba:	20 07 98    	mov.w     w0, [w14+4]
    2cbc:	80 42 80    	mov.w     0x850, w0
    2cbe:	19 04 07    	rcall     0x34f2 <_uart_putc>

00002cc0 <.LSM81>:
    2cc0:	1e 0f e8    	inc.w     [w14], [w14]

00002cc2 <.L32>:
    2cc2:	9e 00 78    	mov.w     [w14], w1
    2cc4:	3e 00 90    	mov.w     [w14+6], w0
    2cc6:	80 8f 50    	sub.w     w1, w0, [w15]
    2cc8:	f4 ff 39    	bra       NC, 0x2cb2 <.L33>

00002cca <.LSM82>:
    2cca:	11 00 37    	bra       0x2cee <.L34>

00002ccc <.L31>:
    2ccc:	00 00 eb    	clr.w     w0
    2cce:	00 0f 78    	mov.w     w0, [w14]
    2cd0:	08 00 37    	bra       0x2ce2 <.L35>

00002cd2 <.L36>:
    2cd2:	2e 00 90    	mov.w     [w14+4], w0
    2cd4:	90 40 78    	mov.b     [w0], w1
    2cd6:	2e 00 90    	mov.w     [w14+4], w0
    2cd8:	00 00 e8    	inc.w     w0, w0
    2cda:	20 07 98    	mov.w     w0, [w14+4]
    2cdc:	90 42 80    	mov.w     0x852, w0
    2cde:	09 04 07    	rcall     0x34f2 <_uart_putc>

00002ce0 <.LSM85>:
    2ce0:	1e 0f e8    	inc.w     [w14], [w14]

00002ce2 <.L35>:
    2ce2:	9e 00 78    	mov.w     [w14], w1
    2ce4:	3e 00 90    	mov.w     [w14+6], w0
    2ce6:	80 8f 50    	sub.w     w1, w0, [w15]
    2ce8:	f4 ff 39    	bra       NC, 0x2cd2

00002cea <.LSM86>:
    2cea:	01 00 37    	bra       0x2cee <.L34>

00002cec <.L37>:
    2cec:	00 00 00    	nop       

00002cee <.L34>:
    }
    return len;
    2cee:	3e 00 90    	mov.w     [w14+6], w0

00002cf0 <.LSM89>:
}
    2cf0:	00 80 fa    	ulnk      
    2cf2:	00 00 06    	return    

00002cf4 <_init_uart>:

void init_uart(void) {
    2cf4:	00 00 fa    	lnk       #0x0

00002cf6 <.LSM91>:
    init_pin();
    2cf6:	0a 0c 07    	rcall     0x450c <_init_pin>

00002cf8 <.LSM92>:

    // pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    // pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    2cf8:	40 00 20    	mov.w     #0x4, w0
    2cfa:	80 1f 78    	mov.w     w0, [w15++]
    2cfc:	30 00 20    	mov.w     #0x3, w0
    2cfe:	80 1f 78    	mov.w     w0, [w15++]
    2d00:	80 c0 b3    	mov.b     #0x8, w0
    2d02:	80 1f 78    	mov.w     w0, [w15++]
    2d04:	00 40 eb    	clr.b     w0
    2d06:	80 1f 78    	mov.w     w0, [w15++]
    2d08:	40 6a 20    	mov.w     #0x6a4, w0
    2d0a:	80 1f 78    	mov.w     w0, [w15++]
    2d0c:	40 6a 20    	mov.w     #0x6a4, w0
    2d0e:	80 1f 78    	mov.w     w0, [w15++]
    2d10:	b0 c0 b3    	mov.b     #0xb, w0
    2d12:	80 1f 78    	mov.w     w0, [w15++]
    2d14:	c0 c0 b3    	mov.b     #0xc, w0
    2d16:	80 1f 78    	mov.w     w0, [w15++]
    2d18:	47 09 20    	mov.w     #0x94, w7
    2d1a:	46 08 20    	mov.w     #0x84, w6
    2d1c:	85 22 20    	mov.w     #0x228, w5
    2d1e:	64 22 20    	mov.w     #0x226, w4
    2d20:	43 22 20    	mov.w     #0x224, w3
    2d22:	22 22 20    	mov.w     #0x222, w2
    2d24:	01 22 20    	mov.w     #0x220, w1
    2d26:	c0 28 21    	mov.w     #0x128c, w0
    2d28:	51 00 07    	rcall     0x2dcc <_uart_init>
    2d2a:	f0 87 57    	sub.w     w15, #0x10, w15

00002d2c <.LSM93>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    2d2c:	60 00 20    	mov.w     #0x6, w0
    2d2e:	80 1f 78    	mov.w     w0, [w15++]
    2d30:	50 00 20    	mov.w     #0x5, w0
    2d32:	80 1f 78    	mov.w     w0, [w15++]
    2d34:	80 c0 b3    	mov.b     #0x8, w0
    2d36:	80 1f 78    	mov.w     w0, [w15++]
    2d38:	00 40 eb    	clr.b     w0
    2d3a:	80 1f 78    	mov.w     w0, [w15++]
    2d3c:	60 6a 20    	mov.w     #0x6a6, w0
    2d3e:	80 1f 78    	mov.w     w0, [w15++]
    2d40:	60 6a 20    	mov.w     #0x6a6, w0
    2d42:	80 1f 78    	mov.w     w0, [w15++]
    2d44:	e0 c0 b3    	mov.b     #0xe, w0
    2d46:	80 1f 78    	mov.w     w0, [w15++]
    2d48:	f0 c0 b3    	mov.b     #0xf, w0
    2d4a:	80 1f 78    	mov.w     w0, [w15++]
    2d4c:	67 09 20    	mov.w     #0x96, w7
    2d4e:	66 08 20    	mov.w     #0x86, w6
    2d50:	85 23 20    	mov.w     #0x238, w5
    2d52:	64 23 20    	mov.w     #0x236, w4
    2d54:	43 23 20    	mov.w     #0x234, w3
    2d56:	22 23 20    	mov.w     #0x232, w2
    2d58:	01 23 20    	mov.w     #0x230, w1
    2d5a:	80 2c 21    	mov.w     #0x12c8, w0
    2d5c:	37 00 07    	rcall     0x2dcc <_uart_init>
    2d5e:	f0 87 57    	sub.w     w15, #0x10, w15

00002d60 <.LSM94>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    2d60:	d0 01 20    	mov.w     #0x1d, w0
    2d62:	80 1f 78    	mov.w     w0, [w15++]
    2d64:	c0 01 20    	mov.w     #0x1c, w0
    2d66:	80 1f 78    	mov.w     w0, [w15++]
    2d68:	80 c0 b3    	mov.b     #0x8, w0
    2d6a:	80 1f 78    	mov.w     w0, [w15++]
    2d6c:	80 c0 b3    	mov.b     #0x8, w0
    2d6e:	80 1f 78    	mov.w     w0, [w15++]
    2d70:	a0 6a 20    	mov.w     #0x6aa, w0
    2d72:	80 1f 78    	mov.w     w0, [w15++]
    2d74:	20 6a 20    	mov.w     #0x6a2, w0
    2d76:	80 1f 78    	mov.w     w0, [w15++]
    2d78:	20 c0 b3    	mov.b     #0x2, w0
    2d7a:	80 1f 78    	mov.w     w0, [w15++]
    2d7c:	30 c0 b3    	mov.b     #0x3, w0
    2d7e:	80 1f 78    	mov.w     w0, [w15++]
    2d80:	e7 09 20    	mov.w     #0x9e, w7
    2d82:	e6 08 20    	mov.w     #0x8e, w6
    2d84:	85 25 20    	mov.w     #0x258, w5
    2d86:	64 25 20    	mov.w     #0x256, w4
    2d88:	43 25 20    	mov.w     #0x254, w3
    2d8a:	22 25 20    	mov.w     #0x252, w2
    2d8c:	01 25 20    	mov.w     #0x250, w1
    2d8e:	40 30 21    	mov.w     #0x1304, w0
    2d90:	1d 00 07    	rcall     0x2dcc <_uart_init>
    2d92:	f0 87 57    	sub.w     w15, #0x10, w15

00002d94 <.LSM95>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    2d94:	f0 01 20    	mov.w     #0x1f, w0
    2d96:	80 1f 78    	mov.w     w0, [w15++]
    2d98:	e0 01 20    	mov.w     #0x1e, w0
    2d9a:	80 1f 78    	mov.w     w0, [w15++]
    2d9c:	80 c0 b3    	mov.b     #0x8, w0
    2d9e:	80 1f 78    	mov.w     w0, [w15++]
    2da0:	00 40 eb    	clr.b     w0
    2da2:	80 1f 78    	mov.w     w0, [w15++]
    2da4:	60 6b 20    	mov.w     #0x6b6, w0
    2da6:	80 1f 78    	mov.w     w0, [w15++]
    2da8:	60 6b 20    	mov.w     #0x6b6, w0
    2daa:	80 1f 78    	mov.w     w0, [w15++]
    2dac:	80 c0 b3    	mov.b     #0x8, w0
    2dae:	80 1f 78    	mov.w     w0, [w15++]
    2db0:	90 c0 b3    	mov.b     #0x9, w0
    2db2:	80 1f 78    	mov.w     w0, [w15++]
    2db4:	e7 09 20    	mov.w     #0x9e, w7
    2db6:	e6 08 20    	mov.w     #0x8e, w6
    2db8:	85 2b 20    	mov.w     #0x2b8, w5
    2dba:	64 2b 20    	mov.w     #0x2b6, w4
    2dbc:	43 2b 20    	mov.w     #0x2b4, w3
    2dbe:	22 2b 20    	mov.w     #0x2b2, w2
    2dc0:	01 2b 20    	mov.w     #0x2b0, w1
    2dc2:	00 34 21    	mov.w     #0x1340, w0
    2dc4:	03 00 07    	rcall     0x2dcc <_uart_init>
    2dc6:	f0 87 57    	sub.w     w15, #0x10, w15

00002dc8 <.LSM96>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    // uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    //           0, NULL, 0, NULL, 0);

    // _stdout = &uart1;
    // _stderr = &uart1;
}
    2dc8:	00 80 fa    	ulnk      
    2dca:	00 00 06    	return    

00002dcc <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2dcc:	10 00 fa    	lnk       #0x10
    2dce:	00 0f 78    	mov.w     w0, [w14]
    2dd0:	11 07 98    	mov.w     w1, [w14+2]
    2dd2:	22 07 98    	mov.w     w2, [w14+4]
    2dd4:	33 07 98    	mov.w     w3, [w14+6]
    2dd6:	44 07 98    	mov.w     w4, [w14+8]
    2dd8:	55 07 98    	mov.w     w5, [w14+10]
    2dda:	66 07 98    	mov.w     w6, [w14+12]
    2ddc:	77 07 98    	mov.w     w7, [w14+14]

00002dde <.LSM98>:
    self->UxMODE = UxMODE;
    2dde:	1e 00 78    	mov.w     [w14], w0
    2de0:	9e 00 90    	mov.w     [w14+2], w1
    2de2:	01 08 78    	mov.w     w1, [w0]

00002de4 <.LSM99>:
    self->UxSTA = UxSTA;
    2de4:	1e 00 78    	mov.w     [w14], w0
    2de6:	ae 00 90    	mov.w     [w14+4], w1
    2de8:	11 00 98    	mov.w     w1, [w0+2]

00002dea <.LSM100>:
    self->UxTXREG = UxTXREG;
    2dea:	1e 00 78    	mov.w     [w14], w0
    2dec:	be 00 90    	mov.w     [w14+6], w1
    2dee:	21 00 98    	mov.w     w1, [w0+4]

00002df0 <.LSM101>:
    self->UxRXREG = UxRXREG;
    2df0:	1e 00 78    	mov.w     [w14], w0
    2df2:	ce 00 90    	mov.w     [w14+8], w1
    2df4:	31 00 98    	mov.w     w1, [w0+6]

00002df6 <.LSM102>:
    self->UxBRG = UxBRG;
    2df6:	1e 00 78    	mov.w     [w14], w0
    2df8:	de 00 90    	mov.w     [w14+10], w1
    2dfa:	41 00 98    	mov.w     w1, [w0+8]

00002dfc <.LSM103>:
    self->IFSy = IFSy;
    2dfc:	1e 00 78    	mov.w     [w14], w0
    2dfe:	ee 00 90    	mov.w     [w14+12], w1
    2e00:	51 00 98    	mov.w     w1, [w0+10]

00002e02 <.LSM104>:
    self->IECy = IECy;
    2e02:	1e 00 78    	mov.w     [w14], w0
    2e04:	fe 00 90    	mov.w     [w14+14], w1
    2e06:	61 00 98    	mov.w     w1, [w0+12]

00002e08 <.LSM105>:
    self->UxTXIF = UxTXIF;
    2e08:	1e 00 78    	mov.w     [w14], w0
    2e0a:	8e f8 97    	mov.b     [w14-8], w1
    2e0c:	61 48 98    	mov.b     w1, [w0+14]

00002e0e <.LSM106>:
    self->UxRXIF = UxRXIF;
    2e0e:	1e 00 78    	mov.w     [w14], w0
    2e10:	ee f0 97    	mov.b     [w14-10], w1
    2e12:	71 48 98    	mov.b     w1, [w0+15]

00002e14 <.LSM107>:
    self->RXrpinr = RXrpinr;
    2e14:	1e 00 78    	mov.w     [w14], w0
    2e16:	ae b8 97    	mov.w     [w14-12], w1
    2e18:	01 08 98    	mov.w     w1, [w0+16]

00002e1a <.LSM108>:
    self->CTSrpinr = CTSrpinr;
    2e1a:	1e 00 78    	mov.w     [w14], w0
    2e1c:	9e b8 97    	mov.w     [w14-14], w1
    2e1e:	11 08 98    	mov.w     w1, [w0+18]

00002e20 <.LSM109>:
    self->RXrpshift = RXrpshift;
    2e20:	1e 00 78    	mov.w     [w14], w0
    2e22:	8e f0 97    	mov.b     [w14-16], w1
    2e24:	41 50 98    	mov.b     w1, [w0+20]

00002e26 <.LSM110>:
    self->CTSrpshift = CTSrpshift;
    2e26:	1e 00 78    	mov.w     [w14], w0
    2e28:	ee e8 97    	mov.b     [w14-18], w1
    2e2a:	51 50 98    	mov.b     w1, [w0+21]

00002e2c <.LSM111>:
    self->TXrpnum = TXrpnum;
    2e2c:	1e 00 78    	mov.w     [w14], w0
    2e2e:	ee b0 97    	mov.w     [w14-20], w1
    2e30:	31 08 98    	mov.w     w1, [w0+22]

00002e32 <.LSM112>:
    self->RTSrpnum = RTSrpnum;
    2e32:	1e 00 78    	mov.w     [w14], w0
    2e34:	de b0 97    	mov.w     [w14-22], w1
    2e36:	41 08 98    	mov.w     w1, [w0+24]

00002e38 <.LSM113>:
    self->TX = NULL;
    2e38:	1e 00 78    	mov.w     [w14], w0
    2e3a:	80 00 eb    	clr.w     w1
    2e3c:	51 08 98    	mov.w     w1, [w0+26]

00002e3e <.LSM114>:
    self->RX = NULL;
    2e3e:	1e 00 78    	mov.w     [w14], w0
    2e40:	80 00 eb    	clr.w     w1
    2e42:	61 08 98    	mov.w     w1, [w0+28]

00002e44 <.LSM115>:
    self->RTS = NULL;
    2e44:	1e 00 78    	mov.w     [w14], w0
    2e46:	80 00 eb    	clr.w     w1
    2e48:	71 08 98    	mov.w     w1, [w0+30]

00002e4a <.LSM116>:
    self->CTS = NULL;
    2e4a:	1e 00 78    	mov.w     [w14], w0
    2e4c:	80 00 eb    	clr.w     w1
    2e4e:	01 10 98    	mov.w     w1, [w0+32]

00002e50 <.LSM117>:
    self->TXbuffer.data = NULL;
    2e50:	1e 00 78    	mov.w     [w14], w0
    2e52:	80 00 eb    	clr.w     w1
    2e54:	11 10 98    	mov.w     w1, [w0+34]

00002e56 <.LSM118>:
    self->TXbuffer.length = 0;
    2e56:	1e 00 78    	mov.w     [w14], w0
    2e58:	80 00 eb    	clr.w     w1
    2e5a:	21 10 98    	mov.w     w1, [w0+36]

00002e5c <.LSM119>:
    self->TXbuffer.head = 0;
    2e5c:	1e 00 78    	mov.w     [w14], w0
    2e5e:	80 00 eb    	clr.w     w1
    2e60:	31 10 98    	mov.w     w1, [w0+38]

00002e62 <.LSM120>:
    self->TXbuffer.tail = 0;
    2e62:	1e 00 78    	mov.w     [w14], w0
    2e64:	80 00 eb    	clr.w     w1
    2e66:	41 10 98    	mov.w     w1, [w0+40]

00002e68 <.LSM121>:
    self->TXbuffer.count = 0;
    2e68:	1e 00 78    	mov.w     [w14], w0
    2e6a:	80 00 eb    	clr.w     w1
    2e6c:	51 10 98    	mov.w     w1, [w0+42]

00002e6e <.LSM122>:
    self->RXbuffer.data = NULL;
    2e6e:	1e 00 78    	mov.w     [w14], w0
    2e70:	80 00 eb    	clr.w     w1
    2e72:	61 10 98    	mov.w     w1, [w0+44]

00002e74 <.LSM123>:
    self->RXbuffer.length = 0;
    2e74:	1e 00 78    	mov.w     [w14], w0
    2e76:	80 00 eb    	clr.w     w1
    2e78:	71 10 98    	mov.w     w1, [w0+46]

00002e7a <.LSM124>:
    self->RXbuffer.head = 0;
    2e7a:	1e 00 78    	mov.w     [w14], w0
    2e7c:	80 00 eb    	clr.w     w1
    2e7e:	01 18 98    	mov.w     w1, [w0+48]

00002e80 <.LSM125>:
    self->RXbuffer.tail = 0;
    2e80:	1e 00 78    	mov.w     [w14], w0
    2e82:	80 00 eb    	clr.w     w1
    2e84:	11 18 98    	mov.w     w1, [w0+50]

00002e86 <.LSM126>:
    self->RXbuffer.count = 0;
    2e86:	1e 00 78    	mov.w     [w14], w0
    2e88:	80 00 eb    	clr.w     w1
    2e8a:	21 18 98    	mov.w     w1, [w0+52]

00002e8c <.LSM127>:
    self->TXthreshold = 1;
    2e8c:	1e 00 78    	mov.w     [w14], w0
    2e8e:	11 00 20    	mov.w     #0x1, w1
    2e90:	31 18 98    	mov.w     w1, [w0+54]

00002e92 <.LSM128>:
    self->putc = NULL;
    2e92:	1e 00 78    	mov.w     [w14], w0
    2e94:	80 00 eb    	clr.w     w1
    2e96:	41 18 98    	mov.w     w1, [w0+56]

00002e98 <.LSM129>:
    self->getc = NULL;
    2e98:	1e 00 78    	mov.w     [w14], w0
    2e9a:	80 00 eb    	clr.w     w1
    2e9c:	51 18 98    	mov.w     w1, [w0+58]

00002e9e <.LSM130>:
}
    2e9e:	00 80 fa    	ulnk      
    2ea0:	00 00 06    	return    

00002ea2 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    2ea2:	10 00 fa    	lnk       #0x10
    2ea4:	88 1f 78    	mov.w     w8, [w15++]
    2ea6:	00 0f 78    	mov.w     w0, [w14]
    2ea8:	11 07 98    	mov.w     w1, [w14+2]
    2eaa:	22 07 98    	mov.w     w2, [w14+4]
    2eac:	33 07 98    	mov.w     w3, [w14+6]
    2eae:	44 07 98    	mov.w     w4, [w14+8]
    2eb0:	56 07 98    	mov.w     w6, [w14+10]
    2eb2:	67 07 98    	mov.w     w7, [w14+12]
    2eb4:	65 4f 98    	mov.b     w5, [w14+14]

00002eb6 <.LSM132>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    2eb6:	1e 00 78    	mov.w     [w14], w0
    2eb8:	10 00 78    	mov.w     [w0], w0
    2eba:	80 00 eb    	clr.w     w1
    2ebc:	01 08 78    	mov.w     w1, [w0]

00002ebe <.LSM133>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    2ebe:	1e 00 90    	mov.w     [w14+2], w0
    2ec0:	60 00 90    	mov.w     [w0+12], w0
    2ec2:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2ec4:	0e 02 32    	bra       Z, 0x32e2 <.L73>
    2ec6:	2e 00 90    	mov.w     [w14+4], w0
    2ec8:	60 00 90    	mov.w     [w0+12], w0
    2eca:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2ecc:	0c 02 32    	bra       Z, 0x32e6 <.L74>

00002ece <.LSM134>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    2ece:	1e 00 90    	mov.w     [w14+2], w0
    2ed0:	00 08 90    	mov.w     [w0+16], w0
    2ed2:	00 00 e0    	cp0.w     w0
    2ed4:	69 00 3a    	bra       NZ, 0x2fa8 <.L44>
    2ed6:	2e 00 90    	mov.w     [w14+4], w0
    2ed8:	00 08 90    	mov.w     [w0+16], w0
    2eda:	00 00 e0    	cp0.w     w0
    2edc:	65 00 3a    	bra       NZ, 0x2fa8 <.L44>

00002ede <.LSM135>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    2ede:	1e 00 90    	mov.w     [w14+2], w0
    2ee0:	7c 0c 07    	rcall     0x47da <_pin_digitalOut>

00002ee2 <.LSM136>:
        pin_set(TX);
    2ee2:	1e 00 90    	mov.w     [w14+2], w0
    2ee4:	d7 0c 07    	rcall     0x4894 <_pin_set>

00002ee6 <.LSM137>:
        pin_digitalIn(RX);
    2ee6:	2e 00 90    	mov.w     [w14+4], w0
    2ee8:	51 0c 07    	rcall     0x478c <_pin_digitalIn>

00002eea <.LSM138>:
        self->TX = TX;
    2eea:	1e 00 78    	mov.w     [w14], w0
    2eec:	9e 00 90    	mov.w     [w14+2], w1
    2eee:	51 08 98    	mov.w     w1, [w0+26]

00002ef0 <.LSM139>:
        TX->owner = (void *)self;
    2ef0:	1e 00 90    	mov.w     [w14+2], w0
    2ef2:	9e 00 78    	mov.w     [w14], w1
    2ef4:	01 08 98    	mov.w     w1, [w0+16]

00002ef6 <.LSM140>:
        TX->write = NULL;
    2ef6:	1e 00 90    	mov.w     [w14+2], w0
    2ef8:	80 00 eb    	clr.w     w1
    2efa:	11 08 98    	mov.w     w1, [w0+18]

00002efc <.LSM141>:
        TX->read = NULL;
    2efc:	1e 00 90    	mov.w     [w14+2], w0
    2efe:	80 00 eb    	clr.w     w1
    2f00:	21 08 98    	mov.w     w1, [w0+20]

00002f02 <.LSM142>:
        self->RX = RX;
    2f02:	1e 00 78    	mov.w     [w14], w0
    2f04:	ae 00 90    	mov.w     [w14+4], w1
    2f06:	61 08 98    	mov.w     w1, [w0+28]

00002f08 <.LSM143>:
        RX->owner = (void *)self;
    2f08:	2e 00 90    	mov.w     [w14+4], w0
    2f0a:	9e 00 78    	mov.w     [w14], w1
    2f0c:	01 08 98    	mov.w     w1, [w0+16]

00002f0e <.LSM144>:
        RX->write = NULL;
    2f0e:	2e 00 90    	mov.w     [w14+4], w0
    2f10:	80 00 eb    	clr.w     w1
    2f12:	11 08 98    	mov.w     w1, [w0+18]

00002f14 <.LSM145>:
        RX->read = NULL;
    2f14:	2e 00 90    	mov.w     [w14+4], w0
    2f16:	80 00 eb    	clr.w     w1
    2f18:	21 08 98    	mov.w     w1, [w0+20]

00002f1a <.LSM146>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2f1a:	11 3a 80    	mov.w     0x742, w1
    2f1c:	f0 0b 20    	mov.w     #0xbf, w0
    2f1e:	00 81 60    	and.w     w1, w0, w2
    2f20:	60 04 20    	mov.w     #0x46, w0
    2f22:	71 05 20    	mov.w     #0x57, w1
    2f24:	23 74 20    	mov.w     #0x742, w3
    2f26:	80 49 78    	mov.b     w0, [w3]
    2f28:	81 49 78    	mov.b     w1, [w3]
    2f2a:	82 49 78    	mov.b     w2, [w3]

00002f2c <.LSM147>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    2f2c:	1e 00 90    	mov.w     [w14+2], w0
    2f2e:	70 00 90    	mov.w     [w0+14], w0
    2f30:	9e 00 90    	mov.w     [w14+2], w1
    2f32:	f1 00 90    	mov.w     [w1+14], w1
    2f34:	11 01 78    	mov.w     [w1], w2
    2f36:	9e 00 90    	mov.w     [w14+2], w1
    2f38:	a1 48 90    	mov.b     [w1+10], w1
    2f3a:	81 80 fb    	ze        w1, w1
    2f3c:	f3 03 20    	mov.w     #0x3f, w3
    2f3e:	81 18 dd    	sl.w      w3, w1, w1
    2f40:	81 80 ea    	com.w     w1, w1
    2f42:	81 00 61    	and.w     w2, w1, w1
    2f44:	01 08 78    	mov.w     w1, [w0]

00002f46 <.LSM148>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    2f46:	1e 00 90    	mov.w     [w14+2], w0
    2f48:	70 00 90    	mov.w     [w0+14], w0
    2f4a:	9e 00 90    	mov.w     [w14+2], w1
    2f4c:	f1 00 90    	mov.w     [w1+14], w1
    2f4e:	11 01 78    	mov.w     [w1], w2
    2f50:	9e 00 78    	mov.w     [w14], w1
    2f52:	b1 09 90    	mov.w     [w1+22], w3
    2f54:	9e 00 90    	mov.w     [w14+2], w1
    2f56:	a1 48 90    	mov.b     [w1+10], w1
    2f58:	81 80 fb    	ze        w1, w1
    2f5a:	81 18 dd    	sl.w      w3, w1, w1
    2f5c:	82 80 70    	ior.w     w1, w2, w1
    2f5e:	01 08 78    	mov.w     w1, [w0]

00002f60 <.LSM149>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    2f60:	1e 00 78    	mov.w     [w14], w0
    2f62:	00 08 90    	mov.w     [w0+16], w0
    2f64:	9e 00 78    	mov.w     [w14], w1
    2f66:	81 08 90    	mov.w     [w1+16], w1
    2f68:	11 01 78    	mov.w     [w1], w2
    2f6a:	9e 00 78    	mov.w     [w14], w1
    2f6c:	c1 50 90    	mov.b     [w1+20], w1
    2f6e:	81 80 fb    	ze        w1, w1
    2f70:	f3 03 20    	mov.w     #0x3f, w3
    2f72:	81 18 dd    	sl.w      w3, w1, w1
    2f74:	81 80 ea    	com.w     w1, w1
    2f76:	81 00 61    	and.w     w2, w1, w1
    2f78:	01 08 78    	mov.w     w1, [w0]

00002f7a <.LSM150>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    2f7a:	1e 00 78    	mov.w     [w14], w0
    2f7c:	00 08 90    	mov.w     [w0+16], w0
    2f7e:	9e 00 78    	mov.w     [w14], w1
    2f80:	81 08 90    	mov.w     [w1+16], w1
    2f82:	11 01 78    	mov.w     [w1], w2
    2f84:	ae 00 90    	mov.w     [w14+4], w1
    2f86:	e1 01 90    	mov.w     [w1+12], w3
    2f88:	9e 00 78    	mov.w     [w14], w1
    2f8a:	c1 50 90    	mov.b     [w1+20], w1
    2f8c:	81 80 fb    	ze        w1, w1
    2f8e:	81 18 dd    	sl.w      w3, w1, w1
    2f90:	82 80 70    	ior.w     w1, w2, w1
    2f92:	01 08 78    	mov.w     w1, [w0]

00002f94 <.LSM151>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2f94:	11 3a 80    	mov.w     0x742, w1
    2f96:	00 04 20    	mov.w     #0x40, w0
    2f98:	01 01 70    	ior.w     w0, w1, w2
    2f9a:	60 04 20    	mov.w     #0x46, w0
    2f9c:	71 05 20    	mov.w     #0x57, w1
    2f9e:	23 74 20    	mov.w     #0x742, w3
    2fa0:	80 49 78    	mov.b     w0, [w3]
    2fa2:	81 49 78    	mov.b     w1, [w3]
    2fa4:	82 49 78    	mov.b     w2, [w3]
    2fa6:	0a 00 37    	bra       0x2fbc <.L45>

00002fa8 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    2fa8:	1e 00 78    	mov.w     [w14], w0
    2faa:	d0 08 90    	mov.w     [w0+26], w1
    2fac:	1e 00 90    	mov.w     [w14+2], w0
    2fae:	80 8f 50    	sub.w     w1, w0, [w15]
    2fb0:	9c 01 3a    	bra       NZ, 0x32ea <.L75>
    2fb2:	1e 00 78    	mov.w     [w14], w0
    2fb4:	e0 08 90    	mov.w     [w0+28], w1
    2fb6:	2e 00 90    	mov.w     [w14+4], w0
    2fb8:	80 8f 50    	sub.w     w1, w0, [w15]
    2fba:	99 01 3a    	bra       NZ, 0x32ee <.L76>

00002fbc <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    2fbc:	3e 00 90    	mov.w     [w14+6], w0
    2fbe:	00 00 e0    	cp0.w     w0
    2fc0:	87 00 32    	bra       Z, 0x30d0 <.L47>
    2fc2:	4e 00 90    	mov.w     [w14+8], w0
    2fc4:	00 00 e0    	cp0.w     w0
    2fc6:	84 00 32    	bra       Z, 0x30d0 <.L47>

00002fc8 <.LSM154>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    2fc8:	3e 00 90    	mov.w     [w14+6], w0
    2fca:	60 00 90    	mov.w     [w0+12], w0
    2fcc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2fce:	91 01 32    	bra       Z, 0x32f2 <.L77>
    2fd0:	4e 00 90    	mov.w     [w14+8], w0
    2fd2:	60 00 90    	mov.w     [w0+12], w0
    2fd4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2fd6:	8f 01 32    	bra       Z, 0x32f6 <.L78>

00002fd8 <.LSM155>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    2fd8:	3e 00 90    	mov.w     [w14+6], w0
    2fda:	00 08 90    	mov.w     [w0+16], w0
    2fdc:	00 00 e0    	cp0.w     w0
    2fde:	69 00 3a    	bra       NZ, 0x30b2 <.L50>
    2fe0:	4e 00 90    	mov.w     [w14+8], w0
    2fe2:	00 08 90    	mov.w     [w0+16], w0
    2fe4:	00 00 e0    	cp0.w     w0
    2fe6:	65 00 3a    	bra       NZ, 0x30b2 <.L50>

00002fe8 <.LSM156>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    2fe8:	3e 00 90    	mov.w     [w14+6], w0
    2fea:	f7 0b 07    	rcall     0x47da <_pin_digitalOut>

00002fec <.LSM157>:
            pin_set(RTS);
    2fec:	3e 00 90    	mov.w     [w14+6], w0
    2fee:	52 0c 07    	rcall     0x4894 <_pin_set>

00002ff0 <.LSM158>:
            pin_digitalIn(CTS);
    2ff0:	4e 00 90    	mov.w     [w14+8], w0
    2ff2:	cc 0b 07    	rcall     0x478c <_pin_digitalIn>

00002ff4 <.LSM159>:
            self->RTS = RTS;
    2ff4:	1e 00 78    	mov.w     [w14], w0
    2ff6:	be 00 90    	mov.w     [w14+6], w1
    2ff8:	71 08 98    	mov.w     w1, [w0+30]

00002ffa <.LSM160>:
            RTS->owner = (void *)self;
    2ffa:	3e 00 90    	mov.w     [w14+6], w0
    2ffc:	9e 00 78    	mov.w     [w14], w1
    2ffe:	01 08 98    	mov.w     w1, [w0+16]

00003000 <.LSM161>:
            RTS->write = NULL;
    3000:	3e 00 90    	mov.w     [w14+6], w0
    3002:	80 00 eb    	clr.w     w1
    3004:	11 08 98    	mov.w     w1, [w0+18]

00003006 <.LSM162>:
            RTS->read = NULL;
    3006:	3e 00 90    	mov.w     [w14+6], w0
    3008:	80 00 eb    	clr.w     w1
    300a:	21 08 98    	mov.w     w1, [w0+20]

0000300c <.LSM163>:
            self->CTS = CTS;
    300c:	1e 00 78    	mov.w     [w14], w0
    300e:	ce 00 90    	mov.w     [w14+8], w1
    3010:	01 10 98    	mov.w     w1, [w0+32]

00003012 <.LSM164>:
            CTS->owner = (void *)self;
    3012:	4e 00 90    	mov.w     [w14+8], w0
    3014:	9e 00 78    	mov.w     [w14], w1
    3016:	01 08 98    	mov.w     w1, [w0+16]

00003018 <.LSM165>:
            CTS->write = NULL;
    3018:	4e 00 90    	mov.w     [w14+8], w0
    301a:	80 00 eb    	clr.w     w1
    301c:	11 08 98    	mov.w     w1, [w0+18]

0000301e <.LSM166>:
            CTS->read = NULL;
    301e:	4e 00 90    	mov.w     [w14+8], w0
    3020:	80 00 eb    	clr.w     w1
    3022:	21 08 98    	mov.w     w1, [w0+20]

00003024 <.LSM167>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    3024:	11 3a 80    	mov.w     0x742, w1
    3026:	f0 0b 20    	mov.w     #0xbf, w0
    3028:	00 81 60    	and.w     w1, w0, w2
    302a:	60 04 20    	mov.w     #0x46, w0
    302c:	71 05 20    	mov.w     #0x57, w1
    302e:	23 74 20    	mov.w     #0x742, w3
    3030:	80 49 78    	mov.b     w0, [w3]
    3032:	81 49 78    	mov.b     w1, [w3]
    3034:	82 49 78    	mov.b     w2, [w3]

00003036 <.LSM168>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    3036:	3e 00 90    	mov.w     [w14+6], w0
    3038:	70 00 90    	mov.w     [w0+14], w0
    303a:	be 00 90    	mov.w     [w14+6], w1
    303c:	f1 00 90    	mov.w     [w1+14], w1
    303e:	11 01 78    	mov.w     [w1], w2
    3040:	be 00 90    	mov.w     [w14+6], w1
    3042:	a1 48 90    	mov.b     [w1+10], w1
    3044:	81 80 fb    	ze        w1, w1
    3046:	f3 03 20    	mov.w     #0x3f, w3
    3048:	81 18 dd    	sl.w      w3, w1, w1
    304a:	81 80 ea    	com.w     w1, w1
    304c:	81 00 61    	and.w     w2, w1, w1
    304e:	01 08 78    	mov.w     w1, [w0]

00003050 <.LSM169>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    3050:	3e 00 90    	mov.w     [w14+6], w0
    3052:	70 00 90    	mov.w     [w0+14], w0
    3054:	be 00 90    	mov.w     [w14+6], w1
    3056:	f1 00 90    	mov.w     [w1+14], w1
    3058:	11 01 78    	mov.w     [w1], w2
    305a:	9e 00 78    	mov.w     [w14], w1
    305c:	c1 09 90    	mov.w     [w1+24], w3
    305e:	be 00 90    	mov.w     [w14+6], w1
    3060:	a1 48 90    	mov.b     [w1+10], w1
    3062:	81 80 fb    	ze        w1, w1
    3064:	81 18 dd    	sl.w      w3, w1, w1
    3066:	82 80 70    	ior.w     w1, w2, w1
    3068:	01 08 78    	mov.w     w1, [w0]

0000306a <.LSM170>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    306a:	1e 00 78    	mov.w     [w14], w0
    306c:	10 08 90    	mov.w     [w0+18], w0
    306e:	9e 00 78    	mov.w     [w14], w1
    3070:	91 08 90    	mov.w     [w1+18], w1
    3072:	11 01 78    	mov.w     [w1], w2
    3074:	9e 00 78    	mov.w     [w14], w1
    3076:	d1 50 90    	mov.b     [w1+21], w1
    3078:	81 80 fb    	ze        w1, w1
    307a:	f3 03 20    	mov.w     #0x3f, w3
    307c:	81 18 dd    	sl.w      w3, w1, w1
    307e:	81 80 ea    	com.w     w1, w1
    3080:	81 00 61    	and.w     w2, w1, w1
    3082:	01 08 78    	mov.w     w1, [w0]

00003084 <.LSM171>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    3084:	1e 00 78    	mov.w     [w14], w0
    3086:	10 08 90    	mov.w     [w0+18], w0
    3088:	9e 00 78    	mov.w     [w14], w1
    308a:	91 08 90    	mov.w     [w1+18], w1
    308c:	11 01 78    	mov.w     [w1], w2
    308e:	ce 00 90    	mov.w     [w14+8], w1
    3090:	e1 01 90    	mov.w     [w1+12], w3
    3092:	9e 00 78    	mov.w     [w14], w1
    3094:	d1 50 90    	mov.b     [w1+21], w1
    3096:	81 80 fb    	ze        w1, w1
    3098:	81 18 dd    	sl.w      w3, w1, w1
    309a:	82 80 70    	ior.w     w1, w2, w1
    309c:	01 08 78    	mov.w     w1, [w0]

0000309e <.LSM172>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    309e:	11 3a 80    	mov.w     0x742, w1
    30a0:	00 04 20    	mov.w     #0x40, w0
    30a2:	01 01 70    	ior.w     w0, w1, w2
    30a4:	60 04 20    	mov.w     #0x46, w0
    30a6:	71 05 20    	mov.w     #0x57, w1
    30a8:	23 74 20    	mov.w     #0x742, w3
    30aa:	80 49 78    	mov.b     w0, [w3]
    30ac:	81 49 78    	mov.b     w1, [w3]
    30ae:	82 49 78    	mov.b     w2, [w3]
    30b0:	0a 00 37    	bra       0x30c6 <.L51>

000030b2 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    30b2:	1e 00 78    	mov.w     [w14], w0
    30b4:	f0 08 90    	mov.w     [w0+30], w1
    30b6:	3e 00 90    	mov.w     [w14+6], w0
    30b8:	80 8f 50    	sub.w     w1, w0, [w15]
    30ba:	1f 01 3a    	bra       NZ, 0x32fa <.L79>
    30bc:	1e 00 78    	mov.w     [w14], w0
    30be:	80 10 90    	mov.w     [w0+32], w1
    30c0:	4e 00 90    	mov.w     [w14+8], w0
    30c2:	80 8f 50    	sub.w     w1, w0, [w15]
    30c4:	1c 01 3a    	bra       NZ, 0x32fe <.L80>

000030c6 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    30c6:	1e 00 78    	mov.w     [w14], w0
    30c8:	10 00 78    	mov.w     [w0], w0
    30ca:	01 20 20    	mov.w     #0x200, w1
    30cc:	01 08 78    	mov.w     w1, [w0]
    30ce:	06 00 37    	bra       0x30dc <.L53>

000030d0 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    30d0:	3e 00 90    	mov.w     [w14+6], w0
    30d2:	00 00 e0    	cp0.w     w0
    30d4:	16 01 3a    	bra       NZ, 0x3302 <.L81>
    30d6:	4e 00 90    	mov.w     [w14+8], w0
    30d8:	00 00 e0    	cp0.w     w0
    30da:	15 01 3a    	bra       NZ, 0x3306 <.L82>

000030dc <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    30dc:	18 c0 b3    	mov.b     #0x1, w8
    30de:	02 40 22    	mov.w     #0x2400, w2
    30e0:	43 a7 24    	mov.w     #0x4a74, w3
    30e2:	5e 00 90    	mov.w     [w14+10], w0
    30e4:	ee 00 90    	mov.w     [w14+12], w1
    30e6:	66 f1 07    	rcall     0x13b4 <___gesf2>
    30e8:	00 00 e0    	cp0.w     w0
    30ea:	01 00 3c    	bra       GT, 0x30ee <.L55>
    30ec:	00 44 eb    	clr.b     w8

000030ee <.L55>:
    30ee:	08 04 e0    	cp0.b     w8
    30f0:	04 00 32    	bra       Z, 0x30fa <.L56>

000030f2 <.LSM177>:
        baudrate = FCY/4.;
    30f2:	00 40 22    	mov.w     #0x2400, w0
    30f4:	41 a7 24    	mov.w     #0x4a74, w1
    30f6:	50 07 98    	mov.w     w0, [w14+10]
    30f8:	61 07 98    	mov.w     w1, [w14+12]

000030fa <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    30fa:	18 c0 b3    	mov.b     #0x1, w8
    30fc:	02 40 22    	mov.w     #0x2400, w2
    30fe:	43 17 24    	mov.w     #0x4174, w3
    3100:	5e 00 90    	mov.w     [w14+10], w0
    3102:	ee 00 90    	mov.w     [w14+12], w1
    3104:	55 f1 07    	rcall     0x13b0 <___eqsf2>
    3106:	00 00 e0    	cp0.w     w0
    3108:	01 00 35    	bra       LT, 0x310c <.L57>
    310a:	00 44 eb    	clr.b     w8

0000310c <.L57>:
    310c:	08 04 e0    	cp0.b     w8
    310e:	04 00 32    	bra       Z, 0x3118 <.L58>

00003110 <.LSM179>:
        baudrate = FCY/(16.*65536.);
    3110:	00 40 22    	mov.w     #0x2400, w0
    3112:	41 17 24    	mov.w     #0x4174, w1
    3114:	50 07 98    	mov.w     w0, [w14+10]
    3116:	61 07 98    	mov.w     w1, [w14+12]

00003118 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    3118:	18 c0 b3    	mov.b     #0x1, w8
    311a:	02 40 22    	mov.w     #0x2400, w2
    311c:	43 27 24    	mov.w     #0x4274, w3
    311e:	5e 00 90    	mov.w     [w14+10], w0
    3120:	ee 00 90    	mov.w     [w14+12], w1
    3122:	46 f1 07    	rcall     0x13b0 <___eqsf2>
    3124:	00 00 e0    	cp0.w     w0
    3126:	01 00 34    	bra       LE, 0x312a <.L59>
    3128:	00 44 eb    	clr.b     w8

0000312a <.L59>:
    312a:	08 04 e0    	cp0.b     w8
    312c:	0f 00 32    	bra       Z, 0x314c <.L60>

0000312e <.LSM181>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    312e:	1e 00 78    	mov.w     [w14], w0
    3130:	40 04 90    	mov.w     [w0+8], w8
    3132:	5e 01 90    	mov.w     [w14+10], w2
    3134:	ee 01 90    	mov.w     [w14+12], w3
    3136:	00 40 22    	mov.w     #0x2400, w0
    3138:	41 97 24    	mov.w     #0x4974, w1
    313a:	f8 f0 07    	rcall     0x132c <___divsf3>
    313c:	02 00 20    	mov.w     #0x0, w2
    313e:	03 f0 23    	mov.w     #0x3f00, w3
    3140:	98 f0 07    	rcall     0x1272 <___addsf3>
    3142:	3a f1 07    	rcall     0x13b8 <___fixunssfsi>
    3144:	00 00 78    	mov.w     w0, w0
    3146:	00 00 e9    	dec.w     w0, w0
    3148:	00 0c 78    	mov.w     w0, [w8]
    314a:	15 00 37    	bra       0x3176 <.L61>

0000314c <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    314c:	1e 00 78    	mov.w     [w14], w0
    314e:	10 00 78    	mov.w     [w0], w0
    3150:	9e 00 78    	mov.w     [w14], w1
    3152:	91 00 78    	mov.w     [w1], w1
    3154:	91 00 78    	mov.w     [w1], w1
    3156:	01 30 a0    	bset.w    w1, #0x3
    3158:	01 08 78    	mov.w     w1, [w0]

0000315a <.LSM183>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    315a:	1e 00 78    	mov.w     [w14], w0
    315c:	40 04 90    	mov.w     [w0+8], w8
    315e:	5e 01 90    	mov.w     [w14+10], w2
    3160:	ee 01 90    	mov.w     [w14+12], w3
    3162:	00 40 22    	mov.w     #0x2400, w0
    3164:	41 a7 24    	mov.w     #0x4a74, w1
    3166:	e2 f0 07    	rcall     0x132c <___divsf3>
    3168:	02 00 20    	mov.w     #0x0, w2
    316a:	03 f0 23    	mov.w     #0x3f00, w3
    316c:	82 f0 07    	rcall     0x1272 <___addsf3>
    316e:	24 f1 07    	rcall     0x13b8 <___fixunssfsi>
    3170:	00 00 78    	mov.w     w0, w0
    3172:	00 00 e9    	dec.w     w0, w0
    3174:	00 0c 78    	mov.w     w0, [w8]

00003176 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    3176:	ee 48 90    	mov.b     [w14+14], w1
    3178:	50 c4 b3    	mov.b     #0x45, w0
    317a:	80 cf 50    	sub.b     w1, w0, [w15]
    317c:	04 00 32    	bra       Z, 0x3186 <.L62>
    317e:	ee 48 90    	mov.b     [w14+14], w1
    3180:	50 c6 b3    	mov.b     #0x65, w0
    3182:	80 cf 50    	sub.b     w1, w0, [w15]
    3184:	08 00 3a    	bra       NZ, 0x3196 <.L63>

00003186 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    3186:	1e 00 78    	mov.w     [w14], w0
    3188:	10 00 78    	mov.w     [w0], w0
    318a:	9e 00 78    	mov.w     [w14], w1
    318c:	91 00 78    	mov.w     [w1], w1
    318e:	91 00 78    	mov.w     [w1], w1
    3190:	01 10 a0    	bset.w    w1, #0x1
    3192:	01 08 78    	mov.w     w1, [w0]
    3194:	18 00 37    	bra       0x31c6 <.L64>

00003196 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    3196:	ee 48 90    	mov.b     [w14+14], w1
    3198:	f0 c4 b3    	mov.b     #0x4f, w0
    319a:	80 cf 50    	sub.b     w1, w0, [w15]
    319c:	04 00 32    	bra       Z, 0x31a6 <.L65>
    319e:	ee 48 90    	mov.b     [w14+14], w1
    31a0:	f0 c6 b3    	mov.b     #0x6f, w0
    31a2:	80 cf 50    	sub.b     w1, w0, [w15]
    31a4:	08 00 3a    	bra       NZ, 0x31b6 <.L66>

000031a6 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    31a6:	1e 00 78    	mov.w     [w14], w0
    31a8:	10 00 78    	mov.w     [w0], w0
    31aa:	9e 00 78    	mov.w     [w14], w1
    31ac:	91 00 78    	mov.w     [w1], w1
    31ae:	91 00 78    	mov.w     [w1], w1
    31b0:	01 20 a0    	bset.w    w1, #0x2
    31b2:	01 08 78    	mov.w     w1, [w0]
    31b4:	08 00 37    	bra       0x31c6 <.L64>

000031b6 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    31b6:	ee 48 90    	mov.b     [w14+14], w1
    31b8:	e0 c4 b3    	mov.b     #0x4e, w0
    31ba:	80 cf 50    	sub.b     w1, w0, [w15]
    31bc:	04 00 32    	bra       Z, 0x31c6 <.L64>
    31be:	ee 48 90    	mov.b     [w14+14], w1
    31c0:	e0 c6 b3    	mov.b     #0x6e, w0
    31c2:	80 cf 50    	sub.b     w1, w0, [w15]
    31c4:	a2 00 3a    	bra       NZ, 0x330a <.L83>

000031c6 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    31c6:	4e b8 97    	mov.w     [w14-8], w0
    31c8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    31ca:	08 00 3a    	bra       NZ, 0x31dc <.L67>

000031cc <.LSM190>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    31cc:	1e 00 78    	mov.w     [w14], w0
    31ce:	10 00 78    	mov.w     [w0], w0
    31d0:	9e 00 78    	mov.w     [w14], w1
    31d2:	91 00 78    	mov.w     [w1], w1
    31d4:	91 00 78    	mov.w     [w1], w1
    31d6:	01 00 a0    	bset.w    w1, #0x0
    31d8:	01 08 78    	mov.w     w1, [w0]
    31da:	03 00 37    	bra       0x31e2 <.L68>

000031dc <.L67>:
    } else if (stopbits!=1) {
    31dc:	4e b8 97    	mov.w     [w14-8], w0
    31de:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    31e0:	96 00 3a    	bra       NZ, 0x330e <.L84>

000031e2 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    31e2:	2e b8 97    	mov.w     [w14-12], w0
    31e4:	00 00 e0    	cp0.w     w0
    31e6:	04 00 3a    	bra       NZ, 0x31f0 <.L69>

000031e8 <.LSM193>:
        self->putc = __putc_nobuffer;
    31e8:	1e 00 78    	mov.w     [w14], w0
    31ea:	c1 92 22    	mov.w     #0x292c, w1
    31ec:	41 18 98    	mov.w     w1, [w0+56]
    31ee:	36 00 37    	bra       0x325c <.L70>

000031f0 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    31f0:	1e 00 78    	mov.w     [w14], w0
    31f2:	10 00 90    	mov.w     [w0+2], w0
    31f4:	9e 00 78    	mov.w     [w14], w1
    31f6:	91 00 90    	mov.w     [w1+2], w1
    31f8:	11 01 78    	mov.w     [w1], w2
    31fa:	01 00 22    	mov.w     #0x2000, w1
    31fc:	82 80 70    	ior.w     w1, w2, w1
    31fe:	01 08 78    	mov.w     w1, [w0]

00003200 <.LSM195>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    3200:	1e 00 78    	mov.w     [w14], w0
    3202:	ae b8 97    	mov.w     [w14-12], w1
    3204:	11 10 98    	mov.w     w1, [w0+34]

00003206 <.LSM196>:
        self->TXbuffer.length = TXbufferlen;
    3206:	1e 00 78    	mov.w     [w14], w0
    3208:	9e b8 97    	mov.w     [w14-14], w1
    320a:	21 10 98    	mov.w     w1, [w0+36]

0000320c <.LSM197>:
        self->TXbuffer.head = 0;
    320c:	1e 00 78    	mov.w     [w14], w0
    320e:	80 00 eb    	clr.w     w1
    3210:	31 10 98    	mov.w     w1, [w0+38]

00003212 <.LSM198>:
        self->TXbuffer.tail = 0;
    3212:	1e 00 78    	mov.w     [w14], w0
    3214:	80 00 eb    	clr.w     w1
    3216:	41 10 98    	mov.w     w1, [w0+40]

00003218 <.LSM199>:
        self->TXbuffer.count = 0;
    3218:	1e 00 78    	mov.w     [w14], w0
    321a:	80 00 eb    	clr.w     w1
    321c:	51 10 98    	mov.w     w1, [w0+42]

0000321e <.LSM200>:
        self->TXthreshold = TXthreshold;
    321e:	1e 00 78    	mov.w     [w14], w0
    3220:	be b8 97    	mov.w     [w14-10], w1
    3222:	31 18 98    	mov.w     w1, [w0+54]

00003224 <.LSM201>:
        self->putc = __putc_buffer;
    3224:	1e 00 78    	mov.w     [w14], w0
    3226:	e1 96 22    	mov.w     #0x296e, w1
    3228:	41 18 98    	mov.w     w1, [w0+56]

0000322a <.LSM202>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    322a:	1e 00 78    	mov.w     [w14], w0
    322c:	50 00 90    	mov.w     [w0+10], w0
    322e:	9e 00 78    	mov.w     [w14], w1
    3230:	d1 00 90    	mov.w     [w1+10], w1
    3232:	11 01 78    	mov.w     [w1], w2
    3234:	9e 00 78    	mov.w     [w14], w1
    3236:	e1 48 90    	mov.b     [w1+14], w1
    3238:	81 80 fb    	ze        w1, w1
    323a:	13 00 20    	mov.w     #0x1, w3
    323c:	81 18 dd    	sl.w      w3, w1, w1
    323e:	81 80 ea    	com.w     w1, w1
    3240:	81 00 61    	and.w     w2, w1, w1
    3242:	01 08 78    	mov.w     w1, [w0]

00003244 <.LSM203>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    3244:	1e 00 78    	mov.w     [w14], w0
    3246:	60 00 90    	mov.w     [w0+12], w0
    3248:	9e 00 78    	mov.w     [w14], w1
    324a:	e1 00 90    	mov.w     [w1+12], w1
    324c:	11 01 78    	mov.w     [w1], w2
    324e:	9e 00 78    	mov.w     [w14], w1
    3250:	e1 48 90    	mov.b     [w1+14], w1
    3252:	81 80 fb    	ze        w1, w1
    3254:	13 00 20    	mov.w     #0x1, w3
    3256:	81 18 dd    	sl.w      w3, w1, w1
    3258:	82 80 70    	ior.w     w1, w2, w1
    325a:	01 08 78    	mov.w     w1, [w0]

0000325c <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    325c:	0e b8 97    	mov.w     [w14-16], w0
    325e:	00 00 e0    	cp0.w     w0
    3260:	04 00 3a    	bra       NZ, 0x326a <.L71>

00003262 <.LSM205>:
        self->getc = __getc_nobuffer;
    3262:	1e 00 78    	mov.w     [w14], w0
    3264:	01 95 22    	mov.w     #0x2950, w1
    3266:	51 18 98    	mov.w     w1, [w0+58]
    3268:	2b 00 37    	bra       0x32c0 <.L72>

0000326a <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    326a:	1e 00 78    	mov.w     [w14], w0
    326c:	8e b8 97    	mov.w     [w14-16], w1
    326e:	61 10 98    	mov.w     w1, [w0+44]

00003270 <.LSM207>:
        self->RXbuffer.length = RXbufferlen;
    3270:	1e 00 78    	mov.w     [w14], w0
    3272:	fe b0 97    	mov.w     [w14-18], w1
    3274:	71 10 98    	mov.w     w1, [w0+46]

00003276 <.LSM208>:
        self->RXbuffer.head = 0;
    3276:	1e 00 78    	mov.w     [w14], w0
    3278:	80 00 eb    	clr.w     w1
    327a:	01 18 98    	mov.w     w1, [w0+48]

0000327c <.LSM209>:
        self->RXbuffer.tail = 0;
    327c:	1e 00 78    	mov.w     [w14], w0
    327e:	80 00 eb    	clr.w     w1
    3280:	11 18 98    	mov.w     w1, [w0+50]

00003282 <.LSM210>:
        self->RXbuffer.count = 0;
    3282:	1e 00 78    	mov.w     [w14], w0
    3284:	80 00 eb    	clr.w     w1
    3286:	21 18 98    	mov.w     w1, [w0+52]

00003288 <.LSM211>:
        self->getc = __getc_buffer;
    3288:	1e 00 78    	mov.w     [w14], w0
    328a:	61 a6 22    	mov.w     #0x2a66, w1
    328c:	51 18 98    	mov.w     w1, [w0+58]

0000328e <.LSM212>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    328e:	1e 00 78    	mov.w     [w14], w0
    3290:	50 00 90    	mov.w     [w0+10], w0
    3292:	9e 00 78    	mov.w     [w14], w1
    3294:	d1 00 90    	mov.w     [w1+10], w1
    3296:	11 01 78    	mov.w     [w1], w2
    3298:	9e 00 78    	mov.w     [w14], w1
    329a:	f1 48 90    	mov.b     [w1+15], w1
    329c:	81 80 fb    	ze        w1, w1
    329e:	13 00 20    	mov.w     #0x1, w3
    32a0:	81 18 dd    	sl.w      w3, w1, w1
    32a2:	81 80 ea    	com.w     w1, w1
    32a4:	81 00 61    	and.w     w2, w1, w1
    32a6:	01 08 78    	mov.w     w1, [w0]

000032a8 <.LSM213>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    32a8:	1e 00 78    	mov.w     [w14], w0
    32aa:	60 00 90    	mov.w     [w0+12], w0
    32ac:	9e 00 78    	mov.w     [w14], w1
    32ae:	e1 00 90    	mov.w     [w1+12], w1
    32b0:	11 01 78    	mov.w     [w1], w2
    32b2:	9e 00 78    	mov.w     [w14], w1
    32b4:	f1 48 90    	mov.b     [w1+15], w1
    32b6:	81 80 fb    	ze        w1, w1
    32b8:	13 00 20    	mov.w     #0x1, w3
    32ba:	81 18 dd    	sl.w      w3, w1, w1
    32bc:	82 80 70    	ior.w     w1, w2, w1
    32be:	01 08 78    	mov.w     w1, [w0]

000032c0 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    32c0:	1e 00 78    	mov.w     [w14], w0
    32c2:	10 00 78    	mov.w     [w0], w0
    32c4:	9e 00 78    	mov.w     [w14], w1
    32c6:	91 00 78    	mov.w     [w1], w1
    32c8:	11 01 78    	mov.w     [w1], w2
    32ca:	01 00 28    	mov.w     #0x8000, w1
    32cc:	82 80 70    	ior.w     w1, w2, w1
    32ce:	01 08 78    	mov.w     w1, [w0]

000032d0 <.LSM215>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    32d0:	1e 00 78    	mov.w     [w14], w0
    32d2:	10 00 90    	mov.w     [w0+2], w0
    32d4:	9e 00 78    	mov.w     [w14], w1
    32d6:	91 00 90    	mov.w     [w1+2], w1
    32d8:	11 01 78    	mov.w     [w1], w2
    32da:	01 40 20    	mov.w     #0x400, w1
    32dc:	82 80 70    	ior.w     w1, w2, w1
    32de:	01 08 78    	mov.w     w1, [w0]
    32e0:	17 00 37    	bra       0x3310 <.L40>

000032e2 <.L73>:
    32e2:	00 00 00    	nop       
    32e4:	15 00 37    	bra       0x3310 <.L40>

000032e6 <.L74>:
    32e6:	00 00 00    	nop       
    32e8:	13 00 37    	bra       0x3310 <.L40>

000032ea <.L75>:
    32ea:	00 00 00    	nop       
    32ec:	11 00 37    	bra       0x3310 <.L40>

000032ee <.L76>:
    32ee:	00 00 00    	nop       
    32f0:	0f 00 37    	bra       0x3310 <.L40>

000032f2 <.L77>:
    32f2:	00 00 00    	nop       
    32f4:	0d 00 37    	bra       0x3310 <.L40>

000032f6 <.L78>:
    32f6:	00 00 00    	nop       
    32f8:	0b 00 37    	bra       0x3310 <.L40>

000032fa <.L79>:
    32fa:	00 00 00    	nop       
    32fc:	09 00 37    	bra       0x3310 <.L40>

000032fe <.L80>:
    32fe:	00 00 00    	nop       
    3300:	07 00 37    	bra       0x3310 <.L40>

00003302 <.L81>:
    3302:	00 00 00    	nop       
    3304:	05 00 37    	bra       0x3310 <.L40>

00003306 <.L82>:
    3306:	00 00 00    	nop       
    3308:	03 00 37    	bra       0x3310 <.L40>

0000330a <.L83>:
    330a:	00 00 00    	nop       
    330c:	01 00 37    	bra       0x3310 <.L40>

0000330e <.L84>:
    330e:	00 00 00    	nop       

00003310 <.L40>:
}
    3310:	4f 04 78    	mov.w     [--w15], w8
    3312:	00 80 fa    	ulnk      
    3314:	00 00 06    	return    

00003316 <_uart_close>:

void uart_close(_UART *self) {
    3316:	02 00 fa    	lnk       #0x2
    3318:	00 0f 78    	mov.w     w0, [w14]

0000331a <.LSM225>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    331a:	1e 00 78    	mov.w     [w14], w0
    331c:	10 00 90    	mov.w     [w0+2], w0
    331e:	9e 00 78    	mov.w     [w14], w1
    3320:	91 00 90    	mov.w     [w1+2], w1
    3322:	11 01 78    	mov.w     [w1], w2
    3324:	f1 bf 2f    	mov.w     #0xfbff, w1
    3326:	81 00 61    	and.w     w2, w1, w1
    3328:	01 08 78    	mov.w     w1, [w0]

0000332a <.LSM226>:
    *(self->UxMODE) = 0;        // Disable UART module
    332a:	1e 00 78    	mov.w     [w14], w0
    332c:	10 00 78    	mov.w     [w0], w0
    332e:	80 00 eb    	clr.w     w1
    3330:	01 08 78    	mov.w     w1, [w0]

00003332 <.LSM227>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    3332:	1e 00 78    	mov.w     [w14], w0
    3334:	60 00 90    	mov.w     [w0+12], w0
    3336:	9e 00 78    	mov.w     [w14], w1
    3338:	e1 00 90    	mov.w     [w1+12], w1
    333a:	11 01 78    	mov.w     [w1], w2
    333c:	9e 00 78    	mov.w     [w14], w1
    333e:	e1 48 90    	mov.b     [w1+14], w1
    3340:	81 80 fb    	ze        w1, w1
    3342:	13 00 20    	mov.w     #0x1, w3
    3344:	81 18 dd    	sl.w      w3, w1, w1
    3346:	81 80 ea    	com.w     w1, w1
    3348:	81 00 61    	and.w     w2, w1, w1
    334a:	01 08 78    	mov.w     w1, [w0]

0000334c <.LSM228>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    334c:	1e 00 78    	mov.w     [w14], w0
    334e:	60 00 90    	mov.w     [w0+12], w0
    3350:	9e 00 78    	mov.w     [w14], w1
    3352:	e1 00 90    	mov.w     [w1+12], w1
    3354:	11 01 78    	mov.w     [w1], w2
    3356:	9e 00 78    	mov.w     [w14], w1
    3358:	f1 48 90    	mov.b     [w1+15], w1
    335a:	81 80 fb    	ze        w1, w1
    335c:	13 00 20    	mov.w     #0x1, w3
    335e:	81 18 dd    	sl.w      w3, w1, w1
    3360:	81 80 ea    	com.w     w1, w1
    3362:	81 00 61    	and.w     w2, w1, w1
    3364:	01 08 78    	mov.w     w1, [w0]

00003366 <.LSM229>:
    self->putc = NULL;
    3366:	1e 00 78    	mov.w     [w14], w0
    3368:	80 00 eb    	clr.w     w1
    336a:	41 18 98    	mov.w     w1, [w0+56]

0000336c <.LSM230>:
    self->getc = NULL;
    336c:	1e 00 78    	mov.w     [w14], w0
    336e:	80 00 eb    	clr.w     w1
    3370:	51 18 98    	mov.w     w1, [w0+58]

00003372 <.LSM231>:
    if (self->TX) {
    3372:	1e 00 78    	mov.w     [w14], w0
    3374:	50 08 90    	mov.w     [w0+26], w0
    3376:	00 00 e0    	cp0.w     w0
    3378:	2f 00 32    	bra       Z, 0x33d8 <.L86>

0000337a <.LSM232>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    337a:	11 3a 80    	mov.w     0x742, w1
    337c:	f0 0b 20    	mov.w     #0xbf, w0
    337e:	00 81 60    	and.w     w1, w0, w2
    3380:	60 04 20    	mov.w     #0x46, w0
    3382:	71 05 20    	mov.w     #0x57, w1
    3384:	23 74 20    	mov.w     #0x742, w3
    3386:	80 49 78    	mov.b     w0, [w3]
    3388:	81 49 78    	mov.b     w1, [w3]
    338a:	82 49 78    	mov.b     w2, [w3]

0000338c <.LSM233>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    338c:	1e 00 78    	mov.w     [w14], w0
    338e:	50 08 90    	mov.w     [w0+26], w0
    3390:	70 00 90    	mov.w     [w0+14], w0
    3392:	9e 00 78    	mov.w     [w14], w1
    3394:	d1 08 90    	mov.w     [w1+26], w1
    3396:	f1 00 90    	mov.w     [w1+14], w1
    3398:	11 01 78    	mov.w     [w1], w2
    339a:	9e 00 78    	mov.w     [w14], w1
    339c:	d1 08 90    	mov.w     [w1+26], w1
    339e:	a1 48 90    	mov.b     [w1+10], w1
    33a0:	81 80 fb    	ze        w1, w1
    33a2:	f3 03 20    	mov.w     #0x3f, w3
    33a4:	81 18 dd    	sl.w      w3, w1, w1
    33a6:	81 80 ea    	com.w     w1, w1
    33a8:	81 00 61    	and.w     w2, w1, w1
    33aa:	01 08 78    	mov.w     w1, [w0]

000033ac <.LSM234>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    33ac:	11 3a 80    	mov.w     0x742, w1
    33ae:	00 04 20    	mov.w     #0x40, w0
    33b0:	01 01 70    	ior.w     w0, w1, w2
    33b2:	60 04 20    	mov.w     #0x46, w0
    33b4:	71 05 20    	mov.w     #0x57, w1
    33b6:	23 74 20    	mov.w     #0x742, w3
    33b8:	80 49 78    	mov.b     w0, [w3]
    33ba:	81 49 78    	mov.b     w1, [w3]
    33bc:	82 49 78    	mov.b     w2, [w3]

000033be <.LSM235>:
        self->TX->owner = NULL;
    33be:	1e 00 78    	mov.w     [w14], w0
    33c0:	50 08 90    	mov.w     [w0+26], w0
    33c2:	80 00 eb    	clr.w     w1
    33c4:	01 08 98    	mov.w     w1, [w0+16]

000033c6 <.LSM236>:
        pin_digitalOut(self->TX);
    33c6:	1e 00 78    	mov.w     [w14], w0
    33c8:	50 08 90    	mov.w     [w0+26], w0
    33ca:	07 0a 07    	rcall     0x47da <_pin_digitalOut>

000033cc <.LSM237>:
        pin_set(self->TX);
    33cc:	1e 00 78    	mov.w     [w14], w0
    33ce:	50 08 90    	mov.w     [w0+26], w0
    33d0:	61 0a 07    	rcall     0x4894 <_pin_set>

000033d2 <.LSM238>:
        self->TX = NULL;
    33d2:	1e 00 78    	mov.w     [w14], w0
    33d4:	80 00 eb    	clr.w     w1
    33d6:	51 08 98    	mov.w     w1, [w0+26]

000033d8 <.L86>:
    }
    if (self->RX) {
    33d8:	1e 00 78    	mov.w     [w14], w0
    33da:	60 08 90    	mov.w     [w0+28], w0
    33dc:	00 00 e0    	cp0.w     w0
    33de:	28 00 32    	bra       Z, 0x3430 <.L87>

000033e0 <.LSM240>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    33e0:	11 3a 80    	mov.w     0x742, w1
    33e2:	f0 0b 20    	mov.w     #0xbf, w0
    33e4:	00 81 60    	and.w     w1, w0, w2
    33e6:	60 04 20    	mov.w     #0x46, w0
    33e8:	71 05 20    	mov.w     #0x57, w1
    33ea:	23 74 20    	mov.w     #0x742, w3
    33ec:	80 49 78    	mov.b     w0, [w3]
    33ee:	81 49 78    	mov.b     w1, [w3]
    33f0:	82 49 78    	mov.b     w2, [w3]

000033f2 <.LSM241>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    33f2:	1e 00 78    	mov.w     [w14], w0
    33f4:	00 08 90    	mov.w     [w0+16], w0
    33f6:	9e 00 78    	mov.w     [w14], w1
    33f8:	81 08 90    	mov.w     [w1+16], w1
    33fa:	11 01 78    	mov.w     [w1], w2
    33fc:	9e 00 78    	mov.w     [w14], w1
    33fe:	c1 50 90    	mov.b     [w1+20], w1
    3400:	81 80 fb    	ze        w1, w1
    3402:	f3 03 20    	mov.w     #0x3f, w3
    3404:	81 18 dd    	sl.w      w3, w1, w1
    3406:	82 80 70    	ior.w     w1, w2, w1
    3408:	01 08 78    	mov.w     w1, [w0]

0000340a <.LSM242>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    340a:	11 3a 80    	mov.w     0x742, w1
    340c:	00 04 20    	mov.w     #0x40, w0
    340e:	01 01 70    	ior.w     w0, w1, w2
    3410:	60 04 20    	mov.w     #0x46, w0
    3412:	71 05 20    	mov.w     #0x57, w1
    3414:	23 74 20    	mov.w     #0x742, w3
    3416:	80 49 78    	mov.b     w0, [w3]
    3418:	81 49 78    	mov.b     w1, [w3]
    341a:	82 49 78    	mov.b     w2, [w3]

0000341c <.LSM243>:
        self->RX->owner = NULL;
    341c:	1e 00 78    	mov.w     [w14], w0
    341e:	60 08 90    	mov.w     [w0+28], w0
    3420:	80 00 eb    	clr.w     w1
    3422:	01 08 98    	mov.w     w1, [w0+16]

00003424 <.LSM244>:
        pin_digitalIn(self->RX);
    3424:	1e 00 78    	mov.w     [w14], w0
    3426:	60 08 90    	mov.w     [w0+28], w0
    3428:	b1 09 07    	rcall     0x478c <_pin_digitalIn>

0000342a <.LSM245>:
        self->RX = NULL;
    342a:	1e 00 78    	mov.w     [w14], w0
    342c:	80 00 eb    	clr.w     w1
    342e:	61 08 98    	mov.w     w1, [w0+28]

00003430 <.L87>:
    }
    if (self->RTS) {
    3430:	1e 00 78    	mov.w     [w14], w0
    3432:	70 08 90    	mov.w     [w0+30], w0
    3434:	00 00 e0    	cp0.w     w0
    3436:	2f 00 32    	bra       Z, 0x3496 <.L88>

00003438 <.LSM247>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3438:	11 3a 80    	mov.w     0x742, w1
    343a:	f0 0b 20    	mov.w     #0xbf, w0
    343c:	00 81 60    	and.w     w1, w0, w2
    343e:	60 04 20    	mov.w     #0x46, w0
    3440:	71 05 20    	mov.w     #0x57, w1
    3442:	23 74 20    	mov.w     #0x742, w3
    3444:	80 49 78    	mov.b     w0, [w3]
    3446:	81 49 78    	mov.b     w1, [w3]
    3448:	82 49 78    	mov.b     w2, [w3]

0000344a <.LSM248>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    344a:	1e 00 78    	mov.w     [w14], w0
    344c:	70 08 90    	mov.w     [w0+30], w0
    344e:	70 00 90    	mov.w     [w0+14], w0
    3450:	9e 00 78    	mov.w     [w14], w1
    3452:	f1 08 90    	mov.w     [w1+30], w1
    3454:	f1 00 90    	mov.w     [w1+14], w1
    3456:	11 01 78    	mov.w     [w1], w2
    3458:	9e 00 78    	mov.w     [w14], w1
    345a:	f1 08 90    	mov.w     [w1+30], w1
    345c:	a1 48 90    	mov.b     [w1+10], w1
    345e:	81 80 fb    	ze        w1, w1
    3460:	f3 03 20    	mov.w     #0x3f, w3
    3462:	81 18 dd    	sl.w      w3, w1, w1
    3464:	81 80 ea    	com.w     w1, w1
    3466:	81 00 61    	and.w     w2, w1, w1
    3468:	01 08 78    	mov.w     w1, [w0]

0000346a <.LSM249>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    346a:	11 3a 80    	mov.w     0x742, w1
    346c:	00 04 20    	mov.w     #0x40, w0
    346e:	01 01 70    	ior.w     w0, w1, w2
    3470:	60 04 20    	mov.w     #0x46, w0
    3472:	71 05 20    	mov.w     #0x57, w1
    3474:	23 74 20    	mov.w     #0x742, w3
    3476:	80 49 78    	mov.b     w0, [w3]
    3478:	81 49 78    	mov.b     w1, [w3]
    347a:	82 49 78    	mov.b     w2, [w3]

0000347c <.LSM250>:
        self->RTS->owner = NULL;
    347c:	1e 00 78    	mov.w     [w14], w0
    347e:	70 08 90    	mov.w     [w0+30], w0
    3480:	80 00 eb    	clr.w     w1
    3482:	01 08 98    	mov.w     w1, [w0+16]

00003484 <.LSM251>:
        pin_digitalOut(self->RTS);
    3484:	1e 00 78    	mov.w     [w14], w0
    3486:	70 08 90    	mov.w     [w0+30], w0
    3488:	a8 09 07    	rcall     0x47da <_pin_digitalOut>

0000348a <.LSM252>:
        pin_set(self->RTS);
    348a:	1e 00 78    	mov.w     [w14], w0
    348c:	70 08 90    	mov.w     [w0+30], w0
    348e:	02 0a 07    	rcall     0x4894 <_pin_set>

00003490 <.LSM253>:
        self->RTS = NULL;
    3490:	1e 00 78    	mov.w     [w14], w0
    3492:	80 00 eb    	clr.w     w1
    3494:	71 08 98    	mov.w     w1, [w0+30]

00003496 <.L88>:
    }
    if (self->CTS) {
    3496:	1e 00 78    	mov.w     [w14], w0
    3498:	00 10 90    	mov.w     [w0+32], w0
    349a:	00 00 e0    	cp0.w     w0
    349c:	28 00 32    	bra       Z, 0x34ee <.L85>

0000349e <.LSM255>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    349e:	11 3a 80    	mov.w     0x742, w1
    34a0:	f0 0b 20    	mov.w     #0xbf, w0
    34a2:	00 81 60    	and.w     w1, w0, w2
    34a4:	60 04 20    	mov.w     #0x46, w0
    34a6:	71 05 20    	mov.w     #0x57, w1
    34a8:	23 74 20    	mov.w     #0x742, w3
    34aa:	80 49 78    	mov.b     w0, [w3]
    34ac:	81 49 78    	mov.b     w1, [w3]
    34ae:	82 49 78    	mov.b     w2, [w3]

000034b0 <.LSM256>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    34b0:	1e 00 78    	mov.w     [w14], w0
    34b2:	10 08 90    	mov.w     [w0+18], w0
    34b4:	9e 00 78    	mov.w     [w14], w1
    34b6:	91 08 90    	mov.w     [w1+18], w1
    34b8:	11 01 78    	mov.w     [w1], w2
    34ba:	9e 00 78    	mov.w     [w14], w1
    34bc:	d1 50 90    	mov.b     [w1+21], w1
    34be:	81 80 fb    	ze        w1, w1
    34c0:	f3 03 20    	mov.w     #0x3f, w3
    34c2:	81 18 dd    	sl.w      w3, w1, w1
    34c4:	82 80 70    	ior.w     w1, w2, w1
    34c6:	01 08 78    	mov.w     w1, [w0]

000034c8 <.LSM257>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    34c8:	11 3a 80    	mov.w     0x742, w1
    34ca:	00 04 20    	mov.w     #0x40, w0
    34cc:	01 01 70    	ior.w     w0, w1, w2
    34ce:	60 04 20    	mov.w     #0x46, w0
    34d0:	71 05 20    	mov.w     #0x57, w1
    34d2:	23 74 20    	mov.w     #0x742, w3
    34d4:	80 49 78    	mov.b     w0, [w3]
    34d6:	81 49 78    	mov.b     w1, [w3]
    34d8:	82 49 78    	mov.b     w2, [w3]

000034da <.LSM258>:
        self->CTS->owner = NULL;
    34da:	1e 00 78    	mov.w     [w14], w0
    34dc:	00 10 90    	mov.w     [w0+32], w0
    34de:	80 00 eb    	clr.w     w1
    34e0:	01 08 98    	mov.w     w1, [w0+16]

000034e2 <.LSM259>:
        pin_digitalIn(self->CTS);
    34e2:	1e 00 78    	mov.w     [w14], w0
    34e4:	00 10 90    	mov.w     [w0+32], w0
    34e6:	52 09 07    	rcall     0x478c <_pin_digitalIn>

000034e8 <.LSM260>:
        self->CTS = NULL;
    34e8:	1e 00 78    	mov.w     [w14], w0
    34ea:	80 00 eb    	clr.w     w1
    34ec:	01 10 98    	mov.w     w1, [w0+32]

000034ee <.L85>:
    }
}
    34ee:	00 80 fa    	ulnk      
    34f0:	00 00 06    	return    

000034f2 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    34f2:	04 00 fa    	lnk       #0x4
    34f4:	00 0f 78    	mov.w     w0, [w14]
    34f6:	21 47 98    	mov.b     w1, [w14+2]

000034f8 <.LSM263>:
    if (self->putc)
    34f8:	1e 00 78    	mov.w     [w14], w0
    34fa:	40 18 90    	mov.w     [w0+56], w0
    34fc:	00 00 e0    	cp0.w     w0
    34fe:	05 00 32    	bra       Z, 0x350a <.L90>

00003500 <.LSM264>:
        self->putc(self, ch);
    3500:	1e 00 78    	mov.w     [w14], w0
    3502:	40 19 90    	mov.w     [w0+56], w2
    3504:	ae 40 90    	mov.b     [w14+2], w1
    3506:	1e 00 78    	mov.w     [w14], w0
    3508:	02 00 01    	call      w2

0000350a <.L90>:
}
    350a:	00 80 fa    	ulnk      
    350c:	00 00 06    	return    

0000350e <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    350e:	02 00 fa    	lnk       #0x2
    3510:	00 0f 78    	mov.w     w0, [w14]

00003512 <.LSM267>:
    if (self->getc)
    3512:	1e 00 78    	mov.w     [w14], w0
    3514:	50 18 90    	mov.w     [w0+58], w0
    3516:	00 00 e0    	cp0.w     w0
    3518:	05 00 32    	bra       Z, 0x3524 <.L93>

0000351a <.LSM268>:
        return self->getc(self);
    351a:	1e 00 78    	mov.w     [w14], w0
    351c:	d0 18 90    	mov.w     [w0+58], w1
    351e:	1e 00 78    	mov.w     [w14], w0
    3520:	01 00 01    	call      w1
    3522:	01 00 37    	bra       0x3526 <.L94>

00003524 <.L93>:
    else
        return 0xFF;
    3524:	00 c0 eb    	setm.b    w0

00003526 <.L94>:
}
    3526:	00 80 fa    	ulnk      
    3528:	00 00 06    	return    

0000352a <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    352a:	02 00 fa    	lnk       #0x2
    352c:	00 0f 78    	mov.w     w0, [w14]

0000352e <.LSM272>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    352e:	1e 00 78    	mov.w     [w14], w0
    3530:	10 00 90    	mov.w     [w0+2], w0
    3532:	90 00 78    	mov.w     [w0], w1
    3534:	00 40 20    	mov.w     #0x400, w0
    3536:	00 80 60    	and.w     w1, w0, w0
    3538:	00 00 e0    	cp0.w     w0
    353a:	08 00 3a    	bra       NZ, 0x354c <.L95>

0000353c <.LSM273>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    353c:	1e 00 78    	mov.w     [w14], w0
    353e:	10 00 90    	mov.w     [w0+2], w0
    3540:	9e 00 78    	mov.w     [w14], w1
    3542:	91 00 90    	mov.w     [w1+2], w1
    3544:	11 01 78    	mov.w     [w1], w2
    3546:	01 40 20    	mov.w     #0x400, w1
    3548:	82 80 70    	ior.w     w1, w2, w1
    354a:	01 08 78    	mov.w     w1, [w0]

0000354c <.L95>:
}
    354c:	00 80 fa    	ulnk      
    354e:	00 00 06    	return    

00003550 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    3550:	04 00 fa    	lnk       #0x4
    3552:	00 0f 78    	mov.w     w0, [w14]
    3554:	11 07 98    	mov.w     w1, [w14+2]

00003556 <.LSM276>:
    while (*str)
    3556:	08 00 37    	bra       0x3568 <.L98>

00003558 <.L99>:
        uart_putc(self, *str++);
    3558:	1e 00 90    	mov.w     [w14+2], w0
    355a:	10 40 78    	mov.b     [w0], w0
    355c:	9e 00 90    	mov.w     [w14+2], w1
    355e:	81 00 e8    	inc.w     w1, w1
    3560:	11 07 98    	mov.w     w1, [w14+2]
    3562:	80 40 78    	mov.b     w0, w1
    3564:	1e 00 78    	mov.w     [w14], w0
    3566:	c5 ff 07    	rcall     0x34f2 <_uart_putc>

00003568 <.L98>:
    3568:	1e 00 90    	mov.w     [w14+2], w0
    356a:	10 40 78    	mov.b     [w0], w0
    356c:	00 04 e0    	cp0.b     w0
    356e:	f4 ff 3a    	bra       NZ, 0x3558 <.L99>

00003570 <.LSM279>:
    uart_flushTxBuffer(self);
    3570:	1e 00 78    	mov.w     [w14], w0
    3572:	db ff 07    	rcall     0x352a <_uart_flushTxBuffer>

00003574 <.LSM280>:
}
    3574:	00 80 fa    	ulnk      
    3576:	00 00 06    	return    

00003578 <_uart_gets_term>:

void uart_gets_term(_UART *self, uint8_t *str, uint16_t len) {
    3578:	0a 00 fa    	lnk       #0xa
    357a:	20 07 98    	mov.w     w0, [w14+4]
    357c:	31 07 98    	mov.w     w1, [w14+6]
    357e:	42 07 98    	mov.w     w2, [w14+8]

00003580 <.LSM282>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    3580:	4e 00 90    	mov.w     [w14+8], w0
    3582:	00 00 e0    	cp0.w     w0
    3584:	87 00 32    	bra       Z, 0x3694 <.L113>

00003586 <.LSM283>:
        return;

    if (len==1) {
    3586:	4e 00 90    	mov.w     [w14+8], w0
    3588:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    358a:	04 00 3a    	bra       NZ, 0x3594 <.L103>

0000358c <.LSM284>:
        *str = '\0';
    358c:	3e 00 90    	mov.w     [w14+6], w0
    358e:	80 40 eb    	clr.b     w1
    3590:	01 48 78    	mov.b     w1, [w0]

00003592 <.LSM285>:
        return;
    3592:	81 00 37    	bra       0x3696 <.L100>

00003594 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    3594:	b1 c1 b3    	mov.b     #0x1b, w1
    3596:	2e 00 90    	mov.w     [w14+4], w0
    3598:	ac ff 07    	rcall     0x34f2 <_uart_putc>

0000359a <.LSM287>:
    uart_putc(self, '7');
    359a:	71 c3 b3    	mov.b     #0x37, w1
    359c:	2e 00 90    	mov.w     [w14+4], w0
    359e:	a9 ff 07    	rcall     0x34f2 <_uart_putc>

000035a0 <.LSM288>:
    uart_flushTxBuffer(self);
    35a0:	2e 00 90    	mov.w     [w14+4], w0
    35a2:	c3 ff 07    	rcall     0x352a <_uart_flushTxBuffer>

000035a4 <.LSM289>:
    start = str;
    35a4:	be 00 90    	mov.w     [w14+6], w1
    35a6:	11 07 98    	mov.w     w1, [w14+2]

000035a8 <.LSM290>:
    left = len;
    35a8:	ce 00 90    	mov.w     [w14+8], w1
    35aa:	01 0f 78    	mov.w     w1, [w14]
    35ac:	03 00 37    	bra       0x35b4 <.L112>

000035ae <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    35ae:	00 00 00    	nop       
    35b0:	01 00 37    	bra       0x35b4 <.L112>

000035b2 <.L115>:
    35b2:	00 00 00    	nop       

000035b4 <.L112>:
    35b4:	2e 00 90    	mov.w     [w14+4], w0
    35b6:	ab ff 07    	rcall     0x350e <_uart_getc>
    35b8:	be 00 90    	mov.w     [w14+6], w1
    35ba:	80 48 78    	mov.b     w0, [w1]

000035bc <.LSM293>:
    35bc:	3e 00 90    	mov.w     [w14+6], w0
    35be:	10 40 78    	mov.b     [w0], w0
    35c0:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    35c2:	0c 00 3a    	bra       NZ, 0x35dc <.L104>

000035c4 <.LSM294>:

    *str = '\0';                            // Terminarte the string with null
    35c4:	3e 00 90    	mov.w     [w14+6], w0
    35c6:	80 40 eb    	clr.b     w1
    35c8:	01 48 78    	mov.b     w1, [w0]

000035ca <.LSM295>:
    uart_putc(self, '\n');                  // Send newline and
    35ca:	a1 c0 b3    	mov.b     #0xa, w1
    35cc:	2e 00 90    	mov.w     [w14+4], w0
    35ce:	91 ff 07    	rcall     0x34f2 <_uart_putc>

000035d0 <.LSM296>:
    uart_putc(self, '\r');                  //   carriage return
    35d0:	d1 c0 b3    	mov.b     #0xd, w1
    35d2:	2e 00 90    	mov.w     [w14+4], w0
    35d4:	8e ff 07    	rcall     0x34f2 <_uart_putc>

000035d6 <.LSM297>:
    uart_flushTxBuffer(self);
    35d6:	2e 00 90    	mov.w     [w14+4], w0
    35d8:	a8 ff 07    	rcall     0x352a <_uart_flushTxBuffer>
    35da:	5d 00 37    	bra       0x3696 <.L100>

000035dc <.L104>:
    35dc:	3e 00 90    	mov.w     [w14+6], w0
    35de:	10 40 78    	mov.b     [w0], w0
    35e0:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    35e2:	16 00 3a    	bra       NZ, 0x3610 <.L105>

000035e4 <.LSM299>:
    35e4:	b1 c1 b3    	mov.b     #0x1b, w1
    35e6:	2e 00 90    	mov.w     [w14+4], w0
    35e8:	84 ff 07    	rcall     0x34f2 <_uart_putc>

000035ea <.LSM300>:
    35ea:	81 c3 b3    	mov.b     #0x38, w1
    35ec:	2e 00 90    	mov.w     [w14+4], w0
    35ee:	81 ff 07    	rcall     0x34f2 <_uart_putc>

000035f0 <.LSM301>:
    35f0:	b1 c1 b3    	mov.b     #0x1b, w1
    35f2:	2e 00 90    	mov.w     [w14+4], w0
    35f4:	7e ff 07    	rcall     0x34f2 <_uart_putc>

000035f6 <.LSM302>:
    35f6:	b1 c5 b3    	mov.b     #0x5b, w1
    35f8:	2e 00 90    	mov.w     [w14+4], w0
    35fa:	7b ff 07    	rcall     0x34f2 <_uart_putc>

000035fc <.LSM303>:
    35fc:	b1 c4 b3    	mov.b     #0x4b, w1
    35fe:	2e 00 90    	mov.w     [w14+4], w0
    3600:	78 ff 07    	rcall     0x34f2 <_uart_putc>

00003602 <.LSM304>:
    3602:	2e 00 90    	mov.w     [w14+4], w0
    3604:	92 ff 07    	rcall     0x352a <_uart_flushTxBuffer>

00003606 <.LSM305>:
    3606:	9e 00 90    	mov.w     [w14+2], w1
    3608:	31 07 98    	mov.w     w1, [w14+6]

0000360a <.LSM306>:
    360a:	ce 00 90    	mov.w     [w14+8], w1
    360c:	01 0f 78    	mov.w     w1, [w14]

0000360e <.LSM307>:
    360e:	41 00 37    	bra       0x3692 <.L106>

00003610 <.L105>:
    3610:	3e 00 90    	mov.w     [w14+6], w0
    3612:	10 40 78    	mov.b     [w0], w0
    3614:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    3616:	05 00 32    	bra       Z, 0x3622 <.L107>

00003618 <.LSM309>:
    3618:	3e 00 90    	mov.w     [w14+6], w0
    361a:	90 40 78    	mov.b     [w0], w1

0000361c <.LSM310>:
    361c:	f0 c7 b3    	mov.b     #0x7f, w0
    361e:	80 cf 50    	sub.b     w1, w0, [w15]
    3620:	1a 00 3a    	bra       NZ, 0x3656 <.L108>

00003622 <.L107>:
    3622:	be 00 90    	mov.w     [w14+6], w1
    3624:	1e 00 90    	mov.w     [w14+2], w0
    3626:	80 8f 50    	sub.w     w1, w0, [w15]
    3628:	10 00 36    	bra       LEU, 0x364a <.L109>

0000362a <.LSM312>:
    362a:	81 c0 b3    	mov.b     #0x8, w1
    362c:	2e 00 90    	mov.w     [w14+4], w0
    362e:	61 ff 07    	rcall     0x34f2 <_uart_putc>

00003630 <.LSM313>:
    3630:	01 c2 b3    	mov.b     #0x20, w1
    3632:	2e 00 90    	mov.w     [w14+4], w0
    3634:	5e ff 07    	rcall     0x34f2 <_uart_putc>

00003636 <.LSM314>:
    3636:	81 c0 b3    	mov.b     #0x8, w1
    3638:	2e 00 90    	mov.w     [w14+4], w0
    363a:	5b ff 07    	rcall     0x34f2 <_uart_putc>

0000363c <.LSM315>:
    363c:	2e 00 90    	mov.w     [w14+4], w0
    363e:	75 ff 07    	rcall     0x352a <_uart_flushTxBuffer>

00003640 <.LSM316>:
    3640:	3e 00 90    	mov.w     [w14+6], w0
    3642:	00 00 e9    	dec.w     w0, w0
    3644:	30 07 98    	mov.w     w0, [w14+6]

00003646 <.LSM317>:
    3646:	1e 0f e8    	inc.w     [w14], [w14]
    3648:	05 00 37    	bra       0x3654 <.L110>

0000364a <.L109>:
    364a:	71 c0 b3    	mov.b     #0x7, w1
    364c:	2e 00 90    	mov.w     [w14+4], w0
    364e:	51 ff 07    	rcall     0x34f2 <_uart_putc>

00003650 <.LSM319>:
    3650:	2e 00 90    	mov.w     [w14+4], w0
    3652:	6b ff 07    	rcall     0x352a <_uart_flushTxBuffer>

00003654 <.L110>:
    3654:	1e 00 37    	bra       0x3692 <.L106>

00003656 <.L108>:
    3656:	1e 00 78    	mov.w     [w14], w0
    3658:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    365a:	06 00 3a    	bra       NZ, 0x3668 <.L111>

0000365c <.LSM322>:
    365c:	71 c0 b3    	mov.b     #0x7, w1
    365e:	2e 00 90    	mov.w     [w14+4], w0
    3660:	48 ff 07    	rcall     0x34f2 <_uart_putc>

00003662 <.LSM323>:
    3662:	2e 00 90    	mov.w     [w14+4], w0
    3664:	62 ff 07    	rcall     0x352a <_uart_flushTxBuffer>

00003666 <.LSM324>:
    3666:	15 00 37    	bra       0x3692 <.L106>

00003668 <.L111>:
    3668:	3e 00 90    	mov.w     [w14+6], w0
    366a:	10 40 78    	mov.b     [w0], w0
    366c:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    366e:	9f ff 36    	bra       LEU, 0x35ae <.L114>
    3670:	3e 00 90    	mov.w     [w14+6], w0
    3672:	90 40 78    	mov.b     [w0], w1
    3674:	e0 c7 b3    	mov.b     #0x7e, w0
    3676:	80 cf 50    	sub.b     w1, w0, [w15]
    3678:	9c ff 3e    	bra       GTU, 0x35b2 <.L115>

0000367a <.LSM326>:
    367a:	3e 00 90    	mov.w     [w14+6], w0
    367c:	10 40 78    	mov.b     [w0], w0
    367e:	80 40 78    	mov.b     w0, w1
    3680:	2e 00 90    	mov.w     [w14+4], w0
    3682:	37 ff 07    	rcall     0x34f2 <_uart_putc>

00003684 <.LSM327>:
    3684:	2e 00 90    	mov.w     [w14+4], w0
    3686:	51 ff 07    	rcall     0x352a <_uart_flushTxBuffer>

00003688 <.LSM328>:
    3688:	3e 00 90    	mov.w     [w14+6], w0
    368a:	00 00 e8    	inc.w     w0, w0
    368c:	30 07 98    	mov.w     w0, [w14+6]

0000368e <.LSM329>:
    368e:	1e 0f e9    	dec.w     [w14], [w14]

00003690 <.LSM330>:
    3690:	91 ff 37    	bra       0x35b4 <.L112>

00003692 <.L106>:
    3692:	90 ff 37    	bra       0x35b4 <.L112>

00003694 <.L113>:
    3694:	00 00 00    	nop       

00003696 <.L100>:
}
    3696:	00 80 fa    	ulnk      
    3698:	00 00 06    	return    

0000369a <_uart_gets>:


void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    369a:	0c 00 fa    	lnk       #0xc
    369c:	30 07 98    	mov.w     w0, [w14+6]
    369e:	41 07 98    	mov.w     w1, [w14+8]
    36a0:	52 07 98    	mov.w     w2, [w14+10]

000036a2 <.LSM334>:
    uint8_t *start;
    uint16_t left;
    uint8_t char_count = 0;
    36a2:	00 40 eb    	clr.b     w0
    36a4:	00 4f 78    	mov.b     w0, [w14]

000036a6 <.LSM335>:

    if (len==0)
    36a6:	5e 00 90    	mov.w     [w14+10], w0
    36a8:	00 00 e0    	cp0.w     w0
    36aa:	1a 00 32    	bra       Z, 0x36e0 <.L123>

000036ac <.LSM336>:
        return;

    if (len==1) {
    36ac:	5e 00 90    	mov.w     [w14+10], w0
    36ae:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    36b0:	04 00 3a    	bra       NZ, 0x36ba <.L119>

000036b2 <.LSM337>:
        *str = '\0';
    36b2:	4e 00 90    	mov.w     [w14+8], w0
    36b4:	80 40 eb    	clr.b     w1
    36b6:	01 48 78    	mov.b     w1, [w0]

000036b8 <.LSM338>:
        return;
    36b8:	16 00 37    	bra       0x36e6 <.L116>

000036ba <.L119>:
    }

    // uart_flushTxBuffer(self);
    start = str;
    36ba:	ce 00 90    	mov.w     [w14+8], w1
    36bc:	11 07 98    	mov.w     w1, [w14+2]

000036be <.LSM340>:
    left = len;
    36be:	de 00 90    	mov.w     [w14+10], w1
    36c0:	21 07 98    	mov.w     w1, [w14+4]
    36c2:	01 00 37    	bra       0x36c6 <.L122>

000036c4 <.L125>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        char_count ++;
        if (*str=='\r') {                     // If character is return,
            break;
        }
        if (char_count >= UART_MSG_MAX_LEN) { // Terminate if max length reached.
            break;
        }  
    }
    36c4:	00 00 00    	nop       

000036c6 <.L122>:
    36c6:	3e 00 90    	mov.w     [w14+6], w0
    36c8:	22 ff 07    	rcall     0x350e <_uart_getc>
    36ca:	ce 00 90    	mov.w     [w14+8], w1
    36cc:	80 48 78    	mov.b     w0, [w1]

000036ce <.LSM343>:
    36ce:	1e 4f e8    	inc.b     [w14], [w14]

000036d0 <.LSM344>:
    36d0:	4e 00 90    	mov.w     [w14+8], w0
    36d2:	10 40 78    	mov.b     [w0], w0
    36d4:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    36d6:	06 00 32    	bra       Z, 0x36e4 <.L124>

000036d8 <.LSM345>:
    36d8:	1e 40 78    	mov.b     [w14], w0
    36da:	00 04 e0    	cp0.b     w0
    36dc:	f3 ff 3d    	bra       GE, 0x36c4 <.L125>

000036de <.LSM346>:
    36de:	03 00 37    	bra       0x36e6 <.L116>

000036e0 <.L123>:
    36e0:	00 00 00    	nop       
    36e2:	01 00 37    	bra       0x36e6 <.L116>

000036e4 <.L124>:
    36e4:	00 00 00    	nop       

000036e6 <.L116>:
}         
    36e6:	00 80 fa    	ulnk      
    36e8:	00 00 06    	return    

000036ea <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    36ea:	04 00 fa    	lnk       #0x4

000036ec <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    36ec:	94 24 a8    	bset.b    0x494, #0x1

000036ee <.LSM2>:
    U1ADDR = 0;
    36ee:	96 24 ef    	clr.w     0x496

000036f0 <.LSM3>:
    U1EIR = 0xFF;
    36f0:	f0 0f 20    	mov.w     #0xff, w0
    36f2:	70 24 88    	mov.w     w0, 0x48e

000036f4 <.LSM4>:
    U1CONbits.PPBRST = 0;
    36f4:	94 24 a9    	bclr.b    0x494, #0x1

000036f6 <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    36f6:	a0 4a 20    	mov.w     #0x4aa, w0
    36f8:	10 07 98    	mov.w     w0, [w14+2]

000036fa <.LSM6>:
    for (n = 0; n<16; n++)
    36fa:	00 40 eb    	clr.b     w0
    36fc:	00 4f 78    	mov.b     w0, [w14]
    36fe:	07 00 37    	bra       0x370e <.L2>

00003700 <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    3700:	1e 80 fb    	ze        [w14], w0
    3702:	00 00 40    	add.w     w0, w0, w0
    3704:	9e 00 90    	mov.w     [w14+2], w1
    3706:	00 80 40    	add.w     w1, w0, w0
    3708:	80 00 eb    	clr.w     w1
    370a:	01 08 78    	mov.w     w1, [w0]

0000370c <.LSM8>:
    370c:	1e 4f e8    	inc.b     [w14], [w14]

0000370e <.L2>:
    370e:	1e 40 78    	mov.b     [w14], w0
    3710:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    3712:	f6 ff 36    	bra       LEU, 0x3700 <.L3>

00003714 <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    3714:	d0 00 20    	mov.w     #0xd, w0
    3716:	50 25 88    	mov.w     w0, 0x4aa

00003718 <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    3718:	00 60 21    	mov.w     #0x1600, w0
    371a:	01 c4 b3    	mov.b     #0x40, w1
    371c:	01 48 78    	mov.b     w1, [w0]

0000371e <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    371e:	00 43 21    	mov.w     #0x1430, w0
    3720:	10 b0 88    	mov.w     w0, 0x1602

00003722 <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    3722:	10 60 21    	mov.w     #0x1601, w0
    3724:	81 c8 b3    	mov.b     #0x88, w1
    3726:	01 48 78    	mov.b     w1, [w0]

00003728 <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    3728:	00 47 21    	mov.w     #0x1470, w0
    372a:	30 b0 88    	mov.w     w0, 0x1606

0000372c <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    372c:	50 60 21    	mov.w     #0x1605, w0
    372e:	81 c0 b3    	mov.b     #0x8, w1
    3730:	01 48 78    	mov.b     w1, [w0]

00003732 <.LSM15>:
    U1CNFG1 = 0x00;
    3732:	a6 24 ef    	clr.w     0x4a6

00003734 <.LSM16>:
    U1CNFG2 = 0x00;
    3734:	a8 24 ef    	clr.w     0x4a8

00003736 <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    3736:	00 60 21    	mov.w     #0x1600, w0
    3738:	48 00 de    	lsr.w     w0, #0x8, w0
    373a:	c0 24 88    	mov.w     w0, 0x498

0000373c <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    373c:	86 44 a8    	bset.b    0x486, #0x2

0000373e <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    373e:	86 e4 a8    	bset.b    0x486, #0x7

00003740 <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    3740:	88 04 a8    	bset.b    0x488, #0x0

00003742 <.LSM21>:
    U1CONbits.PKTDIS = 0;
    3742:	94 a4 a9    	bclr.b    0x494, #0x5

00003744 <.LSM22>:
    USB_curr_config = 0x00;
    3744:	3d 68 ef    	clr.b     0x83d

00003746 <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    3746:	40 68 ef    	clr.b     0x840

00003748 <.LSM24>:
    USB_device_status = 0x01;
    3748:	10 c0 b3    	mov.b     #0x1, w0
    374a:	3e e8 b7    	mov.b     WREG, 0x83e

0000374c <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    374c:	00 4b 21    	mov.w     #0x14b0, w0
    374e:	80 c0 eb    	setm.b    w1
    3750:	01 48 78    	mov.b     w1, [w0]

00003752 <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    3752:	10 4b 21    	mov.w     #0x14b1, w0
    3754:	80 c0 eb    	setm.b    w1
    3756:	01 48 78    	mov.b     w1, [w0]

00003758 <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    3758:	00 00 00    	nop       

0000375a <.L4>:
    375a:	a1 24 80    	mov.w     0x494, w1
    375c:	00 04 20    	mov.w     #0x40, w0
    375e:	00 80 60    	and.w     w1, w0, w0
    3760:	00 00 e0    	cp0.w     w0
    3762:	fb ff 3a    	bra       NZ, 0x375a <.L4>

00003764 <.LSM28>:
}
    3764:	00 80 fa    	ulnk      
    3766:	00 00 06    	return    

00003768 <_ServiceUSB>:

void ServiceUSB(void) {
    3768:	06 00 fa    	lnk       #0x6

0000376a <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    376a:	50 24 80    	mov.w     0x48a, w0
    376c:	62 00 60    	and.w     w0, #0x2, w0
    376e:	00 00 e0    	cp0.w     w0
    3770:	05 00 32    	bra       Z, 0x377c <.L6>

00003772 <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    3772:	f0 0f 20    	mov.w     #0xff, w0
    3774:	70 24 88    	mov.w     w0, 0x48e

00003776 <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    3776:	20 00 20    	mov.w     #0x2, w0
    3778:	50 24 88    	mov.w     w0, 0x48a
    377a:	90 00 37    	bra       0x389c <.L5>

0000377c <.L6>:
    } else if (U1IRbits.SOFIF) {
    377c:	50 24 80    	mov.w     0x48a, w0
    377e:	64 00 60    	and.w     w0, #0x4, w0
    3780:	00 00 e0    	cp0.w     w0
    3782:	03 00 32    	bra       Z, 0x378a <.L8>

00003784 <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    3784:	40 00 20    	mov.w     #0x4, w0
    3786:	50 24 88    	mov.w     w0, 0x48a
    3788:	89 00 37    	bra       0x389c <.L5>

0000378a <.L8>:
    } else if (U1IRbits.IDLEIF) {
    378a:	50 24 80    	mov.w     0x48a, w0
    378c:	70 00 60    	and.w     w0, #0x10, w0
    378e:	00 00 e0    	cp0.w     w0
    3790:	03 00 32    	bra       Z, 0x3798 <.L9>

00003792 <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    3792:	00 01 20    	mov.w     #0x10, w0
    3794:	50 24 88    	mov.w     w0, 0x48a
    3796:	82 00 37    	bra       0x389c <.L5>

00003798 <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    3798:	51 24 80    	mov.w     0x48a, w1
    379a:	00 02 20    	mov.w     #0x20, w0
    379c:	00 80 60    	and.w     w1, w0, w0
    379e:	00 00 e0    	cp0.w     w0
    37a0:	03 00 32    	bra       Z, 0x37a8 <.L10>

000037a2 <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    37a2:	00 02 20    	mov.w     #0x20, w0
    37a4:	50 24 88    	mov.w     w0, 0x48a
    37a6:	7a 00 37    	bra       0x389c <.L5>

000037a8 <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    37a8:	51 24 80    	mov.w     0x48a, w1
    37aa:	00 08 20    	mov.w     #0x80, w0
    37ac:	00 80 60    	and.w     w1, w0, w0
    37ae:	00 00 e0    	cp0.w     w0
    37b0:	03 00 32    	bra       Z, 0x37b8 <.L11>

000037b2 <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    37b2:	00 08 20    	mov.w     #0x80, w0
    37b4:	50 24 88    	mov.w     w0, 0x48a
    37b6:	72 00 37    	bra       0x389c <.L5>

000037b8 <.L11>:
    } else if (U1IRbits.URSTIF) {
    37b8:	50 24 80    	mov.w     0x48a, w0
    37ba:	61 00 60    	and.w     w0, #0x1, w0
    37bc:	00 00 e0    	cp0.w     w0
    37be:	34 00 32    	bra       Z, 0x3828 <.L12>

000037c0 <.LSM42>:
        USB_curr_config = 0x00;
    37c0:	3d 68 ef    	clr.b     0x83d

000037c2 <.LSM43>:
        while (U1IRbits.TRNIF) {
    37c2:	08 00 37    	bra       0x37d4 <.L13>

000037c4 <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    37c4:	80 00 20    	mov.w     #0x8, w0
    37c6:	50 24 88    	mov.w     w0, 0x48a

000037c8 <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    37c8:	00 00 00    	nop       

000037ca <.LSM46>:
            __builtin_nop();
    37ca:	00 00 00    	nop       

000037cc <.LSM47>:
            __builtin_nop();
    37cc:	00 00 00    	nop       

000037ce <.LSM48>:
            __builtin_nop();
    37ce:	00 00 00    	nop       

000037d0 <.LSM49>:
            __builtin_nop();
    37d0:	00 00 00    	nop       

000037d2 <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    37d2:	00 00 00    	nop       

000037d4 <.L13>:
    37d4:	50 24 80    	mov.w     0x48a, w0
    37d6:	68 00 60    	and.w     w0, #0x8, w0
    37d8:	00 00 e0    	cp0.w     w0
    37da:	f4 ff 3a    	bra       NZ, 0x37c4 <.L14>

000037dc <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    37dc:	a0 4a 20    	mov.w     #0x4aa, w0
    37de:	10 07 98    	mov.w     w0, [w14+2]

000037e0 <.LSM53>:
        for (n = 0; n<16; n++)
    37e0:	00 40 eb    	clr.b     w0
    37e2:	00 4f 78    	mov.b     w0, [w14]
    37e4:	07 00 37    	bra       0x37f4 <.L15>

000037e6 <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    37e6:	1e 80 fb    	ze        [w14], w0
    37e8:	00 00 40    	add.w     w0, w0, w0
    37ea:	9e 00 90    	mov.w     [w14+2], w1
    37ec:	00 80 40    	add.w     w1, w0, w0
    37ee:	80 00 eb    	clr.w     w1
    37f0:	01 08 78    	mov.w     w1, [w0]

000037f2 <.LSM55>:
    37f2:	1e 4f e8    	inc.b     [w14], [w14]

000037f4 <.L15>:
    37f4:	1e 40 78    	mov.b     [w14], w0
    37f6:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    37f8:	f6 ff 36    	bra       LEU, 0x37e6 <.L16>

000037fa <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    37fa:	00 60 21    	mov.w     #0x1600, w0
    37fc:	01 c4 b3    	mov.b     #0x40, w1
    37fe:	01 48 78    	mov.b     w1, [w0]

00003800 <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    3800:	00 43 21    	mov.w     #0x1430, w0
    3802:	10 b0 88    	mov.w     w0, 0x1602

00003804 <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    3804:	10 60 21    	mov.w     #0x1601, w0
    3806:	81 c8 b3    	mov.b     #0x88, w1
    3808:	01 48 78    	mov.b     w1, [w0]

0000380a <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    380a:	00 47 21    	mov.w     #0x1470, w0
    380c:	30 b0 88    	mov.w     w0, 0x1606

0000380e <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    380e:	50 60 21    	mov.w     #0x1605, w0
    3810:	81 c0 b3    	mov.b     #0x8, w1
    3812:	01 48 78    	mov.b     w1, [w0]

00003814 <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    3814:	96 24 ef    	clr.w     0x496

00003816 <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    3816:	f0 0f 20    	mov.w     #0xff, w0
    3818:	50 24 88    	mov.w     w0, 0x48a

0000381a <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    381a:	d0 00 20    	mov.w     #0xd, w0
    381c:	50 25 88    	mov.w     w0, 0x4aa

0000381e <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    381e:	10 c0 b3    	mov.b     #0x1, w0
    3820:	40 e8 b7    	mov.b     WREG, 0x840

00003822 <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    3822:	10 c0 b3    	mov.b     #0x1, w0
    3824:	3e e8 b7    	mov.b     WREG, 0x83e
    3826:	3a 00 37    	bra       0x389c <.L5>

00003828 <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    3828:	50 24 80    	mov.w     0x48a, w0
    382a:	68 00 60    	and.w     w0, #0x8, w0
    382c:	00 00 e0    	cp0.w     w0
    382e:	36 00 32    	bra       Z, 0x389c <.L5>

00003830 <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    3830:	90 24 80    	mov.w     0x492, w0
    3832:	43 00 de    	lsr.w     w0, #0x3, w0
    3834:	c2 00 dd    	sl.w      w0, #0x2, w1
    3836:	00 60 21    	mov.w     #0x1600, w0
    3838:	00 80 40    	add.w     w1, w0, w0
    383a:	20 07 98    	mov.w     w0, [w14+4]

0000383c <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    383c:	2e 00 90    	mov.w     [w14+4], w0
    383e:	10 40 90    	mov.b     [w0+1], w0
    3840:	31 e8 b7    	mov.b     WREG, 0x831

00003842 <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    3842:	2e 00 90    	mov.w     [w14+4], w0
    3844:	10 40 78    	mov.b     [w0], w0
    3846:	30 e8 b7    	mov.b     WREG, 0x830

00003848 <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    3848:	2e 00 90    	mov.w     [w14+4], w0
    384a:	10 00 90    	mov.w     [w0+2], w0
    384c:	90 41 88    	mov.w     w0, 0x832

0000384e <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    384e:	90 24 80    	mov.w     0x492, w0
    3850:	00 40 78    	mov.b     w0, w0
    3852:	3f e8 b7    	mov.b     WREG, 0x83f

00003854 <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    3854:	80 00 20    	mov.w     #0x8, w0
    3856:	50 24 88    	mov.w     w0, 0x48a

00003858 <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    3858:	3c 68 ef    	clr.b     0x83c

0000385a <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    385a:	31 c8 bf    	mov.b     0x831, WREG
    385c:	80 80 fb    	ze        w0, w1
    385e:	c0 03 20    	mov.w     #0x3c, w0
    3860:	00 80 60    	and.w     w1, w0, w0
    3862:	41 02 20    	mov.w     #0x24, w1
    3864:	81 0f 50    	sub.w     w0, w1, [w15]
    3866:	08 00 32    	bra       Z, 0x3878 <.L19>
    3868:	41 03 20    	mov.w     #0x34, w1
    386a:	81 0f 50    	sub.w     w0, w1, [w15]
    386c:	03 00 32    	bra       Z, 0x3874 <.L20>
    386e:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    3870:	05 00 32    	bra       Z, 0x387c <.L18>
    3872:	05 00 37    	bra       0x387e <.L17>

00003874 <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    3874:	15 00 07    	rcall     0x38a0 <_ProcessSetupToken>

00003876 <.LSM76>:
                break;
    3876:	03 00 37    	bra       0x387e <.L17>

00003878 <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    3878:	dc 02 07    	rcall     0x3e32 <_ProcessInToken>

0000387a <.LSM78>:
                break;
    387a:	01 00 37    	bra       0x387e <.L17>

0000387c <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    387c:	0e 03 07    	rcall     0x3e9a <_ProcessOutToken>

0000387e <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    387e:	3c c8 bf    	mov.b     0x83c, WREG
    3880:	00 80 fb    	ze        w0, w0
    3882:	61 00 60    	and.w     w0, #0x1, w0
    3884:	00 40 78    	mov.b     w0, w0
    3886:	00 04 e0    	cp0.b     w0
    3888:	09 00 32    	bra       Z, 0x389c <.L5>

0000388a <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    388a:	00 60 21    	mov.w     #0x1600, w0
    388c:	01 c4 b3    	mov.b     #0x40, w1
    388e:	01 48 78    	mov.b     w1, [w0]

00003890 <.LSM82>:
            BD[EP0IN].status = 0x84;
    3890:	50 60 21    	mov.w     #0x1605, w0
    3892:	41 c8 b3    	mov.b     #0x84, w1
    3894:	01 48 78    	mov.b     w1, [w0]

00003896 <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    3896:	10 60 21    	mov.w     #0x1601, w0
    3898:	41 c8 b3    	mov.b     #0x84, w1
    389a:	01 48 78    	mov.b     w1, [w0]

0000389c <.L5>:
        }
    }
}
    389c:	00 80 fa    	ulnk      
    389e:	00 00 06    	return    

000038a0 <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    38a0:	02 00 fa    	lnk       #0x2

000038a2 <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    38a2:	91 41 80    	mov.w     0x832, w1
    38a4:	01 0f 78    	mov.w     w1, [w14]

000038a6 <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    38a6:	1e 00 78    	mov.w     [w14], w0
    38a8:	90 40 78    	mov.b     [w0], w1
    38aa:	40 83 20    	mov.w     #0x834, w0
    38ac:	01 48 78    	mov.b     w1, [w0]
    38ae:	1e 0f e8    	inc.w     [w14], [w14]

000038b0 <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    38b0:	1e 00 78    	mov.w     [w14], w0
    38b2:	90 40 78    	mov.b     [w0], w1
    38b4:	40 83 20    	mov.w     #0x834, w0
    38b6:	11 40 98    	mov.b     w1, [w0+1]
    38b8:	1e 0f e8    	inc.w     [w14], [w14]

000038ba <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    38ba:	1e 00 78    	mov.w     [w14], w0
    38bc:	90 40 78    	mov.b     [w0], w1
    38be:	40 83 20    	mov.w     #0x834, w0
    38c0:	21 40 98    	mov.b     w1, [w0+2]
    38c2:	1e 0f e8    	inc.w     [w14], [w14]

000038c4 <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    38c4:	1e 00 78    	mov.w     [w14], w0
    38c6:	90 40 78    	mov.b     [w0], w1
    38c8:	40 83 20    	mov.w     #0x834, w0
    38ca:	31 40 98    	mov.b     w1, [w0+3]
    38cc:	1e 0f e8    	inc.w     [w14], [w14]

000038ce <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    38ce:	1e 00 78    	mov.w     [w14], w0
    38d0:	90 40 78    	mov.b     [w0], w1
    38d2:	40 83 20    	mov.w     #0x834, w0
    38d4:	41 40 98    	mov.b     w1, [w0+4]
    38d6:	1e 0f e8    	inc.w     [w14], [w14]

000038d8 <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    38d8:	1e 00 78    	mov.w     [w14], w0
    38da:	90 40 78    	mov.b     [w0], w1
    38dc:	40 83 20    	mov.w     #0x834, w0
    38de:	51 40 98    	mov.b     w1, [w0+5]
    38e0:	1e 0f e8    	inc.w     [w14], [w14]

000038e2 <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    38e2:	1e 00 78    	mov.w     [w14], w0
    38e4:	90 40 78    	mov.b     [w0], w1
    38e6:	40 83 20    	mov.w     #0x834, w0
    38e8:	61 40 98    	mov.b     w1, [w0+6]
    38ea:	1e 0f e8    	inc.w     [w14], [w14]

000038ec <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    38ec:	1e 00 78    	mov.w     [w14], w0
    38ee:	90 40 78    	mov.b     [w0], w1
    38f0:	40 83 20    	mov.w     #0x834, w0
    38f2:	71 40 98    	mov.b     w1, [w0+7]
    38f4:	1e 0f e8    	inc.w     [w14], [w14]

000038f6 <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    38f6:	00 60 21    	mov.w     #0x1600, w0
    38f8:	01 c4 b3    	mov.b     #0x40, w1
    38fa:	01 48 78    	mov.b     w1, [w0]

000038fc <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    38fc:	50 60 21    	mov.w     #0x1605, w0
    38fe:	81 c0 b3    	mov.b     #0x8, w1
    3900:	01 48 78    	mov.b     w1, [w0]

00003902 <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    3902:	40 83 20    	mov.w     #0x834, w0
    3904:	10 40 78    	mov.b     [w0], w0
    3906:	00 04 e0    	cp0.b     w0
    3908:	06 00 35    	bra       LT, 0x3916 <.L22>
    390a:	40 83 20    	mov.w     #0x834, w0
    390c:	30 00 90    	mov.w     [w0+6], w0
    390e:	00 00 e0    	cp0.w     w0
    3910:	02 00 32    	bra       Z, 0x3916 <.L22>
    3912:	80 cc b3    	mov.b     #0xc8, w0
    3914:	01 00 37    	bra       0x3918 <.L23>

00003916 <.L22>:
    3916:	80 c8 b3    	mov.b     #0x88, w0

00003918 <.L23>:
    3918:	11 60 21    	mov.w     #0x1601, w1
    391a:	80 48 78    	mov.b     w0, [w1]

0000391c <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    391c:	94 a4 a9    	bclr.b    0x494, #0x5

0000391e <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    391e:	00 4b 21    	mov.w     #0x14b0, w0
    3920:	80 c0 eb    	setm.b    w1
    3922:	01 48 78    	mov.b     w1, [w0]

00003924 <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    3924:	10 4b 21    	mov.w     #0x14b1, w0
    3926:	80 c0 eb    	setm.b    w1
    3928:	01 48 78    	mov.b     w1, [w0]

0000392a <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    392a:	40 83 20    	mov.w     #0x834, w0
    392c:	10 40 78    	mov.b     [w0], w0
    392e:	80 80 fb    	ze        w0, w1
    3930:	00 06 20    	mov.w     #0x60, w0
    3932:	00 80 60    	and.w     w1, w0, w0
    3934:	00 00 e0    	cp0.w     w0
    3936:	04 00 32    	bra       Z, 0x3940 <.L25>
    3938:	01 04 20    	mov.w     #0x40, w1
    393a:	81 0f 50    	sub.w     w0, w1, [w15]
    393c:	03 00 32    	bra       Z, 0x3944 <.L26>
    393e:	04 00 37    	bra       0x3948 <.L28>

00003940 <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    3940:	08 00 07    	rcall     0x3952 <_StandardRequests>

00003942 <.LSM103>:
            break;
    3942:	05 00 37    	bra       0x394e <.L21>

00003944 <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    3944:	03 08 07    	rcall     0x494c <_VendorRequests>

00003946 <.LSM105>:
            break;
    3946:	03 00 37    	bra       0x394e <.L21>

00003948 <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    3948:	3c c8 bf    	mov.b     0x83c, WREG
    394a:	00 04 a0    	bset.b    w0, #0x0
    394c:	3c e8 b7    	mov.b     WREG, 0x83c

0000394e <.L21>:
    }
}
    394e:	00 80 fa    	ulnk      
    3950:	00 00 06    	return    

00003952 <_StandardRequests>:

void StandardRequests(void) {
    3952:	06 00 fa    	lnk       #0x6

00003954 <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    3954:	40 83 20    	mov.w     #0x834, w0
    3956:	10 40 90    	mov.b     [w0+1], w0
    3958:	00 80 fb    	ze        w0, w0
    395a:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    395c:	79 01 32    	bra       Z, 0x3c50 <.L34>
    395e:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    3960:	0c 00 3c    	bra       GT, 0x397a <.L39>
    3962:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3964:	bf 00 32    	bra       Z, 0x3ae4 <.L32>
    3966:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3968:	03 00 3c    	bra       GT, 0x3970 <.L40>
    396a:	00 00 e0    	cp0.w     w0
    396c:	12 00 32    	bra       Z, 0x3992 <.L31>
    396e:	5c 02 37    	bra       0x3e28 <.L30>

00003970 <.L40>:
    3970:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3972:	b8 00 32    	bra       Z, 0x3ae4 <.L32>
    3974:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3976:	4c 01 32    	bra       Z, 0x3c10 <.L33>
    3978:	57 02 37    	bra       0x3e28 <.L30>

0000397a <.L39>:
    397a:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    397c:	ef 01 32    	bra       Z, 0x3d5c <.L36>
    397e:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    3980:	03 00 3c    	bra       GT, 0x3988 <.L41>
    3982:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    3984:	e0 01 32    	bra       Z, 0x3d46 <.L35>
    3986:	50 02 37    	bra       0x3e28 <.L30>

00003988 <.L41>:
    3988:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    398a:	12 02 32    	bra       Z, 0x3db0 <.L37>
    398c:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    398e:	2b 02 32    	bra       Z, 0x3de6 <.L38>
    3990:	4b 02 37    	bra       0x3e28 <.L30>

00003992 <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    3992:	40 83 20    	mov.w     #0x834, w0
    3994:	10 40 78    	mov.b     [w0], w0
    3996:	00 80 fb    	ze        w0, w0
    3998:	7f 00 60    	and.w     w0, #0x1f, w0
    399a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    399c:	13 00 32    	bra       Z, 0x39c4 <.L44>
    399e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    39a0:	32 00 32    	bra       Z, 0x3a06 <.L45>
    39a2:	00 00 e0    	cp0.w     w0
    39a4:	9a 00 3a    	bra       NZ, 0x3ada <.L128>

000039a6 <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    39a6:	30 b0 80    	mov.w     0x1606, w0
    39a8:	e1 83 20    	mov.w     #0x83e, w1
    39aa:	91 40 78    	mov.b     [w1], w1
    39ac:	01 48 78    	mov.b     w1, [w0]

000039ae <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    39ae:	30 b0 80    	mov.w     0x1606, w0
    39b0:	00 00 e8    	inc.w     w0, w0
    39b2:	80 40 eb    	clr.b     w1
    39b4:	01 48 78    	mov.b     w1, [w0]

000039b6 <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    39b6:	40 60 21    	mov.w     #0x1604, w0
    39b8:	21 c0 b3    	mov.b     #0x2, w1
    39ba:	01 48 78    	mov.b     w1, [w0]

000039bc <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    39bc:	50 60 21    	mov.w     #0x1605, w0
    39be:	81 cc b3    	mov.b     #0xc8, w1
    39c0:	01 48 78    	mov.b     w1, [w0]

000039c2 <.LSM115>:
                    break;
    39c2:	8f 00 37    	bra       0x3ae2 <.L46>

000039c4 <.L44>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    39c4:	40 c8 bf    	mov.b     0x840, WREG
    39c6:	00 80 fb    	ze        w0, w0
    39c8:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    39ca:	03 00 32    	bra       Z, 0x39d2 <.L48>
    39cc:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    39ce:	05 00 32    	bra       Z, 0x39da <.L49>
    39d0:	19 00 37    	bra       0x3a04 <.L47>

000039d2 <.L48>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    39d2:	3c c8 bf    	mov.b     0x83c, WREG
    39d4:	00 04 a0    	bset.b    w0, #0x0
    39d6:	3c e8 b7    	mov.b     WREG, 0x83c

000039d8 <.LSM118>:
                            break;
    39d8:	15 00 37    	bra       0x3a04 <.L47>

000039da <.L49>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    39da:	40 83 20    	mov.w     #0x834, w0
    39dc:	40 40 90    	mov.b     [w0+4], w0
    39de:	00 04 e0    	cp0.b     w0
    39e0:	0e 00 3a    	bra       NZ, 0x39fe <.L50>

000039e2 <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    39e2:	30 b0 80    	mov.w     0x1606, w0
    39e4:	80 40 eb    	clr.b     w1
    39e6:	01 48 78    	mov.b     w1, [w0]

000039e8 <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    39e8:	30 b0 80    	mov.w     0x1606, w0
    39ea:	00 00 e8    	inc.w     w0, w0
    39ec:	80 40 eb    	clr.b     w1
    39ee:	01 48 78    	mov.b     w1, [w0]

000039f0 <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    39f0:	40 60 21    	mov.w     #0x1604, w0
    39f2:	21 c0 b3    	mov.b     #0x2, w1
    39f4:	01 48 78    	mov.b     w1, [w0]

000039f6 <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    39f6:	50 60 21    	mov.w     #0x1605, w0
    39f8:	81 cc b3    	mov.b     #0xc8, w1
    39fa:	01 48 78    	mov.b     w1, [w0]
    39fc:	03 00 37    	bra       0x3a04 <.L47>

000039fe <.L50>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    39fe:	3c c8 bf    	mov.b     0x83c, WREG
    3a00:	00 04 a0    	bset.b    w0, #0x0
    3a02:	3c e8 b7    	mov.b     WREG, 0x83c

00003a04 <.L47>:
                            }
                    }
                    break;
    3a04:	6e 00 37    	bra       0x3ae2 <.L46>

00003a06 <.L45>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    3a06:	40 c8 bf    	mov.b     0x840, WREG
    3a08:	00 80 fb    	ze        w0, w0
    3a0a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3a0c:	03 00 32    	bra       Z, 0x3a14 <.L52>
    3a0e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3a10:	29 00 32    	bra       Z, 0x3a64 <.L53>
    3a12:	5f 00 37    	bra       0x3ad2 <.L129>

00003a14 <.L52>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    3a14:	40 83 20    	mov.w     #0x834, w0
    3a16:	40 40 90    	mov.b     [w0+4], w0
    3a18:	00 80 fb    	ze        w0, w0
    3a1a:	6f 00 60    	and.w     w0, #0xf, w0
    3a1c:	00 00 e0    	cp0.w     w0
    3a1e:	1e 00 3a    	bra       NZ, 0x3a5c <.L54>

00003a20 <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    3a20:	31 b0 80    	mov.w     0x1606, w1
    3a22:	40 83 20    	mov.w     #0x834, w0
    3a24:	40 40 90    	mov.b     [w0+4], w0
    3a26:	00 04 e0    	cp0.b     w0
    3a28:	07 00 3d    	bra       GE, 0x3a38 <.L55>
    3a2a:	50 60 21    	mov.w     #0x1605, w0
    3a2c:	10 40 78    	mov.b     [w0], w0
    3a2e:	00 80 fb    	ze        w0, w0
    3a30:	64 00 60    	and.w     w0, #0x4, w0
    3a32:	42 80 de    	asr.w     w0, #0x2, w0
    3a34:	00 40 78    	mov.b     w0, w0
    3a36:	06 00 37    	bra       0x3a44 <.L56>

00003a38 <.L55>:
    3a38:	10 60 21    	mov.w     #0x1601, w0
    3a3a:	10 40 78    	mov.b     [w0], w0
    3a3c:	00 80 fb    	ze        w0, w0
    3a3e:	64 00 60    	and.w     w0, #0x4, w0
    3a40:	42 80 de    	asr.w     w0, #0x2, w0
    3a42:	00 40 78    	mov.b     w0, w0

00003a44 <.L56>:
    3a44:	80 48 78    	mov.b     w0, [w1]

00003a46 <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    3a46:	30 b0 80    	mov.w     0x1606, w0
    3a48:	00 00 e8    	inc.w     w0, w0
    3a4a:	80 40 eb    	clr.b     w1
    3a4c:	01 48 78    	mov.b     w1, [w0]

00003a4e <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    3a4e:	40 60 21    	mov.w     #0x1604, w0
    3a50:	21 c0 b3    	mov.b     #0x2, w1
    3a52:	01 48 78    	mov.b     w1, [w0]

00003a54 <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3a54:	50 60 21    	mov.w     #0x1605, w0
    3a56:	81 cc b3    	mov.b     #0xc8, w1
    3a58:	01 48 78    	mov.b     w1, [w0]
    3a5a:	03 00 37    	bra       0x3a62 <.L57>

00003a5c <.L54>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3a5c:	3c c8 bf    	mov.b     0x83c, WREG
    3a5e:	00 04 a0    	bset.b    w0, #0x0
    3a60:	3c e8 b7    	mov.b     WREG, 0x83c

00003a62 <.L57>:
                            }
                            break;
    3a62:	3a 00 37    	bra       0x3ad8 <.L58>

00003a64 <.L53>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    3a64:	a0 4a 20    	mov.w     #0x4aa, w0
    3a66:	10 07 98    	mov.w     w0, [w14+2]

00003a68 <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    3a68:	40 83 20    	mov.w     #0x834, w0
    3a6a:	40 40 90    	mov.b     [w0+4], w0
    3a6c:	6f 4f 60    	and.b     w0, #0xf, [w14]

00003a6e <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    3a6e:	1e 80 fb    	ze        [w14], w0
    3a70:	00 00 40    	add.w     w0, w0, w0
    3a72:	80 00 78    	mov.w     w0, w1
    3a74:	40 83 20    	mov.w     #0x834, w0
    3a76:	40 40 90    	mov.b     [w0+4], w0
    3a78:	00 00 fb    	se        w0, w0
    3a7a:	4f 00 de    	lsr.w     w0, #0xf, w0
    3a7c:	01 00 70    	ior.w     w0, w1, w0
    3a7e:	c2 00 dd    	sl.w      w0, #0x2, w1
    3a80:	00 60 21    	mov.w     #0x1600, w0
    3a82:	00 80 40    	add.w     w1, w0, w0
    3a84:	20 07 98    	mov.w     w0, [w14+4]

00003a86 <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    3a86:	1e 80 fb    	ze        [w14], w0
    3a88:	00 00 40    	add.w     w0, w0, w0
    3a8a:	9e 00 90    	mov.w     [w14+2], w1
    3a8c:	00 80 40    	add.w     w1, w0, w0
    3a8e:	90 00 78    	mov.w     [w0], w1
    3a90:	40 83 20    	mov.w     #0x834, w0
    3a92:	40 40 90    	mov.b     [w0+4], w0
    3a94:	00 04 e0    	cp0.b     w0
    3a96:	02 00 3d    	bra       GE, 0x3a9c <.L59>
    3a98:	40 00 20    	mov.w     #0x4, w0
    3a9a:	01 00 37    	bra       0x3a9e <.L60>

00003a9c <.L59>:
    3a9c:	80 00 20    	mov.w     #0x8, w0

00003a9e <.L60>:
    3a9e:	00 80 60    	and.w     w1, w0, w0
    3aa0:	00 00 e0    	cp0.w     w0
    3aa2:	13 00 32    	bra       Z, 0x3aca <.L61>

00003aa4 <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    3aa4:	30 b0 80    	mov.w     0x1606, w0
    3aa6:	ae 00 90    	mov.w     [w14+4], w1
    3aa8:	91 40 90    	mov.b     [w1+1], w1
    3aaa:	81 80 fb    	ze        w1, w1
    3aac:	e4 80 60    	and.w     w1, #0x4, w1
    3aae:	c2 88 de    	asr.w     w1, #0x2, w1
    3ab0:	81 40 78    	mov.b     w1, w1
    3ab2:	01 48 78    	mov.b     w1, [w0]

00003ab4 <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    3ab4:	30 b0 80    	mov.w     0x1606, w0
    3ab6:	00 00 e8    	inc.w     w0, w0
    3ab8:	80 40 eb    	clr.b     w1
    3aba:	01 48 78    	mov.b     w1, [w0]

00003abc <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    3abc:	40 60 21    	mov.w     #0x1604, w0
    3abe:	21 c0 b3    	mov.b     #0x2, w1
    3ac0:	01 48 78    	mov.b     w1, [w0]

00003ac2 <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3ac2:	50 60 21    	mov.w     #0x1605, w0
    3ac4:	81 cc b3    	mov.b     #0xc8, w1
    3ac6:	01 48 78    	mov.b     w1, [w0]
    3ac8:	03 00 37    	bra       0x3ad0 <.L62>

00003aca <.L61>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3aca:	3c c8 bf    	mov.b     0x83c, WREG
    3acc:	00 04 a0    	bset.b    w0, #0x0
    3ace:	3c e8 b7    	mov.b     WREG, 0x83c

00003ad0 <.L62>:
                            }
                            break;
    3ad0:	03 00 37    	bra       0x3ad8 <.L58>

00003ad2 <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3ad2:	3c c8 bf    	mov.b     0x83c, WREG
    3ad4:	00 04 a0    	bset.b    w0, #0x0
    3ad6:	3c e8 b7    	mov.b     WREG, 0x83c

00003ad8 <.L58>:
                    }
                    break;
    3ad8:	04 00 37    	bra       0x3ae2 <.L46>

00003ada <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    3ada:	3c c8 bf    	mov.b     0x83c, WREG
    3adc:	00 04 a0    	bset.b    w0, #0x0
    3ade:	3c e8 b7    	mov.b     WREG, 0x83c

00003ae0 <.LSM147>:
            }
            break;
    3ae0:	a6 01 37    	bra       0x3e2e <.L29>

00003ae2 <.L46>:
    3ae2:	a5 01 37    	bra       0x3e2e <.L29>

00003ae4 <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    3ae4:	40 83 20    	mov.w     #0x834, w0
    3ae6:	10 40 78    	mov.b     [w0], w0
    3ae8:	00 80 fb    	ze        w0, w0
    3aea:	7f 00 60    	and.w     w0, #0x1f, w0
    3aec:	00 00 e0    	cp0.w     w0
    3aee:	03 00 32    	bra       Z, 0x3af6 <.L65>
    3af0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3af2:	1e 00 32    	bra       Z, 0x3b30 <.L66>
    3af4:	88 00 37    	bra       0x3c06 <.L130>

00003af6 <.L65>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    3af6:	40 83 20    	mov.w     #0x834, w0
    3af8:	20 40 90    	mov.b     [w0+2], w0
    3afa:	00 80 fb    	ze        w0, w0
    3afc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3afe:	14 00 3a    	bra       NZ, 0x3b28 <.L131>

00003b00 <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    3b00:	40 83 20    	mov.w     #0x834, w0
    3b02:	10 40 90    	mov.b     [w0+1], w0
    3b04:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3b06:	06 00 3a    	bra       NZ, 0x3b14 <.L69>

00003b08 <.LSM151>:
                                USB_device_status &= 0xFE;
    3b08:	e1 83 20    	mov.w     #0x83e, w1
    3b0a:	91 40 78    	mov.b     [w1], w1
    3b0c:	e0 cf b3    	mov.b     #0xfe, w0
    3b0e:	00 c0 60    	and.b     w1, w0, w0
    3b10:	3e e8 b7    	mov.b     WREG, 0x83e
    3b12:	03 00 37    	bra       0x3b1a <.L70>

00003b14 <.L69>:
                            else
                                USB_device_status |= 0x01;
    3b14:	3e c8 bf    	mov.b     0x83e, WREG
    3b16:	00 04 a0    	bset.b    w0, #0x0
    3b18:	3e e8 b7    	mov.b     WREG, 0x83e

00003b1a <.L70>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    3b1a:	40 60 21    	mov.w     #0x1604, w0
    3b1c:	80 40 eb    	clr.b     w1
    3b1e:	01 48 78    	mov.b     w1, [w0]

00003b20 <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3b20:	50 60 21    	mov.w     #0x1605, w0
    3b22:	81 cc b3    	mov.b     #0xc8, w1
    3b24:	01 48 78    	mov.b     w1, [w0]

00003b26 <.LSM155>:
                            break;
    3b26:	03 00 37    	bra       0x3b2e <.L71>

00003b28 <.L131>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3b28:	3c c8 bf    	mov.b     0x83c, WREG
    3b2a:	00 04 a0    	bset.b    w0, #0x0
    3b2c:	3c e8 b7    	mov.b     WREG, 0x83c

00003b2e <.L71>:
                    }
                    break;
    3b2e:	6f 00 37    	bra       0x3c0e <.L72>

00003b30 <.L66>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    3b30:	40 c8 bf    	mov.b     0x840, WREG
    3b32:	00 80 fb    	ze        w0, w0
    3b34:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3b36:	03 00 32    	bra       Z, 0x3b3e <.L74>
    3b38:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3b3a:	12 00 32    	bra       Z, 0x3b60 <.L75>
    3b3c:	60 00 37    	bra       0x3bfe <.L132>

00003b3e <.L74>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    3b3e:	40 83 20    	mov.w     #0x834, w0
    3b40:	40 40 90    	mov.b     [w0+4], w0
    3b42:	00 80 fb    	ze        w0, w0
    3b44:	6f 00 60    	and.w     w0, #0xf, w0
    3b46:	00 00 e0    	cp0.w     w0
    3b48:	07 00 3a    	bra       NZ, 0x3b58 <.L76>

00003b4a <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    3b4a:	40 60 21    	mov.w     #0x1604, w0
    3b4c:	80 40 eb    	clr.b     w1
    3b4e:	01 48 78    	mov.b     w1, [w0]

00003b50 <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3b50:	50 60 21    	mov.w     #0x1605, w0
    3b52:	81 cc b3    	mov.b     #0xc8, w1
    3b54:	01 48 78    	mov.b     w1, [w0]
    3b56:	03 00 37    	bra       0x3b5e <.L77>

00003b58 <.L76>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3b58:	3c c8 bf    	mov.b     0x83c, WREG
    3b5a:	00 04 a0    	bset.b    w0, #0x0
    3b5c:	3c e8 b7    	mov.b     WREG, 0x83c

00003b5e <.L77>:
                            }
                            break;
    3b5e:	52 00 37    	bra       0x3c04 <.L78>

00003b60 <.L75>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    3b60:	a0 4a 20    	mov.w     #0x4aa, w0
    3b62:	10 07 98    	mov.w     w0, [w14+2]

00003b64 <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    3b64:	40 83 20    	mov.w     #0x834, w0
    3b66:	40 40 90    	mov.b     [w0+4], w0
    3b68:	6f 4f 60    	and.b     w0, #0xf, [w14]
    3b6a:	1e 40 78    	mov.b     [w14], w0
    3b6c:	00 04 e0    	cp0.b     w0
    3b6e:	3b 00 32    	bra       Z, 0x3be6 <.L79>

00003b70 <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    3b70:	1e 80 fb    	ze        [w14], w0
    3b72:	00 00 40    	add.w     w0, w0, w0
    3b74:	80 00 78    	mov.w     w0, w1
    3b76:	40 83 20    	mov.w     #0x834, w0
    3b78:	40 40 90    	mov.b     [w0+4], w0
    3b7a:	00 00 fb    	se        w0, w0
    3b7c:	4f 00 de    	lsr.w     w0, #0xf, w0
    3b7e:	01 00 70    	ior.w     w0, w1, w0
    3b80:	c2 00 dd    	sl.w      w0, #0x2, w1
    3b82:	00 60 21    	mov.w     #0x1600, w0
    3b84:	00 80 40    	add.w     w1, w0, w0
    3b86:	20 07 98    	mov.w     w0, [w14+4]

00003b88 <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    3b88:	40 83 20    	mov.w     #0x834, w0
    3b8a:	40 40 90    	mov.b     [w0+4], w0
    3b8c:	00 04 e0    	cp0.b     w0
    3b8e:	16 00 3d    	bra       GE, 0x3bbc <.L80>

00003b90 <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    3b90:	1e 80 fb    	ze        [w14], w0
    3b92:	00 00 40    	add.w     w0, w0, w0
    3b94:	9e 00 90    	mov.w     [w14+2], w1
    3b96:	00 80 40    	add.w     w1, w0, w0
    3b98:	10 00 78    	mov.w     [w0], w0
    3b9a:	64 00 60    	and.w     w0, #0x4, w0
    3b9c:	00 00 e0    	cp0.w     w0
    3b9e:	0a 00 32    	bra       Z, 0x3bb4 <.L81>

00003ba0 <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    3ba0:	40 83 20    	mov.w     #0x834, w0
    3ba2:	10 40 90    	mov.b     [w0+1], w0
    3ba4:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3ba6:	02 00 3a    	bra       NZ, 0x3bac <.L82>
    3ba8:	00 40 eb    	clr.b     w0
    3baa:	01 00 37    	bra       0x3bae <.L83>

00003bac <.L82>:
    3bac:	40 c8 b3    	mov.b     #0x84, w0

00003bae <.L83>:
    3bae:	ae 00 90    	mov.w     [w14+4], w1
    3bb0:	90 40 98    	mov.b     w0, [w1+1]
    3bb2:	19 00 37    	bra       0x3be6 <.L79>

00003bb4 <.L81>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3bb4:	3c c8 bf    	mov.b     0x83c, WREG
    3bb6:	00 04 a0    	bset.b    w0, #0x0
    3bb8:	3c e8 b7    	mov.b     WREG, 0x83c
    3bba:	15 00 37    	bra       0x3be6 <.L79>

00003bbc <.L80>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    3bbc:	1e 80 fb    	ze        [w14], w0
    3bbe:	00 00 40    	add.w     w0, w0, w0
    3bc0:	9e 00 90    	mov.w     [w14+2], w1
    3bc2:	00 80 40    	add.w     w1, w0, w0
    3bc4:	10 00 78    	mov.w     [w0], w0
    3bc6:	68 00 60    	and.w     w0, #0x8, w0
    3bc8:	00 00 e0    	cp0.w     w0
    3bca:	0a 00 32    	bra       Z, 0x3be0 <.L84>

00003bcc <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    3bcc:	40 83 20    	mov.w     #0x834, w0
    3bce:	10 40 90    	mov.b     [w0+1], w0
    3bd0:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3bd2:	02 00 3a    	bra       NZ, 0x3bd8 <.L85>
    3bd4:	80 c8 b3    	mov.b     #0x88, w0
    3bd6:	01 00 37    	bra       0x3bda <.L86>

00003bd8 <.L85>:
    3bd8:	40 c8 b3    	mov.b     #0x84, w0

00003bda <.L86>:
    3bda:	ae 00 90    	mov.w     [w14+4], w1
    3bdc:	90 40 98    	mov.b     w0, [w1+1]
    3bde:	03 00 37    	bra       0x3be6 <.L79>

00003be0 <.L84>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3be0:	3c c8 bf    	mov.b     0x83c, WREG
    3be2:	00 04 a0    	bset.b    w0, #0x0
    3be4:	3c e8 b7    	mov.b     WREG, 0x83c

00003be6 <.L79>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    3be6:	3c c8 bf    	mov.b     0x83c, WREG
    3be8:	00 80 fb    	ze        w0, w0
    3bea:	61 00 60    	and.w     w0, #0x1, w0
    3bec:	00 00 e0    	cp0.w     w0
    3bee:	06 00 3a    	bra       NZ, 0x3bfc <.L87>

00003bf0 <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    3bf0:	40 60 21    	mov.w     #0x1604, w0
    3bf2:	80 40 eb    	clr.b     w1
    3bf4:	01 48 78    	mov.b     w1, [w0]

00003bf6 <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    3bf6:	50 60 21    	mov.w     #0x1605, w0
    3bf8:	81 cc b3    	mov.b     #0xc8, w1
    3bfa:	01 48 78    	mov.b     w1, [w0]

00003bfc <.L87>:
                            }
                            break;
    3bfc:	03 00 37    	bra       0x3c04 <.L78>

00003bfe <.L132>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3bfe:	3c c8 bf    	mov.b     0x83c, WREG
    3c00:	00 04 a0    	bset.b    w0, #0x0
    3c02:	3c e8 b7    	mov.b     WREG, 0x83c

00003c04 <.L78>:
                    }
                    break;
    3c04:	04 00 37    	bra       0x3c0e <.L72>

00003c06 <.L130>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    3c06:	3c c8 bf    	mov.b     0x83c, WREG
    3c08:	00 04 a0    	bset.b    w0, #0x0
    3c0a:	3c e8 b7    	mov.b     WREG, 0x83c

00003c0c <.LSM181>:
            }
            break;
    3c0c:	10 01 37    	bra       0x3e2e <.L29>

00003c0e <.L72>:
    3c0e:	0f 01 37    	bra       0x3e2e <.L29>

00003c10 <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    3c10:	40 83 20    	mov.w     #0x834, w0
    3c12:	20 40 90    	mov.b     [w0+2], w0
    3c14:	00 04 e0    	cp0.b     w0
    3c16:	04 00 3d    	bra       GE, 0x3c20 <.L88>

00003c18 <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    3c18:	3c c8 bf    	mov.b     0x83c, WREG
    3c1a:	00 04 a0    	bset.b    w0, #0x0
    3c1c:	3c e8 b7    	mov.b     WREG, 0x83c

00003c1e <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    3c1e:	07 01 37    	bra       0x3e2e <.L29>

00003c20 <.L88>:
    3c20:	40 83 20    	mov.w     #0x834, w0
    3c22:	90 40 78    	mov.b     [w0], w1
    3c24:	00 4b 21    	mov.w     #0x14b0, w0
    3c26:	01 48 78    	mov.b     w1, [w0]

00003c28 <.LSM186>:
    3c28:	40 83 20    	mov.w     #0x834, w0
    3c2a:	90 40 90    	mov.b     [w0+1], w1
    3c2c:	10 4b 21    	mov.w     #0x14b1, w0
    3c2e:	01 48 78    	mov.b     w1, [w0]

00003c30 <.LSM187>:
    3c30:	40 83 20    	mov.w     #0x834, w0
    3c32:	10 00 90    	mov.w     [w0+2], w0
    3c34:	90 a5 88    	mov.w     w0, 0x14b2

00003c36 <.LSM188>:
    3c36:	40 83 20    	mov.w     #0x834, w0
    3c38:	20 00 90    	mov.w     [w0+4], w0
    3c3a:	a0 a5 88    	mov.w     w0, 0x14b4

00003c3c <.LSM189>:
    3c3c:	40 83 20    	mov.w     #0x834, w0
    3c3e:	30 00 90    	mov.w     [w0+6], w0
    3c40:	b0 a5 88    	mov.w     w0, 0x14b6

00003c42 <.LSM190>:
    3c42:	40 60 21    	mov.w     #0x1604, w0
    3c44:	80 40 eb    	clr.b     w1
    3c46:	01 48 78    	mov.b     w1, [w0]

00003c48 <.LSM191>:
    3c48:	50 60 21    	mov.w     #0x1605, w0
    3c4a:	81 cc b3    	mov.b     #0xc8, w1
    3c4c:	01 48 78    	mov.b     w1, [w0]

00003c4e <.LSM192>:
    3c4e:	ef 00 37    	bra       0x3e2e <.L29>

00003c50 <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    3c50:	40 83 20    	mov.w     #0x834, w0
    3c52:	90 40 78    	mov.b     [w0], w1
    3c54:	00 4b 21    	mov.w     #0x14b0, w0
    3c56:	01 48 78    	mov.b     w1, [w0]

00003c58 <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    3c58:	40 83 20    	mov.w     #0x834, w0
    3c5a:	90 40 90    	mov.b     [w0+1], w1
    3c5c:	10 4b 21    	mov.w     #0x14b1, w0
    3c5e:	01 48 78    	mov.b     w1, [w0]

00003c60 <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    3c60:	40 83 20    	mov.w     #0x834, w0
    3c62:	10 00 90    	mov.w     [w0+2], w0
    3c64:	90 a5 88    	mov.w     w0, 0x14b2

00003c66 <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    3c66:	40 83 20    	mov.w     #0x834, w0
    3c68:	20 00 90    	mov.w     [w0+4], w0
    3c6a:	a0 a5 88    	mov.w     w0, 0x14b4

00003c6c <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    3c6c:	40 83 20    	mov.w     #0x834, w0
    3c6e:	30 00 90    	mov.w     [w0+6], w0
    3c70:	b0 a5 88    	mov.w     w0, 0x14b6

00003c72 <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    3c72:	40 83 20    	mov.w     #0x834, w0
    3c74:	30 40 90    	mov.b     [w0+3], w0
    3c76:	00 80 fb    	ze        w0, w0
    3c78:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3c7a:	14 00 32    	bra       Z, 0x3ca4 <.L92>
    3c7c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3c7e:	36 00 32    	bra       Z, 0x3cec <.L93>
    3c80:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3c82:	5c 00 3a    	bra       NZ, 0x3d3c <.L133>

00003c84 <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    3c84:	00 8b 2a    	mov.w     #0xa8b0, w0
    3c86:	c0 a5 88    	mov.w     w0, 0x14b8

00003c88 <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    3c88:	c0 a5 80    	mov.w     0x14b8, w0
    3c8a:	10 40 78    	mov.b     [w0], w0
    3c8c:	00 80 fb    	ze        w0, w0
    3c8e:	d0 a5 88    	mov.w     w0, 0x14ba

00003c90 <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    3c90:	40 83 20    	mov.w     #0x834, w0
    3c92:	b0 00 90    	mov.w     [w0+6], w1
    3c94:	d0 a5 80    	mov.w     0x14ba, w0
    3c96:	80 8f 50    	sub.w     w1, w0, [w15]
    3c98:	03 00 31    	bra       C, 0x3ca0 <.L94>

00003c9a <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    3c9a:	40 83 20    	mov.w     #0x834, w0
    3c9c:	30 00 90    	mov.w     [w0+6], w0
    3c9e:	d0 a5 88    	mov.w     w0, 0x14ba

00003ca0 <.L94>:
                    }
                    SendDataPacket();
    3ca0:	22 01 07    	rcall     0x3ee6 <_SendDataPacket>

00003ca2 <.LSM204>:
                    break;
    3ca2:	50 00 37    	bra       0x3d44 <.L95>

00003ca4 <.L92>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    3ca4:	40 83 20    	mov.w     #0x834, w0
    3ca6:	20 40 90    	mov.b     [w0+2], w0
    3ca8:	00 80 fb    	ze        w0, w0
    3caa:	00 00 e0    	cp0.w     w0
    3cac:	03 00 3a    	bra       NZ, 0x3cb4 <.L134>

00003cae <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    3cae:	20 8c 2a    	mov.w     #0xa8c2, w0
    3cb0:	c0 a5 88    	mov.w     w0, 0x14b8

00003cb2 <.LSM207>:
                            break;
    3cb2:	03 00 37    	bra       0x3cba <.L98>

00003cb4 <.L134>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    3cb4:	3c c8 bf    	mov.b     0x83c, WREG
    3cb6:	00 04 a0    	bset.b    w0, #0x0
    3cb8:	3c e8 b7    	mov.b     WREG, 0x83c

00003cba <.L98>:
                    }
                    if (!(USB_error_flags&0x01)) {
    3cba:	3c c8 bf    	mov.b     0x83c, WREG
    3cbc:	00 80 fb    	ze        w0, w0
    3cbe:	61 00 60    	and.w     w0, #0x1, w0
    3cc0:	00 00 e0    	cp0.w     w0
    3cc2:	13 00 3a    	bra       NZ, 0x3cea <.L99>

00003cc4 <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    3cc4:	c0 a5 80    	mov.w     0x14b8, w0
    3cc6:	00 80 e8    	inc2.w    w0, w0
    3cc8:	90 40 78    	mov.b     [w0], w1
    3cca:	a0 4b 21    	mov.w     #0x14ba, w0
    3ccc:	01 48 78    	mov.b     w1, [w0]

00003cce <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    3cce:	c0 a5 80    	mov.w     0x14b8, w0
    3cd0:	63 00 40    	add.w     w0, #0x3, w0
    3cd2:	90 40 78    	mov.b     [w0], w1
    3cd4:	b0 4b 21    	mov.w     #0x14bb, w0
    3cd6:	01 48 78    	mov.b     w1, [w0]

00003cd8 <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    3cd8:	40 83 20    	mov.w     #0x834, w0
    3cda:	b0 00 90    	mov.w     [w0+6], w1
    3cdc:	d0 a5 80    	mov.w     0x14ba, w0
    3cde:	80 8f 50    	sub.w     w1, w0, [w15]
    3ce0:	03 00 31    	bra       C, 0x3ce8 <.L100>

00003ce2 <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    3ce2:	40 83 20    	mov.w     #0x834, w0
    3ce4:	30 00 90    	mov.w     [w0+6], w0
    3ce6:	d0 a5 88    	mov.w     w0, 0x14ba

00003ce8 <.L100>:
                        }
                        SendDataPacket();
    3ce8:	fe 00 07    	rcall     0x3ee6 <_SendDataPacket>

00003cea <.L99>:
                    }
                    break;
    3cea:	2c 00 37    	bra       0x3d44 <.L95>

00003cec <.L93>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    3cec:	40 83 20    	mov.w     #0x834, w0
    3cee:	20 40 90    	mov.b     [w0+2], w0
    3cf0:	00 80 fb    	ze        w0, w0
    3cf2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3cf4:	07 00 32    	bra       Z, 0x3d04 <.L103>
    3cf6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3cf8:	08 00 32    	bra       Z, 0x3d0a <.L104>
    3cfa:	00 00 e0    	cp0.w     w0
    3cfc:	09 00 3a    	bra       NZ, 0x3d10 <.L135>

00003cfe <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    3cfe:	40 8d 2a    	mov.w     #0xa8d4, w0
    3d00:	c0 a5 88    	mov.w     w0, 0x14b8

00003d02 <.LSM218>:
                            break;
    3d02:	09 00 37    	bra       0x3d16 <.L105>

00003d04 <.L103>:
                        case 1:
                            USB_request.data_ptr = String1;
    3d04:	80 8d 2a    	mov.w     #0xa8d8, w0
    3d06:	c0 a5 88    	mov.w     w0, 0x14b8

00003d08 <.LSM220>:
                            break;
    3d08:	06 00 37    	bra       0x3d16 <.L105>

00003d0a <.L104>:
                        case 2:
                            USB_request.data_ptr = String2;
    3d0a:	20 8f 2a    	mov.w     #0xa8f2, w0
    3d0c:	c0 a5 88    	mov.w     w0, 0x14b8

00003d0e <.LSM222>:
                            break;
    3d0e:	03 00 37    	bra       0x3d16 <.L105>

00003d10 <.L135>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    3d10:	3c c8 bf    	mov.b     0x83c, WREG
    3d12:	00 04 a0    	bset.b    w0, #0x0
    3d14:	3c e8 b7    	mov.b     WREG, 0x83c

00003d16 <.L105>:
                    }
                    if (!(USB_error_flags&0x01)) {
    3d16:	3c c8 bf    	mov.b     0x83c, WREG
    3d18:	00 80 fb    	ze        w0, w0
    3d1a:	61 00 60    	and.w     w0, #0x1, w0
    3d1c:	00 00 e0    	cp0.w     w0
    3d1e:	0d 00 3a    	bra       NZ, 0x3d3a <.L106>

00003d20 <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    3d20:	c0 a5 80    	mov.w     0x14b8, w0
    3d22:	10 40 78    	mov.b     [w0], w0
    3d24:	00 80 fb    	ze        w0, w0
    3d26:	d0 a5 88    	mov.w     w0, 0x14ba

00003d28 <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    3d28:	40 83 20    	mov.w     #0x834, w0
    3d2a:	b0 00 90    	mov.w     [w0+6], w1
    3d2c:	d0 a5 80    	mov.w     0x14ba, w0
    3d2e:	80 8f 50    	sub.w     w1, w0, [w15]
    3d30:	03 00 31    	bra       C, 0x3d38 <.L107>

00003d32 <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    3d32:	40 83 20    	mov.w     #0x834, w0
    3d34:	30 00 90    	mov.w     [w0+6], w0
    3d36:	d0 a5 88    	mov.w     w0, 0x14ba

00003d38 <.L107>:
                        }
                        SendDataPacket();
    3d38:	d6 00 07    	rcall     0x3ee6 <_SendDataPacket>

00003d3a <.L106>:
                    }
                    break;
    3d3a:	04 00 37    	bra       0x3d44 <.L95>

00003d3c <.L133>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    3d3c:	3c c8 bf    	mov.b     0x83c, WREG
    3d3e:	00 04 a0    	bset.b    w0, #0x0
    3d40:	3c e8 b7    	mov.b     WREG, 0x83c

00003d42 <.LSM231>:
            }
            break;
    3d42:	75 00 37    	bra       0x3e2e <.L29>

00003d44 <.L95>:
    3d44:	74 00 37    	bra       0x3e2e <.L29>

00003d46 <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    3d46:	30 b0 80    	mov.w     0x1606, w0
    3d48:	d1 83 20    	mov.w     #0x83d, w1
    3d4a:	91 40 78    	mov.b     [w1], w1
    3d4c:	01 48 78    	mov.b     w1, [w0]

00003d4e <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    3d4e:	40 60 21    	mov.w     #0x1604, w0
    3d50:	11 c0 b3    	mov.b     #0x1, w1
    3d52:	01 48 78    	mov.b     w1, [w0]

00003d54 <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    3d54:	50 60 21    	mov.w     #0x1605, w0
    3d56:	81 cc b3    	mov.b     #0xc8, w1
    3d58:	01 48 78    	mov.b     w1, [w0]

00003d5a <.LSM235>:
            break;
    3d5a:	69 00 37    	bra       0x3e2e <.L29>

00003d5c <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    3d5c:	40 83 20    	mov.w     #0x834, w0
    3d5e:	20 40 90    	mov.b     [w0+2], w0
    3d60:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3d62:	22 00 3e    	bra       GTU, 0x3da8 <.L108>

00003d64 <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    3d64:	a0 4a 20    	mov.w     #0x4aa, w0
    3d66:	10 07 98    	mov.w     w0, [w14+2]

00003d68 <.LSM238>:
                for (n = 1; n<16; n++)
    3d68:	10 c0 b3    	mov.b     #0x1, w0
    3d6a:	00 4f 78    	mov.b     w0, [w14]
    3d6c:	07 00 37    	bra       0x3d7c <.L109>

00003d6e <.L110>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    3d6e:	1e 80 fb    	ze        [w14], w0
    3d70:	00 00 40    	add.w     w0, w0, w0
    3d72:	9e 00 90    	mov.w     [w14+2], w1
    3d74:	00 80 40    	add.w     w1, w0, w0
    3d76:	80 00 eb    	clr.w     w1
    3d78:	01 08 78    	mov.w     w1, [w0]

00003d7a <.LSM240>:
    3d7a:	1e 4f e8    	inc.b     [w14], [w14]

00003d7c <.L109>:
    3d7c:	1e 40 78    	mov.b     [w14], w0
    3d7e:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    3d80:	f6 ff 36    	bra       LEU, 0x3d6e <.L110>

00003d82 <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    3d82:	40 83 20    	mov.w     #0x834, w0
    3d84:	20 40 90    	mov.b     [w0+2], w0
    3d86:	3d e8 b7    	mov.b     WREG, 0x83d
    3d88:	3d c8 bf    	mov.b     0x83d, WREG
    3d8a:	00 80 fb    	ze        w0, w0
    3d8c:	00 00 e0    	cp0.w     w0
    3d8e:	03 00 3a    	bra       NZ, 0x3d96 <.L136>

00003d90 <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    3d90:	20 c0 b3    	mov.b     #0x2, w0
    3d92:	40 e8 b7    	mov.b     WREG, 0x840

00003d94 <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    3d94:	02 00 37    	bra       0x3d9a <.L113>

00003d96 <.L136>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    3d96:	30 c0 b3    	mov.b     #0x3, w0
    3d98:	40 e8 b7    	mov.b     WREG, 0x840

00003d9a <.L113>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    3d9a:	40 60 21    	mov.w     #0x1604, w0
    3d9c:	80 40 eb    	clr.b     w1
    3d9e:	01 48 78    	mov.b     w1, [w0]

00003da0 <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    3da0:	50 60 21    	mov.w     #0x1605, w0
    3da2:	81 cc b3    	mov.b     #0xc8, w1
    3da4:	01 48 78    	mov.b     w1, [w0]

00003da6 <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    3da6:	43 00 37    	bra       0x3e2e <.L29>

00003da8 <.L108>:
    3da8:	3c c8 bf    	mov.b     0x83c, WREG
    3daa:	00 04 a0    	bset.b    w0, #0x0
    3dac:	3c e8 b7    	mov.b     WREG, 0x83c

00003dae <.LSM249>:
    3dae:	3f 00 37    	bra       0x3e2e <.L29>

00003db0 <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    3db0:	40 c8 bf    	mov.b     0x840, WREG
    3db2:	00 80 fb    	ze        w0, w0
    3db4:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3db6:	13 00 3a    	bra       NZ, 0x3dde <.L137>

00003db8 <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3db8:	40 83 20    	mov.w     #0x834, w0
    3dba:	40 40 90    	mov.b     [w0+4], w0
    3dbc:	00 04 e0    	cp0.b     w0
    3dbe:	0a 00 3a    	bra       NZ, 0x3dd4 <.L117>

00003dc0 <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    3dc0:	30 b0 80    	mov.w     0x1606, w0
    3dc2:	80 40 eb    	clr.b     w1
    3dc4:	01 48 78    	mov.b     w1, [w0]

00003dc6 <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    3dc6:	40 60 21    	mov.w     #0x1604, w0
    3dc8:	11 c0 b3    	mov.b     #0x1, w1
    3dca:	01 48 78    	mov.b     w1, [w0]

00003dcc <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3dcc:	50 60 21    	mov.w     #0x1605, w0
    3dce:	81 cc b3    	mov.b     #0xc8, w1
    3dd0:	01 48 78    	mov.b     w1, [w0]
    3dd2:	03 00 37    	bra       0x3dda <.L118>

00003dd4 <.L117>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    3dd4:	3c c8 bf    	mov.b     0x83c, WREG
    3dd6:	00 04 a0    	bset.b    w0, #0x0
    3dd8:	3c e8 b7    	mov.b     WREG, 0x83c

00003dda <.L118>:
                    }
                    break;
    3dda:	00 00 00    	nop       

00003ddc <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    3ddc:	28 00 37    	bra       0x3e2e <.L29>

00003dde <.L137>:
    3dde:	3c c8 bf    	mov.b     0x83c, WREG
    3de0:	00 04 a0    	bset.b    w0, #0x0
    3de2:	3c e8 b7    	mov.b     WREG, 0x83c

00003de4 <.LSM259>:
    3de4:	24 00 37    	bra       0x3e2e <.L29>

00003de6 <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    3de6:	40 c8 bf    	mov.b     0x840, WREG
    3de8:	00 80 fb    	ze        w0, w0
    3dea:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3dec:	19 00 3a    	bra       NZ, 0x3e20 <.L138>

00003dee <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3dee:	40 83 20    	mov.w     #0x834, w0
    3df0:	40 40 90    	mov.b     [w0+4], w0
    3df2:	00 04 e0    	cp0.b     w0
    3df4:	10 00 3a    	bra       NZ, 0x3e16 <.L122>

00003df6 <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    3df6:	40 83 20    	mov.w     #0x834, w0
    3df8:	20 40 90    	mov.b     [w0+2], w0
    3dfa:	00 80 fb    	ze        w0, w0
    3dfc:	00 00 e0    	cp0.w     w0
    3dfe:	07 00 3a    	bra       NZ, 0x3e0e <.L139>

00003e00 <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    3e00:	40 60 21    	mov.w     #0x1604, w0
    3e02:	80 40 eb    	clr.b     w1
    3e04:	01 48 78    	mov.b     w1, [w0]

00003e06 <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    3e06:	50 60 21    	mov.w     #0x1605, w0
    3e08:	81 cc b3    	mov.b     #0xc8, w1
    3e0a:	01 48 78    	mov.b     w1, [w0]

00003e0c <.LSM265>:
                                break;
    3e0c:	07 00 37    	bra       0x3e1c <.L126>

00003e0e <.L139>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3e0e:	3c c8 bf    	mov.b     0x83c, WREG
    3e10:	00 04 a0    	bset.b    w0, #0x0
    3e12:	3c e8 b7    	mov.b     WREG, 0x83c
    3e14:	03 00 37    	bra       0x3e1c <.L126>

00003e16 <.L122>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    3e16:	3c c8 bf    	mov.b     0x83c, WREG
    3e18:	00 04 a0    	bset.b    w0, #0x0
    3e1a:	3c e8 b7    	mov.b     WREG, 0x83c

00003e1c <.L126>:
                    }
                    break;
    3e1c:	00 00 00    	nop       

00003e1e <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    3e1e:	07 00 37    	bra       0x3e2e <.L29>

00003e20 <.L138>:
    3e20:	3c c8 bf    	mov.b     0x83c, WREG
    3e22:	00 04 a0    	bset.b    w0, #0x0
    3e24:	3c e8 b7    	mov.b     WREG, 0x83c

00003e26 <.LSM271>:
    3e26:	03 00 37    	bra       0x3e2e <.L29>

00003e28 <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    3e28:	3c c8 bf    	mov.b     0x83c, WREG
    3e2a:	00 04 a0    	bset.b    w0, #0x0
    3e2c:	3c e8 b7    	mov.b     WREG, 0x83c

00003e2e <.L29>:
    }
}
    3e2e:	00 80 fa    	ulnk      
    3e30:	00 00 06    	return    

00003e32 <_ProcessInToken>:

void ProcessInToken(void) {
    3e32:	00 00 fa    	lnk       #0x0

00003e34 <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    3e34:	3f c8 bf    	mov.b     0x83f, WREG
    3e36:	80 80 fb    	ze        w0, w1
    3e38:	00 0f 20    	mov.w     #0xf0, w0
    3e3a:	00 80 60    	and.w     w1, w0, w0
    3e3c:	00 00 e0    	cp0.w     w0
    3e3e:	2b 00 3a    	bra       NZ, 0x3e96 <.L140>

00003e40 <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    3e40:	00 4b 21    	mov.w     #0x14b0, w0
    3e42:	10 40 78    	mov.b     [w0], w0
    3e44:	80 80 fb    	ze        w0, w1
    3e46:	00 06 20    	mov.w     #0x60, w0
    3e48:	00 80 60    	and.w     w1, w0, w0
    3e4a:	01 02 20    	mov.w     #0x20, w1
    3e4c:	81 0f 50    	sub.w     w0, w1, [w15]
    3e4e:	1f 00 32    	bra       Z, 0x3e8e <.L154>
    3e50:	01 04 20    	mov.w     #0x40, w1
    3e52:	81 0f 50    	sub.w     w0, w1, [w15]
    3e54:	1a 00 32    	bra       Z, 0x3e8a <.L146>
    3e56:	00 00 e0    	cp0.w     w0
    3e58:	1d 00 3a    	bra       NZ, 0x3e94 <.L155>

00003e5a <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    3e5a:	10 4b 21    	mov.w     #0x14b1, w0
    3e5c:	10 40 78    	mov.b     [w0], w0
    3e5e:	00 80 fb    	ze        w0, w0
    3e60:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3e62:	03 00 32    	bra       Z, 0x3e6a <.L148>
    3e64:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    3e66:	0e 00 32    	bra       Z, 0x3e84 <.L149>

00003e68 <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    3e68:	13 00 37    	bra       0x3e90 <.L143>

00003e6a <.L148>:
    3e6a:	20 4b 21    	mov.w     #0x14b2, w0
    3e6c:	10 40 78    	mov.b     [w0], w0
    3e6e:	00 80 fb    	ze        w0, w0
    3e70:	b0 24 88    	mov.w     w0, 0x496
    3e72:	b0 24 80    	mov.w     0x496, w0
    3e74:	00 00 e0    	cp0.w     w0
    3e76:	03 00 3a    	bra       NZ, 0x3e7e <.L153>

00003e78 <.LSM280>:
    3e78:	10 c0 b3    	mov.b     #0x1, w0
    3e7a:	40 e8 b7    	mov.b     WREG, 0x840

00003e7c <.LSM281>:
    3e7c:	02 00 37    	bra       0x3e82 <.L152>

00003e7e <.L153>:
    3e7e:	20 c0 b3    	mov.b     #0x2, w0
    3e80:	40 e8 b7    	mov.b     WREG, 0x840

00003e82 <.L152>:
    3e82:	02 00 37    	bra       0x3e88 <.L147>

00003e84 <.L149>:
    3e84:	30 00 07    	rcall     0x3ee6 <_SendDataPacket>

00003e86 <.LSM285>:
    3e86:	00 00 00    	nop       

00003e88 <.L147>:
    3e88:	03 00 37    	bra       0x3e90 <.L143>

00003e8a <.L146>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    3e8a:	b7 05 07    	rcall     0x49fa <_VendorRequestsIn>

00003e8c <.LSM288>:
                    break;
    3e8c:	01 00 37    	bra       0x3e90 <.L143>

00003e8e <.L154>:
    3e8e:	00 00 00    	nop       

00003e90 <.L143>:
            }
            break;
    3e90:	00 00 00    	nop       
    3e92:	01 00 37    	bra       0x3e96 <.L140>

00003e94 <.L155>:
    3e94:	00 00 00    	nop       

00003e96 <.L140>:
    }
}
    3e96:	00 80 fa    	ulnk      
    3e98:	00 00 06    	return    

00003e9a <_ProcessOutToken>:

void ProcessOutToken(void) {
    3e9a:	00 00 fa    	lnk       #0x0

00003e9c <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    3e9c:	3f c8 bf    	mov.b     0x83f, WREG
    3e9e:	80 80 fb    	ze        w0, w1
    3ea0:	00 0f 20    	mov.w     #0xf0, w0
    3ea2:	00 80 60    	and.w     w1, w0, w0
    3ea4:	00 00 e0    	cp0.w     w0
    3ea6:	1d 00 3a    	bra       NZ, 0x3ee2 <.L156>

00003ea8 <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    3ea8:	00 4b 21    	mov.w     #0x14b0, w0
    3eaa:	10 40 78    	mov.b     [w0], w0
    3eac:	80 80 fb    	ze        w0, w1
    3eae:	00 06 20    	mov.w     #0x60, w0
    3eb0:	00 80 60    	and.w     w1, w0, w0
    3eb2:	01 02 20    	mov.w     #0x20, w1
    3eb4:	81 0f 50    	sub.w     w0, w1, [w15]
    3eb6:	05 00 32    	bra       Z, 0x3ec2 <.L163>
    3eb8:	01 04 20    	mov.w     #0x40, w1
    3eba:	81 0f 50    	sub.w     w0, w1, [w15]
    3ebc:	04 00 3a    	bra       NZ, 0x3ec6 <.L164>

00003ebe <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    3ebe:	a3 05 07    	rcall     0x4a06 <_VendorRequestsOut>

00003ec0 <.LSM296>:
                    break;
    3ec0:	03 00 37    	bra       0x3ec8 <.L159>

00003ec2 <.L163>:
    3ec2:	00 00 00    	nop       
    3ec4:	01 00 37    	bra       0x3ec8 <.L159>

00003ec6 <.L164>:
    3ec6:	00 00 00    	nop       

00003ec8 <.L159>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    3ec8:	00 60 21    	mov.w     #0x1600, w0
    3eca:	01 c4 b3    	mov.b     #0x40, w1
    3ecc:	01 48 78    	mov.b     w1, [w0]

00003ece <.LSM300>:
            BD[EP0OUT].status = 0x88;
    3ece:	10 60 21    	mov.w     #0x1601, w0
    3ed0:	81 c8 b3    	mov.b     #0x88, w1
    3ed2:	01 48 78    	mov.b     w1, [w0]

00003ed4 <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    3ed4:	40 60 21    	mov.w     #0x1604, w0
    3ed6:	80 40 eb    	clr.b     w1
    3ed8:	01 48 78    	mov.b     w1, [w0]

00003eda <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3eda:	50 60 21    	mov.w     #0x1605, w0
    3edc:	81 cc b3    	mov.b     #0xc8, w1
    3ede:	01 48 78    	mov.b     w1, [w0]

00003ee0 <.LSM303>:
            break;
    3ee0:	00 00 00    	nop       

00003ee2 <.L156>:
    }
}
    3ee2:	00 80 fa    	ulnk      
    3ee4:	00 00 06    	return    

00003ee6 <_SendDataPacket>:

void SendDataPacket(void) {
    3ee6:	02 00 fa    	lnk       #0x2

00003ee8 <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    3ee8:	d1 a5 80    	mov.w     0x14ba, w1
    3eea:	f0 03 20    	mov.w     #0x3f, w0
    3eec:	80 8f 50    	sub.w     w1, w0, [w15]
    3eee:	0b 00 3e    	bra       GTU, 0x3f06

00003ef0 <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    3ef0:	d0 a5 80    	mov.w     0x14ba, w0
    3ef2:	00 4f 78    	mov.b     w0, [w14]

00003ef4 <.LSM308>:
        USB_request.bytes_left.w = 0;
    3ef4:	00 00 eb    	clr.w     w0
    3ef6:	d0 a5 88    	mov.w     w0, 0x14ba

00003ef8 <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    3ef8:	00 4b 21    	mov.w     #0x14b0, w0
    3efa:	80 c0 eb    	setm.b    w1
    3efc:	01 48 78    	mov.b     w1, [w0]

00003efe <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    3efe:	10 4b 21    	mov.w     #0x14b1, w0
    3f00:	80 c0 eb    	setm.b    w1
    3f02:	01 48 78    	mov.b     w1, [w0]
    3f04:	05 00 37    	bra       0x3f10 <.L167>

00003f06 <.L166>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    3f06:	00 c4 b3    	mov.b     #0x40, w0
    3f08:	00 4f 78    	mov.b     w0, [w14]

00003f0a <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    3f0a:	d0 a5 80    	mov.w     0x14ba, w0
    3f0c:	00 04 b1    	sub.w     #0x40, w0
    3f0e:	d0 a5 88    	mov.w     w0, 0x14ba

00003f10 <.L167>:
    }
    for (n = 0; n<packet_length; n++) {
    3f10:	00 40 eb    	clr.b     w0
    3f12:	10 47 98    	mov.b     w0, [w14+1]
    3f14:	0c 00 37    	bra       0x3f2e <.L168>

00003f16 <.L169>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    3f16:	31 b0 80    	mov.w     0x1606, w1
    3f18:	1e 40 90    	mov.b     [w14+1], w0
    3f1a:	00 80 fb    	ze        w0, w0
    3f1c:	80 80 40    	add.w     w1, w0, w1
    3f1e:	c0 a5 80    	mov.w     0x14b8, w0
    3f20:	10 41 78    	mov.b     [w0], w2
    3f22:	82 48 78    	mov.b     w2, [w1]
    3f24:	00 00 e8    	inc.w     w0, w0
    3f26:	c0 a5 88    	mov.w     w0, 0x14b8

00003f28 <.LSM315>:
    3f28:	1e 40 90    	mov.b     [w14+1], w0
    3f2a:	00 40 e8    	inc.b     w0, w0
    3f2c:	10 47 98    	mov.b     w0, [w14+1]

00003f2e <.L168>:
    3f2e:	1e 40 90    	mov.b     [w14+1], w0
    3f30:	9e 4f 50    	sub.b     w0, [w14], [w15]
    3f32:	f1 ff 39    	bra       NC, 0x3f16 <.L169>

00003f34 <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    3f34:	40 60 21    	mov.w     #0x1604, w0
    3f36:	1e 48 78    	mov.b     [w14], [w0]

00003f38 <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    3f38:	50 60 21    	mov.w     #0x1605, w0
    3f3a:	10 40 78    	mov.b     [w0], w0
    3f3c:	00 c0 ea    	com.b     w0, w0
    3f3e:	02 c4 b3    	mov.b     #0x40, w2
    3f40:	82 40 60    	and.b     w0, w2, w1
    3f42:	80 c8 b3    	mov.b     #0x88, w0
    3f44:	00 c0 70    	ior.b     w1, w0, w0
    3f46:	80 40 78    	mov.b     w0, w1
    3f48:	50 60 21    	mov.w     #0x1605, w0
    3f4a:	01 48 78    	mov.b     w1, [w0]

00003f4c <.LSM318>:
}
    3f4c:	00 80 fa    	ulnk      
    3f4e:	00 00 06    	return    

00003f50 <__USB1Interrupt>:

//Making Service USB interrupt driven
void __attribute__((interrupt, auto_psv)) _USB1Interrupt(void) {
    3f50:	36 00 f8    	push      0x36
    3f52:	80 9f be    	mov.d     w0, [w15++]
    3f54:	82 9f be    	mov.d     w2, [w15++]
    3f56:	84 9f be    	mov.d     w4, [w15++]
    3f58:	86 9f be    	mov.d     w6, [w15++]
    3f5a:	32 00 f8    	push      0x32
    3f5c:	34 00 f8    	push      0x34
    3f5e:	10 00 20    	mov.w     #0x1, w0
    3f60:	a0 01 88    	mov.w     w0, 0x34
    3f62:	00 20 20    	mov.w     #0x200, w0
    3f64:	90 01 88    	mov.w     w0, 0x32
    3f66:	00 00 fa    	lnk       #0x0

00003f68 <.LSM320>:
    IFS5bits.USB1IF = 0; //flag
    3f68:	8e c0 a9    	bclr.b    0x8e, #0x6

00003f6a <.LSM321>:
    ServiceUSB();
    3f6a:	fe fb 07    	rcall     0x3768 <_ServiceUSB>

00003f6c <.LSM322>:
}
    3f6c:	00 80 fa    	ulnk      
    3f6e:	34 00 f9    	pop       0x34
    3f70:	32 00 f9    	pop       0x32
    3f72:	4f 03 be    	mov.d     [--w15], w6
    3f74:	4f 02 be    	mov.d     [--w15], w4
    3f76:	4f 01 be    	mov.d     [--w15], w2
    3f78:	4f 00 be    	mov.d     [--w15], w0
    3f7a:	36 00 f9    	pop       0x36
    3f7c:	00 40 06    	retfie    

00003f7e <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    3f7e:	02 00 fa    	lnk       #0x2
    3f80:	00 0f 78    	mov.w     w0, [w14]

00003f82 <.LSM1>:
    timer_lower(self);
    3f82:	1e 00 78    	mov.w     [w14], w0
    3f84:	01 02 07    	rcall     0x4388 <_timer_lower>

00003f86 <.LSM2>:
    if (self->every) {
    3f86:	1e 00 78    	mov.w     [w14], w0
    3f88:	10 08 90    	mov.w     [w0+18], w0
    3f8a:	00 00 e0    	cp0.w     w0
    3f8c:	05 00 32    	bra       Z, 0x3f98 <.L2>

00003f8e <.LSM3>:
        self->every(self);
    3f8e:	1e 00 78    	mov.w     [w14], w0
    3f90:	90 08 90    	mov.w     [w0+18], w1
    3f92:	1e 00 78    	mov.w     [w14], w0
    3f94:	01 00 01    	call      w1
    3f96:	1a 00 37    	bra       0x3fcc <.L1>

00003f98 <.L2>:
    } else if (self->after) {
    3f98:	1e 00 78    	mov.w     [w14], w0
    3f9a:	20 08 90    	mov.w     [w0+20], w0
    3f9c:	00 00 e0    	cp0.w     w0
    3f9e:	14 00 32    	bra       Z, 0x3fc8 <.L4>

00003fa0 <.LSM5>:
        if (self->aftercount) {
    3fa0:	1e 00 78    	mov.w     [w14], w0
    3fa2:	00 08 90    	mov.w     [w0+16], w0
    3fa4:	00 00 e0    	cp0.w     w0
    3fa6:	0a 00 32    	bra       Z, 0x3fbc <.L5>

00003fa8 <.LSM6>:
            self->after(self);
    3fa8:	1e 00 78    	mov.w     [w14], w0
    3faa:	a0 08 90    	mov.w     [w0+20], w1
    3fac:	1e 00 78    	mov.w     [w14], w0
    3fae:	01 00 01    	call      w1

00003fb0 <.LSM7>:
            self->aftercount--;
    3fb0:	1e 00 78    	mov.w     [w14], w0
    3fb2:	00 08 90    	mov.w     [w0+16], w0
    3fb4:	80 00 e9    	dec.w     w0, w1
    3fb6:	1e 00 78    	mov.w     [w14], w0
    3fb8:	01 08 98    	mov.w     w1, [w0+16]
    3fba:	08 00 37    	bra       0x3fcc <.L1>

00003fbc <.L5>:
        } else {
            timer_disableInterrupt(self);
    3fbc:	1e 00 78    	mov.w     [w14], w0
    3fbe:	0c 02 07    	rcall     0x43d8 <_timer_disableInterrupt>

00003fc0 <.LSM9>:
            self->after = NULL;
    3fc0:	1e 00 78    	mov.w     [w14], w0
    3fc2:	80 00 eb    	clr.w     w1
    3fc4:	21 08 98    	mov.w     w1, [w0+20]
    3fc6:	02 00 37    	bra       0x3fcc <.L1>

00003fc8 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    3fc8:	1e 00 78    	mov.w     [w14], w0
    3fca:	06 02 07    	rcall     0x43d8 <_timer_disableInterrupt>

00003fcc <.L1>:
    }
}
    3fcc:	00 80 fa    	ulnk      
    3fce:	00 00 06    	return    

00003fd0 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    3fd0:	36 00 f8    	push      0x36
    3fd2:	80 9f be    	mov.d     w0, [w15++]
    3fd4:	82 9f be    	mov.d     w2, [w15++]
    3fd6:	84 9f be    	mov.d     w4, [w15++]
    3fd8:	86 9f be    	mov.d     w6, [w15++]
    3fda:	32 00 f8    	push      0x32
    3fdc:	34 00 f8    	push      0x34
    3fde:	10 00 20    	mov.w     #0x1, w0
    3fe0:	a0 01 88    	mov.w     w0, 0x34
    3fe2:	00 20 20    	mov.w     #0x200, w0
    3fe4:	90 01 88    	mov.w     w0, 0x32
    3fe6:	00 00 fa    	lnk       #0x0

00003fe8 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    3fe8:	c0 4b 21    	mov.w     #0x14bc, w0
    3fea:	c9 ff 07    	rcall     0x3f7e <_timer_serviceInterrupt>

00003fec <.LSM14>:
}
    3fec:	00 80 fa    	ulnk      
    3fee:	34 00 f9    	pop       0x34
    3ff0:	32 00 f9    	pop       0x32
    3ff2:	4f 03 be    	mov.d     [--w15], w6
    3ff4:	4f 02 be    	mov.d     [--w15], w4
    3ff6:	4f 01 be    	mov.d     [--w15], w2
    3ff8:	4f 00 be    	mov.d     [--w15], w0
    3ffa:	36 00 f9    	pop       0x36
    3ffc:	00 40 06    	retfie    

00003ffe <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    3ffe:	36 00 f8    	push      0x36
    4000:	80 9f be    	mov.d     w0, [w15++]
    4002:	82 9f be    	mov.d     w2, [w15++]
    4004:	84 9f be    	mov.d     w4, [w15++]
    4006:	86 9f be    	mov.d     w6, [w15++]
    4008:	32 00 f8    	push      0x32
    400a:	34 00 f8    	push      0x34
    400c:	10 00 20    	mov.w     #0x1, w0
    400e:	a0 01 88    	mov.w     w0, 0x34
    4010:	00 20 20    	mov.w     #0x200, w0
    4012:	90 01 88    	mov.w     w0, 0x32
    4014:	00 00 fa    	lnk       #0x0

00004016 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    4016:	20 4d 21    	mov.w     #0x14d2, w0
    4018:	b2 ff 07    	rcall     0x3f7e <_timer_serviceInterrupt>

0000401a <.LSM17>:
}
    401a:	00 80 fa    	ulnk      
    401c:	34 00 f9    	pop       0x34
    401e:	32 00 f9    	pop       0x32
    4020:	4f 03 be    	mov.d     [--w15], w6
    4022:	4f 02 be    	mov.d     [--w15], w4
    4024:	4f 01 be    	mov.d     [--w15], w2
    4026:	4f 00 be    	mov.d     [--w15], w0
    4028:	36 00 f9    	pop       0x36
    402a:	00 40 06    	retfie    

0000402c <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    402c:	36 00 f8    	push      0x36
    402e:	80 9f be    	mov.d     w0, [w15++]
    4030:	82 9f be    	mov.d     w2, [w15++]
    4032:	84 9f be    	mov.d     w4, [w15++]
    4034:	86 9f be    	mov.d     w6, [w15++]
    4036:	32 00 f8    	push      0x32
    4038:	34 00 f8    	push      0x34
    403a:	10 00 20    	mov.w     #0x1, w0
    403c:	a0 01 88    	mov.w     w0, 0x34
    403e:	00 20 20    	mov.w     #0x200, w0
    4040:	90 01 88    	mov.w     w0, 0x32
    4042:	00 00 fa    	lnk       #0x0

00004044 <.LSM19>:
    timer_serviceInterrupt(&timer3);
    4044:	80 4e 21    	mov.w     #0x14e8, w0
    4046:	9b ff 07    	rcall     0x3f7e <_timer_serviceInterrupt>

00004048 <.LSM20>:
}
    4048:	00 80 fa    	ulnk      
    404a:	34 00 f9    	pop       0x34
    404c:	32 00 f9    	pop       0x32
    404e:	4f 03 be    	mov.d     [--w15], w6
    4050:	4f 02 be    	mov.d     [--w15], w4
    4052:	4f 01 be    	mov.d     [--w15], w2
    4054:	4f 00 be    	mov.d     [--w15], w0
    4056:	36 00 f9    	pop       0x36
    4058:	00 40 06    	retfie    

0000405a <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    405a:	36 00 f8    	push      0x36
    405c:	80 9f be    	mov.d     w0, [w15++]
    405e:	82 9f be    	mov.d     w2, [w15++]
    4060:	84 9f be    	mov.d     w4, [w15++]
    4062:	86 9f be    	mov.d     w6, [w15++]
    4064:	32 00 f8    	push      0x32
    4066:	34 00 f8    	push      0x34
    4068:	10 00 20    	mov.w     #0x1, w0
    406a:	a0 01 88    	mov.w     w0, 0x34
    406c:	00 20 20    	mov.w     #0x200, w0
    406e:	90 01 88    	mov.w     w0, 0x32
    4070:	00 00 fa    	lnk       #0x0

00004072 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    4072:	e0 4f 21    	mov.w     #0x14fe, w0
    4074:	84 ff 07    	rcall     0x3f7e <_timer_serviceInterrupt>

00004076 <.LSM23>:
}
    4076:	00 80 fa    	ulnk      
    4078:	34 00 f9    	pop       0x34
    407a:	32 00 f9    	pop       0x32
    407c:	4f 03 be    	mov.d     [--w15], w6
    407e:	4f 02 be    	mov.d     [--w15], w4
    4080:	4f 01 be    	mov.d     [--w15], w2
    4082:	4f 00 be    	mov.d     [--w15], w0
    4084:	36 00 f9    	pop       0x36
    4086:	00 40 06    	retfie    

00004088 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    4088:	36 00 f8    	push      0x36
    408a:	80 9f be    	mov.d     w0, [w15++]
    408c:	82 9f be    	mov.d     w2, [w15++]
    408e:	84 9f be    	mov.d     w4, [w15++]
    4090:	86 9f be    	mov.d     w6, [w15++]
    4092:	32 00 f8    	push      0x32
    4094:	34 00 f8    	push      0x34
    4096:	10 00 20    	mov.w     #0x1, w0
    4098:	a0 01 88    	mov.w     w0, 0x34
    409a:	00 20 20    	mov.w     #0x200, w0
    409c:	90 01 88    	mov.w     w0, 0x32
    409e:	00 00 fa    	lnk       #0x0

000040a0 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    40a0:	40 51 21    	mov.w     #0x1514, w0
    40a2:	6d ff 07    	rcall     0x3f7e <_timer_serviceInterrupt>

000040a4 <.LSM26>:
}
    40a4:	00 80 fa    	ulnk      
    40a6:	34 00 f9    	pop       0x34
    40a8:	32 00 f9    	pop       0x32
    40aa:	4f 03 be    	mov.d     [--w15], w6
    40ac:	4f 02 be    	mov.d     [--w15], w4
    40ae:	4f 01 be    	mov.d     [--w15], w2
    40b0:	4f 00 be    	mov.d     [--w15], w0
    40b2:	36 00 f9    	pop       0x36
    40b4:	00 40 06    	retfie    

000040b6 <_init_timer>:

void init_timer(void) {
    40b6:	00 00 fa    	lnk       #0x0

000040b8 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    40b8:	b0 00 20    	mov.w     #0xb, w0
    40ba:	80 1f 78    	mov.w     w0, [w15++]
    40bc:	47 00 20    	mov.w     #0x4, w7
    40be:	36 c0 b3    	mov.b     #0x3, w6
    40c0:	45 09 20    	mov.w     #0x94, w5
    40c2:	44 08 20    	mov.w     #0x84, w4
    40c4:	03 10 20    	mov.w     #0x100, w3
    40c6:	22 10 20    	mov.w     #0x102, w2
    40c8:	41 10 20    	mov.w     #0x104, w1
    40ca:	c0 4b 21    	mov.w     #0x14bc, w0
    40cc:	33 00 07    	rcall     0x4134 <_timer_init>
    40ce:	8f 87 e9    	dec2.w    w15, w15

000040d0 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    40d0:	c0 00 20    	mov.w     #0xc, w0
    40d2:	80 1f 78    	mov.w     w0, [w15++]
    40d4:	80 03 eb    	clr.w     w7
    40d6:	76 c0 b3    	mov.b     #0x7, w6
    40d8:	45 09 20    	mov.w     #0x94, w5
    40da:	44 08 20    	mov.w     #0x84, w4
    40dc:	63 10 20    	mov.w     #0x106, w3
    40de:	c2 10 20    	mov.w     #0x10c, w2
    40e0:	01 11 20    	mov.w     #0x110, w1
    40e2:	20 4d 21    	mov.w     #0x14d2, w0
    40e4:	27 00 07    	rcall     0x4134 <_timer_init>
    40e6:	8f 87 e9    	dec2.w    w15, w15

000040e8 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    40e8:	d0 00 20    	mov.w     #0xd, w0
    40ea:	80 1f 78    	mov.w     w0, [w15++]
    40ec:	17 00 20    	mov.w     #0x1, w7
    40ee:	86 c0 b3    	mov.b     #0x8, w6
    40f0:	45 09 20    	mov.w     #0x94, w5
    40f2:	44 08 20    	mov.w     #0x84, w4
    40f4:	a3 10 20    	mov.w     #0x10a, w3
    40f6:	e2 10 20    	mov.w     #0x10e, w2
    40f8:	21 11 20    	mov.w     #0x112, w1
    40fa:	80 4e 21    	mov.w     #0x14e8, w0
    40fc:	1b 00 07    	rcall     0x4134 <_timer_init>
    40fe:	8f 87 e9    	dec2.w    w15, w15

00004100 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    4100:	e0 00 20    	mov.w     #0xe, w0
    4102:	80 1f 78    	mov.w     w0, [w15++]
    4104:	27 00 20    	mov.w     #0x2, w7
    4106:	b6 c0 b3    	mov.b     #0xb, w6
    4108:	65 09 20    	mov.w     #0x96, w5
    410a:	64 08 20    	mov.w     #0x86, w4
    410c:	43 11 20    	mov.w     #0x114, w3
    410e:	a2 11 20    	mov.w     #0x11a, w2
    4110:	e1 11 20    	mov.w     #0x11e, w1
    4112:	e0 4f 21    	mov.w     #0x14fe, w0
    4114:	0f 00 07    	rcall     0x4134 <_timer_init>
    4116:	8f 87 e9    	dec2.w    w15, w15

00004118 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    4118:	f0 00 20    	mov.w     #0xf, w0
    411a:	80 1f 78    	mov.w     w0, [w15++]
    411c:	37 00 20    	mov.w     #0x3, w7
    411e:	c6 c0 b3    	mov.b     #0xc, w6
    4120:	65 09 20    	mov.w     #0x96, w5
    4122:	64 08 20    	mov.w     #0x86, w4
    4124:	83 11 20    	mov.w     #0x118, w3
    4126:	c2 11 20    	mov.w     #0x11c, w2
    4128:	01 12 20    	mov.w     #0x120, w1
    412a:	40 51 21    	mov.w     #0x1514, w0
    412c:	03 00 07    	rcall     0x4134 <_timer_init>
    412e:	8f 87 e9    	dec2.w    w15, w15

00004130 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    4130:	00 80 fa    	ulnk      
    4132:	00 00 06    	return    

00004134 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    4134:	10 00 fa    	lnk       #0x10
    4136:	00 0f 78    	mov.w     w0, [w14]
    4138:	11 07 98    	mov.w     w1, [w14+2]
    413a:	22 07 98    	mov.w     w2, [w14+4]
    413c:	33 07 98    	mov.w     w3, [w14+6]
    413e:	44 07 98    	mov.w     w4, [w14+8]
    4140:	55 07 98    	mov.w     w5, [w14+10]
    4142:	46 4f 98    	mov.b     w6, [w14+12]
    4144:	77 07 98    	mov.w     w7, [w14+14]

00004146 <.LSM35>:
    self->TxCON = TxCON;
    4146:	1e 00 78    	mov.w     [w14], w0
    4148:	9e 00 90    	mov.w     [w14+2], w1
    414a:	01 08 78    	mov.w     w1, [w0]

0000414c <.LSM36>:
    self->PRx = PRx;
    414c:	1e 00 78    	mov.w     [w14], w0
    414e:	ae 00 90    	mov.w     [w14+4], w1
    4150:	11 00 98    	mov.w     w1, [w0+2]

00004152 <.LSM37>:
    self->TMRx = TMRx;
    4152:	1e 00 78    	mov.w     [w14], w0
    4154:	be 00 90    	mov.w     [w14+6], w1
    4156:	21 00 98    	mov.w     w1, [w0+4]

00004158 <.LSM38>:
    self->IFSy = IFSy;
    4158:	1e 00 78    	mov.w     [w14], w0
    415a:	ce 00 90    	mov.w     [w14+8], w1
    415c:	31 00 98    	mov.w     w1, [w0+6]

0000415e <.LSM39>:
    self->IECy = IECy;
    415e:	1e 00 78    	mov.w     [w14], w0
    4160:	de 00 90    	mov.w     [w14+10], w1
    4162:	41 00 98    	mov.w     w1, [w0+8]

00004164 <.LSM40>:
    self->flagbit = flagbit;
    4164:	1e 00 78    	mov.w     [w14], w0
    4166:	ce 48 90    	mov.b     [w14+12], w1
    4168:	21 48 98    	mov.b     w1, [w0+10]

0000416a <.LSM41>:
    self->octselnum = octselnum;
    416a:	1e 00 78    	mov.w     [w14], w0
    416c:	fe 00 90    	mov.w     [w14+14], w1
    416e:	61 00 98    	mov.w     w1, [w0+12]

00004170 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    4170:	1e 00 78    	mov.w     [w14], w0
    4172:	ce b8 97    	mov.w     [w14-8], w1
    4174:	71 00 98    	mov.w     w1, [w0+14]

00004176 <.LSM43>:
    self->aftercount = 0;
    4176:	1e 00 78    	mov.w     [w14], w0
    4178:	80 00 eb    	clr.w     w1
    417a:	01 08 98    	mov.w     w1, [w0+16]

0000417c <.LSM44>:
    self->every = NULL;
    417c:	1e 00 78    	mov.w     [w14], w0
    417e:	80 00 eb    	clr.w     w1
    4180:	11 08 98    	mov.w     w1, [w0+18]

00004182 <.LSM45>:
    self->after = NULL;
    4182:	1e 00 78    	mov.w     [w14], w0
    4184:	80 00 eb    	clr.w     w1
    4186:	21 08 98    	mov.w     w1, [w0+20]

00004188 <.LSM46>:
}
    4188:	00 80 fa    	ulnk      
    418a:	00 00 06    	return    

0000418c <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    418c:	06 00 fa    	lnk       #0x6
    418e:	88 1f 78    	mov.w     w8, [w15++]
    4190:	00 0f 78    	mov.w     w0, [w14]
    4192:	12 07 98    	mov.w     w2, [w14+2]
    4194:	23 07 98    	mov.w     w3, [w14+4]

00004196 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    4196:	18 c0 b3    	mov.b     #0x1, w8
    4198:	d2 7b 23    	mov.w     #0x37bd, w2
    419a:	63 f8 23    	mov.w     #0x3f86, w3
    419c:	1e 00 90    	mov.w     [w14+2], w0
    419e:	ae 00 90    	mov.w     [w14+4], w1
    41a0:	09 e9 07    	rcall     0x13b4 <___gesf2>
    41a2:	00 00 e0    	cp0.w     w0
    41a4:	01 00 3c    	bra       GT, 0x41a8 <.L14>
    41a6:	00 44 eb    	clr.b     w8

000041a8 <.L14>:
    41a8:	08 04 e0    	cp0.b     w8
    41aa:	69 00 3a    	bra       NZ, 0x427e <.L23>

000041ac <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    41ac:	18 c0 b3    	mov.b     #0x1, w8
    41ae:	d2 7b 23    	mov.w     #0x37bd, w2
    41b0:	63 e8 23    	mov.w     #0x3e86, w3
    41b2:	1e 00 90    	mov.w     [w14+2], w0
    41b4:	ae 00 90    	mov.w     [w14+4], w1
    41b6:	fe e8 07    	rcall     0x13b4 <___gesf2>
    41b8:	00 00 e0    	cp0.w     w0
    41ba:	01 00 3c    	bra       GT, 0x41be <.L17>
    41bc:	00 44 eb    	clr.b     w8

000041be <.L17>:
    41be:	08 04 e0    	cp0.b     w8
    41c0:	12 00 32    	bra       Z, 0x41e6 <.L18>

000041c2 <.LSM50>:
        timer_stop(self);
    41c2:	1e 00 78    	mov.w     [w14], w0
    41c4:	c4 00 07    	rcall     0x434e <_timer_stop>

000041c6 <.LSM51>:
        poke(self->TxCON, 0x0030);
    41c6:	1e 00 78    	mov.w     [w14], w0
    41c8:	10 00 78    	mov.w     [w0], w0
    41ca:	01 03 20    	mov.w     #0x30, w1
    41cc:	01 08 78    	mov.w     w1, [w0]

000041ce <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    41ce:	1e 00 78    	mov.w     [w14], w0
    41d0:	10 04 90    	mov.w     [w0+2], w8
    41d2:	02 40 22    	mov.w     #0x2400, w2
    41d4:	43 77 24    	mov.w     #0x4774, w3
    41d6:	1e 00 90    	mov.w     [w14+2], w0
    41d8:	ae 00 90    	mov.w     [w14+4], w1
    41da:	5e e9 07    	rcall     0x1498 <___mulsf3>
    41dc:	ed e8 07    	rcall     0x13b8 <___fixunssfsi>
    41de:	00 00 78    	mov.w     w0, w0
    41e0:	00 00 e9    	dec.w     w0, w0
    41e2:	00 0c 78    	mov.w     w0, [w8]
    41e4:	4d 00 37    	bra       0x4280 <.L13>

000041e6 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    41e6:	18 c0 b3    	mov.b     #0x1, w8
    41e8:	d2 7b 23    	mov.w     #0x37bd, w2
    41ea:	63 d0 23    	mov.w     #0x3d06, w3
    41ec:	1e 00 90    	mov.w     [w14+2], w0
    41ee:	ae 00 90    	mov.w     [w14+4], w1
    41f0:	e1 e8 07    	rcall     0x13b4 <___gesf2>
    41f2:	00 00 e0    	cp0.w     w0
    41f4:	01 00 3c    	bra       GT, 0x41f8 <.L19>
    41f6:	00 44 eb    	clr.b     w8

000041f8 <.L19>:
    41f8:	08 04 e0    	cp0.b     w8
    41fa:	12 00 32    	bra       Z, 0x4220 <.L20>

000041fc <.LSM54>:
        timer_stop(self);
    41fc:	1e 00 78    	mov.w     [w14], w0
    41fe:	a7 00 07    	rcall     0x434e <_timer_stop>

00004200 <.LSM55>:
        poke(self->TxCON, 0x0020);
    4200:	1e 00 78    	mov.w     [w14], w0
    4202:	10 00 78    	mov.w     [w0], w0
    4204:	01 02 20    	mov.w     #0x20, w1
    4206:	01 08 78    	mov.w     w1, [w0]

00004208 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    4208:	1e 00 78    	mov.w     [w14], w0
    420a:	10 04 90    	mov.w     [w0+2], w8
    420c:	02 40 22    	mov.w     #0x2400, w2
    420e:	43 87 24    	mov.w     #0x4874, w3
    4210:	1e 00 90    	mov.w     [w14+2], w0
    4212:	ae 00 90    	mov.w     [w14+4], w1
    4214:	41 e9 07    	rcall     0x1498 <___mulsf3>
    4216:	d0 e8 07    	rcall     0x13b8 <___fixunssfsi>
    4218:	00 00 78    	mov.w     w0, w0
    421a:	00 00 e9    	dec.w     w0, w0
    421c:	00 0c 78    	mov.w     w0, [w8]
    421e:	30 00 37    	bra       0x4280 <.L13>

00004220 <.L20>:
    } else if (period>(65536.*TCY)) {
    4220:	18 c0 b3    	mov.b     #0x1, w8
    4222:	d2 7b 23    	mov.w     #0x37bd, w2
    4224:	63 b8 23    	mov.w     #0x3b86, w3
    4226:	1e 00 90    	mov.w     [w14+2], w0
    4228:	ae 00 90    	mov.w     [w14+4], w1
    422a:	c4 e8 07    	rcall     0x13b4 <___gesf2>
    422c:	00 00 e0    	cp0.w     w0
    422e:	01 00 3c    	bra       GT, 0x4232 <.L21>
    4230:	00 44 eb    	clr.b     w8

00004232 <.L21>:
    4232:	08 04 e0    	cp0.b     w8
    4234:	12 00 32    	bra       Z, 0x425a <.L22>

00004236 <.LSM58>:
        timer_stop(self);
    4236:	1e 00 78    	mov.w     [w14], w0
    4238:	8a 00 07    	rcall     0x434e <_timer_stop>

0000423a <.LSM59>:
        poke(self->TxCON, 0x0010);
    423a:	1e 00 78    	mov.w     [w14], w0
    423c:	10 00 78    	mov.w     [w0], w0
    423e:	01 01 20    	mov.w     #0x10, w1
    4240:	01 08 78    	mov.w     w1, [w0]

00004242 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    4242:	1e 00 78    	mov.w     [w14], w0
    4244:	10 04 90    	mov.w     [w0+2], w8
    4246:	02 40 22    	mov.w     #0x2400, w2
    4248:	43 9f 24    	mov.w     #0x49f4, w3
    424a:	1e 00 90    	mov.w     [w14+2], w0
    424c:	ae 00 90    	mov.w     [w14+4], w1
    424e:	24 e9 07    	rcall     0x1498 <___mulsf3>
    4250:	b3 e8 07    	rcall     0x13b8 <___fixunssfsi>
    4252:	00 00 78    	mov.w     w0, w0
    4254:	00 00 e9    	dec.w     w0, w0
    4256:	00 0c 78    	mov.w     w0, [w8]
    4258:	13 00 37    	bra       0x4280 <.L13>

0000425a <.L22>:
    } else {
        timer_stop(self);
    425a:	1e 00 78    	mov.w     [w14], w0
    425c:	78 00 07    	rcall     0x434e <_timer_stop>

0000425e <.LSM62>:
        poke(self->TxCON, 0x0000);
    425e:	1e 00 78    	mov.w     [w14], w0
    4260:	10 00 78    	mov.w     [w0], w0
    4262:	80 00 eb    	clr.w     w1
    4264:	01 08 78    	mov.w     w1, [w0]

00004266 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    4266:	1e 00 78    	mov.w     [w14], w0
    4268:	10 04 90    	mov.w     [w0+2], w8
    426a:	02 40 22    	mov.w     #0x2400, w2
    426c:	43 b7 24    	mov.w     #0x4b74, w3
    426e:	1e 00 90    	mov.w     [w14+2], w0
    4270:	ae 00 90    	mov.w     [w14+4], w1
    4272:	12 e9 07    	rcall     0x1498 <___mulsf3>
    4274:	a1 e8 07    	rcall     0x13b8 <___fixunssfsi>
    4276:	00 00 78    	mov.w     w0, w0
    4278:	00 00 e9    	dec.w     w0, w0
    427a:	00 0c 78    	mov.w     w0, [w8]
    427c:	01 00 37    	bra       0x4280 <.L13>

0000427e <.L23>:
    427e:	00 00 00    	nop       

00004280 <.L13>:
    }
}
    4280:	4f 04 78    	mov.w     [--w15], w8
    4282:	00 80 fa    	ulnk      
    4284:	00 00 06    	return    

00004286 <_timer_period>:

float timer_period(_TIMER *self) {
    4286:	04 00 fa    	lnk       #0x4
    4288:	88 9f be    	mov.d     w8, [w15++]
    428a:	10 07 98    	mov.w     w0, [w14+2]

0000428c <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    428c:	1e 00 90    	mov.w     [w14+2], w0
    428e:	10 00 78    	mov.w     [w0], w0
    4290:	90 00 78    	mov.w     [w0], w1
    4292:	00 03 20    	mov.w     #0x30, w0
    4294:	00 80 60    	and.w     w1, w0, w0
    4296:	44 00 de    	lsr.w     w0, #0x4, w0
    4298:	00 0f 78    	mov.w     w0, [w14]

0000429a <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    429a:	1e 00 78    	mov.w     [w14], w0
    429c:	c2 00 dd    	sl.w      w0, #0x2, w1
    429e:	00 68 21    	mov.w     #0x1680, w0
    42a0:	00 80 40    	add.w     w1, w0, w0
    42a2:	10 04 be    	mov.d     [w0], w8
    42a4:	1e 00 90    	mov.w     [w14+2], w0
    42a6:	10 00 90    	mov.w     [w0+2], w0
    42a8:	10 00 78    	mov.w     [w0], w0
    42aa:	80 00 eb    	clr.w     w1
    42ac:	a0 e8 07    	rcall     0x13ee <___floatunsisf>
    42ae:	02 00 20    	mov.w     #0x0, w2
    42b0:	03 f8 23    	mov.w     #0x3f80, w3
    42b2:	df e7 07    	rcall     0x1272 <___addsf3>
    42b4:	00 01 be    	mov.d     w0, w2
    42b6:	08 00 be    	mov.d     w8, w0
    42b8:	ef e8 07    	rcall     0x1498 <___mulsf3>

000042ba <.LSM69>:
}
    42ba:	4f 04 be    	mov.d     [--w15], w8
    42bc:	00 80 fa    	ulnk      
    42be:	00 00 06    	return    

000042c0 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    42c0:	06 00 fa    	lnk       #0x6
    42c2:	00 0f 78    	mov.w     w0, [w14]
    42c4:	12 07 98    	mov.w     w2, [w14+2]
    42c6:	23 07 98    	mov.w     w3, [w14+4]

000042c8 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    42c8:	1e 01 90    	mov.w     [w14+2], w2
    42ca:	ae 01 90    	mov.w     [w14+4], w3
    42cc:	00 00 20    	mov.w     #0x0, w0
    42ce:	01 f8 23    	mov.w     #0x3f80, w1
    42d0:	2d e8 07    	rcall     0x132c <___divsf3>
    42d2:	00 01 be    	mov.d     w0, w2
    42d4:	1e 00 78    	mov.w     [w14], w0
    42d6:	5a ff 07    	rcall     0x418c <_timer_setPeriod>

000042d8 <.LSM72>:
}
    42d8:	00 80 fa    	ulnk      
    42da:	00 00 06    	return    

000042dc <_timer_freq>:

float timer_freq(_TIMER *self) {
    42dc:	02 00 fa    	lnk       #0x2
    42de:	00 0f 78    	mov.w     w0, [w14]

000042e0 <.LSM74>:
    return 1./timer_period(self);
    42e0:	1e 00 78    	mov.w     [w14], w0
    42e2:	d1 ff 07    	rcall     0x4286 <_timer_period>
    42e4:	00 01 be    	mov.d     w0, w2
    42e6:	00 00 20    	mov.w     #0x0, w0
    42e8:	01 f8 23    	mov.w     #0x3f80, w1
    42ea:	20 e8 07    	rcall     0x132c <___divsf3>

000042ec <.LSM75>:
}
    42ec:	00 80 fa    	ulnk      
    42ee:	00 00 06    	return    

000042f0 <_timer_time>:

float timer_time(_TIMER *self) {
    42f0:	04 00 fa    	lnk       #0x4
    42f2:	88 9f be    	mov.d     w8, [w15++]
    42f4:	10 07 98    	mov.w     w0, [w14+2]

000042f6 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    42f6:	1e 00 90    	mov.w     [w14+2], w0
    42f8:	10 00 78    	mov.w     [w0], w0
    42fa:	90 00 78    	mov.w     [w0], w1
    42fc:	00 03 20    	mov.w     #0x30, w0
    42fe:	00 80 60    	and.w     w1, w0, w0
    4300:	44 00 de    	lsr.w     w0, #0x4, w0
    4302:	00 0f 78    	mov.w     w0, [w14]

00004304 <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    4304:	1e 00 78    	mov.w     [w14], w0
    4306:	c2 00 dd    	sl.w      w0, #0x2, w1
    4308:	00 68 21    	mov.w     #0x1680, w0
    430a:	00 80 40    	add.w     w1, w0, w0
    430c:	10 04 be    	mov.d     [w0], w8
    430e:	1e 00 90    	mov.w     [w14+2], w0
    4310:	10 00 90    	mov.w     [w0+2], w0
    4312:	10 00 78    	mov.w     [w0], w0
    4314:	80 00 eb    	clr.w     w1
    4316:	6b e8 07    	rcall     0x13ee <___floatunsisf>
    4318:	02 00 20    	mov.w     #0x0, w2
    431a:	03 f8 23    	mov.w     #0x3f80, w3
    431c:	aa e7 07    	rcall     0x1272 <___addsf3>
    431e:	00 01 be    	mov.d     w0, w2
    4320:	08 00 be    	mov.d     w8, w0
    4322:	ba e8 07    	rcall     0x1498 <___mulsf3>

00004324 <.LSM79>:
}
    4324:	4f 04 be    	mov.d     [--w15], w8
    4326:	00 80 fa    	ulnk      
    4328:	00 00 06    	return    

0000432a <_timer_start>:

void timer_start(_TIMER *self) {
    432a:	02 00 fa    	lnk       #0x2
    432c:	00 0f 78    	mov.w     w0, [w14]

0000432e <.LSM81>:
    timer_lower(self);
    432e:	1e 00 78    	mov.w     [w14], w0
    4330:	2b 00 07    	rcall     0x4388 <_timer_lower>

00004332 <.LSM82>:
    poke(self->TMRx, 0);
    4332:	1e 00 78    	mov.w     [w14], w0
    4334:	20 00 90    	mov.w     [w0+4], w0
    4336:	80 00 eb    	clr.w     w1
    4338:	01 08 78    	mov.w     w1, [w0]

0000433a <.LSM83>:
    bitset(self->TxCON, 15);
    433a:	1e 00 78    	mov.w     [w14], w0
    433c:	10 00 78    	mov.w     [w0], w0
    433e:	9e 00 78    	mov.w     [w14], w1
    4340:	91 00 78    	mov.w     [w1], w1
    4342:	11 01 78    	mov.w     [w1], w2
    4344:	01 00 28    	mov.w     #0x8000, w1
    4346:	82 80 70    	ior.w     w1, w2, w1
    4348:	01 08 78    	mov.w     w1, [w0]

0000434a <.LSM84>:
}
    434a:	00 80 fa    	ulnk      
    434c:	00 00 06    	return    

0000434e <_timer_stop>:

void timer_stop(_TIMER *self) {
    434e:	02 00 fa    	lnk       #0x2
    4350:	00 0f 78    	mov.w     w0, [w14]

00004352 <.LSM86>:
    bitclear(self->TxCON, 15);
    4352:	1e 00 78    	mov.w     [w14], w0
    4354:	10 00 78    	mov.w     [w0], w0
    4356:	9e 00 78    	mov.w     [w14], w1
    4358:	91 00 78    	mov.w     [w1], w1
    435a:	11 01 78    	mov.w     [w1], w2
    435c:	f1 ff 27    	mov.w     #0x7fff, w1
    435e:	81 00 61    	and.w     w2, w1, w1
    4360:	01 08 78    	mov.w     w1, [w0]

00004362 <.LSM87>:
}
    4362:	00 80 fa    	ulnk      
    4364:	00 00 06    	return    

00004366 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    4366:	02 00 fa    	lnk       #0x2
    4368:	00 0f 78    	mov.w     w0, [w14]

0000436a <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    436a:	1e 00 78    	mov.w     [w14], w0
    436c:	30 00 90    	mov.w     [w0+6], w0
    436e:	90 00 78    	mov.w     [w0], w1
    4370:	1e 00 78    	mov.w     [w14], w0
    4372:	20 48 90    	mov.b     [w0+10], w0
    4374:	00 80 fb    	ze        w0, w0
    4376:	12 00 20    	mov.w     #0x1, w2
    4378:	00 10 dd    	sl.w      w2, w0, w0
    437a:	00 80 60    	and.w     w1, w0, w0
    437c:	00 f0 a7    	btsc.w    w0, #0xf
    437e:	00 00 ea    	neg.w     w0, w0
    4380:	00 00 ea    	neg.w     w0, w0
    4382:	4f 00 de    	lsr.w     w0, #0xf, w0

00004384 <.LSM90>:
}
    4384:	00 80 fa    	ulnk      
    4386:	00 00 06    	return    

00004388 <_timer_lower>:

void timer_lower(_TIMER *self) {
    4388:	02 00 fa    	lnk       #0x2
    438a:	00 0f 78    	mov.w     w0, [w14]

0000438c <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    438c:	1e 00 78    	mov.w     [w14], w0
    438e:	30 00 90    	mov.w     [w0+6], w0
    4390:	9e 00 78    	mov.w     [w14], w1
    4392:	b1 00 90    	mov.w     [w1+6], w1
    4394:	11 01 78    	mov.w     [w1], w2
    4396:	9e 00 78    	mov.w     [w14], w1
    4398:	a1 48 90    	mov.b     [w1+10], w1
    439a:	81 80 fb    	ze        w1, w1
    439c:	13 00 20    	mov.w     #0x1, w3
    439e:	81 18 dd    	sl.w      w3, w1, w1
    43a0:	81 80 ea    	com.w     w1, w1
    43a2:	81 00 61    	and.w     w2, w1, w1
    43a4:	01 08 78    	mov.w     w1, [w0]

000043a6 <.LSM93>:
}
    43a6:	00 80 fa    	ulnk      
    43a8:	00 00 06    	return    

000043aa <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    43aa:	02 00 fa    	lnk       #0x2
    43ac:	00 0f 78    	mov.w     w0, [w14]

000043ae <.LSM95>:
    return peek(self->TMRx);
    43ae:	1e 00 78    	mov.w     [w14], w0
    43b0:	20 00 90    	mov.w     [w0+4], w0
    43b2:	10 00 78    	mov.w     [w0], w0

000043b4 <.LSM96>:
}
    43b4:	00 80 fa    	ulnk      
    43b6:	00 00 06    	return    

000043b8 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    43b8:	02 00 fa    	lnk       #0x2
    43ba:	00 0f 78    	mov.w     w0, [w14]

000043bc <.LSM98>:
    bitset(self->IECy, self->flagbit);
    43bc:	1e 00 78    	mov.w     [w14], w0
    43be:	40 00 90    	mov.w     [w0+8], w0
    43c0:	9e 00 78    	mov.w     [w14], w1
    43c2:	c1 00 90    	mov.w     [w1+8], w1
    43c4:	11 01 78    	mov.w     [w1], w2
    43c6:	9e 00 78    	mov.w     [w14], w1
    43c8:	a1 48 90    	mov.b     [w1+10], w1
    43ca:	81 80 fb    	ze        w1, w1
    43cc:	13 00 20    	mov.w     #0x1, w3
    43ce:	81 18 dd    	sl.w      w3, w1, w1
    43d0:	82 80 70    	ior.w     w1, w2, w1
    43d2:	01 08 78    	mov.w     w1, [w0]

000043d4 <.LSM99>:
}
    43d4:	00 80 fa    	ulnk      
    43d6:	00 00 06    	return    

000043d8 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    43d8:	02 00 fa    	lnk       #0x2
    43da:	00 0f 78    	mov.w     w0, [w14]

000043dc <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    43dc:	1e 00 78    	mov.w     [w14], w0
    43de:	40 00 90    	mov.w     [w0+8], w0
    43e0:	9e 00 78    	mov.w     [w14], w1
    43e2:	c1 00 90    	mov.w     [w1+8], w1
    43e4:	11 01 78    	mov.w     [w1], w2
    43e6:	9e 00 78    	mov.w     [w14], w1
    43e8:	a1 48 90    	mov.b     [w1+10], w1
    43ea:	81 80 fb    	ze        w1, w1
    43ec:	13 00 20    	mov.w     #0x1, w3
    43ee:	81 18 dd    	sl.w      w3, w1, w1
    43f0:	81 80 ea    	com.w     w1, w1
    43f2:	81 00 61    	and.w     w2, w1, w1
    43f4:	01 08 78    	mov.w     w1, [w0]

000043f6 <.LSM102>:
}
    43f6:	00 80 fa    	ulnk      
    43f8:	00 00 06    	return    

000043fa <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    43fa:	08 00 fa    	lnk       #0x8
    43fc:	00 0f 78    	mov.w     w0, [w14]
    43fe:	12 07 98    	mov.w     w2, [w14+2]
    4400:	23 07 98    	mov.w     w3, [w14+4]
    4402:	31 07 98    	mov.w     w1, [w14+6]

00004404 <.LSM104>:
    timer_disableInterrupt(self);
    4404:	1e 00 78    	mov.w     [w14], w0
    4406:	e8 ff 07    	rcall     0x43d8 <_timer_disableInterrupt>

00004408 <.LSM105>:
    timer_setPeriod(self, interval);
    4408:	1e 01 90    	mov.w     [w14+2], w2
    440a:	ae 01 90    	mov.w     [w14+4], w3
    440c:	1e 00 78    	mov.w     [w14], w0
    440e:	be fe 07    	rcall     0x418c <_timer_setPeriod>

00004410 <.LSM106>:
    self->aftercount = 0;
    4410:	1e 00 78    	mov.w     [w14], w0
    4412:	80 00 eb    	clr.w     w1
    4414:	01 08 98    	mov.w     w1, [w0+16]

00004416 <.LSM107>:
    self->every = callback;
    4416:	1e 00 78    	mov.w     [w14], w0
    4418:	be 00 90    	mov.w     [w14+6], w1
    441a:	11 08 98    	mov.w     w1, [w0+18]

0000441c <.LSM108>:
    self->after = NULL;
    441c:	1e 00 78    	mov.w     [w14], w0
    441e:	80 00 eb    	clr.w     w1
    4420:	21 08 98    	mov.w     w1, [w0+20]

00004422 <.LSM109>:
    timer_enableInterrupt(self);
    4422:	1e 00 78    	mov.w     [w14], w0
    4424:	c9 ff 07    	rcall     0x43b8 <_timer_enableInterrupt>

00004426 <.LSM110>:
    timer_start(self);
    4426:	1e 00 78    	mov.w     [w14], w0
    4428:	80 ff 07    	rcall     0x432a <_timer_start>

0000442a <.LSM111>:
}
    442a:	00 80 fa    	ulnk      
    442c:	00 00 06    	return    

0000442e <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    442e:	0a 00 fa    	lnk       #0xa
    4430:	00 0f 78    	mov.w     w0, [w14]
    4432:	12 07 98    	mov.w     w2, [w14+2]
    4434:	23 07 98    	mov.w     w3, [w14+4]
    4436:	31 07 98    	mov.w     w1, [w14+6]
    4438:	44 07 98    	mov.w     w4, [w14+8]

0000443a <.LSM113>:
    timer_disableInterrupt(self);
    443a:	1e 00 78    	mov.w     [w14], w0
    443c:	cd ff 07    	rcall     0x43d8 <_timer_disableInterrupt>

0000443e <.LSM114>:
    timer_setPeriod(self, delay);
    443e:	1e 01 90    	mov.w     [w14+2], w2
    4440:	ae 01 90    	mov.w     [w14+4], w3
    4442:	1e 00 78    	mov.w     [w14], w0
    4444:	a3 fe 07    	rcall     0x418c <_timer_setPeriod>

00004446 <.LSM115>:
    self->aftercount = num_times;
    4446:	1e 00 78    	mov.w     [w14], w0
    4448:	be 00 90    	mov.w     [w14+6], w1
    444a:	01 08 98    	mov.w     w1, [w0+16]

0000444c <.LSM116>:
    self->every = NULL;
    444c:	1e 00 78    	mov.w     [w14], w0
    444e:	80 00 eb    	clr.w     w1
    4450:	11 08 98    	mov.w     w1, [w0+18]

00004452 <.LSM117>:
    self->after = callback;
    4452:	1e 00 78    	mov.w     [w14], w0
    4454:	ce 00 90    	mov.w     [w14+8], w1
    4456:	21 08 98    	mov.w     w1, [w0+20]

00004458 <.LSM118>:
    timer_enableInterrupt(self);
    4458:	1e 00 78    	mov.w     [w14], w0
    445a:	ae ff 07    	rcall     0x43b8 <_timer_enableInterrupt>

0000445c <.LSM119>:
    timer_start(self);
    445c:	1e 00 78    	mov.w     [w14], w0
    445e:	65 ff 07    	rcall     0x432a <_timer_start>

00004460 <.LSM120>:
}
    4460:	00 80 fa    	ulnk      
    4462:	00 00 06    	return    

00004464 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    4464:	02 00 fa    	lnk       #0x2
    4466:	00 0f 78    	mov.w     w0, [w14]

00004468 <.LSM122>:
    timer_disableInterrupt(self);
    4468:	1e 00 78    	mov.w     [w14], w0
    446a:	b6 ff 07    	rcall     0x43d8 <_timer_disableInterrupt>

0000446c <.LSM123>:
    timer_lower(self);
    446c:	1e 00 78    	mov.w     [w14], w0
    446e:	8c ff 07    	rcall     0x4388 <_timer_lower>

00004470 <.LSM124>:
    timer_stop(self);
    4470:	1e 00 78    	mov.w     [w14], w0
    4472:	6d ff 07    	rcall     0x434e <_timer_stop>

00004474 <.LSM125>:
    self->aftercount = 0;
    4474:	1e 00 78    	mov.w     [w14], w0
    4476:	80 00 eb    	clr.w     w1
    4478:	01 08 98    	mov.w     w1, [w0+16]

0000447a <.LSM126>:
    self->every = NULL;
    447a:	1e 00 78    	mov.w     [w14], w0
    447c:	80 00 eb    	clr.w     w1
    447e:	11 08 98    	mov.w     w1, [w0+18]

00004480 <.LSM127>:
    self->after = NULL;
    4480:	1e 00 78    	mov.w     [w14], w0
    4482:	80 00 eb    	clr.w     w1
    4484:	21 08 98    	mov.w     w1, [w0+20]

00004486 <.LSM128>:
}
    4486:	00 80 fa    	ulnk      
    4488:	00 00 06    	return    

0000448a <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    448a:	04 00 fa    	lnk       #0x4
    448c:	00 0f 78    	mov.w     w0, [w14]
    448e:	11 07 98    	mov.w     w1, [w14+2]

00004490 <.LSM1>:
    if (val)
    4490:	1e 00 90    	mov.w     [w14+2], w0
    4492:	00 00 e0    	cp0.w     w0
    4494:	0d 00 32    	bra       Z, 0x44b0 <.L2>

00004496 <.LSM2>:
        bitset(self->port, self->bit);
    4496:	1e 00 78    	mov.w     [w14], w0
    4498:	10 00 78    	mov.w     [w0], w0
    449a:	9e 00 78    	mov.w     [w14], w1
    449c:	91 00 78    	mov.w     [w1], w1
    449e:	11 01 78    	mov.w     [w1], w2
    44a0:	9e 00 78    	mov.w     [w14], w1
    44a2:	e1 40 90    	mov.b     [w1+6], w1
    44a4:	81 80 fb    	ze        w1, w1
    44a6:	13 00 20    	mov.w     #0x1, w3
    44a8:	81 18 dd    	sl.w      w3, w1, w1
    44aa:	82 80 70    	ior.w     w1, w2, w1
    44ac:	01 08 78    	mov.w     w1, [w0]
    44ae:	0d 00 37    	bra       0x44ca <.L1>

000044b0 <.L2>:
    else
        bitclear(self->port, self->bit);
    44b0:	1e 00 78    	mov.w     [w14], w0
    44b2:	10 00 78    	mov.w     [w0], w0
    44b4:	9e 00 78    	mov.w     [w14], w1
    44b6:	91 00 78    	mov.w     [w1], w1
    44b8:	11 01 78    	mov.w     [w1], w2
    44ba:	9e 00 78    	mov.w     [w14], w1
    44bc:	e1 40 90    	mov.b     [w1+6], w1
    44be:	81 80 fb    	ze        w1, w1
    44c0:	13 00 20    	mov.w     #0x1, w3
    44c2:	81 18 dd    	sl.w      w3, w1, w1
    44c4:	81 80 ea    	com.w     w1, w1
    44c6:	81 00 61    	and.w     w2, w1, w1
    44c8:	01 08 78    	mov.w     w1, [w0]

000044ca <.L1>:
}
    44ca:	00 80 fa    	ulnk      
    44cc:	00 00 06    	return    

000044ce <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    44ce:	02 00 fa    	lnk       #0x2
    44d0:	00 0f 78    	mov.w     w0, [w14]

000044d2 <.LSM6>:
    return bitread(self->port, self->bit);
    44d2:	1e 00 78    	mov.w     [w14], w0
    44d4:	10 00 78    	mov.w     [w0], w0
    44d6:	90 00 78    	mov.w     [w0], w1
    44d8:	1e 00 78    	mov.w     [w14], w0
    44da:	60 40 90    	mov.b     [w0+6], w0
    44dc:	00 80 fb    	ze        w0, w0
    44de:	12 00 20    	mov.w     #0x1, w2
    44e0:	00 10 dd    	sl.w      w2, w0, w0
    44e2:	00 80 60    	and.w     w1, w0, w0
    44e4:	00 f0 a7    	btsc.w    w0, #0xf
    44e6:	00 00 ea    	neg.w     w0, w0
    44e8:	00 00 ea    	neg.w     w0, w0
    44ea:	4f 00 de    	lsr.w     w0, #0xf, w0

000044ec <.LSM7>:
}
    44ec:	00 80 fa    	ulnk      
    44ee:	00 00 06    	return    

000044f0 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    44f0:	02 00 fa    	lnk       #0x2
    44f2:	00 0f 78    	mov.w     w0, [w14]

000044f4 <.LSM9>:
    AD1CHS = self->annum;
    44f4:	1e 00 78    	mov.w     [w14], w0
    44f6:	40 00 90    	mov.w     [w0+8], w0
    44f8:	40 19 88    	mov.w     w0, 0x328

000044fa <.LSM10>:
    AD1CON1bits.SAMP = 1;
    44fa:	20 23 a8    	bset.b    0x320, #0x1

000044fc <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    44fc:	00 00 00    	nop       

000044fe <.L6>:
    44fe:	00 19 80    	mov.w     0x320, w0
    4500:	61 00 60    	and.w     w0, #0x1, w0
    4502:	00 00 e0    	cp0.w     w0
    4504:	fc ff 32    	bra       Z, 0x44fe <.L6>

00004506 <.LSM12>:
    return ADC1BUF0;
    4506:	00 18 80    	mov.w     0x300, w0

00004508 <.LSM13>:
}
    4508:	00 80 fa    	ulnk      
    450a:	00 00 06    	return    

0000450c <_init_pin>:

void init_pin(void) {
    450c:	02 00 fa    	lnk       #0x2

0000450e <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    450e:	40 6d 20    	mov.w     #0x6d4, w0
    4510:	80 1f 78    	mov.w     w0, [w15++]
    4512:	47 01 20    	mov.w     #0x14, w7
    4514:	00 43 eb    	clr.b     w6
    4516:	80 82 eb    	setm.w    w5
    4518:	54 c0 b3    	mov.b     #0x5, w4
    451a:	80 01 eb    	clr.w     w3
    451c:	82 2d 20    	mov.w     #0x2d8, w2
    451e:	a1 2d 20    	mov.w     #0x2da, w1
    4520:	40 0d 21    	mov.w     #0x10d4, w0
    4522:	08 01 07    	rcall     0x4734 <_pin_init>
    4524:	8f 87 e9    	dec2.w    w15, w15

00004526 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4526:	80 6d 20    	mov.w     #0x6d8, w0
    4528:	80 1f 78    	mov.w     w0, [w15++]
    452a:	97 01 20    	mov.w     #0x19, w7
    452c:	86 c0 b3    	mov.b     #0x8, w6
    452e:	80 82 eb    	setm.w    w5
    4530:	44 c0 b3    	mov.b     #0x4, w4
    4532:	80 01 eb    	clr.w     w3
    4534:	82 2d 20    	mov.w     #0x2d8, w2
    4536:	a1 2d 20    	mov.w     #0x2da, w1
    4538:	a0 0e 21    	mov.w     #0x10ea, w0
    453a:	fc 00 07    	rcall     0x4734 <_pin_init>
    453c:	8f 87 e9    	dec2.w    w15, w15

0000453e <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    453e:	a0 6c 20    	mov.w     #0x6ca, w0
    4540:	80 1f 78    	mov.w     w0, [w15++]
    4542:	a7 00 20    	mov.w     #0xa, w7
    4544:	00 43 eb    	clr.b     w6
    4546:	80 82 eb    	setm.w    w5
    4548:	44 c0 b3    	mov.b     #0x4, w4
    454a:	80 01 eb    	clr.w     w3
    454c:	82 2e 20    	mov.w     #0x2e8, w2
    454e:	a1 2e 20    	mov.w     #0x2ea, w1
    4550:	00 10 21    	mov.w     #0x1100, w0
    4552:	f0 00 07    	rcall     0x4734 <_pin_init>
    4554:	8f 87 e9    	dec2.w    w15, w15

00004556 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4556:	00 6d 20    	mov.w     #0x6d0, w0
    4558:	80 1f 78    	mov.w     w0, [w15++]
    455a:	17 01 20    	mov.w     #0x11, w7
    455c:	86 c0 b3    	mov.b     #0x8, w6
    455e:	80 82 eb    	setm.w    w5
    4560:	54 c0 b3    	mov.b     #0x5, w4
    4562:	80 01 eb    	clr.w     w3
    4564:	82 2e 20    	mov.w     #0x2e8, w2
    4566:	a1 2e 20    	mov.w     #0x2ea, w1
    4568:	60 11 21    	mov.w     #0x1116, w0
    456a:	e4 00 07    	rcall     0x4734 <_pin_init>
    456c:	8f 87 e9    	dec2.w    w15, w15

0000456e <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    456e:	c0 6d 20    	mov.w     #0x6dc, w0
    4570:	80 1f 78    	mov.w     w0, [w15++]
    4572:	d7 01 20    	mov.w     #0x1d, w7
    4574:	86 c0 b3    	mov.b     #0x8, w6
    4576:	f5 00 20    	mov.w     #0xf, w5
    4578:	f4 c0 b3    	mov.b     #0xf, w4
    457a:	23 4e 20    	mov.w     #0x4e2, w3
    457c:	82 2c 20    	mov.w     #0x2c8, w2
    457e:	a1 2c 20    	mov.w     #0x2ca, w1
    4580:	c0 12 21    	mov.w     #0x112c, w0
    4582:	d8 00 07    	rcall     0x4734 <_pin_init>
    4584:	8f 87 e9    	dec2.w    w15, w15

00004586 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4586:	00 6d 20    	mov.w     #0x6d0, w0
    4588:	80 1f 78    	mov.w     w0, [w15++]
    458a:	07 01 20    	mov.w     #0x10, w7
    458c:	00 43 eb    	clr.b     w6
    458e:	80 82 eb    	setm.w    w5
    4590:	34 c0 b3    	mov.b     #0x3, w4
    4592:	80 01 eb    	clr.w     w3
    4594:	82 2e 20    	mov.w     #0x2e8, w2
    4596:	a1 2e 20    	mov.w     #0x2ea, w1
    4598:	20 14 21    	mov.w     #0x1142, w0
    459a:	cc 00 07    	rcall     0x4734 <_pin_init>
    459c:	8f 87 e9    	dec2.w    w15, w15

0000459e <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    459e:	20 6c 20    	mov.w     #0x6c2, w0
    45a0:	80 1f 78    	mov.w     w0, [w15++]
    45a2:	27 00 20    	mov.w     #0x2, w7
    45a4:	00 43 eb    	clr.b     w6
    45a6:	80 82 eb    	setm.w    w5
    45a8:	84 c0 b3    	mov.b     #0x8, w4
    45aa:	80 01 eb    	clr.w     w3
    45ac:	82 2d 20    	mov.w     #0x2d8, w2
    45ae:	a1 2d 20    	mov.w     #0x2da, w1
    45b0:	80 15 21    	mov.w     #0x1158, w0
    45b2:	c0 00 07    	rcall     0x4734 <_pin_init>
    45b4:	8f 87 e9    	dec2.w    w15, w15

000045b6 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    45b6:	c0 6c 20    	mov.w     #0x6cc, w0
    45b8:	80 1f 78    	mov.w     w0, [w15++]
    45ba:	c7 00 20    	mov.w     #0xc, w7
    45bc:	00 43 eb    	clr.b     w6
    45be:	80 82 eb    	setm.w    w5
    45c0:	b4 c0 b3    	mov.b     #0xb, w4
    45c2:	80 01 eb    	clr.w     w3
    45c4:	82 2d 20    	mov.w     #0x2d8, w2
    45c6:	a1 2d 20    	mov.w     #0x2da, w1
    45c8:	e0 16 21    	mov.w     #0x116e, w0
    45ca:	b4 00 07    	rcall     0x4734 <_pin_init>
    45cc:	8f 87 e9    	dec2.w    w15, w15

000045ce <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    45ce:	40 6c 20    	mov.w     #0x6c4, w0
    45d0:	80 1f 78    	mov.w     w0, [w15++]
    45d2:	47 00 20    	mov.w     #0x4, w7
    45d4:	00 43 eb    	clr.b     w6
    45d6:	80 82 eb    	setm.w    w5
    45d8:	94 c0 b3    	mov.b     #0x9, w4
    45da:	80 01 eb    	clr.w     w3
    45dc:	82 2d 20    	mov.w     #0x2d8, w2
    45de:	a1 2d 20    	mov.w     #0x2da, w1
    45e0:	40 18 21    	mov.w     #0x1184, w0
    45e2:	a8 00 07    	rcall     0x4734 <_pin_init>
    45e4:	8f 87 e9    	dec2.w    w15, w15

000045e6 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    45e6:	20 6c 20    	mov.w     #0x6c2, w0
    45e8:	80 1f 78    	mov.w     w0, [w15++]
    45ea:	37 00 20    	mov.w     #0x3, w7
    45ec:	86 c0 b3    	mov.b     #0x8, w6
    45ee:	80 82 eb    	setm.w    w5
    45f0:	a4 c0 b3    	mov.b     #0xa, w4
    45f2:	80 01 eb    	clr.w     w3
    45f4:	82 2d 20    	mov.w     #0x2d8, w2
    45f6:	a1 2d 20    	mov.w     #0x2da, w1
    45f8:	a0 19 21    	mov.w     #0x119a, w0
    45fa:	9c 00 07    	rcall     0x4734 <_pin_init>
    45fc:	8f 87 e9    	dec2.w    w15, w15

000045fe <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    45fe:	a0 6c 20    	mov.w     #0x6ca, w0
    4600:	80 1f 78    	mov.w     w0, [w15++]
    4602:	b7 00 20    	mov.w     #0xb, w7
    4604:	86 c0 b3    	mov.b     #0x8, w6
    4606:	80 82 eb    	setm.w    w5
    4608:	00 42 eb    	clr.b     w4
    460a:	80 01 eb    	clr.w     w3
    460c:	82 2d 20    	mov.w     #0x2d8, w2
    460e:	a1 2d 20    	mov.w     #0x2da, w1
    4610:	00 1b 21    	mov.w     #0x11b0, w0
    4612:	90 00 07    	rcall     0x4734 <_pin_init>
    4614:	8f 87 e9    	dec2.w    w15, w15

00004616 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4616:	80 6d 20    	mov.w     #0x6d8, w0
    4618:	80 1f 78    	mov.w     w0, [w15++]
    461a:	87 01 20    	mov.w     #0x18, w7
    461c:	00 43 eb    	clr.b     w6
    461e:	80 82 eb    	setm.w    w5
    4620:	14 c0 b3    	mov.b     #0x1, w4
    4622:	80 01 eb    	clr.w     w3
    4624:	82 2d 20    	mov.w     #0x2d8, w2
    4626:	a1 2d 20    	mov.w     #0x2da, w1
    4628:	60 1c 21    	mov.w     #0x11c6, w0
    462a:	84 00 07    	rcall     0x4734 <_pin_init>
    462c:	8f 87 e9    	dec2.w    w15, w15

0000462e <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    462e:	60 6d 20    	mov.w     #0x6d6, w0
    4630:	80 1f 78    	mov.w     w0, [w15++]
    4632:	77 01 20    	mov.w     #0x17, w7
    4634:	86 c0 b3    	mov.b     #0x8, w6
    4636:	80 82 eb    	setm.w    w5
    4638:	24 c0 b3    	mov.b     #0x2, w4
    463a:	80 01 eb    	clr.w     w3
    463c:	82 2d 20    	mov.w     #0x2d8, w2
    463e:	a1 2d 20    	mov.w     #0x2da, w1
    4640:	c0 1d 21    	mov.w     #0x11dc, w0
    4642:	78 00 07    	rcall     0x4734 <_pin_init>
    4644:	8f 87 e9    	dec2.w    w15, w15

00004646 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4646:	60 6d 20    	mov.w     #0x6d6, w0
    4648:	80 1f 78    	mov.w     w0, [w15++]
    464a:	67 01 20    	mov.w     #0x16, w7
    464c:	00 43 eb    	clr.b     w6
    464e:	80 82 eb    	setm.w    w5
    4650:	34 c0 b3    	mov.b     #0x3, w4
    4652:	80 01 eb    	clr.w     w3
    4654:	82 2d 20    	mov.w     #0x2d8, w2
    4656:	a1 2d 20    	mov.w     #0x2da, w1
    4658:	20 1f 21    	mov.w     #0x11f2, w0
    465a:	6c 00 07    	rcall     0x4734 <_pin_init>
    465c:	8f 87 e9    	dec2.w    w15, w15

0000465e <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    465e:	00 6c 20    	mov.w     #0x6c0, w0
    4660:	80 1f 78    	mov.w     w0, [w15++]
    4662:	80 03 eb    	clr.w     w7
    4664:	00 43 eb    	clr.b     w6
    4666:	80 02 eb    	clr.w     w5
    4668:	00 42 eb    	clr.b     w4
    466a:	23 4e 20    	mov.w     #0x4e2, w3
    466c:	82 2c 20    	mov.w     #0x2c8, w2
    466e:	a1 2c 20    	mov.w     #0x2ca, w1
    4670:	60 27 21    	mov.w     #0x1276, w0
    4672:	60 00 07    	rcall     0x4734 <_pin_init>
    4674:	8f 87 e9    	dec2.w    w15, w15

00004676 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4676:	00 6c 20    	mov.w     #0x6c0, w0
    4678:	80 1f 78    	mov.w     w0, [w15++]
    467a:	17 00 20    	mov.w     #0x1, w7
    467c:	86 c0 b3    	mov.b     #0x8, w6
    467e:	15 00 20    	mov.w     #0x1, w5
    4680:	14 c0 b3    	mov.b     #0x1, w4
    4682:	23 4e 20    	mov.w     #0x4e2, w3
    4684:	82 2c 20    	mov.w     #0x2c8, w2
    4686:	a1 2c 20    	mov.w     #0x2ca, w1
    4688:	00 26 21    	mov.w     #0x1260, w0
    468a:	54 00 07    	rcall     0x4734 <_pin_init>
    468c:	8f 87 e9    	dec2.w    w15, w15

0000468e <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    468e:	c0 6c 20    	mov.w     #0x6cc, w0
    4690:	80 1f 78    	mov.w     w0, [w15++]
    4692:	d7 00 20    	mov.w     #0xd, w7
    4694:	86 c0 b3    	mov.b     #0x8, w6
    4696:	25 00 20    	mov.w     #0x2, w5
    4698:	24 c0 b3    	mov.b     #0x2, w4
    469a:	23 4e 20    	mov.w     #0x4e2, w3
    469c:	82 2c 20    	mov.w     #0x2c8, w2
    469e:	a1 2c 20    	mov.w     #0x2ca, w1
    46a0:	a0 24 21    	mov.w     #0x124a, w0
    46a2:	48 00 07    	rcall     0x4734 <_pin_init>
    46a4:	8f 87 e9    	dec2.w    w15, w15

000046a6 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    46a6:	00 00 eb    	clr.w     w0
    46a8:	80 1f 78    	mov.w     w0, [w15++]
    46aa:	80 83 eb    	setm.w    w7
    46ac:	00 43 eb    	clr.b     w6
    46ae:	35 00 20    	mov.w     #0x3, w5
    46b0:	34 c0 b3    	mov.b     #0x3, w4
    46b2:	23 4e 20    	mov.w     #0x4e2, w3
    46b4:	82 2c 20    	mov.w     #0x2c8, w2
    46b6:	a1 2c 20    	mov.w     #0x2ca, w1
    46b8:	40 23 21    	mov.w     #0x1234, w0
    46ba:	3c 00 07    	rcall     0x4734 <_pin_init>
    46bc:	8f 87 e9    	dec2.w    w15, w15

000046be <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    46be:	c0 6d 20    	mov.w     #0x6dc, w0
    46c0:	80 1f 78    	mov.w     w0, [w15++]
    46c2:	c7 01 20    	mov.w     #0x1c, w7
    46c4:	00 43 eb    	clr.b     w6
    46c6:	45 00 20    	mov.w     #0x4, w5
    46c8:	44 c0 b3    	mov.b     #0x4, w4
    46ca:	23 4e 20    	mov.w     #0x4e2, w3
    46cc:	82 2c 20    	mov.w     #0x2c8, w2
    46ce:	a1 2c 20    	mov.w     #0x2ca, w1
    46d0:	e0 21 21    	mov.w     #0x121e, w0
    46d2:	30 00 07    	rcall     0x4734 <_pin_init>
    46d4:	8f 87 e9    	dec2.w    w15, w15

000046d6 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    46d6:	20 6d 20    	mov.w     #0x6d2, w0
    46d8:	80 1f 78    	mov.w     w0, [w15++]
    46da:	27 01 20    	mov.w     #0x12, w7
    46dc:	00 43 eb    	clr.b     w6
    46de:	55 00 20    	mov.w     #0x5, w5
    46e0:	54 c0 b3    	mov.b     #0x5, w4
    46e2:	23 4e 20    	mov.w     #0x4e2, w3
    46e4:	82 2c 20    	mov.w     #0x2c8, w2
    46e6:	a1 2c 20    	mov.w     #0x2ca, w1
    46e8:	80 20 21    	mov.w     #0x1208, w0
    46ea:	24 00 07    	rcall     0x4734 <_pin_init>
    46ec:	8f 87 e9    	dec2.w    w15, w15

000046ee <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    46ee:	00 00 eb    	clr.w     w0
    46f0:	00 0f 78    	mov.w     w0, [w14]
    46f2:	07 00 37    	bra       0x4702 <.L8>

000046f4 <.L9>:
        pin_digitalIn(&D[i]);
    46f4:	1e 00 78    	mov.w     [w14], w0
    46f6:	76 00 b9    	mul.su    w0, #0x16, w0
    46f8:	80 00 78    	mov.w     w0, w1
    46fa:	40 0d 21    	mov.w     #0x10d4, w0
    46fc:	00 80 40    	add.w     w1, w0, w0
    46fe:	46 00 07    	rcall     0x478c <_pin_digitalIn>

00004700 <.LSM37>:
    4700:	1e 0f e8    	inc.w     [w14], [w14]

00004702 <.L8>:
    4702:	1e 00 78    	mov.w     [w14], w0
    4704:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    4706:	f6 ff 36    	bra       LEU, 0x46f4 <.L9>

00004708 <.LSM38>:
    for (i = 0; i<6; i++)
    4708:	00 00 eb    	clr.w     w0
    470a:	00 0f 78    	mov.w     w0, [w14]
    470c:	07 00 37    	bra       0x471c <.L10>

0000470e <.L11>:
        pin_analogIn(&A[i]);
    470e:	1e 00 78    	mov.w     [w14], w0
    4710:	76 00 b9    	mul.su    w0, #0x16, w0
    4712:	80 00 78    	mov.w     w0, w1
    4714:	80 20 21    	mov.w     #0x1208, w0
    4716:	00 80 40    	add.w     w1, w0, w0
    4718:	95 00 07    	rcall     0x4844 <_pin_analogIn>

0000471a <.LSM40>:
    471a:	1e 0f e8    	inc.w     [w14], [w14]

0000471c <.L10>:
    471c:	1e 00 78    	mov.w     [w14], w0
    471e:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    4720:	f6 ff 36    	bra       LEU, 0x470e <.L11>

00004722 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    4722:	00 2e 20    	mov.w     #0x2e0, w0
    4724:	00 19 88    	mov.w     w0, 0x320

00004726 <.LSM42>:
    AD1CON2 = 0;
    4726:	22 23 ef    	clr.w     0x322

00004728 <.LSM43>:
    AD1CON3 = 0x0C40;
    4728:	00 c4 20    	mov.w     #0xc40, w0
    472a:	20 19 88    	mov.w     w0, 0x324

0000472c <.LSM44>:
    AD1CHS = 0;
    472c:	28 23 ef    	clr.w     0x328

0000472e <.LSM45>:
    AD1CON1bits.ADON = 1;
    472e:	21 e3 a8    	bset.b    0x321, #0x7

00004730 <.LSM46>:
}
    4730:	00 80 fa    	ulnk      
    4732:	00 00 06    	return    

00004734 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    4734:	10 00 fa    	lnk       #0x10
    4736:	00 0f 78    	mov.w     w0, [w14]
    4738:	11 07 98    	mov.w     w1, [w14+2]
    473a:	22 07 98    	mov.w     w2, [w14+4]
    473c:	33 07 98    	mov.w     w3, [w14+6]
    473e:	04 4f 98    	mov.b     w4, [w14+8]
    4740:	55 07 98    	mov.w     w5, [w14+10]
    4742:	46 4f 98    	mov.b     w6, [w14+12]
    4744:	77 07 98    	mov.w     w7, [w14+14]

00004746 <.LSM48>:
    self->port = port;
    4746:	1e 00 78    	mov.w     [w14], w0
    4748:	9e 00 90    	mov.w     [w14+2], w1
    474a:	01 08 78    	mov.w     w1, [w0]

0000474c <.LSM49>:
    self->tris = tris;
    474c:	1e 00 78    	mov.w     [w14], w0
    474e:	ae 00 90    	mov.w     [w14+4], w1
    4750:	11 00 98    	mov.w     w1, [w0+2]

00004752 <.LSM50>:
    self->ans = ans;
    4752:	1e 00 78    	mov.w     [w14], w0
    4754:	be 00 90    	mov.w     [w14+6], w1
    4756:	21 00 98    	mov.w     w1, [w0+4]

00004758 <.LSM51>:
    self->bit = bit;
    4758:	1e 00 78    	mov.w     [w14], w0
    475a:	8e 48 90    	mov.b     [w14+8], w1
    475c:	61 40 98    	mov.b     w1, [w0+6]

0000475e <.LSM52>:
    self->annum = annum;
    475e:	1e 00 78    	mov.w     [w14], w0
    4760:	de 00 90    	mov.w     [w14+10], w1
    4762:	41 00 98    	mov.w     w1, [w0+8]

00004764 <.LSM53>:
    self->rpshift = rpshift;
    4764:	1e 00 78    	mov.w     [w14], w0
    4766:	ce 48 90    	mov.b     [w14+12], w1
    4768:	21 48 98    	mov.b     w1, [w0+10]

0000476a <.LSM54>:
    self->rpnum = rpnum;
    476a:	fe 00 90    	mov.w     [w14+14], w1
    476c:	1e 00 78    	mov.w     [w14], w0
    476e:	61 00 98    	mov.w     w1, [w0+12]

00004770 <.LSM55>:
    self->rpor = rpor;
    4770:	1e 00 78    	mov.w     [w14], w0
    4772:	ce b8 97    	mov.w     [w14-8], w1
    4774:	71 00 98    	mov.w     w1, [w0+14]

00004776 <.LSM56>:
    self->owner = NULL;
    4776:	1e 00 78    	mov.w     [w14], w0
    4778:	80 00 eb    	clr.w     w1
    477a:	01 08 98    	mov.w     w1, [w0+16]

0000477c <.LSM57>:
    self->write = NULL;
    477c:	1e 00 78    	mov.w     [w14], w0
    477e:	80 00 eb    	clr.w     w1
    4780:	11 08 98    	mov.w     w1, [w0+18]

00004782 <.LSM58>:
    self->read = NULL;
    4782:	1e 00 78    	mov.w     [w14], w0
    4784:	80 00 eb    	clr.w     w1
    4786:	21 08 98    	mov.w     w1, [w0+20]

00004788 <.LSM59>:
}
    4788:	00 80 fa    	ulnk      
    478a:	00 00 06    	return    

0000478c <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    478c:	02 00 fa    	lnk       #0x2
    478e:	00 0f 78    	mov.w     w0, [w14]

00004790 <.LSM61>:
    if (self->ans)
    4790:	1e 00 78    	mov.w     [w14], w0
    4792:	20 00 90    	mov.w     [w0+4], w0
    4794:	00 00 e0    	cp0.w     w0
    4796:	0d 00 32    	bra       Z, 0x47b2 <.L14>

00004798 <.LSM62>:
        bitclear(self->ans, self->bit);
    4798:	1e 00 78    	mov.w     [w14], w0
    479a:	20 00 90    	mov.w     [w0+4], w0
    479c:	9e 00 78    	mov.w     [w14], w1
    479e:	a1 00 90    	mov.w     [w1+4], w1
    47a0:	11 01 78    	mov.w     [w1], w2
    47a2:	9e 00 78    	mov.w     [w14], w1
    47a4:	e1 40 90    	mov.b     [w1+6], w1
    47a6:	81 80 fb    	ze        w1, w1
    47a8:	13 00 20    	mov.w     #0x1, w3
    47aa:	81 18 dd    	sl.w      w3, w1, w1
    47ac:	81 80 ea    	com.w     w1, w1
    47ae:	81 00 61    	and.w     w2, w1, w1
    47b0:	01 08 78    	mov.w     w1, [w0]

000047b2 <.L14>:
    bitset(self->tris, self->bit);
    47b2:	1e 00 78    	mov.w     [w14], w0
    47b4:	10 00 90    	mov.w     [w0+2], w0
    47b6:	9e 00 78    	mov.w     [w14], w1
    47b8:	91 00 90    	mov.w     [w1+2], w1
    47ba:	11 01 78    	mov.w     [w1], w2
    47bc:	9e 00 78    	mov.w     [w14], w1
    47be:	e1 40 90    	mov.b     [w1+6], w1
    47c0:	81 80 fb    	ze        w1, w1
    47c2:	13 00 20    	mov.w     #0x1, w3
    47c4:	81 18 dd    	sl.w      w3, w1, w1
    47c6:	82 80 70    	ior.w     w1, w2, w1
    47c8:	01 08 78    	mov.w     w1, [w0]

000047ca <.LSM64>:
    self->write = NULL;
    47ca:	1e 00 78    	mov.w     [w14], w0
    47cc:	80 00 eb    	clr.w     w1
    47ce:	11 08 98    	mov.w     w1, [w0+18]

000047d0 <.LSM65>:
    self->read = __digitalRead;    
    47d0:	1e 00 78    	mov.w     [w14], w0
    47d2:	e1 4c 24    	mov.w     #0x44ce, w1
    47d4:	21 08 98    	mov.w     w1, [w0+20]

000047d6 <.LSM66>:
}
    47d6:	00 80 fa    	ulnk      
    47d8:	00 00 06    	return    

000047da <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    47da:	02 00 fa    	lnk       #0x2
    47dc:	00 0f 78    	mov.w     w0, [w14]

000047de <.LSM68>:
    if (self->ans)
    47de:	1e 00 78    	mov.w     [w14], w0
    47e0:	20 00 90    	mov.w     [w0+4], w0
    47e2:	00 00 e0    	cp0.w     w0
    47e4:	0d 00 32    	bra       Z, 0x4800 <.L16>

000047e6 <.LSM69>:
        bitclear(self->ans, self->bit);
    47e6:	1e 00 78    	mov.w     [w14], w0
    47e8:	20 00 90    	mov.w     [w0+4], w0
    47ea:	9e 00 78    	mov.w     [w14], w1
    47ec:	a1 00 90    	mov.w     [w1+4], w1
    47ee:	11 01 78    	mov.w     [w1], w2
    47f0:	9e 00 78    	mov.w     [w14], w1
    47f2:	e1 40 90    	mov.b     [w1+6], w1
    47f4:	81 80 fb    	ze        w1, w1
    47f6:	13 00 20    	mov.w     #0x1, w3
    47f8:	81 18 dd    	sl.w      w3, w1, w1
    47fa:	81 80 ea    	com.w     w1, w1
    47fc:	81 00 61    	and.w     w2, w1, w1
    47fe:	01 08 78    	mov.w     w1, [w0]

00004800 <.L16>:
    bitclear(self->port, self->bit);
    4800:	1e 00 78    	mov.w     [w14], w0
    4802:	10 00 78    	mov.w     [w0], w0
    4804:	9e 00 78    	mov.w     [w14], w1
    4806:	91 00 78    	mov.w     [w1], w1
    4808:	11 01 78    	mov.w     [w1], w2
    480a:	9e 00 78    	mov.w     [w14], w1
    480c:	e1 40 90    	mov.b     [w1+6], w1
    480e:	81 80 fb    	ze        w1, w1
    4810:	13 00 20    	mov.w     #0x1, w3
    4812:	81 18 dd    	sl.w      w3, w1, w1
    4814:	81 80 ea    	com.w     w1, w1
    4816:	81 00 61    	and.w     w2, w1, w1
    4818:	01 08 78    	mov.w     w1, [w0]

0000481a <.LSM71>:
    bitclear(self->tris, self->bit);
    481a:	1e 00 78    	mov.w     [w14], w0
    481c:	10 00 90    	mov.w     [w0+2], w0
    481e:	9e 00 78    	mov.w     [w14], w1
    4820:	91 00 90    	mov.w     [w1+2], w1
    4822:	11 01 78    	mov.w     [w1], w2
    4824:	9e 00 78    	mov.w     [w14], w1
    4826:	e1 40 90    	mov.b     [w1+6], w1
    4828:	81 80 fb    	ze        w1, w1
    482a:	13 00 20    	mov.w     #0x1, w3
    482c:	81 18 dd    	sl.w      w3, w1, w1
    482e:	81 80 ea    	com.w     w1, w1
    4830:	81 00 61    	and.w     w2, w1, w1
    4832:	01 08 78    	mov.w     w1, [w0]

00004834 <.LSM72>:
    self->write = __digitalWrite;
    4834:	1e 00 78    	mov.w     [w14], w0
    4836:	a1 48 24    	mov.w     #0x448a, w1
    4838:	11 08 98    	mov.w     w1, [w0+18]

0000483a <.LSM73>:
    self->read = __digitalRead;
    483a:	1e 00 78    	mov.w     [w14], w0
    483c:	e1 4c 24    	mov.w     #0x44ce, w1
    483e:	21 08 98    	mov.w     w1, [w0+20]

00004840 <.LSM74>:
}
    4840:	00 80 fa    	ulnk      
    4842:	00 00 06    	return    

00004844 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    4844:	02 00 fa    	lnk       #0x2
    4846:	00 0f 78    	mov.w     w0, [w14]

00004848 <.LSM76>:
    if (!(self->ans))
    4848:	1e 00 78    	mov.w     [w14], w0
    484a:	20 00 90    	mov.w     [w0+4], w0
    484c:	00 00 e0    	cp0.w     w0
    484e:	1f 00 32    	bra       Z, 0x488e <.L20>

00004850 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    4850:	1e 00 78    	mov.w     [w14], w0
    4852:	10 00 90    	mov.w     [w0+2], w0
    4854:	9e 00 78    	mov.w     [w14], w1
    4856:	91 00 90    	mov.w     [w1+2], w1
    4858:	11 01 78    	mov.w     [w1], w2
    485a:	9e 00 78    	mov.w     [w14], w1
    485c:	e1 40 90    	mov.b     [w1+6], w1
    485e:	81 80 fb    	ze        w1, w1
    4860:	13 00 20    	mov.w     #0x1, w3
    4862:	81 18 dd    	sl.w      w3, w1, w1
    4864:	82 80 70    	ior.w     w1, w2, w1
    4866:	01 08 78    	mov.w     w1, [w0]

00004868 <.LSM78>:
    bitset(self->ans, self->bit);
    4868:	1e 00 78    	mov.w     [w14], w0
    486a:	20 00 90    	mov.w     [w0+4], w0
    486c:	9e 00 78    	mov.w     [w14], w1
    486e:	a1 00 90    	mov.w     [w1+4], w1
    4870:	11 01 78    	mov.w     [w1], w2
    4872:	9e 00 78    	mov.w     [w14], w1
    4874:	e1 40 90    	mov.b     [w1+6], w1
    4876:	81 80 fb    	ze        w1, w1
    4878:	13 00 20    	mov.w     #0x1, w3
    487a:	81 18 dd    	sl.w      w3, w1, w1
    487c:	82 80 70    	ior.w     w1, w2, w1
    487e:	01 08 78    	mov.w     w1, [w0]

00004880 <.LSM79>:
    self->write = NULL;
    4880:	1e 00 78    	mov.w     [w14], w0
    4882:	80 00 eb    	clr.w     w1
    4884:	11 08 98    	mov.w     w1, [w0+18]

00004886 <.LSM80>:
    self->read = __analogRead;
    4886:	1e 00 78    	mov.w     [w14], w0
    4888:	01 4f 24    	mov.w     #0x44f0, w1
    488a:	21 08 98    	mov.w     w1, [w0+20]
    488c:	01 00 37    	bra       0x4890 <.L17>

0000488e <.L20>:
    488e:	00 00 00    	nop       

00004890 <.L17>:
}
    4890:	00 80 fa    	ulnk      
    4892:	00 00 06    	return    

00004894 <_pin_set>:

void pin_set(_PIN *self) {
    4894:	02 00 fa    	lnk       #0x2
    4896:	00 0f 78    	mov.w     w0, [w14]

00004898 <.LSM84>:
    if (self->write==__digitalWrite)
    4898:	1e 00 78    	mov.w     [w14], w0
    489a:	90 08 90    	mov.w     [w0+18], w1
    489c:	a0 48 24    	mov.w     #0x448a, w0
    489e:	80 8f 50    	sub.w     w1, w0, [w15]
    48a0:	0c 00 3a    	bra       NZ, 0x48ba <.L21>

000048a2 <.LSM85>:
        bitset(self->port, self->bit);
    48a2:	1e 00 78    	mov.w     [w14], w0
    48a4:	10 00 78    	mov.w     [w0], w0
    48a6:	9e 00 78    	mov.w     [w14], w1
    48a8:	91 00 78    	mov.w     [w1], w1
    48aa:	11 01 78    	mov.w     [w1], w2
    48ac:	9e 00 78    	mov.w     [w14], w1
    48ae:	e1 40 90    	mov.b     [w1+6], w1
    48b0:	81 80 fb    	ze        w1, w1
    48b2:	13 00 20    	mov.w     #0x1, w3
    48b4:	81 18 dd    	sl.w      w3, w1, w1
    48b6:	82 80 70    	ior.w     w1, w2, w1
    48b8:	01 08 78    	mov.w     w1, [w0]

000048ba <.L21>:
}
    48ba:	00 80 fa    	ulnk      
    48bc:	00 00 06    	return    

000048be <_pin_clear>:

void pin_clear(_PIN *self) {
    48be:	02 00 fa    	lnk       #0x2
    48c0:	00 0f 78    	mov.w     w0, [w14]

000048c2 <.LSM88>:
    if (self->write==__digitalWrite)
    48c2:	1e 00 78    	mov.w     [w14], w0
    48c4:	90 08 90    	mov.w     [w0+18], w1
    48c6:	a0 48 24    	mov.w     #0x448a, w0
    48c8:	80 8f 50    	sub.w     w1, w0, [w15]
    48ca:	0d 00 3a    	bra       NZ, 0x48e6 <.L23>

000048cc <.LSM89>:
        bitclear(self->port, self->bit);
    48cc:	1e 00 78    	mov.w     [w14], w0
    48ce:	10 00 78    	mov.w     [w0], w0
    48d0:	9e 00 78    	mov.w     [w14], w1
    48d2:	91 00 78    	mov.w     [w1], w1
    48d4:	11 01 78    	mov.w     [w1], w2
    48d6:	9e 00 78    	mov.w     [w14], w1
    48d8:	e1 40 90    	mov.b     [w1+6], w1
    48da:	81 80 fb    	ze        w1, w1
    48dc:	13 00 20    	mov.w     #0x1, w3
    48de:	81 18 dd    	sl.w      w3, w1, w1
    48e0:	81 80 ea    	com.w     w1, w1
    48e2:	81 00 61    	and.w     w2, w1, w1
    48e4:	01 08 78    	mov.w     w1, [w0]

000048e6 <.L23>:
}
    48e6:	00 80 fa    	ulnk      
    48e8:	00 00 06    	return    

000048ea <_pin_toggle>:

void pin_toggle(_PIN *self) {
    48ea:	02 00 fa    	lnk       #0x2
    48ec:	00 0f 78    	mov.w     w0, [w14]

000048ee <.LSM92>:
    if (self->write==__digitalWrite)
    48ee:	1e 00 78    	mov.w     [w14], w0
    48f0:	90 08 90    	mov.w     [w0+18], w1
    48f2:	a0 48 24    	mov.w     #0x448a, w0
    48f4:	80 8f 50    	sub.w     w1, w0, [w15]
    48f6:	0c 00 3a    	bra       NZ, 0x4910 <.L25>

000048f8 <.LSM93>:
        bitflip(self->port, self->bit);
    48f8:	1e 00 78    	mov.w     [w14], w0
    48fa:	10 00 78    	mov.w     [w0], w0
    48fc:	9e 00 78    	mov.w     [w14], w1
    48fe:	91 00 78    	mov.w     [w1], w1
    4900:	11 01 78    	mov.w     [w1], w2
    4902:	9e 00 78    	mov.w     [w14], w1
    4904:	e1 40 90    	mov.b     [w1+6], w1
    4906:	81 80 fb    	ze        w1, w1
    4908:	13 00 20    	mov.w     #0x1, w3
    490a:	81 18 dd    	sl.w      w3, w1, w1
    490c:	81 00 69    	xor.w     w2, w1, w1
    490e:	01 08 78    	mov.w     w1, [w0]

00004910 <.L25>:
}
    4910:	00 80 fa    	ulnk      
    4912:	00 00 06    	return    

00004914 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    4914:	04 00 fa    	lnk       #0x4
    4916:	00 0f 78    	mov.w     w0, [w14]
    4918:	11 07 98    	mov.w     w1, [w14+2]

0000491a <.LSM96>:
    if (self->write)
    491a:	1e 00 78    	mov.w     [w14], w0
    491c:	10 08 90    	mov.w     [w0+18], w0
    491e:	00 00 e0    	cp0.w     w0
    4920:	05 00 32    	bra       Z, 0x492c <.L27>

00004922 <.LSM97>:
        self->write(self, val);
    4922:	1e 00 78    	mov.w     [w14], w0
    4924:	10 09 90    	mov.w     [w0+18], w2
    4926:	9e 00 90    	mov.w     [w14+2], w1
    4928:	1e 00 78    	mov.w     [w14], w0
    492a:	02 00 01    	call      w2

0000492c <.L27>:
}
    492c:	00 80 fa    	ulnk      
    492e:	00 00 06    	return    

00004930 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    4930:	02 00 fa    	lnk       #0x2
    4932:	00 0f 78    	mov.w     w0, [w14]

00004934 <.LSM100>:
    if (self->read)
    4934:	1e 00 78    	mov.w     [w14], w0
    4936:	20 08 90    	mov.w     [w0+20], w0
    4938:	00 00 e0    	cp0.w     w0
    493a:	05 00 32    	bra       Z, 0x4946 <.L30>

0000493c <.LSM101>:
        return self->read(self);
    493c:	1e 00 78    	mov.w     [w14], w0
    493e:	a0 08 90    	mov.w     [w0+20], w1
    4940:	1e 00 78    	mov.w     [w14], w0
    4942:	01 00 01    	call      w1
    4944:	01 00 37    	bra       0x4948 <.L31>

00004946 <.L30>:
    else
        return 0xFFFF;
    4946:	00 80 eb    	setm.w    w0

00004948 <.L31>:
}
    4948:	00 80 fa    	ulnk      
    494a:	00 00 06    	return    

0000494c <_VendorRequests>:
uint8_t rocketstuff[64],rec_msg[64];
uint8_t cmd, value;
uint16_t val1, val2;

void VendorRequests(void) {
    494c:	02 00 fa    	lnk       #0x2

0000494e <.LSM1>:
    WORD temp;
    switch (USB_setup.bRequest) {
    494e:	40 83 20    	mov.w     #0x834, w0
    4950:	10 40 90    	mov.b     [w0+1], w0
    4952:	00 80 fb    	ze        w0, w0
    4954:	00 00 e0    	cp0.w     w0
    4956:	03 00 32    	bra       Z, 0x495e <.L3>
    4958:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    495a:	08 00 32    	bra       Z, 0x496c <.L4>
    495c:	49 00 37    	bra       0x49f0 <.L6>

0000495e <.L3>:
        case SET_STATE:
            // state = USB_setup.wValue.w;
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    495e:	40 60 21    	mov.w     #0x1604, w0
    4960:	80 40 eb    	clr.b     w1
    4962:	01 48 78    	mov.b     w1, [w0]

00004964 <.LSM3>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4964:	50 60 21    	mov.w     #0x1605, w0
    4966:	81 cc b3    	mov.b     #0xc8, w1
    4968:	01 48 78    	mov.b     w1, [w0]

0000496a <.LSM4>:
            break;
    496a:	45 00 37    	bra       0x49f6 <.L1>

0000496c <.L4>:
        case GET_VALS:
            temp.w = uart1.TXbuffer.head;
    496c:	90 95 80    	mov.w     0x12b2, w0
    496e:	00 0f 78    	mov.w     w0, [w14]

00004970 <.LSM6>:
            BD[EP0IN].address[0] = temp.b[0];
    4970:	30 b0 80    	mov.w     0x1606, w0
    4972:	9e 40 78    	mov.b     [w14], w1
    4974:	01 48 78    	mov.b     w1, [w0]

00004976 <.LSM7>:
            BD[EP0IN].address[1] = temp.b[1];
    4976:	30 b0 80    	mov.w     0x1606, w0
    4978:	00 00 e8    	inc.w     w0, w0
    497a:	9e 40 90    	mov.b     [w14+1], w1
    497c:	01 48 78    	mov.b     w1, [w0]

0000497e <.LSM8>:
            temp.w = uart1.TXbuffer.tail;
    497e:	a0 95 80    	mov.w     0x12b4, w0
    4980:	00 0f 78    	mov.w     w0, [w14]

00004982 <.LSM9>:
            BD[EP0IN].address[2] = temp.b[0];
    4982:	30 b0 80    	mov.w     0x1606, w0
    4984:	00 80 e8    	inc2.w    w0, w0
    4986:	9e 40 78    	mov.b     [w14], w1
    4988:	01 48 78    	mov.b     w1, [w0]

0000498a <.LSM10>:
            BD[EP0IN].address[3] = temp.b[1];
    498a:	30 b0 80    	mov.w     0x1606, w0
    498c:	63 00 40    	add.w     w0, #0x3, w0
    498e:	9e 40 90    	mov.b     [w14+1], w1
    4990:	01 48 78    	mov.b     w1, [w0]

00004992 <.LSM11>:
            temp.w = uart1.TXbuffer.count;
    4992:	b0 95 80    	mov.w     0x12b6, w0
    4994:	00 0f 78    	mov.w     w0, [w14]

00004996 <.LSM12>:
            BD[EP0IN].address[4] = temp.b[0];
    4996:	30 b0 80    	mov.w     0x1606, w0
    4998:	64 00 40    	add.w     w0, #0x4, w0
    499a:	9e 40 78    	mov.b     [w14], w1
    499c:	01 48 78    	mov.b     w1, [w0]

0000499e <.LSM13>:
            BD[EP0IN].address[5] = temp.b[1];
    499e:	30 b0 80    	mov.w     0x1606, w0
    49a0:	65 00 40    	add.w     w0, #0x5, w0
    49a2:	9e 40 90    	mov.b     [w14+1], w1
    49a4:	01 48 78    	mov.b     w1, [w0]

000049a6 <.LSM14>:

            temp.w = uart1.RXbuffer.head;
    49a6:	e0 95 80    	mov.w     0x12bc, w0
    49a8:	00 0f 78    	mov.w     w0, [w14]

000049aa <.LSM15>:
            BD[EP0IN].address[6] = temp.b[0];
    49aa:	30 b0 80    	mov.w     0x1606, w0
    49ac:	66 00 40    	add.w     w0, #0x6, w0
    49ae:	9e 40 78    	mov.b     [w14], w1
    49b0:	01 48 78    	mov.b     w1, [w0]

000049b2 <.LSM16>:
            BD[EP0IN].address[7] = temp.b[1];
    49b2:	30 b0 80    	mov.w     0x1606, w0
    49b4:	67 00 40    	add.w     w0, #0x7, w0
    49b6:	9e 40 90    	mov.b     [w14+1], w1
    49b8:	01 48 78    	mov.b     w1, [w0]

000049ba <.LSM17>:
            temp.w = uart1.RXbuffer.tail;
    49ba:	f0 95 80    	mov.w     0x12be, w0
    49bc:	00 0f 78    	mov.w     w0, [w14]

000049be <.LSM18>:
            BD[EP0IN].address[8] = temp.b[0];
    49be:	30 b0 80    	mov.w     0x1606, w0
    49c0:	68 00 40    	add.w     w0, #0x8, w0
    49c2:	9e 40 78    	mov.b     [w14], w1
    49c4:	01 48 78    	mov.b     w1, [w0]

000049c6 <.LSM19>:
            BD[EP0IN].address[9] = temp.b[1];
    49c6:	30 b0 80    	mov.w     0x1606, w0
    49c8:	69 00 40    	add.w     w0, #0x9, w0
    49ca:	9e 40 90    	mov.b     [w14+1], w1
    49cc:	01 48 78    	mov.b     w1, [w0]

000049ce <.LSM20>:
            temp.w = uart1.RXbuffer.count;
    49ce:	00 96 80    	mov.w     0x12c0, w0
    49d0:	00 0f 78    	mov.w     w0, [w14]

000049d2 <.LSM21>:
            BD[EP0IN].address[10] = temp.b[0];
    49d2:	30 b0 80    	mov.w     0x1606, w0
    49d4:	6a 00 40    	add.w     w0, #0xa, w0
    49d6:	9e 40 78    	mov.b     [w14], w1
    49d8:	01 48 78    	mov.b     w1, [w0]

000049da <.LSM22>:
            BD[EP0IN].address[11] = temp.b[1];
    49da:	30 b0 80    	mov.w     0x1606, w0
    49dc:	6b 00 40    	add.w     w0, #0xb, w0
    49de:	9e 40 90    	mov.b     [w14+1], w1
    49e0:	01 48 78    	mov.b     w1, [w0]

000049e2 <.LSM23>:
            BD[EP0IN].bytecount = 12;    // set EP0 IN byte count to 4
    49e2:	40 60 21    	mov.w     #0x1604, w0
    49e4:	c1 c0 b3    	mov.b     #0xc, w1
    49e6:	01 48 78    	mov.b     w1, [w0]

000049e8 <.LSM24>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    49e8:	50 60 21    	mov.w     #0x1605, w0
    49ea:	81 cc b3    	mov.b     #0xc8, w1
    49ec:	01 48 78    	mov.b     w1, [w0]

000049ee <.LSM25>:
            break;            
    49ee:	03 00 37    	bra       0x49f6 <.L1>

000049f0 <.L6>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    49f0:	3c c8 bf    	mov.b     0x83c, WREG
    49f2:	00 04 a0    	bset.b    w0, #0x0
    49f4:	3c e8 b7    	mov.b     WREG, 0x83c

000049f6 <.L1>:
    }
}
    49f6:	00 80 fa    	ulnk      
    49f8:	00 00 06    	return    

000049fa <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    49fa:	00 00 fa    	lnk       #0x0

000049fc <.LSM29>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    49fc:	3c c8 bf    	mov.b     0x83c, WREG
    49fe:	00 04 a0    	bset.b    w0, #0x0
    4a00:	3c e8 b7    	mov.b     WREG, 0x83c

00004a02 <.LSM30>:
    }
}
    4a02:	00 80 fa    	ulnk      
    4a04:	00 00 06    	return    

00004a06 <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    4a06:	00 00 fa    	lnk       #0x0

00004a08 <.LSM32>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4a08:	3c c8 bf    	mov.b     0x83c, WREG
    4a0a:	00 04 a0    	bset.b    w0, #0x0
    4a0c:	3c e8 b7    	mov.b     WREG, 0x83c

00004a0e <.LSM33>:
    }
}
    4a0e:	00 80 fa    	ulnk      
    4a10:	00 00 06    	return    

00004a12 <_UARTrequests>:


void UARTrequests(){
    4a12:	04 00 fa    	lnk       #0x4

00004a14 <.LSM35>:
    uart_gets(&uart1, rec_msg, 64);
    4a14:	02 04 20    	mov.w     #0x40, w2
    4a16:	41 09 21    	mov.w     #0x1094, w1
    4a18:	c0 28 21    	mov.w     #0x128c, w0
    4a1a:	3f f6 07    	rcall     0x369a <_uart_gets>

00004a1c <.LSM36>:
    uint32_t decoded_msg = (uint32_t)strtol(rec_msg, NULL, 16);
    4a1c:	40 09 21    	mov.w     #0x1094, w0
    4a1e:	02 01 20    	mov.w     #0x10, w2
    4a20:	80 00 eb    	clr.w     w1
    4a22:	37 e6 07    	rcall     0x1692 <_strtol>
    4a24:	00 8f be    	mov.d     w0, [w14]

00004a26 <.LSM37>:
    cmd = decoded_msg & 0x0f;
    4a26:	1e 00 78    	mov.w     [w14], w0
    4a28:	00 40 78    	mov.b     w0, w0
    4a2a:	6f 40 60    	and.b     w0, #0xf, w0
    4a2c:	4a e8 b7    	mov.b     WREG, 0x84a

00004a2e <.LSM38>:
    value = (decoded_msg & 0xf0) >> 4;
    4a2e:	00 0f 20    	mov.w     #0xf0, w0
    4a30:	01 00 20    	mov.w     #0x0, w1
    4a32:	1e 01 be    	mov.d     [w14], w2
    4a34:	02 02 78    	mov.w     w2, w4
    4a36:	03 01 78    	mov.w     w3, w2
    4a38:	80 01 78    	mov.w     w0, w3
    4a3a:	01 00 78    	mov.w     w1, w0
    4a3c:	03 02 62    	and.w     w4, w3, w4
    4a3e:	00 00 61    	and.w     w2, w0, w0
    4a40:	80 00 eb    	clr.w     w1
    4a42:	c0 00 dd    	sl.w      w0, #0x0, w1
    4a44:	00 00 20    	mov.w     #0x0, w0
    4a46:	00 01 be    	mov.d     w0, w2
    4a48:	61 20 b8    	mul.uu    w4, #0x1, w0
    4a4a:	00 01 71    	ior.w     w2, w0, w2
    4a4c:	81 81 71    	ior.w     w3, w1, w3
    4a4e:	4c 1a dd    	sl.w      w3, #0xc, w4
    4a50:	44 10 de    	lsr.w     w2, #0x4, w0
    4a52:	00 00 72    	ior.w     w4, w0, w0
    4a54:	c4 18 de    	lsr.w     w3, #0x4, w1
    4a56:	00 40 78    	mov.b     w0, w0
    4a58:	4b e8 b7    	mov.b     WREG, 0x84b

00004a5a <.LSM39>:
    switch(cmd){
    4a5a:	4a c8 bf    	mov.b     0x84a, WREG
    4a5c:	00 80 fb    	ze        w0, w0
    4a5e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4a60:	17 00 32    	bra       Z, 0x4a90 <.L12>
    4a62:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4a64:	19 00 32    	bra       Z, 0x4a98 <.L13>
    4a66:	00 00 e0    	cp0.w     w0
    4a68:	21 00 3a    	bra       NZ, 0x4aac <.L9>

00004a6a <.LSM40>:
        case GET_ROCKET_VALS:
        //speed, orientation
            led_toggle(&led1);
    4a6a:	00 80 20    	mov.w     #0x800, w0
    4a6c:	6d 01 07    	rcall     0x4d48 <_led_toggle>

00004a6e <.LSM41>:
            sprintf(rocketstuff, "%04x%04x%04x\r", rocket_speed, rocket_tilt, rocket_state);
    4a6e:	13 42 80    	mov.w     0x842, w3
    4a70:	32 42 80    	mov.w     0x846, w2
    4a72:	21 42 80    	mov.w     0x844, w1
    4a74:	40 05 21    	mov.w     #0x1054, w0
    4a76:	83 1f 78    	mov.w     w3, [w15++]
    4a78:	82 1f 78    	mov.w     w2, [w15++]
    4a7a:	81 1f 78    	mov.w     w1, [w15++]
    4a7c:	21 91 2a    	mov.w     #0xa912, w1
    4a7e:	81 1f 78    	mov.w     w1, [w15++]
    4a80:	57 e8 07    	rcall     0x1b30 <__sprintf_cdnopuxX>
    4a82:	e8 87 57    	sub.w     w15, #0x8, w15

00004a84 <.LSM42>:
            uart_puts(&uart1, rocketstuff);
    4a84:	41 05 21    	mov.w     #0x1054, w1
    4a86:	c0 28 21    	mov.w     #0x128c, w0
    4a88:	63 f5 07    	rcall     0x3550 <_uart_puts>

00004a8a <.LSM43>:
            led_toggle(&led2);
    4a8a:	80 80 20    	mov.w     #0x808, w0
    4a8c:	5d 01 07    	rcall     0x4d48 <_led_toggle>

00004a8e <.LSM44>:
            break;
    4a8e:	0e 00 37    	bra       0x4aac <.L9>

00004a90 <.L12>:
        case SET_ROCKET_STATE:
            rocket_state = value;
    4a90:	4b c8 bf    	mov.b     0x84b, WREG
    4a92:	00 80 fb    	ze        w0, w0
    4a94:	10 42 88    	mov.w     w0, 0x842

00004a96 <.LSM46>:
            break;
    4a96:	0a 00 37    	bra       0x4aac <.L9>

00004a98 <.L13>:
        case SEND_ROCKET_COMMANDS:
            throttle = value & 0b01;
    4a98:	4b c8 bf    	mov.b     0x84b, WREG
    4a9a:	61 40 60    	and.b     w0, #0x1, w0
    4a9c:	48 e8 b7    	mov.b     WREG, 0x848

00004a9e <.LSM48>:
            tilt = (value & 0b10) >> 1;
    4a9e:	4b c8 bf    	mov.b     0x84b, WREG
    4aa0:	00 80 fb    	ze        w0, w0
    4aa2:	62 00 60    	and.w     w0, #0x2, w0
    4aa4:	00 80 d1    	asr.w     w0, w0
    4aa6:	00 40 78    	mov.b     w0, w0
    4aa8:	49 e8 b7    	mov.b     WREG, 0x849

00004aaa <.LSM49>:
            break;
    4aaa:	00 00 00    	nop       

00004aac <.L9>:
    }
}
    4aac:	00 80 fa    	ulnk      
    4aae:	00 00 06    	return    

00004ab0 <_print_buffer>:

//
void print_buffer(uint8_t *buffer, uint16_t size) {
    4ab0:	0a 00 fa    	lnk       #0xa
    4ab2:	30 07 98    	mov.w     w0, [w14+6]
    4ab4:	41 07 98    	mov.w     w1, [w14+8]

00004ab6 <.LSM52>:
    int i;
    uint8_t* buf_str = (uint8_t*) malloc (2*size + 1);
    4ab6:	4e 00 90    	mov.w     [w14+8], w0
    4ab8:	00 00 40    	add.w     w0, w0, w0
    4aba:	00 00 e8    	inc.w     w0, w0
    4abc:	9e e5 07    	rcall     0x15fa <_malloc>
    4abe:	20 07 98    	mov.w     w0, [w14+4]

00004ac0 <.LSM53>:
    uint8_t* buf_ptr = buf_str;
    4ac0:	ae 00 90    	mov.w     [w14+4], w1
    4ac2:	11 07 98    	mov.w     w1, [w14+2]

00004ac4 <.LSM54>:
    for (i = 0; i < size; i++)
    4ac4:	00 00 eb    	clr.w     w0
    4ac6:	00 0f 78    	mov.w     w0, [w14]
    4ac8:	0f 00 37    	bra       0x4ae8 <.L15>

00004aca <.L16>:
    {
        buf_ptr += sprintf(buf_ptr, "%02X", buffer[i]);
    4aca:	1e 00 78    	mov.w     [w14], w0
    4acc:	be 00 90    	mov.w     [w14+6], w1
    4ace:	00 80 40    	add.w     w1, w0, w0
    4ad0:	10 40 78    	mov.b     [w0], w0
    4ad2:	80 80 fb    	ze        w0, w1
    4ad4:	1e 00 90    	mov.w     [w14+2], w0
    4ad6:	81 1f 78    	mov.w     w1, [w15++]
    4ad8:	01 92 2a    	mov.w     #0xa920, w1
    4ada:	81 1f 78    	mov.w     w1, [w15++]
    4adc:	29 e8 07    	rcall     0x1b30 <__sprintf_cdnopuxX>
    4ade:	e4 87 57    	sub.w     w15, #0x4, w15
    4ae0:	9e 00 90    	mov.w     [w14+2], w1
    4ae2:	00 80 40    	add.w     w1, w0, w0
    4ae4:	10 07 98    	mov.w     w0, [w14+2]

00004ae6 <.LSM56>:
    4ae6:	1e 0f e8    	inc.w     [w14], [w14]

00004ae8 <.L15>:
    4ae8:	9e 00 78    	mov.w     [w14], w1
    4aea:	4e 00 90    	mov.w     [w14+8], w0
    4aec:	80 8f 50    	sub.w     w1, w0, [w15]
    4aee:	ed ff 39    	bra       NC, 0x4aca <.L16>

00004af0 <.LSM57>:
    }
    sprintf(buf_ptr,"\n");
    4af0:	1e 00 90    	mov.w     [w14+2], w0
    4af2:	22 00 20    	mov.w     #0x2, w2
    4af4:	51 92 2a    	mov.w     #0xa925, w1
    4af6:	ab e5 07    	rcall     0x164e <_memcpy>

00004af8 <.LSM58>:
    *(buf_ptr + 1) = '\0';
    4af8:	1e 00 90    	mov.w     [w14+2], w0
    4afa:	00 00 e8    	inc.w     w0, w0
    4afc:	80 40 eb    	clr.b     w1
    4afe:	01 48 78    	mov.b     w1, [w0]

00004b00 <.LSM59>:
    printf("%s\n", buf_str);
    4b00:	2e 00 90    	mov.w     [w14+4], w0
    4b02:	ac e5 07    	rcall     0x165c <_puts>

00004b04 <.LSM60>:
}
    4b04:	00 80 fa    	ulnk      
    4b06:	00 00 06    	return    

00004b08 <_check_for_string>:

char check_for_string(uint8_t *str) {
    4b08:	06 00 fa    	lnk       #0x6
    4b0a:	20 07 98    	mov.w     w0, [w14+4]

00004b0c <.LSM62>:
    /*
    If the input string buffer is "test", turn on led1 and return 1. Else 
    turn off led1 and return 0.
    */
    int rc = strcmp(str, "test");
    4b0c:	71 92 2a    	mov.w     #0xa927, w1
    4b0e:	2e 00 90    	mov.w     [w14+4], w0
    4b10:	b0 e5 07    	rcall     0x1672 <_strcmp>
    4b12:	10 07 98    	mov.w     w0, [w14+2]

00004b14 <.LSM63>:
    char out;
    if (rc == 0) {
    4b14:	1e 00 90    	mov.w     [w14+2], w0
    4b16:	00 00 e0    	cp0.w     w0
    4b18:	05 00 3a    	bra       NZ, 0x4b24 <.L18>

00004b1a <.LSM64>:
        led_on(&led1);
    4b1a:	00 80 20    	mov.w     #0x800, w0
    4b1c:	f4 00 07    	rcall     0x4d06 <_led_on>

00004b1e <.LSM65>:
        out = 1;
    4b1e:	10 c0 b3    	mov.b     #0x1, w0
    4b20:	00 4f 78    	mov.b     w0, [w14]
    4b22:	04 00 37    	bra       0x4b2c <.L19>

00004b24 <.L18>:
    } else {
        led_off(&led1);
    4b24:	00 80 20    	mov.w     #0x800, w0
    4b26:	ff 00 07    	rcall     0x4d26 <_led_off>

00004b28 <.LSM67>:
        out = 0;
    4b28:	00 40 eb    	clr.b     w0
    4b2a:	00 4f 78    	mov.b     w0, [w14]

00004b2c <.L19>:
    }
    return out;
    4b2c:	1e 40 78    	mov.b     [w14], w0

00004b2e <.LSM69>:
}
    4b2e:	00 80 fa    	ulnk      
    4b30:	00 00 06    	return    

00004b32 <_convert_msg>:

uint64_t convert_msg(uint8_t *str) {
    4b32:	0a 00 fa    	lnk       #0xa
    4b34:	40 07 98    	mov.w     w0, [w14+8]

00004b36 <.LSM71>:
    /* 
    Interprets string buffer which represents a hexadecimal number and stores 
    the encoded value as a uint64_t
    */

    // sprintf(a, "%08x%08x\r\n", 0xffff, 40);
    // printf("%d\r\n", a[0]);
    // printf("%s", a);
    uint64_t decoded_msg = (uint64_t)strtoll(str, NULL, 16);
    4b36:	02 01 20    	mov.w     #0x10, w2
    4b38:	80 00 eb    	clr.w     w1
    4b3a:	4e 00 90    	mov.w     [w14+8], w0
    4b3c:	f3 e5 07    	rcall     0x1724 <_strtoll>
    4b3e:	cf 80 de    	asr.w     w0, #0xf, w1
    4b40:	61 09 b9    	mul.su    w1, #0x1, w2
    4b42:	00 9f be    	mov.d     w0, [w14++]
    4b44:	02 97 be    	mov.d     w2, [w14--]

00004b46 <.LSM72>:
    return decoded_msg;
    4b46:	3e 00 be    	mov.d     [w14++], w0
    4b48:	2e 01 be    	mov.d     [w14--], w2

00004b4a <.LSM73>:
}
    4b4a:	00 80 fa    	ulnk      
    4b4c:	00 00 06    	return    

00004b4e <_parse_addr>:

char parse_addr(uint64_t *msg) {
    4b4e:	04 00 fa    	lnk       #0x4
    4b50:	10 07 98    	mov.w     w0, [w14+2]

00004b52 <.LSM75>:
    /*
    Parses the received message and returns a char representing whether this 
    information is addressed to this device.
    */
    // uint8_t msg_addr = (uint8_t)(*msg & ((uint64_t)(0xFF) << 56));
    uint8_t msg_addr = (uint8_t)(*msg & ((uint64_t)(0xFF)));
    4b52:	1e 00 90    	mov.w     [w14+2], w0
    4b54:	50 01 be    	mov.d     [++w0], w2
    4b56:	40 00 be    	mov.d     [--w0], w0
    4b58:	10 47 98    	mov.b     w0, [w14+1]

00004b5a <.LSM76>:
    char is_recipient = 0;
    4b5a:	00 40 eb    	clr.b     w0
    4b5c:	00 4f 78    	mov.b     w0, [w14]

00004b5e <.LSM77>:
    if (msg_addr == LOCAL_ADDR) {
    4b5e:	1e 40 90    	mov.b     [w14+1], w0
    4b60:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4b62:	02 00 3a    	bra       NZ, 0x4b68 <.L22>

00004b64 <.LSM78>:
        is_recipient = 1;
    4b64:	10 c0 b3    	mov.b     #0x1, w0
    4b66:	00 4f 78    	mov.b     w0, [w14]

00004b68 <.L22>:
    }
    return is_recipient;
    4b68:	1e 40 78    	mov.b     [w14], w0

00004b6a <.LSM80>:
}
    4b6a:	00 80 fa    	ulnk      
    4b6c:	00 00 06    	return    

00004b6e <_setup_uart>:

void setup_uart() {
    4b6e:	00 00 fa    	lnk       #0x0

00004b70 <.LSM82>:
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           // 0, TXBUF, 1024, RXBUF, 1024);

    // uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
    //            float baudrate, int8_t parity, int16_t stopbits, 
    //            uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
    //            uint8_t *RXbuffer, uint16_t RXbufferlen)

    // uart_open(&uart2, &D[0], &D[1], NULL, NULL, 115200., 'N', 1, 
    //           0, MC_TXBUF, 1024, MC_RXBUF, 1024);
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           0, TXBUF, 1024, RXBUF, 1024);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    4b70:	40 6d 20    	mov.w     #0x6d4, w0
    4b72:	80 1f 78    	mov.w     w0, [w15++]
    4b74:	57 01 20    	mov.w     #0x15, w7
    4b76:	86 c0 b3    	mov.b     #0x8, w6
    4b78:	80 82 eb    	setm.w    w5
    4b7a:	64 c0 b3    	mov.b     #0x6, w4
    4b7c:	80 01 eb    	clr.w     w3
    4b7e:	02 2f 20    	mov.w     #0x2f0, w2
    4b80:	21 2f 20    	mov.w     #0x2f2, w1
    4b82:	20 39 21    	mov.w     #0x1392, w0
    4b84:	d7 fd 07    	rcall     0x4734 <_pin_init>
    4b86:	8f 87 e9    	dec2.w    w15, w15

00004b88 <.LSM83>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    4b88:	a0 6d 20    	mov.w     #0x6da, w0
    4b8a:	80 1f 78    	mov.w     w0, [w15++]
    4b8c:	a7 01 20    	mov.w     #0x1a, w7
    4b8e:	00 43 eb    	clr.b     w6
    4b90:	80 82 eb    	setm.w    w5
    4b92:	74 c0 b3    	mov.b     #0x7, w4
    4b94:	80 01 eb    	clr.w     w3
    4b96:	02 2f 20    	mov.w     #0x2f0, w2
    4b98:	21 2f 20    	mov.w     #0x2f2, w1
    4b9a:	c0 37 21    	mov.w     #0x137c, w0
    4b9c:	cb fd 07    	rcall     0x4734 <_pin_init>
    4b9e:	8f 87 e9    	dec2.w    w15, w15

00004ba0 <.LSM84>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);
    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    4ba0:	00 40 20    	mov.w     #0x400, w0
    4ba2:	80 1f 78    	mov.w     w0, [w15++]
    4ba4:	40 c5 20    	mov.w     #0xc54, w0
    4ba6:	80 1f 78    	mov.w     w0, [w15++]
    4ba8:	00 40 20    	mov.w     #0x400, w0
    4baa:	80 1f 78    	mov.w     w0, [w15++]
    4bac:	40 85 20    	mov.w     #0x854, w0
    4bae:	80 1f 78    	mov.w     w0, [w15++]
    4bb0:	00 00 eb    	clr.w     w0
    4bb2:	80 1f 78    	mov.w     w0, [w15++]
    4bb4:	10 00 20    	mov.w     #0x1, w0
    4bb6:	80 1f 78    	mov.w     w0, [w15++]
    4bb8:	e5 c4 b3    	mov.b     #0x4e, w5
    4bba:	06 00 20    	mov.w     #0x0, w6
    4bbc:	67 69 24    	mov.w     #0x4696, w7
    4bbe:	00 02 eb    	clr.w     w4
    4bc0:	80 01 eb    	clr.w     w3
    4bc2:	22 39 21    	mov.w     #0x1392, w2
    4bc4:	c1 37 21    	mov.w     #0x137c, w1
    4bc6:	c0 28 21    	mov.w     #0x128c, w0
    4bc8:	6c f1 07    	rcall     0x2ea2 <_uart_open>
    4bca:	ec 87 57    	sub.w     w15, #0xc, w15

00004bcc <.LSM85>:
              0, MC_TXBUF, 1024, MC_RXBUF, 1024);
}
    4bcc:	00 80 fa    	ulnk      
    4bce:	00 00 06    	return    

00004bd0 <_setup>:

void setup() {
    4bd0:	00 00 fa    	lnk       #0x0

00004bd2 <.LSM87>:
    timer_setPeriod(&timer1, 1);  // Timer for LED operation/status blink
    4bd2:	02 00 20    	mov.w     #0x0, w2
    4bd4:	03 f8 23    	mov.w     #0x3f80, w3
    4bd6:	c0 4b 21    	mov.w     #0x14bc, w0
    4bd8:	d9 fa 07    	rcall     0x418c <_timer_setPeriod>

00004bda <.LSM88>:
    timer_setPeriod(&timer2, 0.5); 
    4bda:	02 00 20    	mov.w     #0x0, w2
    4bdc:	03 f0 23    	mov.w     #0x3f00, w3
    4bde:	20 4d 21    	mov.w     #0x14d2, w0
    4be0:	d5 fa 07    	rcall     0x418c <_timer_setPeriod>

00004be2 <.LSM89>:
    timer_start(&timer1);
    4be2:	c0 4b 21    	mov.w     #0x14bc, w0
    4be4:	a2 fb 07    	rcall     0x432a <_timer_start>

00004be6 <.LSM90>:
    timer_start(&timer2);
    4be6:	20 4d 21    	mov.w     #0x14d2, w0
    4be8:	a0 fb 07    	rcall     0x432a <_timer_start>

00004bea <.LSM91>:

    setup_uart();
    4bea:	c1 ff 07    	rcall     0x4b6e <_setup_uart>

00004bec <.LSM92>:
    throttle, tilt = 0;
    4bec:	49 68 ef    	clr.b     0x849

00004bee <.LSM93>:
    val1,val2 = 8;
    4bee:	80 00 20    	mov.w     #0x8, w0
    4bf0:	70 42 88    	mov.w     w0, 0x84e

00004bf2 <.LSM94>:
    rocket_tilt = 15;
    4bf2:	f0 00 20    	mov.w     #0xf, w0
    4bf4:	30 42 88    	mov.w     w0, 0x846

00004bf6 <.LSM95>:

}
    4bf6:	00 80 fa    	ulnk      
    4bf8:	00 00 06    	return    

00004bfa <_main>:

int16_t main(void) {
    4bfa:	04 00 fa    	lnk       #0x4

00004bfc <.LSM97>:
    // printf("Starting Rocket Controller...\r\n");
    init_clock();
    4bfc:	00 10 20    	mov.w     #0x100, w0
    4bfe:	20 3a 88    	mov.w     w0, 0x744

00004c00 <.LSM98>:
    init_ui();
    4c00:	20 00 07    	rcall     0x4c42 <_init_ui>

00004c02 <.LSM99>:
    init_timer();
    4c02:	59 fa 07    	rcall     0x40b6 <_init_timer>

00004c04 <.LSM100>:
    init_uart();
    4c04:	77 f0 07    	rcall     0x2cf4 <_init_uart>

00004c06 <.LSM101>:
    setup();
    4c06:	e4 ff 07    	rcall     0x4bd0 <_setup>

00004c08 <.LSM102>:
    uint16_t counter = 0;
    4c08:	00 00 eb    	clr.w     w0
    4c0a:	00 0f 78    	mov.w     w0, [w14]

00004c0c <.LSM103>:
    uint64_t msg;
    char is_recip = 0;
    4c0c:	00 40 eb    	clr.b     w0
    4c0e:	20 47 98    	mov.b     w0, [w14+2]

00004c10 <.LSM104>:
    led_off(&led2);
    4c10:	80 80 20    	mov.w     #0x808, w0
    4c12:	89 00 07    	rcall     0x4d26 <_led_off>

00004c14 <.LSM105>:
    led_off(&led1);
    4c14:	00 80 20    	mov.w     #0x800, w0
    4c16:	87 00 07    	rcall     0x4d26 <_led_off>

00004c18 <.LSM106>:

    InitUSB();
    4c18:	68 f5 07    	rcall     0x36ea <_InitUSB>

00004c1a <.LSM107>:
    U1IE = 0xFF; //setting up ISR for USB requests
    4c1a:	f0 0f 20    	mov.w     #0xff, w0
    4c1c:	60 24 88    	mov.w     w0, 0x48c

00004c1e <.LSM108>:
    U1EIE = 0xFF;
    4c1e:	f0 0f 20    	mov.w     #0xff, w0
    4c20:	80 24 88    	mov.w     w0, 0x490

00004c22 <.LSM109>:
    IFS5bits.USB1IF = 0; //flag
    4c22:	8e c0 a9    	bclr.b    0x8e, #0x6

00004c24 <.LSM110>:
    IEC5bits.USB1IE = 1; //enable
    4c24:	9e c0 a8    	bset.b    0x9e, #0x6
    4c26:	01 00 37    	bra       0x4c2a <.L27>

00004c28 <.L28>:

    while (1) {
        // if (timer_flag(&timer1)) {
        //     // Blink green light to show normal operation.
        //     timer_lower(&timer1);
        //     led_toggle(&led2);
        // }

        if (timer_flag(&timer2)) {
            timer_lower(&timer2);
            // uart_gets(&uart1, rec_msg, 64);
            // led_toggle(&led2);
            UARTrequests();


            // if (throttle == 1){
            //     led_on(&led1);
            // }

            // else{
            //     led_off(&led1);
            // }

        // if(rocket_state == FLYING){
        //     led_on(&led1);
        // }

        // else{
        //     led_off(&led1);
        // }

        val1 = uart1.TXbuffer.head;
        val2 = uart1.TXbuffer.tail;

            
        }   
    }
    4c28:	00 00 00    	nop       

00004c2a <.L27>:
    4c2a:	20 4d 21    	mov.w     #0x14d2, w0
    4c2c:	9c fb 07    	rcall     0x4366 <_timer_flag>
    4c2e:	00 00 e0    	cp0.w     w0
    4c30:	fb ff 32    	bra       Z, 0x4c28 <.L28>

00004c32 <.LSM113>:
    4c32:	20 4d 21    	mov.w     #0x14d2, w0
    4c34:	a9 fb 07    	rcall     0x4388 <_timer_lower>

00004c36 <.LSM114>:
    4c36:	ed fe 07    	rcall     0x4a12 <_UARTrequests>

00004c38 <.LSM115>:
    4c38:	90 95 80    	mov.w     0x12b2, w0
    4c3a:	60 42 88    	mov.w     w0, 0x84c

00004c3c <.LSM116>:
    4c3c:	a0 95 80    	mov.w     0x12b4, w0
    4c3e:	70 42 88    	mov.w     w0, 0x84e

00004c40 <.LSM117>:
    4c40:	f4 ff 37    	bra       0x4c2a <.L27>

00004c42 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    4c42:	00 00 fa    	lnk       #0x0

00004c44 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4c44:	74 c0 b3    	mov.b     #0x7, w4
    4c46:	63 4e 20    	mov.w     #0x4e6, w3
    4c48:	82 2d 20    	mov.w     #0x2d8, w2
    4c4a:	a1 2d 20    	mov.w     #0x2da, w1
    4c4c:	00 80 20    	mov.w     #0x800, w0
    4c4e:	20 00 07    	rcall     0x4c90 <_led_init>

00004c50 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4c50:	00 42 eb    	clr.b     w4
    4c52:	a3 4e 20    	mov.w     #0x4ea, w3
    4c54:	82 2e 20    	mov.w     #0x2e8, w2
    4c56:	a1 2e 20    	mov.w     #0x2ea, w1
    4c58:	80 80 20    	mov.w     #0x808, w0
    4c5a:	1a 00 07    	rcall     0x4c90 <_led_init>

00004c5c <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4c5c:	14 c0 b3    	mov.b     #0x1, w4
    4c5e:	a3 4e 20    	mov.w     #0x4ea, w3
    4c60:	82 2e 20    	mov.w     #0x2e8, w2
    4c62:	a1 2e 20    	mov.w     #0x2ea, w1
    4c64:	00 81 20    	mov.w     #0x810, w0
    4c66:	14 00 07    	rcall     0x4c90 <_led_init>

00004c68 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    4c68:	f4 c0 b3    	mov.b     #0xf, w4
    4c6a:	43 4e 20    	mov.w     #0x4e4, w3
    4c6c:	02 2d 20    	mov.w     #0x2d0, w2
    4c6e:	21 2d 20    	mov.w     #0x2d2, w1
    4c70:	80 81 20    	mov.w     #0x818, w0
    4c72:	ad 00 07    	rcall     0x4dce <_sw_init>

00004c74 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    4c74:	c4 c0 b3    	mov.b     #0xc, w4
    4c76:	43 4e 20    	mov.w     #0x4e4, w3
    4c78:	02 2d 20    	mov.w     #0x2d0, w2
    4c7a:	21 2d 20    	mov.w     #0x2d2, w1
    4c7c:	00 82 20    	mov.w     #0x820, w0
    4c7e:	a7 00 07    	rcall     0x4dce <_sw_init>

00004c80 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4c80:	c4 c0 b3    	mov.b     #0xc, w4
    4c82:	23 4e 20    	mov.w     #0x4e2, w3
    4c84:	82 2c 20    	mov.w     #0x2c8, w2
    4c86:	a1 2c 20    	mov.w     #0x2ca, w1
    4c88:	80 82 20    	mov.w     #0x828, w0
    4c8a:	a1 00 07    	rcall     0x4dce <_sw_init>

00004c8c <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    4c8c:	00 80 fa    	ulnk      
    4c8e:	00 00 06    	return    

00004c90 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    4c90:	0a 00 fa    	lnk       #0xa
    4c92:	00 0f 78    	mov.w     w0, [w14]
    4c94:	11 07 98    	mov.w     w1, [w14+2]
    4c96:	22 07 98    	mov.w     w2, [w14+4]
    4c98:	33 07 98    	mov.w     w3, [w14+6]
    4c9a:	04 4f 98    	mov.b     w4, [w14+8]

00004c9c <.LSM9>:
    self->port = port;
    4c9c:	1e 00 78    	mov.w     [w14], w0
    4c9e:	9e 00 90    	mov.w     [w14+2], w1
    4ca0:	01 08 78    	mov.w     w1, [w0]

00004ca2 <.LSM10>:
    self->tris = tris;
    4ca2:	1e 00 78    	mov.w     [w14], w0
    4ca4:	ae 00 90    	mov.w     [w14+4], w1
    4ca6:	11 00 98    	mov.w     w1, [w0+2]

00004ca8 <.LSM11>:
    self->ans = ans;
    4ca8:	1e 00 78    	mov.w     [w14], w0
    4caa:	be 00 90    	mov.w     [w14+6], w1
    4cac:	21 00 98    	mov.w     w1, [w0+4]

00004cae <.LSM12>:
    self->bit = bit;
    4cae:	1e 00 78    	mov.w     [w14], w0
    4cb0:	8e 48 90    	mov.b     [w14+8], w1
    4cb2:	61 40 98    	mov.b     w1, [w0+6]

00004cb4 <.LSM13>:

    bitclear(self->ans, self->bit);
    4cb4:	1e 00 78    	mov.w     [w14], w0
    4cb6:	20 00 90    	mov.w     [w0+4], w0
    4cb8:	9e 00 78    	mov.w     [w14], w1
    4cba:	a1 00 90    	mov.w     [w1+4], w1
    4cbc:	11 01 78    	mov.w     [w1], w2
    4cbe:	9e 00 78    	mov.w     [w14], w1
    4cc0:	e1 40 90    	mov.b     [w1+6], w1
    4cc2:	81 80 fb    	ze        w1, w1
    4cc4:	13 00 20    	mov.w     #0x1, w3
    4cc6:	81 18 dd    	sl.w      w3, w1, w1
    4cc8:	81 80 ea    	com.w     w1, w1
    4cca:	81 00 61    	and.w     w2, w1, w1
    4ccc:	01 08 78    	mov.w     w1, [w0]

00004cce <.LSM14>:
    bitclear(self->port, self->bit);
    4cce:	1e 00 78    	mov.w     [w14], w0
    4cd0:	10 00 78    	mov.w     [w0], w0
    4cd2:	9e 00 78    	mov.w     [w14], w1
    4cd4:	91 00 78    	mov.w     [w1], w1
    4cd6:	11 01 78    	mov.w     [w1], w2
    4cd8:	9e 00 78    	mov.w     [w14], w1
    4cda:	e1 40 90    	mov.b     [w1+6], w1
    4cdc:	81 80 fb    	ze        w1, w1
    4cde:	13 00 20    	mov.w     #0x1, w3
    4ce0:	81 18 dd    	sl.w      w3, w1, w1
    4ce2:	81 80 ea    	com.w     w1, w1
    4ce4:	81 00 61    	and.w     w2, w1, w1
    4ce6:	01 08 78    	mov.w     w1, [w0]

00004ce8 <.LSM15>:
    bitclear(self->tris, self->bit);
    4ce8:	1e 00 78    	mov.w     [w14], w0
    4cea:	10 00 90    	mov.w     [w0+2], w0
    4cec:	9e 00 78    	mov.w     [w14], w1
    4cee:	91 00 90    	mov.w     [w1+2], w1
    4cf0:	11 01 78    	mov.w     [w1], w2
    4cf2:	9e 00 78    	mov.w     [w14], w1
    4cf4:	e1 40 90    	mov.b     [w1+6], w1
    4cf6:	81 80 fb    	ze        w1, w1
    4cf8:	13 00 20    	mov.w     #0x1, w3
    4cfa:	81 18 dd    	sl.w      w3, w1, w1
    4cfc:	81 80 ea    	com.w     w1, w1
    4cfe:	81 00 61    	and.w     w2, w1, w1
    4d00:	01 08 78    	mov.w     w1, [w0]

00004d02 <.LSM16>:
}
    4d02:	00 80 fa    	ulnk      
    4d04:	00 00 06    	return    

00004d06 <_led_on>:

void led_on(_LED *self) {
    4d06:	02 00 fa    	lnk       #0x2
    4d08:	00 0f 78    	mov.w     w0, [w14]

00004d0a <.LSM18>:
    bitset(self->port, self->bit);
    4d0a:	1e 00 78    	mov.w     [w14], w0
    4d0c:	10 00 78    	mov.w     [w0], w0
    4d0e:	9e 00 78    	mov.w     [w14], w1
    4d10:	91 00 78    	mov.w     [w1], w1
    4d12:	11 01 78    	mov.w     [w1], w2
    4d14:	9e 00 78    	mov.w     [w14], w1
    4d16:	e1 40 90    	mov.b     [w1+6], w1
    4d18:	81 80 fb    	ze        w1, w1
    4d1a:	13 00 20    	mov.w     #0x1, w3
    4d1c:	81 18 dd    	sl.w      w3, w1, w1
    4d1e:	82 80 70    	ior.w     w1, w2, w1
    4d20:	01 08 78    	mov.w     w1, [w0]

00004d22 <.LSM19>:
}
    4d22:	00 80 fa    	ulnk      
    4d24:	00 00 06    	return    

00004d26 <_led_off>:

void led_off(_LED *self) {
    4d26:	02 00 fa    	lnk       #0x2
    4d28:	00 0f 78    	mov.w     w0, [w14]

00004d2a <.LSM21>:
    bitclear(self->port, self->bit);
    4d2a:	1e 00 78    	mov.w     [w14], w0
    4d2c:	10 00 78    	mov.w     [w0], w0
    4d2e:	9e 00 78    	mov.w     [w14], w1
    4d30:	91 00 78    	mov.w     [w1], w1
    4d32:	11 01 78    	mov.w     [w1], w2
    4d34:	9e 00 78    	mov.w     [w14], w1
    4d36:	e1 40 90    	mov.b     [w1+6], w1
    4d38:	81 80 fb    	ze        w1, w1
    4d3a:	13 00 20    	mov.w     #0x1, w3
    4d3c:	81 18 dd    	sl.w      w3, w1, w1
    4d3e:	81 80 ea    	com.w     w1, w1
    4d40:	81 00 61    	and.w     w2, w1, w1
    4d42:	01 08 78    	mov.w     w1, [w0]

00004d44 <.LSM22>:
}
    4d44:	00 80 fa    	ulnk      
    4d46:	00 00 06    	return    

00004d48 <_led_toggle>:

void led_toggle(_LED *self) {
    4d48:	02 00 fa    	lnk       #0x2
    4d4a:	00 0f 78    	mov.w     w0, [w14]

00004d4c <.LSM24>:
    bitflip(self->port, self->bit);
    4d4c:	1e 00 78    	mov.w     [w14], w0
    4d4e:	10 00 78    	mov.w     [w0], w0
    4d50:	9e 00 78    	mov.w     [w14], w1
    4d52:	91 00 78    	mov.w     [w1], w1
    4d54:	11 01 78    	mov.w     [w1], w2
    4d56:	9e 00 78    	mov.w     [w14], w1
    4d58:	e1 40 90    	mov.b     [w1+6], w1
    4d5a:	81 80 fb    	ze        w1, w1
    4d5c:	13 00 20    	mov.w     #0x1, w3
    4d5e:	81 18 dd    	sl.w      w3, w1, w1
    4d60:	81 00 69    	xor.w     w2, w1, w1
    4d62:	01 08 78    	mov.w     w1, [w0]

00004d64 <.LSM25>:
}
    4d64:	00 80 fa    	ulnk      
    4d66:	00 00 06    	return    

00004d68 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    4d68:	04 00 fa    	lnk       #0x4
    4d6a:	00 0f 78    	mov.w     w0, [w14]
    4d6c:	11 07 98    	mov.w     w1, [w14+2]

00004d6e <.LSM27>:
    if (val)
    4d6e:	1e 00 90    	mov.w     [w14+2], w0
    4d70:	00 00 e0    	cp0.w     w0
    4d72:	0d 00 32    	bra       Z, 0x4d8e <.L7>

00004d74 <.LSM28>:
        bitset(self->port, self->bit);
    4d74:	1e 00 78    	mov.w     [w14], w0
    4d76:	10 00 78    	mov.w     [w0], w0
    4d78:	9e 00 78    	mov.w     [w14], w1
    4d7a:	91 00 78    	mov.w     [w1], w1
    4d7c:	11 01 78    	mov.w     [w1], w2
    4d7e:	9e 00 78    	mov.w     [w14], w1
    4d80:	e1 40 90    	mov.b     [w1+6], w1
    4d82:	81 80 fb    	ze        w1, w1
    4d84:	13 00 20    	mov.w     #0x1, w3
    4d86:	81 18 dd    	sl.w      w3, w1, w1
    4d88:	82 80 70    	ior.w     w1, w2, w1
    4d8a:	01 08 78    	mov.w     w1, [w0]
    4d8c:	0d 00 37    	bra       0x4da8 <.L6>

00004d8e <.L7>:
    else
        bitclear(self->port, self->bit);
    4d8e:	1e 00 78    	mov.w     [w14], w0
    4d90:	10 00 78    	mov.w     [w0], w0
    4d92:	9e 00 78    	mov.w     [w14], w1
    4d94:	91 00 78    	mov.w     [w1], w1
    4d96:	11 01 78    	mov.w     [w1], w2
    4d98:	9e 00 78    	mov.w     [w14], w1
    4d9a:	e1 40 90    	mov.b     [w1+6], w1
    4d9c:	81 80 fb    	ze        w1, w1
    4d9e:	13 00 20    	mov.w     #0x1, w3
    4da0:	81 18 dd    	sl.w      w3, w1, w1
    4da2:	81 80 ea    	com.w     w1, w1
    4da4:	81 00 61    	and.w     w2, w1, w1
    4da6:	01 08 78    	mov.w     w1, [w0]

00004da8 <.L6>:
}
    4da8:	00 80 fa    	ulnk      
    4daa:	00 00 06    	return    

00004dac <_led_read>:

uint16_t led_read(_LED *self) {
    4dac:	02 00 fa    	lnk       #0x2
    4dae:	00 0f 78    	mov.w     w0, [w14]

00004db0 <.LSM32>:
    return bitread(self->port, self->bit);
    4db0:	1e 00 78    	mov.w     [w14], w0
    4db2:	10 00 78    	mov.w     [w0], w0
    4db4:	90 00 78    	mov.w     [w0], w1
    4db6:	1e 00 78    	mov.w     [w14], w0
    4db8:	60 40 90    	mov.b     [w0+6], w0
    4dba:	00 80 fb    	ze        w0, w0
    4dbc:	12 00 20    	mov.w     #0x1, w2
    4dbe:	00 10 dd    	sl.w      w2, w0, w0
    4dc0:	00 80 60    	and.w     w1, w0, w0
    4dc2:	00 f0 a7    	btsc.w    w0, #0xf
    4dc4:	00 00 ea    	neg.w     w0, w0
    4dc6:	00 00 ea    	neg.w     w0, w0
    4dc8:	4f 00 de    	lsr.w     w0, #0xf, w0

00004dca <.LSM33>:
}
    4dca:	00 80 fa    	ulnk      
    4dcc:	00 00 06    	return    

00004dce <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    4dce:	0a 00 fa    	lnk       #0xa
    4dd0:	00 0f 78    	mov.w     w0, [w14]
    4dd2:	11 07 98    	mov.w     w1, [w14+2]
    4dd4:	22 07 98    	mov.w     w2, [w14+4]
    4dd6:	33 07 98    	mov.w     w3, [w14+6]
    4dd8:	04 4f 98    	mov.b     w4, [w14+8]

00004dda <.LSM35>:
    self->port = port;
    4dda:	1e 00 78    	mov.w     [w14], w0
    4ddc:	9e 00 90    	mov.w     [w14+2], w1
    4dde:	01 08 78    	mov.w     w1, [w0]

00004de0 <.LSM36>:
    self->tris = tris;
    4de0:	1e 00 78    	mov.w     [w14], w0
    4de2:	ae 00 90    	mov.w     [w14+4], w1
    4de4:	11 00 98    	mov.w     w1, [w0+2]

00004de6 <.LSM37>:
    self->ans = ans;
    4de6:	1e 00 78    	mov.w     [w14], w0
    4de8:	be 00 90    	mov.w     [w14+6], w1
    4dea:	21 00 98    	mov.w     w1, [w0+4]

00004dec <.LSM38>:
    self->bit = bit;
    4dec:	1e 00 78    	mov.w     [w14], w0
    4dee:	8e 48 90    	mov.b     [w14+8], w1
    4df0:	61 40 98    	mov.b     w1, [w0+6]

00004df2 <.LSM39>:

    bitclear(self->ans, self->bit);
    4df2:	1e 00 78    	mov.w     [w14], w0
    4df4:	20 00 90    	mov.w     [w0+4], w0
    4df6:	9e 00 78    	mov.w     [w14], w1
    4df8:	a1 00 90    	mov.w     [w1+4], w1
    4dfa:	11 01 78    	mov.w     [w1], w2
    4dfc:	9e 00 78    	mov.w     [w14], w1
    4dfe:	e1 40 90    	mov.b     [w1+6], w1
    4e00:	81 80 fb    	ze        w1, w1
    4e02:	13 00 20    	mov.w     #0x1, w3
    4e04:	81 18 dd    	sl.w      w3, w1, w1
    4e06:	81 80 ea    	com.w     w1, w1
    4e08:	81 00 61    	and.w     w2, w1, w1
    4e0a:	01 08 78    	mov.w     w1, [w0]

00004e0c <.LSM40>:
    bitset(self->tris, self->bit);
    4e0c:	1e 00 78    	mov.w     [w14], w0
    4e0e:	10 00 90    	mov.w     [w0+2], w0
    4e10:	9e 00 78    	mov.w     [w14], w1
    4e12:	91 00 90    	mov.w     [w1+2], w1
    4e14:	11 01 78    	mov.w     [w1], w2
    4e16:	9e 00 78    	mov.w     [w14], w1
    4e18:	e1 40 90    	mov.b     [w1+6], w1
    4e1a:	81 80 fb    	ze        w1, w1
    4e1c:	13 00 20    	mov.w     #0x1, w3
    4e1e:	81 18 dd    	sl.w      w3, w1, w1
    4e20:	82 80 70    	ior.w     w1, w2, w1
    4e22:	01 08 78    	mov.w     w1, [w0]

00004e24 <.LSM41>:
}
    4e24:	00 80 fa    	ulnk      
    4e26:	00 00 06    	return    

00004e28 <_sw_read>:

uint16_t sw_read(_SW *self) {
    4e28:	02 00 fa    	lnk       #0x2
    4e2a:	00 0f 78    	mov.w     w0, [w14]

00004e2c <.LSM43>:
    return bitread(self->port, self->bit);
    4e2c:	1e 00 78    	mov.w     [w14], w0
    4e2e:	10 00 78    	mov.w     [w0], w0
    4e30:	90 00 78    	mov.w     [w0], w1
    4e32:	1e 00 78    	mov.w     [w14], w0
    4e34:	60 40 90    	mov.b     [w0+6], w0
    4e36:	00 80 fb    	ze        w0, w0
    4e38:	12 00 20    	mov.w     #0x1, w2
    4e3a:	00 10 dd    	sl.w      w2, w0, w0
    4e3c:	00 80 60    	and.w     w1, w0, w0
    4e3e:	00 f0 a7    	btsc.w    w0, #0xf
    4e40:	00 00 ea    	neg.w     w0, w0
    4e42:	00 00 ea    	neg.w     w0, w0
    4e44:	4f 00 de    	lsr.w     w0, #0xf, w0

00004e46 <.LSM44>:
}
    4e46:	00 80 fa    	ulnk      
    4e48:	00 00 06    	return    
Disassembly of section .dinit:

00004e4a <.dinit>:
    4e4a:	54 08 00    	nop       
    4e4c:	80 08 00    	nop       
    4e4e:	80 00 00    	nop       
    4e50:	42 08 00    	nop       
    4e52:	0e 00 00    	nop       
    4e54:	80 00 00    	nop       
    4e56:	d4 10 00    	nop       
    4e58:	b8 01 00    	nop       
    4e5a:	80 00 00    	nop       
    4e5c:	00 08 00    	nop       
    4e5e:	30 00 00    	nop       
    4e60:	80 00 00    	nop       
    4e62:	80 16 00    	nop       
    4e64:	10 00 00    	nop       
    4e66:	82 00 00    	nop       
    4e68:	bd 37 86    	mov.w     0xc6f6, w13
    4e6a:	33 bd 37    	bra       0xffffc8d2
    4e6c:	06 35 bd    	subr.w    0x1506
    4e6e:	37 86 36    	bra       LEU, 0xffff5ade
    4e70:	bd 37 86    	mov.w     0xc6f6, w13
    4e72:	37 00 00    	nop       
    4e74:	bc 14 00    	nop       
    4e76:	6e 00 00    	nop       
    4e78:	80 00 00    	nop       
    4e7a:	8c 12 00    	nop       
    4e7c:	1c 01 00    	nop       
    4e7e:	80 00 00    	nop       
    4e80:	50 08 00    	nop       
    4e82:	04 00 00    	nop       
    4e84:	80 00 00    	nop       
    4e86:	30 14 00    	nop       
    4e88:	8c 00 00    	nop       
    4e8a:	80 00 00    	nop       
    4e8c:	00 16 00    	nop       
    4e8e:	80 00 00    	nop       
    4e90:	80 00 00    	nop       
    4e92:	30 08 00    	nop       
    4e94:	12 00 00    	nop       
    4e96:	80 00 00    	nop       
    4e98:	fe 15 00    	nop       
    4e9a:	02 00 00    	nop       
    4e9c:	82 00 00    	nop       
    4e9e:	04 00 00    	nop       
    4ea0:	fa 15 00    	nop       
    4ea2:	04 00 00    	nop       
    4ea4:	80 00 00    	nop       
    4ea6:	a8 13 00    	nop       
    4ea8:	88 00 00    	nop       
    4eaa:	82 00 00    	nop       
    4eac:	01 00 00    	nop       
    4eae:	00 ce 13    	subr.b    w7, w0, [w12]
    4eb0:	cf 13 ce    	max       A
    4eb2:	13 ce 13    	subr.b    w7, [w3], [w12]
    4eb4:	ce 13 ce    	max       A
    4eb6:	13 be 13    	.pword 0x13be13
	...
    4ec6:	00 02 08    	do        #0x200, 0x50cc
    4ec8:	01 01 f6 
    4eca:	13 f7 13    	.pword 0x13f713
    4ecc:	f6 13 f6    	.pword 0xf613f6
    4ece:	13 f6 13    	.pword 0x13f613
    4ed0:	f6 13 e6    	.pword 0xe613f6
    4ed2:	13 00 00    	nop       
	...
    4ee0:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207b018>
    4ee2:	08 02 02 
    4ee4:	1e 14 1f    	subbr.w   w14, [w14], [w8--]
    4ee6:	14 1e 14    	subr.w    w8, [w4], [w12++]
    4ee8:	1e 14 1e    	subbr.w   w12, [w14], [w8--]
    4eea:	14 1e 14    	subr.w    w8, [w4], [w12++]
    4eec:	0e 14 00    	nop       
	...
    4efc:	a8 13 d0    	sl.w      [w8--], [w7--]
    4efe:	13 f8 13    	.pword 0x13f813
	...
    4f08:	2a 15 00    	nop       
    4f0a:	4a 00 00    	nop       
    4f0c:	82 00 00    	nop       
    4f0e:	30 31 32    	bra       Z, 0xb170
    4f10:	33 34 35    	bra       LT, 0xb778
    4f12:	36 37 38    	bra       NOV, 0xbd80
    4f14:	39 61 62    	and.b     w4, [w9++], [--w2]
    4f16:	63 64 65    	and.b     w10, #0x3, [--w8]
    4f18:	66 67 68    	xor.b     w0, #0x6, [--w14]
    4f1a:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    4f1c:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    4f1e:	6f 70 71    	.pword 0x71706f
    4f20:	72 73 74    	.pword 0x747372
    4f22:	75 76 77    	.pword 0x777675
    4f24:	78 79 7a    	.pword 0x7a7978
    4f26:	00 00 00    	nop       
    4f28:	21 15 11    	subr.w    w2, [w1--], [w10--]
    4f2a:	0e 0d 0c    	bra       OA, 0x6948
    4f2c:	0b 0b 0a    	bfins     #0xb, #0x0, w9, w10
    4f2e:	0a 09 09 
    4f30:	09 09 09    	repeat    #0x909
    4f32:	08 08 08    	do        #0x808, 0x5f46
    4f34:	08 08 08 
    4f36:	08 07 07    	rcall     0x5d48
    4f38:	07 07 07    	rcall     0x5d48
    4f3a:	07 07 07    	rcall     0x5d4a
    4f3c:	07 07 07    	rcall     0x5d4c
    4f3e:	07 07 00    	nop       
    4f40:	74 15 00    	nop       
    4f42:	4a 00 00    	nop       
    4f44:	82 00 00    	nop       
    4f46:	30 31 32    	bra       Z, 0xb1a8
    4f48:	33 34 35    	bra       LT, 0xb7b0
    4f4a:	36 37 38    	bra       NOV, 0xbdb8
    4f4c:	39 61 62    	and.b     w4, [w9++], [--w2]
    4f4e:	63 64 65    	and.b     w10, #0x3, [--w8]
    4f50:	66 67 68    	xor.b     w0, #0x6, [--w14]
    4f52:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    4f54:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    4f56:	6f 70 71    	.pword 0x71706f
    4f58:	72 73 74    	.pword 0x747372
    4f5a:	75 76 77    	.pword 0x777675
    4f5c:	78 79 7a    	.pword 0x7a7978
    4f5e:	00 00 00    	nop       
    4f60:	41 29 21    	mov.w     #0x1294, w1
    4f62:	1c 19 17    	subr.w    w14, [w12], [w2++]
    4f64:	16 15 14    	subr.w    w8, [w6], [w10--]
    4f66:	13 12 12    	subr.w    w4, [w3], [w4--]
    4f68:	11 11 11    	subr.w    w2, [w1], [w2--]
    4f6a:	10 10 10    	subr.w    w0, [w0], [w0--]
    4f6c:	0f 0f 0f    	bra       SB, 0x6d8c
    4f6e:	0f 0e 0e    	bra       SA, 0x6b8e
    4f70:	0e 0e 0e    	bra       SA, 0x6b8e
    4f72:	0e 0e 0d    	bra       OB, 0x6b90
    4f74:	0d 0d 0d    	bra       OB, 0x6990
    4f76:	0d 0d 00    	nop       
    4f78:	90 16 00    	nop       
    4f7a:	04 00 00    	nop       
    4f7c:	80 00 00    	nop       
    4f7e:	e0 15 00    	nop       
    4f80:	1a 00 00    	nop       
    4f82:	82 00 00    	nop       
    4f84:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    4f86:	74 7a 4c    	.pword 0x4c7a74
    4f88:	00 00 01    	call      w0
    4f8a:	00 02 00    	nop       
    4f8c:	04 00 08    	do        #0x4, 0x6f90
    4f8e:	00 10 00 
    4f90:	00 00 20    	mov.w     #0x0, w0
    4f92:	2b 2d 23    	mov.w     #0x32d2, w11
    4f94:	30 00 00    	nop       
    4f96:	be 15 00    	nop       
    4f98:	22 00 00    	nop       
    4f9a:	82 00 00    	nop       
    4f9c:	30 31 32    	bra       Z, 0xb1fe
    4f9e:	33 34 35    	bra       LT, 0xb806
    4fa0:	36 37 38    	bra       NOV, 0xbe0e
    4fa2:	39 41 42    	add.b     w4, [w9++], w2
    4fa4:	43 44 45    	add.b     w10, [--w3], w8
    4fa6:	46 00 30    	bra       OV, 0x5034
    4fa8:	31 32 33    	bra       N, 0xb40c
    4faa:	34 35 36    	bra       LEU, 0xba14
    4fac:	37 38 39    	bra       NC, 0xc01c
    4fae:	61 62 63    	and.b     w6, #0x1, [--w4]
    4fb0:	64 65 66    	and.b     w12, #0x4, [--w10]
    4fb2:	00 00 00    	nop       
    4fb4:	94 16 00    	nop       
    4fb6:	02 00 00    	nop       
    4fb8:	80 00 00    	nop       
    4fba:	96 16 00    	nop       
    4fbc:	02 00 00    	nop       
    4fbe:	80 00 00    	nop       
    4fc0:	00 00 00    	nop       
Disassembly of section .text:

00004fc2 <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    4fc2:	02 00 fa    	lnk       #0x2
    4fc4:	00 0f 78    	mov.w     w0, [w14]

00004fc6 <.LSM1>:
    v ^= v >> 8;
    4fc6:	1e 00 78    	mov.w     [w14], w0
    4fc8:	48 00 de    	lsr.w     w0, #0x8, w0
    4fca:	1e 0f 68    	xor.w     w0, [w14], [w14]

00004fcc <.LSM2>:
    v ^= v >> 4;
    4fcc:	1e 00 78    	mov.w     [w14], w0
    4fce:	44 00 de    	lsr.w     w0, #0x4, w0
    4fd0:	1e 0f 68    	xor.w     w0, [w14], [w14]

00004fd2 <.LSM3>:
    v ^= v >> 2;
    4fd2:	1e 00 78    	mov.w     [w14], w0
    4fd4:	42 00 de    	lsr.w     w0, #0x2, w0
    4fd6:	1e 0f 68    	xor.w     w0, [w14], [w14]

00004fd8 <.LSM4>:
    v ^= v >> 1;
    4fd8:	1e 00 78    	mov.w     [w14], w0
    4fda:	00 00 d1    	lsr.w     w0, w0
    4fdc:	1e 0f 68    	xor.w     w0, [w14], [w14]

00004fde <.LSM5>:
    return v & 1;
    4fde:	1e 00 78    	mov.w     [w14], w0
    4fe0:	00 40 78    	mov.b     w0, w0
    4fe2:	61 40 60    	and.b     w0, #0x1, w0

00004fe4 <.LSM6>:
}
    4fe4:	00 80 fa    	ulnk      
    4fe6:	00 00 06    	return    
Disassembly of section .isr:

00004fe8 <__DefaultInterrupt>:
    4fe8:	00 40 da    	.pword 0xda4000
    4fea:	00 00 fe    	reset     
