
rocket_main.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	2f 4a 21    	mov.w     #0x14a2, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	00 1e 24    	mov.w     #0x41e0, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	7a 41 02    	call      0x417a <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	c0 00 20    	mov.w     #0xc, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	b4 39 04    	goto      0x39b4 <___digitalRead>
    11e4:	00 00 00 
    11e6:	70 39 04    	goto      0x3970 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	d6 39 04    	goto      0x39d6 <___analogRead>
    11ec:	00 00 00 
    11ee:	f6 26 04    	goto      0x26f6 <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	38 27 04    	goto      0x2738 <___putc_buffer>
    11f4:	00 00 00 
    11f6:	1a 27 04    	goto      0x271a <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	30 28 04    	goto      0x2830 <___getc_buffer>
    11fc:	00 00 00 
    11fe:	5c 19 04    	goto      0x195c <_prout>
    1200:	00 00 00 
    1202:	c0 23 04    	goto      0x23c0 <_closeall>
    1204:	00 00 00 
    1206:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    1208:	00 00 00 

0000120a <_close>:
    120a:	0a 00 fa    	lnk       #0xa
    120c:	11 00 20    	mov.w     #0x1, w1
    120e:	b1 bf 9f    	mov.w     w1, [w15-10]
    1210:	c0 bf 9f    	mov.w     w0, [w15-8]
    1212:	6a 80 57    	sub.w     w15, #0xa, w0
    1214:	f1 08 07    	rcall     0x23f8 <_doclose>
    1216:	4f b8 97    	mov.w     [w15-8], w0
    1218:	00 80 fa    	ulnk      
    121a:	00 00 06    	return    

0000121c <_remove>:
    121c:	0a 00 fa    	lnk       #0xa
    121e:	51 00 20    	mov.w     #0x5, w1
    1220:	b1 bf 9f    	mov.w     w1, [w15-10]
    1222:	c0 bf 9f    	mov.w     w0, [w15-8]
    1224:	6a 80 57    	sub.w     w15, #0xa, w0
    1226:	ea 08 07    	rcall     0x23fc <_doremove>
    1228:	5f b8 97    	mov.w     [w15-6], w0
    122a:	00 80 fa    	ulnk      
    122c:	00 00 06    	return    

0000122e <_sbrk>:
    122e:	88 9f be    	mov.d     w8, [w15++]
    1230:	80 04 78    	mov.w     w0, w9
    1232:	00 a5 80    	mov.w     0x14a0, w0
    1234:	00 00 e0    	cp0.w     w0
    1236:	04 00 3a    	bra       NZ, 0x1240 <.L2>
    1238:	0e 00 07    	rcall     0x1256 <_brk>
    123a:	00 84 eb    	setm.w    w8
    123c:	00 00 e0    	cp0.w     w0
    123e:	08 00 35    	bra       LT, 0x1250 <.L3>

00001240 <.L2>:
    1240:	08 a5 80    	mov.w     0x14a0, w8
    1242:	09 00 e0    	cp0.w     w9
    1244:	05 00 32    	bra       Z, 0x1250 <.L3>
    1246:	09 00 44    	add.w     w8, w9, w0
    1248:	06 00 07    	rcall     0x1256 <_brk>
    124a:	00 00 e0    	cp0.w     w0
    124c:	01 00 3d    	bra       GE, 0x1250 <.L3>
    124e:	00 84 eb    	setm.w    w8

00001250 <.L3>:
    1250:	08 00 78    	mov.w     w8, w0
    1252:	4f 04 be    	mov.d     [--w15], w8
    1254:	00 00 06    	return    

00001256 <_brk>:
    1256:	80 00 78    	mov.w     w0, w1
    1258:	01 00 e0    	cp0.w     w1
    125a:	03 00 3a    	bra       NZ, 0x1262 <.L2>
    125c:	00 00 20    	mov.w     #0x0, w0
    125e:	00 a5 88    	mov.w     w0, 0x14a0
    1260:	00 00 05    	retlw.w   #0x0, w0

00001262 <.L2>:
    1262:	00 80 eb    	setm.w    w0
    1264:	02 00 20    	mov.w     #0x0, w2
    1266:	82 8f 50    	sub.w     w1, w2, [w15]
    1268:	02 00 3e    	bra       GTU, 0x126e <.L3>
    126a:	01 a5 88    	mov.w     w1, 0x14a0
    126c:	00 00 eb    	clr.w     w0

0000126e <.L3>:
    126e:	00 00 06    	return    

00001270 <___subsf3>:
    1270:	03 f0 a2    	btg.w     w3, #0xf

00001272 <___addsf3>:
    1272:	88 9f be    	mov.d     w8, [w15++]
    1274:	8a 9f be    	mov.d     w10, [w15++]
    1276:	8c 1f 78    	mov.w     w12, [w15++]
    1278:	f7 00 07    	rcall     0x1468 <__funpack2>
    127a:	fe 00 33    	bra       N, 0x1478 <__fPropagateNaN>
    127c:	64 50 e1    	cp.w      w10, #0x4
    127e:	4f 00 32    	bra       Z, 0x131e <aisinfinite>

00001280 <checkspecialb>:
    1280:	64 20 e1    	cp.w      w4, #0x4
    1282:	52 00 32    	bra       Z, 0x1328 <return2>
    1284:	03 82 6c    	xor.w     w9, w3, w4
    1286:	07 00 3b    	bra       NN, 0x1296 <getsign>
    1288:	09 05 d0    	sl.w      w9, w10
    128a:	03 06 d0    	sl.w      w3, w12
    128c:	82 0f 54    	sub.w     w8, w2, [w15]
    128e:	0c 06 5d    	subb.w    w10, w12, w12
    1290:	02 00 39    	bra       NC, 0x1296 <getsign>
    1292:	02 00 32    	bra       Z, 0x1298 <gotsign>
    1294:	89 01 78    	mov.w     w9, w3

00001296 <getsign>:
    1296:	03 06 78    	mov.w     w3, w12

00001298 <gotsign>:
    1298:	85 82 55    	sub.w     w11, w5, w5
    129a:	04 00 3d    	bra       GE, 0x12a4 <expcanonical>
    129c:	00 03 fd    	exch      w0, w6
    129e:	81 03 fd    	exch      w1, w7
    12a0:	85 02 ea    	neg.w     w5, w5
    12a2:	8b 85 42    	add.w     w5, w11, w11

000012a4 <expcanonical>:
    12a4:	84 0f 72    	ior.w     w4, w4, [w15]
    12a6:	02 00 3b    	bra       NN, 0x12ac <nonegate>
    12a8:	60 00 10    	subr.w    w0, #0x0, w0
    12aa:	e0 80 18    	subbr.w   w1, #0x0, w1

000012ac <nonegate>:
    12ac:	60 11 b8    	mul.uu    w2, #0x0, w2
    12ae:	00 05 eb    	clr.w     w10
    12b0:	7a 28 e1    	cp.w      w5, #0x1a
    12b2:	0a 00 39    	bra       NC, 0x12c8 <aligniter>
    12b4:	06 00 78    	mov.w     w6, w0
    12b6:	c7 5d dd    	sl.w      w11, #0x7, w11
    12b8:	f7 07 b2    	and.w     #0x7f, w7
    12ba:	87 80 75    	ior.w     w11, w7, w1
    12bc:	2d 00 37    	bra       0x1318 <signoff>

000012be <align>:
    12be:	82 81 71    	ior.w     w3, w2, w3
    12c0:	0a 01 78    	mov.w     w10, w2
    12c2:	61 05 60    	and.w     w0, #0x1, w10
    12c4:	81 80 d1    	asr.w     w1, w1
    12c6:	00 80 d3    	rrc.w     w0, w0

000012c8 <aligniter>:
    12c8:	85 02 e9    	dec.w     w5, w5
    12ca:	f9 ff 3b    	bra       NN, 0x12be <align>

000012cc <aligned>:
    12cc:	06 04 40    	add.w     w0, w6, w8
    12ce:	87 84 48    	addc.w    w1, w7, w9
    12d0:	02 00 3b    	bra       NN, 0x12d6 <normalizesum>
    12d2:	60 04 14    	subr.w    w8, #0x0, w8
    12d4:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012d6 <normalizesum>:
    12d6:	09 88 a3    	btst.z    w9, #0x8
    12d8:	07 00 32    	bra       Z, 0x12e8 <checknormal>
    12da:	8a 81 71    	ior.w     w3, w10, w3
    12dc:	82 81 71    	ior.w     w3, w2, w3
    12de:	61 01 64    	and.w     w8, #0x1, w2
    12e0:	89 04 d1    	lsr.w     w9, w9
    12e2:	08 84 d3    	rrc.w     w8, w8
    12e4:	8b 05 e8    	inc.w     w11, w11
    12e6:	17 00 37    	bra       0x1316 <round>

000012e8 <checknormal>:
    12e8:	09 78 a3    	btst.z    w9, #0x7
    12ea:	13 00 3a    	bra       NZ, 0x1312 <discardguard>

000012ec <underflow>:
    12ec:	0b 00 e0    	cp0.w     w11
    12ee:	13 00 34    	bra       LE, 0x1316 <round>
    12f0:	8b 05 e9    	dec.w     w11, w11
    12f2:	08 04 44    	add.w     w8, w8, w8
    12f4:	89 84 4c    	addc.w    w9, w9, w9
    12f6:	0a 44 74    	ior.b     w8, w10, w8
    12f8:	09 78 a3    	btst.z    w9, #0x7
    12fa:	0d 00 3a    	bra       NZ, 0x1316 <round>

000012fc <normalizeloop>:
    12fc:	0b 00 e0    	cp0.w     w11
    12fe:	07 00 34    	bra       LE, 0x130e <normalizeexit>
    1300:	8b 05 e9    	dec.w     w11, w11
    1302:	08 04 44    	add.w     w8, w8, w8
    1304:	89 84 4c    	addc.w    w9, w9, w9
    1306:	01 00 3a    	bra       NZ, 0x130a <normalizetest>
    1308:	0b 00 20    	mov.w     #0x0, w11

0000130a <normalizetest>:
    130a:	09 78 a3    	btst.z    w9, #0x7
    130c:	f7 ff 32    	bra       Z, 0x12fc <normalizeloop>

0000130e <normalizeexit>:
    130e:	00 01 eb    	clr.w     w2
    1310:	02 00 37    	bra       0x1316 <round>

00001312 <discardguard>:
    1312:	82 81 71    	ior.w     w3, w2, w3
    1314:	0a 01 78    	mov.w     w10, w2

00001316 <round>:
    1316:	6d 00 07    	rcall     0x13f2 <__fpack>

00001318 <signoff>:
    1318:	0c f0 a7    	btsc.w    w12, #0xf
    131a:	01 f0 a0    	bset.w    w1, #0xf
    131c:	b6 00 37    	bra       0x148a <__fbopExit>

0000131e <aisinfinite>:
    131e:	64 20 e1    	cp.w      w4, #0x4
    1320:	02 00 3a    	bra       NZ, 0x1326 <return8>
    1322:	83 8f 6c    	xor.w     w9, w3, [w15]
    1324:	b6 00 33    	bra       N, 0x1492 <__fbopReturnNaN>

00001326 <return8>:
    1326:	08 01 be    	mov.d     w8, w2

00001328 <return2>:
    1328:	02 00 be    	mov.d     w2, w0
    132a:	af 00 37    	bra       0x148a <__fbopExit>

0000132c <___divsf3>:
    132c:	88 9f be    	mov.d     w8, [w15++]
    132e:	8a 9f be    	mov.d     w10, [w15++]
    1330:	8c 1f 78    	mov.w     w12, [w15++]
    1332:	9a 00 07    	rcall     0x1468 <__funpack2>
    1334:	a1 00 33    	bra       N, 0x1478 <__fPropagateNaN>
    1336:	03 86 6c    	xor.w     w9, w3, w12
    1338:	64 50 e1    	cp.w      w10, #0x4
    133a:	2e 00 32    	bra       Z, 0x1398 <aisinfinite>
    133c:	64 20 e1    	cp.w      w4, #0x4
    133e:	33 00 32    	bra       Z, 0x13a6 <returnZero>
    1340:	61 50 e1    	cp.w      w10, #0x1
    1342:	2f 00 32    	bra       Z, 0x13a2 <aiszero>
    1344:	61 20 e1    	cp.w      w4, #0x1
    1346:	31 00 32    	bra       Z, 0x13aa <returnInf>

00001348 <finitenonzero>:
    1348:	85 85 55    	sub.w     w11, w5, w11
    134a:	eb 07 b0    	add.w     #0x7e, w11
    134c:	09 00 20    	mov.w     #0x0, w9
    134e:	08 04 20    	mov.w     #0x40, w8
    1350:	05 00 37    	bra       0x135c <diventry>

00001352 <divnext>:
    1352:	08 04 44    	add.w     w8, w8, w8
    1354:	89 84 4c    	addc.w    w9, w9, w9
    1356:	0a 00 31    	bra       C, 0x136c <divdone>

00001358 <divloop>:
    1358:	06 03 43    	add.w     w6, w6, w6
    135a:	87 83 4b    	addc.w    w7, w7, w7

0000135c <diventry>:
    135c:	00 01 53    	sub.w     w6, w0, w2
    135e:	81 81 5b    	subb.w    w7, w1, w3
    1360:	f8 ff 33    	bra       N, 0x1352 <divnext>
    1362:	02 03 be    	mov.d     w2, w6
    1364:	08 00 a0    	bset.w    w8, #0x0
    1366:	08 04 44    	add.w     w8, w8, w8
    1368:	89 84 4c    	addc.w    w9, w9, w9
    136a:	f6 ff 39    	bra       NC, 0x1358 <divloop>

0000136c <divdone>:
    136c:	c6 39 dd    	sl.w      w7, #0x6, w3
    136e:	83 01 73    	ior.w     w6, w3, w3
    1370:	01 00 32    	bra       Z, 0x1374 <stickyok>
    1372:	13 00 20    	mov.w     #0x1, w3

00001374 <stickyok>:
    1374:	89 04 d1    	lsr.w     w9, w9
    1376:	08 84 d3    	rrc.w     w8, w8
    1378:	09 98 a3    	btst.z    w9, #0x9
    137a:	05 00 32    	bra       Z, 0x1386 <guardused>
    137c:	08 00 a7    	btsc.w    w8, #0x0
    137e:	03 00 a0    	bset.w    w3, #0x0
    1380:	89 04 d1    	lsr.w     w9, w9
    1382:	08 84 d3    	rrc.w     w8, w8
    1384:	8b 05 e8    	inc.w     w11, w11

00001386 <guardused>:
    1386:	89 04 d1    	lsr.w     w9, w9
    1388:	08 84 d3    	rrc.w     w8, w8
    138a:	00 01 eb    	clr.w     w2
    138c:	02 81 d2    	rlc.w     w2, w2
    138e:	31 00 07    	rcall     0x13f2 <__fpack>

00001390 <return0>:
    1390:	01 f0 a1    	bclr.w    w1, #0xf
    1392:	0c f0 a7    	btsc.w    w12, #0xf
    1394:	01 f0 a0    	bset.w    w1, #0xf
    1396:	79 00 37    	bra       0x148a <__fbopExit>

00001398 <aisinfinite>:
    1398:	64 20 e1    	cp.w      w4, #0x4
    139a:	7b 00 32    	bra       Z, 0x1492 <__fbopReturnNaN>

0000139c <return8>:
    139c:	08 01 be    	mov.d     w8, w2

0000139e <return2>:
    139e:	02 00 be    	mov.d     w2, w0
    13a0:	f7 ff 37    	bra       0x1390 <return0>

000013a2 <aiszero>:
    13a2:	61 20 e1    	cp.w      w4, #0x1
    13a4:	76 00 32    	bra       Z, 0x1492 <__fbopReturnNaN>

000013a6 <returnZero>:
    13a6:	60 00 b8    	mul.uu    w0, #0x0, w0
    13a8:	f3 ff 37    	bra       0x1390 <return0>

000013aa <returnInf>:
    13aa:	00 00 20    	mov.w     #0x0, w0
    13ac:	01 f8 27    	mov.w     #0x7f80, w1
    13ae:	f0 ff 37    	bra       0x1390 <return0>

000013b0 <___eqsf2>:
    13b0:	14 00 20    	mov.w     #0x1, w4
    13b2:	a6 00 37    	bra       0x1500 <__fcompare>

000013b4 <___gesf2>:
    13b4:	f4 ff 2f    	mov.w     #0xffff, w4
    13b6:	a4 00 37    	bra       0x1500 <__fcompare>

000013b8 <___fixunssfsi>:
    13b8:	00 01 be    	mov.d     w0, w2
    13ba:	41 00 07    	rcall     0x143e <__funpack>
    13bc:	04 70 a7    	btsc.w    w4, #0x7
    13be:	03 f0 a1    	bclr.w    w3, #0xf
    13c0:	03 f8 a3    	btst.z    w3, #0xf
    13c2:	13 00 3a    	bra       NZ, 0x13ea <returnzero>
    13c4:	65 09 b1    	sub.w     #0x96, w5
    13c6:	10 00 32    	bra       Z, 0x13e8 <exit>
    13c8:	09 00 35    	bra       LT, 0x13dc <shiftright>
    13ca:	69 28 e1    	cp.w      w5, #0x9
    13cc:	02 00 35    	bra       LT, 0x13d2 <shiftleft>
    13ce:	01 00 28    	mov.w     #0x8000, w1
    13d0:	00 00 05    	retlw.w   #0x0, w0

000013d2 <shiftleft>:
    13d2:	00 00 40    	add.w     w0, w0, w0
    13d4:	81 80 48    	addc.w    w1, w1, w1
    13d6:	85 02 e9    	dec.w     w5, w5
    13d8:	fc ff 3a    	bra       NZ, 0x13d2 <shiftleft>
    13da:	00 00 06    	return    

000013dc <shiftright>:
    13dc:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13de:	05 00 35    	bra       LT, 0x13ea <returnzero>

000013e0 <shiftrightloop>:
    13e0:	81 00 d1    	lsr.w     w1, w1
    13e2:	00 80 d3    	rrc.w     w0, w0
    13e4:	85 02 e8    	inc.w     w5, w5
    13e6:	fc ff 3a    	bra       NZ, 0x13e0 <shiftrightloop>

000013e8 <exit>:
    13e8:	00 00 06    	return    

000013ea <returnzero>:
    13ea:	80 00 eb    	clr.w     w1
    13ec:	00 00 05    	retlw.w   #0x0, w0

000013ee <___floatunsisf>:
    13ee:	60 11 b8    	mul.uu    w2, #0x0, w2
    13f0:	a2 00 37    	bra       0x1536 <___floatundisf>

000013f2 <__fpack>:
    13f2:	81 00 20    	mov.w     #0x8, w1
    13f4:	61 80 55    	sub.w     w11, #0x1, w0
    13f6:	0b 00 3d    	bra       GE, 0x140e <notsubnormal>
    13f8:	0b 00 20    	mov.w     #0x0, w11
    13fa:	61 fe 2f    	mov.w     #0xffe6, w1
    13fc:	01 00 e1    	cp.w      w0, w1
    13fe:	1d 00 34    	bra       LE, 0x143a <zerosig>

00001400 <subnormal>:
    1400:	82 81 71    	ior.w     w3, w2, w3
    1402:	61 01 64    	and.w     w8, #0x1, w2
    1404:	89 04 d1    	lsr.w     w9, w9
    1406:	08 84 d3    	rrc.w     w8, w8
    1408:	00 00 e8    	inc.w     w0, w0
    140a:	fa ff 3a    	bra       NZ, 0x1400 <subnormal>
    140c:	71 00 20    	mov.w     #0x7, w1

0000140e <notsubnormal>:
    140e:	61 00 64    	and.w     w8, #0x1, w0
    1410:	03 00 70    	ior.w     w0, w3, w0
    1412:	02 00 60    	and.w     w0, w2, w0
    1414:	09 00 32    	bra       Z, 0x1428 <packupandgo>
    1416:	61 04 44    	add.w     w8, #0x1, w8
    1418:	e0 84 4c    	addc.w    w9, #0x0, w9
    141a:	09 88 a5    	btst.z    w9, w1
    141c:	05 00 32    	bra       Z, 0x1428 <packupandgo>
    141e:	8b 05 e8    	inc.w     w11, w11
    1420:	68 08 e1    	cp.w      w1, #0x8
    1422:	02 00 3a    	bra       NZ, 0x1428 <packupandgo>
    1424:	89 04 d1    	lsr.w     w9, w9
    1426:	08 84 d3    	rrc.w     w8, w8

00001428 <packupandgo>:
    1428:	f2 0f 20    	mov.w     #0xff, w2
    142a:	02 58 e1    	cp.w      w11, w2
    142c:	05 00 3d    	bra       GE, 0x1438 <overflow>
    142e:	c7 5d dd    	sl.w      w11, #0x7, w11
    1430:	f9 07 b2    	and.w     #0x7f, w9
    1432:	89 80 75    	ior.w     w11, w9, w1
    1434:	08 00 78    	mov.w     w8, w0
    1436:	00 00 06    	return    

00001438 <overflow>:
    1438:	0b f8 27    	mov.w     #0x7f80, w11

0000143a <zerosig>:
    143a:	8b 00 78    	mov.w     w11, w1
    143c:	00 00 05    	retlw.w   #0x0, w0

0000143e <__funpack>:
    143e:	c7 0a de    	lsr.w     w1, #0x7, w5
    1440:	f1 07 b2    	and.w     #0x7f, w1
    1442:	f5 0f b2    	and.w     #0xff, w5
    1444:	08 00 32    	bra       Z, 0x1456 <zeroorsub>
    1446:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1448:	02 00 32    	bra       Z, 0x144e <nanorinf>

0000144a <finitereturn>:
    144a:	01 70 a0    	bset.w    w1, #0x7
    144c:	24 00 05    	retlw.w   #0x2, w4

0000144e <nanorinf>:
    144e:	81 0f 70    	ior.w     w0, w1, [w15]
    1450:	01 00 32    	bra       Z, 0x1454 <infinite>
    1452:	04 08 05    	retlw.w   #0x80, w4

00001454 <infinite>:
    1454:	44 00 05    	retlw.w   #0x4, w4

00001456 <zeroorsub>:
    1456:	81 0f 70    	ior.w     w0, w1, [w15]
    1458:	02 00 3a    	bra       NZ, 0x145e <subnormal>
    145a:	14 00 05    	retlw.w   #0x1, w4

0000145c <normalize>:
    145c:	85 02 e9    	dec.w     w5, w5

0000145e <subnormal>:
    145e:	00 00 40    	add.w     w0, w0, w0
    1460:	81 c0 48    	addc.b    w1, w1, w1
    1462:	fc ff 3b    	bra       NN, 0x145c <normalize>
    1464:	01 70 a0    	bset.w    w1, #0x7
    1466:	24 00 05    	retlw.w   #0x2, w4

00001468 <__funpack2>:
    1468:	00 04 be    	mov.d     w0, w8
    146a:	e9 ff 07    	rcall     0x143e <__funpack>
    146c:	00 03 be    	mov.d     w0, w6
    146e:	04 05 be    	mov.d     w4, w10
    1470:	02 00 be    	mov.d     w2, w0
    1472:	e5 ff 07    	rcall     0x143e <__funpack>
    1474:	84 4f 75    	ior.b     w10, w4, [w15]
    1476:	00 00 06    	return    

00001478 <__fPropagateNaN>:
    1478:	02 00 be    	mov.d     w2, w0
    147a:	64 50 e1    	cp.w      w10, #0x4
    147c:	05 00 36    	bra       LEU, 0x1488 <return0>
    147e:	64 20 e1    	cp.w      w4, #0x4
    1480:	02 00 36    	bra       LEU, 0x1486 <return8>
    1482:	09 68 a3    	btst.z    w9, #0x6
    1484:	01 00 3a    	bra       NZ, 0x1488 <return0>

00001486 <return8>:
    1486:	08 00 be    	mov.d     w8, w0

00001488 <return0>:
    1488:	01 60 a0    	bset.w    w1, #0x6

0000148a <__fbopExit>:
    148a:	4f 06 78    	mov.w     [--w15], w12
    148c:	4f 05 be    	mov.d     [--w15], w10
    148e:	4f 04 be    	mov.d     [--w15], w8
    1490:	00 00 06    	return    

00001492 <__fbopReturnNaN>:
    1492:	f0 ff 2f    	mov.w     #0xffff, w0
    1494:	f1 ff 27    	mov.w     #0x7fff, w1
    1496:	f9 ff 37    	bra       0x148a <__fbopExit>

00001498 <___mulsf3>:
    1498:	88 9f be    	mov.d     w8, [w15++]
    149a:	8a 9f be    	mov.d     w10, [w15++]
    149c:	8c 1f 78    	mov.w     w12, [w15++]
    149e:	e4 ff 07    	rcall     0x1468 <__funpack2>
    14a0:	eb ff 33    	bra       N, 0x1478 <__fPropagateNaN>
    14a2:	03 86 6c    	xor.w     w9, w3, w12
    14a4:	64 50 e1    	cp.w      w10, #0x4
    14a6:	24 00 32    	bra       Z, 0x14f0 <aisinfinite>
    14a8:	64 20 e1    	cp.w      w4, #0x4
    14aa:	27 00 32    	bra       Z, 0x14fa <bisinfinite>
    14ac:	61 50 e1    	cp.w      w10, #0x1
    14ae:	22 00 32    	bra       Z, 0x14f4 <return8>
    14b0:	61 20 e1    	cp.w      w4, #0x1
    14b2:	21 00 32    	bra       Z, 0x14f6 <return2>
    14b4:	8b 85 42    	add.w     w5, w11, w11
    14b6:	eb 07 b1    	sub.w     #0x7e, w11
    14b8:	01 34 b8    	mul.uu    w6, w1, w8
    14ba:	00 3a b8    	mul.uu    w7, w0, w4
    14bc:	08 04 42    	add.w     w4, w8, w8
    14be:	89 84 4a    	addc.w    w5, w9, w9
    14c0:	01 3a b8    	mul.uu    w7, w1, w4
    14c2:	00 30 b8    	mul.uu    w6, w0, w0
    14c4:	88 80 40    	add.w     w1, w8, w1
    14c6:	09 01 4a    	addc.w    w4, w9, w2
    14c8:	04 00 33    	bra       N, 0x14d2 <formsticky>
    14ca:	00 00 40    	add.w     w0, w0, w0
    14cc:	81 80 48    	addc.w    w1, w1, w1
    14ce:	02 01 49    	addc.w    w2, w2, w2
    14d0:	8b 05 e9    	dec.w     w11, w11

000014d2 <formsticky>:
    14d2:	c9 09 dd    	sl.w      w1, #0x9, w3
    14d4:	83 01 70    	ior.w     w0, w3, w3
    14d6:	01 00 32    	bra       Z, 0x14da <formRandSig>
    14d8:	13 00 20    	mov.w     #0x1, w3

000014da <formRandSig>:
    14da:	c8 14 de    	lsr.w     w2, #0x8, w9
    14dc:	48 14 dd    	sl.w      w2, #0x8, w8
    14de:	47 09 de    	lsr.w     w1, #0x7, w2
    14e0:	12 00 b2    	and.w     #0x1, w2
    14e2:	c8 08 de    	lsr.w     w1, #0x8, w1
    14e4:	08 84 70    	ior.w     w1, w8, w8
    14e6:	85 ff 07    	rcall     0x13f2 <__fpack>

000014e8 <return0>:
    14e8:	01 f0 a1    	bclr.w    w1, #0xf
    14ea:	0c f0 a7    	btsc.w    w12, #0xf
    14ec:	01 f0 a0    	bset.w    w1, #0xf
    14ee:	cd ff 37    	bra       0x148a <__fbopExit>

000014f0 <aisinfinite>:
    14f0:	61 20 e1    	cp.w      w4, #0x1
    14f2:	cf ff 32    	bra       Z, 0x1492 <__fbopReturnNaN>

000014f4 <return8>:
    14f4:	08 01 be    	mov.d     w8, w2

000014f6 <return2>:
    14f6:	02 00 be    	mov.d     w2, w0
    14f8:	f7 ff 37    	bra       0x14e8 <return0>

000014fa <bisinfinite>:
    14fa:	61 50 e1    	cp.w      w10, #0x1
    14fc:	fc ff 3a    	bra       NZ, 0x14f6 <return2>
    14fe:	c9 ff 37    	bra       0x1492 <__fbopReturnNaN>

00001500 <__fcompare>:
    1500:	88 9f be    	mov.d     w8, [w15++]
    1502:	8a 9f be    	mov.d     w10, [w15++]
    1504:	84 1f 78    	mov.w     w4, [w15++]
    1506:	b0 ff 07    	rcall     0x1468 <__funpack2>
    1508:	4f 00 78    	mov.w     [--w15], w0
    150a:	11 00 33    	bra       N, 0x152e <exit>
    150c:	f0 ff 2f    	mov.w     #0xffff, w0
    150e:	83 8f 6c    	xor.w     w9, w3, [w15]
    1510:	06 00 3b    	bra       NN, 0x151e <comparemag>
    1512:	04 05 65    	and.w     w10, w4, w10
    1514:	0a 00 a7    	btsc.w    w10, #0x0
    1516:	08 00 37    	bra       0x1528 <returnEqual>
    1518:	09 f0 a6    	btss.w    w9, #0xf
    151a:	10 00 20    	mov.w     #0x1, w0
    151c:	08 00 37    	bra       0x152e <exit>

0000151e <comparemag>:
    151e:	82 0f 54    	sub.w     w8, w2, [w15]
    1520:	83 8f 5c    	subb.w    w9, w3, [w15]
    1522:	03 00 39    	bra       NC, 0x152a <adjust>
    1524:	10 00 20    	mov.w     #0x1, w0
    1526:	01 00 3e    	bra       GTU, 0x152a <adjust>

00001528 <returnEqual>:
    1528:	00 00 20    	mov.w     #0x0, w0

0000152a <adjust>:
    152a:	09 f0 a7    	btsc.w    w9, #0xf
    152c:	00 00 ea    	neg.w     w0, w0

0000152e <exit>:
    152e:	4f 05 be    	mov.d     [--w15], w10
    1530:	4f 04 be    	mov.d     [--w15], w8
    1532:	00 00 e0    	cp0.w     w0
    1534:	00 00 06    	return    

00001536 <___floatundisf>:
    1536:	88 9f be    	mov.d     w8, [w15++]
    1538:	8a 9f be    	mov.d     w10, [w15++]
    153a:	00 82 70    	ior.w     w1, w0, w4
    153c:	04 02 71    	ior.w     w2, w4, w4
    153e:	04 82 71    	ior.w     w3, w4, w4
    1540:	26 00 32    	bra       Z, 0x158e <return0>
    1542:	00 04 be    	mov.d     w0, w8
    1544:	02 00 be    	mov.d     w2, w0
    1546:	60 11 b8    	mul.uu    w2, #0x0, w2
    1548:	6b 09 20    	mov.w     #0x96, w11
    154a:	95 02 20    	mov.w     #0x29, w5
    154c:	01 82 cf    	ff1l      w1, w4
    154e:	0a 00 39    	bra       NC, 0x1564 <fixshift>
    1550:	05 41 b1    	sub.b     #0x10, w5
    1552:	00 82 cf    	ff1l      w0, w4
    1554:	07 00 39    	bra       NC, 0x1564 <fixshift>
    1556:	05 41 b1    	sub.b     #0x10, w5
    1558:	09 82 cf    	ff1l      w9, w4
    155a:	04 00 39    	bra       NC, 0x1564 <fixshift>
    155c:	05 41 b1    	sub.b     #0x10, w5
    155e:	08 82 cf    	ff1l      w8, w4
    1560:	01 00 39    	bra       NC, 0x1564 <fixshift>
    1562:	05 41 b1    	sub.b     #0x10, w5

00001564 <fixshift>:
    1564:	05 42 52    	sub.b     w4, w5, w4
    1566:	12 00 32    	bra       Z, 0x158c <round>
    1568:	0a 00 3b    	bra       NN, 0x157e <shiftleft>

0000156a <shiftright>:
    156a:	82 81 71    	ior.w     w3, w2, w3
    156c:	61 01 64    	and.w     w8, #0x1, w2
    156e:	81 00 d1    	lsr.w     w1, w1
    1570:	00 80 d3    	rrc.w     w0, w0
    1572:	89 84 d3    	rrc.w     w9, w9
    1574:	08 84 d3    	rrc.w     w8, w8
    1576:	8b 05 e8    	inc.w     w11, w11
    1578:	04 42 e8    	inc.b     w4, w4
    157a:	f7 ff 3a    	bra       NZ, 0x156a <shiftright>
    157c:	07 00 37    	bra       0x158c <round>

0000157e <shiftleft>:
    157e:	08 04 44    	add.w     w8, w8, w8
    1580:	89 84 4c    	addc.w    w9, w9, w9
    1582:	00 00 48    	addc.w    w0, w0, w0
    1584:	81 80 48    	addc.w    w1, w1, w1
    1586:	8b 05 e9    	dec.w     w11, w11
    1588:	04 42 e9    	dec.b     w4, w4
    158a:	f9 ff 3a    	bra       NZ, 0x157e <shiftleft>

0000158c <round>:
    158c:	32 ff 07    	rcall     0x13f2 <__fpack>

0000158e <return0>:
    158e:	4f 05 be    	mov.d     [--w15], w10
    1590:	4f 04 be    	mov.d     [--w15], w8
    1592:	00 00 06    	return    

00001594 <_findmem>:
    1594:	88 9f be    	mov.d     w8, [w15++]
    1596:	00 04 78    	mov.w     w0, w8

00001598 <.L14>:
    1598:	a1 a4 80    	mov.w     0x1494, w1
    159a:	01 00 e0    	cp0.w     w1
    159c:	02 00 32    	bra       Z, 0x15a2 <.L2>
    159e:	01 00 78    	mov.w     w1, w0
    15a0:	0d 00 37    	bra       0x15bc <.L3>

000015a2 <.L2>:
    15a2:	b1 a4 80    	mov.w     0x1496, w1
    15a4:	60 49 21    	mov.w     #0x1496, w0
    15a6:	04 00 37    	bra       0x15b0 <.L4>

000015a8 <.L6>:
    15a8:	91 0f 54    	sub.w     w8, [w1], [w15]
    15aa:	25 00 36    	bra       LEU, 0x15f6 <.L5>
    15ac:	01 80 e8    	inc2.w    w1, w0
    15ae:	91 00 90    	mov.w     [w1+2], w1

000015b0 <.L4>:
    15b0:	01 00 e0    	cp0.w     w1
    15b2:	fa ff 3a    	bra       NZ, 0x15a8 <.L6>
    15b4:	10 00 37    	bra       0x15d6 <.L7>

000015b6 <.L8>:
    15b6:	92 0f 54    	sub.w     w8, [w2], [w15]
    15b8:	1e 00 36    	bra       LEU, 0x15f6 <.L5>
    15ba:	02 80 e8    	inc2.w    w2, w0

000015bc <.L3>:
    15bc:	10 01 78    	mov.w     [w0], w2
    15be:	02 00 e0    	cp0.w     w2
    15c0:	fa ff 3a    	bra       NZ, 0x15b6 <.L8>
    15c2:	11 01 78    	mov.w     [w1], w2
    15c4:	b1 a4 80    	mov.w     0x1496, w1
    15c6:	60 49 21    	mov.w     #0x1496, w0
    15c8:	04 00 37    	bra       0x15d2 <.L9>

000015ca <.L10>:
    15ca:	91 0f 54    	sub.w     w8, [w1], [w15]
    15cc:	14 00 36    	bra       LEU, 0x15f6 <.L5>
    15ce:	01 80 e8    	inc2.w    w1, w0
    15d0:	91 00 90    	mov.w     [w1+2], w1

000015d2 <.L9>:
    15d2:	82 8f 50    	sub.w     w1, w2, [w15]
    15d4:	fa ff 3a    	bra       NZ, 0x15ca <.L10>

000015d6 <.L7>:
    15d6:	e9 a4 80    	mov.w     0x149c, w9

000015d8 <.L13>:
    15d8:	88 8f 54    	sub.w     w9, w8, [w15]
    15da:	01 00 31    	bra       C, 0x15de <.L11>
    15dc:	88 04 78    	mov.w     w8, w9

000015de <.L11>:
    15de:	09 00 78    	mov.w     w9, w0
    15e0:	b2 00 07    	rcall     0x1746 <__Getmem>
    15e2:	00 00 e0    	cp0.w     w0
    15e4:	04 00 3a    	bra       NZ, 0x15ee <.L12>
    15e6:	88 8f 54    	sub.w     w9, w8, [w15]
    15e8:	05 00 32    	bra       Z, 0x15f4 <.L15>
    15ea:	89 04 d1    	lsr.w     w9, w9
    15ec:	f5 ff 37    	bra       0x15d8 <.L13>

000015ee <.L12>:
    15ee:	09 18 78    	mov.w     w9, [w0++]
    15f0:	08 04 07    	rcall     0x1e02 <_free>
    15f2:	d2 ff 37    	bra       0x1598 <.L14>

000015f4 <.L15>:
    15f4:	00 00 eb    	clr.w     w0

000015f6 <.L5>:
    15f6:	4f 04 be    	mov.d     [--w15], w8
    15f8:	00 00 06    	return    

000015fa <_malloc>:
    15fa:	88 1f 78    	mov.w     w8, [w15++]
    15fc:	63 04 40    	add.w     w0, #0x3, w8
    15fe:	08 00 a1    	bclr.w    w8, #0x0
    1600:	80 00 eb    	clr.w     w1
    1602:	80 0f 54    	sub.w     w8, w0, [w15]
    1604:	21 00 36    	bra       LEU, 0x1648 <.L17>
    1606:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    1608:	01 00 3e    	bra       GTU, 0x160c <.L18>
    160a:	48 00 20    	mov.w     #0x4, w8

0000160c <.L18>:
    160c:	08 00 78    	mov.w     w8, w0
    160e:	c2 ff 07    	rcall     0x1594 <_findmem>
    1610:	80 00 eb    	clr.w     w1
    1612:	00 00 e0    	cp0.w     w0
    1614:	19 00 32    	bra       Z, 0x1648 <.L17>
    1616:	90 00 78    	mov.w     [w0], w1
    1618:	91 01 78    	mov.w     [w1], w3
    161a:	64 81 51    	sub.w     w3, #0x4, w2
    161c:	88 0f 51    	sub.w     w2, w8, [w15]
    161e:	03 00 31    	bra       C, 0x1626 <.L19>
    1620:	11 01 90    	mov.w     [w1+2], w2
    1622:	02 08 78    	mov.w     w2, [w0]
    1624:	07 00 37    	bra       0x1634 <.L20>

00001626 <.L19>:
    1626:	08 81 40    	add.w     w1, w8, w2
    1628:	02 08 78    	mov.w     w2, [w0]
    162a:	91 01 90    	mov.w     [w1+2], w3
    162c:	13 01 98    	mov.w     w3, [w2+2]
    162e:	10 01 78    	mov.w     [w0], w2
    1630:	11 09 14    	subr.w    w8, [w1], [w2]
    1632:	88 08 78    	mov.w     w8, [w1]

00001634 <.L20>:
    1634:	10 01 78    	mov.w     [w0], w2
    1636:	00 00 eb    	clr.w     w0
    1638:	02 00 e0    	cp0.w     w2
    163a:	04 00 32    	bra       Z, 0x1644 <.L21>
    163c:	92 01 90    	mov.w     [w2+2], w3
    163e:	03 00 e0    	cp0.w     w3
    1640:	01 00 32    	bra       Z, 0x1644 <.L21>
    1642:	02 80 e8    	inc2.w    w2, w0

00001644 <.L21>:
    1644:	a0 a4 88    	mov.w     w0, 0x1494
    1646:	81 80 e8    	inc2.w    w1, w1

00001648 <.L17>:
    1648:	01 00 78    	mov.w     w1, w0
    164a:	4f 04 78    	mov.w     [--w15], w8
    164c:	00 00 06    	return    

0000164e <_memcpy>:
    164e:	80 01 78    	mov.w     w0, w3
    1650:	02 00 37    	bra       0x1656 <.L2>

00001652 <.L3>:
    1652:	b1 59 78    	mov.b     [w1++], [w3++]
    1654:	02 01 e9    	dec.w     w2, w2

00001656 <.L2>:
    1656:	02 00 e0    	cp0.w     w2
    1658:	fc ff 3a    	bra       NZ, 0x1652 <.L3>
    165a:	00 00 06    	return    

0000165c <_puts>:
    165c:	01 33 21    	mov.w     #0x1330, w1
    165e:	89 03 07    	rcall     0x1d72 <_fputs>
    1660:	80 00 78    	mov.w     w0, w1
    1662:	00 80 eb    	setm.w    w0
    1664:	01 00 e0    	cp0.w     w1
    1666:	04 00 35    	bra       LT, 0x1670 <.L2>
    1668:	01 33 21    	mov.w     #0x1330, w1
    166a:	a0 00 20    	mov.w     #0xa, w0
    166c:	51 01 07    	rcall     0x1910 <_fputc>
    166e:	4f 80 de    	asr.w     w0, #0xf, w0

00001670 <.L2>:
    1670:	00 00 06    	return    

00001672 <_strcmp>:
    1672:	02 00 37    	bra       0x1678 <.L2>

00001674 <.L4>:
    1674:	02 04 e0    	cp0.b     w2
    1676:	0b 00 32    	bra       Z, 0x168e <.L5>

00001678 <.L2>:
    1678:	81 01 78    	mov.w     w1, w3
    167a:	00 02 78    	mov.w     w0, w4
    167c:	30 41 78    	mov.b     [w0++], w2
    167e:	b1 4f 51    	sub.b     w2, [w1++], [w15]
    1680:	f9 ff 32    	bra       Z, 0x1674 <.L4>
    1682:	10 00 20    	mov.w     #0x1, w0
    1684:	14 42 78    	mov.b     [w4], w4
    1686:	93 4f 52    	sub.b     w4, [w3], [w15]
    1688:	03 00 31    	bra       C, 0x1690 <.L3>
    168a:	00 80 eb    	setm.w    w0
    168c:	00 00 06    	return    

0000168e <.L5>:
    168e:	00 00 eb    	clr.w     w0

00001690 <.L3>:
    1690:	00 00 06    	return    

00001692 <_strtoll>:
    1692:	e4 87 47    	add.w     w15, #0x4, w15
    1694:	88 9f be    	mov.d     w8, [w15++]
    1696:	8a 9f be    	mov.d     w10, [w15++]
    1698:	8c 1f 78    	mov.w     w12, [w15++]
    169a:	8e 1f 78    	mov.w     w14, [w15++]
    169c:	00 05 78    	mov.w     w0, w10
    169e:	01 07 78    	mov.w     w1, w14
    16a0:	02 06 78    	mov.w     w2, w12
    16a2:	0e 00 e0    	cp0.w     w14
    16a4:	01 00 3a    	bra       NZ, 0x16a8 <.L2>
    16a6:	6e 87 57    	sub.w     w15, #0xe, w14

000016a8 <.L2>:
    16a8:	8a 05 78    	mov.w     w10, w11

000016aa <.L3>:
    16aa:	8b 04 78    	mov.w     w11, w9
    16ac:	89 05 78    	mov.w     w9, w11
    16ae:	3b 44 78    	mov.b     [w11++], w8
    16b0:	08 00 fb    	se        w8, w0
    16b2:	19 01 07    	rcall     0x18e6 <_isspace>
    16b4:	00 00 e0    	cp0.w     w0
    16b6:	f9 ff 3a    	bra       NZ, 0x16aa <.L3>
    16b8:	d0 c2 b3    	mov.b     #0x2d, w0
    16ba:	80 4f 54    	sub.b     w8, w0, [w15]
    16bc:	03 00 32    	bra       Z, 0x16c4 <.L4>
    16be:	00 c0 e9    	dec2.b    w0, w0
    16c0:	80 4f 54    	sub.b     w8, w0, [w15]
    16c2:	02 00 3a    	bra       NZ, 0x16c8 <.L14>

000016c4 <.L4>:
    16c4:	89 04 e8    	inc.w     w9, w9
    16c6:	01 00 37    	bra       0x16ca <.L5>

000016c8 <.L14>:
    16c8:	00 44 78    	mov.b     w0, w8

000016ca <.L5>:
    16ca:	0c 01 78    	mov.w     w12, w2
    16cc:	8e 00 78    	mov.w     w14, w1
    16ce:	09 00 78    	mov.w     w9, w0
    16d0:	44 00 07    	rcall     0x175a <__Stoull>
    16d2:	9e 8f 54    	sub.w     w9, [w14], [w15]
    16d4:	01 00 3a    	bra       NZ, 0x16d8 <.L6>
    16d6:	0a 0f 78    	mov.w     w10, [w14]

000016d8 <.L6>:
    16d8:	9e 0f 55    	sub.w     w10, [w14], [w15]
    16da:	05 00 3a    	bra       NZ, 0x16e6 <.L7>
    16dc:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    16de:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    16e0:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    16e2:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    16e4:	17 00 3a    	bra       NZ, 0x1714 <.L8>

000016e6 <.L7>:
    16e6:	b4 c2 b3    	mov.b     #0x2b, w4
    16e8:	84 4f 54    	sub.b     w8, w4, [w15]
    16ea:	09 00 3a    	bra       NZ, 0x16fe <.L9>
    16ec:	f4 ff 2f    	mov.w     #0xffff, w4
    16ee:	f5 ff 27    	mov.w     #0x7fff, w5
    16f0:	60 33 b8    	mul.uu    w6, #0x0, w6
    16f2:	04 00 e1    	cp.w      w0, w4
    16f4:	05 88 e1    	cpb.w     w1, w5
    16f6:	06 90 e1    	cpb.w     w2, w6
    16f8:	07 98 e1    	cpb.w     w3, w7
    16fa:	0c 00 3e    	bra       GTU, 0x1714 <.L8>
    16fc:	1e 00 37    	bra       0x173a <.L12>

000016fe <.L9>:
    16fe:	d4 c2 b3    	mov.b     #0x2d, w4
    1700:	84 4f 54    	sub.b     w8, w4, [w15]
    1702:	1b 00 3a    	bra       NZ, 0x173a <.L12>
    1704:	04 00 20    	mov.w     #0x0, w4
    1706:	05 00 28    	mov.w     #0x8000, w5
    1708:	60 33 b8    	mul.uu    w6, #0x0, w6
    170a:	04 00 e1    	cp.w      w0, w4
    170c:	05 88 e1    	cpb.w     w1, w5
    170e:	06 90 e1    	cpb.w     w2, w6
    1710:	07 98 e1    	cpb.w     w3, w7
    1712:	0d 00 36    	bra       LEU, 0x172e <.L11>

00001714 <.L8>:
    1714:	20 02 20    	mov.w     #0x22, w0
    1716:	c0 a4 88    	mov.w     w0, 0x1498
    1718:	f0 ff 2f    	mov.w     #0xffff, w0
    171a:	f1 ff 27    	mov.w     #0x7fff, w1
    171c:	60 11 b8    	mul.uu    w2, #0x0, w2
    171e:	d4 c2 b3    	mov.b     #0x2d, w4
    1720:	84 4f 54    	sub.b     w8, w4, [w15]
    1722:	0b 00 3a    	bra       NZ, 0x173a <.L12>
    1724:	00 00 20    	mov.w     #0x0, w0
    1726:	01 00 28    	mov.w     #0x8000, w1
    1728:	f2 ff 2f    	mov.w     #0xffff, w2
    172a:	f3 ff 2f    	mov.w     #0xffff, w3
    172c:	06 00 37    	bra       0x173a <.L12>

0000172e <.L11>:
    172e:	60 22 b8    	mul.uu    w4, #0x0, w4
    1730:	60 33 b8    	mul.uu    w6, #0x0, w6
    1732:	00 00 52    	sub.w     w4, w0, w0
    1734:	81 80 5a    	subb.w    w5, w1, w1
    1736:	02 01 5b    	subb.w    w6, w2, w2
    1738:	83 81 5b    	subb.w    w7, w3, w3

0000173a <.L12>:
    173a:	4f 07 78    	mov.w     [--w15], w14
    173c:	4f 06 78    	mov.w     [--w15], w12
    173e:	4f 05 be    	mov.d     [--w15], w10
    1740:	4f 04 be    	mov.d     [--w15], w8
    1742:	4f 00 b1    	sub.w     #0x4, w15
    1744:	00 00 06    	return    

00001746 <__Getmem>:
    1746:	80 00 78    	mov.w     w0, w1
    1748:	00 00 eb    	clr.w     w0
    174a:	01 00 e0    	cp0.w     w1
    174c:	05 00 34    	bra       LE, 0x1758 <.L2>
    174e:	01 00 78    	mov.w     w1, w0
    1750:	6e fd 07    	rcall     0x122e <_sbrk>
    1752:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1754:	01 00 3a    	bra       NZ, 0x1758 <.L2>
    1756:	00 00 eb    	clr.w     w0

00001758 <.L2>:
    1758:	00 00 06    	return    

0000175a <__Stoull>:
    175a:	0f 02 b0    	add.w     #0x20, w15
    175c:	88 9f be    	mov.d     w8, [w15++]
    175e:	8a 9f be    	mov.d     w10, [w15++]
    1760:	8c 9f be    	mov.d     w12, [w15++]
    1762:	8e 1f 78    	mov.w     w14, [w15++]
    1764:	80 b7 9f    	mov.w     w0, [w15-32]
    1766:	01 07 78    	mov.w     w1, w14
    1768:	82 06 78    	mov.w     w2, w13
    176a:	00 04 78    	mov.w     w0, w8

0000176c <.L2>:
    176c:	08 06 78    	mov.w     w8, w12
    176e:	0c 04 78    	mov.w     w12, w8
    1770:	38 40 78    	mov.b     [w8++], w0
    1772:	e0 e7 9f    	mov.b     w0, [w15-26]
    1774:	80 40 78    	mov.b     w0, w1
    1776:	01 00 fb    	se        w1, w0
    1778:	b6 00 07    	rcall     0x18e6 <_isspace>
    177a:	00 00 e0    	cp0.w     w0
    177c:	f7 ff 3a    	bra       NZ, 0x176c <.L2>
    177e:	d0 c2 b3    	mov.b     #0x2d, w0
    1780:	6f e1 97    	mov.b     [w15-26], w2
    1782:	80 4f 51    	sub.b     w2, w0, [w15]
    1784:	03 00 32    	bra       Z, 0x178c <.L3>
    1786:	00 c0 e9    	dec2.b    w0, w0
    1788:	80 4f 51    	sub.b     w2, w0, [w15]
    178a:	02 00 3a    	bra       NZ, 0x1790 <.L19>

0000178c <.L3>:
    178c:	0c 06 e8    	inc.w     w12, w12
    178e:	01 00 37    	bra       0x1792 <.L4>

00001790 <.L19>:
    1790:	e0 e7 9f    	mov.b     w0, [w15-26]

00001792 <.L4>:
    1792:	0d 00 e0    	cp0.w     w13
    1794:	05 00 35    	bra       LT, 0x17a0 <.L5>
    1796:	e1 8f 56    	sub.w     w13, #0x1, [w15]
    1798:	03 00 32    	bra       Z, 0x17a0 <.L5>
    179a:	40 02 20    	mov.w     #0x24, w0
    179c:	80 8f 56    	sub.w     w13, w0, [w15]
    179e:	07 00 34    	bra       LE, 0x17ae <.L6>

000017a0 <.L5>:
    17a0:	60 44 b8    	mul.uu    w8, #0x0, w8
    17a2:	60 55 b8    	mul.uu    w10, #0x0, w10
    17a4:	0e 00 e0    	cp0.w     w14
    17a6:	97 00 32    	bra       Z, 0x18d6 <.L7>
    17a8:	0f b2 97    	mov.w     [w15-32], w4
    17aa:	04 0f 78    	mov.w     w4, [w14]
    17ac:	94 00 37    	bra       0x18d6 <.L7>

000017ae <.L6>:
    17ae:	0d 00 e0    	cp0.w     w13
    17b0:	0e 00 32    	bra       Z, 0x17ce <.L8>
    17b2:	f0 8f 56    	sub.w     w13, #0x10, [w15]
    17b4:	1a 00 3a    	bra       NZ, 0x17ea <.L9>
    17b6:	00 c3 b3    	mov.b     #0x30, w0
    17b8:	9c 4f 10    	subr.b    w0, [w12], [w15]
    17ba:	17 00 3a    	bra       NZ, 0x17ea <.L9>
    17bc:	1c 40 90    	mov.b     [w12+1], w0
    17be:	81 c7 b3    	mov.b     #0x78, w1
    17c0:	81 4f 50    	sub.b     w0, w1, [w15]
    17c2:	03 00 32    	bra       Z, 0x17ca <.L10>
    17c4:	81 c5 b3    	mov.b     #0x58, w1
    17c6:	81 4f 50    	sub.b     w0, w1, [w15]
    17c8:	10 00 3a    	bra       NZ, 0x17ea <.L9>

000017ca <.L10>:
    17ca:	0c 86 e8    	inc2.w    w12, w12
    17cc:	0e 00 37    	bra       0x17ea <.L9>

000017ce <.L8>:
    17ce:	ad 00 20    	mov.w     #0xa, w13
    17d0:	00 c3 b3    	mov.b     #0x30, w0
    17d2:	9c 4f 10    	subr.b    w0, [w12], [w15]
    17d4:	0a 00 3a    	bra       NZ, 0x17ea <.L9>
    17d6:	1c 40 90    	mov.b     [w12+1], w0
    17d8:	81 c7 b3    	mov.b     #0x78, w1
    17da:	81 4f 50    	sub.b     w0, w1, [w15]
    17dc:	04 00 32    	bra       Z, 0x17e6 <.L11>
    17de:	8d 00 20    	mov.w     #0x8, w13
    17e0:	81 c5 b3    	mov.b     #0x58, w1
    17e2:	81 4f 50    	sub.b     w0, w1, [w15]
    17e4:	02 00 3a    	bra       NZ, 0x17ea <.L9>

000017e6 <.L11>:
    17e6:	0c 86 e8    	inc2.w    w12, w12
    17e8:	0d 01 20    	mov.w     #0x10, w13

000017ea <.L9>:
    17ea:	0c 00 78    	mov.w     w12, w0

000017ec <.L12>:
    17ec:	80 00 78    	mov.w     w0, w1
    17ee:	01 00 78    	mov.w     w1, w0
    17f0:	02 c3 b3    	mov.b     #0x30, w2
    17f2:	b0 4f 11    	subr.b    w2, [w0++], [w15]
    17f4:	fb ff 32    	bra       Z, 0x17ec <.L12>
    17f6:	e1 af 9f    	mov.w     w1, [w15-36]
    17f8:	81 02 78    	mov.w     w1, w5
    17fa:	95 b7 9f    	mov.w     w5, [w15-30]
    17fc:	60 44 b8    	mul.uu    w8, #0x0, w8
    17fe:	60 55 b8    	mul.uu    w10, #0x0, w10
    1800:	8c bf 9f    	mov.w     w12, [w15-16]
    1802:	1c 00 37    	bra       0x183c <.L13>

00001804 <.L14>:
    1804:	e1 3f 21    	mov.w     #0x13fe, w1
    1806:	81 40 50    	sub.b     w0, w1, w1
    1808:	e1 df 9f    	mov.b     w1, [w15-34]
    180a:	61 6a b9    	mul.su    w13, #0x1, w4
    180c:	61 2b b9    	mul.su    w5, #0x1, w6
    180e:	08 00 be    	mov.d     w8, w0
    1810:	0a 01 be    	mov.d     w10, w2
    1812:	20 07 07    	rcall     0x2654 <___muldi3>
    1814:	ef da 97    	mov.b     [w15-34], w5
    1816:	05 02 fb    	se        w5, w4
    1818:	cf a2 de    	asr.w     w4, #0xf, w5
    181a:	61 2b b9    	mul.su    w5, #0x1, w6
    181c:	c4 b7 9f    	mov.w     w4, [w15-24]
    181e:	d5 b7 9f    	mov.w     w5, [w15-22]
    1820:	e6 b7 9f    	mov.w     w6, [w15-20]
    1822:	f7 b7 9f    	mov.w     w7, [w15-18]
    1824:	a8 af 9f    	mov.w     w8, [w15-44]
    1826:	b9 af 9f    	mov.w     w9, [w15-42]
    1828:	ca af 9f    	mov.w     w10, [w15-40]
    182a:	db af 9f    	mov.w     w11, [w15-38]
    182c:	4f b2 97    	mov.w     [w15-24], w4
    182e:	df b2 97    	mov.w     [w15-22], w5
    1830:	6f b3 97    	mov.w     [w15-20], w6
    1832:	ff b3 97    	mov.w     [w15-18], w7
    1834:	00 04 42    	add.w     w4, w0, w8
    1836:	81 84 4a    	addc.w    w5, w1, w9
    1838:	02 05 4b    	addc.w    w6, w2, w10
    183a:	83 85 4b    	addc.w    w7, w3, w11

0000183c <.L13>:
    183c:	9f b2 97    	mov.w     [w15-30], w5
    183e:	a5 b7 9f    	mov.w     w5, [w15-28]
    1840:	05 03 78    	mov.w     w5, w6
    1842:	36 00 fb    	se        [w6++], w0
    1844:	96 b7 9f    	mov.w     w6, [w15-30]
    1846:	57 00 07    	rcall     0x18f6 <_tolower>
    1848:	0d 01 78    	mov.w     w13, w2
    184a:	80 00 78    	mov.w     w0, w1
    184c:	e0 3f 21    	mov.w     #0x13fe, w0
    184e:	0b 03 07    	rcall     0x1e66 <_memchr>
    1850:	00 00 e0    	cp0.w     w0
    1852:	d8 ff 3a    	bra       NZ, 0x1804 <.L14>
    1854:	0f be 97    	mov.w     [w15-16], w12
    1856:	af b3 97    	mov.w     [w15-28], w7
    1858:	87 0f 56    	sub.w     w12, w7, [w15]
    185a:	07 00 3a    	bra       NZ, 0x186a <.L15>
    185c:	60 44 b8    	mul.uu    w8, #0x0, w8
    185e:	60 55 b8    	mul.uu    w10, #0x0, w10
    1860:	0e 00 e0    	cp0.w     w14
    1862:	39 00 32    	bra       Z, 0x18d6 <.L7>
    1864:	0f b6 97    	mov.w     [w15-32], w12
    1866:	0c 0f 78    	mov.w     w12, [w14]
    1868:	36 00 37    	bra       0x18d6 <.L7>

0000186a <.L15>:
    186a:	2f b0 97    	mov.w     [w15-28], w0
    186c:	6f a9 97    	mov.w     [w15-36], w2
    186e:	82 00 50    	sub.w     w0, w2, w1
    1870:	30 42 21    	mov.w     #0x1423, w0
    1872:	60 c0 7e    	mov.b     [w0+w13], w0
    1874:	00 00 fb    	se        w0, w0
    1876:	00 80 50    	sub.w     w1, w0, w0
    1878:	20 00 33    	bra       N, 0x18ba <.L16>
    187a:	19 00 3a    	bra       NZ, 0x18ae <.L17>
    187c:	6f da 97    	mov.b     [w15-34], w4
    187e:	04 00 fb    	se        w4, w0
    1880:	cf 80 de    	asr.w     w0, #0xf, w1
    1882:	61 09 b9    	mul.su    w1, #0x1, w2
    1884:	00 00 54    	sub.w     w8, w0, w0
    1886:	81 80 5c    	subb.w    w9, w1, w1
    1888:	02 01 5d    	subb.w    w10, w2, w2
    188a:	83 81 5d    	subb.w    w11, w3, w3
    188c:	00 40 e1    	cp.w      w8, w0
    188e:	01 c8 e1    	cpb.w     w9, w1
    1890:	02 d0 e1    	cpb.w     w10, w2
    1892:	03 d8 e1    	cpb.w     w11, w3
    1894:	0c 00 39    	bra       NC, 0x18ae <.L17>
    1896:	61 6a b9    	mul.su    w13, #0x1, w4
    1898:	61 2b b9    	mul.su    w5, #0x1, w6
    189a:	73 06 07    	rcall     0x2582 <___udivdi3>
    189c:	2f aa 97    	mov.w     [w15-44], w4
    189e:	bf aa 97    	mov.w     [w15-42], w5
    18a0:	4f ab 97    	mov.w     [w15-40], w6
    18a2:	df ab 97    	mov.w     [w15-38], w7
    18a4:	04 00 e1    	cp.w      w0, w4
    18a6:	05 88 e1    	cpb.w     w1, w5
    18a8:	06 90 e1    	cpb.w     w2, w6
    18aa:	07 98 e1    	cpb.w     w3, w7
    18ac:	06 00 32    	bra       Z, 0x18ba <.L16>

000018ae <.L17>:
    18ae:	20 02 20    	mov.w     #0x22, w0
    18b0:	c0 a4 88    	mov.w     w0, 0x1498
    18b2:	f8 ff 2f    	mov.w     #0xffff, w8
    18b4:	f9 ff 2f    	mov.w     #0xffff, w9
    18b6:	08 05 be    	mov.d     w8, w10
    18b8:	0a 00 37    	bra       0x18ce <.L18>

000018ba <.L16>:
    18ba:	d0 c2 b3    	mov.b     #0x2d, w0
    18bc:	ef e2 97    	mov.b     [w15-26], w5
    18be:	80 cf 52    	sub.b     w5, w0, [w15]
    18c0:	06 00 3a    	bra       NZ, 0x18ce <.L18>
    18c2:	60 00 b8    	mul.uu    w0, #0x0, w0
    18c4:	60 11 b8    	mul.uu    w2, #0x0, w2
    18c6:	08 04 50    	sub.w     w0, w8, w8
    18c8:	89 84 58    	subb.w    w1, w9, w9
    18ca:	0a 05 59    	subb.w    w2, w10, w10
    18cc:	8b 85 59    	subb.w    w3, w11, w11

000018ce <.L18>:
    18ce:	0e 00 e0    	cp0.w     w14
    18d0:	02 00 32    	bra       Z, 0x18d6 <.L7>
    18d2:	2f b3 97    	mov.w     [w15-28], w6
    18d4:	06 0f 78    	mov.w     w6, [w14]

000018d6 <.L7>:
    18d6:	08 00 be    	mov.d     w8, w0
    18d8:	0a 01 be    	mov.d     w10, w2
    18da:	4f 07 78    	mov.w     [--w15], w14
    18dc:	4f 06 be    	mov.d     [--w15], w12
    18de:	4f 05 be    	mov.d     [--w15], w10
    18e0:	4f 04 be    	mov.d     [--w15], w8
    18e2:	0f 02 b1    	sub.w     #0x20, w15
    18e4:	00 00 06    	return    

000018e6 <_isspace>:
    18e6:	69 00 e1    	cp.w      w0, #0x9
    18e8:	04 00 35    	bra       LT, 0x18f2 <nomatch>
    18ea:	6d 00 e1    	cp.w      w0, #0xd
    18ec:	03 00 34    	bra       LE, 0x18f4 <match>
    18ee:	00 02 b1    	sub.w     #0x20, w0
    18f0:	01 00 32    	bra       Z, 0x18f4 <match>

000018f2 <nomatch>:
    18f2:	00 00 05    	retlw.w   #0x0, w0

000018f4 <match>:
    18f4:	10 00 05    	retlw.w   #0x1, w0

000018f6 <_tolower>:
    18f6:	80 00 78    	mov.w     w0, w1
    18f8:	11 04 b1    	sub.w     #0x41, w1
    18fa:	03 00 35    	bra       LT, 0x1902 <nomatch>
    18fc:	91 01 b1    	sub.w     #0x19, w1
    18fe:	01 00 3c    	bra       GT, 0x1902 <nomatch>

00001900 <match>:
    1900:	00 50 a0    	bset.w    w0, #0x5

00001902 <nomatch>:
    1902:	00 00 06    	return    

00001904 <__Geterrno>:
    1904:	d0 a4 80    	mov.w     0x149a, w0
    1906:	00 00 e0    	cp0.w     w0
    1908:	01 00 32    	bra       Z, 0x190c <.L2>
    190a:	00 00 01    	call      w0

0000190c <.L2>:
    190c:	80 49 21    	mov.w     #0x1498, w0
    190e:	00 00 06    	return    

00001910 <_fputc>:
    1910:	88 9f be    	mov.d     w8, [w15++]
    1912:	8a 1f 78    	mov.w     w10, [w15++]
    1914:	00 04 be    	mov.d     w0, w8
    1916:	c9 00 90    	mov.w     [w9+8], w1
    1918:	69 00 90    	mov.w     [w9+12], w0
    191a:	80 8f 50    	sub.w     w1, w0, [w15]
    191c:	05 00 39    	bra       NC, 0x1928 <.L2>
    191e:	09 00 78    	mov.w     w9, w0
    1920:	c8 02 07    	rcall     0x1eb2 <__Fwprep>
    1922:	80 80 eb    	setm.w    w1
    1924:	00 00 e0    	cp0.w     w0
    1926:	16 00 35    	bra       LT, 0x1954 <.L3>

00001928 <.L2>:
    1928:	08 45 78    	mov.b     w8, w10
    192a:	49 00 90    	mov.w     [w9+8], w0
    192c:	08 58 78    	mov.b     w8, [w0++]
    192e:	c0 04 98    	mov.w     w0, [w9+8]
    1930:	19 00 78    	mov.w     [w9], w0
    1932:	00 b8 a3    	btst.z    w0, #0xb
    1934:	04 00 3a    	bra       NZ, 0x193e <.L4>
    1936:	00 a8 a3    	btst.z    w0, #0xa
    1938:	07 00 32    	bra       Z, 0x1948 <.L5>
    193a:	ea 4f 54    	sub.b     w8, #0xa, [w15]
    193c:	05 00 3a    	bra       NZ, 0x1948 <.L5>

0000193e <.L4>:
    193e:	09 00 78    	mov.w     w9, w0
    1940:	dd 01 07    	rcall     0x1cfc <__DNKfflush>
    1942:	80 80 eb    	setm.w    w1
    1944:	00 00 e0    	cp0.w     w0
    1946:	06 00 3a    	bra       NZ, 0x1954 <.L3>

00001948 <.L5>:
    1948:	00 c0 20    	mov.w     #0xc00, w0
    194a:	19 00 60    	and.w     w0, [w9], w0
    194c:	02 00 32    	bra       Z, 0x1952 <.L6>
    194e:	49 00 90    	mov.w     [w9+8], w0
    1950:	e0 04 98    	mov.w     w0, [w9+12]

00001952 <.L6>:
    1952:	8a 80 fb    	ze        w10, w1

00001954 <.L3>:
    1954:	01 00 78    	mov.w     w1, w0
    1956:	4f 05 78    	mov.w     [--w15], w10
    1958:	4f 04 be    	mov.d     [--w15], w8
    195a:	00 00 06    	return    

0000195c <_prout>:
    195c:	88 1f 78    	mov.w     w8, [w15++]
    195e:	02 04 78    	mov.w     w2, w8
    1960:	08 01 78    	mov.w     w8, w2
    1962:	75 fe 07    	rcall     0x164e <_memcpy>
    1964:	08 00 40    	add.w     w0, w8, w0
    1966:	4f 04 78    	mov.w     [--w15], w8
    1968:	00 00 06    	return    

0000196a <__sprintf_cdnopuxX>:
    196a:	00 00 fa    	lnk       #0x0
    196c:	88 1f 78    	mov.w     w8, [w15++]
    196e:	00 04 78    	mov.w     w0, w8
    1970:	ea 81 57    	sub.w     w15, #0xa, w3
    1972:	3f b9 97    	mov.w     [w15-10], w2
    1974:	88 00 78    	mov.w     w8, w1
    1976:	c0 95 21    	mov.w     #0x195c, w0
    1978:	07 00 07    	rcall     0x1988 <___Printf_cdnopuxX>
    197a:	00 00 e0    	cp0.w     w0
    197c:	02 00 35    	bra       LT, 0x1982 <.L3>
    197e:	80 40 eb    	clr.b     w1
    1980:	01 74 78    	mov.b     w1, [w8+w0]

00001982 <.L3>:
    1982:	4f 04 78    	mov.w     [--w15], w8
    1984:	00 80 fa    	ulnk      
    1986:	00 00 06    	return    

00001988 <___Printf_cdnopuxX>:
    1988:	62 00 fa    	lnk       #0x62
    198a:	88 9f be    	mov.d     w8, [w15++]
    198c:	8a 1f 78    	mov.w     w10, [w15++]
    198e:	00 05 78    	mov.w     w0, w10
    1990:	81 04 78    	mov.w     w1, w9
    1992:	02 04 78    	mov.w     w2, w8
    1994:	83 00 78    	mov.w     w3, w1
    1996:	80 f9 2f    	mov.w     #0xff98, w0
    1998:	0f 00 40    	add.w     w0, w15, w0
    199a:	bd 04 07    	rcall     0x2316 <__Vacopy>
    199c:	9a 97 9f    	mov.w     w10, [w15-94]
    199e:	a9 97 9f    	mov.w     w9, [w15-92]
    19a0:	00 00 eb    	clr.w     w0
    19a2:	b0 9f 9f    	mov.w     w0, [w15-74]

000019a4 <.L31>:
    19a4:	18 85 fb    	ze        [w8], w10
    19a6:	8a 04 fb    	se        w10, w9
    19a8:	0a 05 ea    	neg.w     w10, w10
    19aa:	4f 55 de    	lsr.w     w10, #0xf, w10
    19ac:	50 02 20    	mov.w     #0x25, w0
    19ae:	80 8f 54    	sub.w     w9, w0, [w15]
    19b0:	0d 00 32    	bra       Z, 0x19cc <.L3>
    19b2:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    19b4:	0b 00 3a    	bra       NZ, 0x19cc <.L3>
    19b6:	0a 01 78    	mov.w     w10, w2
    19b8:	88 00 78    	mov.w     w8, w1
    19ba:	2f 90 97    	mov.w     [w15-92], w0
    19bc:	9f 91 97    	mov.w     [w15-94], w3
    19be:	03 00 01    	call      w3
    19c0:	a0 97 9f    	mov.w     w0, [w15-92]
    19c2:	00 00 e0    	cp0.w     w0
    19c4:	8e 00 32    	bra       Z, 0x1ae2 <.L27>
    19c6:	3f 98 97    	mov.w     [w15-74], w0
    19c8:	00 00 e8    	inc.w     w0, w0
    19ca:	b0 9f 9f    	mov.w     w0, [w15-74]

000019cc <.L3>:
    19cc:	0a 04 44    	add.w     w8, w10, w8
    19ce:	50 02 20    	mov.w     #0x25, w0
    19d0:	80 8f 54    	sub.w     w9, w0, [w15]
    19d2:	04 00 32    	bra       Z, 0x19dc <.L5>
    19d4:	09 00 e0    	cp0.w     w9
    19d6:	e6 ff 3a    	bra       NZ, 0x19a4 <.L31>
    19d8:	3f 98 97    	mov.w     [w15-74], w0
    19da:	84 00 37    	bra       0x1ae4 <.L4>

000019dc <.L5>:
    19dc:	00 00 eb    	clr.w     w0
    19de:	90 9f 9f    	mov.w     w0, [w15-78]
    19e0:	80 9f 9f    	mov.w     w0, [w15-80]
    19e2:	f0 97 9f    	mov.w     w0, [w15-82]
    19e4:	e0 97 9f    	mov.w     w0, [w15-84]
    19e6:	d0 97 9f    	mov.w     w0, [w15-86]
    19e8:	c0 97 9f    	mov.w     w0, [w15-88]
    19ea:	07 00 37    	bra       0x19fa <.L34>

000019ec <.L8>:
    19ec:	e1 47 21    	mov.w     #0x147e, w1
    19ee:	01 00 50    	sub.w     w0, w1, w0
    19f0:	00 00 40    	add.w     w0, w0, w0
    19f2:	21 47 21    	mov.w     #0x1472, w1
    19f4:	61 00 78    	mov.w     [w1+w0], w0
    19f6:	df 98 97    	mov.w     [w15-70], w1
    19f8:	01 00 70    	ior.w     w0, w1, w0

000019fa <.L34>:
    19fa:	d0 9f 9f    	mov.w     w0, [w15-70]
    19fc:	88 04 78    	mov.w     w8, w9
    19fe:	09 04 78    	mov.w     w9, w8
    1a00:	38 45 78    	mov.b     [w8++], w10
    1a02:	8a 00 fb    	se        w10, w1
    1a04:	e0 47 21    	mov.w     #0x147e, w0
    1a06:	39 02 07    	rcall     0x1e7a <_strchr>
    1a08:	00 00 e0    	cp0.w     w0
    1a0a:	f0 ff 3a    	bra       NZ, 0x19ec <.L8>
    1a0c:	a1 c2 b3    	mov.b     #0x2a, w1
    1a0e:	81 4f 55    	sub.b     w10, w1, [w15]
    1a10:	0e 00 3a    	bra       NZ, 0x1a2e <.L9>
    1a12:	cf 88 97    	mov.w     [w15-104], w1
    1a14:	01 80 e9    	dec2.w    w1, w0
    1a16:	c0 8f 9f    	mov.w     w0, [w15-104]
    1a18:	10 00 78    	mov.w     [w0], w0
    1a1a:	c0 9f 9f    	mov.w     w0, [w15-72]
    1a1c:	00 00 e0    	cp0.w     w0
    1a1e:	05 00 3d    	bra       GE, 0x1a2a <.L10>
    1a20:	00 00 ea    	neg.w     w0, w0
    1a22:	c0 9f 9f    	mov.w     w0, [w15-72]
    1a24:	5f 98 97    	mov.w     [w15-70], w0
    1a26:	00 20 a0    	bset.w    w0, #0x2
    1a28:	d0 9f 9f    	mov.w     w0, [w15-70]

00001a2a <.L10>:
    1a2a:	09 04 e8    	inc.w     w9, w8
    1a2c:	0f 00 37    	bra       0x1a4c <.L11>

00001a2e <.L9>:
    1a2e:	c0 9f 9f    	mov.w     w0, [w15-72]
    1a30:	00 00 eb    	clr.w     w0
    1a32:	05 00 37    	bra       0x1a3e <.L32>

00001a34 <.L14>:
    1a34:	f2 ff 27    	mov.w     #0x7fff, w2
    1a36:	82 0f 50    	sub.w     w0, w2, [w15]
    1a38:	02 00 32    	bra       Z, 0x1a3e <.L32>
    1a3a:	6a 01 b9    	mul.su    w0, #0xa, w2
    1a3c:	02 80 40    	add.w     w1, w2, w0

00001a3e <.L32>:
    1a3e:	09 04 78    	mov.w     w9, w8
    1a40:	88 04 78    	mov.w     w8, w9
    1a42:	b9 00 fb    	se        [w9++], w1
    1a44:	01 03 b1    	sub.w     #0x30, w1
    1a46:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1a48:	f5 ff 36    	bra       LEU, 0x1a34 <.L14>
    1a4a:	c0 9f 9f    	mov.w     w0, [w15-72]

00001a4c <.L11>:
    1a4c:	e0 c2 b3    	mov.b     #0x2e, w0
    1a4e:	98 4f 10    	subr.b    w0, [w8], [w15]
    1a50:	02 00 32    	bra       Z, 0x1a56 <.L15>
    1a52:	00 80 eb    	setm.w    w0
    1a54:	19 00 37    	bra       0x1a88 <.L35>

00001a56 <.L15>:
    1a56:	a0 c2 b3    	mov.b     #0x2a, w0
    1a58:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1a5a:	07 00 3a    	bra       NZ, 0x1a6a <.L17>
    1a5c:	cf 88 97    	mov.w     [w15-104], w1
    1a5e:	01 80 e9    	dec2.w    w1, w0
    1a60:	c0 8f 9f    	mov.w     w0, [w15-104]
    1a62:	10 00 78    	mov.w     [w0], w0
    1a64:	a0 9f 9f    	mov.w     w0, [w15-76]
    1a66:	08 04 e8    	inc.w     w8, w8
    1a68:	10 00 37    	bra       0x1a8a <.L16>

00001a6a <.L17>:
    1a6a:	00 00 eb    	clr.w     w0
    1a6c:	a0 9f 9f    	mov.w     w0, [w15-76]
    1a6e:	88 00 78    	mov.w     w8, w1
    1a70:	05 00 37    	bra       0x1a7c <.L33>

00001a72 <.L20>:
    1a72:	f3 ff 27    	mov.w     #0x7fff, w3
    1a74:	83 0f 50    	sub.w     w0, w3, [w15]
    1a76:	02 00 32    	bra       Z, 0x1a7c <.L33>
    1a78:	6a 02 b9    	mul.su    w0, #0xa, w4
    1a7a:	04 00 41    	add.w     w2, w4, w0

00001a7c <.L33>:
    1a7c:	01 04 78    	mov.w     w1, w8
    1a7e:	88 00 78    	mov.w     w8, w1
    1a80:	31 01 fb    	se        [w1++], w2
    1a82:	02 03 b1    	sub.w     #0x30, w2
    1a84:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1a86:	f5 ff 36    	bra       LEU, 0x1a72 <.L20>

00001a88 <.L35>:
    1a88:	a0 9f 9f    	mov.w     w0, [w15-76]

00001a8a <.L16>:
    1a8a:	98 44 78    	mov.b     [w8], w9
    1a8c:	89 00 fb    	se        w9, w1
    1a8e:	a0 46 21    	mov.w     #0x146a, w0
    1a90:	f4 01 07    	rcall     0x1e7a <_strchr>
    1a92:	00 00 e0    	cp0.w     w0
    1a94:	02 00 32    	bra       Z, 0x1a9a <.L25>
    1a96:	08 04 e8    	inc.w     w8, w8
    1a98:	01 00 37    	bra       0x1a9c <.L21>

00001a9a <.L25>:
    1a9a:	80 44 eb    	clr.b     w9

00001a9c <.L21>:
    1a9c:	c9 7f 9f    	mov.b     w9, [w15-68]
    1a9e:	80 c6 b3    	mov.b     #0x68, w0
    1aa0:	80 cf 54    	sub.b     w9, w0, [w15]
    1aa2:	04 00 3a    	bra       NZ, 0x1aac <.L22>
    1aa4:	98 cf 14    	subr.b    w9, [w8], [w15]
    1aa6:	0a 00 3a    	bra       NZ, 0x1abc <.L23>
    1aa8:	66 40 50    	sub.b     w0, #0x6, w0
    1aaa:	06 00 37    	bra       0x1ab8 <.L36>

00001aac <.L22>:
    1aac:	c0 c6 b3    	mov.b     #0x6c, w0
    1aae:	80 cf 54    	sub.b     w9, w0, [w15]
    1ab0:	05 00 3a    	bra       NZ, 0x1abc <.L23>
    1ab2:	98 cf 14    	subr.b    w9, [w8], [w15]
    1ab4:	03 00 3a    	bra       NZ, 0x1abc <.L23>
    1ab6:	65 40 40    	add.b     w0, #0x5, w0

00001ab8 <.L36>:
    1ab8:	c0 7f 9f    	mov.b     w0, [w15-68]
    1aba:	08 04 e8    	inc.w     w8, w8

00001abc <.L23>:
    1abc:	18 01 fb    	se        [w8], w2
    1abe:	e3 fb 2f    	mov.w     #0xffbe, w3
    1ac0:	8f 81 41    	add.w     w3, w15, w3
    1ac2:	81 f9 2f    	mov.w     #0xff98, w1
    1ac4:	8f 80 40    	add.w     w1, w15, w1
    1ac6:	a0 f9 2f    	mov.w     #0xff9a, w0
    1ac8:	0f 00 40    	add.w     w0, w15, w0
    1aca:	10 00 07    	rcall     0x1aec <___Putfld_cdnopuxX>
    1acc:	00 00 e0    	cp0.w     w0
    1ace:	09 00 3a    	bra       NZ, 0x1ae2 <.L27>
    1ad0:	e1 fb 2f    	mov.w     #0xffbe, w1
    1ad2:	8f 80 40    	add.w     w1, w15, w1
    1ad4:	a0 f9 2f    	mov.w     #0xff9a, w0
    1ad6:	0f 00 40    	add.w     w0, w15, w0
    1ad8:	62 03 07    	rcall     0x219e <__Puttxt>
    1ada:	00 00 e0    	cp0.w     w0
    1adc:	02 00 35    	bra       LT, 0x1ae2 <.L27>
    1ade:	08 04 e8    	inc.w     w8, w8
    1ae0:	61 ff 37    	bra       0x19a4 <.L31>

00001ae2 <.L27>:
    1ae2:	00 80 eb    	setm.w    w0

00001ae4 <.L4>:
    1ae4:	4f 05 78    	mov.w     [--w15], w10
    1ae6:	4f 04 be    	mov.d     [--w15], w8
    1ae8:	00 80 fa    	ulnk      
    1aea:	00 00 06    	return    

00001aec <___Putfld_cdnopuxX>:
    1aec:	88 1f 78    	mov.w     w8, [w15++]
    1aee:	e4 c6 b3    	mov.b     #0x6e, w4
    1af0:	84 4f 51    	sub.b     w2, w4, [w15]
    1af2:	b6 00 32    	bra       Z, 0x1c60 <.L7>
    1af4:	10 00 3c    	bra       GT, 0x1b16 <.L9>
    1af6:	6b 42 52    	sub.b     w4, #0xb, w4
    1af8:	84 4f 51    	sub.b     w2, w4, [w15]
    1afa:	18 00 32    	bra       Z, 0x1b2c <.L5>
    1afc:	05 00 3c    	bra       GT, 0x1b08 <.L10>
    1afe:	54 c2 b3    	mov.b     #0x25, w4
    1b00:	84 4f 51    	sub.b     w2, w4, [w15]
    1b02:	ee 00 32    	bra       Z, 0x1ce0 <.L3>
    1b04:	84 c5 b3    	mov.b     #0x58, w4
    1b06:	0f 00 37    	bra       0x1b26 <.L47>

00001b08 <.L10>:
    1b08:	44 c6 b3    	mov.b     #0x64, w4
    1b0a:	84 4f 51    	sub.b     w2, w4, [w15]
    1b0c:	14 00 32    	bra       Z, 0x1b36 <.L6>
    1b0e:	65 42 42    	add.b     w4, #0x5, w4
    1b10:	84 4f 51    	sub.b     w2, w4, [w15]
    1b12:	e9 00 3a    	bra       NZ, 0x1ce6 <.L2>
    1b14:	10 00 37    	bra       0x1b36 <.L6>

00001b16 <.L9>:
    1b16:	04 c7 b3    	mov.b     #0x70, w4
    1b18:	84 4f 51    	sub.b     w2, w4, [w15]
    1b1a:	d5 00 32    	bra       Z, 0x1cc6 <.L8>
    1b1c:	53 00 35    	bra       LT, 0x1bc4 <.L4>
    1b1e:	65 42 42    	add.b     w4, #0x5, w4
    1b20:	84 4f 51    	sub.b     w2, w4, [w15]
    1b22:	50 00 32    	bra       Z, 0x1bc4 <.L4>
    1b24:	63 42 42    	add.b     w4, #0x3, w4

00001b26 <.L47>:
    1b26:	84 4f 51    	sub.b     w2, w4, [w15]
    1b28:	de 00 3a    	bra       NZ, 0x1ce6 <.L2>
    1b2a:	4c 00 37    	bra       0x1bc4 <.L4>

00001b2c <.L5>:
    1b2c:	11 81 e9    	dec2.w    [w1], w2
    1b2e:	82 08 78    	mov.w     w2, [w1]
    1b30:	f0 00 90    	mov.w     [w0+14], w1
    1b32:	12 41 78    	mov.b     [w2], w2
    1b34:	d6 00 37    	bra       0x1ce2 <.L53>

00001b36 <.L6>:
    1b36:	20 62 90    	mov.b     [w0+34], w4
    1b38:	c5 c6 b3    	mov.b     #0x6c, w5
    1b3a:	85 4f 52    	sub.b     w4, w5, [w15]
    1b3c:	07 00 3a    	bra       NZ, 0x1b4c <.L12>
    1b3e:	91 02 78    	mov.w     [w1], w5
    1b40:	64 82 52    	sub.w     w5, #0x4, w4
    1b42:	84 08 78    	mov.w     w4, [w1]
    1b44:	14 02 be    	mov.d     [w4], w4
    1b46:	4f ab de    	asr.w     w5, #0xf, w6
    1b48:	86 03 78    	mov.w     w6, w7
    1b4a:	11 00 37    	bra       0x1b6e <.L13>

00001b4c <.L12>:
    1b4c:	15 c7 b3    	mov.b     #0x71, w5
    1b4e:	85 4f 52    	sub.b     w4, w5, [w15]
    1b50:	03 00 32    	bra       Z, 0x1b58 <.L43>
    1b52:	a5 c6 b3    	mov.b     #0x6a, w5
    1b54:	85 4f 52    	sub.b     w4, w5, [w15]
    1b56:	06 00 3a    	bra       NZ, 0x1b64 <.L15>

00001b58 <.L43>:
    1b58:	91 02 78    	mov.w     [w1], w5
    1b5a:	68 82 52    	sub.w     w5, #0x8, w4
    1b5c:	84 08 78    	mov.w     w4, [w1]
    1b5e:	54 03 be    	mov.d     [++w4], w6
    1b60:	44 02 be    	mov.d     [--w4], w4
    1b62:	05 00 37    	bra       0x1b6e <.L13>

00001b64 <.L15>:
    1b64:	11 82 e9    	dec2.w    [w1], w4
    1b66:	84 08 78    	mov.w     w4, [w1]
    1b68:	14 02 78    	mov.w     [w4], w4
    1b6a:	cf a2 de    	asr.w     w4, #0xf, w5
    1b6c:	61 2b b9    	mul.su    w5, #0x1, w6

00001b6e <.L13>:
    1b6e:	04 98 be    	mov.d     w4, [w0++]
    1b70:	06 90 be    	mov.d     w6, [w0--]
    1b72:	a0 60 90    	mov.b     [w0+34], w1
    1b74:	88 c6 b3    	mov.b     #0x68, w8
    1b76:	88 cf 50    	sub.b     w1, w8, [w15]
    1b78:	0d 00 32    	bra       Z, 0x1b94 <.L19>
    1b7a:	28 c6 b3    	mov.b     #0x62, w8
    1b7c:	88 cf 50    	sub.b     w1, w8, [w15]
    1b7e:	04 00 3a    	bra       NZ, 0x1b88 <.L18>
    1b80:	04 02 fb    	se        w4, w4
    1b82:	cf a2 de    	asr.w     w4, #0xf, w5
    1b84:	61 2b b9    	mul.su    w5, #0x1, w6
    1b86:	08 00 37    	bra       0x1b98 <.L44>

00001b88 <.L18>:
    1b88:	48 c7 b3    	mov.b     #0x74, w8
    1b8a:	88 cf 50    	sub.b     w1, w8, [w15]
    1b8c:	03 00 32    	bra       Z, 0x1b94 <.L19>
    1b8e:	66 44 44    	add.b     w8, #0x6, w8
    1b90:	88 cf 50    	sub.b     w1, w8, [w15]
    1b92:	04 00 3a    	bra       NZ, 0x1b9c <.L17>

00001b94 <.L19>:
    1b94:	cf a2 de    	asr.w     w4, #0xf, w5
    1b96:	61 2b b9    	mul.su    w5, #0x1, w6

00001b98 <.L44>:
    1b98:	04 98 be    	mov.d     w4, [w0++]
    1b9a:	06 90 be    	mov.d     w6, [w0--]

00001b9c <.L17>:
    1b9c:	30 02 be    	mov.d     [w0++], w4
    1b9e:	20 03 be    	mov.d     [w0--], w6
    1ba0:	f0 00 90    	mov.w     [w0+14], w1
    1ba2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1ba4:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1ba6:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1ba8:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1baa:	02 00 3d    	bra       GE, 0x1bb0 <.L20>
    1bac:	d4 c2 b3    	mov.b     #0x2d, w4
    1bae:	08 00 37    	bra       0x1bc0 <.L45>

00001bb0 <.L20>:
    1bb0:	00 12 90    	mov.w     [w0+32], w4
    1bb2:	04 18 a3    	btst.z    w4, #0x1
    1bb4:	02 00 32    	bra       Z, 0x1bba <.L22>
    1bb6:	b4 c2 b3    	mov.b     #0x2b, w4
    1bb8:	03 00 37    	bra       0x1bc0 <.L45>

00001bba <.L22>:
    1bba:	04 08 a3    	btst.z    w4, #0x0
    1bbc:	4c 00 32    	bra       Z, 0x1c56 <.L31>
    1bbe:	04 c2 b3    	mov.b     #0x20, w4

00001bc0 <.L45>:
    1bc0:	84 f1 78    	mov.b     w4, [w3+w1]
    1bc2:	47 00 37    	bra       0x1c52 <.L54>

00001bc4 <.L4>:
    1bc4:	20 62 90    	mov.b     [w0+34], w4
    1bc6:	c5 c6 b3    	mov.b     #0x6c, w5
    1bc8:	85 4f 52    	sub.b     w4, w5, [w15]
    1bca:	06 00 3a    	bra       NZ, 0x1bd8 <.L23>
    1bcc:	91 02 78    	mov.w     [w1], w5
    1bce:	64 82 52    	sub.w     w5, #0x4, w4
    1bd0:	84 08 78    	mov.w     w4, [w1]
    1bd2:	14 02 be    	mov.d     [w4], w4
    1bd4:	60 33 b8    	mul.uu    w6, #0x0, w6
    1bd6:	11 00 37    	bra       0x1bfa <.L24>

00001bd8 <.L23>:
    1bd8:	15 c7 b3    	mov.b     #0x71, w5
    1bda:	85 4f 52    	sub.b     w4, w5, [w15]
    1bdc:	03 00 32    	bra       Z, 0x1be4 <.L48>
    1bde:	a5 c6 b3    	mov.b     #0x6a, w5
    1be0:	85 4f 52    	sub.b     w4, w5, [w15]
    1be2:	06 00 3a    	bra       NZ, 0x1bf0 <.L26>

00001be4 <.L48>:
    1be4:	91 02 78    	mov.w     [w1], w5
    1be6:	68 82 52    	sub.w     w5, #0x8, w4
    1be8:	84 08 78    	mov.w     w4, [w1]
    1bea:	54 03 be    	mov.d     [++w4], w6
    1bec:	44 02 be    	mov.d     [--w4], w4
    1bee:	05 00 37    	bra       0x1bfa <.L24>

00001bf0 <.L26>:
    1bf0:	11 82 e9    	dec2.w    [w1], w4
    1bf2:	84 08 78    	mov.w     w4, [w1]
    1bf4:	14 02 78    	mov.w     [w4], w4
    1bf6:	80 02 eb    	clr.w     w5
    1bf8:	60 33 b8    	mul.uu    w6, #0x0, w6

00001bfa <.L24>:
    1bfa:	04 98 be    	mov.d     w4, [w0++]
    1bfc:	06 90 be    	mov.d     w6, [w0--]
    1bfe:	a0 60 90    	mov.b     [w0+34], w1
    1c00:	88 c6 b3    	mov.b     #0x68, w8
    1c02:	88 cf 50    	sub.b     w1, w8, [w15]
    1c04:	0d 00 32    	bra       Z, 0x1c20 <.L30>
    1c06:	28 c6 b3    	mov.b     #0x62, w8
    1c08:	88 cf 50    	sub.b     w1, w8, [w15]
    1c0a:	04 00 3a    	bra       NZ, 0x1c14 <.L29>
    1c0c:	04 82 fb    	ze        w4, w4
    1c0e:	80 02 eb    	clr.w     w5
    1c10:	60 33 b8    	mul.uu    w6, #0x0, w6
    1c12:	08 00 37    	bra       0x1c24 <.L49>

00001c14 <.L29>:
    1c14:	48 c7 b3    	mov.b     #0x74, w8
    1c16:	88 cf 50    	sub.b     w1, w8, [w15]
    1c18:	03 00 32    	bra       Z, 0x1c20 <.L30>
    1c1a:	66 44 44    	add.b     w8, #0x6, w8
    1c1c:	88 cf 50    	sub.b     w1, w8, [w15]
    1c1e:	04 00 3a    	bra       NZ, 0x1c28 <.L28>

00001c20 <.L30>:
    1c20:	80 02 eb    	clr.w     w5
    1c22:	60 33 b8    	mul.uu    w6, #0x0, w6

00001c24 <.L49>:
    1c24:	04 98 be    	mov.d     w4, [w0++]
    1c26:	06 90 be    	mov.d     w6, [w0--]

00001c28 <.L28>:
    1c28:	80 10 90    	mov.w     [w0+32], w1
    1c2a:	01 38 a3    	btst.z    w1, #0x3
    1c2c:	14 00 32    	bra       Z, 0x1c56 <.L31>
    1c2e:	30 02 be    	mov.d     [w0++], w4
    1c30:	20 03 be    	mov.d     [w0--], w6
    1c32:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1c34:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1c36:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1c38:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1c3a:	0d 00 32    	bra       Z, 0x1c56 <.L31>
    1c3c:	81 c7 b3    	mov.b     #0x78, w1
    1c3e:	81 4f 51    	sub.b     w2, w1, [w15]
    1c40:	03 00 32    	bra       Z, 0x1c48 <.L32>
    1c42:	81 c5 b3    	mov.b     #0x58, w1
    1c44:	81 4f 51    	sub.b     w2, w1, [w15]
    1c46:	07 00 3a    	bra       NZ, 0x1c56 <.L31>

00001c48 <.L32>:
    1c48:	f0 00 90    	mov.w     [w0+14], w1
    1c4a:	04 c3 b3    	mov.b     #0x30, w4
    1c4c:	84 f1 78    	mov.b     w4, [w3+w1]
    1c4e:	81 00 e8    	inc.w     w1, w1
    1c50:	82 f1 78    	mov.b     w2, [w3+w1]

00001c52 <.L54>:
    1c52:	81 00 e8    	inc.w     w1, w1
    1c54:	71 00 98    	mov.w     w1, [w0+14]

00001c56 <.L31>:
    1c56:	f0 00 90    	mov.w     [w0+14], w1
    1c58:	81 81 41    	add.w     w3, w1, w3
    1c5a:	63 00 98    	mov.w     w3, [w0+12]
    1c5c:	82 40 78    	mov.b     w2, w1
    1c5e:	3e 00 37    	bra       0x1cdc <.L52>

00001c60 <.L7>:
    1c60:	a0 61 90    	mov.b     [w0+34], w3
    1c62:	c4 c6 b3    	mov.b     #0x6c, w4
    1c64:	11 81 e9    	dec2.w    [w1], w2
    1c66:	84 cf 51    	sub.b     w3, w4, [w15]
    1c68:	22 00 32    	bra       Z, 0x1cae <.L37>
    1c6a:	0a 00 3c    	bra       GT, 0x1c80 <.L41>
    1c6c:	64 42 52    	sub.b     w4, #0x4, w4
    1c6e:	84 cf 51    	sub.b     w3, w4, [w15]
    1c70:	25 00 32    	bra       Z, 0x1cbc <.L51>
    1c72:	04 c2 e8    	inc2.b    w4, w4
    1c74:	84 cf 51    	sub.b     w3, w4, [w15]
    1c76:	13 00 32    	bra       Z, 0x1c9e <.L36>
    1c78:	68 42 52    	sub.b     w4, #0x8, w4
    1c7a:	84 cf 51    	sub.b     w3, w4, [w15]
    1c7c:	1e 00 3a    	bra       NZ, 0x1cba <.L33>
    1c7e:	0a 00 37    	bra       0x1c94 <.L55>

00001c80 <.L41>:
    1c80:	44 c7 b3    	mov.b     #0x74, w4
    1c82:	84 cf 51    	sub.b     w3, w4, [w15]
    1c84:	1b 00 32    	bra       Z, 0x1cbc <.L51>
    1c86:	66 42 42    	add.b     w4, #0x6, w4
    1c88:	84 cf 51    	sub.b     w3, w4, [w15]
    1c8a:	18 00 32    	bra       Z, 0x1cbc <.L51>
    1c8c:	69 42 52    	sub.b     w4, #0x9, w4
    1c8e:	84 cf 51    	sub.b     w3, w4, [w15]
    1c90:	14 00 3a    	bra       NZ, 0x1cba <.L33>
    1c92:	05 00 37    	bra       0x1c9e <.L36>

00001c94 <.L55>:
    1c94:	82 08 78    	mov.w     w2, [w1]
    1c96:	92 00 78    	mov.w     [w2], w1
    1c98:	40 58 90    	mov.b     [w0+28], w0
    1c9a:	80 48 78    	mov.b     w0, [w1]
    1c9c:	2c 00 37    	bra       0x1cf6 <.L11>

00001c9e <.L36>:
    1c9e:	82 08 78    	mov.w     w2, [w1]
    1ca0:	92 00 78    	mov.w     [w2], w1
    1ca2:	60 0a 90    	mov.w     [w0+28], w4
    1ca4:	cf a2 de    	asr.w     w4, #0xf, w5
    1ca6:	61 2b b9    	mul.su    w5, #0x1, w6
    1ca8:	84 98 be    	mov.d     w4, [w1++]
    1caa:	86 90 be    	mov.d     w6, [w1--]
    1cac:	24 00 37    	bra       0x1cf6 <.L11>

00001cae <.L37>:
    1cae:	82 08 78    	mov.w     w2, [w1]
    1cb0:	92 00 78    	mov.w     [w2], w1
    1cb2:	60 09 90    	mov.w     [w0+28], w2
    1cb4:	cf 91 de    	asr.w     w2, #0xf, w3
    1cb6:	82 88 be    	mov.d     w2, [w1]
    1cb8:	1e 00 37    	bra       0x1cf6 <.L11>

00001cba <.L33>:
    1cba:	11 81 e9    	dec2.w    [w1], w2

00001cbc <.L51>:
    1cbc:	82 08 78    	mov.w     w2, [w1]
    1cbe:	92 00 78    	mov.w     [w2], w1
    1cc0:	60 08 90    	mov.w     [w0+28], w0
    1cc2:	80 08 78    	mov.w     w0, [w1]
    1cc4:	18 00 37    	bra       0x1cf6 <.L11>

00001cc6 <.L8>:
    1cc6:	11 81 e9    	dec2.w    [w1], w2
    1cc8:	82 08 78    	mov.w     w2, [w1]
    1cca:	12 02 78    	mov.w     [w2], w4
    1ccc:	cf a2 de    	asr.w     w4, #0xf, w5
    1cce:	61 2b b9    	mul.su    w5, #0x1, w6
    1cd0:	04 98 be    	mov.d     w4, [w0++]
    1cd2:	06 90 be    	mov.d     w6, [w0--]
    1cd4:	f0 00 90    	mov.w     [w0+14], w1
    1cd6:	81 81 41    	add.w     w3, w1, w3
    1cd8:	63 00 98    	mov.w     w3, [w0+12]
    1cda:	81 c7 b3    	mov.b     #0x78, w1

00001cdc <.L52>:
    1cdc:	31 01 07    	rcall     0x1f40 <__Litob>
    1cde:	0b 00 37    	bra       0x1cf6 <.L11>

00001ce0 <.L3>:
    1ce0:	f0 00 90    	mov.w     [w0+14], w1

00001ce2 <.L53>:
    1ce2:	82 f1 78    	mov.b     w2, [w3+w1]
    1ce4:	06 00 37    	bra       0x1cf2 <.L50>

00001ce6 <.L2>:
    1ce6:	f0 00 90    	mov.w     [w0+14], w1
    1ce8:	81 81 41    	add.w     w3, w1, w3
    1cea:	02 04 e0    	cp0.b     w2
    1cec:	01 00 3a    	bra       NZ, 0x1cf0 <.L42>
    1cee:	52 c2 b3    	mov.b     #0x25, w2

00001cf0 <.L42>:
    1cf0:	82 49 78    	mov.b     w2, [w3]

00001cf2 <.L50>:
    1cf2:	81 00 e8    	inc.w     w1, w1
    1cf4:	71 00 98    	mov.w     w1, [w0+14]

00001cf6 <.L11>:
    1cf6:	00 00 eb    	clr.w     w0
    1cf8:	4f 04 78    	mov.w     [--w15], w8
    1cfa:	00 00 06    	return    

00001cfc <__DNKfflush>:
    1cfc:	88 9f be    	mov.d     w8, [w15++]
    1cfe:	8a 1f 78    	mov.w     w10, [w15++]
    1d00:	00 04 78    	mov.w     w0, w8
    1d02:	08 00 e0    	cp0.w     w8
    1d04:	0d 00 3a    	bra       NZ, 0x1d20 <.L2>
    1d06:	e8 37 21    	mov.w     #0x137e, w8
    1d08:	70 05 44    	add.w     w8, #0x10, w10
    1d0a:	80 04 eb    	clr.w     w9

00001d0c <.L4>:
    1d0c:	58 00 78    	mov.w     [++w8], w0
    1d0e:	00 00 e0    	cp0.w     w0
    1d10:	04 00 32    	bra       Z, 0x1d1a <.L3>
    1d12:	f4 ff 07    	rcall     0x1cfc <__DNKfflush>
    1d14:	00 00 e0    	cp0.w     w0
    1d16:	01 00 3d    	bra       GE, 0x1d1a <.L3>
    1d18:	80 84 eb    	setm.w    w9

00001d1a <.L3>:
    1d1a:	8a 0f 54    	sub.w     w8, w10, [w15]
    1d1c:	f7 ff 3a    	bra       NZ, 0x1d0c <.L4>
    1d1e:	25 00 37    	bra       0x1d6a <.L5>

00001d20 <.L2>:
    1d20:	00 00 22    	mov.w     #0x2000, w0
    1d22:	18 00 60    	and.w     w0, [w8], w0
    1d24:	80 04 eb    	clr.w     w9
    1d26:	21 00 32    	bra       Z, 0x1d6a <.L5>
    1d28:	a8 04 90    	mov.w     [w8+4], w9
    1d2a:	0f 00 37    	bra       0x1d4a <.L6>

00001d2c <.L8>:
    1d2c:	09 01 51    	sub.w     w2, w9, w2
    1d2e:	38 40 90    	mov.b     [w8+3], w0
    1d30:	00 00 fb    	se        w0, w0
    1d32:	89 00 78    	mov.w     w9, w1
    1d34:	94 06 07    	rcall     0x2a5e <_write>
    1d36:	00 00 e0    	cp0.w     w0
    1d38:	07 00 3c    	bra       GT, 0x1d48 <.L7>
    1d3a:	28 00 90    	mov.w     [w8+4], w0
    1d3c:	40 04 98    	mov.w     w0, [w8+8]
    1d3e:	60 04 98    	mov.w     w0, [w8+12]
    1d40:	50 0c 98    	mov.w     w0, [w8+26]
    1d42:	18 90 a0    	bset.w    [w8], #0x9
    1d44:	80 84 eb    	setm.w    w9
    1d46:	11 00 37    	bra       0x1d6a <.L5>

00001d48 <.L7>:
    1d48:	80 84 44    	add.w     w9, w0, w9

00001d4a <.L6>:
    1d4a:	48 01 90    	mov.w     [w8+8], w2
    1d4c:	82 8f 54    	sub.w     w9, w2, [w15]
    1d4e:	ee ff 39    	bra       NC, 0x1d2c <.L8>
    1d50:	28 00 90    	mov.w     [w8+4], w0
    1d52:	40 04 98    	mov.w     w0, [w8+8]
    1d54:	98 00 78    	mov.w     [w8], w1
    1d56:	02 c0 20    	mov.w     #0xc00, w2
    1d58:	02 81 60    	and.w     w1, w2, w2
    1d5a:	01 00 3a    	bra       NZ, 0x1d5e <.L9>
    1d5c:	38 00 90    	mov.w     [w8+6], w0

00001d5e <.L9>:
    1d5e:	01 e8 a3    	btst.z    w1, #0xe
    1d60:	02 00 32    	bra       Z, 0x1d66 <.L10>
    1d62:	60 04 98    	mov.w     w0, [w8+12]
    1d64:	01 00 37    	bra       0x1d68 <.L13>

00001d66 <.L10>:
    1d66:	50 0c 98    	mov.w     w0, [w8+26]

00001d68 <.L13>:
    1d68:	80 04 eb    	clr.w     w9

00001d6a <.L5>:
    1d6a:	09 00 78    	mov.w     w9, w0
    1d6c:	4f 05 78    	mov.w     [--w15], w10
    1d6e:	4f 04 be    	mov.d     [--w15], w8
    1d70:	00 00 06    	return    

00001d72 <_fputs>:
    1d72:	88 9f be    	mov.d     w8, [w15++]
    1d74:	8a 9f be    	mov.d     w10, [w15++]
    1d76:	80 04 78    	mov.w     w0, w9
    1d78:	01 04 78    	mov.w     w1, w8
    1d7a:	2c 00 37    	bra       0x1dd4 <.L2>

00001d7c <.L9>:
    1d7c:	c8 00 90    	mov.w     [w8+8], w1
    1d7e:	68 00 90    	mov.w     [w8+12], w0
    1d80:	80 8f 50    	sub.w     w1, w0, [w15]
    1d82:	04 00 39    	bra       NC, 0x1d8c <.L3>
    1d84:	08 00 78    	mov.w     w8, w0
    1d86:	95 00 07    	rcall     0x1eb2 <__Fwprep>
    1d88:	00 00 e0    	cp0.w     w0
    1d8a:	37 00 35    	bra       LT, 0x1dfa <.L13>

00001d8c <.L3>:
    1d8c:	00 40 20    	mov.w     #0x400, w0
    1d8e:	18 00 60    	and.w     w0, [w8], w0
    1d90:	09 00 32    	bra       Z, 0x1da4 <.L5>
    1d92:	a1 00 20    	mov.w     #0xa, w1
    1d94:	09 00 78    	mov.w     w9, w0
    1d96:	83 00 07    	rcall     0x1e9e <_strrchr>
    1d98:	80 05 78    	mov.w     w0, w11
    1d9a:	0b 00 e0    	cp0.w     w11
    1d9c:	03 00 32    	bra       Z, 0x1da4 <.L5>
    1d9e:	61 85 14    	subr.w    w9, #0x1, w10
    1da0:	0a 85 45    	add.w     w11, w10, w10
    1da2:	04 00 37    	bra       0x1dac <.L6>

00001da4 <.L5>:
    1da4:	09 00 78    	mov.w     w9, w0
    1da6:	75 00 07    	rcall     0x1e92 <_strlen>
    1da8:	00 05 78    	mov.w     w0, w10
    1daa:	80 05 eb    	clr.w     w11

00001dac <.L6>:
    1dac:	48 00 90    	mov.w     [w8+8], w0
    1dae:	e8 00 90    	mov.w     [w8+12], w1
    1db0:	80 80 50    	sub.w     w1, w0, w1
    1db2:	8a 8f 50    	sub.w     w1, w10, [w15]
    1db4:	02 00 31    	bra       C, 0x1dba <.L7>
    1db6:	01 05 78    	mov.w     w1, w10
    1db8:	80 05 eb    	clr.w     w11

00001dba <.L7>:
    1dba:	0a 01 78    	mov.w     w10, w2
    1dbc:	89 00 78    	mov.w     w9, w1
    1dbe:	47 fc 07    	rcall     0x164e <_memcpy>
    1dc0:	48 00 90    	mov.w     [w8+8], w0
    1dc2:	0a 00 40    	add.w     w0, w10, w0
    1dc4:	40 04 98    	mov.w     w0, [w8+8]
    1dc6:	0b 00 e0    	cp0.w     w11
    1dc8:	04 00 32    	bra       Z, 0x1dd2 <.L8>
    1dca:	08 00 78    	mov.w     w8, w0
    1dcc:	97 ff 07    	rcall     0x1cfc <__DNKfflush>
    1dce:	00 00 e0    	cp0.w     w0
    1dd0:	14 00 3a    	bra       NZ, 0x1dfa <.L13>

00001dd2 <.L8>:
    1dd2:	8a 84 44    	add.w     w9, w10, w9

00001dd4 <.L2>:
    1dd4:	19 04 e0    	cp0.b     [w9]
    1dd6:	d2 ff 3a    	bra       NZ, 0x1d7c <.L9>
    1dd8:	00 80 20    	mov.w     #0x800, w0
    1dda:	18 00 60    	and.w     w0, [w8], w0
    1ddc:	06 00 32    	bra       Z, 0x1dea <.L10>
    1dde:	08 00 78    	mov.w     w8, w0
    1de0:	8d ff 07    	rcall     0x1cfc <__DNKfflush>
    1de2:	80 00 78    	mov.w     w0, w1
    1de4:	00 80 eb    	setm.w    w0
    1de6:	01 00 e0    	cp0.w     w1
    1de8:	09 00 3a    	bra       NZ, 0x1dfc <.L4>

00001dea <.L10>:
    1dea:	01 c0 20    	mov.w     #0xc00, w1
    1dec:	98 80 60    	and.w     w1, [w8], w1
    1dee:	00 00 eb    	clr.w     w0
    1df0:	05 00 32    	bra       Z, 0x1dfc <.L4>
    1df2:	48 00 90    	mov.w     [w8+8], w0
    1df4:	60 04 98    	mov.w     w0, [w8+12]
    1df6:	00 00 eb    	clr.w     w0
    1df8:	01 00 37    	bra       0x1dfc <.L4>

00001dfa <.L13>:
    1dfa:	00 80 eb    	setm.w    w0

00001dfc <.L4>:
    1dfc:	4f 05 be    	mov.d     [--w15], w10
    1dfe:	4f 04 be    	mov.d     [--w15], w8
    1e00:	00 00 06    	return    

00001e02 <_free>:
    1e02:	00 00 e0    	cp0.w     w0
    1e04:	2f 00 32    	bra       Z, 0x1e64 <.L1>
    1e06:	c0 01 78    	mov.w     [--w0], w3
    1e08:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    1e0a:	2c 00 36    	bra       LEU, 0x1e64 <.L1>
    1e0c:	03 08 a3    	btst.z    w3, #0x0
    1e0e:	2a 00 3a    	bra       NZ, 0x1e64 <.L1>
    1e10:	b1 a4 80    	mov.w     0x1496, w1
    1e12:	01 00 e0    	cp0.w     w1
    1e14:	02 00 32    	bra       Z, 0x1e1a <.L3>
    1e16:	81 0f 50    	sub.w     w0, w1, [w15]
    1e18:	04 00 31    	bra       C, 0x1e22 <.L7>

00001e1a <.L3>:
    1e1a:	11 00 98    	mov.w     w1, [w0+2]
    1e1c:	b0 a4 88    	mov.w     w0, 0x1496
    1e1e:	16 00 37    	bra       0x1e4c <.L5>

00001e20 <.L11>:
    1e20:	82 00 78    	mov.w     w2, w1

00001e22 <.L7>:
    1e22:	11 01 90    	mov.w     [w1+2], w2
    1e24:	02 00 e0    	cp0.w     w2
    1e26:	02 00 32    	bra       Z, 0x1e2c <.L6>
    1e28:	80 0f 51    	sub.w     w2, w0, [w15]
    1e2a:	fa ff 39    	bra       NC, 0x1e20 <.L11>

00001e2c <.L6>:
    1e2c:	11 02 78    	mov.w     [w1], w4
    1e2e:	84 82 40    	add.w     w1, w4, w5
    1e30:	85 0f 50    	sub.w     w0, w5, [w15]
    1e32:	18 00 39    	bra       NC, 0x1e64 <.L1>
    1e34:	80 8f 52    	sub.w     w5, w0, [w15]
    1e36:	03 00 3a    	bra       NZ, 0x1e3e <.L8>
    1e38:	83 08 42    	add.w     w4, w3, [w1]
    1e3a:	01 00 78    	mov.w     w1, w0
    1e3c:	07 00 37    	bra       0x1e4c <.L5>

00001e3e <.L8>:
    1e3e:	02 00 e0    	cp0.w     w2
    1e40:	03 00 32    	bra       Z, 0x1e48 <.L9>
    1e42:	83 01 40    	add.w     w0, w3, w3
    1e44:	83 0f 51    	sub.w     w2, w3, [w15]
    1e46:	0e 00 39    	bra       NC, 0x1e64 <.L1>

00001e48 <.L9>:
    1e48:	12 00 98    	mov.w     w2, [w0+2]
    1e4a:	90 00 98    	mov.w     w0, [w1+2]

00001e4c <.L5>:
    1e4c:	90 00 90    	mov.w     [w0+2], w1
    1e4e:	01 00 e0    	cp0.w     w1
    1e50:	09 00 32    	bra       Z, 0x1e64 <.L1>
    1e52:	10 01 40    	add.w     w0, [w0], w2
    1e54:	82 8f 50    	sub.w     w1, w2, [w15]
    1e56:	06 00 3a    	bra       NZ, 0x1e64 <.L1>
    1e58:	42 49 21    	mov.w     #0x1494, w2
    1e5a:	00 09 eb    	clr.w     [w2]
    1e5c:	10 01 78    	mov.w     [w0], w2
    1e5e:	11 08 41    	add.w     w2, [w1], [w0]
    1e60:	91 00 90    	mov.w     [w1+2], w1
    1e62:	11 00 98    	mov.w     w1, [w0+2]

00001e64 <.L1>:
    1e64:	00 00 06    	return    

00001e66 <_memchr>:
    1e66:	03 00 37    	bra       0x1e6e <.L2>

00001e68 <.L4>:
    1e68:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    1e6a:	05 00 32    	bra       Z, 0x1e76 <.L5>
    1e6c:	02 01 e9    	dec.w     w2, w2

00001e6e <.L2>:
    1e6e:	80 01 78    	mov.w     w0, w3
    1e70:	02 00 e0    	cp0.w     w2
    1e72:	fa ff 3a    	bra       NZ, 0x1e68 <.L4>
    1e74:	00 00 05    	retlw.w   #0x0, w0

00001e76 <.L5>:
    1e76:	03 00 78    	mov.w     w3, w0
    1e78:	00 00 06    	return    

00001e7a <_strchr>:
    1e7a:	02 00 37    	bra       0x1e80 <.L2>

00001e7c <.L4>:
    1e7c:	03 04 e0    	cp0.b     w3
    1e7e:	06 00 32    	bra       Z, 0x1e8c <.L5>

00001e80 <.L2>:
    1e80:	00 01 78    	mov.w     w0, w2
    1e82:	02 00 78    	mov.w     w2, w0
    1e84:	b0 41 78    	mov.b     [w0++], w3
    1e86:	81 cf 51    	sub.b     w3, w1, [w15]
    1e88:	f9 ff 3a    	bra       NZ, 0x1e7c <.L4>
    1e8a:	01 00 37    	bra       0x1e8e <.L3>

00001e8c <.L5>:
    1e8c:	00 01 eb    	clr.w     w2

00001e8e <.L3>:
    1e8e:	02 00 78    	mov.w     w2, w0
    1e90:	00 00 06    	return    

00001e92 <_strlen>:
    1e92:	80 00 78    	mov.w     w0, w1

00001e94 <.L2>:
    1e94:	01 01 78    	mov.w     w1, w2
    1e96:	31 04 e0    	cp0.b     [w1++]
    1e98:	fd ff 3a    	bra       NZ, 0x1e94 <.L2>
    1e9a:	00 00 51    	sub.w     w2, w0, w0
    1e9c:	00 00 06    	return    

00001e9e <_strrchr>:
    1e9e:	00 01 eb    	clr.w     w2

00001ea0 <.L3>:
    1ea0:	00 02 78    	mov.w     w0, w4
    1ea2:	b0 41 78    	mov.b     [w0++], w3
    1ea4:	81 cf 51    	sub.b     w3, w1, [w15]
    1ea6:	01 00 3a    	bra       NZ, 0x1eaa <.L2>
    1ea8:	04 01 78    	mov.w     w4, w2

00001eaa <.L2>:
    1eaa:	03 04 e0    	cp0.b     w3
    1eac:	f9 ff 3a    	bra       NZ, 0x1ea0 <.L3>
    1eae:	02 00 78    	mov.w     w2, w0
    1eb0:	00 00 06    	return    

00001eb2 <__Fwprep>:
    1eb2:	88 9f be    	mov.d     w8, [w15++]
    1eb4:	8a 1f 78    	mov.w     w10, [w15++]
    1eb6:	00 04 78    	mov.w     w0, w8
    1eb8:	c8 00 90    	mov.w     [w8+8], w1
    1eba:	68 01 90    	mov.w     [w8+12], w2
    1ebc:	00 00 eb    	clr.w     w0
    1ebe:	82 8f 50    	sub.w     w1, w2, [w15]
    1ec0:	3c 00 39    	bra       NC, 0x1f3a <.L2>
    1ec2:	18 00 78    	mov.w     [w8], w0
    1ec4:	22 00 29    	mov.w     #0x9002, w2
    1ec6:	02 01 60    	and.w     w0, w2, w2
    1ec8:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    1eca:	07 00 32    	bra       Z, 0x1eda <.L3>
    1ecc:	01 20 24    	mov.w     #0x4200, w1
    1ece:	00 00 e0    	cp0.w     w0
    1ed0:	01 00 3d    	bra       GE, 0x1ed4 <.L4>
    1ed2:	01 20 20    	mov.w     #0x200, w1

00001ed4 <.L4>:
    1ed4:	00 8c 70    	ior.w     w1, w0, [w8]
    1ed6:	00 80 eb    	setm.w    w0
    1ed8:	30 00 37    	bra       0x1f3a <.L2>

00001eda <.L3>:
    1eda:	02 00 26    	mov.w     #0x6000, w2
    1edc:	02 00 60    	and.w     w0, w2, w0
    1ede:	82 0f 50    	sub.w     w0, w2, [w15]
    1ee0:	09 00 3a    	bra       NZ, 0x1ef4 <.L5>
    1ee2:	38 00 90    	mov.w     [w8+6], w0
    1ee4:	80 8f 50    	sub.w     w1, w0, [w15]
    1ee6:	06 00 39    	bra       NC, 0x1ef4 <.L5>
    1ee8:	08 00 78    	mov.w     w8, w0
    1eea:	08 ff 07    	rcall     0x1cfc <__DNKfflush>
    1eec:	80 00 78    	mov.w     w0, w1
    1eee:	00 80 eb    	setm.w    w0
    1ef0:	01 00 e0    	cp0.w     w1
    1ef2:	23 00 3a    	bra       NZ, 0x1f3a <.L2>

00001ef4 <.L5>:
    1ef4:	18 05 78    	mov.w     [w8], w10
    1ef6:	00 c0 20    	mov.w     #0xc00, w0
    1ef8:	00 00 65    	and.w     w10, w0, w0
    1efa:	18 00 3a    	bra       NZ, 0x1f2c <.L6>
    1efc:	a8 04 90    	mov.w     [w8+4], w9
    1efe:	60 02 20    	mov.w     #0x26, w0
    1f00:	08 00 40    	add.w     w0, w8, w0
    1f02:	80 8f 54    	sub.w     w9, w0, [w15]
    1f04:	13 00 3a    	bra       NZ, 0x1f2c <.L6>
    1f06:	00 20 20    	mov.w     #0x200, w0
    1f08:	78 fb 07    	rcall     0x15fa <_malloc>
    1f0a:	20 04 98    	mov.w     w0, [w8+4]
    1f0c:	00 00 e0    	cp0.w     w0
    1f0e:	05 00 3a    	bra       NZ, 0x1f1a <.L7>
    1f10:	29 04 98    	mov.w     w9, [w8+4]
    1f12:	49 04 98    	mov.w     w9, [w8+8]
    1f14:	89 04 e8    	inc.w     w9, w9
    1f16:	39 04 98    	mov.w     w9, [w8+6]
    1f18:	08 00 37    	bra       0x1f2a <.L11>

00001f1a <.L7>:
    1f1a:	0a 60 a0    	bset.w    w10, #0x6
    1f1c:	0a 0c 78    	mov.w     w10, [w8]
    1f1e:	40 04 98    	mov.w     w0, [w8+8]
    1f20:	01 20 20    	mov.w     #0x200, w1
    1f22:	80 80 40    	add.w     w1, w0, w1
    1f24:	31 04 98    	mov.w     w1, [w8+6]
    1f26:	40 0c 98    	mov.w     w0, [w8+24]
    1f28:	50 0c 98    	mov.w     w0, [w8+26]

00001f2a <.L11>:
    1f2a:	f9 01 07    	rcall     0x231e <__Closreg>

00001f2c <.L6>:
    1f2c:	28 00 90    	mov.w     [w8+4], w0
    1f2e:	50 04 98    	mov.w     w0, [w8+10]
    1f30:	38 00 90    	mov.w     [w8+6], w0
    1f32:	60 04 98    	mov.w     w0, [w8+12]
    1f34:	00 00 26    	mov.w     #0x6000, w0
    1f36:	18 0c 70    	ior.w     w0, [w8], [w8]
    1f38:	00 00 eb    	clr.w     w0

00001f3a <.L2>:
    1f3a:	4f 05 78    	mov.w     [--w15], w10
    1f3c:	4f 04 be    	mov.d     [--w15], w8
    1f3e:	00 00 06    	return    

00001f40 <__Litob>:
    1f40:	fc 87 47    	add.w     w15, #0x1c, w15
    1f42:	88 9f be    	mov.d     w8, [w15++]
    1f44:	8a 9f be    	mov.d     w10, [w15++]
    1f46:	8c 9f be    	mov.d     w12, [w15++]
    1f48:	8e 1f 78    	mov.w     w14, [w15++]
    1f4a:	00 06 78    	mov.w     w0, w12
    1f4c:	80 c5 b3    	mov.b     #0x58, w0
    1f4e:	80 cf 50    	sub.b     w1, w0, [w15]
    1f50:	0a 00 32    	bra       Z, 0x1f66 <.L35>
    1f52:	77 40 40    	add.b     w0, #0x17, w0
    1f54:	80 cf 50    	sub.b     w1, w0, [w15]
    1f56:	0a 00 32    	bra       Z, 0x1f6c <.L36>
    1f58:	69 40 40    	add.b     w0, #0x9, w0
    1f5a:	80 cf 50    	sub.b     w1, w0, [w15]
    1f5c:	0b 00 32    	bra       Z, 0x1f74 <.L37>
    1f5e:	90 45 21    	mov.w     #0x1459, w0
    1f60:	80 bf 9f    	mov.w     w0, [w15-16]
    1f62:	ae 00 20    	mov.w     #0xa, w14
    1f64:	0a 00 37    	bra       0x1f7a <.L2>

00001f66 <.L35>:
    1f66:	82 44 21    	mov.w     #0x1448, w2
    1f68:	82 bf 9f    	mov.w     w2, [w15-16]
    1f6a:	06 00 37    	bra       0x1f78 <.L46>

00001f6c <.L36>:
    1f6c:	93 45 21    	mov.w     #0x1459, w3
    1f6e:	83 bf 9f    	mov.w     w3, [w15-16]
    1f70:	8e 00 20    	mov.w     #0x8, w14
    1f72:	03 00 37    	bra       0x1f7a <.L2>

00001f74 <.L37>:
    1f74:	94 45 21    	mov.w     #0x1459, w4
    1f76:	84 bf 9f    	mov.w     w4, [w15-16]

00001f78 <.L46>:
    1f78:	0e 01 20    	mov.w     #0x10, w14

00001f7a <.L2>:
    1f7a:	3c 02 be    	mov.d     [w12++], w4
    1f7c:	2c 03 be    	mov.d     [w12--], w6
    1f7e:	06 05 be    	mov.d     w6, w10
    1f80:	04 04 be    	mov.d     w4, w8
    1f82:	40 c6 b3    	mov.b     #0x64, w0
    1f84:	80 cf 50    	sub.b     w1, w0, [w15]
    1f86:	03 00 32    	bra       Z, 0x1f8e <.L3>
    1f88:	65 40 40    	add.b     w0, #0x5, w0
    1f8a:	80 cf 50    	sub.b     w1, w0, [w15]
    1f8c:	0b 00 3a    	bra       NZ, 0x1fa4 <.L4>

00001f8e <.L3>:
    1f8e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1f90:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1f92:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1f94:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1f96:	06 00 3d    	bra       GE, 0x1fa4 <.L4>
    1f98:	60 00 b8    	mul.uu    w0, #0x0, w0
    1f9a:	60 11 b8    	mul.uu    w2, #0x0, w2
    1f9c:	04 04 50    	sub.w     w0, w4, w8
    1f9e:	85 84 58    	subb.w    w1, w5, w9
    1fa0:	06 05 59    	subb.w    w2, w6, w10
    1fa2:	87 85 59    	subb.w    w3, w7, w11

00001fa4 <.L4>:
    1fa4:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1fa6:	04 00 32    	bra       Z, 0x1fb0 <.L38>
    1fa8:	40 00 20    	mov.w     #0x4, w0
    1faa:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1fac:	38 00 3a    	bra       NZ, 0x201e <.L51>
    1fae:	01 00 37    	bra       0x1fb2 <.L6>

00001fb0 <.L38>:
    1fb0:	30 00 20    	mov.w     #0x3, w0

00001fb2 <.L6>:
    1fb2:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1fb4:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1fb6:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1fb8:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1fba:	04 00 3a    	bra       NZ, 0x1fc4 <.L8>
    1fbc:	dc 08 90    	mov.w     [w12+26], w1
    1fbe:	8d 01 20    	mov.w     #0x18, w13
    1fc0:	01 00 e0    	cp0.w     w1
    1fc2:	06 00 32    	bra       Z, 0x1fd0 <.L9>

00001fc4 <.L8>:
    1fc4:	8e 00 e9    	dec.w     w14, w1
    1fc6:	88 80 60    	and.w     w1, w8, w1
    1fc8:	8f ba 97    	mov.w     [w15-16], w5
    1fca:	e5 c0 78    	mov.b     [w5+w1], w1
    1fcc:	f1 ef 9f    	mov.b     w1, [w15-17]
    1fce:	7d 01 20    	mov.w     #0x17, w13

00001fd0 <.L9>:
    1fd0:	80 00 78    	mov.w     w0, w1

00001fd2 <.LB101>:
    1fd2:	81 00 e9    	dec.w     w1, w1
    1fd4:	05 00 33    	bra       N, 0x1fe0 <.LE101>
    1fd6:	8b 05 d1    	lsr.w     w11, w11
    1fd8:	0a 85 d3    	rrc.w     w10, w10
    1fda:	89 84 d3    	rrc.w     w9, w9
    1fdc:	08 84 d3    	rrc.w     w8, w8
    1fde:	f9 ff 37    	bra       0x1fd2 <.LB101>

00001fe0 <.LE101>:
    1fe0:	08 9e be    	mov.d     w8, [w12++]
    1fe2:	0a 96 be    	mov.d     w10, [w12--]
    1fe4:	12 00 37    	bra       0x200a <.L10>

00001fe6 <.L12>:
    1fe6:	8d 06 e9    	dec.w     w13, w13
    1fe8:	8e 00 e9    	dec.w     w14, w1
    1fea:	84 80 60    	and.w     w1, w4, w1
    1fec:	0f b9 97    	mov.w     [w15-16], w2
    1fee:	e2 c1 78    	mov.b     [w2+w1], w3
    1ff0:	82 fd 2f    	mov.w     #0xffd8, w2
    1ff2:	0f 01 41    	add.w     w2, w15, w2
    1ff4:	03 f1 7e    	mov.b     w3, [w2+w13]
    1ff6:	80 00 78    	mov.w     w0, w1

00001ff8 <.LB115>:
    1ff8:	81 00 e9    	dec.w     w1, w1
    1ffa:	05 00 33    	bra       N, 0x2006 <.LE115>
    1ffc:	87 83 d1    	asr.w     w7, w7
    1ffe:	06 83 d3    	rrc.w     w6, w6
    2000:	85 82 d3    	rrc.w     w5, w5
    2002:	04 82 d3    	rrc.w     w4, w4
    2004:	f9 ff 37    	bra       0x1ff8 <.LB115>

00002006 <.LE115>:
    2006:	04 9e be    	mov.d     w4, [w12++]
    2008:	06 96 be    	mov.d     w6, [w12--]

0000200a <.L10>:
    200a:	3c 02 be    	mov.d     [w12++], w4
    200c:	2c 03 be    	mov.d     [w12--], w6
    200e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2010:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2012:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2014:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2016:	8b 00 34    	bra       LE, 0x212e <.L11>
    2018:	0d 00 e0    	cp0.w     w13
    201a:	e5 ff 3c    	bra       GT, 0x1fe6 <.L12>
    201c:	88 00 37    	bra       0x212e <.L11>

0000201e <.L51>:
    201e:	2c 60 90    	mov.b     [w12+34], w0
    2020:	81 c6 b3    	mov.b     #0x68, w1
    2022:	81 4f 50    	sub.b     w0, w1, [w15]
    2024:	0b 00 32    	bra       Z, 0x203c <.L14>
    2026:	06 00 3c    	bra       GT, 0x2034 <.L16>
    2028:	00 04 e0    	cp0.b     w0
    202a:	08 00 32    	bra       Z, 0x203c <.L14>
    202c:	e6 c0 50    	sub.b     w1, #0x6, w1
    202e:	81 4f 50    	sub.b     w0, w1, [w15]
    2030:	4e 00 3a    	bra       NZ, 0x20ce <.L13>
    2032:	04 00 37    	bra       0x203c <.L14>

00002034 <.L16>:
    2034:	c1 c6 b3    	mov.b     #0x6c, w1
    2036:	81 4f 50    	sub.b     w0, w1, [w15]
    2038:	4a 00 3a    	bra       NZ, 0x20ce <.L13>
    203a:	21 00 37    	bra       0x207e <.L52>

0000203c <.L14>:
    203c:	08 00 e0    	cp0.w     w8
    203e:	04 00 3a    	bra       NZ, 0x2048 <.L17>
    2040:	5c 08 90    	mov.w     [w12+26], w0
    2042:	8d 01 20    	mov.w     #0x18, w13
    2044:	00 00 e0    	cp0.w     w0
    2046:	06 00 32    	bra       Z, 0x2054 <.L18>

00002048 <.L17>:
    2048:	11 00 09    	repeat    #0x11
    204a:	0e 84 d8    	div.uw    w8, w14
    204c:	0f b9 97    	mov.w     [w15-16], w2
    204e:	e2 c0 78    	mov.b     [w2+w1], w1
    2050:	f1 ef 9f    	mov.b     w1, [w15-17]
    2052:	7d 01 20    	mov.w     #0x17, w13

00002054 <.L18>:
    2054:	11 00 09    	repeat    #0x11
    2056:	0e 84 d8    	div.uw    w8, w14
    2058:	0a 00 37    	bra       0x206e <.L47>

0000205a <.L21>:
    205a:	11 00 09    	repeat    #0x11
    205c:	0e 04 d8    	div.sw    w8, w14
    205e:	8d 06 e9    	dec.w     w13, w13
    2060:	0e 81 b9    	mul.ss    w0, w14, w2
    2062:	02 04 54    	sub.w     w8, w2, w8
    2064:	8f b8 97    	mov.w     [w15-16], w1
    2066:	61 41 7c    	mov.b     [w1+w8], w2
    2068:	81 fd 2f    	mov.w     #0xffd8, w1
    206a:	8f 80 40    	add.w     w1, w15, w1
    206c:	82 f0 7e    	mov.b     w2, [w1+w13]

0000206e <.L47>:
    206e:	00 04 78    	mov.w     w0, w8
    2070:	08 00 e0    	cp0.w     w8
    2072:	02 00 32    	bra       Z, 0x2078 <.L20>
    2074:	0d 00 e0    	cp0.w     w13
    2076:	f1 ff 3c    	bra       GT, 0x205a <.L21>

00002078 <.L20>:
    2078:	cf c4 de    	asr.w     w8, #0xf, w9
    207a:	61 4d b9    	mul.su    w9, #0x1, w10
    207c:	25 00 37    	bra       0x20c8 <.L50>

0000207e <.L52>:
    207e:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2080:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    2082:	04 00 3a    	bra       NZ, 0x208c <.L22>
    2084:	5c 08 90    	mov.w     [w12+26], w0
    2086:	8d 01 20    	mov.w     #0x18, w13
    2088:	00 00 e0    	cp0.w     w0
    208a:	07 00 32    	bra       Z, 0x209a <.L23>

0000208c <.L22>:
    208c:	61 71 b9    	mul.su    w14, #0x1, w2
    208e:	08 00 be    	mov.d     w8, w0
    2090:	d6 01 07    	rcall     0x243e <___umodsi3>
    2092:	8f b9 97    	mov.w     [w15-16], w3
    2094:	e3 41 78    	mov.b     [w3+w0], w3
    2096:	f3 ef 9f    	mov.b     w3, [w15-17]
    2098:	7d 01 20    	mov.w     #0x17, w13

0000209a <.L23>:
    209a:	61 71 b9    	mul.su    w14, #0x1, w2
    209c:	08 00 be    	mov.d     w8, w0
    209e:	bf 01 07    	rcall     0x241e <___udivsi3>
    20a0:	0b 00 37    	bra       0x20b8 <.L48>

000020a2 <.L26>:
    20a2:	61 71 b9    	mul.su    w14, #0x1, w2
    20a4:	08 00 be    	mov.d     w8, w0
    20a6:	ac 01 07    	rcall     0x2400 <___divsi3>
    20a8:	8d 06 e9    	dec.w     w13, w13
    20aa:	00 f1 b9    	mul.ss    w14, w0, w2
    20ac:	02 04 54    	sub.w     w8, w2, w8
    20ae:	0f ba 97    	mov.w     [w15-16], w4
    20b0:	e4 42 7c    	mov.b     [w4+w8], w5
    20b2:	84 fd 2f    	mov.w     #0xffd8, w4
    20b4:	0f 02 42    	add.w     w4, w15, w4
    20b6:	05 f2 7e    	mov.b     w5, [w4+w13]

000020b8 <.L48>:
    20b8:	00 04 be    	mov.d     w0, w8
    20ba:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    20bc:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    20be:	02 00 32    	bra       Z, 0x20c4 <.L25>
    20c0:	0d 00 e0    	cp0.w     w13
    20c2:	ef ff 3c    	bra       GT, 0x20a2 <.L26>

000020c4 <.L25>:
    20c4:	4f cd de    	asr.w     w9, #0xf, w10
    20c6:	8a 05 78    	mov.w     w10, w11

000020c8 <.L50>:
    20c8:	08 9e be    	mov.d     w8, [w12++]
    20ca:	0a 96 be    	mov.d     w10, [w12--]
    20cc:	30 00 37    	bra       0x212e <.L11>

000020ce <.L13>:
    20ce:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    20d0:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    20d2:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    20d4:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    20d6:	04 00 3a    	bra       NZ, 0x20e0 <.L27>
    20d8:	5c 08 90    	mov.w     [w12+26], w0
    20da:	8d 01 20    	mov.w     #0x18, w13
    20dc:	00 00 e0    	cp0.w     w0
    20de:	09 00 32    	bra       Z, 0x20f2 <.L28>

000020e0 <.L27>:
    20e0:	61 72 b9    	mul.su    w14, #0x1, w4
    20e2:	61 2b b9    	mul.su    w5, #0x1, w6
    20e4:	08 00 be    	mov.d     w8, w0
    20e6:	0a 01 be    	mov.d     w10, w2
    20e8:	53 02 07    	rcall     0x2590 <___umoddi3>
    20ea:	0f ba 97    	mov.w     [w15-16], w4
    20ec:	64 42 78    	mov.b     [w4+w0], w4
    20ee:	f4 ef 9f    	mov.b     w4, [w15-17]
    20f0:	7d 01 20    	mov.w     #0x17, w13

000020f2 <.L28>:
    20f2:	61 72 b9    	mul.su    w14, #0x1, w4
    20f4:	61 2b b9    	mul.su    w5, #0x1, w6
    20f6:	08 00 be    	mov.d     w8, w0
    20f8:	0a 01 be    	mov.d     w10, w2
    20fa:	43 02 07    	rcall     0x2582 <___udivdi3>
    20fc:	0d 00 37    	bra       0x2118 <.L49>

000020fe <.L30>:
    20fe:	61 72 b9    	mul.su    w14, #0x1, w4
    2100:	61 2b b9    	mul.su    w5, #0x1, w6
    2102:	08 00 be    	mov.d     w8, w0
    2104:	0a 01 be    	mov.d     w10, w2
    2106:	48 02 07    	rcall     0x2598 <___divdi3>
    2108:	8d 06 e9    	dec.w     w13, w13
    210a:	00 f2 b9    	mul.ss    w14, w0, w4
    210c:	04 04 54    	sub.w     w8, w4, w8
    210e:	8f ba 97    	mov.w     [w15-16], w5
    2110:	65 42 7c    	mov.b     [w5+w8], w4
    2112:	85 fd 2f    	mov.w     #0xffd8, w5
    2114:	8f 82 42    	add.w     w5, w15, w5
    2116:	84 f2 7e    	mov.b     w4, [w5+w13]

00002118 <.L49>:
    2118:	00 9e be    	mov.d     w0, [w12++]
    211a:	02 96 be    	mov.d     w2, [w12--]
    211c:	3c 04 be    	mov.d     [w12++], w8
    211e:	2c 05 be    	mov.d     [w12--], w10
    2120:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2122:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    2124:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    2126:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    2128:	02 00 34    	bra       LE, 0x212e <.L11>
    212a:	0d 00 e0    	cp0.w     w13
    212c:	e8 ff 3c    	bra       GT, 0x20fe <.L30>

0000212e <.L11>:
    212e:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    2130:	10 00 3a    	bra       NZ, 0x2152 <.L31>
    2132:	0c 10 90    	mov.w     [w12+32], w0
    2134:	00 38 a3    	btst.z    w0, #0x3
    2136:	0d 00 32    	bra       Z, 0x2152 <.L31>
    2138:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    213a:	06 00 3e    	bra       GTU, 0x2148 <.L32>
    213c:	85 fd 2f    	mov.w     #0xffd8, w5
    213e:	8f 82 42    	add.w     w5, w15, w5
    2140:	e5 c0 7e    	mov.b     [w5+w13], w1
    2142:	00 c3 b3    	mov.b     #0x30, w0
    2144:	80 cf 50    	sub.b     w1, w0, [w15]
    2146:	05 00 32    	bra       Z, 0x2152 <.L31>

00002148 <.L32>:
    2148:	8d 06 e9    	dec.w     w13, w13
    214a:	02 c3 b3    	mov.b     #0x30, w2
    214c:	81 fd 2f    	mov.w     #0xffd8, w1
    214e:	8f 80 40    	add.w     w1, w15, w1
    2150:	82 f0 7e    	mov.b     w2, [w1+w13]

00002152 <.L31>:
    2152:	78 81 16    	subr.w    w13, #0x18, w2
    2154:	12 0e 98    	mov.w     w2, [w12+18]
    2156:	6c 00 90    	mov.w     [w12+12], w0
    2158:	83 fd 2f    	mov.w     #0xffd8, w3
    215a:	8f 81 41    	add.w     w3, w15, w3
    215c:	8d 80 41    	add.w     w3, w13, w1
    215e:	77 fa 07    	rcall     0x164e <_memcpy>
    2160:	1c 08 90    	mov.w     [w12+18], w0
    2162:	dc 08 90    	mov.w     [w12+26], w1
    2164:	81 0f 50    	sub.w     w0, w1, [w15]
    2166:	06 00 3d    	bra       GE, 0x2174 <.L33>
    2168:	00 80 50    	sub.w     w1, w0, w0
    216a:	00 0e 98    	mov.w     w0, [w12+16]
    216c:	0c 10 90    	mov.w     [w12+32], w0
    216e:	00 40 a1    	bclr.w    w0, #0x4
    2170:	00 16 98    	mov.w     w0, [w12+32]
    2172:	0f 00 37    	bra       0x2192 <.L1>

00002174 <.L33>:
    2174:	01 00 e0    	cp0.w     w1
    2176:	0d 00 3d    	bra       GE, 0x2192 <.L1>
    2178:	8c 10 90    	mov.w     [w12+32], w1
    217a:	f4 80 60    	and.w     w1, #0x14, w1
    217c:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    217e:	09 00 3a    	bra       NZ, 0x2192 <.L1>
    2180:	7c 09 90    	mov.w     [w12+30], w2
    2182:	fc 00 90    	mov.w     [w12+14], w1
    2184:	81 00 51    	sub.w     w2, w1, w1
    2186:	0c 09 90    	mov.w     [w12+16], w2
    2188:	82 80 50    	sub.w     w1, w2, w1
    218a:	00 80 50    	sub.w     w1, w0, w0
    218c:	42 40 a9    	bclr.b    0x42, #0x2
    218e:	01 00 34    	bra       LE, 0x2192 <.L1>
    2190:	00 0e 98    	mov.w     w0, [w12+16]

00002192 <.L1>:
    2192:	4f 07 78    	mov.w     [--w15], w14
    2194:	4f 06 be    	mov.d     [--w15], w12
    2196:	4f 05 be    	mov.d     [--w15], w10
    2198:	4f 04 be    	mov.d     [--w15], w8
    219a:	cf 01 b1    	sub.w     #0x1c, w15
    219c:	00 00 06    	return    

0000219e <__Puttxt>:
    219e:	04 00 fa    	lnk       #0x4
    21a0:	88 9f be    	mov.d     w8, [w15++]
    21a2:	8a 9f be    	mov.d     w10, [w15++]
    21a4:	8c 1f 78    	mov.w     w12, [w15++]
    21a6:	00 04 78    	mov.w     w0, w8
    21a8:	01 06 78    	mov.w     w1, w12
    21aa:	f8 0d 90    	mov.w     [w8+30], w11
    21ac:	78 00 90    	mov.w     [w8+14], w0
    21ae:	80 85 55    	sub.w     w11, w0, w11
    21b0:	08 08 90    	mov.w     [w8+16], w0
    21b2:	80 85 55    	sub.w     w11, w0, w11
    21b4:	18 08 90    	mov.w     [w8+18], w0
    21b6:	80 85 55    	sub.w     w11, w0, w11
    21b8:	28 08 90    	mov.w     [w8+20], w0
    21ba:	80 85 55    	sub.w     w11, w0, w11
    21bc:	38 08 90    	mov.w     [w8+22], w0
    21be:	80 85 55    	sub.w     w11, w0, w11
    21c0:	48 08 90    	mov.w     [w8+24], w0
    21c2:	80 85 55    	sub.w     w11, w0, w11
    21c4:	00 02 22    	mov.w     #0x2020, w0
    21c6:	90 bf 9f    	mov.w     w0, [w15-14]
    21c8:	00 03 23    	mov.w     #0x3030, w0
    21ca:	a0 bf 9f    	mov.w     w0, [w15-12]
    21cc:	08 10 90    	mov.w     [w8+32], w0
    21ce:	00 28 a3    	btst.z    w0, #0x2
    21d0:	15 00 3a    	bra       NZ, 0x21fc <.L2>
    21d2:	0b 00 e0    	cp0.w     w11
    21d4:	13 00 34    	bra       LE, 0x21fc <.L2>
    21d6:	0b 05 78    	mov.w     w11, w10

000021d8 <.L5>:
    21d8:	8a 04 78    	mov.w     w10, w9
    21da:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    21dc:	01 00 36    	bra       LEU, 0x21e0 <.L3>
    21de:	29 00 20    	mov.w     #0x2, w9

000021e0 <.L3>:
    21e0:	c8 01 90    	mov.w     [w8+8], w3
    21e2:	09 01 78    	mov.w     w9, w2
    21e4:	ee 80 57    	sub.w     w15, #0xe, w1
    21e6:	58 00 90    	mov.w     [w8+10], w0
    21e8:	03 00 01    	call      w3
    21ea:	50 04 98    	mov.w     w0, [w8+10]
    21ec:	00 00 e0    	cp0.w     w0
    21ee:	8c 00 32    	bra       Z, 0x2308 <.L29>
    21f0:	68 08 90    	mov.w     [w8+28], w0
    21f2:	09 00 40    	add.w     w0, w9, w0
    21f4:	60 0c 98    	mov.w     w0, [w8+28]
    21f6:	09 05 55    	sub.w     w10, w9, w10
    21f8:	42 40 a9    	bclr.b    0x42, #0x2
    21fa:	ee ff 3c    	bra       GT, 0x21d8 <.L5>

000021fc <.L2>:
    21fc:	78 01 90    	mov.w     [w8+14], w2
    21fe:	02 00 e0    	cp0.w     w2
    2200:	0c 00 34    	bra       LE, 0x221a <.L6>
    2202:	c8 01 90    	mov.w     [w8+8], w3
    2204:	8c 00 78    	mov.w     w12, w1
    2206:	58 00 90    	mov.w     [w8+10], w0
    2208:	03 00 01    	call      w3
    220a:	50 04 98    	mov.w     w0, [w8+10]
    220c:	80 80 eb    	setm.w    w1
    220e:	00 00 e0    	cp0.w     w0
    2210:	7c 00 32    	bra       Z, 0x230a <.L4>
    2212:	e8 08 90    	mov.w     [w8+28], w1
    2214:	78 00 90    	mov.w     [w8+14], w0
    2216:	00 80 40    	add.w     w1, w0, w0
    2218:	60 0c 98    	mov.w     w0, [w8+28]

0000221a <.L6>:
    221a:	88 0c 90    	mov.w     [w8+16], w9

0000221c <.L30>:
    221c:	09 00 e0    	cp0.w     w9
    221e:	11 00 34    	bra       LE, 0x2242 <.L7>
    2220:	09 05 78    	mov.w     w9, w10
    2222:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    2224:	01 00 36    	bra       LEU, 0x2228 <.L8>
    2226:	2a 00 20    	mov.w     #0x2, w10

00002228 <.L8>:
    2228:	c8 01 90    	mov.w     [w8+8], w3
    222a:	0a 01 78    	mov.w     w10, w2
    222c:	ec 80 57    	sub.w     w15, #0xc, w1
    222e:	58 00 90    	mov.w     [w8+10], w0
    2230:	03 00 01    	call      w3
    2232:	50 04 98    	mov.w     w0, [w8+10]
    2234:	00 00 e0    	cp0.w     w0
    2236:	68 00 32    	bra       Z, 0x2308 <.L29>
    2238:	68 08 90    	mov.w     [w8+28], w0
    223a:	0a 00 40    	add.w     w0, w10, w0
    223c:	60 0c 98    	mov.w     w0, [w8+28]
    223e:	8a 84 54    	sub.w     w9, w10, w9
    2240:	ed ff 37    	bra       0x221c <.L30>

00002242 <.L7>:
    2242:	18 09 90    	mov.w     [w8+18], w2
    2244:	02 00 e0    	cp0.w     w2
    2246:	0c 00 34    	bra       LE, 0x2260 <.L10>
    2248:	c8 01 90    	mov.w     [w8+8], w3
    224a:	e8 00 90    	mov.w     [w8+12], w1
    224c:	58 00 90    	mov.w     [w8+10], w0
    224e:	03 00 01    	call      w3
    2250:	50 04 98    	mov.w     w0, [w8+10]
    2252:	80 80 eb    	setm.w    w1
    2254:	00 00 e0    	cp0.w     w0
    2256:	59 00 32    	bra       Z, 0x230a <.L4>
    2258:	e8 08 90    	mov.w     [w8+28], w1
    225a:	18 08 90    	mov.w     [w8+18], w0
    225c:	00 80 40    	add.w     w1, w0, w0
    225e:	60 0c 98    	mov.w     w0, [w8+28]

00002260 <.L10>:
    2260:	a8 0c 90    	mov.w     [w8+20], w9

00002262 <.L31>:
    2262:	09 00 e0    	cp0.w     w9
    2264:	11 00 34    	bra       LE, 0x2288 <.L11>
    2266:	09 05 78    	mov.w     w9, w10
    2268:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    226a:	01 00 36    	bra       LEU, 0x226e <.L12>
    226c:	2a 00 20    	mov.w     #0x2, w10

0000226e <.L12>:
    226e:	c8 01 90    	mov.w     [w8+8], w3
    2270:	0a 01 78    	mov.w     w10, w2
    2272:	ec 80 57    	sub.w     w15, #0xc, w1
    2274:	58 00 90    	mov.w     [w8+10], w0
    2276:	03 00 01    	call      w3
    2278:	50 04 98    	mov.w     w0, [w8+10]
    227a:	00 00 e0    	cp0.w     w0
    227c:	45 00 32    	bra       Z, 0x2308 <.L29>
    227e:	68 08 90    	mov.w     [w8+28], w0
    2280:	0a 00 40    	add.w     w0, w10, w0
    2282:	60 0c 98    	mov.w     w0, [w8+28]
    2284:	8a 84 54    	sub.w     w9, w10, w9
    2286:	ed ff 37    	bra       0x2262 <.L31>

00002288 <.L11>:
    2288:	38 09 90    	mov.w     [w8+22], w2
    228a:	02 00 e0    	cp0.w     w2
    228c:	0e 00 34    	bra       LE, 0x22aa <.L14>
    228e:	e8 00 90    	mov.w     [w8+12], w1
    2290:	18 08 90    	mov.w     [w8+18], w0
    2292:	80 80 40    	add.w     w1, w0, w1
    2294:	c8 01 90    	mov.w     [w8+8], w3
    2296:	58 00 90    	mov.w     [w8+10], w0
    2298:	03 00 01    	call      w3
    229a:	50 04 98    	mov.w     w0, [w8+10]
    229c:	80 80 eb    	setm.w    w1
    229e:	00 00 e0    	cp0.w     w0
    22a0:	34 00 32    	bra       Z, 0x230a <.L4>
    22a2:	e8 08 90    	mov.w     [w8+28], w1
    22a4:	38 08 90    	mov.w     [w8+22], w0
    22a6:	00 80 40    	add.w     w1, w0, w0
    22a8:	60 0c 98    	mov.w     w0, [w8+28]

000022aa <.L14>:
    22aa:	c8 0c 90    	mov.w     [w8+24], w9

000022ac <.L32>:
    22ac:	09 00 e0    	cp0.w     w9
    22ae:	11 00 34    	bra       LE, 0x22d2 <.L15>
    22b0:	09 05 78    	mov.w     w9, w10
    22b2:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    22b4:	01 00 36    	bra       LEU, 0x22b8 <.L16>
    22b6:	2a 00 20    	mov.w     #0x2, w10

000022b8 <.L16>:
    22b8:	c8 01 90    	mov.w     [w8+8], w3
    22ba:	0a 01 78    	mov.w     w10, w2
    22bc:	ec 80 57    	sub.w     w15, #0xc, w1
    22be:	58 00 90    	mov.w     [w8+10], w0
    22c0:	03 00 01    	call      w3
    22c2:	50 04 98    	mov.w     w0, [w8+10]
    22c4:	00 00 e0    	cp0.w     w0
    22c6:	20 00 32    	bra       Z, 0x2308 <.L29>
    22c8:	68 08 90    	mov.w     [w8+28], w0
    22ca:	0a 00 40    	add.w     w0, w10, w0
    22cc:	60 0c 98    	mov.w     w0, [w8+28]
    22ce:	8a 84 54    	sub.w     w9, w10, w9
    22d0:	ed ff 37    	bra       0x22ac <.L32>

000022d2 <.L15>:
    22d2:	08 10 90    	mov.w     [w8+32], w0
    22d4:	80 00 eb    	clr.w     w1
    22d6:	00 28 a3    	btst.z    w0, #0x2
    22d8:	18 00 32    	bra       Z, 0x230a <.L4>
    22da:	0b 00 e0    	cp0.w     w11
    22dc:	16 00 34    	bra       LE, 0x230a <.L4>
    22de:	8b 04 78    	mov.w     w11, w9

000022e0 <.L19>:
    22e0:	09 05 78    	mov.w     w9, w10
    22e2:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    22e4:	01 00 36    	bra       LEU, 0x22e8 <.L18>
    22e6:	2a 00 20    	mov.w     #0x2, w10

000022e8 <.L18>:
    22e8:	c8 01 90    	mov.w     [w8+8], w3
    22ea:	0a 01 78    	mov.w     w10, w2
    22ec:	ee 80 57    	sub.w     w15, #0xe, w1
    22ee:	58 00 90    	mov.w     [w8+10], w0
    22f0:	03 00 01    	call      w3
    22f2:	50 04 98    	mov.w     w0, [w8+10]
    22f4:	00 00 e0    	cp0.w     w0
    22f6:	08 00 32    	bra       Z, 0x2308 <.L29>
    22f8:	68 08 90    	mov.w     [w8+28], w0
    22fa:	0a 00 40    	add.w     w0, w10, w0
    22fc:	60 0c 98    	mov.w     w0, [w8+28]
    22fe:	8a 84 54    	sub.w     w9, w10, w9
    2300:	42 40 a9    	bclr.b    0x42, #0x2
    2302:	ee ff 3c    	bra       GT, 0x22e0 <.L19>
    2304:	80 00 eb    	clr.w     w1
    2306:	01 00 37    	bra       0x230a <.L4>

00002308 <.L29>:
    2308:	80 80 eb    	setm.w    w1

0000230a <.L4>:
    230a:	01 00 78    	mov.w     w1, w0
    230c:	4f 06 78    	mov.w     [--w15], w12
    230e:	4f 05 be    	mov.d     [--w15], w10
    2310:	4f 04 be    	mov.d     [--w15], w8
    2312:	00 80 fa    	ulnk      
    2314:	00 00 06    	return    

00002316 <__Vacopy>:
    2316:	01 08 78    	mov.w     w1, [w0]
    2318:	00 00 06    	return    

0000231a <_closeallreg>:
    231a:	00 3c 22    	mov.w     #0x23c0, w0
    231c:	61 00 37    	bra       0x23e0 <__Atexit>

0000231e <__Closreg>:
    231e:	88 1f 78    	mov.w     w8, [w15++]
    2320:	e8 49 21    	mov.w     #0x149e, w8
    2322:	18 04 e0    	cp0.b     [w8]
    2324:	03 00 3a    	bra       NZ, 0x232c <.L2>
    2326:	f9 ff 07    	rcall     0x231a <_closeallreg>
    2328:	20 c0 b3    	mov.b     #0x2, w0
    232a:	00 4c 78    	mov.b     w0, [w8]

0000232c <.L2>:
    232c:	4f 04 78    	mov.w     [--w15], w8
    232e:	00 00 06    	return    

00002330 <_fclose>:
    2330:	88 9f be    	mov.d     w8, [w15++]
    2332:	00 04 78    	mov.w     w0, w8
    2334:	08 00 78    	mov.w     w8, w0
    2336:	e2 fc 07    	rcall     0x1cfc <__DNKfflush>
    2338:	80 04 78    	mov.w     w0, w9
    233a:	00 04 20    	mov.w     #0x40, w0
    233c:	18 00 60    	and.w     w0, [w8], w0
    233e:	02 00 32    	bra       Z, 0x2344 <.L5>
    2340:	28 00 90    	mov.w     [w8+4], w0
    2342:	5f fd 07    	rcall     0x1e02 <_free>

00002344 <.L5>:
    2344:	00 00 eb    	clr.w     w0
    2346:	20 04 98    	mov.w     w0, [w8+4]
    2348:	38 40 90    	mov.b     [w8+3], w0
    234a:	00 04 e0    	cp0.b     w0
    234c:	05 00 35    	bra       LT, 0x2358 <.L6>
    234e:	00 00 fb    	se        w0, w0
    2350:	5c f7 07    	rcall     0x120a <_close>
    2352:	00 00 e0    	cp0.w     w0
    2354:	01 00 32    	bra       Z, 0x2358 <.L6>
    2356:	80 84 eb    	setm.w    w9

00002358 <.L6>:
    2358:	18 10 90    	mov.w     [w8+34], w0
    235a:	00 00 e0    	cp0.w     w0
    235c:	08 00 32    	bra       Z, 0x236e <.L7>
    235e:	5e f7 07    	rcall     0x121c <_remove>
    2360:	00 00 e0    	cp0.w     w0
    2362:	01 00 32    	bra       Z, 0x2366 <.L8>
    2364:	80 84 eb    	setm.w    w9

00002366 <.L8>:
    2366:	18 10 90    	mov.w     [w8+34], w0
    2368:	4c fd 07    	rcall     0x1e02 <_free>
    236a:	00 00 eb    	clr.w     w0
    236c:	10 14 98    	mov.w     w0, [w8+34]

0000236e <.L7>:
    236e:	00 08 20    	mov.w     #0x80, w0
    2370:	18 00 60    	and.w     w0, [w8], w0
    2372:	15 00 32    	bra       Z, 0x239e <.L9>
    2374:	00 01 eb    	clr.w     w2
    2376:	60 00 b8    	mul.uu    w0, #0x0, w0

00002378 <.L12>:
    2378:	03 38 21    	mov.w     #0x1380, w3
    237a:	02 02 d0    	sl.w      w2, w4
    237c:	63 02 7a    	mov.w     [w3+w4], w4
    237e:	88 0f 52    	sub.w     w4, w8, [w15]
    2380:	05 00 3a    	bra       NZ, 0x238c <.L10>
    2382:	00 00 40    	add.w     w0, w0, w0
    2384:	81 80 48    	addc.w    w1, w1, w1
    2386:	00 80 41    	add.w     w3, w0, w0
    2388:	00 08 eb    	clr.w     [w0]
    238a:	06 00 37    	bra       0x2398 <.L11>

0000238c <.L10>:
    238c:	61 00 40    	add.w     w0, #0x1, w0
    238e:	e0 80 48    	addc.w    w1, #0x0, w1
    2390:	02 01 e8    	inc.w     w2, w2
    2392:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    2394:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2396:	f0 ff 3a    	bra       NZ, 0x2378 <.L12>

00002398 <.L11>:
    2398:	08 00 78    	mov.w     w8, w0
    239a:	33 fd 07    	rcall     0x1e02 <_free>
    239c:	0e 00 37    	bra       0x23ba <.L13>

0000239e <.L9>:
    239e:	00 0c 78    	mov.w     w0, [w8]
    23a0:	00 c0 eb    	setm.b    w0
    23a2:	30 44 98    	mov.b     w0, [w8+3]
    23a4:	60 02 20    	mov.w     #0x26, w0
    23a6:	08 00 40    	add.w     w0, w8, w0
    23a8:	20 04 98    	mov.w     w0, [w8+4]
    23aa:	40 04 98    	mov.w     w0, [w8+8]
    23ac:	50 04 98    	mov.w     w0, [w8+10]
    23ae:	40 0c 98    	mov.w     w0, [w8+24]
    23b0:	60 04 98    	mov.w     w0, [w8+12]
    23b2:	50 0c 98    	mov.w     w0, [w8+26]
    23b4:	70 04 98    	mov.w     w0, [w8+14]
    23b6:	76 00 44    	add.w     w8, #0x16, w0
    23b8:	00 0c 98    	mov.w     w0, [w8+16]

000023ba <.L13>:
    23ba:	09 00 78    	mov.w     w9, w0
    23bc:	4f 04 be    	mov.d     [--w15], w8
    23be:	00 00 06    	return    

000023c0 <_closeall>:
    23c0:	88 1f 78    	mov.w     w8, [w15++]
    23c2:	00 04 eb    	clr.w     w8

000023c4 <.L18>:
    23c4:	61 40 b8    	mul.uu    w8, #0x1, w0
    23c6:	e2 ff 2f    	mov.w     #0xfffe, w2
    23c8:	f3 ff 2f    	mov.w     #0xffff, w3
    23ca:	3c 00 07    	rcall     0x2444 <___mulp32eds3>
    23cc:	e2 38 21    	mov.w     #0x138e, w2
    23ce:	62 00 78    	mov.w     [w2+w0], w0
    23d0:	00 00 e0    	cp0.w     w0
    23d2:	01 00 32    	bra       Z, 0x23d6 <.L17>
    23d4:	ad ff 07    	rcall     0x2330 <_fclose>

000023d6 <.L17>:
    23d6:	08 04 e8    	inc.w     w8, w8
    23d8:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    23da:	f4 ff 3a    	bra       NZ, 0x23c4 <.L18>
    23dc:	4f 04 78    	mov.w     [--w15], w8
    23de:	00 00 06    	return    

000023e0 <__Atexit>:
    23e0:	01 00 20    	mov.w     #0x0, w1
    23e2:	01 00 e0    	cp0.w     w1
    23e4:	08 00 32    	bra       Z, 0x23f6 <.L1>
    23e6:	01 00 80    	mov.w     0x0, w1
    23e8:	01 00 e0    	cp0.w     w1
    23ea:	05 00 32    	bra       Z, 0x23f6 <.L1>
    23ec:	81 00 e9    	dec.w     w1, w1
    23ee:	01 00 88    	mov.w     w1, 0x0
    23f0:	81 00 d0    	sl.w      w1, w1
    23f2:	02 00 80    	mov.w     0x0, w2
    23f4:	00 b1 78    	mov.w     w0, [w2+w1]

000023f6 <.L1>:
    23f6:	00 00 06    	return    

000023f8 <_doclose>:
    23f8:	00 c0 da    	.pword 0xdac000
    23fa:	00 00 06    	return    

000023fc <_doremove>:
    23fc:	00 c0 da    	.pword 0xdac000
    23fe:	00 00 06    	return    

00002400 <___divsi3>:
    2400:	83 9f 68    	xor.w     w1, w3, [w15++]
    2402:	01 00 e0    	cp0.w     w1
    2404:	02 00 3d    	bra       GE, 0x240a <divtestb>
    2406:	60 00 10    	subr.w    w0, #0x0, w0
    2408:	e0 80 18    	subbr.w   w1, #0x0, w1

0000240a <divtestb>:
    240a:	03 00 e0    	cp0.w     w3
    240c:	02 00 3d    	bra       GE, 0x2412 <calcquot>
    240e:	60 01 11    	subr.w    w2, #0x0, w2
    2410:	e0 81 19    	subbr.w   w3, #0x0, w3

00002412 <calcquot>:
    2412:	05 00 07    	rcall     0x241e <___udivsi3>
    2414:	4f 00 e0    	cp0.w     [--w15]
    2416:	02 00 3b    	bra       NN, 0x241c <returnq>
    2418:	60 00 10    	subr.w    w0, #0x0, w0
    241a:	e0 80 18    	subbr.w   w1, #0x0, w1

0000241c <returnq>:
    241c:	00 00 06    	return    

0000241e <___udivsi3>:
    241e:	60 22 b8    	mul.uu    w4, #0x0, w4
    2420:	06 02 20    	mov.w     #0x20, w6

00002422 <nextbit>:
    2422:	00 00 d0    	sl.w      w0, w0
    2424:	81 80 d2    	rlc.w     w1, w1
    2426:	04 82 d2    	rlc.w     w4, w4
    2428:	85 82 d2    	rlc.w     w5, w5
    242a:	00 00 a0    	bset.w    w0, #0x0
    242c:	02 02 52    	sub.w     w4, w2, w4
    242e:	83 82 5a    	subb.w    w5, w3, w5
    2430:	03 00 31    	bra       C, 0x2438 <iterate>
    2432:	02 02 42    	add.w     w4, w2, w4
    2434:	83 82 4a    	addc.w    w5, w3, w5
    2436:	00 00 a1    	bclr.w    w0, #0x0

00002438 <iterate>:
    2438:	06 03 e9    	dec.w     w6, w6
    243a:	f3 ff 3a    	bra       NZ, 0x2422 <nextbit>
    243c:	00 00 06    	return    

0000243e <___umodsi3>:
    243e:	ef ff 07    	rcall     0x241e <___udivsi3>
    2440:	04 00 be    	mov.d     w4, w0
    2442:	00 00 06    	return    

00002444 <___mulp32eds3>:
    2444:	02 0a b9    	mul.su    w1, w2, w4
    2446:	00 1b b9    	mul.su    w3, w0, w6
    2448:	02 00 b8    	mul.uu    w0, w2, w0
    244a:	81 00 42    	add.w     w4, w1, w1
    244c:	81 00 43    	add.w     w6, w1, w1
    244e:	00 00 06    	return    

00002450 <___PplusBdi>:
    2450:	88 9f be    	mov.d     w8, [w15++]
    2452:	8a 9f be    	mov.d     w10, [w15++]
    2454:	30 04 42    	add.w     w4, [w0++], w8
    2456:	b0 84 4a    	addc.w    w5, [w0++], w9
    2458:	30 05 4b    	addc.w    w6, [w0++], w10
    245a:	90 85 4b    	addc.w    w7, [w0], w11
    245c:	60 00 b1    	sub.w     #0x6, w0
    245e:	08 98 be    	mov.d     w8, [w0++]
    2460:	0a 90 be    	mov.d     w10, [w0--]
    2462:	04 40 e1    	cp.w      w8, w4
    2464:	05 c8 e1    	cpb.w     w9, w5
    2466:	06 d0 e1    	cpb.w     w10, w6
    2468:	07 d8 e1    	cpb.w     w11, w7
    246a:	02 00 31    	bra       C, 0x2470 <.L1>
    246c:	68 00 40    	add.w     w0, #0x8, w0
    246e:	10 08 e8    	inc.w     [w0], [w0]

00002470 <.L1>:
    2470:	4f 05 be    	mov.d     [--w15], w10
    2472:	4f 04 be    	mov.d     [--w15], w8
    2474:	00 00 06    	return    

00002476 <___PminusBdi>:
    2476:	88 9f be    	mov.d     w8, [w15++]
    2478:	8a 9f be    	mov.d     w10, [w15++]
    247a:	30 04 be    	mov.d     [w0++], w8
    247c:	20 05 be    	mov.d     [w0--], w10
    247e:	04 18 54    	sub.w     w8, w4, [w0++]
    2480:	05 98 5c    	subb.w    w9, w5, [w0++]
    2482:	06 18 5d    	subb.w    w10, w6, [w0++]
    2484:	07 98 5d    	subb.w    w11, w7, [w0++]
    2486:	11 00 20    	mov.w     #0x1, w1
    2488:	04 40 e1    	cp.w      w8, w4
    248a:	05 c8 e1    	cpb.w     w9, w5
    248c:	06 d0 e1    	cpb.w     w10, w6
    248e:	07 d8 e1    	cpb.w     w11, w7
    2490:	01 00 39    	bra       NC, 0x2494 <.L4>
    2492:	80 00 eb    	clr.w     w1

00002494 <.L4>:
    2494:	10 88 10    	subr.w    w1, [w0], [w0]
    2496:	4f 05 be    	mov.d     [--w15], w10
    2498:	4f 04 be    	mov.d     [--w15], w8
    249a:	00 00 06    	return    

0000249c <___udivmoddi3>:
    249c:	12 00 fa    	lnk       #0x12
    249e:	88 9f be    	mov.d     w8, [w15++]
    24a0:	8a 9f be    	mov.d     w10, [w15++]
    24a2:	8c 9f be    	mov.d     w12, [w15++]
    24a4:	e0 b7 9f    	mov.w     w0, [w15-20]
    24a6:	f1 b7 9f    	mov.w     w1, [w15-18]
    24a8:	82 bf 9f    	mov.w     w2, [w15-16]
    24aa:	93 bf 9f    	mov.w     w3, [w15-14]
    24ac:	06 05 be    	mov.d     w6, w10
    24ae:	04 04 be    	mov.d     w4, w8
    24b0:	00 00 eb    	clr.w     w0
    24b2:	d0 b7 9f    	mov.w     w0, [w15-22]
    24b4:	c0 b7 9f    	mov.w     w0, [w15-24]
    24b6:	b0 b7 9f    	mov.w     w0, [w15-26]
    24b8:	a0 b7 9f    	mov.w     w0, [w15-28]
    24ba:	90 b7 9f    	mov.w     w0, [w15-30]
    24bc:	00 06 eb    	clr.w     w12

000024be <.L9>:
    24be:	5f b1 97    	mov.w     [w15-22], w2
    24c0:	cf b0 97    	mov.w     [w15-24], w1
    24c2:	82 01 41    	add.w     w2, w2, w3
    24c4:	3f b0 97    	mov.w     [w15-26], w0
    24c6:	02 00 e0    	cp0.w     w2
    24c8:	04 00 3d    	bra       GE, 0x24d2 <.L6>
    24ca:	37 00 07    	rcall     0x253a <.LPA0>
    24cc:	7e 80 57    	sub.w     w15, #0x1e, w0
    24ce:	c0 ff 07    	rcall     0x2450 <___PplusBdi>
    24d0:	03 00 37    	bra       0x24d8 <.L7>

000024d2 <.L6>:
    24d2:	33 00 07    	rcall     0x253a <.LPA0>
    24d4:	7e 80 57    	sub.w     w15, #0x1e, w0
    24d6:	cf ff 07    	rcall     0x2476 <___PminusBdi>

000024d8 <.L7>:
    24d8:	df b6 97    	mov.w     [w15-22], w13
    24da:	0d 00 e0    	cp0.w     w13
    24dc:	0c 00 35    	bra       LT, 0x24f6 <.L8>
    24de:	6f b2 97    	mov.w     [w15-20], w4
    24e0:	ff b2 97    	mov.w     [w15-18], w5
    24e2:	0f bb 97    	mov.w     [w15-16], w6
    24e4:	9f bb 97    	mov.w     [w15-14], w7
    24e6:	10 00 20    	mov.w     #0x1, w0
    24e8:	01 00 20    	mov.w     #0x0, w1
    24ea:	60 11 b8    	mul.uu    w2, #0x0, w2
    24ec:	00 02 72    	ior.w     w4, w0, w4
    24ee:	81 82 72    	ior.w     w5, w1, w5
    24f0:	02 03 73    	ior.w     w6, w2, w6
    24f2:	83 83 73    	ior.w     w7, w3, w7
    24f4:	1b 00 07    	rcall     0x252c <L0>

000024f6 <.L8>:
    24f6:	0c 06 e8    	inc.w     w12, w12
    24f8:	01 04 20    	mov.w     #0x40, w1
    24fa:	81 0f 56    	sub.w     w12, w1, [w15]
    24fc:	e0 ff 3a    	bra       NZ, 0x24be <.L9>
    24fe:	0d 00 e0    	cp0.w     w13
    2500:	04 00 3d    	bra       GE, 0x250a <.L10>
    2502:	08 02 be    	mov.d     w8, w4
    2504:	0a 03 be    	mov.d     w10, w6
    2506:	7e 80 57    	sub.w     w15, #0x1e, w0
    2508:	a3 ff 07    	rcall     0x2450 <___PplusBdi>

0000250a <.L10>:
    250a:	5f a8 97    	mov.w     [w15-38], w0
    250c:	00 00 e0    	cp0.w     w0
    250e:	05 00 3a    	bra       NZ, 0x251a <.L11>
    2510:	1f b2 97    	mov.w     [w15-30], w4
    2512:	af b2 97    	mov.w     [w15-28], w5
    2514:	3f b3 97    	mov.w     [w15-26], w6
    2516:	cf b3 97    	mov.w     [w15-24], w7
    2518:	09 00 07    	rcall     0x252c <L0>

0000251a <.L11>:
    251a:	6f b0 97    	mov.w     [w15-20], w0
    251c:	ff b0 97    	mov.w     [w15-18], w1
    251e:	0f b9 97    	mov.w     [w15-16], w2
    2520:	9f b9 97    	mov.w     [w15-14], w3
    2522:	4f 06 be    	mov.d     [--w15], w12
    2524:	4f 05 be    	mov.d     [--w15], w10
    2526:	4f 04 be    	mov.d     [--w15], w8
    2528:	00 80 fa    	ulnk      
    252a:	00 00 06    	return    

0000252c <L0>:
    252c:	01 00 07    	rcall     0x2530 <.LPA5>
    252e:	00 00 06    	return    

00002530 <.LPA5>:
    2530:	a4 b7 9f    	mov.w     w4, [w15-28]
    2532:	b5 b7 9f    	mov.w     w5, [w15-26]
    2534:	c6 b7 9f    	mov.w     w6, [w15-24]
    2536:	d7 b7 9f    	mov.w     w7, [w15-22]
    2538:	00 00 06    	return    

0000253a <.LPA0>:
    253a:	4f 09 de    	lsr.w     w1, #0xf, w2
    253c:	82 81 71    	ior.w     w3, w2, w3
    253e:	b3 b7 9f    	mov.w     w3, [w15-26]
    2540:	4f 01 de    	lsr.w     w0, #0xf, w2
    2542:	81 80 40    	add.w     w1, w1, w1
    2544:	82 80 70    	ior.w     w1, w2, w1
    2546:	a1 b7 9f    	mov.w     w1, [w15-28]
    2548:	8f b0 97    	mov.w     [w15-32], w1
    254a:	4f 09 de    	lsr.w     w1, #0xf, w2
    254c:	00 00 40    	add.w     w0, w0, w0
    254e:	02 00 70    	ior.w     w0, w2, w0
    2550:	90 b7 9f    	mov.w     w0, [w15-30]
    2552:	7f a8 97    	mov.w     [w15-34], w0
    2554:	4f 01 de    	lsr.w     w0, #0xf, w2
    2556:	81 80 40    	add.w     w1, w1, w1
    2558:	82 80 70    	ior.w     w1, w2, w1
    255a:	81 b7 9f    	mov.w     w1, [w15-32]
    255c:	0d 00 07    	rcall     0x2578 <.LPA4>
    255e:	4f 3a de    	lsr.w     w7, #0xf, w4
    2560:	00 00 40    	add.w     w0, w0, w0
    2562:	04 00 70    	ior.w     w0, w4, w0
    2564:	f0 af 9f    	mov.w     w0, [w15-34]
    2566:	08 00 07    	rcall     0x2578 <.LPA4>
    2568:	04 02 42    	add.w     w4, w4, w4
    256a:	85 82 4a    	addc.w    w5, w5, w5
    256c:	06 03 4b    	addc.w    w6, w6, w6
    256e:	87 83 4b    	addc.w    w7, w7, w7
    2570:	df ff 07    	rcall     0x2530 <.LPA5>
    2572:	08 02 be    	mov.d     w8, w4
    2574:	0a 03 be    	mov.d     w10, w6
    2576:	00 00 06    	return    

00002578 <.LPA4>:
    2578:	2f b2 97    	mov.w     [w15-28], w4
    257a:	bf b2 97    	mov.w     [w15-26], w5
    257c:	4f b3 97    	mov.w     [w15-24], w6
    257e:	df b3 97    	mov.w     [w15-22], w7
    2580:	00 00 06    	return    

00002582 <___udivdi3>:
    2582:	88 1f 78    	mov.w     w8, [w15++]
    2584:	18 00 20    	mov.w     #0x1, w8
    2586:	88 1f 78    	mov.w     w8, [w15++]
    2588:	89 ff 07    	rcall     0x249c <___udivmoddi3>
    258a:	8f 87 e9    	dec2.w    w15, w15
    258c:	4f 04 78    	mov.w     [--w15], w8
    258e:	00 00 06    	return    

00002590 <___umoddi3>:
    2590:	80 1f eb    	clr.w     [w15++]
    2592:	84 ff 07    	rcall     0x249c <___udivmoddi3>
    2594:	8f 87 e9    	dec2.w    w15, w15
    2596:	00 00 06    	return    

00002598 <___divdi3>:
    2598:	88 9f be    	mov.d     w8, [w15++]
    259a:	8a 9f be    	mov.d     w10, [w15++]
    259c:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    259e:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    25a0:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    25a2:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    25a4:	0c 00 3d    	bra       GE, 0x25be <.L15>
    25a6:	60 44 b8    	mul.uu    w8, #0x0, w8
    25a8:	60 55 b8    	mul.uu    w10, #0x0, w10
    25aa:	00 00 54    	sub.w     w8, w0, w0
    25ac:	81 80 5c    	subb.w    w9, w1, w1
    25ae:	02 01 5d    	subb.w    w10, w2, w2
    25b0:	83 81 5d    	subb.w    w11, w3, w3
    25b2:	18 00 20    	mov.w     #0x1, w8
    25b4:	15 00 07    	rcall     0x25e0 <L0>
    25b6:	08 00 3d    	bra       GE, 0x25c8 <.L16>
    25b8:	18 00 07    	rcall     0x25ea <.LPA1>
    25ba:	00 04 eb    	clr.w     w8
    25bc:	05 00 37    	bra       0x25c8 <.L16>

000025be <.L15>:
    25be:	00 04 eb    	clr.w     w8
    25c0:	0f 00 07    	rcall     0x25e0 <L0>
    25c2:	02 00 3d    	bra       GE, 0x25c8 <.L16>
    25c4:	12 00 07    	rcall     0x25ea <.LPA1>
    25c6:	18 00 20    	mov.w     #0x1, w8

000025c8 <.L16>:
    25c8:	dc ff 07    	rcall     0x2582 <___udivdi3>
    25ca:	08 00 e0    	cp0.w     w8
    25cc:	06 00 32    	bra       Z, 0x25da <.L17>
    25ce:	60 22 b8    	mul.uu    w4, #0x0, w4
    25d0:	60 33 b8    	mul.uu    w6, #0x0, w6
    25d2:	00 00 52    	sub.w     w4, w0, w0
    25d4:	81 80 5a    	subb.w    w5, w1, w1
    25d6:	02 01 5b    	subb.w    w6, w2, w2
    25d8:	83 81 5b    	subb.w    w7, w3, w3

000025da <.L17>:
    25da:	4f 05 be    	mov.d     [--w15], w10
    25dc:	4f 04 be    	mov.d     [--w15], w8
    25de:	00 00 06    	return    

000025e0 <L0>:
    25e0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    25e2:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    25e4:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    25e6:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    25e8:	00 00 06    	return    

000025ea <.LPA1>:
    25ea:	60 44 b8    	mul.uu    w8, #0x0, w8
    25ec:	60 55 b8    	mul.uu    w10, #0x0, w10
    25ee:	04 02 54    	sub.w     w8, w4, w4
    25f0:	85 82 5c    	subb.w    w9, w5, w5
    25f2:	06 03 5d    	subb.w    w10, w6, w6
    25f4:	87 83 5d    	subb.w    w11, w7, w7
    25f6:	00 00 06    	return    

000025f8 <___moddi3>:
    25f8:	88 9f be    	mov.d     w8, [w15++]
    25fa:	8a 9f be    	mov.d     w10, [w15++]
    25fc:	8c 1f 78    	mov.w     w12, [w15++]
    25fe:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2600:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2602:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2604:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2606:	0d 00 3d    	bra       GE, 0x2622 <.L21>
    2608:	60 44 b8    	mul.uu    w8, #0x0, w8
    260a:	60 55 b8    	mul.uu    w10, #0x0, w10
    260c:	00 00 54    	sub.w     w8, w0, w0
    260e:	81 80 5c    	subb.w    w9, w1, w1
    2610:	02 01 5d    	subb.w    w10, w2, w2
    2612:	83 81 5d    	subb.w    w11, w3, w3
    2614:	1c 00 20    	mov.w     #0x1, w12
    2616:	08 20 e1    	cp.w      w4, w8
    2618:	09 a8 e1    	cpb.w     w5, w9
    261a:	0a b0 e1    	cpb.w     w6, w10
    261c:	0b b8 e1    	cpb.w     w7, w11
    261e:	0d 00 3d    	bra       GE, 0x263a <.L22>
    2620:	08 00 37    	bra       0x2632 <.L26>

00002622 <.L21>:
    2622:	00 06 eb    	clr.w     w12
    2624:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2626:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2628:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    262a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    262c:	06 00 3d    	bra       GE, 0x263a <.L22>
    262e:	60 44 b8    	mul.uu    w8, #0x0, w8
    2630:	60 55 b8    	mul.uu    w10, #0x0, w10

00002632 <.L26>:
    2632:	04 02 54    	sub.w     w8, w4, w4
    2634:	85 82 5c    	subb.w    w9, w5, w5
    2636:	06 03 5d    	subb.w    w10, w6, w6
    2638:	87 83 5d    	subb.w    w11, w7, w7

0000263a <.L22>:
    263a:	aa ff 07    	rcall     0x2590 <___umoddi3>
    263c:	0c 00 e0    	cp0.w     w12
    263e:	06 00 32    	bra       Z, 0x264c <.L23>
    2640:	60 22 b8    	mul.uu    w4, #0x0, w4
    2642:	60 33 b8    	mul.uu    w6, #0x0, w6
    2644:	00 00 52    	sub.w     w4, w0, w0
    2646:	81 80 5a    	subb.w    w5, w1, w1
    2648:	02 01 5b    	subb.w    w6, w2, w2
    264a:	83 81 5b    	subb.w    w7, w3, w3

0000264c <.L23>:
    264c:	4f 06 78    	mov.w     [--w15], w12
    264e:	4f 05 be    	mov.d     [--w15], w10
    2650:	4f 04 be    	mov.d     [--w15], w8
    2652:	00 00 06    	return    

00002654 <___muldi3>:
    2654:	88 9f be    	mov.d     w8, [w15++]
    2656:	8a 9f be    	mov.d     w10, [w15++]
    2658:	8c 1f 78    	mov.w     w12, [w15++]
    265a:	00 06 eb    	clr.w     w12
    265c:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    265e:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2660:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2662:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2664:	07 00 3d    	bra       GE, 0x2674 <.L2>
    2666:	60 44 b8    	mul.uu    w8, #0x0, w8
    2668:	60 55 b8    	mul.uu    w10, #0x0, w10
    266a:	00 00 54    	sub.w     w8, w0, w0
    266c:	81 80 5c    	subb.w    w9, w1, w1
    266e:	02 01 5d    	subb.w    w10, w2, w2
    2670:	83 81 5d    	subb.w    w11, w3, w3
    2672:	1c 00 20    	mov.w     #0x1, w12

00002674 <.L2>:
    2674:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2676:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2678:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    267a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    267c:	07 00 3d    	bra       GE, 0x268c <.L3>
    267e:	60 44 b8    	mul.uu    w8, #0x0, w8
    2680:	60 55 b8    	mul.uu    w10, #0x0, w10
    2682:	04 02 54    	sub.w     w8, w4, w4
    2684:	85 82 5c    	subb.w    w9, w5, w5
    2686:	06 03 5d    	subb.w    w10, w6, w6
    2688:	87 83 5d    	subb.w    w11, w7, w7
    268a:	0c 00 a2    	btg.w     w12, #0x0

0000268c <.L3>:
    268c:	0c 00 07    	rcall     0x26a6 <___umuldi3>
    268e:	0c 00 e0    	cp0.w     w12
    2690:	06 00 32    	bra       Z, 0x269e <.L4>
    2692:	60 22 b8    	mul.uu    w4, #0x0, w4
    2694:	60 33 b8    	mul.uu    w6, #0x0, w6
    2696:	00 00 52    	sub.w     w4, w0, w0
    2698:	81 80 5a    	subb.w    w5, w1, w1
    269a:	02 01 5b    	subb.w    w6, w2, w2
    269c:	83 81 5b    	subb.w    w7, w3, w3

0000269e <.L4>:
    269e:	4f 06 78    	mov.w     [--w15], w12
    26a0:	4f 05 be    	mov.d     [--w15], w10
    26a2:	4f 04 be    	mov.d     [--w15], w8
    26a4:	00 00 06    	return    

000026a6 <___umuldi3>:
    26a6:	88 9f be    	mov.d     w8, [w15++]
    26a8:	8a 9f be    	mov.d     w10, [w15++]
    26aa:	8c 9f be    	mov.d     w12, [w15++]
    26ac:	04 04 b8    	mul.uu    w0, w4, w8
    26ae:	05 06 b8    	mul.uu    w0, w5, w12
    26b0:	89 04 46    	add.w     w12, w9, w9
    26b2:	60 85 4e    	addc.w    w13, #0x0, w10
    26b4:	06 06 b8    	mul.uu    w0, w6, w12
    26b6:	0a 05 46    	add.w     w12, w10, w10
    26b8:	e0 85 4e    	addc.w    w13, #0x0, w11
    26ba:	07 06 b8    	mul.uu    w0, w7, w12
    26bc:	8b 05 46    	add.w     w12, w11, w11
    26be:	04 0e b8    	mul.uu    w1, w4, w12
    26c0:	89 04 46    	add.w     w12, w9, w9
    26c2:	0a 85 4e    	addc.w    w13, w10, w10
    26c4:	e0 85 4d    	addc.w    w11, #0x0, w11
    26c6:	05 0e b8    	mul.uu    w1, w5, w12
    26c8:	0a 05 46    	add.w     w12, w10, w10
    26ca:	8b 85 4e    	addc.w    w13, w11, w11
    26cc:	06 0e b8    	mul.uu    w1, w6, w12
    26ce:	8b 05 46    	add.w     w12, w11, w11
    26d0:	04 16 b8    	mul.uu    w2, w4, w12
    26d2:	0a 05 46    	add.w     w12, w10, w10
    26d4:	8b 85 4e    	addc.w    w13, w11, w11
    26d6:	05 16 b8    	mul.uu    w2, w5, w12
    26d8:	8b 05 46    	add.w     w12, w11, w11
    26da:	04 1e b8    	mul.uu    w3, w4, w12
    26dc:	8b 05 46    	add.w     w12, w11, w11
    26de:	08 00 be    	mov.d     w8, w0
    26e0:	0a 01 be    	mov.d     w10, w2
    26e2:	4f 06 be    	mov.d     [--w15], w12
    26e4:	4f 05 be    	mov.d     [--w15], w10
    26e6:	4f 04 be    	mov.d     [--w15], w8
    26e8:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	b6 34 04    	goto      0x34b6 <__T1Interrupt>
    1026:	00 00 00 
    1028:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	e4 34 04    	goto      0x34e4 <__T2Interrupt>
    1032:	00 00 00 
    1034:	12 35 04    	goto      0x3512 <__T3Interrupt>
    1036:	00 00 00 
    1038:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	1c 29 04    	goto      0x291c <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	ee 28 04    	goto      0x28ee <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	40 35 04    	goto      0x3540 <__T4Interrupt>
    1072:	00 00 00 
    1074:	6e 35 04    	goto      0x356e <__T5Interrupt>
    1076:	00 00 00 
    1078:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	78 29 04    	goto      0x2978 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	4a 29 04    	goto      0x294a <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	d4 29 04    	goto      0x29d4 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	a6 29 04    	goto      0x29a6 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	30 2a 04    	goto      0x2a30 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	02 2a 04    	goto      0x2a02 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	08 43 04    	goto      0x4308 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a6ea <.LC0>:
    a6ea:	25 30       	.word 0x3025
    a6ec:	32 58       	.word 0x5832
    a6ee:	00 0a       	.word 0xa00

0000a6ef <.LC1>:
    a6ef:	00 00       	.word 0

0000a6f1 <.LC2>:
    a6f1:	00 00       	.word 0
    a6f3:	00 00       	.word 0
	...
Disassembly of section .text:

000026f6 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    26f6:	04 00 fa    	lnk       #0x4
    26f8:	00 0f 78    	mov.w     w0, [w14]
    26fa:	21 47 98    	mov.b     w1, [w14+2]

000026fc <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    26fc:	00 00 00    	nop       

000026fe <.L2>:
    26fe:	1e 00 78    	mov.w     [w14], w0
    2700:	10 00 90    	mov.w     [w0+2], w0
    2702:	90 00 78    	mov.w     [w0], w1
    2704:	00 20 20    	mov.w     #0x200, w0
    2706:	00 80 60    	and.w     w1, w0, w0
    2708:	00 00 e0    	cp0.w     w0
    270a:	f9 ff 3a    	bra       NZ, 0x26fe <.L2>

0000270c <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    270c:	1e 00 78    	mov.w     [w14], w0
    270e:	20 00 90    	mov.w     [w0+4], w0
    2710:	ae 40 90    	mov.b     [w14+2], w1
    2712:	81 80 fb    	ze        w1, w1
    2714:	01 08 78    	mov.w     w1, [w0]

00002716 <.LSM3>:
}
    2716:	00 80 fa    	ulnk      
    2718:	00 00 06    	return    

0000271a <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    271a:	02 00 fa    	lnk       #0x2
    271c:	00 0f 78    	mov.w     w0, [w14]

0000271e <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    271e:	00 00 00    	nop       

00002720 <.L4>:
    2720:	1e 00 78    	mov.w     [w14], w0
    2722:	10 00 90    	mov.w     [w0+2], w0
    2724:	10 00 78    	mov.w     [w0], w0
    2726:	61 00 60    	and.w     w0, #0x1, w0
    2728:	00 00 e0    	cp0.w     w0
    272a:	fa ff 32    	bra       Z, 0x2720 <.L4>

0000272c <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    272c:	1e 00 78    	mov.w     [w14], w0
    272e:	30 00 90    	mov.w     [w0+6], w0
    2730:	10 00 78    	mov.w     [w0], w0
    2732:	00 40 78    	mov.b     w0, w0

00002734 <.LSM7>:
}
    2734:	00 80 fa    	ulnk      
    2736:	00 00 06    	return    

00002738 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    2738:	04 00 fa    	lnk       #0x4
    273a:	00 0f 78    	mov.w     w0, [w14]
    273c:	21 47 98    	mov.b     w1, [w14+2]

0000273e <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    273e:	00 00 00    	nop       

00002740 <.L6>:
    2740:	1e 00 78    	mov.w     [w14], w0
    2742:	d0 10 90    	mov.w     [w0+42], w1
    2744:	1e 00 78    	mov.w     [w14], w0
    2746:	20 10 90    	mov.w     [w0+36], w0
    2748:	80 8f 50    	sub.w     w1, w0, [w15]
    274a:	fa ff 32    	bra       Z, 0x2740 <.L6>

0000274c <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    274c:	ff 3f fc    	disi      #0x3fff

0000274e <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    274e:	1e 00 78    	mov.w     [w14], w0
    2750:	90 10 90    	mov.w     [w0+34], w1
    2752:	1e 00 78    	mov.w     [w14], w0
    2754:	40 10 90    	mov.w     [w0+40], w0
    2756:	00 80 40    	add.w     w1, w0, w0
    2758:	ae 40 90    	mov.b     [w14+2], w1
    275a:	01 48 78    	mov.b     w1, [w0]

0000275c <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    275c:	1e 00 78    	mov.w     [w14], w0
    275e:	40 10 90    	mov.w     [w0+40], w0
    2760:	80 00 e8    	inc.w     w0, w1
    2762:	1e 00 78    	mov.w     [w14], w0
    2764:	20 10 90    	mov.w     [w0+36], w0
    2766:	00 01 78    	mov.w     w0, w2
    2768:	11 00 09    	repeat    #0x11
    276a:	82 80 d8    	div.uw    w1, w2
    276c:	80 00 fd    	exch      w0, w1
    276e:	80 00 78    	mov.w     w0, w1
    2770:	1e 00 78    	mov.w     [w14], w0
    2772:	41 10 98    	mov.w     w1, [w0+40]

00002774 <.LSM13>:
    self->TXbuffer.count++;
    2774:	1e 00 78    	mov.w     [w14], w0
    2776:	50 10 90    	mov.w     [w0+42], w0
    2778:	80 00 e8    	inc.w     w0, w1
    277a:	1e 00 78    	mov.w     [w14], w0
    277c:	51 10 98    	mov.w     w1, [w0+42]

0000277e <.LSM14>:
    enable_interrupts();
    277e:	52 20 ef    	clr.w     0x52

00002780 <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    2780:	1e 00 78    	mov.w     [w14], w0
    2782:	d0 10 90    	mov.w     [w0+42], w1
    2784:	1e 00 78    	mov.w     [w14], w0
    2786:	30 18 90    	mov.w     [w0+54], w0
    2788:	80 8f 50    	sub.w     w1, w0, [w15]
    278a:	08 00 39    	bra       NC, 0x279c <.L5>

0000278c <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    278c:	1e 00 78    	mov.w     [w14], w0
    278e:	10 00 90    	mov.w     [w0+2], w0
    2790:	9e 00 78    	mov.w     [w14], w1
    2792:	91 00 90    	mov.w     [w1+2], w1
    2794:	11 01 78    	mov.w     [w1], w2
    2796:	01 40 20    	mov.w     #0x400, w1
    2798:	82 80 70    	ior.w     w1, w2, w1
    279a:	01 08 78    	mov.w     w1, [w0]

0000279c <.L5>:
                                                    // transmission
}
    279c:	00 80 fa    	ulnk      
    279e:	00 00 06    	return    

000027a0 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    27a0:	04 00 fa    	lnk       #0x4
    27a2:	10 07 98    	mov.w     w0, [w14+2]

000027a4 <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    27a4:	1e 00 90    	mov.w     [w14+2], w0
    27a6:	50 00 90    	mov.w     [w0+10], w0
    27a8:	9e 00 90    	mov.w     [w14+2], w1
    27aa:	d1 00 90    	mov.w     [w1+10], w1
    27ac:	11 01 78    	mov.w     [w1], w2
    27ae:	9e 00 90    	mov.w     [w14+2], w1
    27b0:	e1 48 90    	mov.b     [w1+14], w1
    27b2:	81 80 fb    	ze        w1, w1
    27b4:	13 00 20    	mov.w     #0x1, w3
    27b6:	81 18 dd    	sl.w      w3, w1, w1
    27b8:	81 80 ea    	com.w     w1, w1
    27ba:	81 00 61    	and.w     w2, w1, w1
    27bc:	01 08 78    	mov.w     w1, [w0]

000027be <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    27be:	1e 00 90    	mov.w     [w14+2], w0
    27c0:	50 10 90    	mov.w     [w0+42], w0
    27c2:	00 00 e0    	cp0.w     w0
    27c4:	27 00 3a    	bra       NZ, 0x2814 <.L13>

000027c6 <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    27c6:	1e 00 90    	mov.w     [w14+2], w0
    27c8:	10 00 90    	mov.w     [w0+2], w0
    27ca:	9e 00 90    	mov.w     [w14+2], w1
    27cc:	91 00 90    	mov.w     [w1+2], w1
    27ce:	11 01 78    	mov.w     [w1], w2
    27d0:	f1 bf 2f    	mov.w     #0xfbff, w1
    27d2:	81 00 61    	and.w     w2, w1, w1
    27d4:	01 08 78    	mov.w     w1, [w0]

000027d6 <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    27d6:	1f 00 37    	bra       0x2816 <.L10>

000027d8 <.L12>:
        disable_interrupts();
    27d8:	ff 3f fc    	disi      #0x3fff

000027da <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    27da:	1e 00 90    	mov.w     [w14+2], w0
    27dc:	90 10 90    	mov.w     [w0+34], w1
    27de:	1e 00 90    	mov.w     [w14+2], w0
    27e0:	30 10 90    	mov.w     [w0+38], w0
    27e2:	00 80 40    	add.w     w1, w0, w0
    27e4:	10 4f 78    	mov.b     [w0], [w14]

000027e6 <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    27e6:	1e 00 90    	mov.w     [w14+2], w0
    27e8:	30 10 90    	mov.w     [w0+38], w0
    27ea:	80 00 e8    	inc.w     w0, w1
    27ec:	1e 00 90    	mov.w     [w14+2], w0
    27ee:	20 10 90    	mov.w     [w0+36], w0
    27f0:	00 01 78    	mov.w     w0, w2
    27f2:	11 00 09    	repeat    #0x11
    27f4:	82 80 d8    	div.uw    w1, w2
    27f6:	80 00 fd    	exch      w0, w1
    27f8:	80 00 78    	mov.w     w0, w1
    27fa:	1e 00 90    	mov.w     [w14+2], w0
    27fc:	31 10 98    	mov.w     w1, [w0+38]

000027fe <.LSM26>:
        self->TXbuffer.count--;
    27fe:	1e 00 90    	mov.w     [w14+2], w0
    2800:	50 10 90    	mov.w     [w0+42], w0
    2802:	80 00 e9    	dec.w     w0, w1
    2804:	1e 00 90    	mov.w     [w14+2], w0
    2806:	51 10 98    	mov.w     w1, [w0+42]

00002808 <.LSM27>:
        enable_interrupts();
    2808:	52 20 ef    	clr.w     0x52

0000280a <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    280a:	1e 00 90    	mov.w     [w14+2], w0
    280c:	20 00 90    	mov.w     [w0+4], w0
    280e:	9e 80 fb    	ze        [w14], w1
    2810:	01 08 78    	mov.w     w1, [w0]
    2812:	01 00 37    	bra       0x2816 <.L10>

00002814 <.L13>:
    2814:	00 00 00    	nop       

00002816 <.L10>:
    2816:	1e 00 90    	mov.w     [w14+2], w0
    2818:	10 00 90    	mov.w     [w0+2], w0
    281a:	90 00 78    	mov.w     [w0], w1
    281c:	00 20 20    	mov.w     #0x200, w0
    281e:	00 80 60    	and.w     w1, w0, w0
    2820:	00 00 e0    	cp0.w     w0
    2822:	04 00 3a    	bra       NZ, 0x282c <.L8>
    2824:	1e 00 90    	mov.w     [w14+2], w0
    2826:	50 10 90    	mov.w     [w0+42], w0
    2828:	00 00 e0    	cp0.w     w0
    282a:	d6 ff 3a    	bra       NZ, 0x27d8 <.L12>

0000282c <.L8>:
    }
}
    282c:	00 80 fa    	ulnk      
    282e:	00 00 06    	return    

00002830 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    2830:	04 00 fa    	lnk       #0x4
    2832:	10 07 98    	mov.w     w0, [w14+2]

00002834 <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    2834:	00 00 00    	nop       

00002836 <.L15>:
    2836:	1e 00 90    	mov.w     [w14+2], w0
    2838:	20 18 90    	mov.w     [w0+52], w0
    283a:	00 00 e0    	cp0.w     w0
    283c:	fc ff 32    	bra       Z, 0x2836 <.L15>

0000283e <.LSM33>:
    disable_interrupts();
    283e:	ff 3f fc    	disi      #0x3fff

00002840 <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    2840:	1e 00 90    	mov.w     [w14+2], w0
    2842:	e0 10 90    	mov.w     [w0+44], w1
    2844:	1e 00 90    	mov.w     [w14+2], w0
    2846:	00 18 90    	mov.w     [w0+48], w0
    2848:	00 80 40    	add.w     w1, w0, w0
    284a:	10 4f 78    	mov.b     [w0], [w14]

0000284c <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    284c:	1e 00 90    	mov.w     [w14+2], w0
    284e:	00 18 90    	mov.w     [w0+48], w0
    2850:	80 00 e8    	inc.w     w0, w1
    2852:	1e 00 90    	mov.w     [w14+2], w0
    2854:	70 10 90    	mov.w     [w0+46], w0
    2856:	00 01 78    	mov.w     w0, w2
    2858:	11 00 09    	repeat    #0x11
    285a:	82 80 d8    	div.uw    w1, w2
    285c:	80 00 fd    	exch      w0, w1
    285e:	80 00 78    	mov.w     w0, w1
    2860:	1e 00 90    	mov.w     [w14+2], w0
    2862:	01 18 98    	mov.w     w1, [w0+48]

00002864 <.LSM36>:
    self->RXbuffer.count--;
    2864:	1e 00 90    	mov.w     [w14+2], w0
    2866:	20 18 90    	mov.w     [w0+52], w0
    2868:	80 00 e9    	dec.w     w0, w1
    286a:	1e 00 90    	mov.w     [w14+2], w0
    286c:	21 18 98    	mov.w     w1, [w0+52]

0000286e <.LSM37>:
    enable_interrupts();
    286e:	52 20 ef    	clr.w     0x52

00002870 <.LSM38>:
    return ch;
    2870:	1e 40 78    	mov.b     [w14], w0

00002872 <.LSM39>:
}
    2872:	00 80 fa    	ulnk      
    2874:	00 00 06    	return    

00002876 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    2876:	02 00 fa    	lnk       #0x2
    2878:	00 0f 78    	mov.w     w0, [w14]

0000287a <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    287a:	1e 00 78    	mov.w     [w14], w0
    287c:	50 00 90    	mov.w     [w0+10], w0
    287e:	9e 00 78    	mov.w     [w14], w1
    2880:	d1 00 90    	mov.w     [w1+10], w1
    2882:	11 01 78    	mov.w     [w1], w2
    2884:	9e 00 78    	mov.w     [w14], w1
    2886:	f1 48 90    	mov.b     [w1+15], w1
    2888:	81 80 fb    	ze        w1, w1
    288a:	13 00 20    	mov.w     #0x1, w3
    288c:	81 18 dd    	sl.w      w3, w1, w1
    288e:	81 80 ea    	com.w     w1, w1
    2890:	81 00 61    	and.w     w2, w1, w1
    2892:	01 08 78    	mov.w     w1, [w0]

00002894 <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    2894:	1d 00 37    	bra       0x28d0 <.L17>

00002896 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    2896:	ff 3f fc    	disi      #0x3fff

00002898 <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    2898:	1e 00 78    	mov.w     [w14], w0
    289a:	e0 10 90    	mov.w     [w0+44], w1
    289c:	1e 00 78    	mov.w     [w14], w0
    289e:	10 18 90    	mov.w     [w0+50], w0
    28a0:	00 80 40    	add.w     w1, w0, w0
    28a2:	9e 00 78    	mov.w     [w14], w1
    28a4:	b1 00 90    	mov.w     [w1+6], w1
    28a6:	91 00 78    	mov.w     [w1], w1
    28a8:	81 40 78    	mov.b     w1, w1
    28aa:	01 48 78    	mov.b     w1, [w0]

000028ac <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    28ac:	1e 00 78    	mov.w     [w14], w0
    28ae:	10 18 90    	mov.w     [w0+50], w0
    28b0:	80 00 e8    	inc.w     w0, w1
    28b2:	1e 00 78    	mov.w     [w14], w0
    28b4:	70 10 90    	mov.w     [w0+46], w0
    28b6:	00 01 78    	mov.w     w0, w2
    28b8:	11 00 09    	repeat    #0x11
    28ba:	82 80 d8    	div.uw    w1, w2
    28bc:	80 00 fd    	exch      w0, w1
    28be:	80 00 78    	mov.w     w0, w1
    28c0:	1e 00 78    	mov.w     [w14], w0
    28c2:	11 18 98    	mov.w     w1, [w0+50]

000028c4 <.LSM46>:
        self->RXbuffer.count++;
    28c4:	1e 00 78    	mov.w     [w14], w0
    28c6:	20 18 90    	mov.w     [w0+52], w0
    28c8:	80 00 e8    	inc.w     w0, w1
    28ca:	1e 00 78    	mov.w     [w14], w0
    28cc:	21 18 98    	mov.w     w1, [w0+52]

000028ce <.LSM47>:
        enable_interrupts();
    28ce:	52 20 ef    	clr.w     0x52

000028d0 <.L17>:
    28d0:	1e 00 78    	mov.w     [w14], w0
    28d2:	10 00 90    	mov.w     [w0+2], w0
    28d4:	10 00 78    	mov.w     [w0], w0
    28d6:	61 00 60    	and.w     w0, #0x1, w0
    28d8:	00 40 78    	mov.b     w0, w0
    28da:	00 04 e0    	cp0.b     w0
    28dc:	06 00 32    	bra       Z, 0x28ea <.L16>

000028de <.LSM49>:
    28de:	1e 00 78    	mov.w     [w14], w0
    28e0:	a0 18 90    	mov.w     [w0+52], w1
    28e2:	1e 00 78    	mov.w     [w14], w0
    28e4:	70 10 90    	mov.w     [w0+46], w0

000028e6 <.LSM50>:
    28e6:	80 8f 50    	sub.w     w1, w0, [w15]
    28e8:	d6 ff 3a    	bra       NZ, 0x2896 <.L19>

000028ea <.L16>:
    }
}
    28ea:	00 80 fa    	ulnk      
    28ec:	00 00 06    	return    

000028ee <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    28ee:	36 00 f8    	push      0x36
    28f0:	80 9f be    	mov.d     w0, [w15++]
    28f2:	82 9f be    	mov.d     w2, [w15++]
    28f4:	84 9f be    	mov.d     w4, [w15++]
    28f6:	86 9f be    	mov.d     w6, [w15++]
    28f8:	32 00 f8    	push      0x32
    28fa:	34 00 f8    	push      0x34
    28fc:	10 00 20    	mov.w     #0x1, w0
    28fe:	a0 01 88    	mov.w     w0, 0x34
    2900:	00 20 20    	mov.w     #0x200, w0
    2902:	90 01 88    	mov.w     w0, 0x32
    2904:	00 00 fa    	lnk       #0x0

00002906 <.LSM53>:
    __serviceTxInterrupt(&uart1);
    2906:	c0 1e 21    	mov.w     #0x11ec, w0
    2908:	4b ff 07    	rcall     0x27a0 <___serviceTxInterrupt>

0000290a <.LSM54>:
}
    290a:	00 80 fa    	ulnk      
    290c:	34 00 f9    	pop       0x34
    290e:	32 00 f9    	pop       0x32
    2910:	4f 03 be    	mov.d     [--w15], w6
    2912:	4f 02 be    	mov.d     [--w15], w4
    2914:	4f 01 be    	mov.d     [--w15], w2
    2916:	4f 00 be    	mov.d     [--w15], w0
    2918:	36 00 f9    	pop       0x36
    291a:	00 40 06    	retfie    

0000291c <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    291c:	36 00 f8    	push      0x36
    291e:	80 9f be    	mov.d     w0, [w15++]
    2920:	82 9f be    	mov.d     w2, [w15++]
    2922:	84 9f be    	mov.d     w4, [w15++]
    2924:	86 9f be    	mov.d     w6, [w15++]
    2926:	32 00 f8    	push      0x32
    2928:	34 00 f8    	push      0x34
    292a:	10 00 20    	mov.w     #0x1, w0
    292c:	a0 01 88    	mov.w     w0, 0x34
    292e:	00 20 20    	mov.w     #0x200, w0
    2930:	90 01 88    	mov.w     w0, 0x32
    2932:	00 00 fa    	lnk       #0x0

00002934 <.LSM56>:
    __serviceRxInterrupt(&uart1);
    2934:	c0 1e 21    	mov.w     #0x11ec, w0
    2936:	9f ff 07    	rcall     0x2876 <___serviceRxInterrupt>

00002938 <.LSM57>:
}
    2938:	00 80 fa    	ulnk      
    293a:	34 00 f9    	pop       0x34
    293c:	32 00 f9    	pop       0x32
    293e:	4f 03 be    	mov.d     [--w15], w6
    2940:	4f 02 be    	mov.d     [--w15], w4
    2942:	4f 01 be    	mov.d     [--w15], w2
    2944:	4f 00 be    	mov.d     [--w15], w0
    2946:	36 00 f9    	pop       0x36
    2948:	00 40 06    	retfie    

0000294a <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    294a:	36 00 f8    	push      0x36
    294c:	80 9f be    	mov.d     w0, [w15++]
    294e:	82 9f be    	mov.d     w2, [w15++]
    2950:	84 9f be    	mov.d     w4, [w15++]
    2952:	86 9f be    	mov.d     w6, [w15++]
    2954:	32 00 f8    	push      0x32
    2956:	34 00 f8    	push      0x34
    2958:	10 00 20    	mov.w     #0x1, w0
    295a:	a0 01 88    	mov.w     w0, 0x34
    295c:	00 20 20    	mov.w     #0x200, w0
    295e:	90 01 88    	mov.w     w0, 0x32
    2960:	00 00 fa    	lnk       #0x0

00002962 <.LSM59>:
    __serviceTxInterrupt(&uart2);
    2962:	80 22 21    	mov.w     #0x1228, w0
    2964:	1d ff 07    	rcall     0x27a0 <___serviceTxInterrupt>

00002966 <.LSM60>:
}
    2966:	00 80 fa    	ulnk      
    2968:	34 00 f9    	pop       0x34
    296a:	32 00 f9    	pop       0x32
    296c:	4f 03 be    	mov.d     [--w15], w6
    296e:	4f 02 be    	mov.d     [--w15], w4
    2970:	4f 01 be    	mov.d     [--w15], w2
    2972:	4f 00 be    	mov.d     [--w15], w0
    2974:	36 00 f9    	pop       0x36
    2976:	00 40 06    	retfie    

00002978 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2978:	36 00 f8    	push      0x36
    297a:	80 9f be    	mov.d     w0, [w15++]
    297c:	82 9f be    	mov.d     w2, [w15++]
    297e:	84 9f be    	mov.d     w4, [w15++]
    2980:	86 9f be    	mov.d     w6, [w15++]
    2982:	32 00 f8    	push      0x32
    2984:	34 00 f8    	push      0x34
    2986:	10 00 20    	mov.w     #0x1, w0
    2988:	a0 01 88    	mov.w     w0, 0x34
    298a:	00 20 20    	mov.w     #0x200, w0
    298c:	90 01 88    	mov.w     w0, 0x32
    298e:	00 00 fa    	lnk       #0x0

00002990 <.LSM62>:
    __serviceRxInterrupt(&uart2);
    2990:	80 22 21    	mov.w     #0x1228, w0
    2992:	71 ff 07    	rcall     0x2876 <___serviceRxInterrupt>

00002994 <.LSM63>:
}
    2994:	00 80 fa    	ulnk      
    2996:	34 00 f9    	pop       0x34
    2998:	32 00 f9    	pop       0x32
    299a:	4f 03 be    	mov.d     [--w15], w6
    299c:	4f 02 be    	mov.d     [--w15], w4
    299e:	4f 01 be    	mov.d     [--w15], w2
    29a0:	4f 00 be    	mov.d     [--w15], w0
    29a2:	36 00 f9    	pop       0x36
    29a4:	00 40 06    	retfie    

000029a6 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    29a6:	36 00 f8    	push      0x36
    29a8:	80 9f be    	mov.d     w0, [w15++]
    29aa:	82 9f be    	mov.d     w2, [w15++]
    29ac:	84 9f be    	mov.d     w4, [w15++]
    29ae:	86 9f be    	mov.d     w6, [w15++]
    29b0:	32 00 f8    	push      0x32
    29b2:	34 00 f8    	push      0x34
    29b4:	10 00 20    	mov.w     #0x1, w0
    29b6:	a0 01 88    	mov.w     w0, 0x34
    29b8:	00 20 20    	mov.w     #0x200, w0
    29ba:	90 01 88    	mov.w     w0, 0x32
    29bc:	00 00 fa    	lnk       #0x0

000029be <.LSM65>:
    __serviceTxInterrupt(&uart3);
    29be:	40 26 21    	mov.w     #0x1264, w0
    29c0:	ef fe 07    	rcall     0x27a0 <___serviceTxInterrupt>

000029c2 <.LSM66>:
}
    29c2:	00 80 fa    	ulnk      
    29c4:	34 00 f9    	pop       0x34
    29c6:	32 00 f9    	pop       0x32
    29c8:	4f 03 be    	mov.d     [--w15], w6
    29ca:	4f 02 be    	mov.d     [--w15], w4
    29cc:	4f 01 be    	mov.d     [--w15], w2
    29ce:	4f 00 be    	mov.d     [--w15], w0
    29d0:	36 00 f9    	pop       0x36
    29d2:	00 40 06    	retfie    

000029d4 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    29d4:	36 00 f8    	push      0x36
    29d6:	80 9f be    	mov.d     w0, [w15++]
    29d8:	82 9f be    	mov.d     w2, [w15++]
    29da:	84 9f be    	mov.d     w4, [w15++]
    29dc:	86 9f be    	mov.d     w6, [w15++]
    29de:	32 00 f8    	push      0x32
    29e0:	34 00 f8    	push      0x34
    29e2:	10 00 20    	mov.w     #0x1, w0
    29e4:	a0 01 88    	mov.w     w0, 0x34
    29e6:	00 20 20    	mov.w     #0x200, w0
    29e8:	90 01 88    	mov.w     w0, 0x32
    29ea:	00 00 fa    	lnk       #0x0

000029ec <.LSM68>:
    __serviceRxInterrupt(&uart3);
    29ec:	40 26 21    	mov.w     #0x1264, w0
    29ee:	43 ff 07    	rcall     0x2876 <___serviceRxInterrupt>

000029f0 <.LSM69>:
}
    29f0:	00 80 fa    	ulnk      
    29f2:	34 00 f9    	pop       0x34
    29f4:	32 00 f9    	pop       0x32
    29f6:	4f 03 be    	mov.d     [--w15], w6
    29f8:	4f 02 be    	mov.d     [--w15], w4
    29fa:	4f 01 be    	mov.d     [--w15], w2
    29fc:	4f 00 be    	mov.d     [--w15], w0
    29fe:	36 00 f9    	pop       0x36
    2a00:	00 40 06    	retfie    

00002a02 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    2a02:	36 00 f8    	push      0x36
    2a04:	80 9f be    	mov.d     w0, [w15++]
    2a06:	82 9f be    	mov.d     w2, [w15++]
    2a08:	84 9f be    	mov.d     w4, [w15++]
    2a0a:	86 9f be    	mov.d     w6, [w15++]
    2a0c:	32 00 f8    	push      0x32
    2a0e:	34 00 f8    	push      0x34
    2a10:	10 00 20    	mov.w     #0x1, w0
    2a12:	a0 01 88    	mov.w     w0, 0x34
    2a14:	00 20 20    	mov.w     #0x200, w0
    2a16:	90 01 88    	mov.w     w0, 0x32
    2a18:	00 00 fa    	lnk       #0x0

00002a1a <.LSM71>:
    __serviceTxInterrupt(&uart4);
    2a1a:	00 2a 21    	mov.w     #0x12a0, w0
    2a1c:	c1 fe 07    	rcall     0x27a0 <___serviceTxInterrupt>

00002a1e <.LSM72>:
}
    2a1e:	00 80 fa    	ulnk      
    2a20:	34 00 f9    	pop       0x34
    2a22:	32 00 f9    	pop       0x32
    2a24:	4f 03 be    	mov.d     [--w15], w6
    2a26:	4f 02 be    	mov.d     [--w15], w4
    2a28:	4f 01 be    	mov.d     [--w15], w2
    2a2a:	4f 00 be    	mov.d     [--w15], w0
    2a2c:	36 00 f9    	pop       0x36
    2a2e:	00 40 06    	retfie    

00002a30 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    2a30:	36 00 f8    	push      0x36
    2a32:	80 9f be    	mov.d     w0, [w15++]
    2a34:	82 9f be    	mov.d     w2, [w15++]
    2a36:	84 9f be    	mov.d     w4, [w15++]
    2a38:	86 9f be    	mov.d     w6, [w15++]
    2a3a:	32 00 f8    	push      0x32
    2a3c:	34 00 f8    	push      0x34
    2a3e:	10 00 20    	mov.w     #0x1, w0
    2a40:	a0 01 88    	mov.w     w0, 0x34
    2a42:	00 20 20    	mov.w     #0x200, w0
    2a44:	90 01 88    	mov.w     w0, 0x32
    2a46:	00 00 fa    	lnk       #0x0

00002a48 <.LSM74>:
    __serviceRxInterrupt(&uart4);
    2a48:	00 2a 21    	mov.w     #0x12a0, w0
    2a4a:	15 ff 07    	rcall     0x2876 <___serviceRxInterrupt>

00002a4c <.LSM75>:
}
    2a4c:	00 80 fa    	ulnk      
    2a4e:	34 00 f9    	pop       0x34
    2a50:	32 00 f9    	pop       0x32
    2a52:	4f 03 be    	mov.d     [--w15], w6
    2a54:	4f 02 be    	mov.d     [--w15], w4
    2a56:	4f 01 be    	mov.d     [--w15], w2
    2a58:	4f 00 be    	mov.d     [--w15], w0
    2a5a:	36 00 f9    	pop       0x36
    2a5c:	00 40 06    	retfie    

00002a5e <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2a5e:	08 00 fa    	lnk       #0x8
    2a60:	10 07 98    	mov.w     w0, [w14+2]
    2a62:	21 07 98    	mov.w     w1, [w14+4]
    2a64:	32 07 98    	mov.w     w2, [w14+6]

00002a66 <.LSM77>:
    int16_t i;

    switch (handle) {
    2a66:	1e 00 90    	mov.w     [w14+2], w0
    2a68:	00 00 e0    	cp0.w     w0
    2a6a:	25 00 35    	bra       LT, 0x2ab6 <.L37>
    2a6c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2a6e:	03 00 34    	bra       LE, 0x2a76 <.L30>
    2a70:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2a72:	11 00 32    	bra       Z, 0x2a96 <.L31>

00002a74 <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    2a74:	21 00 37    	bra       0x2ab8 <.L34>

00002a76 <.L30>:
    2a76:	00 00 eb    	clr.w     w0
    2a78:	00 0f 78    	mov.w     w0, [w14]
    2a7a:	08 00 37    	bra       0x2a8c <.L32>

00002a7c <.L33>:
    2a7c:	2e 00 90    	mov.w     [w14+4], w0
    2a7e:	90 40 78    	mov.b     [w0], w1
    2a80:	2e 00 90    	mov.w     [w14+4], w0
    2a82:	00 00 e8    	inc.w     w0, w0
    2a84:	20 07 98    	mov.w     w0, [w14+4]
    2a86:	80 41 80    	mov.w     0x830, w0
    2a88:	19 04 07    	rcall     0x32bc <_uart_putc>

00002a8a <.LSM81>:
    2a8a:	1e 0f e8    	inc.w     [w14], [w14]

00002a8c <.L32>:
    2a8c:	9e 00 78    	mov.w     [w14], w1
    2a8e:	3e 00 90    	mov.w     [w14+6], w0
    2a90:	80 8f 50    	sub.w     w1, w0, [w15]
    2a92:	f4 ff 39    	bra       NC, 0x2a7c <.L33>

00002a94 <.LSM82>:
    2a94:	11 00 37    	bra       0x2ab8 <.L34>

00002a96 <.L31>:
    2a96:	00 00 eb    	clr.w     w0
    2a98:	00 0f 78    	mov.w     w0, [w14]
    2a9a:	08 00 37    	bra       0x2aac <.L35>

00002a9c <.L36>:
    2a9c:	2e 00 90    	mov.w     [w14+4], w0
    2a9e:	90 40 78    	mov.b     [w0], w1
    2aa0:	2e 00 90    	mov.w     [w14+4], w0
    2aa2:	00 00 e8    	inc.w     w0, w0
    2aa4:	20 07 98    	mov.w     w0, [w14+4]
    2aa6:	90 41 80    	mov.w     0x832, w0
    2aa8:	09 04 07    	rcall     0x32bc <_uart_putc>

00002aaa <.LSM85>:
    2aaa:	1e 0f e8    	inc.w     [w14], [w14]

00002aac <.L35>:
    2aac:	9e 00 78    	mov.w     [w14], w1
    2aae:	3e 00 90    	mov.w     [w14+6], w0
    2ab0:	80 8f 50    	sub.w     w1, w0, [w15]
    2ab2:	f4 ff 39    	bra       NC, 0x2a9c <.L36>

00002ab4 <.LSM86>:
    2ab4:	01 00 37    	bra       0x2ab8 <.L34>

00002ab6 <.L37>:
    2ab6:	00 00 00    	nop       

00002ab8 <.L34>:
    }
    return len;
    2ab8:	3e 00 90    	mov.w     [w14+6], w0

00002aba <.LSM89>:
}
    2aba:	00 80 fa    	ulnk      
    2abc:	00 00 06    	return    

00002abe <_init_uart>:

void init_uart(void) {
    2abe:	00 00 fa    	lnk       #0x0

00002ac0 <.LSM91>:
    init_pin();
    2ac0:	98 07 07    	rcall     0x39f2 <_init_pin>

00002ac2 <.LSM92>:

    // pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    // pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    2ac2:	40 00 20    	mov.w     #0x4, w0
    2ac4:	80 1f 78    	mov.w     w0, [w15++]
    2ac6:	30 00 20    	mov.w     #0x3, w0
    2ac8:	80 1f 78    	mov.w     w0, [w15++]
    2aca:	80 c0 b3    	mov.b     #0x8, w0
    2acc:	80 1f 78    	mov.w     w0, [w15++]
    2ace:	00 40 eb    	clr.b     w0
    2ad0:	80 1f 78    	mov.w     w0, [w15++]
    2ad2:	40 6a 20    	mov.w     #0x6a4, w0
    2ad4:	80 1f 78    	mov.w     w0, [w15++]
    2ad6:	40 6a 20    	mov.w     #0x6a4, w0
    2ad8:	80 1f 78    	mov.w     w0, [w15++]
    2ada:	b0 c0 b3    	mov.b     #0xb, w0
    2adc:	80 1f 78    	mov.w     w0, [w15++]
    2ade:	c0 c0 b3    	mov.b     #0xc, w0
    2ae0:	80 1f 78    	mov.w     w0, [w15++]
    2ae2:	47 09 20    	mov.w     #0x94, w7
    2ae4:	46 08 20    	mov.w     #0x84, w6
    2ae6:	85 22 20    	mov.w     #0x228, w5
    2ae8:	64 22 20    	mov.w     #0x226, w4
    2aea:	43 22 20    	mov.w     #0x224, w3
    2aec:	22 22 20    	mov.w     #0x222, w2
    2aee:	01 22 20    	mov.w     #0x220, w1
    2af0:	c0 1e 21    	mov.w     #0x11ec, w0
    2af2:	51 00 07    	rcall     0x2b96 <_uart_init>
    2af4:	f0 87 57    	sub.w     w15, #0x10, w15

00002af6 <.LSM93>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    2af6:	60 00 20    	mov.w     #0x6, w0
    2af8:	80 1f 78    	mov.w     w0, [w15++]
    2afa:	50 00 20    	mov.w     #0x5, w0
    2afc:	80 1f 78    	mov.w     w0, [w15++]
    2afe:	80 c0 b3    	mov.b     #0x8, w0
    2b00:	80 1f 78    	mov.w     w0, [w15++]
    2b02:	00 40 eb    	clr.b     w0
    2b04:	80 1f 78    	mov.w     w0, [w15++]
    2b06:	60 6a 20    	mov.w     #0x6a6, w0
    2b08:	80 1f 78    	mov.w     w0, [w15++]
    2b0a:	60 6a 20    	mov.w     #0x6a6, w0
    2b0c:	80 1f 78    	mov.w     w0, [w15++]
    2b0e:	e0 c0 b3    	mov.b     #0xe, w0
    2b10:	80 1f 78    	mov.w     w0, [w15++]
    2b12:	f0 c0 b3    	mov.b     #0xf, w0
    2b14:	80 1f 78    	mov.w     w0, [w15++]
    2b16:	67 09 20    	mov.w     #0x96, w7
    2b18:	66 08 20    	mov.w     #0x86, w6
    2b1a:	85 23 20    	mov.w     #0x238, w5
    2b1c:	64 23 20    	mov.w     #0x236, w4
    2b1e:	43 23 20    	mov.w     #0x234, w3
    2b20:	22 23 20    	mov.w     #0x232, w2
    2b22:	01 23 20    	mov.w     #0x230, w1
    2b24:	80 22 21    	mov.w     #0x1228, w0
    2b26:	37 00 07    	rcall     0x2b96 <_uart_init>
    2b28:	f0 87 57    	sub.w     w15, #0x10, w15

00002b2a <.LSM94>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    2b2a:	d0 01 20    	mov.w     #0x1d, w0
    2b2c:	80 1f 78    	mov.w     w0, [w15++]
    2b2e:	c0 01 20    	mov.w     #0x1c, w0
    2b30:	80 1f 78    	mov.w     w0, [w15++]
    2b32:	80 c0 b3    	mov.b     #0x8, w0
    2b34:	80 1f 78    	mov.w     w0, [w15++]
    2b36:	80 c0 b3    	mov.b     #0x8, w0
    2b38:	80 1f 78    	mov.w     w0, [w15++]
    2b3a:	a0 6a 20    	mov.w     #0x6aa, w0
    2b3c:	80 1f 78    	mov.w     w0, [w15++]
    2b3e:	20 6a 20    	mov.w     #0x6a2, w0
    2b40:	80 1f 78    	mov.w     w0, [w15++]
    2b42:	20 c0 b3    	mov.b     #0x2, w0
    2b44:	80 1f 78    	mov.w     w0, [w15++]
    2b46:	30 c0 b3    	mov.b     #0x3, w0
    2b48:	80 1f 78    	mov.w     w0, [w15++]
    2b4a:	e7 09 20    	mov.w     #0x9e, w7
    2b4c:	e6 08 20    	mov.w     #0x8e, w6
    2b4e:	85 25 20    	mov.w     #0x258, w5
    2b50:	64 25 20    	mov.w     #0x256, w4
    2b52:	43 25 20    	mov.w     #0x254, w3
    2b54:	22 25 20    	mov.w     #0x252, w2
    2b56:	01 25 20    	mov.w     #0x250, w1
    2b58:	40 26 21    	mov.w     #0x1264, w0
    2b5a:	1d 00 07    	rcall     0x2b96 <_uart_init>
    2b5c:	f0 87 57    	sub.w     w15, #0x10, w15

00002b5e <.LSM95>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    2b5e:	f0 01 20    	mov.w     #0x1f, w0
    2b60:	80 1f 78    	mov.w     w0, [w15++]
    2b62:	e0 01 20    	mov.w     #0x1e, w0
    2b64:	80 1f 78    	mov.w     w0, [w15++]
    2b66:	80 c0 b3    	mov.b     #0x8, w0
    2b68:	80 1f 78    	mov.w     w0, [w15++]
    2b6a:	00 40 eb    	clr.b     w0
    2b6c:	80 1f 78    	mov.w     w0, [w15++]
    2b6e:	60 6b 20    	mov.w     #0x6b6, w0
    2b70:	80 1f 78    	mov.w     w0, [w15++]
    2b72:	60 6b 20    	mov.w     #0x6b6, w0
    2b74:	80 1f 78    	mov.w     w0, [w15++]
    2b76:	80 c0 b3    	mov.b     #0x8, w0
    2b78:	80 1f 78    	mov.w     w0, [w15++]
    2b7a:	90 c0 b3    	mov.b     #0x9, w0
    2b7c:	80 1f 78    	mov.w     w0, [w15++]
    2b7e:	e7 09 20    	mov.w     #0x9e, w7
    2b80:	e6 08 20    	mov.w     #0x8e, w6
    2b82:	85 2b 20    	mov.w     #0x2b8, w5
    2b84:	64 2b 20    	mov.w     #0x2b6, w4
    2b86:	43 2b 20    	mov.w     #0x2b4, w3
    2b88:	22 2b 20    	mov.w     #0x2b2, w2
    2b8a:	01 2b 20    	mov.w     #0x2b0, w1
    2b8c:	00 2a 21    	mov.w     #0x12a0, w0
    2b8e:	03 00 07    	rcall     0x2b96 <_uart_init>
    2b90:	f0 87 57    	sub.w     w15, #0x10, w15

00002b92 <.LSM96>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    // uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    //           0, NULL, 0, NULL, 0);

    // _stdout = &uart1;
    // _stderr = &uart1;
}
    2b92:	00 80 fa    	ulnk      
    2b94:	00 00 06    	return    

00002b96 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2b96:	10 00 fa    	lnk       #0x10
    2b98:	00 0f 78    	mov.w     w0, [w14]
    2b9a:	11 07 98    	mov.w     w1, [w14+2]
    2b9c:	22 07 98    	mov.w     w2, [w14+4]
    2b9e:	33 07 98    	mov.w     w3, [w14+6]
    2ba0:	44 07 98    	mov.w     w4, [w14+8]
    2ba2:	55 07 98    	mov.w     w5, [w14+10]
    2ba4:	66 07 98    	mov.w     w6, [w14+12]
    2ba6:	77 07 98    	mov.w     w7, [w14+14]

00002ba8 <.LSM98>:
    self->UxMODE = UxMODE;
    2ba8:	1e 00 78    	mov.w     [w14], w0
    2baa:	9e 00 90    	mov.w     [w14+2], w1
    2bac:	01 08 78    	mov.w     w1, [w0]

00002bae <.LSM99>:
    self->UxSTA = UxSTA;
    2bae:	1e 00 78    	mov.w     [w14], w0
    2bb0:	ae 00 90    	mov.w     [w14+4], w1
    2bb2:	11 00 98    	mov.w     w1, [w0+2]

00002bb4 <.LSM100>:
    self->UxTXREG = UxTXREG;
    2bb4:	1e 00 78    	mov.w     [w14], w0
    2bb6:	be 00 90    	mov.w     [w14+6], w1
    2bb8:	21 00 98    	mov.w     w1, [w0+4]

00002bba <.LSM101>:
    self->UxRXREG = UxRXREG;
    2bba:	1e 00 78    	mov.w     [w14], w0
    2bbc:	ce 00 90    	mov.w     [w14+8], w1
    2bbe:	31 00 98    	mov.w     w1, [w0+6]

00002bc0 <.LSM102>:
    self->UxBRG = UxBRG;
    2bc0:	1e 00 78    	mov.w     [w14], w0
    2bc2:	de 00 90    	mov.w     [w14+10], w1
    2bc4:	41 00 98    	mov.w     w1, [w0+8]

00002bc6 <.LSM103>:
    self->IFSy = IFSy;
    2bc6:	1e 00 78    	mov.w     [w14], w0
    2bc8:	ee 00 90    	mov.w     [w14+12], w1
    2bca:	51 00 98    	mov.w     w1, [w0+10]

00002bcc <.LSM104>:
    self->IECy = IECy;
    2bcc:	1e 00 78    	mov.w     [w14], w0
    2bce:	fe 00 90    	mov.w     [w14+14], w1
    2bd0:	61 00 98    	mov.w     w1, [w0+12]

00002bd2 <.LSM105>:
    self->UxTXIF = UxTXIF;
    2bd2:	1e 00 78    	mov.w     [w14], w0
    2bd4:	8e f8 97    	mov.b     [w14-8], w1
    2bd6:	61 48 98    	mov.b     w1, [w0+14]

00002bd8 <.LSM106>:
    self->UxRXIF = UxRXIF;
    2bd8:	1e 00 78    	mov.w     [w14], w0
    2bda:	ee f0 97    	mov.b     [w14-10], w1
    2bdc:	71 48 98    	mov.b     w1, [w0+15]

00002bde <.LSM107>:
    self->RXrpinr = RXrpinr;
    2bde:	1e 00 78    	mov.w     [w14], w0
    2be0:	ae b8 97    	mov.w     [w14-12], w1
    2be2:	01 08 98    	mov.w     w1, [w0+16]

00002be4 <.LSM108>:
    self->CTSrpinr = CTSrpinr;
    2be4:	1e 00 78    	mov.w     [w14], w0
    2be6:	9e b8 97    	mov.w     [w14-14], w1
    2be8:	11 08 98    	mov.w     w1, [w0+18]

00002bea <.LSM109>:
    self->RXrpshift = RXrpshift;
    2bea:	1e 00 78    	mov.w     [w14], w0
    2bec:	8e f0 97    	mov.b     [w14-16], w1
    2bee:	41 50 98    	mov.b     w1, [w0+20]

00002bf0 <.LSM110>:
    self->CTSrpshift = CTSrpshift;
    2bf0:	1e 00 78    	mov.w     [w14], w0
    2bf2:	ee e8 97    	mov.b     [w14-18], w1
    2bf4:	51 50 98    	mov.b     w1, [w0+21]

00002bf6 <.LSM111>:
    self->TXrpnum = TXrpnum;
    2bf6:	1e 00 78    	mov.w     [w14], w0
    2bf8:	ee b0 97    	mov.w     [w14-20], w1
    2bfa:	31 08 98    	mov.w     w1, [w0+22]

00002bfc <.LSM112>:
    self->RTSrpnum = RTSrpnum;
    2bfc:	1e 00 78    	mov.w     [w14], w0
    2bfe:	de b0 97    	mov.w     [w14-22], w1
    2c00:	41 08 98    	mov.w     w1, [w0+24]

00002c02 <.LSM113>:
    self->TX = NULL;
    2c02:	1e 00 78    	mov.w     [w14], w0
    2c04:	80 00 eb    	clr.w     w1
    2c06:	51 08 98    	mov.w     w1, [w0+26]

00002c08 <.LSM114>:
    self->RX = NULL;
    2c08:	1e 00 78    	mov.w     [w14], w0
    2c0a:	80 00 eb    	clr.w     w1
    2c0c:	61 08 98    	mov.w     w1, [w0+28]

00002c0e <.LSM115>:
    self->RTS = NULL;
    2c0e:	1e 00 78    	mov.w     [w14], w0
    2c10:	80 00 eb    	clr.w     w1
    2c12:	71 08 98    	mov.w     w1, [w0+30]

00002c14 <.LSM116>:
    self->CTS = NULL;
    2c14:	1e 00 78    	mov.w     [w14], w0
    2c16:	80 00 eb    	clr.w     w1
    2c18:	01 10 98    	mov.w     w1, [w0+32]

00002c1a <.LSM117>:
    self->TXbuffer.data = NULL;
    2c1a:	1e 00 78    	mov.w     [w14], w0
    2c1c:	80 00 eb    	clr.w     w1
    2c1e:	11 10 98    	mov.w     w1, [w0+34]

00002c20 <.LSM118>:
    self->TXbuffer.length = 0;
    2c20:	1e 00 78    	mov.w     [w14], w0
    2c22:	80 00 eb    	clr.w     w1
    2c24:	21 10 98    	mov.w     w1, [w0+36]

00002c26 <.LSM119>:
    self->TXbuffer.head = 0;
    2c26:	1e 00 78    	mov.w     [w14], w0
    2c28:	80 00 eb    	clr.w     w1
    2c2a:	31 10 98    	mov.w     w1, [w0+38]

00002c2c <.LSM120>:
    self->TXbuffer.tail = 0;
    2c2c:	1e 00 78    	mov.w     [w14], w0
    2c2e:	80 00 eb    	clr.w     w1
    2c30:	41 10 98    	mov.w     w1, [w0+40]

00002c32 <.LSM121>:
    self->TXbuffer.count = 0;
    2c32:	1e 00 78    	mov.w     [w14], w0
    2c34:	80 00 eb    	clr.w     w1
    2c36:	51 10 98    	mov.w     w1, [w0+42]

00002c38 <.LSM122>:
    self->RXbuffer.data = NULL;
    2c38:	1e 00 78    	mov.w     [w14], w0
    2c3a:	80 00 eb    	clr.w     w1
    2c3c:	61 10 98    	mov.w     w1, [w0+44]

00002c3e <.LSM123>:
    self->RXbuffer.length = 0;
    2c3e:	1e 00 78    	mov.w     [w14], w0
    2c40:	80 00 eb    	clr.w     w1
    2c42:	71 10 98    	mov.w     w1, [w0+46]

00002c44 <.LSM124>:
    self->RXbuffer.head = 0;
    2c44:	1e 00 78    	mov.w     [w14], w0
    2c46:	80 00 eb    	clr.w     w1
    2c48:	01 18 98    	mov.w     w1, [w0+48]

00002c4a <.LSM125>:
    self->RXbuffer.tail = 0;
    2c4a:	1e 00 78    	mov.w     [w14], w0
    2c4c:	80 00 eb    	clr.w     w1
    2c4e:	11 18 98    	mov.w     w1, [w0+50]

00002c50 <.LSM126>:
    self->RXbuffer.count = 0;
    2c50:	1e 00 78    	mov.w     [w14], w0
    2c52:	80 00 eb    	clr.w     w1
    2c54:	21 18 98    	mov.w     w1, [w0+52]

00002c56 <.LSM127>:
    self->TXthreshold = 1;
    2c56:	1e 00 78    	mov.w     [w14], w0
    2c58:	11 00 20    	mov.w     #0x1, w1
    2c5a:	31 18 98    	mov.w     w1, [w0+54]

00002c5c <.LSM128>:
    self->putc = NULL;
    2c5c:	1e 00 78    	mov.w     [w14], w0
    2c5e:	80 00 eb    	clr.w     w1
    2c60:	41 18 98    	mov.w     w1, [w0+56]

00002c62 <.LSM129>:
    self->getc = NULL;
    2c62:	1e 00 78    	mov.w     [w14], w0
    2c64:	80 00 eb    	clr.w     w1
    2c66:	51 18 98    	mov.w     w1, [w0+58]

00002c68 <.LSM130>:
}
    2c68:	00 80 fa    	ulnk      
    2c6a:	00 00 06    	return    

00002c6c <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    2c6c:	10 00 fa    	lnk       #0x10
    2c6e:	88 1f 78    	mov.w     w8, [w15++]
    2c70:	00 0f 78    	mov.w     w0, [w14]
    2c72:	11 07 98    	mov.w     w1, [w14+2]
    2c74:	22 07 98    	mov.w     w2, [w14+4]
    2c76:	33 07 98    	mov.w     w3, [w14+6]
    2c78:	44 07 98    	mov.w     w4, [w14+8]
    2c7a:	56 07 98    	mov.w     w6, [w14+10]
    2c7c:	67 07 98    	mov.w     w7, [w14+12]
    2c7e:	65 4f 98    	mov.b     w5, [w14+14]

00002c80 <.LSM132>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    2c80:	1e 00 78    	mov.w     [w14], w0
    2c82:	10 00 78    	mov.w     [w0], w0
    2c84:	80 00 eb    	clr.w     w1
    2c86:	01 08 78    	mov.w     w1, [w0]

00002c88 <.LSM133>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    2c88:	1e 00 90    	mov.w     [w14+2], w0
    2c8a:	60 00 90    	mov.w     [w0+12], w0
    2c8c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2c8e:	0e 02 32    	bra       Z, 0x30ac <.L73>
    2c90:	2e 00 90    	mov.w     [w14+4], w0
    2c92:	60 00 90    	mov.w     [w0+12], w0
    2c94:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2c96:	0c 02 32    	bra       Z, 0x30b0 <.L74>

00002c98 <.LSM134>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    2c98:	1e 00 90    	mov.w     [w14+2], w0
    2c9a:	00 08 90    	mov.w     [w0+16], w0
    2c9c:	00 00 e0    	cp0.w     w0
    2c9e:	69 00 3a    	bra       NZ, 0x2d72 <.L44>
    2ca0:	2e 00 90    	mov.w     [w14+4], w0
    2ca2:	00 08 90    	mov.w     [w0+16], w0
    2ca4:	00 00 e0    	cp0.w     w0
    2ca6:	65 00 3a    	bra       NZ, 0x2d72 <.L44>

00002ca8 <.LSM135>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    2ca8:	1e 00 90    	mov.w     [w14+2], w0
    2caa:	0a 08 07    	rcall     0x3cc0 <_pin_digitalOut>

00002cac <.LSM136>:
        pin_set(TX);
    2cac:	1e 00 90    	mov.w     [w14+2], w0
    2cae:	65 08 07    	rcall     0x3d7a <_pin_set>

00002cb0 <.LSM137>:
        pin_digitalIn(RX);
    2cb0:	2e 00 90    	mov.w     [w14+4], w0
    2cb2:	df 07 07    	rcall     0x3c72 <_pin_digitalIn>

00002cb4 <.LSM138>:
        self->TX = TX;
    2cb4:	1e 00 78    	mov.w     [w14], w0
    2cb6:	9e 00 90    	mov.w     [w14+2], w1
    2cb8:	51 08 98    	mov.w     w1, [w0+26]

00002cba <.LSM139>:
        TX->owner = (void *)self;
    2cba:	1e 00 90    	mov.w     [w14+2], w0
    2cbc:	9e 00 78    	mov.w     [w14], w1
    2cbe:	01 08 98    	mov.w     w1, [w0+16]

00002cc0 <.LSM140>:
        TX->write = NULL;
    2cc0:	1e 00 90    	mov.w     [w14+2], w0
    2cc2:	80 00 eb    	clr.w     w1
    2cc4:	11 08 98    	mov.w     w1, [w0+18]

00002cc6 <.LSM141>:
        TX->read = NULL;
    2cc6:	1e 00 90    	mov.w     [w14+2], w0
    2cc8:	80 00 eb    	clr.w     w1
    2cca:	21 08 98    	mov.w     w1, [w0+20]

00002ccc <.LSM142>:
        self->RX = RX;
    2ccc:	1e 00 78    	mov.w     [w14], w0
    2cce:	ae 00 90    	mov.w     [w14+4], w1
    2cd0:	61 08 98    	mov.w     w1, [w0+28]

00002cd2 <.LSM143>:
        RX->owner = (void *)self;
    2cd2:	2e 00 90    	mov.w     [w14+4], w0
    2cd4:	9e 00 78    	mov.w     [w14], w1
    2cd6:	01 08 98    	mov.w     w1, [w0+16]

00002cd8 <.LSM144>:
        RX->write = NULL;
    2cd8:	2e 00 90    	mov.w     [w14+4], w0
    2cda:	80 00 eb    	clr.w     w1
    2cdc:	11 08 98    	mov.w     w1, [w0+18]

00002cde <.LSM145>:
        RX->read = NULL;
    2cde:	2e 00 90    	mov.w     [w14+4], w0
    2ce0:	80 00 eb    	clr.w     w1
    2ce2:	21 08 98    	mov.w     w1, [w0+20]

00002ce4 <.LSM146>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2ce4:	11 3a 80    	mov.w     0x742, w1
    2ce6:	f0 0b 20    	mov.w     #0xbf, w0
    2ce8:	00 81 60    	and.w     w1, w0, w2
    2cea:	60 04 20    	mov.w     #0x46, w0
    2cec:	71 05 20    	mov.w     #0x57, w1
    2cee:	23 74 20    	mov.w     #0x742, w3
    2cf0:	80 49 78    	mov.b     w0, [w3]
    2cf2:	81 49 78    	mov.b     w1, [w3]
    2cf4:	82 49 78    	mov.b     w2, [w3]

00002cf6 <.LSM147>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    2cf6:	1e 00 90    	mov.w     [w14+2], w0
    2cf8:	70 00 90    	mov.w     [w0+14], w0
    2cfa:	9e 00 90    	mov.w     [w14+2], w1
    2cfc:	f1 00 90    	mov.w     [w1+14], w1
    2cfe:	11 01 78    	mov.w     [w1], w2
    2d00:	9e 00 90    	mov.w     [w14+2], w1
    2d02:	a1 48 90    	mov.b     [w1+10], w1
    2d04:	81 80 fb    	ze        w1, w1
    2d06:	f3 03 20    	mov.w     #0x3f, w3
    2d08:	81 18 dd    	sl.w      w3, w1, w1
    2d0a:	81 80 ea    	com.w     w1, w1
    2d0c:	81 00 61    	and.w     w2, w1, w1
    2d0e:	01 08 78    	mov.w     w1, [w0]

00002d10 <.LSM148>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    2d10:	1e 00 90    	mov.w     [w14+2], w0
    2d12:	70 00 90    	mov.w     [w0+14], w0
    2d14:	9e 00 90    	mov.w     [w14+2], w1
    2d16:	f1 00 90    	mov.w     [w1+14], w1
    2d18:	11 01 78    	mov.w     [w1], w2
    2d1a:	9e 00 78    	mov.w     [w14], w1
    2d1c:	b1 09 90    	mov.w     [w1+22], w3
    2d1e:	9e 00 90    	mov.w     [w14+2], w1
    2d20:	a1 48 90    	mov.b     [w1+10], w1
    2d22:	81 80 fb    	ze        w1, w1
    2d24:	81 18 dd    	sl.w      w3, w1, w1
    2d26:	82 80 70    	ior.w     w1, w2, w1
    2d28:	01 08 78    	mov.w     w1, [w0]

00002d2a <.LSM149>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    2d2a:	1e 00 78    	mov.w     [w14], w0
    2d2c:	00 08 90    	mov.w     [w0+16], w0
    2d2e:	9e 00 78    	mov.w     [w14], w1
    2d30:	81 08 90    	mov.w     [w1+16], w1
    2d32:	11 01 78    	mov.w     [w1], w2
    2d34:	9e 00 78    	mov.w     [w14], w1
    2d36:	c1 50 90    	mov.b     [w1+20], w1
    2d38:	81 80 fb    	ze        w1, w1
    2d3a:	f3 03 20    	mov.w     #0x3f, w3
    2d3c:	81 18 dd    	sl.w      w3, w1, w1
    2d3e:	81 80 ea    	com.w     w1, w1
    2d40:	81 00 61    	and.w     w2, w1, w1
    2d42:	01 08 78    	mov.w     w1, [w0]

00002d44 <.LSM150>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    2d44:	1e 00 78    	mov.w     [w14], w0
    2d46:	00 08 90    	mov.w     [w0+16], w0
    2d48:	9e 00 78    	mov.w     [w14], w1
    2d4a:	81 08 90    	mov.w     [w1+16], w1
    2d4c:	11 01 78    	mov.w     [w1], w2
    2d4e:	ae 00 90    	mov.w     [w14+4], w1
    2d50:	e1 01 90    	mov.w     [w1+12], w3
    2d52:	9e 00 78    	mov.w     [w14], w1
    2d54:	c1 50 90    	mov.b     [w1+20], w1
    2d56:	81 80 fb    	ze        w1, w1
    2d58:	81 18 dd    	sl.w      w3, w1, w1
    2d5a:	82 80 70    	ior.w     w1, w2, w1
    2d5c:	01 08 78    	mov.w     w1, [w0]

00002d5e <.LSM151>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2d5e:	11 3a 80    	mov.w     0x742, w1
    2d60:	00 04 20    	mov.w     #0x40, w0
    2d62:	01 01 70    	ior.w     w0, w1, w2
    2d64:	60 04 20    	mov.w     #0x46, w0
    2d66:	71 05 20    	mov.w     #0x57, w1
    2d68:	23 74 20    	mov.w     #0x742, w3
    2d6a:	80 49 78    	mov.b     w0, [w3]
    2d6c:	81 49 78    	mov.b     w1, [w3]
    2d6e:	82 49 78    	mov.b     w2, [w3]
    2d70:	0a 00 37    	bra       0x2d86 <.L45>

00002d72 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    2d72:	1e 00 78    	mov.w     [w14], w0
    2d74:	d0 08 90    	mov.w     [w0+26], w1
    2d76:	1e 00 90    	mov.w     [w14+2], w0
    2d78:	80 8f 50    	sub.w     w1, w0, [w15]
    2d7a:	9c 01 3a    	bra       NZ, 0x30b4 <.L75>
    2d7c:	1e 00 78    	mov.w     [w14], w0
    2d7e:	e0 08 90    	mov.w     [w0+28], w1
    2d80:	2e 00 90    	mov.w     [w14+4], w0
    2d82:	80 8f 50    	sub.w     w1, w0, [w15]
    2d84:	99 01 3a    	bra       NZ, 0x30b8 <.L76>

00002d86 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    2d86:	3e 00 90    	mov.w     [w14+6], w0
    2d88:	00 00 e0    	cp0.w     w0
    2d8a:	87 00 32    	bra       Z, 0x2e9a <.L47>
    2d8c:	4e 00 90    	mov.w     [w14+8], w0
    2d8e:	00 00 e0    	cp0.w     w0
    2d90:	84 00 32    	bra       Z, 0x2e9a <.L47>

00002d92 <.LSM154>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    2d92:	3e 00 90    	mov.w     [w14+6], w0
    2d94:	60 00 90    	mov.w     [w0+12], w0
    2d96:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2d98:	91 01 32    	bra       Z, 0x30bc <.L77>
    2d9a:	4e 00 90    	mov.w     [w14+8], w0
    2d9c:	60 00 90    	mov.w     [w0+12], w0
    2d9e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2da0:	8f 01 32    	bra       Z, 0x30c0 <.L78>

00002da2 <.LSM155>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    2da2:	3e 00 90    	mov.w     [w14+6], w0
    2da4:	00 08 90    	mov.w     [w0+16], w0
    2da6:	00 00 e0    	cp0.w     w0
    2da8:	69 00 3a    	bra       NZ, 0x2e7c <.L50>
    2daa:	4e 00 90    	mov.w     [w14+8], w0
    2dac:	00 08 90    	mov.w     [w0+16], w0
    2dae:	00 00 e0    	cp0.w     w0
    2db0:	65 00 3a    	bra       NZ, 0x2e7c <.L50>

00002db2 <.LSM156>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    2db2:	3e 00 90    	mov.w     [w14+6], w0
    2db4:	85 07 07    	rcall     0x3cc0 <_pin_digitalOut>

00002db6 <.LSM157>:
            pin_set(RTS);
    2db6:	3e 00 90    	mov.w     [w14+6], w0
    2db8:	e0 07 07    	rcall     0x3d7a <_pin_set>

00002dba <.LSM158>:
            pin_digitalIn(CTS);
    2dba:	4e 00 90    	mov.w     [w14+8], w0
    2dbc:	5a 07 07    	rcall     0x3c72 <_pin_digitalIn>

00002dbe <.LSM159>:
            self->RTS = RTS;
    2dbe:	1e 00 78    	mov.w     [w14], w0
    2dc0:	be 00 90    	mov.w     [w14+6], w1
    2dc2:	71 08 98    	mov.w     w1, [w0+30]

00002dc4 <.LSM160>:
            RTS->owner = (void *)self;
    2dc4:	3e 00 90    	mov.w     [w14+6], w0
    2dc6:	9e 00 78    	mov.w     [w14], w1
    2dc8:	01 08 98    	mov.w     w1, [w0+16]

00002dca <.LSM161>:
            RTS->write = NULL;
    2dca:	3e 00 90    	mov.w     [w14+6], w0
    2dcc:	80 00 eb    	clr.w     w1
    2dce:	11 08 98    	mov.w     w1, [w0+18]

00002dd0 <.LSM162>:
            RTS->read = NULL;
    2dd0:	3e 00 90    	mov.w     [w14+6], w0
    2dd2:	80 00 eb    	clr.w     w1
    2dd4:	21 08 98    	mov.w     w1, [w0+20]

00002dd6 <.LSM163>:
            self->CTS = CTS;
    2dd6:	1e 00 78    	mov.w     [w14], w0
    2dd8:	ce 00 90    	mov.w     [w14+8], w1
    2dda:	01 10 98    	mov.w     w1, [w0+32]

00002ddc <.LSM164>:
            CTS->owner = (void *)self;
    2ddc:	4e 00 90    	mov.w     [w14+8], w0
    2dde:	9e 00 78    	mov.w     [w14], w1
    2de0:	01 08 98    	mov.w     w1, [w0+16]

00002de2 <.LSM165>:
            CTS->write = NULL;
    2de2:	4e 00 90    	mov.w     [w14+8], w0
    2de4:	80 00 eb    	clr.w     w1
    2de6:	11 08 98    	mov.w     w1, [w0+18]

00002de8 <.LSM166>:
            CTS->read = NULL;
    2de8:	4e 00 90    	mov.w     [w14+8], w0
    2dea:	80 00 eb    	clr.w     w1
    2dec:	21 08 98    	mov.w     w1, [w0+20]

00002dee <.LSM167>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    2dee:	11 3a 80    	mov.w     0x742, w1
    2df0:	f0 0b 20    	mov.w     #0xbf, w0
    2df2:	00 81 60    	and.w     w1, w0, w2
    2df4:	60 04 20    	mov.w     #0x46, w0
    2df6:	71 05 20    	mov.w     #0x57, w1
    2df8:	23 74 20    	mov.w     #0x742, w3
    2dfa:	80 49 78    	mov.b     w0, [w3]
    2dfc:	81 49 78    	mov.b     w1, [w3]
    2dfe:	82 49 78    	mov.b     w2, [w3]

00002e00 <.LSM168>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    2e00:	3e 00 90    	mov.w     [w14+6], w0
    2e02:	70 00 90    	mov.w     [w0+14], w0
    2e04:	be 00 90    	mov.w     [w14+6], w1
    2e06:	f1 00 90    	mov.w     [w1+14], w1
    2e08:	11 01 78    	mov.w     [w1], w2
    2e0a:	be 00 90    	mov.w     [w14+6], w1
    2e0c:	a1 48 90    	mov.b     [w1+10], w1
    2e0e:	81 80 fb    	ze        w1, w1
    2e10:	f3 03 20    	mov.w     #0x3f, w3
    2e12:	81 18 dd    	sl.w      w3, w1, w1
    2e14:	81 80 ea    	com.w     w1, w1
    2e16:	81 00 61    	and.w     w2, w1, w1
    2e18:	01 08 78    	mov.w     w1, [w0]

00002e1a <.LSM169>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    2e1a:	3e 00 90    	mov.w     [w14+6], w0
    2e1c:	70 00 90    	mov.w     [w0+14], w0
    2e1e:	be 00 90    	mov.w     [w14+6], w1
    2e20:	f1 00 90    	mov.w     [w1+14], w1
    2e22:	11 01 78    	mov.w     [w1], w2
    2e24:	9e 00 78    	mov.w     [w14], w1
    2e26:	c1 09 90    	mov.w     [w1+24], w3
    2e28:	be 00 90    	mov.w     [w14+6], w1
    2e2a:	a1 48 90    	mov.b     [w1+10], w1
    2e2c:	81 80 fb    	ze        w1, w1
    2e2e:	81 18 dd    	sl.w      w3, w1, w1
    2e30:	82 80 70    	ior.w     w1, w2, w1
    2e32:	01 08 78    	mov.w     w1, [w0]

00002e34 <.LSM170>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    2e34:	1e 00 78    	mov.w     [w14], w0
    2e36:	10 08 90    	mov.w     [w0+18], w0
    2e38:	9e 00 78    	mov.w     [w14], w1
    2e3a:	91 08 90    	mov.w     [w1+18], w1
    2e3c:	11 01 78    	mov.w     [w1], w2
    2e3e:	9e 00 78    	mov.w     [w14], w1
    2e40:	d1 50 90    	mov.b     [w1+21], w1
    2e42:	81 80 fb    	ze        w1, w1
    2e44:	f3 03 20    	mov.w     #0x3f, w3
    2e46:	81 18 dd    	sl.w      w3, w1, w1
    2e48:	81 80 ea    	com.w     w1, w1
    2e4a:	81 00 61    	and.w     w2, w1, w1
    2e4c:	01 08 78    	mov.w     w1, [w0]

00002e4e <.LSM171>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    2e4e:	1e 00 78    	mov.w     [w14], w0
    2e50:	10 08 90    	mov.w     [w0+18], w0
    2e52:	9e 00 78    	mov.w     [w14], w1
    2e54:	91 08 90    	mov.w     [w1+18], w1
    2e56:	11 01 78    	mov.w     [w1], w2
    2e58:	ce 00 90    	mov.w     [w14+8], w1
    2e5a:	e1 01 90    	mov.w     [w1+12], w3
    2e5c:	9e 00 78    	mov.w     [w14], w1
    2e5e:	d1 50 90    	mov.b     [w1+21], w1
    2e60:	81 80 fb    	ze        w1, w1
    2e62:	81 18 dd    	sl.w      w3, w1, w1
    2e64:	82 80 70    	ior.w     w1, w2, w1
    2e66:	01 08 78    	mov.w     w1, [w0]

00002e68 <.LSM172>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    2e68:	11 3a 80    	mov.w     0x742, w1
    2e6a:	00 04 20    	mov.w     #0x40, w0
    2e6c:	01 01 70    	ior.w     w0, w1, w2
    2e6e:	60 04 20    	mov.w     #0x46, w0
    2e70:	71 05 20    	mov.w     #0x57, w1
    2e72:	23 74 20    	mov.w     #0x742, w3
    2e74:	80 49 78    	mov.b     w0, [w3]
    2e76:	81 49 78    	mov.b     w1, [w3]
    2e78:	82 49 78    	mov.b     w2, [w3]
    2e7a:	0a 00 37    	bra       0x2e90 <.L51>

00002e7c <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    2e7c:	1e 00 78    	mov.w     [w14], w0
    2e7e:	f0 08 90    	mov.w     [w0+30], w1
    2e80:	3e 00 90    	mov.w     [w14+6], w0
    2e82:	80 8f 50    	sub.w     w1, w0, [w15]
    2e84:	1f 01 3a    	bra       NZ, 0x30c4 <.L79>
    2e86:	1e 00 78    	mov.w     [w14], w0
    2e88:	80 10 90    	mov.w     [w0+32], w1
    2e8a:	4e 00 90    	mov.w     [w14+8], w0
    2e8c:	80 8f 50    	sub.w     w1, w0, [w15]
    2e8e:	1c 01 3a    	bra       NZ, 0x30c8 <.L80>

00002e90 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    2e90:	1e 00 78    	mov.w     [w14], w0
    2e92:	10 00 78    	mov.w     [w0], w0
    2e94:	01 20 20    	mov.w     #0x200, w1
    2e96:	01 08 78    	mov.w     w1, [w0]
    2e98:	06 00 37    	bra       0x2ea6 <.L53>

00002e9a <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    2e9a:	3e 00 90    	mov.w     [w14+6], w0
    2e9c:	00 00 e0    	cp0.w     w0
    2e9e:	16 01 3a    	bra       NZ, 0x30cc <.L81>
    2ea0:	4e 00 90    	mov.w     [w14+8], w0
    2ea2:	00 00 e0    	cp0.w     w0
    2ea4:	15 01 3a    	bra       NZ, 0x30d0 <.L82>

00002ea6 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2ea6:	18 c0 b3    	mov.b     #0x1, w8
    2ea8:	02 40 22    	mov.w     #0x2400, w2
    2eaa:	43 a7 24    	mov.w     #0x4a74, w3
    2eac:	5e 00 90    	mov.w     [w14+10], w0
    2eae:	ee 00 90    	mov.w     [w14+12], w1
    2eb0:	81 f2 07    	rcall     0x13b4 <___gesf2>
    2eb2:	00 00 e0    	cp0.w     w0
    2eb4:	01 00 3c    	bra       GT, 0x2eb8 <.L55>
    2eb6:	00 44 eb    	clr.b     w8

00002eb8 <.L55>:
    2eb8:	08 04 e0    	cp0.b     w8
    2eba:	04 00 32    	bra       Z, 0x2ec4 <.L56>

00002ebc <.LSM177>:
        baudrate = FCY/4.;
    2ebc:	00 40 22    	mov.w     #0x2400, w0
    2ebe:	41 a7 24    	mov.w     #0x4a74, w1
    2ec0:	50 07 98    	mov.w     w0, [w14+10]
    2ec2:	61 07 98    	mov.w     w1, [w14+12]

00002ec4 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    2ec4:	18 c0 b3    	mov.b     #0x1, w8
    2ec6:	02 40 22    	mov.w     #0x2400, w2
    2ec8:	43 17 24    	mov.w     #0x4174, w3
    2eca:	5e 00 90    	mov.w     [w14+10], w0
    2ecc:	ee 00 90    	mov.w     [w14+12], w1
    2ece:	70 f2 07    	rcall     0x13b0 <___eqsf2>
    2ed0:	00 00 e0    	cp0.w     w0
    2ed2:	01 00 35    	bra       LT, 0x2ed6 <.L57>
    2ed4:	00 44 eb    	clr.b     w8

00002ed6 <.L57>:
    2ed6:	08 04 e0    	cp0.b     w8
    2ed8:	04 00 32    	bra       Z, 0x2ee2 <.L58>

00002eda <.LSM179>:
        baudrate = FCY/(16.*65536.);
    2eda:	00 40 22    	mov.w     #0x2400, w0
    2edc:	41 17 24    	mov.w     #0x4174, w1
    2ede:	50 07 98    	mov.w     w0, [w14+10]
    2ee0:	61 07 98    	mov.w     w1, [w14+12]

00002ee2 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2ee2:	18 c0 b3    	mov.b     #0x1, w8
    2ee4:	02 40 22    	mov.w     #0x2400, w2
    2ee6:	43 27 24    	mov.w     #0x4274, w3
    2ee8:	5e 00 90    	mov.w     [w14+10], w0
    2eea:	ee 00 90    	mov.w     [w14+12], w1
    2eec:	61 f2 07    	rcall     0x13b0 <___eqsf2>
    2eee:	00 00 e0    	cp0.w     w0
    2ef0:	01 00 34    	bra       LE, 0x2ef4 <.L59>
    2ef2:	00 44 eb    	clr.b     w8

00002ef4 <.L59>:
    2ef4:	08 04 e0    	cp0.b     w8
    2ef6:	0f 00 32    	bra       Z, 0x2f16 <.L60>

00002ef8 <.LSM181>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    2ef8:	1e 00 78    	mov.w     [w14], w0
    2efa:	40 04 90    	mov.w     [w0+8], w8
    2efc:	5e 01 90    	mov.w     [w14+10], w2
    2efe:	ee 01 90    	mov.w     [w14+12], w3
    2f00:	00 40 22    	mov.w     #0x2400, w0
    2f02:	41 97 24    	mov.w     #0x4974, w1
    2f04:	13 f2 07    	rcall     0x132c <___divsf3>
    2f06:	02 00 20    	mov.w     #0x0, w2
    2f08:	03 f0 23    	mov.w     #0x3f00, w3
    2f0a:	b3 f1 07    	rcall     0x1272 <___addsf3>
    2f0c:	55 f2 07    	rcall     0x13b8 <___fixunssfsi>
    2f0e:	00 00 78    	mov.w     w0, w0
    2f10:	00 00 e9    	dec.w     w0, w0
    2f12:	00 0c 78    	mov.w     w0, [w8]
    2f14:	15 00 37    	bra       0x2f40 <.L61>

00002f16 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2f16:	1e 00 78    	mov.w     [w14], w0
    2f18:	10 00 78    	mov.w     [w0], w0
    2f1a:	9e 00 78    	mov.w     [w14], w1
    2f1c:	91 00 78    	mov.w     [w1], w1
    2f1e:	91 00 78    	mov.w     [w1], w1
    2f20:	01 30 a0    	bset.w    w1, #0x3
    2f22:	01 08 78    	mov.w     w1, [w0]

00002f24 <.LSM183>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2f24:	1e 00 78    	mov.w     [w14], w0
    2f26:	40 04 90    	mov.w     [w0+8], w8
    2f28:	5e 01 90    	mov.w     [w14+10], w2
    2f2a:	ee 01 90    	mov.w     [w14+12], w3
    2f2c:	00 40 22    	mov.w     #0x2400, w0
    2f2e:	41 a7 24    	mov.w     #0x4a74, w1
    2f30:	fd f1 07    	rcall     0x132c <___divsf3>
    2f32:	02 00 20    	mov.w     #0x0, w2
    2f34:	03 f0 23    	mov.w     #0x3f00, w3
    2f36:	9d f1 07    	rcall     0x1272 <___addsf3>
    2f38:	3f f2 07    	rcall     0x13b8 <___fixunssfsi>
    2f3a:	00 00 78    	mov.w     w0, w0
    2f3c:	00 00 e9    	dec.w     w0, w0
    2f3e:	00 0c 78    	mov.w     w0, [w8]

00002f40 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2f40:	ee 48 90    	mov.b     [w14+14], w1
    2f42:	50 c4 b3    	mov.b     #0x45, w0
    2f44:	80 cf 50    	sub.b     w1, w0, [w15]
    2f46:	04 00 32    	bra       Z, 0x2f50 <.L62>
    2f48:	ee 48 90    	mov.b     [w14+14], w1
    2f4a:	50 c6 b3    	mov.b     #0x65, w0
    2f4c:	80 cf 50    	sub.b     w1, w0, [w15]
    2f4e:	08 00 3a    	bra       NZ, 0x2f60 <.L63>

00002f50 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2f50:	1e 00 78    	mov.w     [w14], w0
    2f52:	10 00 78    	mov.w     [w0], w0
    2f54:	9e 00 78    	mov.w     [w14], w1
    2f56:	91 00 78    	mov.w     [w1], w1
    2f58:	91 00 78    	mov.w     [w1], w1
    2f5a:	01 10 a0    	bset.w    w1, #0x1
    2f5c:	01 08 78    	mov.w     w1, [w0]
    2f5e:	18 00 37    	bra       0x2f90 <.L64>

00002f60 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    2f60:	ee 48 90    	mov.b     [w14+14], w1
    2f62:	f0 c4 b3    	mov.b     #0x4f, w0
    2f64:	80 cf 50    	sub.b     w1, w0, [w15]
    2f66:	04 00 32    	bra       Z, 0x2f70 <.L65>
    2f68:	ee 48 90    	mov.b     [w14+14], w1
    2f6a:	f0 c6 b3    	mov.b     #0x6f, w0
    2f6c:	80 cf 50    	sub.b     w1, w0, [w15]
    2f6e:	08 00 3a    	bra       NZ, 0x2f80 <.L66>

00002f70 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    2f70:	1e 00 78    	mov.w     [w14], w0
    2f72:	10 00 78    	mov.w     [w0], w0
    2f74:	9e 00 78    	mov.w     [w14], w1
    2f76:	91 00 78    	mov.w     [w1], w1
    2f78:	91 00 78    	mov.w     [w1], w1
    2f7a:	01 20 a0    	bset.w    w1, #0x2
    2f7c:	01 08 78    	mov.w     w1, [w0]
    2f7e:	08 00 37    	bra       0x2f90 <.L64>

00002f80 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    2f80:	ee 48 90    	mov.b     [w14+14], w1
    2f82:	e0 c4 b3    	mov.b     #0x4e, w0
    2f84:	80 cf 50    	sub.b     w1, w0, [w15]
    2f86:	04 00 32    	bra       Z, 0x2f90 <.L64>
    2f88:	ee 48 90    	mov.b     [w14+14], w1
    2f8a:	e0 c6 b3    	mov.b     #0x6e, w0
    2f8c:	80 cf 50    	sub.b     w1, w0, [w15]
    2f8e:	a2 00 3a    	bra       NZ, 0x30d4 <.L83>

00002f90 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    2f90:	4e b8 97    	mov.w     [w14-8], w0
    2f92:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2f94:	08 00 3a    	bra       NZ, 0x2fa6 <.L67>

00002f96 <.LSM190>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2f96:	1e 00 78    	mov.w     [w14], w0
    2f98:	10 00 78    	mov.w     [w0], w0
    2f9a:	9e 00 78    	mov.w     [w14], w1
    2f9c:	91 00 78    	mov.w     [w1], w1
    2f9e:	91 00 78    	mov.w     [w1], w1
    2fa0:	01 00 a0    	bset.w    w1, #0x0
    2fa2:	01 08 78    	mov.w     w1, [w0]
    2fa4:	03 00 37    	bra       0x2fac <.L68>

00002fa6 <.L67>:
    } else if (stopbits!=1) {
    2fa6:	4e b8 97    	mov.w     [w14-8], w0
    2fa8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2faa:	96 00 3a    	bra       NZ, 0x30d8 <.L84>

00002fac <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    2fac:	2e b8 97    	mov.w     [w14-12], w0
    2fae:	00 00 e0    	cp0.w     w0
    2fb0:	04 00 3a    	bra       NZ, 0x2fba <.L69>

00002fb2 <.LSM193>:
        self->putc = __putc_nobuffer;
    2fb2:	1e 00 78    	mov.w     [w14], w0
    2fb4:	61 6f 22    	mov.w     #0x26f6, w1
    2fb6:	41 18 98    	mov.w     w1, [w0+56]
    2fb8:	36 00 37    	bra       0x3026 <.L70>

00002fba <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2fba:	1e 00 78    	mov.w     [w14], w0
    2fbc:	10 00 90    	mov.w     [w0+2], w0
    2fbe:	9e 00 78    	mov.w     [w14], w1
    2fc0:	91 00 90    	mov.w     [w1+2], w1
    2fc2:	11 01 78    	mov.w     [w1], w2
    2fc4:	01 00 22    	mov.w     #0x2000, w1
    2fc6:	82 80 70    	ior.w     w1, w2, w1
    2fc8:	01 08 78    	mov.w     w1, [w0]

00002fca <.LSM195>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2fca:	1e 00 78    	mov.w     [w14], w0
    2fcc:	ae b8 97    	mov.w     [w14-12], w1
    2fce:	11 10 98    	mov.w     w1, [w0+34]

00002fd0 <.LSM196>:
        self->TXbuffer.length = TXbufferlen;
    2fd0:	1e 00 78    	mov.w     [w14], w0
    2fd2:	9e b8 97    	mov.w     [w14-14], w1
    2fd4:	21 10 98    	mov.w     w1, [w0+36]

00002fd6 <.LSM197>:
        self->TXbuffer.head = 0;
    2fd6:	1e 00 78    	mov.w     [w14], w0
    2fd8:	80 00 eb    	clr.w     w1
    2fda:	31 10 98    	mov.w     w1, [w0+38]

00002fdc <.LSM198>:
        self->TXbuffer.tail = 0;
    2fdc:	1e 00 78    	mov.w     [w14], w0
    2fde:	80 00 eb    	clr.w     w1
    2fe0:	41 10 98    	mov.w     w1, [w0+40]

00002fe2 <.LSM199>:
        self->TXbuffer.count = 0;
    2fe2:	1e 00 78    	mov.w     [w14], w0
    2fe4:	80 00 eb    	clr.w     w1
    2fe6:	51 10 98    	mov.w     w1, [w0+42]

00002fe8 <.LSM200>:
        self->TXthreshold = TXthreshold;
    2fe8:	1e 00 78    	mov.w     [w14], w0
    2fea:	be b8 97    	mov.w     [w14-10], w1
    2fec:	31 18 98    	mov.w     w1, [w0+54]

00002fee <.LSM201>:
        self->putc = __putc_buffer;
    2fee:	1e 00 78    	mov.w     [w14], w0
    2ff0:	81 73 22    	mov.w     #0x2738, w1
    2ff2:	41 18 98    	mov.w     w1, [w0+56]

00002ff4 <.LSM202>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2ff4:	1e 00 78    	mov.w     [w14], w0
    2ff6:	50 00 90    	mov.w     [w0+10], w0
    2ff8:	9e 00 78    	mov.w     [w14], w1
    2ffa:	d1 00 90    	mov.w     [w1+10], w1
    2ffc:	11 01 78    	mov.w     [w1], w2
    2ffe:	9e 00 78    	mov.w     [w14], w1
    3000:	e1 48 90    	mov.b     [w1+14], w1
    3002:	81 80 fb    	ze        w1, w1
    3004:	13 00 20    	mov.w     #0x1, w3
    3006:	81 18 dd    	sl.w      w3, w1, w1
    3008:	81 80 ea    	com.w     w1, w1
    300a:	81 00 61    	and.w     w2, w1, w1
    300c:	01 08 78    	mov.w     w1, [w0]

0000300e <.LSM203>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    300e:	1e 00 78    	mov.w     [w14], w0
    3010:	60 00 90    	mov.w     [w0+12], w0
    3012:	9e 00 78    	mov.w     [w14], w1
    3014:	e1 00 90    	mov.w     [w1+12], w1
    3016:	11 01 78    	mov.w     [w1], w2
    3018:	9e 00 78    	mov.w     [w14], w1
    301a:	e1 48 90    	mov.b     [w1+14], w1
    301c:	81 80 fb    	ze        w1, w1
    301e:	13 00 20    	mov.w     #0x1, w3
    3020:	81 18 dd    	sl.w      w3, w1, w1
    3022:	82 80 70    	ior.w     w1, w2, w1
    3024:	01 08 78    	mov.w     w1, [w0]

00003026 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    3026:	0e b8 97    	mov.w     [w14-16], w0
    3028:	00 00 e0    	cp0.w     w0
    302a:	04 00 3a    	bra       NZ, 0x3034 <.L71>

0000302c <.LSM205>:
        self->getc = __getc_nobuffer;
    302c:	1e 00 78    	mov.w     [w14], w0
    302e:	a1 71 22    	mov.w     #0x271a, w1
    3030:	51 18 98    	mov.w     w1, [w0+58]
    3032:	2b 00 37    	bra       0x308a <.L72>

00003034 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    3034:	1e 00 78    	mov.w     [w14], w0
    3036:	8e b8 97    	mov.w     [w14-16], w1
    3038:	61 10 98    	mov.w     w1, [w0+44]

0000303a <.LSM207>:
        self->RXbuffer.length = RXbufferlen;
    303a:	1e 00 78    	mov.w     [w14], w0
    303c:	fe b0 97    	mov.w     [w14-18], w1
    303e:	71 10 98    	mov.w     w1, [w0+46]

00003040 <.LSM208>:
        self->RXbuffer.head = 0;
    3040:	1e 00 78    	mov.w     [w14], w0
    3042:	80 00 eb    	clr.w     w1
    3044:	01 18 98    	mov.w     w1, [w0+48]

00003046 <.LSM209>:
        self->RXbuffer.tail = 0;
    3046:	1e 00 78    	mov.w     [w14], w0
    3048:	80 00 eb    	clr.w     w1
    304a:	11 18 98    	mov.w     w1, [w0+50]

0000304c <.LSM210>:
        self->RXbuffer.count = 0;
    304c:	1e 00 78    	mov.w     [w14], w0
    304e:	80 00 eb    	clr.w     w1
    3050:	21 18 98    	mov.w     w1, [w0+52]

00003052 <.LSM211>:
        self->getc = __getc_buffer;
    3052:	1e 00 78    	mov.w     [w14], w0
    3054:	01 83 22    	mov.w     #0x2830, w1
    3056:	51 18 98    	mov.w     w1, [w0+58]

00003058 <.LSM212>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    3058:	1e 00 78    	mov.w     [w14], w0
    305a:	50 00 90    	mov.w     [w0+10], w0
    305c:	9e 00 78    	mov.w     [w14], w1
    305e:	d1 00 90    	mov.w     [w1+10], w1
    3060:	11 01 78    	mov.w     [w1], w2
    3062:	9e 00 78    	mov.w     [w14], w1
    3064:	f1 48 90    	mov.b     [w1+15], w1
    3066:	81 80 fb    	ze        w1, w1
    3068:	13 00 20    	mov.w     #0x1, w3
    306a:	81 18 dd    	sl.w      w3, w1, w1
    306c:	81 80 ea    	com.w     w1, w1
    306e:	81 00 61    	and.w     w2, w1, w1
    3070:	01 08 78    	mov.w     w1, [w0]

00003072 <.LSM213>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    3072:	1e 00 78    	mov.w     [w14], w0
    3074:	60 00 90    	mov.w     [w0+12], w0
    3076:	9e 00 78    	mov.w     [w14], w1
    3078:	e1 00 90    	mov.w     [w1+12], w1
    307a:	11 01 78    	mov.w     [w1], w2
    307c:	9e 00 78    	mov.w     [w14], w1
    307e:	f1 48 90    	mov.b     [w1+15], w1
    3080:	81 80 fb    	ze        w1, w1
    3082:	13 00 20    	mov.w     #0x1, w3
    3084:	81 18 dd    	sl.w      w3, w1, w1
    3086:	82 80 70    	ior.w     w1, w2, w1
    3088:	01 08 78    	mov.w     w1, [w0]

0000308a <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    308a:	1e 00 78    	mov.w     [w14], w0
    308c:	10 00 78    	mov.w     [w0], w0
    308e:	9e 00 78    	mov.w     [w14], w1
    3090:	91 00 78    	mov.w     [w1], w1
    3092:	11 01 78    	mov.w     [w1], w2
    3094:	01 00 28    	mov.w     #0x8000, w1
    3096:	82 80 70    	ior.w     w1, w2, w1
    3098:	01 08 78    	mov.w     w1, [w0]

0000309a <.LSM215>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    309a:	1e 00 78    	mov.w     [w14], w0
    309c:	10 00 90    	mov.w     [w0+2], w0
    309e:	9e 00 78    	mov.w     [w14], w1
    30a0:	91 00 90    	mov.w     [w1+2], w1
    30a2:	11 01 78    	mov.w     [w1], w2
    30a4:	01 40 20    	mov.w     #0x400, w1
    30a6:	82 80 70    	ior.w     w1, w2, w1
    30a8:	01 08 78    	mov.w     w1, [w0]
    30aa:	17 00 37    	bra       0x30da <.L40>

000030ac <.L73>:
    30ac:	00 00 00    	nop       
    30ae:	15 00 37    	bra       0x30da <.L40>

000030b0 <.L74>:
    30b0:	00 00 00    	nop       
    30b2:	13 00 37    	bra       0x30da <.L40>

000030b4 <.L75>:
    30b4:	00 00 00    	nop       
    30b6:	11 00 37    	bra       0x30da <.L40>

000030b8 <.L76>:
    30b8:	00 00 00    	nop       
    30ba:	0f 00 37    	bra       0x30da <.L40>

000030bc <.L77>:
    30bc:	00 00 00    	nop       
    30be:	0d 00 37    	bra       0x30da <.L40>

000030c0 <.L78>:
    30c0:	00 00 00    	nop       
    30c2:	0b 00 37    	bra       0x30da <.L40>

000030c4 <.L79>:
    30c4:	00 00 00    	nop       
    30c6:	09 00 37    	bra       0x30da <.L40>

000030c8 <.L80>:
    30c8:	00 00 00    	nop       
    30ca:	07 00 37    	bra       0x30da <.L40>

000030cc <.L81>:
    30cc:	00 00 00    	nop       
    30ce:	05 00 37    	bra       0x30da <.L40>

000030d0 <.L82>:
    30d0:	00 00 00    	nop       
    30d2:	03 00 37    	bra       0x30da <.L40>

000030d4 <.L83>:
    30d4:	00 00 00    	nop       
    30d6:	01 00 37    	bra       0x30da <.L40>

000030d8 <.L84>:
    30d8:	00 00 00    	nop       

000030da <.L40>:
}
    30da:	4f 04 78    	mov.w     [--w15], w8
    30dc:	00 80 fa    	ulnk      
    30de:	00 00 06    	return    

000030e0 <_uart_close>:

void uart_close(_UART *self) {
    30e0:	02 00 fa    	lnk       #0x2
    30e2:	00 0f 78    	mov.w     w0, [w14]

000030e4 <.LSM225>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    30e4:	1e 00 78    	mov.w     [w14], w0
    30e6:	10 00 90    	mov.w     [w0+2], w0
    30e8:	9e 00 78    	mov.w     [w14], w1
    30ea:	91 00 90    	mov.w     [w1+2], w1
    30ec:	11 01 78    	mov.w     [w1], w2
    30ee:	f1 bf 2f    	mov.w     #0xfbff, w1
    30f0:	81 00 61    	and.w     w2, w1, w1
    30f2:	01 08 78    	mov.w     w1, [w0]

000030f4 <.LSM226>:
    *(self->UxMODE) = 0;        // Disable UART module
    30f4:	1e 00 78    	mov.w     [w14], w0
    30f6:	10 00 78    	mov.w     [w0], w0
    30f8:	80 00 eb    	clr.w     w1
    30fa:	01 08 78    	mov.w     w1, [w0]

000030fc <.LSM227>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    30fc:	1e 00 78    	mov.w     [w14], w0
    30fe:	60 00 90    	mov.w     [w0+12], w0
    3100:	9e 00 78    	mov.w     [w14], w1
    3102:	e1 00 90    	mov.w     [w1+12], w1
    3104:	11 01 78    	mov.w     [w1], w2
    3106:	9e 00 78    	mov.w     [w14], w1
    3108:	e1 48 90    	mov.b     [w1+14], w1
    310a:	81 80 fb    	ze        w1, w1
    310c:	13 00 20    	mov.w     #0x1, w3
    310e:	81 18 dd    	sl.w      w3, w1, w1
    3110:	81 80 ea    	com.w     w1, w1
    3112:	81 00 61    	and.w     w2, w1, w1
    3114:	01 08 78    	mov.w     w1, [w0]

00003116 <.LSM228>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    3116:	1e 00 78    	mov.w     [w14], w0
    3118:	60 00 90    	mov.w     [w0+12], w0
    311a:	9e 00 78    	mov.w     [w14], w1
    311c:	e1 00 90    	mov.w     [w1+12], w1
    311e:	11 01 78    	mov.w     [w1], w2
    3120:	9e 00 78    	mov.w     [w14], w1
    3122:	f1 48 90    	mov.b     [w1+15], w1
    3124:	81 80 fb    	ze        w1, w1
    3126:	13 00 20    	mov.w     #0x1, w3
    3128:	81 18 dd    	sl.w      w3, w1, w1
    312a:	81 80 ea    	com.w     w1, w1
    312c:	81 00 61    	and.w     w2, w1, w1
    312e:	01 08 78    	mov.w     w1, [w0]

00003130 <.LSM229>:
    self->putc = NULL;
    3130:	1e 00 78    	mov.w     [w14], w0
    3132:	80 00 eb    	clr.w     w1
    3134:	41 18 98    	mov.w     w1, [w0+56]

00003136 <.LSM230>:
    self->getc = NULL;
    3136:	1e 00 78    	mov.w     [w14], w0
    3138:	80 00 eb    	clr.w     w1
    313a:	51 18 98    	mov.w     w1, [w0+58]

0000313c <.LSM231>:
    if (self->TX) {
    313c:	1e 00 78    	mov.w     [w14], w0
    313e:	50 08 90    	mov.w     [w0+26], w0
    3140:	00 00 e0    	cp0.w     w0
    3142:	2f 00 32    	bra       Z, 0x31a2 <.L86>

00003144 <.LSM232>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3144:	11 3a 80    	mov.w     0x742, w1
    3146:	f0 0b 20    	mov.w     #0xbf, w0
    3148:	00 81 60    	and.w     w1, w0, w2
    314a:	60 04 20    	mov.w     #0x46, w0
    314c:	71 05 20    	mov.w     #0x57, w1
    314e:	23 74 20    	mov.w     #0x742, w3
    3150:	80 49 78    	mov.b     w0, [w3]
    3152:	81 49 78    	mov.b     w1, [w3]
    3154:	82 49 78    	mov.b     w2, [w3]

00003156 <.LSM233>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    3156:	1e 00 78    	mov.w     [w14], w0
    3158:	50 08 90    	mov.w     [w0+26], w0
    315a:	70 00 90    	mov.w     [w0+14], w0
    315c:	9e 00 78    	mov.w     [w14], w1
    315e:	d1 08 90    	mov.w     [w1+26], w1
    3160:	f1 00 90    	mov.w     [w1+14], w1
    3162:	11 01 78    	mov.w     [w1], w2
    3164:	9e 00 78    	mov.w     [w14], w1
    3166:	d1 08 90    	mov.w     [w1+26], w1
    3168:	a1 48 90    	mov.b     [w1+10], w1
    316a:	81 80 fb    	ze        w1, w1
    316c:	f3 03 20    	mov.w     #0x3f, w3
    316e:	81 18 dd    	sl.w      w3, w1, w1
    3170:	81 80 ea    	com.w     w1, w1
    3172:	81 00 61    	and.w     w2, w1, w1
    3174:	01 08 78    	mov.w     w1, [w0]

00003176 <.LSM234>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3176:	11 3a 80    	mov.w     0x742, w1
    3178:	00 04 20    	mov.w     #0x40, w0
    317a:	01 01 70    	ior.w     w0, w1, w2
    317c:	60 04 20    	mov.w     #0x46, w0
    317e:	71 05 20    	mov.w     #0x57, w1
    3180:	23 74 20    	mov.w     #0x742, w3
    3182:	80 49 78    	mov.b     w0, [w3]
    3184:	81 49 78    	mov.b     w1, [w3]
    3186:	82 49 78    	mov.b     w2, [w3]

00003188 <.LSM235>:
        self->TX->owner = NULL;
    3188:	1e 00 78    	mov.w     [w14], w0
    318a:	50 08 90    	mov.w     [w0+26], w0
    318c:	80 00 eb    	clr.w     w1
    318e:	01 08 98    	mov.w     w1, [w0+16]

00003190 <.LSM236>:
        pin_digitalOut(self->TX);
    3190:	1e 00 78    	mov.w     [w14], w0
    3192:	50 08 90    	mov.w     [w0+26], w0
    3194:	95 05 07    	rcall     0x3cc0 <_pin_digitalOut>

00003196 <.LSM237>:
        pin_set(self->TX);
    3196:	1e 00 78    	mov.w     [w14], w0
    3198:	50 08 90    	mov.w     [w0+26], w0
    319a:	ef 05 07    	rcall     0x3d7a <_pin_set>

0000319c <.LSM238>:
        self->TX = NULL;
    319c:	1e 00 78    	mov.w     [w14], w0
    319e:	80 00 eb    	clr.w     w1
    31a0:	51 08 98    	mov.w     w1, [w0+26]

000031a2 <.L86>:
    }
    if (self->RX) {
    31a2:	1e 00 78    	mov.w     [w14], w0
    31a4:	60 08 90    	mov.w     [w0+28], w0
    31a6:	00 00 e0    	cp0.w     w0
    31a8:	28 00 32    	bra       Z, 0x31fa <.L87>

000031aa <.LSM240>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    31aa:	11 3a 80    	mov.w     0x742, w1
    31ac:	f0 0b 20    	mov.w     #0xbf, w0
    31ae:	00 81 60    	and.w     w1, w0, w2
    31b0:	60 04 20    	mov.w     #0x46, w0
    31b2:	71 05 20    	mov.w     #0x57, w1
    31b4:	23 74 20    	mov.w     #0x742, w3
    31b6:	80 49 78    	mov.b     w0, [w3]
    31b8:	81 49 78    	mov.b     w1, [w3]
    31ba:	82 49 78    	mov.b     w2, [w3]

000031bc <.LSM241>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    31bc:	1e 00 78    	mov.w     [w14], w0
    31be:	00 08 90    	mov.w     [w0+16], w0
    31c0:	9e 00 78    	mov.w     [w14], w1
    31c2:	81 08 90    	mov.w     [w1+16], w1
    31c4:	11 01 78    	mov.w     [w1], w2
    31c6:	9e 00 78    	mov.w     [w14], w1
    31c8:	c1 50 90    	mov.b     [w1+20], w1
    31ca:	81 80 fb    	ze        w1, w1
    31cc:	f3 03 20    	mov.w     #0x3f, w3
    31ce:	81 18 dd    	sl.w      w3, w1, w1
    31d0:	82 80 70    	ior.w     w1, w2, w1
    31d2:	01 08 78    	mov.w     w1, [w0]

000031d4 <.LSM242>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    31d4:	11 3a 80    	mov.w     0x742, w1
    31d6:	00 04 20    	mov.w     #0x40, w0
    31d8:	01 01 70    	ior.w     w0, w1, w2
    31da:	60 04 20    	mov.w     #0x46, w0
    31dc:	71 05 20    	mov.w     #0x57, w1
    31de:	23 74 20    	mov.w     #0x742, w3
    31e0:	80 49 78    	mov.b     w0, [w3]
    31e2:	81 49 78    	mov.b     w1, [w3]
    31e4:	82 49 78    	mov.b     w2, [w3]

000031e6 <.LSM243>:
        self->RX->owner = NULL;
    31e6:	1e 00 78    	mov.w     [w14], w0
    31e8:	60 08 90    	mov.w     [w0+28], w0
    31ea:	80 00 eb    	clr.w     w1
    31ec:	01 08 98    	mov.w     w1, [w0+16]

000031ee <.LSM244>:
        pin_digitalIn(self->RX);
    31ee:	1e 00 78    	mov.w     [w14], w0
    31f0:	60 08 90    	mov.w     [w0+28], w0
    31f2:	3f 05 07    	rcall     0x3c72 <_pin_digitalIn>

000031f4 <.LSM245>:
        self->RX = NULL;
    31f4:	1e 00 78    	mov.w     [w14], w0
    31f6:	80 00 eb    	clr.w     w1
    31f8:	61 08 98    	mov.w     w1, [w0+28]

000031fa <.L87>:
    }
    if (self->RTS) {
    31fa:	1e 00 78    	mov.w     [w14], w0
    31fc:	70 08 90    	mov.w     [w0+30], w0
    31fe:	00 00 e0    	cp0.w     w0
    3200:	2f 00 32    	bra       Z, 0x3260 <.L88>

00003202 <.LSM247>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3202:	11 3a 80    	mov.w     0x742, w1
    3204:	f0 0b 20    	mov.w     #0xbf, w0
    3206:	00 81 60    	and.w     w1, w0, w2
    3208:	60 04 20    	mov.w     #0x46, w0
    320a:	71 05 20    	mov.w     #0x57, w1
    320c:	23 74 20    	mov.w     #0x742, w3
    320e:	80 49 78    	mov.b     w0, [w3]
    3210:	81 49 78    	mov.b     w1, [w3]
    3212:	82 49 78    	mov.b     w2, [w3]

00003214 <.LSM248>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    3214:	1e 00 78    	mov.w     [w14], w0
    3216:	70 08 90    	mov.w     [w0+30], w0
    3218:	70 00 90    	mov.w     [w0+14], w0
    321a:	9e 00 78    	mov.w     [w14], w1
    321c:	f1 08 90    	mov.w     [w1+30], w1
    321e:	f1 00 90    	mov.w     [w1+14], w1
    3220:	11 01 78    	mov.w     [w1], w2
    3222:	9e 00 78    	mov.w     [w14], w1
    3224:	f1 08 90    	mov.w     [w1+30], w1
    3226:	a1 48 90    	mov.b     [w1+10], w1
    3228:	81 80 fb    	ze        w1, w1
    322a:	f3 03 20    	mov.w     #0x3f, w3
    322c:	81 18 dd    	sl.w      w3, w1, w1
    322e:	81 80 ea    	com.w     w1, w1
    3230:	81 00 61    	and.w     w2, w1, w1
    3232:	01 08 78    	mov.w     w1, [w0]

00003234 <.LSM249>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3234:	11 3a 80    	mov.w     0x742, w1
    3236:	00 04 20    	mov.w     #0x40, w0
    3238:	01 01 70    	ior.w     w0, w1, w2
    323a:	60 04 20    	mov.w     #0x46, w0
    323c:	71 05 20    	mov.w     #0x57, w1
    323e:	23 74 20    	mov.w     #0x742, w3
    3240:	80 49 78    	mov.b     w0, [w3]
    3242:	81 49 78    	mov.b     w1, [w3]
    3244:	82 49 78    	mov.b     w2, [w3]

00003246 <.LSM250>:
        self->RTS->owner = NULL;
    3246:	1e 00 78    	mov.w     [w14], w0
    3248:	70 08 90    	mov.w     [w0+30], w0
    324a:	80 00 eb    	clr.w     w1
    324c:	01 08 98    	mov.w     w1, [w0+16]

0000324e <.LSM251>:
        pin_digitalOut(self->RTS);
    324e:	1e 00 78    	mov.w     [w14], w0
    3250:	70 08 90    	mov.w     [w0+30], w0
    3252:	36 05 07    	rcall     0x3cc0 <_pin_digitalOut>

00003254 <.LSM252>:
        pin_set(self->RTS);
    3254:	1e 00 78    	mov.w     [w14], w0
    3256:	70 08 90    	mov.w     [w0+30], w0
    3258:	90 05 07    	rcall     0x3d7a <_pin_set>

0000325a <.LSM253>:
        self->RTS = NULL;
    325a:	1e 00 78    	mov.w     [w14], w0
    325c:	80 00 eb    	clr.w     w1
    325e:	71 08 98    	mov.w     w1, [w0+30]

00003260 <.L88>:
    }
    if (self->CTS) {
    3260:	1e 00 78    	mov.w     [w14], w0
    3262:	00 10 90    	mov.w     [w0+32], w0
    3264:	00 00 e0    	cp0.w     w0
    3266:	28 00 32    	bra       Z, 0x32b8 <.L85>

00003268 <.LSM255>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3268:	11 3a 80    	mov.w     0x742, w1
    326a:	f0 0b 20    	mov.w     #0xbf, w0
    326c:	00 81 60    	and.w     w1, w0, w2
    326e:	60 04 20    	mov.w     #0x46, w0
    3270:	71 05 20    	mov.w     #0x57, w1
    3272:	23 74 20    	mov.w     #0x742, w3
    3274:	80 49 78    	mov.b     w0, [w3]
    3276:	81 49 78    	mov.b     w1, [w3]
    3278:	82 49 78    	mov.b     w2, [w3]

0000327a <.LSM256>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    327a:	1e 00 78    	mov.w     [w14], w0
    327c:	10 08 90    	mov.w     [w0+18], w0
    327e:	9e 00 78    	mov.w     [w14], w1
    3280:	91 08 90    	mov.w     [w1+18], w1
    3282:	11 01 78    	mov.w     [w1], w2
    3284:	9e 00 78    	mov.w     [w14], w1
    3286:	d1 50 90    	mov.b     [w1+21], w1
    3288:	81 80 fb    	ze        w1, w1
    328a:	f3 03 20    	mov.w     #0x3f, w3
    328c:	81 18 dd    	sl.w      w3, w1, w1
    328e:	82 80 70    	ior.w     w1, w2, w1
    3290:	01 08 78    	mov.w     w1, [w0]

00003292 <.LSM257>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3292:	11 3a 80    	mov.w     0x742, w1
    3294:	00 04 20    	mov.w     #0x40, w0
    3296:	01 01 70    	ior.w     w0, w1, w2
    3298:	60 04 20    	mov.w     #0x46, w0
    329a:	71 05 20    	mov.w     #0x57, w1
    329c:	23 74 20    	mov.w     #0x742, w3
    329e:	80 49 78    	mov.b     w0, [w3]
    32a0:	81 49 78    	mov.b     w1, [w3]
    32a2:	82 49 78    	mov.b     w2, [w3]

000032a4 <.LSM258>:
        self->CTS->owner = NULL;
    32a4:	1e 00 78    	mov.w     [w14], w0
    32a6:	00 10 90    	mov.w     [w0+32], w0
    32a8:	80 00 eb    	clr.w     w1
    32aa:	01 08 98    	mov.w     w1, [w0+16]

000032ac <.LSM259>:
        pin_digitalIn(self->CTS);
    32ac:	1e 00 78    	mov.w     [w14], w0
    32ae:	00 10 90    	mov.w     [w0+32], w0
    32b0:	e0 04 07    	rcall     0x3c72 <_pin_digitalIn>

000032b2 <.LSM260>:
        self->CTS = NULL;
    32b2:	1e 00 78    	mov.w     [w14], w0
    32b4:	80 00 eb    	clr.w     w1
    32b6:	01 10 98    	mov.w     w1, [w0+32]

000032b8 <.L85>:
    }
}
    32b8:	00 80 fa    	ulnk      
    32ba:	00 00 06    	return    

000032bc <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    32bc:	04 00 fa    	lnk       #0x4
    32be:	00 0f 78    	mov.w     w0, [w14]
    32c0:	21 47 98    	mov.b     w1, [w14+2]

000032c2 <.LSM263>:
    if (self->putc)
    32c2:	1e 00 78    	mov.w     [w14], w0
    32c4:	40 18 90    	mov.w     [w0+56], w0
    32c6:	00 00 e0    	cp0.w     w0
    32c8:	05 00 32    	bra       Z, 0x32d4 <.L90>

000032ca <.LSM264>:
        self->putc(self, ch);
    32ca:	1e 00 78    	mov.w     [w14], w0
    32cc:	40 19 90    	mov.w     [w0+56], w2
    32ce:	ae 40 90    	mov.b     [w14+2], w1
    32d0:	1e 00 78    	mov.w     [w14], w0
    32d2:	02 00 01    	call      w2

000032d4 <.L90>:
}
    32d4:	00 80 fa    	ulnk      
    32d6:	00 00 06    	return    

000032d8 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    32d8:	02 00 fa    	lnk       #0x2
    32da:	00 0f 78    	mov.w     w0, [w14]

000032dc <.LSM267>:
    if (self->getc)
    32dc:	1e 00 78    	mov.w     [w14], w0
    32de:	50 18 90    	mov.w     [w0+58], w0
    32e0:	00 00 e0    	cp0.w     w0
    32e2:	05 00 32    	bra       Z, 0x32ee <.L93>

000032e4 <.LSM268>:
        return self->getc(self);
    32e4:	1e 00 78    	mov.w     [w14], w0
    32e6:	d0 18 90    	mov.w     [w0+58], w1
    32e8:	1e 00 78    	mov.w     [w14], w0
    32ea:	01 00 01    	call      w1
    32ec:	01 00 37    	bra       0x32f0 <.L94>

000032ee <.L93>:
    else
        return 0xFF;
    32ee:	00 c0 eb    	setm.b    w0

000032f0 <.L94>:
}
    32f0:	00 80 fa    	ulnk      
    32f2:	00 00 06    	return    

000032f4 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    32f4:	02 00 fa    	lnk       #0x2
    32f6:	00 0f 78    	mov.w     w0, [w14]

000032f8 <.LSM272>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    32f8:	1e 00 78    	mov.w     [w14], w0
    32fa:	10 00 90    	mov.w     [w0+2], w0
    32fc:	90 00 78    	mov.w     [w0], w1
    32fe:	00 40 20    	mov.w     #0x400, w0
    3300:	00 80 60    	and.w     w1, w0, w0
    3302:	00 00 e0    	cp0.w     w0
    3304:	08 00 3a    	bra       NZ, 0x3316 <.L95>

00003306 <.LSM273>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    3306:	1e 00 78    	mov.w     [w14], w0
    3308:	10 00 90    	mov.w     [w0+2], w0
    330a:	9e 00 78    	mov.w     [w14], w1
    330c:	91 00 90    	mov.w     [w1+2], w1
    330e:	11 01 78    	mov.w     [w1], w2
    3310:	01 40 20    	mov.w     #0x400, w1
    3312:	82 80 70    	ior.w     w1, w2, w1
    3314:	01 08 78    	mov.w     w1, [w0]

00003316 <.L95>:
}
    3316:	00 80 fa    	ulnk      
    3318:	00 00 06    	return    

0000331a <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    331a:	04 00 fa    	lnk       #0x4
    331c:	00 0f 78    	mov.w     w0, [w14]
    331e:	11 07 98    	mov.w     w1, [w14+2]

00003320 <.LSM276>:
    while (*str)
    3320:	08 00 37    	bra       0x3332 <.L98>

00003322 <.L99>:
        uart_putc(self, *str++);
    3322:	1e 00 90    	mov.w     [w14+2], w0
    3324:	10 40 78    	mov.b     [w0], w0
    3326:	9e 00 90    	mov.w     [w14+2], w1
    3328:	81 00 e8    	inc.w     w1, w1
    332a:	11 07 98    	mov.w     w1, [w14+2]
    332c:	80 40 78    	mov.b     w0, w1
    332e:	1e 00 78    	mov.w     [w14], w0
    3330:	c5 ff 07    	rcall     0x32bc <_uart_putc>

00003332 <.L98>:
    3332:	1e 00 90    	mov.w     [w14+2], w0
    3334:	10 40 78    	mov.b     [w0], w0
    3336:	00 04 e0    	cp0.b     w0
    3338:	f4 ff 3a    	bra       NZ, 0x3322 <.L99>

0000333a <.LSM279>:
    uart_flushTxBuffer(self);
    333a:	1e 00 78    	mov.w     [w14], w0
    333c:	db ff 07    	rcall     0x32f4 <_uart_flushTxBuffer>

0000333e <.LSM280>:
}
    333e:	00 80 fa    	ulnk      
    3340:	00 00 06    	return    

00003342 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    3342:	0a 00 fa    	lnk       #0xa
    3344:	20 07 98    	mov.w     w0, [w14+4]
    3346:	31 07 98    	mov.w     w1, [w14+6]
    3348:	42 07 98    	mov.w     w2, [w14+8]

0000334a <.LSM282>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    334a:	4e 00 90    	mov.w     [w14+8], w0
    334c:	00 00 e0    	cp0.w     w0
    334e:	87 00 32    	bra       Z, 0x345e <.L113>

00003350 <.LSM283>:
        return;

    if (len==1) {
    3350:	4e 00 90    	mov.w     [w14+8], w0
    3352:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3354:	04 00 3a    	bra       NZ, 0x335e <.L103>

00003356 <.LSM284>:
        *str = '\0';
    3356:	3e 00 90    	mov.w     [w14+6], w0
    3358:	80 40 eb    	clr.b     w1
    335a:	01 48 78    	mov.b     w1, [w0]

0000335c <.LSM285>:
        return;
    335c:	81 00 37    	bra       0x3460 <.L100>

0000335e <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    335e:	b1 c1 b3    	mov.b     #0x1b, w1
    3360:	2e 00 90    	mov.w     [w14+4], w0
    3362:	ac ff 07    	rcall     0x32bc <_uart_putc>

00003364 <.LSM287>:
    uart_putc(self, '7');
    3364:	71 c3 b3    	mov.b     #0x37, w1
    3366:	2e 00 90    	mov.w     [w14+4], w0
    3368:	a9 ff 07    	rcall     0x32bc <_uart_putc>

0000336a <.LSM288>:
    uart_flushTxBuffer(self);
    336a:	2e 00 90    	mov.w     [w14+4], w0
    336c:	c3 ff 07    	rcall     0x32f4 <_uart_flushTxBuffer>

0000336e <.LSM289>:
    start = str;
    336e:	be 00 90    	mov.w     [w14+6], w1
    3370:	11 07 98    	mov.w     w1, [w14+2]

00003372 <.LSM290>:
    left = len;
    3372:	ce 00 90    	mov.w     [w14+8], w1
    3374:	01 0f 78    	mov.w     w1, [w14]
    3376:	03 00 37    	bra       0x337e <.L112>

00003378 <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    3378:	00 00 00    	nop       
    337a:	01 00 37    	bra       0x337e <.L112>

0000337c <.L115>:
    337c:	00 00 00    	nop       

0000337e <.L112>:
    337e:	2e 00 90    	mov.w     [w14+4], w0
    3380:	ab ff 07    	rcall     0x32d8 <_uart_getc>
    3382:	be 00 90    	mov.w     [w14+6], w1
    3384:	80 48 78    	mov.b     w0, [w1]

00003386 <.LSM293>:
    3386:	3e 00 90    	mov.w     [w14+6], w0
    3388:	10 40 78    	mov.b     [w0], w0
    338a:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    338c:	0c 00 3a    	bra       NZ, 0x33a6 <.L104>

0000338e <.LSM294>:

    *str = '\0';                            // Terminarte the string with null
    338e:	3e 00 90    	mov.w     [w14+6], w0
    3390:	80 40 eb    	clr.b     w1
    3392:	01 48 78    	mov.b     w1, [w0]

00003394 <.LSM295>:
    uart_putc(self, '\n');                  // Send newline and
    3394:	a1 c0 b3    	mov.b     #0xa, w1
    3396:	2e 00 90    	mov.w     [w14+4], w0
    3398:	91 ff 07    	rcall     0x32bc <_uart_putc>

0000339a <.LSM296>:
    uart_putc(self, '\r');                  //   carriage return
    339a:	d1 c0 b3    	mov.b     #0xd, w1
    339c:	2e 00 90    	mov.w     [w14+4], w0
    339e:	8e ff 07    	rcall     0x32bc <_uart_putc>

000033a0 <.LSM297>:
    uart_flushTxBuffer(self);
    33a0:	2e 00 90    	mov.w     [w14+4], w0
    33a2:	a8 ff 07    	rcall     0x32f4 <_uart_flushTxBuffer>
    33a4:	5d 00 37    	bra       0x3460 <.L100>

000033a6 <.L104>:
    33a6:	3e 00 90    	mov.w     [w14+6], w0
    33a8:	10 40 78    	mov.b     [w0], w0
    33aa:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    33ac:	16 00 3a    	bra       NZ, 0x33da <.L105>

000033ae <.LSM299>:
    33ae:	b1 c1 b3    	mov.b     #0x1b, w1
    33b0:	2e 00 90    	mov.w     [w14+4], w0
    33b2:	84 ff 07    	rcall     0x32bc <_uart_putc>

000033b4 <.LSM300>:
    33b4:	81 c3 b3    	mov.b     #0x38, w1
    33b6:	2e 00 90    	mov.w     [w14+4], w0
    33b8:	81 ff 07    	rcall     0x32bc <_uart_putc>

000033ba <.LSM301>:
    33ba:	b1 c1 b3    	mov.b     #0x1b, w1
    33bc:	2e 00 90    	mov.w     [w14+4], w0
    33be:	7e ff 07    	rcall     0x32bc <_uart_putc>

000033c0 <.LSM302>:
    33c0:	b1 c5 b3    	mov.b     #0x5b, w1
    33c2:	2e 00 90    	mov.w     [w14+4], w0
    33c4:	7b ff 07    	rcall     0x32bc <_uart_putc>

000033c6 <.LSM303>:
    33c6:	b1 c4 b3    	mov.b     #0x4b, w1
    33c8:	2e 00 90    	mov.w     [w14+4], w0
    33ca:	78 ff 07    	rcall     0x32bc <_uart_putc>

000033cc <.LSM304>:
    33cc:	2e 00 90    	mov.w     [w14+4], w0
    33ce:	92 ff 07    	rcall     0x32f4 <_uart_flushTxBuffer>

000033d0 <.LSM305>:
    33d0:	9e 00 90    	mov.w     [w14+2], w1
    33d2:	31 07 98    	mov.w     w1, [w14+6]

000033d4 <.LSM306>:
    33d4:	ce 00 90    	mov.w     [w14+8], w1
    33d6:	01 0f 78    	mov.w     w1, [w14]

000033d8 <.LSM307>:
    33d8:	41 00 37    	bra       0x345c <.L106>

000033da <.L105>:
    33da:	3e 00 90    	mov.w     [w14+6], w0
    33dc:	10 40 78    	mov.b     [w0], w0
    33de:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    33e0:	05 00 32    	bra       Z, 0x33ec <.L107>

000033e2 <.LSM309>:
    33e2:	3e 00 90    	mov.w     [w14+6], w0
    33e4:	90 40 78    	mov.b     [w0], w1

000033e6 <.LSM310>:
    33e6:	f0 c7 b3    	mov.b     #0x7f, w0
    33e8:	80 cf 50    	sub.b     w1, w0, [w15]
    33ea:	1a 00 3a    	bra       NZ, 0x3420 <.L108>

000033ec <.L107>:
    33ec:	be 00 90    	mov.w     [w14+6], w1
    33ee:	1e 00 90    	mov.w     [w14+2], w0
    33f0:	80 8f 50    	sub.w     w1, w0, [w15]
    33f2:	10 00 36    	bra       LEU, 0x3414 <.L109>

000033f4 <.LSM312>:
    33f4:	81 c0 b3    	mov.b     #0x8, w1
    33f6:	2e 00 90    	mov.w     [w14+4], w0
    33f8:	61 ff 07    	rcall     0x32bc <_uart_putc>

000033fa <.LSM313>:
    33fa:	01 c2 b3    	mov.b     #0x20, w1
    33fc:	2e 00 90    	mov.w     [w14+4], w0
    33fe:	5e ff 07    	rcall     0x32bc <_uart_putc>

00003400 <.LSM314>:
    3400:	81 c0 b3    	mov.b     #0x8, w1
    3402:	2e 00 90    	mov.w     [w14+4], w0
    3404:	5b ff 07    	rcall     0x32bc <_uart_putc>

00003406 <.LSM315>:
    3406:	2e 00 90    	mov.w     [w14+4], w0
    3408:	75 ff 07    	rcall     0x32f4 <_uart_flushTxBuffer>

0000340a <.LSM316>:
    340a:	3e 00 90    	mov.w     [w14+6], w0
    340c:	00 00 e9    	dec.w     w0, w0
    340e:	30 07 98    	mov.w     w0, [w14+6]

00003410 <.LSM317>:
    3410:	1e 0f e8    	inc.w     [w14], [w14]
    3412:	05 00 37    	bra       0x341e <.L110>

00003414 <.L109>:
    3414:	71 c0 b3    	mov.b     #0x7, w1
    3416:	2e 00 90    	mov.w     [w14+4], w0
    3418:	51 ff 07    	rcall     0x32bc <_uart_putc>

0000341a <.LSM319>:
    341a:	2e 00 90    	mov.w     [w14+4], w0
    341c:	6b ff 07    	rcall     0x32f4 <_uart_flushTxBuffer>

0000341e <.L110>:
    341e:	1e 00 37    	bra       0x345c <.L106>

00003420 <.L108>:
    3420:	1e 00 78    	mov.w     [w14], w0
    3422:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3424:	06 00 3a    	bra       NZ, 0x3432 <.L111>

00003426 <.LSM322>:
    3426:	71 c0 b3    	mov.b     #0x7, w1
    3428:	2e 00 90    	mov.w     [w14+4], w0
    342a:	48 ff 07    	rcall     0x32bc <_uart_putc>

0000342c <.LSM323>:
    342c:	2e 00 90    	mov.w     [w14+4], w0
    342e:	62 ff 07    	rcall     0x32f4 <_uart_flushTxBuffer>

00003430 <.LSM324>:
    3430:	15 00 37    	bra       0x345c <.L106>

00003432 <.L111>:
    3432:	3e 00 90    	mov.w     [w14+6], w0
    3434:	10 40 78    	mov.b     [w0], w0
    3436:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    3438:	9f ff 36    	bra       LEU, 0x3378 <.L114>
    343a:	3e 00 90    	mov.w     [w14+6], w0
    343c:	90 40 78    	mov.b     [w0], w1
    343e:	e0 c7 b3    	mov.b     #0x7e, w0
    3440:	80 cf 50    	sub.b     w1, w0, [w15]
    3442:	9c ff 3e    	bra       GTU, 0x337c <.L115>

00003444 <.LSM326>:
    3444:	3e 00 90    	mov.w     [w14+6], w0
    3446:	10 40 78    	mov.b     [w0], w0
    3448:	80 40 78    	mov.b     w0, w1
    344a:	2e 00 90    	mov.w     [w14+4], w0
    344c:	37 ff 07    	rcall     0x32bc <_uart_putc>

0000344e <.LSM327>:
    344e:	2e 00 90    	mov.w     [w14+4], w0
    3450:	51 ff 07    	rcall     0x32f4 <_uart_flushTxBuffer>

00003452 <.LSM328>:
    3452:	3e 00 90    	mov.w     [w14+6], w0
    3454:	00 00 e8    	inc.w     w0, w0
    3456:	30 07 98    	mov.w     w0, [w14+6]

00003458 <.LSM329>:
    3458:	1e 0f e9    	dec.w     [w14], [w14]

0000345a <.LSM330>:
    345a:	91 ff 37    	bra       0x337e <.L112>

0000345c <.L106>:
    345c:	90 ff 37    	bra       0x337e <.L112>

0000345e <.L113>:
    345e:	00 00 00    	nop       

00003460 <.L100>:
}
    3460:	00 80 fa    	ulnk      
    3462:	00 00 06    	return    

00003464 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    3464:	02 00 fa    	lnk       #0x2
    3466:	00 0f 78    	mov.w     w0, [w14]

00003468 <.LSM1>:
    timer_lower(self);
    3468:	1e 00 78    	mov.w     [w14], w0
    346a:	01 02 07    	rcall     0x386e <_timer_lower>

0000346c <.LSM2>:
    if (self->every) {
    346c:	1e 00 78    	mov.w     [w14], w0
    346e:	10 08 90    	mov.w     [w0+18], w0
    3470:	00 00 e0    	cp0.w     w0
    3472:	05 00 32    	bra       Z, 0x347e <.L2>

00003474 <.LSM3>:
        self->every(self);
    3474:	1e 00 78    	mov.w     [w14], w0
    3476:	90 08 90    	mov.w     [w0+18], w1
    3478:	1e 00 78    	mov.w     [w14], w0
    347a:	01 00 01    	call      w1
    347c:	1a 00 37    	bra       0x34b2 <.L1>

0000347e <.L2>:
    } else if (self->after) {
    347e:	1e 00 78    	mov.w     [w14], w0
    3480:	20 08 90    	mov.w     [w0+20], w0
    3482:	00 00 e0    	cp0.w     w0
    3484:	14 00 32    	bra       Z, 0x34ae <.L4>

00003486 <.LSM5>:
        if (self->aftercount) {
    3486:	1e 00 78    	mov.w     [w14], w0
    3488:	00 08 90    	mov.w     [w0+16], w0
    348a:	00 00 e0    	cp0.w     w0
    348c:	0a 00 32    	bra       Z, 0x34a2 <.L5>

0000348e <.LSM6>:
            self->after(self);
    348e:	1e 00 78    	mov.w     [w14], w0
    3490:	a0 08 90    	mov.w     [w0+20], w1
    3492:	1e 00 78    	mov.w     [w14], w0
    3494:	01 00 01    	call      w1

00003496 <.LSM7>:
            self->aftercount--;
    3496:	1e 00 78    	mov.w     [w14], w0
    3498:	00 08 90    	mov.w     [w0+16], w0
    349a:	80 00 e9    	dec.w     w0, w1
    349c:	1e 00 78    	mov.w     [w14], w0
    349e:	01 08 98    	mov.w     w1, [w0+16]
    34a0:	08 00 37    	bra       0x34b2 <.L1>

000034a2 <.L5>:
        } else {
            timer_disableInterrupt(self);
    34a2:	1e 00 78    	mov.w     [w14], w0
    34a4:	0c 02 07    	rcall     0x38be <_timer_disableInterrupt>

000034a6 <.LSM9>:
            self->after = NULL;
    34a6:	1e 00 78    	mov.w     [w14], w0
    34a8:	80 00 eb    	clr.w     w1
    34aa:	21 08 98    	mov.w     w1, [w0+20]
    34ac:	02 00 37    	bra       0x34b2 <.L1>

000034ae <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    34ae:	1e 00 78    	mov.w     [w14], w0
    34b0:	06 02 07    	rcall     0x38be <_timer_disableInterrupt>

000034b2 <.L1>:
    }
}
    34b2:	00 80 fa    	ulnk      
    34b4:	00 00 06    	return    

000034b6 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    34b6:	36 00 f8    	push      0x36
    34b8:	80 9f be    	mov.d     w0, [w15++]
    34ba:	82 9f be    	mov.d     w2, [w15++]
    34bc:	84 9f be    	mov.d     w4, [w15++]
    34be:	86 9f be    	mov.d     w6, [w15++]
    34c0:	32 00 f8    	push      0x32
    34c2:	34 00 f8    	push      0x34
    34c4:	10 00 20    	mov.w     #0x1, w0
    34c6:	a0 01 88    	mov.w     w0, 0x34
    34c8:	00 20 20    	mov.w     #0x200, w0
    34ca:	90 01 88    	mov.w     w0, 0x32
    34cc:	00 00 fa    	lnk       #0x0

000034ce <.LSM13>:
    timer_serviceInterrupt(&timer1);
    34ce:	00 39 21    	mov.w     #0x1390, w0
    34d0:	c9 ff 07    	rcall     0x3464 <_timer_serviceInterrupt>

000034d2 <.LSM14>:
}
    34d2:	00 80 fa    	ulnk      
    34d4:	34 00 f9    	pop       0x34
    34d6:	32 00 f9    	pop       0x32
    34d8:	4f 03 be    	mov.d     [--w15], w6
    34da:	4f 02 be    	mov.d     [--w15], w4
    34dc:	4f 01 be    	mov.d     [--w15], w2
    34de:	4f 00 be    	mov.d     [--w15], w0
    34e0:	36 00 f9    	pop       0x36
    34e2:	00 40 06    	retfie    

000034e4 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    34e4:	36 00 f8    	push      0x36
    34e6:	80 9f be    	mov.d     w0, [w15++]
    34e8:	82 9f be    	mov.d     w2, [w15++]
    34ea:	84 9f be    	mov.d     w4, [w15++]
    34ec:	86 9f be    	mov.d     w6, [w15++]
    34ee:	32 00 f8    	push      0x32
    34f0:	34 00 f8    	push      0x34
    34f2:	10 00 20    	mov.w     #0x1, w0
    34f4:	a0 01 88    	mov.w     w0, 0x34
    34f6:	00 20 20    	mov.w     #0x200, w0
    34f8:	90 01 88    	mov.w     w0, 0x32
    34fa:	00 00 fa    	lnk       #0x0

000034fc <.LSM16>:
    timer_serviceInterrupt(&timer2);
    34fc:	60 3a 21    	mov.w     #0x13a6, w0
    34fe:	b2 ff 07    	rcall     0x3464 <_timer_serviceInterrupt>

00003500 <.LSM17>:
}
    3500:	00 80 fa    	ulnk      
    3502:	34 00 f9    	pop       0x34
    3504:	32 00 f9    	pop       0x32
    3506:	4f 03 be    	mov.d     [--w15], w6
    3508:	4f 02 be    	mov.d     [--w15], w4
    350a:	4f 01 be    	mov.d     [--w15], w2
    350c:	4f 00 be    	mov.d     [--w15], w0
    350e:	36 00 f9    	pop       0x36
    3510:	00 40 06    	retfie    

00003512 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    3512:	36 00 f8    	push      0x36
    3514:	80 9f be    	mov.d     w0, [w15++]
    3516:	82 9f be    	mov.d     w2, [w15++]
    3518:	84 9f be    	mov.d     w4, [w15++]
    351a:	86 9f be    	mov.d     w6, [w15++]
    351c:	32 00 f8    	push      0x32
    351e:	34 00 f8    	push      0x34
    3520:	10 00 20    	mov.w     #0x1, w0
    3522:	a0 01 88    	mov.w     w0, 0x34
    3524:	00 20 20    	mov.w     #0x200, w0
    3526:	90 01 88    	mov.w     w0, 0x32
    3528:	00 00 fa    	lnk       #0x0

0000352a <.LSM19>:
    timer_serviceInterrupt(&timer3);
    352a:	c0 3b 21    	mov.w     #0x13bc, w0
    352c:	9b ff 07    	rcall     0x3464 <_timer_serviceInterrupt>

0000352e <.LSM20>:
}
    352e:	00 80 fa    	ulnk      
    3530:	34 00 f9    	pop       0x34
    3532:	32 00 f9    	pop       0x32
    3534:	4f 03 be    	mov.d     [--w15], w6
    3536:	4f 02 be    	mov.d     [--w15], w4
    3538:	4f 01 be    	mov.d     [--w15], w2
    353a:	4f 00 be    	mov.d     [--w15], w0
    353c:	36 00 f9    	pop       0x36
    353e:	00 40 06    	retfie    

00003540 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    3540:	36 00 f8    	push      0x36
    3542:	80 9f be    	mov.d     w0, [w15++]
    3544:	82 9f be    	mov.d     w2, [w15++]
    3546:	84 9f be    	mov.d     w4, [w15++]
    3548:	86 9f be    	mov.d     w6, [w15++]
    354a:	32 00 f8    	push      0x32
    354c:	34 00 f8    	push      0x34
    354e:	10 00 20    	mov.w     #0x1, w0
    3550:	a0 01 88    	mov.w     w0, 0x34
    3552:	00 20 20    	mov.w     #0x200, w0
    3554:	90 01 88    	mov.w     w0, 0x32
    3556:	00 00 fa    	lnk       #0x0

00003558 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    3558:	20 3d 21    	mov.w     #0x13d2, w0
    355a:	84 ff 07    	rcall     0x3464 <_timer_serviceInterrupt>

0000355c <.LSM23>:
}
    355c:	00 80 fa    	ulnk      
    355e:	34 00 f9    	pop       0x34
    3560:	32 00 f9    	pop       0x32
    3562:	4f 03 be    	mov.d     [--w15], w6
    3564:	4f 02 be    	mov.d     [--w15], w4
    3566:	4f 01 be    	mov.d     [--w15], w2
    3568:	4f 00 be    	mov.d     [--w15], w0
    356a:	36 00 f9    	pop       0x36
    356c:	00 40 06    	retfie    

0000356e <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    356e:	36 00 f8    	push      0x36
    3570:	80 9f be    	mov.d     w0, [w15++]
    3572:	82 9f be    	mov.d     w2, [w15++]
    3574:	84 9f be    	mov.d     w4, [w15++]
    3576:	86 9f be    	mov.d     w6, [w15++]
    3578:	32 00 f8    	push      0x32
    357a:	34 00 f8    	push      0x34
    357c:	10 00 20    	mov.w     #0x1, w0
    357e:	a0 01 88    	mov.w     w0, 0x34
    3580:	00 20 20    	mov.w     #0x200, w0
    3582:	90 01 88    	mov.w     w0, 0x32
    3584:	00 00 fa    	lnk       #0x0

00003586 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    3586:	80 3e 21    	mov.w     #0x13e8, w0
    3588:	6d ff 07    	rcall     0x3464 <_timer_serviceInterrupt>

0000358a <.LSM26>:
}
    358a:	00 80 fa    	ulnk      
    358c:	34 00 f9    	pop       0x34
    358e:	32 00 f9    	pop       0x32
    3590:	4f 03 be    	mov.d     [--w15], w6
    3592:	4f 02 be    	mov.d     [--w15], w4
    3594:	4f 01 be    	mov.d     [--w15], w2
    3596:	4f 00 be    	mov.d     [--w15], w0
    3598:	36 00 f9    	pop       0x36
    359a:	00 40 06    	retfie    

0000359c <_init_timer>:

void init_timer(void) {
    359c:	00 00 fa    	lnk       #0x0

0000359e <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    359e:	b0 00 20    	mov.w     #0xb, w0
    35a0:	80 1f 78    	mov.w     w0, [w15++]
    35a2:	47 00 20    	mov.w     #0x4, w7
    35a4:	36 c0 b3    	mov.b     #0x3, w6
    35a6:	45 09 20    	mov.w     #0x94, w5
    35a8:	44 08 20    	mov.w     #0x84, w4
    35aa:	03 10 20    	mov.w     #0x100, w3
    35ac:	22 10 20    	mov.w     #0x102, w2
    35ae:	41 10 20    	mov.w     #0x104, w1
    35b0:	00 39 21    	mov.w     #0x1390, w0
    35b2:	33 00 07    	rcall     0x361a <_timer_init>
    35b4:	8f 87 e9    	dec2.w    w15, w15

000035b6 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    35b6:	c0 00 20    	mov.w     #0xc, w0
    35b8:	80 1f 78    	mov.w     w0, [w15++]
    35ba:	80 03 eb    	clr.w     w7
    35bc:	76 c0 b3    	mov.b     #0x7, w6
    35be:	45 09 20    	mov.w     #0x94, w5
    35c0:	44 08 20    	mov.w     #0x84, w4
    35c2:	63 10 20    	mov.w     #0x106, w3
    35c4:	c2 10 20    	mov.w     #0x10c, w2
    35c6:	01 11 20    	mov.w     #0x110, w1
    35c8:	60 3a 21    	mov.w     #0x13a6, w0
    35ca:	27 00 07    	rcall     0x361a <_timer_init>
    35cc:	8f 87 e9    	dec2.w    w15, w15

000035ce <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    35ce:	d0 00 20    	mov.w     #0xd, w0
    35d0:	80 1f 78    	mov.w     w0, [w15++]
    35d2:	17 00 20    	mov.w     #0x1, w7
    35d4:	86 c0 b3    	mov.b     #0x8, w6
    35d6:	45 09 20    	mov.w     #0x94, w5
    35d8:	44 08 20    	mov.w     #0x84, w4
    35da:	a3 10 20    	mov.w     #0x10a, w3
    35dc:	e2 10 20    	mov.w     #0x10e, w2
    35de:	21 11 20    	mov.w     #0x112, w1
    35e0:	c0 3b 21    	mov.w     #0x13bc, w0
    35e2:	1b 00 07    	rcall     0x361a <_timer_init>
    35e4:	8f 87 e9    	dec2.w    w15, w15

000035e6 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    35e6:	e0 00 20    	mov.w     #0xe, w0
    35e8:	80 1f 78    	mov.w     w0, [w15++]
    35ea:	27 00 20    	mov.w     #0x2, w7
    35ec:	b6 c0 b3    	mov.b     #0xb, w6
    35ee:	65 09 20    	mov.w     #0x96, w5
    35f0:	64 08 20    	mov.w     #0x86, w4
    35f2:	43 11 20    	mov.w     #0x114, w3
    35f4:	a2 11 20    	mov.w     #0x11a, w2
    35f6:	e1 11 20    	mov.w     #0x11e, w1
    35f8:	20 3d 21    	mov.w     #0x13d2, w0
    35fa:	0f 00 07    	rcall     0x361a <_timer_init>
    35fc:	8f 87 e9    	dec2.w    w15, w15

000035fe <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    35fe:	f0 00 20    	mov.w     #0xf, w0
    3600:	80 1f 78    	mov.w     w0, [w15++]
    3602:	37 00 20    	mov.w     #0x3, w7
    3604:	c6 c0 b3    	mov.b     #0xc, w6
    3606:	65 09 20    	mov.w     #0x96, w5
    3608:	64 08 20    	mov.w     #0x86, w4
    360a:	83 11 20    	mov.w     #0x118, w3
    360c:	c2 11 20    	mov.w     #0x11c, w2
    360e:	01 12 20    	mov.w     #0x120, w1
    3610:	80 3e 21    	mov.w     #0x13e8, w0
    3612:	03 00 07    	rcall     0x361a <_timer_init>
    3614:	8f 87 e9    	dec2.w    w15, w15

00003616 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    3616:	00 80 fa    	ulnk      
    3618:	00 00 06    	return    

0000361a <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    361a:	10 00 fa    	lnk       #0x10
    361c:	00 0f 78    	mov.w     w0, [w14]
    361e:	11 07 98    	mov.w     w1, [w14+2]
    3620:	22 07 98    	mov.w     w2, [w14+4]
    3622:	33 07 98    	mov.w     w3, [w14+6]
    3624:	44 07 98    	mov.w     w4, [w14+8]
    3626:	55 07 98    	mov.w     w5, [w14+10]
    3628:	46 4f 98    	mov.b     w6, [w14+12]
    362a:	77 07 98    	mov.w     w7, [w14+14]

0000362c <.LSM35>:
    self->TxCON = TxCON;
    362c:	1e 00 78    	mov.w     [w14], w0
    362e:	9e 00 90    	mov.w     [w14+2], w1
    3630:	01 08 78    	mov.w     w1, [w0]

00003632 <.LSM36>:
    self->PRx = PRx;
    3632:	1e 00 78    	mov.w     [w14], w0
    3634:	ae 00 90    	mov.w     [w14+4], w1
    3636:	11 00 98    	mov.w     w1, [w0+2]

00003638 <.LSM37>:
    self->TMRx = TMRx;
    3638:	1e 00 78    	mov.w     [w14], w0
    363a:	be 00 90    	mov.w     [w14+6], w1
    363c:	21 00 98    	mov.w     w1, [w0+4]

0000363e <.LSM38>:
    self->IFSy = IFSy;
    363e:	1e 00 78    	mov.w     [w14], w0
    3640:	ce 00 90    	mov.w     [w14+8], w1
    3642:	31 00 98    	mov.w     w1, [w0+6]

00003644 <.LSM39>:
    self->IECy = IECy;
    3644:	1e 00 78    	mov.w     [w14], w0
    3646:	de 00 90    	mov.w     [w14+10], w1
    3648:	41 00 98    	mov.w     w1, [w0+8]

0000364a <.LSM40>:
    self->flagbit = flagbit;
    364a:	1e 00 78    	mov.w     [w14], w0
    364c:	ce 48 90    	mov.b     [w14+12], w1
    364e:	21 48 98    	mov.b     w1, [w0+10]

00003650 <.LSM41>:
    self->octselnum = octselnum;
    3650:	1e 00 78    	mov.w     [w14], w0
    3652:	fe 00 90    	mov.w     [w14+14], w1
    3654:	61 00 98    	mov.w     w1, [w0+12]

00003656 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    3656:	1e 00 78    	mov.w     [w14], w0
    3658:	ce b8 97    	mov.w     [w14-8], w1
    365a:	71 00 98    	mov.w     w1, [w0+14]

0000365c <.LSM43>:
    self->aftercount = 0;
    365c:	1e 00 78    	mov.w     [w14], w0
    365e:	80 00 eb    	clr.w     w1
    3660:	01 08 98    	mov.w     w1, [w0+16]

00003662 <.LSM44>:
    self->every = NULL;
    3662:	1e 00 78    	mov.w     [w14], w0
    3664:	80 00 eb    	clr.w     w1
    3666:	11 08 98    	mov.w     w1, [w0+18]

00003668 <.LSM45>:
    self->after = NULL;
    3668:	1e 00 78    	mov.w     [w14], w0
    366a:	80 00 eb    	clr.w     w1
    366c:	21 08 98    	mov.w     w1, [w0+20]

0000366e <.LSM46>:
}
    366e:	00 80 fa    	ulnk      
    3670:	00 00 06    	return    

00003672 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    3672:	06 00 fa    	lnk       #0x6
    3674:	88 1f 78    	mov.w     w8, [w15++]
    3676:	00 0f 78    	mov.w     w0, [w14]
    3678:	12 07 98    	mov.w     w2, [w14+2]
    367a:	23 07 98    	mov.w     w3, [w14+4]

0000367c <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    367c:	18 c0 b3    	mov.b     #0x1, w8
    367e:	d2 7b 23    	mov.w     #0x37bd, w2
    3680:	63 f8 23    	mov.w     #0x3f86, w3
    3682:	1e 00 90    	mov.w     [w14+2], w0
    3684:	ae 00 90    	mov.w     [w14+4], w1
    3686:	96 ee 07    	rcall     0x13b4 <___gesf2>
    3688:	00 00 e0    	cp0.w     w0
    368a:	01 00 3c    	bra       GT, 0x368e <.L14>
    368c:	00 44 eb    	clr.b     w8

0000368e <.L14>:
    368e:	08 04 e0    	cp0.b     w8
    3690:	69 00 3a    	bra       NZ, 0x3764 <.L23>

00003692 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    3692:	18 c0 b3    	mov.b     #0x1, w8
    3694:	d2 7b 23    	mov.w     #0x37bd, w2
    3696:	63 e8 23    	mov.w     #0x3e86, w3
    3698:	1e 00 90    	mov.w     [w14+2], w0
    369a:	ae 00 90    	mov.w     [w14+4], w1
    369c:	8b ee 07    	rcall     0x13b4 <___gesf2>
    369e:	00 00 e0    	cp0.w     w0
    36a0:	01 00 3c    	bra       GT, 0x36a4 <.L17>
    36a2:	00 44 eb    	clr.b     w8

000036a4 <.L17>:
    36a4:	08 04 e0    	cp0.b     w8
    36a6:	12 00 32    	bra       Z, 0x36cc <.L18>

000036a8 <.LSM50>:
        timer_stop(self);
    36a8:	1e 00 78    	mov.w     [w14], w0
    36aa:	c4 00 07    	rcall     0x3834 <_timer_stop>

000036ac <.LSM51>:
        poke(self->TxCON, 0x0030);
    36ac:	1e 00 78    	mov.w     [w14], w0
    36ae:	10 00 78    	mov.w     [w0], w0
    36b0:	01 03 20    	mov.w     #0x30, w1
    36b2:	01 08 78    	mov.w     w1, [w0]

000036b4 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    36b4:	1e 00 78    	mov.w     [w14], w0
    36b6:	10 04 90    	mov.w     [w0+2], w8
    36b8:	02 40 22    	mov.w     #0x2400, w2
    36ba:	43 77 24    	mov.w     #0x4774, w3
    36bc:	1e 00 90    	mov.w     [w14+2], w0
    36be:	ae 00 90    	mov.w     [w14+4], w1
    36c0:	eb ee 07    	rcall     0x1498 <___mulsf3>
    36c2:	7a ee 07    	rcall     0x13b8 <___fixunssfsi>
    36c4:	00 00 78    	mov.w     w0, w0
    36c6:	00 00 e9    	dec.w     w0, w0
    36c8:	00 0c 78    	mov.w     w0, [w8]
    36ca:	4d 00 37    	bra       0x3766 <.L13>

000036cc <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    36cc:	18 c0 b3    	mov.b     #0x1, w8
    36ce:	d2 7b 23    	mov.w     #0x37bd, w2
    36d0:	63 d0 23    	mov.w     #0x3d06, w3
    36d2:	1e 00 90    	mov.w     [w14+2], w0
    36d4:	ae 00 90    	mov.w     [w14+4], w1
    36d6:	6e ee 07    	rcall     0x13b4 <___gesf2>
    36d8:	00 00 e0    	cp0.w     w0
    36da:	01 00 3c    	bra       GT, 0x36de <.L19>
    36dc:	00 44 eb    	clr.b     w8

000036de <.L19>:
    36de:	08 04 e0    	cp0.b     w8
    36e0:	12 00 32    	bra       Z, 0x3706 <.L20>

000036e2 <.LSM54>:
        timer_stop(self);
    36e2:	1e 00 78    	mov.w     [w14], w0
    36e4:	a7 00 07    	rcall     0x3834 <_timer_stop>

000036e6 <.LSM55>:
        poke(self->TxCON, 0x0020);
    36e6:	1e 00 78    	mov.w     [w14], w0
    36e8:	10 00 78    	mov.w     [w0], w0
    36ea:	01 02 20    	mov.w     #0x20, w1
    36ec:	01 08 78    	mov.w     w1, [w0]

000036ee <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    36ee:	1e 00 78    	mov.w     [w14], w0
    36f0:	10 04 90    	mov.w     [w0+2], w8
    36f2:	02 40 22    	mov.w     #0x2400, w2
    36f4:	43 87 24    	mov.w     #0x4874, w3
    36f6:	1e 00 90    	mov.w     [w14+2], w0
    36f8:	ae 00 90    	mov.w     [w14+4], w1
    36fa:	ce ee 07    	rcall     0x1498 <___mulsf3>
    36fc:	5d ee 07    	rcall     0x13b8 <___fixunssfsi>
    36fe:	00 00 78    	mov.w     w0, w0
    3700:	00 00 e9    	dec.w     w0, w0
    3702:	00 0c 78    	mov.w     w0, [w8]
    3704:	30 00 37    	bra       0x3766 <.L13>

00003706 <.L20>:
    } else if (period>(65536.*TCY)) {
    3706:	18 c0 b3    	mov.b     #0x1, w8
    3708:	d2 7b 23    	mov.w     #0x37bd, w2
    370a:	63 b8 23    	mov.w     #0x3b86, w3
    370c:	1e 00 90    	mov.w     [w14+2], w0
    370e:	ae 00 90    	mov.w     [w14+4], w1
    3710:	51 ee 07    	rcall     0x13b4 <___gesf2>
    3712:	00 00 e0    	cp0.w     w0
    3714:	01 00 3c    	bra       GT, 0x3718 <.L21>
    3716:	00 44 eb    	clr.b     w8

00003718 <.L21>:
    3718:	08 04 e0    	cp0.b     w8
    371a:	12 00 32    	bra       Z, 0x3740 <.L22>

0000371c <.LSM58>:
        timer_stop(self);
    371c:	1e 00 78    	mov.w     [w14], w0
    371e:	8a 00 07    	rcall     0x3834 <_timer_stop>

00003720 <.LSM59>:
        poke(self->TxCON, 0x0010);
    3720:	1e 00 78    	mov.w     [w14], w0
    3722:	10 00 78    	mov.w     [w0], w0
    3724:	01 01 20    	mov.w     #0x10, w1
    3726:	01 08 78    	mov.w     w1, [w0]

00003728 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3728:	1e 00 78    	mov.w     [w14], w0
    372a:	10 04 90    	mov.w     [w0+2], w8
    372c:	02 40 22    	mov.w     #0x2400, w2
    372e:	43 9f 24    	mov.w     #0x49f4, w3
    3730:	1e 00 90    	mov.w     [w14+2], w0
    3732:	ae 00 90    	mov.w     [w14+4], w1
    3734:	b1 ee 07    	rcall     0x1498 <___mulsf3>
    3736:	40 ee 07    	rcall     0x13b8 <___fixunssfsi>
    3738:	00 00 78    	mov.w     w0, w0
    373a:	00 00 e9    	dec.w     w0, w0
    373c:	00 0c 78    	mov.w     w0, [w8]
    373e:	13 00 37    	bra       0x3766 <.L13>

00003740 <.L22>:
    } else {
        timer_stop(self);
    3740:	1e 00 78    	mov.w     [w14], w0
    3742:	78 00 07    	rcall     0x3834 <_timer_stop>

00003744 <.LSM62>:
        poke(self->TxCON, 0x0000);
    3744:	1e 00 78    	mov.w     [w14], w0
    3746:	10 00 78    	mov.w     [w0], w0
    3748:	80 00 eb    	clr.w     w1
    374a:	01 08 78    	mov.w     w1, [w0]

0000374c <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    374c:	1e 00 78    	mov.w     [w14], w0
    374e:	10 04 90    	mov.w     [w0+2], w8
    3750:	02 40 22    	mov.w     #0x2400, w2
    3752:	43 b7 24    	mov.w     #0x4b74, w3
    3754:	1e 00 90    	mov.w     [w14+2], w0
    3756:	ae 00 90    	mov.w     [w14+4], w1
    3758:	9f ee 07    	rcall     0x1498 <___mulsf3>
    375a:	2e ee 07    	rcall     0x13b8 <___fixunssfsi>
    375c:	00 00 78    	mov.w     w0, w0
    375e:	00 00 e9    	dec.w     w0, w0
    3760:	00 0c 78    	mov.w     w0, [w8]
    3762:	01 00 37    	bra       0x3766 <.L13>

00003764 <.L23>:
    3764:	00 00 00    	nop       

00003766 <.L13>:
    }
}
    3766:	4f 04 78    	mov.w     [--w15], w8
    3768:	00 80 fa    	ulnk      
    376a:	00 00 06    	return    

0000376c <_timer_period>:

float timer_period(_TIMER *self) {
    376c:	04 00 fa    	lnk       #0x4
    376e:	88 9f be    	mov.d     w8, [w15++]
    3770:	10 07 98    	mov.w     w0, [w14+2]

00003772 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3772:	1e 00 90    	mov.w     [w14+2], w0
    3774:	10 00 78    	mov.w     [w0], w0
    3776:	90 00 78    	mov.w     [w0], w1
    3778:	00 03 20    	mov.w     #0x30, w0
    377a:	00 80 60    	and.w     w1, w0, w0
    377c:	44 00 de    	lsr.w     w0, #0x4, w0
    377e:	00 0f 78    	mov.w     w0, [w14]

00003780 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3780:	1e 00 78    	mov.w     [w14], w0
    3782:	c2 00 dd    	sl.w      w0, #0x2, w1
    3784:	40 48 21    	mov.w     #0x1484, w0
    3786:	00 80 40    	add.w     w1, w0, w0
    3788:	10 04 be    	mov.d     [w0], w8
    378a:	1e 00 90    	mov.w     [w14+2], w0
    378c:	10 00 90    	mov.w     [w0+2], w0
    378e:	10 00 78    	mov.w     [w0], w0
    3790:	80 00 eb    	clr.w     w1
    3792:	2d ee 07    	rcall     0x13ee <___floatunsisf>
    3794:	02 00 20    	mov.w     #0x0, w2
    3796:	03 f8 23    	mov.w     #0x3f80, w3
    3798:	6c ed 07    	rcall     0x1272 <___addsf3>
    379a:	00 01 be    	mov.d     w0, w2
    379c:	08 00 be    	mov.d     w8, w0
    379e:	7c ee 07    	rcall     0x1498 <___mulsf3>

000037a0 <.LSM69>:
}
    37a0:	4f 04 be    	mov.d     [--w15], w8
    37a2:	00 80 fa    	ulnk      
    37a4:	00 00 06    	return    

000037a6 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    37a6:	06 00 fa    	lnk       #0x6
    37a8:	00 0f 78    	mov.w     w0, [w14]
    37aa:	12 07 98    	mov.w     w2, [w14+2]
    37ac:	23 07 98    	mov.w     w3, [w14+4]

000037ae <.LSM71>:
    timer_setPeriod(self, 1./freq);
    37ae:	1e 01 90    	mov.w     [w14+2], w2
    37b0:	ae 01 90    	mov.w     [w14+4], w3
    37b2:	00 00 20    	mov.w     #0x0, w0
    37b4:	01 f8 23    	mov.w     #0x3f80, w1
    37b6:	ba ed 07    	rcall     0x132c <___divsf3>
    37b8:	00 01 be    	mov.d     w0, w2
    37ba:	1e 00 78    	mov.w     [w14], w0
    37bc:	5a ff 07    	rcall     0x3672 <_timer_setPeriod>

000037be <.LSM72>:
}
    37be:	00 80 fa    	ulnk      
    37c0:	00 00 06    	return    

000037c2 <_timer_freq>:

float timer_freq(_TIMER *self) {
    37c2:	02 00 fa    	lnk       #0x2
    37c4:	00 0f 78    	mov.w     w0, [w14]

000037c6 <.LSM74>:
    return 1./timer_period(self);
    37c6:	1e 00 78    	mov.w     [w14], w0
    37c8:	d1 ff 07    	rcall     0x376c <_timer_period>
    37ca:	00 01 be    	mov.d     w0, w2
    37cc:	00 00 20    	mov.w     #0x0, w0
    37ce:	01 f8 23    	mov.w     #0x3f80, w1
    37d0:	ad ed 07    	rcall     0x132c <___divsf3>

000037d2 <.LSM75>:
}
    37d2:	00 80 fa    	ulnk      
    37d4:	00 00 06    	return    

000037d6 <_timer_time>:

float timer_time(_TIMER *self) {
    37d6:	04 00 fa    	lnk       #0x4
    37d8:	88 9f be    	mov.d     w8, [w15++]
    37da:	10 07 98    	mov.w     w0, [w14+2]

000037dc <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    37dc:	1e 00 90    	mov.w     [w14+2], w0
    37de:	10 00 78    	mov.w     [w0], w0
    37e0:	90 00 78    	mov.w     [w0], w1
    37e2:	00 03 20    	mov.w     #0x30, w0
    37e4:	00 80 60    	and.w     w1, w0, w0
    37e6:	44 00 de    	lsr.w     w0, #0x4, w0
    37e8:	00 0f 78    	mov.w     w0, [w14]

000037ea <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    37ea:	1e 00 78    	mov.w     [w14], w0
    37ec:	c2 00 dd    	sl.w      w0, #0x2, w1
    37ee:	40 48 21    	mov.w     #0x1484, w0
    37f0:	00 80 40    	add.w     w1, w0, w0
    37f2:	10 04 be    	mov.d     [w0], w8
    37f4:	1e 00 90    	mov.w     [w14+2], w0
    37f6:	10 00 90    	mov.w     [w0+2], w0
    37f8:	10 00 78    	mov.w     [w0], w0
    37fa:	80 00 eb    	clr.w     w1
    37fc:	f8 ed 07    	rcall     0x13ee <___floatunsisf>
    37fe:	02 00 20    	mov.w     #0x0, w2
    3800:	03 f8 23    	mov.w     #0x3f80, w3
    3802:	37 ed 07    	rcall     0x1272 <___addsf3>
    3804:	00 01 be    	mov.d     w0, w2
    3806:	08 00 be    	mov.d     w8, w0
    3808:	47 ee 07    	rcall     0x1498 <___mulsf3>

0000380a <.LSM79>:
}
    380a:	4f 04 be    	mov.d     [--w15], w8
    380c:	00 80 fa    	ulnk      
    380e:	00 00 06    	return    

00003810 <_timer_start>:

void timer_start(_TIMER *self) {
    3810:	02 00 fa    	lnk       #0x2
    3812:	00 0f 78    	mov.w     w0, [w14]

00003814 <.LSM81>:
    timer_lower(self);
    3814:	1e 00 78    	mov.w     [w14], w0
    3816:	2b 00 07    	rcall     0x386e <_timer_lower>

00003818 <.LSM82>:
    poke(self->TMRx, 0);
    3818:	1e 00 78    	mov.w     [w14], w0
    381a:	20 00 90    	mov.w     [w0+4], w0
    381c:	80 00 eb    	clr.w     w1
    381e:	01 08 78    	mov.w     w1, [w0]

00003820 <.LSM83>:
    bitset(self->TxCON, 15);
    3820:	1e 00 78    	mov.w     [w14], w0
    3822:	10 00 78    	mov.w     [w0], w0
    3824:	9e 00 78    	mov.w     [w14], w1
    3826:	91 00 78    	mov.w     [w1], w1
    3828:	11 01 78    	mov.w     [w1], w2
    382a:	01 00 28    	mov.w     #0x8000, w1
    382c:	82 80 70    	ior.w     w1, w2, w1
    382e:	01 08 78    	mov.w     w1, [w0]

00003830 <.LSM84>:
}
    3830:	00 80 fa    	ulnk      
    3832:	00 00 06    	return    

00003834 <_timer_stop>:

void timer_stop(_TIMER *self) {
    3834:	02 00 fa    	lnk       #0x2
    3836:	00 0f 78    	mov.w     w0, [w14]

00003838 <.LSM86>:
    bitclear(self->TxCON, 15);
    3838:	1e 00 78    	mov.w     [w14], w0
    383a:	10 00 78    	mov.w     [w0], w0
    383c:	9e 00 78    	mov.w     [w14], w1
    383e:	91 00 78    	mov.w     [w1], w1
    3840:	11 01 78    	mov.w     [w1], w2
    3842:	f1 ff 27    	mov.w     #0x7fff, w1
    3844:	81 00 61    	and.w     w2, w1, w1
    3846:	01 08 78    	mov.w     w1, [w0]

00003848 <.LSM87>:
}
    3848:	00 80 fa    	ulnk      
    384a:	00 00 06    	return    

0000384c <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    384c:	02 00 fa    	lnk       #0x2
    384e:	00 0f 78    	mov.w     w0, [w14]

00003850 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    3850:	1e 00 78    	mov.w     [w14], w0
    3852:	30 00 90    	mov.w     [w0+6], w0
    3854:	90 00 78    	mov.w     [w0], w1
    3856:	1e 00 78    	mov.w     [w14], w0
    3858:	20 48 90    	mov.b     [w0+10], w0
    385a:	00 80 fb    	ze        w0, w0
    385c:	12 00 20    	mov.w     #0x1, w2
    385e:	00 10 dd    	sl.w      w2, w0, w0
    3860:	00 80 60    	and.w     w1, w0, w0
    3862:	00 f0 a7    	btsc.w    w0, #0xf
    3864:	00 00 ea    	neg.w     w0, w0
    3866:	00 00 ea    	neg.w     w0, w0
    3868:	4f 00 de    	lsr.w     w0, #0xf, w0

0000386a <.LSM90>:
}
    386a:	00 80 fa    	ulnk      
    386c:	00 00 06    	return    

0000386e <_timer_lower>:

void timer_lower(_TIMER *self) {
    386e:	02 00 fa    	lnk       #0x2
    3870:	00 0f 78    	mov.w     w0, [w14]

00003872 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3872:	1e 00 78    	mov.w     [w14], w0
    3874:	30 00 90    	mov.w     [w0+6], w0
    3876:	9e 00 78    	mov.w     [w14], w1
    3878:	b1 00 90    	mov.w     [w1+6], w1
    387a:	11 01 78    	mov.w     [w1], w2
    387c:	9e 00 78    	mov.w     [w14], w1
    387e:	a1 48 90    	mov.b     [w1+10], w1
    3880:	81 80 fb    	ze        w1, w1
    3882:	13 00 20    	mov.w     #0x1, w3
    3884:	81 18 dd    	sl.w      w3, w1, w1
    3886:	81 80 ea    	com.w     w1, w1
    3888:	81 00 61    	and.w     w2, w1, w1
    388a:	01 08 78    	mov.w     w1, [w0]

0000388c <.LSM93>:
}
    388c:	00 80 fa    	ulnk      
    388e:	00 00 06    	return    

00003890 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    3890:	02 00 fa    	lnk       #0x2
    3892:	00 0f 78    	mov.w     w0, [w14]

00003894 <.LSM95>:
    return peek(self->TMRx);
    3894:	1e 00 78    	mov.w     [w14], w0
    3896:	20 00 90    	mov.w     [w0+4], w0
    3898:	10 00 78    	mov.w     [w0], w0

0000389a <.LSM96>:
}
    389a:	00 80 fa    	ulnk      
    389c:	00 00 06    	return    

0000389e <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    389e:	02 00 fa    	lnk       #0x2
    38a0:	00 0f 78    	mov.w     w0, [w14]

000038a2 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    38a2:	1e 00 78    	mov.w     [w14], w0
    38a4:	40 00 90    	mov.w     [w0+8], w0
    38a6:	9e 00 78    	mov.w     [w14], w1
    38a8:	c1 00 90    	mov.w     [w1+8], w1
    38aa:	11 01 78    	mov.w     [w1], w2
    38ac:	9e 00 78    	mov.w     [w14], w1
    38ae:	a1 48 90    	mov.b     [w1+10], w1
    38b0:	81 80 fb    	ze        w1, w1
    38b2:	13 00 20    	mov.w     #0x1, w3
    38b4:	81 18 dd    	sl.w      w3, w1, w1
    38b6:	82 80 70    	ior.w     w1, w2, w1
    38b8:	01 08 78    	mov.w     w1, [w0]

000038ba <.LSM99>:
}
    38ba:	00 80 fa    	ulnk      
    38bc:	00 00 06    	return    

000038be <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    38be:	02 00 fa    	lnk       #0x2
    38c0:	00 0f 78    	mov.w     w0, [w14]

000038c2 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    38c2:	1e 00 78    	mov.w     [w14], w0
    38c4:	40 00 90    	mov.w     [w0+8], w0
    38c6:	9e 00 78    	mov.w     [w14], w1
    38c8:	c1 00 90    	mov.w     [w1+8], w1
    38ca:	11 01 78    	mov.w     [w1], w2
    38cc:	9e 00 78    	mov.w     [w14], w1
    38ce:	a1 48 90    	mov.b     [w1+10], w1
    38d0:	81 80 fb    	ze        w1, w1
    38d2:	13 00 20    	mov.w     #0x1, w3
    38d4:	81 18 dd    	sl.w      w3, w1, w1
    38d6:	81 80 ea    	com.w     w1, w1
    38d8:	81 00 61    	and.w     w2, w1, w1
    38da:	01 08 78    	mov.w     w1, [w0]

000038dc <.LSM102>:
}
    38dc:	00 80 fa    	ulnk      
    38de:	00 00 06    	return    

000038e0 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    38e0:	08 00 fa    	lnk       #0x8
    38e2:	00 0f 78    	mov.w     w0, [w14]
    38e4:	12 07 98    	mov.w     w2, [w14+2]
    38e6:	23 07 98    	mov.w     w3, [w14+4]
    38e8:	31 07 98    	mov.w     w1, [w14+6]

000038ea <.LSM104>:
    timer_disableInterrupt(self);
    38ea:	1e 00 78    	mov.w     [w14], w0
    38ec:	e8 ff 07    	rcall     0x38be <_timer_disableInterrupt>

000038ee <.LSM105>:
    timer_setPeriod(self, interval);
    38ee:	1e 01 90    	mov.w     [w14+2], w2
    38f0:	ae 01 90    	mov.w     [w14+4], w3
    38f2:	1e 00 78    	mov.w     [w14], w0
    38f4:	be fe 07    	rcall     0x3672 <_timer_setPeriod>

000038f6 <.LSM106>:
    self->aftercount = 0;
    38f6:	1e 00 78    	mov.w     [w14], w0
    38f8:	80 00 eb    	clr.w     w1
    38fa:	01 08 98    	mov.w     w1, [w0+16]

000038fc <.LSM107>:
    self->every = callback;
    38fc:	1e 00 78    	mov.w     [w14], w0
    38fe:	be 00 90    	mov.w     [w14+6], w1
    3900:	11 08 98    	mov.w     w1, [w0+18]

00003902 <.LSM108>:
    self->after = NULL;
    3902:	1e 00 78    	mov.w     [w14], w0
    3904:	80 00 eb    	clr.w     w1
    3906:	21 08 98    	mov.w     w1, [w0+20]

00003908 <.LSM109>:
    timer_enableInterrupt(self);
    3908:	1e 00 78    	mov.w     [w14], w0
    390a:	c9 ff 07    	rcall     0x389e <_timer_enableInterrupt>

0000390c <.LSM110>:
    timer_start(self);
    390c:	1e 00 78    	mov.w     [w14], w0
    390e:	80 ff 07    	rcall     0x3810 <_timer_start>

00003910 <.LSM111>:
}
    3910:	00 80 fa    	ulnk      
    3912:	00 00 06    	return    

00003914 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    3914:	0a 00 fa    	lnk       #0xa
    3916:	00 0f 78    	mov.w     w0, [w14]
    3918:	12 07 98    	mov.w     w2, [w14+2]
    391a:	23 07 98    	mov.w     w3, [w14+4]
    391c:	31 07 98    	mov.w     w1, [w14+6]
    391e:	44 07 98    	mov.w     w4, [w14+8]

00003920 <.LSM113>:
    timer_disableInterrupt(self);
    3920:	1e 00 78    	mov.w     [w14], w0
    3922:	cd ff 07    	rcall     0x38be <_timer_disableInterrupt>

00003924 <.LSM114>:
    timer_setPeriod(self, delay);
    3924:	1e 01 90    	mov.w     [w14+2], w2
    3926:	ae 01 90    	mov.w     [w14+4], w3
    3928:	1e 00 78    	mov.w     [w14], w0
    392a:	a3 fe 07    	rcall     0x3672 <_timer_setPeriod>

0000392c <.LSM115>:
    self->aftercount = num_times;
    392c:	1e 00 78    	mov.w     [w14], w0
    392e:	be 00 90    	mov.w     [w14+6], w1
    3930:	01 08 98    	mov.w     w1, [w0+16]

00003932 <.LSM116>:
    self->every = NULL;
    3932:	1e 00 78    	mov.w     [w14], w0
    3934:	80 00 eb    	clr.w     w1
    3936:	11 08 98    	mov.w     w1, [w0+18]

00003938 <.LSM117>:
    self->after = callback;
    3938:	1e 00 78    	mov.w     [w14], w0
    393a:	ce 00 90    	mov.w     [w14+8], w1
    393c:	21 08 98    	mov.w     w1, [w0+20]

0000393e <.LSM118>:
    timer_enableInterrupt(self);
    393e:	1e 00 78    	mov.w     [w14], w0
    3940:	ae ff 07    	rcall     0x389e <_timer_enableInterrupt>

00003942 <.LSM119>:
    timer_start(self);
    3942:	1e 00 78    	mov.w     [w14], w0
    3944:	65 ff 07    	rcall     0x3810 <_timer_start>

00003946 <.LSM120>:
}
    3946:	00 80 fa    	ulnk      
    3948:	00 00 06    	return    

0000394a <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    394a:	02 00 fa    	lnk       #0x2
    394c:	00 0f 78    	mov.w     w0, [w14]

0000394e <.LSM122>:
    timer_disableInterrupt(self);
    394e:	1e 00 78    	mov.w     [w14], w0
    3950:	b6 ff 07    	rcall     0x38be <_timer_disableInterrupt>

00003952 <.LSM123>:
    timer_lower(self);
    3952:	1e 00 78    	mov.w     [w14], w0
    3954:	8c ff 07    	rcall     0x386e <_timer_lower>

00003956 <.LSM124>:
    timer_stop(self);
    3956:	1e 00 78    	mov.w     [w14], w0
    3958:	6d ff 07    	rcall     0x3834 <_timer_stop>

0000395a <.LSM125>:
    self->aftercount = 0;
    395a:	1e 00 78    	mov.w     [w14], w0
    395c:	80 00 eb    	clr.w     w1
    395e:	01 08 98    	mov.w     w1, [w0+16]

00003960 <.LSM126>:
    self->every = NULL;
    3960:	1e 00 78    	mov.w     [w14], w0
    3962:	80 00 eb    	clr.w     w1
    3964:	11 08 98    	mov.w     w1, [w0+18]

00003966 <.LSM127>:
    self->after = NULL;
    3966:	1e 00 78    	mov.w     [w14], w0
    3968:	80 00 eb    	clr.w     w1
    396a:	21 08 98    	mov.w     w1, [w0+20]

0000396c <.LSM128>:
}
    396c:	00 80 fa    	ulnk      
    396e:	00 00 06    	return    

00003970 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    3970:	04 00 fa    	lnk       #0x4
    3972:	00 0f 78    	mov.w     w0, [w14]
    3974:	11 07 98    	mov.w     w1, [w14+2]

00003976 <.LSM1>:
    if (val)
    3976:	1e 00 90    	mov.w     [w14+2], w0
    3978:	00 00 e0    	cp0.w     w0
    397a:	0d 00 32    	bra       Z, 0x3996 <.L2>

0000397c <.LSM2>:
        bitset(self->port, self->bit);
    397c:	1e 00 78    	mov.w     [w14], w0
    397e:	10 00 78    	mov.w     [w0], w0
    3980:	9e 00 78    	mov.w     [w14], w1
    3982:	91 00 78    	mov.w     [w1], w1
    3984:	11 01 78    	mov.w     [w1], w2
    3986:	9e 00 78    	mov.w     [w14], w1
    3988:	e1 40 90    	mov.b     [w1+6], w1
    398a:	81 80 fb    	ze        w1, w1
    398c:	13 00 20    	mov.w     #0x1, w3
    398e:	81 18 dd    	sl.w      w3, w1, w1
    3990:	82 80 70    	ior.w     w1, w2, w1
    3992:	01 08 78    	mov.w     w1, [w0]
    3994:	0d 00 37    	bra       0x39b0 <.L1>

00003996 <.L2>:
    else
        bitclear(self->port, self->bit);
    3996:	1e 00 78    	mov.w     [w14], w0
    3998:	10 00 78    	mov.w     [w0], w0
    399a:	9e 00 78    	mov.w     [w14], w1
    399c:	91 00 78    	mov.w     [w1], w1
    399e:	11 01 78    	mov.w     [w1], w2
    39a0:	9e 00 78    	mov.w     [w14], w1
    39a2:	e1 40 90    	mov.b     [w1+6], w1
    39a4:	81 80 fb    	ze        w1, w1
    39a6:	13 00 20    	mov.w     #0x1, w3
    39a8:	81 18 dd    	sl.w      w3, w1, w1
    39aa:	81 80 ea    	com.w     w1, w1
    39ac:	81 00 61    	and.w     w2, w1, w1
    39ae:	01 08 78    	mov.w     w1, [w0]

000039b0 <.L1>:
}
    39b0:	00 80 fa    	ulnk      
    39b2:	00 00 06    	return    

000039b4 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    39b4:	02 00 fa    	lnk       #0x2
    39b6:	00 0f 78    	mov.w     w0, [w14]

000039b8 <.LSM6>:
    return bitread(self->port, self->bit);
    39b8:	1e 00 78    	mov.w     [w14], w0
    39ba:	10 00 78    	mov.w     [w0], w0
    39bc:	90 00 78    	mov.w     [w0], w1
    39be:	1e 00 78    	mov.w     [w14], w0
    39c0:	60 40 90    	mov.b     [w0+6], w0
    39c2:	00 80 fb    	ze        w0, w0
    39c4:	12 00 20    	mov.w     #0x1, w2
    39c6:	00 10 dd    	sl.w      w2, w0, w0
    39c8:	00 80 60    	and.w     w1, w0, w0
    39ca:	00 f0 a7    	btsc.w    w0, #0xf
    39cc:	00 00 ea    	neg.w     w0, w0
    39ce:	00 00 ea    	neg.w     w0, w0
    39d0:	4f 00 de    	lsr.w     w0, #0xf, w0

000039d2 <.LSM7>:
}
    39d2:	00 80 fa    	ulnk      
    39d4:	00 00 06    	return    

000039d6 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    39d6:	02 00 fa    	lnk       #0x2
    39d8:	00 0f 78    	mov.w     w0, [w14]

000039da <.LSM9>:
    AD1CHS = self->annum;
    39da:	1e 00 78    	mov.w     [w14], w0
    39dc:	40 00 90    	mov.w     [w0+8], w0
    39de:	40 19 88    	mov.w     w0, 0x328

000039e0 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    39e0:	20 23 a8    	bset.b    0x320, #0x1

000039e2 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    39e2:	00 00 00    	nop       

000039e4 <.L6>:
    39e4:	00 19 80    	mov.w     0x320, w0
    39e6:	61 00 60    	and.w     w0, #0x1, w0
    39e8:	00 00 e0    	cp0.w     w0
    39ea:	fc ff 32    	bra       Z, 0x39e4 <.L6>

000039ec <.LSM12>:
    return ADC1BUF0;
    39ec:	00 18 80    	mov.w     0x300, w0

000039ee <.LSM13>:
}
    39ee:	00 80 fa    	ulnk      
    39f0:	00 00 06    	return    

000039f2 <_init_pin>:

void init_pin(void) {
    39f2:	02 00 fa    	lnk       #0x2

000039f4 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    39f4:	40 6d 20    	mov.w     #0x6d4, w0
    39f6:	80 1f 78    	mov.w     w0, [w15++]
    39f8:	47 01 20    	mov.w     #0x14, w7
    39fa:	00 43 eb    	clr.b     w6
    39fc:	80 82 eb    	setm.w    w5
    39fe:	54 c0 b3    	mov.b     #0x5, w4
    3a00:	80 01 eb    	clr.w     w3
    3a02:	82 2d 20    	mov.w     #0x2d8, w2
    3a04:	a1 2d 20    	mov.w     #0x2da, w1
    3a06:	40 03 21    	mov.w     #0x1034, w0
    3a08:	08 01 07    	rcall     0x3c1a <_pin_init>
    3a0a:	8f 87 e9    	dec2.w    w15, w15

00003a0c <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a0c:	80 6d 20    	mov.w     #0x6d8, w0
    3a0e:	80 1f 78    	mov.w     w0, [w15++]
    3a10:	97 01 20    	mov.w     #0x19, w7
    3a12:	86 c0 b3    	mov.b     #0x8, w6
    3a14:	80 82 eb    	setm.w    w5
    3a16:	44 c0 b3    	mov.b     #0x4, w4
    3a18:	80 01 eb    	clr.w     w3
    3a1a:	82 2d 20    	mov.w     #0x2d8, w2
    3a1c:	a1 2d 20    	mov.w     #0x2da, w1
    3a1e:	a0 04 21    	mov.w     #0x104a, w0
    3a20:	fc 00 07    	rcall     0x3c1a <_pin_init>
    3a22:	8f 87 e9    	dec2.w    w15, w15

00003a24 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3a24:	a0 6c 20    	mov.w     #0x6ca, w0
    3a26:	80 1f 78    	mov.w     w0, [w15++]
    3a28:	a7 00 20    	mov.w     #0xa, w7
    3a2a:	00 43 eb    	clr.b     w6
    3a2c:	80 82 eb    	setm.w    w5
    3a2e:	44 c0 b3    	mov.b     #0x4, w4
    3a30:	80 01 eb    	clr.w     w3
    3a32:	82 2e 20    	mov.w     #0x2e8, w2
    3a34:	a1 2e 20    	mov.w     #0x2ea, w1
    3a36:	00 06 21    	mov.w     #0x1060, w0
    3a38:	f0 00 07    	rcall     0x3c1a <_pin_init>
    3a3a:	8f 87 e9    	dec2.w    w15, w15

00003a3c <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3a3c:	00 6d 20    	mov.w     #0x6d0, w0
    3a3e:	80 1f 78    	mov.w     w0, [w15++]
    3a40:	17 01 20    	mov.w     #0x11, w7
    3a42:	86 c0 b3    	mov.b     #0x8, w6
    3a44:	80 82 eb    	setm.w    w5
    3a46:	54 c0 b3    	mov.b     #0x5, w4
    3a48:	80 01 eb    	clr.w     w3
    3a4a:	82 2e 20    	mov.w     #0x2e8, w2
    3a4c:	a1 2e 20    	mov.w     #0x2ea, w1
    3a4e:	60 07 21    	mov.w     #0x1076, w0
    3a50:	e4 00 07    	rcall     0x3c1a <_pin_init>
    3a52:	8f 87 e9    	dec2.w    w15, w15

00003a54 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3a54:	c0 6d 20    	mov.w     #0x6dc, w0
    3a56:	80 1f 78    	mov.w     w0, [w15++]
    3a58:	d7 01 20    	mov.w     #0x1d, w7
    3a5a:	86 c0 b3    	mov.b     #0x8, w6
    3a5c:	f5 00 20    	mov.w     #0xf, w5
    3a5e:	f4 c0 b3    	mov.b     #0xf, w4
    3a60:	23 4e 20    	mov.w     #0x4e2, w3
    3a62:	82 2c 20    	mov.w     #0x2c8, w2
    3a64:	a1 2c 20    	mov.w     #0x2ca, w1
    3a66:	c0 08 21    	mov.w     #0x108c, w0
    3a68:	d8 00 07    	rcall     0x3c1a <_pin_init>
    3a6a:	8f 87 e9    	dec2.w    w15, w15

00003a6c <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3a6c:	00 6d 20    	mov.w     #0x6d0, w0
    3a6e:	80 1f 78    	mov.w     w0, [w15++]
    3a70:	07 01 20    	mov.w     #0x10, w7
    3a72:	00 43 eb    	clr.b     w6
    3a74:	80 82 eb    	setm.w    w5
    3a76:	34 c0 b3    	mov.b     #0x3, w4
    3a78:	80 01 eb    	clr.w     w3
    3a7a:	82 2e 20    	mov.w     #0x2e8, w2
    3a7c:	a1 2e 20    	mov.w     #0x2ea, w1
    3a7e:	20 0a 21    	mov.w     #0x10a2, w0
    3a80:	cc 00 07    	rcall     0x3c1a <_pin_init>
    3a82:	8f 87 e9    	dec2.w    w15, w15

00003a84 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a84:	20 6c 20    	mov.w     #0x6c2, w0
    3a86:	80 1f 78    	mov.w     w0, [w15++]
    3a88:	27 00 20    	mov.w     #0x2, w7
    3a8a:	00 43 eb    	clr.b     w6
    3a8c:	80 82 eb    	setm.w    w5
    3a8e:	84 c0 b3    	mov.b     #0x8, w4
    3a90:	80 01 eb    	clr.w     w3
    3a92:	82 2d 20    	mov.w     #0x2d8, w2
    3a94:	a1 2d 20    	mov.w     #0x2da, w1
    3a96:	80 0b 21    	mov.w     #0x10b8, w0
    3a98:	c0 00 07    	rcall     0x3c1a <_pin_init>
    3a9a:	8f 87 e9    	dec2.w    w15, w15

00003a9c <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a9c:	c0 6c 20    	mov.w     #0x6cc, w0
    3a9e:	80 1f 78    	mov.w     w0, [w15++]
    3aa0:	c7 00 20    	mov.w     #0xc, w7
    3aa2:	00 43 eb    	clr.b     w6
    3aa4:	80 82 eb    	setm.w    w5
    3aa6:	b4 c0 b3    	mov.b     #0xb, w4
    3aa8:	80 01 eb    	clr.w     w3
    3aaa:	82 2d 20    	mov.w     #0x2d8, w2
    3aac:	a1 2d 20    	mov.w     #0x2da, w1
    3aae:	e0 0c 21    	mov.w     #0x10ce, w0
    3ab0:	b4 00 07    	rcall     0x3c1a <_pin_init>
    3ab2:	8f 87 e9    	dec2.w    w15, w15

00003ab4 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3ab4:	40 6c 20    	mov.w     #0x6c4, w0
    3ab6:	80 1f 78    	mov.w     w0, [w15++]
    3ab8:	47 00 20    	mov.w     #0x4, w7
    3aba:	00 43 eb    	clr.b     w6
    3abc:	80 82 eb    	setm.w    w5
    3abe:	94 c0 b3    	mov.b     #0x9, w4
    3ac0:	80 01 eb    	clr.w     w3
    3ac2:	82 2d 20    	mov.w     #0x2d8, w2
    3ac4:	a1 2d 20    	mov.w     #0x2da, w1
    3ac6:	40 0e 21    	mov.w     #0x10e4, w0
    3ac8:	a8 00 07    	rcall     0x3c1a <_pin_init>
    3aca:	8f 87 e9    	dec2.w    w15, w15

00003acc <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3acc:	20 6c 20    	mov.w     #0x6c2, w0
    3ace:	80 1f 78    	mov.w     w0, [w15++]
    3ad0:	37 00 20    	mov.w     #0x3, w7
    3ad2:	86 c0 b3    	mov.b     #0x8, w6
    3ad4:	80 82 eb    	setm.w    w5
    3ad6:	a4 c0 b3    	mov.b     #0xa, w4
    3ad8:	80 01 eb    	clr.w     w3
    3ada:	82 2d 20    	mov.w     #0x2d8, w2
    3adc:	a1 2d 20    	mov.w     #0x2da, w1
    3ade:	a0 0f 21    	mov.w     #0x10fa, w0
    3ae0:	9c 00 07    	rcall     0x3c1a <_pin_init>
    3ae2:	8f 87 e9    	dec2.w    w15, w15

00003ae4 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3ae4:	a0 6c 20    	mov.w     #0x6ca, w0
    3ae6:	80 1f 78    	mov.w     w0, [w15++]
    3ae8:	b7 00 20    	mov.w     #0xb, w7
    3aea:	86 c0 b3    	mov.b     #0x8, w6
    3aec:	80 82 eb    	setm.w    w5
    3aee:	00 42 eb    	clr.b     w4
    3af0:	80 01 eb    	clr.w     w3
    3af2:	82 2d 20    	mov.w     #0x2d8, w2
    3af4:	a1 2d 20    	mov.w     #0x2da, w1
    3af6:	00 11 21    	mov.w     #0x1110, w0
    3af8:	90 00 07    	rcall     0x3c1a <_pin_init>
    3afa:	8f 87 e9    	dec2.w    w15, w15

00003afc <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3afc:	80 6d 20    	mov.w     #0x6d8, w0
    3afe:	80 1f 78    	mov.w     w0, [w15++]
    3b00:	87 01 20    	mov.w     #0x18, w7
    3b02:	00 43 eb    	clr.b     w6
    3b04:	80 82 eb    	setm.w    w5
    3b06:	14 c0 b3    	mov.b     #0x1, w4
    3b08:	80 01 eb    	clr.w     w3
    3b0a:	82 2d 20    	mov.w     #0x2d8, w2
    3b0c:	a1 2d 20    	mov.w     #0x2da, w1
    3b0e:	60 12 21    	mov.w     #0x1126, w0
    3b10:	84 00 07    	rcall     0x3c1a <_pin_init>
    3b12:	8f 87 e9    	dec2.w    w15, w15

00003b14 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3b14:	60 6d 20    	mov.w     #0x6d6, w0
    3b16:	80 1f 78    	mov.w     w0, [w15++]
    3b18:	77 01 20    	mov.w     #0x17, w7
    3b1a:	86 c0 b3    	mov.b     #0x8, w6
    3b1c:	80 82 eb    	setm.w    w5
    3b1e:	24 c0 b3    	mov.b     #0x2, w4
    3b20:	80 01 eb    	clr.w     w3
    3b22:	82 2d 20    	mov.w     #0x2d8, w2
    3b24:	a1 2d 20    	mov.w     #0x2da, w1
    3b26:	c0 13 21    	mov.w     #0x113c, w0
    3b28:	78 00 07    	rcall     0x3c1a <_pin_init>
    3b2a:	8f 87 e9    	dec2.w    w15, w15

00003b2c <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3b2c:	60 6d 20    	mov.w     #0x6d6, w0
    3b2e:	80 1f 78    	mov.w     w0, [w15++]
    3b30:	67 01 20    	mov.w     #0x16, w7
    3b32:	00 43 eb    	clr.b     w6
    3b34:	80 82 eb    	setm.w    w5
    3b36:	34 c0 b3    	mov.b     #0x3, w4
    3b38:	80 01 eb    	clr.w     w3
    3b3a:	82 2d 20    	mov.w     #0x2d8, w2
    3b3c:	a1 2d 20    	mov.w     #0x2da, w1
    3b3e:	20 15 21    	mov.w     #0x1152, w0
    3b40:	6c 00 07    	rcall     0x3c1a <_pin_init>
    3b42:	8f 87 e9    	dec2.w    w15, w15

00003b44 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3b44:	00 6c 20    	mov.w     #0x6c0, w0
    3b46:	80 1f 78    	mov.w     w0, [w15++]
    3b48:	80 03 eb    	clr.w     w7
    3b4a:	00 43 eb    	clr.b     w6
    3b4c:	80 02 eb    	clr.w     w5
    3b4e:	00 42 eb    	clr.b     w4
    3b50:	23 4e 20    	mov.w     #0x4e2, w3
    3b52:	82 2c 20    	mov.w     #0x2c8, w2
    3b54:	a1 2c 20    	mov.w     #0x2ca, w1
    3b56:	60 1d 21    	mov.w     #0x11d6, w0
    3b58:	60 00 07    	rcall     0x3c1a <_pin_init>
    3b5a:	8f 87 e9    	dec2.w    w15, w15

00003b5c <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3b5c:	00 6c 20    	mov.w     #0x6c0, w0
    3b5e:	80 1f 78    	mov.w     w0, [w15++]
    3b60:	17 00 20    	mov.w     #0x1, w7
    3b62:	86 c0 b3    	mov.b     #0x8, w6
    3b64:	15 00 20    	mov.w     #0x1, w5
    3b66:	14 c0 b3    	mov.b     #0x1, w4
    3b68:	23 4e 20    	mov.w     #0x4e2, w3
    3b6a:	82 2c 20    	mov.w     #0x2c8, w2
    3b6c:	a1 2c 20    	mov.w     #0x2ca, w1
    3b6e:	00 1c 21    	mov.w     #0x11c0, w0
    3b70:	54 00 07    	rcall     0x3c1a <_pin_init>
    3b72:	8f 87 e9    	dec2.w    w15, w15

00003b74 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3b74:	c0 6c 20    	mov.w     #0x6cc, w0
    3b76:	80 1f 78    	mov.w     w0, [w15++]
    3b78:	d7 00 20    	mov.w     #0xd, w7
    3b7a:	86 c0 b3    	mov.b     #0x8, w6
    3b7c:	25 00 20    	mov.w     #0x2, w5
    3b7e:	24 c0 b3    	mov.b     #0x2, w4
    3b80:	23 4e 20    	mov.w     #0x4e2, w3
    3b82:	82 2c 20    	mov.w     #0x2c8, w2
    3b84:	a1 2c 20    	mov.w     #0x2ca, w1
    3b86:	a0 1a 21    	mov.w     #0x11aa, w0
    3b88:	48 00 07    	rcall     0x3c1a <_pin_init>
    3b8a:	8f 87 e9    	dec2.w    w15, w15

00003b8c <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3b8c:	00 00 eb    	clr.w     w0
    3b8e:	80 1f 78    	mov.w     w0, [w15++]
    3b90:	80 83 eb    	setm.w    w7
    3b92:	00 43 eb    	clr.b     w6
    3b94:	35 00 20    	mov.w     #0x3, w5
    3b96:	34 c0 b3    	mov.b     #0x3, w4
    3b98:	23 4e 20    	mov.w     #0x4e2, w3
    3b9a:	82 2c 20    	mov.w     #0x2c8, w2
    3b9c:	a1 2c 20    	mov.w     #0x2ca, w1
    3b9e:	40 19 21    	mov.w     #0x1194, w0
    3ba0:	3c 00 07    	rcall     0x3c1a <_pin_init>
    3ba2:	8f 87 e9    	dec2.w    w15, w15

00003ba4 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3ba4:	c0 6d 20    	mov.w     #0x6dc, w0
    3ba6:	80 1f 78    	mov.w     w0, [w15++]
    3ba8:	c7 01 20    	mov.w     #0x1c, w7
    3baa:	00 43 eb    	clr.b     w6
    3bac:	45 00 20    	mov.w     #0x4, w5
    3bae:	44 c0 b3    	mov.b     #0x4, w4
    3bb0:	23 4e 20    	mov.w     #0x4e2, w3
    3bb2:	82 2c 20    	mov.w     #0x2c8, w2
    3bb4:	a1 2c 20    	mov.w     #0x2ca, w1
    3bb6:	e0 17 21    	mov.w     #0x117e, w0
    3bb8:	30 00 07    	rcall     0x3c1a <_pin_init>
    3bba:	8f 87 e9    	dec2.w    w15, w15

00003bbc <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3bbc:	20 6d 20    	mov.w     #0x6d2, w0
    3bbe:	80 1f 78    	mov.w     w0, [w15++]
    3bc0:	27 01 20    	mov.w     #0x12, w7
    3bc2:	00 43 eb    	clr.b     w6
    3bc4:	55 00 20    	mov.w     #0x5, w5
    3bc6:	54 c0 b3    	mov.b     #0x5, w4
    3bc8:	23 4e 20    	mov.w     #0x4e2, w3
    3bca:	82 2c 20    	mov.w     #0x2c8, w2
    3bcc:	a1 2c 20    	mov.w     #0x2ca, w1
    3bce:	80 16 21    	mov.w     #0x1168, w0
    3bd0:	24 00 07    	rcall     0x3c1a <_pin_init>
    3bd2:	8f 87 e9    	dec2.w    w15, w15

00003bd4 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    3bd4:	00 00 eb    	clr.w     w0
    3bd6:	00 0f 78    	mov.w     w0, [w14]
    3bd8:	07 00 37    	bra       0x3be8 <.L8>

00003bda <.L9>:
        pin_digitalIn(&D[i]);
    3bda:	1e 00 78    	mov.w     [w14], w0
    3bdc:	76 00 b9    	mul.su    w0, #0x16, w0
    3bde:	80 00 78    	mov.w     w0, w1
    3be0:	40 03 21    	mov.w     #0x1034, w0
    3be2:	00 80 40    	add.w     w1, w0, w0
    3be4:	46 00 07    	rcall     0x3c72 <_pin_digitalIn>

00003be6 <.LSM37>:
    3be6:	1e 0f e8    	inc.w     [w14], [w14]

00003be8 <.L8>:
    3be8:	1e 00 78    	mov.w     [w14], w0
    3bea:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    3bec:	f6 ff 36    	bra       LEU, 0x3bda <.L9>

00003bee <.LSM38>:
    for (i = 0; i<6; i++)
    3bee:	00 00 eb    	clr.w     w0
    3bf0:	00 0f 78    	mov.w     w0, [w14]
    3bf2:	07 00 37    	bra       0x3c02 <.L10>

00003bf4 <.L11>:
        pin_analogIn(&A[i]);
    3bf4:	1e 00 78    	mov.w     [w14], w0
    3bf6:	76 00 b9    	mul.su    w0, #0x16, w0
    3bf8:	80 00 78    	mov.w     w0, w1
    3bfa:	80 16 21    	mov.w     #0x1168, w0
    3bfc:	00 80 40    	add.w     w1, w0, w0
    3bfe:	95 00 07    	rcall     0x3d2a <_pin_analogIn>

00003c00 <.LSM40>:
    3c00:	1e 0f e8    	inc.w     [w14], [w14]

00003c02 <.L10>:
    3c02:	1e 00 78    	mov.w     [w14], w0
    3c04:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3c06:	f6 ff 36    	bra       LEU, 0x3bf4 <.L11>

00003c08 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    3c08:	00 2e 20    	mov.w     #0x2e0, w0
    3c0a:	00 19 88    	mov.w     w0, 0x320

00003c0c <.LSM42>:
    AD1CON2 = 0;
    3c0c:	22 23 ef    	clr.w     0x322

00003c0e <.LSM43>:
    AD1CON3 = 0x0C40;
    3c0e:	00 c4 20    	mov.w     #0xc40, w0
    3c10:	20 19 88    	mov.w     w0, 0x324

00003c12 <.LSM44>:
    AD1CHS = 0;
    3c12:	28 23 ef    	clr.w     0x328

00003c14 <.LSM45>:
    AD1CON1bits.ADON = 1;
    3c14:	21 e3 a8    	bset.b    0x321, #0x7

00003c16 <.LSM46>:
}
    3c16:	00 80 fa    	ulnk      
    3c18:	00 00 06    	return    

00003c1a <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    3c1a:	10 00 fa    	lnk       #0x10
    3c1c:	00 0f 78    	mov.w     w0, [w14]
    3c1e:	11 07 98    	mov.w     w1, [w14+2]
    3c20:	22 07 98    	mov.w     w2, [w14+4]
    3c22:	33 07 98    	mov.w     w3, [w14+6]
    3c24:	04 4f 98    	mov.b     w4, [w14+8]
    3c26:	55 07 98    	mov.w     w5, [w14+10]
    3c28:	46 4f 98    	mov.b     w6, [w14+12]
    3c2a:	77 07 98    	mov.w     w7, [w14+14]

00003c2c <.LSM48>:
    self->port = port;
    3c2c:	1e 00 78    	mov.w     [w14], w0
    3c2e:	9e 00 90    	mov.w     [w14+2], w1
    3c30:	01 08 78    	mov.w     w1, [w0]

00003c32 <.LSM49>:
    self->tris = tris;
    3c32:	1e 00 78    	mov.w     [w14], w0
    3c34:	ae 00 90    	mov.w     [w14+4], w1
    3c36:	11 00 98    	mov.w     w1, [w0+2]

00003c38 <.LSM50>:
    self->ans = ans;
    3c38:	1e 00 78    	mov.w     [w14], w0
    3c3a:	be 00 90    	mov.w     [w14+6], w1
    3c3c:	21 00 98    	mov.w     w1, [w0+4]

00003c3e <.LSM51>:
    self->bit = bit;
    3c3e:	1e 00 78    	mov.w     [w14], w0
    3c40:	8e 48 90    	mov.b     [w14+8], w1
    3c42:	61 40 98    	mov.b     w1, [w0+6]

00003c44 <.LSM52>:
    self->annum = annum;
    3c44:	1e 00 78    	mov.w     [w14], w0
    3c46:	de 00 90    	mov.w     [w14+10], w1
    3c48:	41 00 98    	mov.w     w1, [w0+8]

00003c4a <.LSM53>:
    self->rpshift = rpshift;
    3c4a:	1e 00 78    	mov.w     [w14], w0
    3c4c:	ce 48 90    	mov.b     [w14+12], w1
    3c4e:	21 48 98    	mov.b     w1, [w0+10]

00003c50 <.LSM54>:
    self->rpnum = rpnum;
    3c50:	fe 00 90    	mov.w     [w14+14], w1
    3c52:	1e 00 78    	mov.w     [w14], w0
    3c54:	61 00 98    	mov.w     w1, [w0+12]

00003c56 <.LSM55>:
    self->rpor = rpor;
    3c56:	1e 00 78    	mov.w     [w14], w0
    3c58:	ce b8 97    	mov.w     [w14-8], w1
    3c5a:	71 00 98    	mov.w     w1, [w0+14]

00003c5c <.LSM56>:
    self->owner = NULL;
    3c5c:	1e 00 78    	mov.w     [w14], w0
    3c5e:	80 00 eb    	clr.w     w1
    3c60:	01 08 98    	mov.w     w1, [w0+16]

00003c62 <.LSM57>:
    self->write = NULL;
    3c62:	1e 00 78    	mov.w     [w14], w0
    3c64:	80 00 eb    	clr.w     w1
    3c66:	11 08 98    	mov.w     w1, [w0+18]

00003c68 <.LSM58>:
    self->read = NULL;
    3c68:	1e 00 78    	mov.w     [w14], w0
    3c6a:	80 00 eb    	clr.w     w1
    3c6c:	21 08 98    	mov.w     w1, [w0+20]

00003c6e <.LSM59>:
}
    3c6e:	00 80 fa    	ulnk      
    3c70:	00 00 06    	return    

00003c72 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    3c72:	02 00 fa    	lnk       #0x2
    3c74:	00 0f 78    	mov.w     w0, [w14]

00003c76 <.LSM61>:
    if (self->ans)
    3c76:	1e 00 78    	mov.w     [w14], w0
    3c78:	20 00 90    	mov.w     [w0+4], w0
    3c7a:	00 00 e0    	cp0.w     w0
    3c7c:	0d 00 32    	bra       Z, 0x3c98 <.L14>

00003c7e <.LSM62>:
        bitclear(self->ans, self->bit);
    3c7e:	1e 00 78    	mov.w     [w14], w0
    3c80:	20 00 90    	mov.w     [w0+4], w0
    3c82:	9e 00 78    	mov.w     [w14], w1
    3c84:	a1 00 90    	mov.w     [w1+4], w1
    3c86:	11 01 78    	mov.w     [w1], w2
    3c88:	9e 00 78    	mov.w     [w14], w1
    3c8a:	e1 40 90    	mov.b     [w1+6], w1
    3c8c:	81 80 fb    	ze        w1, w1
    3c8e:	13 00 20    	mov.w     #0x1, w3
    3c90:	81 18 dd    	sl.w      w3, w1, w1
    3c92:	81 80 ea    	com.w     w1, w1
    3c94:	81 00 61    	and.w     w2, w1, w1
    3c96:	01 08 78    	mov.w     w1, [w0]

00003c98 <.L14>:
    bitset(self->tris, self->bit);
    3c98:	1e 00 78    	mov.w     [w14], w0
    3c9a:	10 00 90    	mov.w     [w0+2], w0
    3c9c:	9e 00 78    	mov.w     [w14], w1
    3c9e:	91 00 90    	mov.w     [w1+2], w1
    3ca0:	11 01 78    	mov.w     [w1], w2
    3ca2:	9e 00 78    	mov.w     [w14], w1
    3ca4:	e1 40 90    	mov.b     [w1+6], w1
    3ca6:	81 80 fb    	ze        w1, w1
    3ca8:	13 00 20    	mov.w     #0x1, w3
    3caa:	81 18 dd    	sl.w      w3, w1, w1
    3cac:	82 80 70    	ior.w     w1, w2, w1
    3cae:	01 08 78    	mov.w     w1, [w0]

00003cb0 <.LSM64>:
    self->write = NULL;
    3cb0:	1e 00 78    	mov.w     [w14], w0
    3cb2:	80 00 eb    	clr.w     w1
    3cb4:	11 08 98    	mov.w     w1, [w0+18]

00003cb6 <.LSM65>:
    self->read = __digitalRead;    
    3cb6:	1e 00 78    	mov.w     [w14], w0
    3cb8:	41 9b 23    	mov.w     #0x39b4, w1
    3cba:	21 08 98    	mov.w     w1, [w0+20]

00003cbc <.LSM66>:
}
    3cbc:	00 80 fa    	ulnk      
    3cbe:	00 00 06    	return    

00003cc0 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    3cc0:	02 00 fa    	lnk       #0x2
    3cc2:	00 0f 78    	mov.w     w0, [w14]

00003cc4 <.LSM68>:
    if (self->ans)
    3cc4:	1e 00 78    	mov.w     [w14], w0
    3cc6:	20 00 90    	mov.w     [w0+4], w0
    3cc8:	00 00 e0    	cp0.w     w0
    3cca:	0d 00 32    	bra       Z, 0x3ce6 <.L16>

00003ccc <.LSM69>:
        bitclear(self->ans, self->bit);
    3ccc:	1e 00 78    	mov.w     [w14], w0
    3cce:	20 00 90    	mov.w     [w0+4], w0
    3cd0:	9e 00 78    	mov.w     [w14], w1
    3cd2:	a1 00 90    	mov.w     [w1+4], w1
    3cd4:	11 01 78    	mov.w     [w1], w2
    3cd6:	9e 00 78    	mov.w     [w14], w1
    3cd8:	e1 40 90    	mov.b     [w1+6], w1
    3cda:	81 80 fb    	ze        w1, w1
    3cdc:	13 00 20    	mov.w     #0x1, w3
    3cde:	81 18 dd    	sl.w      w3, w1, w1
    3ce0:	81 80 ea    	com.w     w1, w1
    3ce2:	81 00 61    	and.w     w2, w1, w1
    3ce4:	01 08 78    	mov.w     w1, [w0]

00003ce6 <.L16>:
    bitclear(self->port, self->bit);
    3ce6:	1e 00 78    	mov.w     [w14], w0
    3ce8:	10 00 78    	mov.w     [w0], w0
    3cea:	9e 00 78    	mov.w     [w14], w1
    3cec:	91 00 78    	mov.w     [w1], w1
    3cee:	11 01 78    	mov.w     [w1], w2
    3cf0:	9e 00 78    	mov.w     [w14], w1
    3cf2:	e1 40 90    	mov.b     [w1+6], w1
    3cf4:	81 80 fb    	ze        w1, w1
    3cf6:	13 00 20    	mov.w     #0x1, w3
    3cf8:	81 18 dd    	sl.w      w3, w1, w1
    3cfa:	81 80 ea    	com.w     w1, w1
    3cfc:	81 00 61    	and.w     w2, w1, w1
    3cfe:	01 08 78    	mov.w     w1, [w0]

00003d00 <.LSM71>:
    bitclear(self->tris, self->bit);
    3d00:	1e 00 78    	mov.w     [w14], w0
    3d02:	10 00 90    	mov.w     [w0+2], w0
    3d04:	9e 00 78    	mov.w     [w14], w1
    3d06:	91 00 90    	mov.w     [w1+2], w1
    3d08:	11 01 78    	mov.w     [w1], w2
    3d0a:	9e 00 78    	mov.w     [w14], w1
    3d0c:	e1 40 90    	mov.b     [w1+6], w1
    3d0e:	81 80 fb    	ze        w1, w1
    3d10:	13 00 20    	mov.w     #0x1, w3
    3d12:	81 18 dd    	sl.w      w3, w1, w1
    3d14:	81 80 ea    	com.w     w1, w1
    3d16:	81 00 61    	and.w     w2, w1, w1
    3d18:	01 08 78    	mov.w     w1, [w0]

00003d1a <.LSM72>:
    self->write = __digitalWrite;
    3d1a:	1e 00 78    	mov.w     [w14], w0
    3d1c:	01 97 23    	mov.w     #0x3970, w1
    3d1e:	11 08 98    	mov.w     w1, [w0+18]

00003d20 <.LSM73>:
    self->read = __digitalRead;
    3d20:	1e 00 78    	mov.w     [w14], w0
    3d22:	41 9b 23    	mov.w     #0x39b4, w1
    3d24:	21 08 98    	mov.w     w1, [w0+20]

00003d26 <.LSM74>:
}
    3d26:	00 80 fa    	ulnk      
    3d28:	00 00 06    	return    

00003d2a <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    3d2a:	02 00 fa    	lnk       #0x2
    3d2c:	00 0f 78    	mov.w     w0, [w14]

00003d2e <.LSM76>:
    if (!(self->ans))
    3d2e:	1e 00 78    	mov.w     [w14], w0
    3d30:	20 00 90    	mov.w     [w0+4], w0
    3d32:	00 00 e0    	cp0.w     w0
    3d34:	1f 00 32    	bra       Z, 0x3d74 <.L20>

00003d36 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    3d36:	1e 00 78    	mov.w     [w14], w0
    3d38:	10 00 90    	mov.w     [w0+2], w0
    3d3a:	9e 00 78    	mov.w     [w14], w1
    3d3c:	91 00 90    	mov.w     [w1+2], w1
    3d3e:	11 01 78    	mov.w     [w1], w2
    3d40:	9e 00 78    	mov.w     [w14], w1
    3d42:	e1 40 90    	mov.b     [w1+6], w1
    3d44:	81 80 fb    	ze        w1, w1
    3d46:	13 00 20    	mov.w     #0x1, w3
    3d48:	81 18 dd    	sl.w      w3, w1, w1
    3d4a:	82 80 70    	ior.w     w1, w2, w1
    3d4c:	01 08 78    	mov.w     w1, [w0]

00003d4e <.LSM78>:
    bitset(self->ans, self->bit);
    3d4e:	1e 00 78    	mov.w     [w14], w0
    3d50:	20 00 90    	mov.w     [w0+4], w0
    3d52:	9e 00 78    	mov.w     [w14], w1
    3d54:	a1 00 90    	mov.w     [w1+4], w1
    3d56:	11 01 78    	mov.w     [w1], w2
    3d58:	9e 00 78    	mov.w     [w14], w1
    3d5a:	e1 40 90    	mov.b     [w1+6], w1
    3d5c:	81 80 fb    	ze        w1, w1
    3d5e:	13 00 20    	mov.w     #0x1, w3
    3d60:	81 18 dd    	sl.w      w3, w1, w1
    3d62:	82 80 70    	ior.w     w1, w2, w1
    3d64:	01 08 78    	mov.w     w1, [w0]

00003d66 <.LSM79>:
    self->write = NULL;
    3d66:	1e 00 78    	mov.w     [w14], w0
    3d68:	80 00 eb    	clr.w     w1
    3d6a:	11 08 98    	mov.w     w1, [w0+18]

00003d6c <.LSM80>:
    self->read = __analogRead;
    3d6c:	1e 00 78    	mov.w     [w14], w0
    3d6e:	61 9d 23    	mov.w     #0x39d6, w1
    3d70:	21 08 98    	mov.w     w1, [w0+20]
    3d72:	01 00 37    	bra       0x3d76 <.L17>

00003d74 <.L20>:
    3d74:	00 00 00    	nop       

00003d76 <.L17>:
}
    3d76:	00 80 fa    	ulnk      
    3d78:	00 00 06    	return    

00003d7a <_pin_set>:

void pin_set(_PIN *self) {
    3d7a:	02 00 fa    	lnk       #0x2
    3d7c:	00 0f 78    	mov.w     w0, [w14]

00003d7e <.LSM84>:
    if (self->write==__digitalWrite)
    3d7e:	1e 00 78    	mov.w     [w14], w0
    3d80:	90 08 90    	mov.w     [w0+18], w1
    3d82:	00 97 23    	mov.w     #0x3970, w0
    3d84:	80 8f 50    	sub.w     w1, w0, [w15]
    3d86:	0c 00 3a    	bra       NZ, 0x3da0 <.L21>

00003d88 <.LSM85>:
        bitset(self->port, self->bit);
    3d88:	1e 00 78    	mov.w     [w14], w0
    3d8a:	10 00 78    	mov.w     [w0], w0
    3d8c:	9e 00 78    	mov.w     [w14], w1
    3d8e:	91 00 78    	mov.w     [w1], w1
    3d90:	11 01 78    	mov.w     [w1], w2
    3d92:	9e 00 78    	mov.w     [w14], w1
    3d94:	e1 40 90    	mov.b     [w1+6], w1
    3d96:	81 80 fb    	ze        w1, w1
    3d98:	13 00 20    	mov.w     #0x1, w3
    3d9a:	81 18 dd    	sl.w      w3, w1, w1
    3d9c:	82 80 70    	ior.w     w1, w2, w1
    3d9e:	01 08 78    	mov.w     w1, [w0]

00003da0 <.L21>:
}
    3da0:	00 80 fa    	ulnk      
    3da2:	00 00 06    	return    

00003da4 <_pin_clear>:

void pin_clear(_PIN *self) {
    3da4:	02 00 fa    	lnk       #0x2
    3da6:	00 0f 78    	mov.w     w0, [w14]

00003da8 <.LSM88>:
    if (self->write==__digitalWrite)
    3da8:	1e 00 78    	mov.w     [w14], w0
    3daa:	90 08 90    	mov.w     [w0+18], w1
    3dac:	00 97 23    	mov.w     #0x3970, w0
    3dae:	80 8f 50    	sub.w     w1, w0, [w15]
    3db0:	0d 00 3a    	bra       NZ, 0x3dcc <.L23>

00003db2 <.LSM89>:
        bitclear(self->port, self->bit);
    3db2:	1e 00 78    	mov.w     [w14], w0
    3db4:	10 00 78    	mov.w     [w0], w0
    3db6:	9e 00 78    	mov.w     [w14], w1
    3db8:	91 00 78    	mov.w     [w1], w1
    3dba:	11 01 78    	mov.w     [w1], w2
    3dbc:	9e 00 78    	mov.w     [w14], w1
    3dbe:	e1 40 90    	mov.b     [w1+6], w1
    3dc0:	81 80 fb    	ze        w1, w1
    3dc2:	13 00 20    	mov.w     #0x1, w3
    3dc4:	81 18 dd    	sl.w      w3, w1, w1
    3dc6:	81 80 ea    	com.w     w1, w1
    3dc8:	81 00 61    	and.w     w2, w1, w1
    3dca:	01 08 78    	mov.w     w1, [w0]

00003dcc <.L23>:
}
    3dcc:	00 80 fa    	ulnk      
    3dce:	00 00 06    	return    

00003dd0 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    3dd0:	02 00 fa    	lnk       #0x2
    3dd2:	00 0f 78    	mov.w     w0, [w14]

00003dd4 <.LSM92>:
    if (self->write==__digitalWrite)
    3dd4:	1e 00 78    	mov.w     [w14], w0
    3dd6:	90 08 90    	mov.w     [w0+18], w1
    3dd8:	00 97 23    	mov.w     #0x3970, w0
    3dda:	80 8f 50    	sub.w     w1, w0, [w15]
    3ddc:	0c 00 3a    	bra       NZ, 0x3df6 <.L25>

00003dde <.LSM93>:
        bitflip(self->port, self->bit);
    3dde:	1e 00 78    	mov.w     [w14], w0
    3de0:	10 00 78    	mov.w     [w0], w0
    3de2:	9e 00 78    	mov.w     [w14], w1
    3de4:	91 00 78    	mov.w     [w1], w1
    3de6:	11 01 78    	mov.w     [w1], w2
    3de8:	9e 00 78    	mov.w     [w14], w1
    3dea:	e1 40 90    	mov.b     [w1+6], w1
    3dec:	81 80 fb    	ze        w1, w1
    3dee:	13 00 20    	mov.w     #0x1, w3
    3df0:	81 18 dd    	sl.w      w3, w1, w1
    3df2:	81 00 69    	xor.w     w2, w1, w1
    3df4:	01 08 78    	mov.w     w1, [w0]

00003df6 <.L25>:
}
    3df6:	00 80 fa    	ulnk      
    3df8:	00 00 06    	return    

00003dfa <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3dfa:	04 00 fa    	lnk       #0x4
    3dfc:	00 0f 78    	mov.w     w0, [w14]
    3dfe:	11 07 98    	mov.w     w1, [w14+2]

00003e00 <.LSM96>:
    if (self->write)
    3e00:	1e 00 78    	mov.w     [w14], w0
    3e02:	10 08 90    	mov.w     [w0+18], w0
    3e04:	00 00 e0    	cp0.w     w0
    3e06:	05 00 32    	bra       Z, 0x3e12 <.L27>

00003e08 <.LSM97>:
        self->write(self, val);
    3e08:	1e 00 78    	mov.w     [w14], w0
    3e0a:	10 09 90    	mov.w     [w0+18], w2
    3e0c:	9e 00 90    	mov.w     [w14+2], w1
    3e0e:	1e 00 78    	mov.w     [w14], w0
    3e10:	02 00 01    	call      w2

00003e12 <.L27>:
}
    3e12:	00 80 fa    	ulnk      
    3e14:	00 00 06    	return    

00003e16 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3e16:	02 00 fa    	lnk       #0x2
    3e18:	00 0f 78    	mov.w     w0, [w14]

00003e1a <.LSM100>:
    if (self->read)
    3e1a:	1e 00 78    	mov.w     [w14], w0
    3e1c:	20 08 90    	mov.w     [w0+20], w0
    3e1e:	00 00 e0    	cp0.w     w0
    3e20:	05 00 32    	bra       Z, 0x3e2c <.L30>

00003e22 <.LSM101>:
        return self->read(self);
    3e22:	1e 00 78    	mov.w     [w14], w0
    3e24:	a0 08 90    	mov.w     [w0+20], w1
    3e26:	1e 00 78    	mov.w     [w14], w0
    3e28:	01 00 01    	call      w1
    3e2a:	01 00 37    	bra       0x3e2e <.L31>

00003e2c <.L30>:
    else
        return 0xFFFF;
    3e2c:	00 80 eb    	setm.w    w0

00003e2e <.L31>:
}
    3e2e:	00 80 fa    	ulnk      
    3e30:	00 00 06    	return    

00003e32 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    3e32:	00 00 fa    	lnk       #0x0

00003e34 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e34:	74 c0 b3    	mov.b     #0x7, w4
    3e36:	63 4e 20    	mov.w     #0x4e6, w3
    3e38:	82 2d 20    	mov.w     #0x2d8, w2
    3e3a:	a1 2d 20    	mov.w     #0x2da, w1
    3e3c:	00 80 20    	mov.w     #0x800, w0
    3e3e:	20 00 07    	rcall     0x3e80 <_led_init>

00003e40 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3e40:	00 42 eb    	clr.b     w4
    3e42:	a3 4e 20    	mov.w     #0x4ea, w3
    3e44:	82 2e 20    	mov.w     #0x2e8, w2
    3e46:	a1 2e 20    	mov.w     #0x2ea, w1
    3e48:	80 80 20    	mov.w     #0x808, w0
    3e4a:	1a 00 07    	rcall     0x3e80 <_led_init>

00003e4c <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3e4c:	14 c0 b3    	mov.b     #0x1, w4
    3e4e:	a3 4e 20    	mov.w     #0x4ea, w3
    3e50:	82 2e 20    	mov.w     #0x2e8, w2
    3e52:	a1 2e 20    	mov.w     #0x2ea, w1
    3e54:	00 81 20    	mov.w     #0x810, w0
    3e56:	14 00 07    	rcall     0x3e80 <_led_init>

00003e58 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3e58:	f4 c0 b3    	mov.b     #0xf, w4
    3e5a:	43 4e 20    	mov.w     #0x4e4, w3
    3e5c:	02 2d 20    	mov.w     #0x2d0, w2
    3e5e:	21 2d 20    	mov.w     #0x2d2, w1
    3e60:	80 81 20    	mov.w     #0x818, w0
    3e62:	ad 00 07    	rcall     0x3fbe <_sw_init>

00003e64 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3e64:	c4 c0 b3    	mov.b     #0xc, w4
    3e66:	43 4e 20    	mov.w     #0x4e4, w3
    3e68:	02 2d 20    	mov.w     #0x2d0, w2
    3e6a:	21 2d 20    	mov.w     #0x2d2, w1
    3e6c:	00 82 20    	mov.w     #0x820, w0
    3e6e:	a7 00 07    	rcall     0x3fbe <_sw_init>

00003e70 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3e70:	c4 c0 b3    	mov.b     #0xc, w4
    3e72:	23 4e 20    	mov.w     #0x4e2, w3
    3e74:	82 2c 20    	mov.w     #0x2c8, w2
    3e76:	a1 2c 20    	mov.w     #0x2ca, w1
    3e78:	80 82 20    	mov.w     #0x828, w0
    3e7a:	a1 00 07    	rcall     0x3fbe <_sw_init>

00003e7c <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    3e7c:	00 80 fa    	ulnk      
    3e7e:	00 00 06    	return    

00003e80 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    3e80:	0a 00 fa    	lnk       #0xa
    3e82:	00 0f 78    	mov.w     w0, [w14]
    3e84:	11 07 98    	mov.w     w1, [w14+2]
    3e86:	22 07 98    	mov.w     w2, [w14+4]
    3e88:	33 07 98    	mov.w     w3, [w14+6]
    3e8a:	04 4f 98    	mov.b     w4, [w14+8]

00003e8c <.LSM9>:
    self->port = port;
    3e8c:	1e 00 78    	mov.w     [w14], w0
    3e8e:	9e 00 90    	mov.w     [w14+2], w1
    3e90:	01 08 78    	mov.w     w1, [w0]

00003e92 <.LSM10>:
    self->tris = tris;
    3e92:	1e 00 78    	mov.w     [w14], w0
    3e94:	ae 00 90    	mov.w     [w14+4], w1
    3e96:	11 00 98    	mov.w     w1, [w0+2]

00003e98 <.LSM11>:
    self->ans = ans;
    3e98:	1e 00 78    	mov.w     [w14], w0
    3e9a:	be 00 90    	mov.w     [w14+6], w1
    3e9c:	21 00 98    	mov.w     w1, [w0+4]

00003e9e <.LSM12>:
    self->bit = bit;
    3e9e:	1e 00 78    	mov.w     [w14], w0
    3ea0:	8e 48 90    	mov.b     [w14+8], w1
    3ea2:	61 40 98    	mov.b     w1, [w0+6]

00003ea4 <.LSM13>:

    bitclear(self->ans, self->bit);
    3ea4:	1e 00 78    	mov.w     [w14], w0
    3ea6:	20 00 90    	mov.w     [w0+4], w0
    3ea8:	9e 00 78    	mov.w     [w14], w1
    3eaa:	a1 00 90    	mov.w     [w1+4], w1
    3eac:	11 01 78    	mov.w     [w1], w2
    3eae:	9e 00 78    	mov.w     [w14], w1
    3eb0:	e1 40 90    	mov.b     [w1+6], w1
    3eb2:	81 80 fb    	ze        w1, w1
    3eb4:	13 00 20    	mov.w     #0x1, w3
    3eb6:	81 18 dd    	sl.w      w3, w1, w1
    3eb8:	81 80 ea    	com.w     w1, w1
    3eba:	81 00 61    	and.w     w2, w1, w1
    3ebc:	01 08 78    	mov.w     w1, [w0]

00003ebe <.LSM14>:
    bitclear(self->port, self->bit);
    3ebe:	1e 00 78    	mov.w     [w14], w0
    3ec0:	10 00 78    	mov.w     [w0], w0
    3ec2:	9e 00 78    	mov.w     [w14], w1
    3ec4:	91 00 78    	mov.w     [w1], w1
    3ec6:	11 01 78    	mov.w     [w1], w2
    3ec8:	9e 00 78    	mov.w     [w14], w1
    3eca:	e1 40 90    	mov.b     [w1+6], w1
    3ecc:	81 80 fb    	ze        w1, w1
    3ece:	13 00 20    	mov.w     #0x1, w3
    3ed0:	81 18 dd    	sl.w      w3, w1, w1
    3ed2:	81 80 ea    	com.w     w1, w1
    3ed4:	81 00 61    	and.w     w2, w1, w1
    3ed6:	01 08 78    	mov.w     w1, [w0]

00003ed8 <.LSM15>:
    bitclear(self->tris, self->bit);
    3ed8:	1e 00 78    	mov.w     [w14], w0
    3eda:	10 00 90    	mov.w     [w0+2], w0
    3edc:	9e 00 78    	mov.w     [w14], w1
    3ede:	91 00 90    	mov.w     [w1+2], w1
    3ee0:	11 01 78    	mov.w     [w1], w2
    3ee2:	9e 00 78    	mov.w     [w14], w1
    3ee4:	e1 40 90    	mov.b     [w1+6], w1
    3ee6:	81 80 fb    	ze        w1, w1
    3ee8:	13 00 20    	mov.w     #0x1, w3
    3eea:	81 18 dd    	sl.w      w3, w1, w1
    3eec:	81 80 ea    	com.w     w1, w1
    3eee:	81 00 61    	and.w     w2, w1, w1
    3ef0:	01 08 78    	mov.w     w1, [w0]

00003ef2 <.LSM16>:
}
    3ef2:	00 80 fa    	ulnk      
    3ef4:	00 00 06    	return    

00003ef6 <_led_on>:

void led_on(_LED *self) {
    3ef6:	02 00 fa    	lnk       #0x2
    3ef8:	00 0f 78    	mov.w     w0, [w14]

00003efa <.LSM18>:
    bitset(self->port, self->bit);
    3efa:	1e 00 78    	mov.w     [w14], w0
    3efc:	10 00 78    	mov.w     [w0], w0
    3efe:	9e 00 78    	mov.w     [w14], w1
    3f00:	91 00 78    	mov.w     [w1], w1
    3f02:	11 01 78    	mov.w     [w1], w2
    3f04:	9e 00 78    	mov.w     [w14], w1
    3f06:	e1 40 90    	mov.b     [w1+6], w1
    3f08:	81 80 fb    	ze        w1, w1
    3f0a:	13 00 20    	mov.w     #0x1, w3
    3f0c:	81 18 dd    	sl.w      w3, w1, w1
    3f0e:	82 80 70    	ior.w     w1, w2, w1
    3f10:	01 08 78    	mov.w     w1, [w0]

00003f12 <.LSM19>:
}
    3f12:	00 80 fa    	ulnk      
    3f14:	00 00 06    	return    

00003f16 <_led_off>:

void led_off(_LED *self) {
    3f16:	02 00 fa    	lnk       #0x2
    3f18:	00 0f 78    	mov.w     w0, [w14]

00003f1a <.LSM21>:
    bitclear(self->port, self->bit);
    3f1a:	1e 00 78    	mov.w     [w14], w0
    3f1c:	10 00 78    	mov.w     [w0], w0
    3f1e:	9e 00 78    	mov.w     [w14], w1
    3f20:	91 00 78    	mov.w     [w1], w1
    3f22:	11 01 78    	mov.w     [w1], w2
    3f24:	9e 00 78    	mov.w     [w14], w1
    3f26:	e1 40 90    	mov.b     [w1+6], w1
    3f28:	81 80 fb    	ze        w1, w1
    3f2a:	13 00 20    	mov.w     #0x1, w3
    3f2c:	81 18 dd    	sl.w      w3, w1, w1
    3f2e:	81 80 ea    	com.w     w1, w1
    3f30:	81 00 61    	and.w     w2, w1, w1
    3f32:	01 08 78    	mov.w     w1, [w0]

00003f34 <.LSM22>:
}
    3f34:	00 80 fa    	ulnk      
    3f36:	00 00 06    	return    

00003f38 <_led_toggle>:

void led_toggle(_LED *self) {
    3f38:	02 00 fa    	lnk       #0x2
    3f3a:	00 0f 78    	mov.w     w0, [w14]

00003f3c <.LSM24>:
    bitflip(self->port, self->bit);
    3f3c:	1e 00 78    	mov.w     [w14], w0
    3f3e:	10 00 78    	mov.w     [w0], w0
    3f40:	9e 00 78    	mov.w     [w14], w1
    3f42:	91 00 78    	mov.w     [w1], w1
    3f44:	11 01 78    	mov.w     [w1], w2
    3f46:	9e 00 78    	mov.w     [w14], w1
    3f48:	e1 40 90    	mov.b     [w1+6], w1
    3f4a:	81 80 fb    	ze        w1, w1
    3f4c:	13 00 20    	mov.w     #0x1, w3
    3f4e:	81 18 dd    	sl.w      w3, w1, w1
    3f50:	81 00 69    	xor.w     w2, w1, w1
    3f52:	01 08 78    	mov.w     w1, [w0]

00003f54 <.LSM25>:
}
    3f54:	00 80 fa    	ulnk      
    3f56:	00 00 06    	return    

00003f58 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    3f58:	04 00 fa    	lnk       #0x4
    3f5a:	00 0f 78    	mov.w     w0, [w14]
    3f5c:	11 07 98    	mov.w     w1, [w14+2]

00003f5e <.LSM27>:
    if (val)
    3f5e:	1e 00 90    	mov.w     [w14+2], w0
    3f60:	00 00 e0    	cp0.w     w0
    3f62:	0d 00 32    	bra       Z, 0x3f7e <.L7>

00003f64 <.LSM28>:
        bitset(self->port, self->bit);
    3f64:	1e 00 78    	mov.w     [w14], w0
    3f66:	10 00 78    	mov.w     [w0], w0
    3f68:	9e 00 78    	mov.w     [w14], w1
    3f6a:	91 00 78    	mov.w     [w1], w1
    3f6c:	11 01 78    	mov.w     [w1], w2
    3f6e:	9e 00 78    	mov.w     [w14], w1
    3f70:	e1 40 90    	mov.b     [w1+6], w1
    3f72:	81 80 fb    	ze        w1, w1
    3f74:	13 00 20    	mov.w     #0x1, w3
    3f76:	81 18 dd    	sl.w      w3, w1, w1
    3f78:	82 80 70    	ior.w     w1, w2, w1
    3f7a:	01 08 78    	mov.w     w1, [w0]
    3f7c:	0d 00 37    	bra       0x3f98 <.L6>

00003f7e <.L7>:
    else
        bitclear(self->port, self->bit);
    3f7e:	1e 00 78    	mov.w     [w14], w0
    3f80:	10 00 78    	mov.w     [w0], w0
    3f82:	9e 00 78    	mov.w     [w14], w1
    3f84:	91 00 78    	mov.w     [w1], w1
    3f86:	11 01 78    	mov.w     [w1], w2
    3f88:	9e 00 78    	mov.w     [w14], w1
    3f8a:	e1 40 90    	mov.b     [w1+6], w1
    3f8c:	81 80 fb    	ze        w1, w1
    3f8e:	13 00 20    	mov.w     #0x1, w3
    3f90:	81 18 dd    	sl.w      w3, w1, w1
    3f92:	81 80 ea    	com.w     w1, w1
    3f94:	81 00 61    	and.w     w2, w1, w1
    3f96:	01 08 78    	mov.w     w1, [w0]

00003f98 <.L6>:
}
    3f98:	00 80 fa    	ulnk      
    3f9a:	00 00 06    	return    

00003f9c <_led_read>:

uint16_t led_read(_LED *self) {
    3f9c:	02 00 fa    	lnk       #0x2
    3f9e:	00 0f 78    	mov.w     w0, [w14]

00003fa0 <.LSM32>:
    return bitread(self->port, self->bit);
    3fa0:	1e 00 78    	mov.w     [w14], w0
    3fa2:	10 00 78    	mov.w     [w0], w0
    3fa4:	90 00 78    	mov.w     [w0], w1
    3fa6:	1e 00 78    	mov.w     [w14], w0
    3fa8:	60 40 90    	mov.b     [w0+6], w0
    3faa:	00 80 fb    	ze        w0, w0
    3fac:	12 00 20    	mov.w     #0x1, w2
    3fae:	00 10 dd    	sl.w      w2, w0, w0
    3fb0:	00 80 60    	and.w     w1, w0, w0
    3fb2:	00 f0 a7    	btsc.w    w0, #0xf
    3fb4:	00 00 ea    	neg.w     w0, w0
    3fb6:	00 00 ea    	neg.w     w0, w0
    3fb8:	4f 00 de    	lsr.w     w0, #0xf, w0

00003fba <.LSM33>:
}
    3fba:	00 80 fa    	ulnk      
    3fbc:	00 00 06    	return    

00003fbe <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    3fbe:	0a 00 fa    	lnk       #0xa
    3fc0:	00 0f 78    	mov.w     w0, [w14]
    3fc2:	11 07 98    	mov.w     w1, [w14+2]
    3fc4:	22 07 98    	mov.w     w2, [w14+4]
    3fc6:	33 07 98    	mov.w     w3, [w14+6]
    3fc8:	04 4f 98    	mov.b     w4, [w14+8]

00003fca <.LSM35>:
    self->port = port;
    3fca:	1e 00 78    	mov.w     [w14], w0
    3fcc:	9e 00 90    	mov.w     [w14+2], w1
    3fce:	01 08 78    	mov.w     w1, [w0]

00003fd0 <.LSM36>:
    self->tris = tris;
    3fd0:	1e 00 78    	mov.w     [w14], w0
    3fd2:	ae 00 90    	mov.w     [w14+4], w1
    3fd4:	11 00 98    	mov.w     w1, [w0+2]

00003fd6 <.LSM37>:
    self->ans = ans;
    3fd6:	1e 00 78    	mov.w     [w14], w0
    3fd8:	be 00 90    	mov.w     [w14+6], w1
    3fda:	21 00 98    	mov.w     w1, [w0+4]

00003fdc <.LSM38>:
    self->bit = bit;
    3fdc:	1e 00 78    	mov.w     [w14], w0
    3fde:	8e 48 90    	mov.b     [w14+8], w1
    3fe0:	61 40 98    	mov.b     w1, [w0+6]

00003fe2 <.LSM39>:

    bitclear(self->ans, self->bit);
    3fe2:	1e 00 78    	mov.w     [w14], w0
    3fe4:	20 00 90    	mov.w     [w0+4], w0
    3fe6:	9e 00 78    	mov.w     [w14], w1
    3fe8:	a1 00 90    	mov.w     [w1+4], w1
    3fea:	11 01 78    	mov.w     [w1], w2
    3fec:	9e 00 78    	mov.w     [w14], w1
    3fee:	e1 40 90    	mov.b     [w1+6], w1
    3ff0:	81 80 fb    	ze        w1, w1
    3ff2:	13 00 20    	mov.w     #0x1, w3
    3ff4:	81 18 dd    	sl.w      w3, w1, w1
    3ff6:	81 80 ea    	com.w     w1, w1
    3ff8:	81 00 61    	and.w     w2, w1, w1
    3ffa:	01 08 78    	mov.w     w1, [w0]

00003ffc <.LSM40>:
    bitset(self->tris, self->bit);
    3ffc:	1e 00 78    	mov.w     [w14], w0
    3ffe:	10 00 90    	mov.w     [w0+2], w0
    4000:	9e 00 78    	mov.w     [w14], w1
    4002:	91 00 90    	mov.w     [w1+2], w1
    4004:	11 01 78    	mov.w     [w1], w2
    4006:	9e 00 78    	mov.w     [w14], w1
    4008:	e1 40 90    	mov.b     [w1+6], w1
    400a:	81 80 fb    	ze        w1, w1
    400c:	13 00 20    	mov.w     #0x1, w3
    400e:	81 18 dd    	sl.w      w3, w1, w1
    4010:	82 80 70    	ior.w     w1, w2, w1
    4012:	01 08 78    	mov.w     w1, [w0]

00004014 <.LSM41>:
}
    4014:	00 80 fa    	ulnk      
    4016:	00 00 06    	return    

00004018 <_sw_read>:

uint16_t sw_read(_SW *self) {
    4018:	02 00 fa    	lnk       #0x2
    401a:	00 0f 78    	mov.w     w0, [w14]

0000401c <.LSM43>:
    return bitread(self->port, self->bit);
    401c:	1e 00 78    	mov.w     [w14], w0
    401e:	10 00 78    	mov.w     [w0], w0
    4020:	90 00 78    	mov.w     [w0], w1
    4022:	1e 00 78    	mov.w     [w14], w0
    4024:	60 40 90    	mov.b     [w0+6], w0
    4026:	00 80 fb    	ze        w0, w0
    4028:	12 00 20    	mov.w     #0x1, w2
    402a:	00 10 dd    	sl.w      w2, w0, w0
    402c:	00 80 60    	and.w     w1, w0, w0
    402e:	00 f0 a7    	btsc.w    w0, #0xf
    4030:	00 00 ea    	neg.w     w0, w0
    4032:	00 00 ea    	neg.w     w0, w0
    4034:	4f 00 de    	lsr.w     w0, #0xf, w0

00004036 <.LSM44>:
}
    4036:	00 80 fa    	ulnk      
    4038:	00 00 06    	return    

0000403a <_print_buffer>:
#include <stdlib.h>

uint8_t MC_TXBUF[1024], MC_RXBUF[1024];

void print_buffer(uint8_t *buffer, uint16_t size) {
    403a:	0a 00 fa    	lnk       #0xa
    403c:	30 07 98    	mov.w     w0, [w14+6]
    403e:	41 07 98    	mov.w     w1, [w14+8]

00004040 <.LSM1>:
    int i;
    uint8_t* buf_str = (uint8_t*) malloc (2*size + 1);
    4040:	4e 00 90    	mov.w     [w14+8], w0
    4042:	00 00 40    	add.w     w0, w0, w0
    4044:	00 00 e8    	inc.w     w0, w0
    4046:	d9 ea 07    	rcall     0x15fa <_malloc>
    4048:	20 07 98    	mov.w     w0, [w14+4]

0000404a <.LSM2>:
    uint8_t* buf_ptr = buf_str;
    404a:	ae 00 90    	mov.w     [w14+4], w1
    404c:	11 07 98    	mov.w     w1, [w14+2]

0000404e <.LSM3>:
    for (i = 0; i < size; i++)
    404e:	00 00 eb    	clr.w     w0
    4050:	00 0f 78    	mov.w     w0, [w14]
    4052:	0f 00 37    	bra       0x4072 <.L2>

00004054 <.L3>:
    {
        buf_ptr += sprintf(buf_ptr, "%02X", buffer[i]);
    4054:	1e 00 78    	mov.w     [w14], w0
    4056:	be 00 90    	mov.w     [w14+6], w1
    4058:	00 80 40    	add.w     w1, w0, w0
    405a:	10 40 78    	mov.b     [w0], w0
    405c:	80 80 fb    	ze        w0, w1
    405e:	1e 00 90    	mov.w     [w14+2], w0
    4060:	81 1f 78    	mov.w     w1, [w15++]
    4062:	a1 6e 2a    	mov.w     #0xa6ea, w1
    4064:	81 1f 78    	mov.w     w1, [w15++]
    4066:	81 ec 07    	rcall     0x196a <__sprintf_cdnopuxX>
    4068:	e4 87 57    	sub.w     w15, #0x4, w15
    406a:	9e 00 90    	mov.w     [w14+2], w1
    406c:	00 80 40    	add.w     w1, w0, w0
    406e:	10 07 98    	mov.w     w0, [w14+2]

00004070 <.LSM5>:
    4070:	1e 0f e8    	inc.w     [w14], [w14]

00004072 <.L2>:
    4072:	9e 00 78    	mov.w     [w14], w1
    4074:	4e 00 90    	mov.w     [w14+8], w0
    4076:	80 8f 50    	sub.w     w1, w0, [w15]
    4078:	ed ff 39    	bra       NC, 0x4054 <.L3>

0000407a <.LSM6>:
    }
    sprintf(buf_ptr,"\n");
    407a:	1e 00 90    	mov.w     [w14+2], w0
    407c:	22 00 20    	mov.w     #0x2, w2
    407e:	f1 6e 2a    	mov.w     #0xa6ef, w1
    4080:	e6 ea 07    	rcall     0x164e <_memcpy>

00004082 <.LSM7>:
    *(buf_ptr + 1) = '\0';
    4082:	1e 00 90    	mov.w     [w14+2], w0
    4084:	00 00 e8    	inc.w     w0, w0
    4086:	80 40 eb    	clr.b     w1
    4088:	01 48 78    	mov.b     w1, [w0]

0000408a <.LSM8>:
    printf("%s\n", buf_str);
    408a:	2e 00 90    	mov.w     [w14+4], w0
    408c:	e7 ea 07    	rcall     0x165c <_puts>

0000408e <.LSM9>:
}
    408e:	00 80 fa    	ulnk      
    4090:	00 00 06    	return    

00004092 <_check_for_string>:

char check_for_string(uint8_t *str) {
    4092:	06 00 fa    	lnk       #0x6
    4094:	20 07 98    	mov.w     w0, [w14+4]

00004096 <.LSM11>:
    /*
    If the input string buffer is "test", turn on led1 and return 1. Else 
    turn off led1 and return 0.
    */
    int rc = strcmp(str, "test");
    4096:	11 6f 2a    	mov.w     #0xa6f1, w1
    4098:	2e 00 90    	mov.w     [w14+4], w0
    409a:	eb ea 07    	rcall     0x1672 <_strcmp>
    409c:	10 07 98    	mov.w     w0, [w14+2]

0000409e <.LSM12>:
    char out;
    if (rc == 0) {
    409e:	1e 00 90    	mov.w     [w14+2], w0
    40a0:	00 00 e0    	cp0.w     w0
    40a2:	05 00 3a    	bra       NZ, 0x40ae <.L5>

000040a4 <.LSM13>:
        led_on(&led1);
    40a4:	00 80 20    	mov.w     #0x800, w0
    40a6:	27 ff 07    	rcall     0x3ef6 <_led_on>

000040a8 <.LSM14>:
        out = 1;
    40a8:	10 c0 b3    	mov.b     #0x1, w0
    40aa:	00 4f 78    	mov.b     w0, [w14]
    40ac:	04 00 37    	bra       0x40b6 <.L6>

000040ae <.L5>:
    } else {
        led_off(&led1);
    40ae:	00 80 20    	mov.w     #0x800, w0
    40b0:	32 ff 07    	rcall     0x3f16 <_led_off>

000040b2 <.LSM16>:
        out = 0;
    40b2:	00 40 eb    	clr.b     w0
    40b4:	00 4f 78    	mov.b     w0, [w14]

000040b6 <.L6>:
    }
    return out;
    40b6:	1e 40 78    	mov.b     [w14], w0

000040b8 <.LSM18>:
}
    40b8:	00 80 fa    	ulnk      
    40ba:	00 00 06    	return    

000040bc <_convert_msg>:

uint64_t convert_msg(uint8_t *str) {
    40bc:	0a 00 fa    	lnk       #0xa
    40be:	40 07 98    	mov.w     w0, [w14+8]

000040c0 <.LSM20>:
    /* 
    Interprets string buffer which represents a hexadecimal number and stores 
    the encoded value as a uint64_t
    */

    // sprintf(a, "%08x%08x\r\n", 0xffff, 40);
    // printf("%d\r\n", a[0]);
    // printf("%s", a);
    uint64_t decoded_msg = (uint64_t)strtoll(str, NULL, 16);
    40c0:	02 01 20    	mov.w     #0x10, w2
    40c2:	80 00 eb    	clr.w     w1
    40c4:	4e 00 90    	mov.w     [w14+8], w0
    40c6:	e5 ea 07    	rcall     0x1692 <_strtoll>
    40c8:	cf 80 de    	asr.w     w0, #0xf, w1
    40ca:	61 09 b9    	mul.su    w1, #0x1, w2
    40cc:	00 9f be    	mov.d     w0, [w14++]
    40ce:	02 97 be    	mov.d     w2, [w14--]

000040d0 <.LSM21>:
    return decoded_msg;
    40d0:	3e 00 be    	mov.d     [w14++], w0
    40d2:	2e 01 be    	mov.d     [w14--], w2

000040d4 <.LSM22>:
}
    40d4:	00 80 fa    	ulnk      
    40d6:	00 00 06    	return    

000040d8 <_parse_addr>:

char parse_addr(uint64_t *msg) {
    40d8:	04 00 fa    	lnk       #0x4
    40da:	10 07 98    	mov.w     w0, [w14+2]

000040dc <.LSM24>:
    /*
    Parses the received message and returns a char representing whether this 
    information is addressed to this device.
    */
    // uint8_t msg_addr = (uint8_t)(*msg & ((uint64_t)(0xFF) << 56));
    uint8_t msg_addr = (uint8_t)(*msg & ((uint64_t)(0xFF)));
    40dc:	1e 00 90    	mov.w     [w14+2], w0
    40de:	50 01 be    	mov.d     [++w0], w2
    40e0:	40 00 be    	mov.d     [--w0], w0
    40e2:	10 47 98    	mov.b     w0, [w14+1]

000040e4 <.LSM25>:
    char is_recipient = 0;
    40e4:	00 40 eb    	clr.b     w0
    40e6:	00 4f 78    	mov.b     w0, [w14]

000040e8 <.LSM26>:
    if (msg_addr == LOCAL_ADDR) {
    40e8:	1e 40 90    	mov.b     [w14+1], w0
    40ea:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    40ec:	02 00 3a    	bra       NZ, 0x40f2 <.L9>

000040ee <.LSM27>:
        is_recipient = 1;
    40ee:	10 c0 b3    	mov.b     #0x1, w0
    40f0:	00 4f 78    	mov.b     w0, [w14]

000040f2 <.L9>:
    }
    return is_recipient;
    40f2:	1e 40 78    	mov.b     [w14], w0

000040f4 <.LSM29>:
}
    40f4:	00 80 fa    	ulnk      
    40f6:	00 00 06    	return    

000040f8 <_setup_uart>:

void setup_uart() {
    40f8:	00 00 fa    	lnk       #0x0

000040fa <.LSM31>:
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           // 0, TXBUF, 1024, RXBUF, 1024);

    // uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
    //            float baudrate, int8_t parity, int16_t stopbits, 
    //            uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
    //            uint8_t *RXbuffer, uint16_t RXbufferlen)

    // uart_open(&uart2, &D[0], &D[1], NULL, NULL, 115200., 'N', 1, 
    //           0, MC_TXBUF, 1024, MC_RXBUF, 1024);
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           0, TXBUF, 1024, RXBUF, 1024);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    40fa:	40 6d 20    	mov.w     #0x6d4, w0
    40fc:	80 1f 78    	mov.w     w0, [w15++]
    40fe:	57 01 20    	mov.w     #0x15, w7
    4100:	86 c0 b3    	mov.b     #0x8, w6
    4102:	80 82 eb    	setm.w    w5
    4104:	64 c0 b3    	mov.b     #0x6, w4
    4106:	80 01 eb    	clr.w     w3
    4108:	02 2f 20    	mov.w     #0x2f0, w2
    410a:	21 2f 20    	mov.w     #0x2f2, w1
    410c:	20 2f 21    	mov.w     #0x12f2, w0
    410e:	85 fd 07    	rcall     0x3c1a <_pin_init>
    4110:	8f 87 e9    	dec2.w    w15, w15

00004112 <.LSM32>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    4112:	a0 6d 20    	mov.w     #0x6da, w0
    4114:	80 1f 78    	mov.w     w0, [w15++]
    4116:	a7 01 20    	mov.w     #0x1a, w7
    4118:	00 43 eb    	clr.b     w6
    411a:	80 82 eb    	setm.w    w5
    411c:	74 c0 b3    	mov.b     #0x7, w4
    411e:	80 01 eb    	clr.w     w3
    4120:	02 2f 20    	mov.w     #0x2f0, w2
    4122:	21 2f 20    	mov.w     #0x2f2, w1
    4124:	c0 2d 21    	mov.w     #0x12dc, w0
    4126:	79 fd 07    	rcall     0x3c1a <_pin_init>
    4128:	8f 87 e9    	dec2.w    w15, w15

0000412a <.LSM33>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);
    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    412a:	00 40 20    	mov.w     #0x400, w0
    412c:	80 1f 78    	mov.w     w0, [w15++]
    412e:	40 c3 20    	mov.w     #0xc34, w0
    4130:	80 1f 78    	mov.w     w0, [w15++]
    4132:	00 40 20    	mov.w     #0x400, w0
    4134:	80 1f 78    	mov.w     w0, [w15++]
    4136:	40 83 20    	mov.w     #0x834, w0
    4138:	80 1f 78    	mov.w     w0, [w15++]
    413a:	00 00 eb    	clr.w     w0
    413c:	80 1f 78    	mov.w     w0, [w15++]
    413e:	10 00 20    	mov.w     #0x1, w0
    4140:	80 1f 78    	mov.w     w0, [w15++]
    4142:	e5 c4 b3    	mov.b     #0x4e, w5
    4144:	06 00 20    	mov.w     #0x0, w6
    4146:	67 69 24    	mov.w     #0x4696, w7
    4148:	00 02 eb    	clr.w     w4
    414a:	80 01 eb    	clr.w     w3
    414c:	22 2f 21    	mov.w     #0x12f2, w2
    414e:	c1 2d 21    	mov.w     #0x12dc, w1
    4150:	c0 1e 21    	mov.w     #0x11ec, w0
    4152:	8c f5 07    	rcall     0x2c6c <_uart_open>
    4154:	ec 87 57    	sub.w     w15, #0xc, w15

00004156 <.LSM34>:
              0, MC_TXBUF, 1024, MC_RXBUF, 1024);
}
    4156:	00 80 fa    	ulnk      
    4158:	00 00 06    	return    

0000415a <_setup>:

void setup() {
    415a:	00 00 fa    	lnk       #0x0

0000415c <.LSM36>:
    timer_setPeriod(&timer1, 1);  // Timer for LED operation/status blink
    415c:	02 00 20    	mov.w     #0x0, w2
    415e:	03 f8 23    	mov.w     #0x3f80, w3
    4160:	00 39 21    	mov.w     #0x1390, w0
    4162:	87 fa 07    	rcall     0x3672 <_timer_setPeriod>

00004164 <.LSM37>:
    timer_setPeriod(&timer2, 0.5); 
    4164:	02 00 20    	mov.w     #0x0, w2
    4166:	03 f0 23    	mov.w     #0x3f00, w3
    4168:	60 3a 21    	mov.w     #0x13a6, w0
    416a:	83 fa 07    	rcall     0x3672 <_timer_setPeriod>

0000416c <.LSM38>:
    timer_start(&timer1);
    416c:	00 39 21    	mov.w     #0x1390, w0
    416e:	50 fb 07    	rcall     0x3810 <_timer_start>

00004170 <.LSM39>:
    timer_start(&timer2);
    4170:	60 3a 21    	mov.w     #0x13a6, w0
    4172:	4e fb 07    	rcall     0x3810 <_timer_start>

00004174 <.LSM40>:

    setup_uart();
    4174:	c1 ff 07    	rcall     0x40f8 <_setup_uart>

00004176 <.LSM41>:

}
    4176:	00 80 fa    	ulnk      
    4178:	00 00 06    	return    

0000417a <_main>:

int16_t main(void) {
    417a:	4c 00 fa    	lnk       #0x4c

0000417c <.LSM43>:
    // printf("Starting Rocket Controller...\r\n");
    init_clock();
    417c:	00 10 20    	mov.w     #0x100, w0
    417e:	20 3a 88    	mov.w     w0, 0x744

00004180 <.LSM44>:
    init_ui();
    4180:	58 fe 07    	rcall     0x3e32 <_init_ui>

00004182 <.LSM45>:
    init_timer();
    4182:	0c fa 07    	rcall     0x359c <_init_timer>

00004184 <.LSM46>:
    init_uart();
    4184:	9c f4 07    	rcall     0x2abe <_init_uart>

00004186 <.LSM47>:
    setup();
    4186:	e9 ff 07    	rcall     0x415a <_setup>

00004188 <.LSM48>:
    uint16_t counter = 0;
    4188:	00 00 eb    	clr.w     w0
    418a:	00 0f 78    	mov.w     w0, [w14]

0000418c <.LSM49>:
    uint8_t rec_msg [64];
    uint64_t msg;
    char is_recip = 0;
    418c:	00 40 eb    	clr.b     w0
    418e:	20 47 98    	mov.b     w0, [w14+2]
    4190:	01 00 37    	bra       0x4194 <.L16>

00004192 <.L17>:
    while (1) {
        if (timer_flag(&timer1)) {
            // Blink green light to show normal operation.
            timer_lower(&timer1);
            led_toggle(&led2);
        }
        if (timer_flag(&timer2)) {
            timer_lower(&timer2);
            uart_gets(&uart1, rec_msg, 64);
            msg = convert_msg(rec_msg);
            is_recip = parse_addr(&msg);
            if (is_recip == 1) {
                led_on(&led3);
            } else {
                led_off(&led3);
            }

        }   

    }
    4192:	00 00 00    	nop       

00004194 <.L16>:
    4194:	00 39 21    	mov.w     #0x1390, w0
    4196:	5a fb 07    	rcall     0x384c <_timer_flag>
    4198:	00 00 e0    	cp0.w     w0
    419a:	04 00 32    	bra       Z, 0x41a4 <.L13>

0000419c <.LSM52>:
    419c:	00 39 21    	mov.w     #0x1390, w0
    419e:	67 fb 07    	rcall     0x386e <_timer_lower>

000041a0 <.LSM53>:
    41a0:	80 80 20    	mov.w     #0x808, w0
    41a2:	ca fe 07    	rcall     0x3f38 <_led_toggle>

000041a4 <.L13>:
    41a4:	60 3a 21    	mov.w     #0x13a6, w0
    41a6:	52 fb 07    	rcall     0x384c <_timer_flag>
    41a8:	00 00 e0    	cp0.w     w0
    41aa:	f3 ff 32    	bra       Z, 0x4192 <.L17>

000041ac <.LSM55>:
    41ac:	60 3a 21    	mov.w     #0x13a6, w0
    41ae:	5f fb 07    	rcall     0x386e <_timer_lower>

000041b0 <.LSM56>:
    41b0:	63 00 47    	add.w     w14, #0x3, w0
    41b2:	02 04 20    	mov.w     #0x40, w2
    41b4:	80 00 78    	mov.w     w0, w1
    41b6:	c0 1e 21    	mov.w     #0x11ec, w0
    41b8:	c4 f8 07    	rcall     0x3342 <_uart_gets>

000041ba <.LSM57>:
    41ba:	63 00 47    	add.w     w14, #0x3, w0
    41bc:	7f ff 07    	rcall     0x40bc <_convert_msg>
    41be:	20 27 98    	mov.w     w0, [w14+68]
    41c0:	31 27 98    	mov.w     w1, [w14+70]
    41c2:	42 27 98    	mov.w     w2, [w14+72]
    41c4:	53 27 98    	mov.w     w3, [w14+74]

000041c6 <.LSM58>:
    41c6:	40 04 20    	mov.w     #0x44, w0
    41c8:	0e 00 40    	add.w     w0, w14, w0
    41ca:	86 ff 07    	rcall     0x40d8 <_parse_addr>
    41cc:	20 47 98    	mov.b     w0, [w14+2]

000041ce <.LSM59>:
    41ce:	2e 40 90    	mov.b     [w14+2], w0
    41d0:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    41d2:	03 00 3a    	bra       NZ, 0x41da <.L15>

000041d4 <.LSM60>:
    41d4:	00 81 20    	mov.w     #0x810, w0
    41d6:	8f fe 07    	rcall     0x3ef6 <_led_on>

000041d8 <.LSM61>:
    41d8:	dd ff 37    	bra       0x4194 <.L16>

000041da <.L15>:
    41da:	00 81 20    	mov.w     #0x810, w0
    41dc:	9c fe 07    	rcall     0x3f16 <_led_off>

000041de <.LSM63>:
    41de:	da ff 37    	bra       0x4194 <.L16>
Disassembly of section .dinit:

000041e0 <.dinit>:
    41e0:	34 08 00    	nop       
    41e2:	00 08 00    	nop       
    41e4:	80 00 00    	nop       
    41e6:	34 10 00    	nop       
    41e8:	b8 01 00    	nop       
    41ea:	80 00 00    	nop       
    41ec:	00 08 00    	nop       
    41ee:	30 00 00    	nop       
    41f0:	80 00 00    	nop       
    41f2:	84 14 00    	nop       
    41f4:	10 00 00    	nop       
    41f6:	82 00 00    	nop       
    41f8:	bd 37 86    	mov.w     0xc6f6, w13
    41fa:	33 bd 37    	bra       0xffffbc62
    41fc:	06 35 bd    	subr.w    0x1506
    41fe:	37 86 36    	bra       LEU, 0xffff4e6e
    4200:	bd 37 86    	mov.w     0xc6f6, w13
    4202:	37 00 00    	nop       
    4204:	90 13 00    	nop       
    4206:	6e 00 00    	nop       
    4208:	80 00 00    	nop       
    420a:	ec 11 00    	nop       
    420c:	1c 01 00    	nop       
    420e:	80 00 00    	nop       
    4210:	30 08 00    	nop       
    4212:	04 00 00    	nop       
    4214:	80 00 00    	nop       
    4216:	9c 14 00    	nop       
    4218:	02 00 00    	nop       
    421a:	82 00 00    	nop       
    421c:	04 00 00    	nop       
    421e:	94 14 00    	nop       
    4220:	04 00 00    	nop       
    4222:	80 00 00    	nop       
    4224:	08 13 00    	nop       
    4226:	88 00 00    	nop       
    4228:	82 00 00    	nop       
    422a:	01 00 00    	nop       
    422c:	00 2e 13    	subr.w    w6, w0, [++w12]
    422e:	2f 13 2e    	mov.w     #0xe132, w15
    4230:	13 2e 13    	subr.w    w6, [w3], [++w12]
    4232:	2e 13 2e    	mov.w     #0xe132, w14
    4234:	13 1e 13    	subr.w    w6, [w3], [w12++]
	...
    4244:	00 02 08    	do        #0x200, 0x444a
    4246:	01 01 56 
    4248:	13 57 13    	subr.b    w6, [w3], [w14--]
    424a:	56 13 56    	sub.w     w12, [++w6], [w6--]
    424c:	13 56 13    	subr.b    w6, [w3], [w12--]
    424e:	56 13 46    	add.w     w12, [++w6], [w6--]
    4250:	13 00 00    	nop       
	...
    425e:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207bcf8>
    4260:	08 02 02 
    4262:	7e 13 7f    	.pword 0x7f137e
    4264:	13 7e 13    	.pword 0x137e13
    4266:	7e 13 7e    	.pword 0x7e137e
    4268:	13 7e 13    	.pword 0x137e13
    426a:	6e 13 00    	nop       
	...
    427a:	08 13 30    	bra       OV, 0x688c
    427c:	13 58 13    	subr.b    w6, [w3], [w0++]
	...
    4286:	fe 13 00    	nop       
    4288:	4a 00 00    	nop       
    428a:	82 00 00    	nop       
    428c:	30 31 32    	bra       Z, 0xa4ee
    428e:	33 34 35    	bra       LT, 0xaaf6
    4290:	36 37 38    	bra       NOV, 0xb0fe
    4292:	39 61 62    	and.b     w4, [w9++], [--w2]
    4294:	63 64 65    	and.b     w10, #0x3, [--w8]
    4296:	66 67 68    	xor.b     w0, #0x6, [--w14]
    4298:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    429a:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    429c:	6f 70 71    	.pword 0x71706f
    429e:	72 73 74    	.pword 0x747372
    42a0:	75 76 77    	.pword 0x777675
    42a2:	78 79 7a    	.pword 0x7a7978
    42a4:	00 00 00    	nop       
    42a6:	41 29 21    	mov.w     #0x1294, w1
    42a8:	1c 19 17    	subr.w    w14, [w12], [w2++]
    42aa:	16 15 14    	subr.w    w8, [w6], [w10--]
    42ac:	13 12 12    	subr.w    w4, [w3], [w4--]
    42ae:	11 11 11    	subr.w    w2, [w1], [w2--]
    42b0:	10 10 10    	subr.w    w0, [w0], [w0--]
    42b2:	0f 0f 0f    	bra       SB, 0x60d2
    42b4:	0f 0e 0e    	bra       SA, 0x5ed4
    42b6:	0e 0e 0e    	bra       SA, 0x5ed4
    42b8:	0e 0e 0d    	bra       OB, 0x5ed6
    42ba:	0d 0d 0d    	bra       OB, 0x5cd6
    42bc:	0d 0d 00    	nop       
    42be:	98 14 00    	nop       
    42c0:	04 00 00    	nop       
    42c2:	80 00 00    	nop       
    42c4:	6a 14 00    	nop       
    42c6:	1a 00 00    	nop       
    42c8:	82 00 00    	nop       
    42ca:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    42cc:	74 7a 4c    	.pword 0x4c7a74
    42ce:	00 00 01    	call      w0
    42d0:	00 02 00    	nop       
    42d2:	04 00 08    	do        #0x4, 0x62d6
    42d4:	00 10 00 
    42d6:	00 00 20    	mov.w     #0x0, w0
    42d8:	2b 2d 23    	mov.w     #0x32d2, w11
    42da:	30 00 00    	nop       
    42dc:	48 14 00    	nop       
    42de:	22 00 00    	nop       
    42e0:	82 00 00    	nop       
    42e2:	30 31 32    	bra       Z, 0xa544
    42e4:	33 34 35    	bra       LT, 0xab4c
    42e6:	36 37 38    	bra       NOV, 0xb154
    42e8:	39 41 42    	add.b     w4, [w9++], w2
    42ea:	43 44 45    	add.b     w10, [--w3], w8
    42ec:	46 00 30    	bra       OV, 0x437a
    42ee:	31 32 33    	bra       N, 0xa752
    42f0:	34 35 36    	bra       LEU, 0xad5a
    42f2:	37 38 39    	bra       NC, 0xb362
    42f4:	61 62 63    	and.b     w6, #0x1, [--w4]
    42f6:	64 65 66    	and.b     w12, #0x4, [--w10]
    42f8:	00 00 00    	nop       
    42fa:	9e 14 00    	nop       
    42fc:	02 00 00    	nop       
    42fe:	80 00 00    	nop       
    4300:	a0 14 00    	nop       
    4302:	02 00 00    	nop       
    4304:	80 00 00    	nop       
    4306:	00 00 00    	nop       
Disassembly of section .isr:

00004308 <__DefaultInterrupt>:
    4308:	00 40 da    	.pword 0xda4000
    430a:	00 00 fe    	reset     
