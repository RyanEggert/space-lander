
rocket_main.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	af f0 21    	mov.w     #0x1f0a, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	a0 1f 25    	mov.w     #0x51fa, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	aa 4f 02    	call      0x4faa <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 08 20    	mov.w     #0x82, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	58 48 04    	goto      0x4858 <___digitalRead>
    11e4:	00 00 00 
    11e6:	14 48 04    	goto      0x4814 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	7a 48 04    	goto      0x487a <___analogRead>
    11ec:	00 00 00 
    11ee:	cc 2b 04    	goto      0x2bcc <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	0e 2c 04    	goto      0x2c0e <___putc_buffer>
    11f4:	00 00 00 
    11f6:	f0 2b 04    	goto      0x2bf0 <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	06 2d 04    	goto      0x2d06 <___getc_buffer>
    11fc:	00 00 00 
    11fe:	26 1b 04    	goto      0x1b26 <_prout>
    1200:	00 00 00 
    1202:	c6 1e 04    	goto      0x1ec6 <_prout>
    1204:	00 00 00 
    1206:	20 28 04    	goto      0x2820 <_closeall>
    1208:	00 00 00 
    120a:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    120c:	00 00 00 

0000120e <_close>:
    120e:	0a 00 fa    	lnk       #0xa
    1210:	11 00 20    	mov.w     #0x1, w1
    1212:	b1 bf 9f    	mov.w     w1, [w15-10]
    1214:	c0 bf 9f    	mov.w     w0, [w15-8]
    1216:	6a 80 57    	sub.w     w15, #0xa, w0
    1218:	1f 0b 07    	rcall     0x2858 <_doclose>
    121a:	4f b8 97    	mov.w     [w15-8], w0
    121c:	00 80 fa    	ulnk      
    121e:	00 00 06    	return    

00001220 <_remove>:
    1220:	0a 00 fa    	lnk       #0xa
    1222:	51 00 20    	mov.w     #0x5, w1
    1224:	b1 bf 9f    	mov.w     w1, [w15-10]
    1226:	c0 bf 9f    	mov.w     w0, [w15-8]
    1228:	6a 80 57    	sub.w     w15, #0xa, w0
    122a:	18 0b 07    	rcall     0x285c <_doremove>
    122c:	5f b8 97    	mov.w     [w15-6], w0
    122e:	00 80 fa    	ulnk      
    1230:	00 00 06    	return    

00001232 <_sbrk>:
    1232:	88 9f be    	mov.d     w8, [w15++]
    1234:	80 04 78    	mov.w     w0, w9
    1236:	40 f8 80    	mov.w     0x1f08, w0
    1238:	00 00 e0    	cp0.w     w0
    123a:	04 00 3a    	bra       NZ, 0x1244 <.L2>
    123c:	0e 00 07    	rcall     0x125a <_brk>
    123e:	00 84 eb    	setm.w    w8
    1240:	00 00 e0    	cp0.w     w0
    1242:	08 00 35    	bra       LT, 0x1254 <.L3>

00001244 <.L2>:
    1244:	48 f8 80    	mov.w     0x1f08, w8
    1246:	09 00 e0    	cp0.w     w9
    1248:	05 00 32    	bra       Z, 0x1254 <.L3>
    124a:	09 00 44    	add.w     w8, w9, w0
    124c:	06 00 07    	rcall     0x125a <_brk>
    124e:	00 00 e0    	cp0.w     w0
    1250:	01 00 3d    	bra       GE, 0x1254 <.L3>
    1252:	00 84 eb    	setm.w    w8

00001254 <.L3>:
    1254:	08 00 78    	mov.w     w8, w0
    1256:	4f 04 be    	mov.d     [--w15], w8
    1258:	00 00 06    	return    

0000125a <_brk>:
    125a:	80 00 78    	mov.w     w0, w1
    125c:	01 00 e0    	cp0.w     w1
    125e:	03 00 3a    	bra       NZ, 0x1266 <.L2>
    1260:	00 00 20    	mov.w     #0x0, w0
    1262:	40 f8 88    	mov.w     w0, 0x1f08
    1264:	00 00 05    	retlw.w   #0x0, w0

00001266 <.L2>:
    1266:	00 80 eb    	setm.w    w0
    1268:	02 00 20    	mov.w     #0x0, w2
    126a:	82 8f 50    	sub.w     w1, w2, [w15]
    126c:	02 00 3e    	bra       GTU, 0x1272 <.L3>
    126e:	41 f8 88    	mov.w     w1, 0x1f08
    1270:	00 00 eb    	clr.w     w0

00001272 <.L3>:
    1272:	00 00 06    	return    

00001274 <___subsf3>:
    1274:	03 f0 a2    	btg.w     w3, #0xf

00001276 <___addsf3>:
    1276:	88 9f be    	mov.d     w8, [w15++]
    1278:	8a 9f be    	mov.d     w10, [w15++]
    127a:	8c 1f 78    	mov.w     w12, [w15++]
    127c:	f7 00 07    	rcall     0x146c <__funpack2>
    127e:	fe 00 33    	bra       N, 0x147c <__fPropagateNaN>
    1280:	64 50 e1    	cp.w      w10, #0x4
    1282:	4f 00 32    	bra       Z, 0x1322 <aisinfinite>

00001284 <checkspecialb>:
    1284:	64 20 e1    	cp.w      w4, #0x4
    1286:	52 00 32    	bra       Z, 0x132c <return2>
    1288:	03 82 6c    	xor.w     w9, w3, w4
    128a:	07 00 3b    	bra       NN, 0x129a <getsign>
    128c:	09 05 d0    	sl.w      w9, w10
    128e:	03 06 d0    	sl.w      w3, w12
    1290:	82 0f 54    	sub.w     w8, w2, [w15]
    1292:	0c 06 5d    	subb.w    w10, w12, w12
    1294:	02 00 39    	bra       NC, 0x129a <getsign>
    1296:	02 00 32    	bra       Z, 0x129c <gotsign>
    1298:	89 01 78    	mov.w     w9, w3

0000129a <getsign>:
    129a:	03 06 78    	mov.w     w3, w12

0000129c <gotsign>:
    129c:	85 82 55    	sub.w     w11, w5, w5
    129e:	04 00 3d    	bra       GE, 0x12a8 <expcanonical>
    12a0:	00 03 fd    	exch      w0, w6
    12a2:	81 03 fd    	exch      w1, w7
    12a4:	85 02 ea    	neg.w     w5, w5
    12a6:	8b 85 42    	add.w     w5, w11, w11

000012a8 <expcanonical>:
    12a8:	84 0f 72    	ior.w     w4, w4, [w15]
    12aa:	02 00 3b    	bra       NN, 0x12b0 <nonegate>
    12ac:	60 00 10    	subr.w    w0, #0x0, w0
    12ae:	e0 80 18    	subbr.w   w1, #0x0, w1

000012b0 <nonegate>:
    12b0:	60 11 b8    	mul.uu    w2, #0x0, w2
    12b2:	00 05 eb    	clr.w     w10
    12b4:	7a 28 e1    	cp.w      w5, #0x1a
    12b6:	0a 00 39    	bra       NC, 0x12cc <aligniter>
    12b8:	06 00 78    	mov.w     w6, w0
    12ba:	c7 5d dd    	sl.w      w11, #0x7, w11
    12bc:	f7 07 b2    	and.w     #0x7f, w7
    12be:	87 80 75    	ior.w     w11, w7, w1
    12c0:	2d 00 37    	bra       0x131c <signoff>

000012c2 <align>:
    12c2:	82 81 71    	ior.w     w3, w2, w3
    12c4:	0a 01 78    	mov.w     w10, w2
    12c6:	61 05 60    	and.w     w0, #0x1, w10
    12c8:	81 80 d1    	asr.w     w1, w1
    12ca:	00 80 d3    	rrc.w     w0, w0

000012cc <aligniter>:
    12cc:	85 02 e9    	dec.w     w5, w5
    12ce:	f9 ff 3b    	bra       NN, 0x12c2 <align>

000012d0 <aligned>:
    12d0:	06 04 40    	add.w     w0, w6, w8
    12d2:	87 84 48    	addc.w    w1, w7, w9
    12d4:	02 00 3b    	bra       NN, 0x12da <normalizesum>
    12d6:	60 04 14    	subr.w    w8, #0x0, w8
    12d8:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012da <normalizesum>:
    12da:	09 88 a3    	btst.z    w9, #0x8
    12dc:	07 00 32    	bra       Z, 0x12ec <checknormal>
    12de:	8a 81 71    	ior.w     w3, w10, w3
    12e0:	82 81 71    	ior.w     w3, w2, w3
    12e2:	61 01 64    	and.w     w8, #0x1, w2
    12e4:	89 04 d1    	lsr.w     w9, w9
    12e6:	08 84 d3    	rrc.w     w8, w8
    12e8:	8b 05 e8    	inc.w     w11, w11
    12ea:	17 00 37    	bra       0x131a <round>

000012ec <checknormal>:
    12ec:	09 78 a3    	btst.z    w9, #0x7
    12ee:	13 00 3a    	bra       NZ, 0x1316 <discardguard>

000012f0 <underflow>:
    12f0:	0b 00 e0    	cp0.w     w11
    12f2:	13 00 34    	bra       LE, 0x131a <round>
    12f4:	8b 05 e9    	dec.w     w11, w11
    12f6:	08 04 44    	add.w     w8, w8, w8
    12f8:	89 84 4c    	addc.w    w9, w9, w9
    12fa:	0a 44 74    	ior.b     w8, w10, w8
    12fc:	09 78 a3    	btst.z    w9, #0x7
    12fe:	0d 00 3a    	bra       NZ, 0x131a <round>

00001300 <normalizeloop>:
    1300:	0b 00 e0    	cp0.w     w11
    1302:	07 00 34    	bra       LE, 0x1312 <normalizeexit>
    1304:	8b 05 e9    	dec.w     w11, w11
    1306:	08 04 44    	add.w     w8, w8, w8
    1308:	89 84 4c    	addc.w    w9, w9, w9
    130a:	01 00 3a    	bra       NZ, 0x130e <normalizetest>
    130c:	0b 00 20    	mov.w     #0x0, w11

0000130e <normalizetest>:
    130e:	09 78 a3    	btst.z    w9, #0x7
    1310:	f7 ff 32    	bra       Z, 0x1300 <normalizeloop>

00001312 <normalizeexit>:
    1312:	00 01 eb    	clr.w     w2
    1314:	02 00 37    	bra       0x131a <round>

00001316 <discardguard>:
    1316:	82 81 71    	ior.w     w3, w2, w3
    1318:	0a 01 78    	mov.w     w10, w2

0000131a <round>:
    131a:	6d 00 07    	rcall     0x13f6 <__fpack>

0000131c <signoff>:
    131c:	0c f0 a7    	btsc.w    w12, #0xf
    131e:	01 f0 a0    	bset.w    w1, #0xf
    1320:	b6 00 37    	bra       0x148e <__fbopExit>

00001322 <aisinfinite>:
    1322:	64 20 e1    	cp.w      w4, #0x4
    1324:	02 00 3a    	bra       NZ, 0x132a <return8>
    1326:	83 8f 6c    	xor.w     w9, w3, [w15]
    1328:	b6 00 33    	bra       N, 0x1496 <__fbopReturnNaN>

0000132a <return8>:
    132a:	08 01 be    	mov.d     w8, w2

0000132c <return2>:
    132c:	02 00 be    	mov.d     w2, w0
    132e:	af 00 37    	bra       0x148e <__fbopExit>

00001330 <___divsf3>:
    1330:	88 9f be    	mov.d     w8, [w15++]
    1332:	8a 9f be    	mov.d     w10, [w15++]
    1334:	8c 1f 78    	mov.w     w12, [w15++]
    1336:	9a 00 07    	rcall     0x146c <__funpack2>
    1338:	a1 00 33    	bra       N, 0x147c <__fPropagateNaN>
    133a:	03 86 6c    	xor.w     w9, w3, w12
    133c:	64 50 e1    	cp.w      w10, #0x4
    133e:	2e 00 32    	bra       Z, 0x139c <aisinfinite>
    1340:	64 20 e1    	cp.w      w4, #0x4
    1342:	33 00 32    	bra       Z, 0x13aa <returnZero>
    1344:	61 50 e1    	cp.w      w10, #0x1
    1346:	2f 00 32    	bra       Z, 0x13a6 <aiszero>
    1348:	61 20 e1    	cp.w      w4, #0x1
    134a:	31 00 32    	bra       Z, 0x13ae <returnInf>

0000134c <finitenonzero>:
    134c:	85 85 55    	sub.w     w11, w5, w11
    134e:	eb 07 b0    	add.w     #0x7e, w11
    1350:	09 00 20    	mov.w     #0x0, w9
    1352:	08 04 20    	mov.w     #0x40, w8
    1354:	05 00 37    	bra       0x1360 <diventry>

00001356 <divnext>:
    1356:	08 04 44    	add.w     w8, w8, w8
    1358:	89 84 4c    	addc.w    w9, w9, w9
    135a:	0a 00 31    	bra       C, 0x1370 <divdone>

0000135c <divloop>:
    135c:	06 03 43    	add.w     w6, w6, w6
    135e:	87 83 4b    	addc.w    w7, w7, w7

00001360 <diventry>:
    1360:	00 01 53    	sub.w     w6, w0, w2
    1362:	81 81 5b    	subb.w    w7, w1, w3
    1364:	f8 ff 33    	bra       N, 0x1356 <divnext>
    1366:	02 03 be    	mov.d     w2, w6
    1368:	08 00 a0    	bset.w    w8, #0x0
    136a:	08 04 44    	add.w     w8, w8, w8
    136c:	89 84 4c    	addc.w    w9, w9, w9
    136e:	f6 ff 39    	bra       NC, 0x135c <divloop>

00001370 <divdone>:
    1370:	c6 39 dd    	sl.w      w7, #0x6, w3
    1372:	83 01 73    	ior.w     w6, w3, w3
    1374:	01 00 32    	bra       Z, 0x1378 <stickyok>
    1376:	13 00 20    	mov.w     #0x1, w3

00001378 <stickyok>:
    1378:	89 04 d1    	lsr.w     w9, w9
    137a:	08 84 d3    	rrc.w     w8, w8
    137c:	09 98 a3    	btst.z    w9, #0x9
    137e:	05 00 32    	bra       Z, 0x138a <guardused>
    1380:	08 00 a7    	btsc.w    w8, #0x0
    1382:	03 00 a0    	bset.w    w3, #0x0
    1384:	89 04 d1    	lsr.w     w9, w9
    1386:	08 84 d3    	rrc.w     w8, w8
    1388:	8b 05 e8    	inc.w     w11, w11

0000138a <guardused>:
    138a:	89 04 d1    	lsr.w     w9, w9
    138c:	08 84 d3    	rrc.w     w8, w8
    138e:	00 01 eb    	clr.w     w2
    1390:	02 81 d2    	rlc.w     w2, w2
    1392:	31 00 07    	rcall     0x13f6 <__fpack>

00001394 <return0>:
    1394:	01 f0 a1    	bclr.w    w1, #0xf
    1396:	0c f0 a7    	btsc.w    w12, #0xf
    1398:	01 f0 a0    	bset.w    w1, #0xf
    139a:	79 00 37    	bra       0x148e <__fbopExit>

0000139c <aisinfinite>:
    139c:	64 20 e1    	cp.w      w4, #0x4
    139e:	7b 00 32    	bra       Z, 0x1496 <__fbopReturnNaN>

000013a0 <return8>:
    13a0:	08 01 be    	mov.d     w8, w2

000013a2 <return2>:
    13a2:	02 00 be    	mov.d     w2, w0
    13a4:	f7 ff 37    	bra       0x1394 <return0>

000013a6 <aiszero>:
    13a6:	61 20 e1    	cp.w      w4, #0x1
    13a8:	76 00 32    	bra       Z, 0x1496 <__fbopReturnNaN>

000013aa <returnZero>:
    13aa:	60 00 b8    	mul.uu    w0, #0x0, w0
    13ac:	f3 ff 37    	bra       0x1394 <return0>

000013ae <returnInf>:
    13ae:	00 00 20    	mov.w     #0x0, w0
    13b0:	01 f8 27    	mov.w     #0x7f80, w1
    13b2:	f0 ff 37    	bra       0x1394 <return0>

000013b4 <___eqsf2>:
    13b4:	14 00 20    	mov.w     #0x1, w4
    13b6:	a6 00 37    	bra       0x1504 <__fcompare>

000013b8 <___gesf2>:
    13b8:	f4 ff 2f    	mov.w     #0xffff, w4
    13ba:	a4 00 37    	bra       0x1504 <__fcompare>

000013bc <___fixunssfsi>:
    13bc:	00 01 be    	mov.d     w0, w2
    13be:	41 00 07    	rcall     0x1442 <__funpack>
    13c0:	04 70 a7    	btsc.w    w4, #0x7
    13c2:	03 f0 a1    	bclr.w    w3, #0xf
    13c4:	03 f8 a3    	btst.z    w3, #0xf
    13c6:	13 00 3a    	bra       NZ, 0x13ee <returnzero>
    13c8:	65 09 b1    	sub.w     #0x96, w5
    13ca:	10 00 32    	bra       Z, 0x13ec <exit>
    13cc:	09 00 35    	bra       LT, 0x13e0 <shiftright>
    13ce:	69 28 e1    	cp.w      w5, #0x9
    13d0:	02 00 35    	bra       LT, 0x13d6 <shiftleft>
    13d2:	01 00 28    	mov.w     #0x8000, w1
    13d4:	00 00 05    	retlw.w   #0x0, w0

000013d6 <shiftleft>:
    13d6:	00 00 40    	add.w     w0, w0, w0
    13d8:	81 80 48    	addc.w    w1, w1, w1
    13da:	85 02 e9    	dec.w     w5, w5
    13dc:	fc ff 3a    	bra       NZ, 0x13d6 <shiftleft>
    13de:	00 00 06    	return    

000013e0 <shiftright>:
    13e0:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13e2:	05 00 35    	bra       LT, 0x13ee <returnzero>

000013e4 <shiftrightloop>:
    13e4:	81 00 d1    	lsr.w     w1, w1
    13e6:	00 80 d3    	rrc.w     w0, w0
    13e8:	85 02 e8    	inc.w     w5, w5
    13ea:	fc ff 3a    	bra       NZ, 0x13e4 <shiftrightloop>

000013ec <exit>:
    13ec:	00 00 06    	return    

000013ee <returnzero>:
    13ee:	80 00 eb    	clr.w     w1
    13f0:	00 00 05    	retlw.w   #0x0, w0

000013f2 <___floatunsisf>:
    13f2:	60 11 b8    	mul.uu    w2, #0x0, w2
    13f4:	a2 00 37    	bra       0x153a <___floatundisf>

000013f6 <__fpack>:
    13f6:	81 00 20    	mov.w     #0x8, w1
    13f8:	61 80 55    	sub.w     w11, #0x1, w0
    13fa:	0b 00 3d    	bra       GE, 0x1412 <notsubnormal>
    13fc:	0b 00 20    	mov.w     #0x0, w11
    13fe:	61 fe 2f    	mov.w     #0xffe6, w1
    1400:	01 00 e1    	cp.w      w0, w1
    1402:	1d 00 34    	bra       LE, 0x143e <zerosig>

00001404 <subnormal>:
    1404:	82 81 71    	ior.w     w3, w2, w3
    1406:	61 01 64    	and.w     w8, #0x1, w2
    1408:	89 04 d1    	lsr.w     w9, w9
    140a:	08 84 d3    	rrc.w     w8, w8
    140c:	00 00 e8    	inc.w     w0, w0
    140e:	fa ff 3a    	bra       NZ, 0x1404 <subnormal>
    1410:	71 00 20    	mov.w     #0x7, w1

00001412 <notsubnormal>:
    1412:	61 00 64    	and.w     w8, #0x1, w0
    1414:	03 00 70    	ior.w     w0, w3, w0
    1416:	02 00 60    	and.w     w0, w2, w0
    1418:	09 00 32    	bra       Z, 0x142c <packupandgo>
    141a:	61 04 44    	add.w     w8, #0x1, w8
    141c:	e0 84 4c    	addc.w    w9, #0x0, w9
    141e:	09 88 a5    	btst.z    w9, w1
    1420:	05 00 32    	bra       Z, 0x142c <packupandgo>
    1422:	8b 05 e8    	inc.w     w11, w11
    1424:	68 08 e1    	cp.w      w1, #0x8
    1426:	02 00 3a    	bra       NZ, 0x142c <packupandgo>
    1428:	89 04 d1    	lsr.w     w9, w9
    142a:	08 84 d3    	rrc.w     w8, w8

0000142c <packupandgo>:
    142c:	f2 0f 20    	mov.w     #0xff, w2
    142e:	02 58 e1    	cp.w      w11, w2
    1430:	05 00 3d    	bra       GE, 0x143c <overflow>
    1432:	c7 5d dd    	sl.w      w11, #0x7, w11
    1434:	f9 07 b2    	and.w     #0x7f, w9
    1436:	89 80 75    	ior.w     w11, w9, w1
    1438:	08 00 78    	mov.w     w8, w0
    143a:	00 00 06    	return    

0000143c <overflow>:
    143c:	0b f8 27    	mov.w     #0x7f80, w11

0000143e <zerosig>:
    143e:	8b 00 78    	mov.w     w11, w1
    1440:	00 00 05    	retlw.w   #0x0, w0

00001442 <__funpack>:
    1442:	c7 0a de    	lsr.w     w1, #0x7, w5
    1444:	f1 07 b2    	and.w     #0x7f, w1
    1446:	f5 0f b2    	and.w     #0xff, w5
    1448:	08 00 32    	bra       Z, 0x145a <zeroorsub>
    144a:	e1 cf 42    	add.b     w5, #0x1, [w15]
    144c:	02 00 32    	bra       Z, 0x1452 <nanorinf>

0000144e <finitereturn>:
    144e:	01 70 a0    	bset.w    w1, #0x7
    1450:	24 00 05    	retlw.w   #0x2, w4

00001452 <nanorinf>:
    1452:	81 0f 70    	ior.w     w0, w1, [w15]
    1454:	01 00 32    	bra       Z, 0x1458 <infinite>
    1456:	04 08 05    	retlw.w   #0x80, w4

00001458 <infinite>:
    1458:	44 00 05    	retlw.w   #0x4, w4

0000145a <zeroorsub>:
    145a:	81 0f 70    	ior.w     w0, w1, [w15]
    145c:	02 00 3a    	bra       NZ, 0x1462 <subnormal>
    145e:	14 00 05    	retlw.w   #0x1, w4

00001460 <normalize>:
    1460:	85 02 e9    	dec.w     w5, w5

00001462 <subnormal>:
    1462:	00 00 40    	add.w     w0, w0, w0
    1464:	81 c0 48    	addc.b    w1, w1, w1
    1466:	fc ff 3b    	bra       NN, 0x1460 <normalize>
    1468:	01 70 a0    	bset.w    w1, #0x7
    146a:	24 00 05    	retlw.w   #0x2, w4

0000146c <__funpack2>:
    146c:	00 04 be    	mov.d     w0, w8
    146e:	e9 ff 07    	rcall     0x1442 <__funpack>
    1470:	00 03 be    	mov.d     w0, w6
    1472:	04 05 be    	mov.d     w4, w10
    1474:	02 00 be    	mov.d     w2, w0
    1476:	e5 ff 07    	rcall     0x1442 <__funpack>
    1478:	84 4f 75    	ior.b     w10, w4, [w15]
    147a:	00 00 06    	return    

0000147c <__fPropagateNaN>:
    147c:	02 00 be    	mov.d     w2, w0
    147e:	64 50 e1    	cp.w      w10, #0x4
    1480:	05 00 36    	bra       LEU, 0x148c <return0>
    1482:	64 20 e1    	cp.w      w4, #0x4
    1484:	02 00 36    	bra       LEU, 0x148a <return8>
    1486:	09 68 a3    	btst.z    w9, #0x6
    1488:	01 00 3a    	bra       NZ, 0x148c <return0>

0000148a <return8>:
    148a:	08 00 be    	mov.d     w8, w0

0000148c <return0>:
    148c:	01 60 a0    	bset.w    w1, #0x6

0000148e <__fbopExit>:
    148e:	4f 06 78    	mov.w     [--w15], w12
    1490:	4f 05 be    	mov.d     [--w15], w10
    1492:	4f 04 be    	mov.d     [--w15], w8
    1494:	00 00 06    	return    

00001496 <__fbopReturnNaN>:
    1496:	f0 ff 2f    	mov.w     #0xffff, w0
    1498:	f1 ff 27    	mov.w     #0x7fff, w1
    149a:	f9 ff 37    	bra       0x148e <__fbopExit>

0000149c <___mulsf3>:
    149c:	88 9f be    	mov.d     w8, [w15++]
    149e:	8a 9f be    	mov.d     w10, [w15++]
    14a0:	8c 1f 78    	mov.w     w12, [w15++]
    14a2:	e4 ff 07    	rcall     0x146c <__funpack2>
    14a4:	eb ff 33    	bra       N, 0x147c <__fPropagateNaN>
    14a6:	03 86 6c    	xor.w     w9, w3, w12
    14a8:	64 50 e1    	cp.w      w10, #0x4
    14aa:	24 00 32    	bra       Z, 0x14f4 <aisinfinite>
    14ac:	64 20 e1    	cp.w      w4, #0x4
    14ae:	27 00 32    	bra       Z, 0x14fe <bisinfinite>
    14b0:	61 50 e1    	cp.w      w10, #0x1
    14b2:	22 00 32    	bra       Z, 0x14f8 <return8>
    14b4:	61 20 e1    	cp.w      w4, #0x1
    14b6:	21 00 32    	bra       Z, 0x14fa <return2>
    14b8:	8b 85 42    	add.w     w5, w11, w11
    14ba:	eb 07 b1    	sub.w     #0x7e, w11
    14bc:	01 34 b8    	mul.uu    w6, w1, w8
    14be:	00 3a b8    	mul.uu    w7, w0, w4
    14c0:	08 04 42    	add.w     w4, w8, w8
    14c2:	89 84 4a    	addc.w    w5, w9, w9
    14c4:	01 3a b8    	mul.uu    w7, w1, w4
    14c6:	00 30 b8    	mul.uu    w6, w0, w0
    14c8:	88 80 40    	add.w     w1, w8, w1
    14ca:	09 01 4a    	addc.w    w4, w9, w2
    14cc:	04 00 33    	bra       N, 0x14d6 <formsticky>
    14ce:	00 00 40    	add.w     w0, w0, w0
    14d0:	81 80 48    	addc.w    w1, w1, w1
    14d2:	02 01 49    	addc.w    w2, w2, w2
    14d4:	8b 05 e9    	dec.w     w11, w11

000014d6 <formsticky>:
    14d6:	c9 09 dd    	sl.w      w1, #0x9, w3
    14d8:	83 01 70    	ior.w     w0, w3, w3
    14da:	01 00 32    	bra       Z, 0x14de <formRandSig>
    14dc:	13 00 20    	mov.w     #0x1, w3

000014de <formRandSig>:
    14de:	c8 14 de    	lsr.w     w2, #0x8, w9
    14e0:	48 14 dd    	sl.w      w2, #0x8, w8
    14e2:	47 09 de    	lsr.w     w1, #0x7, w2
    14e4:	12 00 b2    	and.w     #0x1, w2
    14e6:	c8 08 de    	lsr.w     w1, #0x8, w1
    14e8:	08 84 70    	ior.w     w1, w8, w8
    14ea:	85 ff 07    	rcall     0x13f6 <__fpack>

000014ec <return0>:
    14ec:	01 f0 a1    	bclr.w    w1, #0xf
    14ee:	0c f0 a7    	btsc.w    w12, #0xf
    14f0:	01 f0 a0    	bset.w    w1, #0xf
    14f2:	cd ff 37    	bra       0x148e <__fbopExit>

000014f4 <aisinfinite>:
    14f4:	61 20 e1    	cp.w      w4, #0x1
    14f6:	cf ff 32    	bra       Z, 0x1496 <__fbopReturnNaN>

000014f8 <return8>:
    14f8:	08 01 be    	mov.d     w8, w2

000014fa <return2>:
    14fa:	02 00 be    	mov.d     w2, w0
    14fc:	f7 ff 37    	bra       0x14ec <return0>

000014fe <bisinfinite>:
    14fe:	61 50 e1    	cp.w      w10, #0x1
    1500:	fc ff 3a    	bra       NZ, 0x14fa <return2>
    1502:	c9 ff 37    	bra       0x1496 <__fbopReturnNaN>

00001504 <__fcompare>:
    1504:	88 9f be    	mov.d     w8, [w15++]
    1506:	8a 9f be    	mov.d     w10, [w15++]
    1508:	84 1f 78    	mov.w     w4, [w15++]
    150a:	b0 ff 07    	rcall     0x146c <__funpack2>
    150c:	4f 00 78    	mov.w     [--w15], w0
    150e:	11 00 33    	bra       N, 0x1532 <exit>
    1510:	f0 ff 2f    	mov.w     #0xffff, w0
    1512:	83 8f 6c    	xor.w     w9, w3, [w15]
    1514:	06 00 3b    	bra       NN, 0x1522 <comparemag>
    1516:	04 05 65    	and.w     w10, w4, w10
    1518:	0a 00 a7    	btsc.w    w10, #0x0
    151a:	08 00 37    	bra       0x152c <returnEqual>
    151c:	09 f0 a6    	btss.w    w9, #0xf
    151e:	10 00 20    	mov.w     #0x1, w0
    1520:	08 00 37    	bra       0x1532 <exit>

00001522 <comparemag>:
    1522:	82 0f 54    	sub.w     w8, w2, [w15]
    1524:	83 8f 5c    	subb.w    w9, w3, [w15]
    1526:	03 00 39    	bra       NC, 0x152e <adjust>
    1528:	10 00 20    	mov.w     #0x1, w0
    152a:	01 00 3e    	bra       GTU, 0x152e <adjust>

0000152c <returnEqual>:
    152c:	00 00 20    	mov.w     #0x0, w0

0000152e <adjust>:
    152e:	09 f0 a7    	btsc.w    w9, #0xf
    1530:	00 00 ea    	neg.w     w0, w0

00001532 <exit>:
    1532:	4f 05 be    	mov.d     [--w15], w10
    1534:	4f 04 be    	mov.d     [--w15], w8
    1536:	00 00 e0    	cp0.w     w0
    1538:	00 00 06    	return    

0000153a <___floatundisf>:
    153a:	88 9f be    	mov.d     w8, [w15++]
    153c:	8a 9f be    	mov.d     w10, [w15++]
    153e:	00 82 70    	ior.w     w1, w0, w4
    1540:	04 02 71    	ior.w     w2, w4, w4
    1542:	04 82 71    	ior.w     w3, w4, w4
    1544:	26 00 32    	bra       Z, 0x1592 <return0>
    1546:	00 04 be    	mov.d     w0, w8
    1548:	02 00 be    	mov.d     w2, w0
    154a:	60 11 b8    	mul.uu    w2, #0x0, w2
    154c:	6b 09 20    	mov.w     #0x96, w11
    154e:	95 02 20    	mov.w     #0x29, w5
    1550:	01 82 cf    	ff1l      w1, w4
    1552:	0a 00 39    	bra       NC, 0x1568 <fixshift>
    1554:	05 41 b1    	sub.b     #0x10, w5
    1556:	00 82 cf    	ff1l      w0, w4
    1558:	07 00 39    	bra       NC, 0x1568 <fixshift>
    155a:	05 41 b1    	sub.b     #0x10, w5
    155c:	09 82 cf    	ff1l      w9, w4
    155e:	04 00 39    	bra       NC, 0x1568 <fixshift>
    1560:	05 41 b1    	sub.b     #0x10, w5
    1562:	08 82 cf    	ff1l      w8, w4
    1564:	01 00 39    	bra       NC, 0x1568 <fixshift>
    1566:	05 41 b1    	sub.b     #0x10, w5

00001568 <fixshift>:
    1568:	05 42 52    	sub.b     w4, w5, w4
    156a:	12 00 32    	bra       Z, 0x1590 <round>
    156c:	0a 00 3b    	bra       NN, 0x1582 <shiftleft>

0000156e <shiftright>:
    156e:	82 81 71    	ior.w     w3, w2, w3
    1570:	61 01 64    	and.w     w8, #0x1, w2
    1572:	81 00 d1    	lsr.w     w1, w1
    1574:	00 80 d3    	rrc.w     w0, w0
    1576:	89 84 d3    	rrc.w     w9, w9
    1578:	08 84 d3    	rrc.w     w8, w8
    157a:	8b 05 e8    	inc.w     w11, w11
    157c:	04 42 e8    	inc.b     w4, w4
    157e:	f7 ff 3a    	bra       NZ, 0x156e <shiftright>
    1580:	07 00 37    	bra       0x1590 <round>

00001582 <shiftleft>:
    1582:	08 04 44    	add.w     w8, w8, w8
    1584:	89 84 4c    	addc.w    w9, w9, w9
    1586:	00 00 48    	addc.w    w0, w0, w0
    1588:	81 80 48    	addc.w    w1, w1, w1
    158a:	8b 05 e9    	dec.w     w11, w11
    158c:	04 42 e9    	dec.b     w4, w4
    158e:	f9 ff 3a    	bra       NZ, 0x1582 <shiftleft>

00001590 <round>:
    1590:	32 ff 07    	rcall     0x13f6 <__fpack>

00001592 <return0>:
    1592:	4f 05 be    	mov.d     [--w15], w10
    1594:	4f 04 be    	mov.d     [--w15], w8
    1596:	00 00 06    	return    

00001598 <_findmem>:
    1598:	88 9f be    	mov.d     w8, [w15++]
    159a:	00 04 78    	mov.w     w0, w8

0000159c <.L14>:
    159c:	f1 f7 80    	mov.w     0x1efe, w1
    159e:	01 00 e0    	cp0.w     w1
    15a0:	02 00 32    	bra       Z, 0x15a6 <.L2>
    15a2:	01 00 78    	mov.w     w1, w0
    15a4:	0d 00 37    	bra       0x15c0 <.L3>

000015a6 <.L2>:
    15a6:	01 f8 80    	mov.w     0x1f00, w1
    15a8:	00 f0 21    	mov.w     #0x1f00, w0
    15aa:	04 00 37    	bra       0x15b4 <.L4>

000015ac <.L6>:
    15ac:	91 0f 54    	sub.w     w8, [w1], [w15]
    15ae:	25 00 36    	bra       LEU, 0x15fa <.L5>
    15b0:	01 80 e8    	inc2.w    w1, w0
    15b2:	91 00 90    	mov.w     [w1+2], w1

000015b4 <.L4>:
    15b4:	01 00 e0    	cp0.w     w1
    15b6:	fa ff 3a    	bra       NZ, 0x15ac <.L6>
    15b8:	10 00 37    	bra       0x15da <.L7>

000015ba <.L8>:
    15ba:	92 0f 54    	sub.w     w8, [w2], [w15]
    15bc:	1e 00 36    	bra       LEU, 0x15fa <.L5>
    15be:	02 80 e8    	inc2.w    w2, w0

000015c0 <.L3>:
    15c0:	10 01 78    	mov.w     [w0], w2
    15c2:	02 00 e0    	cp0.w     w2
    15c4:	fa ff 3a    	bra       NZ, 0x15ba <.L8>
    15c6:	11 01 78    	mov.w     [w1], w2
    15c8:	01 f8 80    	mov.w     0x1f00, w1
    15ca:	00 f0 21    	mov.w     #0x1f00, w0
    15cc:	04 00 37    	bra       0x15d6 <.L9>

000015ce <.L10>:
    15ce:	91 0f 54    	sub.w     w8, [w1], [w15]
    15d0:	14 00 36    	bra       LEU, 0x15fa <.L5>
    15d2:	01 80 e8    	inc2.w    w1, w0
    15d4:	91 00 90    	mov.w     [w1+2], w1

000015d6 <.L9>:
    15d6:	82 8f 50    	sub.w     w1, w2, [w15]
    15d8:	fa ff 3a    	bra       NZ, 0x15ce <.L10>

000015da <.L7>:
    15da:	f9 ef 80    	mov.w     0x1dfe, w9

000015dc <.L13>:
    15dc:	88 8f 54    	sub.w     w9, w8, [w15]
    15de:	01 00 31    	bra       C, 0x15e2 <.L11>
    15e0:	88 04 78    	mov.w     w8, w9

000015e2 <.L11>:
    15e2:	09 00 78    	mov.w     w9, w0
    15e4:	fb 00 07    	rcall     0x17dc <__Getmem>
    15e6:	00 00 e0    	cp0.w     w0
    15e8:	04 00 3a    	bra       NZ, 0x15f2 <.L12>
    15ea:	88 8f 54    	sub.w     w9, w8, [w15]
    15ec:	05 00 32    	bra       Z, 0x15f8 <.L15>
    15ee:	89 04 d1    	lsr.w     w9, w9
    15f0:	f5 ff 37    	bra       0x15dc <.L13>

000015f2 <.L12>:
    15f2:	09 18 78    	mov.w     w9, [w0++]
    15f4:	e2 05 07    	rcall     0x21ba <_free>
    15f6:	d2 ff 37    	bra       0x159c <.L14>

000015f8 <.L15>:
    15f8:	00 00 eb    	clr.w     w0

000015fa <.L5>:
    15fa:	4f 04 be    	mov.d     [--w15], w8
    15fc:	00 00 06    	return    

000015fe <_malloc>:
    15fe:	88 1f 78    	mov.w     w8, [w15++]
    1600:	63 04 40    	add.w     w0, #0x3, w8
    1602:	08 00 a1    	bclr.w    w8, #0x0
    1604:	80 00 eb    	clr.w     w1
    1606:	80 0f 54    	sub.w     w8, w0, [w15]
    1608:	21 00 36    	bra       LEU, 0x164c <.L17>
    160a:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    160c:	01 00 3e    	bra       GTU, 0x1610 <.L18>
    160e:	48 00 20    	mov.w     #0x4, w8

00001610 <.L18>:
    1610:	08 00 78    	mov.w     w8, w0
    1612:	c2 ff 07    	rcall     0x1598 <_findmem>
    1614:	80 00 eb    	clr.w     w1
    1616:	00 00 e0    	cp0.w     w0
    1618:	19 00 32    	bra       Z, 0x164c <.L17>
    161a:	90 00 78    	mov.w     [w0], w1
    161c:	91 01 78    	mov.w     [w1], w3
    161e:	64 81 51    	sub.w     w3, #0x4, w2
    1620:	88 0f 51    	sub.w     w2, w8, [w15]
    1622:	03 00 31    	bra       C, 0x162a <.L19>
    1624:	11 01 90    	mov.w     [w1+2], w2
    1626:	02 08 78    	mov.w     w2, [w0]
    1628:	07 00 37    	bra       0x1638 <.L20>

0000162a <.L19>:
    162a:	08 81 40    	add.w     w1, w8, w2
    162c:	02 08 78    	mov.w     w2, [w0]
    162e:	91 01 90    	mov.w     [w1+2], w3
    1630:	13 01 98    	mov.w     w3, [w2+2]
    1632:	10 01 78    	mov.w     [w0], w2
    1634:	11 09 14    	subr.w    w8, [w1], [w2]
    1636:	88 08 78    	mov.w     w8, [w1]

00001638 <.L20>:
    1638:	10 01 78    	mov.w     [w0], w2
    163a:	00 00 eb    	clr.w     w0
    163c:	02 00 e0    	cp0.w     w2
    163e:	04 00 32    	bra       Z, 0x1648 <.L21>
    1640:	92 01 90    	mov.w     [w2+2], w3
    1642:	03 00 e0    	cp0.w     w3
    1644:	01 00 32    	bra       Z, 0x1648 <.L21>
    1646:	02 80 e8    	inc2.w    w2, w0

00001648 <.L21>:
    1648:	f0 f7 88    	mov.w     w0, 0x1efe
    164a:	81 80 e8    	inc2.w    w1, w1

0000164c <.L17>:
    164c:	01 00 78    	mov.w     w1, w0
    164e:	4f 04 78    	mov.w     [--w15], w8
    1650:	00 00 06    	return    

00001652 <_memcpy>:
    1652:	80 01 78    	mov.w     w0, w3
    1654:	02 00 37    	bra       0x165a <.L2>

00001656 <.L3>:
    1656:	b1 59 78    	mov.b     [w1++], [w3++]
    1658:	02 01 e9    	dec.w     w2, w2

0000165a <.L2>:
    165a:	02 00 e0    	cp0.w     w2
    165c:	fc ff 3a    	bra       NZ, 0x1656 <.L3>
    165e:	00 00 06    	return    

00001660 <_puts>:
    1660:	81 c2 21    	mov.w     #0x1c28, w1
    1662:	63 05 07    	rcall     0x212a <_fputs>
    1664:	80 00 78    	mov.w     w0, w1
    1666:	00 80 eb    	setm.w    w0
    1668:	01 00 e0    	cp0.w     w1
    166a:	04 00 35    	bra       LT, 0x1674 <.L2>
    166c:	81 c2 21    	mov.w     #0x1c28, w1
    166e:	a0 00 20    	mov.w     #0xa, w0
    1670:	34 02 07    	rcall     0x1ada <_fputc>
    1672:	4f 80 de    	asr.w     w0, #0xf, w0

00001674 <.L2>:
    1674:	00 00 06    	return    

00001676 <_strcmp>:
    1676:	02 00 37    	bra       0x167c <.L2>

00001678 <.L4>:
    1678:	02 04 e0    	cp0.b     w2
    167a:	0b 00 32    	bra       Z, 0x1692 <.L5>

0000167c <.L2>:
    167c:	81 01 78    	mov.w     w1, w3
    167e:	00 02 78    	mov.w     w0, w4
    1680:	30 41 78    	mov.b     [w0++], w2
    1682:	b1 4f 51    	sub.b     w2, [w1++], [w15]
    1684:	f9 ff 32    	bra       Z, 0x1678 <.L4>
    1686:	10 00 20    	mov.w     #0x1, w0
    1688:	14 42 78    	mov.b     [w4], w4
    168a:	93 4f 52    	sub.b     w4, [w3], [w15]
    168c:	03 00 31    	bra       C, 0x1694 <.L3>
    168e:	00 80 eb    	setm.w    w0
    1690:	00 00 06    	return    

00001692 <.L5>:
    1692:	00 00 eb    	clr.w     w0

00001694 <.L3>:
    1694:	00 00 06    	return    

00001696 <_strtol>:
    1696:	e4 87 47    	add.w     w15, #0x4, w15
    1698:	88 9f be    	mov.d     w8, [w15++]
    169a:	8a 9f be    	mov.d     w10, [w15++]
    169c:	8c 1f 78    	mov.w     w12, [w15++]
    169e:	8e 1f 78    	mov.w     w14, [w15++]
    16a0:	00 05 78    	mov.w     w0, w10
    16a2:	01 07 78    	mov.w     w1, w14
    16a4:	02 06 78    	mov.w     w2, w12
    16a6:	0e 00 e0    	cp0.w     w14
    16a8:	01 00 3a    	bra       NZ, 0x16ac <.L2>
    16aa:	6e 87 57    	sub.w     w15, #0xe, w14

000016ac <.L2>:
    16ac:	8a 05 78    	mov.w     w10, w11

000016ae <.L3>:
    16ae:	8b 04 78    	mov.w     w11, w9
    16b0:	89 05 78    	mov.w     w9, w11
    16b2:	3b 44 78    	mov.b     [w11++], w8
    16b4:	08 00 fb    	se        w8, w0
    16b6:	fc 01 07    	rcall     0x1ab0 <_isspace>
    16b8:	00 00 e0    	cp0.w     w0
    16ba:	f9 ff 3a    	bra       NZ, 0x16ae <.L3>
    16bc:	d0 c2 b3    	mov.b     #0x2d, w0
    16be:	80 4f 54    	sub.b     w8, w0, [w15]
    16c0:	03 00 32    	bra       Z, 0x16c8 <.L4>
    16c2:	00 c0 e9    	dec2.b    w0, w0
    16c4:	80 4f 54    	sub.b     w8, w0, [w15]
    16c6:	02 00 3a    	bra       NZ, 0x16cc <.L14>

000016c8 <.L4>:
    16c8:	89 04 e8    	inc.w     w9, w9
    16ca:	01 00 37    	bra       0x16ce <.L5>

000016cc <.L14>:
    16cc:	00 44 78    	mov.b     w0, w8

000016ce <.L5>:
    16ce:	0c 01 78    	mov.w     w12, w2
    16d0:	8e 00 78    	mov.w     w14, w1
    16d2:	09 00 78    	mov.w     w9, w0
    16d4:	8d 00 07    	rcall     0x17f0 <__Stoul>
    16d6:	9e 8f 54    	sub.w     w9, [w14], [w15]
    16d8:	01 00 3a    	bra       NZ, 0x16dc <.L6>
    16da:	0a 0f 78    	mov.w     w10, [w14]

000016dc <.L6>:
    16dc:	9e 0f 55    	sub.w     w10, [w14], [w15]
    16de:	03 00 3a    	bra       NZ, 0x16e6 <.L7>
    16e0:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    16e2:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    16e4:	0f 00 3a    	bra       NZ, 0x1704 <.L8>

000016e6 <.L7>:
    16e6:	b2 c2 b3    	mov.b     #0x2b, w2
    16e8:	82 4f 54    	sub.b     w8, w2, [w15]
    16ea:	04 00 3a    	bra       NZ, 0x16f4 <.L9>
    16ec:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    16ee:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    16f0:	15 00 3d    	bra       GE, 0x171c <.L12>
    16f2:	08 00 37    	bra       0x1704 <.L8>

000016f4 <.L9>:
    16f4:	d2 c2 b3    	mov.b     #0x2d, w2
    16f6:	82 4f 54    	sub.b     w8, w2, [w15]
    16f8:	11 00 3a    	bra       NZ, 0x171c <.L12>
    16fa:	02 00 20    	mov.w     #0x0, w2
    16fc:	03 00 28    	mov.w     #0x8000, w3
    16fe:	82 0f 50    	sub.w     w0, w2, [w15]
    1700:	83 8f 58    	subb.w    w1, w3, [w15]
    1702:	0a 00 36    	bra       LEU, 0x1718 <.L11>

00001704 <.L8>:
    1704:	20 02 20    	mov.w     #0x22, w0
    1706:	10 f8 88    	mov.w     w0, 0x1f02
    1708:	f0 ff 2f    	mov.w     #0xffff, w0
    170a:	f1 ff 27    	mov.w     #0x7fff, w1
    170c:	d2 c2 b3    	mov.b     #0x2d, w2
    170e:	82 4f 54    	sub.b     w8, w2, [w15]
    1710:	05 00 3a    	bra       NZ, 0x171c <.L12>
    1712:	00 00 20    	mov.w     #0x0, w0
    1714:	01 00 28    	mov.w     #0x8000, w1
    1716:	02 00 37    	bra       0x171c <.L12>

00001718 <.L11>:
    1718:	60 00 10    	subr.w    w0, #0x0, w0
    171a:	e0 80 18    	subbr.w   w1, #0x0, w1

0000171c <.L12>:
    171c:	4f 07 78    	mov.w     [--w15], w14
    171e:	4f 06 78    	mov.w     [--w15], w12
    1720:	4f 05 be    	mov.d     [--w15], w10
    1722:	4f 04 be    	mov.d     [--w15], w8
    1724:	4f 00 b1    	sub.w     #0x4, w15
    1726:	00 00 06    	return    

00001728 <_strtoll>:
    1728:	e4 87 47    	add.w     w15, #0x4, w15
    172a:	88 9f be    	mov.d     w8, [w15++]
    172c:	8a 9f be    	mov.d     w10, [w15++]
    172e:	8c 1f 78    	mov.w     w12, [w15++]
    1730:	8e 1f 78    	mov.w     w14, [w15++]
    1732:	00 05 78    	mov.w     w0, w10
    1734:	01 07 78    	mov.w     w1, w14
    1736:	02 06 78    	mov.w     w2, w12
    1738:	0e 00 e0    	cp0.w     w14
    173a:	01 00 3a    	bra       NZ, 0x173e <.L2>
    173c:	6e 87 57    	sub.w     w15, #0xe, w14

0000173e <.L2>:
    173e:	8a 05 78    	mov.w     w10, w11

00001740 <.L3>:
    1740:	8b 04 78    	mov.w     w11, w9
    1742:	89 05 78    	mov.w     w9, w11
    1744:	3b 44 78    	mov.b     [w11++], w8
    1746:	08 00 fb    	se        w8, w0
    1748:	b3 01 07    	rcall     0x1ab0 <_isspace>
    174a:	00 00 e0    	cp0.w     w0
    174c:	f9 ff 3a    	bra       NZ, 0x1740 <.L3>
    174e:	d0 c2 b3    	mov.b     #0x2d, w0
    1750:	80 4f 54    	sub.b     w8, w0, [w15]
    1752:	03 00 32    	bra       Z, 0x175a <.L4>
    1754:	00 c0 e9    	dec2.b    w0, w0
    1756:	80 4f 54    	sub.b     w8, w0, [w15]
    1758:	02 00 3a    	bra       NZ, 0x175e <.L14>

0000175a <.L4>:
    175a:	89 04 e8    	inc.w     w9, w9
    175c:	01 00 37    	bra       0x1760 <.L5>

0000175e <.L14>:
    175e:	00 44 78    	mov.b     w0, w8

00001760 <.L5>:
    1760:	0c 01 78    	mov.w     w12, w2
    1762:	8e 00 78    	mov.w     w14, w1
    1764:	09 00 78    	mov.w     w9, w0
    1766:	de 00 07    	rcall     0x1924 <__Stoull>
    1768:	9e 8f 54    	sub.w     w9, [w14], [w15]
    176a:	01 00 3a    	bra       NZ, 0x176e <.L6>
    176c:	0a 0f 78    	mov.w     w10, [w14]

0000176e <.L6>:
    176e:	9e 0f 55    	sub.w     w10, [w14], [w15]
    1770:	05 00 3a    	bra       NZ, 0x177c <.L7>
    1772:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1774:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1776:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1778:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    177a:	17 00 3a    	bra       NZ, 0x17aa <.L8>

0000177c <.L7>:
    177c:	b4 c2 b3    	mov.b     #0x2b, w4
    177e:	84 4f 54    	sub.b     w8, w4, [w15]
    1780:	09 00 3a    	bra       NZ, 0x1794 <.L9>
    1782:	f4 ff 2f    	mov.w     #0xffff, w4
    1784:	f5 ff 27    	mov.w     #0x7fff, w5
    1786:	60 33 b8    	mul.uu    w6, #0x0, w6
    1788:	04 00 e1    	cp.w      w0, w4
    178a:	05 88 e1    	cpb.w     w1, w5
    178c:	06 90 e1    	cpb.w     w2, w6
    178e:	07 98 e1    	cpb.w     w3, w7
    1790:	0c 00 3e    	bra       GTU, 0x17aa <.L8>
    1792:	1e 00 37    	bra       0x17d0 <.L12>

00001794 <.L9>:
    1794:	d4 c2 b3    	mov.b     #0x2d, w4
    1796:	84 4f 54    	sub.b     w8, w4, [w15]
    1798:	1b 00 3a    	bra       NZ, 0x17d0 <.L12>
    179a:	04 00 20    	mov.w     #0x0, w4
    179c:	05 00 28    	mov.w     #0x8000, w5
    179e:	60 33 b8    	mul.uu    w6, #0x0, w6
    17a0:	04 00 e1    	cp.w      w0, w4
    17a2:	05 88 e1    	cpb.w     w1, w5
    17a4:	06 90 e1    	cpb.w     w2, w6
    17a6:	07 98 e1    	cpb.w     w3, w7
    17a8:	0d 00 36    	bra       LEU, 0x17c4 <.L11>

000017aa <.L8>:
    17aa:	20 02 20    	mov.w     #0x22, w0
    17ac:	10 f8 88    	mov.w     w0, 0x1f02
    17ae:	f0 ff 2f    	mov.w     #0xffff, w0
    17b0:	f1 ff 27    	mov.w     #0x7fff, w1
    17b2:	60 11 b8    	mul.uu    w2, #0x0, w2
    17b4:	d4 c2 b3    	mov.b     #0x2d, w4
    17b6:	84 4f 54    	sub.b     w8, w4, [w15]
    17b8:	0b 00 3a    	bra       NZ, 0x17d0 <.L12>
    17ba:	00 00 20    	mov.w     #0x0, w0
    17bc:	01 00 28    	mov.w     #0x8000, w1
    17be:	f2 ff 2f    	mov.w     #0xffff, w2
    17c0:	f3 ff 2f    	mov.w     #0xffff, w3
    17c2:	06 00 37    	bra       0x17d0 <.L12>

000017c4 <.L11>:
    17c4:	60 22 b8    	mul.uu    w4, #0x0, w4
    17c6:	60 33 b8    	mul.uu    w6, #0x0, w6
    17c8:	00 00 52    	sub.w     w4, w0, w0
    17ca:	81 80 5a    	subb.w    w5, w1, w1
    17cc:	02 01 5b    	subb.w    w6, w2, w2
    17ce:	83 81 5b    	subb.w    w7, w3, w3

000017d0 <.L12>:
    17d0:	4f 07 78    	mov.w     [--w15], w14
    17d2:	4f 06 78    	mov.w     [--w15], w12
    17d4:	4f 05 be    	mov.d     [--w15], w10
    17d6:	4f 04 be    	mov.d     [--w15], w8
    17d8:	4f 00 b1    	sub.w     #0x4, w15
    17da:	00 00 06    	return    

000017dc <__Getmem>:
    17dc:	80 00 78    	mov.w     w0, w1
    17de:	00 00 eb    	clr.w     w0
    17e0:	01 00 e0    	cp0.w     w1
    17e2:	05 00 34    	bra       LE, 0x17ee <.L2>
    17e4:	01 00 78    	mov.w     w1, w0
    17e6:	25 fd 07    	rcall     0x1232 <_sbrk>
    17e8:	e1 0f 40    	add.w     w0, #0x1, [w15]
    17ea:	01 00 3a    	bra       NZ, 0x17ee <.L2>
    17ec:	00 00 eb    	clr.w     w0

000017ee <.L2>:
    17ee:	00 00 06    	return    

000017f0 <__Stoul>:
    17f0:	ee 87 47    	add.w     w15, #0xe, w15
    17f2:	88 9f be    	mov.d     w8, [w15++]
    17f4:	8a 9f be    	mov.d     w10, [w15++]
    17f6:	8c 9f be    	mov.d     w12, [w15++]
    17f8:	8e 1f 78    	mov.w     w14, [w15++]
    17fa:	f0 b7 9f    	mov.w     w0, [w15-18]
    17fc:	01 06 78    	mov.w     w1, w12
    17fe:	82 05 78    	mov.w     w2, w11
    1800:	00 04 78    	mov.w     w0, w8

00001802 <.L2>:
    1802:	08 05 78    	mov.w     w8, w10
    1804:	0a 04 78    	mov.w     w10, w8
    1806:	b8 46 78    	mov.b     [w8++], w13
    1808:	0d 00 fb    	se        w13, w0
    180a:	52 01 07    	rcall     0x1ab0 <_isspace>
    180c:	00 00 e0    	cp0.w     w0
    180e:	f9 ff 3a    	bra       NZ, 0x1802 <.L2>
    1810:	d0 c2 b3    	mov.b     #0x2d, w0
    1812:	80 cf 56    	sub.b     w13, w0, [w15]
    1814:	03 00 32    	bra       Z, 0x181c <.L3>
    1816:	00 c0 e9    	dec2.b    w0, w0
    1818:	80 cf 56    	sub.b     w13, w0, [w15]
    181a:	02 00 3a    	bra       NZ, 0x1820 <.L19>

0000181c <.L3>:
    181c:	0a 05 e8    	inc.w     w10, w10
    181e:	01 00 37    	bra       0x1822 <.L4>

00001820 <.L19>:
    1820:	80 46 78    	mov.b     w0, w13

00001822 <.L4>:
    1822:	0b 00 e0    	cp0.w     w11
    1824:	05 00 35    	bra       LT, 0x1830 <.L5>
    1826:	e1 8f 55    	sub.w     w11, #0x1, [w15]
    1828:	03 00 32    	bra       Z, 0x1830 <.L5>
    182a:	40 02 20    	mov.w     #0x24, w0
    182c:	80 8f 55    	sub.w     w11, w0, [w15]
    182e:	06 00 34    	bra       LE, 0x183c <.L6>

00001830 <.L5>:
    1830:	60 44 b8    	mul.uu    w8, #0x0, w8
    1832:	0c 00 e0    	cp0.w     w12
    1834:	70 00 32    	bra       Z, 0x1916 <.L7>
    1836:	7f b0 97    	mov.w     [w15-18], w0
    1838:	00 0e 78    	mov.w     w0, [w12]
    183a:	6d 00 37    	bra       0x1916 <.L7>

0000183c <.L6>:
    183c:	0b 00 e0    	cp0.w     w11
    183e:	0e 00 32    	bra       Z, 0x185c <.L8>
    1840:	f0 8f 55    	sub.w     w11, #0x10, [w15]
    1842:	1a 00 3a    	bra       NZ, 0x1878 <.L9>
    1844:	00 c3 b3    	mov.b     #0x30, w0
    1846:	9a 4f 10    	subr.b    w0, [w10], [w15]
    1848:	17 00 3a    	bra       NZ, 0x1878 <.L9>
    184a:	1a 40 90    	mov.b     [w10+1], w0
    184c:	81 c7 b3    	mov.b     #0x78, w1
    184e:	81 4f 50    	sub.b     w0, w1, [w15]
    1850:	03 00 32    	bra       Z, 0x1858 <.L10>
    1852:	81 c5 b3    	mov.b     #0x58, w1
    1854:	81 4f 50    	sub.b     w0, w1, [w15]
    1856:	10 00 3a    	bra       NZ, 0x1878 <.L9>

00001858 <.L10>:
    1858:	0a 85 e8    	inc2.w    w10, w10
    185a:	0e 00 37    	bra       0x1878 <.L9>

0000185c <.L8>:
    185c:	ab 00 20    	mov.w     #0xa, w11
    185e:	00 c3 b3    	mov.b     #0x30, w0
    1860:	9a 4f 10    	subr.b    w0, [w10], [w15]
    1862:	0a 00 3a    	bra       NZ, 0x1878 <.L9>
    1864:	1a 40 90    	mov.b     [w10+1], w0
    1866:	81 c7 b3    	mov.b     #0x78, w1
    1868:	81 4f 50    	sub.b     w0, w1, [w15]
    186a:	04 00 32    	bra       Z, 0x1874 <.L11>
    186c:	8b 00 20    	mov.w     #0x8, w11
    186e:	81 c5 b3    	mov.b     #0x58, w1
    1870:	81 4f 50    	sub.b     w0, w1, [w15]
    1872:	02 00 3a    	bra       NZ, 0x1878 <.L9>

00001874 <.L11>:
    1874:	0a 85 e8    	inc2.w    w10, w10
    1876:	0b 01 20    	mov.w     #0x10, w11

00001878 <.L9>:
    1878:	0a 00 78    	mov.w     w10, w0

0000187a <.L12>:
    187a:	00 02 78    	mov.w     w0, w4
    187c:	04 00 78    	mov.w     w4, w0
    187e:	01 c3 b3    	mov.b     #0x30, w1
    1880:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    1882:	fb ff 32    	bra       Z, 0x187a <.L12>
    1884:	04 07 78    	mov.w     w4, w14
    1886:	60 44 b8    	mul.uu    w8, #0x0, w8
    1888:	b4 b7 9f    	mov.w     w4, [w15-26]
    188a:	0d 00 37    	bra       0x18a6 <.L13>

0000188c <.L14>:
    188c:	21 d8 21    	mov.w     #0x1d82, w1
    188e:	81 40 50    	sub.b     w0, w1, w1
    1890:	c1 ef 9f    	mov.b     w1, [w15-20]
    1892:	61 59 b9    	mul.su    w11, #0x1, w2
    1894:	08 00 be    	mov.d     w8, w0
    1896:	06 08 07    	rcall     0x28a4 <___mulp32eds3>
    1898:	4f ea 97    	mov.b     [w15-20], w4
    189a:	04 01 fb    	se        w4, w2
    189c:	cf 91 de    	asr.w     w2, #0xf, w3
    189e:	c8 b7 9f    	mov.w     w8, [w15-24]
    18a0:	d9 b7 9f    	mov.w     w9, [w15-22]
    18a2:	02 04 40    	add.w     w0, w2, w8
    18a4:	83 84 48    	addc.w    w1, w3, w9

000018a6 <.L13>:
    18a6:	8e 02 78    	mov.w     w14, w5
    18a8:	3e 00 fb    	se        [w14++], w0
    18aa:	85 bf 9f    	mov.w     w5, [w15-16]
    18ac:	09 01 07    	rcall     0x1ac0 <_tolower>
    18ae:	0b 01 78    	mov.w     w11, w2
    18b0:	80 00 78    	mov.w     w0, w1
    18b2:	20 d8 21    	mov.w     #0x1d82, w0
    18b4:	08 05 07    	rcall     0x22c6 <_memchr>
    18b6:	8f ba 97    	mov.w     [w15-16], w5
    18b8:	00 00 e0    	cp0.w     w0
    18ba:	e8 ff 3a    	bra       NZ, 0x188c <.L14>
    18bc:	3f b2 97    	mov.w     [w15-26], w4
    18be:	85 0f 55    	sub.w     w10, w5, [w15]
    18c0:	05 00 3a    	bra       NZ, 0x18cc <.L15>
    18c2:	60 44 b8    	mul.uu    w8, #0x0, w8
    18c4:	0c 00 e0    	cp0.w     w12
    18c6:	27 00 32    	bra       Z, 0x1916 <.L7>
    18c8:	ff b2 97    	mov.w     [w15-18], w5
    18ca:	24 00 37    	bra       0x1914 <.L24>

000018cc <.L15>:
    18cc:	04 82 52    	sub.w     w5, w4, w4
    18ce:	70 da 21    	mov.w     #0x1da7, w0
    18d0:	60 c0 7d    	mov.b     [w0+w11], w0
    18d2:	00 00 fb    	se        w0, w0
    18d4:	00 02 52    	sub.w     w4, w0, w4
    18d6:	17 00 33    	bra       N, 0x1906 <.L16>
    18d8:	11 00 3a    	bra       NZ, 0x18fc <.L17>
    18da:	4f e9 97    	mov.b     [w15-20], w2
    18dc:	02 00 fb    	se        w2, w0
    18de:	cf 80 de    	asr.w     w0, #0xf, w1
    18e0:	00 00 54    	sub.w     w8, w0, w0
    18e2:	81 80 5c    	subb.w    w9, w1, w1
    18e4:	80 0f 54    	sub.w     w8, w0, [w15]
    18e6:	81 8f 5c    	subb.w    w9, w1, [w15]
    18e8:	09 00 39    	bra       NC, 0x18fc <.L17>
    18ea:	61 59 b9    	mul.su    w11, #0x1, w2
    18ec:	85 bf 9f    	mov.w     w5, [w15-16]
    18ee:	c7 07 07    	rcall     0x287e <___udivsi3>
    18f0:	8f ba 97    	mov.w     [w15-16], w5
    18f2:	4f b1 97    	mov.w     [w15-24], w2
    18f4:	df b1 97    	mov.w     [w15-22], w3
    18f6:	82 0f 50    	sub.w     w0, w2, [w15]
    18f8:	83 8f 58    	subb.w    w1, w3, [w15]
    18fa:	05 00 32    	bra       Z, 0x1906 <.L16>

000018fc <.L17>:
    18fc:	20 02 20    	mov.w     #0x22, w0
    18fe:	10 f8 88    	mov.w     w0, 0x1f02
    1900:	00 84 eb    	setm.w    w8
    1902:	80 84 eb    	setm.w    w9
    1904:	05 00 37    	bra       0x1910 <.L18>

00001906 <.L16>:
    1906:	d0 c2 b3    	mov.b     #0x2d, w0
    1908:	80 cf 56    	sub.b     w13, w0, [w15]
    190a:	02 00 3a    	bra       NZ, 0x1910 <.L18>
    190c:	60 04 14    	subr.w    w8, #0x0, w8
    190e:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001910 <.L18>:
    1910:	0c 00 e0    	cp0.w     w12
    1912:	01 00 32    	bra       Z, 0x1916 <.L7>

00001914 <.L24>:
    1914:	05 0e 78    	mov.w     w5, [w12]

00001916 <.L7>:
    1916:	08 00 be    	mov.d     w8, w0
    1918:	4f 07 78    	mov.w     [--w15], w14
    191a:	4f 06 be    	mov.d     [--w15], w12
    191c:	4f 05 be    	mov.d     [--w15], w10
    191e:	4f 04 be    	mov.d     [--w15], w8
    1920:	ef 00 b1    	sub.w     #0xe, w15
    1922:	00 00 06    	return    

00001924 <__Stoull>:
    1924:	0f 02 b0    	add.w     #0x20, w15
    1926:	88 9f be    	mov.d     w8, [w15++]
    1928:	8a 9f be    	mov.d     w10, [w15++]
    192a:	8c 9f be    	mov.d     w12, [w15++]
    192c:	8e 1f 78    	mov.w     w14, [w15++]
    192e:	80 b7 9f    	mov.w     w0, [w15-32]
    1930:	01 07 78    	mov.w     w1, w14
    1932:	82 06 78    	mov.w     w2, w13
    1934:	00 04 78    	mov.w     w0, w8

00001936 <.L2>:
    1936:	08 06 78    	mov.w     w8, w12
    1938:	0c 04 78    	mov.w     w12, w8
    193a:	38 40 78    	mov.b     [w8++], w0
    193c:	e0 e7 9f    	mov.b     w0, [w15-26]
    193e:	80 40 78    	mov.b     w0, w1
    1940:	01 00 fb    	se        w1, w0
    1942:	b6 00 07    	rcall     0x1ab0 <_isspace>
    1944:	00 00 e0    	cp0.w     w0
    1946:	f7 ff 3a    	bra       NZ, 0x1936 <.L2>
    1948:	d0 c2 b3    	mov.b     #0x2d, w0
    194a:	6f e1 97    	mov.b     [w15-26], w2
    194c:	80 4f 51    	sub.b     w2, w0, [w15]
    194e:	03 00 32    	bra       Z, 0x1956 <.L3>
    1950:	00 c0 e9    	dec2.b    w0, w0
    1952:	80 4f 51    	sub.b     w2, w0, [w15]
    1954:	02 00 3a    	bra       NZ, 0x195a <.L19>

00001956 <.L3>:
    1956:	0c 06 e8    	inc.w     w12, w12
    1958:	01 00 37    	bra       0x195c <.L4>

0000195a <.L19>:
    195a:	e0 e7 9f    	mov.b     w0, [w15-26]

0000195c <.L4>:
    195c:	0d 00 e0    	cp0.w     w13
    195e:	05 00 35    	bra       LT, 0x196a <.L5>
    1960:	e1 8f 56    	sub.w     w13, #0x1, [w15]
    1962:	03 00 32    	bra       Z, 0x196a <.L5>
    1964:	40 02 20    	mov.w     #0x24, w0
    1966:	80 8f 56    	sub.w     w13, w0, [w15]
    1968:	07 00 34    	bra       LE, 0x1978 <.L6>

0000196a <.L5>:
    196a:	60 44 b8    	mul.uu    w8, #0x0, w8
    196c:	60 55 b8    	mul.uu    w10, #0x0, w10
    196e:	0e 00 e0    	cp0.w     w14
    1970:	97 00 32    	bra       Z, 0x1aa0 <.L7>
    1972:	0f b2 97    	mov.w     [w15-32], w4
    1974:	04 0f 78    	mov.w     w4, [w14]
    1976:	94 00 37    	bra       0x1aa0 <.L7>

00001978 <.L6>:
    1978:	0d 00 e0    	cp0.w     w13
    197a:	0e 00 32    	bra       Z, 0x1998 <.L8>
    197c:	f0 8f 56    	sub.w     w13, #0x10, [w15]
    197e:	1a 00 3a    	bra       NZ, 0x19b4 <.L9>
    1980:	00 c3 b3    	mov.b     #0x30, w0
    1982:	9c 4f 10    	subr.b    w0, [w12], [w15]
    1984:	17 00 3a    	bra       NZ, 0x19b4 <.L9>
    1986:	1c 40 90    	mov.b     [w12+1], w0
    1988:	81 c7 b3    	mov.b     #0x78, w1
    198a:	81 4f 50    	sub.b     w0, w1, [w15]
    198c:	03 00 32    	bra       Z, 0x1994 <.L10>
    198e:	81 c5 b3    	mov.b     #0x58, w1
    1990:	81 4f 50    	sub.b     w0, w1, [w15]
    1992:	10 00 3a    	bra       NZ, 0x19b4 <.L9>

00001994 <.L10>:
    1994:	0c 86 e8    	inc2.w    w12, w12
    1996:	0e 00 37    	bra       0x19b4 <.L9>

00001998 <.L8>:
    1998:	ad 00 20    	mov.w     #0xa, w13
    199a:	00 c3 b3    	mov.b     #0x30, w0
    199c:	9c 4f 10    	subr.b    w0, [w12], [w15]
    199e:	0a 00 3a    	bra       NZ, 0x19b4 <.L9>
    19a0:	1c 40 90    	mov.b     [w12+1], w0
    19a2:	81 c7 b3    	mov.b     #0x78, w1
    19a4:	81 4f 50    	sub.b     w0, w1, [w15]
    19a6:	04 00 32    	bra       Z, 0x19b0 <.L11>
    19a8:	8d 00 20    	mov.w     #0x8, w13
    19aa:	81 c5 b3    	mov.b     #0x58, w1
    19ac:	81 4f 50    	sub.b     w0, w1, [w15]
    19ae:	02 00 3a    	bra       NZ, 0x19b4 <.L9>

000019b0 <.L11>:
    19b0:	0c 86 e8    	inc2.w    w12, w12
    19b2:	0d 01 20    	mov.w     #0x10, w13

000019b4 <.L9>:
    19b4:	0c 00 78    	mov.w     w12, w0

000019b6 <.L12>:
    19b6:	80 00 78    	mov.w     w0, w1
    19b8:	01 00 78    	mov.w     w1, w0
    19ba:	02 c3 b3    	mov.b     #0x30, w2
    19bc:	b0 4f 11    	subr.b    w2, [w0++], [w15]
    19be:	fb ff 32    	bra       Z, 0x19b6 <.L12>
    19c0:	e1 af 9f    	mov.w     w1, [w15-36]
    19c2:	81 02 78    	mov.w     w1, w5
    19c4:	95 b7 9f    	mov.w     w5, [w15-30]
    19c6:	60 44 b8    	mul.uu    w8, #0x0, w8
    19c8:	60 55 b8    	mul.uu    w10, #0x0, w10
    19ca:	8c bf 9f    	mov.w     w12, [w15-16]
    19cc:	1c 00 37    	bra       0x1a06 <.L13>

000019ce <.L14>:
    19ce:	01 e8 21    	mov.w     #0x1e80, w1
    19d0:	81 40 50    	sub.b     w0, w1, w1
    19d2:	e1 df 9f    	mov.b     w1, [w15-34]
    19d4:	61 6a b9    	mul.su    w13, #0x1, w4
    19d6:	61 2b b9    	mul.su    w5, #0x1, w6
    19d8:	08 00 be    	mov.d     w8, w0
    19da:	0a 01 be    	mov.d     w10, w2
    19dc:	6b 08 07    	rcall     0x2ab4 <___muldi3>
    19de:	ef da 97    	mov.b     [w15-34], w5
    19e0:	05 02 fb    	se        w5, w4
    19e2:	cf a2 de    	asr.w     w4, #0xf, w5
    19e4:	61 2b b9    	mul.su    w5, #0x1, w6
    19e6:	c4 b7 9f    	mov.w     w4, [w15-24]
    19e8:	d5 b7 9f    	mov.w     w5, [w15-22]
    19ea:	e6 b7 9f    	mov.w     w6, [w15-20]
    19ec:	f7 b7 9f    	mov.w     w7, [w15-18]
    19ee:	a8 af 9f    	mov.w     w8, [w15-44]
    19f0:	b9 af 9f    	mov.w     w9, [w15-42]
    19f2:	ca af 9f    	mov.w     w10, [w15-40]
    19f4:	db af 9f    	mov.w     w11, [w15-38]
    19f6:	4f b2 97    	mov.w     [w15-24], w4
    19f8:	df b2 97    	mov.w     [w15-22], w5
    19fa:	6f b3 97    	mov.w     [w15-20], w6
    19fc:	ff b3 97    	mov.w     [w15-18], w7
    19fe:	00 04 42    	add.w     w4, w0, w8
    1a00:	81 84 4a    	addc.w    w5, w1, w9
    1a02:	02 05 4b    	addc.w    w6, w2, w10
    1a04:	83 85 4b    	addc.w    w7, w3, w11

00001a06 <.L13>:
    1a06:	9f b2 97    	mov.w     [w15-30], w5
    1a08:	a5 b7 9f    	mov.w     w5, [w15-28]
    1a0a:	05 03 78    	mov.w     w5, w6
    1a0c:	36 00 fb    	se        [w6++], w0
    1a0e:	96 b7 9f    	mov.w     w6, [w15-30]
    1a10:	57 00 07    	rcall     0x1ac0 <_tolower>
    1a12:	0d 01 78    	mov.w     w13, w2
    1a14:	80 00 78    	mov.w     w0, w1
    1a16:	00 e8 21    	mov.w     #0x1e80, w0
    1a18:	56 04 07    	rcall     0x22c6 <_memchr>
    1a1a:	00 00 e0    	cp0.w     w0
    1a1c:	d8 ff 3a    	bra       NZ, 0x19ce <.L14>
    1a1e:	0f be 97    	mov.w     [w15-16], w12
    1a20:	af b3 97    	mov.w     [w15-28], w7
    1a22:	87 0f 56    	sub.w     w12, w7, [w15]
    1a24:	07 00 3a    	bra       NZ, 0x1a34 <.L15>
    1a26:	60 44 b8    	mul.uu    w8, #0x0, w8
    1a28:	60 55 b8    	mul.uu    w10, #0x0, w10
    1a2a:	0e 00 e0    	cp0.w     w14
    1a2c:	39 00 32    	bra       Z, 0x1aa0 <.L7>
    1a2e:	0f b6 97    	mov.w     [w15-32], w12
    1a30:	0c 0f 78    	mov.w     w12, [w14]
    1a32:	36 00 37    	bra       0x1aa0 <.L7>

00001a34 <.L15>:
    1a34:	2f b0 97    	mov.w     [w15-28], w0
    1a36:	6f a9 97    	mov.w     [w15-36], w2
    1a38:	82 00 50    	sub.w     w0, w2, w1
    1a3a:	50 ea 21    	mov.w     #0x1ea5, w0
    1a3c:	60 c0 7e    	mov.b     [w0+w13], w0
    1a3e:	00 00 fb    	se        w0, w0
    1a40:	00 80 50    	sub.w     w1, w0, w0
    1a42:	20 00 33    	bra       N, 0x1a84 <.L16>
    1a44:	19 00 3a    	bra       NZ, 0x1a78 <.L17>
    1a46:	6f da 97    	mov.b     [w15-34], w4
    1a48:	04 00 fb    	se        w4, w0
    1a4a:	cf 80 de    	asr.w     w0, #0xf, w1
    1a4c:	61 09 b9    	mul.su    w1, #0x1, w2
    1a4e:	00 00 54    	sub.w     w8, w0, w0
    1a50:	81 80 5c    	subb.w    w9, w1, w1
    1a52:	02 01 5d    	subb.w    w10, w2, w2
    1a54:	83 81 5d    	subb.w    w11, w3, w3
    1a56:	00 40 e1    	cp.w      w8, w0
    1a58:	01 c8 e1    	cpb.w     w9, w1
    1a5a:	02 d0 e1    	cpb.w     w10, w2
    1a5c:	03 d8 e1    	cpb.w     w11, w3
    1a5e:	0c 00 39    	bra       NC, 0x1a78 <.L17>
    1a60:	61 6a b9    	mul.su    w13, #0x1, w4
    1a62:	61 2b b9    	mul.su    w5, #0x1, w6
    1a64:	be 07 07    	rcall     0x29e2 <___udivdi3>
    1a66:	2f aa 97    	mov.w     [w15-44], w4
    1a68:	bf aa 97    	mov.w     [w15-42], w5
    1a6a:	4f ab 97    	mov.w     [w15-40], w6
    1a6c:	df ab 97    	mov.w     [w15-38], w7
    1a6e:	04 00 e1    	cp.w      w0, w4
    1a70:	05 88 e1    	cpb.w     w1, w5
    1a72:	06 90 e1    	cpb.w     w2, w6
    1a74:	07 98 e1    	cpb.w     w3, w7
    1a76:	06 00 32    	bra       Z, 0x1a84 <.L16>

00001a78 <.L17>:
    1a78:	20 02 20    	mov.w     #0x22, w0
    1a7a:	10 f8 88    	mov.w     w0, 0x1f02
    1a7c:	f8 ff 2f    	mov.w     #0xffff, w8
    1a7e:	f9 ff 2f    	mov.w     #0xffff, w9
    1a80:	08 05 be    	mov.d     w8, w10
    1a82:	0a 00 37    	bra       0x1a98 <.L18>

00001a84 <.L16>:
    1a84:	d0 c2 b3    	mov.b     #0x2d, w0
    1a86:	ef e2 97    	mov.b     [w15-26], w5
    1a88:	80 cf 52    	sub.b     w5, w0, [w15]
    1a8a:	06 00 3a    	bra       NZ, 0x1a98 <.L18>
    1a8c:	60 00 b8    	mul.uu    w0, #0x0, w0
    1a8e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1a90:	08 04 50    	sub.w     w0, w8, w8
    1a92:	89 84 58    	subb.w    w1, w9, w9
    1a94:	0a 05 59    	subb.w    w2, w10, w10
    1a96:	8b 85 59    	subb.w    w3, w11, w11

00001a98 <.L18>:
    1a98:	0e 00 e0    	cp0.w     w14
    1a9a:	02 00 32    	bra       Z, 0x1aa0 <.L7>
    1a9c:	2f b3 97    	mov.w     [w15-28], w6
    1a9e:	06 0f 78    	mov.w     w6, [w14]

00001aa0 <.L7>:
    1aa0:	08 00 be    	mov.d     w8, w0
    1aa2:	0a 01 be    	mov.d     w10, w2
    1aa4:	4f 07 78    	mov.w     [--w15], w14
    1aa6:	4f 06 be    	mov.d     [--w15], w12
    1aa8:	4f 05 be    	mov.d     [--w15], w10
    1aaa:	4f 04 be    	mov.d     [--w15], w8
    1aac:	0f 02 b1    	sub.w     #0x20, w15
    1aae:	00 00 06    	return    

00001ab0 <_isspace>:
    1ab0:	69 00 e1    	cp.w      w0, #0x9
    1ab2:	04 00 35    	bra       LT, 0x1abc <nomatch>
    1ab4:	6d 00 e1    	cp.w      w0, #0xd
    1ab6:	03 00 34    	bra       LE, 0x1abe <match>
    1ab8:	00 02 b1    	sub.w     #0x20, w0
    1aba:	01 00 32    	bra       Z, 0x1abe <match>

00001abc <nomatch>:
    1abc:	00 00 05    	retlw.w   #0x0, w0

00001abe <match>:
    1abe:	10 00 05    	retlw.w   #0x1, w0

00001ac0 <_tolower>:
    1ac0:	80 00 78    	mov.w     w0, w1
    1ac2:	11 04 b1    	sub.w     #0x41, w1
    1ac4:	03 00 35    	bra       LT, 0x1acc <nomatch>
    1ac6:	91 01 b1    	sub.w     #0x19, w1
    1ac8:	01 00 3c    	bra       GT, 0x1acc <nomatch>

00001aca <match>:
    1aca:	00 50 a0    	bset.w    w0, #0x5

00001acc <nomatch>:
    1acc:	00 00 06    	return    

00001ace <__Geterrno>:
    1ace:	20 f8 80    	mov.w     0x1f04, w0
    1ad0:	00 00 e0    	cp0.w     w0
    1ad2:	01 00 32    	bra       Z, 0x1ad6 <.L2>
    1ad4:	00 00 01    	call      w0

00001ad6 <.L2>:
    1ad6:	20 f0 21    	mov.w     #0x1f02, w0
    1ad8:	00 00 06    	return    

00001ada <_fputc>:
    1ada:	88 9f be    	mov.d     w8, [w15++]
    1adc:	8a 1f 78    	mov.w     w10, [w15++]
    1ade:	00 04 be    	mov.d     w0, w8
    1ae0:	c9 00 90    	mov.w     [w9+8], w1
    1ae2:	69 00 90    	mov.w     [w9+12], w0
    1ae4:	80 8f 50    	sub.w     w1, w0, [w15]
    1ae6:	05 00 39    	bra       NC, 0x1af2 <.L2>
    1ae8:	09 00 78    	mov.w     w9, w0
    1aea:	13 04 07    	rcall     0x2312 <__Fwprep>
    1aec:	80 80 eb    	setm.w    w1
    1aee:	00 00 e0    	cp0.w     w0
    1af0:	16 00 35    	bra       LT, 0x1b1e <.L3>

00001af2 <.L2>:
    1af2:	08 45 78    	mov.b     w8, w10
    1af4:	49 00 90    	mov.w     [w9+8], w0
    1af6:	08 58 78    	mov.b     w8, [w0++]
    1af8:	c0 04 98    	mov.w     w0, [w9+8]
    1afa:	19 00 78    	mov.w     [w9], w0
    1afc:	00 b8 a3    	btst.z    w0, #0xb
    1afe:	04 00 3a    	bra       NZ, 0x1b08 <.L4>
    1b00:	00 a8 a3    	btst.z    w0, #0xa
    1b02:	07 00 32    	bra       Z, 0x1b12 <.L5>
    1b04:	ea 4f 54    	sub.b     w8, #0xa, [w15]
    1b06:	05 00 3a    	bra       NZ, 0x1b12 <.L5>

00001b08 <.L4>:
    1b08:	09 00 78    	mov.w     w9, w0
    1b0a:	d4 02 07    	rcall     0x20b4 <__DNKfflush>
    1b0c:	80 80 eb    	setm.w    w1
    1b0e:	00 00 e0    	cp0.w     w0
    1b10:	06 00 3a    	bra       NZ, 0x1b1e <.L3>

00001b12 <.L5>:
    1b12:	00 c0 20    	mov.w     #0xc00, w0
    1b14:	19 00 60    	and.w     w0, [w9], w0
    1b16:	02 00 32    	bra       Z, 0x1b1c <.L6>
    1b18:	49 00 90    	mov.w     [w9+8], w0
    1b1a:	e0 04 98    	mov.w     w0, [w9+12]

00001b1c <.L6>:
    1b1c:	8a 80 fb    	ze        w10, w1

00001b1e <.L3>:
    1b1e:	01 00 78    	mov.w     w1, w0
    1b20:	4f 05 78    	mov.w     [--w15], w10
    1b22:	4f 04 be    	mov.d     [--w15], w8
    1b24:	00 00 06    	return    

00001b26 <_prout>:
    1b26:	88 1f 78    	mov.w     w8, [w15++]
    1b28:	02 04 78    	mov.w     w2, w8
    1b2a:	08 01 78    	mov.w     w8, w2
    1b2c:	92 fd 07    	rcall     0x1652 <_memcpy>
    1b2e:	08 00 40    	add.w     w0, w8, w0
    1b30:	4f 04 78    	mov.w     [--w15], w8
    1b32:	00 00 06    	return    

00001b34 <__sprintf_cdnopuxX>:
    1b34:	00 00 fa    	lnk       #0x0
    1b36:	88 1f 78    	mov.w     w8, [w15++]
    1b38:	00 04 78    	mov.w     w0, w8
    1b3a:	ea 81 57    	sub.w     w15, #0xa, w3
    1b3c:	3f b9 97    	mov.w     [w15-10], w2
    1b3e:	88 00 78    	mov.w     w8, w1
    1b40:	60 b2 21    	mov.w     #0x1b26, w0
    1b42:	07 00 07    	rcall     0x1b52 <___Printf_cdnopuxX>
    1b44:	00 00 e0    	cp0.w     w0
    1b46:	02 00 35    	bra       LT, 0x1b4c <.L3>
    1b48:	80 40 eb    	clr.b     w1
    1b4a:	01 74 78    	mov.b     w1, [w8+w0]

00001b4c <.L3>:
    1b4c:	4f 04 78    	mov.w     [--w15], w8
    1b4e:	00 80 fa    	ulnk      
    1b50:	00 00 06    	return    

00001b52 <___Printf_cdnopuxX>:
    1b52:	62 00 fa    	lnk       #0x62
    1b54:	88 9f be    	mov.d     w8, [w15++]
    1b56:	8a 1f 78    	mov.w     w10, [w15++]
    1b58:	00 05 78    	mov.w     w0, w10
    1b5a:	81 04 78    	mov.w     w1, w9
    1b5c:	02 04 78    	mov.w     w2, w8
    1b5e:	83 00 78    	mov.w     w3, w1
    1b60:	80 f9 2f    	mov.w     #0xff98, w0
    1b62:	0f 00 40    	add.w     w0, w15, w0
    1b64:	08 06 07    	rcall     0x2776 <__Vacopy>
    1b66:	9a 97 9f    	mov.w     w10, [w15-94]
    1b68:	a9 97 9f    	mov.w     w9, [w15-92]
    1b6a:	00 00 eb    	clr.w     w0
    1b6c:	b0 9f 9f    	mov.w     w0, [w15-74]

00001b6e <.L31>:
    1b6e:	18 85 fb    	ze        [w8], w10
    1b70:	8a 04 fb    	se        w10, w9
    1b72:	0a 05 ea    	neg.w     w10, w10
    1b74:	4f 55 de    	lsr.w     w10, #0xf, w10
    1b76:	50 02 20    	mov.w     #0x25, w0
    1b78:	80 8f 54    	sub.w     w9, w0, [w15]
    1b7a:	0d 00 32    	bra       Z, 0x1b96 <.L3>
    1b7c:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    1b7e:	0b 00 3a    	bra       NZ, 0x1b96 <.L3>
    1b80:	0a 01 78    	mov.w     w10, w2
    1b82:	88 00 78    	mov.w     w8, w1
    1b84:	2f 90 97    	mov.w     [w15-92], w0
    1b86:	9f 91 97    	mov.w     [w15-94], w3
    1b88:	03 00 01    	call      w3
    1b8a:	a0 97 9f    	mov.w     w0, [w15-92]
    1b8c:	00 00 e0    	cp0.w     w0
    1b8e:	8e 00 32    	bra       Z, 0x1cac <.L27>
    1b90:	3f 98 97    	mov.w     [w15-74], w0
    1b92:	00 00 e8    	inc.w     w0, w0
    1b94:	b0 9f 9f    	mov.w     w0, [w15-74]

00001b96 <.L3>:
    1b96:	0a 04 44    	add.w     w8, w10, w8
    1b98:	50 02 20    	mov.w     #0x25, w0
    1b9a:	80 8f 54    	sub.w     w9, w0, [w15]
    1b9c:	04 00 32    	bra       Z, 0x1ba6 <.L5>
    1b9e:	09 00 e0    	cp0.w     w9
    1ba0:	e6 ff 3a    	bra       NZ, 0x1b6e <.L31>
    1ba2:	3f 98 97    	mov.w     [w15-74], w0
    1ba4:	84 00 37    	bra       0x1cae <.L4>

00001ba6 <.L5>:
    1ba6:	00 00 eb    	clr.w     w0
    1ba8:	90 9f 9f    	mov.w     w0, [w15-78]
    1baa:	80 9f 9f    	mov.w     w0, [w15-80]
    1bac:	f0 97 9f    	mov.w     w0, [w15-82]
    1bae:	e0 97 9f    	mov.w     w0, [w15-84]
    1bb0:	d0 97 9f    	mov.w     w0, [w15-86]
    1bb2:	c0 97 9f    	mov.w     w0, [w15-88]
    1bb4:	07 00 37    	bra       0x1bc4 <.L34>

00001bb6 <.L8>:
    1bb6:	e1 ed 21    	mov.w     #0x1ede, w1
    1bb8:	01 00 50    	sub.w     w0, w1, w0
    1bba:	00 00 40    	add.w     w0, w0, w0
    1bbc:	21 ed 21    	mov.w     #0x1ed2, w1
    1bbe:	61 00 78    	mov.w     [w1+w0], w0
    1bc0:	df 98 97    	mov.w     [w15-70], w1
    1bc2:	01 00 70    	ior.w     w0, w1, w0

00001bc4 <.L34>:
    1bc4:	d0 9f 9f    	mov.w     w0, [w15-70]
    1bc6:	88 04 78    	mov.w     w8, w9
    1bc8:	09 04 78    	mov.w     w9, w8
    1bca:	38 45 78    	mov.b     [w8++], w10
    1bcc:	8a 00 fb    	se        w10, w1
    1bce:	e0 ed 21    	mov.w     #0x1ede, w0
    1bd0:	84 03 07    	rcall     0x22da <_strchr>
    1bd2:	00 00 e0    	cp0.w     w0
    1bd4:	f0 ff 3a    	bra       NZ, 0x1bb6 <.L8>
    1bd6:	a1 c2 b3    	mov.b     #0x2a, w1
    1bd8:	81 4f 55    	sub.b     w10, w1, [w15]
    1bda:	0e 00 3a    	bra       NZ, 0x1bf8 <.L9>
    1bdc:	cf 88 97    	mov.w     [w15-104], w1
    1bde:	01 80 e9    	dec2.w    w1, w0
    1be0:	c0 8f 9f    	mov.w     w0, [w15-104]
    1be2:	10 00 78    	mov.w     [w0], w0
    1be4:	c0 9f 9f    	mov.w     w0, [w15-72]
    1be6:	00 00 e0    	cp0.w     w0
    1be8:	05 00 3d    	bra       GE, 0x1bf4 <.L10>
    1bea:	00 00 ea    	neg.w     w0, w0
    1bec:	c0 9f 9f    	mov.w     w0, [w15-72]
    1bee:	5f 98 97    	mov.w     [w15-70], w0
    1bf0:	00 20 a0    	bset.w    w0, #0x2
    1bf2:	d0 9f 9f    	mov.w     w0, [w15-70]

00001bf4 <.L10>:
    1bf4:	09 04 e8    	inc.w     w9, w8
    1bf6:	0f 00 37    	bra       0x1c16 <.L11>

00001bf8 <.L9>:
    1bf8:	c0 9f 9f    	mov.w     w0, [w15-72]
    1bfa:	00 00 eb    	clr.w     w0
    1bfc:	05 00 37    	bra       0x1c08 <.L32>

00001bfe <.L14>:
    1bfe:	f2 ff 27    	mov.w     #0x7fff, w2
    1c00:	82 0f 50    	sub.w     w0, w2, [w15]
    1c02:	02 00 32    	bra       Z, 0x1c08 <.L32>
    1c04:	6a 01 b9    	mul.su    w0, #0xa, w2
    1c06:	02 80 40    	add.w     w1, w2, w0

00001c08 <.L32>:
    1c08:	09 04 78    	mov.w     w9, w8
    1c0a:	88 04 78    	mov.w     w8, w9
    1c0c:	b9 00 fb    	se        [w9++], w1
    1c0e:	01 03 b1    	sub.w     #0x30, w1
    1c10:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1c12:	f5 ff 36    	bra       LEU, 0x1bfe <.L14>
    1c14:	c0 9f 9f    	mov.w     w0, [w15-72]

00001c16 <.L11>:
    1c16:	e0 c2 b3    	mov.b     #0x2e, w0
    1c18:	98 4f 10    	subr.b    w0, [w8], [w15]
    1c1a:	02 00 32    	bra       Z, 0x1c20 <.L15>
    1c1c:	00 80 eb    	setm.w    w0
    1c1e:	19 00 37    	bra       0x1c52 <.L35>

00001c20 <.L15>:
    1c20:	a0 c2 b3    	mov.b     #0x2a, w0
    1c22:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1c24:	07 00 3a    	bra       NZ, 0x1c34 <.L17>
    1c26:	cf 88 97    	mov.w     [w15-104], w1
    1c28:	01 80 e9    	dec2.w    w1, w0
    1c2a:	c0 8f 9f    	mov.w     w0, [w15-104]
    1c2c:	10 00 78    	mov.w     [w0], w0
    1c2e:	a0 9f 9f    	mov.w     w0, [w15-76]
    1c30:	08 04 e8    	inc.w     w8, w8
    1c32:	10 00 37    	bra       0x1c54 <.L16>

00001c34 <.L17>:
    1c34:	00 00 eb    	clr.w     w0
    1c36:	a0 9f 9f    	mov.w     w0, [w15-76]
    1c38:	88 00 78    	mov.w     w8, w1
    1c3a:	05 00 37    	bra       0x1c46 <.L33>

00001c3c <.L20>:
    1c3c:	f3 ff 27    	mov.w     #0x7fff, w3
    1c3e:	83 0f 50    	sub.w     w0, w3, [w15]
    1c40:	02 00 32    	bra       Z, 0x1c46 <.L33>
    1c42:	6a 02 b9    	mul.su    w0, #0xa, w4
    1c44:	04 00 41    	add.w     w2, w4, w0

00001c46 <.L33>:
    1c46:	01 04 78    	mov.w     w1, w8
    1c48:	88 00 78    	mov.w     w8, w1
    1c4a:	31 01 fb    	se        [w1++], w2
    1c4c:	02 03 b1    	sub.w     #0x30, w2
    1c4e:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1c50:	f5 ff 36    	bra       LEU, 0x1c3c <.L20>

00001c52 <.L35>:
    1c52:	a0 9f 9f    	mov.w     w0, [w15-76]

00001c54 <.L16>:
    1c54:	98 44 78    	mov.b     [w8], w9
    1c56:	89 00 fb    	se        w9, w1
    1c58:	a0 ec 21    	mov.w     #0x1eca, w0
    1c5a:	3f 03 07    	rcall     0x22da <_strchr>
    1c5c:	00 00 e0    	cp0.w     w0
    1c5e:	02 00 32    	bra       Z, 0x1c64 <.L25>
    1c60:	08 04 e8    	inc.w     w8, w8
    1c62:	01 00 37    	bra       0x1c66 <.L21>

00001c64 <.L25>:
    1c64:	80 44 eb    	clr.b     w9

00001c66 <.L21>:
    1c66:	c9 7f 9f    	mov.b     w9, [w15-68]
    1c68:	80 c6 b3    	mov.b     #0x68, w0
    1c6a:	80 cf 54    	sub.b     w9, w0, [w15]
    1c6c:	04 00 3a    	bra       NZ, 0x1c76 <.L22>
    1c6e:	98 cf 14    	subr.b    w9, [w8], [w15]
    1c70:	0a 00 3a    	bra       NZ, 0x1c86 <.L23>
    1c72:	66 40 50    	sub.b     w0, #0x6, w0
    1c74:	06 00 37    	bra       0x1c82 <.L36>

00001c76 <.L22>:
    1c76:	c0 c6 b3    	mov.b     #0x6c, w0
    1c78:	80 cf 54    	sub.b     w9, w0, [w15]
    1c7a:	05 00 3a    	bra       NZ, 0x1c86 <.L23>
    1c7c:	98 cf 14    	subr.b    w9, [w8], [w15]
    1c7e:	03 00 3a    	bra       NZ, 0x1c86 <.L23>
    1c80:	65 40 40    	add.b     w0, #0x5, w0

00001c82 <.L36>:
    1c82:	c0 7f 9f    	mov.b     w0, [w15-68]
    1c84:	08 04 e8    	inc.w     w8, w8

00001c86 <.L23>:
    1c86:	18 01 fb    	se        [w8], w2
    1c88:	e3 fb 2f    	mov.w     #0xffbe, w3
    1c8a:	8f 81 41    	add.w     w3, w15, w3
    1c8c:	81 f9 2f    	mov.w     #0xff98, w1
    1c8e:	8f 80 40    	add.w     w1, w15, w1
    1c90:	a0 f9 2f    	mov.w     #0xff9a, w0
    1c92:	0f 00 40    	add.w     w0, w15, w0
    1c94:	10 00 07    	rcall     0x1cb6 <___Putfld_cdnopuxX>
    1c96:	00 00 e0    	cp0.w     w0
    1c98:	09 00 3a    	bra       NZ, 0x1cac <.L27>
    1c9a:	e1 fb 2f    	mov.w     #0xffbe, w1
    1c9c:	8f 80 40    	add.w     w1, w15, w1
    1c9e:	a0 f9 2f    	mov.w     #0xff9a, w0
    1ca0:	0f 00 40    	add.w     w0, w15, w0
    1ca2:	ad 04 07    	rcall     0x25fe <__Puttxt>
    1ca4:	00 00 e0    	cp0.w     w0
    1ca6:	02 00 35    	bra       LT, 0x1cac <.L27>
    1ca8:	08 04 e8    	inc.w     w8, w8
    1caa:	61 ff 37    	bra       0x1b6e <.L31>

00001cac <.L27>:
    1cac:	00 80 eb    	setm.w    w0

00001cae <.L4>:
    1cae:	4f 05 78    	mov.w     [--w15], w10
    1cb0:	4f 04 be    	mov.d     [--w15], w8
    1cb2:	00 80 fa    	ulnk      
    1cb4:	00 00 06    	return    

00001cb6 <___Putfld_cdnopuxX>:
    1cb6:	88 1f 78    	mov.w     w8, [w15++]
    1cb8:	e4 c6 b3    	mov.b     #0x6e, w4
    1cba:	84 4f 51    	sub.b     w2, w4, [w15]
    1cbc:	b6 00 32    	bra       Z, 0x1e2a <.L7>
    1cbe:	10 00 3c    	bra       GT, 0x1ce0 <.L9>
    1cc0:	6b 42 52    	sub.b     w4, #0xb, w4
    1cc2:	84 4f 51    	sub.b     w2, w4, [w15]
    1cc4:	18 00 32    	bra       Z, 0x1cf6 <.L5>
    1cc6:	05 00 3c    	bra       GT, 0x1cd2 <.L10>
    1cc8:	54 c2 b3    	mov.b     #0x25, w4
    1cca:	84 4f 51    	sub.b     w2, w4, [w15]
    1ccc:	ee 00 32    	bra       Z, 0x1eaa <.L3>
    1cce:	84 c5 b3    	mov.b     #0x58, w4
    1cd0:	0f 00 37    	bra       0x1cf0 <.L47>

00001cd2 <.L10>:
    1cd2:	44 c6 b3    	mov.b     #0x64, w4
    1cd4:	84 4f 51    	sub.b     w2, w4, [w15]
    1cd6:	14 00 32    	bra       Z, 0x1d00 <.L6>
    1cd8:	65 42 42    	add.b     w4, #0x5, w4
    1cda:	84 4f 51    	sub.b     w2, w4, [w15]
    1cdc:	e9 00 3a    	bra       NZ, 0x1eb0 <.L2>
    1cde:	10 00 37    	bra       0x1d00 <.L6>

00001ce0 <.L9>:
    1ce0:	04 c7 b3    	mov.b     #0x70, w4
    1ce2:	84 4f 51    	sub.b     w2, w4, [w15]
    1ce4:	d5 00 32    	bra       Z, 0x1e90 <.L8>
    1ce6:	53 00 35    	bra       LT, 0x1d8e <.L4>
    1ce8:	65 42 42    	add.b     w4, #0x5, w4
    1cea:	84 4f 51    	sub.b     w2, w4, [w15]
    1cec:	50 00 32    	bra       Z, 0x1d8e <.L4>
    1cee:	63 42 42    	add.b     w4, #0x3, w4

00001cf0 <.L47>:
    1cf0:	84 4f 51    	sub.b     w2, w4, [w15]
    1cf2:	de 00 3a    	bra       NZ, 0x1eb0 <.L2>
    1cf4:	4c 00 37    	bra       0x1d8e <.L4>

00001cf6 <.L5>:
    1cf6:	11 81 e9    	dec2.w    [w1], w2
    1cf8:	82 08 78    	mov.w     w2, [w1]
    1cfa:	f0 00 90    	mov.w     [w0+14], w1
    1cfc:	12 41 78    	mov.b     [w2], w2
    1cfe:	d6 00 37    	bra       0x1eac <.L53>

00001d00 <.L6>:
    1d00:	20 62 90    	mov.b     [w0+34], w4
    1d02:	c5 c6 b3    	mov.b     #0x6c, w5
    1d04:	85 4f 52    	sub.b     w4, w5, [w15]
    1d06:	07 00 3a    	bra       NZ, 0x1d16 <.L12>
    1d08:	91 02 78    	mov.w     [w1], w5
    1d0a:	64 82 52    	sub.w     w5, #0x4, w4
    1d0c:	84 08 78    	mov.w     w4, [w1]
    1d0e:	14 02 be    	mov.d     [w4], w4
    1d10:	4f ab de    	asr.w     w5, #0xf, w6
    1d12:	86 03 78    	mov.w     w6, w7
    1d14:	11 00 37    	bra       0x1d38 <.L13>

00001d16 <.L12>:
    1d16:	15 c7 b3    	mov.b     #0x71, w5
    1d18:	85 4f 52    	sub.b     w4, w5, [w15]
    1d1a:	03 00 32    	bra       Z, 0x1d22 <.L43>
    1d1c:	a5 c6 b3    	mov.b     #0x6a, w5
    1d1e:	85 4f 52    	sub.b     w4, w5, [w15]
    1d20:	06 00 3a    	bra       NZ, 0x1d2e <.L15>

00001d22 <.L43>:
    1d22:	91 02 78    	mov.w     [w1], w5
    1d24:	68 82 52    	sub.w     w5, #0x8, w4
    1d26:	84 08 78    	mov.w     w4, [w1]
    1d28:	54 03 be    	mov.d     [++w4], w6
    1d2a:	44 02 be    	mov.d     [--w4], w4
    1d2c:	05 00 37    	bra       0x1d38 <.L13>

00001d2e <.L15>:
    1d2e:	11 82 e9    	dec2.w    [w1], w4
    1d30:	84 08 78    	mov.w     w4, [w1]
    1d32:	14 02 78    	mov.w     [w4], w4
    1d34:	cf a2 de    	asr.w     w4, #0xf, w5
    1d36:	61 2b b9    	mul.su    w5, #0x1, w6

00001d38 <.L13>:
    1d38:	04 98 be    	mov.d     w4, [w0++]
    1d3a:	06 90 be    	mov.d     w6, [w0--]
    1d3c:	a0 60 90    	mov.b     [w0+34], w1
    1d3e:	88 c6 b3    	mov.b     #0x68, w8
    1d40:	88 cf 50    	sub.b     w1, w8, [w15]
    1d42:	0d 00 32    	bra       Z, 0x1d5e <.L19>
    1d44:	28 c6 b3    	mov.b     #0x62, w8
    1d46:	88 cf 50    	sub.b     w1, w8, [w15]
    1d48:	04 00 3a    	bra       NZ, 0x1d52 <.L18>
    1d4a:	04 02 fb    	se        w4, w4
    1d4c:	cf a2 de    	asr.w     w4, #0xf, w5
    1d4e:	61 2b b9    	mul.su    w5, #0x1, w6
    1d50:	08 00 37    	bra       0x1d62 <.L44>

00001d52 <.L18>:
    1d52:	48 c7 b3    	mov.b     #0x74, w8
    1d54:	88 cf 50    	sub.b     w1, w8, [w15]
    1d56:	03 00 32    	bra       Z, 0x1d5e <.L19>
    1d58:	66 44 44    	add.b     w8, #0x6, w8
    1d5a:	88 cf 50    	sub.b     w1, w8, [w15]
    1d5c:	04 00 3a    	bra       NZ, 0x1d66 <.L17>

00001d5e <.L19>:
    1d5e:	cf a2 de    	asr.w     w4, #0xf, w5
    1d60:	61 2b b9    	mul.su    w5, #0x1, w6

00001d62 <.L44>:
    1d62:	04 98 be    	mov.d     w4, [w0++]
    1d64:	06 90 be    	mov.d     w6, [w0--]

00001d66 <.L17>:
    1d66:	30 02 be    	mov.d     [w0++], w4
    1d68:	20 03 be    	mov.d     [w0--], w6
    1d6a:	f0 00 90    	mov.w     [w0+14], w1
    1d6c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1d6e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1d70:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1d72:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1d74:	02 00 3d    	bra       GE, 0x1d7a <.L20>
    1d76:	d4 c2 b3    	mov.b     #0x2d, w4
    1d78:	08 00 37    	bra       0x1d8a <.L45>

00001d7a <.L20>:
    1d7a:	00 12 90    	mov.w     [w0+32], w4
    1d7c:	04 18 a3    	btst.z    w4, #0x1
    1d7e:	02 00 32    	bra       Z, 0x1d84 <.L22>
    1d80:	b4 c2 b3    	mov.b     #0x2b, w4
    1d82:	03 00 37    	bra       0x1d8a <.L45>

00001d84 <.L22>:
    1d84:	04 08 a3    	btst.z    w4, #0x0
    1d86:	4c 00 32    	bra       Z, 0x1e20 <.L31>
    1d88:	04 c2 b3    	mov.b     #0x20, w4

00001d8a <.L45>:
    1d8a:	84 f1 78    	mov.b     w4, [w3+w1]
    1d8c:	47 00 37    	bra       0x1e1c <.L54>

00001d8e <.L4>:
    1d8e:	20 62 90    	mov.b     [w0+34], w4
    1d90:	c5 c6 b3    	mov.b     #0x6c, w5
    1d92:	85 4f 52    	sub.b     w4, w5, [w15]
    1d94:	06 00 3a    	bra       NZ, 0x1da2 <.L23>
    1d96:	91 02 78    	mov.w     [w1], w5
    1d98:	64 82 52    	sub.w     w5, #0x4, w4
    1d9a:	84 08 78    	mov.w     w4, [w1]
    1d9c:	14 02 be    	mov.d     [w4], w4
    1d9e:	60 33 b8    	mul.uu    w6, #0x0, w6
    1da0:	11 00 37    	bra       0x1dc4 <.L24>

00001da2 <.L23>:
    1da2:	15 c7 b3    	mov.b     #0x71, w5
    1da4:	85 4f 52    	sub.b     w4, w5, [w15]
    1da6:	03 00 32    	bra       Z, 0x1dae <.L48>
    1da8:	a5 c6 b3    	mov.b     #0x6a, w5
    1daa:	85 4f 52    	sub.b     w4, w5, [w15]
    1dac:	06 00 3a    	bra       NZ, 0x1dba <.L26>

00001dae <.L48>:
    1dae:	91 02 78    	mov.w     [w1], w5
    1db0:	68 82 52    	sub.w     w5, #0x8, w4
    1db2:	84 08 78    	mov.w     w4, [w1]
    1db4:	54 03 be    	mov.d     [++w4], w6
    1db6:	44 02 be    	mov.d     [--w4], w4
    1db8:	05 00 37    	bra       0x1dc4 <.L24>

00001dba <.L26>:
    1dba:	11 82 e9    	dec2.w    [w1], w4
    1dbc:	84 08 78    	mov.w     w4, [w1]
    1dbe:	14 02 78    	mov.w     [w4], w4
    1dc0:	80 02 eb    	clr.w     w5
    1dc2:	60 33 b8    	mul.uu    w6, #0x0, w6

00001dc4 <.L24>:
    1dc4:	04 98 be    	mov.d     w4, [w0++]
    1dc6:	06 90 be    	mov.d     w6, [w0--]
    1dc8:	a0 60 90    	mov.b     [w0+34], w1
    1dca:	88 c6 b3    	mov.b     #0x68, w8
    1dcc:	88 cf 50    	sub.b     w1, w8, [w15]
    1dce:	0d 00 32    	bra       Z, 0x1dea <.L30>
    1dd0:	28 c6 b3    	mov.b     #0x62, w8
    1dd2:	88 cf 50    	sub.b     w1, w8, [w15]
    1dd4:	04 00 3a    	bra       NZ, 0x1dde <.L29>
    1dd6:	04 82 fb    	ze        w4, w4
    1dd8:	80 02 eb    	clr.w     w5
    1dda:	60 33 b8    	mul.uu    w6, #0x0, w6
    1ddc:	08 00 37    	bra       0x1dee <.L49>

00001dde <.L29>:
    1dde:	48 c7 b3    	mov.b     #0x74, w8
    1de0:	88 cf 50    	sub.b     w1, w8, [w15]
    1de2:	03 00 32    	bra       Z, 0x1dea <.L30>
    1de4:	66 44 44    	add.b     w8, #0x6, w8
    1de6:	88 cf 50    	sub.b     w1, w8, [w15]
    1de8:	04 00 3a    	bra       NZ, 0x1df2 <.L28>

00001dea <.L30>:
    1dea:	80 02 eb    	clr.w     w5
    1dec:	60 33 b8    	mul.uu    w6, #0x0, w6

00001dee <.L49>:
    1dee:	04 98 be    	mov.d     w4, [w0++]
    1df0:	06 90 be    	mov.d     w6, [w0--]

00001df2 <.L28>:
    1df2:	80 10 90    	mov.w     [w0+32], w1
    1df4:	01 38 a3    	btst.z    w1, #0x3
    1df6:	14 00 32    	bra       Z, 0x1e20 <.L31>
    1df8:	30 02 be    	mov.d     [w0++], w4
    1dfa:	20 03 be    	mov.d     [w0--], w6
    1dfc:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1dfe:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1e00:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1e02:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1e04:	0d 00 32    	bra       Z, 0x1e20 <.L31>
    1e06:	81 c7 b3    	mov.b     #0x78, w1
    1e08:	81 4f 51    	sub.b     w2, w1, [w15]
    1e0a:	03 00 32    	bra       Z, 0x1e12 <.L32>
    1e0c:	81 c5 b3    	mov.b     #0x58, w1
    1e0e:	81 4f 51    	sub.b     w2, w1, [w15]
    1e10:	07 00 3a    	bra       NZ, 0x1e20 <.L31>

00001e12 <.L32>:
    1e12:	f0 00 90    	mov.w     [w0+14], w1
    1e14:	04 c3 b3    	mov.b     #0x30, w4
    1e16:	84 f1 78    	mov.b     w4, [w3+w1]
    1e18:	81 00 e8    	inc.w     w1, w1
    1e1a:	82 f1 78    	mov.b     w2, [w3+w1]

00001e1c <.L54>:
    1e1c:	81 00 e8    	inc.w     w1, w1
    1e1e:	71 00 98    	mov.w     w1, [w0+14]

00001e20 <.L31>:
    1e20:	f0 00 90    	mov.w     [w0+14], w1
    1e22:	81 81 41    	add.w     w3, w1, w3
    1e24:	63 00 98    	mov.w     w3, [w0+12]
    1e26:	82 40 78    	mov.b     w2, w1
    1e28:	3e 00 37    	bra       0x1ea6 <.L52>

00001e2a <.L7>:
    1e2a:	a0 61 90    	mov.b     [w0+34], w3
    1e2c:	c4 c6 b3    	mov.b     #0x6c, w4
    1e2e:	11 81 e9    	dec2.w    [w1], w2
    1e30:	84 cf 51    	sub.b     w3, w4, [w15]
    1e32:	22 00 32    	bra       Z, 0x1e78 <.L37>
    1e34:	0a 00 3c    	bra       GT, 0x1e4a <.L41>
    1e36:	64 42 52    	sub.b     w4, #0x4, w4
    1e38:	84 cf 51    	sub.b     w3, w4, [w15]
    1e3a:	25 00 32    	bra       Z, 0x1e86 <.L51>
    1e3c:	04 c2 e8    	inc2.b    w4, w4
    1e3e:	84 cf 51    	sub.b     w3, w4, [w15]
    1e40:	13 00 32    	bra       Z, 0x1e68 <.L36>
    1e42:	68 42 52    	sub.b     w4, #0x8, w4
    1e44:	84 cf 51    	sub.b     w3, w4, [w15]
    1e46:	1e 00 3a    	bra       NZ, 0x1e84 <.L33>
    1e48:	0a 00 37    	bra       0x1e5e <.L55>

00001e4a <.L41>:
    1e4a:	44 c7 b3    	mov.b     #0x74, w4
    1e4c:	84 cf 51    	sub.b     w3, w4, [w15]
    1e4e:	1b 00 32    	bra       Z, 0x1e86 <.L51>
    1e50:	66 42 42    	add.b     w4, #0x6, w4
    1e52:	84 cf 51    	sub.b     w3, w4, [w15]
    1e54:	18 00 32    	bra       Z, 0x1e86 <.L51>
    1e56:	69 42 52    	sub.b     w4, #0x9, w4
    1e58:	84 cf 51    	sub.b     w3, w4, [w15]
    1e5a:	14 00 3a    	bra       NZ, 0x1e84 <.L33>
    1e5c:	05 00 37    	bra       0x1e68 <.L36>

00001e5e <.L55>:
    1e5e:	82 08 78    	mov.w     w2, [w1]
    1e60:	92 00 78    	mov.w     [w2], w1
    1e62:	40 58 90    	mov.b     [w0+28], w0
    1e64:	80 48 78    	mov.b     w0, [w1]
    1e66:	2c 00 37    	bra       0x1ec0 <.L11>

00001e68 <.L36>:
    1e68:	82 08 78    	mov.w     w2, [w1]
    1e6a:	92 00 78    	mov.w     [w2], w1
    1e6c:	60 0a 90    	mov.w     [w0+28], w4
    1e6e:	cf a2 de    	asr.w     w4, #0xf, w5
    1e70:	61 2b b9    	mul.su    w5, #0x1, w6
    1e72:	84 98 be    	mov.d     w4, [w1++]
    1e74:	86 90 be    	mov.d     w6, [w1--]
    1e76:	24 00 37    	bra       0x1ec0 <.L11>

00001e78 <.L37>:
    1e78:	82 08 78    	mov.w     w2, [w1]
    1e7a:	92 00 78    	mov.w     [w2], w1
    1e7c:	60 09 90    	mov.w     [w0+28], w2
    1e7e:	cf 91 de    	asr.w     w2, #0xf, w3
    1e80:	82 88 be    	mov.d     w2, [w1]
    1e82:	1e 00 37    	bra       0x1ec0 <.L11>

00001e84 <.L33>:
    1e84:	11 81 e9    	dec2.w    [w1], w2

00001e86 <.L51>:
    1e86:	82 08 78    	mov.w     w2, [w1]
    1e88:	92 00 78    	mov.w     [w2], w1
    1e8a:	60 08 90    	mov.w     [w0+28], w0
    1e8c:	80 08 78    	mov.w     w0, [w1]
    1e8e:	18 00 37    	bra       0x1ec0 <.L11>

00001e90 <.L8>:
    1e90:	11 81 e9    	dec2.w    [w1], w2
    1e92:	82 08 78    	mov.w     w2, [w1]
    1e94:	12 02 78    	mov.w     [w2], w4
    1e96:	cf a2 de    	asr.w     w4, #0xf, w5
    1e98:	61 2b b9    	mul.su    w5, #0x1, w6
    1e9a:	04 98 be    	mov.d     w4, [w0++]
    1e9c:	06 90 be    	mov.d     w6, [w0--]
    1e9e:	f0 00 90    	mov.w     [w0+14], w1
    1ea0:	81 81 41    	add.w     w3, w1, w3
    1ea2:	63 00 98    	mov.w     w3, [w0+12]
    1ea4:	81 c7 b3    	mov.b     #0x78, w1

00001ea6 <.L52>:
    1ea6:	7c 02 07    	rcall     0x23a0 <__Litob>
    1ea8:	0b 00 37    	bra       0x1ec0 <.L11>

00001eaa <.L3>:
    1eaa:	f0 00 90    	mov.w     [w0+14], w1

00001eac <.L53>:
    1eac:	82 f1 78    	mov.b     w2, [w3+w1]
    1eae:	06 00 37    	bra       0x1ebc <.L50>

00001eb0 <.L2>:
    1eb0:	f0 00 90    	mov.w     [w0+14], w1
    1eb2:	81 81 41    	add.w     w3, w1, w3
    1eb4:	02 04 e0    	cp0.b     w2
    1eb6:	01 00 3a    	bra       NZ, 0x1eba <.L42>
    1eb8:	52 c2 b3    	mov.b     #0x25, w2

00001eba <.L42>:
    1eba:	82 49 78    	mov.b     w2, [w3]

00001ebc <.L50>:
    1ebc:	81 00 e8    	inc.w     w1, w1
    1ebe:	71 00 98    	mov.w     w1, [w0+14]

00001ec0 <.L11>:
    1ec0:	00 00 eb    	clr.w     w0
    1ec2:	4f 04 78    	mov.w     [--w15], w8
    1ec4:	00 00 06    	return    

00001ec6 <_prout>:
    1ec6:	88 9f be    	mov.d     w8, [w15++]
    1ec8:	00 04 78    	mov.w     w0, w8
    1eca:	01 00 78    	mov.w     w1, w0
    1ecc:	82 04 78    	mov.w     w2, w9
    1ece:	88 01 78    	mov.w     w8, w3
    1ed0:	09 01 78    	mov.w     w9, w2
    1ed2:	11 00 20    	mov.w     #0x1, w1
    1ed4:	a4 01 07    	rcall     0x221e <_fwrite>
    1ed6:	89 0f 50    	sub.w     w0, w9, [w15]
    1ed8:	01 00 32    	bra       Z, 0x1edc <.L2>
    1eda:	00 04 eb    	clr.w     w8

00001edc <.L2>:
    1edc:	08 00 78    	mov.w     w8, w0
    1ede:	4f 04 be    	mov.d     [--w15], w8
    1ee0:	00 00 06    	return    

00001ee2 <__printf_0>:
    1ee2:	00 00 fa    	lnk       #0x0
    1ee4:	e8 81 57    	sub.w     w15, #0x8, w3
    1ee6:	4f b9 97    	mov.w     [w15-8], w2
    1ee8:	81 c2 21    	mov.w     #0x1c28, w1
    1eea:	60 ec 21    	mov.w     #0x1ec6, w0
    1eec:	02 00 07    	rcall     0x1ef2 <___Printf_s>
    1eee:	00 80 fa    	ulnk      
    1ef0:	00 00 06    	return    

00001ef2 <___Printf_s>:
    1ef2:	62 00 fa    	lnk       #0x62
    1ef4:	88 9f be    	mov.d     w8, [w15++]
    1ef6:	8a 1f 78    	mov.w     w10, [w15++]
    1ef8:	00 05 78    	mov.w     w0, w10
    1efa:	81 04 78    	mov.w     w1, w9
    1efc:	02 04 78    	mov.w     w2, w8
    1efe:	83 00 78    	mov.w     w3, w1
    1f00:	80 f9 2f    	mov.w     #0xff98, w0
    1f02:	0f 00 40    	add.w     w0, w15, w0
    1f04:	38 04 07    	rcall     0x2776 <__Vacopy>
    1f06:	9a 97 9f    	mov.w     w10, [w15-94]
    1f08:	a9 97 9f    	mov.w     w9, [w15-92]
    1f0a:	00 00 eb    	clr.w     w0
    1f0c:	b0 9f 9f    	mov.w     w0, [w15-74]

00001f0e <.L31>:
    1f0e:	18 85 fb    	ze        [w8], w10
    1f10:	8a 04 fb    	se        w10, w9
    1f12:	0a 05 ea    	neg.w     w10, w10
    1f14:	4f 55 de    	lsr.w     w10, #0xf, w10
    1f16:	50 02 20    	mov.w     #0x25, w0
    1f18:	80 8f 54    	sub.w     w9, w0, [w15]
    1f1a:	0d 00 32    	bra       Z, 0x1f36 <.L3>
    1f1c:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    1f1e:	0b 00 3a    	bra       NZ, 0x1f36 <.L3>
    1f20:	0a 01 78    	mov.w     w10, w2
    1f22:	88 00 78    	mov.w     w8, w1
    1f24:	2f 90 97    	mov.w     [w15-92], w0
    1f26:	9f 91 97    	mov.w     [w15-94], w3
    1f28:	03 00 01    	call      w3
    1f2a:	a0 97 9f    	mov.w     w0, [w15-92]
    1f2c:	00 00 e0    	cp0.w     w0
    1f2e:	8e 00 32    	bra       Z, 0x204c <.L27>
    1f30:	3f 98 97    	mov.w     [w15-74], w0
    1f32:	00 00 e8    	inc.w     w0, w0
    1f34:	b0 9f 9f    	mov.w     w0, [w15-74]

00001f36 <.L3>:
    1f36:	0a 04 44    	add.w     w8, w10, w8
    1f38:	50 02 20    	mov.w     #0x25, w0
    1f3a:	80 8f 54    	sub.w     w9, w0, [w15]
    1f3c:	04 00 32    	bra       Z, 0x1f46 <.L5>
    1f3e:	09 00 e0    	cp0.w     w9
    1f40:	e6 ff 3a    	bra       NZ, 0x1f0e <.L31>
    1f42:	3f 98 97    	mov.w     [w15-74], w0
    1f44:	84 00 37    	bra       0x204e <.L4>

00001f46 <.L5>:
    1f46:	00 00 eb    	clr.w     w0
    1f48:	90 9f 9f    	mov.w     w0, [w15-78]
    1f4a:	80 9f 9f    	mov.w     w0, [w15-80]
    1f4c:	f0 97 9f    	mov.w     w0, [w15-82]
    1f4e:	e0 97 9f    	mov.w     w0, [w15-84]
    1f50:	d0 97 9f    	mov.w     w0, [w15-86]
    1f52:	c0 97 9f    	mov.w     w0, [w15-88]
    1f54:	07 00 37    	bra       0x1f64 <.L34>

00001f56 <.L8>:
    1f56:	81 ef 21    	mov.w     #0x1ef8, w1
    1f58:	01 00 50    	sub.w     w0, w1, w0
    1f5a:	00 00 40    	add.w     w0, w0, w0
    1f5c:	c1 ee 21    	mov.w     #0x1eec, w1
    1f5e:	61 00 78    	mov.w     [w1+w0], w0
    1f60:	df 98 97    	mov.w     [w15-70], w1
    1f62:	01 00 70    	ior.w     w0, w1, w0

00001f64 <.L34>:
    1f64:	d0 9f 9f    	mov.w     w0, [w15-70]
    1f66:	88 04 78    	mov.w     w8, w9
    1f68:	09 04 78    	mov.w     w9, w8
    1f6a:	38 45 78    	mov.b     [w8++], w10
    1f6c:	8a 00 fb    	se        w10, w1
    1f6e:	80 ef 21    	mov.w     #0x1ef8, w0
    1f70:	b4 01 07    	rcall     0x22da <_strchr>
    1f72:	00 00 e0    	cp0.w     w0
    1f74:	f0 ff 3a    	bra       NZ, 0x1f56 <.L8>
    1f76:	a1 c2 b3    	mov.b     #0x2a, w1
    1f78:	81 4f 55    	sub.b     w10, w1, [w15]
    1f7a:	0e 00 3a    	bra       NZ, 0x1f98 <.L9>
    1f7c:	cf 88 97    	mov.w     [w15-104], w1
    1f7e:	01 80 e9    	dec2.w    w1, w0
    1f80:	c0 8f 9f    	mov.w     w0, [w15-104]
    1f82:	10 00 78    	mov.w     [w0], w0
    1f84:	c0 9f 9f    	mov.w     w0, [w15-72]
    1f86:	00 00 e0    	cp0.w     w0
    1f88:	05 00 3d    	bra       GE, 0x1f94 <.L10>
    1f8a:	00 00 ea    	neg.w     w0, w0
    1f8c:	c0 9f 9f    	mov.w     w0, [w15-72]
    1f8e:	5f 98 97    	mov.w     [w15-70], w0
    1f90:	00 20 a0    	bset.w    w0, #0x2
    1f92:	d0 9f 9f    	mov.w     w0, [w15-70]

00001f94 <.L10>:
    1f94:	09 04 e8    	inc.w     w9, w8
    1f96:	0f 00 37    	bra       0x1fb6 <.L11>

00001f98 <.L9>:
    1f98:	c0 9f 9f    	mov.w     w0, [w15-72]
    1f9a:	00 00 eb    	clr.w     w0
    1f9c:	05 00 37    	bra       0x1fa8 <.L32>

00001f9e <.L14>:
    1f9e:	f2 ff 27    	mov.w     #0x7fff, w2
    1fa0:	82 0f 50    	sub.w     w0, w2, [w15]
    1fa2:	02 00 32    	bra       Z, 0x1fa8 <.L32>
    1fa4:	6a 01 b9    	mul.su    w0, #0xa, w2
    1fa6:	02 80 40    	add.w     w1, w2, w0

00001fa8 <.L32>:
    1fa8:	09 04 78    	mov.w     w9, w8
    1faa:	88 04 78    	mov.w     w8, w9
    1fac:	b9 00 fb    	se        [w9++], w1
    1fae:	01 03 b1    	sub.w     #0x30, w1
    1fb0:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1fb2:	f5 ff 36    	bra       LEU, 0x1f9e <.L14>
    1fb4:	c0 9f 9f    	mov.w     w0, [w15-72]

00001fb6 <.L11>:
    1fb6:	e0 c2 b3    	mov.b     #0x2e, w0
    1fb8:	98 4f 10    	subr.b    w0, [w8], [w15]
    1fba:	02 00 32    	bra       Z, 0x1fc0 <.L15>
    1fbc:	00 80 eb    	setm.w    w0
    1fbe:	19 00 37    	bra       0x1ff2 <.L35>

00001fc0 <.L15>:
    1fc0:	a0 c2 b3    	mov.b     #0x2a, w0
    1fc2:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1fc4:	07 00 3a    	bra       NZ, 0x1fd4 <.L17>
    1fc6:	cf 88 97    	mov.w     [w15-104], w1
    1fc8:	01 80 e9    	dec2.w    w1, w0
    1fca:	c0 8f 9f    	mov.w     w0, [w15-104]
    1fcc:	10 00 78    	mov.w     [w0], w0
    1fce:	a0 9f 9f    	mov.w     w0, [w15-76]
    1fd0:	08 04 e8    	inc.w     w8, w8
    1fd2:	10 00 37    	bra       0x1ff4 <.L16>

00001fd4 <.L17>:
    1fd4:	00 00 eb    	clr.w     w0
    1fd6:	a0 9f 9f    	mov.w     w0, [w15-76]
    1fd8:	88 00 78    	mov.w     w8, w1
    1fda:	05 00 37    	bra       0x1fe6 <.L33>

00001fdc <.L20>:
    1fdc:	f3 ff 27    	mov.w     #0x7fff, w3
    1fde:	83 0f 50    	sub.w     w0, w3, [w15]
    1fe0:	02 00 32    	bra       Z, 0x1fe6 <.L33>
    1fe2:	6a 02 b9    	mul.su    w0, #0xa, w4
    1fe4:	04 00 41    	add.w     w2, w4, w0

00001fe6 <.L33>:
    1fe6:	01 04 78    	mov.w     w1, w8
    1fe8:	88 00 78    	mov.w     w8, w1
    1fea:	31 01 fb    	se        [w1++], w2
    1fec:	02 03 b1    	sub.w     #0x30, w2
    1fee:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1ff0:	f5 ff 36    	bra       LEU, 0x1fdc <.L20>

00001ff2 <.L35>:
    1ff2:	a0 9f 9f    	mov.w     w0, [w15-76]

00001ff4 <.L16>:
    1ff4:	98 44 78    	mov.b     [w8], w9
    1ff6:	89 00 fb    	se        w9, w1
    1ff8:	40 ee 21    	mov.w     #0x1ee4, w0
    1ffa:	6f 01 07    	rcall     0x22da <_strchr>
    1ffc:	00 00 e0    	cp0.w     w0
    1ffe:	02 00 32    	bra       Z, 0x2004 <.L25>
    2000:	08 04 e8    	inc.w     w8, w8
    2002:	01 00 37    	bra       0x2006 <.L21>

00002004 <.L25>:
    2004:	80 44 eb    	clr.b     w9

00002006 <.L21>:
    2006:	c9 7f 9f    	mov.b     w9, [w15-68]
    2008:	80 c6 b3    	mov.b     #0x68, w0
    200a:	80 cf 54    	sub.b     w9, w0, [w15]
    200c:	04 00 3a    	bra       NZ, 0x2016 <.L22>
    200e:	98 cf 14    	subr.b    w9, [w8], [w15]
    2010:	0a 00 3a    	bra       NZ, 0x2026 <.L23>
    2012:	66 40 50    	sub.b     w0, #0x6, w0
    2014:	06 00 37    	bra       0x2022 <.L36>

00002016 <.L22>:
    2016:	c0 c6 b3    	mov.b     #0x6c, w0
    2018:	80 cf 54    	sub.b     w9, w0, [w15]
    201a:	05 00 3a    	bra       NZ, 0x2026 <.L23>
    201c:	98 cf 14    	subr.b    w9, [w8], [w15]
    201e:	03 00 3a    	bra       NZ, 0x2026 <.L23>
    2020:	65 40 40    	add.b     w0, #0x5, w0

00002022 <.L36>:
    2022:	c0 7f 9f    	mov.b     w0, [w15-68]
    2024:	08 04 e8    	inc.w     w8, w8

00002026 <.L23>:
    2026:	18 01 fb    	se        [w8], w2
    2028:	e3 fb 2f    	mov.w     #0xffbe, w3
    202a:	8f 81 41    	add.w     w3, w15, w3
    202c:	81 f9 2f    	mov.w     #0xff98, w1
    202e:	8f 80 40    	add.w     w1, w15, w1
    2030:	a0 f9 2f    	mov.w     #0xff9a, w0
    2032:	0f 00 40    	add.w     w0, w15, w0
    2034:	10 00 07    	rcall     0x2056 <___Putfld_s>
    2036:	00 00 e0    	cp0.w     w0
    2038:	09 00 3a    	bra       NZ, 0x204c <.L27>
    203a:	e1 fb 2f    	mov.w     #0xffbe, w1
    203c:	8f 80 40    	add.w     w1, w15, w1
    203e:	a0 f9 2f    	mov.w     #0xff9a, w0
    2040:	0f 00 40    	add.w     w0, w15, w0
    2042:	dd 02 07    	rcall     0x25fe <__Puttxt>
    2044:	00 00 e0    	cp0.w     w0
    2046:	02 00 35    	bra       LT, 0x204c <.L27>
    2048:	08 04 e8    	inc.w     w8, w8
    204a:	61 ff 37    	bra       0x1f0e <.L31>

0000204c <.L27>:
    204c:	00 80 eb    	setm.w    w0

0000204e <.L4>:
    204e:	4f 05 78    	mov.w     [--w15], w10
    2050:	4f 04 be    	mov.d     [--w15], w8
    2052:	00 80 fa    	ulnk      
    2054:	00 00 06    	return    

00002056 <___Putfld_s>:
    2056:	88 9f be    	mov.d     w8, [w15++]
    2058:	8a 1f 78    	mov.w     w10, [w15++]
    205a:	00 04 78    	mov.w     w0, w8
    205c:	30 c5 b3    	mov.b     #0x53, w0
    205e:	80 4f 51    	sub.b     w2, w0, [w15]
    2060:	08 00 32    	bra       Z, 0x2072 <.L4>
    2062:	30 c7 b3    	mov.b     #0x73, w0
    2064:	80 4f 51    	sub.b     w2, w0, [w15]
    2066:	05 00 32    	bra       Z, 0x2072 <.L4>
    2068:	51 c2 b3    	mov.b     #0x25, w1
    206a:	78 00 90    	mov.w     [w8+14], w0
    206c:	81 4f 51    	sub.b     w2, w1, [w15]
    206e:	17 00 3a    	bra       NZ, 0x209e <.L9>
    2070:	14 00 37    	bra       0x209a <.L11>

00002072 <.L4>:
    2072:	11 80 e9    	dec2.w    [w1], w0
    2074:	80 08 78    	mov.w     w0, [w1]
    2076:	10 05 78    	mov.w     [w0], w10
    2078:	6a 04 98    	mov.w     w10, [w8+12]
    207a:	d8 0c 90    	mov.w     [w8+26], w9
    207c:	09 00 e0    	cp0.w     w9
    207e:	04 00 3d    	bra       GE, 0x2088 <.L5>
    2080:	0a 00 78    	mov.w     w10, w0
    2082:	37 01 07    	rcall     0x22f2 <_strlen>
    2084:	80 04 78    	mov.w     w0, w9
    2086:	07 00 37    	bra       0x2096 <.L6>

00002088 <.L5>:
    2088:	09 01 78    	mov.w     w9, w2
    208a:	80 00 eb    	clr.w     w1
    208c:	0a 00 78    	mov.w     w10, w0
    208e:	1b 01 07    	rcall     0x22c6 <_memchr>
    2090:	00 00 e0    	cp0.w     w0
    2092:	01 00 32    	bra       Z, 0x2096 <.L6>
    2094:	8a 04 50    	sub.w     w0, w10, w9

00002096 <.L6>:
    2096:	19 0c 98    	mov.w     w9, [w8+18]
    2098:	09 00 37    	bra       0x20ac <.L7>

0000209a <.L11>:
    209a:	82 71 78    	mov.b     w2, [w3+w0]
    209c:	05 00 37    	bra       0x20a8 <.L10>

0000209e <.L9>:
    209e:	80 81 41    	add.w     w3, w0, w3
    20a0:	02 04 e0    	cp0.b     w2
    20a2:	01 00 3a    	bra       NZ, 0x20a6 <.L8>
    20a4:	01 41 78    	mov.b     w1, w2

000020a6 <.L8>:
    20a6:	82 49 78    	mov.b     w2, [w3]

000020a8 <.L10>:
    20a8:	00 00 e8    	inc.w     w0, w0
    20aa:	70 04 98    	mov.w     w0, [w8+14]

000020ac <.L7>:
    20ac:	00 00 eb    	clr.w     w0
    20ae:	4f 05 78    	mov.w     [--w15], w10
    20b0:	4f 04 be    	mov.d     [--w15], w8
    20b2:	00 00 06    	return    

000020b4 <__DNKfflush>:
    20b4:	88 9f be    	mov.d     w8, [w15++]
    20b6:	8a 1f 78    	mov.w     w10, [w15++]
    20b8:	00 04 78    	mov.w     w0, w8
    20ba:	08 00 e0    	cp0.w     w8
    20bc:	0d 00 3a    	bra       NZ, 0x20d8 <.L2>
    20be:	68 c7 21    	mov.w     #0x1c76, w8
    20c0:	70 05 44    	add.w     w8, #0x10, w10
    20c2:	80 04 eb    	clr.w     w9

000020c4 <.L4>:
    20c4:	58 00 78    	mov.w     [++w8], w0
    20c6:	00 00 e0    	cp0.w     w0
    20c8:	04 00 32    	bra       Z, 0x20d2 <.L3>
    20ca:	f4 ff 07    	rcall     0x20b4 <__DNKfflush>
    20cc:	00 00 e0    	cp0.w     w0
    20ce:	01 00 3d    	bra       GE, 0x20d2 <.L3>
    20d0:	80 84 eb    	setm.w    w9

000020d2 <.L3>:
    20d2:	8a 0f 54    	sub.w     w8, w10, [w15]
    20d4:	f7 ff 3a    	bra       NZ, 0x20c4 <.L4>
    20d6:	25 00 37    	bra       0x2122 <.L5>

000020d8 <.L2>:
    20d8:	00 00 22    	mov.w     #0x2000, w0
    20da:	18 00 60    	and.w     w0, [w8], w0
    20dc:	80 04 eb    	clr.w     w9
    20de:	21 00 32    	bra       Z, 0x2122 <.L5>
    20e0:	a8 04 90    	mov.w     [w8+4], w9
    20e2:	0f 00 37    	bra       0x2102 <.L6>

000020e4 <.L8>:
    20e4:	09 01 51    	sub.w     w2, w9, w2
    20e6:	38 40 90    	mov.b     [w8+3], w0
    20e8:	00 00 fb    	se        w0, w0
    20ea:	89 00 78    	mov.w     w9, w1
    20ec:	23 07 07    	rcall     0x2f34 <_write>
    20ee:	00 00 e0    	cp0.w     w0
    20f0:	07 00 3c    	bra       GT, 0x2100 <.L7>
    20f2:	28 00 90    	mov.w     [w8+4], w0
    20f4:	40 04 98    	mov.w     w0, [w8+8]
    20f6:	60 04 98    	mov.w     w0, [w8+12]
    20f8:	50 0c 98    	mov.w     w0, [w8+26]
    20fa:	18 90 a0    	bset.w    [w8], #0x9
    20fc:	80 84 eb    	setm.w    w9
    20fe:	11 00 37    	bra       0x2122 <.L5>

00002100 <.L7>:
    2100:	80 84 44    	add.w     w9, w0, w9

00002102 <.L6>:
    2102:	48 01 90    	mov.w     [w8+8], w2
    2104:	82 8f 54    	sub.w     w9, w2, [w15]
    2106:	ee ff 39    	bra       NC, 0x20e4 <.L8>
    2108:	28 00 90    	mov.w     [w8+4], w0
    210a:	40 04 98    	mov.w     w0, [w8+8]
    210c:	98 00 78    	mov.w     [w8], w1
    210e:	02 c0 20    	mov.w     #0xc00, w2
    2110:	02 81 60    	and.w     w1, w2, w2
    2112:	01 00 3a    	bra       NZ, 0x2116 <.L9>
    2114:	38 00 90    	mov.w     [w8+6], w0

00002116 <.L9>:
    2116:	01 e8 a3    	btst.z    w1, #0xe
    2118:	02 00 32    	bra       Z, 0x211e <.L10>
    211a:	60 04 98    	mov.w     w0, [w8+12]
    211c:	01 00 37    	bra       0x2120 <.L13>

0000211e <.L10>:
    211e:	50 0c 98    	mov.w     w0, [w8+26]

00002120 <.L13>:
    2120:	80 04 eb    	clr.w     w9

00002122 <.L5>:
    2122:	09 00 78    	mov.w     w9, w0
    2124:	4f 05 78    	mov.w     [--w15], w10
    2126:	4f 04 be    	mov.d     [--w15], w8
    2128:	00 00 06    	return    

0000212a <_fputs>:
    212a:	88 9f be    	mov.d     w8, [w15++]
    212c:	8a 9f be    	mov.d     w10, [w15++]
    212e:	80 04 78    	mov.w     w0, w9
    2130:	01 04 78    	mov.w     w1, w8
    2132:	2c 00 37    	bra       0x218c <.L2>

00002134 <.L9>:
    2134:	c8 00 90    	mov.w     [w8+8], w1
    2136:	68 00 90    	mov.w     [w8+12], w0
    2138:	80 8f 50    	sub.w     w1, w0, [w15]
    213a:	04 00 39    	bra       NC, 0x2144 <.L3>
    213c:	08 00 78    	mov.w     w8, w0
    213e:	e9 00 07    	rcall     0x2312 <__Fwprep>
    2140:	00 00 e0    	cp0.w     w0
    2142:	37 00 35    	bra       LT, 0x21b2 <.L13>

00002144 <.L3>:
    2144:	00 40 20    	mov.w     #0x400, w0
    2146:	18 00 60    	and.w     w0, [w8], w0
    2148:	09 00 32    	bra       Z, 0x215c <.L5>
    214a:	a1 00 20    	mov.w     #0xa, w1
    214c:	09 00 78    	mov.w     w9, w0
    214e:	d7 00 07    	rcall     0x22fe <_strrchr>
    2150:	80 05 78    	mov.w     w0, w11
    2152:	0b 00 e0    	cp0.w     w11
    2154:	03 00 32    	bra       Z, 0x215c <.L5>
    2156:	61 85 14    	subr.w    w9, #0x1, w10
    2158:	0a 85 45    	add.w     w11, w10, w10
    215a:	04 00 37    	bra       0x2164 <.L6>

0000215c <.L5>:
    215c:	09 00 78    	mov.w     w9, w0
    215e:	c9 00 07    	rcall     0x22f2 <_strlen>
    2160:	00 05 78    	mov.w     w0, w10
    2162:	80 05 eb    	clr.w     w11

00002164 <.L6>:
    2164:	48 00 90    	mov.w     [w8+8], w0
    2166:	e8 00 90    	mov.w     [w8+12], w1
    2168:	80 80 50    	sub.w     w1, w0, w1
    216a:	8a 8f 50    	sub.w     w1, w10, [w15]
    216c:	02 00 31    	bra       C, 0x2172 <.L7>
    216e:	01 05 78    	mov.w     w1, w10
    2170:	80 05 eb    	clr.w     w11

00002172 <.L7>:
    2172:	0a 01 78    	mov.w     w10, w2
    2174:	89 00 78    	mov.w     w9, w1
    2176:	6d fa 07    	rcall     0x1652 <_memcpy>
    2178:	48 00 90    	mov.w     [w8+8], w0
    217a:	0a 00 40    	add.w     w0, w10, w0
    217c:	40 04 98    	mov.w     w0, [w8+8]
    217e:	0b 00 e0    	cp0.w     w11
    2180:	04 00 32    	bra       Z, 0x218a <.L8>
    2182:	08 00 78    	mov.w     w8, w0
    2184:	97 ff 07    	rcall     0x20b4 <__DNKfflush>
    2186:	00 00 e0    	cp0.w     w0
    2188:	14 00 3a    	bra       NZ, 0x21b2 <.L13>

0000218a <.L8>:
    218a:	8a 84 44    	add.w     w9, w10, w9

0000218c <.L2>:
    218c:	19 04 e0    	cp0.b     [w9]
    218e:	d2 ff 3a    	bra       NZ, 0x2134 <.L9>
    2190:	00 80 20    	mov.w     #0x800, w0
    2192:	18 00 60    	and.w     w0, [w8], w0
    2194:	06 00 32    	bra       Z, 0x21a2 <.L10>
    2196:	08 00 78    	mov.w     w8, w0
    2198:	8d ff 07    	rcall     0x20b4 <__DNKfflush>
    219a:	80 00 78    	mov.w     w0, w1
    219c:	00 80 eb    	setm.w    w0
    219e:	01 00 e0    	cp0.w     w1
    21a0:	09 00 3a    	bra       NZ, 0x21b4 <.L4>

000021a2 <.L10>:
    21a2:	01 c0 20    	mov.w     #0xc00, w1
    21a4:	98 80 60    	and.w     w1, [w8], w1
    21a6:	00 00 eb    	clr.w     w0
    21a8:	05 00 32    	bra       Z, 0x21b4 <.L4>
    21aa:	48 00 90    	mov.w     [w8+8], w0
    21ac:	60 04 98    	mov.w     w0, [w8+12]
    21ae:	00 00 eb    	clr.w     w0
    21b0:	01 00 37    	bra       0x21b4 <.L4>

000021b2 <.L13>:
    21b2:	00 80 eb    	setm.w    w0

000021b4 <.L4>:
    21b4:	4f 05 be    	mov.d     [--w15], w10
    21b6:	4f 04 be    	mov.d     [--w15], w8
    21b8:	00 00 06    	return    

000021ba <_free>:
    21ba:	00 00 e0    	cp0.w     w0
    21bc:	2f 00 32    	bra       Z, 0x221c <.L1>
    21be:	c0 01 78    	mov.w     [--w0], w3
    21c0:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    21c2:	2c 00 36    	bra       LEU, 0x221c <.L1>
    21c4:	03 08 a3    	btst.z    w3, #0x0
    21c6:	2a 00 3a    	bra       NZ, 0x221c <.L1>
    21c8:	01 f8 80    	mov.w     0x1f00, w1
    21ca:	01 00 e0    	cp0.w     w1
    21cc:	02 00 32    	bra       Z, 0x21d2 <.L3>
    21ce:	81 0f 50    	sub.w     w0, w1, [w15]
    21d0:	04 00 31    	bra       C, 0x21da <.L7>

000021d2 <.L3>:
    21d2:	11 00 98    	mov.w     w1, [w0+2]
    21d4:	00 f8 88    	mov.w     w0, 0x1f00
    21d6:	16 00 37    	bra       0x2204 <.L5>

000021d8 <.L11>:
    21d8:	82 00 78    	mov.w     w2, w1

000021da <.L7>:
    21da:	11 01 90    	mov.w     [w1+2], w2
    21dc:	02 00 e0    	cp0.w     w2
    21de:	02 00 32    	bra       Z, 0x21e4 <.L6>
    21e0:	80 0f 51    	sub.w     w2, w0, [w15]
    21e2:	fa ff 39    	bra       NC, 0x21d8 <.L11>

000021e4 <.L6>:
    21e4:	11 02 78    	mov.w     [w1], w4
    21e6:	84 82 40    	add.w     w1, w4, w5
    21e8:	85 0f 50    	sub.w     w0, w5, [w15]
    21ea:	18 00 39    	bra       NC, 0x221c <.L1>
    21ec:	80 8f 52    	sub.w     w5, w0, [w15]
    21ee:	03 00 3a    	bra       NZ, 0x21f6 <.L8>
    21f0:	83 08 42    	add.w     w4, w3, [w1]
    21f2:	01 00 78    	mov.w     w1, w0
    21f4:	07 00 37    	bra       0x2204 <.L5>

000021f6 <.L8>:
    21f6:	02 00 e0    	cp0.w     w2
    21f8:	03 00 32    	bra       Z, 0x2200 <.L9>
    21fa:	83 01 40    	add.w     w0, w3, w3
    21fc:	83 0f 51    	sub.w     w2, w3, [w15]
    21fe:	0e 00 39    	bra       NC, 0x221c <.L1>

00002200 <.L9>:
    2200:	12 00 98    	mov.w     w2, [w0+2]
    2202:	90 00 98    	mov.w     w0, [w1+2]

00002204 <.L5>:
    2204:	90 00 90    	mov.w     [w0+2], w1
    2206:	01 00 e0    	cp0.w     w1
    2208:	09 00 32    	bra       Z, 0x221c <.L1>
    220a:	10 01 40    	add.w     w0, [w0], w2
    220c:	82 8f 50    	sub.w     w1, w2, [w15]
    220e:	06 00 3a    	bra       NZ, 0x221c <.L1>
    2210:	e2 ef 21    	mov.w     #0x1efe, w2
    2212:	00 09 eb    	clr.w     [w2]
    2214:	10 01 78    	mov.w     [w0], w2
    2216:	11 08 41    	add.w     w2, [w1], [w0]
    2218:	91 00 90    	mov.w     [w1+2], w1
    221a:	11 00 98    	mov.w     w1, [w0+2]

0000221c <.L1>:
    221c:	00 00 06    	return    

0000221e <_fwrite>:
    221e:	88 9f be    	mov.d     w8, [w15++]
    2220:	8a 9f be    	mov.d     w10, [w15++]
    2222:	8c 9f be    	mov.d     w12, [w15++]
    2224:	8e 1f 78    	mov.w     w14, [w15++]
    2226:	00 06 78    	mov.w     w0, w12
    2228:	01 04 78    	mov.w     w1, w8
    222a:	02 00 78    	mov.w     w2, w0
    222c:	83 04 78    	mov.w     w3, w9
    222e:	08 81 b9    	mul.ss    w0, w8, w2
    2230:	02 07 78    	mov.w     w2, w14
    2232:	02 00 e0    	cp0.w     w2
    2234:	42 00 32    	bra       Z, 0x22ba <.L11>
    2236:	08 00 e0    	cp0.w     w8
    2238:	41 00 32    	bra       Z, 0x22bc <.L2>
    223a:	82 05 78    	mov.w     w2, w11

0000223c <.L8>:
    223c:	c9 00 90    	mov.w     [w9+8], w1
    223e:	69 00 90    	mov.w     [w9+12], w0
    2240:	80 8f 50    	sub.w     w1, w0, [w15]
    2242:	04 00 39    	bra       NC, 0x224c <.L3>
    2244:	09 00 78    	mov.w     w9, w0
    2246:	65 00 07    	rcall     0x2312 <__Fwprep>
    2248:	00 00 e0    	cp0.w     w0
    224a:	29 00 35    	bra       LT, 0x229e <.L4>

0000224c <.L3>:
    224c:	00 40 20    	mov.w     #0x400, w0
    224e:	19 00 60    	and.w     w0, [w9], w0
    2250:	0a 00 32    	bra       Z, 0x2266 <.L12>
    2252:	0b 01 78    	mov.w     w11, w2
    2254:	a1 00 20    	mov.w     #0xa, w1
    2256:	0c 00 78    	mov.w     w12, w0
    2258:	36 00 07    	rcall     0x22c6 <_memchr>
    225a:	80 06 78    	mov.w     w0, w13
    225c:	0d 00 e0    	cp0.w     w13
    225e:	06 00 32    	bra       Z, 0x226c <.L13>
    2260:	61 05 16    	subr.w    w12, #0x1, w10
    2262:	0a 85 46    	add.w     w13, w10, w10
    2264:	04 00 37    	bra       0x226e <.L5>

00002266 <.L12>:
    2266:	0b 05 78    	mov.w     w11, w10
    2268:	80 06 eb    	clr.w     w13
    226a:	01 00 37    	bra       0x226e <.L5>

0000226c <.L13>:
    226c:	0b 05 78    	mov.w     w11, w10

0000226e <.L5>:
    226e:	49 00 90    	mov.w     [w9+8], w0
    2270:	e9 00 90    	mov.w     [w9+12], w1
    2272:	80 80 50    	sub.w     w1, w0, w1
    2274:	8a 8f 50    	sub.w     w1, w10, [w15]
    2276:	02 00 31    	bra       C, 0x227c <.L6>
    2278:	01 05 78    	mov.w     w1, w10
    227a:	80 06 eb    	clr.w     w13

0000227c <.L6>:
    227c:	0a 01 78    	mov.w     w10, w2
    227e:	8c 00 78    	mov.w     w12, w1
    2280:	e8 f9 07    	rcall     0x1652 <_memcpy>
    2282:	8a 85 55    	sub.w     w11, w10, w11
    2284:	49 00 90    	mov.w     [w9+8], w0
    2286:	0a 00 40    	add.w     w0, w10, w0
    2288:	c0 04 98    	mov.w     w0, [w9+8]
    228a:	0d 00 e0    	cp0.w     w13
    228c:	04 00 32    	bra       Z, 0x2296 <.L7>
    228e:	09 00 78    	mov.w     w9, w0
    2290:	11 ff 07    	rcall     0x20b4 <__DNKfflush>
    2292:	00 00 e0    	cp0.w     w0
    2294:	04 00 3a    	bra       NZ, 0x229e <.L4>

00002296 <.L7>:
    2296:	0b 00 e0    	cp0.w     w11
    2298:	02 00 32    	bra       Z, 0x229e <.L4>
    229a:	0a 06 46    	add.w     w12, w10, w12
    229c:	cf ff 37    	bra       0x223c <.L8>

0000229e <.L4>:
    229e:	00 80 20    	mov.w     #0x800, w0
    22a0:	19 00 60    	and.w     w0, [w9], w0
    22a2:	02 00 32    	bra       Z, 0x22a8 <.L9>
    22a4:	09 00 78    	mov.w     w9, w0
    22a6:	06 ff 07    	rcall     0x20b4 <__DNKfflush>

000022a8 <.L9>:
    22a8:	00 c0 20    	mov.w     #0xc00, w0
    22aa:	19 00 60    	and.w     w0, [w9], w0
    22ac:	02 00 32    	bra       Z, 0x22b2 <.L10>
    22ae:	49 00 90    	mov.w     [w9+8], w0
    22b0:	e0 04 98    	mov.w     w0, [w9+12]

000022b2 <.L10>:
    22b2:	8b 05 57    	sub.w     w14, w11, w11
    22b4:	11 00 09    	repeat    #0x11
    22b6:	88 85 d8    	div.uw    w11, w8
    22b8:	01 00 37    	bra       0x22bc <.L2>

000022ba <.L11>:
    22ba:	00 00 eb    	clr.w     w0

000022bc <.L2>:
    22bc:	4f 07 78    	mov.w     [--w15], w14
    22be:	4f 06 be    	mov.d     [--w15], w12
    22c0:	4f 05 be    	mov.d     [--w15], w10
    22c2:	4f 04 be    	mov.d     [--w15], w8
    22c4:	00 00 06    	return    

000022c6 <_memchr>:
    22c6:	03 00 37    	bra       0x22ce <.L2>

000022c8 <.L4>:
    22c8:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    22ca:	05 00 32    	bra       Z, 0x22d6 <.L5>
    22cc:	02 01 e9    	dec.w     w2, w2

000022ce <.L2>:
    22ce:	80 01 78    	mov.w     w0, w3
    22d0:	02 00 e0    	cp0.w     w2
    22d2:	fa ff 3a    	bra       NZ, 0x22c8 <.L4>
    22d4:	00 00 05    	retlw.w   #0x0, w0

000022d6 <.L5>:
    22d6:	03 00 78    	mov.w     w3, w0
    22d8:	00 00 06    	return    

000022da <_strchr>:
    22da:	02 00 37    	bra       0x22e0 <.L2>

000022dc <.L4>:
    22dc:	03 04 e0    	cp0.b     w3
    22de:	06 00 32    	bra       Z, 0x22ec <.L5>

000022e0 <.L2>:
    22e0:	00 01 78    	mov.w     w0, w2
    22e2:	02 00 78    	mov.w     w2, w0
    22e4:	b0 41 78    	mov.b     [w0++], w3
    22e6:	81 cf 51    	sub.b     w3, w1, [w15]
    22e8:	f9 ff 3a    	bra       NZ, 0x22dc <.L4>
    22ea:	01 00 37    	bra       0x22ee <.L3>

000022ec <.L5>:
    22ec:	00 01 eb    	clr.w     w2

000022ee <.L3>:
    22ee:	02 00 78    	mov.w     w2, w0
    22f0:	00 00 06    	return    

000022f2 <_strlen>:
    22f2:	80 00 78    	mov.w     w0, w1

000022f4 <.L2>:
    22f4:	01 01 78    	mov.w     w1, w2
    22f6:	31 04 e0    	cp0.b     [w1++]
    22f8:	fd ff 3a    	bra       NZ, 0x22f4 <.L2>
    22fa:	00 00 51    	sub.w     w2, w0, w0
    22fc:	00 00 06    	return    

000022fe <_strrchr>:
    22fe:	00 01 eb    	clr.w     w2

00002300 <.L3>:
    2300:	00 02 78    	mov.w     w0, w4
    2302:	b0 41 78    	mov.b     [w0++], w3
    2304:	81 cf 51    	sub.b     w3, w1, [w15]
    2306:	01 00 3a    	bra       NZ, 0x230a <.L2>
    2308:	04 01 78    	mov.w     w4, w2

0000230a <.L2>:
    230a:	03 04 e0    	cp0.b     w3
    230c:	f9 ff 3a    	bra       NZ, 0x2300 <.L3>
    230e:	02 00 78    	mov.w     w2, w0
    2310:	00 00 06    	return    

00002312 <__Fwprep>:
    2312:	88 9f be    	mov.d     w8, [w15++]
    2314:	8a 1f 78    	mov.w     w10, [w15++]
    2316:	00 04 78    	mov.w     w0, w8
    2318:	c8 00 90    	mov.w     [w8+8], w1
    231a:	68 01 90    	mov.w     [w8+12], w2
    231c:	00 00 eb    	clr.w     w0
    231e:	82 8f 50    	sub.w     w1, w2, [w15]
    2320:	3c 00 39    	bra       NC, 0x239a <.L2>
    2322:	18 00 78    	mov.w     [w8], w0
    2324:	22 00 29    	mov.w     #0x9002, w2
    2326:	02 01 60    	and.w     w0, w2, w2
    2328:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    232a:	07 00 32    	bra       Z, 0x233a <.L3>
    232c:	01 20 24    	mov.w     #0x4200, w1
    232e:	00 00 e0    	cp0.w     w0
    2330:	01 00 3d    	bra       GE, 0x2334 <.L4>
    2332:	01 20 20    	mov.w     #0x200, w1

00002334 <.L4>:
    2334:	00 8c 70    	ior.w     w1, w0, [w8]
    2336:	00 80 eb    	setm.w    w0
    2338:	30 00 37    	bra       0x239a <.L2>

0000233a <.L3>:
    233a:	02 00 26    	mov.w     #0x6000, w2
    233c:	02 00 60    	and.w     w0, w2, w0
    233e:	82 0f 50    	sub.w     w0, w2, [w15]
    2340:	09 00 3a    	bra       NZ, 0x2354 <.L5>
    2342:	38 00 90    	mov.w     [w8+6], w0
    2344:	80 8f 50    	sub.w     w1, w0, [w15]
    2346:	06 00 39    	bra       NC, 0x2354 <.L5>
    2348:	08 00 78    	mov.w     w8, w0
    234a:	b4 fe 07    	rcall     0x20b4 <__DNKfflush>
    234c:	80 00 78    	mov.w     w0, w1
    234e:	00 80 eb    	setm.w    w0
    2350:	01 00 e0    	cp0.w     w1
    2352:	23 00 3a    	bra       NZ, 0x239a <.L2>

00002354 <.L5>:
    2354:	18 05 78    	mov.w     [w8], w10
    2356:	00 c0 20    	mov.w     #0xc00, w0
    2358:	00 00 65    	and.w     w10, w0, w0
    235a:	18 00 3a    	bra       NZ, 0x238c <.L6>
    235c:	a8 04 90    	mov.w     [w8+4], w9
    235e:	60 02 20    	mov.w     #0x26, w0
    2360:	08 00 40    	add.w     w0, w8, w0
    2362:	80 8f 54    	sub.w     w9, w0, [w15]
    2364:	13 00 3a    	bra       NZ, 0x238c <.L6>
    2366:	00 20 20    	mov.w     #0x200, w0
    2368:	4a f9 07    	rcall     0x15fe <_malloc>
    236a:	20 04 98    	mov.w     w0, [w8+4]
    236c:	00 00 e0    	cp0.w     w0
    236e:	05 00 3a    	bra       NZ, 0x237a <.L7>
    2370:	29 04 98    	mov.w     w9, [w8+4]
    2372:	49 04 98    	mov.w     w9, [w8+8]
    2374:	89 04 e8    	inc.w     w9, w9
    2376:	39 04 98    	mov.w     w9, [w8+6]
    2378:	08 00 37    	bra       0x238a <.L11>

0000237a <.L7>:
    237a:	0a 60 a0    	bset.w    w10, #0x6
    237c:	0a 0c 78    	mov.w     w10, [w8]
    237e:	40 04 98    	mov.w     w0, [w8+8]
    2380:	01 20 20    	mov.w     #0x200, w1
    2382:	80 80 40    	add.w     w1, w0, w1
    2384:	31 04 98    	mov.w     w1, [w8+6]
    2386:	40 0c 98    	mov.w     w0, [w8+24]
    2388:	50 0c 98    	mov.w     w0, [w8+26]

0000238a <.L11>:
    238a:	f9 01 07    	rcall     0x277e <__Closreg>

0000238c <.L6>:
    238c:	28 00 90    	mov.w     [w8+4], w0
    238e:	50 04 98    	mov.w     w0, [w8+10]
    2390:	38 00 90    	mov.w     [w8+6], w0
    2392:	60 04 98    	mov.w     w0, [w8+12]
    2394:	00 00 26    	mov.w     #0x6000, w0
    2396:	18 0c 70    	ior.w     w0, [w8], [w8]
    2398:	00 00 eb    	clr.w     w0

0000239a <.L2>:
    239a:	4f 05 78    	mov.w     [--w15], w10
    239c:	4f 04 be    	mov.d     [--w15], w8
    239e:	00 00 06    	return    

000023a0 <__Litob>:
    23a0:	fc 87 47    	add.w     w15, #0x1c, w15
    23a2:	88 9f be    	mov.d     w8, [w15++]
    23a4:	8a 9f be    	mov.d     w10, [w15++]
    23a6:	8c 9f be    	mov.d     w12, [w15++]
    23a8:	8e 1f 78    	mov.w     w14, [w15++]
    23aa:	00 06 78    	mov.w     w0, w12
    23ac:	80 c5 b3    	mov.b     #0x58, w0
    23ae:	80 cf 50    	sub.b     w1, w0, [w15]
    23b0:	0a 00 32    	bra       Z, 0x23c6 <.L35>
    23b2:	77 40 40    	add.b     w0, #0x17, w0
    23b4:	80 cf 50    	sub.b     w1, w0, [w15]
    23b6:	0a 00 32    	bra       Z, 0x23cc <.L36>
    23b8:	69 40 40    	add.b     w0, #0x9, w0
    23ba:	80 cf 50    	sub.b     w1, w0, [w15]
    23bc:	0b 00 32    	bra       Z, 0x23d4 <.L37>
    23be:	d0 dd 21    	mov.w     #0x1ddd, w0
    23c0:	80 bf 9f    	mov.w     w0, [w15-16]
    23c2:	ae 00 20    	mov.w     #0xa, w14
    23c4:	0a 00 37    	bra       0x23da <.L2>

000023c6 <.L35>:
    23c6:	c2 dc 21    	mov.w     #0x1dcc, w2
    23c8:	82 bf 9f    	mov.w     w2, [w15-16]
    23ca:	06 00 37    	bra       0x23d8 <.L46>

000023cc <.L36>:
    23cc:	d3 dd 21    	mov.w     #0x1ddd, w3
    23ce:	83 bf 9f    	mov.w     w3, [w15-16]
    23d0:	8e 00 20    	mov.w     #0x8, w14
    23d2:	03 00 37    	bra       0x23da <.L2>

000023d4 <.L37>:
    23d4:	d4 dd 21    	mov.w     #0x1ddd, w4
    23d6:	84 bf 9f    	mov.w     w4, [w15-16]

000023d8 <.L46>:
    23d8:	0e 01 20    	mov.w     #0x10, w14

000023da <.L2>:
    23da:	3c 02 be    	mov.d     [w12++], w4
    23dc:	2c 03 be    	mov.d     [w12--], w6
    23de:	06 05 be    	mov.d     w6, w10
    23e0:	04 04 be    	mov.d     w4, w8
    23e2:	40 c6 b3    	mov.b     #0x64, w0
    23e4:	80 cf 50    	sub.b     w1, w0, [w15]
    23e6:	03 00 32    	bra       Z, 0x23ee <.L3>
    23e8:	65 40 40    	add.b     w0, #0x5, w0
    23ea:	80 cf 50    	sub.b     w1, w0, [w15]
    23ec:	0b 00 3a    	bra       NZ, 0x2404 <.L4>

000023ee <.L3>:
    23ee:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    23f0:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    23f2:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    23f4:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    23f6:	06 00 3d    	bra       GE, 0x2404 <.L4>
    23f8:	60 00 b8    	mul.uu    w0, #0x0, w0
    23fa:	60 11 b8    	mul.uu    w2, #0x0, w2
    23fc:	04 04 50    	sub.w     w0, w4, w8
    23fe:	85 84 58    	subb.w    w1, w5, w9
    2400:	06 05 59    	subb.w    w2, w6, w10
    2402:	87 85 59    	subb.w    w3, w7, w11

00002404 <.L4>:
    2404:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    2406:	04 00 32    	bra       Z, 0x2410 <.L38>
    2408:	40 00 20    	mov.w     #0x4, w0
    240a:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    240c:	38 00 3a    	bra       NZ, 0x247e <.L51>
    240e:	01 00 37    	bra       0x2412 <.L6>

00002410 <.L38>:
    2410:	30 00 20    	mov.w     #0x3, w0

00002412 <.L6>:
    2412:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2414:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    2416:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    2418:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    241a:	04 00 3a    	bra       NZ, 0x2424 <.L8>
    241c:	dc 08 90    	mov.w     [w12+26], w1
    241e:	8d 01 20    	mov.w     #0x18, w13
    2420:	01 00 e0    	cp0.w     w1
    2422:	06 00 32    	bra       Z, 0x2430 <.L9>

00002424 <.L8>:
    2424:	8e 00 e9    	dec.w     w14, w1
    2426:	88 80 60    	and.w     w1, w8, w1
    2428:	8f ba 97    	mov.w     [w15-16], w5
    242a:	e5 c0 78    	mov.b     [w5+w1], w1
    242c:	f1 ef 9f    	mov.b     w1, [w15-17]
    242e:	7d 01 20    	mov.w     #0x17, w13

00002430 <.L9>:
    2430:	80 00 78    	mov.w     w0, w1

00002432 <.LB101>:
    2432:	81 00 e9    	dec.w     w1, w1
    2434:	05 00 33    	bra       N, 0x2440 <.LE101>
    2436:	8b 05 d1    	lsr.w     w11, w11
    2438:	0a 85 d3    	rrc.w     w10, w10
    243a:	89 84 d3    	rrc.w     w9, w9
    243c:	08 84 d3    	rrc.w     w8, w8
    243e:	f9 ff 37    	bra       0x2432 <.LB101>

00002440 <.LE101>:
    2440:	08 9e be    	mov.d     w8, [w12++]
    2442:	0a 96 be    	mov.d     w10, [w12--]
    2444:	12 00 37    	bra       0x246a <.L10>

00002446 <.L12>:
    2446:	8d 06 e9    	dec.w     w13, w13
    2448:	8e 00 e9    	dec.w     w14, w1
    244a:	84 80 60    	and.w     w1, w4, w1
    244c:	0f b9 97    	mov.w     [w15-16], w2
    244e:	e2 c1 78    	mov.b     [w2+w1], w3
    2450:	82 fd 2f    	mov.w     #0xffd8, w2
    2452:	0f 01 41    	add.w     w2, w15, w2
    2454:	03 f1 7e    	mov.b     w3, [w2+w13]
    2456:	80 00 78    	mov.w     w0, w1

00002458 <.LB115>:
    2458:	81 00 e9    	dec.w     w1, w1
    245a:	05 00 33    	bra       N, 0x2466 <.LE115>
    245c:	87 83 d1    	asr.w     w7, w7
    245e:	06 83 d3    	rrc.w     w6, w6
    2460:	85 82 d3    	rrc.w     w5, w5
    2462:	04 82 d3    	rrc.w     w4, w4
    2464:	f9 ff 37    	bra       0x2458 <.LB115>

00002466 <.LE115>:
    2466:	04 9e be    	mov.d     w4, [w12++]
    2468:	06 96 be    	mov.d     w6, [w12--]

0000246a <.L10>:
    246a:	3c 02 be    	mov.d     [w12++], w4
    246c:	2c 03 be    	mov.d     [w12--], w6
    246e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2470:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2472:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2474:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2476:	8b 00 34    	bra       LE, 0x258e <.L11>
    2478:	0d 00 e0    	cp0.w     w13
    247a:	e5 ff 3c    	bra       GT, 0x2446 <.L12>
    247c:	88 00 37    	bra       0x258e <.L11>

0000247e <.L51>:
    247e:	2c 60 90    	mov.b     [w12+34], w0
    2480:	81 c6 b3    	mov.b     #0x68, w1
    2482:	81 4f 50    	sub.b     w0, w1, [w15]
    2484:	0b 00 32    	bra       Z, 0x249c <.L14>
    2486:	06 00 3c    	bra       GT, 0x2494 <.L16>
    2488:	00 04 e0    	cp0.b     w0
    248a:	08 00 32    	bra       Z, 0x249c <.L14>
    248c:	e6 c0 50    	sub.b     w1, #0x6, w1
    248e:	81 4f 50    	sub.b     w0, w1, [w15]
    2490:	4e 00 3a    	bra       NZ, 0x252e <.L13>
    2492:	04 00 37    	bra       0x249c <.L14>

00002494 <.L16>:
    2494:	c1 c6 b3    	mov.b     #0x6c, w1
    2496:	81 4f 50    	sub.b     w0, w1, [w15]
    2498:	4a 00 3a    	bra       NZ, 0x252e <.L13>
    249a:	21 00 37    	bra       0x24de <.L52>

0000249c <.L14>:
    249c:	08 00 e0    	cp0.w     w8
    249e:	04 00 3a    	bra       NZ, 0x24a8 <.L17>
    24a0:	5c 08 90    	mov.w     [w12+26], w0
    24a2:	8d 01 20    	mov.w     #0x18, w13
    24a4:	00 00 e0    	cp0.w     w0
    24a6:	06 00 32    	bra       Z, 0x24b4 <.L18>

000024a8 <.L17>:
    24a8:	11 00 09    	repeat    #0x11
    24aa:	0e 84 d8    	div.uw    w8, w14
    24ac:	0f b9 97    	mov.w     [w15-16], w2
    24ae:	e2 c0 78    	mov.b     [w2+w1], w1
    24b0:	f1 ef 9f    	mov.b     w1, [w15-17]
    24b2:	7d 01 20    	mov.w     #0x17, w13

000024b4 <.L18>:
    24b4:	11 00 09    	repeat    #0x11
    24b6:	0e 84 d8    	div.uw    w8, w14
    24b8:	0a 00 37    	bra       0x24ce <.L47>

000024ba <.L21>:
    24ba:	11 00 09    	repeat    #0x11
    24bc:	0e 04 d8    	div.sw    w8, w14
    24be:	8d 06 e9    	dec.w     w13, w13
    24c0:	0e 81 b9    	mul.ss    w0, w14, w2
    24c2:	02 04 54    	sub.w     w8, w2, w8
    24c4:	8f b8 97    	mov.w     [w15-16], w1
    24c6:	61 41 7c    	mov.b     [w1+w8], w2
    24c8:	81 fd 2f    	mov.w     #0xffd8, w1
    24ca:	8f 80 40    	add.w     w1, w15, w1
    24cc:	82 f0 7e    	mov.b     w2, [w1+w13]

000024ce <.L47>:
    24ce:	00 04 78    	mov.w     w0, w8
    24d0:	08 00 e0    	cp0.w     w8
    24d2:	02 00 32    	bra       Z, 0x24d8 <.L20>
    24d4:	0d 00 e0    	cp0.w     w13
    24d6:	f1 ff 3c    	bra       GT, 0x24ba <.L21>

000024d8 <.L20>:
    24d8:	cf c4 de    	asr.w     w8, #0xf, w9
    24da:	61 4d b9    	mul.su    w9, #0x1, w10
    24dc:	25 00 37    	bra       0x2528 <.L50>

000024de <.L52>:
    24de:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    24e0:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    24e2:	04 00 3a    	bra       NZ, 0x24ec <.L22>
    24e4:	5c 08 90    	mov.w     [w12+26], w0
    24e6:	8d 01 20    	mov.w     #0x18, w13
    24e8:	00 00 e0    	cp0.w     w0
    24ea:	07 00 32    	bra       Z, 0x24fa <.L23>

000024ec <.L22>:
    24ec:	61 71 b9    	mul.su    w14, #0x1, w2
    24ee:	08 00 be    	mov.d     w8, w0
    24f0:	d6 01 07    	rcall     0x289e <___umodsi3>
    24f2:	8f b9 97    	mov.w     [w15-16], w3
    24f4:	e3 41 78    	mov.b     [w3+w0], w3
    24f6:	f3 ef 9f    	mov.b     w3, [w15-17]
    24f8:	7d 01 20    	mov.w     #0x17, w13

000024fa <.L23>:
    24fa:	61 71 b9    	mul.su    w14, #0x1, w2
    24fc:	08 00 be    	mov.d     w8, w0
    24fe:	bf 01 07    	rcall     0x287e <___udivsi3>
    2500:	0b 00 37    	bra       0x2518 <.L48>

00002502 <.L26>:
    2502:	61 71 b9    	mul.su    w14, #0x1, w2
    2504:	08 00 be    	mov.d     w8, w0
    2506:	ac 01 07    	rcall     0x2860 <___divsi3>
    2508:	8d 06 e9    	dec.w     w13, w13
    250a:	00 f1 b9    	mul.ss    w14, w0, w2
    250c:	02 04 54    	sub.w     w8, w2, w8
    250e:	0f ba 97    	mov.w     [w15-16], w4
    2510:	e4 42 7c    	mov.b     [w4+w8], w5
    2512:	84 fd 2f    	mov.w     #0xffd8, w4
    2514:	0f 02 42    	add.w     w4, w15, w4
    2516:	05 f2 7e    	mov.b     w5, [w4+w13]

00002518 <.L48>:
    2518:	00 04 be    	mov.d     w0, w8
    251a:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    251c:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    251e:	02 00 32    	bra       Z, 0x2524 <.L25>
    2520:	0d 00 e0    	cp0.w     w13
    2522:	ef ff 3c    	bra       GT, 0x2502 <.L26>

00002524 <.L25>:
    2524:	4f cd de    	asr.w     w9, #0xf, w10
    2526:	8a 05 78    	mov.w     w10, w11

00002528 <.L50>:
    2528:	08 9e be    	mov.d     w8, [w12++]
    252a:	0a 96 be    	mov.d     w10, [w12--]
    252c:	30 00 37    	bra       0x258e <.L11>

0000252e <.L13>:
    252e:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2530:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    2532:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    2534:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    2536:	04 00 3a    	bra       NZ, 0x2540 <.L27>
    2538:	5c 08 90    	mov.w     [w12+26], w0
    253a:	8d 01 20    	mov.w     #0x18, w13
    253c:	00 00 e0    	cp0.w     w0
    253e:	09 00 32    	bra       Z, 0x2552 <.L28>

00002540 <.L27>:
    2540:	61 72 b9    	mul.su    w14, #0x1, w4
    2542:	61 2b b9    	mul.su    w5, #0x1, w6
    2544:	08 00 be    	mov.d     w8, w0
    2546:	0a 01 be    	mov.d     w10, w2
    2548:	53 02 07    	rcall     0x29f0 <___umoddi3>
    254a:	0f ba 97    	mov.w     [w15-16], w4
    254c:	64 42 78    	mov.b     [w4+w0], w4
    254e:	f4 ef 9f    	mov.b     w4, [w15-17]
    2550:	7d 01 20    	mov.w     #0x17, w13

00002552 <.L28>:
    2552:	61 72 b9    	mul.su    w14, #0x1, w4
    2554:	61 2b b9    	mul.su    w5, #0x1, w6
    2556:	08 00 be    	mov.d     w8, w0
    2558:	0a 01 be    	mov.d     w10, w2
    255a:	43 02 07    	rcall     0x29e2 <___udivdi3>
    255c:	0d 00 37    	bra       0x2578 <.L49>

0000255e <.L30>:
    255e:	61 72 b9    	mul.su    w14, #0x1, w4
    2560:	61 2b b9    	mul.su    w5, #0x1, w6
    2562:	08 00 be    	mov.d     w8, w0
    2564:	0a 01 be    	mov.d     w10, w2
    2566:	48 02 07    	rcall     0x29f8 <___divdi3>
    2568:	8d 06 e9    	dec.w     w13, w13
    256a:	00 f2 b9    	mul.ss    w14, w0, w4
    256c:	04 04 54    	sub.w     w8, w4, w8
    256e:	8f ba 97    	mov.w     [w15-16], w5
    2570:	65 42 7c    	mov.b     [w5+w8], w4
    2572:	85 fd 2f    	mov.w     #0xffd8, w5
    2574:	8f 82 42    	add.w     w5, w15, w5
    2576:	84 f2 7e    	mov.b     w4, [w5+w13]

00002578 <.L49>:
    2578:	00 9e be    	mov.d     w0, [w12++]
    257a:	02 96 be    	mov.d     w2, [w12--]
    257c:	3c 04 be    	mov.d     [w12++], w8
    257e:	2c 05 be    	mov.d     [w12--], w10
    2580:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2582:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    2584:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    2586:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    2588:	02 00 34    	bra       LE, 0x258e <.L11>
    258a:	0d 00 e0    	cp0.w     w13
    258c:	e8 ff 3c    	bra       GT, 0x255e <.L30>

0000258e <.L11>:
    258e:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    2590:	10 00 3a    	bra       NZ, 0x25b2 <.L31>
    2592:	0c 10 90    	mov.w     [w12+32], w0
    2594:	00 38 a3    	btst.z    w0, #0x3
    2596:	0d 00 32    	bra       Z, 0x25b2 <.L31>
    2598:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    259a:	06 00 3e    	bra       GTU, 0x25a8 <.L32>
    259c:	85 fd 2f    	mov.w     #0xffd8, w5
    259e:	8f 82 42    	add.w     w5, w15, w5
    25a0:	e5 c0 7e    	mov.b     [w5+w13], w1
    25a2:	00 c3 b3    	mov.b     #0x30, w0
    25a4:	80 cf 50    	sub.b     w1, w0, [w15]
    25a6:	05 00 32    	bra       Z, 0x25b2 <.L31>

000025a8 <.L32>:
    25a8:	8d 06 e9    	dec.w     w13, w13
    25aa:	02 c3 b3    	mov.b     #0x30, w2
    25ac:	81 fd 2f    	mov.w     #0xffd8, w1
    25ae:	8f 80 40    	add.w     w1, w15, w1
    25b0:	82 f0 7e    	mov.b     w2, [w1+w13]

000025b2 <.L31>:
    25b2:	78 81 16    	subr.w    w13, #0x18, w2
    25b4:	12 0e 98    	mov.w     w2, [w12+18]
    25b6:	6c 00 90    	mov.w     [w12+12], w0
    25b8:	83 fd 2f    	mov.w     #0xffd8, w3
    25ba:	8f 81 41    	add.w     w3, w15, w3
    25bc:	8d 80 41    	add.w     w3, w13, w1
    25be:	49 f8 07    	rcall     0x1652 <_memcpy>
    25c0:	1c 08 90    	mov.w     [w12+18], w0
    25c2:	dc 08 90    	mov.w     [w12+26], w1
    25c4:	81 0f 50    	sub.w     w0, w1, [w15]
    25c6:	06 00 3d    	bra       GE, 0x25d4 <.L33>
    25c8:	00 80 50    	sub.w     w1, w0, w0
    25ca:	00 0e 98    	mov.w     w0, [w12+16]
    25cc:	0c 10 90    	mov.w     [w12+32], w0
    25ce:	00 40 a1    	bclr.w    w0, #0x4
    25d0:	00 16 98    	mov.w     w0, [w12+32]
    25d2:	0f 00 37    	bra       0x25f2 <.L1>

000025d4 <.L33>:
    25d4:	01 00 e0    	cp0.w     w1
    25d6:	0d 00 3d    	bra       GE, 0x25f2 <.L1>
    25d8:	8c 10 90    	mov.w     [w12+32], w1
    25da:	f4 80 60    	and.w     w1, #0x14, w1
    25dc:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    25de:	09 00 3a    	bra       NZ, 0x25f2 <.L1>
    25e0:	7c 09 90    	mov.w     [w12+30], w2
    25e2:	fc 00 90    	mov.w     [w12+14], w1
    25e4:	81 00 51    	sub.w     w2, w1, w1
    25e6:	0c 09 90    	mov.w     [w12+16], w2
    25e8:	82 80 50    	sub.w     w1, w2, w1
    25ea:	00 80 50    	sub.w     w1, w0, w0
    25ec:	42 40 a9    	bclr.b    0x42, #0x2
    25ee:	01 00 34    	bra       LE, 0x25f2 <.L1>
    25f0:	00 0e 98    	mov.w     w0, [w12+16]

000025f2 <.L1>:
    25f2:	4f 07 78    	mov.w     [--w15], w14
    25f4:	4f 06 be    	mov.d     [--w15], w12
    25f6:	4f 05 be    	mov.d     [--w15], w10
    25f8:	4f 04 be    	mov.d     [--w15], w8
    25fa:	cf 01 b1    	sub.w     #0x1c, w15
    25fc:	00 00 06    	return    

000025fe <__Puttxt>:
    25fe:	04 00 fa    	lnk       #0x4
    2600:	88 9f be    	mov.d     w8, [w15++]
    2602:	8a 9f be    	mov.d     w10, [w15++]
    2604:	8c 1f 78    	mov.w     w12, [w15++]
    2606:	00 04 78    	mov.w     w0, w8
    2608:	01 06 78    	mov.w     w1, w12
    260a:	f8 0d 90    	mov.w     [w8+30], w11
    260c:	78 00 90    	mov.w     [w8+14], w0
    260e:	80 85 55    	sub.w     w11, w0, w11
    2610:	08 08 90    	mov.w     [w8+16], w0
    2612:	80 85 55    	sub.w     w11, w0, w11
    2614:	18 08 90    	mov.w     [w8+18], w0
    2616:	80 85 55    	sub.w     w11, w0, w11
    2618:	28 08 90    	mov.w     [w8+20], w0
    261a:	80 85 55    	sub.w     w11, w0, w11
    261c:	38 08 90    	mov.w     [w8+22], w0
    261e:	80 85 55    	sub.w     w11, w0, w11
    2620:	48 08 90    	mov.w     [w8+24], w0
    2622:	80 85 55    	sub.w     w11, w0, w11
    2624:	00 02 22    	mov.w     #0x2020, w0
    2626:	90 bf 9f    	mov.w     w0, [w15-14]
    2628:	00 03 23    	mov.w     #0x3030, w0
    262a:	a0 bf 9f    	mov.w     w0, [w15-12]
    262c:	08 10 90    	mov.w     [w8+32], w0
    262e:	00 28 a3    	btst.z    w0, #0x2
    2630:	15 00 3a    	bra       NZ, 0x265c <.L2>
    2632:	0b 00 e0    	cp0.w     w11
    2634:	13 00 34    	bra       LE, 0x265c <.L2>
    2636:	0b 05 78    	mov.w     w11, w10

00002638 <.L5>:
    2638:	8a 04 78    	mov.w     w10, w9
    263a:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    263c:	01 00 36    	bra       LEU, 0x2640 <.L3>
    263e:	29 00 20    	mov.w     #0x2, w9

00002640 <.L3>:
    2640:	c8 01 90    	mov.w     [w8+8], w3
    2642:	09 01 78    	mov.w     w9, w2
    2644:	ee 80 57    	sub.w     w15, #0xe, w1
    2646:	58 00 90    	mov.w     [w8+10], w0
    2648:	03 00 01    	call      w3
    264a:	50 04 98    	mov.w     w0, [w8+10]
    264c:	00 00 e0    	cp0.w     w0
    264e:	8c 00 32    	bra       Z, 0x2768 <.L29>
    2650:	68 08 90    	mov.w     [w8+28], w0
    2652:	09 00 40    	add.w     w0, w9, w0
    2654:	60 0c 98    	mov.w     w0, [w8+28]
    2656:	09 05 55    	sub.w     w10, w9, w10
    2658:	42 40 a9    	bclr.b    0x42, #0x2
    265a:	ee ff 3c    	bra       GT, 0x2638 <.L5>

0000265c <.L2>:
    265c:	78 01 90    	mov.w     [w8+14], w2
    265e:	02 00 e0    	cp0.w     w2
    2660:	0c 00 34    	bra       LE, 0x267a <.L6>
    2662:	c8 01 90    	mov.w     [w8+8], w3
    2664:	8c 00 78    	mov.w     w12, w1
    2666:	58 00 90    	mov.w     [w8+10], w0
    2668:	03 00 01    	call      w3
    266a:	50 04 98    	mov.w     w0, [w8+10]
    266c:	80 80 eb    	setm.w    w1
    266e:	00 00 e0    	cp0.w     w0
    2670:	7c 00 32    	bra       Z, 0x276a <.L4>
    2672:	e8 08 90    	mov.w     [w8+28], w1
    2674:	78 00 90    	mov.w     [w8+14], w0
    2676:	00 80 40    	add.w     w1, w0, w0
    2678:	60 0c 98    	mov.w     w0, [w8+28]

0000267a <.L6>:
    267a:	88 0c 90    	mov.w     [w8+16], w9

0000267c <.L30>:
    267c:	09 00 e0    	cp0.w     w9
    267e:	11 00 34    	bra       LE, 0x26a2 <.L7>
    2680:	09 05 78    	mov.w     w9, w10
    2682:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    2684:	01 00 36    	bra       LEU, 0x2688 <.L8>
    2686:	2a 00 20    	mov.w     #0x2, w10

00002688 <.L8>:
    2688:	c8 01 90    	mov.w     [w8+8], w3
    268a:	0a 01 78    	mov.w     w10, w2
    268c:	ec 80 57    	sub.w     w15, #0xc, w1
    268e:	58 00 90    	mov.w     [w8+10], w0
    2690:	03 00 01    	call      w3
    2692:	50 04 98    	mov.w     w0, [w8+10]
    2694:	00 00 e0    	cp0.w     w0
    2696:	68 00 32    	bra       Z, 0x2768 <.L29>
    2698:	68 08 90    	mov.w     [w8+28], w0
    269a:	0a 00 40    	add.w     w0, w10, w0
    269c:	60 0c 98    	mov.w     w0, [w8+28]
    269e:	8a 84 54    	sub.w     w9, w10, w9
    26a0:	ed ff 37    	bra       0x267c <.L30>

000026a2 <.L7>:
    26a2:	18 09 90    	mov.w     [w8+18], w2
    26a4:	02 00 e0    	cp0.w     w2
    26a6:	0c 00 34    	bra       LE, 0x26c0 <.L10>
    26a8:	c8 01 90    	mov.w     [w8+8], w3
    26aa:	e8 00 90    	mov.w     [w8+12], w1
    26ac:	58 00 90    	mov.w     [w8+10], w0
    26ae:	03 00 01    	call      w3
    26b0:	50 04 98    	mov.w     w0, [w8+10]
    26b2:	80 80 eb    	setm.w    w1
    26b4:	00 00 e0    	cp0.w     w0
    26b6:	59 00 32    	bra       Z, 0x276a <.L4>
    26b8:	e8 08 90    	mov.w     [w8+28], w1
    26ba:	18 08 90    	mov.w     [w8+18], w0
    26bc:	00 80 40    	add.w     w1, w0, w0
    26be:	60 0c 98    	mov.w     w0, [w8+28]

000026c0 <.L10>:
    26c0:	a8 0c 90    	mov.w     [w8+20], w9

000026c2 <.L31>:
    26c2:	09 00 e0    	cp0.w     w9
    26c4:	11 00 34    	bra       LE, 0x26e8 <.L11>
    26c6:	09 05 78    	mov.w     w9, w10
    26c8:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    26ca:	01 00 36    	bra       LEU, 0x26ce <.L12>
    26cc:	2a 00 20    	mov.w     #0x2, w10

000026ce <.L12>:
    26ce:	c8 01 90    	mov.w     [w8+8], w3
    26d0:	0a 01 78    	mov.w     w10, w2
    26d2:	ec 80 57    	sub.w     w15, #0xc, w1
    26d4:	58 00 90    	mov.w     [w8+10], w0
    26d6:	03 00 01    	call      w3
    26d8:	50 04 98    	mov.w     w0, [w8+10]
    26da:	00 00 e0    	cp0.w     w0
    26dc:	45 00 32    	bra       Z, 0x2768 <.L29>
    26de:	68 08 90    	mov.w     [w8+28], w0
    26e0:	0a 00 40    	add.w     w0, w10, w0
    26e2:	60 0c 98    	mov.w     w0, [w8+28]
    26e4:	8a 84 54    	sub.w     w9, w10, w9
    26e6:	ed ff 37    	bra       0x26c2 <.L31>

000026e8 <.L11>:
    26e8:	38 09 90    	mov.w     [w8+22], w2
    26ea:	02 00 e0    	cp0.w     w2
    26ec:	0e 00 34    	bra       LE, 0x270a <.L14>
    26ee:	e8 00 90    	mov.w     [w8+12], w1
    26f0:	18 08 90    	mov.w     [w8+18], w0
    26f2:	80 80 40    	add.w     w1, w0, w1
    26f4:	c8 01 90    	mov.w     [w8+8], w3
    26f6:	58 00 90    	mov.w     [w8+10], w0
    26f8:	03 00 01    	call      w3
    26fa:	50 04 98    	mov.w     w0, [w8+10]
    26fc:	80 80 eb    	setm.w    w1
    26fe:	00 00 e0    	cp0.w     w0
    2700:	34 00 32    	bra       Z, 0x276a <.L4>
    2702:	e8 08 90    	mov.w     [w8+28], w1
    2704:	38 08 90    	mov.w     [w8+22], w0
    2706:	00 80 40    	add.w     w1, w0, w0
    2708:	60 0c 98    	mov.w     w0, [w8+28]

0000270a <.L14>:
    270a:	c8 0c 90    	mov.w     [w8+24], w9

0000270c <.L32>:
    270c:	09 00 e0    	cp0.w     w9
    270e:	11 00 34    	bra       LE, 0x2732 <.L15>
    2710:	09 05 78    	mov.w     w9, w10
    2712:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    2714:	01 00 36    	bra       LEU, 0x2718 <.L16>
    2716:	2a 00 20    	mov.w     #0x2, w10

00002718 <.L16>:
    2718:	c8 01 90    	mov.w     [w8+8], w3
    271a:	0a 01 78    	mov.w     w10, w2
    271c:	ec 80 57    	sub.w     w15, #0xc, w1
    271e:	58 00 90    	mov.w     [w8+10], w0
    2720:	03 00 01    	call      w3
    2722:	50 04 98    	mov.w     w0, [w8+10]
    2724:	00 00 e0    	cp0.w     w0
    2726:	20 00 32    	bra       Z, 0x2768 <.L29>
    2728:	68 08 90    	mov.w     [w8+28], w0
    272a:	0a 00 40    	add.w     w0, w10, w0
    272c:	60 0c 98    	mov.w     w0, [w8+28]
    272e:	8a 84 54    	sub.w     w9, w10, w9
    2730:	ed ff 37    	bra       0x270c <.L32>

00002732 <.L15>:
    2732:	08 10 90    	mov.w     [w8+32], w0
    2734:	80 00 eb    	clr.w     w1
    2736:	00 28 a3    	btst.z    w0, #0x2
    2738:	18 00 32    	bra       Z, 0x276a <.L4>
    273a:	0b 00 e0    	cp0.w     w11
    273c:	16 00 34    	bra       LE, 0x276a <.L4>
    273e:	8b 04 78    	mov.w     w11, w9

00002740 <.L19>:
    2740:	09 05 78    	mov.w     w9, w10
    2742:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    2744:	01 00 36    	bra       LEU, 0x2748 <.L18>
    2746:	2a 00 20    	mov.w     #0x2, w10

00002748 <.L18>:
    2748:	c8 01 90    	mov.w     [w8+8], w3
    274a:	0a 01 78    	mov.w     w10, w2
    274c:	ee 80 57    	sub.w     w15, #0xe, w1
    274e:	58 00 90    	mov.w     [w8+10], w0
    2750:	03 00 01    	call      w3
    2752:	50 04 98    	mov.w     w0, [w8+10]
    2754:	00 00 e0    	cp0.w     w0
    2756:	08 00 32    	bra       Z, 0x2768 <.L29>
    2758:	68 08 90    	mov.w     [w8+28], w0
    275a:	0a 00 40    	add.w     w0, w10, w0
    275c:	60 0c 98    	mov.w     w0, [w8+28]
    275e:	8a 84 54    	sub.w     w9, w10, w9
    2760:	42 40 a9    	bclr.b    0x42, #0x2
    2762:	ee ff 3c    	bra       GT, 0x2740 <.L19>
    2764:	80 00 eb    	clr.w     w1
    2766:	01 00 37    	bra       0x276a <.L4>

00002768 <.L29>:
    2768:	80 80 eb    	setm.w    w1

0000276a <.L4>:
    276a:	01 00 78    	mov.w     w1, w0
    276c:	4f 06 78    	mov.w     [--w15], w12
    276e:	4f 05 be    	mov.d     [--w15], w10
    2770:	4f 04 be    	mov.d     [--w15], w8
    2772:	00 80 fa    	ulnk      
    2774:	00 00 06    	return    

00002776 <__Vacopy>:
    2776:	01 08 78    	mov.w     w1, [w0]
    2778:	00 00 06    	return    

0000277a <_closeallreg>:
    277a:	00 82 22    	mov.w     #0x2820, w0
    277c:	61 00 37    	bra       0x2840 <__Atexit>

0000277e <__Closreg>:
    277e:	88 1f 78    	mov.w     w8, [w15++]
    2780:	68 f0 21    	mov.w     #0x1f06, w8
    2782:	18 04 e0    	cp0.b     [w8]
    2784:	03 00 3a    	bra       NZ, 0x278c <.L2>
    2786:	f9 ff 07    	rcall     0x277a <_closeallreg>
    2788:	20 c0 b3    	mov.b     #0x2, w0
    278a:	00 4c 78    	mov.b     w0, [w8]

0000278c <.L2>:
    278c:	4f 04 78    	mov.w     [--w15], w8
    278e:	00 00 06    	return    

00002790 <_fclose>:
    2790:	88 9f be    	mov.d     w8, [w15++]
    2792:	00 04 78    	mov.w     w0, w8
    2794:	08 00 78    	mov.w     w8, w0
    2796:	8e fc 07    	rcall     0x20b4 <__DNKfflush>
    2798:	80 04 78    	mov.w     w0, w9
    279a:	00 04 20    	mov.w     #0x40, w0
    279c:	18 00 60    	and.w     w0, [w8], w0
    279e:	02 00 32    	bra       Z, 0x27a4 <.L5>
    27a0:	28 00 90    	mov.w     [w8+4], w0
    27a2:	0b fd 07    	rcall     0x21ba <_free>

000027a4 <.L5>:
    27a4:	00 00 eb    	clr.w     w0
    27a6:	20 04 98    	mov.w     w0, [w8+4]
    27a8:	38 40 90    	mov.b     [w8+3], w0
    27aa:	00 04 e0    	cp0.b     w0
    27ac:	05 00 35    	bra       LT, 0x27b8 <.L6>
    27ae:	00 00 fb    	se        w0, w0
    27b0:	2e f5 07    	rcall     0x120e <_close>
    27b2:	00 00 e0    	cp0.w     w0
    27b4:	01 00 32    	bra       Z, 0x27b8 <.L6>
    27b6:	80 84 eb    	setm.w    w9

000027b8 <.L6>:
    27b8:	18 10 90    	mov.w     [w8+34], w0
    27ba:	00 00 e0    	cp0.w     w0
    27bc:	08 00 32    	bra       Z, 0x27ce <.L7>
    27be:	30 f5 07    	rcall     0x1220 <_remove>
    27c0:	00 00 e0    	cp0.w     w0
    27c2:	01 00 32    	bra       Z, 0x27c6 <.L8>
    27c4:	80 84 eb    	setm.w    w9

000027c6 <.L8>:
    27c6:	18 10 90    	mov.w     [w8+34], w0
    27c8:	f8 fc 07    	rcall     0x21ba <_free>
    27ca:	00 00 eb    	clr.w     w0
    27cc:	10 14 98    	mov.w     w0, [w8+34]

000027ce <.L7>:
    27ce:	00 08 20    	mov.w     #0x80, w0
    27d0:	18 00 60    	and.w     w0, [w8], w0
    27d2:	15 00 32    	bra       Z, 0x27fe <.L9>
    27d4:	00 01 eb    	clr.w     w2
    27d6:	60 00 b8    	mul.uu    w0, #0x0, w0

000027d8 <.L12>:
    27d8:	83 c7 21    	mov.w     #0x1c78, w3
    27da:	02 02 d0    	sl.w      w2, w4
    27dc:	63 02 7a    	mov.w     [w3+w4], w4
    27de:	88 0f 52    	sub.w     w4, w8, [w15]
    27e0:	05 00 3a    	bra       NZ, 0x27ec <.L10>
    27e2:	00 00 40    	add.w     w0, w0, w0
    27e4:	81 80 48    	addc.w    w1, w1, w1
    27e6:	00 80 41    	add.w     w3, w0, w0
    27e8:	00 08 eb    	clr.w     [w0]
    27ea:	06 00 37    	bra       0x27f8 <.L11>

000027ec <.L10>:
    27ec:	61 00 40    	add.w     w0, #0x1, w0
    27ee:	e0 80 48    	addc.w    w1, #0x0, w1
    27f0:	02 01 e8    	inc.w     w2, w2
    27f2:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    27f4:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    27f6:	f0 ff 3a    	bra       NZ, 0x27d8 <.L12>

000027f8 <.L11>:
    27f8:	08 00 78    	mov.w     w8, w0
    27fa:	df fc 07    	rcall     0x21ba <_free>
    27fc:	0e 00 37    	bra       0x281a <.L13>

000027fe <.L9>:
    27fe:	00 0c 78    	mov.w     w0, [w8]
    2800:	00 c0 eb    	setm.b    w0
    2802:	30 44 98    	mov.b     w0, [w8+3]
    2804:	60 02 20    	mov.w     #0x26, w0
    2806:	08 00 40    	add.w     w0, w8, w0
    2808:	20 04 98    	mov.w     w0, [w8+4]
    280a:	40 04 98    	mov.w     w0, [w8+8]
    280c:	50 04 98    	mov.w     w0, [w8+10]
    280e:	40 0c 98    	mov.w     w0, [w8+24]
    2810:	60 04 98    	mov.w     w0, [w8+12]
    2812:	50 0c 98    	mov.w     w0, [w8+26]
    2814:	70 04 98    	mov.w     w0, [w8+14]
    2816:	76 00 44    	add.w     w8, #0x16, w0
    2818:	00 0c 98    	mov.w     w0, [w8+16]

0000281a <.L13>:
    281a:	09 00 78    	mov.w     w9, w0
    281c:	4f 04 be    	mov.d     [--w15], w8
    281e:	00 00 06    	return    

00002820 <_closeall>:
    2820:	88 1f 78    	mov.w     w8, [w15++]
    2822:	00 04 eb    	clr.w     w8

00002824 <.L18>:
    2824:	61 40 b8    	mul.uu    w8, #0x1, w0
    2826:	e2 ff 2f    	mov.w     #0xfffe, w2
    2828:	f3 ff 2f    	mov.w     #0xffff, w3
    282a:	3c 00 07    	rcall     0x28a4 <___mulp32eds3>
    282c:	62 c8 21    	mov.w     #0x1c86, w2
    282e:	62 00 78    	mov.w     [w2+w0], w0
    2830:	00 00 e0    	cp0.w     w0
    2832:	01 00 32    	bra       Z, 0x2836 <.L17>
    2834:	ad ff 07    	rcall     0x2790 <_fclose>

00002836 <.L17>:
    2836:	08 04 e8    	inc.w     w8, w8
    2838:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    283a:	f4 ff 3a    	bra       NZ, 0x2824 <.L18>
    283c:	4f 04 78    	mov.w     [--w15], w8
    283e:	00 00 06    	return    

00002840 <__Atexit>:
    2840:	01 00 20    	mov.w     #0x0, w1
    2842:	01 00 e0    	cp0.w     w1
    2844:	08 00 32    	bra       Z, 0x2856 <.L1>
    2846:	01 00 80    	mov.w     0x0, w1
    2848:	01 00 e0    	cp0.w     w1
    284a:	05 00 32    	bra       Z, 0x2856 <.L1>
    284c:	81 00 e9    	dec.w     w1, w1
    284e:	01 00 88    	mov.w     w1, 0x0
    2850:	81 00 d0    	sl.w      w1, w1
    2852:	02 00 80    	mov.w     0x0, w2
    2854:	00 b1 78    	mov.w     w0, [w2+w1]

00002856 <.L1>:
    2856:	00 00 06    	return    

00002858 <_doclose>:
    2858:	00 c0 da    	.pword 0xdac000
    285a:	00 00 06    	return    

0000285c <_doremove>:
    285c:	00 c0 da    	.pword 0xdac000
    285e:	00 00 06    	return    

00002860 <___divsi3>:
    2860:	83 9f 68    	xor.w     w1, w3, [w15++]
    2862:	01 00 e0    	cp0.w     w1
    2864:	02 00 3d    	bra       GE, 0x286a <divtestb>
    2866:	60 00 10    	subr.w    w0, #0x0, w0
    2868:	e0 80 18    	subbr.w   w1, #0x0, w1

0000286a <divtestb>:
    286a:	03 00 e0    	cp0.w     w3
    286c:	02 00 3d    	bra       GE, 0x2872 <calcquot>
    286e:	60 01 11    	subr.w    w2, #0x0, w2
    2870:	e0 81 19    	subbr.w   w3, #0x0, w3

00002872 <calcquot>:
    2872:	05 00 07    	rcall     0x287e <___udivsi3>
    2874:	4f 00 e0    	cp0.w     [--w15]
    2876:	02 00 3b    	bra       NN, 0x287c <returnq>
    2878:	60 00 10    	subr.w    w0, #0x0, w0
    287a:	e0 80 18    	subbr.w   w1, #0x0, w1

0000287c <returnq>:
    287c:	00 00 06    	return    

0000287e <___udivsi3>:
    287e:	60 22 b8    	mul.uu    w4, #0x0, w4
    2880:	06 02 20    	mov.w     #0x20, w6

00002882 <nextbit>:
    2882:	00 00 d0    	sl.w      w0, w0
    2884:	81 80 d2    	rlc.w     w1, w1
    2886:	04 82 d2    	rlc.w     w4, w4
    2888:	85 82 d2    	rlc.w     w5, w5
    288a:	00 00 a0    	bset.w    w0, #0x0
    288c:	02 02 52    	sub.w     w4, w2, w4
    288e:	83 82 5a    	subb.w    w5, w3, w5
    2890:	03 00 31    	bra       C, 0x2898 <iterate>
    2892:	02 02 42    	add.w     w4, w2, w4
    2894:	83 82 4a    	addc.w    w5, w3, w5
    2896:	00 00 a1    	bclr.w    w0, #0x0

00002898 <iterate>:
    2898:	06 03 e9    	dec.w     w6, w6
    289a:	f3 ff 3a    	bra       NZ, 0x2882 <nextbit>
    289c:	00 00 06    	return    

0000289e <___umodsi3>:
    289e:	ef ff 07    	rcall     0x287e <___udivsi3>
    28a0:	04 00 be    	mov.d     w4, w0
    28a2:	00 00 06    	return    

000028a4 <___mulp32eds3>:
    28a4:	02 0a b9    	mul.su    w1, w2, w4
    28a6:	00 1b b9    	mul.su    w3, w0, w6
    28a8:	02 00 b8    	mul.uu    w0, w2, w0
    28aa:	81 00 42    	add.w     w4, w1, w1
    28ac:	81 00 43    	add.w     w6, w1, w1
    28ae:	00 00 06    	return    

000028b0 <___PplusBdi>:
    28b0:	88 9f be    	mov.d     w8, [w15++]
    28b2:	8a 9f be    	mov.d     w10, [w15++]
    28b4:	30 04 42    	add.w     w4, [w0++], w8
    28b6:	b0 84 4a    	addc.w    w5, [w0++], w9
    28b8:	30 05 4b    	addc.w    w6, [w0++], w10
    28ba:	90 85 4b    	addc.w    w7, [w0], w11
    28bc:	60 00 b1    	sub.w     #0x6, w0
    28be:	08 98 be    	mov.d     w8, [w0++]
    28c0:	0a 90 be    	mov.d     w10, [w0--]
    28c2:	04 40 e1    	cp.w      w8, w4
    28c4:	05 c8 e1    	cpb.w     w9, w5
    28c6:	06 d0 e1    	cpb.w     w10, w6
    28c8:	07 d8 e1    	cpb.w     w11, w7
    28ca:	02 00 31    	bra       C, 0x28d0 <.L1>
    28cc:	68 00 40    	add.w     w0, #0x8, w0
    28ce:	10 08 e8    	inc.w     [w0], [w0]

000028d0 <.L1>:
    28d0:	4f 05 be    	mov.d     [--w15], w10
    28d2:	4f 04 be    	mov.d     [--w15], w8
    28d4:	00 00 06    	return    

000028d6 <___PminusBdi>:
    28d6:	88 9f be    	mov.d     w8, [w15++]
    28d8:	8a 9f be    	mov.d     w10, [w15++]
    28da:	30 04 be    	mov.d     [w0++], w8
    28dc:	20 05 be    	mov.d     [w0--], w10
    28de:	04 18 54    	sub.w     w8, w4, [w0++]
    28e0:	05 98 5c    	subb.w    w9, w5, [w0++]
    28e2:	06 18 5d    	subb.w    w10, w6, [w0++]
    28e4:	07 98 5d    	subb.w    w11, w7, [w0++]
    28e6:	11 00 20    	mov.w     #0x1, w1
    28e8:	04 40 e1    	cp.w      w8, w4
    28ea:	05 c8 e1    	cpb.w     w9, w5
    28ec:	06 d0 e1    	cpb.w     w10, w6
    28ee:	07 d8 e1    	cpb.w     w11, w7
    28f0:	01 00 39    	bra       NC, 0x28f4 <.L4>
    28f2:	80 00 eb    	clr.w     w1

000028f4 <.L4>:
    28f4:	10 88 10    	subr.w    w1, [w0], [w0]
    28f6:	4f 05 be    	mov.d     [--w15], w10
    28f8:	4f 04 be    	mov.d     [--w15], w8
    28fa:	00 00 06    	return    

000028fc <___udivmoddi3>:
    28fc:	12 00 fa    	lnk       #0x12
    28fe:	88 9f be    	mov.d     w8, [w15++]
    2900:	8a 9f be    	mov.d     w10, [w15++]
    2902:	8c 9f be    	mov.d     w12, [w15++]
    2904:	e0 b7 9f    	mov.w     w0, [w15-20]
    2906:	f1 b7 9f    	mov.w     w1, [w15-18]
    2908:	82 bf 9f    	mov.w     w2, [w15-16]
    290a:	93 bf 9f    	mov.w     w3, [w15-14]
    290c:	06 05 be    	mov.d     w6, w10
    290e:	04 04 be    	mov.d     w4, w8
    2910:	00 00 eb    	clr.w     w0
    2912:	d0 b7 9f    	mov.w     w0, [w15-22]
    2914:	c0 b7 9f    	mov.w     w0, [w15-24]
    2916:	b0 b7 9f    	mov.w     w0, [w15-26]
    2918:	a0 b7 9f    	mov.w     w0, [w15-28]
    291a:	90 b7 9f    	mov.w     w0, [w15-30]
    291c:	00 06 eb    	clr.w     w12

0000291e <.L9>:
    291e:	5f b1 97    	mov.w     [w15-22], w2
    2920:	cf b0 97    	mov.w     [w15-24], w1
    2922:	82 01 41    	add.w     w2, w2, w3
    2924:	3f b0 97    	mov.w     [w15-26], w0
    2926:	02 00 e0    	cp0.w     w2
    2928:	04 00 3d    	bra       GE, 0x2932 <.L6>
    292a:	37 00 07    	rcall     0x299a <.LPA0>
    292c:	7e 80 57    	sub.w     w15, #0x1e, w0
    292e:	c0 ff 07    	rcall     0x28b0 <___PplusBdi>
    2930:	03 00 37    	bra       0x2938 <.L7>

00002932 <.L6>:
    2932:	33 00 07    	rcall     0x299a <.LPA0>
    2934:	7e 80 57    	sub.w     w15, #0x1e, w0
    2936:	cf ff 07    	rcall     0x28d6 <___PminusBdi>

00002938 <.L7>:
    2938:	df b6 97    	mov.w     [w15-22], w13
    293a:	0d 00 e0    	cp0.w     w13
    293c:	0c 00 35    	bra       LT, 0x2956 <.L8>
    293e:	6f b2 97    	mov.w     [w15-20], w4
    2940:	ff b2 97    	mov.w     [w15-18], w5
    2942:	0f bb 97    	mov.w     [w15-16], w6
    2944:	9f bb 97    	mov.w     [w15-14], w7
    2946:	10 00 20    	mov.w     #0x1, w0
    2948:	01 00 20    	mov.w     #0x0, w1
    294a:	60 11 b8    	mul.uu    w2, #0x0, w2
    294c:	00 02 72    	ior.w     w4, w0, w4
    294e:	81 82 72    	ior.w     w5, w1, w5
    2950:	02 03 73    	ior.w     w6, w2, w6
    2952:	83 83 73    	ior.w     w7, w3, w7
    2954:	1b 00 07    	rcall     0x298c <L0>

00002956 <.L8>:
    2956:	0c 06 e8    	inc.w     w12, w12
    2958:	01 04 20    	mov.w     #0x40, w1
    295a:	81 0f 56    	sub.w     w12, w1, [w15]
    295c:	e0 ff 3a    	bra       NZ, 0x291e <.L9>
    295e:	0d 00 e0    	cp0.w     w13
    2960:	04 00 3d    	bra       GE, 0x296a <.L10>
    2962:	08 02 be    	mov.d     w8, w4
    2964:	0a 03 be    	mov.d     w10, w6
    2966:	7e 80 57    	sub.w     w15, #0x1e, w0
    2968:	a3 ff 07    	rcall     0x28b0 <___PplusBdi>

0000296a <.L10>:
    296a:	5f a8 97    	mov.w     [w15-38], w0
    296c:	00 00 e0    	cp0.w     w0
    296e:	05 00 3a    	bra       NZ, 0x297a <.L11>
    2970:	1f b2 97    	mov.w     [w15-30], w4
    2972:	af b2 97    	mov.w     [w15-28], w5
    2974:	3f b3 97    	mov.w     [w15-26], w6
    2976:	cf b3 97    	mov.w     [w15-24], w7
    2978:	09 00 07    	rcall     0x298c <L0>

0000297a <.L11>:
    297a:	6f b0 97    	mov.w     [w15-20], w0
    297c:	ff b0 97    	mov.w     [w15-18], w1
    297e:	0f b9 97    	mov.w     [w15-16], w2
    2980:	9f b9 97    	mov.w     [w15-14], w3
    2982:	4f 06 be    	mov.d     [--w15], w12
    2984:	4f 05 be    	mov.d     [--w15], w10
    2986:	4f 04 be    	mov.d     [--w15], w8
    2988:	00 80 fa    	ulnk      
    298a:	00 00 06    	return    

0000298c <L0>:
    298c:	01 00 07    	rcall     0x2990 <.LPA5>
    298e:	00 00 06    	return    

00002990 <.LPA5>:
    2990:	a4 b7 9f    	mov.w     w4, [w15-28]
    2992:	b5 b7 9f    	mov.w     w5, [w15-26]
    2994:	c6 b7 9f    	mov.w     w6, [w15-24]
    2996:	d7 b7 9f    	mov.w     w7, [w15-22]
    2998:	00 00 06    	return    

0000299a <.LPA0>:
    299a:	4f 09 de    	lsr.w     w1, #0xf, w2
    299c:	82 81 71    	ior.w     w3, w2, w3
    299e:	b3 b7 9f    	mov.w     w3, [w15-26]
    29a0:	4f 01 de    	lsr.w     w0, #0xf, w2
    29a2:	81 80 40    	add.w     w1, w1, w1
    29a4:	82 80 70    	ior.w     w1, w2, w1
    29a6:	a1 b7 9f    	mov.w     w1, [w15-28]
    29a8:	8f b0 97    	mov.w     [w15-32], w1
    29aa:	4f 09 de    	lsr.w     w1, #0xf, w2
    29ac:	00 00 40    	add.w     w0, w0, w0
    29ae:	02 00 70    	ior.w     w0, w2, w0
    29b0:	90 b7 9f    	mov.w     w0, [w15-30]
    29b2:	7f a8 97    	mov.w     [w15-34], w0
    29b4:	4f 01 de    	lsr.w     w0, #0xf, w2
    29b6:	81 80 40    	add.w     w1, w1, w1
    29b8:	82 80 70    	ior.w     w1, w2, w1
    29ba:	81 b7 9f    	mov.w     w1, [w15-32]
    29bc:	0d 00 07    	rcall     0x29d8 <.LPA4>
    29be:	4f 3a de    	lsr.w     w7, #0xf, w4
    29c0:	00 00 40    	add.w     w0, w0, w0
    29c2:	04 00 70    	ior.w     w0, w4, w0
    29c4:	f0 af 9f    	mov.w     w0, [w15-34]
    29c6:	08 00 07    	rcall     0x29d8 <.LPA4>
    29c8:	04 02 42    	add.w     w4, w4, w4
    29ca:	85 82 4a    	addc.w    w5, w5, w5
    29cc:	06 03 4b    	addc.w    w6, w6, w6
    29ce:	87 83 4b    	addc.w    w7, w7, w7
    29d0:	df ff 07    	rcall     0x2990 <.LPA5>
    29d2:	08 02 be    	mov.d     w8, w4
    29d4:	0a 03 be    	mov.d     w10, w6
    29d6:	00 00 06    	return    

000029d8 <.LPA4>:
    29d8:	2f b2 97    	mov.w     [w15-28], w4
    29da:	bf b2 97    	mov.w     [w15-26], w5
    29dc:	4f b3 97    	mov.w     [w15-24], w6
    29de:	df b3 97    	mov.w     [w15-22], w7
    29e0:	00 00 06    	return    

000029e2 <___udivdi3>:
    29e2:	88 1f 78    	mov.w     w8, [w15++]
    29e4:	18 00 20    	mov.w     #0x1, w8
    29e6:	88 1f 78    	mov.w     w8, [w15++]
    29e8:	89 ff 07    	rcall     0x28fc <___udivmoddi3>
    29ea:	8f 87 e9    	dec2.w    w15, w15
    29ec:	4f 04 78    	mov.w     [--w15], w8
    29ee:	00 00 06    	return    

000029f0 <___umoddi3>:
    29f0:	80 1f eb    	clr.w     [w15++]
    29f2:	84 ff 07    	rcall     0x28fc <___udivmoddi3>
    29f4:	8f 87 e9    	dec2.w    w15, w15
    29f6:	00 00 06    	return    

000029f8 <___divdi3>:
    29f8:	88 9f be    	mov.d     w8, [w15++]
    29fa:	8a 9f be    	mov.d     w10, [w15++]
    29fc:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    29fe:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2a00:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2a02:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2a04:	0c 00 3d    	bra       GE, 0x2a1e <.L15>
    2a06:	60 44 b8    	mul.uu    w8, #0x0, w8
    2a08:	60 55 b8    	mul.uu    w10, #0x0, w10
    2a0a:	00 00 54    	sub.w     w8, w0, w0
    2a0c:	81 80 5c    	subb.w    w9, w1, w1
    2a0e:	02 01 5d    	subb.w    w10, w2, w2
    2a10:	83 81 5d    	subb.w    w11, w3, w3
    2a12:	18 00 20    	mov.w     #0x1, w8
    2a14:	15 00 07    	rcall     0x2a40 <L0>
    2a16:	08 00 3d    	bra       GE, 0x2a28 <.L16>
    2a18:	18 00 07    	rcall     0x2a4a <.LPA1>
    2a1a:	00 04 eb    	clr.w     w8
    2a1c:	05 00 37    	bra       0x2a28 <.L16>

00002a1e <.L15>:
    2a1e:	00 04 eb    	clr.w     w8
    2a20:	0f 00 07    	rcall     0x2a40 <L0>
    2a22:	02 00 3d    	bra       GE, 0x2a28 <.L16>
    2a24:	12 00 07    	rcall     0x2a4a <.LPA1>
    2a26:	18 00 20    	mov.w     #0x1, w8

00002a28 <.L16>:
    2a28:	dc ff 07    	rcall     0x29e2 <___udivdi3>
    2a2a:	08 00 e0    	cp0.w     w8
    2a2c:	06 00 32    	bra       Z, 0x2a3a <.L17>
    2a2e:	60 22 b8    	mul.uu    w4, #0x0, w4
    2a30:	60 33 b8    	mul.uu    w6, #0x0, w6
    2a32:	00 00 52    	sub.w     w4, w0, w0
    2a34:	81 80 5a    	subb.w    w5, w1, w1
    2a36:	02 01 5b    	subb.w    w6, w2, w2
    2a38:	83 81 5b    	subb.w    w7, w3, w3

00002a3a <.L17>:
    2a3a:	4f 05 be    	mov.d     [--w15], w10
    2a3c:	4f 04 be    	mov.d     [--w15], w8
    2a3e:	00 00 06    	return    

00002a40 <L0>:
    2a40:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2a42:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2a44:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2a46:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2a48:	00 00 06    	return    

00002a4a <.LPA1>:
    2a4a:	60 44 b8    	mul.uu    w8, #0x0, w8
    2a4c:	60 55 b8    	mul.uu    w10, #0x0, w10
    2a4e:	04 02 54    	sub.w     w8, w4, w4
    2a50:	85 82 5c    	subb.w    w9, w5, w5
    2a52:	06 03 5d    	subb.w    w10, w6, w6
    2a54:	87 83 5d    	subb.w    w11, w7, w7
    2a56:	00 00 06    	return    

00002a58 <___moddi3>:
    2a58:	88 9f be    	mov.d     w8, [w15++]
    2a5a:	8a 9f be    	mov.d     w10, [w15++]
    2a5c:	8c 1f 78    	mov.w     w12, [w15++]
    2a5e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2a60:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2a62:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2a64:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2a66:	0d 00 3d    	bra       GE, 0x2a82 <.L21>
    2a68:	60 44 b8    	mul.uu    w8, #0x0, w8
    2a6a:	60 55 b8    	mul.uu    w10, #0x0, w10
    2a6c:	00 00 54    	sub.w     w8, w0, w0
    2a6e:	81 80 5c    	subb.w    w9, w1, w1
    2a70:	02 01 5d    	subb.w    w10, w2, w2
    2a72:	83 81 5d    	subb.w    w11, w3, w3
    2a74:	1c 00 20    	mov.w     #0x1, w12
    2a76:	08 20 e1    	cp.w      w4, w8
    2a78:	09 a8 e1    	cpb.w     w5, w9
    2a7a:	0a b0 e1    	cpb.w     w6, w10
    2a7c:	0b b8 e1    	cpb.w     w7, w11
    2a7e:	0d 00 3d    	bra       GE, 0x2a9a <.L22>
    2a80:	08 00 37    	bra       0x2a92 <.L26>

00002a82 <.L21>:
    2a82:	00 06 eb    	clr.w     w12
    2a84:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2a86:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2a88:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2a8a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2a8c:	06 00 3d    	bra       GE, 0x2a9a <.L22>
    2a8e:	60 44 b8    	mul.uu    w8, #0x0, w8
    2a90:	60 55 b8    	mul.uu    w10, #0x0, w10

00002a92 <.L26>:
    2a92:	04 02 54    	sub.w     w8, w4, w4
    2a94:	85 82 5c    	subb.w    w9, w5, w5
    2a96:	06 03 5d    	subb.w    w10, w6, w6
    2a98:	87 83 5d    	subb.w    w11, w7, w7

00002a9a <.L22>:
    2a9a:	aa ff 07    	rcall     0x29f0 <___umoddi3>
    2a9c:	0c 00 e0    	cp0.w     w12
    2a9e:	06 00 32    	bra       Z, 0x2aac <.L23>
    2aa0:	60 22 b8    	mul.uu    w4, #0x0, w4
    2aa2:	60 33 b8    	mul.uu    w6, #0x0, w6
    2aa4:	00 00 52    	sub.w     w4, w0, w0
    2aa6:	81 80 5a    	subb.w    w5, w1, w1
    2aa8:	02 01 5b    	subb.w    w6, w2, w2
    2aaa:	83 81 5b    	subb.w    w7, w3, w3

00002aac <.L23>:
    2aac:	4f 06 78    	mov.w     [--w15], w12
    2aae:	4f 05 be    	mov.d     [--w15], w10
    2ab0:	4f 04 be    	mov.d     [--w15], w8
    2ab2:	00 00 06    	return    

00002ab4 <___muldi3>:
    2ab4:	88 9f be    	mov.d     w8, [w15++]
    2ab6:	8a 9f be    	mov.d     w10, [w15++]
    2ab8:	8c 1f 78    	mov.w     w12, [w15++]
    2aba:	00 06 eb    	clr.w     w12
    2abc:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2abe:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2ac0:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2ac2:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2ac4:	07 00 3d    	bra       GE, 0x2ad4 <.L2>
    2ac6:	60 44 b8    	mul.uu    w8, #0x0, w8
    2ac8:	60 55 b8    	mul.uu    w10, #0x0, w10
    2aca:	00 00 54    	sub.w     w8, w0, w0
    2acc:	81 80 5c    	subb.w    w9, w1, w1
    2ace:	02 01 5d    	subb.w    w10, w2, w2
    2ad0:	83 81 5d    	subb.w    w11, w3, w3
    2ad2:	1c 00 20    	mov.w     #0x1, w12

00002ad4 <.L2>:
    2ad4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2ad6:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2ad8:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2ada:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2adc:	07 00 3d    	bra       GE, 0x2aec <.L3>
    2ade:	60 44 b8    	mul.uu    w8, #0x0, w8
    2ae0:	60 55 b8    	mul.uu    w10, #0x0, w10
    2ae2:	04 02 54    	sub.w     w8, w4, w4
    2ae4:	85 82 5c    	subb.w    w9, w5, w5
    2ae6:	06 03 5d    	subb.w    w10, w6, w6
    2ae8:	87 83 5d    	subb.w    w11, w7, w7
    2aea:	0c 00 a2    	btg.w     w12, #0x0

00002aec <.L3>:
    2aec:	0c 00 07    	rcall     0x2b06 <___umuldi3>
    2aee:	0c 00 e0    	cp0.w     w12
    2af0:	06 00 32    	bra       Z, 0x2afe <.L4>
    2af2:	60 22 b8    	mul.uu    w4, #0x0, w4
    2af4:	60 33 b8    	mul.uu    w6, #0x0, w6
    2af6:	00 00 52    	sub.w     w4, w0, w0
    2af8:	81 80 5a    	subb.w    w5, w1, w1
    2afa:	02 01 5b    	subb.w    w6, w2, w2
    2afc:	83 81 5b    	subb.w    w7, w3, w3

00002afe <.L4>:
    2afe:	4f 06 78    	mov.w     [--w15], w12
    2b00:	4f 05 be    	mov.d     [--w15], w10
    2b02:	4f 04 be    	mov.d     [--w15], w8
    2b04:	00 00 06    	return    

00002b06 <___umuldi3>:
    2b06:	88 9f be    	mov.d     w8, [w15++]
    2b08:	8a 9f be    	mov.d     w10, [w15++]
    2b0a:	8c 9f be    	mov.d     w12, [w15++]
    2b0c:	04 04 b8    	mul.uu    w0, w4, w8
    2b0e:	05 06 b8    	mul.uu    w0, w5, w12
    2b10:	89 04 46    	add.w     w12, w9, w9
    2b12:	60 85 4e    	addc.w    w13, #0x0, w10
    2b14:	06 06 b8    	mul.uu    w0, w6, w12
    2b16:	0a 05 46    	add.w     w12, w10, w10
    2b18:	e0 85 4e    	addc.w    w13, #0x0, w11
    2b1a:	07 06 b8    	mul.uu    w0, w7, w12
    2b1c:	8b 05 46    	add.w     w12, w11, w11
    2b1e:	04 0e b8    	mul.uu    w1, w4, w12
    2b20:	89 04 46    	add.w     w12, w9, w9
    2b22:	0a 85 4e    	addc.w    w13, w10, w10
    2b24:	e0 85 4d    	addc.w    w11, #0x0, w11
    2b26:	05 0e b8    	mul.uu    w1, w5, w12
    2b28:	0a 05 46    	add.w     w12, w10, w10
    2b2a:	8b 85 4e    	addc.w    w13, w11, w11
    2b2c:	06 0e b8    	mul.uu    w1, w6, w12
    2b2e:	8b 05 46    	add.w     w12, w11, w11
    2b30:	04 16 b8    	mul.uu    w2, w4, w12
    2b32:	0a 05 46    	add.w     w12, w10, w10
    2b34:	8b 85 4e    	addc.w    w13, w11, w11
    2b36:	05 16 b8    	mul.uu    w2, w5, w12
    2b38:	8b 05 46    	add.w     w12, w11, w11
    2b3a:	04 1e b8    	mul.uu    w3, w4, w12
    2b3c:	8b 05 46    	add.w     w12, w11, w11
    2b3e:	08 00 be    	mov.d     w8, w0
    2b40:	0a 01 be    	mov.d     w10, w2
    2b42:	4f 06 be    	mov.d     [--w15], w12
    2b44:	4f 05 be    	mov.d     [--w15], w10
    2b46:	4f 04 be    	mov.d     [--w15], w8
    2b48:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	5a 43 04    	goto      0x435a <__T1Interrupt>
    1026:	00 00 00 
    1028:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	88 43 04    	goto      0x4388 <__T2Interrupt>
    1032:	00 00 00 
    1034:	b6 43 04    	goto      0x43b6 <__T3Interrupt>
    1036:	00 00 00 
    1038:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	f2 2d 04    	goto      0x2df2 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	c4 2d 04    	goto      0x2dc4 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	e4 43 04    	goto      0x43e4 <__T4Interrupt>
    1072:	00 00 00 
    1074:	12 44 04    	goto      0x4412 <__T5Interrupt>
    1076:	00 00 00 
    1078:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	4e 2e 04    	goto      0x2e4e <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	20 2e 04    	goto      0x2e20 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	aa 2e 04    	goto      0x2eaa <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	7c 2e 04    	goto      0x2e7c <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	da 42 04    	goto      0x42da <__USB1Interrupt>
    10ee:	00 00 00 
    10f0:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	06 2f 04    	goto      0x2f06 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	d8 2e 04    	goto      0x2ed8 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	b0 53 04    	goto      0x53b0 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000ab4a <.LC0-0x62>:
    ab4a:	12 01       	.word 0x112
    ab4c:	00 02       	.word 0x200
    ab4e:	00 00       	.word 0
    ab50:	00 40       	.word 0x4000
    ab52:	66 66       	.word 0x6666
    ab54:	03 00       	.word 0x3
    ab56:	00 00       	.word 0
    ab58:	01 02       	.word 0x201
    ab5a:	00 01       	.word 0x100
    ab5c:	09 02       	.word 0x209
    ab5e:	12 00       	.word 0x12
    ab60:	01 01       	.word 0x101
    ab62:	00 a0       	.word 0xa000
    ab64:	32 09       	.word 0x932
    ab66:	04 00       	.word 0x4
    ab68:	00 00       	.word 0
    ab6a:	ff 00       	.word 0xff
    ab6c:	ff 00       	.word 0xff
    ab6e:	04 03       	.word 0x304
    ab70:	09 04       	.word 0x409
    ab72:	1a 03       	.word 0x31a
    ab74:	4f 00       	.word 0x4f
    ab76:	6c 00       	.word 0x6c
    ab78:	69 00       	.word 0x69
    ab7a:	6e 00       	.word 0x6e
    ab7c:	20 00       	.word 0x20
    ab7e:	43 00       	.word 0x43
    ab80:	6f 00       	.word 0x6f
    ab82:	6c 00       	.word 0x6c
    ab84:	6c 00       	.word 0x6c
    ab86:	65 00       	.word 0x65
    ab88:	67 00       	.word 0x67
    ab8a:	65 00       	.word 0x65
    ab8c:	20 03       	.word 0x320
    ab8e:	50 00       	.word 0x50
    ab90:	49 00       	.word 0x49
    ab92:	43 00       	.word 0x43
    ab94:	32 00       	.word 0x32
    ab96:	34 00       	.word 0x34
    ab98:	46 00       	.word 0x46
    ab9a:	4a 00       	.word 0x4a
    ab9c:	31 00       	.word 0x31
    ab9e:	32 00       	.word 0x32
    aba0:	38 00       	.word 0x38
    aba2:	47 00       	.word 0x47
    aba4:	42 00       	.word 0x42
    aba6:	32 00       	.word 0x32
    aba8:	30 00       	.word 0x30
    abaa:	36 00       	.word 0x36

0000abac <.LC0>:
    abac:	25 30       	.word 0x3025
    abae:	34 78       	.word 0x7834
    abb0:	25 30       	.word 0x3025
    abb2:	34 78       	.word 0x7834
    abb4:	25 30       	.word 0x3025
    abb6:	34 78       	.word 0x7834
    abb8:	0d 00       	.word 0xd

0000abba <.LC1>:
    abba:	25 73       	.word 0x7325
    abbc:	0a 0d       	.word 0xd0a
    abbe:	00 25       	.word 0x2500

0000abbf <.LC2>:
    abbf:	00 00       	.word 0
    abc1:	00 00       	.word 0
	...

0000abc4 <.LC3>:
    abc4:	0a 00       	.word 0xa

0000abc6 <.LC4>:
    abc6:	74 65       	.word 0x6574
    abc8:	73 74       	.word 0x7473
    abca:	00 00       	.word 0
Disassembly of section .text:

00002bcc <___putc_nobuffer>:
_PIN TX2, RX2, RTS2, CTS2;

uint8_t HWTXBUF[1024], HWRXBUF[1024];

void __putc_nobuffer(_UART *self, uint8_t ch) {
    2bcc:	04 00 fa    	lnk       #0x4
    2bce:	00 0f 78    	mov.w     w0, [w14]
    2bd0:	21 47 98    	mov.b     w1, [w14+2]

00002bd2 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    2bd2:	00 00 00    	nop       

00002bd4 <.L2>:
    2bd4:	1e 00 78    	mov.w     [w14], w0
    2bd6:	10 00 90    	mov.w     [w0+2], w0
    2bd8:	90 00 78    	mov.w     [w0], w1
    2bda:	00 20 20    	mov.w     #0x200, w0
    2bdc:	00 80 60    	and.w     w1, w0, w0
    2bde:	00 00 e0    	cp0.w     w0
    2be0:	f9 ff 3a    	bra       NZ, 0x2bd4 <.L2>

00002be2 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    2be2:	1e 00 78    	mov.w     [w14], w0
    2be4:	20 00 90    	mov.w     [w0+4], w0
    2be6:	ae 40 90    	mov.b     [w14+2], w1
    2be8:	81 80 fb    	ze        w1, w1
    2bea:	01 08 78    	mov.w     w1, [w0]

00002bec <.LSM3>:
}
    2bec:	00 80 fa    	ulnk      
    2bee:	00 00 06    	return    

00002bf0 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    2bf0:	02 00 fa    	lnk       #0x2
    2bf2:	00 0f 78    	mov.w     w0, [w14]

00002bf4 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    2bf4:	00 00 00    	nop       

00002bf6 <.L4>:
    2bf6:	1e 00 78    	mov.w     [w14], w0
    2bf8:	10 00 90    	mov.w     [w0+2], w0
    2bfa:	10 00 78    	mov.w     [w0], w0
    2bfc:	61 00 60    	and.w     w0, #0x1, w0
    2bfe:	00 00 e0    	cp0.w     w0
    2c00:	fa ff 32    	bra       Z, 0x2bf6 <.L4>

00002c02 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    2c02:	1e 00 78    	mov.w     [w14], w0
    2c04:	30 00 90    	mov.w     [w0+6], w0
    2c06:	10 00 78    	mov.w     [w0], w0
    2c08:	00 40 78    	mov.b     w0, w0

00002c0a <.LSM7>:
}
    2c0a:	00 80 fa    	ulnk      
    2c0c:	00 00 06    	return    

00002c0e <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    2c0e:	04 00 fa    	lnk       #0x4
    2c10:	00 0f 78    	mov.w     w0, [w14]
    2c12:	21 47 98    	mov.b     w1, [w14+2]

00002c14 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    2c14:	00 00 00    	nop       

00002c16 <.L6>:
    2c16:	1e 00 78    	mov.w     [w14], w0
    2c18:	d0 10 90    	mov.w     [w0+42], w1
    2c1a:	1e 00 78    	mov.w     [w14], w0
    2c1c:	20 10 90    	mov.w     [w0+36], w0
    2c1e:	80 8f 50    	sub.w     w1, w0, [w15]
    2c20:	fa ff 32    	bra       Z, 0x2c16 <.L6>

00002c22 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    2c22:	ff 3f fc    	disi      #0x3fff

00002c24 <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    2c24:	1e 00 78    	mov.w     [w14], w0
    2c26:	90 10 90    	mov.w     [w0+34], w1
    2c28:	1e 00 78    	mov.w     [w14], w0
    2c2a:	40 10 90    	mov.w     [w0+40], w0
    2c2c:	00 80 40    	add.w     w1, w0, w0
    2c2e:	ae 40 90    	mov.b     [w14+2], w1
    2c30:	01 48 78    	mov.b     w1, [w0]

00002c32 <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    2c32:	1e 00 78    	mov.w     [w14], w0
    2c34:	40 10 90    	mov.w     [w0+40], w0
    2c36:	80 00 e8    	inc.w     w0, w1
    2c38:	1e 00 78    	mov.w     [w14], w0
    2c3a:	20 10 90    	mov.w     [w0+36], w0
    2c3c:	00 01 78    	mov.w     w0, w2
    2c3e:	11 00 09    	repeat    #0x11
    2c40:	82 80 d8    	div.uw    w1, w2
    2c42:	80 00 fd    	exch      w0, w1
    2c44:	80 00 78    	mov.w     w0, w1
    2c46:	1e 00 78    	mov.w     [w14], w0
    2c48:	41 10 98    	mov.w     w1, [w0+40]

00002c4a <.LSM13>:
    self->TXbuffer.count++;
    2c4a:	1e 00 78    	mov.w     [w14], w0
    2c4c:	50 10 90    	mov.w     [w0+42], w0
    2c4e:	80 00 e8    	inc.w     w0, w1
    2c50:	1e 00 78    	mov.w     [w14], w0
    2c52:	51 10 98    	mov.w     w1, [w0+42]

00002c54 <.LSM14>:
    enable_interrupts();
    2c54:	52 20 ef    	clr.w     0x52

00002c56 <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    2c56:	1e 00 78    	mov.w     [w14], w0
    2c58:	d0 10 90    	mov.w     [w0+42], w1
    2c5a:	1e 00 78    	mov.w     [w14], w0
    2c5c:	30 18 90    	mov.w     [w0+54], w0
    2c5e:	80 8f 50    	sub.w     w1, w0, [w15]
    2c60:	08 00 39    	bra       NC, 0x2c72 <.L5>

00002c62 <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    2c62:	1e 00 78    	mov.w     [w14], w0
    2c64:	10 00 90    	mov.w     [w0+2], w0
    2c66:	9e 00 78    	mov.w     [w14], w1
    2c68:	91 00 90    	mov.w     [w1+2], w1
    2c6a:	11 01 78    	mov.w     [w1], w2
    2c6c:	01 40 20    	mov.w     #0x400, w1
    2c6e:	82 80 70    	ior.w     w1, w2, w1
    2c70:	01 08 78    	mov.w     w1, [w0]

00002c72 <.L5>:
                                                    // transmission
}
    2c72:	00 80 fa    	ulnk      
    2c74:	00 00 06    	return    

00002c76 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    2c76:	04 00 fa    	lnk       #0x4
    2c78:	10 07 98    	mov.w     w0, [w14+2]

00002c7a <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2c7a:	1e 00 90    	mov.w     [w14+2], w0
    2c7c:	50 00 90    	mov.w     [w0+10], w0
    2c7e:	9e 00 90    	mov.w     [w14+2], w1
    2c80:	d1 00 90    	mov.w     [w1+10], w1
    2c82:	11 01 78    	mov.w     [w1], w2
    2c84:	9e 00 90    	mov.w     [w14+2], w1
    2c86:	e1 48 90    	mov.b     [w1+14], w1
    2c88:	81 80 fb    	ze        w1, w1
    2c8a:	13 00 20    	mov.w     #0x1, w3
    2c8c:	81 18 dd    	sl.w      w3, w1, w1
    2c8e:	81 80 ea    	com.w     w1, w1
    2c90:	81 00 61    	and.w     w2, w1, w1
    2c92:	01 08 78    	mov.w     w1, [w0]

00002c94 <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    2c94:	1e 00 90    	mov.w     [w14+2], w0
    2c96:	50 10 90    	mov.w     [w0+42], w0
    2c98:	00 00 e0    	cp0.w     w0
    2c9a:	27 00 3a    	bra       NZ, 0x2cea <.L13>

00002c9c <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    2c9c:	1e 00 90    	mov.w     [w14+2], w0
    2c9e:	10 00 90    	mov.w     [w0+2], w0
    2ca0:	9e 00 90    	mov.w     [w14+2], w1
    2ca2:	91 00 90    	mov.w     [w1+2], w1
    2ca4:	11 01 78    	mov.w     [w1], w2
    2ca6:	f1 bf 2f    	mov.w     #0xfbff, w1
    2ca8:	81 00 61    	and.w     w2, w1, w1
    2caa:	01 08 78    	mov.w     w1, [w0]

00002cac <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    2cac:	1f 00 37    	bra       0x2cec <.L10>

00002cae <.L12>:
        disable_interrupts();
    2cae:	ff 3f fc    	disi      #0x3fff

00002cb0 <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    2cb0:	1e 00 90    	mov.w     [w14+2], w0
    2cb2:	90 10 90    	mov.w     [w0+34], w1
    2cb4:	1e 00 90    	mov.w     [w14+2], w0
    2cb6:	30 10 90    	mov.w     [w0+38], w0
    2cb8:	00 80 40    	add.w     w1, w0, w0
    2cba:	10 4f 78    	mov.b     [w0], [w14]

00002cbc <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    2cbc:	1e 00 90    	mov.w     [w14+2], w0
    2cbe:	30 10 90    	mov.w     [w0+38], w0
    2cc0:	80 00 e8    	inc.w     w0, w1
    2cc2:	1e 00 90    	mov.w     [w14+2], w0
    2cc4:	20 10 90    	mov.w     [w0+36], w0
    2cc6:	00 01 78    	mov.w     w0, w2
    2cc8:	11 00 09    	repeat    #0x11
    2cca:	82 80 d8    	div.uw    w1, w2
    2ccc:	80 00 fd    	exch      w0, w1
    2cce:	80 00 78    	mov.w     w0, w1
    2cd0:	1e 00 90    	mov.w     [w14+2], w0
    2cd2:	31 10 98    	mov.w     w1, [w0+38]

00002cd4 <.LSM26>:
        self->TXbuffer.count--;
    2cd4:	1e 00 90    	mov.w     [w14+2], w0
    2cd6:	50 10 90    	mov.w     [w0+42], w0
    2cd8:	80 00 e9    	dec.w     w0, w1
    2cda:	1e 00 90    	mov.w     [w14+2], w0
    2cdc:	51 10 98    	mov.w     w1, [w0+42]

00002cde <.LSM27>:
        enable_interrupts();
    2cde:	52 20 ef    	clr.w     0x52

00002ce0 <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    2ce0:	1e 00 90    	mov.w     [w14+2], w0
    2ce2:	20 00 90    	mov.w     [w0+4], w0
    2ce4:	9e 80 fb    	ze        [w14], w1
    2ce6:	01 08 78    	mov.w     w1, [w0]
    2ce8:	01 00 37    	bra       0x2cec <.L10>

00002cea <.L13>:
    2cea:	00 00 00    	nop       

00002cec <.L10>:
    2cec:	1e 00 90    	mov.w     [w14+2], w0
    2cee:	10 00 90    	mov.w     [w0+2], w0
    2cf0:	90 00 78    	mov.w     [w0], w1
    2cf2:	00 20 20    	mov.w     #0x200, w0
    2cf4:	00 80 60    	and.w     w1, w0, w0
    2cf6:	00 00 e0    	cp0.w     w0
    2cf8:	04 00 3a    	bra       NZ, 0x2d02 <.L8>
    2cfa:	1e 00 90    	mov.w     [w14+2], w0
    2cfc:	50 10 90    	mov.w     [w0+42], w0
    2cfe:	00 00 e0    	cp0.w     w0
    2d00:	d6 ff 3a    	bra       NZ, 0x2cae <.L12>

00002d02 <.L8>:
    }
}
    2d02:	00 80 fa    	ulnk      
    2d04:	00 00 06    	return    

00002d06 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    2d06:	04 00 fa    	lnk       #0x4
    2d08:	10 07 98    	mov.w     w0, [w14+2]

00002d0a <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    2d0a:	00 00 00    	nop       

00002d0c <.L15>:
    2d0c:	1e 00 90    	mov.w     [w14+2], w0
    2d0e:	20 18 90    	mov.w     [w0+52], w0
    2d10:	00 00 e0    	cp0.w     w0
    2d12:	fc ff 32    	bra       Z, 0x2d0c <.L15>

00002d14 <.LSM33>:
    disable_interrupts();
    2d14:	ff 3f fc    	disi      #0x3fff

00002d16 <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    2d16:	1e 00 90    	mov.w     [w14+2], w0
    2d18:	e0 10 90    	mov.w     [w0+44], w1
    2d1a:	1e 00 90    	mov.w     [w14+2], w0
    2d1c:	00 18 90    	mov.w     [w0+48], w0
    2d1e:	00 80 40    	add.w     w1, w0, w0
    2d20:	10 4f 78    	mov.b     [w0], [w14]

00002d22 <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    2d22:	1e 00 90    	mov.w     [w14+2], w0
    2d24:	00 18 90    	mov.w     [w0+48], w0
    2d26:	80 00 e8    	inc.w     w0, w1
    2d28:	1e 00 90    	mov.w     [w14+2], w0
    2d2a:	70 10 90    	mov.w     [w0+46], w0
    2d2c:	00 01 78    	mov.w     w0, w2
    2d2e:	11 00 09    	repeat    #0x11
    2d30:	82 80 d8    	div.uw    w1, w2
    2d32:	80 00 fd    	exch      w0, w1
    2d34:	80 00 78    	mov.w     w0, w1
    2d36:	1e 00 90    	mov.w     [w14+2], w0
    2d38:	01 18 98    	mov.w     w1, [w0+48]

00002d3a <.LSM36>:
    self->RXbuffer.count--;
    2d3a:	1e 00 90    	mov.w     [w14+2], w0
    2d3c:	20 18 90    	mov.w     [w0+52], w0
    2d3e:	80 00 e9    	dec.w     w0, w1
    2d40:	1e 00 90    	mov.w     [w14+2], w0
    2d42:	21 18 98    	mov.w     w1, [w0+52]

00002d44 <.LSM37>:
    enable_interrupts();
    2d44:	52 20 ef    	clr.w     0x52

00002d46 <.LSM38>:
    return ch;
    2d46:	1e 40 78    	mov.b     [w14], w0

00002d48 <.LSM39>:
}
    2d48:	00 80 fa    	ulnk      
    2d4a:	00 00 06    	return    

00002d4c <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    2d4c:	02 00 fa    	lnk       #0x2
    2d4e:	00 0f 78    	mov.w     w0, [w14]

00002d50 <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2d50:	1e 00 78    	mov.w     [w14], w0
    2d52:	50 00 90    	mov.w     [w0+10], w0
    2d54:	9e 00 78    	mov.w     [w14], w1
    2d56:	d1 00 90    	mov.w     [w1+10], w1
    2d58:	11 01 78    	mov.w     [w1], w2
    2d5a:	9e 00 78    	mov.w     [w14], w1
    2d5c:	f1 48 90    	mov.b     [w1+15], w1
    2d5e:	81 80 fb    	ze        w1, w1
    2d60:	13 00 20    	mov.w     #0x1, w3
    2d62:	81 18 dd    	sl.w      w3, w1, w1
    2d64:	81 80 ea    	com.w     w1, w1
    2d66:	81 00 61    	and.w     w2, w1, w1
    2d68:	01 08 78    	mov.w     w1, [w0]

00002d6a <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    2d6a:	1d 00 37    	bra       0x2da6 <.L17>

00002d6c <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    2d6c:	ff 3f fc    	disi      #0x3fff

00002d6e <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    2d6e:	1e 00 78    	mov.w     [w14], w0
    2d70:	e0 10 90    	mov.w     [w0+44], w1
    2d72:	1e 00 78    	mov.w     [w14], w0
    2d74:	10 18 90    	mov.w     [w0+50], w0
    2d76:	00 80 40    	add.w     w1, w0, w0
    2d78:	9e 00 78    	mov.w     [w14], w1
    2d7a:	b1 00 90    	mov.w     [w1+6], w1
    2d7c:	91 00 78    	mov.w     [w1], w1
    2d7e:	81 40 78    	mov.b     w1, w1
    2d80:	01 48 78    	mov.b     w1, [w0]

00002d82 <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    2d82:	1e 00 78    	mov.w     [w14], w0
    2d84:	10 18 90    	mov.w     [w0+50], w0
    2d86:	80 00 e8    	inc.w     w0, w1
    2d88:	1e 00 78    	mov.w     [w14], w0
    2d8a:	70 10 90    	mov.w     [w0+46], w0
    2d8c:	00 01 78    	mov.w     w0, w2
    2d8e:	11 00 09    	repeat    #0x11
    2d90:	82 80 d8    	div.uw    w1, w2
    2d92:	80 00 fd    	exch      w0, w1
    2d94:	80 00 78    	mov.w     w0, w1
    2d96:	1e 00 78    	mov.w     [w14], w0
    2d98:	11 18 98    	mov.w     w1, [w0+50]

00002d9a <.LSM46>:
        self->RXbuffer.count++;
    2d9a:	1e 00 78    	mov.w     [w14], w0
    2d9c:	20 18 90    	mov.w     [w0+52], w0
    2d9e:	80 00 e8    	inc.w     w0, w1
    2da0:	1e 00 78    	mov.w     [w14], w0
    2da2:	21 18 98    	mov.w     w1, [w0+52]

00002da4 <.LSM47>:
        enable_interrupts();
    2da4:	52 20 ef    	clr.w     0x52

00002da6 <.L17>:
    2da6:	1e 00 78    	mov.w     [w14], w0
    2da8:	10 00 90    	mov.w     [w0+2], w0
    2daa:	10 00 78    	mov.w     [w0], w0
    2dac:	61 00 60    	and.w     w0, #0x1, w0
    2dae:	00 40 78    	mov.b     w0, w0
    2db0:	00 04 e0    	cp0.b     w0
    2db2:	06 00 32    	bra       Z, 0x2dc0 <.L16>

00002db4 <.LSM49>:
    2db4:	1e 00 78    	mov.w     [w14], w0
    2db6:	a0 18 90    	mov.w     [w0+52], w1
    2db8:	1e 00 78    	mov.w     [w14], w0
    2dba:	70 10 90    	mov.w     [w0+46], w0

00002dbc <.LSM50>:
    2dbc:	80 8f 50    	sub.w     w1, w0, [w15]
    2dbe:	d6 ff 3a    	bra       NZ, 0x2d6c <.L19>

00002dc0 <.L16>:
    }
}
    2dc0:	00 80 fa    	ulnk      
    2dc2:	00 00 06    	return    

00002dc4 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    2dc4:	36 00 f8    	push      0x36
    2dc6:	80 9f be    	mov.d     w0, [w15++]
    2dc8:	82 9f be    	mov.d     w2, [w15++]
    2dca:	84 9f be    	mov.d     w4, [w15++]
    2dcc:	86 9f be    	mov.d     w6, [w15++]
    2dce:	32 00 f8    	push      0x32
    2dd0:	34 00 f8    	push      0x34
    2dd2:	10 00 20    	mov.w     #0x1, w0
    2dd4:	a0 01 88    	mov.w     w0, 0x34
    2dd6:	00 20 20    	mov.w     #0x200, w0
    2dd8:	90 01 88    	mov.w     w0, 0x32
    2dda:	00 00 fa    	lnk       #0x0

00002ddc <.LSM53>:
    __serviceTxInterrupt(&uart1);
    2ddc:	40 85 20    	mov.w     #0x854, w0
    2dde:	4b ff 07    	rcall     0x2c76 <___serviceTxInterrupt>

00002de0 <.LSM54>:
}
    2de0:	00 80 fa    	ulnk      
    2de2:	34 00 f9    	pop       0x34
    2de4:	32 00 f9    	pop       0x32
    2de6:	4f 03 be    	mov.d     [--w15], w6
    2de8:	4f 02 be    	mov.d     [--w15], w4
    2dea:	4f 01 be    	mov.d     [--w15], w2
    2dec:	4f 00 be    	mov.d     [--w15], w0
    2dee:	36 00 f9    	pop       0x36
    2df0:	00 40 06    	retfie    

00002df2 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    2df2:	36 00 f8    	push      0x36
    2df4:	80 9f be    	mov.d     w0, [w15++]
    2df6:	82 9f be    	mov.d     w2, [w15++]
    2df8:	84 9f be    	mov.d     w4, [w15++]
    2dfa:	86 9f be    	mov.d     w6, [w15++]
    2dfc:	32 00 f8    	push      0x32
    2dfe:	34 00 f8    	push      0x34
    2e00:	10 00 20    	mov.w     #0x1, w0
    2e02:	a0 01 88    	mov.w     w0, 0x34
    2e04:	00 20 20    	mov.w     #0x200, w0
    2e06:	90 01 88    	mov.w     w0, 0x32
    2e08:	00 00 fa    	lnk       #0x0

00002e0a <.LSM56>:
    __serviceRxInterrupt(&uart1);
    2e0a:	40 85 20    	mov.w     #0x854, w0
    2e0c:	9f ff 07    	rcall     0x2d4c <___serviceRxInterrupt>

00002e0e <.LSM57>:
}
    2e0e:	00 80 fa    	ulnk      
    2e10:	34 00 f9    	pop       0x34
    2e12:	32 00 f9    	pop       0x32
    2e14:	4f 03 be    	mov.d     [--w15], w6
    2e16:	4f 02 be    	mov.d     [--w15], w4
    2e18:	4f 01 be    	mov.d     [--w15], w2
    2e1a:	4f 00 be    	mov.d     [--w15], w0
    2e1c:	36 00 f9    	pop       0x36
    2e1e:	00 40 06    	retfie    

00002e20 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    2e20:	36 00 f8    	push      0x36
    2e22:	80 9f be    	mov.d     w0, [w15++]
    2e24:	82 9f be    	mov.d     w2, [w15++]
    2e26:	84 9f be    	mov.d     w4, [w15++]
    2e28:	86 9f be    	mov.d     w6, [w15++]
    2e2a:	32 00 f8    	push      0x32
    2e2c:	34 00 f8    	push      0x34
    2e2e:	10 00 20    	mov.w     #0x1, w0
    2e30:	a0 01 88    	mov.w     w0, 0x34
    2e32:	00 20 20    	mov.w     #0x200, w0
    2e34:	90 01 88    	mov.w     w0, 0x32
    2e36:	00 00 fa    	lnk       #0x0

00002e38 <.LSM59>:
    __serviceTxInterrupt(&uart2);
    2e38:	00 89 20    	mov.w     #0x890, w0
    2e3a:	1d ff 07    	rcall     0x2c76 <___serviceTxInterrupt>

00002e3c <.LSM60>:
}
    2e3c:	00 80 fa    	ulnk      
    2e3e:	34 00 f9    	pop       0x34
    2e40:	32 00 f9    	pop       0x32
    2e42:	4f 03 be    	mov.d     [--w15], w6
    2e44:	4f 02 be    	mov.d     [--w15], w4
    2e46:	4f 01 be    	mov.d     [--w15], w2
    2e48:	4f 00 be    	mov.d     [--w15], w0
    2e4a:	36 00 f9    	pop       0x36
    2e4c:	00 40 06    	retfie    

00002e4e <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2e4e:	36 00 f8    	push      0x36
    2e50:	80 9f be    	mov.d     w0, [w15++]
    2e52:	82 9f be    	mov.d     w2, [w15++]
    2e54:	84 9f be    	mov.d     w4, [w15++]
    2e56:	86 9f be    	mov.d     w6, [w15++]
    2e58:	32 00 f8    	push      0x32
    2e5a:	34 00 f8    	push      0x34
    2e5c:	10 00 20    	mov.w     #0x1, w0
    2e5e:	a0 01 88    	mov.w     w0, 0x34
    2e60:	00 20 20    	mov.w     #0x200, w0
    2e62:	90 01 88    	mov.w     w0, 0x32
    2e64:	00 00 fa    	lnk       #0x0

00002e66 <.LSM62>:
    __serviceRxInterrupt(&uart2);
    2e66:	00 89 20    	mov.w     #0x890, w0
    2e68:	71 ff 07    	rcall     0x2d4c <___serviceRxInterrupt>

00002e6a <.LSM63>:
}
    2e6a:	00 80 fa    	ulnk      
    2e6c:	34 00 f9    	pop       0x34
    2e6e:	32 00 f9    	pop       0x32
    2e70:	4f 03 be    	mov.d     [--w15], w6
    2e72:	4f 02 be    	mov.d     [--w15], w4
    2e74:	4f 01 be    	mov.d     [--w15], w2
    2e76:	4f 00 be    	mov.d     [--w15], w0
    2e78:	36 00 f9    	pop       0x36
    2e7a:	00 40 06    	retfie    

00002e7c <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    2e7c:	36 00 f8    	push      0x36
    2e7e:	80 9f be    	mov.d     w0, [w15++]
    2e80:	82 9f be    	mov.d     w2, [w15++]
    2e82:	84 9f be    	mov.d     w4, [w15++]
    2e84:	86 9f be    	mov.d     w6, [w15++]
    2e86:	32 00 f8    	push      0x32
    2e88:	34 00 f8    	push      0x34
    2e8a:	10 00 20    	mov.w     #0x1, w0
    2e8c:	a0 01 88    	mov.w     w0, 0x34
    2e8e:	00 20 20    	mov.w     #0x200, w0
    2e90:	90 01 88    	mov.w     w0, 0x32
    2e92:	00 00 fa    	lnk       #0x0

00002e94 <.LSM65>:
    __serviceTxInterrupt(&uart3);
    2e94:	c0 8c 20    	mov.w     #0x8cc, w0
    2e96:	ef fe 07    	rcall     0x2c76 <___serviceTxInterrupt>

00002e98 <.LSM66>:
}
    2e98:	00 80 fa    	ulnk      
    2e9a:	34 00 f9    	pop       0x34
    2e9c:	32 00 f9    	pop       0x32
    2e9e:	4f 03 be    	mov.d     [--w15], w6
    2ea0:	4f 02 be    	mov.d     [--w15], w4
    2ea2:	4f 01 be    	mov.d     [--w15], w2
    2ea4:	4f 00 be    	mov.d     [--w15], w0
    2ea6:	36 00 f9    	pop       0x36
    2ea8:	00 40 06    	retfie    

00002eaa <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    2eaa:	36 00 f8    	push      0x36
    2eac:	80 9f be    	mov.d     w0, [w15++]
    2eae:	82 9f be    	mov.d     w2, [w15++]
    2eb0:	84 9f be    	mov.d     w4, [w15++]
    2eb2:	86 9f be    	mov.d     w6, [w15++]
    2eb4:	32 00 f8    	push      0x32
    2eb6:	34 00 f8    	push      0x34
    2eb8:	10 00 20    	mov.w     #0x1, w0
    2eba:	a0 01 88    	mov.w     w0, 0x34
    2ebc:	00 20 20    	mov.w     #0x200, w0
    2ebe:	90 01 88    	mov.w     w0, 0x32
    2ec0:	00 00 fa    	lnk       #0x0

00002ec2 <.LSM68>:
    __serviceRxInterrupt(&uart3);
    2ec2:	c0 8c 20    	mov.w     #0x8cc, w0
    2ec4:	43 ff 07    	rcall     0x2d4c <___serviceRxInterrupt>

00002ec6 <.LSM69>:
}
    2ec6:	00 80 fa    	ulnk      
    2ec8:	34 00 f9    	pop       0x34
    2eca:	32 00 f9    	pop       0x32
    2ecc:	4f 03 be    	mov.d     [--w15], w6
    2ece:	4f 02 be    	mov.d     [--w15], w4
    2ed0:	4f 01 be    	mov.d     [--w15], w2
    2ed2:	4f 00 be    	mov.d     [--w15], w0
    2ed4:	36 00 f9    	pop       0x36
    2ed6:	00 40 06    	retfie    

00002ed8 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    2ed8:	36 00 f8    	push      0x36
    2eda:	80 9f be    	mov.d     w0, [w15++]
    2edc:	82 9f be    	mov.d     w2, [w15++]
    2ede:	84 9f be    	mov.d     w4, [w15++]
    2ee0:	86 9f be    	mov.d     w6, [w15++]
    2ee2:	32 00 f8    	push      0x32
    2ee4:	34 00 f8    	push      0x34
    2ee6:	10 00 20    	mov.w     #0x1, w0
    2ee8:	a0 01 88    	mov.w     w0, 0x34
    2eea:	00 20 20    	mov.w     #0x200, w0
    2eec:	90 01 88    	mov.w     w0, 0x32
    2eee:	00 00 fa    	lnk       #0x0

00002ef0 <.LSM71>:
    __serviceTxInterrupt(&uart4);
    2ef0:	80 90 20    	mov.w     #0x908, w0
    2ef2:	c1 fe 07    	rcall     0x2c76 <___serviceTxInterrupt>

00002ef4 <.LSM72>:
}
    2ef4:	00 80 fa    	ulnk      
    2ef6:	34 00 f9    	pop       0x34
    2ef8:	32 00 f9    	pop       0x32
    2efa:	4f 03 be    	mov.d     [--w15], w6
    2efc:	4f 02 be    	mov.d     [--w15], w4
    2efe:	4f 01 be    	mov.d     [--w15], w2
    2f00:	4f 00 be    	mov.d     [--w15], w0
    2f02:	36 00 f9    	pop       0x36
    2f04:	00 40 06    	retfie    

00002f06 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    2f06:	36 00 f8    	push      0x36
    2f08:	80 9f be    	mov.d     w0, [w15++]
    2f0a:	82 9f be    	mov.d     w2, [w15++]
    2f0c:	84 9f be    	mov.d     w4, [w15++]
    2f0e:	86 9f be    	mov.d     w6, [w15++]
    2f10:	32 00 f8    	push      0x32
    2f12:	34 00 f8    	push      0x34
    2f14:	10 00 20    	mov.w     #0x1, w0
    2f16:	a0 01 88    	mov.w     w0, 0x34
    2f18:	00 20 20    	mov.w     #0x200, w0
    2f1a:	90 01 88    	mov.w     w0, 0x32
    2f1c:	00 00 fa    	lnk       #0x0

00002f1e <.LSM74>:
    __serviceRxInterrupt(&uart4);
    2f1e:	80 90 20    	mov.w     #0x908, w0
    2f20:	15 ff 07    	rcall     0x2d4c <___serviceRxInterrupt>

00002f22 <.LSM75>:
}
    2f22:	00 80 fa    	ulnk      
    2f24:	34 00 f9    	pop       0x34
    2f26:	32 00 f9    	pop       0x32
    2f28:	4f 03 be    	mov.d     [--w15], w6
    2f2a:	4f 02 be    	mov.d     [--w15], w4
    2f2c:	4f 01 be    	mov.d     [--w15], w2
    2f2e:	4f 00 be    	mov.d     [--w15], w0
    2f30:	36 00 f9    	pop       0x36
    2f32:	00 40 06    	retfie    

00002f34 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2f34:	08 00 fa    	lnk       #0x8
    2f36:	10 07 98    	mov.w     w0, [w14+2]
    2f38:	21 07 98    	mov.w     w1, [w14+4]
    2f3a:	32 07 98    	mov.w     w2, [w14+6]

00002f3c <.LSM77>:
    int16_t i;

    switch (handle) {
    2f3c:	1e 00 90    	mov.w     [w14+2], w0
    2f3e:	00 00 e0    	cp0.w     w0
    2f40:	25 00 35    	bra       LT, 0x2f8c <.L37>
    2f42:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2f44:	03 00 34    	bra       LE, 0x2f4c <.L30>
    2f46:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2f48:	11 00 32    	bra       Z, 0x2f6c <.L31>

00002f4a <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    2f4a:	21 00 37    	bra       0x2f8e <.L34>

00002f4c <.L30>:
    2f4c:	00 00 eb    	clr.w     w0
    2f4e:	00 0f 78    	mov.w     w0, [w14]
    2f50:	08 00 37    	bra       0x2f62 <.L32>

00002f52 <.L33>:
    2f52:	2e 00 90    	mov.w     [w14+4], w0
    2f54:	90 40 78    	mov.b     [w0], w1
    2f56:	2e 00 90    	mov.w     [w14+4], w0
    2f58:	00 00 e8    	inc.w     w0, w0
    2f5a:	20 07 98    	mov.w     w0, [w14+4]
    2f5c:	80 42 80    	mov.w     0x850, w0
    2f5e:	7b 04 07    	rcall     0x3856 <_uart_putc>

00002f60 <.LSM81>:
    2f60:	1e 0f e8    	inc.w     [w14], [w14]

00002f62 <.L32>:
    2f62:	9e 00 78    	mov.w     [w14], w1
    2f64:	3e 00 90    	mov.w     [w14+6], w0
    2f66:	80 8f 50    	sub.w     w1, w0, [w15]
    2f68:	f4 ff 39    	bra       NC, 0x2f52 <.L33>

00002f6a <.LSM82>:
    2f6a:	11 00 37    	bra       0x2f8e <.L34>

00002f6c <.L31>:
    2f6c:	00 00 eb    	clr.w     w0
    2f6e:	00 0f 78    	mov.w     w0, [w14]
    2f70:	08 00 37    	bra       0x2f82 <.L35>

00002f72 <.L36>:
    2f72:	2e 00 90    	mov.w     [w14+4], w0
    2f74:	90 40 78    	mov.b     [w0], w1
    2f76:	2e 00 90    	mov.w     [w14+4], w0
    2f78:	00 00 e8    	inc.w     w0, w0
    2f7a:	20 07 98    	mov.w     w0, [w14+4]
    2f7c:	90 42 80    	mov.w     0x852, w0
    2f7e:	6b 04 07    	rcall     0x3856 <_uart_putc>

00002f80 <.LSM85>:
    2f80:	1e 0f e8    	inc.w     [w14], [w14]

00002f82 <.L35>:
    2f82:	9e 00 78    	mov.w     [w14], w1
    2f84:	3e 00 90    	mov.w     [w14+6], w0
    2f86:	80 8f 50    	sub.w     w1, w0, [w15]
    2f88:	f4 ff 39    	bra       NC, 0x2f72 <.L36>

00002f8a <.LSM86>:
    2f8a:	01 00 37    	bra       0x2f8e <.L34>

00002f8c <.L37>:
    2f8c:	00 00 00    	nop       

00002f8e <.L34>:
    }
    return len;
    2f8e:	3e 00 90    	mov.w     [w14+6], w0

00002f90 <.LSM89>:
}
    2f90:	00 80 fa    	ulnk      
    2f92:	00 00 06    	return    

00002f94 <_init_uart>:

void init_uart(void) {
    2f94:	00 00 fa    	lnk       #0x0

00002f96 <.LSM91>:
    init_pin();
    2f96:	7f 0c 07    	rcall     0x4896 <_init_pin>

00002f98 <.LSM92>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2f98:	40 6d 20    	mov.w     #0x6d4, w0
    2f9a:	80 1f 78    	mov.w     w0, [w15++]
    2f9c:	57 01 20    	mov.w     #0x15, w7
    2f9e:	86 c0 b3    	mov.b     #0x8, w6
    2fa0:	80 82 eb    	setm.w    w5
    2fa2:	64 c0 b3    	mov.b     #0x6, w4
    2fa4:	80 01 eb    	clr.w     w3
    2fa6:	02 2f 20    	mov.w     #0x2f0, w2
    2fa8:	21 2f 20    	mov.w     #0x2f2, w1
    2faa:	40 94 20    	mov.w     #0x944, w0
    2fac:	88 0d 07    	rcall     0x4abe <_pin_init>
    2fae:	8f 87 e9    	dec2.w    w15, w15

00002fb0 <.LSM93>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2fb0:	a0 6d 20    	mov.w     #0x6da, w0
    2fb2:	80 1f 78    	mov.w     w0, [w15++]
    2fb4:	a7 01 20    	mov.w     #0x1a, w7
    2fb6:	00 43 eb    	clr.b     w6
    2fb8:	80 82 eb    	setm.w    w5
    2fba:	74 c0 b3    	mov.b     #0x7, w4
    2fbc:	80 01 eb    	clr.w     w3
    2fbe:	02 2f 20    	mov.w     #0x2f0, w2
    2fc0:	21 2f 20    	mov.w     #0x2f2, w1
    2fc2:	a0 95 20    	mov.w     #0x95a, w0
    2fc4:	7c 0d 07    	rcall     0x4abe <_pin_init>
    2fc6:	8f 87 e9    	dec2.w    w15, w15

00002fc8 <.LSM94>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    pin_init(&TX2, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2fc8:	60 6c 20    	mov.w     #0x6c6, w0
    2fca:	80 1f 78    	mov.w     w0, [w15++]
    2fcc:	77 00 20    	mov.w     #0x7, w7
    2fce:	86 c0 b3    	mov.b     #0x8, w6
    2fd0:	75 00 20    	mov.w     #0x7, w5
    2fd2:	74 c0 b3    	mov.b     #0x7, w4
    2fd4:	23 4e 20    	mov.w     #0x4e2, w3
    2fd6:	82 2c 20    	mov.w     #0x2c8, w2
    2fd8:	a1 2c 20    	mov.w     #0x2ca, w1
    2fda:	00 97 20    	mov.w     #0x970, w0
    2fdc:	70 0d 07    	rcall     0x4abe <_pin_init>
    2fde:	8f 87 e9    	dec2.w    w15, w15

00002fe0 <.LSM95>:
             (uint16_t *)&ANSB, 7, 7, 8, 7, (uint16_t *)&RPOR3);
    pin_init(&RX2, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2fe0:	60 6c 20    	mov.w     #0x6c6, w0
    2fe2:	80 1f 78    	mov.w     w0, [w15++]
    2fe4:	67 00 20    	mov.w     #0x6, w7
    2fe6:	00 43 eb    	clr.b     w6
    2fe8:	65 00 20    	mov.w     #0x6, w5
    2fea:	64 c0 b3    	mov.b     #0x6, w4
    2fec:	23 4e 20    	mov.w     #0x4e2, w3
    2fee:	82 2c 20    	mov.w     #0x2c8, w2
    2ff0:	a1 2c 20    	mov.w     #0x2ca, w1
    2ff2:	60 98 20    	mov.w     #0x986, w0
    2ff4:	64 0d 07    	rcall     0x4abe <_pin_init>
    2ff6:	8f 87 e9    	dec2.w    w15, w15

00002ff8 <.LSM96>:
             (uint16_t *)&ANSB, 6, 6, 0, 6, (uint16_t *)&RPOR3);
    pin_init(&RTS2, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2ff8:	a0 6d 20    	mov.w     #0x6da, w0
    2ffa:	80 1f 78    	mov.w     w0, [w15++]
    2ffc:	b7 01 20    	mov.w     #0x1b, w7
    2ffe:	86 c0 b3    	mov.b     #0x8, w6
    3000:	80 82 eb    	setm.w    w5
    3002:	94 c0 b3    	mov.b     #0x9, w4
    3004:	80 01 eb    	clr.w     w3
    3006:	02 2f 20    	mov.w     #0x2f0, w2
    3008:	21 2f 20    	mov.w     #0x2f2, w1
    300a:	c0 99 20    	mov.w     #0x99c, w0
    300c:	58 0d 07    	rcall     0x4abe <_pin_init>
    300e:	8f 87 e9    	dec2.w    w15, w15

00003010 <.LSM97>:
             (uint16_t *)NULL, 9, -1, 8, 27, (uint16_t *)&RPOR13);
    pin_init(&CTS2, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    3010:	20 6d 20    	mov.w     #0x6d2, w0
    3012:	80 1f 78    	mov.w     w0, [w15++]
    3014:	37 01 20    	mov.w     #0x13, w7
    3016:	86 c0 b3    	mov.b     #0x8, w6
    3018:	80 82 eb    	setm.w    w5
    301a:	84 c0 b3    	mov.b     #0x8, w4
    301c:	80 01 eb    	clr.w     w3
    301e:	02 2f 20    	mov.w     #0x2f0, w2
    3020:	21 2f 20    	mov.w     #0x2f2, w1
    3022:	20 9b 20    	mov.w     #0x9b2, w0
    3024:	4c 0d 07    	rcall     0x4abe <_pin_init>
    3026:	8f 87 e9    	dec2.w    w15, w15

00003028 <.LSM98>:
             (uint16_t *)NULL, 8, -1, 8, 19, (uint16_t *)&RPOR9);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    3028:	40 00 20    	mov.w     #0x4, w0
    302a:	80 1f 78    	mov.w     w0, [w15++]
    302c:	30 00 20    	mov.w     #0x3, w0
    302e:	80 1f 78    	mov.w     w0, [w15++]
    3030:	80 c0 b3    	mov.b     #0x8, w0
    3032:	80 1f 78    	mov.w     w0, [w15++]
    3034:	00 40 eb    	clr.b     w0
    3036:	80 1f 78    	mov.w     w0, [w15++]
    3038:	40 6a 20    	mov.w     #0x6a4, w0
    303a:	80 1f 78    	mov.w     w0, [w15++]
    303c:	40 6a 20    	mov.w     #0x6a4, w0
    303e:	80 1f 78    	mov.w     w0, [w15++]
    3040:	b0 c0 b3    	mov.b     #0xb, w0
    3042:	80 1f 78    	mov.w     w0, [w15++]
    3044:	c0 c0 b3    	mov.b     #0xc, w0
    3046:	80 1f 78    	mov.w     w0, [w15++]
    3048:	47 09 20    	mov.w     #0x94, w7
    304a:	46 08 20    	mov.w     #0x84, w6
    304c:	85 22 20    	mov.w     #0x228, w5
    304e:	64 22 20    	mov.w     #0x226, w4
    3050:	43 22 20    	mov.w     #0x224, w3
    3052:	22 22 20    	mov.w     #0x222, w2
    3054:	01 22 20    	mov.w     #0x220, w1
    3056:	40 85 20    	mov.w     #0x854, w0
    3058:	6b 00 07    	rcall     0x3130 <_uart_init>
    305a:	f0 87 57    	sub.w     w15, #0x10, w15

0000305c <.LSM99>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    305c:	60 00 20    	mov.w     #0x6, w0
    305e:	80 1f 78    	mov.w     w0, [w15++]
    3060:	50 00 20    	mov.w     #0x5, w0
    3062:	80 1f 78    	mov.w     w0, [w15++]
    3064:	80 c0 b3    	mov.b     #0x8, w0
    3066:	80 1f 78    	mov.w     w0, [w15++]
    3068:	00 40 eb    	clr.b     w0
    306a:	80 1f 78    	mov.w     w0, [w15++]
    306c:	60 6a 20    	mov.w     #0x6a6, w0
    306e:	80 1f 78    	mov.w     w0, [w15++]
    3070:	60 6a 20    	mov.w     #0x6a6, w0
    3072:	80 1f 78    	mov.w     w0, [w15++]
    3074:	e0 c0 b3    	mov.b     #0xe, w0
    3076:	80 1f 78    	mov.w     w0, [w15++]
    3078:	f0 c0 b3    	mov.b     #0xf, w0
    307a:	80 1f 78    	mov.w     w0, [w15++]
    307c:	67 09 20    	mov.w     #0x96, w7
    307e:	66 08 20    	mov.w     #0x86, w6
    3080:	85 23 20    	mov.w     #0x238, w5
    3082:	64 23 20    	mov.w     #0x236, w4
    3084:	43 23 20    	mov.w     #0x234, w3
    3086:	22 23 20    	mov.w     #0x232, w2
    3088:	01 23 20    	mov.w     #0x230, w1
    308a:	00 89 20    	mov.w     #0x890, w0
    308c:	51 00 07    	rcall     0x3130 <_uart_init>
    308e:	f0 87 57    	sub.w     w15, #0x10, w15

00003090 <.LSM100>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    3090:	d0 01 20    	mov.w     #0x1d, w0
    3092:	80 1f 78    	mov.w     w0, [w15++]
    3094:	c0 01 20    	mov.w     #0x1c, w0
    3096:	80 1f 78    	mov.w     w0, [w15++]
    3098:	80 c0 b3    	mov.b     #0x8, w0
    309a:	80 1f 78    	mov.w     w0, [w15++]
    309c:	80 c0 b3    	mov.b     #0x8, w0
    309e:	80 1f 78    	mov.w     w0, [w15++]
    30a0:	a0 6a 20    	mov.w     #0x6aa, w0
    30a2:	80 1f 78    	mov.w     w0, [w15++]
    30a4:	20 6a 20    	mov.w     #0x6a2, w0
    30a6:	80 1f 78    	mov.w     w0, [w15++]
    30a8:	20 c0 b3    	mov.b     #0x2, w0
    30aa:	80 1f 78    	mov.w     w0, [w15++]
    30ac:	30 c0 b3    	mov.b     #0x3, w0
    30ae:	80 1f 78    	mov.w     w0, [w15++]
    30b0:	e7 09 20    	mov.w     #0x9e, w7
    30b2:	e6 08 20    	mov.w     #0x8e, w6
    30b4:	85 25 20    	mov.w     #0x258, w5
    30b6:	64 25 20    	mov.w     #0x256, w4
    30b8:	43 25 20    	mov.w     #0x254, w3
    30ba:	22 25 20    	mov.w     #0x252, w2
    30bc:	01 25 20    	mov.w     #0x250, w1
    30be:	c0 8c 20    	mov.w     #0x8cc, w0
    30c0:	37 00 07    	rcall     0x3130 <_uart_init>
    30c2:	f0 87 57    	sub.w     w15, #0x10, w15

000030c4 <.LSM101>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    30c4:	f0 01 20    	mov.w     #0x1f, w0
    30c6:	80 1f 78    	mov.w     w0, [w15++]
    30c8:	e0 01 20    	mov.w     #0x1e, w0
    30ca:	80 1f 78    	mov.w     w0, [w15++]
    30cc:	80 c0 b3    	mov.b     #0x8, w0
    30ce:	80 1f 78    	mov.w     w0, [w15++]
    30d0:	00 40 eb    	clr.b     w0
    30d2:	80 1f 78    	mov.w     w0, [w15++]
    30d4:	60 6b 20    	mov.w     #0x6b6, w0
    30d6:	80 1f 78    	mov.w     w0, [w15++]
    30d8:	60 6b 20    	mov.w     #0x6b6, w0
    30da:	80 1f 78    	mov.w     w0, [w15++]
    30dc:	80 c0 b3    	mov.b     #0x8, w0
    30de:	80 1f 78    	mov.w     w0, [w15++]
    30e0:	90 c0 b3    	mov.b     #0x9, w0
    30e2:	80 1f 78    	mov.w     w0, [w15++]
    30e4:	e7 09 20    	mov.w     #0x9e, w7
    30e6:	e6 08 20    	mov.w     #0x8e, w6
    30e8:	85 2b 20    	mov.w     #0x2b8, w5
    30ea:	64 2b 20    	mov.w     #0x2b6, w4
    30ec:	43 2b 20    	mov.w     #0x2b4, w3
    30ee:	22 2b 20    	mov.w     #0x2b2, w2
    30f0:	01 2b 20    	mov.w     #0x2b0, w1
    30f2:	80 90 20    	mov.w     #0x908, w0
    30f4:	1d 00 07    	rcall     0x3130 <_uart_init>
    30f6:	f0 87 57    	sub.w     w15, #0x10, w15

000030f8 <.LSM102>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart2, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    30f8:	00 40 20    	mov.w     #0x400, w0
    30fa:	80 1f 78    	mov.w     w0, [w15++]
    30fc:	80 dc 20    	mov.w     #0xdc8, w0
    30fe:	80 1f 78    	mov.w     w0, [w15++]
    3100:	00 40 20    	mov.w     #0x400, w0
    3102:	80 1f 78    	mov.w     w0, [w15++]
    3104:	80 9c 20    	mov.w     #0x9c8, w0
    3106:	80 1f 78    	mov.w     w0, [w15++]
    3108:	00 00 eb    	clr.w     w0
    310a:	80 1f 78    	mov.w     w0, [w15++]
    310c:	10 00 20    	mov.w     #0x1, w0
    310e:	80 1f 78    	mov.w     w0, [w15++]
    3110:	e5 c4 b3    	mov.b     #0x4e, w5
    3112:	06 00 20    	mov.w     #0x0, w6
    3114:	67 69 24    	mov.w     #0x4696, w7
    3116:	00 02 eb    	clr.w     w4
    3118:	80 01 eb    	clr.w     w3
    311a:	a2 95 20    	mov.w     #0x95a, w2
    311c:	41 94 20    	mov.w     #0x944, w1
    311e:	00 89 20    	mov.w     #0x890, w0
    3120:	72 00 07    	rcall     0x3206 <_uart_open>
    3122:	ec 87 57    	sub.w     w15, #0xc, w15

00003124 <.LSM103>:
              0, HWTXBUF, 1024, HWRXBUF, 1024);

    _stdout = &uart2;
    3124:	00 89 20    	mov.w     #0x890, w0
    3126:	80 42 88    	mov.w     w0, 0x850

00003128 <.LSM104>:
    _stderr = &uart2;
    3128:	00 89 20    	mov.w     #0x890, w0
    312a:	90 42 88    	mov.w     w0, 0x852

0000312c <.LSM105>:
}
    312c:	00 80 fa    	ulnk      
    312e:	00 00 06    	return    

00003130 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    3130:	10 00 fa    	lnk       #0x10
    3132:	00 0f 78    	mov.w     w0, [w14]
    3134:	11 07 98    	mov.w     w1, [w14+2]
    3136:	22 07 98    	mov.w     w2, [w14+4]
    3138:	33 07 98    	mov.w     w3, [w14+6]
    313a:	44 07 98    	mov.w     w4, [w14+8]
    313c:	55 07 98    	mov.w     w5, [w14+10]
    313e:	66 07 98    	mov.w     w6, [w14+12]
    3140:	77 07 98    	mov.w     w7, [w14+14]

00003142 <.LSM107>:
    self->UxMODE = UxMODE;
    3142:	1e 00 78    	mov.w     [w14], w0
    3144:	9e 00 90    	mov.w     [w14+2], w1
    3146:	01 08 78    	mov.w     w1, [w0]

00003148 <.LSM108>:
    self->UxSTA = UxSTA;
    3148:	1e 00 78    	mov.w     [w14], w0
    314a:	ae 00 90    	mov.w     [w14+4], w1
    314c:	11 00 98    	mov.w     w1, [w0+2]

0000314e <.LSM109>:
    self->UxTXREG = UxTXREG;
    314e:	1e 00 78    	mov.w     [w14], w0
    3150:	be 00 90    	mov.w     [w14+6], w1
    3152:	21 00 98    	mov.w     w1, [w0+4]

00003154 <.LSM110>:
    self->UxRXREG = UxRXREG;
    3154:	1e 00 78    	mov.w     [w14], w0
    3156:	ce 00 90    	mov.w     [w14+8], w1
    3158:	31 00 98    	mov.w     w1, [w0+6]

0000315a <.LSM111>:
    self->UxBRG = UxBRG;
    315a:	1e 00 78    	mov.w     [w14], w0
    315c:	de 00 90    	mov.w     [w14+10], w1
    315e:	41 00 98    	mov.w     w1, [w0+8]

00003160 <.LSM112>:
    self->IFSy = IFSy;
    3160:	1e 00 78    	mov.w     [w14], w0
    3162:	ee 00 90    	mov.w     [w14+12], w1
    3164:	51 00 98    	mov.w     w1, [w0+10]

00003166 <.LSM113>:
    self->IECy = IECy;
    3166:	1e 00 78    	mov.w     [w14], w0
    3168:	fe 00 90    	mov.w     [w14+14], w1
    316a:	61 00 98    	mov.w     w1, [w0+12]

0000316c <.LSM114>:
    self->UxTXIF = UxTXIF;
    316c:	1e 00 78    	mov.w     [w14], w0
    316e:	8e f8 97    	mov.b     [w14-8], w1
    3170:	61 48 98    	mov.b     w1, [w0+14]

00003172 <.LSM115>:
    self->UxRXIF = UxRXIF;
    3172:	1e 00 78    	mov.w     [w14], w0
    3174:	ee f0 97    	mov.b     [w14-10], w1
    3176:	71 48 98    	mov.b     w1, [w0+15]

00003178 <.LSM116>:
    self->RXrpinr = RXrpinr;
    3178:	1e 00 78    	mov.w     [w14], w0
    317a:	ae b8 97    	mov.w     [w14-12], w1
    317c:	01 08 98    	mov.w     w1, [w0+16]

0000317e <.LSM117>:
    self->CTSrpinr = CTSrpinr;
    317e:	1e 00 78    	mov.w     [w14], w0
    3180:	9e b8 97    	mov.w     [w14-14], w1
    3182:	11 08 98    	mov.w     w1, [w0+18]

00003184 <.LSM118>:
    self->RXrpshift = RXrpshift;
    3184:	1e 00 78    	mov.w     [w14], w0
    3186:	8e f0 97    	mov.b     [w14-16], w1
    3188:	41 50 98    	mov.b     w1, [w0+20]

0000318a <.LSM119>:
    self->CTSrpshift = CTSrpshift;
    318a:	1e 00 78    	mov.w     [w14], w0
    318c:	ee e8 97    	mov.b     [w14-18], w1
    318e:	51 50 98    	mov.b     w1, [w0+21]

00003190 <.LSM120>:
    self->TXrpnum = TXrpnum;
    3190:	1e 00 78    	mov.w     [w14], w0
    3192:	ee b0 97    	mov.w     [w14-20], w1
    3194:	31 08 98    	mov.w     w1, [w0+22]

00003196 <.LSM121>:
    self->RTSrpnum = RTSrpnum;
    3196:	1e 00 78    	mov.w     [w14], w0
    3198:	de b0 97    	mov.w     [w14-22], w1
    319a:	41 08 98    	mov.w     w1, [w0+24]

0000319c <.LSM122>:
    self->TX = NULL;
    319c:	1e 00 78    	mov.w     [w14], w0
    319e:	80 00 eb    	clr.w     w1
    31a0:	51 08 98    	mov.w     w1, [w0+26]

000031a2 <.LSM123>:
    self->RX = NULL;
    31a2:	1e 00 78    	mov.w     [w14], w0
    31a4:	80 00 eb    	clr.w     w1
    31a6:	61 08 98    	mov.w     w1, [w0+28]

000031a8 <.LSM124>:
    self->RTS = NULL;
    31a8:	1e 00 78    	mov.w     [w14], w0
    31aa:	80 00 eb    	clr.w     w1
    31ac:	71 08 98    	mov.w     w1, [w0+30]

000031ae <.LSM125>:
    self->CTS = NULL;
    31ae:	1e 00 78    	mov.w     [w14], w0
    31b0:	80 00 eb    	clr.w     w1
    31b2:	01 10 98    	mov.w     w1, [w0+32]

000031b4 <.LSM126>:
    self->TXbuffer.data = NULL;
    31b4:	1e 00 78    	mov.w     [w14], w0
    31b6:	80 00 eb    	clr.w     w1
    31b8:	11 10 98    	mov.w     w1, [w0+34]

000031ba <.LSM127>:
    self->TXbuffer.length = 0;
    31ba:	1e 00 78    	mov.w     [w14], w0
    31bc:	80 00 eb    	clr.w     w1
    31be:	21 10 98    	mov.w     w1, [w0+36]

000031c0 <.LSM128>:
    self->TXbuffer.head = 0;
    31c0:	1e 00 78    	mov.w     [w14], w0
    31c2:	80 00 eb    	clr.w     w1
    31c4:	31 10 98    	mov.w     w1, [w0+38]

000031c6 <.LSM129>:
    self->TXbuffer.tail = 0;
    31c6:	1e 00 78    	mov.w     [w14], w0
    31c8:	80 00 eb    	clr.w     w1
    31ca:	41 10 98    	mov.w     w1, [w0+40]

000031cc <.LSM130>:
    self->TXbuffer.count = 0;
    31cc:	1e 00 78    	mov.w     [w14], w0
    31ce:	80 00 eb    	clr.w     w1
    31d0:	51 10 98    	mov.w     w1, [w0+42]

000031d2 <.LSM131>:
    self->RXbuffer.data = NULL;
    31d2:	1e 00 78    	mov.w     [w14], w0
    31d4:	80 00 eb    	clr.w     w1
    31d6:	61 10 98    	mov.w     w1, [w0+44]

000031d8 <.LSM132>:
    self->RXbuffer.length = 0;
    31d8:	1e 00 78    	mov.w     [w14], w0
    31da:	80 00 eb    	clr.w     w1
    31dc:	71 10 98    	mov.w     w1, [w0+46]

000031de <.LSM133>:
    self->RXbuffer.head = 0;
    31de:	1e 00 78    	mov.w     [w14], w0
    31e0:	80 00 eb    	clr.w     w1
    31e2:	01 18 98    	mov.w     w1, [w0+48]

000031e4 <.LSM134>:
    self->RXbuffer.tail = 0;
    31e4:	1e 00 78    	mov.w     [w14], w0
    31e6:	80 00 eb    	clr.w     w1
    31e8:	11 18 98    	mov.w     w1, [w0+50]

000031ea <.LSM135>:
    self->RXbuffer.count = 0;
    31ea:	1e 00 78    	mov.w     [w14], w0
    31ec:	80 00 eb    	clr.w     w1
    31ee:	21 18 98    	mov.w     w1, [w0+52]

000031f0 <.LSM136>:
    self->TXthreshold = 1;
    31f0:	1e 00 78    	mov.w     [w14], w0
    31f2:	11 00 20    	mov.w     #0x1, w1
    31f4:	31 18 98    	mov.w     w1, [w0+54]

000031f6 <.LSM137>:
    self->putc = NULL;
    31f6:	1e 00 78    	mov.w     [w14], w0
    31f8:	80 00 eb    	clr.w     w1
    31fa:	41 18 98    	mov.w     w1, [w0+56]

000031fc <.LSM138>:
    self->getc = NULL;
    31fc:	1e 00 78    	mov.w     [w14], w0
    31fe:	80 00 eb    	clr.w     w1
    3200:	51 18 98    	mov.w     w1, [w0+58]

00003202 <.LSM139>:
}
    3202:	00 80 fa    	ulnk      
    3204:	00 00 06    	return    

00003206 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    3206:	10 00 fa    	lnk       #0x10
    3208:	88 1f 78    	mov.w     w8, [w15++]
    320a:	00 0f 78    	mov.w     w0, [w14]
    320c:	11 07 98    	mov.w     w1, [w14+2]
    320e:	22 07 98    	mov.w     w2, [w14+4]
    3210:	33 07 98    	mov.w     w3, [w14+6]
    3212:	44 07 98    	mov.w     w4, [w14+8]
    3214:	56 07 98    	mov.w     w6, [w14+10]
    3216:	67 07 98    	mov.w     w7, [w14+12]
    3218:	65 4f 98    	mov.b     w5, [w14+14]

0000321a <.LSM141>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    321a:	1e 00 78    	mov.w     [w14], w0
    321c:	10 00 78    	mov.w     [w0], w0
    321e:	80 00 eb    	clr.w     w1
    3220:	01 08 78    	mov.w     w1, [w0]

00003222 <.LSM142>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    3222:	1e 00 90    	mov.w     [w14+2], w0
    3224:	60 00 90    	mov.w     [w0+12], w0
    3226:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3228:	0e 02 32    	bra       Z, 0x3646 <.L73>
    322a:	2e 00 90    	mov.w     [w14+4], w0
    322c:	60 00 90    	mov.w     [w0+12], w0
    322e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3230:	0c 02 32    	bra       Z, 0x364a <.L74>

00003232 <.LSM143>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    3232:	1e 00 90    	mov.w     [w14+2], w0
    3234:	00 08 90    	mov.w     [w0+16], w0
    3236:	00 00 e0    	cp0.w     w0
    3238:	69 00 3a    	bra       NZ, 0x330c <.L44>
    323a:	2e 00 90    	mov.w     [w14+4], w0
    323c:	00 08 90    	mov.w     [w0+16], w0
    323e:	00 00 e0    	cp0.w     w0
    3240:	65 00 3a    	bra       NZ, 0x330c <.L44>

00003242 <.LSM144>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    3242:	1e 00 90    	mov.w     [w14+2], w0
    3244:	8f 0c 07    	rcall     0x4b64 <_pin_digitalOut>

00003246 <.LSM145>:
        pin_set(TX);
    3246:	1e 00 90    	mov.w     [w14+2], w0
    3248:	ea 0c 07    	rcall     0x4c1e <_pin_set>

0000324a <.LSM146>:
        pin_digitalIn(RX);
    324a:	2e 00 90    	mov.w     [w14+4], w0
    324c:	64 0c 07    	rcall     0x4b16 <_pin_digitalIn>

0000324e <.LSM147>:
        self->TX = TX;
    324e:	1e 00 78    	mov.w     [w14], w0
    3250:	9e 00 90    	mov.w     [w14+2], w1
    3252:	51 08 98    	mov.w     w1, [w0+26]

00003254 <.LSM148>:
        TX->owner = (void *)self;
    3254:	1e 00 90    	mov.w     [w14+2], w0
    3256:	9e 00 78    	mov.w     [w14], w1
    3258:	01 08 98    	mov.w     w1, [w0+16]

0000325a <.LSM149>:
        TX->write = NULL;
    325a:	1e 00 90    	mov.w     [w14+2], w0
    325c:	80 00 eb    	clr.w     w1
    325e:	11 08 98    	mov.w     w1, [w0+18]

00003260 <.LSM150>:
        TX->read = NULL;
    3260:	1e 00 90    	mov.w     [w14+2], w0
    3262:	80 00 eb    	clr.w     w1
    3264:	21 08 98    	mov.w     w1, [w0+20]

00003266 <.LSM151>:
        self->RX = RX;
    3266:	1e 00 78    	mov.w     [w14], w0
    3268:	ae 00 90    	mov.w     [w14+4], w1
    326a:	61 08 98    	mov.w     w1, [w0+28]

0000326c <.LSM152>:
        RX->owner = (void *)self;
    326c:	2e 00 90    	mov.w     [w14+4], w0
    326e:	9e 00 78    	mov.w     [w14], w1
    3270:	01 08 98    	mov.w     w1, [w0+16]

00003272 <.LSM153>:
        RX->write = NULL;
    3272:	2e 00 90    	mov.w     [w14+4], w0
    3274:	80 00 eb    	clr.w     w1
    3276:	11 08 98    	mov.w     w1, [w0+18]

00003278 <.LSM154>:
        RX->read = NULL;
    3278:	2e 00 90    	mov.w     [w14+4], w0
    327a:	80 00 eb    	clr.w     w1
    327c:	21 08 98    	mov.w     w1, [w0+20]

0000327e <.LSM155>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    327e:	11 3a 80    	mov.w     0x742, w1
    3280:	f0 0b 20    	mov.w     #0xbf, w0
    3282:	00 81 60    	and.w     w1, w0, w2
    3284:	60 04 20    	mov.w     #0x46, w0
    3286:	71 05 20    	mov.w     #0x57, w1
    3288:	23 74 20    	mov.w     #0x742, w3
    328a:	80 49 78    	mov.b     w0, [w3]
    328c:	81 49 78    	mov.b     w1, [w3]
    328e:	82 49 78    	mov.b     w2, [w3]

00003290 <.LSM156>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    3290:	1e 00 90    	mov.w     [w14+2], w0
    3292:	70 00 90    	mov.w     [w0+14], w0
    3294:	9e 00 90    	mov.w     [w14+2], w1
    3296:	f1 00 90    	mov.w     [w1+14], w1
    3298:	11 01 78    	mov.w     [w1], w2
    329a:	9e 00 90    	mov.w     [w14+2], w1
    329c:	a1 48 90    	mov.b     [w1+10], w1
    329e:	81 80 fb    	ze        w1, w1
    32a0:	f3 03 20    	mov.w     #0x3f, w3
    32a2:	81 18 dd    	sl.w      w3, w1, w1
    32a4:	81 80 ea    	com.w     w1, w1
    32a6:	81 00 61    	and.w     w2, w1, w1
    32a8:	01 08 78    	mov.w     w1, [w0]

000032aa <.LSM157>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    32aa:	1e 00 90    	mov.w     [w14+2], w0
    32ac:	70 00 90    	mov.w     [w0+14], w0
    32ae:	9e 00 90    	mov.w     [w14+2], w1
    32b0:	f1 00 90    	mov.w     [w1+14], w1
    32b2:	11 01 78    	mov.w     [w1], w2
    32b4:	9e 00 78    	mov.w     [w14], w1
    32b6:	b1 09 90    	mov.w     [w1+22], w3
    32b8:	9e 00 90    	mov.w     [w14+2], w1
    32ba:	a1 48 90    	mov.b     [w1+10], w1
    32bc:	81 80 fb    	ze        w1, w1
    32be:	81 18 dd    	sl.w      w3, w1, w1
    32c0:	82 80 70    	ior.w     w1, w2, w1
    32c2:	01 08 78    	mov.w     w1, [w0]

000032c4 <.LSM158>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    32c4:	1e 00 78    	mov.w     [w14], w0
    32c6:	00 08 90    	mov.w     [w0+16], w0
    32c8:	9e 00 78    	mov.w     [w14], w1
    32ca:	81 08 90    	mov.w     [w1+16], w1
    32cc:	11 01 78    	mov.w     [w1], w2
    32ce:	9e 00 78    	mov.w     [w14], w1
    32d0:	c1 50 90    	mov.b     [w1+20], w1
    32d2:	81 80 fb    	ze        w1, w1
    32d4:	f3 03 20    	mov.w     #0x3f, w3
    32d6:	81 18 dd    	sl.w      w3, w1, w1
    32d8:	81 80 ea    	com.w     w1, w1
    32da:	81 00 61    	and.w     w2, w1, w1
    32dc:	01 08 78    	mov.w     w1, [w0]

000032de <.LSM159>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    32de:	1e 00 78    	mov.w     [w14], w0
    32e0:	00 08 90    	mov.w     [w0+16], w0
    32e2:	9e 00 78    	mov.w     [w14], w1
    32e4:	81 08 90    	mov.w     [w1+16], w1
    32e6:	11 01 78    	mov.w     [w1], w2
    32e8:	ae 00 90    	mov.w     [w14+4], w1
    32ea:	e1 01 90    	mov.w     [w1+12], w3
    32ec:	9e 00 78    	mov.w     [w14], w1
    32ee:	c1 50 90    	mov.b     [w1+20], w1
    32f0:	81 80 fb    	ze        w1, w1
    32f2:	81 18 dd    	sl.w      w3, w1, w1
    32f4:	82 80 70    	ior.w     w1, w2, w1
    32f6:	01 08 78    	mov.w     w1, [w0]

000032f8 <.LSM160>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    32f8:	11 3a 80    	mov.w     0x742, w1
    32fa:	00 04 20    	mov.w     #0x40, w0
    32fc:	01 01 70    	ior.w     w0, w1, w2
    32fe:	60 04 20    	mov.w     #0x46, w0
    3300:	71 05 20    	mov.w     #0x57, w1
    3302:	23 74 20    	mov.w     #0x742, w3
    3304:	80 49 78    	mov.b     w0, [w3]
    3306:	81 49 78    	mov.b     w1, [w3]
    3308:	82 49 78    	mov.b     w2, [w3]
    330a:	0a 00 37    	bra       0x3320 <.L45>

0000330c <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    330c:	1e 00 78    	mov.w     [w14], w0
    330e:	d0 08 90    	mov.w     [w0+26], w1
    3310:	1e 00 90    	mov.w     [w14+2], w0
    3312:	80 8f 50    	sub.w     w1, w0, [w15]
    3314:	9c 01 3a    	bra       NZ, 0x364e <.L75>
    3316:	1e 00 78    	mov.w     [w14], w0
    3318:	e0 08 90    	mov.w     [w0+28], w1
    331a:	2e 00 90    	mov.w     [w14+4], w0
    331c:	80 8f 50    	sub.w     w1, w0, [w15]
    331e:	99 01 3a    	bra       NZ, 0x3652 <.L76>

00003320 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    3320:	3e 00 90    	mov.w     [w14+6], w0
    3322:	00 00 e0    	cp0.w     w0
    3324:	87 00 32    	bra       Z, 0x3434 <.L47>
    3326:	4e 00 90    	mov.w     [w14+8], w0
    3328:	00 00 e0    	cp0.w     w0
    332a:	84 00 32    	bra       Z, 0x3434 <.L47>

0000332c <.LSM163>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    332c:	3e 00 90    	mov.w     [w14+6], w0
    332e:	60 00 90    	mov.w     [w0+12], w0
    3330:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3332:	91 01 32    	bra       Z, 0x3656 <.L77>
    3334:	4e 00 90    	mov.w     [w14+8], w0
    3336:	60 00 90    	mov.w     [w0+12], w0
    3338:	e1 0f 40    	add.w     w0, #0x1, [w15]
    333a:	8f 01 32    	bra       Z, 0x365a <.L78>

0000333c <.LSM164>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    333c:	3e 00 90    	mov.w     [w14+6], w0
    333e:	00 08 90    	mov.w     [w0+16], w0
    3340:	00 00 e0    	cp0.w     w0
    3342:	69 00 3a    	bra       NZ, 0x3416 <.L50>
    3344:	4e 00 90    	mov.w     [w14+8], w0
    3346:	00 08 90    	mov.w     [w0+16], w0
    3348:	00 00 e0    	cp0.w     w0
    334a:	65 00 3a    	bra       NZ, 0x3416 <.L50>

0000334c <.LSM165>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    334c:	3e 00 90    	mov.w     [w14+6], w0
    334e:	0a 0c 07    	rcall     0x4b64 <_pin_digitalOut>

00003350 <.LSM166>:
            pin_set(RTS);
    3350:	3e 00 90    	mov.w     [w14+6], w0
    3352:	65 0c 07    	rcall     0x4c1e <_pin_set>

00003354 <.LSM167>:
            pin_digitalIn(CTS);
    3354:	4e 00 90    	mov.w     [w14+8], w0
    3356:	df 0b 07    	rcall     0x4b16 <_pin_digitalIn>

00003358 <.LSM168>:
            self->RTS = RTS;
    3358:	1e 00 78    	mov.w     [w14], w0
    335a:	be 00 90    	mov.w     [w14+6], w1
    335c:	71 08 98    	mov.w     w1, [w0+30]

0000335e <.LSM169>:
            RTS->owner = (void *)self;
    335e:	3e 00 90    	mov.w     [w14+6], w0
    3360:	9e 00 78    	mov.w     [w14], w1
    3362:	01 08 98    	mov.w     w1, [w0+16]

00003364 <.LSM170>:
            RTS->write = NULL;
    3364:	3e 00 90    	mov.w     [w14+6], w0
    3366:	80 00 eb    	clr.w     w1
    3368:	11 08 98    	mov.w     w1, [w0+18]

0000336a <.LSM171>:
            RTS->read = NULL;
    336a:	3e 00 90    	mov.w     [w14+6], w0
    336c:	80 00 eb    	clr.w     w1
    336e:	21 08 98    	mov.w     w1, [w0+20]

00003370 <.LSM172>:
            self->CTS = CTS;
    3370:	1e 00 78    	mov.w     [w14], w0
    3372:	ce 00 90    	mov.w     [w14+8], w1
    3374:	01 10 98    	mov.w     w1, [w0+32]

00003376 <.LSM173>:
            CTS->owner = (void *)self;
    3376:	4e 00 90    	mov.w     [w14+8], w0
    3378:	9e 00 78    	mov.w     [w14], w1
    337a:	01 08 98    	mov.w     w1, [w0+16]

0000337c <.LSM174>:
            CTS->write = NULL;
    337c:	4e 00 90    	mov.w     [w14+8], w0
    337e:	80 00 eb    	clr.w     w1
    3380:	11 08 98    	mov.w     w1, [w0+18]

00003382 <.LSM175>:
            CTS->read = NULL;
    3382:	4e 00 90    	mov.w     [w14+8], w0
    3384:	80 00 eb    	clr.w     w1
    3386:	21 08 98    	mov.w     w1, [w0+20]

00003388 <.LSM176>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    3388:	11 3a 80    	mov.w     0x742, w1
    338a:	f0 0b 20    	mov.w     #0xbf, w0
    338c:	00 81 60    	and.w     w1, w0, w2
    338e:	60 04 20    	mov.w     #0x46, w0
    3390:	71 05 20    	mov.w     #0x57, w1
    3392:	23 74 20    	mov.w     #0x742, w3
    3394:	80 49 78    	mov.b     w0, [w3]
    3396:	81 49 78    	mov.b     w1, [w3]
    3398:	82 49 78    	mov.b     w2, [w3]

0000339a <.LSM177>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    339a:	3e 00 90    	mov.w     [w14+6], w0
    339c:	70 00 90    	mov.w     [w0+14], w0
    339e:	be 00 90    	mov.w     [w14+6], w1
    33a0:	f1 00 90    	mov.w     [w1+14], w1
    33a2:	11 01 78    	mov.w     [w1], w2
    33a4:	be 00 90    	mov.w     [w14+6], w1
    33a6:	a1 48 90    	mov.b     [w1+10], w1
    33a8:	81 80 fb    	ze        w1, w1
    33aa:	f3 03 20    	mov.w     #0x3f, w3
    33ac:	81 18 dd    	sl.w      w3, w1, w1
    33ae:	81 80 ea    	com.w     w1, w1
    33b0:	81 00 61    	and.w     w2, w1, w1
    33b2:	01 08 78    	mov.w     w1, [w0]

000033b4 <.LSM178>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    33b4:	3e 00 90    	mov.w     [w14+6], w0
    33b6:	70 00 90    	mov.w     [w0+14], w0
    33b8:	be 00 90    	mov.w     [w14+6], w1
    33ba:	f1 00 90    	mov.w     [w1+14], w1
    33bc:	11 01 78    	mov.w     [w1], w2
    33be:	9e 00 78    	mov.w     [w14], w1
    33c0:	c1 09 90    	mov.w     [w1+24], w3
    33c2:	be 00 90    	mov.w     [w14+6], w1
    33c4:	a1 48 90    	mov.b     [w1+10], w1
    33c6:	81 80 fb    	ze        w1, w1
    33c8:	81 18 dd    	sl.w      w3, w1, w1
    33ca:	82 80 70    	ior.w     w1, w2, w1
    33cc:	01 08 78    	mov.w     w1, [w0]

000033ce <.LSM179>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    33ce:	1e 00 78    	mov.w     [w14], w0
    33d0:	10 08 90    	mov.w     [w0+18], w0
    33d2:	9e 00 78    	mov.w     [w14], w1
    33d4:	91 08 90    	mov.w     [w1+18], w1
    33d6:	11 01 78    	mov.w     [w1], w2
    33d8:	9e 00 78    	mov.w     [w14], w1
    33da:	d1 50 90    	mov.b     [w1+21], w1
    33dc:	81 80 fb    	ze        w1, w1
    33de:	f3 03 20    	mov.w     #0x3f, w3
    33e0:	81 18 dd    	sl.w      w3, w1, w1
    33e2:	81 80 ea    	com.w     w1, w1
    33e4:	81 00 61    	and.w     w2, w1, w1
    33e6:	01 08 78    	mov.w     w1, [w0]

000033e8 <.LSM180>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    33e8:	1e 00 78    	mov.w     [w14], w0
    33ea:	10 08 90    	mov.w     [w0+18], w0
    33ec:	9e 00 78    	mov.w     [w14], w1
    33ee:	91 08 90    	mov.w     [w1+18], w1
    33f0:	11 01 78    	mov.w     [w1], w2
    33f2:	ce 00 90    	mov.w     [w14+8], w1
    33f4:	e1 01 90    	mov.w     [w1+12], w3
    33f6:	9e 00 78    	mov.w     [w14], w1
    33f8:	d1 50 90    	mov.b     [w1+21], w1
    33fa:	81 80 fb    	ze        w1, w1
    33fc:	81 18 dd    	sl.w      w3, w1, w1
    33fe:	82 80 70    	ior.w     w1, w2, w1
    3400:	01 08 78    	mov.w     w1, [w0]

00003402 <.LSM181>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    3402:	11 3a 80    	mov.w     0x742, w1
    3404:	00 04 20    	mov.w     #0x40, w0
    3406:	01 01 70    	ior.w     w0, w1, w2
    3408:	60 04 20    	mov.w     #0x46, w0
    340a:	71 05 20    	mov.w     #0x57, w1
    340c:	23 74 20    	mov.w     #0x742, w3
    340e:	80 49 78    	mov.b     w0, [w3]
    3410:	81 49 78    	mov.b     w1, [w3]
    3412:	82 49 78    	mov.b     w2, [w3]
    3414:	0a 00 37    	bra       0x342a <.L51>

00003416 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    3416:	1e 00 78    	mov.w     [w14], w0
    3418:	f0 08 90    	mov.w     [w0+30], w1
    341a:	3e 00 90    	mov.w     [w14+6], w0
    341c:	80 8f 50    	sub.w     w1, w0, [w15]
    341e:	1f 01 3a    	bra       NZ, 0x365e <.L79>
    3420:	1e 00 78    	mov.w     [w14], w0
    3422:	80 10 90    	mov.w     [w0+32], w1
    3424:	4e 00 90    	mov.w     [w14+8], w0
    3426:	80 8f 50    	sub.w     w1, w0, [w15]
    3428:	1c 01 3a    	bra       NZ, 0x3662 <.L80>

0000342a <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    342a:	1e 00 78    	mov.w     [w14], w0
    342c:	10 00 78    	mov.w     [w0], w0
    342e:	01 20 20    	mov.w     #0x200, w1
    3430:	01 08 78    	mov.w     w1, [w0]
    3432:	06 00 37    	bra       0x3440 <.L53>

00003434 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    3434:	3e 00 90    	mov.w     [w14+6], w0
    3436:	00 00 e0    	cp0.w     w0
    3438:	16 01 3a    	bra       NZ, 0x3666 <.L81>
    343a:	4e 00 90    	mov.w     [w14+8], w0
    343c:	00 00 e0    	cp0.w     w0
    343e:	15 01 3a    	bra       NZ, 0x366a <.L82>

00003440 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    3440:	18 c0 b3    	mov.b     #0x1, w8
    3442:	02 40 22    	mov.w     #0x2400, w2
    3444:	43 a7 24    	mov.w     #0x4a74, w3
    3446:	5e 00 90    	mov.w     [w14+10], w0
    3448:	ee 00 90    	mov.w     [w14+12], w1
    344a:	b6 ef 07    	rcall     0x13b8 <___gesf2>
    344c:	00 00 e0    	cp0.w     w0
    344e:	01 00 3c    	bra       GT, 0x3452 <.L55>
    3450:	00 44 eb    	clr.b     w8

00003452 <.L55>:
    3452:	08 04 e0    	cp0.b     w8
    3454:	04 00 32    	bra       Z, 0x345e <.L56>

00003456 <.LSM186>:
        baudrate = FCY/4.;
    3456:	00 40 22    	mov.w     #0x2400, w0
    3458:	41 a7 24    	mov.w     #0x4a74, w1
    345a:	50 07 98    	mov.w     w0, [w14+10]
    345c:	61 07 98    	mov.w     w1, [w14+12]

0000345e <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    345e:	18 c0 b3    	mov.b     #0x1, w8
    3460:	02 40 22    	mov.w     #0x2400, w2
    3462:	43 17 24    	mov.w     #0x4174, w3
    3464:	5e 00 90    	mov.w     [w14+10], w0
    3466:	ee 00 90    	mov.w     [w14+12], w1
    3468:	a5 ef 07    	rcall     0x13b4 <___eqsf2>
    346a:	00 00 e0    	cp0.w     w0
    346c:	01 00 35    	bra       LT, 0x3470 <.L57>
    346e:	00 44 eb    	clr.b     w8

00003470 <.L57>:
    3470:	08 04 e0    	cp0.b     w8
    3472:	04 00 32    	bra       Z, 0x347c <.L58>

00003474 <.LSM188>:
        baudrate = FCY/(16.*65536.);
    3474:	00 40 22    	mov.w     #0x2400, w0
    3476:	41 17 24    	mov.w     #0x4174, w1
    3478:	50 07 98    	mov.w     w0, [w14+10]
    347a:	61 07 98    	mov.w     w1, [w14+12]

0000347c <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    347c:	18 c0 b3    	mov.b     #0x1, w8
    347e:	02 40 22    	mov.w     #0x2400, w2
    3480:	43 27 24    	mov.w     #0x4274, w3
    3482:	5e 00 90    	mov.w     [w14+10], w0
    3484:	ee 00 90    	mov.w     [w14+12], w1
    3486:	96 ef 07    	rcall     0x13b4 <___eqsf2>
    3488:	00 00 e0    	cp0.w     w0
    348a:	01 00 34    	bra       LE, 0x348e <.L59>
    348c:	00 44 eb    	clr.b     w8

0000348e <.L59>:
    348e:	08 04 e0    	cp0.b     w8
    3490:	0f 00 32    	bra       Z, 0x34b0 <.L60>

00003492 <.LSM190>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    3492:	1e 00 78    	mov.w     [w14], w0
    3494:	40 04 90    	mov.w     [w0+8], w8
    3496:	5e 01 90    	mov.w     [w14+10], w2
    3498:	ee 01 90    	mov.w     [w14+12], w3
    349a:	00 40 22    	mov.w     #0x2400, w0
    349c:	41 97 24    	mov.w     #0x4974, w1
    349e:	48 ef 07    	rcall     0x1330 <___divsf3>
    34a0:	02 00 20    	mov.w     #0x0, w2
    34a2:	03 f0 23    	mov.w     #0x3f00, w3
    34a4:	e8 ee 07    	rcall     0x1276 <___addsf3>
    34a6:	8a ef 07    	rcall     0x13bc <___fixunssfsi>
    34a8:	00 00 78    	mov.w     w0, w0
    34aa:	00 00 e9    	dec.w     w0, w0
    34ac:	00 0c 78    	mov.w     w0, [w8]
    34ae:	15 00 37    	bra       0x34da <.L61>

000034b0 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    34b0:	1e 00 78    	mov.w     [w14], w0
    34b2:	10 00 78    	mov.w     [w0], w0
    34b4:	9e 00 78    	mov.w     [w14], w1
    34b6:	91 00 78    	mov.w     [w1], w1
    34b8:	91 00 78    	mov.w     [w1], w1
    34ba:	01 30 a0    	bset.w    w1, #0x3
    34bc:	01 08 78    	mov.w     w1, [w0]

000034be <.LSM192>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    34be:	1e 00 78    	mov.w     [w14], w0
    34c0:	40 04 90    	mov.w     [w0+8], w8
    34c2:	5e 01 90    	mov.w     [w14+10], w2
    34c4:	ee 01 90    	mov.w     [w14+12], w3
    34c6:	00 40 22    	mov.w     #0x2400, w0
    34c8:	41 a7 24    	mov.w     #0x4a74, w1
    34ca:	32 ef 07    	rcall     0x1330 <___divsf3>
    34cc:	02 00 20    	mov.w     #0x0, w2
    34ce:	03 f0 23    	mov.w     #0x3f00, w3
    34d0:	d2 ee 07    	rcall     0x1276 <___addsf3>
    34d2:	74 ef 07    	rcall     0x13bc <___fixunssfsi>
    34d4:	00 00 78    	mov.w     w0, w0
    34d6:	00 00 e9    	dec.w     w0, w0
    34d8:	00 0c 78    	mov.w     w0, [w8]

000034da <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    34da:	ee 48 90    	mov.b     [w14+14], w1
    34dc:	50 c4 b3    	mov.b     #0x45, w0
    34de:	80 cf 50    	sub.b     w1, w0, [w15]
    34e0:	04 00 32    	bra       Z, 0x34ea <.L62>
    34e2:	ee 48 90    	mov.b     [w14+14], w1
    34e4:	50 c6 b3    	mov.b     #0x65, w0
    34e6:	80 cf 50    	sub.b     w1, w0, [w15]
    34e8:	08 00 3a    	bra       NZ, 0x34fa <.L63>

000034ea <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    34ea:	1e 00 78    	mov.w     [w14], w0
    34ec:	10 00 78    	mov.w     [w0], w0
    34ee:	9e 00 78    	mov.w     [w14], w1
    34f0:	91 00 78    	mov.w     [w1], w1
    34f2:	91 00 78    	mov.w     [w1], w1
    34f4:	01 10 a0    	bset.w    w1, #0x1
    34f6:	01 08 78    	mov.w     w1, [w0]
    34f8:	18 00 37    	bra       0x352a <.L64>

000034fa <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    34fa:	ee 48 90    	mov.b     [w14+14], w1
    34fc:	f0 c4 b3    	mov.b     #0x4f, w0
    34fe:	80 cf 50    	sub.b     w1, w0, [w15]
    3500:	04 00 32    	bra       Z, 0x350a <.L65>
    3502:	ee 48 90    	mov.b     [w14+14], w1
    3504:	f0 c6 b3    	mov.b     #0x6f, w0
    3506:	80 cf 50    	sub.b     w1, w0, [w15]
    3508:	08 00 3a    	bra       NZ, 0x351a <.L66>

0000350a <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    350a:	1e 00 78    	mov.w     [w14], w0
    350c:	10 00 78    	mov.w     [w0], w0
    350e:	9e 00 78    	mov.w     [w14], w1
    3510:	91 00 78    	mov.w     [w1], w1
    3512:	91 00 78    	mov.w     [w1], w1
    3514:	01 20 a0    	bset.w    w1, #0x2
    3516:	01 08 78    	mov.w     w1, [w0]
    3518:	08 00 37    	bra       0x352a <.L64>

0000351a <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    351a:	ee 48 90    	mov.b     [w14+14], w1
    351c:	e0 c4 b3    	mov.b     #0x4e, w0
    351e:	80 cf 50    	sub.b     w1, w0, [w15]
    3520:	04 00 32    	bra       Z, 0x352a <.L64>
    3522:	ee 48 90    	mov.b     [w14+14], w1
    3524:	e0 c6 b3    	mov.b     #0x6e, w0
    3526:	80 cf 50    	sub.b     w1, w0, [w15]
    3528:	a2 00 3a    	bra       NZ, 0x366e <.L83>

0000352a <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    352a:	4e b8 97    	mov.w     [w14-8], w0
    352c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    352e:	08 00 3a    	bra       NZ, 0x3540 <.L67>

00003530 <.LSM199>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    3530:	1e 00 78    	mov.w     [w14], w0
    3532:	10 00 78    	mov.w     [w0], w0
    3534:	9e 00 78    	mov.w     [w14], w1
    3536:	91 00 78    	mov.w     [w1], w1
    3538:	91 00 78    	mov.w     [w1], w1
    353a:	01 00 a0    	bset.w    w1, #0x0
    353c:	01 08 78    	mov.w     w1, [w0]
    353e:	03 00 37    	bra       0x3546 <.L68>

00003540 <.L67>:
    } else if (stopbits!=1) {
    3540:	4e b8 97    	mov.w     [w14-8], w0
    3542:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3544:	96 00 3a    	bra       NZ, 0x3672 <.L84>

00003546 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    3546:	2e b8 97    	mov.w     [w14-12], w0
    3548:	00 00 e0    	cp0.w     w0
    354a:	04 00 3a    	bra       NZ, 0x3554 <.L69>

0000354c <.LSM202>:
        self->putc = __putc_nobuffer;
    354c:	1e 00 78    	mov.w     [w14], w0
    354e:	c1 bc 22    	mov.w     #0x2bcc, w1
    3550:	41 18 98    	mov.w     w1, [w0+56]
    3552:	36 00 37    	bra       0x35c0 <.L70>

00003554 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    3554:	1e 00 78    	mov.w     [w14], w0
    3556:	10 00 90    	mov.w     [w0+2], w0
    3558:	9e 00 78    	mov.w     [w14], w1
    355a:	91 00 90    	mov.w     [w1+2], w1
    355c:	11 01 78    	mov.w     [w1], w2
    355e:	01 00 22    	mov.w     #0x2000, w1
    3560:	82 80 70    	ior.w     w1, w2, w1
    3562:	01 08 78    	mov.w     w1, [w0]

00003564 <.LSM204>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    3564:	1e 00 78    	mov.w     [w14], w0
    3566:	ae b8 97    	mov.w     [w14-12], w1
    3568:	11 10 98    	mov.w     w1, [w0+34]

0000356a <.LSM205>:
        self->TXbuffer.length = TXbufferlen;
    356a:	1e 00 78    	mov.w     [w14], w0
    356c:	9e b8 97    	mov.w     [w14-14], w1
    356e:	21 10 98    	mov.w     w1, [w0+36]

00003570 <.LSM206>:
        self->TXbuffer.head = 0;
    3570:	1e 00 78    	mov.w     [w14], w0
    3572:	80 00 eb    	clr.w     w1
    3574:	31 10 98    	mov.w     w1, [w0+38]

00003576 <.LSM207>:
        self->TXbuffer.tail = 0;
    3576:	1e 00 78    	mov.w     [w14], w0
    3578:	80 00 eb    	clr.w     w1
    357a:	41 10 98    	mov.w     w1, [w0+40]

0000357c <.LSM208>:
        self->TXbuffer.count = 0;
    357c:	1e 00 78    	mov.w     [w14], w0
    357e:	80 00 eb    	clr.w     w1
    3580:	51 10 98    	mov.w     w1, [w0+42]

00003582 <.LSM209>:
        self->TXthreshold = TXthreshold;
    3582:	1e 00 78    	mov.w     [w14], w0
    3584:	be b8 97    	mov.w     [w14-10], w1
    3586:	31 18 98    	mov.w     w1, [w0+54]

00003588 <.LSM210>:
        self->putc = __putc_buffer;
    3588:	1e 00 78    	mov.w     [w14], w0
    358a:	e1 c0 22    	mov.w     #0x2c0e, w1
    358c:	41 18 98    	mov.w     w1, [w0+56]

0000358e <.LSM211>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    358e:	1e 00 78    	mov.w     [w14], w0
    3590:	50 00 90    	mov.w     [w0+10], w0
    3592:	9e 00 78    	mov.w     [w14], w1
    3594:	d1 00 90    	mov.w     [w1+10], w1
    3596:	11 01 78    	mov.w     [w1], w2
    3598:	9e 00 78    	mov.w     [w14], w1
    359a:	e1 48 90    	mov.b     [w1+14], w1
    359c:	81 80 fb    	ze        w1, w1
    359e:	13 00 20    	mov.w     #0x1, w3
    35a0:	81 18 dd    	sl.w      w3, w1, w1
    35a2:	81 80 ea    	com.w     w1, w1
    35a4:	81 00 61    	and.w     w2, w1, w1
    35a6:	01 08 78    	mov.w     w1, [w0]

000035a8 <.LSM212>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    35a8:	1e 00 78    	mov.w     [w14], w0
    35aa:	60 00 90    	mov.w     [w0+12], w0
    35ac:	9e 00 78    	mov.w     [w14], w1
    35ae:	e1 00 90    	mov.w     [w1+12], w1
    35b0:	11 01 78    	mov.w     [w1], w2
    35b2:	9e 00 78    	mov.w     [w14], w1
    35b4:	e1 48 90    	mov.b     [w1+14], w1
    35b6:	81 80 fb    	ze        w1, w1
    35b8:	13 00 20    	mov.w     #0x1, w3
    35ba:	81 18 dd    	sl.w      w3, w1, w1
    35bc:	82 80 70    	ior.w     w1, w2, w1
    35be:	01 08 78    	mov.w     w1, [w0]

000035c0 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    35c0:	0e b8 97    	mov.w     [w14-16], w0
    35c2:	00 00 e0    	cp0.w     w0
    35c4:	04 00 3a    	bra       NZ, 0x35ce <.L71>

000035c6 <.LSM214>:
        self->getc = __getc_nobuffer;
    35c6:	1e 00 78    	mov.w     [w14], w0
    35c8:	01 bf 22    	mov.w     #0x2bf0, w1
    35ca:	51 18 98    	mov.w     w1, [w0+58]
    35cc:	2b 00 37    	bra       0x3624 <.L72>

000035ce <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    35ce:	1e 00 78    	mov.w     [w14], w0
    35d0:	8e b8 97    	mov.w     [w14-16], w1
    35d2:	61 10 98    	mov.w     w1, [w0+44]

000035d4 <.LSM216>:
        self->RXbuffer.length = RXbufferlen;
    35d4:	1e 00 78    	mov.w     [w14], w0
    35d6:	fe b0 97    	mov.w     [w14-18], w1
    35d8:	71 10 98    	mov.w     w1, [w0+46]

000035da <.LSM217>:
        self->RXbuffer.head = 0;
    35da:	1e 00 78    	mov.w     [w14], w0
    35dc:	80 00 eb    	clr.w     w1
    35de:	01 18 98    	mov.w     w1, [w0+48]

000035e0 <.LSM218>:
        self->RXbuffer.tail = 0;
    35e0:	1e 00 78    	mov.w     [w14], w0
    35e2:	80 00 eb    	clr.w     w1
    35e4:	11 18 98    	mov.w     w1, [w0+50]

000035e6 <.LSM219>:
        self->RXbuffer.count = 0;
    35e6:	1e 00 78    	mov.w     [w14], w0
    35e8:	80 00 eb    	clr.w     w1
    35ea:	21 18 98    	mov.w     w1, [w0+52]

000035ec <.LSM220>:
        self->getc = __getc_buffer;
    35ec:	1e 00 78    	mov.w     [w14], w0
    35ee:	61 d0 22    	mov.w     #0x2d06, w1
    35f0:	51 18 98    	mov.w     w1, [w0+58]

000035f2 <.LSM221>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    35f2:	1e 00 78    	mov.w     [w14], w0
    35f4:	50 00 90    	mov.w     [w0+10], w0
    35f6:	9e 00 78    	mov.w     [w14], w1
    35f8:	d1 00 90    	mov.w     [w1+10], w1
    35fa:	11 01 78    	mov.w     [w1], w2
    35fc:	9e 00 78    	mov.w     [w14], w1
    35fe:	f1 48 90    	mov.b     [w1+15], w1
    3600:	81 80 fb    	ze        w1, w1
    3602:	13 00 20    	mov.w     #0x1, w3
    3604:	81 18 dd    	sl.w      w3, w1, w1
    3606:	81 80 ea    	com.w     w1, w1
    3608:	81 00 61    	and.w     w2, w1, w1
    360a:	01 08 78    	mov.w     w1, [w0]

0000360c <.LSM222>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    360c:	1e 00 78    	mov.w     [w14], w0
    360e:	60 00 90    	mov.w     [w0+12], w0
    3610:	9e 00 78    	mov.w     [w14], w1
    3612:	e1 00 90    	mov.w     [w1+12], w1
    3614:	11 01 78    	mov.w     [w1], w2
    3616:	9e 00 78    	mov.w     [w14], w1
    3618:	f1 48 90    	mov.b     [w1+15], w1
    361a:	81 80 fb    	ze        w1, w1
    361c:	13 00 20    	mov.w     #0x1, w3
    361e:	81 18 dd    	sl.w      w3, w1, w1
    3620:	82 80 70    	ior.w     w1, w2, w1
    3622:	01 08 78    	mov.w     w1, [w0]

00003624 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    3624:	1e 00 78    	mov.w     [w14], w0
    3626:	10 00 78    	mov.w     [w0], w0
    3628:	9e 00 78    	mov.w     [w14], w1
    362a:	91 00 78    	mov.w     [w1], w1
    362c:	11 01 78    	mov.w     [w1], w2
    362e:	01 00 28    	mov.w     #0x8000, w1
    3630:	82 80 70    	ior.w     w1, w2, w1
    3632:	01 08 78    	mov.w     w1, [w0]

00003634 <.LSM224>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    3634:	1e 00 78    	mov.w     [w14], w0
    3636:	10 00 90    	mov.w     [w0+2], w0
    3638:	9e 00 78    	mov.w     [w14], w1
    363a:	91 00 90    	mov.w     [w1+2], w1
    363c:	11 01 78    	mov.w     [w1], w2
    363e:	01 40 20    	mov.w     #0x400, w1
    3640:	82 80 70    	ior.w     w1, w2, w1
    3642:	01 08 78    	mov.w     w1, [w0]
    3644:	17 00 37    	bra       0x3674 <.L40>

00003646 <.L73>:
    3646:	00 00 00    	nop       
    3648:	15 00 37    	bra       0x3674 <.L40>

0000364a <.L74>:
    364a:	00 00 00    	nop       
    364c:	13 00 37    	bra       0x3674 <.L40>

0000364e <.L75>:
    364e:	00 00 00    	nop       
    3650:	11 00 37    	bra       0x3674 <.L40>

00003652 <.L76>:
    3652:	00 00 00    	nop       
    3654:	0f 00 37    	bra       0x3674 <.L40>

00003656 <.L77>:
    3656:	00 00 00    	nop       
    3658:	0d 00 37    	bra       0x3674 <.L40>

0000365a <.L78>:
    365a:	00 00 00    	nop       
    365c:	0b 00 37    	bra       0x3674 <.L40>

0000365e <.L79>:
    365e:	00 00 00    	nop       
    3660:	09 00 37    	bra       0x3674 <.L40>

00003662 <.L80>:
    3662:	00 00 00    	nop       
    3664:	07 00 37    	bra       0x3674 <.L40>

00003666 <.L81>:
    3666:	00 00 00    	nop       
    3668:	05 00 37    	bra       0x3674 <.L40>

0000366a <.L82>:
    366a:	00 00 00    	nop       
    366c:	03 00 37    	bra       0x3674 <.L40>

0000366e <.L83>:
    366e:	00 00 00    	nop       
    3670:	01 00 37    	bra       0x3674 <.L40>

00003672 <.L84>:
    3672:	00 00 00    	nop       

00003674 <.L40>:
}
    3674:	4f 04 78    	mov.w     [--w15], w8
    3676:	00 80 fa    	ulnk      
    3678:	00 00 06    	return    

0000367a <_uart_close>:

void uart_close(_UART *self) {
    367a:	02 00 fa    	lnk       #0x2
    367c:	00 0f 78    	mov.w     w0, [w14]

0000367e <.LSM234>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    367e:	1e 00 78    	mov.w     [w14], w0
    3680:	10 00 90    	mov.w     [w0+2], w0
    3682:	9e 00 78    	mov.w     [w14], w1
    3684:	91 00 90    	mov.w     [w1+2], w1
    3686:	11 01 78    	mov.w     [w1], w2
    3688:	f1 bf 2f    	mov.w     #0xfbff, w1
    368a:	81 00 61    	and.w     w2, w1, w1
    368c:	01 08 78    	mov.w     w1, [w0]

0000368e <.LSM235>:
    *(self->UxMODE) = 0;        // Disable UART module
    368e:	1e 00 78    	mov.w     [w14], w0
    3690:	10 00 78    	mov.w     [w0], w0
    3692:	80 00 eb    	clr.w     w1
    3694:	01 08 78    	mov.w     w1, [w0]

00003696 <.LSM236>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    3696:	1e 00 78    	mov.w     [w14], w0
    3698:	60 00 90    	mov.w     [w0+12], w0
    369a:	9e 00 78    	mov.w     [w14], w1
    369c:	e1 00 90    	mov.w     [w1+12], w1
    369e:	11 01 78    	mov.w     [w1], w2
    36a0:	9e 00 78    	mov.w     [w14], w1
    36a2:	e1 48 90    	mov.b     [w1+14], w1
    36a4:	81 80 fb    	ze        w1, w1
    36a6:	13 00 20    	mov.w     #0x1, w3
    36a8:	81 18 dd    	sl.w      w3, w1, w1
    36aa:	81 80 ea    	com.w     w1, w1
    36ac:	81 00 61    	and.w     w2, w1, w1
    36ae:	01 08 78    	mov.w     w1, [w0]

000036b0 <.LSM237>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    36b0:	1e 00 78    	mov.w     [w14], w0
    36b2:	60 00 90    	mov.w     [w0+12], w0
    36b4:	9e 00 78    	mov.w     [w14], w1
    36b6:	e1 00 90    	mov.w     [w1+12], w1
    36b8:	11 01 78    	mov.w     [w1], w2
    36ba:	9e 00 78    	mov.w     [w14], w1
    36bc:	f1 48 90    	mov.b     [w1+15], w1
    36be:	81 80 fb    	ze        w1, w1
    36c0:	13 00 20    	mov.w     #0x1, w3
    36c2:	81 18 dd    	sl.w      w3, w1, w1
    36c4:	81 80 ea    	com.w     w1, w1
    36c6:	81 00 61    	and.w     w2, w1, w1
    36c8:	01 08 78    	mov.w     w1, [w0]

000036ca <.LSM238>:
    self->putc = NULL;
    36ca:	1e 00 78    	mov.w     [w14], w0
    36cc:	80 00 eb    	clr.w     w1
    36ce:	41 18 98    	mov.w     w1, [w0+56]

000036d0 <.LSM239>:
    self->getc = NULL;
    36d0:	1e 00 78    	mov.w     [w14], w0
    36d2:	80 00 eb    	clr.w     w1
    36d4:	51 18 98    	mov.w     w1, [w0+58]

000036d6 <.LSM240>:
    if (self->TX) {
    36d6:	1e 00 78    	mov.w     [w14], w0
    36d8:	50 08 90    	mov.w     [w0+26], w0
    36da:	00 00 e0    	cp0.w     w0
    36dc:	2f 00 32    	bra       Z, 0x373c <.L86>

000036de <.LSM241>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    36de:	11 3a 80    	mov.w     0x742, w1
    36e0:	f0 0b 20    	mov.w     #0xbf, w0
    36e2:	00 81 60    	and.w     w1, w0, w2
    36e4:	60 04 20    	mov.w     #0x46, w0
    36e6:	71 05 20    	mov.w     #0x57, w1
    36e8:	23 74 20    	mov.w     #0x742, w3
    36ea:	80 49 78    	mov.b     w0, [w3]
    36ec:	81 49 78    	mov.b     w1, [w3]
    36ee:	82 49 78    	mov.b     w2, [w3]

000036f0 <.LSM242>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    36f0:	1e 00 78    	mov.w     [w14], w0
    36f2:	50 08 90    	mov.w     [w0+26], w0
    36f4:	70 00 90    	mov.w     [w0+14], w0
    36f6:	9e 00 78    	mov.w     [w14], w1
    36f8:	d1 08 90    	mov.w     [w1+26], w1
    36fa:	f1 00 90    	mov.w     [w1+14], w1
    36fc:	11 01 78    	mov.w     [w1], w2
    36fe:	9e 00 78    	mov.w     [w14], w1
    3700:	d1 08 90    	mov.w     [w1+26], w1
    3702:	a1 48 90    	mov.b     [w1+10], w1
    3704:	81 80 fb    	ze        w1, w1
    3706:	f3 03 20    	mov.w     #0x3f, w3
    3708:	81 18 dd    	sl.w      w3, w1, w1
    370a:	81 80 ea    	com.w     w1, w1
    370c:	81 00 61    	and.w     w2, w1, w1
    370e:	01 08 78    	mov.w     w1, [w0]

00003710 <.LSM243>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3710:	11 3a 80    	mov.w     0x742, w1
    3712:	00 04 20    	mov.w     #0x40, w0
    3714:	01 01 70    	ior.w     w0, w1, w2
    3716:	60 04 20    	mov.w     #0x46, w0
    3718:	71 05 20    	mov.w     #0x57, w1
    371a:	23 74 20    	mov.w     #0x742, w3
    371c:	80 49 78    	mov.b     w0, [w3]
    371e:	81 49 78    	mov.b     w1, [w3]
    3720:	82 49 78    	mov.b     w2, [w3]

00003722 <.LSM244>:
        self->TX->owner = NULL;
    3722:	1e 00 78    	mov.w     [w14], w0
    3724:	50 08 90    	mov.w     [w0+26], w0
    3726:	80 00 eb    	clr.w     w1
    3728:	01 08 98    	mov.w     w1, [w0+16]

0000372a <.LSM245>:
        pin_digitalOut(self->TX);
    372a:	1e 00 78    	mov.w     [w14], w0
    372c:	50 08 90    	mov.w     [w0+26], w0
    372e:	1a 0a 07    	rcall     0x4b64 <_pin_digitalOut>

00003730 <.LSM246>:
        pin_set(self->TX);
    3730:	1e 00 78    	mov.w     [w14], w0
    3732:	50 08 90    	mov.w     [w0+26], w0
    3734:	74 0a 07    	rcall     0x4c1e <_pin_set>

00003736 <.LSM247>:
        self->TX = NULL;
    3736:	1e 00 78    	mov.w     [w14], w0
    3738:	80 00 eb    	clr.w     w1
    373a:	51 08 98    	mov.w     w1, [w0+26]

0000373c <.L86>:
    }
    if (self->RX) {
    373c:	1e 00 78    	mov.w     [w14], w0
    373e:	60 08 90    	mov.w     [w0+28], w0
    3740:	00 00 e0    	cp0.w     w0
    3742:	28 00 32    	bra       Z, 0x3794 <.L87>

00003744 <.LSM249>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3744:	11 3a 80    	mov.w     0x742, w1
    3746:	f0 0b 20    	mov.w     #0xbf, w0
    3748:	00 81 60    	and.w     w1, w0, w2
    374a:	60 04 20    	mov.w     #0x46, w0
    374c:	71 05 20    	mov.w     #0x57, w1
    374e:	23 74 20    	mov.w     #0x742, w3
    3750:	80 49 78    	mov.b     w0, [w3]
    3752:	81 49 78    	mov.b     w1, [w3]
    3754:	82 49 78    	mov.b     w2, [w3]

00003756 <.LSM250>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    3756:	1e 00 78    	mov.w     [w14], w0
    3758:	00 08 90    	mov.w     [w0+16], w0
    375a:	9e 00 78    	mov.w     [w14], w1
    375c:	81 08 90    	mov.w     [w1+16], w1
    375e:	11 01 78    	mov.w     [w1], w2
    3760:	9e 00 78    	mov.w     [w14], w1
    3762:	c1 50 90    	mov.b     [w1+20], w1
    3764:	81 80 fb    	ze        w1, w1
    3766:	f3 03 20    	mov.w     #0x3f, w3
    3768:	81 18 dd    	sl.w      w3, w1, w1
    376a:	82 80 70    	ior.w     w1, w2, w1
    376c:	01 08 78    	mov.w     w1, [w0]

0000376e <.LSM251>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    376e:	11 3a 80    	mov.w     0x742, w1
    3770:	00 04 20    	mov.w     #0x40, w0
    3772:	01 01 70    	ior.w     w0, w1, w2
    3774:	60 04 20    	mov.w     #0x46, w0
    3776:	71 05 20    	mov.w     #0x57, w1
    3778:	23 74 20    	mov.w     #0x742, w3
    377a:	80 49 78    	mov.b     w0, [w3]
    377c:	81 49 78    	mov.b     w1, [w3]
    377e:	82 49 78    	mov.b     w2, [w3]

00003780 <.LSM252>:
        self->RX->owner = NULL;
    3780:	1e 00 78    	mov.w     [w14], w0
    3782:	60 08 90    	mov.w     [w0+28], w0
    3784:	80 00 eb    	clr.w     w1
    3786:	01 08 98    	mov.w     w1, [w0+16]

00003788 <.LSM253>:
        pin_digitalIn(self->RX);
    3788:	1e 00 78    	mov.w     [w14], w0
    378a:	60 08 90    	mov.w     [w0+28], w0
    378c:	c4 09 07    	rcall     0x4b16 <_pin_digitalIn>

0000378e <.LSM254>:
        self->RX = NULL;
    378e:	1e 00 78    	mov.w     [w14], w0
    3790:	80 00 eb    	clr.w     w1
    3792:	61 08 98    	mov.w     w1, [w0+28]

00003794 <.L87>:
    }
    if (self->RTS) {
    3794:	1e 00 78    	mov.w     [w14], w0
    3796:	70 08 90    	mov.w     [w0+30], w0
    3798:	00 00 e0    	cp0.w     w0
    379a:	2f 00 32    	bra       Z, 0x37fa <.L88>

0000379c <.LSM256>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    379c:	11 3a 80    	mov.w     0x742, w1
    379e:	f0 0b 20    	mov.w     #0xbf, w0
    37a0:	00 81 60    	and.w     w1, w0, w2
    37a2:	60 04 20    	mov.w     #0x46, w0
    37a4:	71 05 20    	mov.w     #0x57, w1
    37a6:	23 74 20    	mov.w     #0x742, w3
    37a8:	80 49 78    	mov.b     w0, [w3]
    37aa:	81 49 78    	mov.b     w1, [w3]
    37ac:	82 49 78    	mov.b     w2, [w3]

000037ae <.LSM257>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    37ae:	1e 00 78    	mov.w     [w14], w0
    37b0:	70 08 90    	mov.w     [w0+30], w0
    37b2:	70 00 90    	mov.w     [w0+14], w0
    37b4:	9e 00 78    	mov.w     [w14], w1
    37b6:	f1 08 90    	mov.w     [w1+30], w1
    37b8:	f1 00 90    	mov.w     [w1+14], w1
    37ba:	11 01 78    	mov.w     [w1], w2
    37bc:	9e 00 78    	mov.w     [w14], w1
    37be:	f1 08 90    	mov.w     [w1+30], w1
    37c0:	a1 48 90    	mov.b     [w1+10], w1
    37c2:	81 80 fb    	ze        w1, w1
    37c4:	f3 03 20    	mov.w     #0x3f, w3
    37c6:	81 18 dd    	sl.w      w3, w1, w1
    37c8:	81 80 ea    	com.w     w1, w1
    37ca:	81 00 61    	and.w     w2, w1, w1
    37cc:	01 08 78    	mov.w     w1, [w0]

000037ce <.LSM258>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    37ce:	11 3a 80    	mov.w     0x742, w1
    37d0:	00 04 20    	mov.w     #0x40, w0
    37d2:	01 01 70    	ior.w     w0, w1, w2
    37d4:	60 04 20    	mov.w     #0x46, w0
    37d6:	71 05 20    	mov.w     #0x57, w1
    37d8:	23 74 20    	mov.w     #0x742, w3
    37da:	80 49 78    	mov.b     w0, [w3]
    37dc:	81 49 78    	mov.b     w1, [w3]
    37de:	82 49 78    	mov.b     w2, [w3]

000037e0 <.LSM259>:
        self->RTS->owner = NULL;
    37e0:	1e 00 78    	mov.w     [w14], w0
    37e2:	70 08 90    	mov.w     [w0+30], w0
    37e4:	80 00 eb    	clr.w     w1
    37e6:	01 08 98    	mov.w     w1, [w0+16]

000037e8 <.LSM260>:
        pin_digitalOut(self->RTS);
    37e8:	1e 00 78    	mov.w     [w14], w0
    37ea:	70 08 90    	mov.w     [w0+30], w0
    37ec:	bb 09 07    	rcall     0x4b64 <_pin_digitalOut>

000037ee <.LSM261>:
        pin_set(self->RTS);
    37ee:	1e 00 78    	mov.w     [w14], w0
    37f0:	70 08 90    	mov.w     [w0+30], w0
    37f2:	15 0a 07    	rcall     0x4c1e <_pin_set>

000037f4 <.LSM262>:
        self->RTS = NULL;
    37f4:	1e 00 78    	mov.w     [w14], w0
    37f6:	80 00 eb    	clr.w     w1
    37f8:	71 08 98    	mov.w     w1, [w0+30]

000037fa <.L88>:
    }
    if (self->CTS) {
    37fa:	1e 00 78    	mov.w     [w14], w0
    37fc:	00 10 90    	mov.w     [w0+32], w0
    37fe:	00 00 e0    	cp0.w     w0
    3800:	28 00 32    	bra       Z, 0x3852 <.L85>

00003802 <.LSM264>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3802:	11 3a 80    	mov.w     0x742, w1
    3804:	f0 0b 20    	mov.w     #0xbf, w0
    3806:	00 81 60    	and.w     w1, w0, w2
    3808:	60 04 20    	mov.w     #0x46, w0
    380a:	71 05 20    	mov.w     #0x57, w1
    380c:	23 74 20    	mov.w     #0x742, w3
    380e:	80 49 78    	mov.b     w0, [w3]
    3810:	81 49 78    	mov.b     w1, [w3]
    3812:	82 49 78    	mov.b     w2, [w3]

00003814 <.LSM265>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    3814:	1e 00 78    	mov.w     [w14], w0
    3816:	10 08 90    	mov.w     [w0+18], w0
    3818:	9e 00 78    	mov.w     [w14], w1
    381a:	91 08 90    	mov.w     [w1+18], w1
    381c:	11 01 78    	mov.w     [w1], w2
    381e:	9e 00 78    	mov.w     [w14], w1
    3820:	d1 50 90    	mov.b     [w1+21], w1
    3822:	81 80 fb    	ze        w1, w1
    3824:	f3 03 20    	mov.w     #0x3f, w3
    3826:	81 18 dd    	sl.w      w3, w1, w1
    3828:	82 80 70    	ior.w     w1, w2, w1
    382a:	01 08 78    	mov.w     w1, [w0]

0000382c <.LSM266>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    382c:	11 3a 80    	mov.w     0x742, w1
    382e:	00 04 20    	mov.w     #0x40, w0
    3830:	01 01 70    	ior.w     w0, w1, w2
    3832:	60 04 20    	mov.w     #0x46, w0
    3834:	71 05 20    	mov.w     #0x57, w1
    3836:	23 74 20    	mov.w     #0x742, w3
    3838:	80 49 78    	mov.b     w0, [w3]
    383a:	81 49 78    	mov.b     w1, [w3]
    383c:	82 49 78    	mov.b     w2, [w3]

0000383e <.LSM267>:
        self->CTS->owner = NULL;
    383e:	1e 00 78    	mov.w     [w14], w0
    3840:	00 10 90    	mov.w     [w0+32], w0
    3842:	80 00 eb    	clr.w     w1
    3844:	01 08 98    	mov.w     w1, [w0+16]

00003846 <.LSM268>:
        pin_digitalIn(self->CTS);
    3846:	1e 00 78    	mov.w     [w14], w0
    3848:	00 10 90    	mov.w     [w0+32], w0
    384a:	65 09 07    	rcall     0x4b16 <_pin_digitalIn>

0000384c <.LSM269>:
        self->CTS = NULL;
    384c:	1e 00 78    	mov.w     [w14], w0
    384e:	80 00 eb    	clr.w     w1
    3850:	01 10 98    	mov.w     w1, [w0+32]

00003852 <.L85>:
    }
}
    3852:	00 80 fa    	ulnk      
    3854:	00 00 06    	return    

00003856 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    3856:	04 00 fa    	lnk       #0x4
    3858:	00 0f 78    	mov.w     w0, [w14]
    385a:	21 47 98    	mov.b     w1, [w14+2]

0000385c <.LSM272>:
    if (self->putc)
    385c:	1e 00 78    	mov.w     [w14], w0
    385e:	40 18 90    	mov.w     [w0+56], w0
    3860:	00 00 e0    	cp0.w     w0
    3862:	05 00 32    	bra       Z, 0x386e <.L90>

00003864 <.LSM273>:
        self->putc(self, ch);
    3864:	1e 00 78    	mov.w     [w14], w0
    3866:	40 19 90    	mov.w     [w0+56], w2
    3868:	ae 40 90    	mov.b     [w14+2], w1
    386a:	1e 00 78    	mov.w     [w14], w0
    386c:	02 00 01    	call      w2

0000386e <.L90>:
}
    386e:	00 80 fa    	ulnk      
    3870:	00 00 06    	return    

00003872 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    3872:	02 00 fa    	lnk       #0x2
    3874:	00 0f 78    	mov.w     w0, [w14]

00003876 <.LSM276>:
    if (self->getc)
    3876:	1e 00 78    	mov.w     [w14], w0
    3878:	50 18 90    	mov.w     [w0+58], w0
    387a:	00 00 e0    	cp0.w     w0
    387c:	05 00 32    	bra       Z, 0x3888 <.L93>

0000387e <.LSM277>:
        return self->getc(self);
    387e:	1e 00 78    	mov.w     [w14], w0
    3880:	d0 18 90    	mov.w     [w0+58], w1
    3882:	1e 00 78    	mov.w     [w14], w0
    3884:	01 00 01    	call      w1
    3886:	01 00 37    	bra       0x388a <.L94>

00003888 <.L93>:
    else
        return 0xFF;
    3888:	00 c0 eb    	setm.b    w0

0000388a <.L94>:
}
    388a:	00 80 fa    	ulnk      
    388c:	00 00 06    	return    

0000388e <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    388e:	02 00 fa    	lnk       #0x2
    3890:	00 0f 78    	mov.w     w0, [w14]

00003892 <.LSM281>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    3892:	1e 00 78    	mov.w     [w14], w0
    3894:	10 00 90    	mov.w     [w0+2], w0
    3896:	90 00 78    	mov.w     [w0], w1
    3898:	00 40 20    	mov.w     #0x400, w0
    389a:	00 80 60    	and.w     w1, w0, w0
    389c:	00 00 e0    	cp0.w     w0
    389e:	08 00 3a    	bra       NZ, 0x38b0 <.L95>

000038a0 <.LSM282>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    38a0:	1e 00 78    	mov.w     [w14], w0
    38a2:	10 00 90    	mov.w     [w0+2], w0
    38a4:	9e 00 78    	mov.w     [w14], w1
    38a6:	91 00 90    	mov.w     [w1+2], w1
    38a8:	11 01 78    	mov.w     [w1], w2
    38aa:	01 40 20    	mov.w     #0x400, w1
    38ac:	82 80 70    	ior.w     w1, w2, w1
    38ae:	01 08 78    	mov.w     w1, [w0]

000038b0 <.L95>:
}
    38b0:	00 80 fa    	ulnk      
    38b2:	00 00 06    	return    

000038b4 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    38b4:	04 00 fa    	lnk       #0x4
    38b6:	00 0f 78    	mov.w     w0, [w14]
    38b8:	11 07 98    	mov.w     w1, [w14+2]

000038ba <.LSM285>:
    while (*str)
    38ba:	08 00 37    	bra       0x38cc <.L98>

000038bc <.L99>:
        uart_putc(self, *str++);
    38bc:	1e 00 90    	mov.w     [w14+2], w0
    38be:	10 40 78    	mov.b     [w0], w0
    38c0:	9e 00 90    	mov.w     [w14+2], w1
    38c2:	81 00 e8    	inc.w     w1, w1
    38c4:	11 07 98    	mov.w     w1, [w14+2]
    38c6:	80 40 78    	mov.b     w0, w1
    38c8:	1e 00 78    	mov.w     [w14], w0
    38ca:	c5 ff 07    	rcall     0x3856 <_uart_putc>

000038cc <.L98>:
    38cc:	1e 00 90    	mov.w     [w14+2], w0
    38ce:	10 40 78    	mov.b     [w0], w0
    38d0:	00 04 e0    	cp0.b     w0
    38d2:	f4 ff 3a    	bra       NZ, 0x38bc <.L99>

000038d4 <.LSM288>:
    uart_flushTxBuffer(self);
    38d4:	1e 00 78    	mov.w     [w14], w0
    38d6:	db ff 07    	rcall     0x388e <_uart_flushTxBuffer>

000038d8 <.LSM289>:
}
    38d8:	00 80 fa    	ulnk      
    38da:	00 00 06    	return    

000038dc <_uart_gets_term>:

void uart_gets_term(_UART *self, uint8_t *str, uint16_t len) {
    38dc:	0a 00 fa    	lnk       #0xa
    38de:	20 07 98    	mov.w     w0, [w14+4]
    38e0:	31 07 98    	mov.w     w1, [w14+6]
    38e2:	42 07 98    	mov.w     w2, [w14+8]

000038e4 <.LSM291>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    38e4:	4e 00 90    	mov.w     [w14+8], w0
    38e6:	00 00 e0    	cp0.w     w0
    38e8:	87 00 32    	bra       Z, 0x39f8 <.L113>

000038ea <.LSM292>:
        return;

    if (len==1) {
    38ea:	4e 00 90    	mov.w     [w14+8], w0
    38ec:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    38ee:	04 00 3a    	bra       NZ, 0x38f8 <.L103>

000038f0 <.LSM293>:
        *str = '\0';
    38f0:	3e 00 90    	mov.w     [w14+6], w0
    38f2:	80 40 eb    	clr.b     w1
    38f4:	01 48 78    	mov.b     w1, [w0]

000038f6 <.LSM294>:
        return;
    38f6:	81 00 37    	bra       0x39fa <.L100>

000038f8 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    38f8:	b1 c1 b3    	mov.b     #0x1b, w1
    38fa:	2e 00 90    	mov.w     [w14+4], w0
    38fc:	ac ff 07    	rcall     0x3856 <_uart_putc>

000038fe <.LSM296>:
    uart_putc(self, '7');
    38fe:	71 c3 b3    	mov.b     #0x37, w1
    3900:	2e 00 90    	mov.w     [w14+4], w0
    3902:	a9 ff 07    	rcall     0x3856 <_uart_putc>

00003904 <.LSM297>:
    uart_flushTxBuffer(self);
    3904:	2e 00 90    	mov.w     [w14+4], w0
    3906:	c3 ff 07    	rcall     0x388e <_uart_flushTxBuffer>

00003908 <.LSM298>:
    start = str;
    3908:	be 00 90    	mov.w     [w14+6], w1
    390a:	11 07 98    	mov.w     w1, [w14+2]

0000390c <.LSM299>:
    left = len;
    390c:	ce 00 90    	mov.w     [w14+8], w1
    390e:	01 0f 78    	mov.w     w1, [w14]
    3910:	03 00 37    	bra       0x3918 <.L112>

00003912 <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    3912:	00 00 00    	nop       
    3914:	01 00 37    	bra       0x3918 <.L112>

00003916 <.L115>:
    3916:	00 00 00    	nop       

00003918 <.L112>:
    3918:	2e 00 90    	mov.w     [w14+4], w0
    391a:	ab ff 07    	rcall     0x3872 <_uart_getc>
    391c:	be 00 90    	mov.w     [w14+6], w1
    391e:	80 48 78    	mov.b     w0, [w1]

00003920 <.LSM302>:
    3920:	3e 00 90    	mov.w     [w14+6], w0
    3922:	10 40 78    	mov.b     [w0], w0
    3924:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3926:	0c 00 3a    	bra       NZ, 0x3940 <.L104>

00003928 <.LSM303>:

    *str = '\0';                            // Terminarte the string with null
    3928:	3e 00 90    	mov.w     [w14+6], w0
    392a:	80 40 eb    	clr.b     w1
    392c:	01 48 78    	mov.b     w1, [w0]

0000392e <.LSM304>:
    uart_putc(self, '\n');                  // Send newline and
    392e:	a1 c0 b3    	mov.b     #0xa, w1
    3930:	2e 00 90    	mov.w     [w14+4], w0
    3932:	91 ff 07    	rcall     0x3856 <_uart_putc>

00003934 <.LSM305>:
    uart_putc(self, '\r');                  //   carriage return
    3934:	d1 c0 b3    	mov.b     #0xd, w1
    3936:	2e 00 90    	mov.w     [w14+4], w0
    3938:	8e ff 07    	rcall     0x3856 <_uart_putc>

0000393a <.LSM306>:
    uart_flushTxBuffer(self);
    393a:	2e 00 90    	mov.w     [w14+4], w0
    393c:	a8 ff 07    	rcall     0x388e <_uart_flushTxBuffer>
    393e:	5d 00 37    	bra       0x39fa <.L100>

00003940 <.L104>:
    3940:	3e 00 90    	mov.w     [w14+6], w0
    3942:	10 40 78    	mov.b     [w0], w0
    3944:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    3946:	16 00 3a    	bra       NZ, 0x3974 <.L105>

00003948 <.LSM308>:
    3948:	b1 c1 b3    	mov.b     #0x1b, w1
    394a:	2e 00 90    	mov.w     [w14+4], w0
    394c:	84 ff 07    	rcall     0x3856 <_uart_putc>

0000394e <.LSM309>:
    394e:	81 c3 b3    	mov.b     #0x38, w1
    3950:	2e 00 90    	mov.w     [w14+4], w0
    3952:	81 ff 07    	rcall     0x3856 <_uart_putc>

00003954 <.LSM310>:
    3954:	b1 c1 b3    	mov.b     #0x1b, w1
    3956:	2e 00 90    	mov.w     [w14+4], w0
    3958:	7e ff 07    	rcall     0x3856 <_uart_putc>

0000395a <.LSM311>:
    395a:	b1 c5 b3    	mov.b     #0x5b, w1
    395c:	2e 00 90    	mov.w     [w14+4], w0
    395e:	7b ff 07    	rcall     0x3856 <_uart_putc>

00003960 <.LSM312>:
    3960:	b1 c4 b3    	mov.b     #0x4b, w1
    3962:	2e 00 90    	mov.w     [w14+4], w0
    3964:	78 ff 07    	rcall     0x3856 <_uart_putc>

00003966 <.LSM313>:
    3966:	2e 00 90    	mov.w     [w14+4], w0
    3968:	92 ff 07    	rcall     0x388e <_uart_flushTxBuffer>

0000396a <.LSM314>:
    396a:	9e 00 90    	mov.w     [w14+2], w1
    396c:	31 07 98    	mov.w     w1, [w14+6]

0000396e <.LSM315>:
    396e:	ce 00 90    	mov.w     [w14+8], w1
    3970:	01 0f 78    	mov.w     w1, [w14]

00003972 <.LSM316>:
    3972:	41 00 37    	bra       0x39f6 <.L106>

00003974 <.L105>:
    3974:	3e 00 90    	mov.w     [w14+6], w0
    3976:	10 40 78    	mov.b     [w0], w0
    3978:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    397a:	05 00 32    	bra       Z, 0x3986 <.L107>

0000397c <.LSM318>:
    397c:	3e 00 90    	mov.w     [w14+6], w0
    397e:	90 40 78    	mov.b     [w0], w1

00003980 <.LSM319>:
    3980:	f0 c7 b3    	mov.b     #0x7f, w0
    3982:	80 cf 50    	sub.b     w1, w0, [w15]
    3984:	1a 00 3a    	bra       NZ, 0x39ba <.L108>

00003986 <.L107>:
    3986:	be 00 90    	mov.w     [w14+6], w1
    3988:	1e 00 90    	mov.w     [w14+2], w0
    398a:	80 8f 50    	sub.w     w1, w0, [w15]
    398c:	10 00 36    	bra       LEU, 0x39ae <.L109>

0000398e <.LSM321>:
    398e:	81 c0 b3    	mov.b     #0x8, w1
    3990:	2e 00 90    	mov.w     [w14+4], w0
    3992:	61 ff 07    	rcall     0x3856 <_uart_putc>

00003994 <.LSM322>:
    3994:	01 c2 b3    	mov.b     #0x20, w1
    3996:	2e 00 90    	mov.w     [w14+4], w0
    3998:	5e ff 07    	rcall     0x3856 <_uart_putc>

0000399a <.LSM323>:
    399a:	81 c0 b3    	mov.b     #0x8, w1
    399c:	2e 00 90    	mov.w     [w14+4], w0
    399e:	5b ff 07    	rcall     0x3856 <_uart_putc>

000039a0 <.LSM324>:
    39a0:	2e 00 90    	mov.w     [w14+4], w0
    39a2:	75 ff 07    	rcall     0x388e <_uart_flushTxBuffer>

000039a4 <.LSM325>:
    39a4:	3e 00 90    	mov.w     [w14+6], w0
    39a6:	00 00 e9    	dec.w     w0, w0
    39a8:	30 07 98    	mov.w     w0, [w14+6]

000039aa <.LSM326>:
    39aa:	1e 0f e8    	inc.w     [w14], [w14]
    39ac:	05 00 37    	bra       0x39b8 <.L110>

000039ae <.L109>:
    39ae:	71 c0 b3    	mov.b     #0x7, w1
    39b0:	2e 00 90    	mov.w     [w14+4], w0
    39b2:	51 ff 07    	rcall     0x3856 <_uart_putc>

000039b4 <.LSM328>:
    39b4:	2e 00 90    	mov.w     [w14+4], w0
    39b6:	6b ff 07    	rcall     0x388e <_uart_flushTxBuffer>

000039b8 <.L110>:
    39b8:	1e 00 37    	bra       0x39f6 <.L106>

000039ba <.L108>:
    39ba:	1e 00 78    	mov.w     [w14], w0
    39bc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    39be:	06 00 3a    	bra       NZ, 0x39cc <.L111>

000039c0 <.LSM331>:
    39c0:	71 c0 b3    	mov.b     #0x7, w1
    39c2:	2e 00 90    	mov.w     [w14+4], w0
    39c4:	48 ff 07    	rcall     0x3856 <_uart_putc>

000039c6 <.LSM332>:
    39c6:	2e 00 90    	mov.w     [w14+4], w0
    39c8:	62 ff 07    	rcall     0x388e <_uart_flushTxBuffer>

000039ca <.LSM333>:
    39ca:	15 00 37    	bra       0x39f6 <.L106>

000039cc <.L111>:
    39cc:	3e 00 90    	mov.w     [w14+6], w0
    39ce:	10 40 78    	mov.b     [w0], w0
    39d0:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    39d2:	9f ff 36    	bra       LEU, 0x3912 <.L114>
    39d4:	3e 00 90    	mov.w     [w14+6], w0
    39d6:	90 40 78    	mov.b     [w0], w1
    39d8:	e0 c7 b3    	mov.b     #0x7e, w0
    39da:	80 cf 50    	sub.b     w1, w0, [w15]
    39dc:	9c ff 3e    	bra       GTU, 0x3916 <.L115>

000039de <.LSM335>:
    39de:	3e 00 90    	mov.w     [w14+6], w0
    39e0:	10 40 78    	mov.b     [w0], w0
    39e2:	80 40 78    	mov.b     w0, w1
    39e4:	2e 00 90    	mov.w     [w14+4], w0
    39e6:	37 ff 07    	rcall     0x3856 <_uart_putc>

000039e8 <.LSM336>:
    39e8:	2e 00 90    	mov.w     [w14+4], w0
    39ea:	51 ff 07    	rcall     0x388e <_uart_flushTxBuffer>

000039ec <.LSM337>:
    39ec:	3e 00 90    	mov.w     [w14+6], w0
    39ee:	00 00 e8    	inc.w     w0, w0
    39f0:	30 07 98    	mov.w     w0, [w14+6]

000039f2 <.LSM338>:
    39f2:	1e 0f e9    	dec.w     [w14], [w14]

000039f4 <.LSM339>:
    39f4:	91 ff 37    	bra       0x3918 <.L112>

000039f6 <.L106>:
    39f6:	90 ff 37    	bra       0x3918 <.L112>

000039f8 <.L113>:
    39f8:	00 00 00    	nop       

000039fa <.L100>:
}
    39fa:	00 80 fa    	ulnk      
    39fc:	00 00 06    	return    

000039fe <_uart_gets>:


void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    39fe:	0c 00 fa    	lnk       #0xc
    3a00:	30 07 98    	mov.w     w0, [w14+6]
    3a02:	41 07 98    	mov.w     w1, [w14+8]
    3a04:	52 07 98    	mov.w     w2, [w14+10]

00003a06 <.LSM343>:
    uint8_t *start;
    uint16_t left;
    uint8_t char_count = 0;
    3a06:	00 40 eb    	clr.b     w0
    3a08:	00 4f 78    	mov.b     w0, [w14]

00003a0a <.LSM344>:

    if (len==0)
    3a0a:	5e 00 90    	mov.w     [w14+10], w0
    3a0c:	00 00 e0    	cp0.w     w0
    3a0e:	2f 00 32    	bra       Z, 0x3a6e <.L125>

00003a10 <.LSM345>:
        return;

    if (len==1) {
    3a10:	5e 00 90    	mov.w     [w14+10], w0
    3a12:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3a14:	04 00 3a    	bra       NZ, 0x3a1e <.L119>

00003a16 <.LSM346>:
        *str = '\0';
    3a16:	4e 00 90    	mov.w     [w14+8], w0
    3a18:	80 40 eb    	clr.b     w1
    3a1a:	01 48 78    	mov.b     w1, [w0]

00003a1c <.LSM347>:
        return;
    3a1c:	29 00 37    	bra       0x3a70 <.L116>

00003a1e <.L119>:
    }

    // uart_flushTxBuffer(self);
    start = str;
    3a1e:	ce 00 90    	mov.w     [w14+8], w1
    3a20:	11 07 98    	mov.w     w1, [w14+2]

00003a22 <.LSM349>:
    left = len;
    3a22:	de 00 90    	mov.w     [w14+10], w1
    3a24:	21 07 98    	mov.w     w1, [w14+4]
    3a26:	03 00 37    	bra       0x3a2e <.L124>

00003a28 <.L128>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        char_count ++;
        if (*str=='\r') {                     // If character is return,
            break;
        }
        if (char_count >= UART_MSG_MAX_LEN) { // Terminate if max length reached.
            break;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            str++;                          //   and advance the pointer.

        }
    }
    3a28:	00 00 00    	nop       
    3a2a:	01 00 37    	bra       0x3a2e <.L124>

00003a2c <.L129>:
    3a2c:	00 00 00    	nop       

00003a2e <.L124>:
    3a2e:	3e 00 90    	mov.w     [w14+6], w0
    3a30:	20 ff 07    	rcall     0x3872 <_uart_getc>
    3a32:	ce 00 90    	mov.w     [w14+8], w1
    3a34:	80 48 78    	mov.b     w0, [w1]

00003a36 <.LSM352>:
    3a36:	1e 4f e8    	inc.b     [w14], [w14]

00003a38 <.LSM353>:
    3a38:	4e 00 90    	mov.w     [w14+8], w0
    3a3a:	10 40 78    	mov.b     [w0], w0
    3a3c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3a3e:	10 00 32    	bra       Z, 0x3a60 <.L126>

00003a40 <.LSM354>:
    3a40:	1e 40 78    	mov.b     [w14], w0
    3a42:	00 04 e0    	cp0.b     w0
    3a44:	0f 00 35    	bra       LT, 0x3a64 <.L127>

00003a46 <.LSM355>:
    3a46:	4e 00 90    	mov.w     [w14+8], w0
    3a48:	10 40 78    	mov.b     [w0], w0
    3a4a:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    3a4c:	ed ff 36    	bra       LEU, 0x3a28 <.L128>
    3a4e:	4e 00 90    	mov.w     [w14+8], w0
    3a50:	90 40 78    	mov.b     [w0], w1
    3a52:	e0 c7 b3    	mov.b     #0x7e, w0
    3a54:	80 cf 50    	sub.b     w1, w0, [w15]
    3a56:	ea ff 3e    	bra       GTU, 0x3a2c <.L129>

00003a58 <.LSM356>:
    3a58:	4e 00 90    	mov.w     [w14+8], w0
    3a5a:	00 00 e8    	inc.w     w0, w0
    3a5c:	40 07 98    	mov.w     w0, [w14+8]

00003a5e <.LSM357>:
    3a5e:	e7 ff 37    	bra       0x3a2e <.L124>

00003a60 <.L126>:
    3a60:	00 00 00    	nop       
    3a62:	01 00 37    	bra       0x3a66 <.L121>

00003a64 <.L127>:
    3a64:	00 00 00    	nop       

00003a66 <.L121>:
    *str = '\0';  
    3a66:	4e 00 90    	mov.w     [w14+8], w0
    3a68:	80 40 eb    	clr.b     w1
    3a6a:	01 48 78    	mov.b     w1, [w0]
    3a6c:	01 00 37    	bra       0x3a70 <.L116>

00003a6e <.L125>:
    3a6e:	00 00 00    	nop       

00003a70 <.L116>:
}         
    3a70:	00 80 fa    	ulnk      
    3a72:	00 00 06    	return    

00003a74 <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    3a74:	04 00 fa    	lnk       #0x4

00003a76 <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    3a76:	94 24 a8    	bset.b    0x494, #0x1

00003a78 <.LSM2>:
    U1ADDR = 0;
    3a78:	96 24 ef    	clr.w     0x496

00003a7a <.LSM3>:
    U1EIR = 0xFF;
    3a7a:	f0 0f 20    	mov.w     #0xff, w0
    3a7c:	70 24 88    	mov.w     w0, 0x48e

00003a7e <.LSM4>:
    U1CONbits.PPBRST = 0;
    3a7e:	94 24 a9    	bclr.b    0x494, #0x1

00003a80 <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    3a80:	a0 4a 20    	mov.w     #0x4aa, w0
    3a82:	10 07 98    	mov.w     w0, [w14+2]

00003a84 <.LSM6>:
    for (n = 0; n<16; n++)
    3a84:	00 40 eb    	clr.b     w0
    3a86:	00 4f 78    	mov.b     w0, [w14]
    3a88:	07 00 37    	bra       0x3a98 <.L2>

00003a8a <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    3a8a:	1e 80 fb    	ze        [w14], w0
    3a8c:	00 00 40    	add.w     w0, w0, w0
    3a8e:	9e 00 90    	mov.w     [w14+2], w1
    3a90:	00 80 40    	add.w     w1, w0, w0
    3a92:	80 00 eb    	clr.w     w1
    3a94:	01 08 78    	mov.w     w1, [w0]

00003a96 <.LSM8>:
    3a96:	1e 4f e8    	inc.b     [w14], [w14]

00003a98 <.L2>:
    3a98:	1e 40 78    	mov.b     [w14], w0
    3a9a:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    3a9c:	f6 ff 36    	bra       LEU, 0x3a8a <.L3>

00003a9e <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    3a9e:	d0 00 20    	mov.w     #0xd, w0
    3aa0:	50 25 88    	mov.w     w0, 0x4aa

00003aa2 <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    3aa2:	00 e0 21    	mov.w     #0x1e00, w0
    3aa4:	01 c4 b3    	mov.b     #0x40, w1
    3aa6:	01 48 78    	mov.b     w1, [w0]

00003aa8 <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    3aa8:	80 c8 21    	mov.w     #0x1c88, w0
    3aaa:	10 f0 88    	mov.w     w0, 0x1e02

00003aac <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    3aac:	10 e0 21    	mov.w     #0x1e01, w0
    3aae:	81 c8 b3    	mov.b     #0x88, w1
    3ab0:	01 48 78    	mov.b     w1, [w0]

00003ab2 <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    3ab2:	80 cc 21    	mov.w     #0x1cc8, w0
    3ab4:	30 f0 88    	mov.w     w0, 0x1e06

00003ab6 <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    3ab6:	50 e0 21    	mov.w     #0x1e05, w0
    3ab8:	81 c0 b3    	mov.b     #0x8, w1
    3aba:	01 48 78    	mov.b     w1, [w0]

00003abc <.LSM15>:
    U1CNFG1 = 0x00;
    3abc:	a6 24 ef    	clr.w     0x4a6

00003abe <.LSM16>:
    U1CNFG2 = 0x00;
    3abe:	a8 24 ef    	clr.w     0x4a8

00003ac0 <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    3ac0:	00 e0 21    	mov.w     #0x1e00, w0
    3ac2:	48 00 de    	lsr.w     w0, #0x8, w0
    3ac4:	c0 24 88    	mov.w     w0, 0x498

00003ac6 <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    3ac6:	86 44 a8    	bset.b    0x486, #0x2

00003ac8 <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    3ac8:	86 e4 a8    	bset.b    0x486, #0x7

00003aca <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    3aca:	88 04 a8    	bset.b    0x488, #0x0

00003acc <.LSM21>:
    U1CONbits.PKTDIS = 0;
    3acc:	94 a4 a9    	bclr.b    0x494, #0x5

00003ace <.LSM22>:
    USB_curr_config = 0x00;
    3ace:	3d 68 ef    	clr.b     0x83d

00003ad0 <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    3ad0:	40 68 ef    	clr.b     0x840

00003ad2 <.LSM24>:
    USB_device_status = 0x01;
    3ad2:	10 c0 b3    	mov.b     #0x1, w0
    3ad4:	3e e8 b7    	mov.b     WREG, 0x83e

00003ad6 <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    3ad6:	80 d0 21    	mov.w     #0x1d08, w0
    3ad8:	80 c0 eb    	setm.b    w1
    3ada:	01 48 78    	mov.b     w1, [w0]

00003adc <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    3adc:	90 d0 21    	mov.w     #0x1d09, w0
    3ade:	80 c0 eb    	setm.b    w1
    3ae0:	01 48 78    	mov.b     w1, [w0]

00003ae2 <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    3ae2:	00 00 00    	nop       

00003ae4 <.L4>:
    3ae4:	a1 24 80    	mov.w     0x494, w1
    3ae6:	00 04 20    	mov.w     #0x40, w0
    3ae8:	00 80 60    	and.w     w1, w0, w0
    3aea:	00 00 e0    	cp0.w     w0
    3aec:	fb ff 3a    	bra       NZ, 0x3ae4 <.L4>

00003aee <.LSM28>:
}
    3aee:	00 80 fa    	ulnk      
    3af0:	00 00 06    	return    

00003af2 <_ServiceUSB>:

void ServiceUSB(void) {
    3af2:	06 00 fa    	lnk       #0x6

00003af4 <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    3af4:	50 24 80    	mov.w     0x48a, w0
    3af6:	62 00 60    	and.w     w0, #0x2, w0
    3af8:	00 00 e0    	cp0.w     w0
    3afa:	05 00 32    	bra       Z, 0x3b06 <.L6>

00003afc <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    3afc:	f0 0f 20    	mov.w     #0xff, w0
    3afe:	70 24 88    	mov.w     w0, 0x48e

00003b00 <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    3b00:	20 00 20    	mov.w     #0x2, w0
    3b02:	50 24 88    	mov.w     w0, 0x48a
    3b04:	90 00 37    	bra       0x3c26 <.L5>

00003b06 <.L6>:
    } else if (U1IRbits.SOFIF) {
    3b06:	50 24 80    	mov.w     0x48a, w0
    3b08:	64 00 60    	and.w     w0, #0x4, w0
    3b0a:	00 00 e0    	cp0.w     w0
    3b0c:	03 00 32    	bra       Z, 0x3b14 <.L8>

00003b0e <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    3b0e:	40 00 20    	mov.w     #0x4, w0
    3b10:	50 24 88    	mov.w     w0, 0x48a
    3b12:	89 00 37    	bra       0x3c26 <.L5>

00003b14 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    3b14:	50 24 80    	mov.w     0x48a, w0
    3b16:	70 00 60    	and.w     w0, #0x10, w0
    3b18:	00 00 e0    	cp0.w     w0
    3b1a:	03 00 32    	bra       Z, 0x3b22 <.L9>

00003b1c <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    3b1c:	00 01 20    	mov.w     #0x10, w0
    3b1e:	50 24 88    	mov.w     w0, 0x48a
    3b20:	82 00 37    	bra       0x3c26 <.L5>

00003b22 <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    3b22:	51 24 80    	mov.w     0x48a, w1
    3b24:	00 02 20    	mov.w     #0x20, w0
    3b26:	00 80 60    	and.w     w1, w0, w0
    3b28:	00 00 e0    	cp0.w     w0
    3b2a:	03 00 32    	bra       Z, 0x3b32 <.L10>

00003b2c <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    3b2c:	00 02 20    	mov.w     #0x20, w0
    3b2e:	50 24 88    	mov.w     w0, 0x48a
    3b30:	7a 00 37    	bra       0x3c26 <.L5>

00003b32 <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    3b32:	51 24 80    	mov.w     0x48a, w1
    3b34:	00 08 20    	mov.w     #0x80, w0
    3b36:	00 80 60    	and.w     w1, w0, w0
    3b38:	00 00 e0    	cp0.w     w0
    3b3a:	03 00 32    	bra       Z, 0x3b42 <.L11>

00003b3c <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    3b3c:	00 08 20    	mov.w     #0x80, w0
    3b3e:	50 24 88    	mov.w     w0, 0x48a
    3b40:	72 00 37    	bra       0x3c26 <.L5>

00003b42 <.L11>:
    } else if (U1IRbits.URSTIF) {
    3b42:	50 24 80    	mov.w     0x48a, w0
    3b44:	61 00 60    	and.w     w0, #0x1, w0
    3b46:	00 00 e0    	cp0.w     w0
    3b48:	34 00 32    	bra       Z, 0x3bb2 <.L12>

00003b4a <.LSM42>:
        USB_curr_config = 0x00;
    3b4a:	3d 68 ef    	clr.b     0x83d

00003b4c <.LSM43>:
        while (U1IRbits.TRNIF) {
    3b4c:	08 00 37    	bra       0x3b5e <.L13>

00003b4e <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    3b4e:	80 00 20    	mov.w     #0x8, w0
    3b50:	50 24 88    	mov.w     w0, 0x48a

00003b52 <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    3b52:	00 00 00    	nop       

00003b54 <.LSM46>:
            __builtin_nop();
    3b54:	00 00 00    	nop       

00003b56 <.LSM47>:
            __builtin_nop();
    3b56:	00 00 00    	nop       

00003b58 <.LSM48>:
            __builtin_nop();
    3b58:	00 00 00    	nop       

00003b5a <.LSM49>:
            __builtin_nop();
    3b5a:	00 00 00    	nop       

00003b5c <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    3b5c:	00 00 00    	nop       

00003b5e <.L13>:
    3b5e:	50 24 80    	mov.w     0x48a, w0
    3b60:	68 00 60    	and.w     w0, #0x8, w0
    3b62:	00 00 e0    	cp0.w     w0
    3b64:	f4 ff 3a    	bra       NZ, 0x3b4e <.L14>

00003b66 <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    3b66:	a0 4a 20    	mov.w     #0x4aa, w0
    3b68:	10 07 98    	mov.w     w0, [w14+2]

00003b6a <.LSM53>:
        for (n = 0; n<16; n++)
    3b6a:	00 40 eb    	clr.b     w0
    3b6c:	00 4f 78    	mov.b     w0, [w14]
    3b6e:	07 00 37    	bra       0x3b7e <.L15>

00003b70 <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    3b70:	1e 80 fb    	ze        [w14], w0
    3b72:	00 00 40    	add.w     w0, w0, w0
    3b74:	9e 00 90    	mov.w     [w14+2], w1
    3b76:	00 80 40    	add.w     w1, w0, w0
    3b78:	80 00 eb    	clr.w     w1
    3b7a:	01 08 78    	mov.w     w1, [w0]

00003b7c <.LSM55>:
    3b7c:	1e 4f e8    	inc.b     [w14], [w14]

00003b7e <.L15>:
    3b7e:	1e 40 78    	mov.b     [w14], w0
    3b80:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    3b82:	f6 ff 36    	bra       LEU, 0x3b70 <.L16>

00003b84 <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    3b84:	00 e0 21    	mov.w     #0x1e00, w0
    3b86:	01 c4 b3    	mov.b     #0x40, w1
    3b88:	01 48 78    	mov.b     w1, [w0]

00003b8a <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    3b8a:	80 c8 21    	mov.w     #0x1c88, w0
    3b8c:	10 f0 88    	mov.w     w0, 0x1e02

00003b8e <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    3b8e:	10 e0 21    	mov.w     #0x1e01, w0
    3b90:	81 c8 b3    	mov.b     #0x88, w1
    3b92:	01 48 78    	mov.b     w1, [w0]

00003b94 <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    3b94:	80 cc 21    	mov.w     #0x1cc8, w0
    3b96:	30 f0 88    	mov.w     w0, 0x1e06

00003b98 <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    3b98:	50 e0 21    	mov.w     #0x1e05, w0
    3b9a:	81 c0 b3    	mov.b     #0x8, w1
    3b9c:	01 48 78    	mov.b     w1, [w0]

00003b9e <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    3b9e:	96 24 ef    	clr.w     0x496

00003ba0 <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    3ba0:	f0 0f 20    	mov.w     #0xff, w0
    3ba2:	50 24 88    	mov.w     w0, 0x48a

00003ba4 <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    3ba4:	d0 00 20    	mov.w     #0xd, w0
    3ba6:	50 25 88    	mov.w     w0, 0x4aa

00003ba8 <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    3ba8:	10 c0 b3    	mov.b     #0x1, w0
    3baa:	40 e8 b7    	mov.b     WREG, 0x840

00003bac <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    3bac:	10 c0 b3    	mov.b     #0x1, w0
    3bae:	3e e8 b7    	mov.b     WREG, 0x83e
    3bb0:	3a 00 37    	bra       0x3c26 <.L5>

00003bb2 <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    3bb2:	50 24 80    	mov.w     0x48a, w0
    3bb4:	68 00 60    	and.w     w0, #0x8, w0
    3bb6:	00 00 e0    	cp0.w     w0
    3bb8:	36 00 32    	bra       Z, 0x3c26 <.L5>

00003bba <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    3bba:	90 24 80    	mov.w     0x492, w0
    3bbc:	43 00 de    	lsr.w     w0, #0x3, w0
    3bbe:	c2 00 dd    	sl.w      w0, #0x2, w1
    3bc0:	00 e0 21    	mov.w     #0x1e00, w0
    3bc2:	00 80 40    	add.w     w1, w0, w0
    3bc4:	20 07 98    	mov.w     w0, [w14+4]

00003bc6 <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    3bc6:	2e 00 90    	mov.w     [w14+4], w0
    3bc8:	10 40 90    	mov.b     [w0+1], w0
    3bca:	31 e8 b7    	mov.b     WREG, 0x831

00003bcc <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    3bcc:	2e 00 90    	mov.w     [w14+4], w0
    3bce:	10 40 78    	mov.b     [w0], w0
    3bd0:	30 e8 b7    	mov.b     WREG, 0x830

00003bd2 <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    3bd2:	2e 00 90    	mov.w     [w14+4], w0
    3bd4:	10 00 90    	mov.w     [w0+2], w0
    3bd6:	90 41 88    	mov.w     w0, 0x832

00003bd8 <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    3bd8:	90 24 80    	mov.w     0x492, w0
    3bda:	00 40 78    	mov.b     w0, w0
    3bdc:	3f e8 b7    	mov.b     WREG, 0x83f

00003bde <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    3bde:	80 00 20    	mov.w     #0x8, w0
    3be0:	50 24 88    	mov.w     w0, 0x48a

00003be2 <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    3be2:	3c 68 ef    	clr.b     0x83c

00003be4 <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    3be4:	31 c8 bf    	mov.b     0x831, WREG
    3be6:	80 80 fb    	ze        w0, w1
    3be8:	c0 03 20    	mov.w     #0x3c, w0
    3bea:	00 80 60    	and.w     w1, w0, w0
    3bec:	41 02 20    	mov.w     #0x24, w1
    3bee:	81 0f 50    	sub.w     w0, w1, [w15]
    3bf0:	08 00 32    	bra       Z, 0x3c02 <.L19>
    3bf2:	41 03 20    	mov.w     #0x34, w1
    3bf4:	81 0f 50    	sub.w     w0, w1, [w15]
    3bf6:	03 00 32    	bra       Z, 0x3bfe <.L20>
    3bf8:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    3bfa:	05 00 32    	bra       Z, 0x3c06 <.L18>
    3bfc:	05 00 37    	bra       0x3c08 <.L17>

00003bfe <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    3bfe:	15 00 07    	rcall     0x3c2a <_ProcessSetupToken>

00003c00 <.LSM76>:
                break;
    3c00:	03 00 37    	bra       0x3c08 <.L17>

00003c02 <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    3c02:	dc 02 07    	rcall     0x41bc <_ProcessInToken>

00003c04 <.LSM78>:
                break;
    3c04:	01 00 37    	bra       0x3c08 <.L17>

00003c06 <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    3c06:	0e 03 07    	rcall     0x4224 <_ProcessOutToken>

00003c08 <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    3c08:	3c c8 bf    	mov.b     0x83c, WREG
    3c0a:	00 80 fb    	ze        w0, w0
    3c0c:	61 00 60    	and.w     w0, #0x1, w0
    3c0e:	00 40 78    	mov.b     w0, w0
    3c10:	00 04 e0    	cp0.b     w0
    3c12:	09 00 32    	bra       Z, 0x3c26 <.L5>

00003c14 <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    3c14:	00 e0 21    	mov.w     #0x1e00, w0
    3c16:	01 c4 b3    	mov.b     #0x40, w1
    3c18:	01 48 78    	mov.b     w1, [w0]

00003c1a <.LSM82>:
            BD[EP0IN].status = 0x84;
    3c1a:	50 e0 21    	mov.w     #0x1e05, w0
    3c1c:	41 c8 b3    	mov.b     #0x84, w1
    3c1e:	01 48 78    	mov.b     w1, [w0]

00003c20 <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    3c20:	10 e0 21    	mov.w     #0x1e01, w0
    3c22:	41 c8 b3    	mov.b     #0x84, w1
    3c24:	01 48 78    	mov.b     w1, [w0]

00003c26 <.L5>:
        }
    }
}
    3c26:	00 80 fa    	ulnk      
    3c28:	00 00 06    	return    

00003c2a <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    3c2a:	02 00 fa    	lnk       #0x2

00003c2c <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    3c2c:	91 41 80    	mov.w     0x832, w1
    3c2e:	01 0f 78    	mov.w     w1, [w14]

00003c30 <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    3c30:	1e 00 78    	mov.w     [w14], w0
    3c32:	90 40 78    	mov.b     [w0], w1
    3c34:	40 83 20    	mov.w     #0x834, w0
    3c36:	01 48 78    	mov.b     w1, [w0]
    3c38:	1e 0f e8    	inc.w     [w14], [w14]

00003c3a <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    3c3a:	1e 00 78    	mov.w     [w14], w0
    3c3c:	90 40 78    	mov.b     [w0], w1
    3c3e:	40 83 20    	mov.w     #0x834, w0
    3c40:	11 40 98    	mov.b     w1, [w0+1]
    3c42:	1e 0f e8    	inc.w     [w14], [w14]

00003c44 <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    3c44:	1e 00 78    	mov.w     [w14], w0
    3c46:	90 40 78    	mov.b     [w0], w1
    3c48:	40 83 20    	mov.w     #0x834, w0
    3c4a:	21 40 98    	mov.b     w1, [w0+2]
    3c4c:	1e 0f e8    	inc.w     [w14], [w14]

00003c4e <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    3c4e:	1e 00 78    	mov.w     [w14], w0
    3c50:	90 40 78    	mov.b     [w0], w1
    3c52:	40 83 20    	mov.w     #0x834, w0
    3c54:	31 40 98    	mov.b     w1, [w0+3]
    3c56:	1e 0f e8    	inc.w     [w14], [w14]

00003c58 <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    3c58:	1e 00 78    	mov.w     [w14], w0
    3c5a:	90 40 78    	mov.b     [w0], w1
    3c5c:	40 83 20    	mov.w     #0x834, w0
    3c5e:	41 40 98    	mov.b     w1, [w0+4]
    3c60:	1e 0f e8    	inc.w     [w14], [w14]

00003c62 <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    3c62:	1e 00 78    	mov.w     [w14], w0
    3c64:	90 40 78    	mov.b     [w0], w1
    3c66:	40 83 20    	mov.w     #0x834, w0
    3c68:	51 40 98    	mov.b     w1, [w0+5]
    3c6a:	1e 0f e8    	inc.w     [w14], [w14]

00003c6c <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    3c6c:	1e 00 78    	mov.w     [w14], w0
    3c6e:	90 40 78    	mov.b     [w0], w1
    3c70:	40 83 20    	mov.w     #0x834, w0
    3c72:	61 40 98    	mov.b     w1, [w0+6]
    3c74:	1e 0f e8    	inc.w     [w14], [w14]

00003c76 <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    3c76:	1e 00 78    	mov.w     [w14], w0
    3c78:	90 40 78    	mov.b     [w0], w1
    3c7a:	40 83 20    	mov.w     #0x834, w0
    3c7c:	71 40 98    	mov.b     w1, [w0+7]
    3c7e:	1e 0f e8    	inc.w     [w14], [w14]

00003c80 <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    3c80:	00 e0 21    	mov.w     #0x1e00, w0
    3c82:	01 c4 b3    	mov.b     #0x40, w1
    3c84:	01 48 78    	mov.b     w1, [w0]

00003c86 <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    3c86:	50 e0 21    	mov.w     #0x1e05, w0
    3c88:	81 c0 b3    	mov.b     #0x8, w1
    3c8a:	01 48 78    	mov.b     w1, [w0]

00003c8c <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    3c8c:	40 83 20    	mov.w     #0x834, w0
    3c8e:	10 40 78    	mov.b     [w0], w0
    3c90:	00 04 e0    	cp0.b     w0
    3c92:	06 00 35    	bra       LT, 0x3ca0 <.L22>
    3c94:	40 83 20    	mov.w     #0x834, w0
    3c96:	30 00 90    	mov.w     [w0+6], w0
    3c98:	00 00 e0    	cp0.w     w0
    3c9a:	02 00 32    	bra       Z, 0x3ca0 <.L22>
    3c9c:	80 cc b3    	mov.b     #0xc8, w0
    3c9e:	01 00 37    	bra       0x3ca2 <.L23>

00003ca0 <.L22>:
    3ca0:	80 c8 b3    	mov.b     #0x88, w0

00003ca2 <.L23>:
    3ca2:	11 e0 21    	mov.w     #0x1e01, w1
    3ca4:	80 48 78    	mov.b     w0, [w1]

00003ca6 <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    3ca6:	94 a4 a9    	bclr.b    0x494, #0x5

00003ca8 <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    3ca8:	80 d0 21    	mov.w     #0x1d08, w0
    3caa:	80 c0 eb    	setm.b    w1
    3cac:	01 48 78    	mov.b     w1, [w0]

00003cae <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    3cae:	90 d0 21    	mov.w     #0x1d09, w0
    3cb0:	80 c0 eb    	setm.b    w1
    3cb2:	01 48 78    	mov.b     w1, [w0]

00003cb4 <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    3cb4:	40 83 20    	mov.w     #0x834, w0
    3cb6:	10 40 78    	mov.b     [w0], w0
    3cb8:	80 80 fb    	ze        w0, w1
    3cba:	00 06 20    	mov.w     #0x60, w0
    3cbc:	00 80 60    	and.w     w1, w0, w0
    3cbe:	00 00 e0    	cp0.w     w0
    3cc0:	04 00 32    	bra       Z, 0x3cca <.L25>
    3cc2:	01 04 20    	mov.w     #0x40, w1
    3cc4:	81 0f 50    	sub.w     w0, w1, [w15]
    3cc6:	03 00 32    	bra       Z, 0x3cce <.L26>
    3cc8:	04 00 37    	bra       0x3cd2 <.L28>

00003cca <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    3cca:	08 00 07    	rcall     0x3cdc <_StandardRequests>

00003ccc <.LSM103>:
            break;
    3ccc:	05 00 37    	bra       0x3cd8 <.L21>

00003cce <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    3cce:	03 08 07    	rcall     0x4cd6 <_VendorRequests>

00003cd0 <.LSM105>:
            break;
    3cd0:	03 00 37    	bra       0x3cd8 <.L21>

00003cd2 <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    3cd2:	3c c8 bf    	mov.b     0x83c, WREG
    3cd4:	00 04 a0    	bset.b    w0, #0x0
    3cd6:	3c e8 b7    	mov.b     WREG, 0x83c

00003cd8 <.L21>:
    }
}
    3cd8:	00 80 fa    	ulnk      
    3cda:	00 00 06    	return    

00003cdc <_StandardRequests>:

void StandardRequests(void) {
    3cdc:	06 00 fa    	lnk       #0x6

00003cde <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    3cde:	40 83 20    	mov.w     #0x834, w0
    3ce0:	10 40 90    	mov.b     [w0+1], w0
    3ce2:	00 80 fb    	ze        w0, w0
    3ce4:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    3ce6:	79 01 32    	bra       Z, 0x3fda <.L34>
    3ce8:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    3cea:	0c 00 3c    	bra       GT, 0x3d04 <.L39>
    3cec:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3cee:	bf 00 32    	bra       Z, 0x3e6e <.L32>
    3cf0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3cf2:	03 00 3c    	bra       GT, 0x3cfa <.L40>
    3cf4:	00 00 e0    	cp0.w     w0
    3cf6:	12 00 32    	bra       Z, 0x3d1c <.L31>
    3cf8:	5c 02 37    	bra       0x41b2 <.L30>

00003cfa <.L40>:
    3cfa:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3cfc:	b8 00 32    	bra       Z, 0x3e6e <.L32>
    3cfe:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3d00:	4c 01 32    	bra       Z, 0x3f9a <.L33>
    3d02:	57 02 37    	bra       0x41b2 <.L30>

00003d04 <.L39>:
    3d04:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    3d06:	ef 01 32    	bra       Z, 0x40e6 <.L36>
    3d08:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    3d0a:	03 00 3c    	bra       GT, 0x3d12 <.L41>
    3d0c:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    3d0e:	e0 01 32    	bra       Z, 0x40d0 <.L35>
    3d10:	50 02 37    	bra       0x41b2 <.L30>

00003d12 <.L41>:
    3d12:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    3d14:	12 02 32    	bra       Z, 0x413a <.L37>
    3d16:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    3d18:	2b 02 32    	bra       Z, 0x4170 <.L38>
    3d1a:	4b 02 37    	bra       0x41b2 <.L30>

00003d1c <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    3d1c:	40 83 20    	mov.w     #0x834, w0
    3d1e:	10 40 78    	mov.b     [w0], w0
    3d20:	00 80 fb    	ze        w0, w0
    3d22:	7f 00 60    	and.w     w0, #0x1f, w0
    3d24:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3d26:	13 00 32    	bra       Z, 0x3d4e <.L44>
    3d28:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3d2a:	32 00 32    	bra       Z, 0x3d90 <.L45>
    3d2c:	00 00 e0    	cp0.w     w0
    3d2e:	9a 00 3a    	bra       NZ, 0x3e64 <.L128>

00003d30 <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    3d30:	30 f0 80    	mov.w     0x1e06, w0
    3d32:	e1 83 20    	mov.w     #0x83e, w1
    3d34:	91 40 78    	mov.b     [w1], w1
    3d36:	01 48 78    	mov.b     w1, [w0]

00003d38 <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    3d38:	30 f0 80    	mov.w     0x1e06, w0
    3d3a:	00 00 e8    	inc.w     w0, w0
    3d3c:	80 40 eb    	clr.b     w1
    3d3e:	01 48 78    	mov.b     w1, [w0]

00003d40 <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    3d40:	40 e0 21    	mov.w     #0x1e04, w0
    3d42:	21 c0 b3    	mov.b     #0x2, w1
    3d44:	01 48 78    	mov.b     w1, [w0]

00003d46 <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    3d46:	50 e0 21    	mov.w     #0x1e05, w0
    3d48:	81 cc b3    	mov.b     #0xc8, w1
    3d4a:	01 48 78    	mov.b     w1, [w0]

00003d4c <.LSM115>:
                    break;
    3d4c:	8f 00 37    	bra       0x3e6c <.L46>

00003d4e <.L44>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    3d4e:	40 c8 bf    	mov.b     0x840, WREG
    3d50:	00 80 fb    	ze        w0, w0
    3d52:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3d54:	03 00 32    	bra       Z, 0x3d5c <.L48>
    3d56:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3d58:	05 00 32    	bra       Z, 0x3d64 <.L49>
    3d5a:	19 00 37    	bra       0x3d8e <.L47>

00003d5c <.L48>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3d5c:	3c c8 bf    	mov.b     0x83c, WREG
    3d5e:	00 04 a0    	bset.b    w0, #0x0
    3d60:	3c e8 b7    	mov.b     WREG, 0x83c

00003d62 <.LSM118>:
                            break;
    3d62:	15 00 37    	bra       0x3d8e <.L47>

00003d64 <.L49>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3d64:	40 83 20    	mov.w     #0x834, w0
    3d66:	40 40 90    	mov.b     [w0+4], w0
    3d68:	00 04 e0    	cp0.b     w0
    3d6a:	0e 00 3a    	bra       NZ, 0x3d88 <.L50>

00003d6c <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    3d6c:	30 f0 80    	mov.w     0x1e06, w0
    3d6e:	80 40 eb    	clr.b     w1
    3d70:	01 48 78    	mov.b     w1, [w0]

00003d72 <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    3d72:	30 f0 80    	mov.w     0x1e06, w0
    3d74:	00 00 e8    	inc.w     w0, w0
    3d76:	80 40 eb    	clr.b     w1
    3d78:	01 48 78    	mov.b     w1, [w0]

00003d7a <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    3d7a:	40 e0 21    	mov.w     #0x1e04, w0
    3d7c:	21 c0 b3    	mov.b     #0x2, w1
    3d7e:	01 48 78    	mov.b     w1, [w0]

00003d80 <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3d80:	50 e0 21    	mov.w     #0x1e05, w0
    3d82:	81 cc b3    	mov.b     #0xc8, w1
    3d84:	01 48 78    	mov.b     w1, [w0]
    3d86:	03 00 37    	bra       0x3d8e <.L47>

00003d88 <.L50>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3d88:	3c c8 bf    	mov.b     0x83c, WREG
    3d8a:	00 04 a0    	bset.b    w0, #0x0
    3d8c:	3c e8 b7    	mov.b     WREG, 0x83c

00003d8e <.L47>:
                            }
                    }
                    break;
    3d8e:	6e 00 37    	bra       0x3e6c <.L46>

00003d90 <.L45>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    3d90:	40 c8 bf    	mov.b     0x840, WREG
    3d92:	00 80 fb    	ze        w0, w0
    3d94:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3d96:	03 00 32    	bra       Z, 0x3d9e <.L52>
    3d98:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3d9a:	29 00 32    	bra       Z, 0x3dee <.L53>
    3d9c:	5f 00 37    	bra       0x3e5c <.L129>

00003d9e <.L52>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    3d9e:	40 83 20    	mov.w     #0x834, w0
    3da0:	40 40 90    	mov.b     [w0+4], w0
    3da2:	00 80 fb    	ze        w0, w0
    3da4:	6f 00 60    	and.w     w0, #0xf, w0
    3da6:	00 00 e0    	cp0.w     w0
    3da8:	1e 00 3a    	bra       NZ, 0x3de6 <.L54>

00003daa <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    3daa:	31 f0 80    	mov.w     0x1e06, w1
    3dac:	40 83 20    	mov.w     #0x834, w0
    3dae:	40 40 90    	mov.b     [w0+4], w0
    3db0:	00 04 e0    	cp0.b     w0
    3db2:	07 00 3d    	bra       GE, 0x3dc2 <.L55>
    3db4:	50 e0 21    	mov.w     #0x1e05, w0
    3db6:	10 40 78    	mov.b     [w0], w0
    3db8:	00 80 fb    	ze        w0, w0
    3dba:	64 00 60    	and.w     w0, #0x4, w0
    3dbc:	42 80 de    	asr.w     w0, #0x2, w0
    3dbe:	00 40 78    	mov.b     w0, w0
    3dc0:	06 00 37    	bra       0x3dce <.L56>

00003dc2 <.L55>:
    3dc2:	10 e0 21    	mov.w     #0x1e01, w0
    3dc4:	10 40 78    	mov.b     [w0], w0
    3dc6:	00 80 fb    	ze        w0, w0
    3dc8:	64 00 60    	and.w     w0, #0x4, w0
    3dca:	42 80 de    	asr.w     w0, #0x2, w0
    3dcc:	00 40 78    	mov.b     w0, w0

00003dce <.L56>:
    3dce:	80 48 78    	mov.b     w0, [w1]

00003dd0 <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    3dd0:	30 f0 80    	mov.w     0x1e06, w0
    3dd2:	00 00 e8    	inc.w     w0, w0
    3dd4:	80 40 eb    	clr.b     w1
    3dd6:	01 48 78    	mov.b     w1, [w0]

00003dd8 <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    3dd8:	40 e0 21    	mov.w     #0x1e04, w0
    3dda:	21 c0 b3    	mov.b     #0x2, w1
    3ddc:	01 48 78    	mov.b     w1, [w0]

00003dde <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3dde:	50 e0 21    	mov.w     #0x1e05, w0
    3de0:	81 cc b3    	mov.b     #0xc8, w1
    3de2:	01 48 78    	mov.b     w1, [w0]
    3de4:	03 00 37    	bra       0x3dec <.L57>

00003de6 <.L54>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3de6:	3c c8 bf    	mov.b     0x83c, WREG
    3de8:	00 04 a0    	bset.b    w0, #0x0
    3dea:	3c e8 b7    	mov.b     WREG, 0x83c

00003dec <.L57>:
                            }
                            break;
    3dec:	3a 00 37    	bra       0x3e62 <.L58>

00003dee <.L53>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    3dee:	a0 4a 20    	mov.w     #0x4aa, w0
    3df0:	10 07 98    	mov.w     w0, [w14+2]

00003df2 <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    3df2:	40 83 20    	mov.w     #0x834, w0
    3df4:	40 40 90    	mov.b     [w0+4], w0
    3df6:	6f 4f 60    	and.b     w0, #0xf, [w14]

00003df8 <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    3df8:	1e 80 fb    	ze        [w14], w0
    3dfa:	00 00 40    	add.w     w0, w0, w0
    3dfc:	80 00 78    	mov.w     w0, w1
    3dfe:	40 83 20    	mov.w     #0x834, w0
    3e00:	40 40 90    	mov.b     [w0+4], w0
    3e02:	00 00 fb    	se        w0, w0
    3e04:	4f 00 de    	lsr.w     w0, #0xf, w0
    3e06:	01 00 70    	ior.w     w0, w1, w0
    3e08:	c2 00 dd    	sl.w      w0, #0x2, w1
    3e0a:	00 e0 21    	mov.w     #0x1e00, w0
    3e0c:	00 80 40    	add.w     w1, w0, w0
    3e0e:	20 07 98    	mov.w     w0, [w14+4]

00003e10 <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    3e10:	1e 80 fb    	ze        [w14], w0
    3e12:	00 00 40    	add.w     w0, w0, w0
    3e14:	9e 00 90    	mov.w     [w14+2], w1
    3e16:	00 80 40    	add.w     w1, w0, w0
    3e18:	90 00 78    	mov.w     [w0], w1
    3e1a:	40 83 20    	mov.w     #0x834, w0
    3e1c:	40 40 90    	mov.b     [w0+4], w0
    3e1e:	00 04 e0    	cp0.b     w0
    3e20:	02 00 3d    	bra       GE, 0x3e26 <.L59>
    3e22:	40 00 20    	mov.w     #0x4, w0
    3e24:	01 00 37    	bra       0x3e28 <.L60>

00003e26 <.L59>:
    3e26:	80 00 20    	mov.w     #0x8, w0

00003e28 <.L60>:
    3e28:	00 80 60    	and.w     w1, w0, w0
    3e2a:	00 00 e0    	cp0.w     w0
    3e2c:	13 00 32    	bra       Z, 0x3e54 <.L61>

00003e2e <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    3e2e:	30 f0 80    	mov.w     0x1e06, w0
    3e30:	ae 00 90    	mov.w     [w14+4], w1
    3e32:	91 40 90    	mov.b     [w1+1], w1
    3e34:	81 80 fb    	ze        w1, w1
    3e36:	e4 80 60    	and.w     w1, #0x4, w1
    3e38:	c2 88 de    	asr.w     w1, #0x2, w1
    3e3a:	81 40 78    	mov.b     w1, w1
    3e3c:	01 48 78    	mov.b     w1, [w0]

00003e3e <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    3e3e:	30 f0 80    	mov.w     0x1e06, w0
    3e40:	00 00 e8    	inc.w     w0, w0
    3e42:	80 40 eb    	clr.b     w1
    3e44:	01 48 78    	mov.b     w1, [w0]

00003e46 <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    3e46:	40 e0 21    	mov.w     #0x1e04, w0
    3e48:	21 c0 b3    	mov.b     #0x2, w1
    3e4a:	01 48 78    	mov.b     w1, [w0]

00003e4c <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3e4c:	50 e0 21    	mov.w     #0x1e05, w0
    3e4e:	81 cc b3    	mov.b     #0xc8, w1
    3e50:	01 48 78    	mov.b     w1, [w0]
    3e52:	03 00 37    	bra       0x3e5a <.L62>

00003e54 <.L61>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3e54:	3c c8 bf    	mov.b     0x83c, WREG
    3e56:	00 04 a0    	bset.b    w0, #0x0
    3e58:	3c e8 b7    	mov.b     WREG, 0x83c

00003e5a <.L62>:
                            }
                            break;
    3e5a:	03 00 37    	bra       0x3e62 <.L58>

00003e5c <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3e5c:	3c c8 bf    	mov.b     0x83c, WREG
    3e5e:	00 04 a0    	bset.b    w0, #0x0
    3e60:	3c e8 b7    	mov.b     WREG, 0x83c

00003e62 <.L58>:
                    }
                    break;
    3e62:	04 00 37    	bra       0x3e6c <.L46>

00003e64 <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    3e64:	3c c8 bf    	mov.b     0x83c, WREG
    3e66:	00 04 a0    	bset.b    w0, #0x0
    3e68:	3c e8 b7    	mov.b     WREG, 0x83c

00003e6a <.LSM147>:
            }
            break;
    3e6a:	a6 01 37    	bra       0x41b8 <.L29>

00003e6c <.L46>:
    3e6c:	a5 01 37    	bra       0x41b8 <.L29>

00003e6e <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    3e6e:	40 83 20    	mov.w     #0x834, w0
    3e70:	10 40 78    	mov.b     [w0], w0
    3e72:	00 80 fb    	ze        w0, w0
    3e74:	7f 00 60    	and.w     w0, #0x1f, w0
    3e76:	00 00 e0    	cp0.w     w0
    3e78:	03 00 32    	bra       Z, 0x3e80 <.L65>
    3e7a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3e7c:	1e 00 32    	bra       Z, 0x3eba <.L66>
    3e7e:	88 00 37    	bra       0x3f90 <.L130>

00003e80 <.L65>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    3e80:	40 83 20    	mov.w     #0x834, w0
    3e82:	20 40 90    	mov.b     [w0+2], w0
    3e84:	00 80 fb    	ze        w0, w0
    3e86:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3e88:	14 00 3a    	bra       NZ, 0x3eb2 <.L131>

00003e8a <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    3e8a:	40 83 20    	mov.w     #0x834, w0
    3e8c:	10 40 90    	mov.b     [w0+1], w0
    3e8e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3e90:	06 00 3a    	bra       NZ, 0x3e9e <.L69>

00003e92 <.LSM151>:
                                USB_device_status &= 0xFE;
    3e92:	e1 83 20    	mov.w     #0x83e, w1
    3e94:	91 40 78    	mov.b     [w1], w1
    3e96:	e0 cf b3    	mov.b     #0xfe, w0
    3e98:	00 c0 60    	and.b     w1, w0, w0
    3e9a:	3e e8 b7    	mov.b     WREG, 0x83e
    3e9c:	03 00 37    	bra       0x3ea4 <.L70>

00003e9e <.L69>:
                            else
                                USB_device_status |= 0x01;
    3e9e:	3e c8 bf    	mov.b     0x83e, WREG
    3ea0:	00 04 a0    	bset.b    w0, #0x0
    3ea2:	3e e8 b7    	mov.b     WREG, 0x83e

00003ea4 <.L70>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    3ea4:	40 e0 21    	mov.w     #0x1e04, w0
    3ea6:	80 40 eb    	clr.b     w1
    3ea8:	01 48 78    	mov.b     w1, [w0]

00003eaa <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3eaa:	50 e0 21    	mov.w     #0x1e05, w0
    3eac:	81 cc b3    	mov.b     #0xc8, w1
    3eae:	01 48 78    	mov.b     w1, [w0]

00003eb0 <.LSM155>:
                            break;
    3eb0:	03 00 37    	bra       0x3eb8 <.L71>

00003eb2 <.L131>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3eb2:	3c c8 bf    	mov.b     0x83c, WREG
    3eb4:	00 04 a0    	bset.b    w0, #0x0
    3eb6:	3c e8 b7    	mov.b     WREG, 0x83c

00003eb8 <.L71>:
                    }
                    break;
    3eb8:	6f 00 37    	bra       0x3f98 <.L72>

00003eba <.L66>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    3eba:	40 c8 bf    	mov.b     0x840, WREG
    3ebc:	00 80 fb    	ze        w0, w0
    3ebe:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3ec0:	03 00 32    	bra       Z, 0x3ec8 <.L74>
    3ec2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3ec4:	12 00 32    	bra       Z, 0x3eea <.L75>
    3ec6:	60 00 37    	bra       0x3f88 <.L132>

00003ec8 <.L74>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    3ec8:	40 83 20    	mov.w     #0x834, w0
    3eca:	40 40 90    	mov.b     [w0+4], w0
    3ecc:	00 80 fb    	ze        w0, w0
    3ece:	6f 00 60    	and.w     w0, #0xf, w0
    3ed0:	00 00 e0    	cp0.w     w0
    3ed2:	07 00 3a    	bra       NZ, 0x3ee2 <.L76>

00003ed4 <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    3ed4:	40 e0 21    	mov.w     #0x1e04, w0
    3ed6:	80 40 eb    	clr.b     w1
    3ed8:	01 48 78    	mov.b     w1, [w0]

00003eda <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3eda:	50 e0 21    	mov.w     #0x1e05, w0
    3edc:	81 cc b3    	mov.b     #0xc8, w1
    3ede:	01 48 78    	mov.b     w1, [w0]
    3ee0:	03 00 37    	bra       0x3ee8 <.L77>

00003ee2 <.L76>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3ee2:	3c c8 bf    	mov.b     0x83c, WREG
    3ee4:	00 04 a0    	bset.b    w0, #0x0
    3ee6:	3c e8 b7    	mov.b     WREG, 0x83c

00003ee8 <.L77>:
                            }
                            break;
    3ee8:	52 00 37    	bra       0x3f8e <.L78>

00003eea <.L75>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    3eea:	a0 4a 20    	mov.w     #0x4aa, w0
    3eec:	10 07 98    	mov.w     w0, [w14+2]

00003eee <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    3eee:	40 83 20    	mov.w     #0x834, w0
    3ef0:	40 40 90    	mov.b     [w0+4], w0
    3ef2:	6f 4f 60    	and.b     w0, #0xf, [w14]
    3ef4:	1e 40 78    	mov.b     [w14], w0
    3ef6:	00 04 e0    	cp0.b     w0
    3ef8:	3b 00 32    	bra       Z, 0x3f70 <.L79>

00003efa <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    3efa:	1e 80 fb    	ze        [w14], w0
    3efc:	00 00 40    	add.w     w0, w0, w0
    3efe:	80 00 78    	mov.w     w0, w1
    3f00:	40 83 20    	mov.w     #0x834, w0
    3f02:	40 40 90    	mov.b     [w0+4], w0
    3f04:	00 00 fb    	se        w0, w0
    3f06:	4f 00 de    	lsr.w     w0, #0xf, w0
    3f08:	01 00 70    	ior.w     w0, w1, w0
    3f0a:	c2 00 dd    	sl.w      w0, #0x2, w1
    3f0c:	00 e0 21    	mov.w     #0x1e00, w0
    3f0e:	00 80 40    	add.w     w1, w0, w0
    3f10:	20 07 98    	mov.w     w0, [w14+4]

00003f12 <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    3f12:	40 83 20    	mov.w     #0x834, w0
    3f14:	40 40 90    	mov.b     [w0+4], w0
    3f16:	00 04 e0    	cp0.b     w0
    3f18:	16 00 3d    	bra       GE, 0x3f46 <.L80>

00003f1a <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    3f1a:	1e 80 fb    	ze        [w14], w0
    3f1c:	00 00 40    	add.w     w0, w0, w0
    3f1e:	9e 00 90    	mov.w     [w14+2], w1
    3f20:	00 80 40    	add.w     w1, w0, w0
    3f22:	10 00 78    	mov.w     [w0], w0
    3f24:	64 00 60    	and.w     w0, #0x4, w0
    3f26:	00 00 e0    	cp0.w     w0
    3f28:	0a 00 32    	bra       Z, 0x3f3e <.L81>

00003f2a <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    3f2a:	40 83 20    	mov.w     #0x834, w0
    3f2c:	10 40 90    	mov.b     [w0+1], w0
    3f2e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3f30:	02 00 3a    	bra       NZ, 0x3f36 <.L82>
    3f32:	00 40 eb    	clr.b     w0
    3f34:	01 00 37    	bra       0x3f38 <.L83>

00003f36 <.L82>:
    3f36:	40 c8 b3    	mov.b     #0x84, w0

00003f38 <.L83>:
    3f38:	ae 00 90    	mov.w     [w14+4], w1
    3f3a:	90 40 98    	mov.b     w0, [w1+1]
    3f3c:	19 00 37    	bra       0x3f70 <.L79>

00003f3e <.L81>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3f3e:	3c c8 bf    	mov.b     0x83c, WREG
    3f40:	00 04 a0    	bset.b    w0, #0x0
    3f42:	3c e8 b7    	mov.b     WREG, 0x83c
    3f44:	15 00 37    	bra       0x3f70 <.L79>

00003f46 <.L80>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    3f46:	1e 80 fb    	ze        [w14], w0
    3f48:	00 00 40    	add.w     w0, w0, w0
    3f4a:	9e 00 90    	mov.w     [w14+2], w1
    3f4c:	00 80 40    	add.w     w1, w0, w0
    3f4e:	10 00 78    	mov.w     [w0], w0
    3f50:	68 00 60    	and.w     w0, #0x8, w0
    3f52:	00 00 e0    	cp0.w     w0
    3f54:	0a 00 32    	bra       Z, 0x3f6a <.L84>

00003f56 <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    3f56:	40 83 20    	mov.w     #0x834, w0
    3f58:	10 40 90    	mov.b     [w0+1], w0
    3f5a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3f5c:	02 00 3a    	bra       NZ, 0x3f62 <.L85>
    3f5e:	80 c8 b3    	mov.b     #0x88, w0
    3f60:	01 00 37    	bra       0x3f64 <.L86>

00003f62 <.L85>:
    3f62:	40 c8 b3    	mov.b     #0x84, w0

00003f64 <.L86>:
    3f64:	ae 00 90    	mov.w     [w14+4], w1
    3f66:	90 40 98    	mov.b     w0, [w1+1]
    3f68:	03 00 37    	bra       0x3f70 <.L79>

00003f6a <.L84>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3f6a:	3c c8 bf    	mov.b     0x83c, WREG
    3f6c:	00 04 a0    	bset.b    w0, #0x0
    3f6e:	3c e8 b7    	mov.b     WREG, 0x83c

00003f70 <.L79>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    3f70:	3c c8 bf    	mov.b     0x83c, WREG
    3f72:	00 80 fb    	ze        w0, w0
    3f74:	61 00 60    	and.w     w0, #0x1, w0
    3f76:	00 00 e0    	cp0.w     w0
    3f78:	06 00 3a    	bra       NZ, 0x3f86

00003f7a <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    3f7a:	40 e0 21    	mov.w     #0x1e04, w0
    3f7c:	80 40 eb    	clr.b     w1
    3f7e:	01 48 78    	mov.b     w1, [w0]

00003f80 <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    3f80:	50 e0 21    	mov.w     #0x1e05, w0
    3f82:	81 cc b3    	mov.b     #0xc8, w1
    3f84:	01 48 78    	mov.b     w1, [w0]

00003f86 <.L87>:
                            }
                            break;
    3f86:	03 00 37    	bra       0x3f8e <.L78>

00003f88 <.L132>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3f88:	3c c8 bf    	mov.b     0x83c, WREG
    3f8a:	00 04 a0    	bset.b    w0, #0x0
    3f8c:	3c e8 b7    	mov.b     WREG, 0x83c

00003f8e <.L78>:
                    }
                    break;
    3f8e:	04 00 37    	bra       0x3f98 <.L72>

00003f90 <.L130>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    3f90:	3c c8 bf    	mov.b     0x83c, WREG
    3f92:	00 04 a0    	bset.b    w0, #0x0
    3f94:	3c e8 b7    	mov.b     WREG, 0x83c

00003f96 <.LSM181>:
            }
            break;
    3f96:	10 01 37    	bra       0x41b8 <.L29>

00003f98 <.L72>:
    3f98:	0f 01 37    	bra       0x41b8 <.L29>

00003f9a <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    3f9a:	40 83 20    	mov.w     #0x834, w0
    3f9c:	20 40 90    	mov.b     [w0+2], w0
    3f9e:	00 04 e0    	cp0.b     w0
    3fa0:	04 00 3d    	bra       GE, 0x3faa <.L88>

00003fa2 <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    3fa2:	3c c8 bf    	mov.b     0x83c, WREG
    3fa4:	00 04 a0    	bset.b    w0, #0x0
    3fa6:	3c e8 b7    	mov.b     WREG, 0x83c

00003fa8 <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    3fa8:	07 01 37    	bra       0x41b8 <.L29>

00003faa <.L88>:
    3faa:	40 83 20    	mov.w     #0x834, w0
    3fac:	90 40 78    	mov.b     [w0], w1
    3fae:	80 d0 21    	mov.w     #0x1d08, w0
    3fb0:	01 48 78    	mov.b     w1, [w0]

00003fb2 <.LSM186>:
    3fb2:	40 83 20    	mov.w     #0x834, w0
    3fb4:	90 40 90    	mov.b     [w0+1], w1
    3fb6:	90 d0 21    	mov.w     #0x1d09, w0
    3fb8:	01 48 78    	mov.b     w1, [w0]

00003fba <.LSM187>:
    3fba:	40 83 20    	mov.w     #0x834, w0
    3fbc:	10 00 90    	mov.w     [w0+2], w0
    3fbe:	50 e8 88    	mov.w     w0, 0x1d0a

00003fc0 <.LSM188>:
    3fc0:	40 83 20    	mov.w     #0x834, w0
    3fc2:	20 00 90    	mov.w     [w0+4], w0
    3fc4:	60 e8 88    	mov.w     w0, 0x1d0c

00003fc6 <.LSM189>:
    3fc6:	40 83 20    	mov.w     #0x834, w0
    3fc8:	30 00 90    	mov.w     [w0+6], w0
    3fca:	70 e8 88    	mov.w     w0, 0x1d0e

00003fcc <.LSM190>:
    3fcc:	40 e0 21    	mov.w     #0x1e04, w0
    3fce:	80 40 eb    	clr.b     w1
    3fd0:	01 48 78    	mov.b     w1, [w0]

00003fd2 <.LSM191>:
    3fd2:	50 e0 21    	mov.w     #0x1e05, w0
    3fd4:	81 cc b3    	mov.b     #0xc8, w1
    3fd6:	01 48 78    	mov.b     w1, [w0]

00003fd8 <.LSM192>:
    3fd8:	ef 00 37    	bra       0x41b8 <.L29>

00003fda <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    3fda:	40 83 20    	mov.w     #0x834, w0
    3fdc:	90 40 78    	mov.b     [w0], w1
    3fde:	80 d0 21    	mov.w     #0x1d08, w0
    3fe0:	01 48 78    	mov.b     w1, [w0]

00003fe2 <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    3fe2:	40 83 20    	mov.w     #0x834, w0
    3fe4:	90 40 90    	mov.b     [w0+1], w1
    3fe6:	90 d0 21    	mov.w     #0x1d09, w0
    3fe8:	01 48 78    	mov.b     w1, [w0]

00003fea <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    3fea:	40 83 20    	mov.w     #0x834, w0
    3fec:	10 00 90    	mov.w     [w0+2], w0
    3fee:	50 e8 88    	mov.w     w0, 0x1d0a

00003ff0 <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    3ff0:	40 83 20    	mov.w     #0x834, w0
    3ff2:	20 00 90    	mov.w     [w0+4], w0
    3ff4:	60 e8 88    	mov.w     w0, 0x1d0c

00003ff6 <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    3ff6:	40 83 20    	mov.w     #0x834, w0
    3ff8:	30 00 90    	mov.w     [w0+6], w0
    3ffa:	70 e8 88    	mov.w     w0, 0x1d0e

00003ffc <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    3ffc:	40 83 20    	mov.w     #0x834, w0
    3ffe:	30 40 90    	mov.b     [w0+3], w0
    4000:	00 80 fb    	ze        w0, w0
    4002:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4004:	14 00 32    	bra       Z, 0x402e <.L92>
    4006:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4008:	36 00 32    	bra       Z, 0x4076 <.L93>
    400a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    400c:	5c 00 3a    	bra       NZ, 0x40c6 <.L133>

0000400e <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    400e:	a0 b4 2a    	mov.w     #0xab4a, w0
    4010:	80 e8 88    	mov.w     w0, 0x1d10

00004012 <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    4012:	80 e8 80    	mov.w     0x1d10, w0
    4014:	10 40 78    	mov.b     [w0], w0
    4016:	00 80 fb    	ze        w0, w0
    4018:	90 e8 88    	mov.w     w0, 0x1d12

0000401a <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    401a:	40 83 20    	mov.w     #0x834, w0
    401c:	b0 00 90    	mov.w     [w0+6], w1
    401e:	90 e8 80    	mov.w     0x1d12, w0
    4020:	80 8f 50    	sub.w     w1, w0, [w15]
    4022:	03 00 31    	bra       C, 0x402a <.L94>

00004024 <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    4024:	40 83 20    	mov.w     #0x834, w0
    4026:	30 00 90    	mov.w     [w0+6], w0
    4028:	90 e8 88    	mov.w     w0, 0x1d12

0000402a <.L94>:
                    }
                    SendDataPacket();
    402a:	22 01 07    	rcall     0x4270 <_SendDataPacket>

0000402c <.LSM204>:
                    break;
    402c:	50 00 37    	bra       0x40ce <.L95>

0000402e <.L92>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    402e:	40 83 20    	mov.w     #0x834, w0
    4030:	20 40 90    	mov.b     [w0+2], w0
    4032:	00 80 fb    	ze        w0, w0
    4034:	00 00 e0    	cp0.w     w0
    4036:	03 00 3a    	bra       NZ, 0x403e <.L134>

00004038 <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    4038:	c0 b5 2a    	mov.w     #0xab5c, w0
    403a:	80 e8 88    	mov.w     w0, 0x1d10

0000403c <.LSM207>:
                            break;
    403c:	03 00 37    	bra       0x4044 <.L98>

0000403e <.L134>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    403e:	3c c8 bf    	mov.b     0x83c, WREG
    4040:	00 04 a0    	bset.b    w0, #0x0
    4042:	3c e8 b7    	mov.b     WREG, 0x83c

00004044 <.L98>:
                    }
                    if (!(USB_error_flags&0x01)) {
    4044:	3c c8 bf    	mov.b     0x83c, WREG
    4046:	00 80 fb    	ze        w0, w0
    4048:	61 00 60    	and.w     w0, #0x1, w0
    404a:	00 00 e0    	cp0.w     w0
    404c:	13 00 3a    	bra       NZ, 0x4074 <.L99>

0000404e <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    404e:	80 e8 80    	mov.w     0x1d10, w0
    4050:	00 80 e8    	inc2.w    w0, w0
    4052:	90 40 78    	mov.b     [w0], w1
    4054:	20 d1 21    	mov.w     #0x1d12, w0
    4056:	01 48 78    	mov.b     w1, [w0]

00004058 <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    4058:	80 e8 80    	mov.w     0x1d10, w0
    405a:	63 00 40    	add.w     w0, #0x3, w0
    405c:	90 40 78    	mov.b     [w0], w1
    405e:	30 d1 21    	mov.w     #0x1d13, w0
    4060:	01 48 78    	mov.b     w1, [w0]

00004062 <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    4062:	40 83 20    	mov.w     #0x834, w0
    4064:	b0 00 90    	mov.w     [w0+6], w1
    4066:	90 e8 80    	mov.w     0x1d12, w0
    4068:	80 8f 50    	sub.w     w1, w0, [w15]
    406a:	03 00 31    	bra       C, 0x4072 <.L100>

0000406c <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    406c:	40 83 20    	mov.w     #0x834, w0
    406e:	30 00 90    	mov.w     [w0+6], w0
    4070:	90 e8 88    	mov.w     w0, 0x1d12

00004072 <.L100>:
                        }
                        SendDataPacket();
    4072:	fe 00 07    	rcall     0x4270 <_SendDataPacket>

00004074 <.L99>:
                    }
                    break;
    4074:	2c 00 37    	bra       0x40ce <.L95>

00004076 <.L93>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    4076:	40 83 20    	mov.w     #0x834, w0
    4078:	20 40 90    	mov.b     [w0+2], w0
    407a:	00 80 fb    	ze        w0, w0
    407c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    407e:	07 00 32    	bra       Z, 0x408e <.L103>
    4080:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4082:	08 00 32    	bra       Z, 0x4094 <.L104>
    4084:	00 00 e0    	cp0.w     w0
    4086:	09 00 3a    	bra       NZ, 0x409a <.L135>

00004088 <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    4088:	e0 b6 2a    	mov.w     #0xab6e, w0
    408a:	80 e8 88    	mov.w     w0, 0x1d10

0000408c <.LSM218>:
                            break;
    408c:	09 00 37    	bra       0x40a0 <.L105>

0000408e <.L103>:
                        case 1:
                            USB_request.data_ptr = String1;
    408e:	20 b7 2a    	mov.w     #0xab72, w0
    4090:	80 e8 88    	mov.w     w0, 0x1d10

00004092 <.LSM220>:
                            break;
    4092:	06 00 37    	bra       0x40a0 <.L105>

00004094 <.L104>:
                        case 2:
                            USB_request.data_ptr = String2;
    4094:	c0 b8 2a    	mov.w     #0xab8c, w0
    4096:	80 e8 88    	mov.w     w0, 0x1d10

00004098 <.LSM222>:
                            break;
    4098:	03 00 37    	bra       0x40a0 <.L105>

0000409a <.L135>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    409a:	3c c8 bf    	mov.b     0x83c, WREG
    409c:	00 04 a0    	bset.b    w0, #0x0
    409e:	3c e8 b7    	mov.b     WREG, 0x83c

000040a0 <.L105>:
                    }
                    if (!(USB_error_flags&0x01)) {
    40a0:	3c c8 bf    	mov.b     0x83c, WREG
    40a2:	00 80 fb    	ze        w0, w0
    40a4:	61 00 60    	and.w     w0, #0x1, w0
    40a6:	00 00 e0    	cp0.w     w0
    40a8:	0d 00 3a    	bra       NZ, 0x40c4 <.L106>

000040aa <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    40aa:	80 e8 80    	mov.w     0x1d10, w0
    40ac:	10 40 78    	mov.b     [w0], w0
    40ae:	00 80 fb    	ze        w0, w0
    40b0:	90 e8 88    	mov.w     w0, 0x1d12

000040b2 <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    40b2:	40 83 20    	mov.w     #0x834, w0
    40b4:	b0 00 90    	mov.w     [w0+6], w1
    40b6:	90 e8 80    	mov.w     0x1d12, w0
    40b8:	80 8f 50    	sub.w     w1, w0, [w15]
    40ba:	03 00 31    	bra       C, 0x40c2 <.L107>

000040bc <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    40bc:	40 83 20    	mov.w     #0x834, w0
    40be:	30 00 90    	mov.w     [w0+6], w0
    40c0:	90 e8 88    	mov.w     w0, 0x1d12

000040c2 <.L107>:
                        }
                        SendDataPacket();
    40c2:	d6 00 07    	rcall     0x4270 <_SendDataPacket>

000040c4 <.L106>:
                    }
                    break;
    40c4:	04 00 37    	bra       0x40ce <.L95>

000040c6 <.L133>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    40c6:	3c c8 bf    	mov.b     0x83c, WREG
    40c8:	00 04 a0    	bset.b    w0, #0x0
    40ca:	3c e8 b7    	mov.b     WREG, 0x83c

000040cc <.LSM231>:
            }
            break;
    40cc:	75 00 37    	bra       0x41b8 <.L29>

000040ce <.L95>:
    40ce:	74 00 37    	bra       0x41b8 <.L29>

000040d0 <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    40d0:	30 f0 80    	mov.w     0x1e06, w0
    40d2:	d1 83 20    	mov.w     #0x83d, w1
    40d4:	91 40 78    	mov.b     [w1], w1
    40d6:	01 48 78    	mov.b     w1, [w0]

000040d8 <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    40d8:	40 e0 21    	mov.w     #0x1e04, w0
    40da:	11 c0 b3    	mov.b     #0x1, w1
    40dc:	01 48 78    	mov.b     w1, [w0]

000040de <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    40de:	50 e0 21    	mov.w     #0x1e05, w0
    40e0:	81 cc b3    	mov.b     #0xc8, w1
    40e2:	01 48 78    	mov.b     w1, [w0]

000040e4 <.LSM235>:
            break;
    40e4:	69 00 37    	bra       0x41b8 <.L29>

000040e6 <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    40e6:	40 83 20    	mov.w     #0x834, w0
    40e8:	20 40 90    	mov.b     [w0+2], w0
    40ea:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    40ec:	22 00 3e    	bra       GTU, 0x4132 <.L108>

000040ee <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    40ee:	a0 4a 20    	mov.w     #0x4aa, w0
    40f0:	10 07 98    	mov.w     w0, [w14+2]

000040f2 <.LSM238>:
                for (n = 1; n<16; n++)
    40f2:	10 c0 b3    	mov.b     #0x1, w0
    40f4:	00 4f 78    	mov.b     w0, [w14]
    40f6:	07 00 37    	bra       0x4106 <.L109>

000040f8 <.L110>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    40f8:	1e 80 fb    	ze        [w14], w0
    40fa:	00 00 40    	add.w     w0, w0, w0
    40fc:	9e 00 90    	mov.w     [w14+2], w1
    40fe:	00 80 40    	add.w     w1, w0, w0
    4100:	80 00 eb    	clr.w     w1
    4102:	01 08 78    	mov.w     w1, [w0]

00004104 <.LSM240>:
    4104:	1e 4f e8    	inc.b     [w14], [w14]

00004106 <.L109>:
    4106:	1e 40 78    	mov.b     [w14], w0
    4108:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    410a:	f6 ff 36    	bra       LEU, 0x40f8 <.L110>

0000410c <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    410c:	40 83 20    	mov.w     #0x834, w0
    410e:	20 40 90    	mov.b     [w0+2], w0
    4110:	3d e8 b7    	mov.b     WREG, 0x83d
    4112:	3d c8 bf    	mov.b     0x83d, WREG
    4114:	00 80 fb    	ze        w0, w0
    4116:	00 00 e0    	cp0.w     w0
    4118:	03 00 3a    	bra       NZ, 0x4120 <.L136>

0000411a <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    411a:	20 c0 b3    	mov.b     #0x2, w0
    411c:	40 e8 b7    	mov.b     WREG, 0x840

0000411e <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    411e:	02 00 37    	bra       0x4124 <.L113>

00004120 <.L136>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    4120:	30 c0 b3    	mov.b     #0x3, w0
    4122:	40 e8 b7    	mov.b     WREG, 0x840

00004124 <.L113>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    4124:	40 e0 21    	mov.w     #0x1e04, w0
    4126:	80 40 eb    	clr.b     w1
    4128:	01 48 78    	mov.b     w1, [w0]

0000412a <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    412a:	50 e0 21    	mov.w     #0x1e05, w0
    412c:	81 cc b3    	mov.b     #0xc8, w1
    412e:	01 48 78    	mov.b     w1, [w0]

00004130 <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    4130:	43 00 37    	bra       0x41b8 <.L29>

00004132 <.L108>:
    4132:	3c c8 bf    	mov.b     0x83c, WREG
    4134:	00 04 a0    	bset.b    w0, #0x0
    4136:	3c e8 b7    	mov.b     WREG, 0x83c

00004138 <.LSM249>:
    4138:	3f 00 37    	bra       0x41b8 <.L29>

0000413a <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    413a:	40 c8 bf    	mov.b     0x840, WREG
    413c:	00 80 fb    	ze        w0, w0
    413e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4140:	13 00 3a    	bra       NZ, 0x4168 <.L137>

00004142 <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    4142:	40 83 20    	mov.w     #0x834, w0
    4144:	40 40 90    	mov.b     [w0+4], w0
    4146:	00 04 e0    	cp0.b     w0
    4148:	0a 00 3a    	bra       NZ, 0x415e <.L117>

0000414a <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    414a:	30 f0 80    	mov.w     0x1e06, w0
    414c:	80 40 eb    	clr.b     w1
    414e:	01 48 78    	mov.b     w1, [w0]

00004150 <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    4150:	40 e0 21    	mov.w     #0x1e04, w0
    4152:	11 c0 b3    	mov.b     #0x1, w1
    4154:	01 48 78    	mov.b     w1, [w0]

00004156 <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    4156:	50 e0 21    	mov.w     #0x1e05, w0
    4158:	81 cc b3    	mov.b     #0xc8, w1
    415a:	01 48 78    	mov.b     w1, [w0]
    415c:	03 00 37    	bra       0x4164 <.L118>

0000415e <.L117>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    415e:	3c c8 bf    	mov.b     0x83c, WREG
    4160:	00 04 a0    	bset.b    w0, #0x0
    4162:	3c e8 b7    	mov.b     WREG, 0x83c

00004164 <.L118>:
                    }
                    break;
    4164:	00 00 00    	nop       

00004166 <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    4166:	28 00 37    	bra       0x41b8 <.L29>

00004168 <.L137>:
    4168:	3c c8 bf    	mov.b     0x83c, WREG
    416a:	00 04 a0    	bset.b    w0, #0x0
    416c:	3c e8 b7    	mov.b     WREG, 0x83c

0000416e <.LSM259>:
    416e:	24 00 37    	bra       0x41b8 <.L29>

00004170 <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    4170:	40 c8 bf    	mov.b     0x840, WREG
    4172:	00 80 fb    	ze        w0, w0
    4174:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4176:	19 00 3a    	bra       NZ, 0x41aa <.L138>

00004178 <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    4178:	40 83 20    	mov.w     #0x834, w0
    417a:	40 40 90    	mov.b     [w0+4], w0
    417c:	00 04 e0    	cp0.b     w0
    417e:	10 00 3a    	bra       NZ, 0x41a0 <.L122>

00004180 <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    4180:	40 83 20    	mov.w     #0x834, w0
    4182:	20 40 90    	mov.b     [w0+2], w0
    4184:	00 80 fb    	ze        w0, w0
    4186:	00 00 e0    	cp0.w     w0
    4188:	07 00 3a    	bra       NZ, 0x4198 <.L139>

0000418a <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    418a:	40 e0 21    	mov.w     #0x1e04, w0
    418c:	80 40 eb    	clr.b     w1
    418e:	01 48 78    	mov.b     w1, [w0]

00004190 <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    4190:	50 e0 21    	mov.w     #0x1e05, w0
    4192:	81 cc b3    	mov.b     #0xc8, w1
    4194:	01 48 78    	mov.b     w1, [w0]

00004196 <.LSM265>:
                                break;
    4196:	07 00 37    	bra       0x41a6 <.L126>

00004198 <.L139>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    4198:	3c c8 bf    	mov.b     0x83c, WREG
    419a:	00 04 a0    	bset.b    w0, #0x0
    419c:	3c e8 b7    	mov.b     WREG, 0x83c
    419e:	03 00 37    	bra       0x41a6 <.L126>

000041a0 <.L122>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    41a0:	3c c8 bf    	mov.b     0x83c, WREG
    41a2:	00 04 a0    	bset.b    w0, #0x0
    41a4:	3c e8 b7    	mov.b     WREG, 0x83c

000041a6 <.L126>:
                    }
                    break;
    41a6:	00 00 00    	nop       

000041a8 <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    41a8:	07 00 37    	bra       0x41b8 <.L29>

000041aa <.L138>:
    41aa:	3c c8 bf    	mov.b     0x83c, WREG
    41ac:	00 04 a0    	bset.b    w0, #0x0
    41ae:	3c e8 b7    	mov.b     WREG, 0x83c

000041b0 <.LSM271>:
    41b0:	03 00 37    	bra       0x41b8 <.L29>

000041b2 <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    41b2:	3c c8 bf    	mov.b     0x83c, WREG
    41b4:	00 04 a0    	bset.b    w0, #0x0
    41b6:	3c e8 b7    	mov.b     WREG, 0x83c

000041b8 <.L29>:
    }
}
    41b8:	00 80 fa    	ulnk      
    41ba:	00 00 06    	return    

000041bc <_ProcessInToken>:

void ProcessInToken(void) {
    41bc:	00 00 fa    	lnk       #0x0

000041be <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    41be:	3f c8 bf    	mov.b     0x83f, WREG
    41c0:	80 80 fb    	ze        w0, w1
    41c2:	00 0f 20    	mov.w     #0xf0, w0
    41c4:	00 80 60    	and.w     w1, w0, w0
    41c6:	00 00 e0    	cp0.w     w0
    41c8:	2b 00 3a    	bra       NZ, 0x4220 <.L140>

000041ca <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    41ca:	80 d0 21    	mov.w     #0x1d08, w0
    41cc:	10 40 78    	mov.b     [w0], w0
    41ce:	80 80 fb    	ze        w0, w1
    41d0:	00 06 20    	mov.w     #0x60, w0
    41d2:	00 80 60    	and.w     w1, w0, w0
    41d4:	01 02 20    	mov.w     #0x20, w1
    41d6:	81 0f 50    	sub.w     w0, w1, [w15]
    41d8:	1f 00 32    	bra       Z, 0x4218 <.L154>
    41da:	01 04 20    	mov.w     #0x40, w1
    41dc:	81 0f 50    	sub.w     w0, w1, [w15]
    41de:	1a 00 32    	bra       Z, 0x4214 <.L146>
    41e0:	00 00 e0    	cp0.w     w0
    41e2:	1d 00 3a    	bra       NZ, 0x421e <.L155>

000041e4 <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    41e4:	90 d0 21    	mov.w     #0x1d09, w0
    41e6:	10 40 78    	mov.b     [w0], w0
    41e8:	00 80 fb    	ze        w0, w0
    41ea:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    41ec:	03 00 32    	bra       Z, 0x41f4 <.L148>
    41ee:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    41f0:	0e 00 32    	bra       Z, 0x420e <.L149>

000041f2 <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    41f2:	13 00 37    	bra       0x421a <.L143>

000041f4 <.L148>:
    41f4:	a0 d0 21    	mov.w     #0x1d0a, w0
    41f6:	10 40 78    	mov.b     [w0], w0
    41f8:	00 80 fb    	ze        w0, w0
    41fa:	b0 24 88    	mov.w     w0, 0x496
    41fc:	b0 24 80    	mov.w     0x496, w0
    41fe:	00 00 e0    	cp0.w     w0
    4200:	03 00 3a    	bra       NZ, 0x4208 <.L153>

00004202 <.LSM280>:
    4202:	10 c0 b3    	mov.b     #0x1, w0
    4204:	40 e8 b7    	mov.b     WREG, 0x840

00004206 <.LSM281>:
    4206:	02 00 37    	bra       0x420c <.L152>

00004208 <.L153>:
    4208:	20 c0 b3    	mov.b     #0x2, w0
    420a:	40 e8 b7    	mov.b     WREG, 0x840

0000420c <.L152>:
    420c:	02 00 37    	bra       0x4212 <.L147>

0000420e <.L149>:
    420e:	30 00 07    	rcall     0x4270 <_SendDataPacket>

00004210 <.LSM285>:
    4210:	00 00 00    	nop       

00004212 <.L147>:
    4212:	03 00 37    	bra       0x421a <.L143>

00004214 <.L146>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    4214:	dc 05 07    	rcall     0x4dce <_VendorRequestsIn>

00004216 <.LSM288>:
                    break;
    4216:	01 00 37    	bra       0x421a <.L143>

00004218 <.L154>:
    4218:	00 00 00    	nop       

0000421a <.L143>:
            }
            break;
    421a:	00 00 00    	nop       
    421c:	01 00 37    	bra       0x4220 <.L140>

0000421e <.L155>:
    421e:	00 00 00    	nop       

00004220 <.L140>:
    }
}
    4220:	00 80 fa    	ulnk      
    4222:	00 00 06    	return    

00004224 <_ProcessOutToken>:

void ProcessOutToken(void) {
    4224:	00 00 fa    	lnk       #0x0

00004226 <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    4226:	3f c8 bf    	mov.b     0x83f, WREG
    4228:	80 80 fb    	ze        w0, w1
    422a:	00 0f 20    	mov.w     #0xf0, w0
    422c:	00 80 60    	and.w     w1, w0, w0
    422e:	00 00 e0    	cp0.w     w0
    4230:	1d 00 3a    	bra       NZ, 0x426c <.L156>

00004232 <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    4232:	80 d0 21    	mov.w     #0x1d08, w0
    4234:	10 40 78    	mov.b     [w0], w0
    4236:	80 80 fb    	ze        w0, w1
    4238:	00 06 20    	mov.w     #0x60, w0
    423a:	00 80 60    	and.w     w1, w0, w0
    423c:	01 02 20    	mov.w     #0x20, w1
    423e:	81 0f 50    	sub.w     w0, w1, [w15]
    4240:	05 00 32    	bra       Z, 0x424c <.L163>
    4242:	01 04 20    	mov.w     #0x40, w1
    4244:	81 0f 50    	sub.w     w0, w1, [w15]
    4246:	04 00 3a    	bra       NZ, 0x4250 <.L164>

00004248 <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    4248:	c8 05 07    	rcall     0x4dda <_VendorRequestsOut>

0000424a <.LSM296>:
                    break;
    424a:	03 00 37    	bra       0x4252 <.L159>

0000424c <.L163>:
    424c:	00 00 00    	nop       
    424e:	01 00 37    	bra       0x4252 <.L159>

00004250 <.L164>:
    4250:	00 00 00    	nop       

00004252 <.L159>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    4252:	00 e0 21    	mov.w     #0x1e00, w0
    4254:	01 c4 b3    	mov.b     #0x40, w1
    4256:	01 48 78    	mov.b     w1, [w0]

00004258 <.LSM300>:
            BD[EP0OUT].status = 0x88;
    4258:	10 e0 21    	mov.w     #0x1e01, w0
    425a:	81 c8 b3    	mov.b     #0x88, w1
    425c:	01 48 78    	mov.b     w1, [w0]

0000425e <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    425e:	40 e0 21    	mov.w     #0x1e04, w0
    4260:	80 40 eb    	clr.b     w1
    4262:	01 48 78    	mov.b     w1, [w0]

00004264 <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    4264:	50 e0 21    	mov.w     #0x1e05, w0
    4266:	81 cc b3    	mov.b     #0xc8, w1
    4268:	01 48 78    	mov.b     w1, [w0]

0000426a <.LSM303>:
            break;
    426a:	00 00 00    	nop       

0000426c <.L156>:
    }
}
    426c:	00 80 fa    	ulnk      
    426e:	00 00 06    	return    

00004270 <_SendDataPacket>:

void SendDataPacket(void) {
    4270:	02 00 fa    	lnk       #0x2

00004272 <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    4272:	91 e8 80    	mov.w     0x1d12, w1
    4274:	f0 03 20    	mov.w     #0x3f, w0
    4276:	80 8f 50    	sub.w     w1, w0, [w15]
    4278:	0b 00 3e    	bra       GTU, 0x4290 <.L166>

0000427a <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    427a:	90 e8 80    	mov.w     0x1d12, w0
    427c:	00 4f 78    	mov.b     w0, [w14]

0000427e <.LSM308>:
        USB_request.bytes_left.w = 0;
    427e:	00 00 eb    	clr.w     w0
    4280:	90 e8 88    	mov.w     w0, 0x1d12

00004282 <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    4282:	80 d0 21    	mov.w     #0x1d08, w0
    4284:	80 c0 eb    	setm.b    w1
    4286:	01 48 78    	mov.b     w1, [w0]

00004288 <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    4288:	90 d0 21    	mov.w     #0x1d09, w0
    428a:	80 c0 eb    	setm.b    w1
    428c:	01 48 78    	mov.b     w1, [w0]
    428e:	05 00 37    	bra       0x429a <.L167>

00004290 <.L166>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    4290:	00 c4 b3    	mov.b     #0x40, w0
    4292:	00 4f 78    	mov.b     w0, [w14]

00004294 <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    4294:	90 e8 80    	mov.w     0x1d12, w0
    4296:	00 04 b1    	sub.w     #0x40, w0
    4298:	90 e8 88    	mov.w     w0, 0x1d12

0000429a <.L167>:
    }
    for (n = 0; n<packet_length; n++) {
    429a:	00 40 eb    	clr.b     w0
    429c:	10 47 98    	mov.b     w0, [w14+1]
    429e:	0c 00 37    	bra       0x42b8 <.L168>

000042a0 <.L169>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    42a0:	31 f0 80    	mov.w     0x1e06, w1
    42a2:	1e 40 90    	mov.b     [w14+1], w0
    42a4:	00 80 fb    	ze        w0, w0
    42a6:	80 80 40    	add.w     w1, w0, w1
    42a8:	80 e8 80    	mov.w     0x1d10, w0
    42aa:	10 41 78    	mov.b     [w0], w2
    42ac:	82 48 78    	mov.b     w2, [w1]
    42ae:	00 00 e8    	inc.w     w0, w0
    42b0:	80 e8 88    	mov.w     w0, 0x1d10

000042b2 <.LSM315>:
    42b2:	1e 40 90    	mov.b     [w14+1], w0
    42b4:	00 40 e8    	inc.b     w0, w0
    42b6:	10 47 98    	mov.b     w0, [w14+1]

000042b8 <.L168>:
    42b8:	1e 40 90    	mov.b     [w14+1], w0
    42ba:	9e 4f 50    	sub.b     w0, [w14], [w15]
    42bc:	f1 ff 39    	bra       NC, 0x42a0 <.L169>

000042be <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    42be:	40 e0 21    	mov.w     #0x1e04, w0
    42c0:	1e 48 78    	mov.b     [w14], [w0]

000042c2 <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    42c2:	50 e0 21    	mov.w     #0x1e05, w0
    42c4:	10 40 78    	mov.b     [w0], w0
    42c6:	00 c0 ea    	com.b     w0, w0
    42c8:	02 c4 b3    	mov.b     #0x40, w2
    42ca:	82 40 60    	and.b     w0, w2, w1
    42cc:	80 c8 b3    	mov.b     #0x88, w0
    42ce:	00 c0 70    	ior.b     w1, w0, w0
    42d0:	80 40 78    	mov.b     w0, w1
    42d2:	50 e0 21    	mov.w     #0x1e05, w0
    42d4:	01 48 78    	mov.b     w1, [w0]

000042d6 <.LSM318>:
}
    42d6:	00 80 fa    	ulnk      
    42d8:	00 00 06    	return    

000042da <__USB1Interrupt>:

//Making Service USB interrupt driven
void __attribute__((interrupt, auto_psv)) _USB1Interrupt(void) {
    42da:	36 00 f8    	push      0x36
    42dc:	80 9f be    	mov.d     w0, [w15++]
    42de:	82 9f be    	mov.d     w2, [w15++]
    42e0:	84 9f be    	mov.d     w4, [w15++]
    42e2:	86 9f be    	mov.d     w6, [w15++]
    42e4:	32 00 f8    	push      0x32
    42e6:	34 00 f8    	push      0x34
    42e8:	10 00 20    	mov.w     #0x1, w0
    42ea:	a0 01 88    	mov.w     w0, 0x34
    42ec:	00 20 20    	mov.w     #0x200, w0
    42ee:	90 01 88    	mov.w     w0, 0x32
    42f0:	00 00 fa    	lnk       #0x0

000042f2 <.LSM320>:
    IFS5bits.USB1IF = 0; //flag
    42f2:	8e c0 a9    	bclr.b    0x8e, #0x6

000042f4 <.LSM321>:
    ServiceUSB();
    42f4:	fe fb 07    	rcall     0x3af2 <_ServiceUSB>

000042f6 <.LSM322>:
}
    42f6:	00 80 fa    	ulnk      
    42f8:	34 00 f9    	pop       0x34
    42fa:	32 00 f9    	pop       0x32
    42fc:	4f 03 be    	mov.d     [--w15], w6
    42fe:	4f 02 be    	mov.d     [--w15], w4
    4300:	4f 01 be    	mov.d     [--w15], w2
    4302:	4f 00 be    	mov.d     [--w15], w0
    4304:	36 00 f9    	pop       0x36
    4306:	00 40 06    	retfie    

00004308 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    4308:	02 00 fa    	lnk       #0x2
    430a:	00 0f 78    	mov.w     w0, [w14]

0000430c <.LSM1>:
    timer_lower(self);
    430c:	1e 00 78    	mov.w     [w14], w0
    430e:	01 02 07    	rcall     0x4712 <_timer_lower>

00004310 <.LSM2>:
    if (self->every) {
    4310:	1e 00 78    	mov.w     [w14], w0
    4312:	10 08 90    	mov.w     [w0+18], w0
    4314:	00 00 e0    	cp0.w     w0
    4316:	05 00 32    	bra       Z, 0x4322 <.L2>

00004318 <.LSM3>:
        self->every(self);
    4318:	1e 00 78    	mov.w     [w14], w0
    431a:	90 08 90    	mov.w     [w0+18], w1
    431c:	1e 00 78    	mov.w     [w14], w0
    431e:	01 00 01    	call      w1
    4320:	1a 00 37    	bra       0x4356 <.L1>

00004322 <.L2>:
    } else if (self->after) {
    4322:	1e 00 78    	mov.w     [w14], w0
    4324:	20 08 90    	mov.w     [w0+20], w0
    4326:	00 00 e0    	cp0.w     w0
    4328:	14 00 32    	bra       Z, 0x4352 <.L4>

0000432a <.LSM5>:
        if (self->aftercount) {
    432a:	1e 00 78    	mov.w     [w14], w0
    432c:	00 08 90    	mov.w     [w0+16], w0
    432e:	00 00 e0    	cp0.w     w0
    4330:	0a 00 32    	bra       Z, 0x4346 <.L5>

00004332 <.LSM6>:
            self->after(self);
    4332:	1e 00 78    	mov.w     [w14], w0
    4334:	a0 08 90    	mov.w     [w0+20], w1
    4336:	1e 00 78    	mov.w     [w14], w0
    4338:	01 00 01    	call      w1

0000433a <.LSM7>:
            self->aftercount--;
    433a:	1e 00 78    	mov.w     [w14], w0
    433c:	00 08 90    	mov.w     [w0+16], w0
    433e:	80 00 e9    	dec.w     w0, w1
    4340:	1e 00 78    	mov.w     [w14], w0
    4342:	01 08 98    	mov.w     w1, [w0+16]
    4344:	08 00 37    	bra       0x4356 <.L1>

00004346 <.L5>:
        } else {
            timer_disableInterrupt(self);
    4346:	1e 00 78    	mov.w     [w14], w0
    4348:	0c 02 07    	rcall     0x4762 <_timer_disableInterrupt>

0000434a <.LSM9>:
            self->after = NULL;
    434a:	1e 00 78    	mov.w     [w14], w0
    434c:	80 00 eb    	clr.w     w1
    434e:	21 08 98    	mov.w     w1, [w0+20]
    4350:	02 00 37    	bra       0x4356 <.L1>

00004352 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    4352:	1e 00 78    	mov.w     [w14], w0
    4354:	06 02 07    	rcall     0x4762 <_timer_disableInterrupt>

00004356 <.L1>:
    }
}
    4356:	00 80 fa    	ulnk      
    4358:	00 00 06    	return    

0000435a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    435a:	36 00 f8    	push      0x36
    435c:	80 9f be    	mov.d     w0, [w15++]
    435e:	82 9f be    	mov.d     w2, [w15++]
    4360:	84 9f be    	mov.d     w4, [w15++]
    4362:	86 9f be    	mov.d     w6, [w15++]
    4364:	32 00 f8    	push      0x32
    4366:	34 00 f8    	push      0x34
    4368:	10 00 20    	mov.w     #0x1, w0
    436a:	a0 01 88    	mov.w     w0, 0x34
    436c:	00 20 20    	mov.w     #0x200, w0
    436e:	90 01 88    	mov.w     w0, 0x32
    4370:	00 00 fa    	lnk       #0x0

00004372 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    4372:	40 d1 21    	mov.w     #0x1d14, w0
    4374:	c9 ff 07    	rcall     0x4308 <_timer_serviceInterrupt>

00004376 <.LSM14>:
}
    4376:	00 80 fa    	ulnk      
    4378:	34 00 f9    	pop       0x34
    437a:	32 00 f9    	pop       0x32
    437c:	4f 03 be    	mov.d     [--w15], w6
    437e:	4f 02 be    	mov.d     [--w15], w4
    4380:	4f 01 be    	mov.d     [--w15], w2
    4382:	4f 00 be    	mov.d     [--w15], w0
    4384:	36 00 f9    	pop       0x36
    4386:	00 40 06    	retfie    

00004388 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    4388:	36 00 f8    	push      0x36
    438a:	80 9f be    	mov.d     w0, [w15++]
    438c:	82 9f be    	mov.d     w2, [w15++]
    438e:	84 9f be    	mov.d     w4, [w15++]
    4390:	86 9f be    	mov.d     w6, [w15++]
    4392:	32 00 f8    	push      0x32
    4394:	34 00 f8    	push      0x34
    4396:	10 00 20    	mov.w     #0x1, w0
    4398:	a0 01 88    	mov.w     w0, 0x34
    439a:	00 20 20    	mov.w     #0x200, w0
    439c:	90 01 88    	mov.w     w0, 0x32
    439e:	00 00 fa    	lnk       #0x0

000043a0 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    43a0:	a0 d2 21    	mov.w     #0x1d2a, w0
    43a2:	b2 ff 07    	rcall     0x4308 <_timer_serviceInterrupt>

000043a4 <.LSM17>:
}
    43a4:	00 80 fa    	ulnk      
    43a6:	34 00 f9    	pop       0x34
    43a8:	32 00 f9    	pop       0x32
    43aa:	4f 03 be    	mov.d     [--w15], w6
    43ac:	4f 02 be    	mov.d     [--w15], w4
    43ae:	4f 01 be    	mov.d     [--w15], w2
    43b0:	4f 00 be    	mov.d     [--w15], w0
    43b2:	36 00 f9    	pop       0x36
    43b4:	00 40 06    	retfie    

000043b6 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    43b6:	36 00 f8    	push      0x36
    43b8:	80 9f be    	mov.d     w0, [w15++]
    43ba:	82 9f be    	mov.d     w2, [w15++]
    43bc:	84 9f be    	mov.d     w4, [w15++]
    43be:	86 9f be    	mov.d     w6, [w15++]
    43c0:	32 00 f8    	push      0x32
    43c2:	34 00 f8    	push      0x34
    43c4:	10 00 20    	mov.w     #0x1, w0
    43c6:	a0 01 88    	mov.w     w0, 0x34
    43c8:	00 20 20    	mov.w     #0x200, w0
    43ca:	90 01 88    	mov.w     w0, 0x32
    43cc:	00 00 fa    	lnk       #0x0

000043ce <.LSM19>:
    timer_serviceInterrupt(&timer3);
    43ce:	00 d4 21    	mov.w     #0x1d40, w0
    43d0:	9b ff 07    	rcall     0x4308 <_timer_serviceInterrupt>

000043d2 <.LSM20>:
}
    43d2:	00 80 fa    	ulnk      
    43d4:	34 00 f9    	pop       0x34
    43d6:	32 00 f9    	pop       0x32
    43d8:	4f 03 be    	mov.d     [--w15], w6
    43da:	4f 02 be    	mov.d     [--w15], w4
    43dc:	4f 01 be    	mov.d     [--w15], w2
    43de:	4f 00 be    	mov.d     [--w15], w0
    43e0:	36 00 f9    	pop       0x36
    43e2:	00 40 06    	retfie    

000043e4 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    43e4:	36 00 f8    	push      0x36
    43e6:	80 9f be    	mov.d     w0, [w15++]
    43e8:	82 9f be    	mov.d     w2, [w15++]
    43ea:	84 9f be    	mov.d     w4, [w15++]
    43ec:	86 9f be    	mov.d     w6, [w15++]
    43ee:	32 00 f8    	push      0x32
    43f0:	34 00 f8    	push      0x34
    43f2:	10 00 20    	mov.w     #0x1, w0
    43f4:	a0 01 88    	mov.w     w0, 0x34
    43f6:	00 20 20    	mov.w     #0x200, w0
    43f8:	90 01 88    	mov.w     w0, 0x32
    43fa:	00 00 fa    	lnk       #0x0

000043fc <.LSM22>:
    timer_serviceInterrupt(&timer4);
    43fc:	60 d5 21    	mov.w     #0x1d56, w0
    43fe:	84 ff 07    	rcall     0x4308 <_timer_serviceInterrupt>

00004400 <.LSM23>:
}
    4400:	00 80 fa    	ulnk      
    4402:	34 00 f9    	pop       0x34
    4404:	32 00 f9    	pop       0x32
    4406:	4f 03 be    	mov.d     [--w15], w6
    4408:	4f 02 be    	mov.d     [--w15], w4
    440a:	4f 01 be    	mov.d     [--w15], w2
    440c:	4f 00 be    	mov.d     [--w15], w0
    440e:	36 00 f9    	pop       0x36
    4410:	00 40 06    	retfie    

00004412 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    4412:	36 00 f8    	push      0x36
    4414:	80 9f be    	mov.d     w0, [w15++]
    4416:	82 9f be    	mov.d     w2, [w15++]
    4418:	84 9f be    	mov.d     w4, [w15++]
    441a:	86 9f be    	mov.d     w6, [w15++]
    441c:	32 00 f8    	push      0x32
    441e:	34 00 f8    	push      0x34
    4420:	10 00 20    	mov.w     #0x1, w0
    4422:	a0 01 88    	mov.w     w0, 0x34
    4424:	00 20 20    	mov.w     #0x200, w0
    4426:	90 01 88    	mov.w     w0, 0x32
    4428:	00 00 fa    	lnk       #0x0

0000442a <.LSM25>:
    timer_serviceInterrupt(&timer5);
    442a:	c0 d6 21    	mov.w     #0x1d6c, w0
    442c:	6d ff 07    	rcall     0x4308 <_timer_serviceInterrupt>

0000442e <.LSM26>:
}
    442e:	00 80 fa    	ulnk      
    4430:	34 00 f9    	pop       0x34
    4432:	32 00 f9    	pop       0x32
    4434:	4f 03 be    	mov.d     [--w15], w6
    4436:	4f 02 be    	mov.d     [--w15], w4
    4438:	4f 01 be    	mov.d     [--w15], w2
    443a:	4f 00 be    	mov.d     [--w15], w0
    443c:	36 00 f9    	pop       0x36
    443e:	00 40 06    	retfie    

00004440 <_init_timer>:

void init_timer(void) {
    4440:	00 00 fa    	lnk       #0x0

00004442 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    4442:	b0 00 20    	mov.w     #0xb, w0
    4444:	80 1f 78    	mov.w     w0, [w15++]
    4446:	47 00 20    	mov.w     #0x4, w7
    4448:	36 c0 b3    	mov.b     #0x3, w6
    444a:	45 09 20    	mov.w     #0x94, w5
    444c:	44 08 20    	mov.w     #0x84, w4
    444e:	03 10 20    	mov.w     #0x100, w3
    4450:	22 10 20    	mov.w     #0x102, w2
    4452:	41 10 20    	mov.w     #0x104, w1
    4454:	40 d1 21    	mov.w     #0x1d14, w0
    4456:	33 00 07    	rcall     0x44be <_timer_init>
    4458:	8f 87 e9    	dec2.w    w15, w15

0000445a <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    445a:	c0 00 20    	mov.w     #0xc, w0
    445c:	80 1f 78    	mov.w     w0, [w15++]
    445e:	80 03 eb    	clr.w     w7
    4460:	76 c0 b3    	mov.b     #0x7, w6
    4462:	45 09 20    	mov.w     #0x94, w5
    4464:	44 08 20    	mov.w     #0x84, w4
    4466:	63 10 20    	mov.w     #0x106, w3
    4468:	c2 10 20    	mov.w     #0x10c, w2
    446a:	01 11 20    	mov.w     #0x110, w1
    446c:	a0 d2 21    	mov.w     #0x1d2a, w0
    446e:	27 00 07    	rcall     0x44be <_timer_init>
    4470:	8f 87 e9    	dec2.w    w15, w15

00004472 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    4472:	d0 00 20    	mov.w     #0xd, w0
    4474:	80 1f 78    	mov.w     w0, [w15++]
    4476:	17 00 20    	mov.w     #0x1, w7
    4478:	86 c0 b3    	mov.b     #0x8, w6
    447a:	45 09 20    	mov.w     #0x94, w5
    447c:	44 08 20    	mov.w     #0x84, w4
    447e:	a3 10 20    	mov.w     #0x10a, w3
    4480:	e2 10 20    	mov.w     #0x10e, w2
    4482:	21 11 20    	mov.w     #0x112, w1
    4484:	00 d4 21    	mov.w     #0x1d40, w0
    4486:	1b 00 07    	rcall     0x44be <_timer_init>
    4488:	8f 87 e9    	dec2.w    w15, w15

0000448a <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    448a:	e0 00 20    	mov.w     #0xe, w0
    448c:	80 1f 78    	mov.w     w0, [w15++]
    448e:	27 00 20    	mov.w     #0x2, w7
    4490:	b6 c0 b3    	mov.b     #0xb, w6
    4492:	65 09 20    	mov.w     #0x96, w5
    4494:	64 08 20    	mov.w     #0x86, w4
    4496:	43 11 20    	mov.w     #0x114, w3
    4498:	a2 11 20    	mov.w     #0x11a, w2
    449a:	e1 11 20    	mov.w     #0x11e, w1
    449c:	60 d5 21    	mov.w     #0x1d56, w0
    449e:	0f 00 07    	rcall     0x44be <_timer_init>
    44a0:	8f 87 e9    	dec2.w    w15, w15

000044a2 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    44a2:	f0 00 20    	mov.w     #0xf, w0
    44a4:	80 1f 78    	mov.w     w0, [w15++]
    44a6:	37 00 20    	mov.w     #0x3, w7
    44a8:	c6 c0 b3    	mov.b     #0xc, w6
    44aa:	65 09 20    	mov.w     #0x96, w5
    44ac:	64 08 20    	mov.w     #0x86, w4
    44ae:	83 11 20    	mov.w     #0x118, w3
    44b0:	c2 11 20    	mov.w     #0x11c, w2
    44b2:	01 12 20    	mov.w     #0x120, w1
    44b4:	c0 d6 21    	mov.w     #0x1d6c, w0
    44b6:	03 00 07    	rcall     0x44be <_timer_init>
    44b8:	8f 87 e9    	dec2.w    w15, w15

000044ba <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    44ba:	00 80 fa    	ulnk      
    44bc:	00 00 06    	return    

000044be <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    44be:	10 00 fa    	lnk       #0x10
    44c0:	00 0f 78    	mov.w     w0, [w14]
    44c2:	11 07 98    	mov.w     w1, [w14+2]
    44c4:	22 07 98    	mov.w     w2, [w14+4]
    44c6:	33 07 98    	mov.w     w3, [w14+6]
    44c8:	44 07 98    	mov.w     w4, [w14+8]
    44ca:	55 07 98    	mov.w     w5, [w14+10]
    44cc:	46 4f 98    	mov.b     w6, [w14+12]
    44ce:	77 07 98    	mov.w     w7, [w14+14]

000044d0 <.LSM35>:
    self->TxCON = TxCON;
    44d0:	1e 00 78    	mov.w     [w14], w0
    44d2:	9e 00 90    	mov.w     [w14+2], w1
    44d4:	01 08 78    	mov.w     w1, [w0]

000044d6 <.LSM36>:
    self->PRx = PRx;
    44d6:	1e 00 78    	mov.w     [w14], w0
    44d8:	ae 00 90    	mov.w     [w14+4], w1
    44da:	11 00 98    	mov.w     w1, [w0+2]

000044dc <.LSM37>:
    self->TMRx = TMRx;
    44dc:	1e 00 78    	mov.w     [w14], w0
    44de:	be 00 90    	mov.w     [w14+6], w1
    44e0:	21 00 98    	mov.w     w1, [w0+4]

000044e2 <.LSM38>:
    self->IFSy = IFSy;
    44e2:	1e 00 78    	mov.w     [w14], w0
    44e4:	ce 00 90    	mov.w     [w14+8], w1
    44e6:	31 00 98    	mov.w     w1, [w0+6]

000044e8 <.LSM39>:
    self->IECy = IECy;
    44e8:	1e 00 78    	mov.w     [w14], w0
    44ea:	de 00 90    	mov.w     [w14+10], w1
    44ec:	41 00 98    	mov.w     w1, [w0+8]

000044ee <.LSM40>:
    self->flagbit = flagbit;
    44ee:	1e 00 78    	mov.w     [w14], w0
    44f0:	ce 48 90    	mov.b     [w14+12], w1
    44f2:	21 48 98    	mov.b     w1, [w0+10]

000044f4 <.LSM41>:
    self->octselnum = octselnum;
    44f4:	1e 00 78    	mov.w     [w14], w0
    44f6:	fe 00 90    	mov.w     [w14+14], w1
    44f8:	61 00 98    	mov.w     w1, [w0+12]

000044fa <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    44fa:	1e 00 78    	mov.w     [w14], w0
    44fc:	ce b8 97    	mov.w     [w14-8], w1
    44fe:	71 00 98    	mov.w     w1, [w0+14]

00004500 <.LSM43>:
    self->aftercount = 0;
    4500:	1e 00 78    	mov.w     [w14], w0
    4502:	80 00 eb    	clr.w     w1
    4504:	01 08 98    	mov.w     w1, [w0+16]

00004506 <.LSM44>:
    self->every = NULL;
    4506:	1e 00 78    	mov.w     [w14], w0
    4508:	80 00 eb    	clr.w     w1
    450a:	11 08 98    	mov.w     w1, [w0+18]

0000450c <.LSM45>:
    self->after = NULL;
    450c:	1e 00 78    	mov.w     [w14], w0
    450e:	80 00 eb    	clr.w     w1
    4510:	21 08 98    	mov.w     w1, [w0+20]

00004512 <.LSM46>:
}
    4512:	00 80 fa    	ulnk      
    4514:	00 00 06    	return    

00004516 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    4516:	06 00 fa    	lnk       #0x6
    4518:	88 1f 78    	mov.w     w8, [w15++]
    451a:	00 0f 78    	mov.w     w0, [w14]
    451c:	12 07 98    	mov.w     w2, [w14+2]
    451e:	23 07 98    	mov.w     w3, [w14+4]

00004520 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    4520:	18 c0 b3    	mov.b     #0x1, w8
    4522:	d2 7b 23    	mov.w     #0x37bd, w2
    4524:	63 f8 23    	mov.w     #0x3f86, w3
    4526:	1e 00 90    	mov.w     [w14+2], w0
    4528:	ae 00 90    	mov.w     [w14+4], w1
    452a:	46 e7 07    	rcall     0x13b8 <___gesf2>
    452c:	00 00 e0    	cp0.w     w0
    452e:	01 00 3c    	bra       GT, 0x4532 <.L14>
    4530:	00 44 eb    	clr.b     w8

00004532 <.L14>:
    4532:	08 04 e0    	cp0.b     w8
    4534:	69 00 3a    	bra       NZ, 0x4608 <.L23>

00004536 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    4536:	18 c0 b3    	mov.b     #0x1, w8
    4538:	d2 7b 23    	mov.w     #0x37bd, w2
    453a:	63 e8 23    	mov.w     #0x3e86, w3
    453c:	1e 00 90    	mov.w     [w14+2], w0
    453e:	ae 00 90    	mov.w     [w14+4], w1
    4540:	3b e7 07    	rcall     0x13b8 <___gesf2>
    4542:	00 00 e0    	cp0.w     w0
    4544:	01 00 3c    	bra       GT, 0x4548 <.L17>
    4546:	00 44 eb    	clr.b     w8

00004548 <.L17>:
    4548:	08 04 e0    	cp0.b     w8
    454a:	12 00 32    	bra       Z, 0x4570 <.L18>

0000454c <.LSM50>:
        timer_stop(self);
    454c:	1e 00 78    	mov.w     [w14], w0
    454e:	c4 00 07    	rcall     0x46d8 <_timer_stop>

00004550 <.LSM51>:
        poke(self->TxCON, 0x0030);
    4550:	1e 00 78    	mov.w     [w14], w0
    4552:	10 00 78    	mov.w     [w0], w0
    4554:	01 03 20    	mov.w     #0x30, w1
    4556:	01 08 78    	mov.w     w1, [w0]

00004558 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    4558:	1e 00 78    	mov.w     [w14], w0
    455a:	10 04 90    	mov.w     [w0+2], w8
    455c:	02 40 22    	mov.w     #0x2400, w2
    455e:	43 77 24    	mov.w     #0x4774, w3
    4560:	1e 00 90    	mov.w     [w14+2], w0
    4562:	ae 00 90    	mov.w     [w14+4], w1
    4564:	9b e7 07    	rcall     0x149c <___mulsf3>
    4566:	2a e7 07    	rcall     0x13bc <___fixunssfsi>
    4568:	00 00 78    	mov.w     w0, w0
    456a:	00 00 e9    	dec.w     w0, w0
    456c:	00 0c 78    	mov.w     w0, [w8]
    456e:	4d 00 37    	bra       0x460a <.L13>

00004570 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    4570:	18 c0 b3    	mov.b     #0x1, w8
    4572:	d2 7b 23    	mov.w     #0x37bd, w2
    4574:	63 d0 23    	mov.w     #0x3d06, w3
    4576:	1e 00 90    	mov.w     [w14+2], w0
    4578:	ae 00 90    	mov.w     [w14+4], w1
    457a:	1e e7 07    	rcall     0x13b8 <___gesf2>
    457c:	00 00 e0    	cp0.w     w0
    457e:	01 00 3c    	bra       GT, 0x4582 <.L19>
    4580:	00 44 eb    	clr.b     w8

00004582 <.L19>:
    4582:	08 04 e0    	cp0.b     w8
    4584:	12 00 32    	bra       Z, 0x45aa <.L20>

00004586 <.LSM54>:
        timer_stop(self);
    4586:	1e 00 78    	mov.w     [w14], w0
    4588:	a7 00 07    	rcall     0x46d8 <_timer_stop>

0000458a <.LSM55>:
        poke(self->TxCON, 0x0020);
    458a:	1e 00 78    	mov.w     [w14], w0
    458c:	10 00 78    	mov.w     [w0], w0
    458e:	01 02 20    	mov.w     #0x20, w1
    4590:	01 08 78    	mov.w     w1, [w0]

00004592 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    4592:	1e 00 78    	mov.w     [w14], w0
    4594:	10 04 90    	mov.w     [w0+2], w8
    4596:	02 40 22    	mov.w     #0x2400, w2
    4598:	43 87 24    	mov.w     #0x4874, w3
    459a:	1e 00 90    	mov.w     [w14+2], w0
    459c:	ae 00 90    	mov.w     [w14+4], w1
    459e:	7e e7 07    	rcall     0x149c <___mulsf3>
    45a0:	0d e7 07    	rcall     0x13bc <___fixunssfsi>
    45a2:	00 00 78    	mov.w     w0, w0
    45a4:	00 00 e9    	dec.w     w0, w0
    45a6:	00 0c 78    	mov.w     w0, [w8]
    45a8:	30 00 37    	bra       0x460a <.L13>

000045aa <.L20>:
    } else if (period>(65536.*TCY)) {
    45aa:	18 c0 b3    	mov.b     #0x1, w8
    45ac:	d2 7b 23    	mov.w     #0x37bd, w2
    45ae:	63 b8 23    	mov.w     #0x3b86, w3
    45b0:	1e 00 90    	mov.w     [w14+2], w0
    45b2:	ae 00 90    	mov.w     [w14+4], w1
    45b4:	01 e7 07    	rcall     0x13b8 <___gesf2>
    45b6:	00 00 e0    	cp0.w     w0
    45b8:	01 00 3c    	bra       GT, 0x45bc <.L21>
    45ba:	00 44 eb    	clr.b     w8

000045bc <.L21>:
    45bc:	08 04 e0    	cp0.b     w8
    45be:	12 00 32    	bra       Z, 0x45e4 <.L22>

000045c0 <.LSM58>:
        timer_stop(self);
    45c0:	1e 00 78    	mov.w     [w14], w0
    45c2:	8a 00 07    	rcall     0x46d8 <_timer_stop>

000045c4 <.LSM59>:
        poke(self->TxCON, 0x0010);
    45c4:	1e 00 78    	mov.w     [w14], w0
    45c6:	10 00 78    	mov.w     [w0], w0
    45c8:	01 01 20    	mov.w     #0x10, w1
    45ca:	01 08 78    	mov.w     w1, [w0]

000045cc <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    45cc:	1e 00 78    	mov.w     [w14], w0
    45ce:	10 04 90    	mov.w     [w0+2], w8
    45d0:	02 40 22    	mov.w     #0x2400, w2
    45d2:	43 9f 24    	mov.w     #0x49f4, w3
    45d4:	1e 00 90    	mov.w     [w14+2], w0
    45d6:	ae 00 90    	mov.w     [w14+4], w1
    45d8:	61 e7 07    	rcall     0x149c <___mulsf3>
    45da:	f0 e6 07    	rcall     0x13bc <___fixunssfsi>
    45dc:	00 00 78    	mov.w     w0, w0
    45de:	00 00 e9    	dec.w     w0, w0
    45e0:	00 0c 78    	mov.w     w0, [w8]
    45e2:	13 00 37    	bra       0x460a <.L13>

000045e4 <.L22>:
    } else {
        timer_stop(self);
    45e4:	1e 00 78    	mov.w     [w14], w0
    45e6:	78 00 07    	rcall     0x46d8 <_timer_stop>

000045e8 <.LSM62>:
        poke(self->TxCON, 0x0000);
    45e8:	1e 00 78    	mov.w     [w14], w0
    45ea:	10 00 78    	mov.w     [w0], w0
    45ec:	80 00 eb    	clr.w     w1
    45ee:	01 08 78    	mov.w     w1, [w0]

000045f0 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    45f0:	1e 00 78    	mov.w     [w14], w0
    45f2:	10 04 90    	mov.w     [w0+2], w8
    45f4:	02 40 22    	mov.w     #0x2400, w2
    45f6:	43 b7 24    	mov.w     #0x4b74, w3
    45f8:	1e 00 90    	mov.w     [w14+2], w0
    45fa:	ae 00 90    	mov.w     [w14+4], w1
    45fc:	4f e7 07    	rcall     0x149c <___mulsf3>
    45fe:	de e6 07    	rcall     0x13bc <___fixunssfsi>
    4600:	00 00 78    	mov.w     w0, w0
    4602:	00 00 e9    	dec.w     w0, w0
    4604:	00 0c 78    	mov.w     w0, [w8]
    4606:	01 00 37    	bra       0x460a <.L13>

00004608 <.L23>:
    4608:	00 00 00    	nop       

0000460a <.L13>:
    }
}
    460a:	4f 04 78    	mov.w     [--w15], w8
    460c:	00 80 fa    	ulnk      
    460e:	00 00 06    	return    

00004610 <_timer_period>:

float timer_period(_TIMER *self) {
    4610:	04 00 fa    	lnk       #0x4
    4612:	88 9f be    	mov.d     w8, [w15++]
    4614:	10 07 98    	mov.w     w0, [w14+2]

00004616 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    4616:	1e 00 90    	mov.w     [w14+2], w0
    4618:	10 00 78    	mov.w     [w0], w0
    461a:	90 00 78    	mov.w     [w0], w1
    461c:	00 03 20    	mov.w     #0x30, w0
    461e:	00 80 60    	and.w     w1, w0, w0
    4620:	44 00 de    	lsr.w     w0, #0x4, w0
    4622:	00 0f 78    	mov.w     w0, [w14]

00004624 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    4624:	1e 00 78    	mov.w     [w14], w0
    4626:	c2 00 dd    	sl.w      w0, #0x2, w1
    4628:	e0 de 21    	mov.w     #0x1dee, w0
    462a:	00 80 40    	add.w     w1, w0, w0
    462c:	10 04 be    	mov.d     [w0], w8
    462e:	1e 00 90    	mov.w     [w14+2], w0
    4630:	10 00 90    	mov.w     [w0+2], w0
    4632:	10 00 78    	mov.w     [w0], w0
    4634:	80 00 eb    	clr.w     w1
    4636:	dd e6 07    	rcall     0x13f2 <___floatunsisf>
    4638:	02 00 20    	mov.w     #0x0, w2
    463a:	03 f8 23    	mov.w     #0x3f80, w3
    463c:	1c e6 07    	rcall     0x1276 <___addsf3>
    463e:	00 01 be    	mov.d     w0, w2
    4640:	08 00 be    	mov.d     w8, w0
    4642:	2c e7 07    	rcall     0x149c <___mulsf3>

00004644 <.LSM69>:
}
    4644:	4f 04 be    	mov.d     [--w15], w8
    4646:	00 80 fa    	ulnk      
    4648:	00 00 06    	return    

0000464a <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    464a:	06 00 fa    	lnk       #0x6
    464c:	00 0f 78    	mov.w     w0, [w14]
    464e:	12 07 98    	mov.w     w2, [w14+2]
    4650:	23 07 98    	mov.w     w3, [w14+4]

00004652 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    4652:	1e 01 90    	mov.w     [w14+2], w2
    4654:	ae 01 90    	mov.w     [w14+4], w3
    4656:	00 00 20    	mov.w     #0x0, w0
    4658:	01 f8 23    	mov.w     #0x3f80, w1
    465a:	6a e6 07    	rcall     0x1330 <___divsf3>
    465c:	00 01 be    	mov.d     w0, w2
    465e:	1e 00 78    	mov.w     [w14], w0
    4660:	5a ff 07    	rcall     0x4516 <_timer_setPeriod>

00004662 <.LSM72>:
}
    4662:	00 80 fa    	ulnk      
    4664:	00 00 06    	return    

00004666 <_timer_freq>:

float timer_freq(_TIMER *self) {
    4666:	02 00 fa    	lnk       #0x2
    4668:	00 0f 78    	mov.w     w0, [w14]

0000466a <.LSM74>:
    return 1./timer_period(self);
    466a:	1e 00 78    	mov.w     [w14], w0
    466c:	d1 ff 07    	rcall     0x4610 <_timer_period>
    466e:	00 01 be    	mov.d     w0, w2
    4670:	00 00 20    	mov.w     #0x0, w0
    4672:	01 f8 23    	mov.w     #0x3f80, w1
    4674:	5d e6 07    	rcall     0x1330 <___divsf3>

00004676 <.LSM75>:
}
    4676:	00 80 fa    	ulnk      
    4678:	00 00 06    	return    

0000467a <_timer_time>:

float timer_time(_TIMER *self) {
    467a:	04 00 fa    	lnk       #0x4
    467c:	88 9f be    	mov.d     w8, [w15++]
    467e:	10 07 98    	mov.w     w0, [w14+2]

00004680 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    4680:	1e 00 90    	mov.w     [w14+2], w0
    4682:	10 00 78    	mov.w     [w0], w0
    4684:	90 00 78    	mov.w     [w0], w1
    4686:	00 03 20    	mov.w     #0x30, w0
    4688:	00 80 60    	and.w     w1, w0, w0
    468a:	44 00 de    	lsr.w     w0, #0x4, w0
    468c:	00 0f 78    	mov.w     w0, [w14]

0000468e <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    468e:	1e 00 78    	mov.w     [w14], w0
    4690:	c2 00 dd    	sl.w      w0, #0x2, w1
    4692:	e0 de 21    	mov.w     #0x1dee, w0
    4694:	00 80 40    	add.w     w1, w0, w0
    4696:	10 04 be    	mov.d     [w0], w8
    4698:	1e 00 90    	mov.w     [w14+2], w0
    469a:	10 00 90    	mov.w     [w0+2], w0
    469c:	10 00 78    	mov.w     [w0], w0
    469e:	80 00 eb    	clr.w     w1
    46a0:	a8 e6 07    	rcall     0x13f2 <___floatunsisf>
    46a2:	02 00 20    	mov.w     #0x0, w2
    46a4:	03 f8 23    	mov.w     #0x3f80, w3
    46a6:	e7 e5 07    	rcall     0x1276 <___addsf3>
    46a8:	00 01 be    	mov.d     w0, w2
    46aa:	08 00 be    	mov.d     w8, w0
    46ac:	f7 e6 07    	rcall     0x149c <___mulsf3>

000046ae <.LSM79>:
}
    46ae:	4f 04 be    	mov.d     [--w15], w8
    46b0:	00 80 fa    	ulnk      
    46b2:	00 00 06    	return    

000046b4 <_timer_start>:

void timer_start(_TIMER *self) {
    46b4:	02 00 fa    	lnk       #0x2
    46b6:	00 0f 78    	mov.w     w0, [w14]

000046b8 <.LSM81>:
    timer_lower(self);
    46b8:	1e 00 78    	mov.w     [w14], w0
    46ba:	2b 00 07    	rcall     0x4712 <_timer_lower>

000046bc <.LSM82>:
    poke(self->TMRx, 0);
    46bc:	1e 00 78    	mov.w     [w14], w0
    46be:	20 00 90    	mov.w     [w0+4], w0
    46c0:	80 00 eb    	clr.w     w1
    46c2:	01 08 78    	mov.w     w1, [w0]

000046c4 <.LSM83>:
    bitset(self->TxCON, 15);
    46c4:	1e 00 78    	mov.w     [w14], w0
    46c6:	10 00 78    	mov.w     [w0], w0
    46c8:	9e 00 78    	mov.w     [w14], w1
    46ca:	91 00 78    	mov.w     [w1], w1
    46cc:	11 01 78    	mov.w     [w1], w2
    46ce:	01 00 28    	mov.w     #0x8000, w1
    46d0:	82 80 70    	ior.w     w1, w2, w1
    46d2:	01 08 78    	mov.w     w1, [w0]

000046d4 <.LSM84>:
}
    46d4:	00 80 fa    	ulnk      
    46d6:	00 00 06    	return    

000046d8 <_timer_stop>:

void timer_stop(_TIMER *self) {
    46d8:	02 00 fa    	lnk       #0x2
    46da:	00 0f 78    	mov.w     w0, [w14]

000046dc <.LSM86>:
    bitclear(self->TxCON, 15);
    46dc:	1e 00 78    	mov.w     [w14], w0
    46de:	10 00 78    	mov.w     [w0], w0
    46e0:	9e 00 78    	mov.w     [w14], w1
    46e2:	91 00 78    	mov.w     [w1], w1
    46e4:	11 01 78    	mov.w     [w1], w2
    46e6:	f1 ff 27    	mov.w     #0x7fff, w1
    46e8:	81 00 61    	and.w     w2, w1, w1
    46ea:	01 08 78    	mov.w     w1, [w0]

000046ec <.LSM87>:
}
    46ec:	00 80 fa    	ulnk      
    46ee:	00 00 06    	return    

000046f0 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    46f0:	02 00 fa    	lnk       #0x2
    46f2:	00 0f 78    	mov.w     w0, [w14]

000046f4 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    46f4:	1e 00 78    	mov.w     [w14], w0
    46f6:	30 00 90    	mov.w     [w0+6], w0
    46f8:	90 00 78    	mov.w     [w0], w1
    46fa:	1e 00 78    	mov.w     [w14], w0
    46fc:	20 48 90    	mov.b     [w0+10], w0
    46fe:	00 80 fb    	ze        w0, w0
    4700:	12 00 20    	mov.w     #0x1, w2
    4702:	00 10 dd    	sl.w      w2, w0, w0
    4704:	00 80 60    	and.w     w1, w0, w0
    4706:	00 f0 a7    	btsc.w    w0, #0xf
    4708:	00 00 ea    	neg.w     w0, w0
    470a:	00 00 ea    	neg.w     w0, w0
    470c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000470e <.LSM90>:
}
    470e:	00 80 fa    	ulnk      
    4710:	00 00 06    	return    

00004712 <_timer_lower>:

void timer_lower(_TIMER *self) {
    4712:	02 00 fa    	lnk       #0x2
    4714:	00 0f 78    	mov.w     w0, [w14]

00004716 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    4716:	1e 00 78    	mov.w     [w14], w0
    4718:	30 00 90    	mov.w     [w0+6], w0
    471a:	9e 00 78    	mov.w     [w14], w1
    471c:	b1 00 90    	mov.w     [w1+6], w1
    471e:	11 01 78    	mov.w     [w1], w2
    4720:	9e 00 78    	mov.w     [w14], w1
    4722:	a1 48 90    	mov.b     [w1+10], w1
    4724:	81 80 fb    	ze        w1, w1
    4726:	13 00 20    	mov.w     #0x1, w3
    4728:	81 18 dd    	sl.w      w3, w1, w1
    472a:	81 80 ea    	com.w     w1, w1
    472c:	81 00 61    	and.w     w2, w1, w1
    472e:	01 08 78    	mov.w     w1, [w0]

00004730 <.LSM93>:
}
    4730:	00 80 fa    	ulnk      
    4732:	00 00 06    	return    

00004734 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    4734:	02 00 fa    	lnk       #0x2
    4736:	00 0f 78    	mov.w     w0, [w14]

00004738 <.LSM95>:
    return peek(self->TMRx);
    4738:	1e 00 78    	mov.w     [w14], w0
    473a:	20 00 90    	mov.w     [w0+4], w0
    473c:	10 00 78    	mov.w     [w0], w0

0000473e <.LSM96>:
}
    473e:	00 80 fa    	ulnk      
    4740:	00 00 06    	return    

00004742 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    4742:	02 00 fa    	lnk       #0x2
    4744:	00 0f 78    	mov.w     w0, [w14]

00004746 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    4746:	1e 00 78    	mov.w     [w14], w0
    4748:	40 00 90    	mov.w     [w0+8], w0
    474a:	9e 00 78    	mov.w     [w14], w1
    474c:	c1 00 90    	mov.w     [w1+8], w1
    474e:	11 01 78    	mov.w     [w1], w2
    4750:	9e 00 78    	mov.w     [w14], w1
    4752:	a1 48 90    	mov.b     [w1+10], w1
    4754:	81 80 fb    	ze        w1, w1
    4756:	13 00 20    	mov.w     #0x1, w3
    4758:	81 18 dd    	sl.w      w3, w1, w1
    475a:	82 80 70    	ior.w     w1, w2, w1
    475c:	01 08 78    	mov.w     w1, [w0]

0000475e <.LSM99>:
}
    475e:	00 80 fa    	ulnk      
    4760:	00 00 06    	return    

00004762 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    4762:	02 00 fa    	lnk       #0x2
    4764:	00 0f 78    	mov.w     w0, [w14]

00004766 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    4766:	1e 00 78    	mov.w     [w14], w0
    4768:	40 00 90    	mov.w     [w0+8], w0
    476a:	9e 00 78    	mov.w     [w14], w1
    476c:	c1 00 90    	mov.w     [w1+8], w1
    476e:	11 01 78    	mov.w     [w1], w2
    4770:	9e 00 78    	mov.w     [w14], w1
    4772:	a1 48 90    	mov.b     [w1+10], w1
    4774:	81 80 fb    	ze        w1, w1
    4776:	13 00 20    	mov.w     #0x1, w3
    4778:	81 18 dd    	sl.w      w3, w1, w1
    477a:	81 80 ea    	com.w     w1, w1
    477c:	81 00 61    	and.w     w2, w1, w1
    477e:	01 08 78    	mov.w     w1, [w0]

00004780 <.LSM102>:
}
    4780:	00 80 fa    	ulnk      
    4782:	00 00 06    	return    

00004784 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    4784:	08 00 fa    	lnk       #0x8
    4786:	00 0f 78    	mov.w     w0, [w14]
    4788:	12 07 98    	mov.w     w2, [w14+2]
    478a:	23 07 98    	mov.w     w3, [w14+4]
    478c:	31 07 98    	mov.w     w1, [w14+6]

0000478e <.LSM104>:
    timer_disableInterrupt(self);
    478e:	1e 00 78    	mov.w     [w14], w0
    4790:	e8 ff 07    	rcall     0x4762 <_timer_disableInterrupt>

00004792 <.LSM105>:
    timer_setPeriod(self, interval);
    4792:	1e 01 90    	mov.w     [w14+2], w2
    4794:	ae 01 90    	mov.w     [w14+4], w3
    4796:	1e 00 78    	mov.w     [w14], w0
    4798:	be fe 07    	rcall     0x4516 <_timer_setPeriod>

0000479a <.LSM106>:
    self->aftercount = 0;
    479a:	1e 00 78    	mov.w     [w14], w0
    479c:	80 00 eb    	clr.w     w1
    479e:	01 08 98    	mov.w     w1, [w0+16]

000047a0 <.LSM107>:
    self->every = callback;
    47a0:	1e 00 78    	mov.w     [w14], w0
    47a2:	be 00 90    	mov.w     [w14+6], w1
    47a4:	11 08 98    	mov.w     w1, [w0+18]

000047a6 <.LSM108>:
    self->after = NULL;
    47a6:	1e 00 78    	mov.w     [w14], w0
    47a8:	80 00 eb    	clr.w     w1
    47aa:	21 08 98    	mov.w     w1, [w0+20]

000047ac <.LSM109>:
    timer_enableInterrupt(self);
    47ac:	1e 00 78    	mov.w     [w14], w0
    47ae:	c9 ff 07    	rcall     0x4742 <_timer_enableInterrupt>

000047b0 <.LSM110>:
    timer_start(self);
    47b0:	1e 00 78    	mov.w     [w14], w0
    47b2:	80 ff 07    	rcall     0x46b4 <_timer_start>

000047b4 <.LSM111>:
}
    47b4:	00 80 fa    	ulnk      
    47b6:	00 00 06    	return    

000047b8 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    47b8:	0a 00 fa    	lnk       #0xa
    47ba:	00 0f 78    	mov.w     w0, [w14]
    47bc:	12 07 98    	mov.w     w2, [w14+2]
    47be:	23 07 98    	mov.w     w3, [w14+4]
    47c0:	31 07 98    	mov.w     w1, [w14+6]
    47c2:	44 07 98    	mov.w     w4, [w14+8]

000047c4 <.LSM113>:
    timer_disableInterrupt(self);
    47c4:	1e 00 78    	mov.w     [w14], w0
    47c6:	cd ff 07    	rcall     0x4762 <_timer_disableInterrupt>

000047c8 <.LSM114>:
    timer_setPeriod(self, delay);
    47c8:	1e 01 90    	mov.w     [w14+2], w2
    47ca:	ae 01 90    	mov.w     [w14+4], w3
    47cc:	1e 00 78    	mov.w     [w14], w0
    47ce:	a3 fe 07    	rcall     0x4516 <_timer_setPeriod>

000047d0 <.LSM115>:
    self->aftercount = num_times;
    47d0:	1e 00 78    	mov.w     [w14], w0
    47d2:	be 00 90    	mov.w     [w14+6], w1
    47d4:	01 08 98    	mov.w     w1, [w0+16]

000047d6 <.LSM116>:
    self->every = NULL;
    47d6:	1e 00 78    	mov.w     [w14], w0
    47d8:	80 00 eb    	clr.w     w1
    47da:	11 08 98    	mov.w     w1, [w0+18]

000047dc <.LSM117>:
    self->after = callback;
    47dc:	1e 00 78    	mov.w     [w14], w0
    47de:	ce 00 90    	mov.w     [w14+8], w1
    47e0:	21 08 98    	mov.w     w1, [w0+20]

000047e2 <.LSM118>:
    timer_enableInterrupt(self);
    47e2:	1e 00 78    	mov.w     [w14], w0
    47e4:	ae ff 07    	rcall     0x4742 <_timer_enableInterrupt>

000047e6 <.LSM119>:
    timer_start(self);
    47e6:	1e 00 78    	mov.w     [w14], w0
    47e8:	65 ff 07    	rcall     0x46b4 <_timer_start>

000047ea <.LSM120>:
}
    47ea:	00 80 fa    	ulnk      
    47ec:	00 00 06    	return    

000047ee <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    47ee:	02 00 fa    	lnk       #0x2
    47f0:	00 0f 78    	mov.w     w0, [w14]

000047f2 <.LSM122>:
    timer_disableInterrupt(self);
    47f2:	1e 00 78    	mov.w     [w14], w0
    47f4:	b6 ff 07    	rcall     0x4762 <_timer_disableInterrupt>

000047f6 <.LSM123>:
    timer_lower(self);
    47f6:	1e 00 78    	mov.w     [w14], w0
    47f8:	8c ff 07    	rcall     0x4712 <_timer_lower>

000047fa <.LSM124>:
    timer_stop(self);
    47fa:	1e 00 78    	mov.w     [w14], w0
    47fc:	6d ff 07    	rcall     0x46d8 <_timer_stop>

000047fe <.LSM125>:
    self->aftercount = 0;
    47fe:	1e 00 78    	mov.w     [w14], w0
    4800:	80 00 eb    	clr.w     w1
    4802:	01 08 98    	mov.w     w1, [w0+16]

00004804 <.LSM126>:
    self->every = NULL;
    4804:	1e 00 78    	mov.w     [w14], w0
    4806:	80 00 eb    	clr.w     w1
    4808:	11 08 98    	mov.w     w1, [w0+18]

0000480a <.LSM127>:
    self->after = NULL;
    480a:	1e 00 78    	mov.w     [w14], w0
    480c:	80 00 eb    	clr.w     w1
    480e:	21 08 98    	mov.w     w1, [w0+20]

00004810 <.LSM128>:
}
    4810:	00 80 fa    	ulnk      
    4812:	00 00 06    	return    

00004814 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    4814:	04 00 fa    	lnk       #0x4
    4816:	00 0f 78    	mov.w     w0, [w14]
    4818:	11 07 98    	mov.w     w1, [w14+2]

0000481a <.LSM1>:
    if (val)
    481a:	1e 00 90    	mov.w     [w14+2], w0
    481c:	00 00 e0    	cp0.w     w0
    481e:	0d 00 32    	bra       Z, 0x483a <.L2>

00004820 <.LSM2>:
        bitset(self->port, self->bit);
    4820:	1e 00 78    	mov.w     [w14], w0
    4822:	10 00 78    	mov.w     [w0], w0
    4824:	9e 00 78    	mov.w     [w14], w1
    4826:	91 00 78    	mov.w     [w1], w1
    4828:	11 01 78    	mov.w     [w1], w2
    482a:	9e 00 78    	mov.w     [w14], w1
    482c:	e1 40 90    	mov.b     [w1+6], w1
    482e:	81 80 fb    	ze        w1, w1
    4830:	13 00 20    	mov.w     #0x1, w3
    4832:	81 18 dd    	sl.w      w3, w1, w1
    4834:	82 80 70    	ior.w     w1, w2, w1
    4836:	01 08 78    	mov.w     w1, [w0]
    4838:	0d 00 37    	bra       0x4854 <.L1>

0000483a <.L2>:
    else
        bitclear(self->port, self->bit);
    483a:	1e 00 78    	mov.w     [w14], w0
    483c:	10 00 78    	mov.w     [w0], w0
    483e:	9e 00 78    	mov.w     [w14], w1
    4840:	91 00 78    	mov.w     [w1], w1
    4842:	11 01 78    	mov.w     [w1], w2
    4844:	9e 00 78    	mov.w     [w14], w1
    4846:	e1 40 90    	mov.b     [w1+6], w1
    4848:	81 80 fb    	ze        w1, w1
    484a:	13 00 20    	mov.w     #0x1, w3
    484c:	81 18 dd    	sl.w      w3, w1, w1
    484e:	81 80 ea    	com.w     w1, w1
    4850:	81 00 61    	and.w     w2, w1, w1
    4852:	01 08 78    	mov.w     w1, [w0]

00004854 <.L1>:
}
    4854:	00 80 fa    	ulnk      
    4856:	00 00 06    	return    

00004858 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    4858:	02 00 fa    	lnk       #0x2
    485a:	00 0f 78    	mov.w     w0, [w14]

0000485c <.LSM6>:
    return bitread(self->port, self->bit);
    485c:	1e 00 78    	mov.w     [w14], w0
    485e:	10 00 78    	mov.w     [w0], w0
    4860:	90 00 78    	mov.w     [w0], w1
    4862:	1e 00 78    	mov.w     [w14], w0
    4864:	60 40 90    	mov.b     [w0+6], w0
    4866:	00 80 fb    	ze        w0, w0
    4868:	12 00 20    	mov.w     #0x1, w2
    486a:	00 10 dd    	sl.w      w2, w0, w0
    486c:	00 80 60    	and.w     w1, w0, w0
    486e:	00 f0 a7    	btsc.w    w0, #0xf
    4870:	00 00 ea    	neg.w     w0, w0
    4872:	00 00 ea    	neg.w     w0, w0
    4874:	4f 00 de    	lsr.w     w0, #0xf, w0

00004876 <.LSM7>:
}
    4876:	00 80 fa    	ulnk      
    4878:	00 00 06    	return    

0000487a <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    487a:	02 00 fa    	lnk       #0x2
    487c:	00 0f 78    	mov.w     w0, [w14]

0000487e <.LSM9>:
    AD1CHS = self->annum;
    487e:	1e 00 78    	mov.w     [w14], w0
    4880:	40 00 90    	mov.w     [w0+8], w0
    4882:	40 19 88    	mov.w     w0, 0x328

00004884 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    4884:	20 23 a8    	bset.b    0x320, #0x1

00004886 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    4886:	00 00 00    	nop       

00004888 <.L6>:
    4888:	00 19 80    	mov.w     0x320, w0
    488a:	61 00 60    	and.w     w0, #0x1, w0
    488c:	00 00 e0    	cp0.w     w0
    488e:	fc ff 32    	bra       Z, 0x4888 <.L6>

00004890 <.LSM12>:
    return ADC1BUF0;
    4890:	00 18 80    	mov.w     0x300, w0

00004892 <.LSM13>:
}
    4892:	00 80 fa    	ulnk      
    4894:	00 00 06    	return    

00004896 <_init_pin>:

void init_pin(void) {
    4896:	02 00 fa    	lnk       #0x2

00004898 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4898:	40 6d 20    	mov.w     #0x6d4, w0
    489a:	80 1f 78    	mov.w     w0, [w15++]
    489c:	47 01 20    	mov.w     #0x14, w7
    489e:	00 43 eb    	clr.b     w6
    48a0:	80 82 eb    	setm.w    w5
    48a2:	54 c0 b3    	mov.b     #0x5, w4
    48a4:	80 01 eb    	clr.w     w3
    48a6:	82 2d 20    	mov.w     #0x2d8, w2
    48a8:	a1 2d 20    	mov.w     #0x2da, w1
    48aa:	80 a4 21    	mov.w     #0x1a48, w0
    48ac:	08 01 07    	rcall     0x4abe <_pin_init>
    48ae:	8f 87 e9    	dec2.w    w15, w15

000048b0 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    48b0:	80 6d 20    	mov.w     #0x6d8, w0
    48b2:	80 1f 78    	mov.w     w0, [w15++]
    48b4:	97 01 20    	mov.w     #0x19, w7
    48b6:	86 c0 b3    	mov.b     #0x8, w6
    48b8:	80 82 eb    	setm.w    w5
    48ba:	44 c0 b3    	mov.b     #0x4, w4
    48bc:	80 01 eb    	clr.w     w3
    48be:	82 2d 20    	mov.w     #0x2d8, w2
    48c0:	a1 2d 20    	mov.w     #0x2da, w1
    48c2:	e0 a5 21    	mov.w     #0x1a5e, w0
    48c4:	fc 00 07    	rcall     0x4abe <_pin_init>
    48c6:	8f 87 e9    	dec2.w    w15, w15

000048c8 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    48c8:	a0 6c 20    	mov.w     #0x6ca, w0
    48ca:	80 1f 78    	mov.w     w0, [w15++]
    48cc:	a7 00 20    	mov.w     #0xa, w7
    48ce:	00 43 eb    	clr.b     w6
    48d0:	80 82 eb    	setm.w    w5
    48d2:	44 c0 b3    	mov.b     #0x4, w4
    48d4:	80 01 eb    	clr.w     w3
    48d6:	82 2e 20    	mov.w     #0x2e8, w2
    48d8:	a1 2e 20    	mov.w     #0x2ea, w1
    48da:	40 a7 21    	mov.w     #0x1a74, w0
    48dc:	f0 00 07    	rcall     0x4abe <_pin_init>
    48de:	8f 87 e9    	dec2.w    w15, w15

000048e0 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    48e0:	00 6d 20    	mov.w     #0x6d0, w0
    48e2:	80 1f 78    	mov.w     w0, [w15++]
    48e4:	17 01 20    	mov.w     #0x11, w7
    48e6:	86 c0 b3    	mov.b     #0x8, w6
    48e8:	80 82 eb    	setm.w    w5
    48ea:	54 c0 b3    	mov.b     #0x5, w4
    48ec:	80 01 eb    	clr.w     w3
    48ee:	82 2e 20    	mov.w     #0x2e8, w2
    48f0:	a1 2e 20    	mov.w     #0x2ea, w1
    48f2:	a0 a8 21    	mov.w     #0x1a8a, w0
    48f4:	e4 00 07    	rcall     0x4abe <_pin_init>
    48f6:	8f 87 e9    	dec2.w    w15, w15

000048f8 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    48f8:	c0 6d 20    	mov.w     #0x6dc, w0
    48fa:	80 1f 78    	mov.w     w0, [w15++]
    48fc:	d7 01 20    	mov.w     #0x1d, w7
    48fe:	86 c0 b3    	mov.b     #0x8, w6
    4900:	f5 00 20    	mov.w     #0xf, w5
    4902:	f4 c0 b3    	mov.b     #0xf, w4
    4904:	23 4e 20    	mov.w     #0x4e2, w3
    4906:	82 2c 20    	mov.w     #0x2c8, w2
    4908:	a1 2c 20    	mov.w     #0x2ca, w1
    490a:	00 aa 21    	mov.w     #0x1aa0, w0
    490c:	d8 00 07    	rcall     0x4abe <_pin_init>
    490e:	8f 87 e9    	dec2.w    w15, w15

00004910 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4910:	00 6d 20    	mov.w     #0x6d0, w0
    4912:	80 1f 78    	mov.w     w0, [w15++]
    4914:	07 01 20    	mov.w     #0x10, w7
    4916:	00 43 eb    	clr.b     w6
    4918:	80 82 eb    	setm.w    w5
    491a:	34 c0 b3    	mov.b     #0x3, w4
    491c:	80 01 eb    	clr.w     w3
    491e:	82 2e 20    	mov.w     #0x2e8, w2
    4920:	a1 2e 20    	mov.w     #0x2ea, w1
    4922:	60 ab 21    	mov.w     #0x1ab6, w0
    4924:	cc 00 07    	rcall     0x4abe <_pin_init>
    4926:	8f 87 e9    	dec2.w    w15, w15

00004928 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4928:	20 6c 20    	mov.w     #0x6c2, w0
    492a:	80 1f 78    	mov.w     w0, [w15++]
    492c:	27 00 20    	mov.w     #0x2, w7
    492e:	00 43 eb    	clr.b     w6
    4930:	80 82 eb    	setm.w    w5
    4932:	84 c0 b3    	mov.b     #0x8, w4
    4934:	80 01 eb    	clr.w     w3
    4936:	82 2d 20    	mov.w     #0x2d8, w2
    4938:	a1 2d 20    	mov.w     #0x2da, w1
    493a:	c0 ac 21    	mov.w     #0x1acc, w0
    493c:	c0 00 07    	rcall     0x4abe <_pin_init>
    493e:	8f 87 e9    	dec2.w    w15, w15

00004940 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4940:	c0 6c 20    	mov.w     #0x6cc, w0
    4942:	80 1f 78    	mov.w     w0, [w15++]
    4944:	c7 00 20    	mov.w     #0xc, w7
    4946:	00 43 eb    	clr.b     w6
    4948:	80 82 eb    	setm.w    w5
    494a:	b4 c0 b3    	mov.b     #0xb, w4
    494c:	80 01 eb    	clr.w     w3
    494e:	82 2d 20    	mov.w     #0x2d8, w2
    4950:	a1 2d 20    	mov.w     #0x2da, w1
    4952:	20 ae 21    	mov.w     #0x1ae2, w0
    4954:	b4 00 07    	rcall     0x4abe <_pin_init>
    4956:	8f 87 e9    	dec2.w    w15, w15

00004958 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4958:	40 6c 20    	mov.w     #0x6c4, w0
    495a:	80 1f 78    	mov.w     w0, [w15++]
    495c:	47 00 20    	mov.w     #0x4, w7
    495e:	00 43 eb    	clr.b     w6
    4960:	80 82 eb    	setm.w    w5
    4962:	94 c0 b3    	mov.b     #0x9, w4
    4964:	80 01 eb    	clr.w     w3
    4966:	82 2d 20    	mov.w     #0x2d8, w2
    4968:	a1 2d 20    	mov.w     #0x2da, w1
    496a:	80 af 21    	mov.w     #0x1af8, w0
    496c:	a8 00 07    	rcall     0x4abe <_pin_init>
    496e:	8f 87 e9    	dec2.w    w15, w15

00004970 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4970:	20 6c 20    	mov.w     #0x6c2, w0
    4972:	80 1f 78    	mov.w     w0, [w15++]
    4974:	37 00 20    	mov.w     #0x3, w7
    4976:	86 c0 b3    	mov.b     #0x8, w6
    4978:	80 82 eb    	setm.w    w5
    497a:	a4 c0 b3    	mov.b     #0xa, w4
    497c:	80 01 eb    	clr.w     w3
    497e:	82 2d 20    	mov.w     #0x2d8, w2
    4980:	a1 2d 20    	mov.w     #0x2da, w1
    4982:	e0 b0 21    	mov.w     #0x1b0e, w0
    4984:	9c 00 07    	rcall     0x4abe <_pin_init>
    4986:	8f 87 e9    	dec2.w    w15, w15

00004988 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4988:	a0 6c 20    	mov.w     #0x6ca, w0
    498a:	80 1f 78    	mov.w     w0, [w15++]
    498c:	b7 00 20    	mov.w     #0xb, w7
    498e:	86 c0 b3    	mov.b     #0x8, w6
    4990:	80 82 eb    	setm.w    w5
    4992:	00 42 eb    	clr.b     w4
    4994:	80 01 eb    	clr.w     w3
    4996:	82 2d 20    	mov.w     #0x2d8, w2
    4998:	a1 2d 20    	mov.w     #0x2da, w1
    499a:	40 b2 21    	mov.w     #0x1b24, w0
    499c:	90 00 07    	rcall     0x4abe <_pin_init>
    499e:	8f 87 e9    	dec2.w    w15, w15

000049a0 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    49a0:	80 6d 20    	mov.w     #0x6d8, w0
    49a2:	80 1f 78    	mov.w     w0, [w15++]
    49a4:	87 01 20    	mov.w     #0x18, w7
    49a6:	00 43 eb    	clr.b     w6
    49a8:	80 82 eb    	setm.w    w5
    49aa:	14 c0 b3    	mov.b     #0x1, w4
    49ac:	80 01 eb    	clr.w     w3
    49ae:	82 2d 20    	mov.w     #0x2d8, w2
    49b0:	a1 2d 20    	mov.w     #0x2da, w1
    49b2:	a0 b3 21    	mov.w     #0x1b3a, w0
    49b4:	84 00 07    	rcall     0x4abe <_pin_init>
    49b6:	8f 87 e9    	dec2.w    w15, w15

000049b8 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    49b8:	60 6d 20    	mov.w     #0x6d6, w0
    49ba:	80 1f 78    	mov.w     w0, [w15++]
    49bc:	77 01 20    	mov.w     #0x17, w7
    49be:	86 c0 b3    	mov.b     #0x8, w6
    49c0:	80 82 eb    	setm.w    w5
    49c2:	24 c0 b3    	mov.b     #0x2, w4
    49c4:	80 01 eb    	clr.w     w3
    49c6:	82 2d 20    	mov.w     #0x2d8, w2
    49c8:	a1 2d 20    	mov.w     #0x2da, w1
    49ca:	00 b5 21    	mov.w     #0x1b50, w0
    49cc:	78 00 07    	rcall     0x4abe <_pin_init>
    49ce:	8f 87 e9    	dec2.w    w15, w15

000049d0 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    49d0:	60 6d 20    	mov.w     #0x6d6, w0
    49d2:	80 1f 78    	mov.w     w0, [w15++]
    49d4:	67 01 20    	mov.w     #0x16, w7
    49d6:	00 43 eb    	clr.b     w6
    49d8:	80 82 eb    	setm.w    w5
    49da:	34 c0 b3    	mov.b     #0x3, w4
    49dc:	80 01 eb    	clr.w     w3
    49de:	82 2d 20    	mov.w     #0x2d8, w2
    49e0:	a1 2d 20    	mov.w     #0x2da, w1
    49e2:	60 b6 21    	mov.w     #0x1b66, w0
    49e4:	6c 00 07    	rcall     0x4abe <_pin_init>
    49e6:	8f 87 e9    	dec2.w    w15, w15

000049e8 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    49e8:	00 6c 20    	mov.w     #0x6c0, w0
    49ea:	80 1f 78    	mov.w     w0, [w15++]
    49ec:	80 03 eb    	clr.w     w7
    49ee:	00 43 eb    	clr.b     w6
    49f0:	80 02 eb    	clr.w     w5
    49f2:	00 42 eb    	clr.b     w4
    49f4:	23 4e 20    	mov.w     #0x4e2, w3
    49f6:	82 2c 20    	mov.w     #0x2c8, w2
    49f8:	a1 2c 20    	mov.w     #0x2ca, w1
    49fa:	a0 be 21    	mov.w     #0x1bea, w0
    49fc:	60 00 07    	rcall     0x4abe <_pin_init>
    49fe:	8f 87 e9    	dec2.w    w15, w15

00004a00 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4a00:	00 6c 20    	mov.w     #0x6c0, w0
    4a02:	80 1f 78    	mov.w     w0, [w15++]
    4a04:	17 00 20    	mov.w     #0x1, w7
    4a06:	86 c0 b3    	mov.b     #0x8, w6
    4a08:	15 00 20    	mov.w     #0x1, w5
    4a0a:	14 c0 b3    	mov.b     #0x1, w4
    4a0c:	23 4e 20    	mov.w     #0x4e2, w3
    4a0e:	82 2c 20    	mov.w     #0x2c8, w2
    4a10:	a1 2c 20    	mov.w     #0x2ca, w1
    4a12:	40 bd 21    	mov.w     #0x1bd4, w0
    4a14:	54 00 07    	rcall     0x4abe <_pin_init>
    4a16:	8f 87 e9    	dec2.w    w15, w15

00004a18 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4a18:	c0 6c 20    	mov.w     #0x6cc, w0
    4a1a:	80 1f 78    	mov.w     w0, [w15++]
    4a1c:	d7 00 20    	mov.w     #0xd, w7
    4a1e:	86 c0 b3    	mov.b     #0x8, w6
    4a20:	25 00 20    	mov.w     #0x2, w5
    4a22:	24 c0 b3    	mov.b     #0x2, w4
    4a24:	23 4e 20    	mov.w     #0x4e2, w3
    4a26:	82 2c 20    	mov.w     #0x2c8, w2
    4a28:	a1 2c 20    	mov.w     #0x2ca, w1
    4a2a:	e0 bb 21    	mov.w     #0x1bbe, w0
    4a2c:	48 00 07    	rcall     0x4abe <_pin_init>
    4a2e:	8f 87 e9    	dec2.w    w15, w15

00004a30 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4a30:	00 00 eb    	clr.w     w0
    4a32:	80 1f 78    	mov.w     w0, [w15++]
    4a34:	80 83 eb    	setm.w    w7
    4a36:	00 43 eb    	clr.b     w6
    4a38:	35 00 20    	mov.w     #0x3, w5
    4a3a:	34 c0 b3    	mov.b     #0x3, w4
    4a3c:	23 4e 20    	mov.w     #0x4e2, w3
    4a3e:	82 2c 20    	mov.w     #0x2c8, w2
    4a40:	a1 2c 20    	mov.w     #0x2ca, w1
    4a42:	80 ba 21    	mov.w     #0x1ba8, w0
    4a44:	3c 00 07    	rcall     0x4abe <_pin_init>
    4a46:	8f 87 e9    	dec2.w    w15, w15

00004a48 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4a48:	c0 6d 20    	mov.w     #0x6dc, w0
    4a4a:	80 1f 78    	mov.w     w0, [w15++]
    4a4c:	c7 01 20    	mov.w     #0x1c, w7
    4a4e:	00 43 eb    	clr.b     w6
    4a50:	45 00 20    	mov.w     #0x4, w5
    4a52:	44 c0 b3    	mov.b     #0x4, w4
    4a54:	23 4e 20    	mov.w     #0x4e2, w3
    4a56:	82 2c 20    	mov.w     #0x2c8, w2
    4a58:	a1 2c 20    	mov.w     #0x2ca, w1
    4a5a:	20 b9 21    	mov.w     #0x1b92, w0
    4a5c:	30 00 07    	rcall     0x4abe <_pin_init>
    4a5e:	8f 87 e9    	dec2.w    w15, w15

00004a60 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4a60:	20 6d 20    	mov.w     #0x6d2, w0
    4a62:	80 1f 78    	mov.w     w0, [w15++]
    4a64:	27 01 20    	mov.w     #0x12, w7
    4a66:	00 43 eb    	clr.b     w6
    4a68:	55 00 20    	mov.w     #0x5, w5
    4a6a:	54 c0 b3    	mov.b     #0x5, w4
    4a6c:	23 4e 20    	mov.w     #0x4e2, w3
    4a6e:	82 2c 20    	mov.w     #0x2c8, w2
    4a70:	a1 2c 20    	mov.w     #0x2ca, w1
    4a72:	c0 b7 21    	mov.w     #0x1b7c, w0
    4a74:	24 00 07    	rcall     0x4abe <_pin_init>
    4a76:	8f 87 e9    	dec2.w    w15, w15

00004a78 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    4a78:	00 00 eb    	clr.w     w0
    4a7a:	00 0f 78    	mov.w     w0, [w14]
    4a7c:	07 00 37    	bra       0x4a8c <.L8>

00004a7e <.L9>:
        pin_digitalIn(&D[i]);
    4a7e:	1e 00 78    	mov.w     [w14], w0
    4a80:	76 00 b9    	mul.su    w0, #0x16, w0
    4a82:	80 00 78    	mov.w     w0, w1
    4a84:	80 a4 21    	mov.w     #0x1a48, w0
    4a86:	00 80 40    	add.w     w1, w0, w0
    4a88:	46 00 07    	rcall     0x4b16 <_pin_digitalIn>

00004a8a <.LSM37>:
    4a8a:	1e 0f e8    	inc.w     [w14], [w14]

00004a8c <.L8>:
    4a8c:	1e 00 78    	mov.w     [w14], w0
    4a8e:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    4a90:	f6 ff 36    	bra       LEU, 0x4a7e <.L9>

00004a92 <.LSM38>:
    for (i = 0; i<6; i++)
    4a92:	00 00 eb    	clr.w     w0
    4a94:	00 0f 78    	mov.w     w0, [w14]
    4a96:	07 00 37    	bra       0x4aa6 <.L10>

00004a98 <.L11>:
        pin_analogIn(&A[i]);
    4a98:	1e 00 78    	mov.w     [w14], w0
    4a9a:	76 00 b9    	mul.su    w0, #0x16, w0
    4a9c:	80 00 78    	mov.w     w0, w1
    4a9e:	c0 b7 21    	mov.w     #0x1b7c, w0
    4aa0:	00 80 40    	add.w     w1, w0, w0
    4aa2:	95 00 07    	rcall     0x4bce <_pin_analogIn>

00004aa4 <.LSM40>:
    4aa4:	1e 0f e8    	inc.w     [w14], [w14]

00004aa6 <.L10>:
    4aa6:	1e 00 78    	mov.w     [w14], w0
    4aa8:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    4aaa:	f6 ff 36    	bra       LEU, 0x4a98 <.L11>

00004aac <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    4aac:	00 2e 20    	mov.w     #0x2e0, w0
    4aae:	00 19 88    	mov.w     w0, 0x320

00004ab0 <.LSM42>:
    AD1CON2 = 0;
    4ab0:	22 23 ef    	clr.w     0x322

00004ab2 <.LSM43>:
    AD1CON3 = 0x0C40;
    4ab2:	00 c4 20    	mov.w     #0xc40, w0
    4ab4:	20 19 88    	mov.w     w0, 0x324

00004ab6 <.LSM44>:
    AD1CHS = 0;
    4ab6:	28 23 ef    	clr.w     0x328

00004ab8 <.LSM45>:
    AD1CON1bits.ADON = 1;
    4ab8:	21 e3 a8    	bset.b    0x321, #0x7

00004aba <.LSM46>:
}
    4aba:	00 80 fa    	ulnk      
    4abc:	00 00 06    	return    

00004abe <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    4abe:	10 00 fa    	lnk       #0x10
    4ac0:	00 0f 78    	mov.w     w0, [w14]
    4ac2:	11 07 98    	mov.w     w1, [w14+2]
    4ac4:	22 07 98    	mov.w     w2, [w14+4]
    4ac6:	33 07 98    	mov.w     w3, [w14+6]
    4ac8:	04 4f 98    	mov.b     w4, [w14+8]
    4aca:	55 07 98    	mov.w     w5, [w14+10]
    4acc:	46 4f 98    	mov.b     w6, [w14+12]
    4ace:	77 07 98    	mov.w     w7, [w14+14]

00004ad0 <.LSM48>:
    self->port = port;
    4ad0:	1e 00 78    	mov.w     [w14], w0
    4ad2:	9e 00 90    	mov.w     [w14+2], w1
    4ad4:	01 08 78    	mov.w     w1, [w0]

00004ad6 <.LSM49>:
    self->tris = tris;
    4ad6:	1e 00 78    	mov.w     [w14], w0
    4ad8:	ae 00 90    	mov.w     [w14+4], w1
    4ada:	11 00 98    	mov.w     w1, [w0+2]

00004adc <.LSM50>:
    self->ans = ans;
    4adc:	1e 00 78    	mov.w     [w14], w0
    4ade:	be 00 90    	mov.w     [w14+6], w1
    4ae0:	21 00 98    	mov.w     w1, [w0+4]

00004ae2 <.LSM51>:
    self->bit = bit;
    4ae2:	1e 00 78    	mov.w     [w14], w0
    4ae4:	8e 48 90    	mov.b     [w14+8], w1
    4ae6:	61 40 98    	mov.b     w1, [w0+6]

00004ae8 <.LSM52>:
    self->annum = annum;
    4ae8:	1e 00 78    	mov.w     [w14], w0
    4aea:	de 00 90    	mov.w     [w14+10], w1
    4aec:	41 00 98    	mov.w     w1, [w0+8]

00004aee <.LSM53>:
    self->rpshift = rpshift;
    4aee:	1e 00 78    	mov.w     [w14], w0
    4af0:	ce 48 90    	mov.b     [w14+12], w1
    4af2:	21 48 98    	mov.b     w1, [w0+10]

00004af4 <.LSM54>:
    self->rpnum = rpnum;
    4af4:	fe 00 90    	mov.w     [w14+14], w1
    4af6:	1e 00 78    	mov.w     [w14], w0
    4af8:	61 00 98    	mov.w     w1, [w0+12]

00004afa <.LSM55>:
    self->rpor = rpor;
    4afa:	1e 00 78    	mov.w     [w14], w0
    4afc:	ce b8 97    	mov.w     [w14-8], w1
    4afe:	71 00 98    	mov.w     w1, [w0+14]

00004b00 <.LSM56>:
    self->owner = NULL;
    4b00:	1e 00 78    	mov.w     [w14], w0
    4b02:	80 00 eb    	clr.w     w1
    4b04:	01 08 98    	mov.w     w1, [w0+16]

00004b06 <.LSM57>:
    self->write = NULL;
    4b06:	1e 00 78    	mov.w     [w14], w0
    4b08:	80 00 eb    	clr.w     w1
    4b0a:	11 08 98    	mov.w     w1, [w0+18]

00004b0c <.LSM58>:
    self->read = NULL;
    4b0c:	1e 00 78    	mov.w     [w14], w0
    4b0e:	80 00 eb    	clr.w     w1
    4b10:	21 08 98    	mov.w     w1, [w0+20]

00004b12 <.LSM59>:
}
    4b12:	00 80 fa    	ulnk      
    4b14:	00 00 06    	return    

00004b16 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    4b16:	02 00 fa    	lnk       #0x2
    4b18:	00 0f 78    	mov.w     w0, [w14]

00004b1a <.LSM61>:
    if (self->ans)
    4b1a:	1e 00 78    	mov.w     [w14], w0
    4b1c:	20 00 90    	mov.w     [w0+4], w0
    4b1e:	00 00 e0    	cp0.w     w0
    4b20:	0d 00 32    	bra       Z, 0x4b3c <.L14>

00004b22 <.LSM62>:
        bitclear(self->ans, self->bit);
    4b22:	1e 00 78    	mov.w     [w14], w0
    4b24:	20 00 90    	mov.w     [w0+4], w0
    4b26:	9e 00 78    	mov.w     [w14], w1
    4b28:	a1 00 90    	mov.w     [w1+4], w1
    4b2a:	11 01 78    	mov.w     [w1], w2
    4b2c:	9e 00 78    	mov.w     [w14], w1
    4b2e:	e1 40 90    	mov.b     [w1+6], w1
    4b30:	81 80 fb    	ze        w1, w1
    4b32:	13 00 20    	mov.w     #0x1, w3
    4b34:	81 18 dd    	sl.w      w3, w1, w1
    4b36:	81 80 ea    	com.w     w1, w1
    4b38:	81 00 61    	and.w     w2, w1, w1
    4b3a:	01 08 78    	mov.w     w1, [w0]

00004b3c <.L14>:
    bitset(self->tris, self->bit);
    4b3c:	1e 00 78    	mov.w     [w14], w0
    4b3e:	10 00 90    	mov.w     [w0+2], w0
    4b40:	9e 00 78    	mov.w     [w14], w1
    4b42:	91 00 90    	mov.w     [w1+2], w1
    4b44:	11 01 78    	mov.w     [w1], w2
    4b46:	9e 00 78    	mov.w     [w14], w1
    4b48:	e1 40 90    	mov.b     [w1+6], w1
    4b4a:	81 80 fb    	ze        w1, w1
    4b4c:	13 00 20    	mov.w     #0x1, w3
    4b4e:	81 18 dd    	sl.w      w3, w1, w1
    4b50:	82 80 70    	ior.w     w1, w2, w1
    4b52:	01 08 78    	mov.w     w1, [w0]

00004b54 <.LSM64>:
    self->write = NULL;
    4b54:	1e 00 78    	mov.w     [w14], w0
    4b56:	80 00 eb    	clr.w     w1
    4b58:	11 08 98    	mov.w     w1, [w0+18]

00004b5a <.LSM65>:
    self->read = __digitalRead;    
    4b5a:	1e 00 78    	mov.w     [w14], w0
    4b5c:	81 85 24    	mov.w     #0x4858, w1
    4b5e:	21 08 98    	mov.w     w1, [w0+20]

00004b60 <.LSM66>:
}
    4b60:	00 80 fa    	ulnk      
    4b62:	00 00 06    	return    

00004b64 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    4b64:	02 00 fa    	lnk       #0x2
    4b66:	00 0f 78    	mov.w     w0, [w14]

00004b68 <.LSM68>:
    if (self->ans)
    4b68:	1e 00 78    	mov.w     [w14], w0
    4b6a:	20 00 90    	mov.w     [w0+4], w0
    4b6c:	00 00 e0    	cp0.w     w0
    4b6e:	0d 00 32    	bra       Z, 0x4b8a <.L16>

00004b70 <.LSM69>:
        bitclear(self->ans, self->bit);
    4b70:	1e 00 78    	mov.w     [w14], w0
    4b72:	20 00 90    	mov.w     [w0+4], w0
    4b74:	9e 00 78    	mov.w     [w14], w1
    4b76:	a1 00 90    	mov.w     [w1+4], w1
    4b78:	11 01 78    	mov.w     [w1], w2
    4b7a:	9e 00 78    	mov.w     [w14], w1
    4b7c:	e1 40 90    	mov.b     [w1+6], w1
    4b7e:	81 80 fb    	ze        w1, w1
    4b80:	13 00 20    	mov.w     #0x1, w3
    4b82:	81 18 dd    	sl.w      w3, w1, w1
    4b84:	81 80 ea    	com.w     w1, w1
    4b86:	81 00 61    	and.w     w2, w1, w1
    4b88:	01 08 78    	mov.w     w1, [w0]

00004b8a <.L16>:
    bitclear(self->port, self->bit);
    4b8a:	1e 00 78    	mov.w     [w14], w0
    4b8c:	10 00 78    	mov.w     [w0], w0
    4b8e:	9e 00 78    	mov.w     [w14], w1
    4b90:	91 00 78    	mov.w     [w1], w1
    4b92:	11 01 78    	mov.w     [w1], w2
    4b94:	9e 00 78    	mov.w     [w14], w1
    4b96:	e1 40 90    	mov.b     [w1+6], w1
    4b98:	81 80 fb    	ze        w1, w1
    4b9a:	13 00 20    	mov.w     #0x1, w3
    4b9c:	81 18 dd    	sl.w      w3, w1, w1
    4b9e:	81 80 ea    	com.w     w1, w1
    4ba0:	81 00 61    	and.w     w2, w1, w1
    4ba2:	01 08 78    	mov.w     w1, [w0]

00004ba4 <.LSM71>:
    bitclear(self->tris, self->bit);
    4ba4:	1e 00 78    	mov.w     [w14], w0
    4ba6:	10 00 90    	mov.w     [w0+2], w0
    4ba8:	9e 00 78    	mov.w     [w14], w1
    4baa:	91 00 90    	mov.w     [w1+2], w1
    4bac:	11 01 78    	mov.w     [w1], w2
    4bae:	9e 00 78    	mov.w     [w14], w1
    4bb0:	e1 40 90    	mov.b     [w1+6], w1
    4bb2:	81 80 fb    	ze        w1, w1
    4bb4:	13 00 20    	mov.w     #0x1, w3
    4bb6:	81 18 dd    	sl.w      w3, w1, w1
    4bb8:	81 80 ea    	com.w     w1, w1
    4bba:	81 00 61    	and.w     w2, w1, w1
    4bbc:	01 08 78    	mov.w     w1, [w0]

00004bbe <.LSM72>:
    self->write = __digitalWrite;
    4bbe:	1e 00 78    	mov.w     [w14], w0
    4bc0:	41 81 24    	mov.w     #0x4814, w1
    4bc2:	11 08 98    	mov.w     w1, [w0+18]

00004bc4 <.LSM73>:
    self->read = __digitalRead;
    4bc4:	1e 00 78    	mov.w     [w14], w0
    4bc6:	81 85 24    	mov.w     #0x4858, w1
    4bc8:	21 08 98    	mov.w     w1, [w0+20]

00004bca <.LSM74>:
}
    4bca:	00 80 fa    	ulnk      
    4bcc:	00 00 06    	return    

00004bce <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    4bce:	02 00 fa    	lnk       #0x2
    4bd0:	00 0f 78    	mov.w     w0, [w14]

00004bd2 <.LSM76>:
    if (!(self->ans))
    4bd2:	1e 00 78    	mov.w     [w14], w0
    4bd4:	20 00 90    	mov.w     [w0+4], w0
    4bd6:	00 00 e0    	cp0.w     w0
    4bd8:	1f 00 32    	bra       Z, 0x4c18 <.L20>

00004bda <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    4bda:	1e 00 78    	mov.w     [w14], w0
    4bdc:	10 00 90    	mov.w     [w0+2], w0
    4bde:	9e 00 78    	mov.w     [w14], w1
    4be0:	91 00 90    	mov.w     [w1+2], w1
    4be2:	11 01 78    	mov.w     [w1], w2
    4be4:	9e 00 78    	mov.w     [w14], w1
    4be6:	e1 40 90    	mov.b     [w1+6], w1
    4be8:	81 80 fb    	ze        w1, w1
    4bea:	13 00 20    	mov.w     #0x1, w3
    4bec:	81 18 dd    	sl.w      w3, w1, w1
    4bee:	82 80 70    	ior.w     w1, w2, w1
    4bf0:	01 08 78    	mov.w     w1, [w0]

00004bf2 <.LSM78>:
    bitset(self->ans, self->bit);
    4bf2:	1e 00 78    	mov.w     [w14], w0
    4bf4:	20 00 90    	mov.w     [w0+4], w0
    4bf6:	9e 00 78    	mov.w     [w14], w1
    4bf8:	a1 00 90    	mov.w     [w1+4], w1
    4bfa:	11 01 78    	mov.w     [w1], w2
    4bfc:	9e 00 78    	mov.w     [w14], w1
    4bfe:	e1 40 90    	mov.b     [w1+6], w1
    4c00:	81 80 fb    	ze        w1, w1
    4c02:	13 00 20    	mov.w     #0x1, w3
    4c04:	81 18 dd    	sl.w      w3, w1, w1
    4c06:	82 80 70    	ior.w     w1, w2, w1
    4c08:	01 08 78    	mov.w     w1, [w0]

00004c0a <.LSM79>:
    self->write = NULL;
    4c0a:	1e 00 78    	mov.w     [w14], w0
    4c0c:	80 00 eb    	clr.w     w1
    4c0e:	11 08 98    	mov.w     w1, [w0+18]

00004c10 <.LSM80>:
    self->read = __analogRead;
    4c10:	1e 00 78    	mov.w     [w14], w0
    4c12:	a1 87 24    	mov.w     #0x487a, w1
    4c14:	21 08 98    	mov.w     w1, [w0+20]
    4c16:	01 00 37    	bra       0x4c1a <.L17>

00004c18 <.L20>:
    4c18:	00 00 00    	nop       

00004c1a <.L17>:
}
    4c1a:	00 80 fa    	ulnk      
    4c1c:	00 00 06    	return    

00004c1e <_pin_set>:

void pin_set(_PIN *self) {
    4c1e:	02 00 fa    	lnk       #0x2
    4c20:	00 0f 78    	mov.w     w0, [w14]

00004c22 <.LSM84>:
    if (self->write==__digitalWrite)
    4c22:	1e 00 78    	mov.w     [w14], w0
    4c24:	90 08 90    	mov.w     [w0+18], w1
    4c26:	40 81 24    	mov.w     #0x4814, w0
    4c28:	80 8f 50    	sub.w     w1, w0, [w15]
    4c2a:	0c 00 3a    	bra       NZ, 0x4c44 <.L21>

00004c2c <.LSM85>:
        bitset(self->port, self->bit);
    4c2c:	1e 00 78    	mov.w     [w14], w0
    4c2e:	10 00 78    	mov.w     [w0], w0
    4c30:	9e 00 78    	mov.w     [w14], w1
    4c32:	91 00 78    	mov.w     [w1], w1
    4c34:	11 01 78    	mov.w     [w1], w2
    4c36:	9e 00 78    	mov.w     [w14], w1
    4c38:	e1 40 90    	mov.b     [w1+6], w1
    4c3a:	81 80 fb    	ze        w1, w1
    4c3c:	13 00 20    	mov.w     #0x1, w3
    4c3e:	81 18 dd    	sl.w      w3, w1, w1
    4c40:	82 80 70    	ior.w     w1, w2, w1
    4c42:	01 08 78    	mov.w     w1, [w0]

00004c44 <.L21>:
}
    4c44:	00 80 fa    	ulnk      
    4c46:	00 00 06    	return    

00004c48 <_pin_clear>:

void pin_clear(_PIN *self) {
    4c48:	02 00 fa    	lnk       #0x2
    4c4a:	00 0f 78    	mov.w     w0, [w14]

00004c4c <.LSM88>:
    if (self->write==__digitalWrite)
    4c4c:	1e 00 78    	mov.w     [w14], w0
    4c4e:	90 08 90    	mov.w     [w0+18], w1
    4c50:	40 81 24    	mov.w     #0x4814, w0
    4c52:	80 8f 50    	sub.w     w1, w0, [w15]
    4c54:	0d 00 3a    	bra       NZ, 0x4c70 <.L23>

00004c56 <.LSM89>:
        bitclear(self->port, self->bit);
    4c56:	1e 00 78    	mov.w     [w14], w0
    4c58:	10 00 78    	mov.w     [w0], w0
    4c5a:	9e 00 78    	mov.w     [w14], w1
    4c5c:	91 00 78    	mov.w     [w1], w1
    4c5e:	11 01 78    	mov.w     [w1], w2
    4c60:	9e 00 78    	mov.w     [w14], w1
    4c62:	e1 40 90    	mov.b     [w1+6], w1
    4c64:	81 80 fb    	ze        w1, w1
    4c66:	13 00 20    	mov.w     #0x1, w3
    4c68:	81 18 dd    	sl.w      w3, w1, w1
    4c6a:	81 80 ea    	com.w     w1, w1
    4c6c:	81 00 61    	and.w     w2, w1, w1
    4c6e:	01 08 78    	mov.w     w1, [w0]

00004c70 <.L23>:
}
    4c70:	00 80 fa    	ulnk      
    4c72:	00 00 06    	return    

00004c74 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    4c74:	02 00 fa    	lnk       #0x2
    4c76:	00 0f 78    	mov.w     w0, [w14]

00004c78 <.LSM92>:
    if (self->write==__digitalWrite)
    4c78:	1e 00 78    	mov.w     [w14], w0
    4c7a:	90 08 90    	mov.w     [w0+18], w1
    4c7c:	40 81 24    	mov.w     #0x4814, w0
    4c7e:	80 8f 50    	sub.w     w1, w0, [w15]
    4c80:	0c 00 3a    	bra       NZ, 0x4c9a <.L25>

00004c82 <.LSM93>:
        bitflip(self->port, self->bit);
    4c82:	1e 00 78    	mov.w     [w14], w0
    4c84:	10 00 78    	mov.w     [w0], w0
    4c86:	9e 00 78    	mov.w     [w14], w1
    4c88:	91 00 78    	mov.w     [w1], w1
    4c8a:	11 01 78    	mov.w     [w1], w2
    4c8c:	9e 00 78    	mov.w     [w14], w1
    4c8e:	e1 40 90    	mov.b     [w1+6], w1
    4c90:	81 80 fb    	ze        w1, w1
    4c92:	13 00 20    	mov.w     #0x1, w3
    4c94:	81 18 dd    	sl.w      w3, w1, w1
    4c96:	81 00 69    	xor.w     w2, w1, w1
    4c98:	01 08 78    	mov.w     w1, [w0]

00004c9a <.L25>:
}
    4c9a:	00 80 fa    	ulnk      
    4c9c:	00 00 06    	return    

00004c9e <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    4c9e:	04 00 fa    	lnk       #0x4
    4ca0:	00 0f 78    	mov.w     w0, [w14]
    4ca2:	11 07 98    	mov.w     w1, [w14+2]

00004ca4 <.LSM96>:
    if (self->write)
    4ca4:	1e 00 78    	mov.w     [w14], w0
    4ca6:	10 08 90    	mov.w     [w0+18], w0
    4ca8:	00 00 e0    	cp0.w     w0
    4caa:	05 00 32    	bra       Z, 0x4cb6 <.L27>

00004cac <.LSM97>:
        self->write(self, val);
    4cac:	1e 00 78    	mov.w     [w14], w0
    4cae:	10 09 90    	mov.w     [w0+18], w2
    4cb0:	9e 00 90    	mov.w     [w14+2], w1
    4cb2:	1e 00 78    	mov.w     [w14], w0
    4cb4:	02 00 01    	call      w2

00004cb6 <.L27>:
}
    4cb6:	00 80 fa    	ulnk      
    4cb8:	00 00 06    	return    

00004cba <_pin_read>:

uint16_t pin_read(_PIN *self) {
    4cba:	02 00 fa    	lnk       #0x2
    4cbc:	00 0f 78    	mov.w     w0, [w14]

00004cbe <.LSM100>:
    if (self->read)
    4cbe:	1e 00 78    	mov.w     [w14], w0
    4cc0:	20 08 90    	mov.w     [w0+20], w0
    4cc2:	00 00 e0    	cp0.w     w0
    4cc4:	05 00 32    	bra       Z, 0x4cd0 <.L30>

00004cc6 <.LSM101>:
        return self->read(self);
    4cc6:	1e 00 78    	mov.w     [w14], w0
    4cc8:	a0 08 90    	mov.w     [w0+20], w1
    4cca:	1e 00 78    	mov.w     [w14], w0
    4ccc:	01 00 01    	call      w1
    4cce:	01 00 37    	bra       0x4cd2 <.L31>

00004cd0 <.L30>:
    else
        return 0xFFFF;
    4cd0:	00 80 eb    	setm.w    w0

00004cd2 <.L31>:
}
    4cd2:	00 80 fa    	ulnk      
    4cd4:	00 00 06    	return    

00004cd6 <_VendorRequests>:
uint8_t rocketstuff[64], rec_msg[64];
uint8_t cmd, value;
uint16_t val1, val2;

void VendorRequests(void) {
    4cd6:	02 00 fa    	lnk       #0x2

00004cd8 <.LSM1>:
    WORD temp;
    switch (USB_setup.bRequest) {
    4cd8:	40 83 20    	mov.w     #0x834, w0
    4cda:	10 40 90    	mov.b     [w0+1], w0
    4cdc:	00 80 fb    	ze        w0, w0
    4cde:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4ce0:	0b 00 32    	bra       Z, 0x4cf8 <.L4>
    4ce2:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4ce4:	4b 00 32    	bra       Z, 0x4d7c <.L5>
    4ce6:	00 00 e0    	cp0.w     w0
    4ce8:	6d 00 3a    	bra       NZ, 0x4dc4 <.L7>

00004cea <.LSM2>:
        case SET_STATE:
            // state = USB_setup.wValue.w;
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    4cea:	40 e0 21    	mov.w     #0x1e04, w0
    4cec:	80 40 eb    	clr.b     w1
    4cee:	01 48 78    	mov.b     w1, [w0]

00004cf0 <.LSM3>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4cf0:	50 e0 21    	mov.w     #0x1e05, w0
    4cf2:	81 cc b3    	mov.b     #0xc8, w1
    4cf4:	01 48 78    	mov.b     w1, [w0]

00004cf6 <.LSM4>:
            break;
    4cf6:	69 00 37    	bra       0x4dca <.L1>

00004cf8 <.L4>:
        case GET_VALS:
            temp.w = uart1.TXbuffer.head;
    4cf8:	d0 43 80    	mov.w     0x87a, w0
    4cfa:	00 0f 78    	mov.w     w0, [w14]

00004cfc <.LSM6>:
            BD[EP0IN].address[0] = temp.b[0];
    4cfc:	30 f0 80    	mov.w     0x1e06, w0
    4cfe:	9e 40 78    	mov.b     [w14], w1
    4d00:	01 48 78    	mov.b     w1, [w0]

00004d02 <.LSM7>:
            BD[EP0IN].address[1] = temp.b[1];
    4d02:	30 f0 80    	mov.w     0x1e06, w0
    4d04:	00 00 e8    	inc.w     w0, w0
    4d06:	9e 40 90    	mov.b     [w14+1], w1
    4d08:	01 48 78    	mov.b     w1, [w0]

00004d0a <.LSM8>:
            temp.w = uart1.TXbuffer.tail;
    4d0a:	e0 43 80    	mov.w     0x87c, w0
    4d0c:	00 0f 78    	mov.w     w0, [w14]

00004d0e <.LSM9>:
            BD[EP0IN].address[2] = temp.b[0];
    4d0e:	30 f0 80    	mov.w     0x1e06, w0
    4d10:	00 80 e8    	inc2.w    w0, w0
    4d12:	9e 40 78    	mov.b     [w14], w1
    4d14:	01 48 78    	mov.b     w1, [w0]

00004d16 <.LSM10>:
            BD[EP0IN].address[3] = temp.b[1];
    4d16:	30 f0 80    	mov.w     0x1e06, w0
    4d18:	63 00 40    	add.w     w0, #0x3, w0
    4d1a:	9e 40 90    	mov.b     [w14+1], w1
    4d1c:	01 48 78    	mov.b     w1, [w0]

00004d1e <.LSM11>:
            temp.w = uart1.TXbuffer.count;
    4d1e:	f0 43 80    	mov.w     0x87e, w0
    4d20:	00 0f 78    	mov.w     w0, [w14]

00004d22 <.LSM12>:
            BD[EP0IN].address[4] = temp.b[0];
    4d22:	30 f0 80    	mov.w     0x1e06, w0
    4d24:	64 00 40    	add.w     w0, #0x4, w0
    4d26:	9e 40 78    	mov.b     [w14], w1
    4d28:	01 48 78    	mov.b     w1, [w0]

00004d2a <.LSM13>:
            BD[EP0IN].address[5] = temp.b[1];
    4d2a:	30 f0 80    	mov.w     0x1e06, w0
    4d2c:	65 00 40    	add.w     w0, #0x5, w0
    4d2e:	9e 40 90    	mov.b     [w14+1], w1
    4d30:	01 48 78    	mov.b     w1, [w0]

00004d32 <.LSM14>:

            temp.w = uart1.RXbuffer.head;
    4d32:	20 44 80    	mov.w     0x884, w0
    4d34:	00 0f 78    	mov.w     w0, [w14]

00004d36 <.LSM15>:
            BD[EP0IN].address[6] = temp.b[0];
    4d36:	30 f0 80    	mov.w     0x1e06, w0
    4d38:	66 00 40    	add.w     w0, #0x6, w0
    4d3a:	9e 40 78    	mov.b     [w14], w1
    4d3c:	01 48 78    	mov.b     w1, [w0]

00004d3e <.LSM16>:
            BD[EP0IN].address[7] = temp.b[1];
    4d3e:	30 f0 80    	mov.w     0x1e06, w0
    4d40:	67 00 40    	add.w     w0, #0x7, w0
    4d42:	9e 40 90    	mov.b     [w14+1], w1
    4d44:	01 48 78    	mov.b     w1, [w0]

00004d46 <.LSM17>:
            temp.w = uart1.RXbuffer.tail;
    4d46:	30 44 80    	mov.w     0x886, w0
    4d48:	00 0f 78    	mov.w     w0, [w14]

00004d4a <.LSM18>:
            BD[EP0IN].address[8] = temp.b[0];
    4d4a:	30 f0 80    	mov.w     0x1e06, w0
    4d4c:	68 00 40    	add.w     w0, #0x8, w0
    4d4e:	9e 40 78    	mov.b     [w14], w1
    4d50:	01 48 78    	mov.b     w1, [w0]

00004d52 <.LSM19>:
            BD[EP0IN].address[9] = temp.b[1];
    4d52:	30 f0 80    	mov.w     0x1e06, w0
    4d54:	69 00 40    	add.w     w0, #0x9, w0
    4d56:	9e 40 90    	mov.b     [w14+1], w1
    4d58:	01 48 78    	mov.b     w1, [w0]

00004d5a <.LSM20>:
            temp.w = uart1.RXbuffer.count;
    4d5a:	40 44 80    	mov.w     0x888, w0
    4d5c:	00 0f 78    	mov.w     w0, [w14]

00004d5e <.LSM21>:
            BD[EP0IN].address[10] = temp.b[0];
    4d5e:	30 f0 80    	mov.w     0x1e06, w0
    4d60:	6a 00 40    	add.w     w0, #0xa, w0
    4d62:	9e 40 78    	mov.b     [w14], w1
    4d64:	01 48 78    	mov.b     w1, [w0]

00004d66 <.LSM22>:
            BD[EP0IN].address[11] = temp.b[1];
    4d66:	30 f0 80    	mov.w     0x1e06, w0
    4d68:	6b 00 40    	add.w     w0, #0xb, w0
    4d6a:	9e 40 90    	mov.b     [w14+1], w1
    4d6c:	01 48 78    	mov.b     w1, [w0]

00004d6e <.LSM23>:
            BD[EP0IN].bytecount = 12;    // set EP0 IN byte count to 4
    4d6e:	40 e0 21    	mov.w     #0x1e04, w0
    4d70:	c1 c0 b3    	mov.b     #0xc, w1
    4d72:	01 48 78    	mov.b     w1, [w0]

00004d74 <.LSM24>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4d74:	50 e0 21    	mov.w     #0x1e05, w0
    4d76:	81 cc b3    	mov.b     #0xc8, w1
    4d78:	01 48 78    	mov.b     w1, [w0]

00004d7a <.LSM25>:
            break;
    4d7a:	27 00 37    	bra       0x4dca <.L1>

00004d7c <.L5>:
        case GET_ROCKET_INFO:
            temp.w = rocket_tilt;
    4d7c:	30 42 80    	mov.w     0x846, w0
    4d7e:	00 0f 78    	mov.w     w0, [w14]

00004d80 <.LSM27>:
            BD[EP0IN].address[0] = temp.b[0];
    4d80:	30 f0 80    	mov.w     0x1e06, w0
    4d82:	9e 40 78    	mov.b     [w14], w1
    4d84:	01 48 78    	mov.b     w1, [w0]

00004d86 <.LSM28>:
            BD[EP0IN].address[1] = temp.b[1];
    4d86:	30 f0 80    	mov.w     0x1e06, w0
    4d88:	00 00 e8    	inc.w     w0, w0
    4d8a:	9e 40 90    	mov.b     [w14+1], w1
    4d8c:	01 48 78    	mov.b     w1, [w0]

00004d8e <.LSM29>:
            temp.w = rocket_speed;
    4d8e:	20 42 80    	mov.w     0x844, w0
    4d90:	00 0f 78    	mov.w     w0, [w14]

00004d92 <.LSM30>:
            BD[EP0IN].address[2] = temp.b[0];
    4d92:	30 f0 80    	mov.w     0x1e06, w0
    4d94:	00 80 e8    	inc2.w    w0, w0
    4d96:	9e 40 78    	mov.b     [w14], w1
    4d98:	01 48 78    	mov.b     w1, [w0]

00004d9a <.LSM31>:
            BD[EP0IN].address[3] = temp.b[1];
    4d9a:	30 f0 80    	mov.w     0x1e06, w0
    4d9c:	63 00 40    	add.w     w0, #0x3, w0
    4d9e:	9e 40 90    	mov.b     [w14+1], w1
    4da0:	01 48 78    	mov.b     w1, [w0]

00004da2 <.LSM32>:
            temp.w = rocket_state;
    4da2:	10 42 80    	mov.w     0x842, w0
    4da4:	00 0f 78    	mov.w     w0, [w14]

00004da6 <.LSM33>:
            BD[EP0IN].address[4] = temp.b[0];
    4da6:	30 f0 80    	mov.w     0x1e06, w0
    4da8:	64 00 40    	add.w     w0, #0x4, w0
    4daa:	9e 40 78    	mov.b     [w14], w1
    4dac:	01 48 78    	mov.b     w1, [w0]

00004dae <.LSM34>:
            BD[EP0IN].address[5] = temp.b[1];
    4dae:	30 f0 80    	mov.w     0x1e06, w0
    4db0:	65 00 40    	add.w     w0, #0x5, w0
    4db2:	9e 40 90    	mov.b     [w14+1], w1
    4db4:	01 48 78    	mov.b     w1, [w0]

00004db6 <.LSM35>:
            BD[EP0IN].bytecount = 6;    // set EP0 IN byte count to 4
    4db6:	40 e0 21    	mov.w     #0x1e04, w0
    4db8:	61 c0 b3    	mov.b     #0x6, w1
    4dba:	01 48 78    	mov.b     w1, [w0]

00004dbc <.LSM36>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4dbc:	50 e0 21    	mov.w     #0x1e05, w0
    4dbe:	81 cc b3    	mov.b     #0xc8, w1
    4dc0:	01 48 78    	mov.b     w1, [w0]

00004dc2 <.LSM37>:
            break;     
    4dc2:	03 00 37    	bra       0x4dca <.L1>

00004dc4 <.L7>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    4dc4:	3c c8 bf    	mov.b     0x83c, WREG
    4dc6:	00 04 a0    	bset.b    w0, #0x0
    4dc8:	3c e8 b7    	mov.b     WREG, 0x83c

00004dca <.L1>:
    }
}
    4dca:	00 80 fa    	ulnk      
    4dcc:	00 00 06    	return    

00004dce <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    4dce:	00 00 fa    	lnk       #0x0

00004dd0 <.LSM41>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4dd0:	3c c8 bf    	mov.b     0x83c, WREG
    4dd2:	00 04 a0    	bset.b    w0, #0x0
    4dd4:	3c e8 b7    	mov.b     WREG, 0x83c

00004dd6 <.LSM42>:
    }
}
    4dd6:	00 80 fa    	ulnk      
    4dd8:	00 00 06    	return    

00004dda <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    4dda:	00 00 fa    	lnk       #0x0

00004ddc <.LSM44>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4ddc:	3c c8 bf    	mov.b     0x83c, WREG
    4dde:	00 04 a0    	bset.b    w0, #0x0
    4de0:	3c e8 b7    	mov.b     WREG, 0x83c

00004de2 <.LSM45>:
    }
}
    4de2:	00 80 fa    	ulnk      
    4de4:	00 00 06    	return    

00004de6 <_UARTrequests>:


void UARTrequests(){
    4de6:	04 00 fa    	lnk       #0x4

00004de8 <.LSM47>:
    uart_gets(&uart1, rec_msg, 64);
    4de8:	02 04 20    	mov.w     #0x40, w2
    4dea:	81 a0 21    	mov.w     #0x1a08, w1
    4dec:	40 85 20    	mov.w     #0x854, w0
    4dee:	07 f6 07    	rcall     0x39fe <_uart_gets>

00004df0 <.LSM48>:
    uint32_t decoded_msg = (uint32_t)strtol(rec_msg, NULL, 16);
    4df0:	80 a0 21    	mov.w     #0x1a08, w0
    4df2:	02 01 20    	mov.w     #0x10, w2
    4df4:	80 00 eb    	clr.w     w1
    4df6:	4f e4 07    	rcall     0x1696 <_strtol>
    4df8:	00 8f be    	mov.d     w0, [w14]

00004dfa <.LSM49>:
    cmd = decoded_msg & 0x0f;
    4dfa:	1e 00 78    	mov.w     [w14], w0
    4dfc:	00 40 78    	mov.b     w0, w0
    4dfe:	6f 40 60    	and.b     w0, #0xf, w0
    4e00:	4a e8 b7    	mov.b     WREG, 0x84a

00004e02 <.LSM50>:
    value = (decoded_msg & 0xf0) >> 4;
    4e02:	00 0f 20    	mov.w     #0xf0, w0
    4e04:	01 00 20    	mov.w     #0x0, w1
    4e06:	1e 01 be    	mov.d     [w14], w2
    4e08:	02 02 78    	mov.w     w2, w4
    4e0a:	03 01 78    	mov.w     w3, w2
    4e0c:	80 01 78    	mov.w     w0, w3
    4e0e:	01 00 78    	mov.w     w1, w0
    4e10:	03 02 62    	and.w     w4, w3, w4
    4e12:	00 00 61    	and.w     w2, w0, w0
    4e14:	80 00 eb    	clr.w     w1
    4e16:	c0 00 dd    	sl.w      w0, #0x0, w1
    4e18:	00 00 20    	mov.w     #0x0, w0
    4e1a:	00 01 be    	mov.d     w0, w2
    4e1c:	61 20 b8    	mul.uu    w4, #0x1, w0
    4e1e:	00 01 71    	ior.w     w2, w0, w2
    4e20:	81 81 71    	ior.w     w3, w1, w3
    4e22:	4c 1a dd    	sl.w      w3, #0xc, w4
    4e24:	44 10 de    	lsr.w     w2, #0x4, w0
    4e26:	00 00 72    	ior.w     w4, w0, w0
    4e28:	c4 18 de    	lsr.w     w3, #0x4, w1
    4e2a:	00 40 78    	mov.b     w0, w0
    4e2c:	4b e8 b7    	mov.b     WREG, 0x84b

00004e2e <.LSM51>:
    switch(cmd){
    4e2e:	4a c8 bf    	mov.b     0x84a, WREG
    4e30:	00 80 fb    	ze        w0, w0
    4e32:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4e34:	1d 00 32    	bra       Z, 0x4e70 <.L13>
    4e36:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4e38:	1f 00 32    	bra       Z, 0x4e78 <.L14>
    4e3a:	00 00 e0    	cp0.w     w0
    4e3c:	27 00 3a    	bra       NZ, 0x4e8c <.L10>

00004e3e <.LSM52>:
        case GET_ROCKET_VALS:
        //speed, orientation
            led_toggle(&led1);
    4e3e:	00 80 20    	mov.w     #0x800, w0
    4e40:	5b 01 07    	rcall     0x50f8 <_led_toggle>

00004e42 <.LSM53>:
            // rocket_speed = 0xFFFF;
            // rocket_tilt = 0xFFFF;
            // rocket_state = 0xFFFF;
            sprintf(rocketstuff, "%04x%04x%04x\r", rocket_speed, rocket_tilt, rocket_state);
    4e42:	13 42 80    	mov.w     0x842, w3
    4e44:	32 42 80    	mov.w     0x846, w2
    4e46:	21 42 80    	mov.w     0x844, w1
    4e48:	80 9c 21    	mov.w     #0x19c8, w0
    4e4a:	83 1f 78    	mov.w     w3, [w15++]
    4e4c:	82 1f 78    	mov.w     w2, [w15++]
    4e4e:	81 1f 78    	mov.w     w1, [w15++]
    4e50:	c1 ba 2a    	mov.w     #0xabac, w1
    4e52:	81 1f 78    	mov.w     w1, [w15++]
    4e54:	6f e6 07    	rcall     0x1b34 <__sprintf_cdnopuxX>
    4e56:	e8 87 57    	sub.w     w15, #0x8, w15

00004e58 <.LSM54>:
            printf("%s\n\r", rocketstuff);
    4e58:	80 9c 21    	mov.w     #0x19c8, w0
    4e5a:	80 1f 78    	mov.w     w0, [w15++]
    4e5c:	a0 bb 2a    	mov.w     #0xabba, w0
    4e5e:	80 1f 78    	mov.w     w0, [w15++]
    4e60:	40 e8 07    	rcall     0x1ee2 <__printf_0>
    4e62:	e4 87 57    	sub.w     w15, #0x4, w15

00004e64 <.LSM55>:
            uart_puts(&uart1, rocketstuff);
    4e64:	81 9c 21    	mov.w     #0x19c8, w1
    4e66:	40 85 20    	mov.w     #0x854, w0
    4e68:	25 f5 07    	rcall     0x38b4 <_uart_puts>

00004e6a <.LSM56>:
            led_toggle(&led2);
    4e6a:	80 80 20    	mov.w     #0x808, w0
    4e6c:	45 01 07    	rcall     0x50f8 <_led_toggle>

00004e6e <.LSM57>:
            break;
    4e6e:	0e 00 37    	bra       0x4e8c <.L10>

00004e70 <.L13>:
        case SET_ROCKET_STATE:
            rocket_state = value;
    4e70:	4b c8 bf    	mov.b     0x84b, WREG
    4e72:	00 80 fb    	ze        w0, w0
    4e74:	10 42 88    	mov.w     w0, 0x842

00004e76 <.LSM59>:
            break;
    4e76:	0a 00 37    	bra       0x4e8c <.L10>

00004e78 <.L14>:
        case SEND_ROCKET_COMMANDS:
            throttle = value & 0b01;
    4e78:	4b c8 bf    	mov.b     0x84b, WREG
    4e7a:	61 40 60    	and.b     w0, #0x1, w0
    4e7c:	48 e8 b7    	mov.b     WREG, 0x848

00004e7e <.LSM61>:
            tilt = (value & 0b10) >> 1;
    4e7e:	4b c8 bf    	mov.b     0x84b, WREG
    4e80:	00 80 fb    	ze        w0, w0
    4e82:	62 00 60    	and.w     w0, #0x2, w0
    4e84:	00 80 d1    	asr.w     w0, w0
    4e86:	00 40 78    	mov.b     w0, w0
    4e88:	49 e8 b7    	mov.b     WREG, 0x849

00004e8a <.LSM62>:
            break;
    4e8a:	00 00 00    	nop       

00004e8c <.L10>:
    }
}
    4e8c:	00 80 fa    	ulnk      
    4e8e:	00 00 06    	return    

00004e90 <_print_buffer>:

//
void print_buffer(uint8_t *buffer, uint16_t size) {
    4e90:	0a 00 fa    	lnk       #0xa
    4e92:	30 07 98    	mov.w     w0, [w14+6]
    4e94:	41 07 98    	mov.w     w1, [w14+8]

00004e96 <.LSM65>:
    int i;
    uint8_t* buf_str = (uint8_t*) malloc (2*size + 1);
    4e96:	4e 00 90    	mov.w     [w14+8], w0
    4e98:	00 00 40    	add.w     w0, w0, w0
    4e9a:	00 00 e8    	inc.w     w0, w0
    4e9c:	b0 e3 07    	rcall     0x15fe <_malloc>
    4e9e:	20 07 98    	mov.w     w0, [w14+4]

00004ea0 <.LSM66>:
    uint8_t* buf_ptr = buf_str;
    4ea0:	ae 00 90    	mov.w     [w14+4], w1
    4ea2:	11 07 98    	mov.w     w1, [w14+2]

00004ea4 <.LSM67>:
    for (i = 0; i < size; i++)
    4ea4:	00 00 eb    	clr.w     w0
    4ea6:	00 0f 78    	mov.w     w0, [w14]
    4ea8:	0f 00 37    	bra       0x4ec8 <.L16>

00004eaa <.L17>:
    {
        buf_ptr += sprintf(buf_ptr, "%02X", buffer[i]);
    4eaa:	1e 00 78    	mov.w     [w14], w0
    4eac:	be 00 90    	mov.w     [w14+6], w1
    4eae:	00 80 40    	add.w     w1, w0, w0
    4eb0:	10 40 78    	mov.b     [w0], w0
    4eb2:	80 80 fb    	ze        w0, w1
    4eb4:	1e 00 90    	mov.w     [w14+2], w0
    4eb6:	81 1f 78    	mov.w     w1, [w15++]
    4eb8:	f1 bb 2a    	mov.w     #0xabbf, w1
    4eba:	81 1f 78    	mov.w     w1, [w15++]
    4ebc:	3b e6 07    	rcall     0x1b34 <__sprintf_cdnopuxX>
    4ebe:	e4 87 57    	sub.w     w15, #0x4, w15
    4ec0:	9e 00 90    	mov.w     [w14+2], w1
    4ec2:	00 80 40    	add.w     w1, w0, w0
    4ec4:	10 07 98    	mov.w     w0, [w14+2]

00004ec6 <.LSM69>:
    4ec6:	1e 0f e8    	inc.w     [w14], [w14]

00004ec8 <.L16>:
    4ec8:	9e 00 78    	mov.w     [w14], w1
    4eca:	4e 00 90    	mov.w     [w14+8], w0
    4ecc:	80 8f 50    	sub.w     w1, w0, [w15]
    4ece:	ed ff 39    	bra       NC, 0x4eaa <.L17>

00004ed0 <.LSM70>:
    }
    sprintf(buf_ptr,"\n");
    4ed0:	1e 00 90    	mov.w     [w14+2], w0
    4ed2:	22 00 20    	mov.w     #0x2, w2
    4ed4:	41 bc 2a    	mov.w     #0xabc4, w1
    4ed6:	bd e3 07    	rcall     0x1652 <_memcpy>

00004ed8 <.LSM71>:
    *(buf_ptr + 1) = '\0';
    4ed8:	1e 00 90    	mov.w     [w14+2], w0
    4eda:	00 00 e8    	inc.w     w0, w0
    4edc:	80 40 eb    	clr.b     w1
    4ede:	01 48 78    	mov.b     w1, [w0]

00004ee0 <.LSM72>:
    printf("%s\n", buf_str);
    4ee0:	2e 00 90    	mov.w     [w14+4], w0
    4ee2:	be e3 07    	rcall     0x1660 <_puts>

00004ee4 <.LSM73>:
}
    4ee4:	00 80 fa    	ulnk      
    4ee6:	00 00 06    	return    

00004ee8 <_check_for_string>:

char check_for_string(uint8_t *str) {
    4ee8:	06 00 fa    	lnk       #0x6
    4eea:	20 07 98    	mov.w     w0, [w14+4]

00004eec <.LSM75>:
    /*
    If the input string buffer is "test", turn on led1 and return 1. Else 
    turn off led1 and return 0.
    */
    int rc = strcmp(str, "test");
    4eec:	61 bc 2a    	mov.w     #0xabc6, w1
    4eee:	2e 00 90    	mov.w     [w14+4], w0
    4ef0:	c2 e3 07    	rcall     0x1676 <_strcmp>
    4ef2:	10 07 98    	mov.w     w0, [w14+2]

00004ef4 <.LSM76>:
    char out;
    if (rc == 0) {
    4ef4:	1e 00 90    	mov.w     [w14+2], w0
    4ef6:	00 00 e0    	cp0.w     w0
    4ef8:	05 00 3a    	bra       NZ, 0x4f04 <.L19>

00004efa <.LSM77>:
        led_on(&led1);
    4efa:	00 80 20    	mov.w     #0x800, w0
    4efc:	dc 00 07    	rcall     0x50b6 <_led_on>

00004efe <.LSM78>:
        out = 1;
    4efe:	10 c0 b3    	mov.b     #0x1, w0
    4f00:	00 4f 78    	mov.b     w0, [w14]
    4f02:	04 00 37    	bra       0x4f0c <.L20>

00004f04 <.L19>:
    } else {
        led_off(&led1);
    4f04:	00 80 20    	mov.w     #0x800, w0
    4f06:	e7 00 07    	rcall     0x50d6 <_led_off>

00004f08 <.LSM80>:
        out = 0;
    4f08:	00 40 eb    	clr.b     w0
    4f0a:	00 4f 78    	mov.b     w0, [w14]

00004f0c <.L20>:
    }
    return out;
    4f0c:	1e 40 78    	mov.b     [w14], w0

00004f0e <.LSM82>:
}
    4f0e:	00 80 fa    	ulnk      
    4f10:	00 00 06    	return    

00004f12 <_convert_msg>:

uint64_t convert_msg(uint8_t *str) {
    4f12:	0a 00 fa    	lnk       #0xa
    4f14:	40 07 98    	mov.w     w0, [w14+8]

00004f16 <.LSM84>:
    /* 
    Interprets string buffer which represents a hexadecimal number and stores 
    the encoded value as a uint64_t
    */

    // sprintf(a, "%08x%08x\r\n", 0xffff, 40);
    // printf("%d\r\n", a[0]);
    // printf("%s", a);
    uint64_t decoded_msg = (uint64_t)strtoll(str, NULL, 16);
    4f16:	02 01 20    	mov.w     #0x10, w2
    4f18:	80 00 eb    	clr.w     w1
    4f1a:	4e 00 90    	mov.w     [w14+8], w0
    4f1c:	05 e4 07    	rcall     0x1728 <_strtoll>
    4f1e:	cf 80 de    	asr.w     w0, #0xf, w1
    4f20:	61 09 b9    	mul.su    w1, #0x1, w2
    4f22:	00 9f be    	mov.d     w0, [w14++]
    4f24:	02 97 be    	mov.d     w2, [w14--]

00004f26 <.LSM85>:
    return decoded_msg;
    4f26:	3e 00 be    	mov.d     [w14++], w0
    4f28:	2e 01 be    	mov.d     [w14--], w2

00004f2a <.LSM86>:
}
    4f2a:	00 80 fa    	ulnk      
    4f2c:	00 00 06    	return    

00004f2e <_parse_addr>:

char parse_addr(uint64_t *msg) {
    4f2e:	04 00 fa    	lnk       #0x4
    4f30:	10 07 98    	mov.w     w0, [w14+2]

00004f32 <.LSM88>:
    /*
    Parses the received message and returns a char representing whether this 
    information is addressed to this device.
    */
    // uint8_t msg_addr = (uint8_t)(*msg & ((uint64_t)(0xFF) << 56));
    uint8_t msg_addr = (uint8_t)(*msg & ((uint64_t)(0xFF)));
    4f32:	1e 00 90    	mov.w     [w14+2], w0
    4f34:	50 01 be    	mov.d     [++w0], w2
    4f36:	40 00 be    	mov.d     [--w0], w0
    4f38:	10 47 98    	mov.b     w0, [w14+1]

00004f3a <.LSM89>:
    char is_recipient = 0;
    4f3a:	00 40 eb    	clr.b     w0
    4f3c:	00 4f 78    	mov.b     w0, [w14]

00004f3e <.LSM90>:
    if (msg_addr == LOCAL_ADDR) {
    4f3e:	1e 40 90    	mov.b     [w14+1], w0
    4f40:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4f42:	02 00 3a    	bra       NZ, 0x4f48 <.L23>

00004f44 <.LSM91>:
        is_recipient = 1;
    4f44:	10 c0 b3    	mov.b     #0x1, w0
    4f46:	00 4f 78    	mov.b     w0, [w14]

00004f48 <.L23>:
    }
    return is_recipient;
    4f48:	1e 40 78    	mov.b     [w14], w0

00004f4a <.LSM93>:
}
    4f4a:	00 80 fa    	ulnk      
    4f4c:	00 00 06    	return    

00004f4e <_setup_uart>:

void setup_uart() {
    4f4e:	00 00 fa    	lnk       #0x0

00004f50 <.LSM95>:
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           // 0, TXBUF, 1024, RXBUF, 1024);

    // uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
    //            float baudrate, int8_t parity, int16_t stopbits, 
    //            uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
    //            uint8_t *RXbuffer, uint16_t RXbufferlen)

    // uart_open(&uart2, &D[0], &D[1], NULL, NULL, 115200., 'N', 1, 
    //           0, MC_TXBUF, 1024, MC_RXBUF, 1024);
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           0, TXBUF, 1024, RXBUF, 1024);

    // pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    // pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_open(&uart1, &D[0], &D[1], NULL, NULL, 19200., 'N', 1, 
    4f50:	00 40 20    	mov.w     #0x400, w0
    4f52:	80 1f 78    	mov.w     w0, [w15++]
    4f54:	80 5c 21    	mov.w     #0x15c8, w0
    4f56:	80 1f 78    	mov.w     w0, [w15++]
    4f58:	00 40 20    	mov.w     #0x400, w0
    4f5a:	80 1f 78    	mov.w     w0, [w15++]
    4f5c:	80 1c 21    	mov.w     #0x11c8, w0
    4f5e:	80 1f 78    	mov.w     w0, [w15++]
    4f60:	00 00 eb    	clr.w     w0
    4f62:	80 1f 78    	mov.w     w0, [w15++]
    4f64:	10 00 20    	mov.w     #0x1, w0
    4f66:	80 1f 78    	mov.w     w0, [w15++]
    4f68:	e5 c4 b3    	mov.b     #0x4e, w5
    4f6a:	06 00 20    	mov.w     #0x0, w6
    4f6c:	67 69 24    	mov.w     #0x4696, w7
    4f6e:	00 02 eb    	clr.w     w4
    4f70:	80 01 eb    	clr.w     w3
    4f72:	e2 a5 21    	mov.w     #0x1a5e, w2
    4f74:	81 a4 21    	mov.w     #0x1a48, w1
    4f76:	40 85 20    	mov.w     #0x854, w0
    4f78:	46 f1 07    	rcall     0x3206 <_uart_open>
    4f7a:	ec 87 57    	sub.w     w15, #0xc, w15

00004f7c <.LSM96>:
              0, MC_TXBUF, 1024, MC_RXBUF, 1024);
}
    4f7c:	00 80 fa    	ulnk      
    4f7e:	00 00 06    	return    

00004f80 <_setup>:

void setup() {
    4f80:	00 00 fa    	lnk       #0x0

00004f82 <.LSM98>:
    timer_setPeriod(&timer1, 1);  // Timer for LED operation/status blink
    4f82:	02 00 20    	mov.w     #0x0, w2
    4f84:	03 f8 23    	mov.w     #0x3f80, w3
    4f86:	40 d1 21    	mov.w     #0x1d14, w0
    4f88:	c6 fa 07    	rcall     0x4516 <_timer_setPeriod>

00004f8a <.LSM99>:
    timer_setPeriod(&timer2, 0.5); 
    4f8a:	02 00 20    	mov.w     #0x0, w2
    4f8c:	03 f0 23    	mov.w     #0x3f00, w3
    4f8e:	a0 d2 21    	mov.w     #0x1d2a, w0
    4f90:	c2 fa 07    	rcall     0x4516 <_timer_setPeriod>

00004f92 <.LSM100>:
    timer_start(&timer1);
    4f92:	40 d1 21    	mov.w     #0x1d14, w0
    4f94:	8f fb 07    	rcall     0x46b4 <_timer_start>

00004f96 <.LSM101>:
    timer_start(&timer2);
    4f96:	a0 d2 21    	mov.w     #0x1d2a, w0
    4f98:	8d fb 07    	rcall     0x46b4 <_timer_start>

00004f9a <.LSM102>:

    setup_uart();
    4f9a:	d9 ff 07    	rcall     0x4f4e <_setup_uart>

00004f9c <.LSM103>:
    throttle, tilt = 0;
    4f9c:	49 68 ef    	clr.b     0x849

00004f9e <.LSM104>:
    val1,val2 = 8;
    4f9e:	80 00 20    	mov.w     #0x8, w0
    4fa0:	70 42 88    	mov.w     w0, 0x84e

00004fa2 <.LSM105>:
    rocket_tilt = 15;
    4fa2:	f0 00 20    	mov.w     #0xf, w0
    4fa4:	30 42 88    	mov.w     w0, 0x846

00004fa6 <.LSM106>:

}
    4fa6:	00 80 fa    	ulnk      
    4fa8:	00 00 06    	return    

00004faa <_main>:

int16_t main(void) {
    4faa:	04 00 fa    	lnk       #0x4

00004fac <.LSM108>:
    // printf("Starting Rocket Controller...\r\n");
    init_clock();
    4fac:	00 10 20    	mov.w     #0x100, w0
    4fae:	20 3a 88    	mov.w     w0, 0x744

00004fb0 <.LSM109>:
    init_ui();
    4fb0:	20 00 07    	rcall     0x4ff2 <_init_ui>

00004fb2 <.LSM110>:
    init_timer();
    4fb2:	46 fa 07    	rcall     0x4440 <_init_timer>

00004fb4 <.LSM111>:
    init_uart();
    4fb4:	ef ef 07    	rcall     0x2f94 <_init_uart>

00004fb6 <.LSM112>:
    setup();
    4fb6:	e4 ff 07    	rcall     0x4f80 <_setup>

00004fb8 <.LSM113>:
    uint16_t counter = 0;
    4fb8:	00 00 eb    	clr.w     w0
    4fba:	00 0f 78    	mov.w     w0, [w14]

00004fbc <.LSM114>:
    uint64_t msg;
    char is_recip = 0;
    4fbc:	00 40 eb    	clr.b     w0
    4fbe:	20 47 98    	mov.b     w0, [w14+2]

00004fc0 <.LSM115>:
    led_off(&led2);
    4fc0:	80 80 20    	mov.w     #0x808, w0
    4fc2:	89 00 07    	rcall     0x50d6 <_led_off>

00004fc4 <.LSM116>:
    led_off(&led1);
    4fc4:	00 80 20    	mov.w     #0x800, w0
    4fc6:	87 00 07    	rcall     0x50d6 <_led_off>

00004fc8 <.LSM117>:

    InitUSB();
    4fc8:	55 f5 07    	rcall     0x3a74 <_InitUSB>

00004fca <.LSM118>:
    U1IE = 0xFF; //setting up ISR for USB requests
    4fca:	f0 0f 20    	mov.w     #0xff, w0
    4fcc:	60 24 88    	mov.w     w0, 0x48c

00004fce <.LSM119>:
    U1EIE = 0xFF;
    4fce:	f0 0f 20    	mov.w     #0xff, w0
    4fd0:	80 24 88    	mov.w     w0, 0x490

00004fd2 <.LSM120>:
    IFS5bits.USB1IF = 0; //flag
    4fd2:	8e c0 a9    	bclr.b    0x8e, #0x6

00004fd4 <.LSM121>:
    IEC5bits.USB1IE = 1; //enable
    4fd4:	9e c0 a8    	bset.b    0x9e, #0x6
    4fd6:	01 00 37    	bra       0x4fda <.L28>

00004fd8 <.L29>:

    while (1) {
        // if (timer_flag(&timer1)) {
        //     // Blink green light to show normal operation.
        //     timer_lower(&timer1);
        //     led_toggle(&led2);
        // }

        if (timer_flag(&timer2)) {
            timer_lower(&timer2);
            // uart_gets(&uart1, rec_msg, 64);
            // led_toggle(&led2);
            UARTrequests();


            // if (throttle == 1){
            //     led_on(&led1);
            // }

            // else{
            //     led_off(&led1);
            // }

        // if(rocket_state == FLYING){
        //     led_on(&led1);
        // }

        // else{
        //     led_off(&led1);
        // }

        val1 = uart1.TXbuffer.head;
        val2 = uart1.TXbuffer.tail;

            
        }   
    }
    4fd8:	00 00 00    	nop       

00004fda <.L28>:
    4fda:	a0 d2 21    	mov.w     #0x1d2a, w0
    4fdc:	89 fb 07    	rcall     0x46f0 <_timer_flag>
    4fde:	00 00 e0    	cp0.w     w0
    4fe0:	fb ff 32    	bra       Z, 0x4fd8 <.L29>

00004fe2 <.LSM124>:
    4fe2:	a0 d2 21    	mov.w     #0x1d2a, w0
    4fe4:	96 fb 07    	rcall     0x4712 <_timer_lower>

00004fe6 <.LSM125>:
    4fe6:	ff fe 07    	rcall     0x4de6 <_UARTrequests>

00004fe8 <.LSM126>:
    4fe8:	d0 43 80    	mov.w     0x87a, w0
    4fea:	60 42 88    	mov.w     w0, 0x84c

00004fec <.LSM127>:
    4fec:	e0 43 80    	mov.w     0x87c, w0
    4fee:	70 42 88    	mov.w     w0, 0x84e

00004ff0 <.LSM128>:
    4ff0:	f4 ff 37    	bra       0x4fda <.L28>

00004ff2 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    4ff2:	00 00 fa    	lnk       #0x0

00004ff4 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4ff4:	74 c0 b3    	mov.b     #0x7, w4
    4ff6:	63 4e 20    	mov.w     #0x4e6, w3
    4ff8:	82 2d 20    	mov.w     #0x2d8, w2
    4ffa:	a1 2d 20    	mov.w     #0x2da, w1
    4ffc:	00 80 20    	mov.w     #0x800, w0
    4ffe:	20 00 07    	rcall     0x5040 <_led_init>

00005000 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    5000:	00 42 eb    	clr.b     w4
    5002:	a3 4e 20    	mov.w     #0x4ea, w3
    5004:	82 2e 20    	mov.w     #0x2e8, w2
    5006:	a1 2e 20    	mov.w     #0x2ea, w1
    5008:	80 80 20    	mov.w     #0x808, w0
    500a:	1a 00 07    	rcall     0x5040 <_led_init>

0000500c <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    500c:	14 c0 b3    	mov.b     #0x1, w4
    500e:	a3 4e 20    	mov.w     #0x4ea, w3
    5010:	82 2e 20    	mov.w     #0x2e8, w2
    5012:	a1 2e 20    	mov.w     #0x2ea, w1
    5014:	00 81 20    	mov.w     #0x810, w0
    5016:	14 00 07    	rcall     0x5040 <_led_init>

00005018 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    5018:	f4 c0 b3    	mov.b     #0xf, w4
    501a:	43 4e 20    	mov.w     #0x4e4, w3
    501c:	02 2d 20    	mov.w     #0x2d0, w2
    501e:	21 2d 20    	mov.w     #0x2d2, w1
    5020:	80 81 20    	mov.w     #0x818, w0
    5022:	ad 00 07    	rcall     0x517e <_sw_init>

00005024 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    5024:	c4 c0 b3    	mov.b     #0xc, w4
    5026:	43 4e 20    	mov.w     #0x4e4, w3
    5028:	02 2d 20    	mov.w     #0x2d0, w2
    502a:	21 2d 20    	mov.w     #0x2d2, w1
    502c:	00 82 20    	mov.w     #0x820, w0
    502e:	a7 00 07    	rcall     0x517e <_sw_init>

00005030 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    5030:	c4 c0 b3    	mov.b     #0xc, w4
    5032:	23 4e 20    	mov.w     #0x4e2, w3
    5034:	82 2c 20    	mov.w     #0x2c8, w2
    5036:	a1 2c 20    	mov.w     #0x2ca, w1
    5038:	80 82 20    	mov.w     #0x828, w0
    503a:	a1 00 07    	rcall     0x517e <_sw_init>

0000503c <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    503c:	00 80 fa    	ulnk      
    503e:	00 00 06    	return    

00005040 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    5040:	0a 00 fa    	lnk       #0xa
    5042:	00 0f 78    	mov.w     w0, [w14]
    5044:	11 07 98    	mov.w     w1, [w14+2]
    5046:	22 07 98    	mov.w     w2, [w14+4]
    5048:	33 07 98    	mov.w     w3, [w14+6]
    504a:	04 4f 98    	mov.b     w4, [w14+8]

0000504c <.LSM9>:
    self->port = port;
    504c:	1e 00 78    	mov.w     [w14], w0
    504e:	9e 00 90    	mov.w     [w14+2], w1
    5050:	01 08 78    	mov.w     w1, [w0]

00005052 <.LSM10>:
    self->tris = tris;
    5052:	1e 00 78    	mov.w     [w14], w0
    5054:	ae 00 90    	mov.w     [w14+4], w1
    5056:	11 00 98    	mov.w     w1, [w0+2]

00005058 <.LSM11>:
    self->ans = ans;
    5058:	1e 00 78    	mov.w     [w14], w0
    505a:	be 00 90    	mov.w     [w14+6], w1
    505c:	21 00 98    	mov.w     w1, [w0+4]

0000505e <.LSM12>:
    self->bit = bit;
    505e:	1e 00 78    	mov.w     [w14], w0
    5060:	8e 48 90    	mov.b     [w14+8], w1
    5062:	61 40 98    	mov.b     w1, [w0+6]

00005064 <.LSM13>:

    bitclear(self->ans, self->bit);
    5064:	1e 00 78    	mov.w     [w14], w0
    5066:	20 00 90    	mov.w     [w0+4], w0
    5068:	9e 00 78    	mov.w     [w14], w1
    506a:	a1 00 90    	mov.w     [w1+4], w1
    506c:	11 01 78    	mov.w     [w1], w2
    506e:	9e 00 78    	mov.w     [w14], w1
    5070:	e1 40 90    	mov.b     [w1+6], w1
    5072:	81 80 fb    	ze        w1, w1
    5074:	13 00 20    	mov.w     #0x1, w3
    5076:	81 18 dd    	sl.w      w3, w1, w1
    5078:	81 80 ea    	com.w     w1, w1
    507a:	81 00 61    	and.w     w2, w1, w1
    507c:	01 08 78    	mov.w     w1, [w0]

0000507e <.LSM14>:
    bitclear(self->port, self->bit);
    507e:	1e 00 78    	mov.w     [w14], w0
    5080:	10 00 78    	mov.w     [w0], w0
    5082:	9e 00 78    	mov.w     [w14], w1
    5084:	91 00 78    	mov.w     [w1], w1
    5086:	11 01 78    	mov.w     [w1], w2
    5088:	9e 00 78    	mov.w     [w14], w1
    508a:	e1 40 90    	mov.b     [w1+6], w1
    508c:	81 80 fb    	ze        w1, w1
    508e:	13 00 20    	mov.w     #0x1, w3
    5090:	81 18 dd    	sl.w      w3, w1, w1
    5092:	81 80 ea    	com.w     w1, w1
    5094:	81 00 61    	and.w     w2, w1, w1
    5096:	01 08 78    	mov.w     w1, [w0]

00005098 <.LSM15>:
    bitclear(self->tris, self->bit);
    5098:	1e 00 78    	mov.w     [w14], w0
    509a:	10 00 90    	mov.w     [w0+2], w0
    509c:	9e 00 78    	mov.w     [w14], w1
    509e:	91 00 90    	mov.w     [w1+2], w1
    50a0:	11 01 78    	mov.w     [w1], w2
    50a2:	9e 00 78    	mov.w     [w14], w1
    50a4:	e1 40 90    	mov.b     [w1+6], w1
    50a6:	81 80 fb    	ze        w1, w1
    50a8:	13 00 20    	mov.w     #0x1, w3
    50aa:	81 18 dd    	sl.w      w3, w1, w1
    50ac:	81 80 ea    	com.w     w1, w1
    50ae:	81 00 61    	and.w     w2, w1, w1
    50b0:	01 08 78    	mov.w     w1, [w0]

000050b2 <.LSM16>:
}
    50b2:	00 80 fa    	ulnk      
    50b4:	00 00 06    	return    

000050b6 <_led_on>:

void led_on(_LED *self) {
    50b6:	02 00 fa    	lnk       #0x2
    50b8:	00 0f 78    	mov.w     w0, [w14]

000050ba <.LSM18>:
    bitset(self->port, self->bit);
    50ba:	1e 00 78    	mov.w     [w14], w0
    50bc:	10 00 78    	mov.w     [w0], w0
    50be:	9e 00 78    	mov.w     [w14], w1
    50c0:	91 00 78    	mov.w     [w1], w1
    50c2:	11 01 78    	mov.w     [w1], w2
    50c4:	9e 00 78    	mov.w     [w14], w1
    50c6:	e1 40 90    	mov.b     [w1+6], w1
    50c8:	81 80 fb    	ze        w1, w1
    50ca:	13 00 20    	mov.w     #0x1, w3
    50cc:	81 18 dd    	sl.w      w3, w1, w1
    50ce:	82 80 70    	ior.w     w1, w2, w1
    50d0:	01 08 78    	mov.w     w1, [w0]

000050d2 <.LSM19>:
}
    50d2:	00 80 fa    	ulnk      
    50d4:	00 00 06    	return    

000050d6 <_led_off>:

void led_off(_LED *self) {
    50d6:	02 00 fa    	lnk       #0x2
    50d8:	00 0f 78    	mov.w     w0, [w14]

000050da <.LSM21>:
    bitclear(self->port, self->bit);
    50da:	1e 00 78    	mov.w     [w14], w0
    50dc:	10 00 78    	mov.w     [w0], w0
    50de:	9e 00 78    	mov.w     [w14], w1
    50e0:	91 00 78    	mov.w     [w1], w1
    50e2:	11 01 78    	mov.w     [w1], w2
    50e4:	9e 00 78    	mov.w     [w14], w1
    50e6:	e1 40 90    	mov.b     [w1+6], w1
    50e8:	81 80 fb    	ze        w1, w1
    50ea:	13 00 20    	mov.w     #0x1, w3
    50ec:	81 18 dd    	sl.w      w3, w1, w1
    50ee:	81 80 ea    	com.w     w1, w1
    50f0:	81 00 61    	and.w     w2, w1, w1
    50f2:	01 08 78    	mov.w     w1, [w0]

000050f4 <.LSM22>:
}
    50f4:	00 80 fa    	ulnk      
    50f6:	00 00 06    	return    

000050f8 <_led_toggle>:

void led_toggle(_LED *self) {
    50f8:	02 00 fa    	lnk       #0x2
    50fa:	00 0f 78    	mov.w     w0, [w14]

000050fc <.LSM24>:
    bitflip(self->port, self->bit);
    50fc:	1e 00 78    	mov.w     [w14], w0
    50fe:	10 00 78    	mov.w     [w0], w0
    5100:	9e 00 78    	mov.w     [w14], w1
    5102:	91 00 78    	mov.w     [w1], w1
    5104:	11 01 78    	mov.w     [w1], w2
    5106:	9e 00 78    	mov.w     [w14], w1
    5108:	e1 40 90    	mov.b     [w1+6], w1
    510a:	81 80 fb    	ze        w1, w1
    510c:	13 00 20    	mov.w     #0x1, w3
    510e:	81 18 dd    	sl.w      w3, w1, w1
    5110:	81 00 69    	xor.w     w2, w1, w1
    5112:	01 08 78    	mov.w     w1, [w0]

00005114 <.LSM25>:
}
    5114:	00 80 fa    	ulnk      
    5116:	00 00 06    	return    

00005118 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    5118:	04 00 fa    	lnk       #0x4
    511a:	00 0f 78    	mov.w     w0, [w14]
    511c:	11 07 98    	mov.w     w1, [w14+2]

0000511e <.LSM27>:
    if (val)
    511e:	1e 00 90    	mov.w     [w14+2], w0
    5120:	00 00 e0    	cp0.w     w0
    5122:	0d 00 32    	bra       Z, 0x513e <.L7>

00005124 <.LSM28>:
        bitset(self->port, self->bit);
    5124:	1e 00 78    	mov.w     [w14], w0
    5126:	10 00 78    	mov.w     [w0], w0
    5128:	9e 00 78    	mov.w     [w14], w1
    512a:	91 00 78    	mov.w     [w1], w1
    512c:	11 01 78    	mov.w     [w1], w2
    512e:	9e 00 78    	mov.w     [w14], w1
    5130:	e1 40 90    	mov.b     [w1+6], w1
    5132:	81 80 fb    	ze        w1, w1
    5134:	13 00 20    	mov.w     #0x1, w3
    5136:	81 18 dd    	sl.w      w3, w1, w1
    5138:	82 80 70    	ior.w     w1, w2, w1
    513a:	01 08 78    	mov.w     w1, [w0]
    513c:	0d 00 37    	bra       0x5158 <.L6>

0000513e <.L7>:
    else
        bitclear(self->port, self->bit);
    513e:	1e 00 78    	mov.w     [w14], w0
    5140:	10 00 78    	mov.w     [w0], w0
    5142:	9e 00 78    	mov.w     [w14], w1
    5144:	91 00 78    	mov.w     [w1], w1
    5146:	11 01 78    	mov.w     [w1], w2
    5148:	9e 00 78    	mov.w     [w14], w1
    514a:	e1 40 90    	mov.b     [w1+6], w1
    514c:	81 80 fb    	ze        w1, w1
    514e:	13 00 20    	mov.w     #0x1, w3
    5150:	81 18 dd    	sl.w      w3, w1, w1
    5152:	81 80 ea    	com.w     w1, w1
    5154:	81 00 61    	and.w     w2, w1, w1
    5156:	01 08 78    	mov.w     w1, [w0]

00005158 <.L6>:
}
    5158:	00 80 fa    	ulnk      
    515a:	00 00 06    	return    

0000515c <_led_read>:

uint16_t led_read(_LED *self) {
    515c:	02 00 fa    	lnk       #0x2
    515e:	00 0f 78    	mov.w     w0, [w14]

00005160 <.LSM32>:
    return bitread(self->port, self->bit);
    5160:	1e 00 78    	mov.w     [w14], w0
    5162:	10 00 78    	mov.w     [w0], w0
    5164:	90 00 78    	mov.w     [w0], w1
    5166:	1e 00 78    	mov.w     [w14], w0
    5168:	60 40 90    	mov.b     [w0+6], w0
    516a:	00 80 fb    	ze        w0, w0
    516c:	12 00 20    	mov.w     #0x1, w2
    516e:	00 10 dd    	sl.w      w2, w0, w0
    5170:	00 80 60    	and.w     w1, w0, w0
    5172:	00 f0 a7    	btsc.w    w0, #0xf
    5174:	00 00 ea    	neg.w     w0, w0
    5176:	00 00 ea    	neg.w     w0, w0
    5178:	4f 00 de    	lsr.w     w0, #0xf, w0

0000517a <.LSM33>:
}
    517a:	00 80 fa    	ulnk      
    517c:	00 00 06    	return    

0000517e <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    517e:	0a 00 fa    	lnk       #0xa
    5180:	00 0f 78    	mov.w     w0, [w14]
    5182:	11 07 98    	mov.w     w1, [w14+2]
    5184:	22 07 98    	mov.w     w2, [w14+4]
    5186:	33 07 98    	mov.w     w3, [w14+6]
    5188:	04 4f 98    	mov.b     w4, [w14+8]

0000518a <.LSM35>:
    self->port = port;
    518a:	1e 00 78    	mov.w     [w14], w0
    518c:	9e 00 90    	mov.w     [w14+2], w1
    518e:	01 08 78    	mov.w     w1, [w0]

00005190 <.LSM36>:
    self->tris = tris;
    5190:	1e 00 78    	mov.w     [w14], w0
    5192:	ae 00 90    	mov.w     [w14+4], w1
    5194:	11 00 98    	mov.w     w1, [w0+2]

00005196 <.LSM37>:
    self->ans = ans;
    5196:	1e 00 78    	mov.w     [w14], w0
    5198:	be 00 90    	mov.w     [w14+6], w1
    519a:	21 00 98    	mov.w     w1, [w0+4]

0000519c <.LSM38>:
    self->bit = bit;
    519c:	1e 00 78    	mov.w     [w14], w0
    519e:	8e 48 90    	mov.b     [w14+8], w1
    51a0:	61 40 98    	mov.b     w1, [w0+6]

000051a2 <.LSM39>:

    bitclear(self->ans, self->bit);
    51a2:	1e 00 78    	mov.w     [w14], w0
    51a4:	20 00 90    	mov.w     [w0+4], w0
    51a6:	9e 00 78    	mov.w     [w14], w1
    51a8:	a1 00 90    	mov.w     [w1+4], w1
    51aa:	11 01 78    	mov.w     [w1], w2
    51ac:	9e 00 78    	mov.w     [w14], w1
    51ae:	e1 40 90    	mov.b     [w1+6], w1
    51b0:	81 80 fb    	ze        w1, w1
    51b2:	13 00 20    	mov.w     #0x1, w3
    51b4:	81 18 dd    	sl.w      w3, w1, w1
    51b6:	81 80 ea    	com.w     w1, w1
    51b8:	81 00 61    	and.w     w2, w1, w1
    51ba:	01 08 78    	mov.w     w1, [w0]

000051bc <.LSM40>:
    bitset(self->tris, self->bit);
    51bc:	1e 00 78    	mov.w     [w14], w0
    51be:	10 00 90    	mov.w     [w0+2], w0
    51c0:	9e 00 78    	mov.w     [w14], w1
    51c2:	91 00 90    	mov.w     [w1+2], w1
    51c4:	11 01 78    	mov.w     [w1], w2
    51c6:	9e 00 78    	mov.w     [w14], w1
    51c8:	e1 40 90    	mov.b     [w1+6], w1
    51ca:	81 80 fb    	ze        w1, w1
    51cc:	13 00 20    	mov.w     #0x1, w3
    51ce:	81 18 dd    	sl.w      w3, w1, w1
    51d0:	82 80 70    	ior.w     w1, w2, w1
    51d2:	01 08 78    	mov.w     w1, [w0]

000051d4 <.LSM41>:
}
    51d4:	00 80 fa    	ulnk      
    51d6:	00 00 06    	return    

000051d8 <_sw_read>:

uint16_t sw_read(_SW *self) {
    51d8:	02 00 fa    	lnk       #0x2
    51da:	00 0f 78    	mov.w     w0, [w14]

000051dc <.LSM43>:
    return bitread(self->port, self->bit);
    51dc:	1e 00 78    	mov.w     [w14], w0
    51de:	10 00 78    	mov.w     [w0], w0
    51e0:	90 00 78    	mov.w     [w0], w1
    51e2:	1e 00 78    	mov.w     [w14], w0
    51e4:	60 40 90    	mov.b     [w0+6], w0
    51e6:	00 80 fb    	ze        w0, w0
    51e8:	12 00 20    	mov.w     #0x1, w2
    51ea:	00 10 dd    	sl.w      w2, w0, w0
    51ec:	00 80 60    	and.w     w1, w0, w0
    51ee:	00 f0 a7    	btsc.w    w0, #0xf
    51f0:	00 00 ea    	neg.w     w0, w0
    51f2:	00 00 ea    	neg.w     w0, w0
    51f4:	4f 00 de    	lsr.w     w0, #0xf, w0

000051f6 <.LSM44>:
}
    51f6:	00 80 fa    	ulnk      
    51f8:	00 00 06    	return    
Disassembly of section .dinit:

000051fa <.dinit>:
    51fa:	c8 11 00    	nop       
    51fc:	80 08 00    	nop       
    51fe:	80 00 00    	nop       
    5200:	42 08 00    	nop       
    5202:	0e 00 00    	nop       
    5204:	80 00 00    	nop       
    5206:	48 1a 00    	nop       
    5208:	b8 01 00    	nop       
    520a:	80 00 00    	nop       
    520c:	00 08 00    	nop       
    520e:	30 00 00    	nop       
    5210:	80 00 00    	nop       
    5212:	ee 1d 00    	nop       
    5214:	10 00 00    	nop       
    5216:	82 00 00    	nop       
    5218:	bd 37 86    	mov.w     0xc6f6, w13
    521a:	33 bd 37    	bra       0xffffcc82
    521c:	06 35 bd    	subr.w    0x1506
    521e:	37 86 36    	bra       LEU, 0xffff5e8e
    5220:	bd 37 86    	mov.w     0xc6f6, w13
    5222:	37 00 00    	nop       
    5224:	14 1d 00    	nop       
    5226:	6e 00 00    	nop       
    5228:	80 00 00    	nop       
    522a:	54 08 00    	nop       
    522c:	74 09 00    	nop       
    522e:	80 00 00    	nop       
    5230:	50 08 00    	nop       
    5232:	04 00 00    	nop       
    5234:	80 00 00    	nop       
    5236:	88 1c 00    	nop       
    5238:	8c 00 00    	nop       
    523a:	80 00 00    	nop       
    523c:	00 1e 00    	nop       
    523e:	80 00 00    	nop       
    5240:	80 00 00    	nop       
    5242:	30 08 00    	nop       
    5244:	12 00 00    	nop       
    5246:	80 00 00    	nop       
    5248:	fe 1d 00    	nop       
    524a:	02 00 00    	nop       
    524c:	82 00 00    	nop       
    524e:	04 00 00    	nop       
    5250:	fe 1e 00    	nop       
    5252:	04 00 00    	nop       
    5254:	80 00 00    	nop       
    5256:	00 1c 00    	nop       
    5258:	88 00 00    	nop       
    525a:	82 00 00    	nop       
    525c:	01 00 00    	nop       
    525e:	00 26 1c    	subbr.w   w8, w0, [--w12]
    5260:	27 1c 26    	mov.w     #0x61c2, w7
    5262:	1c 26 1c    	subbr.w   w8, [w12], [--w12]
    5264:	26 1c 26    	mov.w     #0x61c2, w6
    5266:	1c 16 1c    	subbr.w   w8, [w12], [w12--]
	...
    5276:	00 02 08    	do        #0x200, 0x547c
    5278:	01 01 4e 
    527a:	1c 4f 1c    	subbr.b   w8, [w12], [w14]
    527c:	4e 1c 4e    	addc.w    w12, [--w14], [w8++]
    527e:	1c 4e 1c    	subbr.b   w8, [w12], [w12]
    5280:	4e 1c 3e    	bra       GTU, 0x8b1e
    5282:	1c 00 00    	nop       
	...
    5290:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207ac50>
    5292:	08 02 02 
    5294:	76 1c 77    	ior.w     w14, #0x16, [w8++]
    5296:	1c 76 1c    	.pword 0x1c761c
    5298:	76 1c 76    	ior.w     w12, #0x16, [w8++]
    529a:	1c 76 1c    	.pword 0x1c761c
    529c:	66 1c 00    	nop       
	...
    52ac:	00 1c 28    	mov.w     #0x81c0, w0
    52ae:	1c 50 1c    	subbr.b   w8, [w12], [w0--]
	...
    52b8:	82 1d 00    	nop       
    52ba:	4a 00 00    	nop       
    52bc:	82 00 00    	nop       
    52be:	30 31 32    	bra       Z, 0xb520
    52c0:	33 34 35    	bra       LT, 0xbb28
    52c2:	36 37 38    	bra       NOV, 0xc130
    52c4:	39 61 62    	and.b     w4, [w9++], [--w2]
    52c6:	63 64 65    	and.b     w10, #0x3, [--w8]
    52c8:	66 67 68    	xor.b     w0, #0x6, [--w14]
    52ca:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    52cc:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    52ce:	6f 70 71    	.pword 0x71706f
    52d0:	72 73 74    	.pword 0x747372
    52d2:	75 76 77    	.pword 0x777675
    52d4:	78 79 7a    	.pword 0x7a7978
    52d6:	00 00 00    	nop       
    52d8:	21 15 11    	subr.w    w2, [w1--], [w10--]
    52da:	0e 0d 0c    	bra       OA, 0x6cf8
    52dc:	0b 0b 0a    	bfins     #0xb, #0x0, w9, w10
    52de:	0a 09 09 
    52e0:	09 09 09    	repeat    #0x909
    52e2:	08 08 08    	do        #0x808, 0x62f6
    52e4:	08 08 08 
    52e6:	08 07 07    	rcall     0x60f8
    52e8:	07 07 07    	rcall     0x60f8
    52ea:	07 07 07    	rcall     0x60fa
    52ec:	07 07 07    	rcall     0x60fc
    52ee:	07 07 00    	nop       
    52f0:	80 1e 00    	nop       
    52f2:	4a 00 00    	nop       
    52f4:	82 00 00    	nop       
    52f6:	30 31 32    	bra       Z, 0xb558
    52f8:	33 34 35    	bra       LT, 0xbb60
    52fa:	36 37 38    	bra       NOV, 0xc168
    52fc:	39 61 62    	and.b     w4, [w9++], [--w2]
    52fe:	63 64 65    	and.b     w10, #0x3, [--w8]
    5300:	66 67 68    	xor.b     w0, #0x6, [--w14]
    5302:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    5304:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    5306:	6f 70 71    	.pword 0x71706f
    5308:	72 73 74    	.pword 0x747372
    530a:	75 76 77    	.pword 0x777675
    530c:	78 79 7a    	.pword 0x7a7978
    530e:	00 00 00    	nop       
    5310:	41 29 21    	mov.w     #0x1294, w1
    5312:	1c 19 17    	subr.w    w14, [w12], [w2++]
    5314:	16 15 14    	subr.w    w8, [w6], [w10--]
    5316:	13 12 12    	subr.w    w4, [w3], [w4--]
    5318:	11 11 11    	subr.w    w2, [w1], [w2--]
    531a:	10 10 10    	subr.w    w0, [w0], [w0--]
    531c:	0f 0f 0f    	bra       SB, 0x713c
    531e:	0f 0e 0e    	bra       SA, 0x6f3e
    5320:	0e 0e 0e    	bra       SA, 0x6f3e
    5322:	0e 0e 0d    	bra       OB, 0x6f40
    5324:	0d 0d 0d    	bra       OB, 0x6d40
    5326:	0d 0d 00    	nop       
    5328:	02 1f 00    	nop       
    532a:	04 00 00    	nop       
    532c:	80 00 00    	nop       
    532e:	ca 1e 00    	nop       
    5330:	1a 00 00    	nop       
    5332:	82 00 00    	nop       
    5334:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    5336:	74 7a 4c    	.pword 0x4c7a74
    5338:	00 00 01    	call      w0
    533a:	00 02 00    	nop       
    533c:	04 00 08    	do        #0x4, 0x7340
    533e:	00 10 00 
    5340:	00 00 20    	mov.w     #0x0, w0
    5342:	2b 2d 23    	mov.w     #0x32d2, w11
    5344:	30 00 00    	nop       
    5346:	e4 1e 00    	nop       
    5348:	1a 00 00    	nop       
    534a:	82 00 00    	nop       
    534c:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    534e:	74 7a 4c    	.pword 0x4c7a74
    5350:	00 00 01    	call      w0
    5352:	00 02 00    	nop       
    5354:	04 00 08    	do        #0x4, 0x7358
    5356:	00 10 00 
    5358:	00 00 20    	mov.w     #0x0, w0
    535a:	2b 2d 23    	mov.w     #0x32d2, w11
    535c:	30 00 00    	nop       
    535e:	cc 1d 00    	nop       
    5360:	22 00 00    	nop       
    5362:	82 00 00    	nop       
    5364:	30 31 32    	bra       Z, 0xb5c6
    5366:	33 34 35    	bra       LT, 0xbbce
    5368:	36 37 38    	bra       NOV, 0xc1d6
    536a:	39 41 42    	add.b     w4, [w9++], w2
    536c:	43 44 45    	add.b     w10, [--w3], w8
    536e:	46 00 30    	bra       OV, 0x53fc
    5370:	31 32 33    	bra       N, 0xb7d4
    5372:	34 35 36    	bra       LEU, 0xbddc
    5374:	37 38 39    	bra       NC, 0xc3e4
    5376:	61 62 63    	and.b     w6, #0x1, [--w4]
    5378:	64 65 66    	and.b     w12, #0x4, [--w10]
    537a:	00 00 00    	nop       
    537c:	06 1f 00    	nop       
    537e:	02 00 00    	nop       
    5380:	80 00 00    	nop       
    5382:	08 1f 00    	nop       
    5384:	02 00 00    	nop       
    5386:	80 00 00    	nop       
    5388:	00 00 00    	nop       
Disassembly of section .text:

0000538a <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    538a:	02 00 fa    	lnk       #0x2
    538c:	00 0f 78    	mov.w     w0, [w14]

0000538e <.LSM1>:
    v ^= v >> 8;
    538e:	1e 00 78    	mov.w     [w14], w0
    5390:	48 00 de    	lsr.w     w0, #0x8, w0
    5392:	1e 0f 68    	xor.w     w0, [w14], [w14]

00005394 <.LSM2>:
    v ^= v >> 4;
    5394:	1e 00 78    	mov.w     [w14], w0
    5396:	44 00 de    	lsr.w     w0, #0x4, w0
    5398:	1e 0f 68    	xor.w     w0, [w14], [w14]

0000539a <.LSM3>:
    v ^= v >> 2;
    539a:	1e 00 78    	mov.w     [w14], w0
    539c:	42 00 de    	lsr.w     w0, #0x2, w0
    539e:	1e 0f 68    	xor.w     w0, [w14], [w14]

000053a0 <.LSM4>:
    v ^= v >> 1;
    53a0:	1e 00 78    	mov.w     [w14], w0
    53a2:	00 00 d1    	lsr.w     w0, w0
    53a4:	1e 0f 68    	xor.w     w0, [w14], [w14]

000053a6 <.LSM5>:
    return v & 1;
    53a6:	1e 00 78    	mov.w     [w14], w0
    53a8:	00 40 78    	mov.b     w0, w0
    53aa:	61 40 60    	and.b     w0, #0x1, w0

000053ac <.LSM6>:
}
    53ac:	00 80 fa    	ulnk      
    53ae:	00 00 06    	return    
Disassembly of section .isr:

000053b0 <__DefaultInterrupt>:
    53b0:	00 40 da    	.pword 0xda4000
    53b2:	00 00 fe    	reset     
