
rocket_main.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	4f fd 21    	mov.w     #0x1fd4, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	a0 a1 25    	mov.w     #0x5a1a, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	3a 4e 02    	call      0x4e3a <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	00 07 20    	mov.w     #0x70, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	98 3e 04    	goto      0x3e98 <___digitalRead>
    11e4:	00 00 00 
    11e6:	54 3e 04    	goto      0x3e54 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	ba 3e 04    	goto      0x3eba <___analogRead>
    11ec:	00 00 00 
    11ee:	32 56 04    	goto      0x5632 <__read_quad1>
    11f0:	00 00 00 
    11f2:	3c 56 04    	goto      0x563c <__read_quad2>
    11f4:	00 00 00 
    11f6:	1a 56 04    	goto      0x561a <__timer_read_quad1>
    11f8:	00 00 00 
    11fa:	26 56 04    	goto      0x5626 <__timer_read_quad2>
    11fc:	00 00 00 
    11fe:	0c 22 04    	goto      0x220c <___putc_nobuffer>
    1200:	00 00 00 
    1202:	4e 22 04    	goto      0x224e <___putc_buffer>
    1204:	00 00 00 
    1206:	30 22 04    	goto      0x2230 <___getc_nobuffer>
    1208:	00 00 00 
    120a:	46 23 04    	goto      0x2346 <___getc_buffer>
    120c:	00 00 00 
    120e:	44 43 04    	goto      0x4344 <___pwmWrite>
    1210:	00 00 00 
    1212:	16 43 04    	goto      0x4316 <___pwmRead>
    1214:	00 00 00 
    1216:	ae 43 04    	goto      0x43ae <___servoWrite>
    1218:	00 00 00 
    121a:	7c 43 04    	goto      0x437c <___servoRead>
    121c:	00 00 00 
    121e:	b4 17 04    	goto      0x17b4 <_prout>
    1220:	00 00 00 

00001222 <___subsf3>:
    1222:	03 f0 a2    	btg.w     w3, #0xf

00001224 <___addsf3>:
    1224:	88 9f be    	mov.d     w8, [w15++]
    1226:	8a 9f be    	mov.d     w10, [w15++]
    1228:	8c 1f 78    	mov.w     w12, [w15++]
    122a:	ff 00 07    	rcall     0x142a <__funpack2>
    122c:	06 01 33    	bra       N, 0x143a <__fPropagateNaN>
    122e:	64 50 e1    	cp.w      w10, #0x4
    1230:	4f 00 32    	bra       Z, 0x12d0 <aisinfinite>

00001232 <checkspecialb>:
    1232:	64 20 e1    	cp.w      w4, #0x4
    1234:	52 00 32    	bra       Z, 0x12da <return2>
    1236:	03 82 6c    	xor.w     w9, w3, w4
    1238:	07 00 3b    	bra       NN, 0x1248 <getsign>
    123a:	09 05 d0    	sl.w      w9, w10
    123c:	03 06 d0    	sl.w      w3, w12
    123e:	82 0f 54    	sub.w     w8, w2, [w15]
    1240:	0c 06 5d    	subb.w    w10, w12, w12
    1242:	02 00 39    	bra       NC, 0x1248 <getsign>
    1244:	02 00 32    	bra       Z, 0x124a <gotsign>
    1246:	89 01 78    	mov.w     w9, w3

00001248 <getsign>:
    1248:	03 06 78    	mov.w     w3, w12

0000124a <gotsign>:
    124a:	85 82 55    	sub.w     w11, w5, w5
    124c:	04 00 3d    	bra       GE, 0x1256 <expcanonical>
    124e:	00 03 fd    	exch      w0, w6
    1250:	81 03 fd    	exch      w1, w7
    1252:	85 02 ea    	neg.w     w5, w5
    1254:	8b 85 42    	add.w     w5, w11, w11

00001256 <expcanonical>:
    1256:	84 0f 72    	ior.w     w4, w4, [w15]
    1258:	02 00 3b    	bra       NN, 0x125e <nonegate>
    125a:	60 00 10    	subr.w    w0, #0x0, w0
    125c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000125e <nonegate>:
    125e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1260:	00 05 eb    	clr.w     w10
    1262:	7a 28 e1    	cp.w      w5, #0x1a
    1264:	0a 00 39    	bra       NC, 0x127a <aligniter>
    1266:	06 00 78    	mov.w     w6, w0
    1268:	c7 5d dd    	sl.w      w11, #0x7, w11
    126a:	f7 07 b2    	and.w     #0x7f, w7
    126c:	87 80 75    	ior.w     w11, w7, w1
    126e:	2d 00 37    	bra       0x12ca <signoff>

00001270 <align>:
    1270:	82 81 71    	ior.w     w3, w2, w3
    1272:	0a 01 78    	mov.w     w10, w2
    1274:	61 05 60    	and.w     w0, #0x1, w10
    1276:	81 80 d1    	asr.w     w1, w1
    1278:	00 80 d3    	rrc.w     w0, w0

0000127a <aligniter>:
    127a:	85 02 e9    	dec.w     w5, w5
    127c:	f9 ff 3b    	bra       NN, 0x1270 <align>

0000127e <aligned>:
    127e:	06 04 40    	add.w     w0, w6, w8
    1280:	87 84 48    	addc.w    w1, w7, w9
    1282:	02 00 3b    	bra       NN, 0x1288 <normalizesum>
    1284:	60 04 14    	subr.w    w8, #0x0, w8
    1286:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001288 <normalizesum>:
    1288:	09 88 a3    	btst.z    w9, #0x8
    128a:	07 00 32    	bra       Z, 0x129a <checknormal>
    128c:	8a 81 71    	ior.w     w3, w10, w3
    128e:	82 81 71    	ior.w     w3, w2, w3
    1290:	61 01 64    	and.w     w8, #0x1, w2
    1292:	89 04 d1    	lsr.w     w9, w9
    1294:	08 84 d3    	rrc.w     w8, w8
    1296:	8b 05 e8    	inc.w     w11, w11
    1298:	17 00 37    	bra       0x12c8 <round>

0000129a <checknormal>:
    129a:	09 78 a3    	btst.z    w9, #0x7
    129c:	13 00 3a    	bra       NZ, 0x12c4 <discardguard>

0000129e <underflow>:
    129e:	0b 00 e0    	cp0.w     w11
    12a0:	13 00 34    	bra       LE, 0x12c8 <round>
    12a2:	8b 05 e9    	dec.w     w11, w11
    12a4:	08 04 44    	add.w     w8, w8, w8
    12a6:	89 84 4c    	addc.w    w9, w9, w9
    12a8:	0a 44 74    	ior.b     w8, w10, w8
    12aa:	09 78 a3    	btst.z    w9, #0x7
    12ac:	0d 00 3a    	bra       NZ, 0x12c8 <round>

000012ae <normalizeloop>:
    12ae:	0b 00 e0    	cp0.w     w11
    12b0:	07 00 34    	bra       LE, 0x12c0 <normalizeexit>
    12b2:	8b 05 e9    	dec.w     w11, w11
    12b4:	08 04 44    	add.w     w8, w8, w8
    12b6:	89 84 4c    	addc.w    w9, w9, w9
    12b8:	01 00 3a    	bra       NZ, 0x12bc <normalizetest>
    12ba:	0b 00 20    	mov.w     #0x0, w11

000012bc <normalizetest>:
    12bc:	09 78 a3    	btst.z    w9, #0x7
    12be:	f7 ff 32    	bra       Z, 0x12ae <normalizeloop>

000012c0 <normalizeexit>:
    12c0:	00 01 eb    	clr.w     w2
    12c2:	02 00 37    	bra       0x12c8 <round>

000012c4 <discardguard>:
    12c4:	82 81 71    	ior.w     w3, w2, w3
    12c6:	0a 01 78    	mov.w     w10, w2

000012c8 <round>:
    12c8:	75 00 07    	rcall     0x13b4 <__fpack>

000012ca <signoff>:
    12ca:	0c f0 a7    	btsc.w    w12, #0xf
    12cc:	01 f0 a0    	bset.w    w1, #0xf
    12ce:	be 00 37    	bra       0x144c <__fbopExit>

000012d0 <aisinfinite>:
    12d0:	64 20 e1    	cp.w      w4, #0x4
    12d2:	02 00 3a    	bra       NZ, 0x12d8 <return8>
    12d4:	83 8f 6c    	xor.w     w9, w3, [w15]
    12d6:	be 00 33    	bra       N, 0x1454 <__fbopReturnNaN>

000012d8 <return8>:
    12d8:	08 01 be    	mov.d     w8, w2

000012da <return2>:
    12da:	02 00 be    	mov.d     w2, w0
    12dc:	b7 00 37    	bra       0x144c <__fbopExit>

000012de <___divsf3>:
    12de:	88 9f be    	mov.d     w8, [w15++]
    12e0:	8a 9f be    	mov.d     w10, [w15++]
    12e2:	8c 1f 78    	mov.w     w12, [w15++]
    12e4:	a2 00 07    	rcall     0x142a <__funpack2>
    12e6:	a9 00 33    	bra       N, 0x143a <__fPropagateNaN>
    12e8:	03 86 6c    	xor.w     w9, w3, w12
    12ea:	64 50 e1    	cp.w      w10, #0x4
    12ec:	2e 00 32    	bra       Z, 0x134a <aisinfinite>
    12ee:	64 20 e1    	cp.w      w4, #0x4
    12f0:	33 00 32    	bra       Z, 0x1358 <returnZero>
    12f2:	61 50 e1    	cp.w      w10, #0x1
    12f4:	2f 00 32    	bra       Z, 0x1354 <aiszero>
    12f6:	61 20 e1    	cp.w      w4, #0x1
    12f8:	31 00 32    	bra       Z, 0x135c <returnInf>

000012fa <finitenonzero>:
    12fa:	85 85 55    	sub.w     w11, w5, w11
    12fc:	eb 07 b0    	add.w     #0x7e, w11
    12fe:	09 00 20    	mov.w     #0x0, w9
    1300:	08 04 20    	mov.w     #0x40, w8
    1302:	05 00 37    	bra       0x130e <diventry>

00001304 <divnext>:
    1304:	08 04 44    	add.w     w8, w8, w8
    1306:	89 84 4c    	addc.w    w9, w9, w9
    1308:	0a 00 31    	bra       C, 0x131e <divdone>

0000130a <divloop>:
    130a:	06 03 43    	add.w     w6, w6, w6
    130c:	87 83 4b    	addc.w    w7, w7, w7

0000130e <diventry>:
    130e:	00 01 53    	sub.w     w6, w0, w2
    1310:	81 81 5b    	subb.w    w7, w1, w3
    1312:	f8 ff 33    	bra       N, 0x1304 <divnext>
    1314:	02 03 be    	mov.d     w2, w6
    1316:	08 00 a0    	bset.w    w8, #0x0
    1318:	08 04 44    	add.w     w8, w8, w8
    131a:	89 84 4c    	addc.w    w9, w9, w9
    131c:	f6 ff 39    	bra       NC, 0x130a <divloop>

0000131e <divdone>:
    131e:	c6 39 dd    	sl.w      w7, #0x6, w3
    1320:	83 01 73    	ior.w     w6, w3, w3
    1322:	01 00 32    	bra       Z, 0x1326 <stickyok>
    1324:	13 00 20    	mov.w     #0x1, w3

00001326 <stickyok>:
    1326:	89 04 d1    	lsr.w     w9, w9
    1328:	08 84 d3    	rrc.w     w8, w8
    132a:	09 98 a3    	btst.z    w9, #0x9
    132c:	05 00 32    	bra       Z, 0x1338 <guardused>
    132e:	08 00 a7    	btsc.w    w8, #0x0
    1330:	03 00 a0    	bset.w    w3, #0x0
    1332:	89 04 d1    	lsr.w     w9, w9
    1334:	08 84 d3    	rrc.w     w8, w8
    1336:	8b 05 e8    	inc.w     w11, w11

00001338 <guardused>:
    1338:	89 04 d1    	lsr.w     w9, w9
    133a:	08 84 d3    	rrc.w     w8, w8
    133c:	00 01 eb    	clr.w     w2
    133e:	02 81 d2    	rlc.w     w2, w2
    1340:	39 00 07    	rcall     0x13b4 <__fpack>

00001342 <return0>:
    1342:	01 f0 a1    	bclr.w    w1, #0xf
    1344:	0c f0 a7    	btsc.w    w12, #0xf
    1346:	01 f0 a0    	bset.w    w1, #0xf
    1348:	81 00 37    	bra       0x144c <__fbopExit>

0000134a <aisinfinite>:
    134a:	64 20 e1    	cp.w      w4, #0x4
    134c:	83 00 32    	bra       Z, 0x1454 <__fbopReturnNaN>

0000134e <return8>:
    134e:	08 01 be    	mov.d     w8, w2

00001350 <return2>:
    1350:	02 00 be    	mov.d     w2, w0
    1352:	f7 ff 37    	bra       0x1342 <return0>

00001354 <aiszero>:
    1354:	61 20 e1    	cp.w      w4, #0x1
    1356:	7e 00 32    	bra       Z, 0x1454 <__fbopReturnNaN>

00001358 <returnZero>:
    1358:	60 00 b8    	mul.uu    w0, #0x0, w0
    135a:	f3 ff 37    	bra       0x1342 <return0>

0000135c <returnInf>:
    135c:	00 00 20    	mov.w     #0x0, w0
    135e:	01 f8 27    	mov.w     #0x7f80, w1
    1360:	f0 ff 37    	bra       0x1342 <return0>

00001362 <___eqsf2>:
    1362:	14 00 20    	mov.w     #0x1, w4
    1364:	e5 00 37    	bra       0x1530 <__fcompare>

00001366 <___gesf2>:
    1366:	f4 ff 2f    	mov.w     #0xffff, w4
    1368:	e3 00 37    	bra       0x1530 <__fcompare>

0000136a <___fixunssfsi>:
    136a:	00 01 be    	mov.d     w0, w2
    136c:	49 00 07    	rcall     0x1400 <__funpack>
    136e:	04 70 a7    	btsc.w    w4, #0x7
    1370:	03 f0 a1    	bclr.w    w3, #0xf
    1372:	03 f8 a3    	btst.z    w3, #0xf
    1374:	13 00 3a    	bra       NZ, 0x139c <returnzero>
    1376:	65 09 b1    	sub.w     #0x96, w5
    1378:	10 00 32    	bra       Z, 0x139a <exit>
    137a:	09 00 35    	bra       LT, 0x138e <shiftright>
    137c:	69 28 e1    	cp.w      w5, #0x9
    137e:	02 00 35    	bra       LT, 0x1384 <shiftleft>
    1380:	01 00 28    	mov.w     #0x8000, w1
    1382:	00 00 05    	retlw.w   #0x0, w0

00001384 <shiftleft>:
    1384:	00 00 40    	add.w     w0, w0, w0
    1386:	81 80 48    	addc.w    w1, w1, w1
    1388:	85 02 e9    	dec.w     w5, w5
    138a:	fc ff 3a    	bra       NZ, 0x1384 <shiftleft>
    138c:	00 00 06    	return    

0000138e <shiftright>:
    138e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1390:	05 00 35    	bra       LT, 0x139c <returnzero>

00001392 <shiftrightloop>:
    1392:	81 00 d1    	lsr.w     w1, w1
    1394:	00 80 d3    	rrc.w     w0, w0
    1396:	85 02 e8    	inc.w     w5, w5
    1398:	fc ff 3a    	bra       NZ, 0x1392 <shiftrightloop>

0000139a <exit>:
    139a:	00 00 06    	return    

0000139c <returnzero>:
    139c:	80 00 eb    	clr.w     w1
    139e:	00 00 05    	retlw.w   #0x0, w0

000013a0 <___floatunsisf>:
    13a0:	60 11 b8    	mul.uu    w2, #0x0, w2
    13a2:	e1 00 37    	bra       0x1566 <___floatundisf>

000013a4 <_floorf>:
    13a4:	00 01 eb    	clr.w     w2
    13a6:	9d 00 07    	rcall     0x14e2 <__fchop>
    13a8:	04 00 32    	bra       Z, 0x13b2 <exit>
    13aa:	02 00 20    	mov.w     #0x0, w2
    13ac:	03 f8 23    	mov.w     #0x3f80, w3
    13ae:	01 f0 a7    	btsc.w    w1, #0xf
    13b0:	38 ff 07    	rcall     0x1222 <___subsf3>

000013b2 <exit>:
    13b2:	00 00 06    	return    

000013b4 <__fpack>:
    13b4:	81 00 20    	mov.w     #0x8, w1
    13b6:	61 80 55    	sub.w     w11, #0x1, w0
    13b8:	0b 00 3d    	bra       GE, 0x13d0 <notsubnormal>
    13ba:	0b 00 20    	mov.w     #0x0, w11
    13bc:	61 fe 2f    	mov.w     #0xffe6, w1
    13be:	01 00 e1    	cp.w      w0, w1
    13c0:	1d 00 34    	bra       LE, 0x13fc <zerosig>

000013c2 <subnormal>:
    13c2:	82 81 71    	ior.w     w3, w2, w3
    13c4:	61 01 64    	and.w     w8, #0x1, w2
    13c6:	89 04 d1    	lsr.w     w9, w9
    13c8:	08 84 d3    	rrc.w     w8, w8
    13ca:	00 00 e8    	inc.w     w0, w0
    13cc:	fa ff 3a    	bra       NZ, 0x13c2 <subnormal>
    13ce:	71 00 20    	mov.w     #0x7, w1

000013d0 <notsubnormal>:
    13d0:	61 00 64    	and.w     w8, #0x1, w0
    13d2:	03 00 70    	ior.w     w0, w3, w0
    13d4:	02 00 60    	and.w     w0, w2, w0
    13d6:	09 00 32    	bra       Z, 0x13ea <packupandgo>
    13d8:	61 04 44    	add.w     w8, #0x1, w8
    13da:	e0 84 4c    	addc.w    w9, #0x0, w9
    13dc:	09 88 a5    	btst.z    w9, w1
    13de:	05 00 32    	bra       Z, 0x13ea <packupandgo>
    13e0:	8b 05 e8    	inc.w     w11, w11
    13e2:	68 08 e1    	cp.w      w1, #0x8
    13e4:	02 00 3a    	bra       NZ, 0x13ea <packupandgo>
    13e6:	89 04 d1    	lsr.w     w9, w9
    13e8:	08 84 d3    	rrc.w     w8, w8

000013ea <packupandgo>:
    13ea:	f2 0f 20    	mov.w     #0xff, w2
    13ec:	02 58 e1    	cp.w      w11, w2
    13ee:	05 00 3d    	bra       GE, 0x13fa <overflow>
    13f0:	c7 5d dd    	sl.w      w11, #0x7, w11
    13f2:	f9 07 b2    	and.w     #0x7f, w9
    13f4:	89 80 75    	ior.w     w11, w9, w1
    13f6:	08 00 78    	mov.w     w8, w0
    13f8:	00 00 06    	return    

000013fa <overflow>:
    13fa:	0b f8 27    	mov.w     #0x7f80, w11

000013fc <zerosig>:
    13fc:	8b 00 78    	mov.w     w11, w1
    13fe:	00 00 05    	retlw.w   #0x0, w0

00001400 <__funpack>:
    1400:	c7 0a de    	lsr.w     w1, #0x7, w5
    1402:	f1 07 b2    	and.w     #0x7f, w1
    1404:	f5 0f b2    	and.w     #0xff, w5
    1406:	08 00 32    	bra       Z, 0x1418 <zeroorsub>
    1408:	e1 cf 42    	add.b     w5, #0x1, [w15]
    140a:	02 00 32    	bra       Z, 0x1410 <nanorinf>

0000140c <finitereturn>:
    140c:	01 70 a0    	bset.w    w1, #0x7
    140e:	24 00 05    	retlw.w   #0x2, w4

00001410 <nanorinf>:
    1410:	81 0f 70    	ior.w     w0, w1, [w15]
    1412:	01 00 32    	bra       Z, 0x1416 <infinite>
    1414:	04 08 05    	retlw.w   #0x80, w4

00001416 <infinite>:
    1416:	44 00 05    	retlw.w   #0x4, w4

00001418 <zeroorsub>:
    1418:	81 0f 70    	ior.w     w0, w1, [w15]
    141a:	02 00 3a    	bra       NZ, 0x1420 <subnormal>
    141c:	14 00 05    	retlw.w   #0x1, w4

0000141e <normalize>:
    141e:	85 02 e9    	dec.w     w5, w5

00001420 <subnormal>:
    1420:	00 00 40    	add.w     w0, w0, w0
    1422:	81 c0 48    	addc.b    w1, w1, w1
    1424:	fc ff 3b    	bra       NN, 0x141e <normalize>
    1426:	01 70 a0    	bset.w    w1, #0x7
    1428:	24 00 05    	retlw.w   #0x2, w4

0000142a <__funpack2>:
    142a:	00 04 be    	mov.d     w0, w8
    142c:	e9 ff 07    	rcall     0x1400 <__funpack>
    142e:	00 03 be    	mov.d     w0, w6
    1430:	04 05 be    	mov.d     w4, w10
    1432:	02 00 be    	mov.d     w2, w0
    1434:	e5 ff 07    	rcall     0x1400 <__funpack>
    1436:	84 4f 75    	ior.b     w10, w4, [w15]
    1438:	00 00 06    	return    

0000143a <__fPropagateNaN>:
    143a:	02 00 be    	mov.d     w2, w0
    143c:	64 50 e1    	cp.w      w10, #0x4
    143e:	05 00 36    	bra       LEU, 0x144a <return0>
    1440:	64 20 e1    	cp.w      w4, #0x4
    1442:	02 00 36    	bra       LEU, 0x1448 <return8>
    1444:	09 68 a3    	btst.z    w9, #0x6
    1446:	01 00 3a    	bra       NZ, 0x144a <return0>

00001448 <return8>:
    1448:	08 00 be    	mov.d     w8, w0

0000144a <return0>:
    144a:	01 60 a0    	bset.w    w1, #0x6

0000144c <__fbopExit>:
    144c:	4f 06 78    	mov.w     [--w15], w12
    144e:	4f 05 be    	mov.d     [--w15], w10
    1450:	4f 04 be    	mov.d     [--w15], w8
    1452:	00 00 06    	return    

00001454 <__fbopReturnNaN>:
    1454:	f0 ff 2f    	mov.w     #0xffff, w0
    1456:	f1 ff 27    	mov.w     #0x7fff, w1
    1458:	f9 ff 37    	bra       0x144c <__fbopExit>

0000145a <___mulsf3>:
    145a:	88 9f be    	mov.d     w8, [w15++]
    145c:	8a 9f be    	mov.d     w10, [w15++]
    145e:	8c 1f 78    	mov.w     w12, [w15++]
    1460:	e4 ff 07    	rcall     0x142a <__funpack2>
    1462:	eb ff 33    	bra       N, 0x143a <__fPropagateNaN>
    1464:	03 86 6c    	xor.w     w9, w3, w12
    1466:	64 50 e1    	cp.w      w10, #0x4
    1468:	24 00 32    	bra       Z, 0x14b2 <aisinfinite>
    146a:	64 20 e1    	cp.w      w4, #0x4
    146c:	27 00 32    	bra       Z, 0x14bc <bisinfinite>
    146e:	61 50 e1    	cp.w      w10, #0x1
    1470:	22 00 32    	bra       Z, 0x14b6 <return8>
    1472:	61 20 e1    	cp.w      w4, #0x1
    1474:	21 00 32    	bra       Z, 0x14b8 <return2>
    1476:	8b 85 42    	add.w     w5, w11, w11
    1478:	eb 07 b1    	sub.w     #0x7e, w11
    147a:	01 34 b8    	mul.uu    w6, w1, w8
    147c:	00 3a b8    	mul.uu    w7, w0, w4
    147e:	08 04 42    	add.w     w4, w8, w8
    1480:	89 84 4a    	addc.w    w5, w9, w9
    1482:	01 3a b8    	mul.uu    w7, w1, w4
    1484:	00 30 b8    	mul.uu    w6, w0, w0
    1486:	88 80 40    	add.w     w1, w8, w1
    1488:	09 01 4a    	addc.w    w4, w9, w2
    148a:	04 00 33    	bra       N, 0x1494 <formsticky>
    148c:	00 00 40    	add.w     w0, w0, w0
    148e:	81 80 48    	addc.w    w1, w1, w1
    1490:	02 01 49    	addc.w    w2, w2, w2
    1492:	8b 05 e9    	dec.w     w11, w11

00001494 <formsticky>:
    1494:	c9 09 dd    	sl.w      w1, #0x9, w3
    1496:	83 01 70    	ior.w     w0, w3, w3
    1498:	01 00 32    	bra       Z, 0x149c <formRandSig>
    149a:	13 00 20    	mov.w     #0x1, w3

0000149c <formRandSig>:
    149c:	c8 14 de    	lsr.w     w2, #0x8, w9
    149e:	48 14 dd    	sl.w      w2, #0x8, w8
    14a0:	47 09 de    	lsr.w     w1, #0x7, w2
    14a2:	12 00 b2    	and.w     #0x1, w2
    14a4:	c8 08 de    	lsr.w     w1, #0x8, w1
    14a6:	08 84 70    	ior.w     w1, w8, w8
    14a8:	85 ff 07    	rcall     0x13b4 <__fpack>

000014aa <return0>:
    14aa:	01 f0 a1    	bclr.w    w1, #0xf
    14ac:	0c f0 a7    	btsc.w    w12, #0xf
    14ae:	01 f0 a0    	bset.w    w1, #0xf
    14b0:	cd ff 37    	bra       0x144c <__fbopExit>

000014b2 <aisinfinite>:
    14b2:	61 20 e1    	cp.w      w4, #0x1
    14b4:	cf ff 32    	bra       Z, 0x1454 <__fbopReturnNaN>

000014b6 <return8>:
    14b6:	08 01 be    	mov.d     w8, w2

000014b8 <return2>:
    14b8:	02 00 be    	mov.d     w2, w0
    14ba:	f7 ff 37    	bra       0x14aa <return0>

000014bc <bisinfinite>:
    14bc:	61 50 e1    	cp.w      w10, #0x1
    14be:	fc ff 3a    	bra       NZ, 0x14b8 <return2>
    14c0:	c9 ff 37    	bra       0x1454 <__fbopReturnNaN>

000014c2 <___udivsi3>:
    14c2:	60 22 b8    	mul.uu    w4, #0x0, w4
    14c4:	06 02 20    	mov.w     #0x20, w6

000014c6 <nextbit>:
    14c6:	00 00 d0    	sl.w      w0, w0
    14c8:	81 80 d2    	rlc.w     w1, w1
    14ca:	04 82 d2    	rlc.w     w4, w4
    14cc:	85 82 d2    	rlc.w     w5, w5
    14ce:	00 00 a0    	bset.w    w0, #0x0
    14d0:	02 02 52    	sub.w     w4, w2, w4
    14d2:	83 82 5a    	subb.w    w5, w3, w5
    14d4:	03 00 31    	bra       C, 0x14dc <iterate>
    14d6:	02 02 42    	add.w     w4, w2, w4
    14d8:	83 82 4a    	addc.w    w5, w3, w5
    14da:	00 00 a1    	bclr.w    w0, #0x0

000014dc <iterate>:
    14dc:	06 03 e9    	dec.w     w6, w6
    14de:	f3 ff 3a    	bra       NZ, 0x14c6 <nextbit>
    14e0:	00 00 06    	return    

000014e2 <__fchop>:
    14e2:	88 9f be    	mov.d     w8, [w15++]
    14e4:	8a 9f be    	mov.d     w10, [w15++]
    14e6:	00 03 be    	mov.d     w0, w6
    14e8:	8b ff 07    	rcall     0x1400 <__funpack>
    14ea:	85 05 78    	mov.w     w5, w11
    14ec:	82 81 52    	sub.w     w5, w2, w3
    14ee:	02 00 20    	mov.w     #0x0, w2
    14f0:	62 20 e1    	cp.w      w4, #0x2
    14f2:	04 00 3a    	bra       NZ, 0x14fc <return6>
    14f4:	f3 07 b1    	sub.w     #0x7f, w3
    14f6:	04 00 35    	bra       LT, 0x1500 <result0>
    14f8:	77 18 e1    	cp.w      w3, #0x17
    14fa:	04 00 35    	bra       LT, 0x1504 <chop>

000014fc <return6>:
    14fc:	06 00 be    	mov.d     w6, w0
    14fe:	14 00 37    	bra       0x1528 <return0>

00001500 <result0>:
    1500:	60 00 b8    	mul.uu    w0, #0x0, w0
    1502:	0f 00 37    	bra       0x1522 <signit>

00001504 <chop>:
    1504:	f5 0f 20    	mov.w     #0xff, w5
    1506:	fa ff 2f    	mov.w     #0xffff, w10

00001508 <shiftloop>:
    1508:	85 02 d1    	lsr.w     w5, w5
    150a:	0a 85 d3    	rrc.w     w10, w10
    150c:	83 01 e9    	dec.w     w3, w3
    150e:	fc ff 3b    	bra       NN, 0x1508 <shiftloop>
    1510:	81 84 62    	and.w     w5, w1, w9
    1512:	00 04 65    	and.w     w10, w0, w8
    1514:	89 0f 74    	ior.w     w8, w9, [w15]
    1516:	f2 ff 32    	bra       Z, 0x14fc <return6>
    1518:	85 82 ea    	com.w     w5, w5
    151a:	0a 85 ea    	com.w     w10, w10
    151c:	81 84 62    	and.w     w5, w1, w9
    151e:	00 04 65    	and.w     w10, w0, w8
    1520:	49 ff 07    	rcall     0x13b4 <__fpack>

00001522 <signit>:
    1522:	07 f0 a7    	btsc.w    w7, #0xf
    1524:	01 f0 a0    	bset.w    w1, #0xf
    1526:	00 81 eb    	setm.w    w2

00001528 <return0>:
    1528:	02 00 e0    	cp0.w     w2
    152a:	4f 05 be    	mov.d     [--w15], w10
    152c:	4f 04 be    	mov.d     [--w15], w8
    152e:	00 00 06    	return    

00001530 <__fcompare>:
    1530:	88 9f be    	mov.d     w8, [w15++]
    1532:	8a 9f be    	mov.d     w10, [w15++]
    1534:	84 1f 78    	mov.w     w4, [w15++]
    1536:	79 ff 07    	rcall     0x142a <__funpack2>
    1538:	4f 00 78    	mov.w     [--w15], w0
    153a:	11 00 33    	bra       N, 0x155e <exit>
    153c:	f0 ff 2f    	mov.w     #0xffff, w0
    153e:	83 8f 6c    	xor.w     w9, w3, [w15]
    1540:	06 00 3b    	bra       NN, 0x154e <comparemag>
    1542:	04 05 65    	and.w     w10, w4, w10
    1544:	0a 00 a7    	btsc.w    w10, #0x0
    1546:	08 00 37    	bra       0x1558 <returnEqual>
    1548:	09 f0 a6    	btss.w    w9, #0xf
    154a:	10 00 20    	mov.w     #0x1, w0
    154c:	08 00 37    	bra       0x155e <exit>

0000154e <comparemag>:
    154e:	82 0f 54    	sub.w     w8, w2, [w15]
    1550:	83 8f 5c    	subb.w    w9, w3, [w15]
    1552:	03 00 39    	bra       NC, 0x155a <adjust>
    1554:	10 00 20    	mov.w     #0x1, w0
    1556:	01 00 3e    	bra       GTU, 0x155a <adjust>

00001558 <returnEqual>:
    1558:	00 00 20    	mov.w     #0x0, w0

0000155a <adjust>:
    155a:	09 f0 a7    	btsc.w    w9, #0xf
    155c:	00 00 ea    	neg.w     w0, w0

0000155e <exit>:
    155e:	4f 05 be    	mov.d     [--w15], w10
    1560:	4f 04 be    	mov.d     [--w15], w8
    1562:	00 00 e0    	cp0.w     w0
    1564:	00 00 06    	return    

00001566 <___floatundisf>:
    1566:	88 9f be    	mov.d     w8, [w15++]
    1568:	8a 9f be    	mov.d     w10, [w15++]
    156a:	00 82 70    	ior.w     w1, w0, w4
    156c:	04 02 71    	ior.w     w2, w4, w4
    156e:	04 82 71    	ior.w     w3, w4, w4
    1570:	26 00 32    	bra       Z, 0x15be <return0>
    1572:	00 04 be    	mov.d     w0, w8
    1574:	02 00 be    	mov.d     w2, w0
    1576:	60 11 b8    	mul.uu    w2, #0x0, w2
    1578:	6b 09 20    	mov.w     #0x96, w11
    157a:	95 02 20    	mov.w     #0x29, w5
    157c:	01 82 cf    	ff1l      w1, w4
    157e:	0a 00 39    	bra       NC, 0x1594 <fixshift>
    1580:	05 41 b1    	sub.b     #0x10, w5
    1582:	00 82 cf    	ff1l      w0, w4
    1584:	07 00 39    	bra       NC, 0x1594 <fixshift>
    1586:	05 41 b1    	sub.b     #0x10, w5
    1588:	09 82 cf    	ff1l      w9, w4
    158a:	04 00 39    	bra       NC, 0x1594 <fixshift>
    158c:	05 41 b1    	sub.b     #0x10, w5
    158e:	08 82 cf    	ff1l      w8, w4
    1590:	01 00 39    	bra       NC, 0x1594 <fixshift>
    1592:	05 41 b1    	sub.b     #0x10, w5

00001594 <fixshift>:
    1594:	05 42 52    	sub.b     w4, w5, w4
    1596:	12 00 32    	bra       Z, 0x15bc <round>
    1598:	0a 00 3b    	bra       NN, 0x15ae <shiftleft>

0000159a <shiftright>:
    159a:	82 81 71    	ior.w     w3, w2, w3
    159c:	61 01 64    	and.w     w8, #0x1, w2
    159e:	81 00 d1    	lsr.w     w1, w1
    15a0:	00 80 d3    	rrc.w     w0, w0
    15a2:	89 84 d3    	rrc.w     w9, w9
    15a4:	08 84 d3    	rrc.w     w8, w8
    15a6:	8b 05 e8    	inc.w     w11, w11
    15a8:	04 42 e8    	inc.b     w4, w4
    15aa:	f7 ff 3a    	bra       NZ, 0x159a <shiftright>
    15ac:	07 00 37    	bra       0x15bc <round>

000015ae <shiftleft>:
    15ae:	08 04 44    	add.w     w8, w8, w8
    15b0:	89 84 4c    	addc.w    w9, w9, w9
    15b2:	00 00 48    	addc.w    w0, w0, w0
    15b4:	81 80 48    	addc.w    w1, w1, w1
    15b6:	8b 05 e9    	dec.w     w11, w11
    15b8:	04 42 e9    	dec.b     w4, w4
    15ba:	f9 ff 3a    	bra       NZ, 0x15ae <shiftleft>

000015bc <round>:
    15bc:	fb fe 07    	rcall     0x13b4 <__fpack>

000015be <return0>:
    15be:	4f 05 be    	mov.d     [--w15], w10
    15c0:	4f 04 be    	mov.d     [--w15], w8
    15c2:	00 00 06    	return    

000015c4 <_strtol>:
    15c4:	e4 87 47    	add.w     w15, #0x4, w15
    15c6:	88 9f be    	mov.d     w8, [w15++]
    15c8:	8a 9f be    	mov.d     w10, [w15++]
    15ca:	8c 1f 78    	mov.w     w12, [w15++]
    15cc:	8e 1f 78    	mov.w     w14, [w15++]
    15ce:	00 05 78    	mov.w     w0, w10
    15d0:	01 07 78    	mov.w     w1, w14
    15d2:	02 06 78    	mov.w     w2, w12
    15d4:	0e 00 e0    	cp0.w     w14
    15d6:	01 00 3a    	bra       NZ, 0x15da <.L2>
    15d8:	6e 87 57    	sub.w     w15, #0xe, w14

000015da <.L2>:
    15da:	8a 05 78    	mov.w     w10, w11

000015dc <.L3>:
    15dc:	8b 04 78    	mov.w     w11, w9
    15de:	89 05 78    	mov.w     w9, w11
    15e0:	3b 44 78    	mov.b     [w11++], w8
    15e2:	08 00 fb    	se        w8, w0
    15e4:	d2 00 07    	rcall     0x178a <_isspace>
    15e6:	00 00 e0    	cp0.w     w0
    15e8:	f9 ff 3a    	bra       NZ, 0x15dc <.L3>
    15ea:	d0 c2 b3    	mov.b     #0x2d, w0
    15ec:	80 4f 54    	sub.b     w8, w0, [w15]
    15ee:	03 00 32    	bra       Z, 0x15f6 <.L4>
    15f0:	00 c0 e9    	dec2.b    w0, w0
    15f2:	80 4f 54    	sub.b     w8, w0, [w15]
    15f4:	02 00 3a    	bra       NZ, 0x15fa <.L14>

000015f6 <.L4>:
    15f6:	89 04 e8    	inc.w     w9, w9
    15f8:	01 00 37    	bra       0x15fc <.L5>

000015fa <.L14>:
    15fa:	00 44 78    	mov.b     w0, w8

000015fc <.L5>:
    15fc:	0c 01 78    	mov.w     w12, w2
    15fe:	8e 00 78    	mov.w     w14, w1
    1600:	09 00 78    	mov.w     w9, w0
    1602:	29 00 07    	rcall     0x1656 <__Stoul>
    1604:	9e 8f 54    	sub.w     w9, [w14], [w15]
    1606:	01 00 3a    	bra       NZ, 0x160a <.L6>
    1608:	0a 0f 78    	mov.w     w10, [w14]

0000160a <.L6>:
    160a:	9e 0f 55    	sub.w     w10, [w14], [w15]
    160c:	03 00 3a    	bra       NZ, 0x1614 <.L7>
    160e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1610:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1612:	0f 00 3a    	bra       NZ, 0x1632 <.L8>

00001614 <.L7>:
    1614:	b2 c2 b3    	mov.b     #0x2b, w2
    1616:	82 4f 54    	sub.b     w8, w2, [w15]
    1618:	04 00 3a    	bra       NZ, 0x1622 <.L9>
    161a:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    161c:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    161e:	15 00 3d    	bra       GE, 0x164a <.L12>
    1620:	08 00 37    	bra       0x1632 <.L8>

00001622 <.L9>:
    1622:	d2 c2 b3    	mov.b     #0x2d, w2
    1624:	82 4f 54    	sub.b     w8, w2, [w15]
    1626:	11 00 3a    	bra       NZ, 0x164a <.L12>
    1628:	02 00 20    	mov.w     #0x0, w2
    162a:	03 00 28    	mov.w     #0x8000, w3
    162c:	82 0f 50    	sub.w     w0, w2, [w15]
    162e:	83 8f 58    	subb.w    w1, w3, [w15]
    1630:	0a 00 36    	bra       LEU, 0x1646 <.L11>

00001632 <.L8>:
    1632:	20 02 20    	mov.w     #0x22, w0
    1634:	c0 ef 88    	mov.w     w0, 0x1df8
    1636:	f0 ff 2f    	mov.w     #0xffff, w0
    1638:	f1 ff 27    	mov.w     #0x7fff, w1
    163a:	d2 c2 b3    	mov.b     #0x2d, w2
    163c:	82 4f 54    	sub.b     w8, w2, [w15]
    163e:	05 00 3a    	bra       NZ, 0x164a <.L12>
    1640:	00 00 20    	mov.w     #0x0, w0
    1642:	01 00 28    	mov.w     #0x8000, w1
    1644:	02 00 37    	bra       0x164a <.L12>

00001646 <.L11>:
    1646:	60 00 10    	subr.w    w0, #0x0, w0
    1648:	e0 80 18    	subbr.w   w1, #0x0, w1

0000164a <.L12>:
    164a:	4f 07 78    	mov.w     [--w15], w14
    164c:	4f 06 78    	mov.w     [--w15], w12
    164e:	4f 05 be    	mov.d     [--w15], w10
    1650:	4f 04 be    	mov.d     [--w15], w8
    1652:	4f 00 b1    	sub.w     #0x4, w15
    1654:	00 00 06    	return    

00001656 <__Stoul>:
    1656:	ee 87 47    	add.w     w15, #0xe, w15
    1658:	88 9f be    	mov.d     w8, [w15++]
    165a:	8a 9f be    	mov.d     w10, [w15++]
    165c:	8c 9f be    	mov.d     w12, [w15++]
    165e:	8e 1f 78    	mov.w     w14, [w15++]
    1660:	f0 b7 9f    	mov.w     w0, [w15-18]
    1662:	01 06 78    	mov.w     w1, w12
    1664:	82 05 78    	mov.w     w2, w11
    1666:	00 04 78    	mov.w     w0, w8

00001668 <.L2>:
    1668:	08 05 78    	mov.w     w8, w10
    166a:	0a 04 78    	mov.w     w10, w8
    166c:	b8 46 78    	mov.b     [w8++], w13
    166e:	0d 00 fb    	se        w13, w0
    1670:	8c 00 07    	rcall     0x178a <_isspace>
    1672:	00 00 e0    	cp0.w     w0
    1674:	f9 ff 3a    	bra       NZ, 0x1668 <.L2>
    1676:	d0 c2 b3    	mov.b     #0x2d, w0
    1678:	80 cf 56    	sub.b     w13, w0, [w15]
    167a:	03 00 32    	bra       Z, 0x1682 <.L3>
    167c:	00 c0 e9    	dec2.b    w0, w0
    167e:	80 cf 56    	sub.b     w13, w0, [w15]
    1680:	02 00 3a    	bra       NZ, 0x1686 <.L19>

00001682 <.L3>:
    1682:	0a 05 e8    	inc.w     w10, w10
    1684:	01 00 37    	bra       0x1688 <.L4>

00001686 <.L19>:
    1686:	80 46 78    	mov.b     w0, w13

00001688 <.L4>:
    1688:	0b 00 e0    	cp0.w     w11
    168a:	05 00 35    	bra       LT, 0x1696 <.L5>
    168c:	e1 8f 55    	sub.w     w11, #0x1, [w15]
    168e:	03 00 32    	bra       Z, 0x1696 <.L5>
    1690:	40 02 20    	mov.w     #0x24, w0
    1692:	80 8f 55    	sub.w     w11, w0, [w15]
    1694:	06 00 34    	bra       LE, 0x16a2 <.L6>

00001696 <.L5>:
    1696:	60 44 b8    	mul.uu    w8, #0x0, w8
    1698:	0c 00 e0    	cp0.w     w12
    169a:	70 00 32    	bra       Z, 0x177c <.L7>
    169c:	7f b0 97    	mov.w     [w15-18], w0
    169e:	00 0e 78    	mov.w     w0, [w12]
    16a0:	6d 00 37    	bra       0x177c <.L7>

000016a2 <.L6>:
    16a2:	0b 00 e0    	cp0.w     w11
    16a4:	0e 00 32    	bra       Z, 0x16c2 <.L8>
    16a6:	f0 8f 55    	sub.w     w11, #0x10, [w15]
    16a8:	1a 00 3a    	bra       NZ, 0x16de <.L9>
    16aa:	00 c3 b3    	mov.b     #0x30, w0
    16ac:	9a 4f 10    	subr.b    w0, [w10], [w15]
    16ae:	17 00 3a    	bra       NZ, 0x16de <.L9>
    16b0:	1a 40 90    	mov.b     [w10+1], w0
    16b2:	81 c7 b3    	mov.b     #0x78, w1
    16b4:	81 4f 50    	sub.b     w0, w1, [w15]
    16b6:	03 00 32    	bra       Z, 0x16be <.L10>
    16b8:	81 c5 b3    	mov.b     #0x58, w1
    16ba:	81 4f 50    	sub.b     w0, w1, [w15]
    16bc:	10 00 3a    	bra       NZ, 0x16de <.L9>

000016be <.L10>:
    16be:	0a 85 e8    	inc2.w    w10, w10
    16c0:	0e 00 37    	bra       0x16de <.L9>

000016c2 <.L8>:
    16c2:	ab 00 20    	mov.w     #0xa, w11
    16c4:	00 c3 b3    	mov.b     #0x30, w0
    16c6:	9a 4f 10    	subr.b    w0, [w10], [w15]
    16c8:	0a 00 3a    	bra       NZ, 0x16de <.L9>
    16ca:	1a 40 90    	mov.b     [w10+1], w0
    16cc:	81 c7 b3    	mov.b     #0x78, w1
    16ce:	81 4f 50    	sub.b     w0, w1, [w15]
    16d0:	04 00 32    	bra       Z, 0x16da <.L11>
    16d2:	8b 00 20    	mov.w     #0x8, w11
    16d4:	81 c5 b3    	mov.b     #0x58, w1
    16d6:	81 4f 50    	sub.b     w0, w1, [w15]
    16d8:	02 00 3a    	bra       NZ, 0x16de <.L9>

000016da <.L11>:
    16da:	0a 85 e8    	inc2.w    w10, w10
    16dc:	0b 01 20    	mov.w     #0x10, w11

000016de <.L9>:
    16de:	0a 00 78    	mov.w     w10, w0

000016e0 <.L12>:
    16e0:	00 02 78    	mov.w     w0, w4
    16e2:	04 00 78    	mov.w     w4, w0
    16e4:	01 c3 b3    	mov.b     #0x30, w1
    16e6:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    16e8:	fb ff 32    	bra       Z, 0x16e0 <.L12>
    16ea:	04 07 78    	mov.w     w4, w14
    16ec:	60 44 b8    	mul.uu    w8, #0x0, w8
    16ee:	b4 b7 9f    	mov.w     w4, [w15-26]
    16f0:	0d 00 37    	bra       0x170c <.L13>

000016f2 <.L14>:
    16f2:	e1 ee 21    	mov.w     #0x1eee, w1
    16f4:	81 40 50    	sub.b     w0, w1, w1
    16f6:	c1 ef 9f    	mov.b     w1, [w15-20]
    16f8:	61 59 b9    	mul.su    w11, #0x1, w2
    16fa:	08 00 be    	mov.d     w8, w0
    16fc:	47 04 07    	rcall     0x1f8c <___mulp32eds3>
    16fe:	4f ea 97    	mov.b     [w15-20], w4
    1700:	04 01 fb    	se        w4, w2
    1702:	cf 91 de    	asr.w     w2, #0xf, w3
    1704:	c8 b7 9f    	mov.w     w8, [w15-24]
    1706:	d9 b7 9f    	mov.w     w9, [w15-22]
    1708:	02 04 40    	add.w     w0, w2, w8
    170a:	83 84 48    	addc.w    w1, w3, w9

0000170c <.L13>:
    170c:	8e 02 78    	mov.w     w14, w5
    170e:	3e 00 fb    	se        [w14++], w0
    1710:	85 bf 9f    	mov.w     w5, [w15-16]
    1712:	43 00 07    	rcall     0x179a <_tolower>
    1714:	0b 01 78    	mov.w     w11, w2
    1716:	80 00 78    	mov.w     w0, w1
    1718:	e0 ee 21    	mov.w     #0x1eee, w0
    171a:	1c 02 07    	rcall     0x1b54 <_memchr>
    171c:	8f ba 97    	mov.w     [w15-16], w5
    171e:	00 00 e0    	cp0.w     w0
    1720:	e8 ff 3a    	bra       NZ, 0x16f2 <.L14>
    1722:	3f b2 97    	mov.w     [w15-26], w4
    1724:	85 0f 55    	sub.w     w10, w5, [w15]
    1726:	05 00 3a    	bra       NZ, 0x1732 <.L15>
    1728:	60 44 b8    	mul.uu    w8, #0x0, w8
    172a:	0c 00 e0    	cp0.w     w12
    172c:	27 00 32    	bra       Z, 0x177c <.L7>
    172e:	ff b2 97    	mov.w     [w15-18], w5
    1730:	24 00 37    	bra       0x177a <.L24>

00001732 <.L15>:
    1732:	04 82 52    	sub.w     w5, w4, w4
    1734:	30 f1 21    	mov.w     #0x1f13, w0
    1736:	60 c0 7d    	mov.b     [w0+w11], w0
    1738:	00 00 fb    	se        w0, w0
    173a:	00 02 52    	sub.w     w4, w0, w4
    173c:	17 00 33    	bra       N, 0x176c <.L16>
    173e:	11 00 3a    	bra       NZ, 0x1762 <.L17>
    1740:	4f e9 97    	mov.b     [w15-20], w2
    1742:	02 00 fb    	se        w2, w0
    1744:	cf 80 de    	asr.w     w0, #0xf, w1
    1746:	00 00 54    	sub.w     w8, w0, w0
    1748:	81 80 5c    	subb.w    w9, w1, w1
    174a:	80 0f 54    	sub.w     w8, w0, [w15]
    174c:	81 8f 5c    	subb.w    w9, w1, [w15]
    174e:	09 00 39    	bra       NC, 0x1762 <.L17>
    1750:	61 59 b9    	mul.su    w11, #0x1, w2
    1752:	85 bf 9f    	mov.w     w5, [w15-16]
    1754:	b6 fe 07    	rcall     0x14c2 <___udivsi3>
    1756:	8f ba 97    	mov.w     [w15-16], w5
    1758:	4f b1 97    	mov.w     [w15-24], w2
    175a:	df b1 97    	mov.w     [w15-22], w3
    175c:	82 0f 50    	sub.w     w0, w2, [w15]
    175e:	83 8f 58    	subb.w    w1, w3, [w15]
    1760:	05 00 32    	bra       Z, 0x176c <.L16>

00001762 <.L17>:
    1762:	20 02 20    	mov.w     #0x22, w0
    1764:	c0 ef 88    	mov.w     w0, 0x1df8
    1766:	00 84 eb    	setm.w    w8
    1768:	80 84 eb    	setm.w    w9
    176a:	05 00 37    	bra       0x1776 <.L18>

0000176c <.L16>:
    176c:	d0 c2 b3    	mov.b     #0x2d, w0
    176e:	80 cf 56    	sub.b     w13, w0, [w15]
    1770:	02 00 3a    	bra       NZ, 0x1776 <.L18>
    1772:	60 04 14    	subr.w    w8, #0x0, w8
    1774:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001776 <.L18>:
    1776:	0c 00 e0    	cp0.w     w12
    1778:	01 00 32    	bra       Z, 0x177c <.L7>

0000177a <.L24>:
    177a:	05 0e 78    	mov.w     w5, [w12]

0000177c <.L7>:
    177c:	08 00 be    	mov.d     w8, w0
    177e:	4f 07 78    	mov.w     [--w15], w14
    1780:	4f 06 be    	mov.d     [--w15], w12
    1782:	4f 05 be    	mov.d     [--w15], w10
    1784:	4f 04 be    	mov.d     [--w15], w8
    1786:	ef 00 b1    	sub.w     #0xe, w15
    1788:	00 00 06    	return    

0000178a <_isspace>:
    178a:	69 00 e1    	cp.w      w0, #0x9
    178c:	04 00 35    	bra       LT, 0x1796 <nomatch>
    178e:	6d 00 e1    	cp.w      w0, #0xd
    1790:	03 00 34    	bra       LE, 0x1798 <match>
    1792:	00 02 b1    	sub.w     #0x20, w0
    1794:	01 00 32    	bra       Z, 0x1798 <match>

00001796 <nomatch>:
    1796:	00 00 05    	retlw.w   #0x0, w0

00001798 <match>:
    1798:	10 00 05    	retlw.w   #0x1, w0

0000179a <_tolower>:
    179a:	80 00 78    	mov.w     w0, w1
    179c:	11 04 b1    	sub.w     #0x41, w1
    179e:	03 00 35    	bra       LT, 0x17a6 <nomatch>
    17a0:	91 01 b1    	sub.w     #0x19, w1
    17a2:	01 00 3c    	bra       GT, 0x17a6 <nomatch>

000017a4 <match>:
    17a4:	00 50 a0    	bset.w    w0, #0x5

000017a6 <nomatch>:
    17a6:	00 00 06    	return    

000017a8 <__Geterrno>:
    17a8:	d0 ef 80    	mov.w     0x1dfa, w0
    17aa:	00 00 e0    	cp0.w     w0
    17ac:	01 00 32    	bra       Z, 0x17b0 <.L2>
    17ae:	00 00 01    	call      w0

000017b0 <.L2>:
    17b0:	80 df 21    	mov.w     #0x1df8, w0
    17b2:	00 00 06    	return    

000017b4 <_prout>:
    17b4:	88 1f 78    	mov.w     w8, [w15++]
    17b6:	02 04 78    	mov.w     w2, w8
    17b8:	08 01 78    	mov.w     w8, w2
    17ba:	d6 01 07    	rcall     0x1b68 <_memcpy>
    17bc:	08 00 40    	add.w     w0, w8, w0
    17be:	4f 04 78    	mov.w     [--w15], w8
    17c0:	00 00 06    	return    

000017c2 <__sprintf_cdnopuxX>:
    17c2:	00 00 fa    	lnk       #0x0
    17c4:	88 1f 78    	mov.w     w8, [w15++]
    17c6:	00 04 78    	mov.w     w0, w8
    17c8:	ea 81 57    	sub.w     w15, #0xa, w3
    17ca:	3f b9 97    	mov.w     [w15-10], w2
    17cc:	88 00 78    	mov.w     w8, w1
    17ce:	40 7b 21    	mov.w     #0x17b4, w0
    17d0:	07 00 07    	rcall     0x17e0 <___Printf_cdnopuxX>
    17d2:	00 00 e0    	cp0.w     w0
    17d4:	02 00 35    	bra       LT, 0x17da <.L3>
    17d6:	80 40 eb    	clr.b     w1
    17d8:	01 74 78    	mov.b     w1, [w8+w0]

000017da <.L3>:
    17da:	4f 04 78    	mov.w     [--w15], w8
    17dc:	00 80 fa    	ulnk      
    17de:	00 00 06    	return    

000017e0 <___Printf_cdnopuxX>:
    17e0:	62 00 fa    	lnk       #0x62
    17e2:	88 9f be    	mov.d     w8, [w15++]
    17e4:	8a 1f 78    	mov.w     w10, [w15++]
    17e6:	00 05 78    	mov.w     w0, w10
    17e8:	81 04 78    	mov.w     w1, w9
    17ea:	02 04 78    	mov.w     w2, w8
    17ec:	83 00 78    	mov.w     w3, w1
    17ee:	80 f9 2f    	mov.w     #0xff98, w0
    17f0:	0f 00 40    	add.w     w0, w15, w0
    17f2:	b8 03 07    	rcall     0x1f64 <__Vacopy>
    17f4:	9a 97 9f    	mov.w     w10, [w15-94]
    17f6:	a9 97 9f    	mov.w     w9, [w15-92]
    17f8:	00 00 eb    	clr.w     w0
    17fa:	b0 9f 9f    	mov.w     w0, [w15-74]

000017fc <.L31>:
    17fc:	18 85 fb    	ze        [w8], w10
    17fe:	8a 04 fb    	se        w10, w9
    1800:	0a 05 ea    	neg.w     w10, w10
    1802:	4f 55 de    	lsr.w     w10, #0xf, w10
    1804:	50 02 20    	mov.w     #0x25, w0
    1806:	80 8f 54    	sub.w     w9, w0, [w15]
    1808:	0d 00 32    	bra       Z, 0x1824 <.L3>
    180a:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    180c:	0b 00 3a    	bra       NZ, 0x1824 <.L3>
    180e:	0a 01 78    	mov.w     w10, w2
    1810:	88 00 78    	mov.w     w8, w1
    1812:	2f 90 97    	mov.w     [w15-92], w0
    1814:	9f 91 97    	mov.w     [w15-94], w3
    1816:	03 00 01    	call      w3
    1818:	a0 97 9f    	mov.w     w0, [w15-92]
    181a:	00 00 e0    	cp0.w     w0
    181c:	8e 00 32    	bra       Z, 0x193a <.L27>
    181e:	3f 98 97    	mov.w     [w15-74], w0
    1820:	00 00 e8    	inc.w     w0, w0
    1822:	b0 9f 9f    	mov.w     w0, [w15-74]

00001824 <.L3>:
    1824:	0a 04 44    	add.w     w8, w10, w8
    1826:	50 02 20    	mov.w     #0x25, w0
    1828:	80 8f 54    	sub.w     w9, w0, [w15]
    182a:	04 00 32    	bra       Z, 0x1834 <.L5>
    182c:	09 00 e0    	cp0.w     w9
    182e:	e6 ff 3a    	bra       NZ, 0x17fc <.L31>
    1830:	3f 98 97    	mov.w     [w15-74], w0
    1832:	84 00 37    	bra       0x193c <.L4>

00001834 <.L5>:
    1834:	00 00 eb    	clr.w     w0
    1836:	90 9f 9f    	mov.w     w0, [w15-78]
    1838:	80 9f 9f    	mov.w     w0, [w15-80]
    183a:	f0 97 9f    	mov.w     w0, [w15-82]
    183c:	e0 97 9f    	mov.w     w0, [w15-84]
    183e:	d0 97 9f    	mov.w     w0, [w15-86]
    1840:	c0 97 9f    	mov.w     w0, [w15-88]
    1842:	07 00 37    	bra       0x1852 <.L34>

00001844 <.L8>:
    1844:	41 fb 21    	mov.w     #0x1fb4, w1
    1846:	01 00 50    	sub.w     w0, w1, w0
    1848:	00 00 40    	add.w     w0, w0, w0
    184a:	81 fa 21    	mov.w     #0x1fa8, w1
    184c:	61 00 78    	mov.w     [w1+w0], w0
    184e:	df 98 97    	mov.w     [w15-70], w1
    1850:	01 00 70    	ior.w     w0, w1, w0

00001852 <.L34>:
    1852:	d0 9f 9f    	mov.w     w0, [w15-70]
    1854:	88 04 78    	mov.w     w8, w9
    1856:	09 04 78    	mov.w     w9, w8
    1858:	38 45 78    	mov.b     [w8++], w10
    185a:	8a 00 fb    	se        w10, w1
    185c:	40 fb 21    	mov.w     #0x1fb4, w0
    185e:	8b 01 07    	rcall     0x1b76 <_strchr>
    1860:	00 00 e0    	cp0.w     w0
    1862:	f0 ff 3a    	bra       NZ, 0x1844 <.L8>
    1864:	a1 c2 b3    	mov.b     #0x2a, w1
    1866:	81 4f 55    	sub.b     w10, w1, [w15]
    1868:	0e 00 3a    	bra       NZ, 0x1886 <.L9>
    186a:	cf 88 97    	mov.w     [w15-104], w1
    186c:	01 80 e9    	dec2.w    w1, w0
    186e:	c0 8f 9f    	mov.w     w0, [w15-104]
    1870:	10 00 78    	mov.w     [w0], w0
    1872:	c0 9f 9f    	mov.w     w0, [w15-72]
    1874:	00 00 e0    	cp0.w     w0
    1876:	05 00 3d    	bra       GE, 0x1882 <.L10>
    1878:	00 00 ea    	neg.w     w0, w0
    187a:	c0 9f 9f    	mov.w     w0, [w15-72]
    187c:	5f 98 97    	mov.w     [w15-70], w0
    187e:	00 20 a0    	bset.w    w0, #0x2
    1880:	d0 9f 9f    	mov.w     w0, [w15-70]

00001882 <.L10>:
    1882:	09 04 e8    	inc.w     w9, w8
    1884:	0f 00 37    	bra       0x18a4 <.L11>

00001886 <.L9>:
    1886:	c0 9f 9f    	mov.w     w0, [w15-72]
    1888:	00 00 eb    	clr.w     w0
    188a:	05 00 37    	bra       0x1896 <.L32>

0000188c <.L14>:
    188c:	f2 ff 27    	mov.w     #0x7fff, w2
    188e:	82 0f 50    	sub.w     w0, w2, [w15]
    1890:	02 00 32    	bra       Z, 0x1896 <.L32>
    1892:	6a 01 b9    	mul.su    w0, #0xa, w2
    1894:	02 80 40    	add.w     w1, w2, w0

00001896 <.L32>:
    1896:	09 04 78    	mov.w     w9, w8
    1898:	88 04 78    	mov.w     w8, w9
    189a:	b9 00 fb    	se        [w9++], w1
    189c:	01 03 b1    	sub.w     #0x30, w1
    189e:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    18a0:	f5 ff 36    	bra       LEU, 0x188c <.L14>
    18a2:	c0 9f 9f    	mov.w     w0, [w15-72]

000018a4 <.L11>:
    18a4:	e0 c2 b3    	mov.b     #0x2e, w0
    18a6:	98 4f 10    	subr.b    w0, [w8], [w15]
    18a8:	02 00 32    	bra       Z, 0x18ae <.L15>
    18aa:	00 80 eb    	setm.w    w0
    18ac:	19 00 37    	bra       0x18e0 <.L35>

000018ae <.L15>:
    18ae:	a0 c2 b3    	mov.b     #0x2a, w0
    18b0:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    18b2:	07 00 3a    	bra       NZ, 0x18c2 <.L17>
    18b4:	cf 88 97    	mov.w     [w15-104], w1
    18b6:	01 80 e9    	dec2.w    w1, w0
    18b8:	c0 8f 9f    	mov.w     w0, [w15-104]
    18ba:	10 00 78    	mov.w     [w0], w0
    18bc:	a0 9f 9f    	mov.w     w0, [w15-76]
    18be:	08 04 e8    	inc.w     w8, w8
    18c0:	10 00 37    	bra       0x18e2 <.L16>

000018c2 <.L17>:
    18c2:	00 00 eb    	clr.w     w0
    18c4:	a0 9f 9f    	mov.w     w0, [w15-76]
    18c6:	88 00 78    	mov.w     w8, w1
    18c8:	05 00 37    	bra       0x18d4 <.L33>

000018ca <.L20>:
    18ca:	f3 ff 27    	mov.w     #0x7fff, w3
    18cc:	83 0f 50    	sub.w     w0, w3, [w15]
    18ce:	02 00 32    	bra       Z, 0x18d4 <.L33>
    18d0:	6a 02 b9    	mul.su    w0, #0xa, w4
    18d2:	04 00 41    	add.w     w2, w4, w0

000018d4 <.L33>:
    18d4:	01 04 78    	mov.w     w1, w8
    18d6:	88 00 78    	mov.w     w8, w1
    18d8:	31 01 fb    	se        [w1++], w2
    18da:	02 03 b1    	sub.w     #0x30, w2
    18dc:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    18de:	f5 ff 36    	bra       LEU, 0x18ca <.L20>

000018e0 <.L35>:
    18e0:	a0 9f 9f    	mov.w     w0, [w15-76]

000018e2 <.L16>:
    18e2:	98 44 78    	mov.b     [w8], w9
    18e4:	89 00 fb    	se        w9, w1
    18e6:	00 fa 21    	mov.w     #0x1fa0, w0
    18e8:	46 01 07    	rcall     0x1b76 <_strchr>
    18ea:	00 00 e0    	cp0.w     w0
    18ec:	02 00 32    	bra       Z, 0x18f2 <.L25>
    18ee:	08 04 e8    	inc.w     w8, w8
    18f0:	01 00 37    	bra       0x18f4 <.L21>

000018f2 <.L25>:
    18f2:	80 44 eb    	clr.b     w9

000018f4 <.L21>:
    18f4:	c9 7f 9f    	mov.b     w9, [w15-68]
    18f6:	80 c6 b3    	mov.b     #0x68, w0
    18f8:	80 cf 54    	sub.b     w9, w0, [w15]
    18fa:	04 00 3a    	bra       NZ, 0x1904 <.L22>
    18fc:	98 cf 14    	subr.b    w9, [w8], [w15]
    18fe:	0a 00 3a    	bra       NZ, 0x1914 <.L23>
    1900:	66 40 50    	sub.b     w0, #0x6, w0
    1902:	06 00 37    	bra       0x1910 <.L36>

00001904 <.L22>:
    1904:	c0 c6 b3    	mov.b     #0x6c, w0
    1906:	80 cf 54    	sub.b     w9, w0, [w15]
    1908:	05 00 3a    	bra       NZ, 0x1914 <.L23>
    190a:	98 cf 14    	subr.b    w9, [w8], [w15]
    190c:	03 00 3a    	bra       NZ, 0x1914 <.L23>
    190e:	65 40 40    	add.b     w0, #0x5, w0

00001910 <.L36>:
    1910:	c0 7f 9f    	mov.b     w0, [w15-68]
    1912:	08 04 e8    	inc.w     w8, w8

00001914 <.L23>:
    1914:	18 01 fb    	se        [w8], w2
    1916:	e3 fb 2f    	mov.w     #0xffbe, w3
    1918:	8f 81 41    	add.w     w3, w15, w3
    191a:	81 f9 2f    	mov.w     #0xff98, w1
    191c:	8f 80 40    	add.w     w1, w15, w1
    191e:	a0 f9 2f    	mov.w     #0xff9a, w0
    1920:	0f 00 40    	add.w     w0, w15, w0
    1922:	10 00 07    	rcall     0x1944 <___Putfld_cdnopuxX>
    1924:	00 00 e0    	cp0.w     w0
    1926:	09 00 3a    	bra       NZ, 0x193a <.L27>
    1928:	e1 fb 2f    	mov.w     #0xffbe, w1
    192a:	8f 80 40    	add.w     w1, w15, w1
    192c:	a0 f9 2f    	mov.w     #0xff9a, w0
    192e:	0f 00 40    	add.w     w0, w15, w0
    1930:	5d 02 07    	rcall     0x1dec <__Puttxt>
    1932:	00 00 e0    	cp0.w     w0
    1934:	02 00 35    	bra       LT, 0x193a <.L27>
    1936:	08 04 e8    	inc.w     w8, w8
    1938:	61 ff 37    	bra       0x17fc <.L31>

0000193a <.L27>:
    193a:	00 80 eb    	setm.w    w0

0000193c <.L4>:
    193c:	4f 05 78    	mov.w     [--w15], w10
    193e:	4f 04 be    	mov.d     [--w15], w8
    1940:	00 80 fa    	ulnk      
    1942:	00 00 06    	return    

00001944 <___Putfld_cdnopuxX>:
    1944:	88 1f 78    	mov.w     w8, [w15++]
    1946:	e4 c6 b3    	mov.b     #0x6e, w4
    1948:	84 4f 51    	sub.b     w2, w4, [w15]
    194a:	b6 00 32    	bra       Z, 0x1ab8 <.L7>
    194c:	10 00 3c    	bra       GT, 0x196e <.L9>
    194e:	6b 42 52    	sub.b     w4, #0xb, w4
    1950:	84 4f 51    	sub.b     w2, w4, [w15]
    1952:	18 00 32    	bra       Z, 0x1984 <.L5>
    1954:	05 00 3c    	bra       GT, 0x1960 <.L10>
    1956:	54 c2 b3    	mov.b     #0x25, w4
    1958:	84 4f 51    	sub.b     w2, w4, [w15]
    195a:	ee 00 32    	bra       Z, 0x1b38 <.L3>
    195c:	84 c5 b3    	mov.b     #0x58, w4
    195e:	0f 00 37    	bra       0x197e <.L47>

00001960 <.L10>:
    1960:	44 c6 b3    	mov.b     #0x64, w4
    1962:	84 4f 51    	sub.b     w2, w4, [w15]
    1964:	14 00 32    	bra       Z, 0x198e <.L6>
    1966:	65 42 42    	add.b     w4, #0x5, w4
    1968:	84 4f 51    	sub.b     w2, w4, [w15]
    196a:	e9 00 3a    	bra       NZ, 0x1b3e <.L2>
    196c:	10 00 37    	bra       0x198e <.L6>

0000196e <.L9>:
    196e:	04 c7 b3    	mov.b     #0x70, w4
    1970:	84 4f 51    	sub.b     w2, w4, [w15]
    1972:	d5 00 32    	bra       Z, 0x1b1e <.L8>
    1974:	53 00 35    	bra       LT, 0x1a1c <.L4>
    1976:	65 42 42    	add.b     w4, #0x5, w4
    1978:	84 4f 51    	sub.b     w2, w4, [w15]
    197a:	50 00 32    	bra       Z, 0x1a1c <.L4>
    197c:	63 42 42    	add.b     w4, #0x3, w4

0000197e <.L47>:
    197e:	84 4f 51    	sub.b     w2, w4, [w15]
    1980:	de 00 3a    	bra       NZ, 0x1b3e <.L2>
    1982:	4c 00 37    	bra       0x1a1c <.L4>

00001984 <.L5>:
    1984:	11 81 e9    	dec2.w    [w1], w2
    1986:	82 08 78    	mov.w     w2, [w1]
    1988:	f0 00 90    	mov.w     [w0+14], w1
    198a:	12 41 78    	mov.b     [w2], w2
    198c:	d6 00 37    	bra       0x1b3a <.L53>

0000198e <.L6>:
    198e:	20 62 90    	mov.b     [w0+34], w4
    1990:	c5 c6 b3    	mov.b     #0x6c, w5
    1992:	85 4f 52    	sub.b     w4, w5, [w15]
    1994:	07 00 3a    	bra       NZ, 0x19a4 <.L12>
    1996:	91 02 78    	mov.w     [w1], w5
    1998:	64 82 52    	sub.w     w5, #0x4, w4
    199a:	84 08 78    	mov.w     w4, [w1]
    199c:	14 02 be    	mov.d     [w4], w4
    199e:	4f ab de    	asr.w     w5, #0xf, w6
    19a0:	86 03 78    	mov.w     w6, w7
    19a2:	11 00 37    	bra       0x19c6 <.L13>

000019a4 <.L12>:
    19a4:	15 c7 b3    	mov.b     #0x71, w5
    19a6:	85 4f 52    	sub.b     w4, w5, [w15]
    19a8:	03 00 32    	bra       Z, 0x19b0 <.L43>
    19aa:	a5 c6 b3    	mov.b     #0x6a, w5
    19ac:	85 4f 52    	sub.b     w4, w5, [w15]
    19ae:	06 00 3a    	bra       NZ, 0x19bc <.L15>

000019b0 <.L43>:
    19b0:	91 02 78    	mov.w     [w1], w5
    19b2:	68 82 52    	sub.w     w5, #0x8, w4
    19b4:	84 08 78    	mov.w     w4, [w1]
    19b6:	54 03 be    	mov.d     [++w4], w6
    19b8:	44 02 be    	mov.d     [--w4], w4
    19ba:	05 00 37    	bra       0x19c6 <.L13>

000019bc <.L15>:
    19bc:	11 82 e9    	dec2.w    [w1], w4
    19be:	84 08 78    	mov.w     w4, [w1]
    19c0:	14 02 78    	mov.w     [w4], w4
    19c2:	cf a2 de    	asr.w     w4, #0xf, w5
    19c4:	61 2b b9    	mul.su    w5, #0x1, w6

000019c6 <.L13>:
    19c6:	04 98 be    	mov.d     w4, [w0++]
    19c8:	06 90 be    	mov.d     w6, [w0--]
    19ca:	a0 60 90    	mov.b     [w0+34], w1
    19cc:	88 c6 b3    	mov.b     #0x68, w8
    19ce:	88 cf 50    	sub.b     w1, w8, [w15]
    19d0:	0d 00 32    	bra       Z, 0x19ec <.L19>
    19d2:	28 c6 b3    	mov.b     #0x62, w8
    19d4:	88 cf 50    	sub.b     w1, w8, [w15]
    19d6:	04 00 3a    	bra       NZ, 0x19e0 <.L18>
    19d8:	04 02 fb    	se        w4, w4
    19da:	cf a2 de    	asr.w     w4, #0xf, w5
    19dc:	61 2b b9    	mul.su    w5, #0x1, w6
    19de:	08 00 37    	bra       0x19f0 <.L44>

000019e0 <.L18>:
    19e0:	48 c7 b3    	mov.b     #0x74, w8
    19e2:	88 cf 50    	sub.b     w1, w8, [w15]
    19e4:	03 00 32    	bra       Z, 0x19ec <.L19>
    19e6:	66 44 44    	add.b     w8, #0x6, w8
    19e8:	88 cf 50    	sub.b     w1, w8, [w15]
    19ea:	04 00 3a    	bra       NZ, 0x19f4 <.L17>

000019ec <.L19>:
    19ec:	cf a2 de    	asr.w     w4, #0xf, w5
    19ee:	61 2b b9    	mul.su    w5, #0x1, w6

000019f0 <.L44>:
    19f0:	04 98 be    	mov.d     w4, [w0++]
    19f2:	06 90 be    	mov.d     w6, [w0--]

000019f4 <.L17>:
    19f4:	30 02 be    	mov.d     [w0++], w4
    19f6:	20 03 be    	mov.d     [w0--], w6
    19f8:	f0 00 90    	mov.w     [w0+14], w1
    19fa:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    19fc:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    19fe:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1a00:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1a02:	02 00 3d    	bra       GE, 0x1a08 <.L20>
    1a04:	d4 c2 b3    	mov.b     #0x2d, w4
    1a06:	08 00 37    	bra       0x1a18 <.L45>

00001a08 <.L20>:
    1a08:	00 12 90    	mov.w     [w0+32], w4
    1a0a:	04 18 a3    	btst.z    w4, #0x1
    1a0c:	02 00 32    	bra       Z, 0x1a12 <.L22>
    1a0e:	b4 c2 b3    	mov.b     #0x2b, w4
    1a10:	03 00 37    	bra       0x1a18 <.L45>

00001a12 <.L22>:
    1a12:	04 08 a3    	btst.z    w4, #0x0
    1a14:	4c 00 32    	bra       Z, 0x1aae <.L31>
    1a16:	04 c2 b3    	mov.b     #0x20, w4

00001a18 <.L45>:
    1a18:	84 f1 78    	mov.b     w4, [w3+w1]
    1a1a:	47 00 37    	bra       0x1aaa <.L54>

00001a1c <.L4>:
    1a1c:	20 62 90    	mov.b     [w0+34], w4
    1a1e:	c5 c6 b3    	mov.b     #0x6c, w5
    1a20:	85 4f 52    	sub.b     w4, w5, [w15]
    1a22:	06 00 3a    	bra       NZ, 0x1a30 <.L23>
    1a24:	91 02 78    	mov.w     [w1], w5
    1a26:	64 82 52    	sub.w     w5, #0x4, w4
    1a28:	84 08 78    	mov.w     w4, [w1]
    1a2a:	14 02 be    	mov.d     [w4], w4
    1a2c:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a2e:	11 00 37    	bra       0x1a52 <.L24>

00001a30 <.L23>:
    1a30:	15 c7 b3    	mov.b     #0x71, w5
    1a32:	85 4f 52    	sub.b     w4, w5, [w15]
    1a34:	03 00 32    	bra       Z, 0x1a3c <.L48>
    1a36:	a5 c6 b3    	mov.b     #0x6a, w5
    1a38:	85 4f 52    	sub.b     w4, w5, [w15]
    1a3a:	06 00 3a    	bra       NZ, 0x1a48 <.L26>

00001a3c <.L48>:
    1a3c:	91 02 78    	mov.w     [w1], w5
    1a3e:	68 82 52    	sub.w     w5, #0x8, w4
    1a40:	84 08 78    	mov.w     w4, [w1]
    1a42:	54 03 be    	mov.d     [++w4], w6
    1a44:	44 02 be    	mov.d     [--w4], w4
    1a46:	05 00 37    	bra       0x1a52 <.L24>

00001a48 <.L26>:
    1a48:	11 82 e9    	dec2.w    [w1], w4
    1a4a:	84 08 78    	mov.w     w4, [w1]
    1a4c:	14 02 78    	mov.w     [w4], w4
    1a4e:	80 02 eb    	clr.w     w5
    1a50:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a52 <.L24>:
    1a52:	04 98 be    	mov.d     w4, [w0++]
    1a54:	06 90 be    	mov.d     w6, [w0--]
    1a56:	a0 60 90    	mov.b     [w0+34], w1
    1a58:	88 c6 b3    	mov.b     #0x68, w8
    1a5a:	88 cf 50    	sub.b     w1, w8, [w15]
    1a5c:	0d 00 32    	bra       Z, 0x1a78 <.L30>
    1a5e:	28 c6 b3    	mov.b     #0x62, w8
    1a60:	88 cf 50    	sub.b     w1, w8, [w15]
    1a62:	04 00 3a    	bra       NZ, 0x1a6c <.L29>
    1a64:	04 82 fb    	ze        w4, w4
    1a66:	80 02 eb    	clr.w     w5
    1a68:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a6a:	08 00 37    	bra       0x1a7c <.L49>

00001a6c <.L29>:
    1a6c:	48 c7 b3    	mov.b     #0x74, w8
    1a6e:	88 cf 50    	sub.b     w1, w8, [w15]
    1a70:	03 00 32    	bra       Z, 0x1a78 <.L30>
    1a72:	66 44 44    	add.b     w8, #0x6, w8
    1a74:	88 cf 50    	sub.b     w1, w8, [w15]
    1a76:	04 00 3a    	bra       NZ, 0x1a80 <.L28>

00001a78 <.L30>:
    1a78:	80 02 eb    	clr.w     w5
    1a7a:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a7c <.L49>:
    1a7c:	04 98 be    	mov.d     w4, [w0++]
    1a7e:	06 90 be    	mov.d     w6, [w0--]

00001a80 <.L28>:
    1a80:	80 10 90    	mov.w     [w0+32], w1
    1a82:	01 38 a3    	btst.z    w1, #0x3
    1a84:	14 00 32    	bra       Z, 0x1aae <.L31>
    1a86:	30 02 be    	mov.d     [w0++], w4
    1a88:	20 03 be    	mov.d     [w0--], w6
    1a8a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a8c:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1a8e:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1a90:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1a92:	0d 00 32    	bra       Z, 0x1aae <.L31>
    1a94:	81 c7 b3    	mov.b     #0x78, w1
    1a96:	81 4f 51    	sub.b     w2, w1, [w15]
    1a98:	03 00 32    	bra       Z, 0x1aa0 <.L32>
    1a9a:	81 c5 b3    	mov.b     #0x58, w1
    1a9c:	81 4f 51    	sub.b     w2, w1, [w15]
    1a9e:	07 00 3a    	bra       NZ, 0x1aae <.L31>

00001aa0 <.L32>:
    1aa0:	f0 00 90    	mov.w     [w0+14], w1
    1aa2:	04 c3 b3    	mov.b     #0x30, w4
    1aa4:	84 f1 78    	mov.b     w4, [w3+w1]
    1aa6:	81 00 e8    	inc.w     w1, w1
    1aa8:	82 f1 78    	mov.b     w2, [w3+w1]

00001aaa <.L54>:
    1aaa:	81 00 e8    	inc.w     w1, w1
    1aac:	71 00 98    	mov.w     w1, [w0+14]

00001aae <.L31>:
    1aae:	f0 00 90    	mov.w     [w0+14], w1
    1ab0:	81 81 41    	add.w     w3, w1, w3
    1ab2:	63 00 98    	mov.w     w3, [w0+12]
    1ab4:	82 40 78    	mov.b     w2, w1
    1ab6:	3e 00 37    	bra       0x1b34 <.L52>

00001ab8 <.L7>:
    1ab8:	a0 61 90    	mov.b     [w0+34], w3
    1aba:	c4 c6 b3    	mov.b     #0x6c, w4
    1abc:	11 81 e9    	dec2.w    [w1], w2
    1abe:	84 cf 51    	sub.b     w3, w4, [w15]
    1ac0:	22 00 32    	bra       Z, 0x1b06 <.L37>
    1ac2:	0a 00 3c    	bra       GT, 0x1ad8 <.L41>
    1ac4:	64 42 52    	sub.b     w4, #0x4, w4
    1ac6:	84 cf 51    	sub.b     w3, w4, [w15]
    1ac8:	25 00 32    	bra       Z, 0x1b14 <.L51>
    1aca:	04 c2 e8    	inc2.b    w4, w4
    1acc:	84 cf 51    	sub.b     w3, w4, [w15]
    1ace:	13 00 32    	bra       Z, 0x1af6 <.L36>
    1ad0:	68 42 52    	sub.b     w4, #0x8, w4
    1ad2:	84 cf 51    	sub.b     w3, w4, [w15]
    1ad4:	1e 00 3a    	bra       NZ, 0x1b12 <.L33>
    1ad6:	0a 00 37    	bra       0x1aec <.L55>

00001ad8 <.L41>:
    1ad8:	44 c7 b3    	mov.b     #0x74, w4
    1ada:	84 cf 51    	sub.b     w3, w4, [w15]
    1adc:	1b 00 32    	bra       Z, 0x1b14 <.L51>
    1ade:	66 42 42    	add.b     w4, #0x6, w4
    1ae0:	84 cf 51    	sub.b     w3, w4, [w15]
    1ae2:	18 00 32    	bra       Z, 0x1b14 <.L51>
    1ae4:	69 42 52    	sub.b     w4, #0x9, w4
    1ae6:	84 cf 51    	sub.b     w3, w4, [w15]
    1ae8:	14 00 3a    	bra       NZ, 0x1b12 <.L33>
    1aea:	05 00 37    	bra       0x1af6 <.L36>

00001aec <.L55>:
    1aec:	82 08 78    	mov.w     w2, [w1]
    1aee:	92 00 78    	mov.w     [w2], w1
    1af0:	40 58 90    	mov.b     [w0+28], w0
    1af2:	80 48 78    	mov.b     w0, [w1]
    1af4:	2c 00 37    	bra       0x1b4e <.L11>

00001af6 <.L36>:
    1af6:	82 08 78    	mov.w     w2, [w1]
    1af8:	92 00 78    	mov.w     [w2], w1
    1afa:	60 0a 90    	mov.w     [w0+28], w4
    1afc:	cf a2 de    	asr.w     w4, #0xf, w5
    1afe:	61 2b b9    	mul.su    w5, #0x1, w6
    1b00:	84 98 be    	mov.d     w4, [w1++]
    1b02:	86 90 be    	mov.d     w6, [w1--]
    1b04:	24 00 37    	bra       0x1b4e <.L11>

00001b06 <.L37>:
    1b06:	82 08 78    	mov.w     w2, [w1]
    1b08:	92 00 78    	mov.w     [w2], w1
    1b0a:	60 09 90    	mov.w     [w0+28], w2
    1b0c:	cf 91 de    	asr.w     w2, #0xf, w3
    1b0e:	82 88 be    	mov.d     w2, [w1]
    1b10:	1e 00 37    	bra       0x1b4e <.L11>

00001b12 <.L33>:
    1b12:	11 81 e9    	dec2.w    [w1], w2

00001b14 <.L51>:
    1b14:	82 08 78    	mov.w     w2, [w1]
    1b16:	92 00 78    	mov.w     [w2], w1
    1b18:	60 08 90    	mov.w     [w0+28], w0
    1b1a:	80 08 78    	mov.w     w0, [w1]
    1b1c:	18 00 37    	bra       0x1b4e <.L11>

00001b1e <.L8>:
    1b1e:	11 81 e9    	dec2.w    [w1], w2
    1b20:	82 08 78    	mov.w     w2, [w1]
    1b22:	12 02 78    	mov.w     [w2], w4
    1b24:	cf a2 de    	asr.w     w4, #0xf, w5
    1b26:	61 2b b9    	mul.su    w5, #0x1, w6
    1b28:	04 98 be    	mov.d     w4, [w0++]
    1b2a:	06 90 be    	mov.d     w6, [w0--]
    1b2c:	f0 00 90    	mov.w     [w0+14], w1
    1b2e:	81 81 41    	add.w     w3, w1, w3
    1b30:	63 00 98    	mov.w     w3, [w0+12]
    1b32:	81 c7 b3    	mov.b     #0x78, w1

00001b34 <.L52>:
    1b34:	2c 00 07    	rcall     0x1b8e <__Litob>
    1b36:	0b 00 37    	bra       0x1b4e <.L11>

00001b38 <.L3>:
    1b38:	f0 00 90    	mov.w     [w0+14], w1

00001b3a <.L53>:
    1b3a:	82 f1 78    	mov.b     w2, [w3+w1]
    1b3c:	06 00 37    	bra       0x1b4a <.L50>

00001b3e <.L2>:
    1b3e:	f0 00 90    	mov.w     [w0+14], w1
    1b40:	81 81 41    	add.w     w3, w1, w3
    1b42:	02 04 e0    	cp0.b     w2
    1b44:	01 00 3a    	bra       NZ, 0x1b48 <.L42>
    1b46:	52 c2 b3    	mov.b     #0x25, w2

00001b48 <.L42>:
    1b48:	82 49 78    	mov.b     w2, [w3]

00001b4a <.L50>:
    1b4a:	81 00 e8    	inc.w     w1, w1
    1b4c:	71 00 98    	mov.w     w1, [w0+14]

00001b4e <.L11>:
    1b4e:	00 00 eb    	clr.w     w0
    1b50:	4f 04 78    	mov.w     [--w15], w8
    1b52:	00 00 06    	return    

00001b54 <_memchr>:
    1b54:	03 00 37    	bra       0x1b5c <.L2>

00001b56 <.L4>:
    1b56:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    1b58:	05 00 32    	bra       Z, 0x1b64 <.L5>
    1b5a:	02 01 e9    	dec.w     w2, w2

00001b5c <.L2>:
    1b5c:	80 01 78    	mov.w     w0, w3
    1b5e:	02 00 e0    	cp0.w     w2
    1b60:	fa ff 3a    	bra       NZ, 0x1b56 <.L4>
    1b62:	00 00 05    	retlw.w   #0x0, w0

00001b64 <.L5>:
    1b64:	03 00 78    	mov.w     w3, w0
    1b66:	00 00 06    	return    

00001b68 <_memcpy>:
    1b68:	80 01 78    	mov.w     w0, w3
    1b6a:	02 00 37    	bra       0x1b70 <.L2>

00001b6c <.L3>:
    1b6c:	b1 59 78    	mov.b     [w1++], [w3++]
    1b6e:	02 01 e9    	dec.w     w2, w2

00001b70 <.L2>:
    1b70:	02 00 e0    	cp0.w     w2
    1b72:	fc ff 3a    	bra       NZ, 0x1b6c <.L3>
    1b74:	00 00 06    	return    

00001b76 <_strchr>:
    1b76:	02 00 37    	bra       0x1b7c <.L2>

00001b78 <.L4>:
    1b78:	03 04 e0    	cp0.b     w3
    1b7a:	06 00 32    	bra       Z, 0x1b88 <.L5>

00001b7c <.L2>:
    1b7c:	00 01 78    	mov.w     w0, w2
    1b7e:	02 00 78    	mov.w     w2, w0
    1b80:	b0 41 78    	mov.b     [w0++], w3
    1b82:	81 cf 51    	sub.b     w3, w1, [w15]
    1b84:	f9 ff 3a    	bra       NZ, 0x1b78 <.L4>
    1b86:	01 00 37    	bra       0x1b8a <.L3>

00001b88 <.L5>:
    1b88:	00 01 eb    	clr.w     w2

00001b8a <.L3>:
    1b8a:	02 00 78    	mov.w     w2, w0
    1b8c:	00 00 06    	return    

00001b8e <__Litob>:
    1b8e:	fc 87 47    	add.w     w15, #0x1c, w15
    1b90:	88 9f be    	mov.d     w8, [w15++]
    1b92:	8a 9f be    	mov.d     w10, [w15++]
    1b94:	8c 9f be    	mov.d     w12, [w15++]
    1b96:	8e 1f 78    	mov.w     w14, [w15++]
    1b98:	00 06 78    	mov.w     w0, w12
    1b9a:	80 c5 b3    	mov.b     #0x58, w0
    1b9c:	80 cf 50    	sub.b     w1, w0, [w15]
    1b9e:	0a 00 32    	bra       Z, 0x1bb4 <.L35>
    1ba0:	77 40 40    	add.b     w0, #0x17, w0
    1ba2:	80 cf 50    	sub.b     w1, w0, [w15]
    1ba4:	0a 00 32    	bra       Z, 0x1bba <.L36>
    1ba6:	69 40 40    	add.b     w0, #0x9, w0
    1ba8:	80 cf 50    	sub.b     w1, w0, [w15]
    1baa:	0b 00 32    	bra       Z, 0x1bc2 <.L37>
    1bac:	30 f7 21    	mov.w     #0x1f73, w0
    1bae:	80 bf 9f    	mov.w     w0, [w15-16]
    1bb0:	ae 00 20    	mov.w     #0xa, w14
    1bb2:	0a 00 37    	bra       0x1bc8 <.L2>

00001bb4 <.L35>:
    1bb4:	22 f6 21    	mov.w     #0x1f62, w2
    1bb6:	82 bf 9f    	mov.w     w2, [w15-16]
    1bb8:	06 00 37    	bra       0x1bc6 <.L46>

00001bba <.L36>:
    1bba:	33 f7 21    	mov.w     #0x1f73, w3
    1bbc:	83 bf 9f    	mov.w     w3, [w15-16]
    1bbe:	8e 00 20    	mov.w     #0x8, w14
    1bc0:	03 00 37    	bra       0x1bc8 <.L2>

00001bc2 <.L37>:
    1bc2:	34 f7 21    	mov.w     #0x1f73, w4
    1bc4:	84 bf 9f    	mov.w     w4, [w15-16]

00001bc6 <.L46>:
    1bc6:	0e 01 20    	mov.w     #0x10, w14

00001bc8 <.L2>:
    1bc8:	3c 02 be    	mov.d     [w12++], w4
    1bca:	2c 03 be    	mov.d     [w12--], w6
    1bcc:	06 05 be    	mov.d     w6, w10
    1bce:	04 04 be    	mov.d     w4, w8
    1bd0:	40 c6 b3    	mov.b     #0x64, w0
    1bd2:	80 cf 50    	sub.b     w1, w0, [w15]
    1bd4:	03 00 32    	bra       Z, 0x1bdc <.L3>
    1bd6:	65 40 40    	add.b     w0, #0x5, w0
    1bd8:	80 cf 50    	sub.b     w1, w0, [w15]
    1bda:	0b 00 3a    	bra       NZ, 0x1bf2 <.L4>

00001bdc <.L3>:
    1bdc:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1bde:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1be0:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1be2:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1be4:	06 00 3d    	bra       GE, 0x1bf2 <.L4>
    1be6:	60 00 b8    	mul.uu    w0, #0x0, w0
    1be8:	60 11 b8    	mul.uu    w2, #0x0, w2
    1bea:	04 04 50    	sub.w     w0, w4, w8
    1bec:	85 84 58    	subb.w    w1, w5, w9
    1bee:	06 05 59    	subb.w    w2, w6, w10
    1bf0:	87 85 59    	subb.w    w3, w7, w11

00001bf2 <.L4>:
    1bf2:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1bf4:	04 00 32    	bra       Z, 0x1bfe <.L38>
    1bf6:	40 00 20    	mov.w     #0x4, w0
    1bf8:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1bfa:	38 00 3a    	bra       NZ, 0x1c6c <.L51>
    1bfc:	01 00 37    	bra       0x1c00 <.L6>

00001bfe <.L38>:
    1bfe:	30 00 20    	mov.w     #0x3, w0

00001c00 <.L6>:
    1c00:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c02:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c04:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1c06:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1c08:	04 00 3a    	bra       NZ, 0x1c12 <.L8>
    1c0a:	dc 08 90    	mov.w     [w12+26], w1
    1c0c:	8d 01 20    	mov.w     #0x18, w13
    1c0e:	01 00 e0    	cp0.w     w1
    1c10:	06 00 32    	bra       Z, 0x1c1e <.L9>

00001c12 <.L8>:
    1c12:	8e 00 e9    	dec.w     w14, w1
    1c14:	88 80 60    	and.w     w1, w8, w1
    1c16:	8f ba 97    	mov.w     [w15-16], w5
    1c18:	e5 c0 78    	mov.b     [w5+w1], w1
    1c1a:	f1 ef 9f    	mov.b     w1, [w15-17]
    1c1c:	7d 01 20    	mov.w     #0x17, w13

00001c1e <.L9>:
    1c1e:	80 00 78    	mov.w     w0, w1

00001c20 <.LB101>:
    1c20:	81 00 e9    	dec.w     w1, w1
    1c22:	05 00 33    	bra       N, 0x1c2e <.LE101>
    1c24:	8b 05 d1    	lsr.w     w11, w11
    1c26:	0a 85 d3    	rrc.w     w10, w10
    1c28:	89 84 d3    	rrc.w     w9, w9
    1c2a:	08 84 d3    	rrc.w     w8, w8
    1c2c:	f9 ff 37    	bra       0x1c20 <.LB101>

00001c2e <.LE101>:
    1c2e:	08 9e be    	mov.d     w8, [w12++]
    1c30:	0a 96 be    	mov.d     w10, [w12--]
    1c32:	12 00 37    	bra       0x1c58 <.L10>

00001c34 <.L12>:
    1c34:	8d 06 e9    	dec.w     w13, w13
    1c36:	8e 00 e9    	dec.w     w14, w1
    1c38:	84 80 60    	and.w     w1, w4, w1
    1c3a:	0f b9 97    	mov.w     [w15-16], w2
    1c3c:	e2 c1 78    	mov.b     [w2+w1], w3
    1c3e:	82 fd 2f    	mov.w     #0xffd8, w2
    1c40:	0f 01 41    	add.w     w2, w15, w2
    1c42:	03 f1 7e    	mov.b     w3, [w2+w13]
    1c44:	80 00 78    	mov.w     w0, w1

00001c46 <.LB115>:
    1c46:	81 00 e9    	dec.w     w1, w1
    1c48:	05 00 33    	bra       N, 0x1c54 <.LE115>
    1c4a:	87 83 d1    	asr.w     w7, w7
    1c4c:	06 83 d3    	rrc.w     w6, w6
    1c4e:	85 82 d3    	rrc.w     w5, w5
    1c50:	04 82 d3    	rrc.w     w4, w4
    1c52:	f9 ff 37    	bra       0x1c46 <.LB115>

00001c54 <.LE115>:
    1c54:	04 9e be    	mov.d     w4, [w12++]
    1c56:	06 96 be    	mov.d     w6, [w12--]

00001c58 <.L10>:
    1c58:	3c 02 be    	mov.d     [w12++], w4
    1c5a:	2c 03 be    	mov.d     [w12--], w6
    1c5c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1c5e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1c60:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1c62:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1c64:	8b 00 34    	bra       LE, 0x1d7c <.L11>
    1c66:	0d 00 e0    	cp0.w     w13
    1c68:	e5 ff 3c    	bra       GT, 0x1c34 <.L12>
    1c6a:	88 00 37    	bra       0x1d7c <.L11>

00001c6c <.L51>:
    1c6c:	2c 60 90    	mov.b     [w12+34], w0
    1c6e:	81 c6 b3    	mov.b     #0x68, w1
    1c70:	81 4f 50    	sub.b     w0, w1, [w15]
    1c72:	0b 00 32    	bra       Z, 0x1c8a <.L14>
    1c74:	06 00 3c    	bra       GT, 0x1c82 <.L16>
    1c76:	00 04 e0    	cp0.b     w0
    1c78:	08 00 32    	bra       Z, 0x1c8a <.L14>
    1c7a:	e6 c0 50    	sub.b     w1, #0x6, w1
    1c7c:	81 4f 50    	sub.b     w0, w1, [w15]
    1c7e:	4e 00 3a    	bra       NZ, 0x1d1c <.L13>
    1c80:	04 00 37    	bra       0x1c8a <.L14>

00001c82 <.L16>:
    1c82:	c1 c6 b3    	mov.b     #0x6c, w1
    1c84:	81 4f 50    	sub.b     w0, w1, [w15]
    1c86:	4a 00 3a    	bra       NZ, 0x1d1c <.L13>
    1c88:	21 00 37    	bra       0x1ccc <.L52>

00001c8a <.L14>:
    1c8a:	08 00 e0    	cp0.w     w8
    1c8c:	04 00 3a    	bra       NZ, 0x1c96 <.L17>
    1c8e:	5c 08 90    	mov.w     [w12+26], w0
    1c90:	8d 01 20    	mov.w     #0x18, w13
    1c92:	00 00 e0    	cp0.w     w0
    1c94:	06 00 32    	bra       Z, 0x1ca2 <.L18>

00001c96 <.L17>:
    1c96:	11 00 09    	repeat    #0x11
    1c98:	0e 84 d8    	div.uw    w8, w14
    1c9a:	0f b9 97    	mov.w     [w15-16], w2
    1c9c:	e2 c0 78    	mov.b     [w2+w1], w1
    1c9e:	f1 ef 9f    	mov.b     w1, [w15-17]
    1ca0:	7d 01 20    	mov.w     #0x17, w13

00001ca2 <.L18>:
    1ca2:	11 00 09    	repeat    #0x11
    1ca4:	0e 84 d8    	div.uw    w8, w14
    1ca6:	0a 00 37    	bra       0x1cbc <.L47>

00001ca8 <.L21>:
    1ca8:	11 00 09    	repeat    #0x11
    1caa:	0e 04 d8    	div.sw    w8, w14
    1cac:	8d 06 e9    	dec.w     w13, w13
    1cae:	0e 81 b9    	mul.ss    w0, w14, w2
    1cb0:	02 04 54    	sub.w     w8, w2, w8
    1cb2:	8f b8 97    	mov.w     [w15-16], w1
    1cb4:	61 41 7c    	mov.b     [w1+w8], w2
    1cb6:	81 fd 2f    	mov.w     #0xffd8, w1
    1cb8:	8f 80 40    	add.w     w1, w15, w1
    1cba:	82 f0 7e    	mov.b     w2, [w1+w13]

00001cbc <.L47>:
    1cbc:	00 04 78    	mov.w     w0, w8
    1cbe:	08 00 e0    	cp0.w     w8
    1cc0:	02 00 32    	bra       Z, 0x1cc6 <.L20>
    1cc2:	0d 00 e0    	cp0.w     w13
    1cc4:	f1 ff 3c    	bra       GT, 0x1ca8 <.L21>

00001cc6 <.L20>:
    1cc6:	cf c4 de    	asr.w     w8, #0xf, w9
    1cc8:	61 4d b9    	mul.su    w9, #0x1, w10
    1cca:	25 00 37    	bra       0x1d16 <.L50>

00001ccc <.L52>:
    1ccc:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1cce:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1cd0:	04 00 3a    	bra       NZ, 0x1cda <.L22>
    1cd2:	5c 08 90    	mov.w     [w12+26], w0
    1cd4:	8d 01 20    	mov.w     #0x18, w13
    1cd6:	00 00 e0    	cp0.w     w0
    1cd8:	07 00 32    	bra       Z, 0x1ce8 <.L23>

00001cda <.L22>:
    1cda:	61 71 b9    	mul.su    w14, #0x1, w2
    1cdc:	08 00 be    	mov.d     w8, w0
    1cde:	53 01 07    	rcall     0x1f86 <___umodsi3>
    1ce0:	8f b9 97    	mov.w     [w15-16], w3
    1ce2:	e3 41 78    	mov.b     [w3+w0], w3
    1ce4:	f3 ef 9f    	mov.b     w3, [w15-17]
    1ce6:	7d 01 20    	mov.w     #0x17, w13

00001ce8 <.L23>:
    1ce8:	61 71 b9    	mul.su    w14, #0x1, w2
    1cea:	08 00 be    	mov.d     w8, w0
    1cec:	ea fb 07    	rcall     0x14c2 <___udivsi3>
    1cee:	0b 00 37    	bra       0x1d06 <.L48>

00001cf0 <.L26>:
    1cf0:	61 71 b9    	mul.su    w14, #0x1, w2
    1cf2:	08 00 be    	mov.d     w8, w0
    1cf4:	39 01 07    	rcall     0x1f68 <___divsi3>
    1cf6:	8d 06 e9    	dec.w     w13, w13
    1cf8:	00 f1 b9    	mul.ss    w14, w0, w2
    1cfa:	02 04 54    	sub.w     w8, w2, w8
    1cfc:	0f ba 97    	mov.w     [w15-16], w4
    1cfe:	e4 42 7c    	mov.b     [w4+w8], w5
    1d00:	84 fd 2f    	mov.w     #0xffd8, w4
    1d02:	0f 02 42    	add.w     w4, w15, w4
    1d04:	05 f2 7e    	mov.b     w5, [w4+w13]

00001d06 <.L48>:
    1d06:	00 04 be    	mov.d     w0, w8
    1d08:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1d0a:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1d0c:	02 00 32    	bra       Z, 0x1d12 <.L25>
    1d0e:	0d 00 e0    	cp0.w     w13
    1d10:	ef ff 3c    	bra       GT, 0x1cf0 <.L26>

00001d12 <.L25>:
    1d12:	4f cd de    	asr.w     w9, #0xf, w10
    1d14:	8a 05 78    	mov.w     w10, w11

00001d16 <.L50>:
    1d16:	08 9e be    	mov.d     w8, [w12++]
    1d18:	0a 96 be    	mov.d     w10, [w12--]
    1d1a:	30 00 37    	bra       0x1d7c <.L11>

00001d1c <.L13>:
    1d1c:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1d1e:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1d20:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1d22:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1d24:	04 00 3a    	bra       NZ, 0x1d2e <.L27>
    1d26:	5c 08 90    	mov.w     [w12+26], w0
    1d28:	8d 01 20    	mov.w     #0x18, w13
    1d2a:	00 00 e0    	cp0.w     w0
    1d2c:	09 00 32    	bra       Z, 0x1d40 <.L28>

00001d2e <.L27>:
    1d2e:	61 72 b9    	mul.su    w14, #0x1, w4
    1d30:	61 2b b9    	mul.su    w5, #0x1, w6
    1d32:	08 00 be    	mov.d     w8, w0
    1d34:	0a 01 be    	mov.d     w10, w2
    1d36:	d0 01 07    	rcall     0x20d8 <___umoddi3>
    1d38:	0f ba 97    	mov.w     [w15-16], w4
    1d3a:	64 42 78    	mov.b     [w4+w0], w4
    1d3c:	f4 ef 9f    	mov.b     w4, [w15-17]
    1d3e:	7d 01 20    	mov.w     #0x17, w13

00001d40 <.L28>:
    1d40:	61 72 b9    	mul.su    w14, #0x1, w4
    1d42:	61 2b b9    	mul.su    w5, #0x1, w6
    1d44:	08 00 be    	mov.d     w8, w0
    1d46:	0a 01 be    	mov.d     w10, w2
    1d48:	c0 01 07    	rcall     0x20ca <___udivdi3>
    1d4a:	0d 00 37    	bra       0x1d66 <.L49>

00001d4c <.L30>:
    1d4c:	61 72 b9    	mul.su    w14, #0x1, w4
    1d4e:	61 2b b9    	mul.su    w5, #0x1, w6
    1d50:	08 00 be    	mov.d     w8, w0
    1d52:	0a 01 be    	mov.d     w10, w2
    1d54:	c5 01 07    	rcall     0x20e0 <___divdi3>
    1d56:	8d 06 e9    	dec.w     w13, w13
    1d58:	00 f2 b9    	mul.ss    w14, w0, w4
    1d5a:	04 04 54    	sub.w     w8, w4, w8
    1d5c:	8f ba 97    	mov.w     [w15-16], w5
    1d5e:	65 42 7c    	mov.b     [w5+w8], w4
    1d60:	85 fd 2f    	mov.w     #0xffd8, w5
    1d62:	8f 82 42    	add.w     w5, w15, w5
    1d64:	84 f2 7e    	mov.b     w4, [w5+w13]

00001d66 <.L49>:
    1d66:	00 9e be    	mov.d     w0, [w12++]
    1d68:	02 96 be    	mov.d     w2, [w12--]
    1d6a:	3c 04 be    	mov.d     [w12++], w8
    1d6c:	2c 05 be    	mov.d     [w12--], w10
    1d6e:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1d70:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1d72:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1d74:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1d76:	02 00 34    	bra       LE, 0x1d7c <.L11>
    1d78:	0d 00 e0    	cp0.w     w13
    1d7a:	e8 ff 3c    	bra       GT, 0x1d4c <.L30>

00001d7c <.L11>:
    1d7c:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1d7e:	10 00 3a    	bra       NZ, 0x1da0 <.L31>
    1d80:	0c 10 90    	mov.w     [w12+32], w0
    1d82:	00 38 a3    	btst.z    w0, #0x3
    1d84:	0d 00 32    	bra       Z, 0x1da0 <.L31>
    1d86:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    1d88:	06 00 3e    	bra       GTU, 0x1d96 <.L32>
    1d8a:	85 fd 2f    	mov.w     #0xffd8, w5
    1d8c:	8f 82 42    	add.w     w5, w15, w5
    1d8e:	e5 c0 7e    	mov.b     [w5+w13], w1
    1d90:	00 c3 b3    	mov.b     #0x30, w0
    1d92:	80 cf 50    	sub.b     w1, w0, [w15]
    1d94:	05 00 32    	bra       Z, 0x1da0 <.L31>

00001d96 <.L32>:
    1d96:	8d 06 e9    	dec.w     w13, w13
    1d98:	02 c3 b3    	mov.b     #0x30, w2
    1d9a:	81 fd 2f    	mov.w     #0xffd8, w1
    1d9c:	8f 80 40    	add.w     w1, w15, w1
    1d9e:	82 f0 7e    	mov.b     w2, [w1+w13]

00001da0 <.L31>:
    1da0:	78 81 16    	subr.w    w13, #0x18, w2
    1da2:	12 0e 98    	mov.w     w2, [w12+18]
    1da4:	6c 00 90    	mov.w     [w12+12], w0
    1da6:	83 fd 2f    	mov.w     #0xffd8, w3
    1da8:	8f 81 41    	add.w     w3, w15, w3
    1daa:	8d 80 41    	add.w     w3, w13, w1
    1dac:	dd fe 07    	rcall     0x1b68 <_memcpy>
    1dae:	1c 08 90    	mov.w     [w12+18], w0
    1db0:	dc 08 90    	mov.w     [w12+26], w1
    1db2:	81 0f 50    	sub.w     w0, w1, [w15]
    1db4:	06 00 3d    	bra       GE, 0x1dc2 <.L33>
    1db6:	00 80 50    	sub.w     w1, w0, w0
    1db8:	00 0e 98    	mov.w     w0, [w12+16]
    1dba:	0c 10 90    	mov.w     [w12+32], w0
    1dbc:	00 40 a1    	bclr.w    w0, #0x4
    1dbe:	00 16 98    	mov.w     w0, [w12+32]
    1dc0:	0f 00 37    	bra       0x1de0 <.L1>

00001dc2 <.L33>:
    1dc2:	01 00 e0    	cp0.w     w1
    1dc4:	0d 00 3d    	bra       GE, 0x1de0 <.L1>
    1dc6:	8c 10 90    	mov.w     [w12+32], w1
    1dc8:	f4 80 60    	and.w     w1, #0x14, w1
    1dca:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    1dcc:	09 00 3a    	bra       NZ, 0x1de0 <.L1>
    1dce:	7c 09 90    	mov.w     [w12+30], w2
    1dd0:	fc 00 90    	mov.w     [w12+14], w1
    1dd2:	81 00 51    	sub.w     w2, w1, w1
    1dd4:	0c 09 90    	mov.w     [w12+16], w2
    1dd6:	82 80 50    	sub.w     w1, w2, w1
    1dd8:	00 80 50    	sub.w     w1, w0, w0
    1dda:	42 40 a9    	bclr.b    0x42, #0x2
    1ddc:	01 00 34    	bra       LE, 0x1de0 <.L1>
    1dde:	00 0e 98    	mov.w     w0, [w12+16]

00001de0 <.L1>:
    1de0:	4f 07 78    	mov.w     [--w15], w14
    1de2:	4f 06 be    	mov.d     [--w15], w12
    1de4:	4f 05 be    	mov.d     [--w15], w10
    1de6:	4f 04 be    	mov.d     [--w15], w8
    1de8:	cf 01 b1    	sub.w     #0x1c, w15
    1dea:	00 00 06    	return    

00001dec <__Puttxt>:
    1dec:	04 00 fa    	lnk       #0x4
    1dee:	88 9f be    	mov.d     w8, [w15++]
    1df0:	8a 9f be    	mov.d     w10, [w15++]
    1df2:	8c 1f 78    	mov.w     w12, [w15++]
    1df4:	00 04 78    	mov.w     w0, w8
    1df6:	01 06 78    	mov.w     w1, w12
    1df8:	f8 0d 90    	mov.w     [w8+30], w11
    1dfa:	78 00 90    	mov.w     [w8+14], w0
    1dfc:	80 85 55    	sub.w     w11, w0, w11
    1dfe:	08 08 90    	mov.w     [w8+16], w0
    1e00:	80 85 55    	sub.w     w11, w0, w11
    1e02:	18 08 90    	mov.w     [w8+18], w0
    1e04:	80 85 55    	sub.w     w11, w0, w11
    1e06:	28 08 90    	mov.w     [w8+20], w0
    1e08:	80 85 55    	sub.w     w11, w0, w11
    1e0a:	38 08 90    	mov.w     [w8+22], w0
    1e0c:	80 85 55    	sub.w     w11, w0, w11
    1e0e:	48 08 90    	mov.w     [w8+24], w0
    1e10:	80 85 55    	sub.w     w11, w0, w11
    1e12:	00 02 22    	mov.w     #0x2020, w0
    1e14:	90 bf 9f    	mov.w     w0, [w15-14]
    1e16:	00 03 23    	mov.w     #0x3030, w0
    1e18:	a0 bf 9f    	mov.w     w0, [w15-12]
    1e1a:	08 10 90    	mov.w     [w8+32], w0
    1e1c:	00 28 a3    	btst.z    w0, #0x2
    1e1e:	15 00 3a    	bra       NZ, 0x1e4a <.L2>
    1e20:	0b 00 e0    	cp0.w     w11
    1e22:	13 00 34    	bra       LE, 0x1e4a <.L2>
    1e24:	0b 05 78    	mov.w     w11, w10

00001e26 <.L5>:
    1e26:	8a 04 78    	mov.w     w10, w9
    1e28:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    1e2a:	01 00 36    	bra       LEU, 0x1e2e <.L3>
    1e2c:	29 00 20    	mov.w     #0x2, w9

00001e2e <.L3>:
    1e2e:	c8 01 90    	mov.w     [w8+8], w3
    1e30:	09 01 78    	mov.w     w9, w2
    1e32:	ee 80 57    	sub.w     w15, #0xe, w1
    1e34:	58 00 90    	mov.w     [w8+10], w0
    1e36:	03 00 01    	call      w3
    1e38:	50 04 98    	mov.w     w0, [w8+10]
    1e3a:	00 00 e0    	cp0.w     w0
    1e3c:	8c 00 32    	bra       Z, 0x1f56 <.L29>
    1e3e:	68 08 90    	mov.w     [w8+28], w0
    1e40:	09 00 40    	add.w     w0, w9, w0
    1e42:	60 0c 98    	mov.w     w0, [w8+28]
    1e44:	09 05 55    	sub.w     w10, w9, w10
    1e46:	42 40 a9    	bclr.b    0x42, #0x2
    1e48:	ee ff 3c    	bra       GT, 0x1e26 <.L5>

00001e4a <.L2>:
    1e4a:	78 01 90    	mov.w     [w8+14], w2
    1e4c:	02 00 e0    	cp0.w     w2
    1e4e:	0c 00 34    	bra       LE, 0x1e68 <.L6>
    1e50:	c8 01 90    	mov.w     [w8+8], w3
    1e52:	8c 00 78    	mov.w     w12, w1
    1e54:	58 00 90    	mov.w     [w8+10], w0
    1e56:	03 00 01    	call      w3
    1e58:	50 04 98    	mov.w     w0, [w8+10]
    1e5a:	80 80 eb    	setm.w    w1
    1e5c:	00 00 e0    	cp0.w     w0
    1e5e:	7c 00 32    	bra       Z, 0x1f58 <.L4>
    1e60:	e8 08 90    	mov.w     [w8+28], w1
    1e62:	78 00 90    	mov.w     [w8+14], w0
    1e64:	00 80 40    	add.w     w1, w0, w0
    1e66:	60 0c 98    	mov.w     w0, [w8+28]

00001e68 <.L6>:
    1e68:	88 0c 90    	mov.w     [w8+16], w9

00001e6a <.L30>:
    1e6a:	09 00 e0    	cp0.w     w9
    1e6c:	11 00 34    	bra       LE, 0x1e90 <.L7>
    1e6e:	09 05 78    	mov.w     w9, w10
    1e70:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1e72:	01 00 36    	bra       LEU, 0x1e76 <.L8>
    1e74:	2a 00 20    	mov.w     #0x2, w10

00001e76 <.L8>:
    1e76:	c8 01 90    	mov.w     [w8+8], w3
    1e78:	0a 01 78    	mov.w     w10, w2
    1e7a:	ec 80 57    	sub.w     w15, #0xc, w1
    1e7c:	58 00 90    	mov.w     [w8+10], w0
    1e7e:	03 00 01    	call      w3
    1e80:	50 04 98    	mov.w     w0, [w8+10]
    1e82:	00 00 e0    	cp0.w     w0
    1e84:	68 00 32    	bra       Z, 0x1f56 <.L29>
    1e86:	68 08 90    	mov.w     [w8+28], w0
    1e88:	0a 00 40    	add.w     w0, w10, w0
    1e8a:	60 0c 98    	mov.w     w0, [w8+28]
    1e8c:	8a 84 54    	sub.w     w9, w10, w9
    1e8e:	ed ff 37    	bra       0x1e6a <.L30>

00001e90 <.L7>:
    1e90:	18 09 90    	mov.w     [w8+18], w2
    1e92:	02 00 e0    	cp0.w     w2
    1e94:	0c 00 34    	bra       LE, 0x1eae <.L10>
    1e96:	c8 01 90    	mov.w     [w8+8], w3
    1e98:	e8 00 90    	mov.w     [w8+12], w1
    1e9a:	58 00 90    	mov.w     [w8+10], w0
    1e9c:	03 00 01    	call      w3
    1e9e:	50 04 98    	mov.w     w0, [w8+10]
    1ea0:	80 80 eb    	setm.w    w1
    1ea2:	00 00 e0    	cp0.w     w0
    1ea4:	59 00 32    	bra       Z, 0x1f58 <.L4>
    1ea6:	e8 08 90    	mov.w     [w8+28], w1
    1ea8:	18 08 90    	mov.w     [w8+18], w0
    1eaa:	00 80 40    	add.w     w1, w0, w0
    1eac:	60 0c 98    	mov.w     w0, [w8+28]

00001eae <.L10>:
    1eae:	a8 0c 90    	mov.w     [w8+20], w9

00001eb0 <.L31>:
    1eb0:	09 00 e0    	cp0.w     w9
    1eb2:	11 00 34    	bra       LE, 0x1ed6 <.L11>
    1eb4:	09 05 78    	mov.w     w9, w10
    1eb6:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1eb8:	01 00 36    	bra       LEU, 0x1ebc <.L12>
    1eba:	2a 00 20    	mov.w     #0x2, w10

00001ebc <.L12>:
    1ebc:	c8 01 90    	mov.w     [w8+8], w3
    1ebe:	0a 01 78    	mov.w     w10, w2
    1ec0:	ec 80 57    	sub.w     w15, #0xc, w1
    1ec2:	58 00 90    	mov.w     [w8+10], w0
    1ec4:	03 00 01    	call      w3
    1ec6:	50 04 98    	mov.w     w0, [w8+10]
    1ec8:	00 00 e0    	cp0.w     w0
    1eca:	45 00 32    	bra       Z, 0x1f56 <.L29>
    1ecc:	68 08 90    	mov.w     [w8+28], w0
    1ece:	0a 00 40    	add.w     w0, w10, w0
    1ed0:	60 0c 98    	mov.w     w0, [w8+28]
    1ed2:	8a 84 54    	sub.w     w9, w10, w9
    1ed4:	ed ff 37    	bra       0x1eb0 <.L31>

00001ed6 <.L11>:
    1ed6:	38 09 90    	mov.w     [w8+22], w2
    1ed8:	02 00 e0    	cp0.w     w2
    1eda:	0e 00 34    	bra       LE, 0x1ef8 <.L14>
    1edc:	e8 00 90    	mov.w     [w8+12], w1
    1ede:	18 08 90    	mov.w     [w8+18], w0
    1ee0:	80 80 40    	add.w     w1, w0, w1
    1ee2:	c8 01 90    	mov.w     [w8+8], w3
    1ee4:	58 00 90    	mov.w     [w8+10], w0
    1ee6:	03 00 01    	call      w3
    1ee8:	50 04 98    	mov.w     w0, [w8+10]
    1eea:	80 80 eb    	setm.w    w1
    1eec:	00 00 e0    	cp0.w     w0
    1eee:	34 00 32    	bra       Z, 0x1f58 <.L4>
    1ef0:	e8 08 90    	mov.w     [w8+28], w1
    1ef2:	38 08 90    	mov.w     [w8+22], w0
    1ef4:	00 80 40    	add.w     w1, w0, w0
    1ef6:	60 0c 98    	mov.w     w0, [w8+28]

00001ef8 <.L14>:
    1ef8:	c8 0c 90    	mov.w     [w8+24], w9

00001efa <.L32>:
    1efa:	09 00 e0    	cp0.w     w9
    1efc:	11 00 34    	bra       LE, 0x1f20 <.L15>
    1efe:	09 05 78    	mov.w     w9, w10
    1f00:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1f02:	01 00 36    	bra       LEU, 0x1f06 <.L16>
    1f04:	2a 00 20    	mov.w     #0x2, w10

00001f06 <.L16>:
    1f06:	c8 01 90    	mov.w     [w8+8], w3
    1f08:	0a 01 78    	mov.w     w10, w2
    1f0a:	ec 80 57    	sub.w     w15, #0xc, w1
    1f0c:	58 00 90    	mov.w     [w8+10], w0
    1f0e:	03 00 01    	call      w3
    1f10:	50 04 98    	mov.w     w0, [w8+10]
    1f12:	00 00 e0    	cp0.w     w0
    1f14:	20 00 32    	bra       Z, 0x1f56 <.L29>
    1f16:	68 08 90    	mov.w     [w8+28], w0
    1f18:	0a 00 40    	add.w     w0, w10, w0
    1f1a:	60 0c 98    	mov.w     w0, [w8+28]
    1f1c:	8a 84 54    	sub.w     w9, w10, w9
    1f1e:	ed ff 37    	bra       0x1efa <.L32>

00001f20 <.L15>:
    1f20:	08 10 90    	mov.w     [w8+32], w0
    1f22:	80 00 eb    	clr.w     w1
    1f24:	00 28 a3    	btst.z    w0, #0x2
    1f26:	18 00 32    	bra       Z, 0x1f58 <.L4>
    1f28:	0b 00 e0    	cp0.w     w11
    1f2a:	16 00 34    	bra       LE, 0x1f58 <.L4>
    1f2c:	8b 04 78    	mov.w     w11, w9

00001f2e <.L19>:
    1f2e:	09 05 78    	mov.w     w9, w10
    1f30:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1f32:	01 00 36    	bra       LEU, 0x1f36 <.L18>
    1f34:	2a 00 20    	mov.w     #0x2, w10

00001f36 <.L18>:
    1f36:	c8 01 90    	mov.w     [w8+8], w3
    1f38:	0a 01 78    	mov.w     w10, w2
    1f3a:	ee 80 57    	sub.w     w15, #0xe, w1
    1f3c:	58 00 90    	mov.w     [w8+10], w0
    1f3e:	03 00 01    	call      w3
    1f40:	50 04 98    	mov.w     w0, [w8+10]
    1f42:	00 00 e0    	cp0.w     w0
    1f44:	08 00 32    	bra       Z, 0x1f56 <.L29>
    1f46:	68 08 90    	mov.w     [w8+28], w0
    1f48:	0a 00 40    	add.w     w0, w10, w0
    1f4a:	60 0c 98    	mov.w     w0, [w8+28]
    1f4c:	8a 84 54    	sub.w     w9, w10, w9
    1f4e:	42 40 a9    	bclr.b    0x42, #0x2
    1f50:	ee ff 3c    	bra       GT, 0x1f2e <.L19>
    1f52:	80 00 eb    	clr.w     w1
    1f54:	01 00 37    	bra       0x1f58 <.L4>

00001f56 <.L29>:
    1f56:	80 80 eb    	setm.w    w1

00001f58 <.L4>:
    1f58:	01 00 78    	mov.w     w1, w0
    1f5a:	4f 06 78    	mov.w     [--w15], w12
    1f5c:	4f 05 be    	mov.d     [--w15], w10
    1f5e:	4f 04 be    	mov.d     [--w15], w8
    1f60:	00 80 fa    	ulnk      
    1f62:	00 00 06    	return    

00001f64 <__Vacopy>:
    1f64:	01 08 78    	mov.w     w1, [w0]
    1f66:	00 00 06    	return    

00001f68 <___divsi3>:
    1f68:	83 9f 68    	xor.w     w1, w3, [w15++]
    1f6a:	01 00 e0    	cp0.w     w1
    1f6c:	02 00 3d    	bra       GE, 0x1f72 <divtestb>
    1f6e:	60 00 10    	subr.w    w0, #0x0, w0
    1f70:	e0 80 18    	subbr.w   w1, #0x0, w1

00001f72 <divtestb>:
    1f72:	03 00 e0    	cp0.w     w3
    1f74:	02 00 3d    	bra       GE, 0x1f7a <calcquot>
    1f76:	60 01 11    	subr.w    w2, #0x0, w2
    1f78:	e0 81 19    	subbr.w   w3, #0x0, w3

00001f7a <calcquot>:
    1f7a:	a3 fa 07    	rcall     0x14c2 <___udivsi3>
    1f7c:	4f 00 e0    	cp0.w     [--w15]
    1f7e:	02 00 3b    	bra       NN, 0x1f84 <returnq>
    1f80:	60 00 10    	subr.w    w0, #0x0, w0
    1f82:	e0 80 18    	subbr.w   w1, #0x0, w1

00001f84 <returnq>:
    1f84:	00 00 06    	return    

00001f86 <___umodsi3>:
    1f86:	9d fa 07    	rcall     0x14c2 <___udivsi3>
    1f88:	04 00 be    	mov.d     w4, w0
    1f8a:	00 00 06    	return    

00001f8c <___mulp32eds3>:
    1f8c:	02 0a b9    	mul.su    w1, w2, w4
    1f8e:	00 1b b9    	mul.su    w3, w0, w6
    1f90:	02 00 b8    	mul.uu    w0, w2, w0
    1f92:	81 00 42    	add.w     w4, w1, w1
    1f94:	81 00 43    	add.w     w6, w1, w1
    1f96:	00 00 06    	return    

00001f98 <___PplusBdi>:
    1f98:	88 9f be    	mov.d     w8, [w15++]
    1f9a:	8a 9f be    	mov.d     w10, [w15++]
    1f9c:	30 04 42    	add.w     w4, [w0++], w8
    1f9e:	b0 84 4a    	addc.w    w5, [w0++], w9
    1fa0:	30 05 4b    	addc.w    w6, [w0++], w10
    1fa2:	90 85 4b    	addc.w    w7, [w0], w11
    1fa4:	60 00 b1    	sub.w     #0x6, w0
    1fa6:	08 98 be    	mov.d     w8, [w0++]
    1fa8:	0a 90 be    	mov.d     w10, [w0--]
    1faa:	04 40 e1    	cp.w      w8, w4
    1fac:	05 c8 e1    	cpb.w     w9, w5
    1fae:	06 d0 e1    	cpb.w     w10, w6
    1fb0:	07 d8 e1    	cpb.w     w11, w7
    1fb2:	02 00 31    	bra       C, 0x1fb8 <.L1>
    1fb4:	68 00 40    	add.w     w0, #0x8, w0
    1fb6:	10 08 e8    	inc.w     [w0], [w0]

00001fb8 <.L1>:
    1fb8:	4f 05 be    	mov.d     [--w15], w10
    1fba:	4f 04 be    	mov.d     [--w15], w8
    1fbc:	00 00 06    	return    

00001fbe <___PminusBdi>:
    1fbe:	88 9f be    	mov.d     w8, [w15++]
    1fc0:	8a 9f be    	mov.d     w10, [w15++]
    1fc2:	30 04 be    	mov.d     [w0++], w8
    1fc4:	20 05 be    	mov.d     [w0--], w10
    1fc6:	04 18 54    	sub.w     w8, w4, [w0++]
    1fc8:	05 98 5c    	subb.w    w9, w5, [w0++]
    1fca:	06 18 5d    	subb.w    w10, w6, [w0++]
    1fcc:	07 98 5d    	subb.w    w11, w7, [w0++]
    1fce:	11 00 20    	mov.w     #0x1, w1
    1fd0:	04 40 e1    	cp.w      w8, w4
    1fd2:	05 c8 e1    	cpb.w     w9, w5
    1fd4:	06 d0 e1    	cpb.w     w10, w6
    1fd6:	07 d8 e1    	cpb.w     w11, w7
    1fd8:	01 00 39    	bra       NC, 0x1fdc <.L4>
    1fda:	80 00 eb    	clr.w     w1

00001fdc <.L4>:
    1fdc:	10 88 10    	subr.w    w1, [w0], [w0]
    1fde:	4f 05 be    	mov.d     [--w15], w10
    1fe0:	4f 04 be    	mov.d     [--w15], w8
    1fe2:	00 00 06    	return    

00001fe4 <___udivmoddi3>:
    1fe4:	12 00 fa    	lnk       #0x12
    1fe6:	88 9f be    	mov.d     w8, [w15++]
    1fe8:	8a 9f be    	mov.d     w10, [w15++]
    1fea:	8c 9f be    	mov.d     w12, [w15++]
    1fec:	e0 b7 9f    	mov.w     w0, [w15-20]
    1fee:	f1 b7 9f    	mov.w     w1, [w15-18]
    1ff0:	82 bf 9f    	mov.w     w2, [w15-16]
    1ff2:	93 bf 9f    	mov.w     w3, [w15-14]
    1ff4:	06 05 be    	mov.d     w6, w10
    1ff6:	04 04 be    	mov.d     w4, w8
    1ff8:	00 00 eb    	clr.w     w0
    1ffa:	d0 b7 9f    	mov.w     w0, [w15-22]
    1ffc:	c0 b7 9f    	mov.w     w0, [w15-24]
    1ffe:	b0 b7 9f    	mov.w     w0, [w15-26]
    2000:	a0 b7 9f    	mov.w     w0, [w15-28]
    2002:	90 b7 9f    	mov.w     w0, [w15-30]
    2004:	00 06 eb    	clr.w     w12

00002006 <.L9>:
    2006:	5f b1 97    	mov.w     [w15-22], w2
    2008:	cf b0 97    	mov.w     [w15-24], w1
    200a:	82 01 41    	add.w     w2, w2, w3
    200c:	3f b0 97    	mov.w     [w15-26], w0
    200e:	02 00 e0    	cp0.w     w2
    2010:	04 00 3d    	bra       GE, 0x201a <.L6>
    2012:	37 00 07    	rcall     0x2082 <.LPA0>
    2014:	7e 80 57    	sub.w     w15, #0x1e, w0
    2016:	c0 ff 07    	rcall     0x1f98 <___PplusBdi>
    2018:	03 00 37    	bra       0x2020 <.L7>

0000201a <.L6>:
    201a:	33 00 07    	rcall     0x2082 <.LPA0>
    201c:	7e 80 57    	sub.w     w15, #0x1e, w0
    201e:	cf ff 07    	rcall     0x1fbe <___PminusBdi>

00002020 <.L7>:
    2020:	df b6 97    	mov.w     [w15-22], w13
    2022:	0d 00 e0    	cp0.w     w13
    2024:	0c 00 35    	bra       LT, 0x203e <.L8>
    2026:	6f b2 97    	mov.w     [w15-20], w4
    2028:	ff b2 97    	mov.w     [w15-18], w5
    202a:	0f bb 97    	mov.w     [w15-16], w6
    202c:	9f bb 97    	mov.w     [w15-14], w7
    202e:	10 00 20    	mov.w     #0x1, w0
    2030:	01 00 20    	mov.w     #0x0, w1
    2032:	60 11 b8    	mul.uu    w2, #0x0, w2
    2034:	00 02 72    	ior.w     w4, w0, w4
    2036:	81 82 72    	ior.w     w5, w1, w5
    2038:	02 03 73    	ior.w     w6, w2, w6
    203a:	83 83 73    	ior.w     w7, w3, w7
    203c:	1b 00 07    	rcall     0x2074 <L0>

0000203e <.L8>:
    203e:	0c 06 e8    	inc.w     w12, w12
    2040:	01 04 20    	mov.w     #0x40, w1
    2042:	81 0f 56    	sub.w     w12, w1, [w15]
    2044:	e0 ff 3a    	bra       NZ, 0x2006 <.L9>
    2046:	0d 00 e0    	cp0.w     w13
    2048:	04 00 3d    	bra       GE, 0x2052 <.L10>
    204a:	08 02 be    	mov.d     w8, w4
    204c:	0a 03 be    	mov.d     w10, w6
    204e:	7e 80 57    	sub.w     w15, #0x1e, w0
    2050:	a3 ff 07    	rcall     0x1f98 <___PplusBdi>

00002052 <.L10>:
    2052:	5f a8 97    	mov.w     [w15-38], w0
    2054:	00 00 e0    	cp0.w     w0
    2056:	05 00 3a    	bra       NZ, 0x2062 <.L11>
    2058:	1f b2 97    	mov.w     [w15-30], w4
    205a:	af b2 97    	mov.w     [w15-28], w5
    205c:	3f b3 97    	mov.w     [w15-26], w6
    205e:	cf b3 97    	mov.w     [w15-24], w7
    2060:	09 00 07    	rcall     0x2074 <L0>

00002062 <.L11>:
    2062:	6f b0 97    	mov.w     [w15-20], w0
    2064:	ff b0 97    	mov.w     [w15-18], w1
    2066:	0f b9 97    	mov.w     [w15-16], w2
    2068:	9f b9 97    	mov.w     [w15-14], w3
    206a:	4f 06 be    	mov.d     [--w15], w12
    206c:	4f 05 be    	mov.d     [--w15], w10
    206e:	4f 04 be    	mov.d     [--w15], w8
    2070:	00 80 fa    	ulnk      
    2072:	00 00 06    	return    

00002074 <L0>:
    2074:	01 00 07    	rcall     0x2078 <.LPA5>
    2076:	00 00 06    	return    

00002078 <.LPA5>:
    2078:	a4 b7 9f    	mov.w     w4, [w15-28]
    207a:	b5 b7 9f    	mov.w     w5, [w15-26]
    207c:	c6 b7 9f    	mov.w     w6, [w15-24]
    207e:	d7 b7 9f    	mov.w     w7, [w15-22]
    2080:	00 00 06    	return    

00002082 <.LPA0>:
    2082:	4f 09 de    	lsr.w     w1, #0xf, w2
    2084:	82 81 71    	ior.w     w3, w2, w3
    2086:	b3 b7 9f    	mov.w     w3, [w15-26]
    2088:	4f 01 de    	lsr.w     w0, #0xf, w2
    208a:	81 80 40    	add.w     w1, w1, w1
    208c:	82 80 70    	ior.w     w1, w2, w1
    208e:	a1 b7 9f    	mov.w     w1, [w15-28]
    2090:	8f b0 97    	mov.w     [w15-32], w1
    2092:	4f 09 de    	lsr.w     w1, #0xf, w2
    2094:	00 00 40    	add.w     w0, w0, w0
    2096:	02 00 70    	ior.w     w0, w2, w0
    2098:	90 b7 9f    	mov.w     w0, [w15-30]
    209a:	7f a8 97    	mov.w     [w15-34], w0
    209c:	4f 01 de    	lsr.w     w0, #0xf, w2
    209e:	81 80 40    	add.w     w1, w1, w1
    20a0:	82 80 70    	ior.w     w1, w2, w1
    20a2:	81 b7 9f    	mov.w     w1, [w15-32]
    20a4:	0d 00 07    	rcall     0x20c0 <.LPA4>
    20a6:	4f 3a de    	lsr.w     w7, #0xf, w4
    20a8:	00 00 40    	add.w     w0, w0, w0
    20aa:	04 00 70    	ior.w     w0, w4, w0
    20ac:	f0 af 9f    	mov.w     w0, [w15-34]
    20ae:	08 00 07    	rcall     0x20c0 <.LPA4>
    20b0:	04 02 42    	add.w     w4, w4, w4
    20b2:	85 82 4a    	addc.w    w5, w5, w5
    20b4:	06 03 4b    	addc.w    w6, w6, w6
    20b6:	87 83 4b    	addc.w    w7, w7, w7
    20b8:	df ff 07    	rcall     0x2078 <.LPA5>
    20ba:	08 02 be    	mov.d     w8, w4
    20bc:	0a 03 be    	mov.d     w10, w6
    20be:	00 00 06    	return    

000020c0 <.LPA4>:
    20c0:	2f b2 97    	mov.w     [w15-28], w4
    20c2:	bf b2 97    	mov.w     [w15-26], w5
    20c4:	4f b3 97    	mov.w     [w15-24], w6
    20c6:	df b3 97    	mov.w     [w15-22], w7
    20c8:	00 00 06    	return    

000020ca <___udivdi3>:
    20ca:	88 1f 78    	mov.w     w8, [w15++]
    20cc:	18 00 20    	mov.w     #0x1, w8
    20ce:	88 1f 78    	mov.w     w8, [w15++]
    20d0:	89 ff 07    	rcall     0x1fe4 <___udivmoddi3>
    20d2:	8f 87 e9    	dec2.w    w15, w15
    20d4:	4f 04 78    	mov.w     [--w15], w8
    20d6:	00 00 06    	return    

000020d8 <___umoddi3>:
    20d8:	80 1f eb    	clr.w     [w15++]
    20da:	84 ff 07    	rcall     0x1fe4 <___udivmoddi3>
    20dc:	8f 87 e9    	dec2.w    w15, w15
    20de:	00 00 06    	return    

000020e0 <___divdi3>:
    20e0:	88 9f be    	mov.d     w8, [w15++]
    20e2:	8a 9f be    	mov.d     w10, [w15++]
    20e4:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    20e6:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    20e8:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    20ea:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    20ec:	0c 00 3d    	bra       GE, 0x2106 <.L15>
    20ee:	60 44 b8    	mul.uu    w8, #0x0, w8
    20f0:	60 55 b8    	mul.uu    w10, #0x0, w10
    20f2:	00 00 54    	sub.w     w8, w0, w0
    20f4:	81 80 5c    	subb.w    w9, w1, w1
    20f6:	02 01 5d    	subb.w    w10, w2, w2
    20f8:	83 81 5d    	subb.w    w11, w3, w3
    20fa:	18 00 20    	mov.w     #0x1, w8
    20fc:	15 00 07    	rcall     0x2128 <L0>
    20fe:	08 00 3d    	bra       GE, 0x2110 <.L16>
    2100:	18 00 07    	rcall     0x2132 <.LPA1>
    2102:	00 04 eb    	clr.w     w8
    2104:	05 00 37    	bra       0x2110 <.L16>

00002106 <.L15>:
    2106:	00 04 eb    	clr.w     w8
    2108:	0f 00 07    	rcall     0x2128 <L0>
    210a:	02 00 3d    	bra       GE, 0x2110 <.L16>
    210c:	12 00 07    	rcall     0x2132 <.LPA1>
    210e:	18 00 20    	mov.w     #0x1, w8

00002110 <.L16>:
    2110:	dc ff 07    	rcall     0x20ca <___udivdi3>
    2112:	08 00 e0    	cp0.w     w8
    2114:	06 00 32    	bra       Z, 0x2122 <.L17>
    2116:	60 22 b8    	mul.uu    w4, #0x0, w4
    2118:	60 33 b8    	mul.uu    w6, #0x0, w6
    211a:	00 00 52    	sub.w     w4, w0, w0
    211c:	81 80 5a    	subb.w    w5, w1, w1
    211e:	02 01 5b    	subb.w    w6, w2, w2
    2120:	83 81 5b    	subb.w    w7, w3, w3

00002122 <.L17>:
    2122:	4f 05 be    	mov.d     [--w15], w10
    2124:	4f 04 be    	mov.d     [--w15], w8
    2126:	00 00 06    	return    

00002128 <L0>:
    2128:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    212a:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    212c:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    212e:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2130:	00 00 06    	return    

00002132 <.LPA1>:
    2132:	60 44 b8    	mul.uu    w8, #0x0, w8
    2134:	60 55 b8    	mul.uu    w10, #0x0, w10
    2136:	04 02 54    	sub.w     w8, w4, w4
    2138:	85 82 5c    	subb.w    w9, w5, w5
    213a:	06 03 5d    	subb.w    w10, w6, w6
    213c:	87 83 5d    	subb.w    w11, w7, w7
    213e:	00 00 06    	return    

00002140 <___moddi3>:
    2140:	88 9f be    	mov.d     w8, [w15++]
    2142:	8a 9f be    	mov.d     w10, [w15++]
    2144:	8c 1f 78    	mov.w     w12, [w15++]
    2146:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2148:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    214a:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    214c:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    214e:	0d 00 3d    	bra       GE, 0x216a <.L21>
    2150:	60 44 b8    	mul.uu    w8, #0x0, w8
    2152:	60 55 b8    	mul.uu    w10, #0x0, w10
    2154:	00 00 54    	sub.w     w8, w0, w0
    2156:	81 80 5c    	subb.w    w9, w1, w1
    2158:	02 01 5d    	subb.w    w10, w2, w2
    215a:	83 81 5d    	subb.w    w11, w3, w3
    215c:	1c 00 20    	mov.w     #0x1, w12
    215e:	08 20 e1    	cp.w      w4, w8
    2160:	09 a8 e1    	cpb.w     w5, w9
    2162:	0a b0 e1    	cpb.w     w6, w10
    2164:	0b b8 e1    	cpb.w     w7, w11
    2166:	0d 00 3d    	bra       GE, 0x2182 <.L22>
    2168:	08 00 37    	bra       0x217a <.L26>

0000216a <.L21>:
    216a:	00 06 eb    	clr.w     w12
    216c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    216e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2170:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2172:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2174:	06 00 3d    	bra       GE, 0x2182 <.L22>
    2176:	60 44 b8    	mul.uu    w8, #0x0, w8
    2178:	60 55 b8    	mul.uu    w10, #0x0, w10

0000217a <.L26>:
    217a:	04 02 54    	sub.w     w8, w4, w4
    217c:	85 82 5c    	subb.w    w9, w5, w5
    217e:	06 03 5d    	subb.w    w10, w6, w6
    2180:	87 83 5d    	subb.w    w11, w7, w7

00002182 <.L22>:
    2182:	aa ff 07    	rcall     0x20d8 <___umoddi3>
    2184:	0c 00 e0    	cp0.w     w12
    2186:	06 00 32    	bra       Z, 0x2194 <.L23>
    2188:	60 22 b8    	mul.uu    w4, #0x0, w4
    218a:	60 33 b8    	mul.uu    w6, #0x0, w6
    218c:	00 00 52    	sub.w     w4, w0, w0
    218e:	81 80 5a    	subb.w    w5, w1, w1
    2190:	02 01 5b    	subb.w    w6, w2, w2
    2192:	83 81 5b    	subb.w    w7, w3, w3

00002194 <.L23>:
    2194:	4f 06 78    	mov.w     [--w15], w12
    2196:	4f 05 be    	mov.d     [--w15], w10
    2198:	4f 04 be    	mov.d     [--w15], w8
    219a:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	9a 39 04    	goto      0x399a <__T1Interrupt>
    1026:	00 00 00 
    1028:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	c8 39 04    	goto      0x39c8 <__T2Interrupt>
    1032:	00 00 00 
    1034:	f6 39 04    	goto      0x39f6 <__T3Interrupt>
    1036:	00 00 00 
    1038:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	32 24 04    	goto      0x2432 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	04 24 04    	goto      0x2404 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	24 3a 04    	goto      0x3a24 <__T4Interrupt>
    1072:	00 00 00 
    1074:	52 3a 04    	goto      0x3a52 <__T5Interrupt>
    1076:	00 00 00 
    1078:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	8e 24 04    	goto      0x248e <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	60 24 04    	goto      0x2460 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	ea 24 04    	goto      0x24ea <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	bc 24 04    	goto      0x24bc <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	1a 39 04    	goto      0x391a <__USB1Interrupt>
    10ee:	00 00 00 
    10f0:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	46 25 04    	goto      0x2546 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	18 25 04    	goto      0x2518 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	5c 5b 04    	goto      0x5b5c <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a19c <.LC0-0x62>:
    a19c:	12 01       	.word 0x112
    a19e:	00 02       	.word 0x200
    a1a0:	00 00       	.word 0
    a1a2:	00 40       	.word 0x4000
    a1a4:	66 66       	.word 0x6666
    a1a6:	05 00       	.word 0x5
    a1a8:	00 00       	.word 0
    a1aa:	01 02       	.word 0x201
    a1ac:	00 01       	.word 0x100
    a1ae:	09 02       	.word 0x209
    a1b0:	12 00       	.word 0x12
    a1b2:	01 01       	.word 0x101
    a1b4:	00 a0       	.word 0xa000
    a1b6:	32 09       	.word 0x932
    a1b8:	04 00       	.word 0x4
    a1ba:	00 00       	.word 0
    a1bc:	ff 00       	.word 0xff
    a1be:	ff 00       	.word 0xff
    a1c0:	04 03       	.word 0x304
    a1c2:	09 04       	.word 0x409
    a1c4:	1a 03       	.word 0x31a
    a1c6:	4f 00       	.word 0x4f
    a1c8:	6c 00       	.word 0x6c
    a1ca:	69 00       	.word 0x69
    a1cc:	6e 00       	.word 0x6e
    a1ce:	20 00       	.word 0x20
    a1d0:	43 00       	.word 0x43
    a1d2:	6f 00       	.word 0x6f
    a1d4:	6c 00       	.word 0x6c
    a1d6:	6c 00       	.word 0x6c
    a1d8:	65 00       	.word 0x65
    a1da:	67 00       	.word 0x67
    a1dc:	65 00       	.word 0x65
    a1de:	20 03       	.word 0x320
    a1e0:	50 00       	.word 0x50
    a1e2:	49 00       	.word 0x49
    a1e4:	43 00       	.word 0x43
    a1e6:	32 00       	.word 0x32
    a1e8:	34 00       	.word 0x34
    a1ea:	46 00       	.word 0x46
    a1ec:	4a 00       	.word 0x4a
    a1ee:	31 00       	.word 0x31
    a1f0:	32 00       	.word 0x32
    a1f2:	38 00       	.word 0x38
    a1f4:	47 00       	.word 0x47
    a1f6:	42 00       	.word 0x42
    a1f8:	32 00       	.word 0x32
    a1fa:	30 00       	.word 0x30
    a1fc:	36 00       	.word 0x36

0000a1fe <.LC0>:
    a1fe:	25 30       	.word 0x3025
    a200:	32 78       	.word 0x7832
    a202:	25 30       	.word 0x3025
    a204:	32 78       	.word 0x7832
    a206:	25 30       	.word 0x3025
    a208:	32 78       	.word 0x7832
    a20a:	0d 00       	.word 0xd
Disassembly of section .text:

0000220c <___putc_nobuffer>:
_PIN TX2, RX2, RTS2, CTS2;

uint8_t HWTXBUF[1024], HWRXBUF[1024];

void __putc_nobuffer(_UART *self, uint8_t ch) {
    220c:	04 00 fa    	lnk       #0x4
    220e:	00 0f 78    	mov.w     w0, [w14]
    2210:	21 47 98    	mov.b     w1, [w14+2]

00002212 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    2212:	00 00 00    	nop       

00002214 <.L2>:
    2214:	1e 00 78    	mov.w     [w14], w0
    2216:	10 00 90    	mov.w     [w0+2], w0
    2218:	90 00 78    	mov.w     [w0], w1
    221a:	00 20 20    	mov.w     #0x200, w0
    221c:	00 80 60    	and.w     w1, w0, w0
    221e:	00 00 e0    	cp0.w     w0
    2220:	f9 ff 3a    	bra       NZ, 0x2214 <.L2>

00002222 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    2222:	1e 00 78    	mov.w     [w14], w0
    2224:	20 00 90    	mov.w     [w0+4], w0
    2226:	ae 40 90    	mov.b     [w14+2], w1
    2228:	81 80 fb    	ze        w1, w1
    222a:	01 08 78    	mov.w     w1, [w0]

0000222c <.LSM3>:
}
    222c:	00 80 fa    	ulnk      
    222e:	00 00 06    	return    

00002230 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    2230:	02 00 fa    	lnk       #0x2
    2232:	00 0f 78    	mov.w     w0, [w14]

00002234 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    2234:	00 00 00    	nop       

00002236 <.L4>:
    2236:	1e 00 78    	mov.w     [w14], w0
    2238:	10 00 90    	mov.w     [w0+2], w0
    223a:	10 00 78    	mov.w     [w0], w0
    223c:	61 00 60    	and.w     w0, #0x1, w0
    223e:	00 00 e0    	cp0.w     w0
    2240:	fa ff 32    	bra       Z, 0x2236 <.L4>

00002242 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    2242:	1e 00 78    	mov.w     [w14], w0
    2244:	30 00 90    	mov.w     [w0+6], w0
    2246:	10 00 78    	mov.w     [w0], w0
    2248:	00 40 78    	mov.b     w0, w0

0000224a <.LSM7>:
}
    224a:	00 80 fa    	ulnk      
    224c:	00 00 06    	return    

0000224e <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    224e:	04 00 fa    	lnk       #0x4
    2250:	00 0f 78    	mov.w     w0, [w14]
    2252:	21 47 98    	mov.b     w1, [w14+2]

00002254 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    2254:	00 00 00    	nop       

00002256 <.L6>:
    2256:	1e 00 78    	mov.w     [w14], w0
    2258:	d0 10 90    	mov.w     [w0+42], w1
    225a:	1e 00 78    	mov.w     [w14], w0
    225c:	20 10 90    	mov.w     [w0+36], w0
    225e:	80 8f 50    	sub.w     w1, w0, [w15]
    2260:	fa ff 32    	bra       Z, 0x2256 <.L6>

00002262 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    2262:	ff 3f fc    	disi      #0x3fff

00002264 <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    2264:	1e 00 78    	mov.w     [w14], w0
    2266:	90 10 90    	mov.w     [w0+34], w1
    2268:	1e 00 78    	mov.w     [w14], w0
    226a:	40 10 90    	mov.w     [w0+40], w0
    226c:	00 80 40    	add.w     w1, w0, w0
    226e:	ae 40 90    	mov.b     [w14+2], w1
    2270:	01 48 78    	mov.b     w1, [w0]

00002272 <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    2272:	1e 00 78    	mov.w     [w14], w0
    2274:	40 10 90    	mov.w     [w0+40], w0
    2276:	80 00 e8    	inc.w     w0, w1
    2278:	1e 00 78    	mov.w     [w14], w0
    227a:	20 10 90    	mov.w     [w0+36], w0
    227c:	00 01 78    	mov.w     w0, w2
    227e:	11 00 09    	repeat    #0x11
    2280:	82 80 d8    	div.uw    w1, w2
    2282:	80 00 fd    	exch      w0, w1
    2284:	80 00 78    	mov.w     w0, w1
    2286:	1e 00 78    	mov.w     [w14], w0
    2288:	41 10 98    	mov.w     w1, [w0+40]

0000228a <.LSM13>:
    self->TXbuffer.count++;
    228a:	1e 00 78    	mov.w     [w14], w0
    228c:	50 10 90    	mov.w     [w0+42], w0
    228e:	80 00 e8    	inc.w     w0, w1
    2290:	1e 00 78    	mov.w     [w14], w0
    2292:	51 10 98    	mov.w     w1, [w0+42]

00002294 <.LSM14>:
    enable_interrupts();
    2294:	52 20 ef    	clr.w     0x52

00002296 <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    2296:	1e 00 78    	mov.w     [w14], w0
    2298:	d0 10 90    	mov.w     [w0+42], w1
    229a:	1e 00 78    	mov.w     [w14], w0
    229c:	30 18 90    	mov.w     [w0+54], w0
    229e:	80 8f 50    	sub.w     w1, w0, [w15]
    22a0:	08 00 39    	bra       NC, 0x22b2 <.L5>

000022a2 <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    22a2:	1e 00 78    	mov.w     [w14], w0
    22a4:	10 00 90    	mov.w     [w0+2], w0
    22a6:	9e 00 78    	mov.w     [w14], w1
    22a8:	91 00 90    	mov.w     [w1+2], w1
    22aa:	11 01 78    	mov.w     [w1], w2
    22ac:	01 40 20    	mov.w     #0x400, w1
    22ae:	82 80 70    	ior.w     w1, w2, w1
    22b0:	01 08 78    	mov.w     w1, [w0]

000022b2 <.L5>:
                                                    // transmission
}
    22b2:	00 80 fa    	ulnk      
    22b4:	00 00 06    	return    

000022b6 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    22b6:	04 00 fa    	lnk       #0x4
    22b8:	10 07 98    	mov.w     w0, [w14+2]

000022ba <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    22ba:	1e 00 90    	mov.w     [w14+2], w0
    22bc:	50 00 90    	mov.w     [w0+10], w0
    22be:	9e 00 90    	mov.w     [w14+2], w1
    22c0:	d1 00 90    	mov.w     [w1+10], w1
    22c2:	11 01 78    	mov.w     [w1], w2
    22c4:	9e 00 90    	mov.w     [w14+2], w1
    22c6:	e1 48 90    	mov.b     [w1+14], w1
    22c8:	81 80 fb    	ze        w1, w1
    22ca:	13 00 20    	mov.w     #0x1, w3
    22cc:	81 18 dd    	sl.w      w3, w1, w1
    22ce:	81 80 ea    	com.w     w1, w1
    22d0:	81 00 61    	and.w     w2, w1, w1
    22d2:	01 08 78    	mov.w     w1, [w0]

000022d4 <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    22d4:	1e 00 90    	mov.w     [w14+2], w0
    22d6:	50 10 90    	mov.w     [w0+42], w0
    22d8:	00 00 e0    	cp0.w     w0
    22da:	27 00 3a    	bra       NZ, 0x232a <.L13>

000022dc <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    22dc:	1e 00 90    	mov.w     [w14+2], w0
    22de:	10 00 90    	mov.w     [w0+2], w0
    22e0:	9e 00 90    	mov.w     [w14+2], w1
    22e2:	91 00 90    	mov.w     [w1+2], w1
    22e4:	11 01 78    	mov.w     [w1], w2
    22e6:	f1 bf 2f    	mov.w     #0xfbff, w1
    22e8:	81 00 61    	and.w     w2, w1, w1
    22ea:	01 08 78    	mov.w     w1, [w0]

000022ec <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    22ec:	1f 00 37    	bra       0x232c <.L10>

000022ee <.L12>:
        disable_interrupts();
    22ee:	ff 3f fc    	disi      #0x3fff

000022f0 <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    22f0:	1e 00 90    	mov.w     [w14+2], w0
    22f2:	90 10 90    	mov.w     [w0+34], w1
    22f4:	1e 00 90    	mov.w     [w14+2], w0
    22f6:	30 10 90    	mov.w     [w0+38], w0
    22f8:	00 80 40    	add.w     w1, w0, w0
    22fa:	10 4f 78    	mov.b     [w0], [w14]

000022fc <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    22fc:	1e 00 90    	mov.w     [w14+2], w0
    22fe:	30 10 90    	mov.w     [w0+38], w0
    2300:	80 00 e8    	inc.w     w0, w1
    2302:	1e 00 90    	mov.w     [w14+2], w0
    2304:	20 10 90    	mov.w     [w0+36], w0
    2306:	00 01 78    	mov.w     w0, w2
    2308:	11 00 09    	repeat    #0x11
    230a:	82 80 d8    	div.uw    w1, w2
    230c:	80 00 fd    	exch      w0, w1
    230e:	80 00 78    	mov.w     w0, w1
    2310:	1e 00 90    	mov.w     [w14+2], w0
    2312:	31 10 98    	mov.w     w1, [w0+38]

00002314 <.LSM26>:
        self->TXbuffer.count--;
    2314:	1e 00 90    	mov.w     [w14+2], w0
    2316:	50 10 90    	mov.w     [w0+42], w0
    2318:	80 00 e9    	dec.w     w0, w1
    231a:	1e 00 90    	mov.w     [w14+2], w0
    231c:	51 10 98    	mov.w     w1, [w0+42]

0000231e <.LSM27>:
        enable_interrupts();
    231e:	52 20 ef    	clr.w     0x52

00002320 <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    2320:	1e 00 90    	mov.w     [w14+2], w0
    2322:	20 00 90    	mov.w     [w0+4], w0
    2324:	9e 80 fb    	ze        [w14], w1
    2326:	01 08 78    	mov.w     w1, [w0]
    2328:	01 00 37    	bra       0x232c <.L10>

0000232a <.L13>:
    232a:	00 00 00    	nop       

0000232c <.L10>:
    232c:	1e 00 90    	mov.w     [w14+2], w0
    232e:	10 00 90    	mov.w     [w0+2], w0
    2330:	90 00 78    	mov.w     [w0], w1
    2332:	00 20 20    	mov.w     #0x200, w0
    2334:	00 80 60    	and.w     w1, w0, w0
    2336:	00 00 e0    	cp0.w     w0
    2338:	04 00 3a    	bra       NZ, 0x2342 <.L8>
    233a:	1e 00 90    	mov.w     [w14+2], w0
    233c:	50 10 90    	mov.w     [w0+42], w0
    233e:	00 00 e0    	cp0.w     w0
    2340:	d6 ff 3a    	bra       NZ, 0x22ee <.L12>

00002342 <.L8>:
    }
}
    2342:	00 80 fa    	ulnk      
    2344:	00 00 06    	return    

00002346 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    2346:	04 00 fa    	lnk       #0x4
    2348:	10 07 98    	mov.w     w0, [w14+2]

0000234a <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    234a:	00 00 00    	nop       

0000234c <.L15>:
    234c:	1e 00 90    	mov.w     [w14+2], w0
    234e:	20 18 90    	mov.w     [w0+52], w0
    2350:	00 00 e0    	cp0.w     w0
    2352:	fc ff 32    	bra       Z, 0x234c <.L15>

00002354 <.LSM33>:
    disable_interrupts();
    2354:	ff 3f fc    	disi      #0x3fff

00002356 <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    2356:	1e 00 90    	mov.w     [w14+2], w0
    2358:	e0 10 90    	mov.w     [w0+44], w1
    235a:	1e 00 90    	mov.w     [w14+2], w0
    235c:	00 18 90    	mov.w     [w0+48], w0
    235e:	00 80 40    	add.w     w1, w0, w0
    2360:	10 4f 78    	mov.b     [w0], [w14]

00002362 <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    2362:	1e 00 90    	mov.w     [w14+2], w0
    2364:	00 18 90    	mov.w     [w0+48], w0
    2366:	80 00 e8    	inc.w     w0, w1
    2368:	1e 00 90    	mov.w     [w14+2], w0
    236a:	70 10 90    	mov.w     [w0+46], w0
    236c:	00 01 78    	mov.w     w0, w2
    236e:	11 00 09    	repeat    #0x11
    2370:	82 80 d8    	div.uw    w1, w2
    2372:	80 00 fd    	exch      w0, w1
    2374:	80 00 78    	mov.w     w0, w1
    2376:	1e 00 90    	mov.w     [w14+2], w0
    2378:	01 18 98    	mov.w     w1, [w0+48]

0000237a <.LSM36>:
    self->RXbuffer.count--;
    237a:	1e 00 90    	mov.w     [w14+2], w0
    237c:	20 18 90    	mov.w     [w0+52], w0
    237e:	80 00 e9    	dec.w     w0, w1
    2380:	1e 00 90    	mov.w     [w14+2], w0
    2382:	21 18 98    	mov.w     w1, [w0+52]

00002384 <.LSM37>:
    enable_interrupts();
    2384:	52 20 ef    	clr.w     0x52

00002386 <.LSM38>:
    return ch;
    2386:	1e 40 78    	mov.b     [w14], w0

00002388 <.LSM39>:
}
    2388:	00 80 fa    	ulnk      
    238a:	00 00 06    	return    

0000238c <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    238c:	02 00 fa    	lnk       #0x2
    238e:	00 0f 78    	mov.w     w0, [w14]

00002390 <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2390:	1e 00 78    	mov.w     [w14], w0
    2392:	50 00 90    	mov.w     [w0+10], w0
    2394:	9e 00 78    	mov.w     [w14], w1
    2396:	d1 00 90    	mov.w     [w1+10], w1
    2398:	11 01 78    	mov.w     [w1], w2
    239a:	9e 00 78    	mov.w     [w14], w1
    239c:	f1 48 90    	mov.b     [w1+15], w1
    239e:	81 80 fb    	ze        w1, w1
    23a0:	13 00 20    	mov.w     #0x1, w3
    23a2:	81 18 dd    	sl.w      w3, w1, w1
    23a4:	81 80 ea    	com.w     w1, w1
    23a6:	81 00 61    	and.w     w2, w1, w1
    23a8:	01 08 78    	mov.w     w1, [w0]

000023aa <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    23aa:	1d 00 37    	bra       0x23e6 <.L17>

000023ac <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    23ac:	ff 3f fc    	disi      #0x3fff

000023ae <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    23ae:	1e 00 78    	mov.w     [w14], w0
    23b0:	e0 10 90    	mov.w     [w0+44], w1
    23b2:	1e 00 78    	mov.w     [w14], w0
    23b4:	10 18 90    	mov.w     [w0+50], w0
    23b6:	00 80 40    	add.w     w1, w0, w0
    23b8:	9e 00 78    	mov.w     [w14], w1
    23ba:	b1 00 90    	mov.w     [w1+6], w1
    23bc:	91 00 78    	mov.w     [w1], w1
    23be:	81 40 78    	mov.b     w1, w1
    23c0:	01 48 78    	mov.b     w1, [w0]

000023c2 <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    23c2:	1e 00 78    	mov.w     [w14], w0
    23c4:	10 18 90    	mov.w     [w0+50], w0
    23c6:	80 00 e8    	inc.w     w0, w1
    23c8:	1e 00 78    	mov.w     [w14], w0
    23ca:	70 10 90    	mov.w     [w0+46], w0
    23cc:	00 01 78    	mov.w     w0, w2
    23ce:	11 00 09    	repeat    #0x11
    23d0:	82 80 d8    	div.uw    w1, w2
    23d2:	80 00 fd    	exch      w0, w1
    23d4:	80 00 78    	mov.w     w0, w1
    23d6:	1e 00 78    	mov.w     [w14], w0
    23d8:	11 18 98    	mov.w     w1, [w0+50]

000023da <.LSM46>:
        self->RXbuffer.count++;
    23da:	1e 00 78    	mov.w     [w14], w0
    23dc:	20 18 90    	mov.w     [w0+52], w0
    23de:	80 00 e8    	inc.w     w0, w1
    23e0:	1e 00 78    	mov.w     [w14], w0
    23e2:	21 18 98    	mov.w     w1, [w0+52]

000023e4 <.LSM47>:
        enable_interrupts();
    23e4:	52 20 ef    	clr.w     0x52

000023e6 <.L17>:
    23e6:	1e 00 78    	mov.w     [w14], w0
    23e8:	10 00 90    	mov.w     [w0+2], w0
    23ea:	10 00 78    	mov.w     [w0], w0
    23ec:	61 00 60    	and.w     w0, #0x1, w0
    23ee:	00 40 78    	mov.b     w0, w0
    23f0:	00 04 e0    	cp0.b     w0
    23f2:	06 00 32    	bra       Z, 0x2400 <.L16>

000023f4 <.LSM49>:
    23f4:	1e 00 78    	mov.w     [w14], w0
    23f6:	a0 18 90    	mov.w     [w0+52], w1
    23f8:	1e 00 78    	mov.w     [w14], w0
    23fa:	70 10 90    	mov.w     [w0+46], w0

000023fc <.LSM50>:
    23fc:	80 8f 50    	sub.w     w1, w0, [w15]
    23fe:	d6 ff 3a    	bra       NZ, 0x23ac <.L19>

00002400 <.L16>:
    }
}
    2400:	00 80 fa    	ulnk      
    2402:	00 00 06    	return    

00002404 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    2404:	36 00 f8    	push      0x36
    2406:	80 9f be    	mov.d     w0, [w15++]
    2408:	82 9f be    	mov.d     w2, [w15++]
    240a:	84 9f be    	mov.d     w4, [w15++]
    240c:	86 9f be    	mov.d     w6, [w15++]
    240e:	32 00 f8    	push      0x32
    2410:	34 00 f8    	push      0x34
    2412:	10 00 20    	mov.w     #0x1, w0
    2414:	a0 01 88    	mov.w     w0, 0x34
    2416:	00 20 20    	mov.w     #0x200, w0
    2418:	90 01 88    	mov.w     w0, 0x32
    241a:	00 00 fa    	lnk       #0x0

0000241c <.LSM53>:
    __serviceTxInterrupt(&uart1);
    241c:	40 87 20    	mov.w     #0x874, w0
    241e:	4b ff 07    	rcall     0x22b6 <___serviceTxInterrupt>

00002420 <.LSM54>:
}
    2420:	00 80 fa    	ulnk      
    2422:	34 00 f9    	pop       0x34
    2424:	32 00 f9    	pop       0x32
    2426:	4f 03 be    	mov.d     [--w15], w6
    2428:	4f 02 be    	mov.d     [--w15], w4
    242a:	4f 01 be    	mov.d     [--w15], w2
    242c:	4f 00 be    	mov.d     [--w15], w0
    242e:	36 00 f9    	pop       0x36
    2430:	00 40 06    	retfie    

00002432 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    2432:	36 00 f8    	push      0x36
    2434:	80 9f be    	mov.d     w0, [w15++]
    2436:	82 9f be    	mov.d     w2, [w15++]
    2438:	84 9f be    	mov.d     w4, [w15++]
    243a:	86 9f be    	mov.d     w6, [w15++]
    243c:	32 00 f8    	push      0x32
    243e:	34 00 f8    	push      0x34
    2440:	10 00 20    	mov.w     #0x1, w0
    2442:	a0 01 88    	mov.w     w0, 0x34
    2444:	00 20 20    	mov.w     #0x200, w0
    2446:	90 01 88    	mov.w     w0, 0x32
    2448:	00 00 fa    	lnk       #0x0

0000244a <.LSM56>:
    __serviceRxInterrupt(&uart1);
    244a:	40 87 20    	mov.w     #0x874, w0
    244c:	9f ff 07    	rcall     0x238c <___serviceRxInterrupt>

0000244e <.LSM57>:
}
    244e:	00 80 fa    	ulnk      
    2450:	34 00 f9    	pop       0x34
    2452:	32 00 f9    	pop       0x32
    2454:	4f 03 be    	mov.d     [--w15], w6
    2456:	4f 02 be    	mov.d     [--w15], w4
    2458:	4f 01 be    	mov.d     [--w15], w2
    245a:	4f 00 be    	mov.d     [--w15], w0
    245c:	36 00 f9    	pop       0x36
    245e:	00 40 06    	retfie    

00002460 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    2460:	36 00 f8    	push      0x36
    2462:	80 9f be    	mov.d     w0, [w15++]
    2464:	82 9f be    	mov.d     w2, [w15++]
    2466:	84 9f be    	mov.d     w4, [w15++]
    2468:	86 9f be    	mov.d     w6, [w15++]
    246a:	32 00 f8    	push      0x32
    246c:	34 00 f8    	push      0x34
    246e:	10 00 20    	mov.w     #0x1, w0
    2470:	a0 01 88    	mov.w     w0, 0x34
    2472:	00 20 20    	mov.w     #0x200, w0
    2474:	90 01 88    	mov.w     w0, 0x32
    2476:	00 00 fa    	lnk       #0x0

00002478 <.LSM59>:
    __serviceTxInterrupt(&uart2);
    2478:	00 8b 20    	mov.w     #0x8b0, w0
    247a:	1d ff 07    	rcall     0x22b6 <___serviceTxInterrupt>

0000247c <.LSM60>:
}
    247c:	00 80 fa    	ulnk      
    247e:	34 00 f9    	pop       0x34
    2480:	32 00 f9    	pop       0x32
    2482:	4f 03 be    	mov.d     [--w15], w6
    2484:	4f 02 be    	mov.d     [--w15], w4
    2486:	4f 01 be    	mov.d     [--w15], w2
    2488:	4f 00 be    	mov.d     [--w15], w0
    248a:	36 00 f9    	pop       0x36
    248c:	00 40 06    	retfie    

0000248e <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    248e:	36 00 f8    	push      0x36
    2490:	80 9f be    	mov.d     w0, [w15++]
    2492:	82 9f be    	mov.d     w2, [w15++]
    2494:	84 9f be    	mov.d     w4, [w15++]
    2496:	86 9f be    	mov.d     w6, [w15++]
    2498:	32 00 f8    	push      0x32
    249a:	34 00 f8    	push      0x34
    249c:	10 00 20    	mov.w     #0x1, w0
    249e:	a0 01 88    	mov.w     w0, 0x34
    24a0:	00 20 20    	mov.w     #0x200, w0
    24a2:	90 01 88    	mov.w     w0, 0x32
    24a4:	00 00 fa    	lnk       #0x0

000024a6 <.LSM62>:
    __serviceRxInterrupt(&uart2);
    24a6:	00 8b 20    	mov.w     #0x8b0, w0
    24a8:	71 ff 07    	rcall     0x238c <___serviceRxInterrupt>

000024aa <.LSM63>:
}
    24aa:	00 80 fa    	ulnk      
    24ac:	34 00 f9    	pop       0x34
    24ae:	32 00 f9    	pop       0x32
    24b0:	4f 03 be    	mov.d     [--w15], w6
    24b2:	4f 02 be    	mov.d     [--w15], w4
    24b4:	4f 01 be    	mov.d     [--w15], w2
    24b6:	4f 00 be    	mov.d     [--w15], w0
    24b8:	36 00 f9    	pop       0x36
    24ba:	00 40 06    	retfie    

000024bc <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    24bc:	36 00 f8    	push      0x36
    24be:	80 9f be    	mov.d     w0, [w15++]
    24c0:	82 9f be    	mov.d     w2, [w15++]
    24c2:	84 9f be    	mov.d     w4, [w15++]
    24c4:	86 9f be    	mov.d     w6, [w15++]
    24c6:	32 00 f8    	push      0x32
    24c8:	34 00 f8    	push      0x34
    24ca:	10 00 20    	mov.w     #0x1, w0
    24cc:	a0 01 88    	mov.w     w0, 0x34
    24ce:	00 20 20    	mov.w     #0x200, w0
    24d0:	90 01 88    	mov.w     w0, 0x32
    24d2:	00 00 fa    	lnk       #0x0

000024d4 <.LSM65>:
    __serviceTxInterrupt(&uart3);
    24d4:	c0 8e 20    	mov.w     #0x8ec, w0
    24d6:	ef fe 07    	rcall     0x22b6 <___serviceTxInterrupt>

000024d8 <.LSM66>:
}
    24d8:	00 80 fa    	ulnk      
    24da:	34 00 f9    	pop       0x34
    24dc:	32 00 f9    	pop       0x32
    24de:	4f 03 be    	mov.d     [--w15], w6
    24e0:	4f 02 be    	mov.d     [--w15], w4
    24e2:	4f 01 be    	mov.d     [--w15], w2
    24e4:	4f 00 be    	mov.d     [--w15], w0
    24e6:	36 00 f9    	pop       0x36
    24e8:	00 40 06    	retfie    

000024ea <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    24ea:	36 00 f8    	push      0x36
    24ec:	80 9f be    	mov.d     w0, [w15++]
    24ee:	82 9f be    	mov.d     w2, [w15++]
    24f0:	84 9f be    	mov.d     w4, [w15++]
    24f2:	86 9f be    	mov.d     w6, [w15++]
    24f4:	32 00 f8    	push      0x32
    24f6:	34 00 f8    	push      0x34
    24f8:	10 00 20    	mov.w     #0x1, w0
    24fa:	a0 01 88    	mov.w     w0, 0x34
    24fc:	00 20 20    	mov.w     #0x200, w0
    24fe:	90 01 88    	mov.w     w0, 0x32
    2500:	00 00 fa    	lnk       #0x0

00002502 <.LSM68>:
    __serviceRxInterrupt(&uart3);
    2502:	c0 8e 20    	mov.w     #0x8ec, w0
    2504:	43 ff 07    	rcall     0x238c <___serviceRxInterrupt>

00002506 <.LSM69>:
}
    2506:	00 80 fa    	ulnk      
    2508:	34 00 f9    	pop       0x34
    250a:	32 00 f9    	pop       0x32
    250c:	4f 03 be    	mov.d     [--w15], w6
    250e:	4f 02 be    	mov.d     [--w15], w4
    2510:	4f 01 be    	mov.d     [--w15], w2
    2512:	4f 00 be    	mov.d     [--w15], w0
    2514:	36 00 f9    	pop       0x36
    2516:	00 40 06    	retfie    

00002518 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    2518:	36 00 f8    	push      0x36
    251a:	80 9f be    	mov.d     w0, [w15++]
    251c:	82 9f be    	mov.d     w2, [w15++]
    251e:	84 9f be    	mov.d     w4, [w15++]
    2520:	86 9f be    	mov.d     w6, [w15++]
    2522:	32 00 f8    	push      0x32
    2524:	34 00 f8    	push      0x34
    2526:	10 00 20    	mov.w     #0x1, w0
    2528:	a0 01 88    	mov.w     w0, 0x34
    252a:	00 20 20    	mov.w     #0x200, w0
    252c:	90 01 88    	mov.w     w0, 0x32
    252e:	00 00 fa    	lnk       #0x0

00002530 <.LSM71>:
    __serviceTxInterrupt(&uart4);
    2530:	80 92 20    	mov.w     #0x928, w0
    2532:	c1 fe 07    	rcall     0x22b6 <___serviceTxInterrupt>

00002534 <.LSM72>:
}
    2534:	00 80 fa    	ulnk      
    2536:	34 00 f9    	pop       0x34
    2538:	32 00 f9    	pop       0x32
    253a:	4f 03 be    	mov.d     [--w15], w6
    253c:	4f 02 be    	mov.d     [--w15], w4
    253e:	4f 01 be    	mov.d     [--w15], w2
    2540:	4f 00 be    	mov.d     [--w15], w0
    2542:	36 00 f9    	pop       0x36
    2544:	00 40 06    	retfie    

00002546 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    2546:	36 00 f8    	push      0x36
    2548:	80 9f be    	mov.d     w0, [w15++]
    254a:	82 9f be    	mov.d     w2, [w15++]
    254c:	84 9f be    	mov.d     w4, [w15++]
    254e:	86 9f be    	mov.d     w6, [w15++]
    2550:	32 00 f8    	push      0x32
    2552:	34 00 f8    	push      0x34
    2554:	10 00 20    	mov.w     #0x1, w0
    2556:	a0 01 88    	mov.w     w0, 0x34
    2558:	00 20 20    	mov.w     #0x200, w0
    255a:	90 01 88    	mov.w     w0, 0x32
    255c:	00 00 fa    	lnk       #0x0

0000255e <.LSM74>:
    __serviceRxInterrupt(&uart4);
    255e:	80 92 20    	mov.w     #0x928, w0
    2560:	15 ff 07    	rcall     0x238c <___serviceRxInterrupt>

00002562 <.LSM75>:
}
    2562:	00 80 fa    	ulnk      
    2564:	34 00 f9    	pop       0x34
    2566:	32 00 f9    	pop       0x32
    2568:	4f 03 be    	mov.d     [--w15], w6
    256a:	4f 02 be    	mov.d     [--w15], w4
    256c:	4f 01 be    	mov.d     [--w15], w2
    256e:	4f 00 be    	mov.d     [--w15], w0
    2570:	36 00 f9    	pop       0x36
    2572:	00 40 06    	retfie    

00002574 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2574:	08 00 fa    	lnk       #0x8
    2576:	10 07 98    	mov.w     w0, [w14+2]
    2578:	21 07 98    	mov.w     w1, [w14+4]
    257a:	32 07 98    	mov.w     w2, [w14+6]

0000257c <.LSM77>:
    int16_t i;

    switch (handle) {
    257c:	1e 00 90    	mov.w     [w14+2], w0
    257e:	00 00 e0    	cp0.w     w0
    2580:	25 00 35    	bra       LT, 0x25cc <.L37>
    2582:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2584:	03 00 34    	bra       LE, 0x258c <.L30>
    2586:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2588:	11 00 32    	bra       Z, 0x25ac <.L31>

0000258a <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    258a:	21 00 37    	bra       0x25ce <.L34>

0000258c <.L30>:
    258c:	00 00 eb    	clr.w     w0
    258e:	00 0f 78    	mov.w     w0, [w14]
    2590:	08 00 37    	bra       0x25a2 <.L32>

00002592 <.L33>:
    2592:	2e 00 90    	mov.w     [w14+4], w0
    2594:	90 40 78    	mov.b     [w0], w1
    2596:	2e 00 90    	mov.w     [w14+4], w0
    2598:	00 00 e8    	inc.w     w0, w0
    259a:	20 07 98    	mov.w     w0, [w14+4]
    259c:	80 43 80    	mov.w     0x870, w0
    259e:	7b 04 07    	rcall     0x2e96 <_uart_putc>

000025a0 <.LSM81>:
    25a0:	1e 0f e8    	inc.w     [w14], [w14]

000025a2 <.L32>:
    25a2:	9e 00 78    	mov.w     [w14], w1
    25a4:	3e 00 90    	mov.w     [w14+6], w0
    25a6:	80 8f 50    	sub.w     w1, w0, [w15]
    25a8:	f4 ff 39    	bra       NC, 0x2592 <.L33>

000025aa <.LSM82>:
    25aa:	11 00 37    	bra       0x25ce <.L34>

000025ac <.L31>:
    25ac:	00 00 eb    	clr.w     w0
    25ae:	00 0f 78    	mov.w     w0, [w14]
    25b0:	08 00 37    	bra       0x25c2 <.L35>

000025b2 <.L36>:
    25b2:	2e 00 90    	mov.w     [w14+4], w0
    25b4:	90 40 78    	mov.b     [w0], w1
    25b6:	2e 00 90    	mov.w     [w14+4], w0
    25b8:	00 00 e8    	inc.w     w0, w0
    25ba:	20 07 98    	mov.w     w0, [w14+4]
    25bc:	90 43 80    	mov.w     0x872, w0
    25be:	6b 04 07    	rcall     0x2e96 <_uart_putc>

000025c0 <.LSM85>:
    25c0:	1e 0f e8    	inc.w     [w14], [w14]

000025c2 <.L35>:
    25c2:	9e 00 78    	mov.w     [w14], w1
    25c4:	3e 00 90    	mov.w     [w14+6], w0
    25c6:	80 8f 50    	sub.w     w1, w0, [w15]
    25c8:	f4 ff 39    	bra       NC, 0x25b2 <.L36>

000025ca <.LSM86>:
    25ca:	01 00 37    	bra       0x25ce <.L34>

000025cc <.L37>:
    25cc:	00 00 00    	nop       

000025ce <.L34>:
    }
    return len;
    25ce:	3e 00 90    	mov.w     [w14+6], w0

000025d0 <.LSM89>:
}
    25d0:	00 80 fa    	ulnk      
    25d2:	00 00 06    	return    

000025d4 <_init_uart>:

void init_uart(void) {
    25d4:	00 00 fa    	lnk       #0x0

000025d6 <.LSM91>:
    init_pin();
    25d6:	7f 0c 07    	rcall     0x3ed6 <_init_pin>

000025d8 <.LSM92>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    25d8:	40 6d 20    	mov.w     #0x6d4, w0
    25da:	80 1f 78    	mov.w     w0, [w15++]
    25dc:	57 01 20    	mov.w     #0x15, w7
    25de:	86 c0 b3    	mov.b     #0x8, w6
    25e0:	80 82 eb    	setm.w    w5
    25e2:	64 c0 b3    	mov.b     #0x6, w4
    25e4:	80 01 eb    	clr.w     w3
    25e6:	02 2f 20    	mov.w     #0x2f0, w2
    25e8:	21 2f 20    	mov.w     #0x2f2, w1
    25ea:	40 96 20    	mov.w     #0x964, w0
    25ec:	88 0d 07    	rcall     0x40fe <_pin_init>
    25ee:	8f 87 e9    	dec2.w    w15, w15

000025f0 <.LSM93>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    25f0:	a0 6d 20    	mov.w     #0x6da, w0
    25f2:	80 1f 78    	mov.w     w0, [w15++]
    25f4:	a7 01 20    	mov.w     #0x1a, w7
    25f6:	00 43 eb    	clr.b     w6
    25f8:	80 82 eb    	setm.w    w5
    25fa:	74 c0 b3    	mov.b     #0x7, w4
    25fc:	80 01 eb    	clr.w     w3
    25fe:	02 2f 20    	mov.w     #0x2f0, w2
    2600:	21 2f 20    	mov.w     #0x2f2, w1
    2602:	a0 97 20    	mov.w     #0x97a, w0
    2604:	7c 0d 07    	rcall     0x40fe <_pin_init>
    2606:	8f 87 e9    	dec2.w    w15, w15

00002608 <.LSM94>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    pin_init(&TX2, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2608:	60 6c 20    	mov.w     #0x6c6, w0
    260a:	80 1f 78    	mov.w     w0, [w15++]
    260c:	77 00 20    	mov.w     #0x7, w7
    260e:	86 c0 b3    	mov.b     #0x8, w6
    2610:	75 00 20    	mov.w     #0x7, w5
    2612:	74 c0 b3    	mov.b     #0x7, w4
    2614:	23 4e 20    	mov.w     #0x4e2, w3
    2616:	82 2c 20    	mov.w     #0x2c8, w2
    2618:	a1 2c 20    	mov.w     #0x2ca, w1
    261a:	00 99 20    	mov.w     #0x990, w0
    261c:	70 0d 07    	rcall     0x40fe <_pin_init>
    261e:	8f 87 e9    	dec2.w    w15, w15

00002620 <.LSM95>:
             (uint16_t *)&ANSB, 7, 7, 8, 7, (uint16_t *)&RPOR3);
    pin_init(&RX2, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2620:	60 6c 20    	mov.w     #0x6c6, w0
    2622:	80 1f 78    	mov.w     w0, [w15++]
    2624:	67 00 20    	mov.w     #0x6, w7
    2626:	00 43 eb    	clr.b     w6
    2628:	65 00 20    	mov.w     #0x6, w5
    262a:	64 c0 b3    	mov.b     #0x6, w4
    262c:	23 4e 20    	mov.w     #0x4e2, w3
    262e:	82 2c 20    	mov.w     #0x2c8, w2
    2630:	a1 2c 20    	mov.w     #0x2ca, w1
    2632:	60 9a 20    	mov.w     #0x9a6, w0
    2634:	64 0d 07    	rcall     0x40fe <_pin_init>
    2636:	8f 87 e9    	dec2.w    w15, w15

00002638 <.LSM96>:
             (uint16_t *)&ANSB, 6, 6, 0, 6, (uint16_t *)&RPOR3);
    pin_init(&RTS2, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2638:	a0 6d 20    	mov.w     #0x6da, w0
    263a:	80 1f 78    	mov.w     w0, [w15++]
    263c:	b7 01 20    	mov.w     #0x1b, w7
    263e:	86 c0 b3    	mov.b     #0x8, w6
    2640:	80 82 eb    	setm.w    w5
    2642:	94 c0 b3    	mov.b     #0x9, w4
    2644:	80 01 eb    	clr.w     w3
    2646:	02 2f 20    	mov.w     #0x2f0, w2
    2648:	21 2f 20    	mov.w     #0x2f2, w1
    264a:	c0 9b 20    	mov.w     #0x9bc, w0
    264c:	58 0d 07    	rcall     0x40fe <_pin_init>
    264e:	8f 87 e9    	dec2.w    w15, w15

00002650 <.LSM97>:
             (uint16_t *)NULL, 9, -1, 8, 27, (uint16_t *)&RPOR13);
    pin_init(&CTS2, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2650:	20 6d 20    	mov.w     #0x6d2, w0
    2652:	80 1f 78    	mov.w     w0, [w15++]
    2654:	37 01 20    	mov.w     #0x13, w7
    2656:	86 c0 b3    	mov.b     #0x8, w6
    2658:	80 82 eb    	setm.w    w5
    265a:	84 c0 b3    	mov.b     #0x8, w4
    265c:	80 01 eb    	clr.w     w3
    265e:	02 2f 20    	mov.w     #0x2f0, w2
    2660:	21 2f 20    	mov.w     #0x2f2, w1
    2662:	20 9d 20    	mov.w     #0x9d2, w0
    2664:	4c 0d 07    	rcall     0x40fe <_pin_init>
    2666:	8f 87 e9    	dec2.w    w15, w15

00002668 <.LSM98>:
             (uint16_t *)NULL, 8, -1, 8, 19, (uint16_t *)&RPOR9);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    2668:	40 00 20    	mov.w     #0x4, w0
    266a:	80 1f 78    	mov.w     w0, [w15++]
    266c:	30 00 20    	mov.w     #0x3, w0
    266e:	80 1f 78    	mov.w     w0, [w15++]
    2670:	80 c0 b3    	mov.b     #0x8, w0
    2672:	80 1f 78    	mov.w     w0, [w15++]
    2674:	00 40 eb    	clr.b     w0
    2676:	80 1f 78    	mov.w     w0, [w15++]
    2678:	40 6a 20    	mov.w     #0x6a4, w0
    267a:	80 1f 78    	mov.w     w0, [w15++]
    267c:	40 6a 20    	mov.w     #0x6a4, w0
    267e:	80 1f 78    	mov.w     w0, [w15++]
    2680:	b0 c0 b3    	mov.b     #0xb, w0
    2682:	80 1f 78    	mov.w     w0, [w15++]
    2684:	c0 c0 b3    	mov.b     #0xc, w0
    2686:	80 1f 78    	mov.w     w0, [w15++]
    2688:	47 09 20    	mov.w     #0x94, w7
    268a:	46 08 20    	mov.w     #0x84, w6
    268c:	85 22 20    	mov.w     #0x228, w5
    268e:	64 22 20    	mov.w     #0x226, w4
    2690:	43 22 20    	mov.w     #0x224, w3
    2692:	22 22 20    	mov.w     #0x222, w2
    2694:	01 22 20    	mov.w     #0x220, w1
    2696:	40 87 20    	mov.w     #0x874, w0
    2698:	6b 00 07    	rcall     0x2770 <_uart_init>
    269a:	f0 87 57    	sub.w     w15, #0x10, w15

0000269c <.LSM99>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    269c:	60 00 20    	mov.w     #0x6, w0
    269e:	80 1f 78    	mov.w     w0, [w15++]
    26a0:	50 00 20    	mov.w     #0x5, w0
    26a2:	80 1f 78    	mov.w     w0, [w15++]
    26a4:	80 c0 b3    	mov.b     #0x8, w0
    26a6:	80 1f 78    	mov.w     w0, [w15++]
    26a8:	00 40 eb    	clr.b     w0
    26aa:	80 1f 78    	mov.w     w0, [w15++]
    26ac:	60 6a 20    	mov.w     #0x6a6, w0
    26ae:	80 1f 78    	mov.w     w0, [w15++]
    26b0:	60 6a 20    	mov.w     #0x6a6, w0
    26b2:	80 1f 78    	mov.w     w0, [w15++]
    26b4:	e0 c0 b3    	mov.b     #0xe, w0
    26b6:	80 1f 78    	mov.w     w0, [w15++]
    26b8:	f0 c0 b3    	mov.b     #0xf, w0
    26ba:	80 1f 78    	mov.w     w0, [w15++]
    26bc:	67 09 20    	mov.w     #0x96, w7
    26be:	66 08 20    	mov.w     #0x86, w6
    26c0:	85 23 20    	mov.w     #0x238, w5
    26c2:	64 23 20    	mov.w     #0x236, w4
    26c4:	43 23 20    	mov.w     #0x234, w3
    26c6:	22 23 20    	mov.w     #0x232, w2
    26c8:	01 23 20    	mov.w     #0x230, w1
    26ca:	00 8b 20    	mov.w     #0x8b0, w0
    26cc:	51 00 07    	rcall     0x2770 <_uart_init>
    26ce:	f0 87 57    	sub.w     w15, #0x10, w15

000026d0 <.LSM100>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    26d0:	d0 01 20    	mov.w     #0x1d, w0
    26d2:	80 1f 78    	mov.w     w0, [w15++]
    26d4:	c0 01 20    	mov.w     #0x1c, w0
    26d6:	80 1f 78    	mov.w     w0, [w15++]
    26d8:	80 c0 b3    	mov.b     #0x8, w0
    26da:	80 1f 78    	mov.w     w0, [w15++]
    26dc:	80 c0 b3    	mov.b     #0x8, w0
    26de:	80 1f 78    	mov.w     w0, [w15++]
    26e0:	a0 6a 20    	mov.w     #0x6aa, w0
    26e2:	80 1f 78    	mov.w     w0, [w15++]
    26e4:	20 6a 20    	mov.w     #0x6a2, w0
    26e6:	80 1f 78    	mov.w     w0, [w15++]
    26e8:	20 c0 b3    	mov.b     #0x2, w0
    26ea:	80 1f 78    	mov.w     w0, [w15++]
    26ec:	30 c0 b3    	mov.b     #0x3, w0
    26ee:	80 1f 78    	mov.w     w0, [w15++]
    26f0:	e7 09 20    	mov.w     #0x9e, w7
    26f2:	e6 08 20    	mov.w     #0x8e, w6
    26f4:	85 25 20    	mov.w     #0x258, w5
    26f6:	64 25 20    	mov.w     #0x256, w4
    26f8:	43 25 20    	mov.w     #0x254, w3
    26fa:	22 25 20    	mov.w     #0x252, w2
    26fc:	01 25 20    	mov.w     #0x250, w1
    26fe:	c0 8e 20    	mov.w     #0x8ec, w0
    2700:	37 00 07    	rcall     0x2770 <_uart_init>
    2702:	f0 87 57    	sub.w     w15, #0x10, w15

00002704 <.LSM101>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    2704:	f0 01 20    	mov.w     #0x1f, w0
    2706:	80 1f 78    	mov.w     w0, [w15++]
    2708:	e0 01 20    	mov.w     #0x1e, w0
    270a:	80 1f 78    	mov.w     w0, [w15++]
    270c:	80 c0 b3    	mov.b     #0x8, w0
    270e:	80 1f 78    	mov.w     w0, [w15++]
    2710:	00 40 eb    	clr.b     w0
    2712:	80 1f 78    	mov.w     w0, [w15++]
    2714:	60 6b 20    	mov.w     #0x6b6, w0
    2716:	80 1f 78    	mov.w     w0, [w15++]
    2718:	60 6b 20    	mov.w     #0x6b6, w0
    271a:	80 1f 78    	mov.w     w0, [w15++]
    271c:	80 c0 b3    	mov.b     #0x8, w0
    271e:	80 1f 78    	mov.w     w0, [w15++]
    2720:	90 c0 b3    	mov.b     #0x9, w0
    2722:	80 1f 78    	mov.w     w0, [w15++]
    2724:	e7 09 20    	mov.w     #0x9e, w7
    2726:	e6 08 20    	mov.w     #0x8e, w6
    2728:	85 2b 20    	mov.w     #0x2b8, w5
    272a:	64 2b 20    	mov.w     #0x2b6, w4
    272c:	43 2b 20    	mov.w     #0x2b4, w3
    272e:	22 2b 20    	mov.w     #0x2b2, w2
    2730:	01 2b 20    	mov.w     #0x2b0, w1
    2732:	80 92 20    	mov.w     #0x928, w0
    2734:	1d 00 07    	rcall     0x2770 <_uart_init>
    2736:	f0 87 57    	sub.w     w15, #0x10, w15

00002738 <.LSM102>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart2, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    2738:	00 40 20    	mov.w     #0x400, w0
    273a:	80 1f 78    	mov.w     w0, [w15++]
    273c:	80 de 20    	mov.w     #0xde8, w0
    273e:	80 1f 78    	mov.w     w0, [w15++]
    2740:	00 40 20    	mov.w     #0x400, w0
    2742:	80 1f 78    	mov.w     w0, [w15++]
    2744:	80 9e 20    	mov.w     #0x9e8, w0
    2746:	80 1f 78    	mov.w     w0, [w15++]
    2748:	00 00 eb    	clr.w     w0
    274a:	80 1f 78    	mov.w     w0, [w15++]
    274c:	10 00 20    	mov.w     #0x1, w0
    274e:	80 1f 78    	mov.w     w0, [w15++]
    2750:	e5 c4 b3    	mov.b     #0x4e, w5
    2752:	06 00 20    	mov.w     #0x0, w6
    2754:	67 69 24    	mov.w     #0x4696, w7
    2756:	00 02 eb    	clr.w     w4
    2758:	80 01 eb    	clr.w     w3
    275a:	a2 97 20    	mov.w     #0x97a, w2
    275c:	41 96 20    	mov.w     #0x964, w1
    275e:	00 8b 20    	mov.w     #0x8b0, w0
    2760:	72 00 07    	rcall     0x2846 <_uart_open>
    2762:	ec 87 57    	sub.w     w15, #0xc, w15

00002764 <.LSM103>:
              0, HWTXBUF, 1024, HWRXBUF, 1024);

    _stdout = &uart2;
    2764:	00 8b 20    	mov.w     #0x8b0, w0
    2766:	80 43 88    	mov.w     w0, 0x870

00002768 <.LSM104>:
    _stderr = &uart2;
    2768:	00 8b 20    	mov.w     #0x8b0, w0
    276a:	90 43 88    	mov.w     w0, 0x872

0000276c <.LSM105>:
}
    276c:	00 80 fa    	ulnk      
    276e:	00 00 06    	return    

00002770 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2770:	10 00 fa    	lnk       #0x10
    2772:	00 0f 78    	mov.w     w0, [w14]
    2774:	11 07 98    	mov.w     w1, [w14+2]
    2776:	22 07 98    	mov.w     w2, [w14+4]
    2778:	33 07 98    	mov.w     w3, [w14+6]
    277a:	44 07 98    	mov.w     w4, [w14+8]
    277c:	55 07 98    	mov.w     w5, [w14+10]
    277e:	66 07 98    	mov.w     w6, [w14+12]
    2780:	77 07 98    	mov.w     w7, [w14+14]

00002782 <.LSM107>:
    self->UxMODE = UxMODE;
    2782:	1e 00 78    	mov.w     [w14], w0
    2784:	9e 00 90    	mov.w     [w14+2], w1
    2786:	01 08 78    	mov.w     w1, [w0]

00002788 <.LSM108>:
    self->UxSTA = UxSTA;
    2788:	1e 00 78    	mov.w     [w14], w0
    278a:	ae 00 90    	mov.w     [w14+4], w1
    278c:	11 00 98    	mov.w     w1, [w0+2]

0000278e <.LSM109>:
    self->UxTXREG = UxTXREG;
    278e:	1e 00 78    	mov.w     [w14], w0
    2790:	be 00 90    	mov.w     [w14+6], w1
    2792:	21 00 98    	mov.w     w1, [w0+4]

00002794 <.LSM110>:
    self->UxRXREG = UxRXREG;
    2794:	1e 00 78    	mov.w     [w14], w0
    2796:	ce 00 90    	mov.w     [w14+8], w1
    2798:	31 00 98    	mov.w     w1, [w0+6]

0000279a <.LSM111>:
    self->UxBRG = UxBRG;
    279a:	1e 00 78    	mov.w     [w14], w0
    279c:	de 00 90    	mov.w     [w14+10], w1
    279e:	41 00 98    	mov.w     w1, [w0+8]

000027a0 <.LSM112>:
    self->IFSy = IFSy;
    27a0:	1e 00 78    	mov.w     [w14], w0
    27a2:	ee 00 90    	mov.w     [w14+12], w1
    27a4:	51 00 98    	mov.w     w1, [w0+10]

000027a6 <.LSM113>:
    self->IECy = IECy;
    27a6:	1e 00 78    	mov.w     [w14], w0
    27a8:	fe 00 90    	mov.w     [w14+14], w1
    27aa:	61 00 98    	mov.w     w1, [w0+12]

000027ac <.LSM114>:
    self->UxTXIF = UxTXIF;
    27ac:	1e 00 78    	mov.w     [w14], w0
    27ae:	8e f8 97    	mov.b     [w14-8], w1
    27b0:	61 48 98    	mov.b     w1, [w0+14]

000027b2 <.LSM115>:
    self->UxRXIF = UxRXIF;
    27b2:	1e 00 78    	mov.w     [w14], w0
    27b4:	ee f0 97    	mov.b     [w14-10], w1
    27b6:	71 48 98    	mov.b     w1, [w0+15]

000027b8 <.LSM116>:
    self->RXrpinr = RXrpinr;
    27b8:	1e 00 78    	mov.w     [w14], w0
    27ba:	ae b8 97    	mov.w     [w14-12], w1
    27bc:	01 08 98    	mov.w     w1, [w0+16]

000027be <.LSM117>:
    self->CTSrpinr = CTSrpinr;
    27be:	1e 00 78    	mov.w     [w14], w0
    27c0:	9e b8 97    	mov.w     [w14-14], w1
    27c2:	11 08 98    	mov.w     w1, [w0+18]

000027c4 <.LSM118>:
    self->RXrpshift = RXrpshift;
    27c4:	1e 00 78    	mov.w     [w14], w0
    27c6:	8e f0 97    	mov.b     [w14-16], w1
    27c8:	41 50 98    	mov.b     w1, [w0+20]

000027ca <.LSM119>:
    self->CTSrpshift = CTSrpshift;
    27ca:	1e 00 78    	mov.w     [w14], w0
    27cc:	ee e8 97    	mov.b     [w14-18], w1
    27ce:	51 50 98    	mov.b     w1, [w0+21]

000027d0 <.LSM120>:
    self->TXrpnum = TXrpnum;
    27d0:	1e 00 78    	mov.w     [w14], w0
    27d2:	ee b0 97    	mov.w     [w14-20], w1
    27d4:	31 08 98    	mov.w     w1, [w0+22]

000027d6 <.LSM121>:
    self->RTSrpnum = RTSrpnum;
    27d6:	1e 00 78    	mov.w     [w14], w0
    27d8:	de b0 97    	mov.w     [w14-22], w1
    27da:	41 08 98    	mov.w     w1, [w0+24]

000027dc <.LSM122>:
    self->TX = NULL;
    27dc:	1e 00 78    	mov.w     [w14], w0
    27de:	80 00 eb    	clr.w     w1
    27e0:	51 08 98    	mov.w     w1, [w0+26]

000027e2 <.LSM123>:
    self->RX = NULL;
    27e2:	1e 00 78    	mov.w     [w14], w0
    27e4:	80 00 eb    	clr.w     w1
    27e6:	61 08 98    	mov.w     w1, [w0+28]

000027e8 <.LSM124>:
    self->RTS = NULL;
    27e8:	1e 00 78    	mov.w     [w14], w0
    27ea:	80 00 eb    	clr.w     w1
    27ec:	71 08 98    	mov.w     w1, [w0+30]

000027ee <.LSM125>:
    self->CTS = NULL;
    27ee:	1e 00 78    	mov.w     [w14], w0
    27f0:	80 00 eb    	clr.w     w1
    27f2:	01 10 98    	mov.w     w1, [w0+32]

000027f4 <.LSM126>:
    self->TXbuffer.data = NULL;
    27f4:	1e 00 78    	mov.w     [w14], w0
    27f6:	80 00 eb    	clr.w     w1
    27f8:	11 10 98    	mov.w     w1, [w0+34]

000027fa <.LSM127>:
    self->TXbuffer.length = 0;
    27fa:	1e 00 78    	mov.w     [w14], w0
    27fc:	80 00 eb    	clr.w     w1
    27fe:	21 10 98    	mov.w     w1, [w0+36]

00002800 <.LSM128>:
    self->TXbuffer.head = 0;
    2800:	1e 00 78    	mov.w     [w14], w0
    2802:	80 00 eb    	clr.w     w1
    2804:	31 10 98    	mov.w     w1, [w0+38]

00002806 <.LSM129>:
    self->TXbuffer.tail = 0;
    2806:	1e 00 78    	mov.w     [w14], w0
    2808:	80 00 eb    	clr.w     w1
    280a:	41 10 98    	mov.w     w1, [w0+40]

0000280c <.LSM130>:
    self->TXbuffer.count = 0;
    280c:	1e 00 78    	mov.w     [w14], w0
    280e:	80 00 eb    	clr.w     w1
    2810:	51 10 98    	mov.w     w1, [w0+42]

00002812 <.LSM131>:
    self->RXbuffer.data = NULL;
    2812:	1e 00 78    	mov.w     [w14], w0
    2814:	80 00 eb    	clr.w     w1
    2816:	61 10 98    	mov.w     w1, [w0+44]

00002818 <.LSM132>:
    self->RXbuffer.length = 0;
    2818:	1e 00 78    	mov.w     [w14], w0
    281a:	80 00 eb    	clr.w     w1
    281c:	71 10 98    	mov.w     w1, [w0+46]

0000281e <.LSM133>:
    self->RXbuffer.head = 0;
    281e:	1e 00 78    	mov.w     [w14], w0
    2820:	80 00 eb    	clr.w     w1
    2822:	01 18 98    	mov.w     w1, [w0+48]

00002824 <.LSM134>:
    self->RXbuffer.tail = 0;
    2824:	1e 00 78    	mov.w     [w14], w0
    2826:	80 00 eb    	clr.w     w1
    2828:	11 18 98    	mov.w     w1, [w0+50]

0000282a <.LSM135>:
    self->RXbuffer.count = 0;
    282a:	1e 00 78    	mov.w     [w14], w0
    282c:	80 00 eb    	clr.w     w1
    282e:	21 18 98    	mov.w     w1, [w0+52]

00002830 <.LSM136>:
    self->TXthreshold = 1;
    2830:	1e 00 78    	mov.w     [w14], w0
    2832:	11 00 20    	mov.w     #0x1, w1
    2834:	31 18 98    	mov.w     w1, [w0+54]

00002836 <.LSM137>:
    self->putc = NULL;
    2836:	1e 00 78    	mov.w     [w14], w0
    2838:	80 00 eb    	clr.w     w1
    283a:	41 18 98    	mov.w     w1, [w0+56]

0000283c <.LSM138>:
    self->getc = NULL;
    283c:	1e 00 78    	mov.w     [w14], w0
    283e:	80 00 eb    	clr.w     w1
    2840:	51 18 98    	mov.w     w1, [w0+58]

00002842 <.LSM139>:
}
    2842:	00 80 fa    	ulnk      
    2844:	00 00 06    	return    

00002846 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    2846:	10 00 fa    	lnk       #0x10
    2848:	88 1f 78    	mov.w     w8, [w15++]
    284a:	00 0f 78    	mov.w     w0, [w14]
    284c:	11 07 98    	mov.w     w1, [w14+2]
    284e:	22 07 98    	mov.w     w2, [w14+4]
    2850:	33 07 98    	mov.w     w3, [w14+6]
    2852:	44 07 98    	mov.w     w4, [w14+8]
    2854:	56 07 98    	mov.w     w6, [w14+10]
    2856:	67 07 98    	mov.w     w7, [w14+12]
    2858:	65 4f 98    	mov.b     w5, [w14+14]

0000285a <.LSM141>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    285a:	1e 00 78    	mov.w     [w14], w0
    285c:	10 00 78    	mov.w     [w0], w0
    285e:	80 00 eb    	clr.w     w1
    2860:	01 08 78    	mov.w     w1, [w0]

00002862 <.LSM142>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    2862:	1e 00 90    	mov.w     [w14+2], w0
    2864:	60 00 90    	mov.w     [w0+12], w0
    2866:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2868:	0e 02 32    	bra       Z, 0x2c86 <.L73>
    286a:	2e 00 90    	mov.w     [w14+4], w0
    286c:	60 00 90    	mov.w     [w0+12], w0
    286e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2870:	0c 02 32    	bra       Z, 0x2c8a <.L74>

00002872 <.LSM143>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    2872:	1e 00 90    	mov.w     [w14+2], w0
    2874:	00 08 90    	mov.w     [w0+16], w0
    2876:	00 00 e0    	cp0.w     w0
    2878:	69 00 3a    	bra       NZ, 0x294c <.L44>
    287a:	2e 00 90    	mov.w     [w14+4], w0
    287c:	00 08 90    	mov.w     [w0+16], w0
    287e:	00 00 e0    	cp0.w     w0
    2880:	65 00 3a    	bra       NZ, 0x294c <.L44>

00002882 <.LSM144>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    2882:	1e 00 90    	mov.w     [w14+2], w0
    2884:	8f 0c 07    	rcall     0x41a4 <_pin_digitalOut>

00002886 <.LSM145>:
        pin_set(TX);
    2886:	1e 00 90    	mov.w     [w14+2], w0
    2888:	ea 0c 07    	rcall     0x425e <_pin_set>

0000288a <.LSM146>:
        pin_digitalIn(RX);
    288a:	2e 00 90    	mov.w     [w14+4], w0
    288c:	64 0c 07    	rcall     0x4156 <_pin_digitalIn>

0000288e <.LSM147>:
        self->TX = TX;
    288e:	1e 00 78    	mov.w     [w14], w0
    2890:	9e 00 90    	mov.w     [w14+2], w1
    2892:	51 08 98    	mov.w     w1, [w0+26]

00002894 <.LSM148>:
        TX->owner = (void *)self;
    2894:	1e 00 90    	mov.w     [w14+2], w0
    2896:	9e 00 78    	mov.w     [w14], w1
    2898:	01 08 98    	mov.w     w1, [w0+16]

0000289a <.LSM149>:
        TX->write = NULL;
    289a:	1e 00 90    	mov.w     [w14+2], w0
    289c:	80 00 eb    	clr.w     w1
    289e:	11 08 98    	mov.w     w1, [w0+18]

000028a0 <.LSM150>:
        TX->read = NULL;
    28a0:	1e 00 90    	mov.w     [w14+2], w0
    28a2:	80 00 eb    	clr.w     w1
    28a4:	21 08 98    	mov.w     w1, [w0+20]

000028a6 <.LSM151>:
        self->RX = RX;
    28a6:	1e 00 78    	mov.w     [w14], w0
    28a8:	ae 00 90    	mov.w     [w14+4], w1
    28aa:	61 08 98    	mov.w     w1, [w0+28]

000028ac <.LSM152>:
        RX->owner = (void *)self;
    28ac:	2e 00 90    	mov.w     [w14+4], w0
    28ae:	9e 00 78    	mov.w     [w14], w1
    28b0:	01 08 98    	mov.w     w1, [w0+16]

000028b2 <.LSM153>:
        RX->write = NULL;
    28b2:	2e 00 90    	mov.w     [w14+4], w0
    28b4:	80 00 eb    	clr.w     w1
    28b6:	11 08 98    	mov.w     w1, [w0+18]

000028b8 <.LSM154>:
        RX->read = NULL;
    28b8:	2e 00 90    	mov.w     [w14+4], w0
    28ba:	80 00 eb    	clr.w     w1
    28bc:	21 08 98    	mov.w     w1, [w0+20]

000028be <.LSM155>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    28be:	11 3a 80    	mov.w     0x742, w1
    28c0:	f0 0b 20    	mov.w     #0xbf, w0
    28c2:	00 81 60    	and.w     w1, w0, w2
    28c4:	60 04 20    	mov.w     #0x46, w0
    28c6:	71 05 20    	mov.w     #0x57, w1
    28c8:	23 74 20    	mov.w     #0x742, w3
    28ca:	80 49 78    	mov.b     w0, [w3]
    28cc:	81 49 78    	mov.b     w1, [w3]
    28ce:	82 49 78    	mov.b     w2, [w3]

000028d0 <.LSM156>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    28d0:	1e 00 90    	mov.w     [w14+2], w0
    28d2:	70 00 90    	mov.w     [w0+14], w0
    28d4:	9e 00 90    	mov.w     [w14+2], w1
    28d6:	f1 00 90    	mov.w     [w1+14], w1
    28d8:	11 01 78    	mov.w     [w1], w2
    28da:	9e 00 90    	mov.w     [w14+2], w1
    28dc:	a1 48 90    	mov.b     [w1+10], w1
    28de:	81 80 fb    	ze        w1, w1
    28e0:	f3 03 20    	mov.w     #0x3f, w3
    28e2:	81 18 dd    	sl.w      w3, w1, w1
    28e4:	81 80 ea    	com.w     w1, w1
    28e6:	81 00 61    	and.w     w2, w1, w1
    28e8:	01 08 78    	mov.w     w1, [w0]

000028ea <.LSM157>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    28ea:	1e 00 90    	mov.w     [w14+2], w0
    28ec:	70 00 90    	mov.w     [w0+14], w0
    28ee:	9e 00 90    	mov.w     [w14+2], w1
    28f0:	f1 00 90    	mov.w     [w1+14], w1
    28f2:	11 01 78    	mov.w     [w1], w2
    28f4:	9e 00 78    	mov.w     [w14], w1
    28f6:	b1 09 90    	mov.w     [w1+22], w3
    28f8:	9e 00 90    	mov.w     [w14+2], w1
    28fa:	a1 48 90    	mov.b     [w1+10], w1
    28fc:	81 80 fb    	ze        w1, w1
    28fe:	81 18 dd    	sl.w      w3, w1, w1
    2900:	82 80 70    	ior.w     w1, w2, w1
    2902:	01 08 78    	mov.w     w1, [w0]

00002904 <.LSM158>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    2904:	1e 00 78    	mov.w     [w14], w0
    2906:	00 08 90    	mov.w     [w0+16], w0
    2908:	9e 00 78    	mov.w     [w14], w1
    290a:	81 08 90    	mov.w     [w1+16], w1
    290c:	11 01 78    	mov.w     [w1], w2
    290e:	9e 00 78    	mov.w     [w14], w1
    2910:	c1 50 90    	mov.b     [w1+20], w1
    2912:	81 80 fb    	ze        w1, w1
    2914:	f3 03 20    	mov.w     #0x3f, w3
    2916:	81 18 dd    	sl.w      w3, w1, w1
    2918:	81 80 ea    	com.w     w1, w1
    291a:	81 00 61    	and.w     w2, w1, w1
    291c:	01 08 78    	mov.w     w1, [w0]

0000291e <.LSM159>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    291e:	1e 00 78    	mov.w     [w14], w0
    2920:	00 08 90    	mov.w     [w0+16], w0
    2922:	9e 00 78    	mov.w     [w14], w1
    2924:	81 08 90    	mov.w     [w1+16], w1
    2926:	11 01 78    	mov.w     [w1], w2
    2928:	ae 00 90    	mov.w     [w14+4], w1
    292a:	e1 01 90    	mov.w     [w1+12], w3
    292c:	9e 00 78    	mov.w     [w14], w1
    292e:	c1 50 90    	mov.b     [w1+20], w1
    2930:	81 80 fb    	ze        w1, w1
    2932:	81 18 dd    	sl.w      w3, w1, w1
    2934:	82 80 70    	ior.w     w1, w2, w1
    2936:	01 08 78    	mov.w     w1, [w0]

00002938 <.LSM160>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2938:	11 3a 80    	mov.w     0x742, w1
    293a:	00 04 20    	mov.w     #0x40, w0
    293c:	01 01 70    	ior.w     w0, w1, w2
    293e:	60 04 20    	mov.w     #0x46, w0
    2940:	71 05 20    	mov.w     #0x57, w1
    2942:	23 74 20    	mov.w     #0x742, w3
    2944:	80 49 78    	mov.b     w0, [w3]
    2946:	81 49 78    	mov.b     w1, [w3]
    2948:	82 49 78    	mov.b     w2, [w3]
    294a:	0a 00 37    	bra       0x2960 <.L45>

0000294c <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    294c:	1e 00 78    	mov.w     [w14], w0
    294e:	d0 08 90    	mov.w     [w0+26], w1
    2950:	1e 00 90    	mov.w     [w14+2], w0
    2952:	80 8f 50    	sub.w     w1, w0, [w15]
    2954:	9c 01 3a    	bra       NZ, 0x2c8e <.L75>
    2956:	1e 00 78    	mov.w     [w14], w0
    2958:	e0 08 90    	mov.w     [w0+28], w1
    295a:	2e 00 90    	mov.w     [w14+4], w0
    295c:	80 8f 50    	sub.w     w1, w0, [w15]
    295e:	99 01 3a    	bra       NZ, 0x2c92 <.L76>

00002960 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    2960:	3e 00 90    	mov.w     [w14+6], w0
    2962:	00 00 e0    	cp0.w     w0
    2964:	87 00 32    	bra       Z, 0x2a74 <.L47>
    2966:	4e 00 90    	mov.w     [w14+8], w0
    2968:	00 00 e0    	cp0.w     w0
    296a:	84 00 32    	bra       Z, 0x2a74 <.L47>

0000296c <.LSM163>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    296c:	3e 00 90    	mov.w     [w14+6], w0
    296e:	60 00 90    	mov.w     [w0+12], w0
    2970:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2972:	91 01 32    	bra       Z, 0x2c96 <.L77>
    2974:	4e 00 90    	mov.w     [w14+8], w0
    2976:	60 00 90    	mov.w     [w0+12], w0
    2978:	e1 0f 40    	add.w     w0, #0x1, [w15]
    297a:	8f 01 32    	bra       Z, 0x2c9a <.L78>

0000297c <.LSM164>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    297c:	3e 00 90    	mov.w     [w14+6], w0
    297e:	00 08 90    	mov.w     [w0+16], w0
    2980:	00 00 e0    	cp0.w     w0
    2982:	69 00 3a    	bra       NZ, 0x2a56 <.L50>
    2984:	4e 00 90    	mov.w     [w14+8], w0
    2986:	00 08 90    	mov.w     [w0+16], w0
    2988:	00 00 e0    	cp0.w     w0
    298a:	65 00 3a    	bra       NZ, 0x2a56 <.L50>

0000298c <.LSM165>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    298c:	3e 00 90    	mov.w     [w14+6], w0
    298e:	0a 0c 07    	rcall     0x41a4 <_pin_digitalOut>

00002990 <.LSM166>:
            pin_set(RTS);
    2990:	3e 00 90    	mov.w     [w14+6], w0
    2992:	65 0c 07    	rcall     0x425e <_pin_set>

00002994 <.LSM167>:
            pin_digitalIn(CTS);
    2994:	4e 00 90    	mov.w     [w14+8], w0
    2996:	df 0b 07    	rcall     0x4156 <_pin_digitalIn>

00002998 <.LSM168>:
            self->RTS = RTS;
    2998:	1e 00 78    	mov.w     [w14], w0
    299a:	be 00 90    	mov.w     [w14+6], w1
    299c:	71 08 98    	mov.w     w1, [w0+30]

0000299e <.LSM169>:
            RTS->owner = (void *)self;
    299e:	3e 00 90    	mov.w     [w14+6], w0
    29a0:	9e 00 78    	mov.w     [w14], w1
    29a2:	01 08 98    	mov.w     w1, [w0+16]

000029a4 <.LSM170>:
            RTS->write = NULL;
    29a4:	3e 00 90    	mov.w     [w14+6], w0
    29a6:	80 00 eb    	clr.w     w1
    29a8:	11 08 98    	mov.w     w1, [w0+18]

000029aa <.LSM171>:
            RTS->read = NULL;
    29aa:	3e 00 90    	mov.w     [w14+6], w0
    29ac:	80 00 eb    	clr.w     w1
    29ae:	21 08 98    	mov.w     w1, [w0+20]

000029b0 <.LSM172>:
            self->CTS = CTS;
    29b0:	1e 00 78    	mov.w     [w14], w0
    29b2:	ce 00 90    	mov.w     [w14+8], w1
    29b4:	01 10 98    	mov.w     w1, [w0+32]

000029b6 <.LSM173>:
            CTS->owner = (void *)self;
    29b6:	4e 00 90    	mov.w     [w14+8], w0
    29b8:	9e 00 78    	mov.w     [w14], w1
    29ba:	01 08 98    	mov.w     w1, [w0+16]

000029bc <.LSM174>:
            CTS->write = NULL;
    29bc:	4e 00 90    	mov.w     [w14+8], w0
    29be:	80 00 eb    	clr.w     w1
    29c0:	11 08 98    	mov.w     w1, [w0+18]

000029c2 <.LSM175>:
            CTS->read = NULL;
    29c2:	4e 00 90    	mov.w     [w14+8], w0
    29c4:	80 00 eb    	clr.w     w1
    29c6:	21 08 98    	mov.w     w1, [w0+20]

000029c8 <.LSM176>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    29c8:	11 3a 80    	mov.w     0x742, w1
    29ca:	f0 0b 20    	mov.w     #0xbf, w0
    29cc:	00 81 60    	and.w     w1, w0, w2
    29ce:	60 04 20    	mov.w     #0x46, w0
    29d0:	71 05 20    	mov.w     #0x57, w1
    29d2:	23 74 20    	mov.w     #0x742, w3
    29d4:	80 49 78    	mov.b     w0, [w3]
    29d6:	81 49 78    	mov.b     w1, [w3]
    29d8:	82 49 78    	mov.b     w2, [w3]

000029da <.LSM177>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    29da:	3e 00 90    	mov.w     [w14+6], w0
    29dc:	70 00 90    	mov.w     [w0+14], w0
    29de:	be 00 90    	mov.w     [w14+6], w1
    29e0:	f1 00 90    	mov.w     [w1+14], w1
    29e2:	11 01 78    	mov.w     [w1], w2
    29e4:	be 00 90    	mov.w     [w14+6], w1
    29e6:	a1 48 90    	mov.b     [w1+10], w1
    29e8:	81 80 fb    	ze        w1, w1
    29ea:	f3 03 20    	mov.w     #0x3f, w3
    29ec:	81 18 dd    	sl.w      w3, w1, w1
    29ee:	81 80 ea    	com.w     w1, w1
    29f0:	81 00 61    	and.w     w2, w1, w1
    29f2:	01 08 78    	mov.w     w1, [w0]

000029f4 <.LSM178>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    29f4:	3e 00 90    	mov.w     [w14+6], w0
    29f6:	70 00 90    	mov.w     [w0+14], w0
    29f8:	be 00 90    	mov.w     [w14+6], w1
    29fa:	f1 00 90    	mov.w     [w1+14], w1
    29fc:	11 01 78    	mov.w     [w1], w2
    29fe:	9e 00 78    	mov.w     [w14], w1
    2a00:	c1 09 90    	mov.w     [w1+24], w3
    2a02:	be 00 90    	mov.w     [w14+6], w1
    2a04:	a1 48 90    	mov.b     [w1+10], w1
    2a06:	81 80 fb    	ze        w1, w1
    2a08:	81 18 dd    	sl.w      w3, w1, w1
    2a0a:	82 80 70    	ior.w     w1, w2, w1
    2a0c:	01 08 78    	mov.w     w1, [w0]

00002a0e <.LSM179>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    2a0e:	1e 00 78    	mov.w     [w14], w0
    2a10:	10 08 90    	mov.w     [w0+18], w0
    2a12:	9e 00 78    	mov.w     [w14], w1
    2a14:	91 08 90    	mov.w     [w1+18], w1
    2a16:	11 01 78    	mov.w     [w1], w2
    2a18:	9e 00 78    	mov.w     [w14], w1
    2a1a:	d1 50 90    	mov.b     [w1+21], w1
    2a1c:	81 80 fb    	ze        w1, w1
    2a1e:	f3 03 20    	mov.w     #0x3f, w3
    2a20:	81 18 dd    	sl.w      w3, w1, w1
    2a22:	81 80 ea    	com.w     w1, w1
    2a24:	81 00 61    	and.w     w2, w1, w1
    2a26:	01 08 78    	mov.w     w1, [w0]

00002a28 <.LSM180>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    2a28:	1e 00 78    	mov.w     [w14], w0
    2a2a:	10 08 90    	mov.w     [w0+18], w0
    2a2c:	9e 00 78    	mov.w     [w14], w1
    2a2e:	91 08 90    	mov.w     [w1+18], w1
    2a30:	11 01 78    	mov.w     [w1], w2
    2a32:	ce 00 90    	mov.w     [w14+8], w1
    2a34:	e1 01 90    	mov.w     [w1+12], w3
    2a36:	9e 00 78    	mov.w     [w14], w1
    2a38:	d1 50 90    	mov.b     [w1+21], w1
    2a3a:	81 80 fb    	ze        w1, w1
    2a3c:	81 18 dd    	sl.w      w3, w1, w1
    2a3e:	82 80 70    	ior.w     w1, w2, w1
    2a40:	01 08 78    	mov.w     w1, [w0]

00002a42 <.LSM181>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    2a42:	11 3a 80    	mov.w     0x742, w1
    2a44:	00 04 20    	mov.w     #0x40, w0
    2a46:	01 01 70    	ior.w     w0, w1, w2
    2a48:	60 04 20    	mov.w     #0x46, w0
    2a4a:	71 05 20    	mov.w     #0x57, w1
    2a4c:	23 74 20    	mov.w     #0x742, w3
    2a4e:	80 49 78    	mov.b     w0, [w3]
    2a50:	81 49 78    	mov.b     w1, [w3]
    2a52:	82 49 78    	mov.b     w2, [w3]
    2a54:	0a 00 37    	bra       0x2a6a <.L51>

00002a56 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    2a56:	1e 00 78    	mov.w     [w14], w0
    2a58:	f0 08 90    	mov.w     [w0+30], w1
    2a5a:	3e 00 90    	mov.w     [w14+6], w0
    2a5c:	80 8f 50    	sub.w     w1, w0, [w15]
    2a5e:	1f 01 3a    	bra       NZ, 0x2c9e <.L79>
    2a60:	1e 00 78    	mov.w     [w14], w0
    2a62:	80 10 90    	mov.w     [w0+32], w1
    2a64:	4e 00 90    	mov.w     [w14+8], w0
    2a66:	80 8f 50    	sub.w     w1, w0, [w15]
    2a68:	1c 01 3a    	bra       NZ, 0x2ca2 <.L80>

00002a6a <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    2a6a:	1e 00 78    	mov.w     [w14], w0
    2a6c:	10 00 78    	mov.w     [w0], w0
    2a6e:	01 20 20    	mov.w     #0x200, w1
    2a70:	01 08 78    	mov.w     w1, [w0]
    2a72:	06 00 37    	bra       0x2a80 <.L53>

00002a74 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    2a74:	3e 00 90    	mov.w     [w14+6], w0
    2a76:	00 00 e0    	cp0.w     w0
    2a78:	16 01 3a    	bra       NZ, 0x2ca6 <.L81>
    2a7a:	4e 00 90    	mov.w     [w14+8], w0
    2a7c:	00 00 e0    	cp0.w     w0
    2a7e:	15 01 3a    	bra       NZ, 0x2caa <.L82>

00002a80 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2a80:	18 c0 b3    	mov.b     #0x1, w8
    2a82:	02 40 22    	mov.w     #0x2400, w2
    2a84:	43 a7 24    	mov.w     #0x4a74, w3
    2a86:	5e 00 90    	mov.w     [w14+10], w0
    2a88:	ee 00 90    	mov.w     [w14+12], w1
    2a8a:	6d f4 07    	rcall     0x1366 <___gesf2>
    2a8c:	00 00 e0    	cp0.w     w0
    2a8e:	01 00 3c    	bra       GT, 0x2a92 <.L55>
    2a90:	00 44 eb    	clr.b     w8

00002a92 <.L55>:
    2a92:	08 04 e0    	cp0.b     w8
    2a94:	04 00 32    	bra       Z, 0x2a9e <.L56>

00002a96 <.LSM186>:
        baudrate = FCY/4.;
    2a96:	00 40 22    	mov.w     #0x2400, w0
    2a98:	41 a7 24    	mov.w     #0x4a74, w1
    2a9a:	50 07 98    	mov.w     w0, [w14+10]
    2a9c:	61 07 98    	mov.w     w1, [w14+12]

00002a9e <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    2a9e:	18 c0 b3    	mov.b     #0x1, w8
    2aa0:	02 40 22    	mov.w     #0x2400, w2
    2aa2:	43 17 24    	mov.w     #0x4174, w3
    2aa4:	5e 00 90    	mov.w     [w14+10], w0
    2aa6:	ee 00 90    	mov.w     [w14+12], w1
    2aa8:	5c f4 07    	rcall     0x1362 <___eqsf2>
    2aaa:	00 00 e0    	cp0.w     w0
    2aac:	01 00 35    	bra       LT, 0x2ab0 <.L57>
    2aae:	00 44 eb    	clr.b     w8

00002ab0 <.L57>:
    2ab0:	08 04 e0    	cp0.b     w8
    2ab2:	04 00 32    	bra       Z, 0x2abc <.L58>

00002ab4 <.LSM188>:
        baudrate = FCY/(16.*65536.);
    2ab4:	00 40 22    	mov.w     #0x2400, w0
    2ab6:	41 17 24    	mov.w     #0x4174, w1
    2ab8:	50 07 98    	mov.w     w0, [w14+10]
    2aba:	61 07 98    	mov.w     w1, [w14+12]

00002abc <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2abc:	18 c0 b3    	mov.b     #0x1, w8
    2abe:	02 40 22    	mov.w     #0x2400, w2
    2ac0:	43 27 24    	mov.w     #0x4274, w3
    2ac2:	5e 00 90    	mov.w     [w14+10], w0
    2ac4:	ee 00 90    	mov.w     [w14+12], w1
    2ac6:	4d f4 07    	rcall     0x1362 <___eqsf2>
    2ac8:	00 00 e0    	cp0.w     w0
    2aca:	01 00 34    	bra       LE, 0x2ace <.L59>
    2acc:	00 44 eb    	clr.b     w8

00002ace <.L59>:
    2ace:	08 04 e0    	cp0.b     w8
    2ad0:	0f 00 32    	bra       Z, 0x2af0 <.L60>

00002ad2 <.LSM190>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    2ad2:	1e 00 78    	mov.w     [w14], w0
    2ad4:	40 04 90    	mov.w     [w0+8], w8
    2ad6:	5e 01 90    	mov.w     [w14+10], w2
    2ad8:	ee 01 90    	mov.w     [w14+12], w3
    2ada:	00 40 22    	mov.w     #0x2400, w0
    2adc:	41 97 24    	mov.w     #0x4974, w1
    2ade:	ff f3 07    	rcall     0x12de <___divsf3>
    2ae0:	02 00 20    	mov.w     #0x0, w2
    2ae2:	03 f0 23    	mov.w     #0x3f00, w3
    2ae4:	9f f3 07    	rcall     0x1224 <___addsf3>
    2ae6:	41 f4 07    	rcall     0x136a <___fixunssfsi>
    2ae8:	00 00 78    	mov.w     w0, w0
    2aea:	00 00 e9    	dec.w     w0, w0
    2aec:	00 0c 78    	mov.w     w0, [w8]
    2aee:	15 00 37    	bra       0x2b1a <.L61>

00002af0 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2af0:	1e 00 78    	mov.w     [w14], w0
    2af2:	10 00 78    	mov.w     [w0], w0
    2af4:	9e 00 78    	mov.w     [w14], w1
    2af6:	91 00 78    	mov.w     [w1], w1
    2af8:	91 00 78    	mov.w     [w1], w1
    2afa:	01 30 a0    	bset.w    w1, #0x3
    2afc:	01 08 78    	mov.w     w1, [w0]

00002afe <.LSM192>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2afe:	1e 00 78    	mov.w     [w14], w0
    2b00:	40 04 90    	mov.w     [w0+8], w8
    2b02:	5e 01 90    	mov.w     [w14+10], w2
    2b04:	ee 01 90    	mov.w     [w14+12], w3
    2b06:	00 40 22    	mov.w     #0x2400, w0
    2b08:	41 a7 24    	mov.w     #0x4a74, w1
    2b0a:	e9 f3 07    	rcall     0x12de <___divsf3>
    2b0c:	02 00 20    	mov.w     #0x0, w2
    2b0e:	03 f0 23    	mov.w     #0x3f00, w3
    2b10:	89 f3 07    	rcall     0x1224 <___addsf3>
    2b12:	2b f4 07    	rcall     0x136a <___fixunssfsi>
    2b14:	00 00 78    	mov.w     w0, w0
    2b16:	00 00 e9    	dec.w     w0, w0
    2b18:	00 0c 78    	mov.w     w0, [w8]

00002b1a <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2b1a:	ee 48 90    	mov.b     [w14+14], w1
    2b1c:	50 c4 b3    	mov.b     #0x45, w0
    2b1e:	80 cf 50    	sub.b     w1, w0, [w15]
    2b20:	04 00 32    	bra       Z, 0x2b2a <.L62>
    2b22:	ee 48 90    	mov.b     [w14+14], w1
    2b24:	50 c6 b3    	mov.b     #0x65, w0
    2b26:	80 cf 50    	sub.b     w1, w0, [w15]
    2b28:	08 00 3a    	bra       NZ, 0x2b3a <.L63>

00002b2a <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2b2a:	1e 00 78    	mov.w     [w14], w0
    2b2c:	10 00 78    	mov.w     [w0], w0
    2b2e:	9e 00 78    	mov.w     [w14], w1
    2b30:	91 00 78    	mov.w     [w1], w1
    2b32:	91 00 78    	mov.w     [w1], w1
    2b34:	01 10 a0    	bset.w    w1, #0x1
    2b36:	01 08 78    	mov.w     w1, [w0]
    2b38:	18 00 37    	bra       0x2b6a <.L64>

00002b3a <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    2b3a:	ee 48 90    	mov.b     [w14+14], w1
    2b3c:	f0 c4 b3    	mov.b     #0x4f, w0
    2b3e:	80 cf 50    	sub.b     w1, w0, [w15]
    2b40:	04 00 32    	bra       Z, 0x2b4a <.L65>
    2b42:	ee 48 90    	mov.b     [w14+14], w1
    2b44:	f0 c6 b3    	mov.b     #0x6f, w0
    2b46:	80 cf 50    	sub.b     w1, w0, [w15]
    2b48:	08 00 3a    	bra       NZ, 0x2b5a <.L66>

00002b4a <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    2b4a:	1e 00 78    	mov.w     [w14], w0
    2b4c:	10 00 78    	mov.w     [w0], w0
    2b4e:	9e 00 78    	mov.w     [w14], w1
    2b50:	91 00 78    	mov.w     [w1], w1
    2b52:	91 00 78    	mov.w     [w1], w1
    2b54:	01 20 a0    	bset.w    w1, #0x2
    2b56:	01 08 78    	mov.w     w1, [w0]
    2b58:	08 00 37    	bra       0x2b6a <.L64>

00002b5a <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    2b5a:	ee 48 90    	mov.b     [w14+14], w1
    2b5c:	e0 c4 b3    	mov.b     #0x4e, w0
    2b5e:	80 cf 50    	sub.b     w1, w0, [w15]
    2b60:	04 00 32    	bra       Z, 0x2b6a <.L64>
    2b62:	ee 48 90    	mov.b     [w14+14], w1
    2b64:	e0 c6 b3    	mov.b     #0x6e, w0
    2b66:	80 cf 50    	sub.b     w1, w0, [w15]
    2b68:	a2 00 3a    	bra       NZ, 0x2cae <.L83>

00002b6a <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    2b6a:	4e b8 97    	mov.w     [w14-8], w0
    2b6c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2b6e:	08 00 3a    	bra       NZ, 0x2b80 <.L67>

00002b70 <.LSM199>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2b70:	1e 00 78    	mov.w     [w14], w0
    2b72:	10 00 78    	mov.w     [w0], w0
    2b74:	9e 00 78    	mov.w     [w14], w1
    2b76:	91 00 78    	mov.w     [w1], w1
    2b78:	91 00 78    	mov.w     [w1], w1
    2b7a:	01 00 a0    	bset.w    w1, #0x0
    2b7c:	01 08 78    	mov.w     w1, [w0]
    2b7e:	03 00 37    	bra       0x2b86 <.L68>

00002b80 <.L67>:
    } else if (stopbits!=1) {
    2b80:	4e b8 97    	mov.w     [w14-8], w0
    2b82:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2b84:	96 00 3a    	bra       NZ, 0x2cb2 <.L84>

00002b86 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    2b86:	2e b8 97    	mov.w     [w14-12], w0
    2b88:	00 00 e0    	cp0.w     w0
    2b8a:	04 00 3a    	bra       NZ, 0x2b94 <.L69>

00002b8c <.LSM202>:
        self->putc = __putc_nobuffer;
    2b8c:	1e 00 78    	mov.w     [w14], w0
    2b8e:	c1 20 22    	mov.w     #0x220c, w1
    2b90:	41 18 98    	mov.w     w1, [w0+56]
    2b92:	36 00 37    	bra       0x2c00 <.L70>

00002b94 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2b94:	1e 00 78    	mov.w     [w14], w0
    2b96:	10 00 90    	mov.w     [w0+2], w0
    2b98:	9e 00 78    	mov.w     [w14], w1
    2b9a:	91 00 90    	mov.w     [w1+2], w1
    2b9c:	11 01 78    	mov.w     [w1], w2
    2b9e:	01 00 22    	mov.w     #0x2000, w1
    2ba0:	82 80 70    	ior.w     w1, w2, w1
    2ba2:	01 08 78    	mov.w     w1, [w0]

00002ba4 <.LSM204>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2ba4:	1e 00 78    	mov.w     [w14], w0
    2ba6:	ae b8 97    	mov.w     [w14-12], w1
    2ba8:	11 10 98    	mov.w     w1, [w0+34]

00002baa <.LSM205>:
        self->TXbuffer.length = TXbufferlen;
    2baa:	1e 00 78    	mov.w     [w14], w0
    2bac:	9e b8 97    	mov.w     [w14-14], w1
    2bae:	21 10 98    	mov.w     w1, [w0+36]

00002bb0 <.LSM206>:
        self->TXbuffer.head = 0;
    2bb0:	1e 00 78    	mov.w     [w14], w0
    2bb2:	80 00 eb    	clr.w     w1
    2bb4:	31 10 98    	mov.w     w1, [w0+38]

00002bb6 <.LSM207>:
        self->TXbuffer.tail = 0;
    2bb6:	1e 00 78    	mov.w     [w14], w0
    2bb8:	80 00 eb    	clr.w     w1
    2bba:	41 10 98    	mov.w     w1, [w0+40]

00002bbc <.LSM208>:
        self->TXbuffer.count = 0;
    2bbc:	1e 00 78    	mov.w     [w14], w0
    2bbe:	80 00 eb    	clr.w     w1
    2bc0:	51 10 98    	mov.w     w1, [w0+42]

00002bc2 <.LSM209>:
        self->TXthreshold = TXthreshold;
    2bc2:	1e 00 78    	mov.w     [w14], w0
    2bc4:	be b8 97    	mov.w     [w14-10], w1
    2bc6:	31 18 98    	mov.w     w1, [w0+54]

00002bc8 <.LSM210>:
        self->putc = __putc_buffer;
    2bc8:	1e 00 78    	mov.w     [w14], w0
    2bca:	e1 24 22    	mov.w     #0x224e, w1
    2bcc:	41 18 98    	mov.w     w1, [w0+56]

00002bce <.LSM211>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2bce:	1e 00 78    	mov.w     [w14], w0
    2bd0:	50 00 90    	mov.w     [w0+10], w0
    2bd2:	9e 00 78    	mov.w     [w14], w1
    2bd4:	d1 00 90    	mov.w     [w1+10], w1
    2bd6:	11 01 78    	mov.w     [w1], w2
    2bd8:	9e 00 78    	mov.w     [w14], w1
    2bda:	e1 48 90    	mov.b     [w1+14], w1
    2bdc:	81 80 fb    	ze        w1, w1
    2bde:	13 00 20    	mov.w     #0x1, w3
    2be0:	81 18 dd    	sl.w      w3, w1, w1
    2be2:	81 80 ea    	com.w     w1, w1
    2be4:	81 00 61    	and.w     w2, w1, w1
    2be6:	01 08 78    	mov.w     w1, [w0]

00002be8 <.LSM212>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2be8:	1e 00 78    	mov.w     [w14], w0
    2bea:	60 00 90    	mov.w     [w0+12], w0
    2bec:	9e 00 78    	mov.w     [w14], w1
    2bee:	e1 00 90    	mov.w     [w1+12], w1
    2bf0:	11 01 78    	mov.w     [w1], w2
    2bf2:	9e 00 78    	mov.w     [w14], w1
    2bf4:	e1 48 90    	mov.b     [w1+14], w1
    2bf6:	81 80 fb    	ze        w1, w1
    2bf8:	13 00 20    	mov.w     #0x1, w3
    2bfa:	81 18 dd    	sl.w      w3, w1, w1
    2bfc:	82 80 70    	ior.w     w1, w2, w1
    2bfe:	01 08 78    	mov.w     w1, [w0]

00002c00 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    2c00:	0e b8 97    	mov.w     [w14-16], w0
    2c02:	00 00 e0    	cp0.w     w0
    2c04:	04 00 3a    	bra       NZ, 0x2c0e <.L71>

00002c06 <.LSM214>:
        self->getc = __getc_nobuffer;
    2c06:	1e 00 78    	mov.w     [w14], w0
    2c08:	01 23 22    	mov.w     #0x2230, w1
    2c0a:	51 18 98    	mov.w     w1, [w0+58]
    2c0c:	2b 00 37    	bra       0x2c64 <.L72>

00002c0e <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    2c0e:	1e 00 78    	mov.w     [w14], w0
    2c10:	8e b8 97    	mov.w     [w14-16], w1
    2c12:	61 10 98    	mov.w     w1, [w0+44]

00002c14 <.LSM216>:
        self->RXbuffer.length = RXbufferlen;
    2c14:	1e 00 78    	mov.w     [w14], w0
    2c16:	fe b0 97    	mov.w     [w14-18], w1
    2c18:	71 10 98    	mov.w     w1, [w0+46]

00002c1a <.LSM217>:
        self->RXbuffer.head = 0;
    2c1a:	1e 00 78    	mov.w     [w14], w0
    2c1c:	80 00 eb    	clr.w     w1
    2c1e:	01 18 98    	mov.w     w1, [w0+48]

00002c20 <.LSM218>:
        self->RXbuffer.tail = 0;
    2c20:	1e 00 78    	mov.w     [w14], w0
    2c22:	80 00 eb    	clr.w     w1
    2c24:	11 18 98    	mov.w     w1, [w0+50]

00002c26 <.LSM219>:
        self->RXbuffer.count = 0;
    2c26:	1e 00 78    	mov.w     [w14], w0
    2c28:	80 00 eb    	clr.w     w1
    2c2a:	21 18 98    	mov.w     w1, [w0+52]

00002c2c <.LSM220>:
        self->getc = __getc_buffer;
    2c2c:	1e 00 78    	mov.w     [w14], w0
    2c2e:	61 34 22    	mov.w     #0x2346, w1
    2c30:	51 18 98    	mov.w     w1, [w0+58]

00002c32 <.LSM221>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2c32:	1e 00 78    	mov.w     [w14], w0
    2c34:	50 00 90    	mov.w     [w0+10], w0
    2c36:	9e 00 78    	mov.w     [w14], w1
    2c38:	d1 00 90    	mov.w     [w1+10], w1
    2c3a:	11 01 78    	mov.w     [w1], w2
    2c3c:	9e 00 78    	mov.w     [w14], w1
    2c3e:	f1 48 90    	mov.b     [w1+15], w1
    2c40:	81 80 fb    	ze        w1, w1
    2c42:	13 00 20    	mov.w     #0x1, w3
    2c44:	81 18 dd    	sl.w      w3, w1, w1
    2c46:	81 80 ea    	com.w     w1, w1
    2c48:	81 00 61    	and.w     w2, w1, w1
    2c4a:	01 08 78    	mov.w     w1, [w0]

00002c4c <.LSM222>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    2c4c:	1e 00 78    	mov.w     [w14], w0
    2c4e:	60 00 90    	mov.w     [w0+12], w0
    2c50:	9e 00 78    	mov.w     [w14], w1
    2c52:	e1 00 90    	mov.w     [w1+12], w1
    2c54:	11 01 78    	mov.w     [w1], w2
    2c56:	9e 00 78    	mov.w     [w14], w1
    2c58:	f1 48 90    	mov.b     [w1+15], w1
    2c5a:	81 80 fb    	ze        w1, w1
    2c5c:	13 00 20    	mov.w     #0x1, w3
    2c5e:	81 18 dd    	sl.w      w3, w1, w1
    2c60:	82 80 70    	ior.w     w1, w2, w1
    2c62:	01 08 78    	mov.w     w1, [w0]

00002c64 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    2c64:	1e 00 78    	mov.w     [w14], w0
    2c66:	10 00 78    	mov.w     [w0], w0
    2c68:	9e 00 78    	mov.w     [w14], w1
    2c6a:	91 00 78    	mov.w     [w1], w1
    2c6c:	11 01 78    	mov.w     [w1], w2
    2c6e:	01 00 28    	mov.w     #0x8000, w1
    2c70:	82 80 70    	ior.w     w1, w2, w1
    2c72:	01 08 78    	mov.w     w1, [w0]

00002c74 <.LSM224>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    2c74:	1e 00 78    	mov.w     [w14], w0
    2c76:	10 00 90    	mov.w     [w0+2], w0
    2c78:	9e 00 78    	mov.w     [w14], w1
    2c7a:	91 00 90    	mov.w     [w1+2], w1
    2c7c:	11 01 78    	mov.w     [w1], w2
    2c7e:	01 40 20    	mov.w     #0x400, w1
    2c80:	82 80 70    	ior.w     w1, w2, w1
    2c82:	01 08 78    	mov.w     w1, [w0]
    2c84:	17 00 37    	bra       0x2cb4 <.L40>

00002c86 <.L73>:
    2c86:	00 00 00    	nop       
    2c88:	15 00 37    	bra       0x2cb4 <.L40>

00002c8a <.L74>:
    2c8a:	00 00 00    	nop       
    2c8c:	13 00 37    	bra       0x2cb4 <.L40>

00002c8e <.L75>:
    2c8e:	00 00 00    	nop       
    2c90:	11 00 37    	bra       0x2cb4 <.L40>

00002c92 <.L76>:
    2c92:	00 00 00    	nop       
    2c94:	0f 00 37    	bra       0x2cb4 <.L40>

00002c96 <.L77>:
    2c96:	00 00 00    	nop       
    2c98:	0d 00 37    	bra       0x2cb4 <.L40>

00002c9a <.L78>:
    2c9a:	00 00 00    	nop       
    2c9c:	0b 00 37    	bra       0x2cb4 <.L40>

00002c9e <.L79>:
    2c9e:	00 00 00    	nop       
    2ca0:	09 00 37    	bra       0x2cb4 <.L40>

00002ca2 <.L80>:
    2ca2:	00 00 00    	nop       
    2ca4:	07 00 37    	bra       0x2cb4 <.L40>

00002ca6 <.L81>:
    2ca6:	00 00 00    	nop       
    2ca8:	05 00 37    	bra       0x2cb4 <.L40>

00002caa <.L82>:
    2caa:	00 00 00    	nop       
    2cac:	03 00 37    	bra       0x2cb4 <.L40>

00002cae <.L83>:
    2cae:	00 00 00    	nop       
    2cb0:	01 00 37    	bra       0x2cb4 <.L40>

00002cb2 <.L84>:
    2cb2:	00 00 00    	nop       

00002cb4 <.L40>:
}
    2cb4:	4f 04 78    	mov.w     [--w15], w8
    2cb6:	00 80 fa    	ulnk      
    2cb8:	00 00 06    	return    

00002cba <_uart_close>:

void uart_close(_UART *self) {
    2cba:	02 00 fa    	lnk       #0x2
    2cbc:	00 0f 78    	mov.w     w0, [w14]

00002cbe <.LSM234>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2cbe:	1e 00 78    	mov.w     [w14], w0
    2cc0:	10 00 90    	mov.w     [w0+2], w0
    2cc2:	9e 00 78    	mov.w     [w14], w1
    2cc4:	91 00 90    	mov.w     [w1+2], w1
    2cc6:	11 01 78    	mov.w     [w1], w2
    2cc8:	f1 bf 2f    	mov.w     #0xfbff, w1
    2cca:	81 00 61    	and.w     w2, w1, w1
    2ccc:	01 08 78    	mov.w     w1, [w0]

00002cce <.LSM235>:
    *(self->UxMODE) = 0;        // Disable UART module
    2cce:	1e 00 78    	mov.w     [w14], w0
    2cd0:	10 00 78    	mov.w     [w0], w0
    2cd2:	80 00 eb    	clr.w     w1
    2cd4:	01 08 78    	mov.w     w1, [w0]

00002cd6 <.LSM236>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    2cd6:	1e 00 78    	mov.w     [w14], w0
    2cd8:	60 00 90    	mov.w     [w0+12], w0
    2cda:	9e 00 78    	mov.w     [w14], w1
    2cdc:	e1 00 90    	mov.w     [w1+12], w1
    2cde:	11 01 78    	mov.w     [w1], w2
    2ce0:	9e 00 78    	mov.w     [w14], w1
    2ce2:	e1 48 90    	mov.b     [w1+14], w1
    2ce4:	81 80 fb    	ze        w1, w1
    2ce6:	13 00 20    	mov.w     #0x1, w3
    2ce8:	81 18 dd    	sl.w      w3, w1, w1
    2cea:	81 80 ea    	com.w     w1, w1
    2cec:	81 00 61    	and.w     w2, w1, w1
    2cee:	01 08 78    	mov.w     w1, [w0]

00002cf0 <.LSM237>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2cf0:	1e 00 78    	mov.w     [w14], w0
    2cf2:	60 00 90    	mov.w     [w0+12], w0
    2cf4:	9e 00 78    	mov.w     [w14], w1
    2cf6:	e1 00 90    	mov.w     [w1+12], w1
    2cf8:	11 01 78    	mov.w     [w1], w2
    2cfa:	9e 00 78    	mov.w     [w14], w1
    2cfc:	f1 48 90    	mov.b     [w1+15], w1
    2cfe:	81 80 fb    	ze        w1, w1
    2d00:	13 00 20    	mov.w     #0x1, w3
    2d02:	81 18 dd    	sl.w      w3, w1, w1
    2d04:	81 80 ea    	com.w     w1, w1
    2d06:	81 00 61    	and.w     w2, w1, w1
    2d08:	01 08 78    	mov.w     w1, [w0]

00002d0a <.LSM238>:
    self->putc = NULL;
    2d0a:	1e 00 78    	mov.w     [w14], w0
    2d0c:	80 00 eb    	clr.w     w1
    2d0e:	41 18 98    	mov.w     w1, [w0+56]

00002d10 <.LSM239>:
    self->getc = NULL;
    2d10:	1e 00 78    	mov.w     [w14], w0
    2d12:	80 00 eb    	clr.w     w1
    2d14:	51 18 98    	mov.w     w1, [w0+58]

00002d16 <.LSM240>:
    if (self->TX) {
    2d16:	1e 00 78    	mov.w     [w14], w0
    2d18:	50 08 90    	mov.w     [w0+26], w0
    2d1a:	00 00 e0    	cp0.w     w0
    2d1c:	2f 00 32    	bra       Z, 0x2d7c <.L86>

00002d1e <.LSM241>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2d1e:	11 3a 80    	mov.w     0x742, w1
    2d20:	f0 0b 20    	mov.w     #0xbf, w0
    2d22:	00 81 60    	and.w     w1, w0, w2
    2d24:	60 04 20    	mov.w     #0x46, w0
    2d26:	71 05 20    	mov.w     #0x57, w1
    2d28:	23 74 20    	mov.w     #0x742, w3
    2d2a:	80 49 78    	mov.b     w0, [w3]
    2d2c:	81 49 78    	mov.b     w1, [w3]
    2d2e:	82 49 78    	mov.b     w2, [w3]

00002d30 <.LSM242>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2d30:	1e 00 78    	mov.w     [w14], w0
    2d32:	50 08 90    	mov.w     [w0+26], w0
    2d34:	70 00 90    	mov.w     [w0+14], w0
    2d36:	9e 00 78    	mov.w     [w14], w1
    2d38:	d1 08 90    	mov.w     [w1+26], w1
    2d3a:	f1 00 90    	mov.w     [w1+14], w1
    2d3c:	11 01 78    	mov.w     [w1], w2
    2d3e:	9e 00 78    	mov.w     [w14], w1
    2d40:	d1 08 90    	mov.w     [w1+26], w1
    2d42:	a1 48 90    	mov.b     [w1+10], w1
    2d44:	81 80 fb    	ze        w1, w1
    2d46:	f3 03 20    	mov.w     #0x3f, w3
    2d48:	81 18 dd    	sl.w      w3, w1, w1
    2d4a:	81 80 ea    	com.w     w1, w1
    2d4c:	81 00 61    	and.w     w2, w1, w1
    2d4e:	01 08 78    	mov.w     w1, [w0]

00002d50 <.LSM243>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2d50:	11 3a 80    	mov.w     0x742, w1
    2d52:	00 04 20    	mov.w     #0x40, w0
    2d54:	01 01 70    	ior.w     w0, w1, w2
    2d56:	60 04 20    	mov.w     #0x46, w0
    2d58:	71 05 20    	mov.w     #0x57, w1
    2d5a:	23 74 20    	mov.w     #0x742, w3
    2d5c:	80 49 78    	mov.b     w0, [w3]
    2d5e:	81 49 78    	mov.b     w1, [w3]
    2d60:	82 49 78    	mov.b     w2, [w3]

00002d62 <.LSM244>:
        self->TX->owner = NULL;
    2d62:	1e 00 78    	mov.w     [w14], w0
    2d64:	50 08 90    	mov.w     [w0+26], w0
    2d66:	80 00 eb    	clr.w     w1
    2d68:	01 08 98    	mov.w     w1, [w0+16]

00002d6a <.LSM245>:
        pin_digitalOut(self->TX);
    2d6a:	1e 00 78    	mov.w     [w14], w0
    2d6c:	50 08 90    	mov.w     [w0+26], w0
    2d6e:	1a 0a 07    	rcall     0x41a4 <_pin_digitalOut>

00002d70 <.LSM246>:
        pin_set(self->TX);
    2d70:	1e 00 78    	mov.w     [w14], w0
    2d72:	50 08 90    	mov.w     [w0+26], w0
    2d74:	74 0a 07    	rcall     0x425e <_pin_set>

00002d76 <.LSM247>:
        self->TX = NULL;
    2d76:	1e 00 78    	mov.w     [w14], w0
    2d78:	80 00 eb    	clr.w     w1
    2d7a:	51 08 98    	mov.w     w1, [w0+26]

00002d7c <.L86>:
    }
    if (self->RX) {
    2d7c:	1e 00 78    	mov.w     [w14], w0
    2d7e:	60 08 90    	mov.w     [w0+28], w0
    2d80:	00 00 e0    	cp0.w     w0
    2d82:	28 00 32    	bra       Z, 0x2dd4 <.L87>

00002d84 <.LSM249>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2d84:	11 3a 80    	mov.w     0x742, w1
    2d86:	f0 0b 20    	mov.w     #0xbf, w0
    2d88:	00 81 60    	and.w     w1, w0, w2
    2d8a:	60 04 20    	mov.w     #0x46, w0
    2d8c:	71 05 20    	mov.w     #0x57, w1
    2d8e:	23 74 20    	mov.w     #0x742, w3
    2d90:	80 49 78    	mov.b     w0, [w3]
    2d92:	81 49 78    	mov.b     w1, [w3]
    2d94:	82 49 78    	mov.b     w2, [w3]

00002d96 <.LSM250>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2d96:	1e 00 78    	mov.w     [w14], w0
    2d98:	00 08 90    	mov.w     [w0+16], w0
    2d9a:	9e 00 78    	mov.w     [w14], w1
    2d9c:	81 08 90    	mov.w     [w1+16], w1
    2d9e:	11 01 78    	mov.w     [w1], w2
    2da0:	9e 00 78    	mov.w     [w14], w1
    2da2:	c1 50 90    	mov.b     [w1+20], w1
    2da4:	81 80 fb    	ze        w1, w1
    2da6:	f3 03 20    	mov.w     #0x3f, w3
    2da8:	81 18 dd    	sl.w      w3, w1, w1
    2daa:	82 80 70    	ior.w     w1, w2, w1
    2dac:	01 08 78    	mov.w     w1, [w0]

00002dae <.LSM251>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2dae:	11 3a 80    	mov.w     0x742, w1
    2db0:	00 04 20    	mov.w     #0x40, w0
    2db2:	01 01 70    	ior.w     w0, w1, w2
    2db4:	60 04 20    	mov.w     #0x46, w0
    2db6:	71 05 20    	mov.w     #0x57, w1
    2db8:	23 74 20    	mov.w     #0x742, w3
    2dba:	80 49 78    	mov.b     w0, [w3]
    2dbc:	81 49 78    	mov.b     w1, [w3]
    2dbe:	82 49 78    	mov.b     w2, [w3]

00002dc0 <.LSM252>:
        self->RX->owner = NULL;
    2dc0:	1e 00 78    	mov.w     [w14], w0
    2dc2:	60 08 90    	mov.w     [w0+28], w0
    2dc4:	80 00 eb    	clr.w     w1
    2dc6:	01 08 98    	mov.w     w1, [w0+16]

00002dc8 <.LSM253>:
        pin_digitalIn(self->RX);
    2dc8:	1e 00 78    	mov.w     [w14], w0
    2dca:	60 08 90    	mov.w     [w0+28], w0
    2dcc:	c4 09 07    	rcall     0x4156 <_pin_digitalIn>

00002dce <.LSM254>:
        self->RX = NULL;
    2dce:	1e 00 78    	mov.w     [w14], w0
    2dd0:	80 00 eb    	clr.w     w1
    2dd2:	61 08 98    	mov.w     w1, [w0+28]

00002dd4 <.L87>:
    }
    if (self->RTS) {
    2dd4:	1e 00 78    	mov.w     [w14], w0
    2dd6:	70 08 90    	mov.w     [w0+30], w0
    2dd8:	00 00 e0    	cp0.w     w0
    2dda:	2f 00 32    	bra       Z, 0x2e3a <.L88>

00002ddc <.LSM256>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2ddc:	11 3a 80    	mov.w     0x742, w1
    2dde:	f0 0b 20    	mov.w     #0xbf, w0
    2de0:	00 81 60    	and.w     w1, w0, w2
    2de2:	60 04 20    	mov.w     #0x46, w0
    2de4:	71 05 20    	mov.w     #0x57, w1
    2de6:	23 74 20    	mov.w     #0x742, w3
    2de8:	80 49 78    	mov.b     w0, [w3]
    2dea:	81 49 78    	mov.b     w1, [w3]
    2dec:	82 49 78    	mov.b     w2, [w3]

00002dee <.LSM257>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2dee:	1e 00 78    	mov.w     [w14], w0
    2df0:	70 08 90    	mov.w     [w0+30], w0
    2df2:	70 00 90    	mov.w     [w0+14], w0
    2df4:	9e 00 78    	mov.w     [w14], w1
    2df6:	f1 08 90    	mov.w     [w1+30], w1
    2df8:	f1 00 90    	mov.w     [w1+14], w1
    2dfa:	11 01 78    	mov.w     [w1], w2
    2dfc:	9e 00 78    	mov.w     [w14], w1
    2dfe:	f1 08 90    	mov.w     [w1+30], w1
    2e00:	a1 48 90    	mov.b     [w1+10], w1
    2e02:	81 80 fb    	ze        w1, w1
    2e04:	f3 03 20    	mov.w     #0x3f, w3
    2e06:	81 18 dd    	sl.w      w3, w1, w1
    2e08:	81 80 ea    	com.w     w1, w1
    2e0a:	81 00 61    	and.w     w2, w1, w1
    2e0c:	01 08 78    	mov.w     w1, [w0]

00002e0e <.LSM258>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2e0e:	11 3a 80    	mov.w     0x742, w1
    2e10:	00 04 20    	mov.w     #0x40, w0
    2e12:	01 01 70    	ior.w     w0, w1, w2
    2e14:	60 04 20    	mov.w     #0x46, w0
    2e16:	71 05 20    	mov.w     #0x57, w1
    2e18:	23 74 20    	mov.w     #0x742, w3
    2e1a:	80 49 78    	mov.b     w0, [w3]
    2e1c:	81 49 78    	mov.b     w1, [w3]
    2e1e:	82 49 78    	mov.b     w2, [w3]

00002e20 <.LSM259>:
        self->RTS->owner = NULL;
    2e20:	1e 00 78    	mov.w     [w14], w0
    2e22:	70 08 90    	mov.w     [w0+30], w0
    2e24:	80 00 eb    	clr.w     w1
    2e26:	01 08 98    	mov.w     w1, [w0+16]

00002e28 <.LSM260>:
        pin_digitalOut(self->RTS);
    2e28:	1e 00 78    	mov.w     [w14], w0
    2e2a:	70 08 90    	mov.w     [w0+30], w0
    2e2c:	bb 09 07    	rcall     0x41a4 <_pin_digitalOut>

00002e2e <.LSM261>:
        pin_set(self->RTS);
    2e2e:	1e 00 78    	mov.w     [w14], w0
    2e30:	70 08 90    	mov.w     [w0+30], w0
    2e32:	15 0a 07    	rcall     0x425e <_pin_set>

00002e34 <.LSM262>:
        self->RTS = NULL;
    2e34:	1e 00 78    	mov.w     [w14], w0
    2e36:	80 00 eb    	clr.w     w1
    2e38:	71 08 98    	mov.w     w1, [w0+30]

00002e3a <.L88>:
    }
    if (self->CTS) {
    2e3a:	1e 00 78    	mov.w     [w14], w0
    2e3c:	00 10 90    	mov.w     [w0+32], w0
    2e3e:	00 00 e0    	cp0.w     w0
    2e40:	28 00 32    	bra       Z, 0x2e92 <.L85>

00002e42 <.LSM264>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2e42:	11 3a 80    	mov.w     0x742, w1
    2e44:	f0 0b 20    	mov.w     #0xbf, w0
    2e46:	00 81 60    	and.w     w1, w0, w2
    2e48:	60 04 20    	mov.w     #0x46, w0
    2e4a:	71 05 20    	mov.w     #0x57, w1
    2e4c:	23 74 20    	mov.w     #0x742, w3
    2e4e:	80 49 78    	mov.b     w0, [w3]
    2e50:	81 49 78    	mov.b     w1, [w3]
    2e52:	82 49 78    	mov.b     w2, [w3]

00002e54 <.LSM265>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2e54:	1e 00 78    	mov.w     [w14], w0
    2e56:	10 08 90    	mov.w     [w0+18], w0
    2e58:	9e 00 78    	mov.w     [w14], w1
    2e5a:	91 08 90    	mov.w     [w1+18], w1
    2e5c:	11 01 78    	mov.w     [w1], w2
    2e5e:	9e 00 78    	mov.w     [w14], w1
    2e60:	d1 50 90    	mov.b     [w1+21], w1
    2e62:	81 80 fb    	ze        w1, w1
    2e64:	f3 03 20    	mov.w     #0x3f, w3
    2e66:	81 18 dd    	sl.w      w3, w1, w1
    2e68:	82 80 70    	ior.w     w1, w2, w1
    2e6a:	01 08 78    	mov.w     w1, [w0]

00002e6c <.LSM266>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2e6c:	11 3a 80    	mov.w     0x742, w1
    2e6e:	00 04 20    	mov.w     #0x40, w0
    2e70:	01 01 70    	ior.w     w0, w1, w2
    2e72:	60 04 20    	mov.w     #0x46, w0
    2e74:	71 05 20    	mov.w     #0x57, w1
    2e76:	23 74 20    	mov.w     #0x742, w3
    2e78:	80 49 78    	mov.b     w0, [w3]
    2e7a:	81 49 78    	mov.b     w1, [w3]
    2e7c:	82 49 78    	mov.b     w2, [w3]

00002e7e <.LSM267>:
        self->CTS->owner = NULL;
    2e7e:	1e 00 78    	mov.w     [w14], w0
    2e80:	00 10 90    	mov.w     [w0+32], w0
    2e82:	80 00 eb    	clr.w     w1
    2e84:	01 08 98    	mov.w     w1, [w0+16]

00002e86 <.LSM268>:
        pin_digitalIn(self->CTS);
    2e86:	1e 00 78    	mov.w     [w14], w0
    2e88:	00 10 90    	mov.w     [w0+32], w0
    2e8a:	65 09 07    	rcall     0x4156 <_pin_digitalIn>

00002e8c <.LSM269>:
        self->CTS = NULL;
    2e8c:	1e 00 78    	mov.w     [w14], w0
    2e8e:	80 00 eb    	clr.w     w1
    2e90:	01 10 98    	mov.w     w1, [w0+32]

00002e92 <.L85>:
    }
}
    2e92:	00 80 fa    	ulnk      
    2e94:	00 00 06    	return    

00002e96 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2e96:	04 00 fa    	lnk       #0x4
    2e98:	00 0f 78    	mov.w     w0, [w14]
    2e9a:	21 47 98    	mov.b     w1, [w14+2]

00002e9c <.LSM272>:
    if (self->putc)
    2e9c:	1e 00 78    	mov.w     [w14], w0
    2e9e:	40 18 90    	mov.w     [w0+56], w0
    2ea0:	00 00 e0    	cp0.w     w0
    2ea2:	05 00 32    	bra       Z, 0x2eae <.L90>

00002ea4 <.LSM273>:
        self->putc(self, ch);
    2ea4:	1e 00 78    	mov.w     [w14], w0
    2ea6:	40 19 90    	mov.w     [w0+56], w2
    2ea8:	ae 40 90    	mov.b     [w14+2], w1
    2eaa:	1e 00 78    	mov.w     [w14], w0
    2eac:	02 00 01    	call      w2

00002eae <.L90>:
}
    2eae:	00 80 fa    	ulnk      
    2eb0:	00 00 06    	return    

00002eb2 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2eb2:	02 00 fa    	lnk       #0x2
    2eb4:	00 0f 78    	mov.w     w0, [w14]

00002eb6 <.LSM276>:
    if (self->getc)
    2eb6:	1e 00 78    	mov.w     [w14], w0
    2eb8:	50 18 90    	mov.w     [w0+58], w0
    2eba:	00 00 e0    	cp0.w     w0
    2ebc:	05 00 32    	bra       Z, 0x2ec8 <.L93>

00002ebe <.LSM277>:
        return self->getc(self);
    2ebe:	1e 00 78    	mov.w     [w14], w0
    2ec0:	d0 18 90    	mov.w     [w0+58], w1
    2ec2:	1e 00 78    	mov.w     [w14], w0
    2ec4:	01 00 01    	call      w1
    2ec6:	01 00 37    	bra       0x2eca <.L94>

00002ec8 <.L93>:
    else
        return 0xFF;
    2ec8:	00 c0 eb    	setm.b    w0

00002eca <.L94>:
}
    2eca:	00 80 fa    	ulnk      
    2ecc:	00 00 06    	return    

00002ece <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2ece:	02 00 fa    	lnk       #0x2
    2ed0:	00 0f 78    	mov.w     w0, [w14]

00002ed2 <.LSM281>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2ed2:	1e 00 78    	mov.w     [w14], w0
    2ed4:	10 00 90    	mov.w     [w0+2], w0
    2ed6:	90 00 78    	mov.w     [w0], w1
    2ed8:	00 40 20    	mov.w     #0x400, w0
    2eda:	00 80 60    	and.w     w1, w0, w0
    2edc:	00 00 e0    	cp0.w     w0
    2ede:	08 00 3a    	bra       NZ, 0x2ef0 <.L95>

00002ee0 <.LSM282>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2ee0:	1e 00 78    	mov.w     [w14], w0
    2ee2:	10 00 90    	mov.w     [w0+2], w0
    2ee4:	9e 00 78    	mov.w     [w14], w1
    2ee6:	91 00 90    	mov.w     [w1+2], w1
    2ee8:	11 01 78    	mov.w     [w1], w2
    2eea:	01 40 20    	mov.w     #0x400, w1
    2eec:	82 80 70    	ior.w     w1, w2, w1
    2eee:	01 08 78    	mov.w     w1, [w0]

00002ef0 <.L95>:
}
    2ef0:	00 80 fa    	ulnk      
    2ef2:	00 00 06    	return    

00002ef4 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2ef4:	04 00 fa    	lnk       #0x4
    2ef6:	00 0f 78    	mov.w     w0, [w14]
    2ef8:	11 07 98    	mov.w     w1, [w14+2]

00002efa <.LSM285>:
    while (*str)
    2efa:	08 00 37    	bra       0x2f0c <.L98>

00002efc <.L99>:
        uart_putc(self, *str++);
    2efc:	1e 00 90    	mov.w     [w14+2], w0
    2efe:	10 40 78    	mov.b     [w0], w0
    2f00:	9e 00 90    	mov.w     [w14+2], w1
    2f02:	81 00 e8    	inc.w     w1, w1
    2f04:	11 07 98    	mov.w     w1, [w14+2]
    2f06:	80 40 78    	mov.b     w0, w1
    2f08:	1e 00 78    	mov.w     [w14], w0
    2f0a:	c5 ff 07    	rcall     0x2e96 <_uart_putc>

00002f0c <.L98>:
    2f0c:	1e 00 90    	mov.w     [w14+2], w0
    2f0e:	10 40 78    	mov.b     [w0], w0
    2f10:	00 04 e0    	cp0.b     w0
    2f12:	f4 ff 3a    	bra       NZ, 0x2efc <.L99>

00002f14 <.LSM288>:
    uart_flushTxBuffer(self);
    2f14:	1e 00 78    	mov.w     [w14], w0
    2f16:	db ff 07    	rcall     0x2ece <_uart_flushTxBuffer>

00002f18 <.LSM289>:
}
    2f18:	00 80 fa    	ulnk      
    2f1a:	00 00 06    	return    

00002f1c <_uart_gets_term>:

void uart_gets_term(_UART *self, uint8_t *str, uint16_t len) {
    2f1c:	0a 00 fa    	lnk       #0xa
    2f1e:	20 07 98    	mov.w     w0, [w14+4]
    2f20:	31 07 98    	mov.w     w1, [w14+6]
    2f22:	42 07 98    	mov.w     w2, [w14+8]

00002f24 <.LSM291>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2f24:	4e 00 90    	mov.w     [w14+8], w0
    2f26:	00 00 e0    	cp0.w     w0
    2f28:	87 00 32    	bra       Z, 0x3038 <.L113>

00002f2a <.LSM292>:
        return;

    if (len==1) {
    2f2a:	4e 00 90    	mov.w     [w14+8], w0
    2f2c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2f2e:	04 00 3a    	bra       NZ, 0x2f38 <.L103>

00002f30 <.LSM293>:
        *str = '\0';
    2f30:	3e 00 90    	mov.w     [w14+6], w0
    2f32:	80 40 eb    	clr.b     w1
    2f34:	01 48 78    	mov.b     w1, [w0]

00002f36 <.LSM294>:
        return;
    2f36:	81 00 37    	bra       0x303a <.L100>

00002f38 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2f38:	b1 c1 b3    	mov.b     #0x1b, w1
    2f3a:	2e 00 90    	mov.w     [w14+4], w0
    2f3c:	ac ff 07    	rcall     0x2e96 <_uart_putc>

00002f3e <.LSM296>:
    uart_putc(self, '7');
    2f3e:	71 c3 b3    	mov.b     #0x37, w1
    2f40:	2e 00 90    	mov.w     [w14+4], w0
    2f42:	a9 ff 07    	rcall     0x2e96 <_uart_putc>

00002f44 <.LSM297>:
    uart_flushTxBuffer(self);
    2f44:	2e 00 90    	mov.w     [w14+4], w0
    2f46:	c3 ff 07    	rcall     0x2ece <_uart_flushTxBuffer>

00002f48 <.LSM298>:
    start = str;
    2f48:	be 00 90    	mov.w     [w14+6], w1
    2f4a:	11 07 98    	mov.w     w1, [w14+2]

00002f4c <.LSM299>:
    left = len;
    2f4c:	ce 00 90    	mov.w     [w14+8], w1
    2f4e:	01 0f 78    	mov.w     w1, [w14]
    2f50:	03 00 37    	bra       0x2f58 <.L112>

00002f52 <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2f52:	00 00 00    	nop       
    2f54:	01 00 37    	bra       0x2f58 <.L112>

00002f56 <.L115>:
    2f56:	00 00 00    	nop       

00002f58 <.L112>:
    2f58:	2e 00 90    	mov.w     [w14+4], w0
    2f5a:	ab ff 07    	rcall     0x2eb2 <_uart_getc>
    2f5c:	be 00 90    	mov.w     [w14+6], w1
    2f5e:	80 48 78    	mov.b     w0, [w1]

00002f60 <.LSM302>:
    2f60:	3e 00 90    	mov.w     [w14+6], w0
    2f62:	10 40 78    	mov.b     [w0], w0
    2f64:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2f66:	0c 00 3a    	bra       NZ, 0x2f80 <.L104>

00002f68 <.LSM303>:

    *str = '\0';                            // Terminarte the string with null
    2f68:	3e 00 90    	mov.w     [w14+6], w0
    2f6a:	80 40 eb    	clr.b     w1
    2f6c:	01 48 78    	mov.b     w1, [w0]

00002f6e <.LSM304>:
    uart_putc(self, '\n');                  // Send newline and
    2f6e:	a1 c0 b3    	mov.b     #0xa, w1
    2f70:	2e 00 90    	mov.w     [w14+4], w0
    2f72:	91 ff 07    	rcall     0x2e96 <_uart_putc>

00002f74 <.LSM305>:
    uart_putc(self, '\r');                  //   carriage return
    2f74:	d1 c0 b3    	mov.b     #0xd, w1
    2f76:	2e 00 90    	mov.w     [w14+4], w0
    2f78:	8e ff 07    	rcall     0x2e96 <_uart_putc>

00002f7a <.LSM306>:
    uart_flushTxBuffer(self);
    2f7a:	2e 00 90    	mov.w     [w14+4], w0
    2f7c:	a8 ff 07    	rcall     0x2ece <_uart_flushTxBuffer>
    2f7e:	5d 00 37    	bra       0x303a <.L100>

00002f80 <.L104>:
    2f80:	3e 00 90    	mov.w     [w14+6], w0
    2f82:	10 40 78    	mov.b     [w0], w0
    2f84:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2f86:	16 00 3a    	bra       NZ, 0x2fb4 <.L105>

00002f88 <.LSM308>:
    2f88:	b1 c1 b3    	mov.b     #0x1b, w1
    2f8a:	2e 00 90    	mov.w     [w14+4], w0
    2f8c:	84 ff 07    	rcall     0x2e96 <_uart_putc>

00002f8e <.LSM309>:
    2f8e:	81 c3 b3    	mov.b     #0x38, w1
    2f90:	2e 00 90    	mov.w     [w14+4], w0
    2f92:	81 ff 07    	rcall     0x2e96 <_uart_putc>

00002f94 <.LSM310>:
    2f94:	b1 c1 b3    	mov.b     #0x1b, w1
    2f96:	2e 00 90    	mov.w     [w14+4], w0
    2f98:	7e ff 07    	rcall     0x2e96 <_uart_putc>

00002f9a <.LSM311>:
    2f9a:	b1 c5 b3    	mov.b     #0x5b, w1
    2f9c:	2e 00 90    	mov.w     [w14+4], w0
    2f9e:	7b ff 07    	rcall     0x2e96 <_uart_putc>

00002fa0 <.LSM312>:
    2fa0:	b1 c4 b3    	mov.b     #0x4b, w1
    2fa2:	2e 00 90    	mov.w     [w14+4], w0
    2fa4:	78 ff 07    	rcall     0x2e96 <_uart_putc>

00002fa6 <.LSM313>:
    2fa6:	2e 00 90    	mov.w     [w14+4], w0
    2fa8:	92 ff 07    	rcall     0x2ece <_uart_flushTxBuffer>

00002faa <.LSM314>:
    2faa:	9e 00 90    	mov.w     [w14+2], w1
    2fac:	31 07 98    	mov.w     w1, [w14+6]

00002fae <.LSM315>:
    2fae:	ce 00 90    	mov.w     [w14+8], w1
    2fb0:	01 0f 78    	mov.w     w1, [w14]

00002fb2 <.LSM316>:
    2fb2:	41 00 37    	bra       0x3036 <.L106>

00002fb4 <.L105>:
    2fb4:	3e 00 90    	mov.w     [w14+6], w0
    2fb6:	10 40 78    	mov.b     [w0], w0
    2fb8:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2fba:	05 00 32    	bra       Z, 0x2fc6 <.L107>

00002fbc <.LSM318>:
    2fbc:	3e 00 90    	mov.w     [w14+6], w0
    2fbe:	90 40 78    	mov.b     [w0], w1

00002fc0 <.LSM319>:
    2fc0:	f0 c7 b3    	mov.b     #0x7f, w0
    2fc2:	80 cf 50    	sub.b     w1, w0, [w15]
    2fc4:	1a 00 3a    	bra       NZ, 0x2ffa <.L108>

00002fc6 <.L107>:
    2fc6:	be 00 90    	mov.w     [w14+6], w1
    2fc8:	1e 00 90    	mov.w     [w14+2], w0
    2fca:	80 8f 50    	sub.w     w1, w0, [w15]
    2fcc:	10 00 36    	bra       LEU, 0x2fee <.L109>

00002fce <.LSM321>:
    2fce:	81 c0 b3    	mov.b     #0x8, w1
    2fd0:	2e 00 90    	mov.w     [w14+4], w0
    2fd2:	61 ff 07    	rcall     0x2e96 <_uart_putc>

00002fd4 <.LSM322>:
    2fd4:	01 c2 b3    	mov.b     #0x20, w1
    2fd6:	2e 00 90    	mov.w     [w14+4], w0
    2fd8:	5e ff 07    	rcall     0x2e96 <_uart_putc>

00002fda <.LSM323>:
    2fda:	81 c0 b3    	mov.b     #0x8, w1
    2fdc:	2e 00 90    	mov.w     [w14+4], w0
    2fde:	5b ff 07    	rcall     0x2e96 <_uart_putc>

00002fe0 <.LSM324>:
    2fe0:	2e 00 90    	mov.w     [w14+4], w0
    2fe2:	75 ff 07    	rcall     0x2ece <_uart_flushTxBuffer>

00002fe4 <.LSM325>:
    2fe4:	3e 00 90    	mov.w     [w14+6], w0
    2fe6:	00 00 e9    	dec.w     w0, w0
    2fe8:	30 07 98    	mov.w     w0, [w14+6]

00002fea <.LSM326>:
    2fea:	1e 0f e8    	inc.w     [w14], [w14]
    2fec:	05 00 37    	bra       0x2ff8 <.L110>

00002fee <.L109>:
    2fee:	71 c0 b3    	mov.b     #0x7, w1
    2ff0:	2e 00 90    	mov.w     [w14+4], w0
    2ff2:	51 ff 07    	rcall     0x2e96 <_uart_putc>

00002ff4 <.LSM328>:
    2ff4:	2e 00 90    	mov.w     [w14+4], w0
    2ff6:	6b ff 07    	rcall     0x2ece <_uart_flushTxBuffer>

00002ff8 <.L110>:
    2ff8:	1e 00 37    	bra       0x3036 <.L106>

00002ffa <.L108>:
    2ffa:	1e 00 78    	mov.w     [w14], w0
    2ffc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2ffe:	06 00 3a    	bra       NZ, 0x300c <.L111>

00003000 <.LSM331>:
    3000:	71 c0 b3    	mov.b     #0x7, w1
    3002:	2e 00 90    	mov.w     [w14+4], w0
    3004:	48 ff 07    	rcall     0x2e96 <_uart_putc>

00003006 <.LSM332>:
    3006:	2e 00 90    	mov.w     [w14+4], w0
    3008:	62 ff 07    	rcall     0x2ece <_uart_flushTxBuffer>

0000300a <.LSM333>:
    300a:	15 00 37    	bra       0x3036 <.L106>

0000300c <.L111>:
    300c:	3e 00 90    	mov.w     [w14+6], w0
    300e:	10 40 78    	mov.b     [w0], w0
    3010:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    3012:	9f ff 36    	bra       LEU, 0x2f52 <.L114>
    3014:	3e 00 90    	mov.w     [w14+6], w0
    3016:	90 40 78    	mov.b     [w0], w1
    3018:	e0 c7 b3    	mov.b     #0x7e, w0
    301a:	80 cf 50    	sub.b     w1, w0, [w15]
    301c:	9c ff 3e    	bra       GTU, 0x2f56 <.L115>

0000301e <.LSM335>:
    301e:	3e 00 90    	mov.w     [w14+6], w0
    3020:	10 40 78    	mov.b     [w0], w0
    3022:	80 40 78    	mov.b     w0, w1
    3024:	2e 00 90    	mov.w     [w14+4], w0
    3026:	37 ff 07    	rcall     0x2e96 <_uart_putc>

00003028 <.LSM336>:
    3028:	2e 00 90    	mov.w     [w14+4], w0
    302a:	51 ff 07    	rcall     0x2ece <_uart_flushTxBuffer>

0000302c <.LSM337>:
    302c:	3e 00 90    	mov.w     [w14+6], w0
    302e:	00 00 e8    	inc.w     w0, w0
    3030:	30 07 98    	mov.w     w0, [w14+6]

00003032 <.LSM338>:
    3032:	1e 0f e9    	dec.w     [w14], [w14]

00003034 <.LSM339>:
    3034:	91 ff 37    	bra       0x2f58 <.L112>

00003036 <.L106>:
    3036:	90 ff 37    	bra       0x2f58 <.L112>

00003038 <.L113>:
    3038:	00 00 00    	nop       

0000303a <.L100>:
}
    303a:	00 80 fa    	ulnk      
    303c:	00 00 06    	return    

0000303e <_uart_gets>:


void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    303e:	0c 00 fa    	lnk       #0xc
    3040:	30 07 98    	mov.w     w0, [w14+6]
    3042:	41 07 98    	mov.w     w1, [w14+8]
    3044:	52 07 98    	mov.w     w2, [w14+10]

00003046 <.LSM343>:
    uint8_t *start;
    uint16_t left;
    uint8_t char_count = 0;
    3046:	00 40 eb    	clr.b     w0
    3048:	00 4f 78    	mov.b     w0, [w14]

0000304a <.LSM344>:

    if (len==0)
    304a:	5e 00 90    	mov.w     [w14+10], w0
    304c:	00 00 e0    	cp0.w     w0
    304e:	2f 00 32    	bra       Z, 0x30ae <.L125>

00003050 <.LSM345>:
        return;

    if (len==1) {
    3050:	5e 00 90    	mov.w     [w14+10], w0
    3052:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3054:	04 00 3a    	bra       NZ, 0x305e <.L119>

00003056 <.LSM346>:
        *str = '\0';
    3056:	4e 00 90    	mov.w     [w14+8], w0
    3058:	80 40 eb    	clr.b     w1
    305a:	01 48 78    	mov.b     w1, [w0]

0000305c <.LSM347>:
        return;
    305c:	29 00 37    	bra       0x30b0 <.L116>

0000305e <.L119>:
    }

    // uart_flushTxBuffer(self);
    start = str;
    305e:	ce 00 90    	mov.w     [w14+8], w1
    3060:	11 07 98    	mov.w     w1, [w14+2]

00003062 <.LSM349>:
    left = len;
    3062:	de 00 90    	mov.w     [w14+10], w1
    3064:	21 07 98    	mov.w     w1, [w14+4]
    3066:	03 00 37    	bra       0x306e <.L124>

00003068 <.L128>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        char_count ++;
        if (*str=='\r') {                     // If character is return,
            break;
        }
        if (char_count >= UART_MSG_MAX_LEN) { // Terminate if max length reached.
            break;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            str++;                          //   and advance the pointer.

        }
    }
    3068:	00 00 00    	nop       
    306a:	01 00 37    	bra       0x306e <.L124>

0000306c <.L129>:
    306c:	00 00 00    	nop       

0000306e <.L124>:
    306e:	3e 00 90    	mov.w     [w14+6], w0
    3070:	20 ff 07    	rcall     0x2eb2 <_uart_getc>
    3072:	ce 00 90    	mov.w     [w14+8], w1
    3074:	80 48 78    	mov.b     w0, [w1]

00003076 <.LSM352>:
    3076:	1e 4f e8    	inc.b     [w14], [w14]

00003078 <.LSM353>:
    3078:	4e 00 90    	mov.w     [w14+8], w0
    307a:	10 40 78    	mov.b     [w0], w0
    307c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    307e:	10 00 32    	bra       Z, 0x30a0 <.L126>

00003080 <.LSM354>:
    3080:	1e 40 78    	mov.b     [w14], w0
    3082:	00 04 e0    	cp0.b     w0
    3084:	0f 00 35    	bra       LT, 0x30a4 <.L127>

00003086 <.LSM355>:
    3086:	4e 00 90    	mov.w     [w14+8], w0
    3088:	10 40 78    	mov.b     [w0], w0
    308a:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    308c:	ed ff 36    	bra       LEU, 0x3068 <.L128>
    308e:	4e 00 90    	mov.w     [w14+8], w0
    3090:	90 40 78    	mov.b     [w0], w1
    3092:	e0 c7 b3    	mov.b     #0x7e, w0
    3094:	80 cf 50    	sub.b     w1, w0, [w15]
    3096:	ea ff 3e    	bra       GTU, 0x306c <.L129>

00003098 <.LSM356>:
    3098:	4e 00 90    	mov.w     [w14+8], w0
    309a:	00 00 e8    	inc.w     w0, w0
    309c:	40 07 98    	mov.w     w0, [w14+8]

0000309e <.LSM357>:
    309e:	e7 ff 37    	bra       0x306e <.L124>

000030a0 <.L126>:
    30a0:	00 00 00    	nop       
    30a2:	01 00 37    	bra       0x30a6 <.L121>

000030a4 <.L127>:
    30a4:	00 00 00    	nop       

000030a6 <.L121>:
    *str = '\0';  
    30a6:	4e 00 90    	mov.w     [w14+8], w0
    30a8:	80 40 eb    	clr.b     w1
    30aa:	01 48 78    	mov.b     w1, [w0]
    30ac:	01 00 37    	bra       0x30b0 <.L116>

000030ae <.L125>:
    30ae:	00 00 00    	nop       

000030b0 <.L116>:
}         
    30b0:	00 80 fa    	ulnk      
    30b2:	00 00 06    	return    

000030b4 <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    30b4:	04 00 fa    	lnk       #0x4

000030b6 <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    30b6:	94 24 a8    	bset.b    0x494, #0x1

000030b8 <.LSM2>:
    U1ADDR = 0;
    30b8:	96 24 ef    	clr.w     0x496

000030ba <.LSM3>:
    U1EIR = 0xFF;
    30ba:	f0 0f 20    	mov.w     #0xff, w0
    30bc:	70 24 88    	mov.w     w0, 0x48e

000030be <.LSM4>:
    U1CONbits.PPBRST = 0;
    30be:	94 24 a9    	bclr.b    0x494, #0x1

000030c0 <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    30c0:	a0 4a 20    	mov.w     #0x4aa, w0
    30c2:	10 07 98    	mov.w     w0, [w14+2]

000030c4 <.LSM6>:
    for (n = 0; n<16; n++)
    30c4:	00 40 eb    	clr.b     w0
    30c6:	00 4f 78    	mov.b     w0, [w14]
    30c8:	07 00 37    	bra       0x30d8 <.L2>

000030ca <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    30ca:	1e 80 fb    	ze        [w14], w0
    30cc:	00 00 40    	add.w     w0, w0, w0
    30ce:	9e 00 90    	mov.w     [w14+2], w1
    30d0:	00 80 40    	add.w     w1, w0, w0
    30d2:	80 00 eb    	clr.w     w1
    30d4:	01 08 78    	mov.w     w1, [w0]

000030d6 <.LSM8>:
    30d6:	1e 4f e8    	inc.b     [w14], [w14]

000030d8 <.L2>:
    30d8:	1e 40 78    	mov.b     [w14], w0
    30da:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    30dc:	f6 ff 36    	bra       LEU, 0x30ca <.L3>

000030de <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    30de:	d0 00 20    	mov.w     #0xd, w0
    30e0:	50 25 88    	mov.w     w0, 0x4aa

000030e2 <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    30e2:	00 e0 21    	mov.w     #0x1e00, w0
    30e4:	01 c4 b3    	mov.b     #0x40, w1
    30e6:	01 48 78    	mov.b     w1, [w0]

000030e8 <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    30e8:	20 cc 21    	mov.w     #0x1cc2, w0
    30ea:	10 f0 88    	mov.w     w0, 0x1e02

000030ec <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    30ec:	10 e0 21    	mov.w     #0x1e01, w0
    30ee:	81 c8 b3    	mov.b     #0x88, w1
    30f0:	01 48 78    	mov.b     w1, [w0]

000030f2 <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    30f2:	20 d0 21    	mov.w     #0x1d02, w0
    30f4:	30 f0 88    	mov.w     w0, 0x1e06

000030f6 <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    30f6:	50 e0 21    	mov.w     #0x1e05, w0
    30f8:	81 c0 b3    	mov.b     #0x8, w1
    30fa:	01 48 78    	mov.b     w1, [w0]

000030fc <.LSM15>:
    U1CNFG1 = 0x00;
    30fc:	a6 24 ef    	clr.w     0x4a6

000030fe <.LSM16>:
    U1CNFG2 = 0x00;
    30fe:	a8 24 ef    	clr.w     0x4a8

00003100 <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    3100:	00 e0 21    	mov.w     #0x1e00, w0
    3102:	48 00 de    	lsr.w     w0, #0x8, w0
    3104:	c0 24 88    	mov.w     w0, 0x498

00003106 <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    3106:	86 44 a8    	bset.b    0x486, #0x2

00003108 <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    3108:	86 e4 a8    	bset.b    0x486, #0x7

0000310a <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    310a:	88 04 a8    	bset.b    0x488, #0x0

0000310c <.LSM21>:
    U1CONbits.PKTDIS = 0;
    310c:	94 a4 a9    	bclr.b    0x494, #0x5

0000310e <.LSM22>:
    USB_curr_config = 0x00;
    310e:	5d 68 ef    	clr.b     0x85d

00003110 <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    3110:	60 68 ef    	clr.b     0x860

00003112 <.LSM24>:
    USB_device_status = 0x01;
    3112:	10 c0 b3    	mov.b     #0x1, w0
    3114:	5e e8 b7    	mov.b     WREG, 0x85e

00003116 <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    3116:	20 d4 21    	mov.w     #0x1d42, w0
    3118:	80 c0 eb    	setm.b    w1
    311a:	01 48 78    	mov.b     w1, [w0]

0000311c <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    311c:	30 d4 21    	mov.w     #0x1d43, w0
    311e:	80 c0 eb    	setm.b    w1
    3120:	01 48 78    	mov.b     w1, [w0]

00003122 <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    3122:	00 00 00    	nop       

00003124 <.L4>:
    3124:	a1 24 80    	mov.w     0x494, w1
    3126:	00 04 20    	mov.w     #0x40, w0
    3128:	00 80 60    	and.w     w1, w0, w0
    312a:	00 00 e0    	cp0.w     w0
    312c:	fb ff 3a    	bra       NZ, 0x3124 <.L4>

0000312e <.LSM28>:
}
    312e:	00 80 fa    	ulnk      
    3130:	00 00 06    	return    

00003132 <_ServiceUSB>:

void ServiceUSB(void) {
    3132:	06 00 fa    	lnk       #0x6

00003134 <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    3134:	50 24 80    	mov.w     0x48a, w0
    3136:	62 00 60    	and.w     w0, #0x2, w0
    3138:	00 00 e0    	cp0.w     w0
    313a:	05 00 32    	bra       Z, 0x3146 <.L6>

0000313c <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    313c:	f0 0f 20    	mov.w     #0xff, w0
    313e:	70 24 88    	mov.w     w0, 0x48e

00003140 <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    3140:	20 00 20    	mov.w     #0x2, w0
    3142:	50 24 88    	mov.w     w0, 0x48a
    3144:	90 00 37    	bra       0x3266 <.L5>

00003146 <.L6>:
    } else if (U1IRbits.SOFIF) {
    3146:	50 24 80    	mov.w     0x48a, w0
    3148:	64 00 60    	and.w     w0, #0x4, w0
    314a:	00 00 e0    	cp0.w     w0
    314c:	03 00 32    	bra       Z, 0x3154 <.L8>

0000314e <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    314e:	40 00 20    	mov.w     #0x4, w0
    3150:	50 24 88    	mov.w     w0, 0x48a
    3152:	89 00 37    	bra       0x3266 <.L5>

00003154 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    3154:	50 24 80    	mov.w     0x48a, w0
    3156:	70 00 60    	and.w     w0, #0x10, w0
    3158:	00 00 e0    	cp0.w     w0
    315a:	03 00 32    	bra       Z, 0x3162 <.L9>

0000315c <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    315c:	00 01 20    	mov.w     #0x10, w0
    315e:	50 24 88    	mov.w     w0, 0x48a
    3160:	82 00 37    	bra       0x3266 <.L5>

00003162 <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    3162:	51 24 80    	mov.w     0x48a, w1
    3164:	00 02 20    	mov.w     #0x20, w0
    3166:	00 80 60    	and.w     w1, w0, w0
    3168:	00 00 e0    	cp0.w     w0
    316a:	03 00 32    	bra       Z, 0x3172 <.L10>

0000316c <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    316c:	00 02 20    	mov.w     #0x20, w0
    316e:	50 24 88    	mov.w     w0, 0x48a
    3170:	7a 00 37    	bra       0x3266 <.L5>

00003172 <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    3172:	51 24 80    	mov.w     0x48a, w1
    3174:	00 08 20    	mov.w     #0x80, w0
    3176:	00 80 60    	and.w     w1, w0, w0
    3178:	00 00 e0    	cp0.w     w0
    317a:	03 00 32    	bra       Z, 0x3182 <.L11>

0000317c <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    317c:	00 08 20    	mov.w     #0x80, w0
    317e:	50 24 88    	mov.w     w0, 0x48a
    3180:	72 00 37    	bra       0x3266 <.L5>

00003182 <.L11>:
    } else if (U1IRbits.URSTIF) {
    3182:	50 24 80    	mov.w     0x48a, w0
    3184:	61 00 60    	and.w     w0, #0x1, w0
    3186:	00 00 e0    	cp0.w     w0
    3188:	34 00 32    	bra       Z, 0x31f2 <.L12>

0000318a <.LSM42>:
        USB_curr_config = 0x00;
    318a:	5d 68 ef    	clr.b     0x85d

0000318c <.LSM43>:
        while (U1IRbits.TRNIF) {
    318c:	08 00 37    	bra       0x319e <.L13>

0000318e <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    318e:	80 00 20    	mov.w     #0x8, w0
    3190:	50 24 88    	mov.w     w0, 0x48a

00003192 <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    3192:	00 00 00    	nop       

00003194 <.LSM46>:
            __builtin_nop();
    3194:	00 00 00    	nop       

00003196 <.LSM47>:
            __builtin_nop();
    3196:	00 00 00    	nop       

00003198 <.LSM48>:
            __builtin_nop();
    3198:	00 00 00    	nop       

0000319a <.LSM49>:
            __builtin_nop();
    319a:	00 00 00    	nop       

0000319c <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    319c:	00 00 00    	nop       

0000319e <.L13>:
    319e:	50 24 80    	mov.w     0x48a, w0
    31a0:	68 00 60    	and.w     w0, #0x8, w0
    31a2:	00 00 e0    	cp0.w     w0
    31a4:	f4 ff 3a    	bra       NZ, 0x318e <.L14>

000031a6 <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    31a6:	a0 4a 20    	mov.w     #0x4aa, w0
    31a8:	10 07 98    	mov.w     w0, [w14+2]

000031aa <.LSM53>:
        for (n = 0; n<16; n++)
    31aa:	00 40 eb    	clr.b     w0
    31ac:	00 4f 78    	mov.b     w0, [w14]
    31ae:	07 00 37    	bra       0x31be <.L15>

000031b0 <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    31b0:	1e 80 fb    	ze        [w14], w0
    31b2:	00 00 40    	add.w     w0, w0, w0
    31b4:	9e 00 90    	mov.w     [w14+2], w1
    31b6:	00 80 40    	add.w     w1, w0, w0
    31b8:	80 00 eb    	clr.w     w1
    31ba:	01 08 78    	mov.w     w1, [w0]

000031bc <.LSM55>:
    31bc:	1e 4f e8    	inc.b     [w14], [w14]

000031be <.L15>:
    31be:	1e 40 78    	mov.b     [w14], w0
    31c0:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    31c2:	f6 ff 36    	bra       LEU, 0x31b0 <.L16>

000031c4 <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    31c4:	00 e0 21    	mov.w     #0x1e00, w0
    31c6:	01 c4 b3    	mov.b     #0x40, w1
    31c8:	01 48 78    	mov.b     w1, [w0]

000031ca <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    31ca:	20 cc 21    	mov.w     #0x1cc2, w0
    31cc:	10 f0 88    	mov.w     w0, 0x1e02

000031ce <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    31ce:	10 e0 21    	mov.w     #0x1e01, w0
    31d0:	81 c8 b3    	mov.b     #0x88, w1
    31d2:	01 48 78    	mov.b     w1, [w0]

000031d4 <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    31d4:	20 d0 21    	mov.w     #0x1d02, w0
    31d6:	30 f0 88    	mov.w     w0, 0x1e06

000031d8 <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    31d8:	50 e0 21    	mov.w     #0x1e05, w0
    31da:	81 c0 b3    	mov.b     #0x8, w1
    31dc:	01 48 78    	mov.b     w1, [w0]

000031de <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    31de:	96 24 ef    	clr.w     0x496

000031e0 <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    31e0:	f0 0f 20    	mov.w     #0xff, w0
    31e2:	50 24 88    	mov.w     w0, 0x48a

000031e4 <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    31e4:	d0 00 20    	mov.w     #0xd, w0
    31e6:	50 25 88    	mov.w     w0, 0x4aa

000031e8 <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    31e8:	10 c0 b3    	mov.b     #0x1, w0
    31ea:	60 e8 b7    	mov.b     WREG, 0x860

000031ec <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    31ec:	10 c0 b3    	mov.b     #0x1, w0
    31ee:	5e e8 b7    	mov.b     WREG, 0x85e
    31f0:	3a 00 37    	bra       0x3266 <.L5>

000031f2 <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    31f2:	50 24 80    	mov.w     0x48a, w0
    31f4:	68 00 60    	and.w     w0, #0x8, w0
    31f6:	00 00 e0    	cp0.w     w0
    31f8:	36 00 32    	bra       Z, 0x3266 <.L5>

000031fa <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    31fa:	90 24 80    	mov.w     0x492, w0
    31fc:	43 00 de    	lsr.w     w0, #0x3, w0
    31fe:	c2 00 dd    	sl.w      w0, #0x2, w1
    3200:	00 e0 21    	mov.w     #0x1e00, w0
    3202:	00 80 40    	add.w     w1, w0, w0
    3204:	20 07 98    	mov.w     w0, [w14+4]

00003206 <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    3206:	2e 00 90    	mov.w     [w14+4], w0
    3208:	10 40 90    	mov.b     [w0+1], w0
    320a:	51 e8 b7    	mov.b     WREG, 0x851

0000320c <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    320c:	2e 00 90    	mov.w     [w14+4], w0
    320e:	10 40 78    	mov.b     [w0], w0
    3210:	50 e8 b7    	mov.b     WREG, 0x850

00003212 <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    3212:	2e 00 90    	mov.w     [w14+4], w0
    3214:	10 00 90    	mov.w     [w0+2], w0
    3216:	90 42 88    	mov.w     w0, 0x852

00003218 <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    3218:	90 24 80    	mov.w     0x492, w0
    321a:	00 40 78    	mov.b     w0, w0
    321c:	5f e8 b7    	mov.b     WREG, 0x85f

0000321e <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    321e:	80 00 20    	mov.w     #0x8, w0
    3220:	50 24 88    	mov.w     w0, 0x48a

00003222 <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    3222:	5c 68 ef    	clr.b     0x85c

00003224 <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    3224:	51 c8 bf    	mov.b     0x851, WREG
    3226:	80 80 fb    	ze        w0, w1
    3228:	c0 03 20    	mov.w     #0x3c, w0
    322a:	00 80 60    	and.w     w1, w0, w0
    322c:	41 02 20    	mov.w     #0x24, w1
    322e:	81 0f 50    	sub.w     w0, w1, [w15]
    3230:	08 00 32    	bra       Z, 0x3242 <.L19>
    3232:	41 03 20    	mov.w     #0x34, w1
    3234:	81 0f 50    	sub.w     w0, w1, [w15]
    3236:	03 00 32    	bra       Z, 0x323e <.L20>
    3238:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    323a:	05 00 32    	bra       Z, 0x3246 <.L18>
    323c:	05 00 37    	bra       0x3248 <.L17>

0000323e <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    323e:	15 00 07    	rcall     0x326a <_ProcessSetupToken>

00003240 <.LSM76>:
                break;
    3240:	03 00 37    	bra       0x3248 <.L17>

00003242 <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    3242:	dc 02 07    	rcall     0x37fc <_ProcessInToken>

00003244 <.LSM78>:
                break;
    3244:	01 00 37    	bra       0x3248 <.L17>

00003246 <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    3246:	0e 03 07    	rcall     0x3864 <_ProcessOutToken>

00003248 <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    3248:	5c c8 bf    	mov.b     0x85c, WREG
    324a:	00 80 fb    	ze        w0, w0
    324c:	61 00 60    	and.w     w0, #0x1, w0
    324e:	00 40 78    	mov.b     w0, w0
    3250:	00 04 e0    	cp0.b     w0
    3252:	09 00 32    	bra       Z, 0x3266 <.L5>

00003254 <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    3254:	00 e0 21    	mov.w     #0x1e00, w0
    3256:	01 c4 b3    	mov.b     #0x40, w1
    3258:	01 48 78    	mov.b     w1, [w0]

0000325a <.LSM82>:
            BD[EP0IN].status = 0x84;
    325a:	50 e0 21    	mov.w     #0x1e05, w0
    325c:	41 c8 b3    	mov.b     #0x84, w1
    325e:	01 48 78    	mov.b     w1, [w0]

00003260 <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    3260:	10 e0 21    	mov.w     #0x1e01, w0
    3262:	41 c8 b3    	mov.b     #0x84, w1
    3264:	01 48 78    	mov.b     w1, [w0]

00003266 <.L5>:
        }
    }
}
    3266:	00 80 fa    	ulnk      
    3268:	00 00 06    	return    

0000326a <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    326a:	02 00 fa    	lnk       #0x2

0000326c <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    326c:	91 42 80    	mov.w     0x852, w1
    326e:	01 0f 78    	mov.w     w1, [w14]

00003270 <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    3270:	1e 00 78    	mov.w     [w14], w0
    3272:	90 40 78    	mov.b     [w0], w1
    3274:	40 85 20    	mov.w     #0x854, w0
    3276:	01 48 78    	mov.b     w1, [w0]
    3278:	1e 0f e8    	inc.w     [w14], [w14]

0000327a <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    327a:	1e 00 78    	mov.w     [w14], w0
    327c:	90 40 78    	mov.b     [w0], w1
    327e:	40 85 20    	mov.w     #0x854, w0
    3280:	11 40 98    	mov.b     w1, [w0+1]
    3282:	1e 0f e8    	inc.w     [w14], [w14]

00003284 <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    3284:	1e 00 78    	mov.w     [w14], w0
    3286:	90 40 78    	mov.b     [w0], w1
    3288:	40 85 20    	mov.w     #0x854, w0
    328a:	21 40 98    	mov.b     w1, [w0+2]
    328c:	1e 0f e8    	inc.w     [w14], [w14]

0000328e <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    328e:	1e 00 78    	mov.w     [w14], w0
    3290:	90 40 78    	mov.b     [w0], w1
    3292:	40 85 20    	mov.w     #0x854, w0
    3294:	31 40 98    	mov.b     w1, [w0+3]
    3296:	1e 0f e8    	inc.w     [w14], [w14]

00003298 <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    3298:	1e 00 78    	mov.w     [w14], w0
    329a:	90 40 78    	mov.b     [w0], w1
    329c:	40 85 20    	mov.w     #0x854, w0
    329e:	41 40 98    	mov.b     w1, [w0+4]
    32a0:	1e 0f e8    	inc.w     [w14], [w14]

000032a2 <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    32a2:	1e 00 78    	mov.w     [w14], w0
    32a4:	90 40 78    	mov.b     [w0], w1
    32a6:	40 85 20    	mov.w     #0x854, w0
    32a8:	51 40 98    	mov.b     w1, [w0+5]
    32aa:	1e 0f e8    	inc.w     [w14], [w14]

000032ac <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    32ac:	1e 00 78    	mov.w     [w14], w0
    32ae:	90 40 78    	mov.b     [w0], w1
    32b0:	40 85 20    	mov.w     #0x854, w0
    32b2:	61 40 98    	mov.b     w1, [w0+6]
    32b4:	1e 0f e8    	inc.w     [w14], [w14]

000032b6 <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    32b6:	1e 00 78    	mov.w     [w14], w0
    32b8:	90 40 78    	mov.b     [w0], w1
    32ba:	40 85 20    	mov.w     #0x854, w0
    32bc:	71 40 98    	mov.b     w1, [w0+7]
    32be:	1e 0f e8    	inc.w     [w14], [w14]

000032c0 <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    32c0:	00 e0 21    	mov.w     #0x1e00, w0
    32c2:	01 c4 b3    	mov.b     #0x40, w1
    32c4:	01 48 78    	mov.b     w1, [w0]

000032c6 <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    32c6:	50 e0 21    	mov.w     #0x1e05, w0
    32c8:	81 c0 b3    	mov.b     #0x8, w1
    32ca:	01 48 78    	mov.b     w1, [w0]

000032cc <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    32cc:	40 85 20    	mov.w     #0x854, w0
    32ce:	10 40 78    	mov.b     [w0], w0
    32d0:	00 04 e0    	cp0.b     w0
    32d2:	06 00 35    	bra       LT, 0x32e0 <.L22>
    32d4:	40 85 20    	mov.w     #0x854, w0
    32d6:	30 00 90    	mov.w     [w0+6], w0
    32d8:	00 00 e0    	cp0.w     w0
    32da:	02 00 32    	bra       Z, 0x32e0 <.L22>
    32dc:	80 cc b3    	mov.b     #0xc8, w0
    32de:	01 00 37    	bra       0x32e2 <.L23>

000032e0 <.L22>:
    32e0:	80 c8 b3    	mov.b     #0x88, w0

000032e2 <.L23>:
    32e2:	11 e0 21    	mov.w     #0x1e01, w1
    32e4:	80 48 78    	mov.b     w0, [w1]

000032e6 <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    32e6:	94 a4 a9    	bclr.b    0x494, #0x5

000032e8 <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    32e8:	20 d4 21    	mov.w     #0x1d42, w0
    32ea:	80 c0 eb    	setm.b    w1
    32ec:	01 48 78    	mov.b     w1, [w0]

000032ee <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    32ee:	30 d4 21    	mov.w     #0x1d43, w0
    32f0:	80 c0 eb    	setm.b    w1
    32f2:	01 48 78    	mov.b     w1, [w0]

000032f4 <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    32f4:	40 85 20    	mov.w     #0x854, w0
    32f6:	10 40 78    	mov.b     [w0], w0
    32f8:	80 80 fb    	ze        w0, w1
    32fa:	00 06 20    	mov.w     #0x60, w0
    32fc:	00 80 60    	and.w     w1, w0, w0
    32fe:	00 00 e0    	cp0.w     w0
    3300:	04 00 32    	bra       Z, 0x330a <.L25>
    3302:	01 04 20    	mov.w     #0x40, w1
    3304:	81 0f 50    	sub.w     w0, w1, [w15]
    3306:	03 00 32    	bra       Z, 0x330e <.L26>
    3308:	04 00 37    	bra       0x3312 <.L28>

0000330a <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    330a:	08 00 07    	rcall     0x331c <_StandardRequests>

0000330c <.LSM103>:
            break;
    330c:	05 00 37    	bra       0x3318 <.L21>

0000330e <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    330e:	50 0c 07    	rcall     0x4bb0 <_VendorRequests>

00003310 <.LSM105>:
            break;
    3310:	03 00 37    	bra       0x3318 <.L21>

00003312 <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    3312:	5c c8 bf    	mov.b     0x85c, WREG
    3314:	00 04 a0    	bset.b    w0, #0x0
    3316:	5c e8 b7    	mov.b     WREG, 0x85c

00003318 <.L21>:
    }
}
    3318:	00 80 fa    	ulnk      
    331a:	00 00 06    	return    

0000331c <_StandardRequests>:

void StandardRequests(void) {
    331c:	06 00 fa    	lnk       #0x6

0000331e <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    331e:	40 85 20    	mov.w     #0x854, w0
    3320:	10 40 90    	mov.b     [w0+1], w0
    3322:	00 80 fb    	ze        w0, w0
    3324:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    3326:	79 01 32    	bra       Z, 0x361a <.L34>
    3328:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    332a:	0c 00 3c    	bra       GT, 0x3344 <.L39>
    332c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    332e:	bf 00 32    	bra       Z, 0x34ae <.L32>
    3330:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3332:	03 00 3c    	bra       GT, 0x333a <.L40>
    3334:	00 00 e0    	cp0.w     w0
    3336:	12 00 32    	bra       Z, 0x335c <.L31>
    3338:	5c 02 37    	bra       0x37f2 <.L30>

0000333a <.L40>:
    333a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    333c:	b8 00 32    	bra       Z, 0x34ae <.L32>
    333e:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3340:	4c 01 32    	bra       Z, 0x35da <.L33>
    3342:	57 02 37    	bra       0x37f2 <.L30>

00003344 <.L39>:
    3344:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    3346:	ef 01 32    	bra       Z, 0x3726 <.L36>
    3348:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    334a:	03 00 3c    	bra       GT, 0x3352 <.L41>
    334c:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    334e:	e0 01 32    	bra       Z, 0x3710 <.L35>
    3350:	50 02 37    	bra       0x37f2 <.L30>

00003352 <.L41>:
    3352:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    3354:	12 02 32    	bra       Z, 0x377a <.L37>
    3356:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    3358:	2b 02 32    	bra       Z, 0x37b0 <.L38>
    335a:	4b 02 37    	bra       0x37f2 <.L30>

0000335c <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    335c:	40 85 20    	mov.w     #0x854, w0
    335e:	10 40 78    	mov.b     [w0], w0
    3360:	00 80 fb    	ze        w0, w0
    3362:	7f 00 60    	and.w     w0, #0x1f, w0
    3364:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3366:	13 00 32    	bra       Z, 0x338e <.L44>
    3368:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    336a:	32 00 32    	bra       Z, 0x33d0 <.L45>
    336c:	00 00 e0    	cp0.w     w0
    336e:	9a 00 3a    	bra       NZ, 0x34a4 <.L128>

00003370 <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    3370:	30 f0 80    	mov.w     0x1e06, w0
    3372:	e1 85 20    	mov.w     #0x85e, w1
    3374:	91 40 78    	mov.b     [w1], w1
    3376:	01 48 78    	mov.b     w1, [w0]

00003378 <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    3378:	30 f0 80    	mov.w     0x1e06, w0
    337a:	00 00 e8    	inc.w     w0, w0
    337c:	80 40 eb    	clr.b     w1
    337e:	01 48 78    	mov.b     w1, [w0]

00003380 <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    3380:	40 e0 21    	mov.w     #0x1e04, w0
    3382:	21 c0 b3    	mov.b     #0x2, w1
    3384:	01 48 78    	mov.b     w1, [w0]

00003386 <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    3386:	50 e0 21    	mov.w     #0x1e05, w0
    3388:	81 cc b3    	mov.b     #0xc8, w1
    338a:	01 48 78    	mov.b     w1, [w0]

0000338c <.LSM115>:
                    break;
    338c:	8f 00 37    	bra       0x34ac <.L46>

0000338e <.L44>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    338e:	60 c8 bf    	mov.b     0x860, WREG
    3390:	00 80 fb    	ze        w0, w0
    3392:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3394:	03 00 32    	bra       Z, 0x339c <.L48>
    3396:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3398:	05 00 32    	bra       Z, 0x33a4 <.L49>
    339a:	19 00 37    	bra       0x33ce <.L47>

0000339c <.L48>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    339c:	5c c8 bf    	mov.b     0x85c, WREG
    339e:	00 04 a0    	bset.b    w0, #0x0
    33a0:	5c e8 b7    	mov.b     WREG, 0x85c

000033a2 <.LSM118>:
                            break;
    33a2:	15 00 37    	bra       0x33ce <.L47>

000033a4 <.L49>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    33a4:	40 85 20    	mov.w     #0x854, w0
    33a6:	40 40 90    	mov.b     [w0+4], w0
    33a8:	00 04 e0    	cp0.b     w0
    33aa:	0e 00 3a    	bra       NZ, 0x33c8 <.L50>

000033ac <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    33ac:	30 f0 80    	mov.w     0x1e06, w0
    33ae:	80 40 eb    	clr.b     w1
    33b0:	01 48 78    	mov.b     w1, [w0]

000033b2 <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    33b2:	30 f0 80    	mov.w     0x1e06, w0
    33b4:	00 00 e8    	inc.w     w0, w0
    33b6:	80 40 eb    	clr.b     w1
    33b8:	01 48 78    	mov.b     w1, [w0]

000033ba <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    33ba:	40 e0 21    	mov.w     #0x1e04, w0
    33bc:	21 c0 b3    	mov.b     #0x2, w1
    33be:	01 48 78    	mov.b     w1, [w0]

000033c0 <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    33c0:	50 e0 21    	mov.w     #0x1e05, w0
    33c2:	81 cc b3    	mov.b     #0xc8, w1
    33c4:	01 48 78    	mov.b     w1, [w0]
    33c6:	03 00 37    	bra       0x33ce <.L47>

000033c8 <.L50>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    33c8:	5c c8 bf    	mov.b     0x85c, WREG
    33ca:	00 04 a0    	bset.b    w0, #0x0
    33cc:	5c e8 b7    	mov.b     WREG, 0x85c

000033ce <.L47>:
                            }
                    }
                    break;
    33ce:	6e 00 37    	bra       0x34ac <.L46>

000033d0 <.L45>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    33d0:	60 c8 bf    	mov.b     0x860, WREG
    33d2:	00 80 fb    	ze        w0, w0
    33d4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    33d6:	03 00 32    	bra       Z, 0x33de <.L52>
    33d8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    33da:	29 00 32    	bra       Z, 0x342e <.L53>
    33dc:	5f 00 37    	bra       0x349c <.L129>

000033de <.L52>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    33de:	40 85 20    	mov.w     #0x854, w0
    33e0:	40 40 90    	mov.b     [w0+4], w0
    33e2:	00 80 fb    	ze        w0, w0
    33e4:	6f 00 60    	and.w     w0, #0xf, w0
    33e6:	00 00 e0    	cp0.w     w0
    33e8:	1e 00 3a    	bra       NZ, 0x3426 <.L54>

000033ea <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    33ea:	31 f0 80    	mov.w     0x1e06, w1
    33ec:	40 85 20    	mov.w     #0x854, w0
    33ee:	40 40 90    	mov.b     [w0+4], w0
    33f0:	00 04 e0    	cp0.b     w0
    33f2:	07 00 3d    	bra       GE, 0x3402 <.L55>
    33f4:	50 e0 21    	mov.w     #0x1e05, w0
    33f6:	10 40 78    	mov.b     [w0], w0
    33f8:	00 80 fb    	ze        w0, w0
    33fa:	64 00 60    	and.w     w0, #0x4, w0
    33fc:	42 80 de    	asr.w     w0, #0x2, w0
    33fe:	00 40 78    	mov.b     w0, w0
    3400:	06 00 37    	bra       0x340e <.L56>

00003402 <.L55>:
    3402:	10 e0 21    	mov.w     #0x1e01, w0
    3404:	10 40 78    	mov.b     [w0], w0
    3406:	00 80 fb    	ze        w0, w0
    3408:	64 00 60    	and.w     w0, #0x4, w0
    340a:	42 80 de    	asr.w     w0, #0x2, w0
    340c:	00 40 78    	mov.b     w0, w0

0000340e <.L56>:
    340e:	80 48 78    	mov.b     w0, [w1]

00003410 <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    3410:	30 f0 80    	mov.w     0x1e06, w0
    3412:	00 00 e8    	inc.w     w0, w0
    3414:	80 40 eb    	clr.b     w1
    3416:	01 48 78    	mov.b     w1, [w0]

00003418 <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    3418:	40 e0 21    	mov.w     #0x1e04, w0
    341a:	21 c0 b3    	mov.b     #0x2, w1
    341c:	01 48 78    	mov.b     w1, [w0]

0000341e <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    341e:	50 e0 21    	mov.w     #0x1e05, w0
    3420:	81 cc b3    	mov.b     #0xc8, w1
    3422:	01 48 78    	mov.b     w1, [w0]
    3424:	03 00 37    	bra       0x342c <.L57>

00003426 <.L54>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3426:	5c c8 bf    	mov.b     0x85c, WREG
    3428:	00 04 a0    	bset.b    w0, #0x0
    342a:	5c e8 b7    	mov.b     WREG, 0x85c

0000342c <.L57>:
                            }
                            break;
    342c:	3a 00 37    	bra       0x34a2 <.L58>

0000342e <.L53>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    342e:	a0 4a 20    	mov.w     #0x4aa, w0
    3430:	10 07 98    	mov.w     w0, [w14+2]

00003432 <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    3432:	40 85 20    	mov.w     #0x854, w0
    3434:	40 40 90    	mov.b     [w0+4], w0
    3436:	6f 4f 60    	and.b     w0, #0xf, [w14]

00003438 <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    3438:	1e 80 fb    	ze        [w14], w0
    343a:	00 00 40    	add.w     w0, w0, w0
    343c:	80 00 78    	mov.w     w0, w1
    343e:	40 85 20    	mov.w     #0x854, w0
    3440:	40 40 90    	mov.b     [w0+4], w0
    3442:	00 00 fb    	se        w0, w0
    3444:	4f 00 de    	lsr.w     w0, #0xf, w0
    3446:	01 00 70    	ior.w     w0, w1, w0
    3448:	c2 00 dd    	sl.w      w0, #0x2, w1
    344a:	00 e0 21    	mov.w     #0x1e00, w0
    344c:	00 80 40    	add.w     w1, w0, w0
    344e:	20 07 98    	mov.w     w0, [w14+4]

00003450 <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    3450:	1e 80 fb    	ze        [w14], w0
    3452:	00 00 40    	add.w     w0, w0, w0
    3454:	9e 00 90    	mov.w     [w14+2], w1
    3456:	00 80 40    	add.w     w1, w0, w0
    3458:	90 00 78    	mov.w     [w0], w1
    345a:	40 85 20    	mov.w     #0x854, w0
    345c:	40 40 90    	mov.b     [w0+4], w0
    345e:	00 04 e0    	cp0.b     w0
    3460:	02 00 3d    	bra       GE, 0x3466 <.L59>
    3462:	40 00 20    	mov.w     #0x4, w0
    3464:	01 00 37    	bra       0x3468 <.L60>

00003466 <.L59>:
    3466:	80 00 20    	mov.w     #0x8, w0

00003468 <.L60>:
    3468:	00 80 60    	and.w     w1, w0, w0
    346a:	00 00 e0    	cp0.w     w0
    346c:	13 00 32    	bra       Z, 0x3494 <.L61>

0000346e <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    346e:	30 f0 80    	mov.w     0x1e06, w0
    3470:	ae 00 90    	mov.w     [w14+4], w1
    3472:	91 40 90    	mov.b     [w1+1], w1
    3474:	81 80 fb    	ze        w1, w1
    3476:	e4 80 60    	and.w     w1, #0x4, w1
    3478:	c2 88 de    	asr.w     w1, #0x2, w1
    347a:	81 40 78    	mov.b     w1, w1
    347c:	01 48 78    	mov.b     w1, [w0]

0000347e <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    347e:	30 f0 80    	mov.w     0x1e06, w0
    3480:	00 00 e8    	inc.w     w0, w0
    3482:	80 40 eb    	clr.b     w1
    3484:	01 48 78    	mov.b     w1, [w0]

00003486 <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    3486:	40 e0 21    	mov.w     #0x1e04, w0
    3488:	21 c0 b3    	mov.b     #0x2, w1
    348a:	01 48 78    	mov.b     w1, [w0]

0000348c <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    348c:	50 e0 21    	mov.w     #0x1e05, w0
    348e:	81 cc b3    	mov.b     #0xc8, w1
    3490:	01 48 78    	mov.b     w1, [w0]
    3492:	03 00 37    	bra       0x349a <.L62>

00003494 <.L61>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3494:	5c c8 bf    	mov.b     0x85c, WREG
    3496:	00 04 a0    	bset.b    w0, #0x0
    3498:	5c e8 b7    	mov.b     WREG, 0x85c

0000349a <.L62>:
                            }
                            break;
    349a:	03 00 37    	bra       0x34a2 <.L58>

0000349c <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    349c:	5c c8 bf    	mov.b     0x85c, WREG
    349e:	00 04 a0    	bset.b    w0, #0x0
    34a0:	5c e8 b7    	mov.b     WREG, 0x85c

000034a2 <.L58>:
                    }
                    break;
    34a2:	04 00 37    	bra       0x34ac <.L46>

000034a4 <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    34a4:	5c c8 bf    	mov.b     0x85c, WREG
    34a6:	00 04 a0    	bset.b    w0, #0x0
    34a8:	5c e8 b7    	mov.b     WREG, 0x85c

000034aa <.LSM147>:
            }
            break;
    34aa:	a6 01 37    	bra       0x37f8 <.L29>

000034ac <.L46>:
    34ac:	a5 01 37    	bra       0x37f8 <.L29>

000034ae <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    34ae:	40 85 20    	mov.w     #0x854, w0
    34b0:	10 40 78    	mov.b     [w0], w0
    34b2:	00 80 fb    	ze        w0, w0
    34b4:	7f 00 60    	and.w     w0, #0x1f, w0
    34b6:	00 00 e0    	cp0.w     w0
    34b8:	03 00 32    	bra       Z, 0x34c0 <.L65>
    34ba:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    34bc:	1e 00 32    	bra       Z, 0x34fa <.L66>
    34be:	88 00 37    	bra       0x35d0 <.L130>

000034c0 <.L65>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    34c0:	40 85 20    	mov.w     #0x854, w0
    34c2:	20 40 90    	mov.b     [w0+2], w0
    34c4:	00 80 fb    	ze        w0, w0
    34c6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    34c8:	14 00 3a    	bra       NZ, 0x34f2 <.L131>

000034ca <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    34ca:	40 85 20    	mov.w     #0x854, w0
    34cc:	10 40 90    	mov.b     [w0+1], w0
    34ce:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    34d0:	06 00 3a    	bra       NZ, 0x34de <.L69>

000034d2 <.LSM151>:
                                USB_device_status &= 0xFE;
    34d2:	e1 85 20    	mov.w     #0x85e, w1
    34d4:	91 40 78    	mov.b     [w1], w1
    34d6:	e0 cf b3    	mov.b     #0xfe, w0
    34d8:	00 c0 60    	and.b     w1, w0, w0
    34da:	5e e8 b7    	mov.b     WREG, 0x85e
    34dc:	03 00 37    	bra       0x34e4 <.L70>

000034de <.L69>:
                            else
                                USB_device_status |= 0x01;
    34de:	5e c8 bf    	mov.b     0x85e, WREG
    34e0:	00 04 a0    	bset.b    w0, #0x0
    34e2:	5e e8 b7    	mov.b     WREG, 0x85e

000034e4 <.L70>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    34e4:	40 e0 21    	mov.w     #0x1e04, w0
    34e6:	80 40 eb    	clr.b     w1
    34e8:	01 48 78    	mov.b     w1, [w0]

000034ea <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    34ea:	50 e0 21    	mov.w     #0x1e05, w0
    34ec:	81 cc b3    	mov.b     #0xc8, w1
    34ee:	01 48 78    	mov.b     w1, [w0]

000034f0 <.LSM155>:
                            break;
    34f0:	03 00 37    	bra       0x34f8 <.L71>

000034f2 <.L131>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    34f2:	5c c8 bf    	mov.b     0x85c, WREG
    34f4:	00 04 a0    	bset.b    w0, #0x0
    34f6:	5c e8 b7    	mov.b     WREG, 0x85c

000034f8 <.L71>:
                    }
                    break;
    34f8:	6f 00 37    	bra       0x35d8 <.L72>

000034fa <.L66>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    34fa:	60 c8 bf    	mov.b     0x860, WREG
    34fc:	00 80 fb    	ze        w0, w0
    34fe:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3500:	03 00 32    	bra       Z, 0x3508 <.L74>
    3502:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3504:	12 00 32    	bra       Z, 0x352a <.L75>
    3506:	60 00 37    	bra       0x35c8 <.L132>

00003508 <.L74>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    3508:	40 85 20    	mov.w     #0x854, w0
    350a:	40 40 90    	mov.b     [w0+4], w0
    350c:	00 80 fb    	ze        w0, w0
    350e:	6f 00 60    	and.w     w0, #0xf, w0
    3510:	00 00 e0    	cp0.w     w0
    3512:	07 00 3a    	bra       NZ, 0x3522 <.L76>

00003514 <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    3514:	40 e0 21    	mov.w     #0x1e04, w0
    3516:	80 40 eb    	clr.b     w1
    3518:	01 48 78    	mov.b     w1, [w0]

0000351a <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    351a:	50 e0 21    	mov.w     #0x1e05, w0
    351c:	81 cc b3    	mov.b     #0xc8, w1
    351e:	01 48 78    	mov.b     w1, [w0]
    3520:	03 00 37    	bra       0x3528 <.L77>

00003522 <.L76>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3522:	5c c8 bf    	mov.b     0x85c, WREG
    3524:	00 04 a0    	bset.b    w0, #0x0
    3526:	5c e8 b7    	mov.b     WREG, 0x85c

00003528 <.L77>:
                            }
                            break;
    3528:	52 00 37    	bra       0x35ce <.L78>

0000352a <.L75>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    352a:	a0 4a 20    	mov.w     #0x4aa, w0
    352c:	10 07 98    	mov.w     w0, [w14+2]

0000352e <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    352e:	40 85 20    	mov.w     #0x854, w0
    3530:	40 40 90    	mov.b     [w0+4], w0
    3532:	6f 4f 60    	and.b     w0, #0xf, [w14]
    3534:	1e 40 78    	mov.b     [w14], w0
    3536:	00 04 e0    	cp0.b     w0
    3538:	3b 00 32    	bra       Z, 0x35b0 <.L79>

0000353a <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    353a:	1e 80 fb    	ze        [w14], w0
    353c:	00 00 40    	add.w     w0, w0, w0
    353e:	80 00 78    	mov.w     w0, w1
    3540:	40 85 20    	mov.w     #0x854, w0
    3542:	40 40 90    	mov.b     [w0+4], w0
    3544:	00 00 fb    	se        w0, w0
    3546:	4f 00 de    	lsr.w     w0, #0xf, w0
    3548:	01 00 70    	ior.w     w0, w1, w0
    354a:	c2 00 dd    	sl.w      w0, #0x2, w1
    354c:	00 e0 21    	mov.w     #0x1e00, w0
    354e:	00 80 40    	add.w     w1, w0, w0
    3550:	20 07 98    	mov.w     w0, [w14+4]

00003552 <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    3552:	40 85 20    	mov.w     #0x854, w0
    3554:	40 40 90    	mov.b     [w0+4], w0
    3556:	00 04 e0    	cp0.b     w0
    3558:	16 00 3d    	bra       GE, 0x3586 <.L80>

0000355a <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    355a:	1e 80 fb    	ze        [w14], w0
    355c:	00 00 40    	add.w     w0, w0, w0
    355e:	9e 00 90    	mov.w     [w14+2], w1
    3560:	00 80 40    	add.w     w1, w0, w0
    3562:	10 00 78    	mov.w     [w0], w0
    3564:	64 00 60    	and.w     w0, #0x4, w0
    3566:	00 00 e0    	cp0.w     w0
    3568:	0a 00 32    	bra       Z, 0x357e <.L81>

0000356a <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    356a:	40 85 20    	mov.w     #0x854, w0
    356c:	10 40 90    	mov.b     [w0+1], w0
    356e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3570:	02 00 3a    	bra       NZ, 0x3576 <.L82>
    3572:	00 40 eb    	clr.b     w0
    3574:	01 00 37    	bra       0x3578 <.L83>

00003576 <.L82>:
    3576:	40 c8 b3    	mov.b     #0x84, w0

00003578 <.L83>:
    3578:	ae 00 90    	mov.w     [w14+4], w1
    357a:	90 40 98    	mov.b     w0, [w1+1]
    357c:	19 00 37    	bra       0x35b0 <.L79>

0000357e <.L81>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    357e:	5c c8 bf    	mov.b     0x85c, WREG
    3580:	00 04 a0    	bset.b    w0, #0x0
    3582:	5c e8 b7    	mov.b     WREG, 0x85c
    3584:	15 00 37    	bra       0x35b0 <.L79>

00003586 <.L80>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    3586:	1e 80 fb    	ze        [w14], w0
    3588:	00 00 40    	add.w     w0, w0, w0
    358a:	9e 00 90    	mov.w     [w14+2], w1
    358c:	00 80 40    	add.w     w1, w0, w0
    358e:	10 00 78    	mov.w     [w0], w0
    3590:	68 00 60    	and.w     w0, #0x8, w0
    3592:	00 00 e0    	cp0.w     w0
    3594:	0a 00 32    	bra       Z, 0x35aa <.L84>

00003596 <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    3596:	40 85 20    	mov.w     #0x854, w0
    3598:	10 40 90    	mov.b     [w0+1], w0
    359a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    359c:	02 00 3a    	bra       NZ, 0x35a2 <.L85>
    359e:	80 c8 b3    	mov.b     #0x88, w0
    35a0:	01 00 37    	bra       0x35a4 <.L86>

000035a2 <.L85>:
    35a2:	40 c8 b3    	mov.b     #0x84, w0

000035a4 <.L86>:
    35a4:	ae 00 90    	mov.w     [w14+4], w1
    35a6:	90 40 98    	mov.b     w0, [w1+1]
    35a8:	03 00 37    	bra       0x35b0 <.L79>

000035aa <.L84>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    35aa:	5c c8 bf    	mov.b     0x85c, WREG
    35ac:	00 04 a0    	bset.b    w0, #0x0
    35ae:	5c e8 b7    	mov.b     WREG, 0x85c

000035b0 <.L79>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    35b0:	5c c8 bf    	mov.b     0x85c, WREG
    35b2:	00 80 fb    	ze        w0, w0
    35b4:	61 00 60    	and.w     w0, #0x1, w0
    35b6:	00 00 e0    	cp0.w     w0
    35b8:	06 00 3a    	bra       NZ, 0x35c6 <.L87>

000035ba <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    35ba:	40 e0 21    	mov.w     #0x1e04, w0
    35bc:	80 40 eb    	clr.b     w1
    35be:	01 48 78    	mov.b     w1, [w0]

000035c0 <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    35c0:	50 e0 21    	mov.w     #0x1e05, w0
    35c2:	81 cc b3    	mov.b     #0xc8, w1
    35c4:	01 48 78    	mov.b     w1, [w0]

000035c6 <.L87>:
                            }
                            break;
    35c6:	03 00 37    	bra       0x35ce <.L78>

000035c8 <.L132>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    35c8:	5c c8 bf    	mov.b     0x85c, WREG
    35ca:	00 04 a0    	bset.b    w0, #0x0
    35cc:	5c e8 b7    	mov.b     WREG, 0x85c

000035ce <.L78>:
                    }
                    break;
    35ce:	04 00 37    	bra       0x35d8 <.L72>

000035d0 <.L130>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    35d0:	5c c8 bf    	mov.b     0x85c, WREG
    35d2:	00 04 a0    	bset.b    w0, #0x0
    35d4:	5c e8 b7    	mov.b     WREG, 0x85c

000035d6 <.LSM181>:
            }
            break;
    35d6:	10 01 37    	bra       0x37f8 <.L29>

000035d8 <.L72>:
    35d8:	0f 01 37    	bra       0x37f8 <.L29>

000035da <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    35da:	40 85 20    	mov.w     #0x854, w0
    35dc:	20 40 90    	mov.b     [w0+2], w0
    35de:	00 04 e0    	cp0.b     w0
    35e0:	04 00 3d    	bra       GE, 0x35ea <.L88>

000035e2 <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    35e2:	5c c8 bf    	mov.b     0x85c, WREG
    35e4:	00 04 a0    	bset.b    w0, #0x0
    35e6:	5c e8 b7    	mov.b     WREG, 0x85c

000035e8 <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    35e8:	07 01 37    	bra       0x37f8 <.L29>

000035ea <.L88>:
    35ea:	40 85 20    	mov.w     #0x854, w0
    35ec:	90 40 78    	mov.b     [w0], w1
    35ee:	20 d4 21    	mov.w     #0x1d42, w0
    35f0:	01 48 78    	mov.b     w1, [w0]

000035f2 <.LSM186>:
    35f2:	40 85 20    	mov.w     #0x854, w0
    35f4:	90 40 90    	mov.b     [w0+1], w1
    35f6:	30 d4 21    	mov.w     #0x1d43, w0
    35f8:	01 48 78    	mov.b     w1, [w0]

000035fa <.LSM187>:
    35fa:	40 85 20    	mov.w     #0x854, w0
    35fc:	10 00 90    	mov.w     [w0+2], w0
    35fe:	20 ea 88    	mov.w     w0, 0x1d44

00003600 <.LSM188>:
    3600:	40 85 20    	mov.w     #0x854, w0
    3602:	20 00 90    	mov.w     [w0+4], w0
    3604:	30 ea 88    	mov.w     w0, 0x1d46

00003606 <.LSM189>:
    3606:	40 85 20    	mov.w     #0x854, w0
    3608:	30 00 90    	mov.w     [w0+6], w0
    360a:	40 ea 88    	mov.w     w0, 0x1d48

0000360c <.LSM190>:
    360c:	40 e0 21    	mov.w     #0x1e04, w0
    360e:	80 40 eb    	clr.b     w1
    3610:	01 48 78    	mov.b     w1, [w0]

00003612 <.LSM191>:
    3612:	50 e0 21    	mov.w     #0x1e05, w0
    3614:	81 cc b3    	mov.b     #0xc8, w1
    3616:	01 48 78    	mov.b     w1, [w0]

00003618 <.LSM192>:
    3618:	ef 00 37    	bra       0x37f8 <.L29>

0000361a <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    361a:	40 85 20    	mov.w     #0x854, w0
    361c:	90 40 78    	mov.b     [w0], w1
    361e:	20 d4 21    	mov.w     #0x1d42, w0
    3620:	01 48 78    	mov.b     w1, [w0]

00003622 <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    3622:	40 85 20    	mov.w     #0x854, w0
    3624:	90 40 90    	mov.b     [w0+1], w1
    3626:	30 d4 21    	mov.w     #0x1d43, w0
    3628:	01 48 78    	mov.b     w1, [w0]

0000362a <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    362a:	40 85 20    	mov.w     #0x854, w0
    362c:	10 00 90    	mov.w     [w0+2], w0
    362e:	20 ea 88    	mov.w     w0, 0x1d44

00003630 <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    3630:	40 85 20    	mov.w     #0x854, w0
    3632:	20 00 90    	mov.w     [w0+4], w0
    3634:	30 ea 88    	mov.w     w0, 0x1d46

00003636 <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    3636:	40 85 20    	mov.w     #0x854, w0
    3638:	30 00 90    	mov.w     [w0+6], w0
    363a:	40 ea 88    	mov.w     w0, 0x1d48

0000363c <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    363c:	40 85 20    	mov.w     #0x854, w0
    363e:	30 40 90    	mov.b     [w0+3], w0
    3640:	00 80 fb    	ze        w0, w0
    3642:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3644:	14 00 32    	bra       Z, 0x366e <.L92>
    3646:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3648:	36 00 32    	bra       Z, 0x36b6 <.L93>
    364a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    364c:	5c 00 3a    	bra       NZ, 0x3706 <.L133>

0000364e <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    364e:	c0 19 2a    	mov.w     #0xa19c, w0
    3650:	50 ea 88    	mov.w     w0, 0x1d4a

00003652 <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    3652:	50 ea 80    	mov.w     0x1d4a, w0
    3654:	10 40 78    	mov.b     [w0], w0
    3656:	00 80 fb    	ze        w0, w0
    3658:	60 ea 88    	mov.w     w0, 0x1d4c

0000365a <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    365a:	40 85 20    	mov.w     #0x854, w0
    365c:	b0 00 90    	mov.w     [w0+6], w1
    365e:	60 ea 80    	mov.w     0x1d4c, w0
    3660:	80 8f 50    	sub.w     w1, w0, [w15]
    3662:	03 00 31    	bra       C, 0x366a <.L94>

00003664 <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    3664:	40 85 20    	mov.w     #0x854, w0
    3666:	30 00 90    	mov.w     [w0+6], w0
    3668:	60 ea 88    	mov.w     w0, 0x1d4c

0000366a <.L94>:
                    }
                    SendDataPacket();
    366a:	22 01 07    	rcall     0x38b0 <_SendDataPacket>

0000366c <.LSM204>:
                    break;
    366c:	50 00 37    	bra       0x370e <.L95>

0000366e <.L92>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    366e:	40 85 20    	mov.w     #0x854, w0
    3670:	20 40 90    	mov.b     [w0+2], w0
    3672:	00 80 fb    	ze        w0, w0
    3674:	00 00 e0    	cp0.w     w0
    3676:	03 00 3a    	bra       NZ, 0x367e <.L134>

00003678 <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    3678:	e0 1a 2a    	mov.w     #0xa1ae, w0
    367a:	50 ea 88    	mov.w     w0, 0x1d4a

0000367c <.LSM207>:
                            break;
    367c:	03 00 37    	bra       0x3684 <.L98>

0000367e <.L134>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    367e:	5c c8 bf    	mov.b     0x85c, WREG
    3680:	00 04 a0    	bset.b    w0, #0x0
    3682:	5c e8 b7    	mov.b     WREG, 0x85c

00003684 <.L98>:
                    }
                    if (!(USB_error_flags&0x01)) {
    3684:	5c c8 bf    	mov.b     0x85c, WREG
    3686:	00 80 fb    	ze        w0, w0
    3688:	61 00 60    	and.w     w0, #0x1, w0
    368a:	00 00 e0    	cp0.w     w0
    368c:	13 00 3a    	bra       NZ, 0x36b4 <.L99>

0000368e <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    368e:	50 ea 80    	mov.w     0x1d4a, w0
    3690:	00 80 e8    	inc2.w    w0, w0
    3692:	90 40 78    	mov.b     [w0], w1
    3694:	c0 d4 21    	mov.w     #0x1d4c, w0
    3696:	01 48 78    	mov.b     w1, [w0]

00003698 <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    3698:	50 ea 80    	mov.w     0x1d4a, w0
    369a:	63 00 40    	add.w     w0, #0x3, w0
    369c:	90 40 78    	mov.b     [w0], w1
    369e:	d0 d4 21    	mov.w     #0x1d4d, w0
    36a0:	01 48 78    	mov.b     w1, [w0]

000036a2 <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    36a2:	40 85 20    	mov.w     #0x854, w0
    36a4:	b0 00 90    	mov.w     [w0+6], w1
    36a6:	60 ea 80    	mov.w     0x1d4c, w0
    36a8:	80 8f 50    	sub.w     w1, w0, [w15]
    36aa:	03 00 31    	bra       C, 0x36b2 <.L100>

000036ac <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    36ac:	40 85 20    	mov.w     #0x854, w0
    36ae:	30 00 90    	mov.w     [w0+6], w0
    36b0:	60 ea 88    	mov.w     w0, 0x1d4c

000036b2 <.L100>:
                        }
                        SendDataPacket();
    36b2:	fe 00 07    	rcall     0x38b0 <_SendDataPacket>

000036b4 <.L99>:
                    }
                    break;
    36b4:	2c 00 37    	bra       0x370e <.L95>

000036b6 <.L93>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    36b6:	40 85 20    	mov.w     #0x854, w0
    36b8:	20 40 90    	mov.b     [w0+2], w0
    36ba:	00 80 fb    	ze        w0, w0
    36bc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    36be:	07 00 32    	bra       Z, 0x36ce <.L103>
    36c0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    36c2:	08 00 32    	bra       Z, 0x36d4 <.L104>
    36c4:	00 00 e0    	cp0.w     w0
    36c6:	09 00 3a    	bra       NZ, 0x36da <.L135>

000036c8 <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    36c8:	00 1c 2a    	mov.w     #0xa1c0, w0
    36ca:	50 ea 88    	mov.w     w0, 0x1d4a

000036cc <.LSM218>:
                            break;
    36cc:	09 00 37    	bra       0x36e0 <.L105>

000036ce <.L103>:
                        case 1:
                            USB_request.data_ptr = String1;
    36ce:	40 1c 2a    	mov.w     #0xa1c4, w0
    36d0:	50 ea 88    	mov.w     w0, 0x1d4a

000036d2 <.LSM220>:
                            break;
    36d2:	06 00 37    	bra       0x36e0 <.L105>

000036d4 <.L104>:
                        case 2:
                            USB_request.data_ptr = String2;
    36d4:	e0 1d 2a    	mov.w     #0xa1de, w0
    36d6:	50 ea 88    	mov.w     w0, 0x1d4a

000036d8 <.LSM222>:
                            break;
    36d8:	03 00 37    	bra       0x36e0 <.L105>

000036da <.L135>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    36da:	5c c8 bf    	mov.b     0x85c, WREG
    36dc:	00 04 a0    	bset.b    w0, #0x0
    36de:	5c e8 b7    	mov.b     WREG, 0x85c

000036e0 <.L105>:
                    }
                    if (!(USB_error_flags&0x01)) {
    36e0:	5c c8 bf    	mov.b     0x85c, WREG
    36e2:	00 80 fb    	ze        w0, w0
    36e4:	61 00 60    	and.w     w0, #0x1, w0
    36e6:	00 00 e0    	cp0.w     w0
    36e8:	0d 00 3a    	bra       NZ, 0x3704 <.L106>

000036ea <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    36ea:	50 ea 80    	mov.w     0x1d4a, w0
    36ec:	10 40 78    	mov.b     [w0], w0
    36ee:	00 80 fb    	ze        w0, w0
    36f0:	60 ea 88    	mov.w     w0, 0x1d4c

000036f2 <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    36f2:	40 85 20    	mov.w     #0x854, w0
    36f4:	b0 00 90    	mov.w     [w0+6], w1
    36f6:	60 ea 80    	mov.w     0x1d4c, w0
    36f8:	80 8f 50    	sub.w     w1, w0, [w15]
    36fa:	03 00 31    	bra       C, 0x3702 <.L107>

000036fc <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    36fc:	40 85 20    	mov.w     #0x854, w0
    36fe:	30 00 90    	mov.w     [w0+6], w0
    3700:	60 ea 88    	mov.w     w0, 0x1d4c

00003702 <.L107>:
                        }
                        SendDataPacket();
    3702:	d6 00 07    	rcall     0x38b0 <_SendDataPacket>

00003704 <.L106>:
                    }
                    break;
    3704:	04 00 37    	bra       0x370e <.L95>

00003706 <.L133>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    3706:	5c c8 bf    	mov.b     0x85c, WREG
    3708:	00 04 a0    	bset.b    w0, #0x0
    370a:	5c e8 b7    	mov.b     WREG, 0x85c

0000370c <.LSM231>:
            }
            break;
    370c:	75 00 37    	bra       0x37f8 <.L29>

0000370e <.L95>:
    370e:	74 00 37    	bra       0x37f8 <.L29>

00003710 <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    3710:	30 f0 80    	mov.w     0x1e06, w0
    3712:	d1 85 20    	mov.w     #0x85d, w1
    3714:	91 40 78    	mov.b     [w1], w1
    3716:	01 48 78    	mov.b     w1, [w0]

00003718 <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    3718:	40 e0 21    	mov.w     #0x1e04, w0
    371a:	11 c0 b3    	mov.b     #0x1, w1
    371c:	01 48 78    	mov.b     w1, [w0]

0000371e <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    371e:	50 e0 21    	mov.w     #0x1e05, w0
    3720:	81 cc b3    	mov.b     #0xc8, w1
    3722:	01 48 78    	mov.b     w1, [w0]

00003724 <.LSM235>:
            break;
    3724:	69 00 37    	bra       0x37f8 <.L29>

00003726 <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    3726:	40 85 20    	mov.w     #0x854, w0
    3728:	20 40 90    	mov.b     [w0+2], w0
    372a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    372c:	22 00 3e    	bra       GTU, 0x3772 <.L108>

0000372e <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    372e:	a0 4a 20    	mov.w     #0x4aa, w0
    3730:	10 07 98    	mov.w     w0, [w14+2]

00003732 <.LSM238>:
                for (n = 1; n<16; n++)
    3732:	10 c0 b3    	mov.b     #0x1, w0
    3734:	00 4f 78    	mov.b     w0, [w14]
    3736:	07 00 37    	bra       0x3746 <.L109>

00003738 <.L110>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    3738:	1e 80 fb    	ze        [w14], w0
    373a:	00 00 40    	add.w     w0, w0, w0
    373c:	9e 00 90    	mov.w     [w14+2], w1
    373e:	00 80 40    	add.w     w1, w0, w0
    3740:	80 00 eb    	clr.w     w1
    3742:	01 08 78    	mov.w     w1, [w0]

00003744 <.LSM240>:
    3744:	1e 4f e8    	inc.b     [w14], [w14]

00003746 <.L109>:
    3746:	1e 40 78    	mov.b     [w14], w0
    3748:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    374a:	f6 ff 36    	bra       LEU, 0x3738 <.L110>

0000374c <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    374c:	40 85 20    	mov.w     #0x854, w0
    374e:	20 40 90    	mov.b     [w0+2], w0
    3750:	5d e8 b7    	mov.b     WREG, 0x85d
    3752:	5d c8 bf    	mov.b     0x85d, WREG
    3754:	00 80 fb    	ze        w0, w0
    3756:	00 00 e0    	cp0.w     w0
    3758:	03 00 3a    	bra       NZ, 0x3760 <.L136>

0000375a <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    375a:	20 c0 b3    	mov.b     #0x2, w0
    375c:	60 e8 b7    	mov.b     WREG, 0x860

0000375e <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    375e:	02 00 37    	bra       0x3764 <.L113>

00003760 <.L136>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    3760:	30 c0 b3    	mov.b     #0x3, w0
    3762:	60 e8 b7    	mov.b     WREG, 0x860

00003764 <.L113>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    3764:	40 e0 21    	mov.w     #0x1e04, w0
    3766:	80 40 eb    	clr.b     w1
    3768:	01 48 78    	mov.b     w1, [w0]

0000376a <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    376a:	50 e0 21    	mov.w     #0x1e05, w0
    376c:	81 cc b3    	mov.b     #0xc8, w1
    376e:	01 48 78    	mov.b     w1, [w0]

00003770 <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    3770:	43 00 37    	bra       0x37f8 <.L29>

00003772 <.L108>:
    3772:	5c c8 bf    	mov.b     0x85c, WREG
    3774:	00 04 a0    	bset.b    w0, #0x0
    3776:	5c e8 b7    	mov.b     WREG, 0x85c

00003778 <.LSM249>:
    3778:	3f 00 37    	bra       0x37f8 <.L29>

0000377a <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    377a:	60 c8 bf    	mov.b     0x860, WREG
    377c:	00 80 fb    	ze        w0, w0
    377e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3780:	13 00 3a    	bra       NZ, 0x37a8 <.L137>

00003782 <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3782:	40 85 20    	mov.w     #0x854, w0
    3784:	40 40 90    	mov.b     [w0+4], w0
    3786:	00 04 e0    	cp0.b     w0
    3788:	0a 00 3a    	bra       NZ, 0x379e <.L117>

0000378a <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    378a:	30 f0 80    	mov.w     0x1e06, w0
    378c:	80 40 eb    	clr.b     w1
    378e:	01 48 78    	mov.b     w1, [w0]

00003790 <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    3790:	40 e0 21    	mov.w     #0x1e04, w0
    3792:	11 c0 b3    	mov.b     #0x1, w1
    3794:	01 48 78    	mov.b     w1, [w0]

00003796 <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3796:	50 e0 21    	mov.w     #0x1e05, w0
    3798:	81 cc b3    	mov.b     #0xc8, w1
    379a:	01 48 78    	mov.b     w1, [w0]
    379c:	03 00 37    	bra       0x37a4 <.L118>

0000379e <.L117>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    379e:	5c c8 bf    	mov.b     0x85c, WREG
    37a0:	00 04 a0    	bset.b    w0, #0x0
    37a2:	5c e8 b7    	mov.b     WREG, 0x85c

000037a4 <.L118>:
                    }
                    break;
    37a4:	00 00 00    	nop       

000037a6 <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    37a6:	28 00 37    	bra       0x37f8 <.L29>

000037a8 <.L137>:
    37a8:	5c c8 bf    	mov.b     0x85c, WREG
    37aa:	00 04 a0    	bset.b    w0, #0x0
    37ac:	5c e8 b7    	mov.b     WREG, 0x85c

000037ae <.LSM259>:
    37ae:	24 00 37    	bra       0x37f8 <.L29>

000037b0 <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    37b0:	60 c8 bf    	mov.b     0x860, WREG
    37b2:	00 80 fb    	ze        w0, w0
    37b4:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    37b6:	19 00 3a    	bra       NZ, 0x37ea <.L138>

000037b8 <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    37b8:	40 85 20    	mov.w     #0x854, w0
    37ba:	40 40 90    	mov.b     [w0+4], w0
    37bc:	00 04 e0    	cp0.b     w0
    37be:	10 00 3a    	bra       NZ, 0x37e0 <.L122>

000037c0 <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    37c0:	40 85 20    	mov.w     #0x854, w0
    37c2:	20 40 90    	mov.b     [w0+2], w0
    37c4:	00 80 fb    	ze        w0, w0
    37c6:	00 00 e0    	cp0.w     w0
    37c8:	07 00 3a    	bra       NZ, 0x37d8 <.L139>

000037ca <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    37ca:	40 e0 21    	mov.w     #0x1e04, w0
    37cc:	80 40 eb    	clr.b     w1
    37ce:	01 48 78    	mov.b     w1, [w0]

000037d0 <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    37d0:	50 e0 21    	mov.w     #0x1e05, w0
    37d2:	81 cc b3    	mov.b     #0xc8, w1
    37d4:	01 48 78    	mov.b     w1, [w0]

000037d6 <.LSM265>:
                                break;
    37d6:	07 00 37    	bra       0x37e6 <.L126>

000037d8 <.L139>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    37d8:	5c c8 bf    	mov.b     0x85c, WREG
    37da:	00 04 a0    	bset.b    w0, #0x0
    37dc:	5c e8 b7    	mov.b     WREG, 0x85c
    37de:	03 00 37    	bra       0x37e6 <.L126>

000037e0 <.L122>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    37e0:	5c c8 bf    	mov.b     0x85c, WREG
    37e2:	00 04 a0    	bset.b    w0, #0x0
    37e4:	5c e8 b7    	mov.b     WREG, 0x85c

000037e6 <.L126>:
                    }
                    break;
    37e6:	00 00 00    	nop       

000037e8 <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    37e8:	07 00 37    	bra       0x37f8 <.L29>

000037ea <.L138>:
    37ea:	5c c8 bf    	mov.b     0x85c, WREG
    37ec:	00 04 a0    	bset.b    w0, #0x0
    37ee:	5c e8 b7    	mov.b     WREG, 0x85c

000037f0 <.LSM271>:
    37f0:	03 00 37    	bra       0x37f8 <.L29>

000037f2 <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    37f2:	5c c8 bf    	mov.b     0x85c, WREG
    37f4:	00 04 a0    	bset.b    w0, #0x0
    37f6:	5c e8 b7    	mov.b     WREG, 0x85c

000037f8 <.L29>:
    }
}
    37f8:	00 80 fa    	ulnk      
    37fa:	00 00 06    	return    

000037fc <_ProcessInToken>:

void ProcessInToken(void) {
    37fc:	00 00 fa    	lnk       #0x0

000037fe <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    37fe:	5f c8 bf    	mov.b     0x85f, WREG
    3800:	80 80 fb    	ze        w0, w1
    3802:	00 0f 20    	mov.w     #0xf0, w0
    3804:	00 80 60    	and.w     w1, w0, w0
    3806:	00 00 e0    	cp0.w     w0
    3808:	2b 00 3a    	bra       NZ, 0x3860 <.L140>

0000380a <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    380a:	20 d4 21    	mov.w     #0x1d42, w0
    380c:	10 40 78    	mov.b     [w0], w0
    380e:	80 80 fb    	ze        w0, w1
    3810:	00 06 20    	mov.w     #0x60, w0
    3812:	00 80 60    	and.w     w1, w0, w0
    3814:	01 02 20    	mov.w     #0x20, w1
    3816:	81 0f 50    	sub.w     w0, w1, [w15]
    3818:	1f 00 32    	bra       Z, 0x3858 <.L154>
    381a:	01 04 20    	mov.w     #0x40, w1
    381c:	81 0f 50    	sub.w     w0, w1, [w15]
    381e:	1a 00 32    	bra       Z, 0x3854 <.L146>
    3820:	00 00 e0    	cp0.w     w0
    3822:	1d 00 3a    	bra       NZ, 0x385e <.L155>

00003824 <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    3824:	30 d4 21    	mov.w     #0x1d43, w0
    3826:	10 40 78    	mov.b     [w0], w0
    3828:	00 80 fb    	ze        w0, w0
    382a:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    382c:	03 00 32    	bra       Z, 0x3834 <.L148>
    382e:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    3830:	0e 00 32    	bra       Z, 0x384e <.L149>

00003832 <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    3832:	13 00 37    	bra       0x385a <.L143>

00003834 <.L148>:
    3834:	40 d4 21    	mov.w     #0x1d44, w0
    3836:	10 40 78    	mov.b     [w0], w0
    3838:	00 80 fb    	ze        w0, w0
    383a:	b0 24 88    	mov.w     w0, 0x496
    383c:	b0 24 80    	mov.w     0x496, w0
    383e:	00 00 e0    	cp0.w     w0
    3840:	03 00 3a    	bra       NZ, 0x3848 <.L153>

00003842 <.LSM280>:
    3842:	10 c0 b3    	mov.b     #0x1, w0
    3844:	60 e8 b7    	mov.b     WREG, 0x860

00003846 <.LSM281>:
    3846:	02 00 37    	bra       0x384c <.L152>

00003848 <.L153>:
    3848:	20 c0 b3    	mov.b     #0x2, w0
    384a:	60 e8 b7    	mov.b     WREG, 0x860

0000384c <.L152>:
    384c:	02 00 37    	bra       0x3852 <.L147>

0000384e <.L149>:
    384e:	30 00 07    	rcall     0x38b0 <_SendDataPacket>

00003850 <.LSM285>:
    3850:	00 00 00    	nop       

00003852 <.L147>:
    3852:	03 00 37    	bra       0x385a <.L143>

00003854 <.L146>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    3854:	55 0a 07    	rcall     0x4d00 <_VendorRequestsIn>

00003856 <.LSM288>:
                    break;
    3856:	01 00 37    	bra       0x385a <.L143>

00003858 <.L154>:
    3858:	00 00 00    	nop       

0000385a <.L143>:
            }
            break;
    385a:	00 00 00    	nop       
    385c:	01 00 37    	bra       0x3860 <.L140>

0000385e <.L155>:
    385e:	00 00 00    	nop       

00003860 <.L140>:
    }
}
    3860:	00 80 fa    	ulnk      
    3862:	00 00 06    	return    

00003864 <_ProcessOutToken>:

void ProcessOutToken(void) {
    3864:	00 00 fa    	lnk       #0x0

00003866 <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    3866:	5f c8 bf    	mov.b     0x85f, WREG
    3868:	80 80 fb    	ze        w0, w1
    386a:	00 0f 20    	mov.w     #0xf0, w0
    386c:	00 80 60    	and.w     w1, w0, w0
    386e:	00 00 e0    	cp0.w     w0
    3870:	1d 00 3a    	bra       NZ, 0x38ac <.L156>

00003872 <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    3872:	20 d4 21    	mov.w     #0x1d42, w0
    3874:	10 40 78    	mov.b     [w0], w0
    3876:	80 80 fb    	ze        w0, w1
    3878:	00 06 20    	mov.w     #0x60, w0
    387a:	00 80 60    	and.w     w1, w0, w0
    387c:	01 02 20    	mov.w     #0x20, w1
    387e:	81 0f 50    	sub.w     w0, w1, [w15]
    3880:	05 00 32    	bra       Z, 0x388c <.L163>
    3882:	01 04 20    	mov.w     #0x40, w1
    3884:	81 0f 50    	sub.w     w0, w1, [w15]
    3886:	04 00 3a    	bra       NZ, 0x3890 <.L164>

00003888 <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    3888:	41 0a 07    	rcall     0x4d0c <_VendorRequestsOut>

0000388a <.LSM296>:
                    break;
    388a:	03 00 37    	bra       0x3892 <.L159>

0000388c <.L163>:
    388c:	00 00 00    	nop       
    388e:	01 00 37    	bra       0x3892 <.L159>

00003890 <.L164>:
    3890:	00 00 00    	nop       

00003892 <.L159>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    3892:	00 e0 21    	mov.w     #0x1e00, w0
    3894:	01 c4 b3    	mov.b     #0x40, w1
    3896:	01 48 78    	mov.b     w1, [w0]

00003898 <.LSM300>:
            BD[EP0OUT].status = 0x88;
    3898:	10 e0 21    	mov.w     #0x1e01, w0
    389a:	81 c8 b3    	mov.b     #0x88, w1
    389c:	01 48 78    	mov.b     w1, [w0]

0000389e <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    389e:	40 e0 21    	mov.w     #0x1e04, w0
    38a0:	80 40 eb    	clr.b     w1
    38a2:	01 48 78    	mov.b     w1, [w0]

000038a4 <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    38a4:	50 e0 21    	mov.w     #0x1e05, w0
    38a6:	81 cc b3    	mov.b     #0xc8, w1
    38a8:	01 48 78    	mov.b     w1, [w0]

000038aa <.LSM303>:
            break;
    38aa:	00 00 00    	nop       

000038ac <.L156>:
    }
}
    38ac:	00 80 fa    	ulnk      
    38ae:	00 00 06    	return    

000038b0 <_SendDataPacket>:

void SendDataPacket(void) {
    38b0:	02 00 fa    	lnk       #0x2

000038b2 <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    38b2:	61 ea 80    	mov.w     0x1d4c, w1
    38b4:	f0 03 20    	mov.w     #0x3f, w0
    38b6:	80 8f 50    	sub.w     w1, w0, [w15]
    38b8:	0b 00 3e    	bra       GTU, 0x38d0 <.L166>

000038ba <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    38ba:	60 ea 80    	mov.w     0x1d4c, w0
    38bc:	00 4f 78    	mov.b     w0, [w14]

000038be <.LSM308>:
        USB_request.bytes_left.w = 0;
    38be:	00 00 eb    	clr.w     w0
    38c0:	60 ea 88    	mov.w     w0, 0x1d4c

000038c2 <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    38c2:	20 d4 21    	mov.w     #0x1d42, w0
    38c4:	80 c0 eb    	setm.b    w1
    38c6:	01 48 78    	mov.b     w1, [w0]

000038c8 <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    38c8:	30 d4 21    	mov.w     #0x1d43, w0
    38ca:	80 c0 eb    	setm.b    w1
    38cc:	01 48 78    	mov.b     w1, [w0]
    38ce:	05 00 37    	bra       0x38da <.L167>

000038d0 <.L166>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    38d0:	00 c4 b3    	mov.b     #0x40, w0
    38d2:	00 4f 78    	mov.b     w0, [w14]

000038d4 <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    38d4:	60 ea 80    	mov.w     0x1d4c, w0
    38d6:	00 04 b1    	sub.w     #0x40, w0
    38d8:	60 ea 88    	mov.w     w0, 0x1d4c

000038da <.L167>:
    }
    for (n = 0; n<packet_length; n++) {
    38da:	00 40 eb    	clr.b     w0
    38dc:	10 47 98    	mov.b     w0, [w14+1]
    38de:	0c 00 37    	bra       0x38f8 <.L168>

000038e0 <.L169>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    38e0:	31 f0 80    	mov.w     0x1e06, w1
    38e2:	1e 40 90    	mov.b     [w14+1], w0
    38e4:	00 80 fb    	ze        w0, w0
    38e6:	80 80 40    	add.w     w1, w0, w1
    38e8:	50 ea 80    	mov.w     0x1d4a, w0
    38ea:	10 41 78    	mov.b     [w0], w2
    38ec:	82 48 78    	mov.b     w2, [w1]
    38ee:	00 00 e8    	inc.w     w0, w0
    38f0:	50 ea 88    	mov.w     w0, 0x1d4a

000038f2 <.LSM315>:
    38f2:	1e 40 90    	mov.b     [w14+1], w0
    38f4:	00 40 e8    	inc.b     w0, w0
    38f6:	10 47 98    	mov.b     w0, [w14+1]

000038f8 <.L168>:
    38f8:	1e 40 90    	mov.b     [w14+1], w0
    38fa:	9e 4f 50    	sub.b     w0, [w14], [w15]
    38fc:	f1 ff 39    	bra       NC, 0x38e0 <.L169>

000038fe <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    38fe:	40 e0 21    	mov.w     #0x1e04, w0
    3900:	1e 48 78    	mov.b     [w14], [w0]

00003902 <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    3902:	50 e0 21    	mov.w     #0x1e05, w0
    3904:	10 40 78    	mov.b     [w0], w0
    3906:	00 c0 ea    	com.b     w0, w0
    3908:	02 c4 b3    	mov.b     #0x40, w2
    390a:	82 40 60    	and.b     w0, w2, w1
    390c:	80 c8 b3    	mov.b     #0x88, w0
    390e:	00 c0 70    	ior.b     w1, w0, w0
    3910:	80 40 78    	mov.b     w0, w1
    3912:	50 e0 21    	mov.w     #0x1e05, w0
    3914:	01 48 78    	mov.b     w1, [w0]

00003916 <.LSM318>:
}
    3916:	00 80 fa    	ulnk      
    3918:	00 00 06    	return    

0000391a <__USB1Interrupt>:

//Making Service USB interrupt driven
void __attribute__((interrupt, auto_psv)) _USB1Interrupt(void) {
    391a:	36 00 f8    	push      0x36
    391c:	80 9f be    	mov.d     w0, [w15++]
    391e:	82 9f be    	mov.d     w2, [w15++]
    3920:	84 9f be    	mov.d     w4, [w15++]
    3922:	86 9f be    	mov.d     w6, [w15++]
    3924:	32 00 f8    	push      0x32
    3926:	34 00 f8    	push      0x34
    3928:	10 00 20    	mov.w     #0x1, w0
    392a:	a0 01 88    	mov.w     w0, 0x34
    392c:	00 20 20    	mov.w     #0x200, w0
    392e:	90 01 88    	mov.w     w0, 0x32
    3930:	00 00 fa    	lnk       #0x0

00003932 <.LSM320>:
    IFS5bits.USB1IF = 0; //flag
    3932:	8e c0 a9    	bclr.b    0x8e, #0x6

00003934 <.LSM321>:
    ServiceUSB();
    3934:	fe fb 07    	rcall     0x3132 <_ServiceUSB>

00003936 <.LSM322>:
}
    3936:	00 80 fa    	ulnk      
    3938:	34 00 f9    	pop       0x34
    393a:	32 00 f9    	pop       0x32
    393c:	4f 03 be    	mov.d     [--w15], w6
    393e:	4f 02 be    	mov.d     [--w15], w4
    3940:	4f 01 be    	mov.d     [--w15], w2
    3942:	4f 00 be    	mov.d     [--w15], w0
    3944:	36 00 f9    	pop       0x36
    3946:	00 40 06    	retfie    

00003948 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    3948:	02 00 fa    	lnk       #0x2
    394a:	00 0f 78    	mov.w     w0, [w14]

0000394c <.LSM1>:
    timer_lower(self);
    394c:	1e 00 78    	mov.w     [w14], w0
    394e:	01 02 07    	rcall     0x3d52 <_timer_lower>

00003950 <.LSM2>:
    if (self->every) {
    3950:	1e 00 78    	mov.w     [w14], w0
    3952:	10 08 90    	mov.w     [w0+18], w0
    3954:	00 00 e0    	cp0.w     w0
    3956:	05 00 32    	bra       Z, 0x3962 <.L2>

00003958 <.LSM3>:
        self->every(self);
    3958:	1e 00 78    	mov.w     [w14], w0
    395a:	90 08 90    	mov.w     [w0+18], w1
    395c:	1e 00 78    	mov.w     [w14], w0
    395e:	01 00 01    	call      w1
    3960:	1a 00 37    	bra       0x3996 <.L1>

00003962 <.L2>:
    } else if (self->after) {
    3962:	1e 00 78    	mov.w     [w14], w0
    3964:	20 08 90    	mov.w     [w0+20], w0
    3966:	00 00 e0    	cp0.w     w0
    3968:	14 00 32    	bra       Z, 0x3992 <.L4>

0000396a <.LSM5>:
        if (self->aftercount) {
    396a:	1e 00 78    	mov.w     [w14], w0
    396c:	00 08 90    	mov.w     [w0+16], w0
    396e:	00 00 e0    	cp0.w     w0
    3970:	0a 00 32    	bra       Z, 0x3986 <.L5>

00003972 <.LSM6>:
            self->after(self);
    3972:	1e 00 78    	mov.w     [w14], w0
    3974:	a0 08 90    	mov.w     [w0+20], w1
    3976:	1e 00 78    	mov.w     [w14], w0
    3978:	01 00 01    	call      w1

0000397a <.LSM7>:
            self->aftercount--;
    397a:	1e 00 78    	mov.w     [w14], w0
    397c:	00 08 90    	mov.w     [w0+16], w0
    397e:	80 00 e9    	dec.w     w0, w1
    3980:	1e 00 78    	mov.w     [w14], w0
    3982:	01 08 98    	mov.w     w1, [w0+16]
    3984:	08 00 37    	bra       0x3996 <.L1>

00003986 <.L5>:
        } else {
            timer_disableInterrupt(self);
    3986:	1e 00 78    	mov.w     [w14], w0
    3988:	0c 02 07    	rcall     0x3da2 <_timer_disableInterrupt>

0000398a <.LSM9>:
            self->after = NULL;
    398a:	1e 00 78    	mov.w     [w14], w0
    398c:	80 00 eb    	clr.w     w1
    398e:	21 08 98    	mov.w     w1, [w0+20]
    3990:	02 00 37    	bra       0x3996 <.L1>

00003992 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    3992:	1e 00 78    	mov.w     [w14], w0
    3994:	06 02 07    	rcall     0x3da2 <_timer_disableInterrupt>

00003996 <.L1>:
    }
}
    3996:	00 80 fa    	ulnk      
    3998:	00 00 06    	return    

0000399a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    399a:	36 00 f8    	push      0x36
    399c:	80 9f be    	mov.d     w0, [w15++]
    399e:	82 9f be    	mov.d     w2, [w15++]
    39a0:	84 9f be    	mov.d     w4, [w15++]
    39a2:	86 9f be    	mov.d     w6, [w15++]
    39a4:	32 00 f8    	push      0x32
    39a6:	34 00 f8    	push      0x34
    39a8:	10 00 20    	mov.w     #0x1, w0
    39aa:	a0 01 88    	mov.w     w0, 0x34
    39ac:	00 20 20    	mov.w     #0x200, w0
    39ae:	90 01 88    	mov.w     w0, 0x32
    39b0:	00 00 fa    	lnk       #0x0

000039b2 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    39b2:	e0 d4 21    	mov.w     #0x1d4e, w0
    39b4:	c9 ff 07    	rcall     0x3948 <_timer_serviceInterrupt>

000039b6 <.LSM14>:
}
    39b6:	00 80 fa    	ulnk      
    39b8:	34 00 f9    	pop       0x34
    39ba:	32 00 f9    	pop       0x32
    39bc:	4f 03 be    	mov.d     [--w15], w6
    39be:	4f 02 be    	mov.d     [--w15], w4
    39c0:	4f 01 be    	mov.d     [--w15], w2
    39c2:	4f 00 be    	mov.d     [--w15], w0
    39c4:	36 00 f9    	pop       0x36
    39c6:	00 40 06    	retfie    

000039c8 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    39c8:	36 00 f8    	push      0x36
    39ca:	80 9f be    	mov.d     w0, [w15++]
    39cc:	82 9f be    	mov.d     w2, [w15++]
    39ce:	84 9f be    	mov.d     w4, [w15++]
    39d0:	86 9f be    	mov.d     w6, [w15++]
    39d2:	32 00 f8    	push      0x32
    39d4:	34 00 f8    	push      0x34
    39d6:	10 00 20    	mov.w     #0x1, w0
    39d8:	a0 01 88    	mov.w     w0, 0x34
    39da:	00 20 20    	mov.w     #0x200, w0
    39dc:	90 01 88    	mov.w     w0, 0x32
    39de:	00 00 fa    	lnk       #0x0

000039e0 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    39e0:	40 d6 21    	mov.w     #0x1d64, w0
    39e2:	b2 ff 07    	rcall     0x3948 <_timer_serviceInterrupt>

000039e4 <.LSM17>:
}
    39e4:	00 80 fa    	ulnk      
    39e6:	34 00 f9    	pop       0x34
    39e8:	32 00 f9    	pop       0x32
    39ea:	4f 03 be    	mov.d     [--w15], w6
    39ec:	4f 02 be    	mov.d     [--w15], w4
    39ee:	4f 01 be    	mov.d     [--w15], w2
    39f0:	4f 00 be    	mov.d     [--w15], w0
    39f2:	36 00 f9    	pop       0x36
    39f4:	00 40 06    	retfie    

000039f6 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    39f6:	36 00 f8    	push      0x36
    39f8:	80 9f be    	mov.d     w0, [w15++]
    39fa:	82 9f be    	mov.d     w2, [w15++]
    39fc:	84 9f be    	mov.d     w4, [w15++]
    39fe:	86 9f be    	mov.d     w6, [w15++]
    3a00:	32 00 f8    	push      0x32
    3a02:	34 00 f8    	push      0x34
    3a04:	10 00 20    	mov.w     #0x1, w0
    3a06:	a0 01 88    	mov.w     w0, 0x34
    3a08:	00 20 20    	mov.w     #0x200, w0
    3a0a:	90 01 88    	mov.w     w0, 0x32
    3a0c:	00 00 fa    	lnk       #0x0

00003a0e <.LSM19>:
    timer_serviceInterrupt(&timer3);
    3a0e:	a0 d7 21    	mov.w     #0x1d7a, w0
    3a10:	9b ff 07    	rcall     0x3948 <_timer_serviceInterrupt>

00003a12 <.LSM20>:
}
    3a12:	00 80 fa    	ulnk      
    3a14:	34 00 f9    	pop       0x34
    3a16:	32 00 f9    	pop       0x32
    3a18:	4f 03 be    	mov.d     [--w15], w6
    3a1a:	4f 02 be    	mov.d     [--w15], w4
    3a1c:	4f 01 be    	mov.d     [--w15], w2
    3a1e:	4f 00 be    	mov.d     [--w15], w0
    3a20:	36 00 f9    	pop       0x36
    3a22:	00 40 06    	retfie    

00003a24 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    3a24:	36 00 f8    	push      0x36
    3a26:	80 9f be    	mov.d     w0, [w15++]
    3a28:	82 9f be    	mov.d     w2, [w15++]
    3a2a:	84 9f be    	mov.d     w4, [w15++]
    3a2c:	86 9f be    	mov.d     w6, [w15++]
    3a2e:	32 00 f8    	push      0x32
    3a30:	34 00 f8    	push      0x34
    3a32:	10 00 20    	mov.w     #0x1, w0
    3a34:	a0 01 88    	mov.w     w0, 0x34
    3a36:	00 20 20    	mov.w     #0x200, w0
    3a38:	90 01 88    	mov.w     w0, 0x32
    3a3a:	00 00 fa    	lnk       #0x0

00003a3c <.LSM22>:
    timer_serviceInterrupt(&timer4);
    3a3c:	00 d9 21    	mov.w     #0x1d90, w0
    3a3e:	84 ff 07    	rcall     0x3948 <_timer_serviceInterrupt>

00003a40 <.LSM23>:
}
    3a40:	00 80 fa    	ulnk      
    3a42:	34 00 f9    	pop       0x34
    3a44:	32 00 f9    	pop       0x32
    3a46:	4f 03 be    	mov.d     [--w15], w6
    3a48:	4f 02 be    	mov.d     [--w15], w4
    3a4a:	4f 01 be    	mov.d     [--w15], w2
    3a4c:	4f 00 be    	mov.d     [--w15], w0
    3a4e:	36 00 f9    	pop       0x36
    3a50:	00 40 06    	retfie    

00003a52 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    3a52:	36 00 f8    	push      0x36
    3a54:	80 9f be    	mov.d     w0, [w15++]
    3a56:	82 9f be    	mov.d     w2, [w15++]
    3a58:	84 9f be    	mov.d     w4, [w15++]
    3a5a:	86 9f be    	mov.d     w6, [w15++]
    3a5c:	32 00 f8    	push      0x32
    3a5e:	34 00 f8    	push      0x34
    3a60:	10 00 20    	mov.w     #0x1, w0
    3a62:	a0 01 88    	mov.w     w0, 0x34
    3a64:	00 20 20    	mov.w     #0x200, w0
    3a66:	90 01 88    	mov.w     w0, 0x32
    3a68:	00 00 fa    	lnk       #0x0

00003a6a <.LSM25>:
    timer_serviceInterrupt(&timer5);
    3a6a:	60 da 21    	mov.w     #0x1da6, w0
    3a6c:	6d ff 07    	rcall     0x3948 <_timer_serviceInterrupt>

00003a6e <.LSM26>:
}
    3a6e:	00 80 fa    	ulnk      
    3a70:	34 00 f9    	pop       0x34
    3a72:	32 00 f9    	pop       0x32
    3a74:	4f 03 be    	mov.d     [--w15], w6
    3a76:	4f 02 be    	mov.d     [--w15], w4
    3a78:	4f 01 be    	mov.d     [--w15], w2
    3a7a:	4f 00 be    	mov.d     [--w15], w0
    3a7c:	36 00 f9    	pop       0x36
    3a7e:	00 40 06    	retfie    

00003a80 <_init_timer>:

void init_timer(void) {
    3a80:	00 00 fa    	lnk       #0x0

00003a82 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    3a82:	b0 00 20    	mov.w     #0xb, w0
    3a84:	80 1f 78    	mov.w     w0, [w15++]
    3a86:	47 00 20    	mov.w     #0x4, w7
    3a88:	36 c0 b3    	mov.b     #0x3, w6
    3a8a:	45 09 20    	mov.w     #0x94, w5
    3a8c:	44 08 20    	mov.w     #0x84, w4
    3a8e:	03 10 20    	mov.w     #0x100, w3
    3a90:	22 10 20    	mov.w     #0x102, w2
    3a92:	41 10 20    	mov.w     #0x104, w1
    3a94:	e0 d4 21    	mov.w     #0x1d4e, w0
    3a96:	33 00 07    	rcall     0x3afe <_timer_init>
    3a98:	8f 87 e9    	dec2.w    w15, w15

00003a9a <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    3a9a:	c0 00 20    	mov.w     #0xc, w0
    3a9c:	80 1f 78    	mov.w     w0, [w15++]
    3a9e:	80 03 eb    	clr.w     w7
    3aa0:	76 c0 b3    	mov.b     #0x7, w6
    3aa2:	45 09 20    	mov.w     #0x94, w5
    3aa4:	44 08 20    	mov.w     #0x84, w4
    3aa6:	63 10 20    	mov.w     #0x106, w3
    3aa8:	c2 10 20    	mov.w     #0x10c, w2
    3aaa:	01 11 20    	mov.w     #0x110, w1
    3aac:	40 d6 21    	mov.w     #0x1d64, w0
    3aae:	27 00 07    	rcall     0x3afe <_timer_init>
    3ab0:	8f 87 e9    	dec2.w    w15, w15

00003ab2 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    3ab2:	d0 00 20    	mov.w     #0xd, w0
    3ab4:	80 1f 78    	mov.w     w0, [w15++]
    3ab6:	17 00 20    	mov.w     #0x1, w7
    3ab8:	86 c0 b3    	mov.b     #0x8, w6
    3aba:	45 09 20    	mov.w     #0x94, w5
    3abc:	44 08 20    	mov.w     #0x84, w4
    3abe:	a3 10 20    	mov.w     #0x10a, w3
    3ac0:	e2 10 20    	mov.w     #0x10e, w2
    3ac2:	21 11 20    	mov.w     #0x112, w1
    3ac4:	a0 d7 21    	mov.w     #0x1d7a, w0
    3ac6:	1b 00 07    	rcall     0x3afe <_timer_init>
    3ac8:	8f 87 e9    	dec2.w    w15, w15

00003aca <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    3aca:	e0 00 20    	mov.w     #0xe, w0
    3acc:	80 1f 78    	mov.w     w0, [w15++]
    3ace:	27 00 20    	mov.w     #0x2, w7
    3ad0:	b6 c0 b3    	mov.b     #0xb, w6
    3ad2:	65 09 20    	mov.w     #0x96, w5
    3ad4:	64 08 20    	mov.w     #0x86, w4
    3ad6:	43 11 20    	mov.w     #0x114, w3
    3ad8:	a2 11 20    	mov.w     #0x11a, w2
    3ada:	e1 11 20    	mov.w     #0x11e, w1
    3adc:	00 d9 21    	mov.w     #0x1d90, w0
    3ade:	0f 00 07    	rcall     0x3afe <_timer_init>
    3ae0:	8f 87 e9    	dec2.w    w15, w15

00003ae2 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    3ae2:	f0 00 20    	mov.w     #0xf, w0
    3ae4:	80 1f 78    	mov.w     w0, [w15++]
    3ae6:	37 00 20    	mov.w     #0x3, w7
    3ae8:	c6 c0 b3    	mov.b     #0xc, w6
    3aea:	65 09 20    	mov.w     #0x96, w5
    3aec:	64 08 20    	mov.w     #0x86, w4
    3aee:	83 11 20    	mov.w     #0x118, w3
    3af0:	c2 11 20    	mov.w     #0x11c, w2
    3af2:	01 12 20    	mov.w     #0x120, w1
    3af4:	60 da 21    	mov.w     #0x1da6, w0
    3af6:	03 00 07    	rcall     0x3afe <_timer_init>
    3af8:	8f 87 e9    	dec2.w    w15, w15

00003afa <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    3afa:	00 80 fa    	ulnk      
    3afc:	00 00 06    	return    

00003afe <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    3afe:	10 00 fa    	lnk       #0x10
    3b00:	00 0f 78    	mov.w     w0, [w14]
    3b02:	11 07 98    	mov.w     w1, [w14+2]
    3b04:	22 07 98    	mov.w     w2, [w14+4]
    3b06:	33 07 98    	mov.w     w3, [w14+6]
    3b08:	44 07 98    	mov.w     w4, [w14+8]
    3b0a:	55 07 98    	mov.w     w5, [w14+10]
    3b0c:	46 4f 98    	mov.b     w6, [w14+12]
    3b0e:	77 07 98    	mov.w     w7, [w14+14]

00003b10 <.LSM35>:
    self->TxCON = TxCON;
    3b10:	1e 00 78    	mov.w     [w14], w0
    3b12:	9e 00 90    	mov.w     [w14+2], w1
    3b14:	01 08 78    	mov.w     w1, [w0]

00003b16 <.LSM36>:
    self->PRx = PRx;
    3b16:	1e 00 78    	mov.w     [w14], w0
    3b18:	ae 00 90    	mov.w     [w14+4], w1
    3b1a:	11 00 98    	mov.w     w1, [w0+2]

00003b1c <.LSM37>:
    self->TMRx = TMRx;
    3b1c:	1e 00 78    	mov.w     [w14], w0
    3b1e:	be 00 90    	mov.w     [w14+6], w1
    3b20:	21 00 98    	mov.w     w1, [w0+4]

00003b22 <.LSM38>:
    self->IFSy = IFSy;
    3b22:	1e 00 78    	mov.w     [w14], w0
    3b24:	ce 00 90    	mov.w     [w14+8], w1
    3b26:	31 00 98    	mov.w     w1, [w0+6]

00003b28 <.LSM39>:
    self->IECy = IECy;
    3b28:	1e 00 78    	mov.w     [w14], w0
    3b2a:	de 00 90    	mov.w     [w14+10], w1
    3b2c:	41 00 98    	mov.w     w1, [w0+8]

00003b2e <.LSM40>:
    self->flagbit = flagbit;
    3b2e:	1e 00 78    	mov.w     [w14], w0
    3b30:	ce 48 90    	mov.b     [w14+12], w1
    3b32:	21 48 98    	mov.b     w1, [w0+10]

00003b34 <.LSM41>:
    self->octselnum = octselnum;
    3b34:	1e 00 78    	mov.w     [w14], w0
    3b36:	fe 00 90    	mov.w     [w14+14], w1
    3b38:	61 00 98    	mov.w     w1, [w0+12]

00003b3a <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    3b3a:	1e 00 78    	mov.w     [w14], w0
    3b3c:	ce b8 97    	mov.w     [w14-8], w1
    3b3e:	71 00 98    	mov.w     w1, [w0+14]

00003b40 <.LSM43>:
    self->aftercount = 0;
    3b40:	1e 00 78    	mov.w     [w14], w0
    3b42:	80 00 eb    	clr.w     w1
    3b44:	01 08 98    	mov.w     w1, [w0+16]

00003b46 <.LSM44>:
    self->every = NULL;
    3b46:	1e 00 78    	mov.w     [w14], w0
    3b48:	80 00 eb    	clr.w     w1
    3b4a:	11 08 98    	mov.w     w1, [w0+18]

00003b4c <.LSM45>:
    self->after = NULL;
    3b4c:	1e 00 78    	mov.w     [w14], w0
    3b4e:	80 00 eb    	clr.w     w1
    3b50:	21 08 98    	mov.w     w1, [w0+20]

00003b52 <.LSM46>:
}
    3b52:	00 80 fa    	ulnk      
    3b54:	00 00 06    	return    

00003b56 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    3b56:	06 00 fa    	lnk       #0x6
    3b58:	88 1f 78    	mov.w     w8, [w15++]
    3b5a:	00 0f 78    	mov.w     w0, [w14]
    3b5c:	12 07 98    	mov.w     w2, [w14+2]
    3b5e:	23 07 98    	mov.w     w3, [w14+4]

00003b60 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    3b60:	18 c0 b3    	mov.b     #0x1, w8
    3b62:	d2 7b 23    	mov.w     #0x37bd, w2
    3b64:	63 f8 23    	mov.w     #0x3f86, w3
    3b66:	1e 00 90    	mov.w     [w14+2], w0
    3b68:	ae 00 90    	mov.w     [w14+4], w1
    3b6a:	fd eb 07    	rcall     0x1366 <___gesf2>
    3b6c:	00 00 e0    	cp0.w     w0
    3b6e:	01 00 3c    	bra       GT, 0x3b72 <.L14>
    3b70:	00 44 eb    	clr.b     w8

00003b72 <.L14>:
    3b72:	08 04 e0    	cp0.b     w8
    3b74:	69 00 3a    	bra       NZ, 0x3c48 <.L23>

00003b76 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    3b76:	18 c0 b3    	mov.b     #0x1, w8
    3b78:	d2 7b 23    	mov.w     #0x37bd, w2
    3b7a:	63 e8 23    	mov.w     #0x3e86, w3
    3b7c:	1e 00 90    	mov.w     [w14+2], w0
    3b7e:	ae 00 90    	mov.w     [w14+4], w1
    3b80:	f2 eb 07    	rcall     0x1366 <___gesf2>
    3b82:	00 00 e0    	cp0.w     w0
    3b84:	01 00 3c    	bra       GT, 0x3b88 <.L17>
    3b86:	00 44 eb    	clr.b     w8

00003b88 <.L17>:
    3b88:	08 04 e0    	cp0.b     w8
    3b8a:	12 00 32    	bra       Z, 0x3bb0 <.L18>

00003b8c <.LSM50>:
        timer_stop(self);
    3b8c:	1e 00 78    	mov.w     [w14], w0
    3b8e:	c4 00 07    	rcall     0x3d18 <_timer_stop>

00003b90 <.LSM51>:
        poke(self->TxCON, 0x0030);
    3b90:	1e 00 78    	mov.w     [w14], w0
    3b92:	10 00 78    	mov.w     [w0], w0
    3b94:	01 03 20    	mov.w     #0x30, w1
    3b96:	01 08 78    	mov.w     w1, [w0]

00003b98 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    3b98:	1e 00 78    	mov.w     [w14], w0
    3b9a:	10 04 90    	mov.w     [w0+2], w8
    3b9c:	02 40 22    	mov.w     #0x2400, w2
    3b9e:	43 77 24    	mov.w     #0x4774, w3
    3ba0:	1e 00 90    	mov.w     [w14+2], w0
    3ba2:	ae 00 90    	mov.w     [w14+4], w1
    3ba4:	5a ec 07    	rcall     0x145a <___mulsf3>
    3ba6:	e1 eb 07    	rcall     0x136a <___fixunssfsi>
    3ba8:	00 00 78    	mov.w     w0, w0
    3baa:	00 00 e9    	dec.w     w0, w0
    3bac:	00 0c 78    	mov.w     w0, [w8]
    3bae:	4d 00 37    	bra       0x3c4a <.L13>

00003bb0 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    3bb0:	18 c0 b3    	mov.b     #0x1, w8
    3bb2:	d2 7b 23    	mov.w     #0x37bd, w2
    3bb4:	63 d0 23    	mov.w     #0x3d06, w3
    3bb6:	1e 00 90    	mov.w     [w14+2], w0
    3bb8:	ae 00 90    	mov.w     [w14+4], w1
    3bba:	d5 eb 07    	rcall     0x1366 <___gesf2>
    3bbc:	00 00 e0    	cp0.w     w0
    3bbe:	01 00 3c    	bra       GT, 0x3bc2 <.L19>
    3bc0:	00 44 eb    	clr.b     w8

00003bc2 <.L19>:
    3bc2:	08 04 e0    	cp0.b     w8
    3bc4:	12 00 32    	bra       Z, 0x3bea <.L20>

00003bc6 <.LSM54>:
        timer_stop(self);
    3bc6:	1e 00 78    	mov.w     [w14], w0
    3bc8:	a7 00 07    	rcall     0x3d18 <_timer_stop>

00003bca <.LSM55>:
        poke(self->TxCON, 0x0020);
    3bca:	1e 00 78    	mov.w     [w14], w0
    3bcc:	10 00 78    	mov.w     [w0], w0
    3bce:	01 02 20    	mov.w     #0x20, w1
    3bd0:	01 08 78    	mov.w     w1, [w0]

00003bd2 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    3bd2:	1e 00 78    	mov.w     [w14], w0
    3bd4:	10 04 90    	mov.w     [w0+2], w8
    3bd6:	02 40 22    	mov.w     #0x2400, w2
    3bd8:	43 87 24    	mov.w     #0x4874, w3
    3bda:	1e 00 90    	mov.w     [w14+2], w0
    3bdc:	ae 00 90    	mov.w     [w14+4], w1
    3bde:	3d ec 07    	rcall     0x145a <___mulsf3>
    3be0:	c4 eb 07    	rcall     0x136a <___fixunssfsi>
    3be2:	00 00 78    	mov.w     w0, w0
    3be4:	00 00 e9    	dec.w     w0, w0
    3be6:	00 0c 78    	mov.w     w0, [w8]
    3be8:	30 00 37    	bra       0x3c4a <.L13>

00003bea <.L20>:
    } else if (period>(65536.*TCY)) {
    3bea:	18 c0 b3    	mov.b     #0x1, w8
    3bec:	d2 7b 23    	mov.w     #0x37bd, w2
    3bee:	63 b8 23    	mov.w     #0x3b86, w3
    3bf0:	1e 00 90    	mov.w     [w14+2], w0
    3bf2:	ae 00 90    	mov.w     [w14+4], w1
    3bf4:	b8 eb 07    	rcall     0x1366 <___gesf2>
    3bf6:	00 00 e0    	cp0.w     w0
    3bf8:	01 00 3c    	bra       GT, 0x3bfc <.L21>
    3bfa:	00 44 eb    	clr.b     w8

00003bfc <.L21>:
    3bfc:	08 04 e0    	cp0.b     w8
    3bfe:	12 00 32    	bra       Z, 0x3c24 <.L22>

00003c00 <.LSM58>:
        timer_stop(self);
    3c00:	1e 00 78    	mov.w     [w14], w0
    3c02:	8a 00 07    	rcall     0x3d18 <_timer_stop>

00003c04 <.LSM59>:
        poke(self->TxCON, 0x0010);
    3c04:	1e 00 78    	mov.w     [w14], w0
    3c06:	10 00 78    	mov.w     [w0], w0
    3c08:	01 01 20    	mov.w     #0x10, w1
    3c0a:	01 08 78    	mov.w     w1, [w0]

00003c0c <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3c0c:	1e 00 78    	mov.w     [w14], w0
    3c0e:	10 04 90    	mov.w     [w0+2], w8
    3c10:	02 40 22    	mov.w     #0x2400, w2
    3c12:	43 9f 24    	mov.w     #0x49f4, w3
    3c14:	1e 00 90    	mov.w     [w14+2], w0
    3c16:	ae 00 90    	mov.w     [w14+4], w1
    3c18:	20 ec 07    	rcall     0x145a <___mulsf3>
    3c1a:	a7 eb 07    	rcall     0x136a <___fixunssfsi>
    3c1c:	00 00 78    	mov.w     w0, w0
    3c1e:	00 00 e9    	dec.w     w0, w0
    3c20:	00 0c 78    	mov.w     w0, [w8]
    3c22:	13 00 37    	bra       0x3c4a <.L13>

00003c24 <.L22>:
    } else {
        timer_stop(self);
    3c24:	1e 00 78    	mov.w     [w14], w0
    3c26:	78 00 07    	rcall     0x3d18 <_timer_stop>

00003c28 <.LSM62>:
        poke(self->TxCON, 0x0000);
    3c28:	1e 00 78    	mov.w     [w14], w0
    3c2a:	10 00 78    	mov.w     [w0], w0
    3c2c:	80 00 eb    	clr.w     w1
    3c2e:	01 08 78    	mov.w     w1, [w0]

00003c30 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    3c30:	1e 00 78    	mov.w     [w14], w0
    3c32:	10 04 90    	mov.w     [w0+2], w8
    3c34:	02 40 22    	mov.w     #0x2400, w2
    3c36:	43 b7 24    	mov.w     #0x4b74, w3
    3c38:	1e 00 90    	mov.w     [w14+2], w0
    3c3a:	ae 00 90    	mov.w     [w14+4], w1
    3c3c:	0e ec 07    	rcall     0x145a <___mulsf3>
    3c3e:	95 eb 07    	rcall     0x136a <___fixunssfsi>
    3c40:	00 00 78    	mov.w     w0, w0
    3c42:	00 00 e9    	dec.w     w0, w0
    3c44:	00 0c 78    	mov.w     w0, [w8]
    3c46:	01 00 37    	bra       0x3c4a <.L13>

00003c48 <.L23>:
    3c48:	00 00 00    	nop       

00003c4a <.L13>:
    }
}
    3c4a:	4f 04 78    	mov.w     [--w15], w8
    3c4c:	00 80 fa    	ulnk      
    3c4e:	00 00 06    	return    

00003c50 <_timer_period>:

float timer_period(_TIMER *self) {
    3c50:	04 00 fa    	lnk       #0x4
    3c52:	88 9f be    	mov.d     w8, [w15++]
    3c54:	10 07 98    	mov.w     w0, [w14+2]

00003c56 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3c56:	1e 00 90    	mov.w     [w14+2], w0
    3c58:	10 00 78    	mov.w     [w0], w0
    3c5a:	90 00 78    	mov.w     [w0], w1
    3c5c:	00 03 20    	mov.w     #0x30, w0
    3c5e:	00 80 60    	and.w     w1, w0, w0
    3c60:	44 00 de    	lsr.w     w0, #0x4, w0
    3c62:	00 0f 78    	mov.w     w0, [w14]

00003c64 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3c64:	1e 00 78    	mov.w     [w14], w0
    3c66:	c2 00 dd    	sl.w      w0, #0x2, w1
    3c68:	80 de 21    	mov.w     #0x1de8, w0
    3c6a:	00 80 40    	add.w     w1, w0, w0
    3c6c:	10 04 be    	mov.d     [w0], w8
    3c6e:	1e 00 90    	mov.w     [w14+2], w0
    3c70:	10 00 90    	mov.w     [w0+2], w0
    3c72:	10 00 78    	mov.w     [w0], w0
    3c74:	80 00 eb    	clr.w     w1
    3c76:	94 eb 07    	rcall     0x13a0 <___floatunsisf>
    3c78:	02 00 20    	mov.w     #0x0, w2
    3c7a:	03 f8 23    	mov.w     #0x3f80, w3
    3c7c:	d3 ea 07    	rcall     0x1224 <___addsf3>
    3c7e:	00 01 be    	mov.d     w0, w2
    3c80:	08 00 be    	mov.d     w8, w0
    3c82:	eb eb 07    	rcall     0x145a <___mulsf3>

00003c84 <.LSM69>:
}
    3c84:	4f 04 be    	mov.d     [--w15], w8
    3c86:	00 80 fa    	ulnk      
    3c88:	00 00 06    	return    

00003c8a <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    3c8a:	06 00 fa    	lnk       #0x6
    3c8c:	00 0f 78    	mov.w     w0, [w14]
    3c8e:	12 07 98    	mov.w     w2, [w14+2]
    3c90:	23 07 98    	mov.w     w3, [w14+4]

00003c92 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    3c92:	1e 01 90    	mov.w     [w14+2], w2
    3c94:	ae 01 90    	mov.w     [w14+4], w3
    3c96:	00 00 20    	mov.w     #0x0, w0
    3c98:	01 f8 23    	mov.w     #0x3f80, w1
    3c9a:	21 eb 07    	rcall     0x12de <___divsf3>
    3c9c:	00 01 be    	mov.d     w0, w2
    3c9e:	1e 00 78    	mov.w     [w14], w0
    3ca0:	5a ff 07    	rcall     0x3b56 <_timer_setPeriod>

00003ca2 <.LSM72>:
}
    3ca2:	00 80 fa    	ulnk      
    3ca4:	00 00 06    	return    

00003ca6 <_timer_freq>:

float timer_freq(_TIMER *self) {
    3ca6:	02 00 fa    	lnk       #0x2
    3ca8:	00 0f 78    	mov.w     w0, [w14]

00003caa <.LSM74>:
    return 1./timer_period(self);
    3caa:	1e 00 78    	mov.w     [w14], w0
    3cac:	d1 ff 07    	rcall     0x3c50 <_timer_period>
    3cae:	00 01 be    	mov.d     w0, w2
    3cb0:	00 00 20    	mov.w     #0x0, w0
    3cb2:	01 f8 23    	mov.w     #0x3f80, w1
    3cb4:	14 eb 07    	rcall     0x12de <___divsf3>

00003cb6 <.LSM75>:
}
    3cb6:	00 80 fa    	ulnk      
    3cb8:	00 00 06    	return    

00003cba <_timer_time>:

float timer_time(_TIMER *self) {
    3cba:	04 00 fa    	lnk       #0x4
    3cbc:	88 9f be    	mov.d     w8, [w15++]
    3cbe:	10 07 98    	mov.w     w0, [w14+2]

00003cc0 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3cc0:	1e 00 90    	mov.w     [w14+2], w0
    3cc2:	10 00 78    	mov.w     [w0], w0
    3cc4:	90 00 78    	mov.w     [w0], w1
    3cc6:	00 03 20    	mov.w     #0x30, w0
    3cc8:	00 80 60    	and.w     w1, w0, w0
    3cca:	44 00 de    	lsr.w     w0, #0x4, w0
    3ccc:	00 0f 78    	mov.w     w0, [w14]

00003cce <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3cce:	1e 00 78    	mov.w     [w14], w0
    3cd0:	c2 00 dd    	sl.w      w0, #0x2, w1
    3cd2:	80 de 21    	mov.w     #0x1de8, w0
    3cd4:	00 80 40    	add.w     w1, w0, w0
    3cd6:	10 04 be    	mov.d     [w0], w8
    3cd8:	1e 00 90    	mov.w     [w14+2], w0
    3cda:	10 00 90    	mov.w     [w0+2], w0
    3cdc:	10 00 78    	mov.w     [w0], w0
    3cde:	80 00 eb    	clr.w     w1
    3ce0:	5f eb 07    	rcall     0x13a0 <___floatunsisf>
    3ce2:	02 00 20    	mov.w     #0x0, w2
    3ce4:	03 f8 23    	mov.w     #0x3f80, w3
    3ce6:	9e ea 07    	rcall     0x1224 <___addsf3>
    3ce8:	00 01 be    	mov.d     w0, w2
    3cea:	08 00 be    	mov.d     w8, w0
    3cec:	b6 eb 07    	rcall     0x145a <___mulsf3>

00003cee <.LSM79>:
}
    3cee:	4f 04 be    	mov.d     [--w15], w8
    3cf0:	00 80 fa    	ulnk      
    3cf2:	00 00 06    	return    

00003cf4 <_timer_start>:

void timer_start(_TIMER *self) {
    3cf4:	02 00 fa    	lnk       #0x2
    3cf6:	00 0f 78    	mov.w     w0, [w14]

00003cf8 <.LSM81>:
    timer_lower(self);
    3cf8:	1e 00 78    	mov.w     [w14], w0
    3cfa:	2b 00 07    	rcall     0x3d52 <_timer_lower>

00003cfc <.LSM82>:
    poke(self->TMRx, 0);
    3cfc:	1e 00 78    	mov.w     [w14], w0
    3cfe:	20 00 90    	mov.w     [w0+4], w0
    3d00:	80 00 eb    	clr.w     w1
    3d02:	01 08 78    	mov.w     w1, [w0]

00003d04 <.LSM83>:
    bitset(self->TxCON, 15);
    3d04:	1e 00 78    	mov.w     [w14], w0
    3d06:	10 00 78    	mov.w     [w0], w0
    3d08:	9e 00 78    	mov.w     [w14], w1
    3d0a:	91 00 78    	mov.w     [w1], w1
    3d0c:	11 01 78    	mov.w     [w1], w2
    3d0e:	01 00 28    	mov.w     #0x8000, w1
    3d10:	82 80 70    	ior.w     w1, w2, w1
    3d12:	01 08 78    	mov.w     w1, [w0]

00003d14 <.LSM84>:
}
    3d14:	00 80 fa    	ulnk      
    3d16:	00 00 06    	return    

00003d18 <_timer_stop>:

void timer_stop(_TIMER *self) {
    3d18:	02 00 fa    	lnk       #0x2
    3d1a:	00 0f 78    	mov.w     w0, [w14]

00003d1c <.LSM86>:
    bitclear(self->TxCON, 15);
    3d1c:	1e 00 78    	mov.w     [w14], w0
    3d1e:	10 00 78    	mov.w     [w0], w0
    3d20:	9e 00 78    	mov.w     [w14], w1
    3d22:	91 00 78    	mov.w     [w1], w1
    3d24:	11 01 78    	mov.w     [w1], w2
    3d26:	f1 ff 27    	mov.w     #0x7fff, w1
    3d28:	81 00 61    	and.w     w2, w1, w1
    3d2a:	01 08 78    	mov.w     w1, [w0]

00003d2c <.LSM87>:
}
    3d2c:	00 80 fa    	ulnk      
    3d2e:	00 00 06    	return    

00003d30 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    3d30:	02 00 fa    	lnk       #0x2
    3d32:	00 0f 78    	mov.w     w0, [w14]

00003d34 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    3d34:	1e 00 78    	mov.w     [w14], w0
    3d36:	30 00 90    	mov.w     [w0+6], w0
    3d38:	90 00 78    	mov.w     [w0], w1
    3d3a:	1e 00 78    	mov.w     [w14], w0
    3d3c:	20 48 90    	mov.b     [w0+10], w0
    3d3e:	00 80 fb    	ze        w0, w0
    3d40:	12 00 20    	mov.w     #0x1, w2
    3d42:	00 10 dd    	sl.w      w2, w0, w0
    3d44:	00 80 60    	and.w     w1, w0, w0
    3d46:	00 f0 a7    	btsc.w    w0, #0xf
    3d48:	00 00 ea    	neg.w     w0, w0
    3d4a:	00 00 ea    	neg.w     w0, w0
    3d4c:	4f 00 de    	lsr.w     w0, #0xf, w0

00003d4e <.LSM90>:
}
    3d4e:	00 80 fa    	ulnk      
    3d50:	00 00 06    	return    

00003d52 <_timer_lower>:

void timer_lower(_TIMER *self) {
    3d52:	02 00 fa    	lnk       #0x2
    3d54:	00 0f 78    	mov.w     w0, [w14]

00003d56 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3d56:	1e 00 78    	mov.w     [w14], w0
    3d58:	30 00 90    	mov.w     [w0+6], w0
    3d5a:	9e 00 78    	mov.w     [w14], w1
    3d5c:	b1 00 90    	mov.w     [w1+6], w1
    3d5e:	11 01 78    	mov.w     [w1], w2
    3d60:	9e 00 78    	mov.w     [w14], w1
    3d62:	a1 48 90    	mov.b     [w1+10], w1
    3d64:	81 80 fb    	ze        w1, w1
    3d66:	13 00 20    	mov.w     #0x1, w3
    3d68:	81 18 dd    	sl.w      w3, w1, w1
    3d6a:	81 80 ea    	com.w     w1, w1
    3d6c:	81 00 61    	and.w     w2, w1, w1
    3d6e:	01 08 78    	mov.w     w1, [w0]

00003d70 <.LSM93>:
}
    3d70:	00 80 fa    	ulnk      
    3d72:	00 00 06    	return    

00003d74 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    3d74:	02 00 fa    	lnk       #0x2
    3d76:	00 0f 78    	mov.w     w0, [w14]

00003d78 <.LSM95>:
    return peek(self->TMRx);
    3d78:	1e 00 78    	mov.w     [w14], w0
    3d7a:	20 00 90    	mov.w     [w0+4], w0
    3d7c:	10 00 78    	mov.w     [w0], w0

00003d7e <.LSM96>:
}
    3d7e:	00 80 fa    	ulnk      
    3d80:	00 00 06    	return    

00003d82 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    3d82:	02 00 fa    	lnk       #0x2
    3d84:	00 0f 78    	mov.w     w0, [w14]

00003d86 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    3d86:	1e 00 78    	mov.w     [w14], w0
    3d88:	40 00 90    	mov.w     [w0+8], w0
    3d8a:	9e 00 78    	mov.w     [w14], w1
    3d8c:	c1 00 90    	mov.w     [w1+8], w1
    3d8e:	11 01 78    	mov.w     [w1], w2
    3d90:	9e 00 78    	mov.w     [w14], w1
    3d92:	a1 48 90    	mov.b     [w1+10], w1
    3d94:	81 80 fb    	ze        w1, w1
    3d96:	13 00 20    	mov.w     #0x1, w3
    3d98:	81 18 dd    	sl.w      w3, w1, w1
    3d9a:	82 80 70    	ior.w     w1, w2, w1
    3d9c:	01 08 78    	mov.w     w1, [w0]

00003d9e <.LSM99>:
}
    3d9e:	00 80 fa    	ulnk      
    3da0:	00 00 06    	return    

00003da2 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3da2:	02 00 fa    	lnk       #0x2
    3da4:	00 0f 78    	mov.w     w0, [w14]

00003da6 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    3da6:	1e 00 78    	mov.w     [w14], w0
    3da8:	40 00 90    	mov.w     [w0+8], w0
    3daa:	9e 00 78    	mov.w     [w14], w1
    3dac:	c1 00 90    	mov.w     [w1+8], w1
    3dae:	11 01 78    	mov.w     [w1], w2
    3db0:	9e 00 78    	mov.w     [w14], w1
    3db2:	a1 48 90    	mov.b     [w1+10], w1
    3db4:	81 80 fb    	ze        w1, w1
    3db6:	13 00 20    	mov.w     #0x1, w3
    3db8:	81 18 dd    	sl.w      w3, w1, w1
    3dba:	81 80 ea    	com.w     w1, w1
    3dbc:	81 00 61    	and.w     w2, w1, w1
    3dbe:	01 08 78    	mov.w     w1, [w0]

00003dc0 <.LSM102>:
}
    3dc0:	00 80 fa    	ulnk      
    3dc2:	00 00 06    	return    

00003dc4 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3dc4:	08 00 fa    	lnk       #0x8
    3dc6:	00 0f 78    	mov.w     w0, [w14]
    3dc8:	12 07 98    	mov.w     w2, [w14+2]
    3dca:	23 07 98    	mov.w     w3, [w14+4]
    3dcc:	31 07 98    	mov.w     w1, [w14+6]

00003dce <.LSM104>:
    timer_disableInterrupt(self);
    3dce:	1e 00 78    	mov.w     [w14], w0
    3dd0:	e8 ff 07    	rcall     0x3da2 <_timer_disableInterrupt>

00003dd2 <.LSM105>:
    timer_setPeriod(self, interval);
    3dd2:	1e 01 90    	mov.w     [w14+2], w2
    3dd4:	ae 01 90    	mov.w     [w14+4], w3
    3dd6:	1e 00 78    	mov.w     [w14], w0
    3dd8:	be fe 07    	rcall     0x3b56 <_timer_setPeriod>

00003dda <.LSM106>:
    self->aftercount = 0;
    3dda:	1e 00 78    	mov.w     [w14], w0
    3ddc:	80 00 eb    	clr.w     w1
    3dde:	01 08 98    	mov.w     w1, [w0+16]

00003de0 <.LSM107>:
    self->every = callback;
    3de0:	1e 00 78    	mov.w     [w14], w0
    3de2:	be 00 90    	mov.w     [w14+6], w1
    3de4:	11 08 98    	mov.w     w1, [w0+18]

00003de6 <.LSM108>:
    self->after = NULL;
    3de6:	1e 00 78    	mov.w     [w14], w0
    3de8:	80 00 eb    	clr.w     w1
    3dea:	21 08 98    	mov.w     w1, [w0+20]

00003dec <.LSM109>:
    timer_enableInterrupt(self);
    3dec:	1e 00 78    	mov.w     [w14], w0
    3dee:	c9 ff 07    	rcall     0x3d82 <_timer_enableInterrupt>

00003df0 <.LSM110>:
    timer_start(self);
    3df0:	1e 00 78    	mov.w     [w14], w0
    3df2:	80 ff 07    	rcall     0x3cf4 <_timer_start>

00003df4 <.LSM111>:
}
    3df4:	00 80 fa    	ulnk      
    3df6:	00 00 06    	return    

00003df8 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    3df8:	0a 00 fa    	lnk       #0xa
    3dfa:	00 0f 78    	mov.w     w0, [w14]
    3dfc:	12 07 98    	mov.w     w2, [w14+2]
    3dfe:	23 07 98    	mov.w     w3, [w14+4]
    3e00:	31 07 98    	mov.w     w1, [w14+6]
    3e02:	44 07 98    	mov.w     w4, [w14+8]

00003e04 <.LSM113>:
    timer_disableInterrupt(self);
    3e04:	1e 00 78    	mov.w     [w14], w0
    3e06:	cd ff 07    	rcall     0x3da2 <_timer_disableInterrupt>

00003e08 <.LSM114>:
    timer_setPeriod(self, delay);
    3e08:	1e 01 90    	mov.w     [w14+2], w2
    3e0a:	ae 01 90    	mov.w     [w14+4], w3
    3e0c:	1e 00 78    	mov.w     [w14], w0
    3e0e:	a3 fe 07    	rcall     0x3b56 <_timer_setPeriod>

00003e10 <.LSM115>:
    self->aftercount = num_times;
    3e10:	1e 00 78    	mov.w     [w14], w0
    3e12:	be 00 90    	mov.w     [w14+6], w1
    3e14:	01 08 98    	mov.w     w1, [w0+16]

00003e16 <.LSM116>:
    self->every = NULL;
    3e16:	1e 00 78    	mov.w     [w14], w0
    3e18:	80 00 eb    	clr.w     w1
    3e1a:	11 08 98    	mov.w     w1, [w0+18]

00003e1c <.LSM117>:
    self->after = callback;
    3e1c:	1e 00 78    	mov.w     [w14], w0
    3e1e:	ce 00 90    	mov.w     [w14+8], w1
    3e20:	21 08 98    	mov.w     w1, [w0+20]

00003e22 <.LSM118>:
    timer_enableInterrupt(self);
    3e22:	1e 00 78    	mov.w     [w14], w0
    3e24:	ae ff 07    	rcall     0x3d82 <_timer_enableInterrupt>

00003e26 <.LSM119>:
    timer_start(self);
    3e26:	1e 00 78    	mov.w     [w14], w0
    3e28:	65 ff 07    	rcall     0x3cf4 <_timer_start>

00003e2a <.LSM120>:
}
    3e2a:	00 80 fa    	ulnk      
    3e2c:	00 00 06    	return    

00003e2e <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    3e2e:	02 00 fa    	lnk       #0x2
    3e30:	00 0f 78    	mov.w     w0, [w14]

00003e32 <.LSM122>:
    timer_disableInterrupt(self);
    3e32:	1e 00 78    	mov.w     [w14], w0
    3e34:	b6 ff 07    	rcall     0x3da2 <_timer_disableInterrupt>

00003e36 <.LSM123>:
    timer_lower(self);
    3e36:	1e 00 78    	mov.w     [w14], w0
    3e38:	8c ff 07    	rcall     0x3d52 <_timer_lower>

00003e3a <.LSM124>:
    timer_stop(self);
    3e3a:	1e 00 78    	mov.w     [w14], w0
    3e3c:	6d ff 07    	rcall     0x3d18 <_timer_stop>

00003e3e <.LSM125>:
    self->aftercount = 0;
    3e3e:	1e 00 78    	mov.w     [w14], w0
    3e40:	80 00 eb    	clr.w     w1
    3e42:	01 08 98    	mov.w     w1, [w0+16]

00003e44 <.LSM126>:
    self->every = NULL;
    3e44:	1e 00 78    	mov.w     [w14], w0
    3e46:	80 00 eb    	clr.w     w1
    3e48:	11 08 98    	mov.w     w1, [w0+18]

00003e4a <.LSM127>:
    self->after = NULL;
    3e4a:	1e 00 78    	mov.w     [w14], w0
    3e4c:	80 00 eb    	clr.w     w1
    3e4e:	21 08 98    	mov.w     w1, [w0+20]

00003e50 <.LSM128>:
}
    3e50:	00 80 fa    	ulnk      
    3e52:	00 00 06    	return    

00003e54 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    3e54:	04 00 fa    	lnk       #0x4
    3e56:	00 0f 78    	mov.w     w0, [w14]
    3e58:	11 07 98    	mov.w     w1, [w14+2]

00003e5a <.LSM1>:
    if (val)
    3e5a:	1e 00 90    	mov.w     [w14+2], w0
    3e5c:	00 00 e0    	cp0.w     w0
    3e5e:	0d 00 32    	bra       Z, 0x3e7a <.L2>

00003e60 <.LSM2>:
        bitset(self->port, self->bit);
    3e60:	1e 00 78    	mov.w     [w14], w0
    3e62:	10 00 78    	mov.w     [w0], w0
    3e64:	9e 00 78    	mov.w     [w14], w1
    3e66:	91 00 78    	mov.w     [w1], w1
    3e68:	11 01 78    	mov.w     [w1], w2
    3e6a:	9e 00 78    	mov.w     [w14], w1
    3e6c:	e1 40 90    	mov.b     [w1+6], w1
    3e6e:	81 80 fb    	ze        w1, w1
    3e70:	13 00 20    	mov.w     #0x1, w3
    3e72:	81 18 dd    	sl.w      w3, w1, w1
    3e74:	82 80 70    	ior.w     w1, w2, w1
    3e76:	01 08 78    	mov.w     w1, [w0]
    3e78:	0d 00 37    	bra       0x3e94 <.L1>

00003e7a <.L2>:
    else
        bitclear(self->port, self->bit);
    3e7a:	1e 00 78    	mov.w     [w14], w0
    3e7c:	10 00 78    	mov.w     [w0], w0
    3e7e:	9e 00 78    	mov.w     [w14], w1
    3e80:	91 00 78    	mov.w     [w1], w1
    3e82:	11 01 78    	mov.w     [w1], w2
    3e84:	9e 00 78    	mov.w     [w14], w1
    3e86:	e1 40 90    	mov.b     [w1+6], w1
    3e88:	81 80 fb    	ze        w1, w1
    3e8a:	13 00 20    	mov.w     #0x1, w3
    3e8c:	81 18 dd    	sl.w      w3, w1, w1
    3e8e:	81 80 ea    	com.w     w1, w1
    3e90:	81 00 61    	and.w     w2, w1, w1
    3e92:	01 08 78    	mov.w     w1, [w0]

00003e94 <.L1>:
}
    3e94:	00 80 fa    	ulnk      
    3e96:	00 00 06    	return    

00003e98 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    3e98:	02 00 fa    	lnk       #0x2
    3e9a:	00 0f 78    	mov.w     w0, [w14]

00003e9c <.LSM6>:
    return bitread(self->port, self->bit);
    3e9c:	1e 00 78    	mov.w     [w14], w0
    3e9e:	10 00 78    	mov.w     [w0], w0
    3ea0:	90 00 78    	mov.w     [w0], w1
    3ea2:	1e 00 78    	mov.w     [w14], w0
    3ea4:	60 40 90    	mov.b     [w0+6], w0
    3ea6:	00 80 fb    	ze        w0, w0
    3ea8:	12 00 20    	mov.w     #0x1, w2
    3eaa:	00 10 dd    	sl.w      w2, w0, w0
    3eac:	00 80 60    	and.w     w1, w0, w0
    3eae:	00 f0 a7    	btsc.w    w0, #0xf
    3eb0:	00 00 ea    	neg.w     w0, w0
    3eb2:	00 00 ea    	neg.w     w0, w0
    3eb4:	4f 00 de    	lsr.w     w0, #0xf, w0

00003eb6 <.LSM7>:
}
    3eb6:	00 80 fa    	ulnk      
    3eb8:	00 00 06    	return    

00003eba <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    3eba:	02 00 fa    	lnk       #0x2
    3ebc:	00 0f 78    	mov.w     w0, [w14]

00003ebe <.LSM9>:
    AD1CHS = self->annum;
    3ebe:	1e 00 78    	mov.w     [w14], w0
    3ec0:	40 00 90    	mov.w     [w0+8], w0
    3ec2:	40 19 88    	mov.w     w0, 0x328

00003ec4 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    3ec4:	20 23 a8    	bset.b    0x320, #0x1

00003ec6 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    3ec6:	00 00 00    	nop       

00003ec8 <.L6>:
    3ec8:	00 19 80    	mov.w     0x320, w0
    3eca:	61 00 60    	and.w     w0, #0x1, w0
    3ecc:	00 00 e0    	cp0.w     w0
    3ece:	fc ff 32    	bra       Z, 0x3ec8 <.L6>

00003ed0 <.LSM12>:
    return ADC1BUF0;
    3ed0:	00 18 80    	mov.w     0x300, w0

00003ed2 <.LSM13>:
}
    3ed2:	00 80 fa    	ulnk      
    3ed4:	00 00 06    	return    

00003ed6 <_init_pin>:

void init_pin(void) {
    3ed6:	02 00 fa    	lnk       #0x2

00003ed8 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3ed8:	40 6d 20    	mov.w     #0x6d4, w0
    3eda:	80 1f 78    	mov.w     w0, [w15++]
    3edc:	47 01 20    	mov.w     #0x14, w7
    3ede:	00 43 eb    	clr.b     w6
    3ee0:	80 82 eb    	setm.w    w5
    3ee2:	54 c0 b3    	mov.b     #0x5, w4
    3ee4:	80 01 eb    	clr.w     w3
    3ee6:	82 2d 20    	mov.w     #0x2d8, w2
    3ee8:	a1 2d 20    	mov.w     #0x2da, w1
    3eea:	80 a6 21    	mov.w     #0x1a68, w0
    3eec:	08 01 07    	rcall     0x40fe <_pin_init>
    3eee:	8f 87 e9    	dec2.w    w15, w15

00003ef0 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3ef0:	80 6d 20    	mov.w     #0x6d8, w0
    3ef2:	80 1f 78    	mov.w     w0, [w15++]
    3ef4:	97 01 20    	mov.w     #0x19, w7
    3ef6:	86 c0 b3    	mov.b     #0x8, w6
    3ef8:	80 82 eb    	setm.w    w5
    3efa:	44 c0 b3    	mov.b     #0x4, w4
    3efc:	80 01 eb    	clr.w     w3
    3efe:	82 2d 20    	mov.w     #0x2d8, w2
    3f00:	a1 2d 20    	mov.w     #0x2da, w1
    3f02:	e0 a7 21    	mov.w     #0x1a7e, w0
    3f04:	fc 00 07    	rcall     0x40fe <_pin_init>
    3f06:	8f 87 e9    	dec2.w    w15, w15

00003f08 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3f08:	a0 6c 20    	mov.w     #0x6ca, w0
    3f0a:	80 1f 78    	mov.w     w0, [w15++]
    3f0c:	a7 00 20    	mov.w     #0xa, w7
    3f0e:	00 43 eb    	clr.b     w6
    3f10:	80 82 eb    	setm.w    w5
    3f12:	44 c0 b3    	mov.b     #0x4, w4
    3f14:	80 01 eb    	clr.w     w3
    3f16:	82 2e 20    	mov.w     #0x2e8, w2
    3f18:	a1 2e 20    	mov.w     #0x2ea, w1
    3f1a:	40 a9 21    	mov.w     #0x1a94, w0
    3f1c:	f0 00 07    	rcall     0x40fe <_pin_init>
    3f1e:	8f 87 e9    	dec2.w    w15, w15

00003f20 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3f20:	00 6d 20    	mov.w     #0x6d0, w0
    3f22:	80 1f 78    	mov.w     w0, [w15++]
    3f24:	17 01 20    	mov.w     #0x11, w7
    3f26:	86 c0 b3    	mov.b     #0x8, w6
    3f28:	80 82 eb    	setm.w    w5
    3f2a:	54 c0 b3    	mov.b     #0x5, w4
    3f2c:	80 01 eb    	clr.w     w3
    3f2e:	82 2e 20    	mov.w     #0x2e8, w2
    3f30:	a1 2e 20    	mov.w     #0x2ea, w1
    3f32:	a0 aa 21    	mov.w     #0x1aaa, w0
    3f34:	e4 00 07    	rcall     0x40fe <_pin_init>
    3f36:	8f 87 e9    	dec2.w    w15, w15

00003f38 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3f38:	c0 6d 20    	mov.w     #0x6dc, w0
    3f3a:	80 1f 78    	mov.w     w0, [w15++]
    3f3c:	d7 01 20    	mov.w     #0x1d, w7
    3f3e:	86 c0 b3    	mov.b     #0x8, w6
    3f40:	f5 00 20    	mov.w     #0xf, w5
    3f42:	f4 c0 b3    	mov.b     #0xf, w4
    3f44:	23 4e 20    	mov.w     #0x4e2, w3
    3f46:	82 2c 20    	mov.w     #0x2c8, w2
    3f48:	a1 2c 20    	mov.w     #0x2ca, w1
    3f4a:	00 ac 21    	mov.w     #0x1ac0, w0
    3f4c:	d8 00 07    	rcall     0x40fe <_pin_init>
    3f4e:	8f 87 e9    	dec2.w    w15, w15

00003f50 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3f50:	00 6d 20    	mov.w     #0x6d0, w0
    3f52:	80 1f 78    	mov.w     w0, [w15++]
    3f54:	07 01 20    	mov.w     #0x10, w7
    3f56:	00 43 eb    	clr.b     w6
    3f58:	80 82 eb    	setm.w    w5
    3f5a:	34 c0 b3    	mov.b     #0x3, w4
    3f5c:	80 01 eb    	clr.w     w3
    3f5e:	82 2e 20    	mov.w     #0x2e8, w2
    3f60:	a1 2e 20    	mov.w     #0x2ea, w1
    3f62:	60 ad 21    	mov.w     #0x1ad6, w0
    3f64:	cc 00 07    	rcall     0x40fe <_pin_init>
    3f66:	8f 87 e9    	dec2.w    w15, w15

00003f68 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f68:	20 6c 20    	mov.w     #0x6c2, w0
    3f6a:	80 1f 78    	mov.w     w0, [w15++]
    3f6c:	27 00 20    	mov.w     #0x2, w7
    3f6e:	00 43 eb    	clr.b     w6
    3f70:	80 82 eb    	setm.w    w5
    3f72:	84 c0 b3    	mov.b     #0x8, w4
    3f74:	80 01 eb    	clr.w     w3
    3f76:	82 2d 20    	mov.w     #0x2d8, w2
    3f78:	a1 2d 20    	mov.w     #0x2da, w1
    3f7a:	c0 ae 21    	mov.w     #0x1aec, w0
    3f7c:	c0 00 07    	rcall     0x40fe <_pin_init>
    3f7e:	8f 87 e9    	dec2.w    w15, w15

00003f80 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f80:	c0 6c 20    	mov.w     #0x6cc, w0
    3f82:	80 1f 78    	mov.w     w0, [w15++]
    3f84:	c7 00 20    	mov.w     #0xc, w7
    3f86:	00 43 eb    	clr.b     w6
    3f88:	80 82 eb    	setm.w    w5
    3f8a:	b4 c0 b3    	mov.b     #0xb, w4
    3f8c:	80 01 eb    	clr.w     w3
    3f8e:	82 2d 20    	mov.w     #0x2d8, w2
    3f90:	a1 2d 20    	mov.w     #0x2da, w1
    3f92:	20 b0 21    	mov.w     #0x1b02, w0
    3f94:	b4 00 07    	rcall     0x40fe <_pin_init>
    3f96:	8f 87 e9    	dec2.w    w15, w15

00003f98 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f98:	40 6c 20    	mov.w     #0x6c4, w0
    3f9a:	80 1f 78    	mov.w     w0, [w15++]
    3f9c:	47 00 20    	mov.w     #0x4, w7
    3f9e:	00 43 eb    	clr.b     w6
    3fa0:	80 82 eb    	setm.w    w5
    3fa2:	94 c0 b3    	mov.b     #0x9, w4
    3fa4:	80 01 eb    	clr.w     w3
    3fa6:	82 2d 20    	mov.w     #0x2d8, w2
    3fa8:	a1 2d 20    	mov.w     #0x2da, w1
    3faa:	80 b1 21    	mov.w     #0x1b18, w0
    3fac:	a8 00 07    	rcall     0x40fe <_pin_init>
    3fae:	8f 87 e9    	dec2.w    w15, w15

00003fb0 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3fb0:	20 6c 20    	mov.w     #0x6c2, w0
    3fb2:	80 1f 78    	mov.w     w0, [w15++]
    3fb4:	37 00 20    	mov.w     #0x3, w7
    3fb6:	86 c0 b3    	mov.b     #0x8, w6
    3fb8:	80 82 eb    	setm.w    w5
    3fba:	a4 c0 b3    	mov.b     #0xa, w4
    3fbc:	80 01 eb    	clr.w     w3
    3fbe:	82 2d 20    	mov.w     #0x2d8, w2
    3fc0:	a1 2d 20    	mov.w     #0x2da, w1
    3fc2:	e0 b2 21    	mov.w     #0x1b2e, w0
    3fc4:	9c 00 07    	rcall     0x40fe <_pin_init>
    3fc6:	8f 87 e9    	dec2.w    w15, w15

00003fc8 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3fc8:	a0 6c 20    	mov.w     #0x6ca, w0
    3fca:	80 1f 78    	mov.w     w0, [w15++]
    3fcc:	b7 00 20    	mov.w     #0xb, w7
    3fce:	86 c0 b3    	mov.b     #0x8, w6
    3fd0:	80 82 eb    	setm.w    w5
    3fd2:	00 42 eb    	clr.b     w4
    3fd4:	80 01 eb    	clr.w     w3
    3fd6:	82 2d 20    	mov.w     #0x2d8, w2
    3fd8:	a1 2d 20    	mov.w     #0x2da, w1
    3fda:	40 b4 21    	mov.w     #0x1b44, w0
    3fdc:	90 00 07    	rcall     0x40fe <_pin_init>
    3fde:	8f 87 e9    	dec2.w    w15, w15

00003fe0 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3fe0:	80 6d 20    	mov.w     #0x6d8, w0
    3fe2:	80 1f 78    	mov.w     w0, [w15++]
    3fe4:	87 01 20    	mov.w     #0x18, w7
    3fe6:	00 43 eb    	clr.b     w6
    3fe8:	80 82 eb    	setm.w    w5
    3fea:	14 c0 b3    	mov.b     #0x1, w4
    3fec:	80 01 eb    	clr.w     w3
    3fee:	82 2d 20    	mov.w     #0x2d8, w2
    3ff0:	a1 2d 20    	mov.w     #0x2da, w1
    3ff2:	a0 b5 21    	mov.w     #0x1b5a, w0
    3ff4:	84 00 07    	rcall     0x40fe <_pin_init>
    3ff6:	8f 87 e9    	dec2.w    w15, w15

00003ff8 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3ff8:	60 6d 20    	mov.w     #0x6d6, w0
    3ffa:	80 1f 78    	mov.w     w0, [w15++]
    3ffc:	77 01 20    	mov.w     #0x17, w7
    3ffe:	86 c0 b3    	mov.b     #0x8, w6
    4000:	80 82 eb    	setm.w    w5
    4002:	24 c0 b3    	mov.b     #0x2, w4
    4004:	80 01 eb    	clr.w     w3
    4006:	82 2d 20    	mov.w     #0x2d8, w2
    4008:	a1 2d 20    	mov.w     #0x2da, w1
    400a:	00 b7 21    	mov.w     #0x1b70, w0
    400c:	78 00 07    	rcall     0x40fe <_pin_init>
    400e:	8f 87 e9    	dec2.w    w15, w15

00004010 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4010:	60 6d 20    	mov.w     #0x6d6, w0
    4012:	80 1f 78    	mov.w     w0, [w15++]
    4014:	67 01 20    	mov.w     #0x16, w7
    4016:	00 43 eb    	clr.b     w6
    4018:	80 82 eb    	setm.w    w5
    401a:	34 c0 b3    	mov.b     #0x3, w4
    401c:	80 01 eb    	clr.w     w3
    401e:	82 2d 20    	mov.w     #0x2d8, w2
    4020:	a1 2d 20    	mov.w     #0x2da, w1
    4022:	60 b8 21    	mov.w     #0x1b86, w0
    4024:	6c 00 07    	rcall     0x40fe <_pin_init>
    4026:	8f 87 e9    	dec2.w    w15, w15

00004028 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4028:	00 6c 20    	mov.w     #0x6c0, w0
    402a:	80 1f 78    	mov.w     w0, [w15++]
    402c:	80 03 eb    	clr.w     w7
    402e:	00 43 eb    	clr.b     w6
    4030:	80 02 eb    	clr.w     w5
    4032:	00 42 eb    	clr.b     w4
    4034:	23 4e 20    	mov.w     #0x4e2, w3
    4036:	82 2c 20    	mov.w     #0x2c8, w2
    4038:	a1 2c 20    	mov.w     #0x2ca, w1
    403a:	a0 c0 21    	mov.w     #0x1c0a, w0
    403c:	60 00 07    	rcall     0x40fe <_pin_init>
    403e:	8f 87 e9    	dec2.w    w15, w15

00004040 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4040:	00 6c 20    	mov.w     #0x6c0, w0
    4042:	80 1f 78    	mov.w     w0, [w15++]
    4044:	17 00 20    	mov.w     #0x1, w7
    4046:	86 c0 b3    	mov.b     #0x8, w6
    4048:	15 00 20    	mov.w     #0x1, w5
    404a:	14 c0 b3    	mov.b     #0x1, w4
    404c:	23 4e 20    	mov.w     #0x4e2, w3
    404e:	82 2c 20    	mov.w     #0x2c8, w2
    4050:	a1 2c 20    	mov.w     #0x2ca, w1
    4052:	40 bf 21    	mov.w     #0x1bf4, w0
    4054:	54 00 07    	rcall     0x40fe <_pin_init>
    4056:	8f 87 e9    	dec2.w    w15, w15

00004058 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4058:	c0 6c 20    	mov.w     #0x6cc, w0
    405a:	80 1f 78    	mov.w     w0, [w15++]
    405c:	d7 00 20    	mov.w     #0xd, w7
    405e:	86 c0 b3    	mov.b     #0x8, w6
    4060:	25 00 20    	mov.w     #0x2, w5
    4062:	24 c0 b3    	mov.b     #0x2, w4
    4064:	23 4e 20    	mov.w     #0x4e2, w3
    4066:	82 2c 20    	mov.w     #0x2c8, w2
    4068:	a1 2c 20    	mov.w     #0x2ca, w1
    406a:	e0 bd 21    	mov.w     #0x1bde, w0
    406c:	48 00 07    	rcall     0x40fe <_pin_init>
    406e:	8f 87 e9    	dec2.w    w15, w15

00004070 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4070:	00 00 eb    	clr.w     w0
    4072:	80 1f 78    	mov.w     w0, [w15++]
    4074:	80 83 eb    	setm.w    w7
    4076:	00 43 eb    	clr.b     w6
    4078:	35 00 20    	mov.w     #0x3, w5
    407a:	34 c0 b3    	mov.b     #0x3, w4
    407c:	23 4e 20    	mov.w     #0x4e2, w3
    407e:	82 2c 20    	mov.w     #0x2c8, w2
    4080:	a1 2c 20    	mov.w     #0x2ca, w1
    4082:	80 bc 21    	mov.w     #0x1bc8, w0
    4084:	3c 00 07    	rcall     0x40fe <_pin_init>
    4086:	8f 87 e9    	dec2.w    w15, w15

00004088 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4088:	c0 6d 20    	mov.w     #0x6dc, w0
    408a:	80 1f 78    	mov.w     w0, [w15++]
    408c:	c7 01 20    	mov.w     #0x1c, w7
    408e:	00 43 eb    	clr.b     w6
    4090:	45 00 20    	mov.w     #0x4, w5
    4092:	44 c0 b3    	mov.b     #0x4, w4
    4094:	23 4e 20    	mov.w     #0x4e2, w3
    4096:	82 2c 20    	mov.w     #0x2c8, w2
    4098:	a1 2c 20    	mov.w     #0x2ca, w1
    409a:	20 bb 21    	mov.w     #0x1bb2, w0
    409c:	30 00 07    	rcall     0x40fe <_pin_init>
    409e:	8f 87 e9    	dec2.w    w15, w15

000040a0 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    40a0:	20 6d 20    	mov.w     #0x6d2, w0
    40a2:	80 1f 78    	mov.w     w0, [w15++]
    40a4:	27 01 20    	mov.w     #0x12, w7
    40a6:	00 43 eb    	clr.b     w6
    40a8:	55 00 20    	mov.w     #0x5, w5
    40aa:	54 c0 b3    	mov.b     #0x5, w4
    40ac:	23 4e 20    	mov.w     #0x4e2, w3
    40ae:	82 2c 20    	mov.w     #0x2c8, w2
    40b0:	a1 2c 20    	mov.w     #0x2ca, w1
    40b2:	c0 b9 21    	mov.w     #0x1b9c, w0
    40b4:	24 00 07    	rcall     0x40fe <_pin_init>
    40b6:	8f 87 e9    	dec2.w    w15, w15

000040b8 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    40b8:	00 00 eb    	clr.w     w0
    40ba:	00 0f 78    	mov.w     w0, [w14]
    40bc:	07 00 37    	bra       0x40cc <.L8>

000040be <.L9>:
        pin_digitalIn(&D[i]);
    40be:	1e 00 78    	mov.w     [w14], w0
    40c0:	76 00 b9    	mul.su    w0, #0x16, w0
    40c2:	80 00 78    	mov.w     w0, w1
    40c4:	80 a6 21    	mov.w     #0x1a68, w0
    40c6:	00 80 40    	add.w     w1, w0, w0
    40c8:	46 00 07    	rcall     0x4156 <_pin_digitalIn>

000040ca <.LSM37>:
    40ca:	1e 0f e8    	inc.w     [w14], [w14]

000040cc <.L8>:
    40cc:	1e 00 78    	mov.w     [w14], w0
    40ce:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    40d0:	f6 ff 36    	bra       LEU, 0x40be <.L9>

000040d2 <.LSM38>:
    for (i = 0; i<6; i++)
    40d2:	00 00 eb    	clr.w     w0
    40d4:	00 0f 78    	mov.w     w0, [w14]
    40d6:	07 00 37    	bra       0x40e6 <.L10>

000040d8 <.L11>:
        pin_analogIn(&A[i]);
    40d8:	1e 00 78    	mov.w     [w14], w0
    40da:	76 00 b9    	mul.su    w0, #0x16, w0
    40dc:	80 00 78    	mov.w     w0, w1
    40de:	c0 b9 21    	mov.w     #0x1b9c, w0
    40e0:	00 80 40    	add.w     w1, w0, w0
    40e2:	95 00 07    	rcall     0x420e <_pin_analogIn>

000040e4 <.LSM40>:
    40e4:	1e 0f e8    	inc.w     [w14], [w14]

000040e6 <.L10>:
    40e6:	1e 00 78    	mov.w     [w14], w0
    40e8:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    40ea:	f6 ff 36    	bra       LEU, 0x40d8 <.L11>

000040ec <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    40ec:	00 2e 20    	mov.w     #0x2e0, w0
    40ee:	00 19 88    	mov.w     w0, 0x320

000040f0 <.LSM42>:
    AD1CON2 = 0;
    40f0:	22 23 ef    	clr.w     0x322

000040f2 <.LSM43>:
    AD1CON3 = 0x0C40;
    40f2:	00 c4 20    	mov.w     #0xc40, w0
    40f4:	20 19 88    	mov.w     w0, 0x324

000040f6 <.LSM44>:
    AD1CHS = 0;
    40f6:	28 23 ef    	clr.w     0x328

000040f8 <.LSM45>:
    AD1CON1bits.ADON = 1;
    40f8:	21 e3 a8    	bset.b    0x321, #0x7

000040fa <.LSM46>:
}
    40fa:	00 80 fa    	ulnk      
    40fc:	00 00 06    	return    

000040fe <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    40fe:	10 00 fa    	lnk       #0x10
    4100:	00 0f 78    	mov.w     w0, [w14]
    4102:	11 07 98    	mov.w     w1, [w14+2]
    4104:	22 07 98    	mov.w     w2, [w14+4]
    4106:	33 07 98    	mov.w     w3, [w14+6]
    4108:	04 4f 98    	mov.b     w4, [w14+8]
    410a:	55 07 98    	mov.w     w5, [w14+10]
    410c:	46 4f 98    	mov.b     w6, [w14+12]
    410e:	77 07 98    	mov.w     w7, [w14+14]

00004110 <.LSM48>:
    self->port = port;
    4110:	1e 00 78    	mov.w     [w14], w0
    4112:	9e 00 90    	mov.w     [w14+2], w1
    4114:	01 08 78    	mov.w     w1, [w0]

00004116 <.LSM49>:
    self->tris = tris;
    4116:	1e 00 78    	mov.w     [w14], w0
    4118:	ae 00 90    	mov.w     [w14+4], w1
    411a:	11 00 98    	mov.w     w1, [w0+2]

0000411c <.LSM50>:
    self->ans = ans;
    411c:	1e 00 78    	mov.w     [w14], w0
    411e:	be 00 90    	mov.w     [w14+6], w1
    4120:	21 00 98    	mov.w     w1, [w0+4]

00004122 <.LSM51>:
    self->bit = bit;
    4122:	1e 00 78    	mov.w     [w14], w0
    4124:	8e 48 90    	mov.b     [w14+8], w1
    4126:	61 40 98    	mov.b     w1, [w0+6]

00004128 <.LSM52>:
    self->annum = annum;
    4128:	1e 00 78    	mov.w     [w14], w0
    412a:	de 00 90    	mov.w     [w14+10], w1
    412c:	41 00 98    	mov.w     w1, [w0+8]

0000412e <.LSM53>:
    self->rpshift = rpshift;
    412e:	1e 00 78    	mov.w     [w14], w0
    4130:	ce 48 90    	mov.b     [w14+12], w1
    4132:	21 48 98    	mov.b     w1, [w0+10]

00004134 <.LSM54>:
    self->rpnum = rpnum;
    4134:	fe 00 90    	mov.w     [w14+14], w1
    4136:	1e 00 78    	mov.w     [w14], w0
    4138:	61 00 98    	mov.w     w1, [w0+12]

0000413a <.LSM55>:
    self->rpor = rpor;
    413a:	1e 00 78    	mov.w     [w14], w0
    413c:	ce b8 97    	mov.w     [w14-8], w1
    413e:	71 00 98    	mov.w     w1, [w0+14]

00004140 <.LSM56>:
    self->owner = NULL;
    4140:	1e 00 78    	mov.w     [w14], w0
    4142:	80 00 eb    	clr.w     w1
    4144:	01 08 98    	mov.w     w1, [w0+16]

00004146 <.LSM57>:
    self->write = NULL;
    4146:	1e 00 78    	mov.w     [w14], w0
    4148:	80 00 eb    	clr.w     w1
    414a:	11 08 98    	mov.w     w1, [w0+18]

0000414c <.LSM58>:
    self->read = NULL;
    414c:	1e 00 78    	mov.w     [w14], w0
    414e:	80 00 eb    	clr.w     w1
    4150:	21 08 98    	mov.w     w1, [w0+20]

00004152 <.LSM59>:
}
    4152:	00 80 fa    	ulnk      
    4154:	00 00 06    	return    

00004156 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    4156:	02 00 fa    	lnk       #0x2
    4158:	00 0f 78    	mov.w     w0, [w14]

0000415a <.LSM61>:
    if (self->ans)
    415a:	1e 00 78    	mov.w     [w14], w0
    415c:	20 00 90    	mov.w     [w0+4], w0
    415e:	00 00 e0    	cp0.w     w0
    4160:	0d 00 32    	bra       Z, 0x417c <.L14>

00004162 <.LSM62>:
        bitclear(self->ans, self->bit);
    4162:	1e 00 78    	mov.w     [w14], w0
    4164:	20 00 90    	mov.w     [w0+4], w0
    4166:	9e 00 78    	mov.w     [w14], w1
    4168:	a1 00 90    	mov.w     [w1+4], w1
    416a:	11 01 78    	mov.w     [w1], w2
    416c:	9e 00 78    	mov.w     [w14], w1
    416e:	e1 40 90    	mov.b     [w1+6], w1
    4170:	81 80 fb    	ze        w1, w1
    4172:	13 00 20    	mov.w     #0x1, w3
    4174:	81 18 dd    	sl.w      w3, w1, w1
    4176:	81 80 ea    	com.w     w1, w1
    4178:	81 00 61    	and.w     w2, w1, w1
    417a:	01 08 78    	mov.w     w1, [w0]

0000417c <.L14>:
    bitset(self->tris, self->bit);
    417c:	1e 00 78    	mov.w     [w14], w0
    417e:	10 00 90    	mov.w     [w0+2], w0
    4180:	9e 00 78    	mov.w     [w14], w1
    4182:	91 00 90    	mov.w     [w1+2], w1
    4184:	11 01 78    	mov.w     [w1], w2
    4186:	9e 00 78    	mov.w     [w14], w1
    4188:	e1 40 90    	mov.b     [w1+6], w1
    418a:	81 80 fb    	ze        w1, w1
    418c:	13 00 20    	mov.w     #0x1, w3
    418e:	81 18 dd    	sl.w      w3, w1, w1
    4190:	82 80 70    	ior.w     w1, w2, w1
    4192:	01 08 78    	mov.w     w1, [w0]

00004194 <.LSM64>:
    self->write = NULL;
    4194:	1e 00 78    	mov.w     [w14], w0
    4196:	80 00 eb    	clr.w     w1
    4198:	11 08 98    	mov.w     w1, [w0+18]

0000419a <.LSM65>:
    self->read = __digitalRead;    
    419a:	1e 00 78    	mov.w     [w14], w0
    419c:	81 e9 23    	mov.w     #0x3e98, w1
    419e:	21 08 98    	mov.w     w1, [w0+20]

000041a0 <.LSM66>:
}
    41a0:	00 80 fa    	ulnk      
    41a2:	00 00 06    	return    

000041a4 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    41a4:	02 00 fa    	lnk       #0x2
    41a6:	00 0f 78    	mov.w     w0, [w14]

000041a8 <.LSM68>:
    if (self->ans)
    41a8:	1e 00 78    	mov.w     [w14], w0
    41aa:	20 00 90    	mov.w     [w0+4], w0
    41ac:	00 00 e0    	cp0.w     w0
    41ae:	0d 00 32    	bra       Z, 0x41ca <.L16>

000041b0 <.LSM69>:
        bitclear(self->ans, self->bit);
    41b0:	1e 00 78    	mov.w     [w14], w0
    41b2:	20 00 90    	mov.w     [w0+4], w0
    41b4:	9e 00 78    	mov.w     [w14], w1
    41b6:	a1 00 90    	mov.w     [w1+4], w1
    41b8:	11 01 78    	mov.w     [w1], w2
    41ba:	9e 00 78    	mov.w     [w14], w1
    41bc:	e1 40 90    	mov.b     [w1+6], w1
    41be:	81 80 fb    	ze        w1, w1
    41c0:	13 00 20    	mov.w     #0x1, w3
    41c2:	81 18 dd    	sl.w      w3, w1, w1
    41c4:	81 80 ea    	com.w     w1, w1
    41c6:	81 00 61    	and.w     w2, w1, w1
    41c8:	01 08 78    	mov.w     w1, [w0]

000041ca <.L16>:
    bitclear(self->port, self->bit);
    41ca:	1e 00 78    	mov.w     [w14], w0
    41cc:	10 00 78    	mov.w     [w0], w0
    41ce:	9e 00 78    	mov.w     [w14], w1
    41d0:	91 00 78    	mov.w     [w1], w1
    41d2:	11 01 78    	mov.w     [w1], w2
    41d4:	9e 00 78    	mov.w     [w14], w1
    41d6:	e1 40 90    	mov.b     [w1+6], w1
    41d8:	81 80 fb    	ze        w1, w1
    41da:	13 00 20    	mov.w     #0x1, w3
    41dc:	81 18 dd    	sl.w      w3, w1, w1
    41de:	81 80 ea    	com.w     w1, w1
    41e0:	81 00 61    	and.w     w2, w1, w1
    41e2:	01 08 78    	mov.w     w1, [w0]

000041e4 <.LSM71>:
    bitclear(self->tris, self->bit);
    41e4:	1e 00 78    	mov.w     [w14], w0
    41e6:	10 00 90    	mov.w     [w0+2], w0
    41e8:	9e 00 78    	mov.w     [w14], w1
    41ea:	91 00 90    	mov.w     [w1+2], w1
    41ec:	11 01 78    	mov.w     [w1], w2
    41ee:	9e 00 78    	mov.w     [w14], w1
    41f0:	e1 40 90    	mov.b     [w1+6], w1
    41f2:	81 80 fb    	ze        w1, w1
    41f4:	13 00 20    	mov.w     #0x1, w3
    41f6:	81 18 dd    	sl.w      w3, w1, w1
    41f8:	81 80 ea    	com.w     w1, w1
    41fa:	81 00 61    	and.w     w2, w1, w1
    41fc:	01 08 78    	mov.w     w1, [w0]

000041fe <.LSM72>:
    self->write = __digitalWrite;
    41fe:	1e 00 78    	mov.w     [w14], w0
    4200:	41 e5 23    	mov.w     #0x3e54, w1
    4202:	11 08 98    	mov.w     w1, [w0+18]

00004204 <.LSM73>:
    self->read = __digitalRead;
    4204:	1e 00 78    	mov.w     [w14], w0
    4206:	81 e9 23    	mov.w     #0x3e98, w1
    4208:	21 08 98    	mov.w     w1, [w0+20]

0000420a <.LSM74>:
}
    420a:	00 80 fa    	ulnk      
    420c:	00 00 06    	return    

0000420e <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    420e:	02 00 fa    	lnk       #0x2
    4210:	00 0f 78    	mov.w     w0, [w14]

00004212 <.LSM76>:
    if (!(self->ans))
    4212:	1e 00 78    	mov.w     [w14], w0
    4214:	20 00 90    	mov.w     [w0+4], w0
    4216:	00 00 e0    	cp0.w     w0
    4218:	1f 00 32    	bra       Z, 0x4258 <.L20>

0000421a <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    421a:	1e 00 78    	mov.w     [w14], w0
    421c:	10 00 90    	mov.w     [w0+2], w0
    421e:	9e 00 78    	mov.w     [w14], w1
    4220:	91 00 90    	mov.w     [w1+2], w1
    4222:	11 01 78    	mov.w     [w1], w2
    4224:	9e 00 78    	mov.w     [w14], w1
    4226:	e1 40 90    	mov.b     [w1+6], w1
    4228:	81 80 fb    	ze        w1, w1
    422a:	13 00 20    	mov.w     #0x1, w3
    422c:	81 18 dd    	sl.w      w3, w1, w1
    422e:	82 80 70    	ior.w     w1, w2, w1
    4230:	01 08 78    	mov.w     w1, [w0]

00004232 <.LSM78>:
    bitset(self->ans, self->bit);
    4232:	1e 00 78    	mov.w     [w14], w0
    4234:	20 00 90    	mov.w     [w0+4], w0
    4236:	9e 00 78    	mov.w     [w14], w1
    4238:	a1 00 90    	mov.w     [w1+4], w1
    423a:	11 01 78    	mov.w     [w1], w2
    423c:	9e 00 78    	mov.w     [w14], w1
    423e:	e1 40 90    	mov.b     [w1+6], w1
    4240:	81 80 fb    	ze        w1, w1
    4242:	13 00 20    	mov.w     #0x1, w3
    4244:	81 18 dd    	sl.w      w3, w1, w1
    4246:	82 80 70    	ior.w     w1, w2, w1
    4248:	01 08 78    	mov.w     w1, [w0]

0000424a <.LSM79>:
    self->write = NULL;
    424a:	1e 00 78    	mov.w     [w14], w0
    424c:	80 00 eb    	clr.w     w1
    424e:	11 08 98    	mov.w     w1, [w0+18]

00004250 <.LSM80>:
    self->read = __analogRead;
    4250:	1e 00 78    	mov.w     [w14], w0
    4252:	a1 eb 23    	mov.w     #0x3eba, w1
    4254:	21 08 98    	mov.w     w1, [w0+20]
    4256:	01 00 37    	bra       0x425a <.L17>

00004258 <.L20>:
    4258:	00 00 00    	nop       

0000425a <.L17>:
}
    425a:	00 80 fa    	ulnk      
    425c:	00 00 06    	return    

0000425e <_pin_set>:

void pin_set(_PIN *self) {
    425e:	02 00 fa    	lnk       #0x2
    4260:	00 0f 78    	mov.w     w0, [w14]

00004262 <.LSM84>:
    if (self->write==__digitalWrite)
    4262:	1e 00 78    	mov.w     [w14], w0
    4264:	90 08 90    	mov.w     [w0+18], w1
    4266:	40 e5 23    	mov.w     #0x3e54, w0
    4268:	80 8f 50    	sub.w     w1, w0, [w15]
    426a:	0c 00 3a    	bra       NZ, 0x4284 <.L21>

0000426c <.LSM85>:
        bitset(self->port, self->bit);
    426c:	1e 00 78    	mov.w     [w14], w0
    426e:	10 00 78    	mov.w     [w0], w0
    4270:	9e 00 78    	mov.w     [w14], w1
    4272:	91 00 78    	mov.w     [w1], w1
    4274:	11 01 78    	mov.w     [w1], w2
    4276:	9e 00 78    	mov.w     [w14], w1
    4278:	e1 40 90    	mov.b     [w1+6], w1
    427a:	81 80 fb    	ze        w1, w1
    427c:	13 00 20    	mov.w     #0x1, w3
    427e:	81 18 dd    	sl.w      w3, w1, w1
    4280:	82 80 70    	ior.w     w1, w2, w1
    4282:	01 08 78    	mov.w     w1, [w0]

00004284 <.L21>:
}
    4284:	00 80 fa    	ulnk      
    4286:	00 00 06    	return    

00004288 <_pin_clear>:

void pin_clear(_PIN *self) {
    4288:	02 00 fa    	lnk       #0x2
    428a:	00 0f 78    	mov.w     w0, [w14]

0000428c <.LSM88>:
    if (self->write==__digitalWrite)
    428c:	1e 00 78    	mov.w     [w14], w0
    428e:	90 08 90    	mov.w     [w0+18], w1
    4290:	40 e5 23    	mov.w     #0x3e54, w0
    4292:	80 8f 50    	sub.w     w1, w0, [w15]
    4294:	0d 00 3a    	bra       NZ, 0x42b0 <.L23>

00004296 <.LSM89>:
        bitclear(self->port, self->bit);
    4296:	1e 00 78    	mov.w     [w14], w0
    4298:	10 00 78    	mov.w     [w0], w0
    429a:	9e 00 78    	mov.w     [w14], w1
    429c:	91 00 78    	mov.w     [w1], w1
    429e:	11 01 78    	mov.w     [w1], w2
    42a0:	9e 00 78    	mov.w     [w14], w1
    42a2:	e1 40 90    	mov.b     [w1+6], w1
    42a4:	81 80 fb    	ze        w1, w1
    42a6:	13 00 20    	mov.w     #0x1, w3
    42a8:	81 18 dd    	sl.w      w3, w1, w1
    42aa:	81 80 ea    	com.w     w1, w1
    42ac:	81 00 61    	and.w     w2, w1, w1
    42ae:	01 08 78    	mov.w     w1, [w0]

000042b0 <.L23>:
}
    42b0:	00 80 fa    	ulnk      
    42b2:	00 00 06    	return    

000042b4 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    42b4:	02 00 fa    	lnk       #0x2
    42b6:	00 0f 78    	mov.w     w0, [w14]

000042b8 <.LSM92>:
    if (self->write==__digitalWrite)
    42b8:	1e 00 78    	mov.w     [w14], w0
    42ba:	90 08 90    	mov.w     [w0+18], w1
    42bc:	40 e5 23    	mov.w     #0x3e54, w0
    42be:	80 8f 50    	sub.w     w1, w0, [w15]
    42c0:	0c 00 3a    	bra       NZ, 0x42da <.L25>

000042c2 <.LSM93>:
        bitflip(self->port, self->bit);
    42c2:	1e 00 78    	mov.w     [w14], w0
    42c4:	10 00 78    	mov.w     [w0], w0
    42c6:	9e 00 78    	mov.w     [w14], w1
    42c8:	91 00 78    	mov.w     [w1], w1
    42ca:	11 01 78    	mov.w     [w1], w2
    42cc:	9e 00 78    	mov.w     [w14], w1
    42ce:	e1 40 90    	mov.b     [w1+6], w1
    42d0:	81 80 fb    	ze        w1, w1
    42d2:	13 00 20    	mov.w     #0x1, w3
    42d4:	81 18 dd    	sl.w      w3, w1, w1
    42d6:	81 00 69    	xor.w     w2, w1, w1
    42d8:	01 08 78    	mov.w     w1, [w0]

000042da <.L25>:
}
    42da:	00 80 fa    	ulnk      
    42dc:	00 00 06    	return    

000042de <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    42de:	04 00 fa    	lnk       #0x4
    42e0:	00 0f 78    	mov.w     w0, [w14]
    42e2:	11 07 98    	mov.w     w1, [w14+2]

000042e4 <.LSM96>:
    if (self->write)
    42e4:	1e 00 78    	mov.w     [w14], w0
    42e6:	10 08 90    	mov.w     [w0+18], w0
    42e8:	00 00 e0    	cp0.w     w0
    42ea:	05 00 32    	bra       Z, 0x42f6 <.L27>

000042ec <.LSM97>:
        self->write(self, val);
    42ec:	1e 00 78    	mov.w     [w14], w0
    42ee:	10 09 90    	mov.w     [w0+18], w2
    42f0:	9e 00 90    	mov.w     [w14+2], w1
    42f2:	1e 00 78    	mov.w     [w14], w0
    42f4:	02 00 01    	call      w2

000042f6 <.L27>:
}
    42f6:	00 80 fa    	ulnk      
    42f8:	00 00 06    	return    

000042fa <_pin_read>:

uint16_t pin_read(_PIN *self) {
    42fa:	02 00 fa    	lnk       #0x2
    42fc:	00 0f 78    	mov.w     w0, [w14]

000042fe <.LSM100>:
    if (self->read)
    42fe:	1e 00 78    	mov.w     [w14], w0
    4300:	20 08 90    	mov.w     [w0+20], w0
    4302:	00 00 e0    	cp0.w     w0
    4304:	05 00 32    	bra       Z, 0x4310 <.L30>

00004306 <.LSM101>:
        return self->read(self);
    4306:	1e 00 78    	mov.w     [w14], w0
    4308:	a0 08 90    	mov.w     [w0+20], w1
    430a:	1e 00 78    	mov.w     [w14], w0
    430c:	01 00 01    	call      w1
    430e:	01 00 37    	bra       0x4312 <.L31>

00004310 <.L30>:
    else
        return 0xFFFF;
    4310:	00 80 eb    	setm.w    w0

00004312 <.L31>:
}
    4312:	00 80 fa    	ulnk      
    4314:	00 00 06    	return    

00004316 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    4316:	08 00 fa    	lnk       #0x8
    4318:	30 07 98    	mov.w     w0, [w14+6]

0000431a <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    431a:	3e 00 90    	mov.w     [w14+6], w0
    431c:	00 08 90    	mov.w     [w0+16], w0
    431e:	00 0f 78    	mov.w     w0, [w14]

00004320 <.LSM2>:
    temp.w[0] = 0;
    4320:	00 00 eb    	clr.w     w0
    4322:	10 07 98    	mov.w     w0, [w14+2]

00004324 <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    4324:	1e 00 78    	mov.w     [w14], w0
    4326:	30 00 90    	mov.w     [w0+6], w0
    4328:	10 00 78    	mov.w     [w0], w0
    432a:	20 07 98    	mov.w     w0, [w14+4]

0000432c <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    432c:	1e 02 90    	mov.w     [w14+2], w4
    432e:	ae 02 90    	mov.w     [w14+4], w5
    4330:	1e 00 78    	mov.w     [w14], w0
    4332:	20 00 90    	mov.w     [w0+4], w0
    4334:	10 00 78    	mov.w     [w0], w0
    4336:	80 00 eb    	clr.w     w1
    4338:	00 01 be    	mov.d     w0, w2
    433a:	04 00 be    	mov.d     w4, w0
    433c:	c2 e8 07    	rcall     0x14c2 <___udivsi3>
    433e:	00 00 78    	mov.w     w0, w0

00004340 <.LSM5>:
}
    4340:	00 80 fa    	ulnk      
    4342:	00 00 06    	return    

00004344 <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    4344:	0a 00 fa    	lnk       #0xa
    4346:	30 07 98    	mov.w     w0, [w14+6]
    4348:	41 07 98    	mov.w     w1, [w14+8]

0000434a <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    434a:	3e 00 90    	mov.w     [w14+6], w0
    434c:	00 08 90    	mov.w     [w0+16], w0
    434e:	00 0f 78    	mov.w     w0, [w14]

00004350 <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    4350:	4e 00 90    	mov.w     [w14+8], w0
    4352:	61 01 b8    	mul.uu    w0, #0x1, w2
    4354:	1e 00 78    	mov.w     [w14], w0
    4356:	20 00 90    	mov.w     [w0+4], w0
    4358:	10 00 78    	mov.w     [w0], w0
    435a:	80 00 eb    	clr.w     w1
    435c:	00 9a b9    	mul.ss    w3, w0, w4
    435e:	04 02 78    	mov.w     w4, w4
    4360:	02 8b b9    	mul.ss    w1, w2, w6
    4362:	86 02 78    	mov.w     w6, w5
    4364:	05 02 42    	add.w     w4, w5, w4
    4366:	00 10 b8    	mul.uu    w2, w0, w0
    4368:	01 02 42    	add.w     w4, w1, w4
    436a:	84 00 78    	mov.w     w4, w1
    436c:	10 07 98    	mov.w     w0, [w14+2]
    436e:	21 07 98    	mov.w     w1, [w14+4]

00004370 <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    4370:	1e 00 78    	mov.w     [w14], w0
    4372:	30 00 90    	mov.w     [w0+6], w0
    4374:	ae 00 90    	mov.w     [w14+4], w1
    4376:	01 08 78    	mov.w     w1, [w0]

00004378 <.LSM10>:
}
    4378:	00 80 fa    	ulnk      
    437a:	00 00 06    	return    

0000437c <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    437c:	08 00 fa    	lnk       #0x8
    437e:	30 07 98    	mov.w     w0, [w14+6]

00004380 <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    4380:	3e 00 90    	mov.w     [w14+6], w0
    4382:	00 08 90    	mov.w     [w0+16], w0
    4384:	00 0f 78    	mov.w     w0, [w14]

00004386 <.LSM13>:
    temp.w[0] = 0;
    4386:	00 00 eb    	clr.w     w0
    4388:	10 07 98    	mov.w     w0, [w14+2]

0000438a <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    438a:	1e 00 78    	mov.w     [w14], w0
    438c:	20 00 90    	mov.w     [w0+4], w0
    438e:	90 00 78    	mov.w     [w0], w1
    4390:	1e 00 78    	mov.w     [w14], w0
    4392:	60 00 90    	mov.w     [w0+12], w0
    4394:	00 80 50    	sub.w     w1, w0, w0
    4396:	20 07 98    	mov.w     w0, [w14+4]

00004398 <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    4398:	1e 02 90    	mov.w     [w14+2], w4
    439a:	ae 02 90    	mov.w     [w14+4], w5
    439c:	1e 00 78    	mov.w     [w14], w0
    439e:	70 00 90    	mov.w     [w0+14], w0
    43a0:	80 00 eb    	clr.w     w1
    43a2:	00 01 be    	mov.d     w0, w2
    43a4:	04 00 be    	mov.d     w4, w0
    43a6:	8d e8 07    	rcall     0x14c2 <___udivsi3>
    43a8:	00 00 78    	mov.w     w0, w0

000043aa <.LSM16>:
}
    43aa:	00 80 fa    	ulnk      
    43ac:	00 00 06    	return    

000043ae <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    43ae:	0a 00 fa    	lnk       #0xa
    43b0:	30 07 98    	mov.w     w0, [w14+6]
    43b2:	41 07 98    	mov.w     w1, [w14+8]

000043b4 <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    43b4:	3e 00 90    	mov.w     [w14+6], w0
    43b6:	00 08 90    	mov.w     [w0+16], w0
    43b8:	00 0f 78    	mov.w     w0, [w14]

000043ba <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    43ba:	4e 00 90    	mov.w     [w14+8], w0
    43bc:	61 01 b8    	mul.uu    w0, #0x1, w2
    43be:	1e 00 78    	mov.w     [w14], w0
    43c0:	70 00 90    	mov.w     [w0+14], w0
    43c2:	80 00 eb    	clr.w     w1
    43c4:	00 9a b9    	mul.ss    w3, w0, w4
    43c6:	04 02 78    	mov.w     w4, w4
    43c8:	02 8b b9    	mul.ss    w1, w2, w6
    43ca:	86 02 78    	mov.w     w6, w5
    43cc:	05 02 42    	add.w     w4, w5, w4
    43ce:	00 10 b8    	mul.uu    w2, w0, w0
    43d0:	01 02 42    	add.w     w4, w1, w4
    43d2:	84 00 78    	mov.w     w4, w1
    43d4:	10 07 98    	mov.w     w0, [w14+2]
    43d6:	21 07 98    	mov.w     w1, [w14+4]

000043d8 <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    43d8:	1e 00 78    	mov.w     [w14], w0
    43da:	20 00 90    	mov.w     [w0+4], w0
    43dc:	9e 00 78    	mov.w     [w14], w1
    43de:	61 01 90    	mov.w     [w1+12], w2
    43e0:	ae 00 90    	mov.w     [w14+4], w1
    43e2:	81 00 41    	add.w     w2, w1, w1
    43e4:	01 08 78    	mov.w     w1, [w0]

000043e6 <.LSM21>:
}
    43e6:	00 80 fa    	ulnk      
    43e8:	00 00 06    	return    

000043ea <_init_oc>:

void init_oc(void) {
    43ea:	00 00 fa    	lnk       #0x0

000043ec <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    43ec:	26 01 20    	mov.w     #0x12, w6
    43ee:	85 19 20    	mov.w     #0x198, w5
    43f0:	64 19 20    	mov.w     #0x196, w4
    43f2:	43 19 20    	mov.w     #0x194, w3
    43f4:	22 19 20    	mov.w     #0x192, w2
    43f6:	01 19 20    	mov.w     #0x190, w1
    43f8:	00 c2 21    	mov.w     #0x1c20, w0
    43fa:	42 00 07    	rcall     0x4480 <_oc_init>

000043fc <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    43fc:	36 01 20    	mov.w     #0x13, w6
    43fe:	25 1a 20    	mov.w     #0x1a2, w5
    4400:	04 1a 20    	mov.w     #0x1a0, w4
    4402:	e3 19 20    	mov.w     #0x19e, w3
    4404:	c2 19 20    	mov.w     #0x19c, w2
    4406:	a1 19 20    	mov.w     #0x19a, w1
    4408:	20 c3 21    	mov.w     #0x1c32, w0
    440a:	3a 00 07    	rcall     0x4480 <_oc_init>

0000440c <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    440c:	46 01 20    	mov.w     #0x14, w6
    440e:	c5 1a 20    	mov.w     #0x1ac, w5
    4410:	a4 1a 20    	mov.w     #0x1aa, w4
    4412:	83 1a 20    	mov.w     #0x1a8, w3
    4414:	62 1a 20    	mov.w     #0x1a6, w2
    4416:	41 1a 20    	mov.w     #0x1a4, w1
    4418:	40 c4 21    	mov.w     #0x1c44, w0
    441a:	32 00 07    	rcall     0x4480 <_oc_init>

0000441c <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    441c:	56 01 20    	mov.w     #0x15, w6
    441e:	65 1b 20    	mov.w     #0x1b6, w5
    4420:	44 1b 20    	mov.w     #0x1b4, w4
    4422:	23 1b 20    	mov.w     #0x1b2, w3
    4424:	02 1b 20    	mov.w     #0x1b0, w2
    4426:	e1 1a 20    	mov.w     #0x1ae, w1
    4428:	60 c5 21    	mov.w     #0x1c56, w0
    442a:	2a 00 07    	rcall     0x4480 <_oc_init>

0000442c <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    442c:	66 01 20    	mov.w     #0x16, w6
    442e:	05 1c 20    	mov.w     #0x1c0, w5
    4430:	e4 1b 20    	mov.w     #0x1be, w4
    4432:	c3 1b 20    	mov.w     #0x1bc, w3
    4434:	a2 1b 20    	mov.w     #0x1ba, w2
    4436:	81 1b 20    	mov.w     #0x1b8, w1
    4438:	80 c6 21    	mov.w     #0x1c68, w0
    443a:	22 00 07    	rcall     0x4480 <_oc_init>

0000443c <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    443c:	76 01 20    	mov.w     #0x17, w6
    443e:	a5 1c 20    	mov.w     #0x1ca, w5
    4440:	84 1c 20    	mov.w     #0x1c8, w4
    4442:	63 1c 20    	mov.w     #0x1c6, w3
    4444:	42 1c 20    	mov.w     #0x1c4, w2
    4446:	21 1c 20    	mov.w     #0x1c2, w1
    4448:	a0 c7 21    	mov.w     #0x1c7a, w0
    444a:	1a 00 07    	rcall     0x4480 <_oc_init>

0000444c <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    444c:	86 01 20    	mov.w     #0x18, w6
    444e:	45 1d 20    	mov.w     #0x1d4, w5
    4450:	24 1d 20    	mov.w     #0x1d2, w4
    4452:	03 1d 20    	mov.w     #0x1d0, w3
    4454:	e2 1c 20    	mov.w     #0x1ce, w2
    4456:	c1 1c 20    	mov.w     #0x1cc, w1
    4458:	c0 c8 21    	mov.w     #0x1c8c, w0
    445a:	12 00 07    	rcall     0x4480 <_oc_init>

0000445c <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    445c:	96 01 20    	mov.w     #0x19, w6
    445e:	e5 1d 20    	mov.w     #0x1de, w5
    4460:	c4 1d 20    	mov.w     #0x1dc, w4
    4462:	a3 1d 20    	mov.w     #0x1da, w3
    4464:	82 1d 20    	mov.w     #0x1d8, w2
    4466:	61 1d 20    	mov.w     #0x1d6, w1
    4468:	e0 c9 21    	mov.w     #0x1c9e, w0
    446a:	0a 00 07    	rcall     0x4480 <_oc_init>

0000446c <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    446c:	36 02 20    	mov.w     #0x23, w6
    446e:	85 1e 20    	mov.w     #0x1e8, w5
    4470:	64 1e 20    	mov.w     #0x1e6, w4
    4472:	43 1e 20    	mov.w     #0x1e4, w3
    4474:	22 1e 20    	mov.w     #0x1e2, w2
    4476:	01 1e 20    	mov.w     #0x1e0, w1
    4478:	00 cb 21    	mov.w     #0x1cb0, w0
    447a:	02 00 07    	rcall     0x4480 <_oc_init>

0000447c <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    447c:	00 80 fa    	ulnk      
    447e:	00 00 06    	return    

00004480 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    4480:	0e 00 fa    	lnk       #0xe
    4482:	00 0f 78    	mov.w     w0, [w14]
    4484:	11 07 98    	mov.w     w1, [w14+2]
    4486:	22 07 98    	mov.w     w2, [w14+4]
    4488:	33 07 98    	mov.w     w3, [w14+6]
    448a:	44 07 98    	mov.w     w4, [w14+8]
    448c:	55 07 98    	mov.w     w5, [w14+10]
    448e:	66 07 98    	mov.w     w6, [w14+12]

00004490 <.LSM34>:
    self->OCxCON1 = OCxCON1;
    4490:	1e 00 78    	mov.w     [w14], w0
    4492:	9e 00 90    	mov.w     [w14+2], w1
    4494:	01 08 78    	mov.w     w1, [w0]

00004496 <.LSM35>:
    self->OCxCON2 = OCxCON2;
    4496:	1e 00 78    	mov.w     [w14], w0
    4498:	ae 00 90    	mov.w     [w14+4], w1
    449a:	11 00 98    	mov.w     w1, [w0+2]

0000449c <.LSM36>:
    self->OCxRS = OCxRS;
    449c:	1e 00 78    	mov.w     [w14], w0
    449e:	be 00 90    	mov.w     [w14+6], w1
    44a0:	21 00 98    	mov.w     w1, [w0+4]

000044a2 <.LSM37>:
    self->OCxR = OCxR;
    44a2:	1e 00 78    	mov.w     [w14], w0
    44a4:	ce 00 90    	mov.w     [w14+8], w1
    44a6:	31 00 98    	mov.w     w1, [w0+6]

000044a8 <.LSM38>:
    self->OCxTMR = OCxTMR;
    44a8:	1e 00 78    	mov.w     [w14], w0
    44aa:	de 00 90    	mov.w     [w14+10], w1
    44ac:	41 00 98    	mov.w     w1, [w0+8]

000044ae <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    44ae:	1e 00 78    	mov.w     [w14], w0
    44b0:	01 e8 23    	mov.w     #0x3e80, w1
    44b2:	61 00 98    	mov.w     w1, [w0+12]

000044b4 <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    44b4:	1e 00 78    	mov.w     [w14], w0
    44b6:	01 e8 23    	mov.w     #0x3e80, w1
    44b8:	71 00 98    	mov.w     w1, [w0+14]

000044ba <.LSM41>:
    self->rpnum = rpnum;
    44ba:	1e 00 78    	mov.w     [w14], w0
    44bc:	ee 00 90    	mov.w     [w14+12], w1
    44be:	51 00 98    	mov.w     w1, [w0+10]

000044c0 <.LSM42>:
    self->pin = NULL;
    44c0:	1e 00 78    	mov.w     [w14], w0
    44c2:	80 00 eb    	clr.w     w1
    44c4:	01 08 98    	mov.w     w1, [w0+16]

000044c6 <.LSM43>:
}
    44c6:	00 80 fa    	ulnk      
    44c8:	00 00 06    	return    

000044ca <_oc_free>:

void oc_free(_OC *self) {
    44ca:	02 00 fa    	lnk       #0x2
    44cc:	00 0f 78    	mov.w     w0, [w14]

000044ce <.LSM45>:
    *(self->OCxCON1) = 0;
    44ce:	1e 00 78    	mov.w     [w14], w0
    44d0:	10 00 78    	mov.w     [w0], w0
    44d2:	80 00 eb    	clr.w     w1
    44d4:	01 08 78    	mov.w     w1, [w0]

000044d6 <.LSM46>:
    *(self->OCxCON2) = 0;
    44d6:	1e 00 78    	mov.w     [w14], w0
    44d8:	10 00 90    	mov.w     [w0+2], w0
    44da:	80 00 eb    	clr.w     w1
    44dc:	01 08 78    	mov.w     w1, [w0]

000044de <.LSM47>:
    if (self->pin) {
    44de:	1e 00 78    	mov.w     [w14], w0
    44e0:	00 08 90    	mov.w     [w0+16], w0
    44e2:	00 00 e0    	cp0.w     w0
    44e4:	2f 00 32    	bra       Z, 0x4544 <.L7>

000044e6 <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    44e6:	11 3a 80    	mov.w     0x742, w1
    44e8:	f0 0b 20    	mov.w     #0xbf, w0
    44ea:	00 81 60    	and.w     w1, w0, w2
    44ec:	60 04 20    	mov.w     #0x46, w0
    44ee:	71 05 20    	mov.w     #0x57, w1
    44f0:	23 74 20    	mov.w     #0x742, w3
    44f2:	80 49 78    	mov.b     w0, [w3]
    44f4:	81 49 78    	mov.b     w1, [w3]
    44f6:	82 49 78    	mov.b     w2, [w3]

000044f8 <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    44f8:	1e 00 78    	mov.w     [w14], w0
    44fa:	00 08 90    	mov.w     [w0+16], w0
    44fc:	70 00 90    	mov.w     [w0+14], w0
    44fe:	9e 00 78    	mov.w     [w14], w1
    4500:	81 08 90    	mov.w     [w1+16], w1
    4502:	f1 00 90    	mov.w     [w1+14], w1
    4504:	11 01 78    	mov.w     [w1], w2
    4506:	9e 00 78    	mov.w     [w14], w1
    4508:	81 08 90    	mov.w     [w1+16], w1
    450a:	a1 48 90    	mov.b     [w1+10], w1
    450c:	81 80 fb    	ze        w1, w1
    450e:	f3 03 20    	mov.w     #0x3f, w3
    4510:	81 18 dd    	sl.w      w3, w1, w1
    4512:	81 80 ea    	com.w     w1, w1
    4514:	81 00 61    	and.w     w2, w1, w1
    4516:	01 08 78    	mov.w     w1, [w0]

00004518 <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    4518:	11 3a 80    	mov.w     0x742, w1
    451a:	00 04 20    	mov.w     #0x40, w0
    451c:	01 01 70    	ior.w     w0, w1, w2
    451e:	60 04 20    	mov.w     #0x46, w0
    4520:	71 05 20    	mov.w     #0x57, w1
    4522:	23 74 20    	mov.w     #0x742, w3
    4524:	80 49 78    	mov.b     w0, [w3]
    4526:	81 49 78    	mov.b     w1, [w3]
    4528:	82 49 78    	mov.b     w2, [w3]

0000452a <.LSM51>:
        self->pin->owner = NULL;
    452a:	1e 00 78    	mov.w     [w14], w0
    452c:	00 08 90    	mov.w     [w0+16], w0
    452e:	80 00 eb    	clr.w     w1
    4530:	01 08 98    	mov.w     w1, [w0+16]

00004532 <.LSM52>:
        pin_digitalOut(self->pin);
    4532:	1e 00 78    	mov.w     [w14], w0
    4534:	00 08 90    	mov.w     [w0+16], w0
    4536:	36 fe 07    	rcall     0x41a4 <_pin_digitalOut>

00004538 <.LSM53>:
        pin_clear(self->pin);
    4538:	1e 00 78    	mov.w     [w14], w0
    453a:	00 08 90    	mov.w     [w0+16], w0
    453c:	a5 fe 07    	rcall     0x4288 <_pin_clear>

0000453e <.LSM54>:
        self->pin = NULL;
    453e:	1e 00 78    	mov.w     [w14], w0
    4540:	80 00 eb    	clr.w     w1
    4542:	01 08 98    	mov.w     w1, [w0+16]

00004544 <.L7>:
    }
}
    4544:	00 80 fa    	ulnk      
    4546:	00 00 06    	return    

00004548 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    4548:	10 00 fa    	lnk       #0x10
    454a:	88 1f 78    	mov.w     w8, [w15++]
    454c:	20 07 98    	mov.w     w0, [w14+4]
    454e:	31 07 98    	mov.w     w1, [w14+6]
    4550:	42 07 98    	mov.w     w2, [w14+8]
    4552:	54 07 98    	mov.w     w4, [w14+10]
    4554:	65 07 98    	mov.w     w5, [w14+12]
    4556:	73 07 98    	mov.w     w3, [w14+14]

00004558 <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    4558:	3e 00 90    	mov.w     [w14+6], w0
    455a:	60 00 90    	mov.w     [w0+12], w0
    455c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    455e:	9c 00 32    	bra       Z, 0x4698 <.L18>

00004560 <.LSM58>:
        return;
    if (pin->owner==NULL) {
    4560:	3e 00 90    	mov.w     [w14+6], w0
    4562:	00 08 90    	mov.w     [w0+16], w0
    4564:	00 00 e0    	cp0.w     w0
    4566:	33 00 3a    	bra       NZ, 0x45ce <.L12>

00004568 <.LSM59>:
        self->pin = pin;
    4568:	2e 00 90    	mov.w     [w14+4], w0
    456a:	be 00 90    	mov.w     [w14+6], w1
    456c:	01 08 98    	mov.w     w1, [w0+16]

0000456e <.LSM60>:
        pin->owner = (void *)self;
    456e:	3e 00 90    	mov.w     [w14+6], w0
    4570:	ae 00 90    	mov.w     [w14+4], w1
    4572:	01 08 98    	mov.w     w1, [w0+16]

00004574 <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    4574:	11 3a 80    	mov.w     0x742, w1
    4576:	f0 0b 20    	mov.w     #0xbf, w0
    4578:	00 81 60    	and.w     w1, w0, w2
    457a:	60 04 20    	mov.w     #0x46, w0
    457c:	71 05 20    	mov.w     #0x57, w1
    457e:	23 74 20    	mov.w     #0x742, w3
    4580:	80 49 78    	mov.b     w0, [w3]
    4582:	81 49 78    	mov.b     w1, [w3]
    4584:	82 49 78    	mov.b     w2, [w3]

00004586 <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    4586:	3e 00 90    	mov.w     [w14+6], w0
    4588:	70 00 90    	mov.w     [w0+14], w0
    458a:	be 00 90    	mov.w     [w14+6], w1
    458c:	f1 00 90    	mov.w     [w1+14], w1
    458e:	11 01 78    	mov.w     [w1], w2
    4590:	be 00 90    	mov.w     [w14+6], w1
    4592:	a1 48 90    	mov.b     [w1+10], w1
    4594:	81 80 fb    	ze        w1, w1
    4596:	f3 03 20    	mov.w     #0x3f, w3
    4598:	81 18 dd    	sl.w      w3, w1, w1
    459a:	81 80 ea    	com.w     w1, w1
    459c:	81 00 61    	and.w     w2, w1, w1
    459e:	01 08 78    	mov.w     w1, [w0]

000045a0 <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    45a0:	3e 00 90    	mov.w     [w14+6], w0
    45a2:	70 00 90    	mov.w     [w0+14], w0
    45a4:	be 00 90    	mov.w     [w14+6], w1
    45a6:	f1 00 90    	mov.w     [w1+14], w1
    45a8:	11 01 78    	mov.w     [w1], w2
    45aa:	ae 00 90    	mov.w     [w14+4], w1
    45ac:	d1 01 90    	mov.w     [w1+10], w3
    45ae:	be 00 90    	mov.w     [w14+6], w1
    45b0:	a1 48 90    	mov.b     [w1+10], w1
    45b2:	81 80 fb    	ze        w1, w1
    45b4:	81 18 dd    	sl.w      w3, w1, w1
    45b6:	82 80 70    	ior.w     w1, w2, w1
    45b8:	01 08 78    	mov.w     w1, [w0]

000045ba <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    45ba:	11 3a 80    	mov.w     0x742, w1
    45bc:	00 04 20    	mov.w     #0x40, w0
    45be:	01 01 70    	ior.w     w0, w1, w2
    45c0:	60 04 20    	mov.w     #0x46, w0
    45c2:	71 05 20    	mov.w     #0x57, w1
    45c4:	23 74 20    	mov.w     #0x742, w3
    45c6:	80 49 78    	mov.b     w0, [w3]
    45c8:	81 49 78    	mov.b     w1, [w3]
    45ca:	82 49 78    	mov.b     w2, [w3]
    45cc:	05 00 37    	bra       0x45d8 <.L13>

000045ce <.L12>:
    } else if (pin->owner!=(void *)self) {
    45ce:	3e 00 90    	mov.w     [w14+6], w0
    45d0:	80 08 90    	mov.w     [w0+16], w1
    45d2:	2e 00 90    	mov.w     [w14+4], w0
    45d4:	80 8f 50    	sub.w     w1, w0, [w15]
    45d6:	62 00 3a    	bra       NZ, 0x469c <.L19>

000045d8 <.L13>:
        return;
    }
    if (timer) {
    45d8:	4e 00 90    	mov.w     [w14+8], w0
    45da:	00 00 e0    	cp0.w     w0
    45dc:	1c 00 32    	bra       Z, 0x4616 <.L14>

000045de <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    45de:	2e 00 90    	mov.w     [w14+4], w0
    45e0:	10 00 78    	mov.w     [w0], w0
    45e2:	ce 00 90    	mov.w     [w14+8], w1
    45e4:	e1 00 90    	mov.w     [w1+12], w1
    45e6:	ca 08 dd    	sl.w      w1, #0xa, w1
    45e8:	61 00 b3    	ior.w     #0x6, w1
    45ea:	01 08 78    	mov.w     w1, [w0]

000045ec <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    45ec:	2e 00 90    	mov.w     [w14+4], w0
    45ee:	10 00 90    	mov.w     [w0+2], w0
    45f0:	f1 01 20    	mov.w     #0x1f, w1
    45f2:	01 08 78    	mov.w     w1, [w0]

000045f4 <.LSM69>:
        timer_setFreq(timer, freq);
    45f4:	5e 01 90    	mov.w     [w14+10], w2
    45f6:	ee 01 90    	mov.w     [w14+12], w3
    45f8:	4e 00 90    	mov.w     [w14+8], w0
    45fa:	47 fb 07    	rcall     0x3c8a <_timer_setFreq>

000045fc <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    45fc:	2e 00 90    	mov.w     [w14+4], w0
    45fe:	20 00 90    	mov.w     [w0+4], w0
    4600:	ce 00 90    	mov.w     [w14+8], w1
    4602:	91 00 90    	mov.w     [w1+2], w1
    4604:	91 00 78    	mov.w     [w1], w1
    4606:	01 08 78    	mov.w     w1, [w0]

00004608 <.LSM71>:
        *(self->OCxTMR) = 0;
    4608:	2e 00 90    	mov.w     [w14+4], w0
    460a:	40 00 90    	mov.w     [w0+8], w0
    460c:	80 00 eb    	clr.w     w1
    460e:	01 08 78    	mov.w     w1, [w0]

00004610 <.LSM72>:
        timer_start(timer);
    4610:	4e 00 90    	mov.w     [w14+8], w0
    4612:	70 fb 07    	rcall     0x3cf4 <_timer_start>
    4614:	25 00 37    	bra       0x4660 <.L15>

00004616 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    4616:	2e 00 90    	mov.w     [w14+4], w0
    4618:	10 00 78    	mov.w     [w0], w0
    461a:	61 c0 21    	mov.w     #0x1c06, w1
    461c:	01 08 78    	mov.w     w1, [w0]

0000461e <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    461e:	2e 00 90    	mov.w     [w14+4], w0
    4620:	10 00 90    	mov.w     [w0+2], w0
    4622:	f1 01 20    	mov.w     #0x1f, w1
    4624:	01 08 78    	mov.w     w1, [w0]

00004626 <.LSM75>:
        if (freq<(FCY/65536.))
    4626:	18 c0 b3    	mov.b     #0x1, w8
    4628:	02 40 22    	mov.w     #0x2400, w2
    462a:	43 37 24    	mov.w     #0x4374, w3
    462c:	5e 00 90    	mov.w     [w14+10], w0
    462e:	ee 00 90    	mov.w     [w14+12], w1
    4630:	98 e6 07    	rcall     0x1362 <___eqsf2>
    4632:	00 00 e0    	cp0.w     w0
    4634:	01 00 35    	bra       LT, 0x4638 <.L16>
    4636:	00 44 eb    	clr.b     w8

00004638 <.L16>:
    4638:	08 04 e0    	cp0.b     w8
    463a:	05 00 32    	bra       Z, 0x4646 <.L17>

0000463c <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    463c:	2e 00 90    	mov.w     [w14+4], w0
    463e:	20 00 90    	mov.w     [w0+4], w0
    4640:	80 80 eb    	setm.w    w1
    4642:	01 08 78    	mov.w     w1, [w0]
    4644:	0d 00 37    	bra       0x4660 <.L15>

00004646 <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    4646:	2e 00 90    	mov.w     [w14+4], w0
    4648:	20 04 90    	mov.w     [w0+4], w8
    464a:	5e 01 90    	mov.w     [w14+10], w2
    464c:	ee 01 90    	mov.w     [w14+12], w3
    464e:	00 40 22    	mov.w     #0x2400, w0
    4650:	41 b7 24    	mov.w     #0x4b74, w1
    4652:	45 e6 07    	rcall     0x12de <___divsf3>
    4654:	02 00 20    	mov.w     #0x0, w2
    4656:	03 f8 23    	mov.w     #0x3f80, w3
    4658:	e4 e5 07    	rcall     0x1222 <___subsf3>
    465a:	87 e6 07    	rcall     0x136a <___fixunssfsi>
    465c:	00 00 78    	mov.w     w0, w0
    465e:	00 0c 78    	mov.w     w0, [w8]

00004660 <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    4660:	7e 00 90    	mov.w     [w14+14], w0
    4662:	61 01 b8    	mul.uu    w0, #0x1, w2
    4664:	2e 00 90    	mov.w     [w14+4], w0
    4666:	20 00 90    	mov.w     [w0+4], w0
    4668:	10 00 78    	mov.w     [w0], w0
    466a:	80 00 eb    	clr.w     w1
    466c:	00 9a b9    	mul.ss    w3, w0, w4
    466e:	04 02 78    	mov.w     w4, w4
    4670:	02 8b b9    	mul.ss    w1, w2, w6
    4672:	86 02 78    	mov.w     w6, w5
    4674:	05 02 42    	add.w     w4, w5, w4
    4676:	00 10 b8    	mul.uu    w2, w0, w0
    4678:	01 02 42    	add.w     w4, w1, w4
    467a:	84 00 78    	mov.w     w4, w1
    467c:	00 8f be    	mov.d     w0, [w14]

0000467e <.LSM79>:
    *(self->OCxR) = temp.w[1];
    467e:	2e 00 90    	mov.w     [w14+4], w0
    4680:	30 00 90    	mov.w     [w0+6], w0
    4682:	9e 00 90    	mov.w     [w14+2], w1
    4684:	01 08 78    	mov.w     w1, [w0]

00004686 <.LSM80>:
    self->pin->write = __pwmWrite;
    4686:	2e 00 90    	mov.w     [w14+4], w0
    4688:	00 08 90    	mov.w     [w0+16], w0
    468a:	41 34 24    	mov.w     #0x4344, w1
    468c:	11 08 98    	mov.w     w1, [w0+18]

0000468e <.LSM81>:
    self->pin->read = __pwmRead;
    468e:	2e 00 90    	mov.w     [w14+4], w0
    4690:	00 08 90    	mov.w     [w0+16], w0
    4692:	61 31 24    	mov.w     #0x4316, w1
    4694:	21 08 98    	mov.w     w1, [w0+20]
    4696:	03 00 37    	bra       0x469e <.L9>

00004698 <.L18>:
    4698:	00 00 00    	nop       
    469a:	01 00 37    	bra       0x469e <.L9>

0000469c <.L19>:
    469c:	00 00 00    	nop       

0000469e <.L9>:
}
    469e:	4f 04 78    	mov.w     [--w15], w8
    46a0:	00 80 fa    	ulnk      
    46a2:	00 00 06    	return    

000046a4 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    46a4:	14 00 fa    	lnk       #0x14
    46a6:	20 07 98    	mov.w     w0, [w14+4]
    46a8:	31 07 98    	mov.w     w1, [w14+6]
    46aa:	42 07 98    	mov.w     w2, [w14+8]
    46ac:	54 07 98    	mov.w     w4, [w14+10]
    46ae:	65 07 98    	mov.w     w5, [w14+12]
    46b0:	76 07 98    	mov.w     w6, [w14+14]
    46b2:	07 0f 98    	mov.w     w7, [w14+16]
    46b4:	13 0f 98    	mov.w     w3, [w14+18]

000046b6 <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    46b6:	3e 00 90    	mov.w     [w14+6], w0
    46b8:	60 00 90    	mov.w     [w0+12], w0
    46ba:	e1 0f 40    	add.w     w0, #0x1, [w15]
    46bc:	87 00 32    	bra       Z, 0x47cc <.L25>

000046be <.LSM87>:
        return;
    if (pin->owner==NULL) {
    46be:	3e 00 90    	mov.w     [w14+6], w0
    46c0:	00 08 90    	mov.w     [w0+16], w0
    46c2:	00 00 e0    	cp0.w     w0
    46c4:	33 00 3a    	bra       NZ, 0x472c <.L23>

000046c6 <.LSM88>:
        self->pin = pin;
    46c6:	2e 00 90    	mov.w     [w14+4], w0
    46c8:	be 00 90    	mov.w     [w14+6], w1
    46ca:	01 08 98    	mov.w     w1, [w0+16]

000046cc <.LSM89>:
        pin->owner = (void *)self;
    46cc:	3e 00 90    	mov.w     [w14+6], w0
    46ce:	ae 00 90    	mov.w     [w14+4], w1
    46d0:	01 08 98    	mov.w     w1, [w0+16]

000046d2 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    46d2:	11 3a 80    	mov.w     0x742, w1
    46d4:	f0 0b 20    	mov.w     #0xbf, w0
    46d6:	00 81 60    	and.w     w1, w0, w2
    46d8:	60 04 20    	mov.w     #0x46, w0
    46da:	71 05 20    	mov.w     #0x57, w1
    46dc:	23 74 20    	mov.w     #0x742, w3
    46de:	80 49 78    	mov.b     w0, [w3]
    46e0:	81 49 78    	mov.b     w1, [w3]
    46e2:	82 49 78    	mov.b     w2, [w3]

000046e4 <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    46e4:	3e 00 90    	mov.w     [w14+6], w0
    46e6:	70 00 90    	mov.w     [w0+14], w0
    46e8:	be 00 90    	mov.w     [w14+6], w1
    46ea:	f1 00 90    	mov.w     [w1+14], w1
    46ec:	11 01 78    	mov.w     [w1], w2
    46ee:	be 00 90    	mov.w     [w14+6], w1
    46f0:	a1 48 90    	mov.b     [w1+10], w1
    46f2:	81 80 fb    	ze        w1, w1
    46f4:	f3 03 20    	mov.w     #0x3f, w3
    46f6:	81 18 dd    	sl.w      w3, w1, w1
    46f8:	81 80 ea    	com.w     w1, w1
    46fa:	81 00 61    	and.w     w2, w1, w1
    46fc:	01 08 78    	mov.w     w1, [w0]

000046fe <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    46fe:	3e 00 90    	mov.w     [w14+6], w0
    4700:	70 00 90    	mov.w     [w0+14], w0
    4702:	be 00 90    	mov.w     [w14+6], w1
    4704:	f1 00 90    	mov.w     [w1+14], w1
    4706:	11 01 78    	mov.w     [w1], w2
    4708:	ae 00 90    	mov.w     [w14+4], w1
    470a:	d1 01 90    	mov.w     [w1+10], w3
    470c:	be 00 90    	mov.w     [w14+6], w1
    470e:	a1 48 90    	mov.b     [w1+10], w1
    4710:	81 80 fb    	ze        w1, w1
    4712:	81 18 dd    	sl.w      w3, w1, w1
    4714:	82 80 70    	ior.w     w1, w2, w1
    4716:	01 08 78    	mov.w     w1, [w0]

00004718 <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    4718:	11 3a 80    	mov.w     0x742, w1
    471a:	00 04 20    	mov.w     #0x40, w0
    471c:	01 01 70    	ior.w     w0, w1, w2
    471e:	60 04 20    	mov.w     #0x46, w0
    4720:	71 05 20    	mov.w     #0x57, w1
    4722:	23 74 20    	mov.w     #0x742, w3
    4724:	80 49 78    	mov.b     w0, [w3]
    4726:	81 49 78    	mov.b     w1, [w3]
    4728:	82 49 78    	mov.b     w2, [w3]
    472a:	05 00 37    	bra       0x4736 <.L24>

0000472c <.L23>:
    } else if (pin->owner!=(void *)self) {
    472c:	3e 00 90    	mov.w     [w14+6], w0
    472e:	80 08 90    	mov.w     [w0+16], w1
    4730:	2e 00 90    	mov.w     [w14+4], w0
    4732:	80 8f 50    	sub.w     w1, w0, [w15]
    4734:	4d 00 3a    	bra       NZ, 0x47d0 <.L26>

00004736 <.L24>:
        return;
    }
    if (timer) {
    4736:	4e 00 90    	mov.w     [w14+8], w0
    4738:	00 00 e0    	cp0.w     w0
    473a:	4b 00 32    	bra       Z, 0x47d2 <.L20>

0000473c <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    473c:	02 40 22    	mov.w     #0x2400, w2
    473e:	43 b7 24    	mov.w     #0x4b74, w3
    4740:	7e 00 90    	mov.w     [w14+14], w0
    4742:	8e 08 90    	mov.w     [w14+16], w1
    4744:	8a e6 07    	rcall     0x145a <___mulsf3>
    4746:	11 e6 07    	rcall     0x136a <___fixunssfsi>
    4748:	80 00 78    	mov.w     w0, w1
    474a:	2e 00 90    	mov.w     [w14+4], w0
    474c:	61 00 98    	mov.w     w1, [w0+12]

0000474e <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    474e:	7e 01 90    	mov.w     [w14+14], w2
    4750:	8e 09 90    	mov.w     [w14+16], w3
    4752:	3e b8 97    	mov.w     [w14-10], w0
    4754:	ce b8 97    	mov.w     [w14-8], w1
    4756:	65 e5 07    	rcall     0x1222 <___subsf3>
    4758:	02 40 22    	mov.w     #0x2400, w2
    475a:	43 b7 24    	mov.w     #0x4b74, w3
    475c:	7e e6 07    	rcall     0x145a <___mulsf3>
    475e:	05 e6 07    	rcall     0x136a <___fixunssfsi>
    4760:	80 00 78    	mov.w     w0, w1
    4762:	2e 00 90    	mov.w     [w14+4], w0
    4764:	71 00 98    	mov.w     w1, [w0+14]

00004766 <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    4766:	2e 00 90    	mov.w     [w14+4], w0
    4768:	10 00 78    	mov.w     [w0], w0
    476a:	f1 c0 21    	mov.w     #0x1c0f, w1
    476c:	01 08 78    	mov.w     w1, [w0]

0000476e <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    476e:	2e 00 90    	mov.w     [w14+4], w0
    4770:	10 00 90    	mov.w     [w0+2], w0
    4772:	ce 00 90    	mov.w     [w14+8], w1
    4774:	71 01 90    	mov.w     [w1+14], w2
    4776:	01 08 20    	mov.w     #0x80, w1
    4778:	82 80 70    	ior.w     w1, w2, w1
    477a:	01 08 78    	mov.w     w1, [w0]

0000477c <.LSM100>:
        *(self->OCxR) = 1;
    477c:	2e 00 90    	mov.w     [w14+4], w0
    477e:	30 00 90    	mov.w     [w0+6], w0
    4780:	11 00 20    	mov.w     #0x1, w1
    4782:	01 08 78    	mov.w     w1, [w0]

00004784 <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    4784:	1e 08 90    	mov.w     [w14+18], w0
    4786:	61 01 b8    	mul.uu    w0, #0x1, w2
    4788:	2e 00 90    	mov.w     [w14+4], w0
    478a:	70 00 90    	mov.w     [w0+14], w0
    478c:	80 00 eb    	clr.w     w1
    478e:	00 9a b9    	mul.ss    w3, w0, w4
    4790:	04 02 78    	mov.w     w4, w4
    4792:	02 8b b9    	mul.ss    w1, w2, w6
    4794:	86 02 78    	mov.w     w6, w5
    4796:	05 02 42    	add.w     w4, w5, w4
    4798:	00 10 b8    	mul.uu    w2, w0, w0
    479a:	01 02 42    	add.w     w4, w1, w4
    479c:	84 00 78    	mov.w     w4, w1
    479e:	00 8f be    	mov.d     w0, [w14]

000047a0 <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    47a0:	2e 00 90    	mov.w     [w14+4], w0
    47a2:	20 00 90    	mov.w     [w0+4], w0
    47a4:	ae 00 90    	mov.w     [w14+4], w1
    47a6:	61 01 90    	mov.w     [w1+12], w2
    47a8:	9e 00 90    	mov.w     [w14+2], w1
    47aa:	81 00 41    	add.w     w2, w1, w1
    47ac:	01 08 78    	mov.w     w1, [w0]

000047ae <.LSM103>:
        timer_setPeriod(timer, interval);
    47ae:	5e 01 90    	mov.w     [w14+10], w2
    47b0:	ee 01 90    	mov.w     [w14+12], w3
    47b2:	4e 00 90    	mov.w     [w14+8], w0
    47b4:	d0 f9 07    	rcall     0x3b56 <_timer_setPeriod>

000047b6 <.LSM104>:
        timer_start(timer);
    47b6:	4e 00 90    	mov.w     [w14+8], w0
    47b8:	9d fa 07    	rcall     0x3cf4 <_timer_start>

000047ba <.LSM105>:
        self->pin->write = __servoWrite;
    47ba:	2e 00 90    	mov.w     [w14+4], w0
    47bc:	00 08 90    	mov.w     [w0+16], w0
    47be:	e1 3a 24    	mov.w     #0x43ae, w1
    47c0:	11 08 98    	mov.w     w1, [w0+18]

000047c2 <.LSM106>:
        self->pin->read = __servoRead;
    47c2:	2e 00 90    	mov.w     [w14+4], w0
    47c4:	00 08 90    	mov.w     [w0+16], w0
    47c6:	c1 37 24    	mov.w     #0x437c, w1
    47c8:	21 08 98    	mov.w     w1, [w0+20]
    47ca:	03 00 37    	bra       0x47d2 <.L20>

000047cc <.L25>:
    47cc:	00 00 00    	nop       
    47ce:	01 00 37    	bra       0x47d2 <.L20>

000047d0 <.L26>:
    47d0:	00 00 00    	nop       

000047d2 <.L20>:
    }
}
    47d2:	00 80 fa    	ulnk      
    47d4:	00 00 06    	return    

000047d6 <_init_i2c>:

_I2C i2c1, i2c2, i2c3;
_PIN SCL3, SDA3;

void init_i2c(void) {
    47d6:	00 00 fa    	lnk       #0x0

000047d8 <.LSM1>:
    init_pin();
    47d8:	7e fb 07    	rcall     0x3ed6 <_init_pin>

000047da <.LSM2>:

    pin_init(&SDA3, (uint16_t *)&PORTE, (uint16_t *)&TRISE, 
    47da:	00 00 eb    	clr.w     w0
    47dc:	80 1f 78    	mov.w     w0, [w15++]
    47de:	80 83 eb    	setm.w    w7
    47e0:	00 43 eb    	clr.b     w6
    47e2:	80 82 eb    	setm.w    w5
    47e4:	74 c0 b3    	mov.b     #0x7, w4
    47e6:	80 01 eb    	clr.w     w3
    47e8:	02 2e 20    	mov.w     #0x2e0, w2
    47ea:	21 2e 20    	mov.w     #0x2e2, w1
    47ec:	80 ed 21    	mov.w     #0x1ed8, w0
    47ee:	87 fc 07    	rcall     0x40fe <_pin_init>
    47f0:	8f 87 e9    	dec2.w    w15, w15

000047f2 <.LSM3>:
             (uint16_t *)NULL, 7, -1, 0, -1, (uint16_t *)NULL);
    pin_init(&SCL3, (uint16_t *)&PORTE, (uint16_t *)&TRISE, 
    47f2:	00 00 eb    	clr.w     w0
    47f4:	80 1f 78    	mov.w     w0, [w15++]
    47f6:	80 83 eb    	setm.w    w7
    47f8:	00 43 eb    	clr.b     w6
    47fa:	80 82 eb    	setm.w    w5
    47fc:	64 c0 b3    	mov.b     #0x6, w4
    47fe:	80 01 eb    	clr.w     w3
    4800:	02 2e 20    	mov.w     #0x2e0, w2
    4802:	21 2e 20    	mov.w     #0x2e2, w1
    4804:	20 ec 21    	mov.w     #0x1ec2, w0
    4806:	7b fc 07    	rcall     0x40fe <_pin_init>
    4808:	8f 87 e9    	dec2.w    w15, w15

0000480a <.LSM4>:
             (uint16_t *)NULL, 6, -1, 0, -1, (uint16_t *)NULL);

    i2c_init(&i2c1, (uint16_t *)&I2C1RCV, (uint16_t *)&I2C1TRN, 
    480a:	e0 b2 21    	mov.w     #0x1b2e, w0
    480c:	80 1f 78    	mov.w     w0, [w15++]
    480e:	80 b1 21    	mov.w     #0x1b18, w0
    4810:	80 1f 78    	mov.w     w0, [w15++]
    4812:	10 c0 b3    	mov.b     #0x1, w0
    4814:	80 1f 78    	mov.w     w0, [w15++]
    4816:	60 08 20    	mov.w     #0x86, w0
    4818:	80 1f 78    	mov.w     w0, [w15++]
    481a:	c7 20 20    	mov.w     #0x20c, w7
    481c:	a6 20 20    	mov.w     #0x20a, w6
    481e:	85 20 20    	mov.w     #0x208, w5
    4820:	64 20 20    	mov.w     #0x206, w4
    4822:	43 20 20    	mov.w     #0x204, w3
    4824:	22 20 20    	mov.w     #0x202, w2
    4826:	01 20 20    	mov.w     #0x200, w1
    4828:	00 e8 21    	mov.w     #0x1e80, w0
    482a:	27 00 07    	rcall     0x487a <_i2c_init>
    482c:	e8 87 57    	sub.w     w15, #0x8, w15

0000482e <.LSM5>:
             (uint16_t *)&I2C1BRG, (uint16_t *)&I2C1CON, 
             (uint16_t *)&I2C1STAT, (uint16_t *)&I2C1ADD, 
             (uint16_t *)&I2C1MSK, (uint16_t *)&IFS1, 1, 
             &D[8], &D[9]);
    i2c_init(&i2c2, (uint16_t *)&I2C2RCV, (uint16_t *)&I2C2TRN, 
    482e:	a0 aa 21    	mov.w     #0x1aaa, w0
    4830:	80 1f 78    	mov.w     w0, [w15++]
    4832:	40 a9 21    	mov.w     #0x1a94, w0
    4834:	80 1f 78    	mov.w     w0, [w15++]
    4836:	20 c0 b3    	mov.b     #0x2, w0
    4838:	80 1f 78    	mov.w     w0, [w15++]
    483a:	a0 08 20    	mov.w     #0x8a, w0
    483c:	80 1f 78    	mov.w     w0, [w15++]
    483e:	c7 21 20    	mov.w     #0x21c, w7
    4840:	a6 21 20    	mov.w     #0x21a, w6
    4842:	85 21 20    	mov.w     #0x218, w5
    4844:	64 21 20    	mov.w     #0x216, w4
    4846:	43 21 20    	mov.w     #0x214, w3
    4848:	22 21 20    	mov.w     #0x212, w2
    484a:	01 21 20    	mov.w     #0x210, w1
    484c:	60 e9 21    	mov.w     #0x1e96, w0
    484e:	15 00 07    	rcall     0x487a <_i2c_init>
    4850:	e8 87 57    	sub.w     w15, #0x8, w15

00004852 <.LSM6>:
             (uint16_t *)&I2C2BRG, (uint16_t *)&I2C2CON, 
             (uint16_t *)&I2C2STAT, (uint16_t *)&I2C2ADD, 
             (uint16_t *)&I2C2MSK, (uint16_t *)&IFS3, 2, 
             &D[2], &D[3]);
    i2c_init(&i2c3, (uint16_t *)&I2C3RCV, (uint16_t *)&I2C3TRN, 
    4852:	20 ec 21    	mov.w     #0x1ec2, w0
    4854:	80 1f 78    	mov.w     w0, [w15++]
    4856:	80 ed 21    	mov.w     #0x1ed8, w0
    4858:	80 1f 78    	mov.w     w0, [w15++]
    485a:	50 c0 b3    	mov.b     #0x5, w0
    485c:	80 1f 78    	mov.w     w0, [w15++]
    485e:	e0 08 20    	mov.w     #0x8e, w0
    4860:	80 1f 78    	mov.w     w0, [w15++]
    4862:	c7 27 20    	mov.w     #0x27c, w7
    4864:	a6 27 20    	mov.w     #0x27a, w6
    4866:	85 27 20    	mov.w     #0x278, w5
    4868:	64 27 20    	mov.w     #0x276, w4
    486a:	43 27 20    	mov.w     #0x274, w3
    486c:	22 27 20    	mov.w     #0x272, w2
    486e:	01 27 20    	mov.w     #0x270, w1
    4870:	c0 ea 21    	mov.w     #0x1eac, w0
    4872:	03 00 07    	rcall     0x487a <_i2c_init>
    4874:	e8 87 57    	sub.w     w15, #0x8, w15

00004876 <.LSM7>:
             (uint16_t *)&I2C3BRG, (uint16_t *)&I2C3CON, 
             (uint16_t *)&I2C3STAT, (uint16_t *)&I2C3ADD, 
             (uint16_t *)&I2C3MSK, (uint16_t *)&IFS5, 5, 
             &SDA3, &SCL3);
}
    4876:	00 80 fa    	ulnk      
    4878:	00 00 06    	return    

0000487a <_i2c_init>:

void i2c_init(_I2C *self, uint16_t *I2CxRCV, uint16_t *I2CxTRN, 
              uint16_t *I2CxBRG, uint16_t *I2CxCON, 
              uint16_t *I2CxSTAT, uint16_t *I2CxADD, 
              uint16_t *I2CxMSK, uint16_t *IFSy, 
              uint8_t MI2CxIF, _PIN *SDA, _PIN *SCL) {
    487a:	10 00 fa    	lnk       #0x10
    487c:	00 0f 78    	mov.w     w0, [w14]
    487e:	11 07 98    	mov.w     w1, [w14+2]
    4880:	22 07 98    	mov.w     w2, [w14+4]
    4882:	33 07 98    	mov.w     w3, [w14+6]
    4884:	44 07 98    	mov.w     w4, [w14+8]
    4886:	55 07 98    	mov.w     w5, [w14+10]
    4888:	66 07 98    	mov.w     w6, [w14+12]
    488a:	77 07 98    	mov.w     w7, [w14+14]

0000488c <.LSM9>:
    self->I2CxRCV = I2CxRCV;
    488c:	1e 00 78    	mov.w     [w14], w0
    488e:	9e 00 90    	mov.w     [w14+2], w1
    4890:	01 08 78    	mov.w     w1, [w0]

00004892 <.LSM10>:
    self->I2CxTRN = I2CxTRN;
    4892:	1e 00 78    	mov.w     [w14], w0
    4894:	ae 00 90    	mov.w     [w14+4], w1
    4896:	11 00 98    	mov.w     w1, [w0+2]

00004898 <.LSM11>:
    self->I2CxBRG = I2CxBRG;
    4898:	1e 00 78    	mov.w     [w14], w0
    489a:	be 00 90    	mov.w     [w14+6], w1
    489c:	21 00 98    	mov.w     w1, [w0+4]

0000489e <.LSM12>:
    self->I2CxCON = I2CxCON;
    489e:	1e 00 78    	mov.w     [w14], w0
    48a0:	ce 00 90    	mov.w     [w14+8], w1
    48a2:	31 00 98    	mov.w     w1, [w0+6]

000048a4 <.LSM13>:
    self->I2CxSTAT = I2CxSTAT;
    48a4:	1e 00 78    	mov.w     [w14], w0
    48a6:	de 00 90    	mov.w     [w14+10], w1
    48a8:	41 00 98    	mov.w     w1, [w0+8]

000048aa <.LSM14>:
    self->I2CxADD = I2CxADD;
    48aa:	1e 00 78    	mov.w     [w14], w0
    48ac:	ee 00 90    	mov.w     [w14+12], w1
    48ae:	51 00 98    	mov.w     w1, [w0+10]

000048b0 <.LSM15>:
    self->I2CxMSK = I2CxMSK;
    48b0:	1e 00 78    	mov.w     [w14], w0
    48b2:	fe 00 90    	mov.w     [w14+14], w1
    48b4:	61 00 98    	mov.w     w1, [w0+12]

000048b6 <.LSM16>:
    self->IFSy = IFSy;
    48b6:	1e 00 78    	mov.w     [w14], w0
    48b8:	ce b8 97    	mov.w     [w14-8], w1
    48ba:	71 00 98    	mov.w     w1, [w0+14]

000048bc <.LSM17>:
    self->MI2CxIF = MI2CxIF;
    48bc:	1e 00 78    	mov.w     [w14], w0
    48be:	ee f0 97    	mov.b     [w14-10], w1
    48c0:	01 50 98    	mov.b     w1, [w0+16]

000048c2 <.LSM18>:
    self->SDA = SDA;
    48c2:	1e 00 78    	mov.w     [w14], w0
    48c4:	ae b8 97    	mov.w     [w14-12], w1
    48c6:	11 08 98    	mov.w     w1, [w0+18]

000048c8 <.LSM19>:
    self->SCL = SCL;
    48c8:	1e 00 78    	mov.w     [w14], w0
    48ca:	9e b8 97    	mov.w     [w14-14], w1
    48cc:	21 08 98    	mov.w     w1, [w0+20]

000048ce <.LSM20>:
}
    48ce:	00 80 fa    	ulnk      
    48d0:	00 00 06    	return    

000048d2 <_i2c_open>:

void i2c_open(_I2C *self, float freq) {
    48d2:	06 00 fa    	lnk       #0x6
    48d4:	88 1f 78    	mov.w     w8, [w15++]
    48d6:	00 0f 78    	mov.w     w0, [w14]
    48d8:	12 07 98    	mov.w     w2, [w14+2]
    48da:	23 07 98    	mov.w     w3, [w14+4]

000048dc <.LSM22>:
    uint16_t temp;

    // Disable I2C module
    *(self->I2CxCON) = 0;
    48dc:	1e 00 78    	mov.w     [w14], w0
    48de:	30 00 90    	mov.w     [w0+6], w0
    48e0:	80 00 eb    	clr.w     w1
    48e2:	01 08 78    	mov.w     w1, [w0]

000048e4 <.LSM23>:
    *(self->I2CxSTAT) = 0;
    48e4:	1e 00 78    	mov.w     [w14], w0
    48e6:	40 00 90    	mov.w     [w0+8], w0
    48e8:	80 00 eb    	clr.w     w1
    48ea:	01 08 78    	mov.w     w1, [w0]

000048ec <.LSM24>:
    if ((self->SDA->owner==NULL) && (self->SCL->owner==NULL)) {
    48ec:	1e 00 78    	mov.w     [w14], w0
    48ee:	10 08 90    	mov.w     [w0+18], w0
    48f0:	00 08 90    	mov.w     [w0+16], w0
    48f2:	00 00 e0    	cp0.w     w0
    48f4:	5b 00 3a    	bra       NZ, 0x49ac <.L11>
    48f6:	1e 00 78    	mov.w     [w14], w0
    48f8:	20 08 90    	mov.w     [w0+20], w0
    48fa:	00 08 90    	mov.w     [w0+16], w0
    48fc:	00 00 e0    	cp0.w     w0
    48fe:	58 00 3a    	bra       NZ, 0x49b0 <.L12>

00004900 <.LSM25>:
        // Both SDA and SCL are available, so assign to the I2C module
        pin_digitalIn(self->SDA);
    4900:	1e 00 78    	mov.w     [w14], w0
    4902:	10 08 90    	mov.w     [w0+18], w0
    4904:	28 fc 07    	rcall     0x4156 <_pin_digitalIn>

00004906 <.LSM26>:
        pin_digitalIn(self->SCL);
    4906:	1e 00 78    	mov.w     [w14], w0
    4908:	20 08 90    	mov.w     [w0+20], w0
    490a:	25 fc 07    	rcall     0x4156 <_pin_digitalIn>

0000490c <.LSM27>:
        self->SDA->owner = (void *)self;
    490c:	1e 00 78    	mov.w     [w14], w0
    490e:	10 08 90    	mov.w     [w0+18], w0
    4910:	9e 00 78    	mov.w     [w14], w1
    4912:	01 08 98    	mov.w     w1, [w0+16]

00004914 <.LSM28>:
        self->SDA->write = NULL;
    4914:	1e 00 78    	mov.w     [w14], w0
    4916:	10 08 90    	mov.w     [w0+18], w0
    4918:	80 00 eb    	clr.w     w1
    491a:	11 08 98    	mov.w     w1, [w0+18]

0000491c <.LSM29>:
        self->SDA->read = NULL;
    491c:	1e 00 78    	mov.w     [w14], w0
    491e:	10 08 90    	mov.w     [w0+18], w0
    4920:	80 00 eb    	clr.w     w1
    4922:	21 08 98    	mov.w     w1, [w0+20]

00004924 <.LSM30>:
        self->SCL->owner = (void *)self;
    4924:	1e 00 78    	mov.w     [w14], w0
    4926:	20 08 90    	mov.w     [w0+20], w0
    4928:	9e 00 78    	mov.w     [w14], w1
    492a:	01 08 98    	mov.w     w1, [w0+16]

0000492c <.LSM31>:
        self->SCL->write = NULL;
    492c:	1e 00 78    	mov.w     [w14], w0
    492e:	20 08 90    	mov.w     [w0+20], w0
    4930:	80 00 eb    	clr.w     w1
    4932:	11 08 98    	mov.w     w1, [w0+18]

00004934 <.LSM32>:
        self->SCL->read = NULL;
    4934:	1e 00 78    	mov.w     [w14], w0
    4936:	20 08 90    	mov.w     [w0+20], w0
    4938:	80 00 eb    	clr.w     w1
    493a:	21 08 98    	mov.w     w1, [w0+20]

0000493c <.LSM33>:
    } else {
        return; // At least one of SDA and SCL are being used by another 
                // peripheral
    }
    // Clip freq to be in allowable range of values
    if (freq<(FCY/(256.+(FCY/10e6))))
    493c:	18 c0 b3    	mov.b     #0x1, w8
    493e:	d2 fc 29    	mov.w     #0x9fcd, w2
    4940:	23 77 24    	mov.w     #0x4772, w3
    4942:	1e 00 90    	mov.w     [w14+2], w0
    4944:	ae 00 90    	mov.w     [w14+4], w1
    4946:	0d e5 07    	rcall     0x1362 <___eqsf2>
    4948:	00 00 e0    	cp0.w     w0
    494a:	01 00 35    	bra       LT, 0x494e <.L5>
    494c:	00 44 eb    	clr.b     w8

0000494e <.L5>:
    494e:	08 04 e0    	cp0.b     w8
    4950:	04 00 32    	bra       Z, 0x495a <.L7>

00004952 <.LSM34>:
        freq = FCY/(256.+(FCY/10e6));
    4952:	d0 fc 29    	mov.w     #0x9fcd, w0
    4954:	21 77 24    	mov.w     #0x4772, w1
    4956:	10 07 98    	mov.w     w0, [w14+2]
    4958:	21 07 98    	mov.w     w1, [w14+4]

0000495a <.L7>:
    if (freq>(FCY/(4.+(FCY/10e6))))
    495a:	18 c0 b3    	mov.b     #0x1, w8
    495c:	c2 2d 26    	mov.w     #0x62dc, w2
    495e:	e3 a2 24    	mov.w     #0x4a2e, w3
    4960:	1e 00 90    	mov.w     [w14+2], w0
    4962:	ae 00 90    	mov.w     [w14+4], w1
    4964:	00 e5 07    	rcall     0x1366 <___gesf2>
    4966:	00 00 e0    	cp0.w     w0
    4968:	01 00 3c    	bra       GT, 0x496c <.L9>
    496a:	00 44 eb    	clr.b     w8

0000496c <.L9>:
    496c:	08 04 e0    	cp0.b     w8
    496e:	04 00 32    	bra       Z, 0x4978 <.L10>

00004970 <.LSM36>:
        freq = FCY/(4.+(FCY/10e6));
    4970:	c0 2d 26    	mov.w     #0x62dc, w0
    4972:	e1 a2 24    	mov.w     #0x4a2e, w1
    4974:	10 07 98    	mov.w     w0, [w14+2]
    4976:	21 07 98    	mov.w     w1, [w14+4]

00004978 <.L10>:
    // Compute BRG value to obtain closest value to that specified
    *(self->I2CxBRG) = (uint16_t)((FCY/freq)-(FCY/10e6)+0.5)-1;
    4978:	1e 00 78    	mov.w     [w14], w0
    497a:	20 04 90    	mov.w     [w0+4], w8
    497c:	1e 01 90    	mov.w     [w14+2], w2
    497e:	ae 01 90    	mov.w     [w14+4], w3
    4980:	00 40 22    	mov.w     #0x2400, w0
    4982:	41 b7 24    	mov.w     #0x4b74, w1
    4984:	ac e4 07    	rcall     0x12de <___divsf3>
    4986:	d2 cc 2c    	mov.w     #0xcccd, w2
    4988:	c3 fc 23    	mov.w     #0x3fcc, w3
    498a:	4b e4 07    	rcall     0x1222 <___subsf3>
    498c:	02 00 20    	mov.w     #0x0, w2
    498e:	03 f0 23    	mov.w     #0x3f00, w3
    4990:	49 e4 07    	rcall     0x1224 <___addsf3>
    4992:	eb e4 07    	rcall     0x136a <___fixunssfsi>
    4994:	00 00 78    	mov.w     w0, w0
    4996:	00 00 e9    	dec.w     w0, w0
    4998:	00 0c 78    	mov.w     w0, [w8]

0000499a <.LSM38>:
    bitset(self->I2CxCON, 15);  // Set I2Cx enable bit
    499a:	1e 00 78    	mov.w     [w14], w0
    499c:	30 00 90    	mov.w     [w0+6], w0
    499e:	9e 00 78    	mov.w     [w14], w1
    49a0:	b1 00 90    	mov.w     [w1+6], w1
    49a2:	11 01 78    	mov.w     [w1], w2
    49a4:	01 00 28    	mov.w     #0x8000, w1
    49a6:	82 80 70    	ior.w     w1, w2, w1
    49a8:	01 08 78    	mov.w     w1, [w0]
    49aa:	03 00 37    	bra       0x49b2 <.L3>

000049ac <.L11>:
    49ac:	00 00 00    	nop       
    49ae:	01 00 37    	bra       0x49b2 <.L3>

000049b0 <.L12>:
    49b0:	00 00 00    	nop       

000049b2 <.L3>:
}
    49b2:	4f 04 78    	mov.w     [--w15], w8
    49b4:	00 80 fa    	ulnk      
    49b6:	00 00 06    	return    

000049b8 <_i2c_close>:

void i2c_close(_I2C *self) {
    49b8:	02 00 fa    	lnk       #0x2
    49ba:	00 0f 78    	mov.w     w0, [w14]

000049bc <.LSM42>:
    *(self->I2CxCON) = 0;
    49bc:	1e 00 78    	mov.w     [w14], w0
    49be:	30 00 90    	mov.w     [w0+6], w0
    49c0:	80 00 eb    	clr.w     w1
    49c2:	01 08 78    	mov.w     w1, [w0]

000049c4 <.LSM43>:
    *(self->I2CxSTAT) = 0;
    49c4:	1e 00 78    	mov.w     [w14], w0
    49c6:	40 00 90    	mov.w     [w0+8], w0
    49c8:	80 00 eb    	clr.w     w1
    49ca:	01 08 78    	mov.w     w1, [w0]

000049cc <.LSM44>:
    if (self->SDA->owner==(void *)self) {
    49cc:	1e 00 78    	mov.w     [w14], w0
    49ce:	10 08 90    	mov.w     [w0+18], w0
    49d0:	00 08 90    	mov.w     [w0+16], w0
    49d2:	9e 0f 50    	sub.w     w0, [w14], [w15]
    49d4:	07 00 3a    	bra       NZ, 0x49e4 <.L14>

000049d6 <.LSM45>:
        pin_digitalIn(self->SDA);
    49d6:	1e 00 78    	mov.w     [w14], w0
    49d8:	10 08 90    	mov.w     [w0+18], w0
    49da:	bd fb 07    	rcall     0x4156 <_pin_digitalIn>

000049dc <.LSM46>:
        self->SDA->owner = NULL;
    49dc:	1e 00 78    	mov.w     [w14], w0
    49de:	10 08 90    	mov.w     [w0+18], w0
    49e0:	80 00 eb    	clr.w     w1
    49e2:	01 08 98    	mov.w     w1, [w0+16]

000049e4 <.L14>:
    }
    if (self->SCL->owner==(void *)self) {
    49e4:	1e 00 78    	mov.w     [w14], w0
    49e6:	20 08 90    	mov.w     [w0+20], w0
    49e8:	00 08 90    	mov.w     [w0+16], w0
    49ea:	9e 0f 50    	sub.w     w0, [w14], [w15]
    49ec:	07 00 3a    	bra       NZ, 0x49fc <.L13>

000049ee <.LSM48>:
        pin_digitalIn(self->SCL);
    49ee:	1e 00 78    	mov.w     [w14], w0
    49f0:	20 08 90    	mov.w     [w0+20], w0
    49f2:	b1 fb 07    	rcall     0x4156 <_pin_digitalIn>

000049f4 <.LSM49>:
        self->SCL->owner = NULL;
    49f4:	1e 00 78    	mov.w     [w14], w0
    49f6:	20 08 90    	mov.w     [w0+20], w0
    49f8:	80 00 eb    	clr.w     w1
    49fa:	01 08 98    	mov.w     w1, [w0+16]

000049fc <.L13>:
    }
}
    49fc:	00 80 fa    	ulnk      
    49fe:	00 00 06    	return    

00004a00 <_i2c_start>:

void i2c_start(_I2C *self) {
    4a00:	02 00 fa    	lnk       #0x2
    4a02:	00 0f 78    	mov.w     w0, [w14]

00004a04 <.LSM52>:
    bitset(self->I2CxCON, 0);   // Initiate a Start condition on I2Cx
    4a04:	1e 00 78    	mov.w     [w14], w0
    4a06:	30 00 90    	mov.w     [w0+6], w0
    4a08:	9e 00 78    	mov.w     [w14], w1
    4a0a:	b1 00 90    	mov.w     [w1+6], w1
    4a0c:	91 00 78    	mov.w     [w1], w1
    4a0e:	01 00 a0    	bset.w    w1, #0x0
    4a10:	01 08 78    	mov.w     w1, [w0]

00004a12 <.LSM53>:
    while (bitread(self->I2CxCON, 0)==1) {}     // Wait until Start condition
    4a12:	00 00 00    	nop       

00004a14 <.L17>:
    4a14:	1e 00 78    	mov.w     [w14], w0
    4a16:	30 00 90    	mov.w     [w0+6], w0
    4a18:	10 00 78    	mov.w     [w0], w0
    4a1a:	61 00 60    	and.w     w0, #0x1, w0
    4a1c:	00 40 78    	mov.b     w0, w0
    4a1e:	00 04 e0    	cp0.b     w0
    4a20:	f9 ff 3a    	bra       NZ, 0x4a14 <.L17>

00004a22 <.LSM54>:
                                                //   clears
}
    4a22:	00 80 fa    	ulnk      
    4a24:	00 00 06    	return    

00004a26 <_i2c_restart>:

void i2c_restart(_I2C *self) {
    4a26:	02 00 fa    	lnk       #0x2
    4a28:	00 0f 78    	mov.w     w0, [w14]

00004a2a <.LSM56>:
    bitset(self->I2CxCON, 1);   // Initiate a Repeated Start condition on I2Cx
    4a2a:	1e 00 78    	mov.w     [w14], w0
    4a2c:	30 00 90    	mov.w     [w0+6], w0
    4a2e:	9e 00 78    	mov.w     [w14], w1
    4a30:	b1 00 90    	mov.w     [w1+6], w1
    4a32:	91 00 78    	mov.w     [w1], w1
    4a34:	01 10 a0    	bset.w    w1, #0x1
    4a36:	01 08 78    	mov.w     w1, [w0]

00004a38 <.LSM57>:
    while (bitread(self->I2CxCON, 1)==1) {}     // Wait until Repeated Start
    4a38:	00 00 00    	nop       

00004a3a <.L19>:
    4a3a:	1e 00 78    	mov.w     [w14], w0
    4a3c:	30 00 90    	mov.w     [w0+6], w0
    4a3e:	10 00 78    	mov.w     [w0], w0
    4a40:	62 00 60    	and.w     w0, #0x2, w0
    4a42:	00 00 e0    	cp0.w     w0
    4a44:	fa ff 3a    	bra       NZ, 0x4a3a <.L19>

00004a46 <.LSM58>:
                                                //   condition clears
}
    4a46:	00 80 fa    	ulnk      
    4a48:	00 00 06    	return    

00004a4a <_i2c_ack>:

void i2c_ack(_I2C *self) {
    4a4a:	02 00 fa    	lnk       #0x2
    4a4c:	00 0f 78    	mov.w     w0, [w14]

00004a4e <.LSM60>:
    bitclear(self->I2CxCON, 5); // Send ACK during Acknowledge
    4a4e:	1e 00 78    	mov.w     [w14], w0
    4a50:	30 00 90    	mov.w     [w0+6], w0
    4a52:	9e 00 78    	mov.w     [w14], w1
    4a54:	b1 00 90    	mov.w     [w1+6], w1
    4a56:	11 01 78    	mov.w     [w1], w2
    4a58:	f1 fd 2f    	mov.w     #0xffdf, w1
    4a5a:	81 00 61    	and.w     w2, w1, w1
    4a5c:	01 08 78    	mov.w     w1, [w0]

00004a5e <.LSM61>:
    bitset(self->I2CxCON, 4);   // Initiate an Acknowledge condition on I2Cx
    4a5e:	1e 00 78    	mov.w     [w14], w0
    4a60:	30 00 90    	mov.w     [w0+6], w0
    4a62:	9e 00 78    	mov.w     [w14], w1
    4a64:	b1 00 90    	mov.w     [w1+6], w1
    4a66:	91 00 78    	mov.w     [w1], w1
    4a68:	01 40 a0    	bset.w    w1, #0x4
    4a6a:	01 08 78    	mov.w     w1, [w0]

00004a6c <.LSM62>:
    while (bitread(self->I2CxCON, 4)==1) {}     // Wait until Acknowledge
    4a6c:	00 00 00    	nop       

00004a6e <.L21>:
    4a6e:	1e 00 78    	mov.w     [w14], w0
    4a70:	30 00 90    	mov.w     [w0+6], w0
    4a72:	10 00 78    	mov.w     [w0], w0
    4a74:	70 00 60    	and.w     w0, #0x10, w0
    4a76:	00 00 e0    	cp0.w     w0
    4a78:	fa ff 3a    	bra       NZ, 0x4a6e <.L21>

00004a7a <.LSM63>:
                                                //   condition clears
}
    4a7a:	00 80 fa    	ulnk      
    4a7c:	00 00 06    	return    

00004a7e <_i2c_nak>:

void i2c_nak(_I2C *self) {
    4a7e:	02 00 fa    	lnk       #0x2
    4a80:	00 0f 78    	mov.w     w0, [w14]

00004a82 <.LSM65>:
    bitset(self->I2CxCON, 5);   // Send NACK during Acknowledge
    4a82:	1e 00 78    	mov.w     [w14], w0
    4a84:	30 00 90    	mov.w     [w0+6], w0
    4a86:	9e 00 78    	mov.w     [w14], w1
    4a88:	b1 00 90    	mov.w     [w1+6], w1
    4a8a:	11 01 78    	mov.w     [w1], w2
    4a8c:	01 02 20    	mov.w     #0x20, w1
    4a8e:	82 80 70    	ior.w     w1, w2, w1
    4a90:	01 08 78    	mov.w     w1, [w0]

00004a92 <.LSM66>:
    bitset(self->I2CxCON, 4);   // Initiate an Acknowldege condition on I2Cx
    4a92:	1e 00 78    	mov.w     [w14], w0
    4a94:	30 00 90    	mov.w     [w0+6], w0
    4a96:	9e 00 78    	mov.w     [w14], w1
    4a98:	b1 00 90    	mov.w     [w1+6], w1
    4a9a:	91 00 78    	mov.w     [w1], w1
    4a9c:	01 40 a0    	bset.w    w1, #0x4
    4a9e:	01 08 78    	mov.w     w1, [w0]

00004aa0 <.LSM67>:
    while (bitread(self->I2CxCON, 4)==1) {}     // Wait until Acknowledge
    4aa0:	00 00 00    	nop       

00004aa2 <.L23>:
    4aa2:	1e 00 78    	mov.w     [w14], w0
    4aa4:	30 00 90    	mov.w     [w0+6], w0
    4aa6:	10 00 78    	mov.w     [w0], w0
    4aa8:	70 00 60    	and.w     w0, #0x10, w0
    4aaa:	00 00 e0    	cp0.w     w0
    4aac:	fa ff 3a    	bra       NZ, 0x4aa2 <.L23>

00004aae <.LSM68>:
                                                //   condition clears
}
    4aae:	00 80 fa    	ulnk      
    4ab0:	00 00 06    	return    

00004ab2 <_i2c_stop>:

void i2c_stop(_I2C *self) {
    4ab2:	02 00 fa    	lnk       #0x2
    4ab4:	00 0f 78    	mov.w     w0, [w14]

00004ab6 <.LSM70>:
    bitset(self->I2CxCON, 2);   // Initiate a Stop condition on I2Cx
    4ab6:	1e 00 78    	mov.w     [w14], w0
    4ab8:	30 00 90    	mov.w     [w0+6], w0
    4aba:	9e 00 78    	mov.w     [w14], w1
    4abc:	b1 00 90    	mov.w     [w1+6], w1
    4abe:	91 00 78    	mov.w     [w1], w1
    4ac0:	01 20 a0    	bset.w    w1, #0x2
    4ac2:	01 08 78    	mov.w     w1, [w0]

00004ac4 <.LSM71>:
    while (bitread(self->I2CxCON, 2)==1) {}     // Wait until Stop condition
    4ac4:	00 00 00    	nop       

00004ac6 <.L25>:
    4ac6:	1e 00 78    	mov.w     [w14], w0
    4ac8:	30 00 90    	mov.w     [w0+6], w0
    4aca:	10 00 78    	mov.w     [w0], w0
    4acc:	64 00 60    	and.w     w0, #0x4, w0
    4ace:	00 00 e0    	cp0.w     w0
    4ad0:	fa ff 3a    	bra       NZ, 0x4ac6 <.L25>

00004ad2 <.LSM72>:
                                                //   clears
}
    4ad2:	00 80 fa    	ulnk      
    4ad4:	00 00 06    	return    

00004ad6 <_i2c_idle>:

void i2c_idle(_I2C *self) {
    4ad6:	02 00 fa    	lnk       #0x2
    4ad8:	00 0f 78    	mov.w     w0, [w14]

00004ada <.LSM74>:
    while (((*(self->I2CxCON))&0x1F) ||         // Wait until Start, Restart, 
    4ada:	00 00 00    	nop       

00004adc <.L27>:
    4adc:	1e 00 78    	mov.w     [w14], w0
    4ade:	30 00 90    	mov.w     [w0+6], w0
    4ae0:	10 00 78    	mov.w     [w0], w0
    4ae2:	7f 00 60    	and.w     w0, #0x1f, w0
    4ae4:	00 00 e0    	cp0.w     w0
    4ae6:	fa ff 3a    	bra       NZ, 0x4adc <.L27>

00004ae8 <.LSM75>:
           (bitread(self->I2CxSTAT, 14)==1)) {} //   Stop, Receive, Acknowledge, 
    4ae8:	1e 00 78    	mov.w     [w14], w0
    4aea:	40 00 90    	mov.w     [w0+8], w0
    4aec:	90 00 78    	mov.w     [w0], w1
    4aee:	00 00 24    	mov.w     #0x4000, w0
    4af0:	00 80 60    	and.w     w1, w0, w0

00004af2 <.LSM76>:
    4af2:	00 00 e0    	cp0.w     w0
    4af4:	f3 ff 3a    	bra       NZ, 0x4adc <.L27>

00004af6 <.LSM77>:
                                                //   and Transmit conditions
                                                //   are all clear on I2Cx
}
    4af6:	00 80 fa    	ulnk      
    4af8:	00 00 06    	return    

00004afa <_i2c_putc>:

uint8_t i2c_putc(_I2C *self, uint8_t ch) {
    4afa:	04 00 fa    	lnk       #0x4
    4afc:	00 0f 78    	mov.w     w0, [w14]
    4afe:	21 47 98    	mov.b     w1, [w14+2]

00004b00 <.LSM79>:
    bitclear(self->IFSy, self->MI2CxIF);    // Lower master I2Cx interrupt flag
    4b00:	1e 00 78    	mov.w     [w14], w0
    4b02:	70 00 90    	mov.w     [w0+14], w0
    4b04:	9e 00 78    	mov.w     [w14], w1
    4b06:	f1 00 90    	mov.w     [w1+14], w1
    4b08:	11 01 78    	mov.w     [w1], w2
    4b0a:	9e 00 78    	mov.w     [w14], w1
    4b0c:	81 50 90    	mov.b     [w1+16], w1
    4b0e:	81 80 fb    	ze        w1, w1
    4b10:	13 00 20    	mov.w     #0x1, w3
    4b12:	81 18 dd    	sl.w      w3, w1, w1
    4b14:	81 80 ea    	com.w     w1, w1
    4b16:	81 00 61    	and.w     w2, w1, w1
    4b18:	01 08 78    	mov.w     w1, [w0]

00004b1a <.LSM80>:
    *(self->I2CxTRN) = (uint16_t)ch;        // Initiate I2Cx data transmission
    4b1a:	1e 00 78    	mov.w     [w14], w0
    4b1c:	10 00 90    	mov.w     [w0+2], w0
    4b1e:	ae 40 90    	mov.b     [w14+2], w1
    4b20:	81 80 fb    	ze        w1, w1
    4b22:	01 08 78    	mov.w     w1, [w0]

00004b24 <.LSM81>:
    while (bitread(self->I2CxSTAT, 0)==1) {}    // Wait until tranmit completes 
    4b24:	00 00 00    	nop       

00004b26 <.L29>:
    4b26:	1e 00 78    	mov.w     [w14], w0
    4b28:	40 00 90    	mov.w     [w0+8], w0
    4b2a:	10 00 78    	mov.w     [w0], w0
    4b2c:	61 00 60    	and.w     w0, #0x1, w0
    4b2e:	00 40 78    	mov.b     w0, w0
    4b30:	00 04 e0    	cp0.b     w0
    4b32:	f9 ff 3a    	bra       NZ, 0x4b26 <.L29>

00004b34 <.LSM82>:
                                                //   (8 clock cycles on SCLx)
    while (bitread(self->IFSy, self->MI2CxIF)==0) {}    // Wait for 9th clock
    4b34:	00 00 00    	nop       

00004b36 <.L30>:
    4b36:	1e 00 78    	mov.w     [w14], w0
    4b38:	70 00 90    	mov.w     [w0+14], w0
    4b3a:	90 00 78    	mov.w     [w0], w1
    4b3c:	1e 00 78    	mov.w     [w14], w0
    4b3e:	00 50 90    	mov.b     [w0+16], w0
    4b40:	00 80 fb    	ze        w0, w0
    4b42:	12 00 20    	mov.w     #0x1, w2
    4b44:	00 10 dd    	sl.w      w2, w0, w0
    4b46:	00 80 60    	and.w     w1, w0, w0
    4b48:	00 00 e0    	cp0.w     w0
    4b4a:	f5 ff 32    	bra       Z, 0x4b36 <.L30>

00004b4c <.LSM83>:
                                                        //   cycle on SCLx
    bitclear(self->IFSy, self->MI2CxIF);    // Lower master I2Cx interrupt flag
    4b4c:	1e 00 78    	mov.w     [w14], w0
    4b4e:	70 00 90    	mov.w     [w0+14], w0
    4b50:	9e 00 78    	mov.w     [w14], w1
    4b52:	f1 00 90    	mov.w     [w1+14], w1
    4b54:	11 01 78    	mov.w     [w1], w2
    4b56:	9e 00 78    	mov.w     [w14], w1
    4b58:	81 50 90    	mov.b     [w1+16], w1
    4b5a:	81 80 fb    	ze        w1, w1
    4b5c:	13 00 20    	mov.w     #0x1, w3
    4b5e:	81 18 dd    	sl.w      w3, w1, w1
    4b60:	81 80 ea    	com.w     w1, w1
    4b62:	81 00 61    	and.w     w2, w1, w1
    4b64:	01 08 78    	mov.w     w1, [w0]

00004b66 <.LSM84>:
    return bitread(self->I2CxSTAT, 15);     // Return ACKSTAT bit of I2CxSTAT
    4b66:	1e 00 78    	mov.w     [w14], w0
    4b68:	40 00 90    	mov.w     [w0+8], w0
    4b6a:	10 00 78    	mov.w     [w0], w0
    4b6c:	4f 00 de    	lsr.w     w0, #0xf, w0
    4b6e:	00 40 78    	mov.b     w0, w0

00004b70 <.LSM85>:
}
    4b70:	00 80 fa    	ulnk      
    4b72:	00 00 06    	return    

00004b74 <_i2c_getc>:

uint8_t i2c_getc(_I2C *self) {
    4b74:	02 00 fa    	lnk       #0x2
    4b76:	00 0f 78    	mov.w     w0, [w14]

00004b78 <.LSM87>:
    bitset(self->I2CxCON, 3);       // Initiate a Receive on I2Cx
    4b78:	1e 00 78    	mov.w     [w14], w0
    4b7a:	30 00 90    	mov.w     [w0+6], w0
    4b7c:	9e 00 78    	mov.w     [w14], w1
    4b7e:	b1 00 90    	mov.w     [w1+6], w1
    4b80:	91 00 78    	mov.w     [w1], w1
    4b82:	01 30 a0    	bset.w    w1, #0x3
    4b84:	01 08 78    	mov.w     w1, [w0]

00004b86 <.LSM88>:
    while (bitread(self->I2CxCON, 3)==1) {}     // Wait until Receive condition 
    4b86:	00 00 00    	nop       

00004b88 <.L32>:
    4b88:	1e 00 78    	mov.w     [w14], w0
    4b8a:	30 00 90    	mov.w     [w0+6], w0
    4b8c:	10 00 78    	mov.w     [w0], w0
    4b8e:	68 00 60    	and.w     w0, #0x8, w0
    4b90:	00 00 e0    	cp0.w     w0
    4b92:	fa ff 3a    	bra       NZ, 0x4b88 <.L32>

00004b94 <.LSM89>:
                                                //   clears on I2Cx
    bitclear(self->I2CxSTAT, 6);                // Clear I2COV bit
    4b94:	1e 00 78    	mov.w     [w14], w0
    4b96:	40 00 90    	mov.w     [w0+8], w0
    4b98:	9e 00 78    	mov.w     [w14], w1
    4b9a:	c1 00 90    	mov.w     [w1+8], w1
    4b9c:	11 01 78    	mov.w     [w1], w2
    4b9e:	f1 fb 2f    	mov.w     #0xffbf, w1
    4ba0:	81 00 61    	and.w     w2, w1, w1
    4ba2:	01 08 78    	mov.w     w1, [w0]

00004ba4 <.LSM90>:
    return (uint8_t)(*(self->I2CxRCV));         // Return the received byte
    4ba4:	1e 00 78    	mov.w     [w14], w0
    4ba6:	10 00 78    	mov.w     [w0], w0
    4ba8:	10 00 78    	mov.w     [w0], w0
    4baa:	00 40 78    	mov.b     w0, w0

00004bac <.LSM91>:
}
    4bac:	00 80 fa    	ulnk      
    4bae:	00 00 06    	return    

00004bb0 <_VendorRequests>:
uint8_t rocketstuff[64], rec_msg[64];
uint8_t cmd, value;
uint16_t val1, val2;

void VendorRequests(void) {
    4bb0:	06 00 fa    	lnk       #0x6

00004bb2 <.LSM1>:
    disable_interrupts();
    4bb2:	ff 3f fc    	disi      #0x3fff

00004bb4 <.LSM2>:
    WORD temp;
    WORD32 temp32;
    switch (USB_setup.bRequest) {
    4bb4:	40 85 20    	mov.w     #0x854, w0
    4bb6:	10 40 90    	mov.b     [w0+1], w0
    4bb8:	00 80 fb    	ze        w0, w0
    4bba:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4bbc:	53 00 32    	bra       Z, 0x4c64 <.L4>
    4bbe:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4bc0:	03 00 3c    	bra       GT, 0x4bc8 <.L7>
    4bc2:	00 00 e0    	cp0.w     w0
    4bc4:	06 00 32    	bra       Z, 0x4bd2 <.L3>
    4bc6:	96 00 37    	bra       0x4cf4 <.L2>

00004bc8 <.L7>:
    4bc8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4bca:	0a 00 32    	bra       Z, 0x4be0 <.L5>
    4bcc:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    4bce:	6e 00 32    	bra       Z, 0x4cac <.L6>
    4bd0:	91 00 37    	bra       0x4cf4 <.L2>

00004bd2 <.L3>:
    case SET_STATE:
        // state = USB_setup.wValue.w;
        BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0
    4bd2:	40 e0 21    	mov.w     #0x1e04, w0
    4bd4:	80 40 eb    	clr.b     w1
    4bd6:	01 48 78    	mov.b     w1, [w0]

00004bd8 <.LSM4>:
        BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4bd8:	50 e0 21    	mov.w     #0x1e05, w0
    4bda:	81 cc b3    	mov.b     #0xc8, w1
    4bdc:	01 48 78    	mov.b     w1, [w0]

00004bde <.LSM5>:
        break;
    4bde:	8d 00 37    	bra       0x4cfa <.L8>

00004be0 <.L5>:
    case DEBUG_UART_BUFFERS:
        temp.w = uart1.TXbuffer.head;
    4be0:	d0 44 80    	mov.w     0x89a, w0
    4be2:	00 0f 78    	mov.w     w0, [w14]

00004be4 <.LSM7>:
        BD[EP0IN].address[0] = temp.b[0];
    4be4:	30 f0 80    	mov.w     0x1e06, w0
    4be6:	9e 40 78    	mov.b     [w14], w1
    4be8:	01 48 78    	mov.b     w1, [w0]

00004bea <.LSM8>:
        BD[EP0IN].address[1] = temp.b[1];
    4bea:	30 f0 80    	mov.w     0x1e06, w0
    4bec:	00 00 e8    	inc.w     w0, w0
    4bee:	9e 40 90    	mov.b     [w14+1], w1
    4bf0:	01 48 78    	mov.b     w1, [w0]

00004bf2 <.LSM9>:
        temp.w = uart1.TXbuffer.tail;
    4bf2:	e0 44 80    	mov.w     0x89c, w0
    4bf4:	00 0f 78    	mov.w     w0, [w14]

00004bf6 <.LSM10>:
        BD[EP0IN].address[2] = temp.b[0];
    4bf6:	30 f0 80    	mov.w     0x1e06, w0
    4bf8:	00 80 e8    	inc2.w    w0, w0
    4bfa:	9e 40 78    	mov.b     [w14], w1
    4bfc:	01 48 78    	mov.b     w1, [w0]

00004bfe <.LSM11>:
        BD[EP0IN].address[3] = temp.b[1];
    4bfe:	30 f0 80    	mov.w     0x1e06, w0
    4c00:	63 00 40    	add.w     w0, #0x3, w0
    4c02:	9e 40 90    	mov.b     [w14+1], w1
    4c04:	01 48 78    	mov.b     w1, [w0]

00004c06 <.LSM12>:
        temp.w = uart1.TXbuffer.count;
    4c06:	f0 44 80    	mov.w     0x89e, w0
    4c08:	00 0f 78    	mov.w     w0, [w14]

00004c0a <.LSM13>:
        BD[EP0IN].address[4] = temp.b[0];
    4c0a:	30 f0 80    	mov.w     0x1e06, w0
    4c0c:	64 00 40    	add.w     w0, #0x4, w0
    4c0e:	9e 40 78    	mov.b     [w14], w1
    4c10:	01 48 78    	mov.b     w1, [w0]

00004c12 <.LSM14>:
        BD[EP0IN].address[5] = temp.b[1];
    4c12:	30 f0 80    	mov.w     0x1e06, w0
    4c14:	65 00 40    	add.w     w0, #0x5, w0
    4c16:	9e 40 90    	mov.b     [w14+1], w1
    4c18:	01 48 78    	mov.b     w1, [w0]

00004c1a <.LSM15>:

        temp.w = uart1.RXbuffer.head;
    4c1a:	20 45 80    	mov.w     0x8a4, w0
    4c1c:	00 0f 78    	mov.w     w0, [w14]

00004c1e <.LSM16>:
        BD[EP0IN].address[6] = temp.b[0];
    4c1e:	30 f0 80    	mov.w     0x1e06, w0
    4c20:	66 00 40    	add.w     w0, #0x6, w0
    4c22:	9e 40 78    	mov.b     [w14], w1
    4c24:	01 48 78    	mov.b     w1, [w0]

00004c26 <.LSM17>:
        BD[EP0IN].address[7] = temp.b[1];
    4c26:	30 f0 80    	mov.w     0x1e06, w0
    4c28:	67 00 40    	add.w     w0, #0x7, w0
    4c2a:	9e 40 90    	mov.b     [w14+1], w1
    4c2c:	01 48 78    	mov.b     w1, [w0]

00004c2e <.LSM18>:
        temp.w = uart1.RXbuffer.tail;
    4c2e:	30 45 80    	mov.w     0x8a6, w0
    4c30:	00 0f 78    	mov.w     w0, [w14]

00004c32 <.LSM19>:
        BD[EP0IN].address[8] = temp.b[0];
    4c32:	30 f0 80    	mov.w     0x1e06, w0
    4c34:	68 00 40    	add.w     w0, #0x8, w0
    4c36:	9e 40 78    	mov.b     [w14], w1
    4c38:	01 48 78    	mov.b     w1, [w0]

00004c3a <.LSM20>:
        BD[EP0IN].address[9] = temp.b[1];
    4c3a:	30 f0 80    	mov.w     0x1e06, w0
    4c3c:	69 00 40    	add.w     w0, #0x9, w0
    4c3e:	9e 40 90    	mov.b     [w14+1], w1
    4c40:	01 48 78    	mov.b     w1, [w0]

00004c42 <.LSM21>:
        temp.w = uart1.RXbuffer.count;
    4c42:	40 45 80    	mov.w     0x8a8, w0
    4c44:	00 0f 78    	mov.w     w0, [w14]

00004c46 <.LSM22>:
        BD[EP0IN].address[10] = temp.b[0];
    4c46:	30 f0 80    	mov.w     0x1e06, w0
    4c48:	6a 00 40    	add.w     w0, #0xa, w0
    4c4a:	9e 40 78    	mov.b     [w14], w1
    4c4c:	01 48 78    	mov.b     w1, [w0]

00004c4e <.LSM23>:
        BD[EP0IN].address[11] = temp.b[1];
    4c4e:	30 f0 80    	mov.w     0x1e06, w0
    4c50:	6b 00 40    	add.w     w0, #0xb, w0
    4c52:	9e 40 90    	mov.b     [w14+1], w1
    4c54:	01 48 78    	mov.b     w1, [w0]

00004c56 <.LSM24>:
        BD[EP0IN].bytecount = 12;    // set EP0 IN byte count to 4
    4c56:	40 e0 21    	mov.w     #0x1e04, w0
    4c58:	c1 c0 b3    	mov.b     #0xc, w1
    4c5a:	01 48 78    	mov.b     w1, [w0]

00004c5c <.LSM25>:
        BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4c5c:	50 e0 21    	mov.w     #0x1e05, w0
    4c5e:	81 cc b3    	mov.b     #0xc8, w1
    4c60:	01 48 78    	mov.b     w1, [w0]

00004c62 <.LSM26>:
        break;
    4c62:	4b 00 37    	bra       0x4cfa <.L8>

00004c64 <.L4>:
    case GET_ROCKET_INFO:
        temp.w = rocket_tilt;
    4c64:	30 43 80    	mov.w     0x866, w0
    4c66:	00 0f 78    	mov.w     w0, [w14]

00004c68 <.LSM28>:
        BD[EP0IN].address[0] = temp.b[0];
    4c68:	30 f0 80    	mov.w     0x1e06, w0
    4c6a:	9e 40 78    	mov.b     [w14], w1
    4c6c:	01 48 78    	mov.b     w1, [w0]

00004c6e <.LSM29>:
        BD[EP0IN].address[1] = temp.b[1];
    4c6e:	30 f0 80    	mov.w     0x1e06, w0
    4c70:	00 00 e8    	inc.w     w0, w0
    4c72:	9e 40 90    	mov.b     [w14+1], w1
    4c74:	01 48 78    	mov.b     w1, [w0]

00004c76 <.LSM30>:
        temp.w = rocket_speed;
    4c76:	20 43 80    	mov.w     0x864, w0
    4c78:	00 0f 78    	mov.w     w0, [w14]

00004c7a <.LSM31>:
        BD[EP0IN].address[2] = temp.b[0];
    4c7a:	30 f0 80    	mov.w     0x1e06, w0
    4c7c:	00 80 e8    	inc2.w    w0, w0
    4c7e:	9e 40 78    	mov.b     [w14], w1
    4c80:	01 48 78    	mov.b     w1, [w0]

00004c82 <.LSM32>:
        BD[EP0IN].address[3] = temp.b[1];
    4c82:	30 f0 80    	mov.w     0x1e06, w0
    4c84:	63 00 40    	add.w     w0, #0x3, w0
    4c86:	9e 40 90    	mov.b     [w14+1], w1
    4c88:	01 48 78    	mov.b     w1, [w0]

00004c8a <.LSM33>:
        temp.w = rocket_state;
    4c8a:	10 43 80    	mov.w     0x862, w0
    4c8c:	00 0f 78    	mov.w     w0, [w14]

00004c8e <.LSM34>:
        BD[EP0IN].address[4] = temp.b[0];
    4c8e:	30 f0 80    	mov.w     0x1e06, w0
    4c90:	64 00 40    	add.w     w0, #0x4, w0
    4c92:	9e 40 78    	mov.b     [w14], w1
    4c94:	01 48 78    	mov.b     w1, [w0]

00004c96 <.LSM35>:
        BD[EP0IN].address[5] = temp.b[1];
    4c96:	30 f0 80    	mov.w     0x1e06, w0
    4c98:	65 00 40    	add.w     w0, #0x5, w0
    4c9a:	9e 40 90    	mov.b     [w14+1], w1
    4c9c:	01 48 78    	mov.b     w1, [w0]

00004c9e <.LSM36>:
        BD[EP0IN].bytecount = 6;    // set EP0 IN byte count to 4
    4c9e:	40 e0 21    	mov.w     #0x1e04, w0
    4ca0:	61 c0 b3    	mov.b     #0x6, w1
    4ca2:	01 48 78    	mov.b     w1, [w0]

00004ca4 <.LSM37>:
        BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4ca4:	50 e0 21    	mov.w     #0x1e05, w0
    4ca6:	81 cc b3    	mov.b     #0xc8, w1
    4ca8:	01 48 78    	mov.b     w1, [w0]

00004caa <.LSM38>:
        break;
    4caa:	27 00 37    	bra       0x4cfa <.L8>

00004cac <.L6>:
    case GET_QUAD_INFO:
        temp32.ul = quad1.counter;
    4cac:	10 ee 80    	mov.w     0x1dc2, w0
    4cae:	21 ee 80    	mov.w     0x1dc4, w1
    4cb0:	10 07 98    	mov.w     w0, [w14+2]
    4cb2:	21 07 98    	mov.w     w1, [w14+4]

00004cb4 <.LSM40>:
        BD[EP0IN].address[0] = temp32.b[0];
    4cb4:	30 f0 80    	mov.w     0x1e06, w0
    4cb6:	ae 40 90    	mov.b     [w14+2], w1
    4cb8:	01 48 78    	mov.b     w1, [w0]

00004cba <.LSM41>:
        BD[EP0IN].address[1] = temp32.b[1];
    4cba:	30 f0 80    	mov.w     0x1e06, w0
    4cbc:	00 00 e8    	inc.w     w0, w0
    4cbe:	be 40 90    	mov.b     [w14+3], w1
    4cc0:	01 48 78    	mov.b     w1, [w0]

00004cc2 <.LSM42>:
        BD[EP0IN].address[2] = temp32.b[2];
    4cc2:	30 f0 80    	mov.w     0x1e06, w0
    4cc4:	00 80 e8    	inc2.w    w0, w0
    4cc6:	ce 40 90    	mov.b     [w14+4], w1
    4cc8:	01 48 78    	mov.b     w1, [w0]

00004cca <.LSM43>:
        BD[EP0IN].address[3] = temp32.b[3];
    4cca:	30 f0 80    	mov.w     0x1e06, w0
    4ccc:	63 00 40    	add.w     w0, #0x3, w0
    4cce:	de 40 90    	mov.b     [w14+5], w1
    4cd0:	01 48 78    	mov.b     w1, [w0]

00004cd2 <.LSM44>:
        temp.w = quad1.overflow;
    4cd2:	30 ee 80    	mov.w     0x1dc6, w0
    4cd4:	00 0f 78    	mov.w     w0, [w14]

00004cd6 <.LSM45>:
        BD[EP0IN].address[4] = temp.b[0];
    4cd6:	30 f0 80    	mov.w     0x1e06, w0
    4cd8:	64 00 40    	add.w     w0, #0x4, w0
    4cda:	9e 40 78    	mov.b     [w14], w1
    4cdc:	01 48 78    	mov.b     w1, [w0]

00004cde <.LSM46>:
        BD[EP0IN].address[5] = temp.b[1];
    4cde:	30 f0 80    	mov.w     0x1e06, w0
    4ce0:	65 00 40    	add.w     w0, #0x5, w0
    4ce2:	9e 40 90    	mov.b     [w14+1], w1
    4ce4:	01 48 78    	mov.b     w1, [w0]

00004ce6 <.LSM47>:
        BD[EP0IN].bytecount = 6;    // set EP0 IN byte count to 4
    4ce6:	40 e0 21    	mov.w     #0x1e04, w0
    4ce8:	61 c0 b3    	mov.b     #0x6, w1
    4cea:	01 48 78    	mov.b     w1, [w0]

00004cec <.LSM48>:
        BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4cec:	50 e0 21    	mov.w     #0x1e05, w0
    4cee:	81 cc b3    	mov.b     #0xc8, w1
    4cf0:	01 48 78    	mov.b     w1, [w0]

00004cf2 <.LSM49>:
        break;
    4cf2:	03 00 37    	bra       0x4cfa <.L8>

00004cf4 <.L2>:
    default:
        USB_error_flags |= 0x01;    // set Request Error Flag
    4cf4:	5c c8 bf    	mov.b     0x85c, WREG
    4cf6:	00 04 a0    	bset.b    w0, #0x0
    4cf8:	5c e8 b7    	mov.b     WREG, 0x85c

00004cfa <.L8>:
    }
    enable_interrupts();
    4cfa:	52 20 ef    	clr.w     0x52

00004cfc <.LSM52>:
}
    4cfc:	00 80 fa    	ulnk      
    4cfe:	00 00 06    	return    

00004d00 <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    4d00:	00 00 fa    	lnk       #0x0

00004d02 <.LSM54>:
    switch (USB_request.setup.bRequest) {
    default:
        USB_error_flags |= 0x01;                    // set Request Error Flag
    4d02:	5c c8 bf    	mov.b     0x85c, WREG
    4d04:	00 04 a0    	bset.b    w0, #0x0
    4d06:	5c e8 b7    	mov.b     WREG, 0x85c

00004d08 <.LSM55>:
    }
}
    4d08:	00 80 fa    	ulnk      
    4d0a:	00 00 06    	return    

00004d0c <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    4d0c:	00 00 fa    	lnk       #0x0

00004d0e <.LSM57>:
    switch (USB_request.setup.bRequest) {
    default:
        USB_error_flags |= 0x01;                    // set Request Error Flag
    4d0e:	5c c8 bf    	mov.b     0x85c, WREG
    4d10:	00 04 a0    	bset.b    w0, #0x0
    4d12:	5c e8 b7    	mov.b     WREG, 0x85c

00004d14 <.LSM58>:
    }
}
    4d14:	00 80 fa    	ulnk      
    4d16:	00 00 06    	return    

00004d18 <_UARTrequests>:


void UARTrequests() {
    4d18:	04 00 fa    	lnk       #0x4

00004d1a <.LSM60>:
    uart_gets(&uart1, rec_msg, 64);
    4d1a:	02 04 20    	mov.w     #0x40, w2
    4d1c:	81 a2 21    	mov.w     #0x1a28, w1
    4d1e:	40 87 20    	mov.w     #0x874, w0
    4d20:	8e f1 07    	rcall     0x303e <_uart_gets>

00004d22 <.LSM61>:
    uint32_t decoded_msg = (uint32_t)strtol(rec_msg, NULL, 16);
    4d22:	80 a2 21    	mov.w     #0x1a28, w0
    4d24:	02 01 20    	mov.w     #0x10, w2
    4d26:	80 00 eb    	clr.w     w1
    4d28:	4d e4 07    	rcall     0x15c4 <_strtol>
    4d2a:	00 8f be    	mov.d     w0, [w14]

00004d2c <.LSM62>:
    cmd = decoded_msg & 0x0f;
    4d2c:	1e 00 78    	mov.w     [w14], w0
    4d2e:	00 40 78    	mov.b     w0, w0
    4d30:	6f 40 60    	and.b     w0, #0xf, w0
    4d32:	6a e8 b7    	mov.b     WREG, 0x86a

00004d34 <.LSM63>:
    value = (decoded_msg & 0xf0) >> 4;
    4d34:	00 0f 20    	mov.w     #0xf0, w0
    4d36:	01 00 20    	mov.w     #0x0, w1
    4d38:	1e 01 be    	mov.d     [w14], w2
    4d3a:	02 02 78    	mov.w     w2, w4
    4d3c:	03 01 78    	mov.w     w3, w2
    4d3e:	80 01 78    	mov.w     w0, w3
    4d40:	01 00 78    	mov.w     w1, w0
    4d42:	03 02 62    	and.w     w4, w3, w4
    4d44:	00 00 61    	and.w     w2, w0, w0
    4d46:	80 00 eb    	clr.w     w1
    4d48:	c0 00 dd    	sl.w      w0, #0x0, w1
    4d4a:	00 00 20    	mov.w     #0x0, w0
    4d4c:	00 01 be    	mov.d     w0, w2
    4d4e:	61 20 b8    	mul.uu    w4, #0x1, w0
    4d50:	00 01 71    	ior.w     w2, w0, w2
    4d52:	81 81 71    	ior.w     w3, w1, w3
    4d54:	4c 1a dd    	sl.w      w3, #0xc, w4
    4d56:	44 10 de    	lsr.w     w2, #0x4, w0
    4d58:	00 00 72    	ior.w     w4, w0, w0
    4d5a:	c4 18 de    	lsr.w     w3, #0x4, w1
    4d5c:	00 40 78    	mov.b     w0, w0
    4d5e:	6b e8 b7    	mov.b     WREG, 0x86b

00004d60 <.LSM64>:
    switch (cmd) {
    4d60:	6a c8 bf    	mov.b     0x86a, WREG
    4d62:	00 80 fb    	ze        w0, w0
    4d64:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4d66:	13 00 32    	bra       Z, 0x4d8e <.L14>
    4d68:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4d6a:	15 00 32    	bra       Z, 0x4d96 <.L15>
    4d6c:	00 00 e0    	cp0.w     w0
    4d6e:	1d 00 3a    	bra       NZ, 0x4daa <.L11>

00004d70 <.LSM65>:
    case GET_ROCKET_VALS:
        //speed, orientation
        sprintf(rocketstuff, "%02x%02x%02x\r", rocket_speed, rocket_tilt, rocket_state);
    4d70:	13 43 80    	mov.w     0x862, w3
    4d72:	32 43 80    	mov.w     0x866, w2
    4d74:	21 43 80    	mov.w     0x864, w1
    4d76:	80 9e 21    	mov.w     #0x19e8, w0
    4d78:	83 1f 78    	mov.w     w3, [w15++]
    4d7a:	82 1f 78    	mov.w     w2, [w15++]
    4d7c:	81 1f 78    	mov.w     w1, [w15++]
    4d7e:	e1 1f 2a    	mov.w     #0xa1fe, w1
    4d80:	81 1f 78    	mov.w     w1, [w15++]
    4d82:	1f e5 07    	rcall     0x17c2 <__sprintf_cdnopuxX>
    4d84:	e8 87 57    	sub.w     w15, #0x8, w15

00004d86 <.LSM66>:
        uart_puts(&uart1, rocketstuff);
    4d86:	81 9e 21    	mov.w     #0x19e8, w1
    4d88:	40 87 20    	mov.w     #0x874, w0
    4d8a:	b4 f0 07    	rcall     0x2ef4 <_uart_puts>

00004d8c <.LSM67>:
        break;
    4d8c:	0e 00 37    	bra       0x4daa <.L11>

00004d8e <.L14>:
    case SET_ROCKET_STATE:
        rocket_state = value;
    4d8e:	6b c8 bf    	mov.b     0x86b, WREG
    4d90:	00 80 fb    	ze        w0, w0
    4d92:	10 43 88    	mov.w     w0, 0x862

00004d94 <.LSM69>:
        break;
    4d94:	0a 00 37    	bra       0x4daa <.L11>

00004d96 <.L15>:
    case SEND_ROCKET_COMMANDS:
        throttle = value & 0b01;
    4d96:	6b c8 bf    	mov.b     0x86b, WREG
    4d98:	61 40 60    	and.b     w0, #0x1, w0
    4d9a:	68 e8 b7    	mov.b     WREG, 0x868

00004d9c <.LSM71>:
        tilt = (value & 0b10) >> 1;
    4d9c:	6b c8 bf    	mov.b     0x86b, WREG
    4d9e:	00 80 fb    	ze        w0, w0
    4da0:	62 00 60    	and.w     w0, #0x2, w0
    4da2:	00 80 d1    	asr.w     w0, w0
    4da4:	00 40 78    	mov.b     w0, w0
    4da6:	69 e8 b7    	mov.b     WREG, 0x869

00004da8 <.LSM72>:
        break;
    4da8:	00 00 00    	nop       

00004daa <.L11>:
    }
}
    4daa:	00 80 fa    	ulnk      
    4dac:	00 00 06    	return    

00004dae <_setup_uart>:

void setup_uart() {
    4dae:	00 00 fa    	lnk       #0x0

00004db0 <.LSM75>:
    /*
    Configures UART for communications.
    Uses uart1 for inter-PIC communications. Rx on D[1], Tx on D[0].
    Automatically uses uart2 for stdout, stderr to PC via audio jack.
    */
    uart_open(&uart1, &D[0], &D[1], NULL, NULL, 19200., 'N', 1,
    4db0:	00 40 20    	mov.w     #0x400, w0
    4db2:	80 1f 78    	mov.w     w0, [w15++]
    4db4:	80 5e 21    	mov.w     #0x15e8, w0
    4db6:	80 1f 78    	mov.w     w0, [w15++]
    4db8:	00 40 20    	mov.w     #0x400, w0
    4dba:	80 1f 78    	mov.w     w0, [w15++]
    4dbc:	80 1e 21    	mov.w     #0x11e8, w0
    4dbe:	80 1f 78    	mov.w     w0, [w15++]
    4dc0:	00 00 eb    	clr.w     w0
    4dc2:	80 1f 78    	mov.w     w0, [w15++]
    4dc4:	10 00 20    	mov.w     #0x1, w0
    4dc6:	80 1f 78    	mov.w     w0, [w15++]
    4dc8:	e5 c4 b3    	mov.b     #0x4e, w5
    4dca:	06 00 20    	mov.w     #0x0, w6
    4dcc:	67 69 24    	mov.w     #0x4696, w7
    4dce:	00 02 eb    	clr.w     w4
    4dd0:	80 01 eb    	clr.w     w3
    4dd2:	e2 a7 21    	mov.w     #0x1a7e, w2
    4dd4:	81 a6 21    	mov.w     #0x1a68, w1
    4dd6:	40 87 20    	mov.w     #0x874, w0
    4dd8:	36 ed 07    	rcall     0x2846 <_uart_open>
    4dda:	ec 87 57    	sub.w     w15, #0xc, w15

00004ddc <.LSM76>:
              0, RC_TXBUF, 1024, RC_RXBUF, 1024);
}
    4ddc:	00 80 fa    	ulnk      
    4dde:	00 00 06    	return    

00004de0 <_setup>:

void setup() {
    4de0:	00 00 fa    	lnk       #0x0

00004de2 <.LSM78>:
    timer_setPeriod(&timer1, 1);  // Timer for LED operation/status blink
    4de2:	02 00 20    	mov.w     #0x0, w2
    4de4:	03 f8 23    	mov.w     #0x3f80, w3
    4de6:	e0 d4 21    	mov.w     #0x1d4e, w0
    4de8:	b6 f6 07    	rcall     0x3b56 <_timer_setPeriod>

00004dea <.LSM79>:
    // ** period was 0.1 for rocket-motor-control branch; if shit goes wrong, this could be a culprit
    timer_setPeriod(&timer2, 0.5);  // Timer for UART servicing
    4dea:	02 00 20    	mov.w     #0x0, w2
    4dec:	03 f0 23    	mov.w     #0x3f00, w3
    4dee:	40 d6 21    	mov.w     #0x1d64, w0
    4df0:	b2 f6 07    	rcall     0x3b56 <_timer_setPeriod>

00004df2 <.LSM80>:
    timer_setPeriod(&timer3, 0.01);
    4df2:	a2 70 2d    	mov.w     #0xd70a, w2
    4df4:	33 c2 23    	mov.w     #0x3c23, w3
    4df6:	a0 d7 21    	mov.w     #0x1d7a, w0
    4df8:	ae f6 07    	rcall     0x3b56 <_timer_setPeriod>

00004dfa <.LSM81>:
    timer_start(&timer1);
    4dfa:	e0 d4 21    	mov.w     #0x1d4e, w0
    4dfc:	7b f7 07    	rcall     0x3cf4 <_timer_start>

00004dfe <.LSM82>:
    timer_start(&timer2);
    4dfe:	40 d6 21    	mov.w     #0x1d64, w0
    4e00:	79 f7 07    	rcall     0x3cf4 <_timer_start>

00004e02 <.LSM83>:
    timer_start(&timer3);
    4e02:	a0 d7 21    	mov.w     #0x1d7a, w0
    4e04:	77 f7 07    	rcall     0x3cf4 <_timer_start>

00004e06 <.LSM84>:

    // quad_init(&quad1, &D[12], &D[13]); // quad1 uses pins D12 & D13
    // quad_every(&quad1, &timer5, 0.0000875); // quad1 will use timer5 interrupts

    // // Optional Quad Encoder Debug Pins
    // pin_digitalOut(&D[6]); // b0
    // pin_digitalOut(&D[7]); // b1
    // pin_digitalOut(&D[8]); // b2
    // pin_digitalOut(&D[9]); // b3

    // // Debug button output pins
    // pin_digitalOut(&D[11]);
    // pin_digitalOut(&D[10]);

    // // General use debugging output pin
    // pin_digitalOut(&D[2]);

    // DC MOTOR + QUAD ENCODER
    dcm_init(&dcm1, &D[10], &D[11], 1e3, 0, &oc7);
    4e06:	c5 c8 21    	mov.w     #0x1c8c, w5
    4e08:	00 42 eb    	clr.b     w4
    4e0a:	83 3e 20    	mov.w     #0x3e8, w3
    4e0c:	a2 b5 21    	mov.w     #0x1b5a, w2
    4e0e:	41 b4 21    	mov.w     #0x1b44, w1
    4e10:	40 f8 21    	mov.w     #0x1f84, w0
    4e12:	9d 04 07    	rcall     0x574e <_dcm_init>

00004e14 <.LSM85>:
    quad_init(&quad1, &D[8], &D[9]); // quad1 uses pins D12 & D13
    4e14:	e2 b2 21    	mov.w     #0x1b2e, w2
    4e16:	81 b1 21    	mov.w     #0x1b18, w1
    4e18:	c0 db 21    	mov.w     #0x1dbc, w0
    4e1a:	2e 04 07    	rcall     0x5678 <_quad_init>

00004e1c <.LSM86>:
    quad_every(&quad1, &timer5, 0.0000875); // quad1 will use timer5 interrupts
    4e1c:	42 03 28    	mov.w     #0x8034, w2
    4e1e:	73 8b 23    	mov.w     #0x38b7, w3
    4e20:	61 da 21    	mov.w     #0x1da6, w1
    4e22:	c0 db 21    	mov.w     #0x1dbc, w0
    4e24:	46 04 07    	rcall     0x56b2 <_quad_every>

00004e26 <.LSM87>:
    
    // General use debugging output pin
    pin_digitalOut(&D[2]);
    4e26:	40 a9 21    	mov.w     #0x1a94, w0
    4e28:	bd f9 07    	rcall     0x41a4 <_pin_digitalOut>

00004e2a <.LSM88>:

    setup_uart();
    4e2a:	c1 ff 07    	rcall     0x4dae <_setup_uart>

00004e2c <.LSM89>:
    throttle, tilt = 0;
    4e2c:	69 68 ef    	clr.b     0x869

00004e2e <.LSM90>:
    val1, val2 = 8;
    4e2e:	80 00 20    	mov.w     #0x8, w0
    4e30:	70 43 88    	mov.w     w0, 0x86e

00004e32 <.LSM91>:
    rocket_tilt = 15;
    4e32:	f0 00 20    	mov.w     #0xf, w0
    4e34:	30 43 88    	mov.w     w0, 0x866

00004e36 <.LSM92>:

}
    4e36:	00 80 fa    	ulnk      
    4e38:	00 00 06    	return    

00004e3a <_main>:

int16_t main(void) {
    4e3a:	04 00 fa    	lnk       #0x4

00004e3c <.LSM94>:
    // printf("Starting Rocket Controller...\r\n");
    init_clock();
    4e3c:	00 10 20    	mov.w     #0x100, w0
    4e3e:	20 3a 88    	mov.w     w0, 0x744

00004e40 <.LSM95>:
    init_ui();
    4e40:	89 01 07    	rcall     0x5154 <_init_ui>

00004e42 <.LSM96>:
    init_pin();
    4e42:	49 f8 07    	rcall     0x3ed6 <_init_pin>

00004e44 <.LSM97>:
    init_timer();
    4e44:	1d f6 07    	rcall     0x3a80 <_init_timer>

00004e46 <.LSM98>:
    init_uart();
    4e46:	c6 eb 07    	rcall     0x25d4 <_init_uart>

00004e48 <.LSM99>:
    init_quad();
    4e48:	12 04 07    	rcall     0x566e <_init_quad>

00004e4a <.LSM100>:
    init_oc();
    4e4a:	cf fa 07    	rcall     0x43ea <_init_oc>

00004e4c <.LSM101>:
    init_dcm();
    4e4c:	d2 04 07    	rcall     0x57f2 <_init_dcm>

00004e4e <.LSM102>:
    setup();
    4e4e:	c8 ff 07    	rcall     0x4de0 <_setup>

00004e50 <.LSM103>:
    // oc_pwm(&oc1, &D[4], &timer4, 3000, 32000);
    uint16_t counter = 0;
    4e50:	00 00 eb    	clr.w     w0
    4e52:	00 0f 78    	mov.w     w0, [w14]

00004e54 <.LSM104>:
    uint64_t msg;
    char is_recip = 0;
    4e54:	00 40 eb    	clr.b     w0
    4e56:	20 47 98    	mov.b     w0, [w14+2]

00004e58 <.LSM105>:


    // // Initialize motor vars/pins
    // uint16_t MOTOR_SPEED = 0xC000;
    // uint16_t MOTOR_DIR_TRACK = 0;   // tracks vert dir of rocket
    // pin_digitalOut(MOTOR_DIR);

    // uint8_t direction = 1;

    InitUSB();
    4e58:	2d f1 07    	rcall     0x30b4 <_InitUSB>

00004e5a <.LSM106>:
    U1IE = 0xFF; //setting up ISR for USB requests
    4e5a:	f0 0f 20    	mov.w     #0xff, w0
    4e5c:	60 24 88    	mov.w     w0, 0x48c

00004e5e <.LSM107>:
    U1EIE = 0xFF;
    4e5e:	f0 0f 20    	mov.w     #0xff, w0
    4e60:	80 24 88    	mov.w     w0, 0x490

00004e62 <.LSM108>:
    IFS5bits.USB1IF = 0; //flag
    4e62:	8e c0 a9    	bclr.b    0x8e, #0x6

00004e64 <.LSM109>:
    IEC5bits.USB1IE = 1; //enable
    4e64:	9e c0 a8    	bset.b    0x9e, #0x6

00004e66 <.LSM110>:

    dcm_velocity(&dcm1, 64000, 1);
    4e66:	12 c0 b3    	mov.b     #0x1, w2
    4e68:	01 a0 2f    	mov.w     #0xfa00, w1
    4e6a:	40 f8 21    	mov.w     #0x1f84, w0
    4e6c:	0e 05 07    	rcall     0x588a <_dcm_velocity>
    4e6e:	01 00 37    	bra       0x4e72 <.L22>

00004e70 <.L23>:
    while (1) {
        if (timer_flag(&timer1)) {
            // Blink green light to show normal operation.
            timer_lower(&timer1);
            led_toggle(&led2);
        }
        if (timer_flag(&timer2)) {
            timer_lower(&timer2);
            // UARTrequests();
            if (quad1.counter > 5000)
            {
                led_on(&led1);
            } else {
                led_off(&led1);
            }
        }
    }
    4e70:	00 00 00    	nop       

00004e72 <.L22>:
    4e72:	e0 d4 21    	mov.w     #0x1d4e, w0
    4e74:	5d f7 07    	rcall     0x3d30 <_timer_flag>
    4e76:	00 00 e0    	cp0.w     w0
    4e78:	04 00 32    	bra       Z, 0x4e82 <.L19>

00004e7a <.LSM113>:
    4e7a:	e0 d4 21    	mov.w     #0x1d4e, w0
    4e7c:	6a f7 07    	rcall     0x3d52 <_timer_lower>

00004e7e <.LSM114>:
    4e7e:	80 80 20    	mov.w     #0x808, w0
    4e80:	ec 01 07    	rcall     0x525a <_led_toggle>

00004e82 <.L19>:
    4e82:	40 d6 21    	mov.w     #0x1d64, w0
    4e84:	55 f7 07    	rcall     0x3d30 <_timer_flag>
    4e86:	00 00 e0    	cp0.w     w0
    4e88:	f3 ff 32    	bra       Z, 0x4e70 <.L23>

00004e8a <.LSM116>:
    4e8a:	40 d6 21    	mov.w     #0x1d64, w0
    4e8c:	62 f7 07    	rcall     0x3d52 <_timer_lower>

00004e8e <.LSM117>:
    4e8e:	12 ee 80    	mov.w     0x1dc2, w2
    4e90:	23 ee 80    	mov.w     0x1dc4, w3
    4e92:	80 38 21    	mov.w     #0x1388, w0
    4e94:	01 00 20    	mov.w     #0x0, w1
    4e96:	80 0f 51    	sub.w     w2, w0, [w15]
    4e98:	81 8f 59    	subb.w    w3, w1, [w15]
    4e9a:	03 00 36    	bra       LEU, 0x4ea2 <.L21>

00004e9c <.LSM118>:
    4e9c:	00 80 20    	mov.w     #0x800, w0
    4e9e:	bc 01 07    	rcall     0x5218 <_led_on>

00004ea0 <.LSM119>:
    4ea0:	e8 ff 37    	bra       0x4e72 <.L22>

00004ea2 <.L21>:
    4ea2:	00 80 20    	mov.w     #0x800, w0
    4ea4:	c9 01 07    	rcall     0x5238 <_led_off>

00004ea6 <.LSM121>:
    4ea6:	e5 ff 37    	bra       0x4e72 <.L22>

00004ea8 <_init_servo_driver>:

_SERVODRIVER sd1;
_SERVO orientation_servo, speed_ind_servo, fuel_ind_servo, servo0, servo1, servo2, servo3, servo4;

void init_servo_driver(_SERVODRIVER *self, _I2C *bus, float i2c_freq, uint8_t hardware_addr) {
    4ea8:	0a 00 fa    	lnk       #0xa
    4eaa:	00 0f 78    	mov.w     w0, [w14]
    4eac:	11 07 98    	mov.w     w1, [w14+2]
    4eae:	22 07 98    	mov.w     w2, [w14+4]
    4eb0:	33 07 98    	mov.w     w3, [w14+6]
    4eb2:	04 4f 98    	mov.b     w4, [w14+8]

00004eb4 <.LSM1>:
    /*
    Initializes an I2C servo driver device given an initialized _I2C object
    and its 6-bit slave hardware address, as configured on the device.
    */
    self -> bus = bus;
    4eb4:	1e 00 78    	mov.w     [w14], w0
    4eb6:	9e 00 90    	mov.w     [w14+2], w1
    4eb8:	01 08 78    	mov.w     w1, [w0]

00004eba <.LSM2>:
    self -> hardware_addr = 0x3F & (hardware_addr);
    4eba:	0e 48 90    	mov.b     [w14+8], w0
    4ebc:	f2 c3 b3    	mov.b     #0x3f, w2
    4ebe:	82 40 60    	and.b     w0, w2, w1
    4ec0:	1e 00 78    	mov.w     [w14], w0
    4ec2:	21 40 98    	mov.b     w1, [w0+2]

00004ec4 <.LSM3>:
    self -> i2c_addr = 0x40 | self -> hardware_addr; // Add preceding 1 to addr
    4ec4:	1e 00 78    	mov.w     [w14], w0
    4ec6:	a0 40 90    	mov.b     [w0+2], w1
    4ec8:	00 c4 b3    	mov.b     #0x40, w0
    4eca:	80 c0 70    	ior.b     w1, w0, w1
    4ecc:	1e 00 78    	mov.w     [w14], w0
    4ece:	31 40 98    	mov.b     w1, [w0+3]

00004ed0 <.LSM4>:
    self -> mode1 = 0b00100001; // Suggested mode configuration
    4ed0:	1e 00 78    	mov.w     [w14], w0
    4ed2:	11 c2 b3    	mov.b     #0x21, w1
    4ed4:	01 48 98    	mov.b     w1, [w0+8]

00004ed6 <.LSM5>:
    self -> i2c_freq = i2c_freq;
    4ed6:	1e 00 78    	mov.w     [w14], w0
    4ed8:	2e 01 90    	mov.w     [w14+4], w2
    4eda:	be 01 90    	mov.w     [w14+6], w3
    4edc:	22 00 98    	mov.w     w2, [w0+4]
    4ede:	33 00 98    	mov.w     w3, [w0+6]

00004ee0 <.LSM6>:
    i2c_open(self -> bus, i2c_freq); // Open I2C bus
    4ee0:	1e 00 78    	mov.w     [w14], w0
    4ee2:	10 00 78    	mov.w     [w0], w0
    4ee4:	2e 01 90    	mov.w     [w14+4], w2
    4ee6:	be 01 90    	mov.w     [w14+6], w3
    4ee8:	f4 fc 07    	rcall     0x48d2 <_i2c_open>

00004eea <.LSM7>:
}
    4eea:	00 80 fa    	ulnk      
    4eec:	00 00 06    	return    

00004eee <_close_servo_driver_i2c>:

void close_servo_driver_i2c(_SERVODRIVER *self) {
    4eee:	02 00 fa    	lnk       #0x2
    4ef0:	00 0f 78    	mov.w     w0, [w14]

00004ef2 <.LSM9>:
    /*
    Closes I2C communication object for the specified servo driver
    */
    i2c_close(self -> bus);
    4ef2:	1e 00 78    	mov.w     [w14], w0
    4ef4:	10 00 78    	mov.w     [w0], w0
    4ef6:	60 fd 07    	rcall     0x49b8 <_i2c_close>

00004ef8 <.LSM10>:
}
    4ef8:	00 80 fa    	ulnk      
    4efa:	00 00 06    	return    

00004efc <_init_servo>:

void init_servo(_SERVO *self, _SERVODRIVER *sd, uint8_t number) {
    4efc:	06 00 fa    	lnk       #0x6
    4efe:	00 0f 78    	mov.w     w0, [w14]
    4f00:	11 07 98    	mov.w     w1, [w14+2]
    4f02:	42 47 98    	mov.b     w2, [w14+4]

00004f04 <.LSM12>:
    /*
    Initializes a servo object connected to an I2C servo driver. Requires an
    object representing the controlling I2C servo driver and the servo's
    numerical address (0-16, incl.) on its controlling I2C servo driver.
    */
    self -> driver = sd;
    4f04:	1e 00 78    	mov.w     [w14], w0
    4f06:	9e 00 90    	mov.w     [w14+2], w1
    4f08:	01 08 78    	mov.w     w1, [w0]

00004f0a <.LSM13>:
    self -> num = number;
    4f0a:	1e 00 78    	mov.w     [w14], w0
    4f0c:	ce 40 90    	mov.b     [w14+4], w1
    4f0e:	21 40 98    	mov.b     w1, [w0+2]

00004f10 <.LSM14>:
}
    4f10:	00 80 fa    	ulnk      
    4f12:	00 00 06    	return    

00004f14 <_servo_driver_sleep>:


void servo_driver_sleep(_SERVODRIVER *self) {
    4f14:	04 00 fa    	lnk       #0x4
    4f16:	10 07 98    	mov.w     w0, [w14+2]

00004f18 <.LSM16>:
    /*
    Puts servo driver into low-power sleep mode (to wake, use wake()) and
    stores mode1 settings to self -> mode1 for later reinstatement on wake.
    */
    servo_driver_begin_transmission(self, I2C_READ);
    4f18:	11 c0 b3    	mov.b     #0x1, w1
    4f1a:	1e 00 90    	mov.w     [w14+2], w0
    4f1c:	e8 00 07    	rcall     0x50ee <_servo_driver_begin_transmission>

00004f1e <.LSM17>:
    self -> mode1 = servo_driver_read_register(self, PCA9685_MODE1);
    4f1e:	80 40 eb    	clr.b     w1
    4f20:	1e 00 90    	mov.w     [w14+2], w0
    4f22:	05 01 07    	rcall     0x512e <_servo_driver_read_register>
    4f24:	9e 00 90    	mov.w     [w14+2], w1
    4f26:	80 48 98    	mov.b     w0, [w1+8]

00004f28 <.LSM18>:
    uint8_t sleep_mode = (self -> mode1 & 0x7F) | 0x10;
    4f28:	1e 00 90    	mov.w     [w14+2], w0
    4f2a:	00 48 90    	mov.b     [w0+8], w0
    4f2c:	f0 46 b2    	and.b     #0x6f, w0
    4f2e:	00 44 a0    	bset.b    w0, #0x4
    4f30:	00 4f 78    	mov.b     w0, [w14]

00004f32 <.LSM19>:
    servo_driver_end_transmission(self);
    4f32:	1e 00 90    	mov.w     [w14+2], w0
    4f34:	08 01 07    	rcall     0x5146 <_servo_driver_end_transmission>

00004f36 <.LSM20>:
    // Put servo driver to sleep
    servo_driver_begin_transmission(self, I2C_WRITE);
    4f36:	80 40 eb    	clr.b     w1
    4f38:	1e 00 90    	mov.w     [w14+2], w0
    4f3a:	d9 00 07    	rcall     0x50ee <_servo_driver_begin_transmission>

00004f3c <.LSM21>:
    servo_driver_write_register(self, PCA9685_MODE1, sleep_mode);
    4f3c:	1e 41 78    	mov.b     [w14], w2
    4f3e:	80 40 eb    	clr.b     w1
    4f40:	1e 00 90    	mov.w     [w14+2], w0
    4f42:	e7 00 07    	rcall     0x5112 <_servo_driver_write_register>

00004f44 <.LSM22>:
    servo_driver_end_transmission(self);
    4f44:	1e 00 90    	mov.w     [w14+2], w0
    4f46:	ff 00 07    	rcall     0x5146 <_servo_driver_end_transmission>

00004f48 <.LSM23>:
}
    4f48:	00 80 fa    	ulnk      
    4f4a:	00 00 06    	return    

00004f4c <_servo_driver_wake>:

void servo_driver_wake(_SERVODRIVER *self) {
    4f4c:	02 00 fa    	lnk       #0x2
    4f4e:	00 0f 78    	mov.w     w0, [w14]

00004f50 <.LSM25>:
    /*
    Wakes servo driver from sleep (to sleep, use servo_driver_sleep()) and
    reinstates mode1 settings from pre-sleep period (uses self -> mode1).
    */

    servo_driver_begin_transmission(self, I2C_WRITE);
    4f50:	80 40 eb    	clr.b     w1
    4f52:	1e 00 78    	mov.w     [w14], w0
    4f54:	cc 00 07    	rcall     0x50ee <_servo_driver_begin_transmission>

00004f56 <.LSM26>:
    servo_driver_write_register(self, PCA9685_MODE1, self -> mode1);
    4f56:	1e 00 78    	mov.w     [w14], w0
    4f58:	00 48 90    	mov.b     [w0+8], w0
    4f5a:	00 41 78    	mov.b     w0, w2
    4f5c:	80 40 eb    	clr.b     w1
    4f5e:	1e 00 78    	mov.w     [w14], w0
    4f60:	d8 00 07    	rcall     0x5112 <_servo_driver_write_register>

00004f62 <.LSM27>:
    servo_driver_end_transmission(self);
    4f62:	1e 00 78    	mov.w     [w14], w0
    4f64:	f0 00 07    	rcall     0x5146 <_servo_driver_end_transmission>

00004f66 <.LSM28>:
    __delay_us(500); // Oscillator takes max 500us to restart from sleep
    4f66:	00 f4 21    	mov.w     #0x1f40, w0
    4f68:	01 00 20    	mov.w     #0x0, w1
    4f6a:	ea 05 07    	rcall     0x5b40 <___delay32>

00004f6c <.LSM29>:
    servo_driver_begin_transmission(self, I2C_WRITE);
    4f6c:	80 40 eb    	clr.b     w1
    4f6e:	1e 00 78    	mov.w     [w14], w0
    4f70:	be 00 07    	rcall     0x50ee <_servo_driver_begin_transmission>

00004f72 <.LSM30>:
    servo_driver_write_register(self, PCA9685_MODE1, self -> mode1 | 0xa1);
    4f72:	1e 00 78    	mov.w     [w14], w0
    4f74:	80 48 90    	mov.b     [w0+8], w1
    4f76:	10 ca b3    	mov.b     #0xa1, w0
    4f78:	00 c0 70    	ior.b     w1, w0, w0
    4f7a:	00 41 78    	mov.b     w0, w2
    4f7c:	80 40 eb    	clr.b     w1
    4f7e:	1e 00 78    	mov.w     [w14], w0
    4f80:	c8 00 07    	rcall     0x5112 <_servo_driver_write_register>

00004f82 <.LSM31>:
    // 0xa1 ensures the raising of the restart bit, ALLCALL, and auto-increment
    servo_driver_end_transmission(self);
    4f82:	1e 00 78    	mov.w     [w14], w0
    4f84:	e0 00 07    	rcall     0x5146 <_servo_driver_end_transmission>

00004f86 <.LSM32>:
    // Servo driver is awake and functioning again!
}
    4f86:	00 80 fa    	ulnk      
    4f88:	00 00 06    	return    

00004f8a <_servo_driver_reset>:

void servo_driver_reset(_SERVODRIVER *self) {
    4f8a:	02 00 fa    	lnk       #0x2
    4f8c:	00 0f 78    	mov.w     w0, [w14]

00004f8e <.LSM34>:
    /*
    Follows the software reset procedure outlined in the datasheet.
    */
    i2c_start(self -> bus);
    4f8e:	1e 00 78    	mov.w     [w14], w0
    4f90:	10 00 78    	mov.w     [w0], w0
    4f92:	36 fd 07    	rcall     0x4a00 <_i2c_start>

00004f94 <.LSM35>:
    i2c_putc(self -> bus, 0x00);
    4f94:	1e 00 78    	mov.w     [w14], w0
    4f96:	10 00 78    	mov.w     [w0], w0
    4f98:	80 40 eb    	clr.b     w1
    4f9a:	af fd 07    	rcall     0x4afa <_i2c_putc>

00004f9c <.LSM36>:
    i2c_putc(self -> bus, 0x06);
    4f9c:	1e 00 78    	mov.w     [w14], w0
    4f9e:	10 00 78    	mov.w     [w0], w0
    4fa0:	61 c0 b3    	mov.b     #0x6, w1
    4fa2:	ab fd 07    	rcall     0x4afa <_i2c_putc>

00004fa4 <.LSM37>:
    i2c_close(self -> bus);
    4fa4:	1e 00 78    	mov.w     [w14], w0
    4fa6:	10 00 78    	mov.w     [w0], w0
    4fa8:	07 fd 07    	rcall     0x49b8 <_i2c_close>

00004faa <.LSM38>:
}
    4faa:	00 80 fa    	ulnk      
    4fac:	00 00 06    	return    

00004fae <_servo_driver_set_pwm_freq>:

void servo_driver_set_pwm_freq(_SERVODRIVER *self, float freq) {
    4fae:	0c 00 fa    	lnk       #0xc
    4fb0:	30 07 98    	mov.w     w0, [w14+6]
    4fb2:	42 07 98    	mov.w     w2, [w14+8]
    4fb4:	53 07 98    	mov.w     w3, [w14+10]

00004fb6 <.LSM40>:
    /*
    Sets the PWM frequency (bounds 24Hz - 1526Hz). This involves sleeping and
    restarting the servo driver.
    */
    freq *= 0.9;  // Correct for overshoot in the frequency setting
    4fb6:	62 66 26    	mov.w     #0x6666, w2
    4fb8:	63 f6 23    	mov.w     #0x3f66, w3
    4fba:	4e 00 90    	mov.w     [w14+8], w0
    4fbc:	de 00 90    	mov.w     [w14+10], w1
    4fbe:	4d e2 07    	rcall     0x145a <___mulsf3>
    4fc0:	40 07 98    	mov.w     w0, [w14+8]
    4fc2:	51 07 98    	mov.w     w1, [w14+10]

00004fc4 <.LSM41>:
    float prescaleval = 25000000;
    4fc4:	00 c2 2b    	mov.w     #0xbc20, w0
    4fc6:	e1 bb 24    	mov.w     #0x4bbe, w1
    4fc8:	00 8f be    	mov.d     w0, [w14]

00004fca <.LSM42>:
    prescaleval /= 4096;
    4fca:	02 00 20    	mov.w     #0x0, w2
    4fcc:	03 58 24    	mov.w     #0x4580, w3
    4fce:	1e 00 be    	mov.d     [w14], w0
    4fd0:	86 e1 07    	rcall     0x12de <___divsf3>
    4fd2:	00 8f be    	mov.d     w0, [w14]

00004fd4 <.LSM43>:
    prescaleval /= freq;
    4fd4:	4e 01 90    	mov.w     [w14+8], w2
    4fd6:	de 01 90    	mov.w     [w14+10], w3
    4fd8:	1e 00 be    	mov.d     [w14], w0
    4fda:	81 e1 07    	rcall     0x12de <___divsf3>
    4fdc:	00 8f be    	mov.d     w0, [w14]

00004fde <.LSM44>:
    prescaleval -= 1;
    4fde:	02 00 20    	mov.w     #0x0, w2
    4fe0:	03 f8 23    	mov.w     #0x3f80, w3
    4fe2:	1e 00 be    	mov.d     [w14], w0
    4fe4:	1e e1 07    	rcall     0x1222 <___subsf3>
    4fe6:	00 8f be    	mov.d     w0, [w14]

00004fe8 <.LSM45>:
    uint8_t prescale = floor(prescaleval + 0.5);
    4fe8:	02 00 20    	mov.w     #0x0, w2
    4fea:	03 f0 23    	mov.w     #0x3f00, w3
    4fec:	1e 00 be    	mov.d     [w14], w0
    4fee:	1a e1 07    	rcall     0x1224 <___addsf3>
    4ff0:	d9 e1 07    	rcall     0x13a4 <_floorf>
    4ff2:	bb e1 07    	rcall     0x136a <___fixunssfsi>
    4ff4:	40 47 98    	mov.b     w0, [w14+4]

00004ff6 <.LSM46>:
    // PWM frequency can only be updated when servo driver is asleep.
    servo_driver_sleep(self);
    4ff6:	3e 00 90    	mov.w     [w14+6], w0
    4ff8:	8d ff 07    	rcall     0x4f14 <_servo_driver_sleep>

00004ffa <.LSM47>:
    servo_driver_begin_transmission(self, I2C_WRITE);
    4ffa:	80 40 eb    	clr.b     w1
    4ffc:	3e 00 90    	mov.w     [w14+6], w0
    4ffe:	77 00 07    	rcall     0x50ee <_servo_driver_begin_transmission>

00005000 <.LSM48>:
    servo_driver_write_register(self, PCA9685_PRESCALE, prescale);
    5000:	4e 41 90    	mov.b     [w14+4], w2
    5002:	e1 cf b3    	mov.b     #0xfe, w1
    5004:	3e 00 90    	mov.w     [w14+6], w0
    5006:	85 00 07    	rcall     0x5112 <_servo_driver_write_register>

00005008 <.LSM49>:
    servo_driver_end_transmission(self);
    5008:	3e 00 90    	mov.w     [w14+6], w0
    500a:	9d 00 07    	rcall     0x5146 <_servo_driver_end_transmission>

0000500c <.LSM50>:
    servo_driver_wake(self);
    500c:	3e 00 90    	mov.w     [w14+6], w0
    500e:	9e ff 07    	rcall     0x4f4c <_servo_driver_wake>

00005010 <.LSM51>:
}
    5010:	00 80 fa    	ulnk      
    5012:	00 00 06    	return    

00005014 <_servo_set_pwm>:

void servo_set_pwm(_SERVO *self, uint16_t on, uint16_t off) {
    5014:	06 00 fa    	lnk       #0x6
    5016:	00 0f 78    	mov.w     w0, [w14]
    5018:	11 07 98    	mov.w     w1, [w14+2]
    501a:	22 07 98    	mov.w     w2, [w14+4]

0000501c <.LSM53>:
    /*
    Sets a PWM signal as specified by the datasheet by writing 16-bit on and
    "off" values into a series of four registers. This requires that auto-
    increment be enabled in the MODE1 register.
    */

    servo_driver_begin_transmission(self -> driver, I2C_WRITE);
    501c:	1e 00 78    	mov.w     [w14], w0
    501e:	10 00 78    	mov.w     [w0], w0
    5020:	80 40 eb    	clr.b     w1
    5022:	65 00 07    	rcall     0x50ee <_servo_driver_begin_transmission>

00005024 <.LSM54>:
    i2c_putc(self -> driver -> bus, DEV0_ON_L + 4 * self -> num);
    5024:	1e 00 78    	mov.w     [w14], w0
    5026:	a0 40 90    	mov.b     [w0+2], w1
    5028:	20 00 20    	mov.w     #0x2, w0
    502a:	00 08 dd    	sl.w      w1, w0, w0
    502c:	e6 40 40    	add.b     w0, #0x6, w1
    502e:	1e 00 78    	mov.w     [w14], w0
    5030:	10 00 78    	mov.w     [w0], w0
    5032:	10 00 78    	mov.w     [w0], w0
    5034:	62 fd 07    	rcall     0x4afa <_i2c_putc>

00005036 <.LSM55>:
    i2c_putc(self -> driver -> bus, on);
    5036:	1e 00 90    	mov.w     [w14+2], w0
    5038:	80 40 78    	mov.b     w0, w1
    503a:	1e 00 78    	mov.w     [w14], w0
    503c:	10 00 78    	mov.w     [w0], w0
    503e:	10 00 78    	mov.w     [w0], w0
    5040:	5c fd 07    	rcall     0x4afa <_i2c_putc>

00005042 <.LSM56>:
    i2c_putc(self -> driver -> bus, on >> 8);
    5042:	1e 00 90    	mov.w     [w14+2], w0
    5044:	48 00 de    	lsr.w     w0, #0x8, w0
    5046:	80 40 78    	mov.b     w0, w1
    5048:	1e 00 78    	mov.w     [w14], w0
    504a:	10 00 78    	mov.w     [w0], w0
    504c:	10 00 78    	mov.w     [w0], w0
    504e:	55 fd 07    	rcall     0x4afa <_i2c_putc>

00005050 <.LSM57>:
    i2c_putc(self -> driver -> bus, off);
    5050:	2e 00 90    	mov.w     [w14+4], w0
    5052:	80 40 78    	mov.b     w0, w1
    5054:	1e 00 78    	mov.w     [w14], w0
    5056:	10 00 78    	mov.w     [w0], w0
    5058:	10 00 78    	mov.w     [w0], w0
    505a:	4f fd 07    	rcall     0x4afa <_i2c_putc>

0000505c <.LSM58>:
    i2c_putc(self -> driver -> bus, off >> 8);
    505c:	2e 00 90    	mov.w     [w14+4], w0
    505e:	48 00 de    	lsr.w     w0, #0x8, w0
    5060:	80 40 78    	mov.b     w0, w1
    5062:	1e 00 78    	mov.w     [w14], w0
    5064:	10 00 78    	mov.w     [w0], w0
    5066:	10 00 78    	mov.w     [w0], w0
    5068:	48 fd 07    	rcall     0x4afa <_i2c_putc>

0000506a <.LSM59>:
    servo_driver_end_transmission(self -> driver);
    506a:	1e 00 78    	mov.w     [w14], w0
    506c:	10 00 78    	mov.w     [w0], w0
    506e:	6b 00 07    	rcall     0x5146 <_servo_driver_end_transmission>

00005070 <.LSM60>:
}
    5070:	00 80 fa    	ulnk      
    5072:	00 00 06    	return    

00005074 <_servo_set>:

void servo_set(_SERVO *self, uint16_t val, bool invert) {
    5074:	06 00 fa    	lnk       #0x6
    5076:	00 0f 78    	mov.w     w0, [w14]
    5078:	11 07 98    	mov.w     w1, [w14+2]
    507a:	42 47 98    	mov.b     w2, [w14+4]

0000507c <.LSM62>:
    /*
    Sets pin without having to deal with on/off tick placement and properly
    handles a zero value as completely off.  Optional invert parameter supports
    inverting the pulse for sinking to ground.
    Val should be a value from 0 to 4095 inclusive.
    */
    // Clamp value between 0 and 4095 inclusive.
    if ( val > 4095) {
    507c:	9e 00 90    	mov.w     [w14+2], w1
    507e:	f0 ff 20    	mov.w     #0xfff, w0
    5080:	80 8f 50    	sub.w     w1, w0, [w15]
    5082:	02 00 36    	bra       LEU, 0x5088 <.L10>

00005084 <.LSM63>:
        val = 4095;
    5084:	f0 ff 20    	mov.w     #0xfff, w0
    5086:	10 07 98    	mov.w     w0, [w14+2]

00005088 <.L10>:
    }
    if (invert) {
    5088:	4e 40 90    	mov.b     [w14+4], w0
    508a:	00 04 e0    	cp0.b     w0
    508c:	19 00 32    	bra       Z, 0x50c0 <.L11>

0000508e <.LSM65>:
        if (val == 0) {
    508e:	1e 00 90    	mov.w     [w14+2], w0
    5090:	00 00 e0    	cp0.w     w0
    5092:	05 00 3a    	bra       NZ, 0x509e <.L12>

00005094 <.LSM66>:
            // Special value for signal fully on.
            servo_set_pwm(self, 4096, 0);
    5094:	00 01 eb    	clr.w     w2
    5096:	01 00 21    	mov.w     #0x1000, w1
    5098:	1e 00 78    	mov.w     [w14], w0
    509a:	bc ff 07    	rcall     0x5014 <_servo_set_pwm>
    509c:	26 00 37    	bra       0x50ea <.L9>

0000509e <.L12>:
        }
        else if (val == 4095) {
    509e:	9e 00 90    	mov.w     [w14+2], w1
    50a0:	f0 ff 20    	mov.w     #0xfff, w0
    50a2:	80 8f 50    	sub.w     w1, w0, [w15]
    50a4:	05 00 3a    	bra       NZ, 0x50b0 <.L14>

000050a6 <.LSM68>:
            // Special value for signal fully off.
            servo_set_pwm(self, 0, 4096);
    50a6:	02 00 21    	mov.w     #0x1000, w2
    50a8:	80 00 eb    	clr.w     w1
    50aa:	1e 00 78    	mov.w     [w14], w0
    50ac:	b3 ff 07    	rcall     0x5014 <_servo_set_pwm>
    50ae:	1d 00 37    	bra       0x50ea <.L9>

000050b0 <.L14>:
        }
        else {
            servo_set_pwm(self, 0, 4095 - val);
    50b0:	f1 ff 20    	mov.w     #0xfff, w1
    50b2:	1e 00 90    	mov.w     [w14+2], w0
    50b4:	00 80 50    	sub.w     w1, w0, w0
    50b6:	00 01 78    	mov.w     w0, w2
    50b8:	80 00 eb    	clr.w     w1
    50ba:	1e 00 78    	mov.w     [w14], w0
    50bc:	ab ff 07    	rcall     0x5014 <_servo_set_pwm>
    50be:	15 00 37    	bra       0x50ea <.L9>

000050c0 <.L11>:
        }
    }
    else {
        if (val == 4095) {
    50c0:	9e 00 90    	mov.w     [w14+2], w1
    50c2:	f0 ff 20    	mov.w     #0xfff, w0
    50c4:	80 8f 50    	sub.w     w1, w0, [w15]
    50c6:	05 00 3a    	bra       NZ, 0x50d2 <.L15>

000050c8 <.LSM71>:
            // Special value for signal fully on.
            servo_set_pwm(self, 4096, 0);
    50c8:	00 01 eb    	clr.w     w2
    50ca:	01 00 21    	mov.w     #0x1000, w1
    50cc:	1e 00 78    	mov.w     [w14], w0
    50ce:	a2 ff 07    	rcall     0x5014 <_servo_set_pwm>
    50d0:	0c 00 37    	bra       0x50ea <.L9>

000050d2 <.L15>:
        }
        else if (val == 0) {
    50d2:	1e 00 90    	mov.w     [w14+2], w0
    50d4:	00 00 e0    	cp0.w     w0
    50d6:	05 00 3a    	bra       NZ, 0x50e2 <.L16>

000050d8 <.LSM73>:
            // Special value for signal fully off.
            servo_set_pwm(self, 0, 4096);
    50d8:	02 00 21    	mov.w     #0x1000, w2
    50da:	80 00 eb    	clr.w     w1
    50dc:	1e 00 78    	mov.w     [w14], w0
    50de:	9a ff 07    	rcall     0x5014 <_servo_set_pwm>
    50e0:	04 00 37    	bra       0x50ea <.L9>

000050e2 <.L16>:
        }
        else {
            servo_set_pwm(self, 0, val);
    50e2:	1e 01 90    	mov.w     [w14+2], w2
    50e4:	80 00 eb    	clr.w     w1
    50e6:	1e 00 78    	mov.w     [w14], w0
    50e8:	95 ff 07    	rcall     0x5014 <_servo_set_pwm>

000050ea <.L9>:
        }
    }
}
    50ea:	00 80 fa    	ulnk      
    50ec:	00 00 06    	return    

000050ee <_servo_driver_begin_transmission>:


void servo_driver_begin_transmission(_SERVODRIVER *dest, uint8_t rw) {
    50ee:	06 00 fa    	lnk       #0x6
    50f0:	10 07 98    	mov.w     w0, [w14+2]
    50f2:	41 47 98    	mov.b     w1, [w14+4]

000050f4 <.LSM77>:
    /*
    Addresses the specified servo driver over I2C. This should be followed by
    the writing of registers/other commands to this servo driver. rw specifies
    whether the following operations will be "read" (rw=1) or "write" (rw=0)
    operations.
    */
    i2c_start(dest -> bus);
    50f4:	1e 00 90    	mov.w     [w14+2], w0
    50f6:	10 00 78    	mov.w     [w0], w0
    50f8:	83 fc 07    	rcall     0x4a00 <_i2c_start>

000050fa <.LSM78>:
    uint8_t assembled_addr = (dest -> i2c_addr << 1) + rw;
    50fa:	1e 00 90    	mov.w     [w14+2], w0
    50fc:	30 40 90    	mov.b     [w0+3], w0
    50fe:	00 40 40    	add.b     w0, w0, w0
    5100:	80 40 78    	mov.b     w0, w1
    5102:	4e 40 90    	mov.b     [w14+4], w0
    5104:	00 cf 40    	add.b     w1, w0, [w14]

00005106 <.LSM79>:
    i2c_putc(dest -> bus, assembled_addr);
    5106:	1e 00 90    	mov.w     [w14+2], w0
    5108:	10 00 78    	mov.w     [w0], w0
    510a:	9e 40 78    	mov.b     [w14], w1
    510c:	f6 fc 07    	rcall     0x4afa <_i2c_putc>

0000510e <.LSM80>:
}
    510e:	00 80 fa    	ulnk      
    5110:	00 00 06    	return    

00005112 <_servo_driver_write_register>:

void servo_driver_write_register(_SERVODRIVER *dest, uint8_t reg, uint8_t val) {
    5112:	04 00 fa    	lnk       #0x4
    5114:	00 0f 78    	mov.w     w0, [w14]
    5116:	21 47 98    	mov.b     w1, [w14+2]
    5118:	32 47 98    	mov.b     w2, [w14+3]

0000511a <.LSM82>:
    i2c_putc(dest -> bus, reg);
    511a:	1e 00 78    	mov.w     [w14], w0
    511c:	10 00 78    	mov.w     [w0], w0
    511e:	ae 40 90    	mov.b     [w14+2], w1
    5120:	ec fc 07    	rcall     0x4afa <_i2c_putc>

00005122 <.LSM83>:
    i2c_putc(dest -> bus, val);
    5122:	1e 00 78    	mov.w     [w14], w0
    5124:	10 00 78    	mov.w     [w0], w0
    5126:	be 40 90    	mov.b     [w14+3], w1
    5128:	e8 fc 07    	rcall     0x4afa <_i2c_putc>

0000512a <.LSM84>:
}
    512a:	00 80 fa    	ulnk      
    512c:	00 00 06    	return    

0000512e <_servo_driver_read_register>:

uint8_t servo_driver_read_register(_SERVODRIVER *dest, uint8_t reg) {
    512e:	04 00 fa    	lnk       #0x4
    5130:	00 0f 78    	mov.w     w0, [w14]
    5132:	21 47 98    	mov.b     w1, [w14+2]

00005134 <.LSM86>:
    i2c_putc(dest -> bus, reg);
    5134:	1e 00 78    	mov.w     [w14], w0
    5136:	10 00 78    	mov.w     [w0], w0
    5138:	ae 40 90    	mov.b     [w14+2], w1
    513a:	df fc 07    	rcall     0x4afa <_i2c_putc>

0000513c <.LSM87>:
    return i2c_getc(dest -> bus);
    513c:	1e 00 78    	mov.w     [w14], w0
    513e:	10 00 78    	mov.w     [w0], w0
    5140:	19 fd 07    	rcall     0x4b74 <_i2c_getc>

00005142 <.LSM88>:
}
    5142:	00 80 fa    	ulnk      
    5144:	00 00 06    	return    

00005146 <_servo_driver_end_transmission>:

void servo_driver_end_transmission(_SERVODRIVER *dest) {
    5146:	02 00 fa    	lnk       #0x2
    5148:	00 0f 78    	mov.w     w0, [w14]

0000514a <.LSM90>:
    i2c_stop(dest -> bus);
    514a:	1e 00 78    	mov.w     [w14], w0
    514c:	10 00 78    	mov.w     [w0], w0
    514e:	b1 fc 07    	rcall     0x4ab2 <_i2c_stop>

00005150 <.LSM91>:
}    5150:	00 80 fa    	ulnk      
    5152:	00 00 06    	return    

00005154 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    5154:	00 00 fa    	lnk       #0x0

00005156 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    5156:	74 c0 b3    	mov.b     #0x7, w4
    5158:	63 4e 20    	mov.w     #0x4e6, w3
    515a:	82 2d 20    	mov.w     #0x2d8, w2
    515c:	a1 2d 20    	mov.w     #0x2da, w1
    515e:	00 80 20    	mov.w     #0x800, w0
    5160:	20 00 07    	rcall     0x51a2 <_led_init>

00005162 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    5162:	00 42 eb    	clr.b     w4
    5164:	a3 4e 20    	mov.w     #0x4ea, w3
    5166:	82 2e 20    	mov.w     #0x2e8, w2
    5168:	a1 2e 20    	mov.w     #0x2ea, w1
    516a:	80 80 20    	mov.w     #0x808, w0
    516c:	1a 00 07    	rcall     0x51a2 <_led_init>

0000516e <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    516e:	14 c0 b3    	mov.b     #0x1, w4
    5170:	a3 4e 20    	mov.w     #0x4ea, w3
    5172:	82 2e 20    	mov.w     #0x2e8, w2
    5174:	a1 2e 20    	mov.w     #0x2ea, w1
    5176:	00 81 20    	mov.w     #0x810, w0
    5178:	14 00 07    	rcall     0x51a2 <_led_init>

0000517a <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    517a:	f4 c0 b3    	mov.b     #0xf, w4
    517c:	43 4e 20    	mov.w     #0x4e4, w3
    517e:	02 2d 20    	mov.w     #0x2d0, w2
    5180:	21 2d 20    	mov.w     #0x2d2, w1
    5182:	80 81 20    	mov.w     #0x818, w0
    5184:	ad 00 07    	rcall     0x52e0 <_sw_init>

00005186 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    5186:	c4 c0 b3    	mov.b     #0xc, w4
    5188:	43 4e 20    	mov.w     #0x4e4, w3
    518a:	02 2d 20    	mov.w     #0x2d0, w2
    518c:	21 2d 20    	mov.w     #0x2d2, w1
    518e:	00 82 20    	mov.w     #0x820, w0
    5190:	a7 00 07    	rcall     0x52e0 <_sw_init>

00005192 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    5192:	c4 c0 b3    	mov.b     #0xc, w4
    5194:	23 4e 20    	mov.w     #0x4e2, w3
    5196:	82 2c 20    	mov.w     #0x2c8, w2
    5198:	a1 2c 20    	mov.w     #0x2ca, w1
    519a:	80 82 20    	mov.w     #0x828, w0
    519c:	a1 00 07    	rcall     0x52e0 <_sw_init>

0000519e <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    519e:	00 80 fa    	ulnk      
    51a0:	00 00 06    	return    

000051a2 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    51a2:	0a 00 fa    	lnk       #0xa
    51a4:	00 0f 78    	mov.w     w0, [w14]
    51a6:	11 07 98    	mov.w     w1, [w14+2]
    51a8:	22 07 98    	mov.w     w2, [w14+4]
    51aa:	33 07 98    	mov.w     w3, [w14+6]
    51ac:	04 4f 98    	mov.b     w4, [w14+8]

000051ae <.LSM9>:
    self->port = port;
    51ae:	1e 00 78    	mov.w     [w14], w0
    51b0:	9e 00 90    	mov.w     [w14+2], w1
    51b2:	01 08 78    	mov.w     w1, [w0]

000051b4 <.LSM10>:
    self->tris = tris;
    51b4:	1e 00 78    	mov.w     [w14], w0
    51b6:	ae 00 90    	mov.w     [w14+4], w1
    51b8:	11 00 98    	mov.w     w1, [w0+2]

000051ba <.LSM11>:
    self->ans = ans;
    51ba:	1e 00 78    	mov.w     [w14], w0
    51bc:	be 00 90    	mov.w     [w14+6], w1
    51be:	21 00 98    	mov.w     w1, [w0+4]

000051c0 <.LSM12>:
    self->bit = bit;
    51c0:	1e 00 78    	mov.w     [w14], w0
    51c2:	8e 48 90    	mov.b     [w14+8], w1
    51c4:	61 40 98    	mov.b     w1, [w0+6]

000051c6 <.LSM13>:

    bitclear(self->ans, self->bit);
    51c6:	1e 00 78    	mov.w     [w14], w0
    51c8:	20 00 90    	mov.w     [w0+4], w0
    51ca:	9e 00 78    	mov.w     [w14], w1
    51cc:	a1 00 90    	mov.w     [w1+4], w1
    51ce:	11 01 78    	mov.w     [w1], w2
    51d0:	9e 00 78    	mov.w     [w14], w1
    51d2:	e1 40 90    	mov.b     [w1+6], w1
    51d4:	81 80 fb    	ze        w1, w1
    51d6:	13 00 20    	mov.w     #0x1, w3
    51d8:	81 18 dd    	sl.w      w3, w1, w1
    51da:	81 80 ea    	com.w     w1, w1
    51dc:	81 00 61    	and.w     w2, w1, w1
    51de:	01 08 78    	mov.w     w1, [w0]

000051e0 <.LSM14>:
    bitclear(self->port, self->bit);
    51e0:	1e 00 78    	mov.w     [w14], w0
    51e2:	10 00 78    	mov.w     [w0], w0
    51e4:	9e 00 78    	mov.w     [w14], w1
    51e6:	91 00 78    	mov.w     [w1], w1
    51e8:	11 01 78    	mov.w     [w1], w2
    51ea:	9e 00 78    	mov.w     [w14], w1
    51ec:	e1 40 90    	mov.b     [w1+6], w1
    51ee:	81 80 fb    	ze        w1, w1
    51f0:	13 00 20    	mov.w     #0x1, w3
    51f2:	81 18 dd    	sl.w      w3, w1, w1
    51f4:	81 80 ea    	com.w     w1, w1
    51f6:	81 00 61    	and.w     w2, w1, w1
    51f8:	01 08 78    	mov.w     w1, [w0]

000051fa <.LSM15>:
    bitclear(self->tris, self->bit);
    51fa:	1e 00 78    	mov.w     [w14], w0
    51fc:	10 00 90    	mov.w     [w0+2], w0
    51fe:	9e 00 78    	mov.w     [w14], w1
    5200:	91 00 90    	mov.w     [w1+2], w1
    5202:	11 01 78    	mov.w     [w1], w2
    5204:	9e 00 78    	mov.w     [w14], w1
    5206:	e1 40 90    	mov.b     [w1+6], w1
    5208:	81 80 fb    	ze        w1, w1
    520a:	13 00 20    	mov.w     #0x1, w3
    520c:	81 18 dd    	sl.w      w3, w1, w1
    520e:	81 80 ea    	com.w     w1, w1
    5210:	81 00 61    	and.w     w2, w1, w1
    5212:	01 08 78    	mov.w     w1, [w0]

00005214 <.LSM16>:
}
    5214:	00 80 fa    	ulnk      
    5216:	00 00 06    	return    

00005218 <_led_on>:

void led_on(_LED *self) {
    5218:	02 00 fa    	lnk       #0x2
    521a:	00 0f 78    	mov.w     w0, [w14]

0000521c <.LSM18>:
    bitset(self->port, self->bit);
    521c:	1e 00 78    	mov.w     [w14], w0
    521e:	10 00 78    	mov.w     [w0], w0
    5220:	9e 00 78    	mov.w     [w14], w1
    5222:	91 00 78    	mov.w     [w1], w1
    5224:	11 01 78    	mov.w     [w1], w2
    5226:	9e 00 78    	mov.w     [w14], w1
    5228:	e1 40 90    	mov.b     [w1+6], w1
    522a:	81 80 fb    	ze        w1, w1
    522c:	13 00 20    	mov.w     #0x1, w3
    522e:	81 18 dd    	sl.w      w3, w1, w1
    5230:	82 80 70    	ior.w     w1, w2, w1
    5232:	01 08 78    	mov.w     w1, [w0]

00005234 <.LSM19>:
}
    5234:	00 80 fa    	ulnk      
    5236:	00 00 06    	return    

00005238 <_led_off>:

void led_off(_LED *self) {
    5238:	02 00 fa    	lnk       #0x2
    523a:	00 0f 78    	mov.w     w0, [w14]

0000523c <.LSM21>:
    bitclear(self->port, self->bit);
    523c:	1e 00 78    	mov.w     [w14], w0
    523e:	10 00 78    	mov.w     [w0], w0
    5240:	9e 00 78    	mov.w     [w14], w1
    5242:	91 00 78    	mov.w     [w1], w1
    5244:	11 01 78    	mov.w     [w1], w2
    5246:	9e 00 78    	mov.w     [w14], w1
    5248:	e1 40 90    	mov.b     [w1+6], w1
    524a:	81 80 fb    	ze        w1, w1
    524c:	13 00 20    	mov.w     #0x1, w3
    524e:	81 18 dd    	sl.w      w3, w1, w1
    5250:	81 80 ea    	com.w     w1, w1
    5252:	81 00 61    	and.w     w2, w1, w1
    5254:	01 08 78    	mov.w     w1, [w0]

00005256 <.LSM22>:
}
    5256:	00 80 fa    	ulnk      
    5258:	00 00 06    	return    

0000525a <_led_toggle>:

void led_toggle(_LED *self) {
    525a:	02 00 fa    	lnk       #0x2
    525c:	00 0f 78    	mov.w     w0, [w14]

0000525e <.LSM24>:
    bitflip(self->port, self->bit);
    525e:	1e 00 78    	mov.w     [w14], w0
    5260:	10 00 78    	mov.w     [w0], w0
    5262:	9e 00 78    	mov.w     [w14], w1
    5264:	91 00 78    	mov.w     [w1], w1
    5266:	11 01 78    	mov.w     [w1], w2
    5268:	9e 00 78    	mov.w     [w14], w1
    526a:	e1 40 90    	mov.b     [w1+6], w1
    526c:	81 80 fb    	ze        w1, w1
    526e:	13 00 20    	mov.w     #0x1, w3
    5270:	81 18 dd    	sl.w      w3, w1, w1
    5272:	81 00 69    	xor.w     w2, w1, w1
    5274:	01 08 78    	mov.w     w1, [w0]

00005276 <.LSM25>:
}
    5276:	00 80 fa    	ulnk      
    5278:	00 00 06    	return    

0000527a <_led_write>:

void led_write(_LED *self, uint16_t val) {
    527a:	04 00 fa    	lnk       #0x4
    527c:	00 0f 78    	mov.w     w0, [w14]
    527e:	11 07 98    	mov.w     w1, [w14+2]

00005280 <.LSM27>:
    if (val)
    5280:	1e 00 90    	mov.w     [w14+2], w0
    5282:	00 00 e0    	cp0.w     w0
    5284:	0d 00 32    	bra       Z, 0x52a0 <.L7>

00005286 <.LSM28>:
        bitset(self->port, self->bit);
    5286:	1e 00 78    	mov.w     [w14], w0
    5288:	10 00 78    	mov.w     [w0], w0
    528a:	9e 00 78    	mov.w     [w14], w1
    528c:	91 00 78    	mov.w     [w1], w1
    528e:	11 01 78    	mov.w     [w1], w2
    5290:	9e 00 78    	mov.w     [w14], w1
    5292:	e1 40 90    	mov.b     [w1+6], w1
    5294:	81 80 fb    	ze        w1, w1
    5296:	13 00 20    	mov.w     #0x1, w3
    5298:	81 18 dd    	sl.w      w3, w1, w1
    529a:	82 80 70    	ior.w     w1, w2, w1
    529c:	01 08 78    	mov.w     w1, [w0]
    529e:	0d 00 37    	bra       0x52ba <.L6>

000052a0 <.L7>:
    else
        bitclear(self->port, self->bit);
    52a0:	1e 00 78    	mov.w     [w14], w0
    52a2:	10 00 78    	mov.w     [w0], w0
    52a4:	9e 00 78    	mov.w     [w14], w1
    52a6:	91 00 78    	mov.w     [w1], w1
    52a8:	11 01 78    	mov.w     [w1], w2
    52aa:	9e 00 78    	mov.w     [w14], w1
    52ac:	e1 40 90    	mov.b     [w1+6], w1
    52ae:	81 80 fb    	ze        w1, w1
    52b0:	13 00 20    	mov.w     #0x1, w3
    52b2:	81 18 dd    	sl.w      w3, w1, w1
    52b4:	81 80 ea    	com.w     w1, w1
    52b6:	81 00 61    	and.w     w2, w1, w1
    52b8:	01 08 78    	mov.w     w1, [w0]

000052ba <.L6>:
}
    52ba:	00 80 fa    	ulnk      
    52bc:	00 00 06    	return    

000052be <_led_read>:

uint16_t led_read(_LED *self) {
    52be:	02 00 fa    	lnk       #0x2
    52c0:	00 0f 78    	mov.w     w0, [w14]

000052c2 <.LSM32>:
    return bitread(self->port, self->bit);
    52c2:	1e 00 78    	mov.w     [w14], w0
    52c4:	10 00 78    	mov.w     [w0], w0
    52c6:	90 00 78    	mov.w     [w0], w1
    52c8:	1e 00 78    	mov.w     [w14], w0
    52ca:	60 40 90    	mov.b     [w0+6], w0
    52cc:	00 80 fb    	ze        w0, w0
    52ce:	12 00 20    	mov.w     #0x1, w2
    52d0:	00 10 dd    	sl.w      w2, w0, w0
    52d2:	00 80 60    	and.w     w1, w0, w0
    52d4:	00 f0 a7    	btsc.w    w0, #0xf
    52d6:	00 00 ea    	neg.w     w0, w0
    52d8:	00 00 ea    	neg.w     w0, w0
    52da:	4f 00 de    	lsr.w     w0, #0xf, w0

000052dc <.LSM33>:
}
    52dc:	00 80 fa    	ulnk      
    52de:	00 00 06    	return    

000052e0 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    52e0:	0a 00 fa    	lnk       #0xa
    52e2:	00 0f 78    	mov.w     w0, [w14]
    52e4:	11 07 98    	mov.w     w1, [w14+2]
    52e6:	22 07 98    	mov.w     w2, [w14+4]
    52e8:	33 07 98    	mov.w     w3, [w14+6]
    52ea:	04 4f 98    	mov.b     w4, [w14+8]

000052ec <.LSM35>:
    self->port = port;
    52ec:	1e 00 78    	mov.w     [w14], w0
    52ee:	9e 00 90    	mov.w     [w14+2], w1
    52f0:	01 08 78    	mov.w     w1, [w0]

000052f2 <.LSM36>:
    self->tris = tris;
    52f2:	1e 00 78    	mov.w     [w14], w0
    52f4:	ae 00 90    	mov.w     [w14+4], w1
    52f6:	11 00 98    	mov.w     w1, [w0+2]

000052f8 <.LSM37>:
    self->ans = ans;
    52f8:	1e 00 78    	mov.w     [w14], w0
    52fa:	be 00 90    	mov.w     [w14+6], w1
    52fc:	21 00 98    	mov.w     w1, [w0+4]

000052fe <.LSM38>:
    self->bit = bit;
    52fe:	1e 00 78    	mov.w     [w14], w0
    5300:	8e 48 90    	mov.b     [w14+8], w1
    5302:	61 40 98    	mov.b     w1, [w0+6]

00005304 <.LSM39>:

    bitclear(self->ans, self->bit);
    5304:	1e 00 78    	mov.w     [w14], w0
    5306:	20 00 90    	mov.w     [w0+4], w0
    5308:	9e 00 78    	mov.w     [w14], w1
    530a:	a1 00 90    	mov.w     [w1+4], w1
    530c:	11 01 78    	mov.w     [w1], w2
    530e:	9e 00 78    	mov.w     [w14], w1
    5310:	e1 40 90    	mov.b     [w1+6], w1
    5312:	81 80 fb    	ze        w1, w1
    5314:	13 00 20    	mov.w     #0x1, w3
    5316:	81 18 dd    	sl.w      w3, w1, w1
    5318:	81 80 ea    	com.w     w1, w1
    531a:	81 00 61    	and.w     w2, w1, w1
    531c:	01 08 78    	mov.w     w1, [w0]

0000531e <.LSM40>:
    bitset(self->tris, self->bit);
    531e:	1e 00 78    	mov.w     [w14], w0
    5320:	10 00 90    	mov.w     [w0+2], w0
    5322:	9e 00 78    	mov.w     [w14], w1
    5324:	91 00 90    	mov.w     [w1+2], w1
    5326:	11 01 78    	mov.w     [w1], w2
    5328:	9e 00 78    	mov.w     [w14], w1
    532a:	e1 40 90    	mov.b     [w1+6], w1
    532c:	81 80 fb    	ze        w1, w1
    532e:	13 00 20    	mov.w     #0x1, w3
    5330:	81 18 dd    	sl.w      w3, w1, w1
    5332:	82 80 70    	ior.w     w1, w2, w1
    5334:	01 08 78    	mov.w     w1, [w0]

00005336 <.LSM41>:
}
    5336:	00 80 fa    	ulnk      
    5338:	00 00 06    	return    

0000533a <_sw_read>:

uint16_t sw_read(_SW *self) {
    533a:	02 00 fa    	lnk       #0x2
    533c:	00 0f 78    	mov.w     w0, [w14]

0000533e <.LSM43>:
    return bitread(self->port, self->bit);
    533e:	1e 00 78    	mov.w     [w14], w0
    5340:	10 00 78    	mov.w     [w0], w0
    5342:	90 00 78    	mov.w     [w0], w1
    5344:	1e 00 78    	mov.w     [w14], w0
    5346:	60 40 90    	mov.b     [w0+6], w0
    5348:	00 80 fb    	ze        w0, w0
    534a:	12 00 20    	mov.w     #0x1, w2
    534c:	00 10 dd    	sl.w      w2, w0, w0
    534e:	00 80 60    	and.w     w1, w0, w0
    5350:	00 f0 a7    	btsc.w    w0, #0xf
    5352:	00 00 ea    	neg.w     w0, w0
    5354:	00 00 ea    	neg.w     w0, w0
    5356:	4f 00 de    	lsr.w     w0, #0xf, w0

00005358 <.LSM44>:
}
    5358:	00 80 fa    	ulnk      
    535a:	00 00 06    	return    

0000535c <_PID_FL_control>:
//     self -> integ_max = integ_max;

// }

float PID_FL_control(_PID_FL *self) {
    535c:	16 00 fa    	lnk       #0x16
    535e:	88 1f 78    	mov.w     w8, [w15++]
    5360:	20 0f 98    	mov.w     w0, [w14+20]

00005362 <.LSM1>:
    float error = self->set_point - self->position;
    5362:	2e 08 90    	mov.w     [w14+20], w0
    5364:	60 02 90    	mov.w     [w0+12], w4
    5366:	f0 02 90    	mov.w     [w0+14], w5
    5368:	2e 08 90    	mov.w     [w14+20], w0
    536a:	b0 08 90    	mov.w     [w0+22], w1
    536c:	20 08 90    	mov.w     [w0+20], w0
    536e:	00 01 be    	mov.d     w0, w2
    5370:	04 00 be    	mov.d     w4, w0
    5372:	57 df 07    	rcall     0x1222 <___subsf3>
    5374:	00 8f be    	mov.d     w0, [w14]

00005376 <.LSM2>:
    float deriv = (self->position - self->_prev_position) / self->dt;
    5376:	2e 08 90    	mov.w     [w14+20], w0
    5378:	20 0a 90    	mov.w     [w0+20], w4
    537a:	b0 0a 90    	mov.w     [w0+22], w5
    537c:	2e 08 90    	mov.w     [w14+20], w0
    537e:	d0 08 90    	mov.w     [w0+26], w1
    5380:	40 08 90    	mov.w     [w0+24], w0
    5382:	00 01 be    	mov.d     w0, w2
    5384:	04 00 be    	mov.d     w4, w0
    5386:	4d df 07    	rcall     0x1222 <___subsf3>
    5388:	00 02 be    	mov.d     w0, w4
    538a:	2e 08 90    	mov.w     [w14+20], w0
    538c:	90 08 90    	mov.w     [w0+18], w1
    538e:	00 08 90    	mov.w     [w0+16], w0
    5390:	00 01 be    	mov.d     w0, w2
    5392:	04 00 be    	mov.d     w4, w0
    5394:	a4 df 07    	rcall     0x12de <___divsf3>
    5396:	20 07 98    	mov.w     w0, [w14+4]
    5398:	31 07 98    	mov.w     w1, [w14+6]

0000539a <.LSM3>:

    self->_integ_state += error;
    539a:	2e 08 90    	mov.w     [w14+20], w0
    539c:	f0 08 90    	mov.w     [w0+30], w1
    539e:	60 08 90    	mov.w     [w0+28], w0
    53a0:	1e 01 be    	mov.d     [w14], w2
    53a2:	40 df 07    	rcall     0x1224 <___addsf3>
    53a4:	2e 09 90    	mov.w     [w14+20], w2
    53a6:	60 09 98    	mov.w     w0, [w2+28]
    53a8:	71 09 98    	mov.w     w1, [w2+30]

000053aa <.LSM4>:

    if (self->_integ_state > self->integ_max) {
    53aa:	2e 08 90    	mov.w     [w14+20], w0
    53ac:	60 0a 90    	mov.w     [w0+28], w4
    53ae:	f0 0a 90    	mov.w     [w0+30], w5
    53b0:	2e 08 90    	mov.w     [w14+20], w0
    53b2:	90 10 90    	mov.w     [w0+34], w1
    53b4:	00 10 90    	mov.w     [w0+32], w0
    53b6:	18 c0 b3    	mov.b     #0x1, w8
    53b8:	00 01 be    	mov.d     w0, w2
    53ba:	04 00 be    	mov.d     w4, w0
    53bc:	d4 df 07    	rcall     0x1366 <___gesf2>
    53be:	00 00 e0    	cp0.w     w0
    53c0:	01 00 3c    	bra       GT, 0x53c4 <.L2>
    53c2:	00 44 eb    	clr.b     w8

000053c4 <.L2>:
    53c4:	08 04 e0    	cp0.b     w8
    53c6:	07 00 32    	bra       Z, 0x53d6 <.L3>

000053c8 <.LSM5>:
        self->_integ_state = self->integ_max;
    53c8:	2e 08 90    	mov.w     [w14+20], w0
    53ca:	90 10 90    	mov.w     [w0+34], w1
    53cc:	00 10 90    	mov.w     [w0+32], w0
    53ce:	2e 09 90    	mov.w     [w14+20], w2
    53d0:	60 09 98    	mov.w     w0, [w2+28]
    53d2:	71 09 98    	mov.w     w1, [w2+30]
    53d4:	15 00 37    	bra       0x5400 <.L4>

000053d6 <.L3>:
    } else if (self->_integ_state < self->integ_min) {
    53d6:	2e 08 90    	mov.w     [w14+20], w0
    53d8:	60 0a 90    	mov.w     [w0+28], w4
    53da:	f0 0a 90    	mov.w     [w0+30], w5
    53dc:	2e 08 90    	mov.w     [w14+20], w0
    53de:	b0 10 90    	mov.w     [w0+38], w1
    53e0:	20 10 90    	mov.w     [w0+36], w0
    53e2:	18 c0 b3    	mov.b     #0x1, w8
    53e4:	00 01 be    	mov.d     w0, w2
    53e6:	04 00 be    	mov.d     w4, w0
    53e8:	bc df 07    	rcall     0x1362 <___eqsf2>
    53ea:	00 00 e0    	cp0.w     w0
    53ec:	01 00 35    	bra       LT, 0x53f0 <.L5>
    53ee:	00 44 eb    	clr.b     w8

000053f0 <.L5>:
    53f0:	08 04 e0    	cp0.b     w8
    53f2:	06 00 32    	bra       Z, 0x5400 <.L4>

000053f4 <.LSM7>:
        self->_integ_state = self->integ_min;
    53f4:	2e 08 90    	mov.w     [w14+20], w0
    53f6:	b0 10 90    	mov.w     [w0+38], w1
    53f8:	20 10 90    	mov.w     [w0+36], w0
    53fa:	2e 09 90    	mov.w     [w14+20], w2
    53fc:	60 09 98    	mov.w     w0, [w2+28]
    53fe:	71 09 98    	mov.w     w1, [w2+30]

00005400 <.L4>:
    };

    float pterm = self->Kp * error;
    5400:	2e 08 90    	mov.w     [w14+20], w0
    5402:	10 00 be    	mov.d     [w0], w0
    5404:	1e 01 be    	mov.d     [w14], w2
    5406:	29 e0 07    	rcall     0x145a <___mulsf3>
    5408:	40 07 98    	mov.w     w0, [w14+8]
    540a:	51 07 98    	mov.w     w1, [w14+10]

0000540c <.LSM9>:
    float iterm = self->Ki * self->_integ_state;
    540c:	2e 08 90    	mov.w     [w14+20], w0
    540e:	20 02 90    	mov.w     [w0+4], w4
    5410:	b0 02 90    	mov.w     [w0+6], w5
    5412:	2e 08 90    	mov.w     [w14+20], w0
    5414:	f0 08 90    	mov.w     [w0+30], w1
    5416:	60 08 90    	mov.w     [w0+28], w0
    5418:	00 01 be    	mov.d     w0, w2
    541a:	04 00 be    	mov.d     w4, w0
    541c:	1e e0 07    	rcall     0x145a <___mulsf3>
    541e:	60 07 98    	mov.w     w0, [w14+12]
    5420:	71 07 98    	mov.w     w1, [w14+14]

00005422 <.LSM10>:
    float dterm = self->Kd * deriv;
    5422:	2e 08 90    	mov.w     [w14+20], w0
    5424:	d0 00 90    	mov.w     [w0+10], w1
    5426:	40 00 90    	mov.w     [w0+8], w0
    5428:	2e 01 90    	mov.w     [w14+4], w2
    542a:	be 01 90    	mov.w     [w14+6], w3
    542c:	16 e0 07    	rcall     0x145a <___mulsf3>
    542e:	00 0f 98    	mov.w     w0, [w14+16]
    5430:	11 0f 98    	mov.w     w1, [w14+18]

00005432 <.LSM11>:

    self->_prev_position = self->position;
    5432:	2e 08 90    	mov.w     [w14+20], w0
    5434:	b0 08 90    	mov.w     [w0+22], w1
    5436:	20 08 90    	mov.w     [w0+20], w0
    5438:	2e 09 90    	mov.w     [w14+20], w2
    543a:	40 09 98    	mov.w     w0, [w2+24]
    543c:	51 09 98    	mov.w     w1, [w2+26]

0000543e <.LSM12>:
    return pterm + iterm + dterm;
    543e:	6e 01 90    	mov.w     [w14+12], w2
    5440:	fe 01 90    	mov.w     [w14+14], w3
    5442:	4e 00 90    	mov.w     [w14+8], w0
    5444:	de 00 90    	mov.w     [w14+10], w1
    5446:	ee de 07    	rcall     0x1224 <___addsf3>
    5448:	0e 09 90    	mov.w     [w14+16], w2
    544a:	9e 09 90    	mov.w     [w14+18], w3
    544c:	eb de 07    	rcall     0x1224 <___addsf3>

0000544e <.LSM13>:
}
    544e:	4f 04 78    	mov.w     [--w15], w8
    5450:	00 80 fa    	ulnk      
    5452:	00 00 06    	return    

00005454 <_PID_U32_control>:

uint32_t PID_U32_control(_PID_U32 *self) {
    5454:	16 00 fa    	lnk       #0x16
    5456:	88 9f be    	mov.d     w8, [w15++]
    5458:	20 0f 98    	mov.w     w0, [w14+20]

0000545a <.LSM15>:
    uint32_t error = self->set_point - self->position;
    545a:	2e 08 90    	mov.w     [w14+20], w0
    545c:	60 01 90    	mov.w     [w0+12], w2
    545e:	f0 01 90    	mov.w     [w0+14], w3
    5460:	2e 08 90    	mov.w     [w14+20], w0
    5462:	b0 08 90    	mov.w     [w0+22], w1
    5464:	20 08 90    	mov.w     [w0+20], w0
    5466:	00 1f 51    	sub.w     w2, w0, [w14++]
    5468:	01 97 59    	subb.w    w3, w1, [w14--]

0000546a <.LSM16>:
    float deriv = (self->position - self->_prev_position) / ((float)(self->dt));
    546a:	2e 08 90    	mov.w     [w14+20], w0
    546c:	20 09 90    	mov.w     [w0+20], w2
    546e:	b0 09 90    	mov.w     [w0+22], w3
    5470:	2e 08 90    	mov.w     [w14+20], w0
    5472:	d0 08 90    	mov.w     [w0+26], w1
    5474:	40 08 90    	mov.w     [w0+24], w0
    5476:	00 00 51    	sub.w     w2, w0, w0
    5478:	81 80 59    	subb.w    w3, w1, w1
    547a:	92 df 07    	rcall     0x13a0 <___floatunsisf>
    547c:	00 04 be    	mov.d     w0, w8
    547e:	2e 08 90    	mov.w     [w14+20], w0
    5480:	90 08 90    	mov.w     [w0+18], w1
    5482:	00 08 90    	mov.w     [w0+16], w0
    5484:	8d df 07    	rcall     0x13a0 <___floatunsisf>
    5486:	00 01 be    	mov.d     w0, w2
    5488:	08 00 be    	mov.d     w8, w0
    548a:	29 df 07    	rcall     0x12de <___divsf3>
    548c:	20 07 98    	mov.w     w0, [w14+4]
    548e:	31 07 98    	mov.w     w1, [w14+6]

00005490 <.LSM17>:

    self->_integ_state += error;
    5490:	2e 08 90    	mov.w     [w14+20], w0
    5492:	f0 08 90    	mov.w     [w0+30], w1
    5494:	60 08 90    	mov.w     [w0+28], w0
    5496:	3e 01 40    	add.w     w0, [w14++], w2
    5498:	ae 81 48    	addc.w    w1, [w14--], w3
    549a:	02 00 be    	mov.d     w2, w0
    549c:	2e 09 90    	mov.w     [w14+20], w2
    549e:	60 09 98    	mov.w     w0, [w2+28]
    54a0:	71 09 98    	mov.w     w1, [w2+30]

000054a2 <.LSM18>:

    if (self->_integ_state > self->integ_max) {
    54a2:	2e 08 90    	mov.w     [w14+20], w0
    54a4:	60 09 90    	mov.w     [w0+28], w2
    54a6:	f0 09 90    	mov.w     [w0+30], w3
    54a8:	2e 08 90    	mov.w     [w14+20], w0
    54aa:	90 10 90    	mov.w     [w0+34], w1
    54ac:	00 10 90    	mov.w     [w0+32], w0
    54ae:	80 0f 51    	sub.w     w2, w0, [w15]
    54b0:	81 8f 59    	subb.w    w3, w1, [w15]
    54b2:	07 00 36    	bra       LEU, 0x54c2 <.L7>

000054b4 <.LSM19>:
        self->_integ_state = self->integ_max;
    54b4:	2e 08 90    	mov.w     [w14+20], w0
    54b6:	90 10 90    	mov.w     [w0+34], w1
    54b8:	00 10 90    	mov.w     [w0+32], w0
    54ba:	2e 09 90    	mov.w     [w14+20], w2
    54bc:	60 09 98    	mov.w     w0, [w2+28]
    54be:	71 09 98    	mov.w     w1, [w2+30]
    54c0:	0f 00 37    	bra       0x54e0 <.L8>

000054c2 <.L7>:
    } else if (self->_integ_state < self->integ_min) {
    54c2:	2e 08 90    	mov.w     [w14+20], w0
    54c4:	60 09 90    	mov.w     [w0+28], w2
    54c6:	f0 09 90    	mov.w     [w0+30], w3
    54c8:	2e 08 90    	mov.w     [w14+20], w0
    54ca:	b0 10 90    	mov.w     [w0+38], w1
    54cc:	20 10 90    	mov.w     [w0+36], w0
    54ce:	80 0f 51    	sub.w     w2, w0, [w15]
    54d0:	81 8f 59    	subb.w    w3, w1, [w15]
    54d2:	06 00 31    	bra       C, 0x54e0 <.L8>

000054d4 <.LSM21>:
        self->_integ_state = self->integ_min;
    54d4:	2e 08 90    	mov.w     [w14+20], w0
    54d6:	b0 10 90    	mov.w     [w0+38], w1
    54d8:	20 10 90    	mov.w     [w0+36], w0
    54da:	2e 09 90    	mov.w     [w14+20], w2
    54dc:	60 09 98    	mov.w     w0, [w2+28]
    54de:	71 09 98    	mov.w     w1, [w2+30]

000054e0 <.L8>:
    };

    uint32_t pterm = self->Kp * error;
    54e0:	2e 08 90    	mov.w     [w14+20], w0
    54e2:	10 00 be    	mov.d     [w0], w0
    54e4:	1e 01 78    	mov.w     [w14], w2
    54e6:	01 91 b9    	mul.ss    w2, w1, w2
    54e8:	02 01 78    	mov.w     w2, w2
    54ea:	9e 01 90    	mov.w     [w14+2], w3
    54ec:	00 9a b9    	mul.ss    w3, w0, w4
    54ee:	84 01 78    	mov.w     w4, w3
    54f0:	03 01 41    	add.w     w2, w3, w2
    54f2:	9e 01 78    	mov.w     [w14], w3
    54f4:	00 18 b8    	mul.uu    w3, w0, w0
    54f6:	01 01 41    	add.w     w2, w1, w2
    54f8:	82 00 78    	mov.w     w2, w1
    54fa:	40 07 98    	mov.w     w0, [w14+8]
    54fc:	51 07 98    	mov.w     w1, [w14+10]
    54fe:	40 07 98    	mov.w     w0, [w14+8]
    5500:	51 07 98    	mov.w     w1, [w14+10]

00005502 <.LSM23>:
    uint32_t iterm = self->Ki * self->_integ_state;
    5502:	2e 08 90    	mov.w     [w14+20], w0
    5504:	20 01 90    	mov.w     [w0+4], w2
    5506:	b0 01 90    	mov.w     [w0+6], w3
    5508:	2e 08 90    	mov.w     [w14+20], w0
    550a:	f0 08 90    	mov.w     [w0+30], w1
    550c:	60 08 90    	mov.w     [w0+28], w0
    550e:	00 9a b9    	mul.ss    w3, w0, w4
    5510:	04 02 78    	mov.w     w4, w4
    5512:	02 8b b9    	mul.ss    w1, w2, w6
    5514:	86 02 78    	mov.w     w6, w5
    5516:	05 02 42    	add.w     w4, w5, w4
    5518:	00 10 b8    	mul.uu    w2, w0, w0
    551a:	01 02 42    	add.w     w4, w1, w4
    551c:	84 00 78    	mov.w     w4, w1
    551e:	60 07 98    	mov.w     w0, [w14+12]
    5520:	71 07 98    	mov.w     w1, [w14+14]
    5522:	60 07 98    	mov.w     w0, [w14+12]
    5524:	71 07 98    	mov.w     w1, [w14+14]

00005526 <.LSM24>:
    uint32_t dterm = self->Kd * deriv;
    5526:	2e 08 90    	mov.w     [w14+20], w0
    5528:	d0 00 90    	mov.w     [w0+10], w1
    552a:	40 00 90    	mov.w     [w0+8], w0
    552c:	39 df 07    	rcall     0x13a0 <___floatunsisf>
    552e:	2e 01 90    	mov.w     [w14+4], w2
    5530:	be 01 90    	mov.w     [w14+6], w3
    5532:	93 df 07    	rcall     0x145a <___mulsf3>
    5534:	1a df 07    	rcall     0x136a <___fixunssfsi>
    5536:	00 0f 98    	mov.w     w0, [w14+16]
    5538:	11 0f 98    	mov.w     w1, [w14+18]

0000553a <.LSM25>:

    self->_prev_position = self->position;
    553a:	2e 08 90    	mov.w     [w14+20], w0
    553c:	b0 08 90    	mov.w     [w0+22], w1
    553e:	20 08 90    	mov.w     [w0+20], w0
    5540:	2e 09 90    	mov.w     [w14+20], w2
    5542:	40 09 98    	mov.w     w0, [w2+24]
    5544:	51 09 98    	mov.w     w1, [w2+26]

00005546 <.LSM26>:
    return pterm + iterm + dterm;
    5546:	4e 01 90    	mov.w     [w14+8], w2
    5548:	de 01 90    	mov.w     [w14+10], w3
    554a:	6e 00 90    	mov.w     [w14+12], w0
    554c:	fe 00 90    	mov.w     [w14+14], w1
    554e:	02 01 40    	add.w     w0, w2, w2
    5550:	83 81 48    	addc.w    w1, w3, w3
    5552:	0e 08 90    	mov.w     [w14+16], w0
    5554:	9e 08 90    	mov.w     [w14+18], w1
    5556:	02 00 40    	add.w     w0, w2, w0
    5558:	83 80 48    	addc.w    w1, w3, w1

0000555a <.LSM27>:
}    555a:	4f 04 be    	mov.d     [--w15], w8
    555c:	00 80 fa    	ulnk      
    555e:	00 00 06    	return    

00005560 <_quad_read>:
// previous 1-bit binary readings of the quadrature encoder's A and B pins.

_QUAD quad1, quad2;

void quad_read(_QUAD *self) {
    5560:	04 00 fa    	lnk       #0x4
    5562:	10 07 98    	mov.w     w0, [w14+2]

00005564 <.LSM1>:
    disable_interrupts();
    5564:	ff 3f fc    	disi      #0x3fff

00005566 <.LSM2>:
    pin_set(&D[2]);
    5566:	40 a9 21    	mov.w     #0x1a94, w0
    5568:	7a f6 07    	rcall     0x425e <_pin_set>

0000556a <.LSM3>:
    self -> a_curr = pin_read(self -> A);
    556a:	1e 00 90    	mov.w     [w14+2], w0
    556c:	10 08 90    	mov.w     [w0+18], w0
    556e:	c5 f6 07    	rcall     0x42fa <_pin_read>
    5570:	80 40 78    	mov.b     w0, w1
    5572:	1e 00 90    	mov.w     [w14+2], w0
    5574:	01 48 78    	mov.b     w1, [w0]

00005576 <.LSM4>:
    self -> b_curr = pin_read(self -> B);
    5576:	1e 00 90    	mov.w     [w14+2], w0
    5578:	20 08 90    	mov.w     [w0+20], w0
    557a:	bf f6 07    	rcall     0x42fa <_pin_read>
    557c:	80 40 78    	mov.b     w0, w1
    557e:	1e 00 90    	mov.w     [w14+2], w0
    5580:	21 40 98    	mov.b     w1, [w0+2]

00005582 <.LSM5>:
    unsigned char latest_read = (self -> a_curr << 1) + self -> b_curr;
    5582:	1e 00 90    	mov.w     [w14+2], w0
    5584:	10 40 78    	mov.b     [w0], w0
    5586:	00 40 40    	add.b     w0, w0, w0
    5588:	80 40 78    	mov.b     w0, w1
    558a:	1e 00 90    	mov.w     [w14+2], w0
    558c:	20 40 90    	mov.b     [w0+2], w0
    558e:	00 cf 40    	add.b     w1, w0, [w14]

00005590 <.LSM6>:
    self -> encoder_read = ((self -> encoder_read << 2) + latest_read) & 0xF;
    5590:	1e 00 90    	mov.w     [w14+2], w0
    5592:	d0 40 90    	mov.b     [w0+5], w1
    5594:	20 00 20    	mov.w     #0x2, w0
    5596:	00 08 dd    	sl.w      w1, w0, w0
    5598:	1e 40 40    	add.b     w0, [w14], w0
    559a:	ef 40 60    	and.b     w0, #0xf, w1
    559c:	1e 00 90    	mov.w     [w14+2], w0
    559e:	51 40 98    	mov.b     w1, [w0+5]

000055a0 <.LSM7>:
    int8_t delta = quad_lut[self -> encoder_read];
    55a0:	1e 00 90    	mov.w     [w14+2], w0
    55a2:	50 40 90    	mov.b     [w0+5], w0
    55a4:	00 80 fb    	ze        w0, w0
    55a6:	a1 fb 21    	mov.w     #0x1fba, w1
    55a8:	61 41 78    	mov.b     [w1+w0], w2
    55aa:	12 47 98    	mov.b     w2, [w14+1]

000055ac <.LSM8>:
    self -> delta = delta;
    55ac:	1e 00 90    	mov.w     [w14+2], w0
    55ae:	9e 40 90    	mov.b     [w14+1], w1
    55b0:	41 48 98    	mov.b     w1, [w0+12]

000055b2 <.LSM9>:
    if (self -> counter == 0) {
    55b2:	1e 00 90    	mov.w     [w14+2], w0
    55b4:	c0 00 90    	mov.w     [w0+8], w1
    55b6:	30 00 90    	mov.w     [w0+6], w0
    55b8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    55ba:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    55bc:	08 00 3a    	bra       NZ, 0x55ce <.L2>

000055be <.LSM10>:
        if (delta == -1) {
    55be:	1e 40 90    	mov.b     [w14+1], w0
    55c0:	e1 4f 40    	add.b     w0, #0x1, [w15]
    55c2:	05 00 3a    	bra       NZ, 0x55ce <.L2>

000055c4 <.LSM11>:
            self -> overflow += -1;
    55c4:	1e 00 90    	mov.w     [w14+2], w0
    55c6:	50 00 90    	mov.w     [w0+10], w0
    55c8:	80 00 e9    	dec.w     w0, w1
    55ca:	1e 00 90    	mov.w     [w14+2], w0
    55cc:	51 00 98    	mov.w     w1, [w0+10]

000055ce <.L2>:
        }
    }

    self -> counter += delta;
    55ce:	1e 00 90    	mov.w     [w14+2], w0
    55d0:	30 01 90    	mov.w     [w0+6], w2
    55d2:	c0 01 90    	mov.w     [w0+8], w3
    55d4:	1e 40 90    	mov.b     [w14+1], w0
    55d6:	00 00 fb    	se        w0, w0
    55d8:	cf 80 de    	asr.w     w0, #0xf, w1
    55da:	02 00 40    	add.w     w0, w2, w0
    55dc:	83 80 48    	addc.w    w1, w3, w1
    55de:	1e 01 90    	mov.w     [w14+2], w2
    55e0:	30 01 98    	mov.w     w0, [w2+6]
    55e2:	41 01 98    	mov.w     w1, [w2+8]

000055e4 <.LSM13>:

    if (self -> counter == 0) {
    55e4:	1e 00 90    	mov.w     [w14+2], w0
    55e6:	c0 00 90    	mov.w     [w0+8], w1
    55e8:	30 00 90    	mov.w     [w0+6], w0
    55ea:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    55ec:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    55ee:	08 00 3a    	bra       NZ, 0x5600 <.L3>

000055f0 <.LSM14>:
        if (delta == 1) {
    55f0:	1e 40 90    	mov.b     [w14+1], w0
    55f2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    55f4:	05 00 3a    	bra       NZ, 0x5600 <.L3>

000055f6 <.LSM15>:
            self -> overflow += 1;
    55f6:	1e 00 90    	mov.w     [w14+2], w0
    55f8:	50 00 90    	mov.w     [w0+10], w0
    55fa:	80 00 e8    	inc.w     w0, w1
    55fc:	1e 00 90    	mov.w     [w14+2], w0
    55fe:	51 00 98    	mov.w     w1, [w0+10]

00005600 <.L3>:
        }
    }
    
    self -> a_prev = self -> a_curr;
    5600:	1e 00 90    	mov.w     [w14+2], w0
    5602:	90 40 78    	mov.b     [w0], w1
    5604:	1e 00 90    	mov.w     [w14+2], w0
    5606:	11 40 98    	mov.b     w1, [w0+1]

00005608 <.LSM17>:
    self -> b_prev = self -> b_curr;
    5608:	1e 00 90    	mov.w     [w14+2], w0
    560a:	a0 40 90    	mov.b     [w0+2], w1
    560c:	1e 00 90    	mov.w     [w14+2], w0
    560e:	31 40 98    	mov.b     w1, [w0+3]

00005610 <.LSM18>:
    pin_clear(&D[2]);
    5610:	40 a9 21    	mov.w     #0x1a94, w0
    5612:	3a f6 07    	rcall     0x4288 <_pin_clear>

00005614 <.LSM19>:
    enable_interrupts();
    5614:	52 20 ef    	clr.w     0x52

00005616 <.LSM20>:
}
    5616:	00 80 fa    	ulnk      
    5618:	00 00 06    	return    

0000561a <__timer_read_quad1>:

void _timer_read_quad1(_TIMER *timer) {
    561a:	02 00 fa    	lnk       #0x2
    561c:	00 0f 78    	mov.w     w0, [w14]

0000561e <.LSM22>:
    quad_read(&quad1);
    561e:	c0 db 21    	mov.w     #0x1dbc, w0
    5620:	9f ff 07    	rcall     0x5560 <_quad_read>

00005622 <.LSM23>:
}
    5622:	00 80 fa    	ulnk      
    5624:	00 00 06    	return    

00005626 <__timer_read_quad2>:

void _timer_read_quad2(_TIMER *timer) {
    5626:	02 00 fa    	lnk       #0x2
    5628:	00 0f 78    	mov.w     w0, [w14]

0000562a <.LSM25>:
    quad_read(&quad2);
    562a:	20 dd 21    	mov.w     #0x1dd2, w0
    562c:	99 ff 07    	rcall     0x5560 <_quad_read>

0000562e <.LSM26>:
}
    562e:	00 80 fa    	ulnk      
    5630:	00 00 06    	return    

00005632 <__read_quad1>:

void _read_quad1(void) {
    5632:	00 00 fa    	lnk       #0x0

00005634 <.LSM28>:
    quad_read(&quad1);
    5634:	c0 db 21    	mov.w     #0x1dbc, w0
    5636:	94 ff 07    	rcall     0x5560 <_quad_read>

00005638 <.LSM29>:
}
    5638:	00 80 fa    	ulnk      
    563a:	00 00 06    	return    

0000563c <__read_quad2>:

void _read_quad2(void) {
    563c:	00 00 fa    	lnk       #0x0

0000563e <.LSM31>:
    quad_read(&quad2);
    563e:	20 dd 21    	mov.w     #0x1dd2, w0
    5640:	8f ff 07    	rcall     0x5560 <_quad_read>

00005642 <.LSM32>:
}
    5642:	00 80 fa    	ulnk      
    5644:	00 00 06    	return    

00005646 <_init_quad_fxns>:

void init_quad_fxns(void) {
    5646:	00 00 fa    	lnk       #0x0

00005648 <.LSM34>:
    /*
    Attaches the proper reading functions to each quadrature encoder object.
    */
    quad1.read = _read_quad1;
    5648:	20 63 25    	mov.w     #0x5632, w0
    564a:	50 ee 88    	mov.w     w0, 0x1dca

0000564c <.LSM35>:
    quad2.read = _read_quad2;
    564c:	c0 63 25    	mov.w     #0x563c, w0
    564e:	00 ef 88    	mov.w     w0, 0x1de0

00005650 <.LSM36>:
    quad1.timer_read = _timer_read_quad1;
    5650:	a0 61 25    	mov.w     #0x561a, w0
    5652:	60 ee 88    	mov.w     w0, 0x1dcc

00005654 <.LSM37>:
    quad2.timer_read = _timer_read_quad2;
    5654:	60 62 25    	mov.w     #0x5626, w0
    5656:	10 ef 88    	mov.w     w0, 0x1de2

00005658 <.LSM38>:
}
    5658:	00 80 fa    	ulnk      
    565a:	00 00 06    	return    

0000565c <_init_quad_ids>:

void init_quad_ids(void) {
    565c:	00 00 fa    	lnk       #0x0

0000565e <.LSM40>:
    /*
    Gives each quadrature encoder object a numerical identifier.
    */
    quad1.identifier = 1;
    565e:	00 dc 21    	mov.w     #0x1dc0, w0
    5660:	11 c0 b3    	mov.b     #0x1, w1
    5662:	01 48 78    	mov.b     w1, [w0]

00005664 <.LSM41>:
    quad2.identifier = 2;
    5664:	60 dd 21    	mov.w     #0x1dd6, w0
    5666:	21 c0 b3    	mov.b     #0x2, w1
    5668:	01 48 78    	mov.b     w1, [w0]

0000566a <.LSM42>:
}
    566a:	00 80 fa    	ulnk      
    566c:	00 00 06    	return    

0000566e <_init_quad>:

void init_quad(void) {
    566e:	00 00 fa    	lnk       #0x0

00005670 <.LSM44>:
    /*
    Call this to initialize this quadrature library.
    */
    init_quad_ids();
    5670:	f5 ff 07    	rcall     0x565c <_init_quad_ids>

00005672 <.LSM45>:
    init_quad_fxns();
    5672:	e9 ff 07    	rcall     0x5646 <_init_quad_fxns>

00005674 <.LSM46>:
}
    5674:	00 80 fa    	ulnk      
    5676:	00 00 06    	return    

00005678 <_quad_init>:

void quad_init(_QUAD *self, _PIN *in_A, _PIN *in_B) {
    5678:	06 00 fa    	lnk       #0x6
    567a:	00 0f 78    	mov.w     w0, [w14]
    567c:	11 07 98    	mov.w     w1, [w14+2]
    567e:	22 07 98    	mov.w     w2, [w14+4]

00005680 <.LSM48>:
    /*
    Initializes a quadrature encoder object connected to two digital input pins,
    in_A and in_B.
    */
    self -> A = in_A;
    5680:	1e 00 78    	mov.w     [w14], w0
    5682:	9e 00 90    	mov.w     [w14+2], w1
    5684:	11 08 98    	mov.w     w1, [w0+18]

00005686 <.LSM49>:
    self -> B = in_B;
    5686:	1e 00 78    	mov.w     [w14], w0
    5688:	ae 00 90    	mov.w     [w14+4], w1
    568a:	21 08 98    	mov.w     w1, [w0+20]

0000568c <.LSM50>:
    self -> a_prev = 0;
    568c:	1e 00 78    	mov.w     [w14], w0
    568e:	80 40 eb    	clr.b     w1
    5690:	11 40 98    	mov.b     w1, [w0+1]

00005692 <.LSM51>:
    self -> b_prev = 0;
    5692:	1e 00 78    	mov.w     [w14], w0
    5694:	80 40 eb    	clr.b     w1
    5696:	31 40 98    	mov.b     w1, [w0+3]

00005698 <.LSM52>:
    self -> overflow = 0;
    5698:	1e 00 78    	mov.w     [w14], w0
    569a:	80 00 eb    	clr.w     w1
    569c:	51 00 98    	mov.w     w1, [w0+10]

0000569e <.LSM53>:
    self -> counter = 0;
    569e:	1e 01 78    	mov.w     [w14], w2
    56a0:	60 00 b8    	mul.uu    w0, #0x0, w0
    56a2:	30 01 98    	mov.w     w0, [w2+6]
    56a4:	41 01 98    	mov.w     w1, [w2+8]

000056a6 <.LSM54>:

    pin_digitalIn(in_A);
    56a6:	1e 00 90    	mov.w     [w14+2], w0
    56a8:	56 f5 07    	rcall     0x4156 <_pin_digitalIn>

000056aa <.LSM55>:
    pin_digitalIn(in_B);
    56aa:	2e 00 90    	mov.w     [w14+4], w0
    56ac:	54 f5 07    	rcall     0x4156 <_pin_digitalIn>

000056ae <.LSM56>:
}
    56ae:	00 80 fa    	ulnk      
    56b0:	00 00 06    	return    

000056b2 <_quad_every>:

void quad_every(_QUAD *self, _TIMER *timer, float interval) {
    56b2:	08 00 fa    	lnk       #0x8
    56b4:	00 0f 78    	mov.w     w0, [w14]
    56b6:	11 07 98    	mov.w     w1, [w14+2]
    56b8:	22 07 98    	mov.w     w2, [w14+4]
    56ba:	33 07 98    	mov.w     w3, [w14+6]

000056bc <.LSM58>:
    /*
    Given an initialized _QUAD object, configures it to utilize the given
    _TIMER's interrupts to read the _QUAD at the specified time interval.
    */
    timer_every(timer, interval, self -> timer_read);
    56bc:	1e 00 78    	mov.w     [w14], w0
    56be:	00 08 90    	mov.w     [w0+16], w0
    56c0:	80 00 78    	mov.w     w0, w1
    56c2:	2e 01 90    	mov.w     [w14+4], w2
    56c4:	be 01 90    	mov.w     [w14+6], w3
    56c6:	1e 00 90    	mov.w     [w14+2], w0
    56c8:	7d f3 07    	rcall     0x3dc4 <_timer_every>

000056ca <.LSM59>:
}
    56ca:	00 80 fa    	ulnk      
    56cc:	00 00 06    	return    

000056ce <_quad_debug>:


void quad_debug(_QUAD *self, _PIN *lut3, _PIN *lut2, _PIN *lut1, _PIN *lut0 ) {
    56ce:	0a 00 fa    	lnk       #0xa
    56d0:	00 0f 78    	mov.w     w0, [w14]
    56d2:	11 07 98    	mov.w     w1, [w14+2]
    56d4:	22 07 98    	mov.w     w2, [w14+4]
    56d6:	33 07 98    	mov.w     w3, [w14+6]
    56d8:	44 07 98    	mov.w     w4, [w14+8]

000056da <.LSM61>:
    /*
    Given a quadrature encoder object and four configured digital output pins,
    writes the value used to index the LUT across the four pins as follows--
        LUT Index Bit   |  Source
        [LSB --> MSB]   |
        ****************************************
              0 (LSB)   | most recent value of B
              1         | most recent value of A
              2         | previously read value of B
              3 (MSB)   | previously read value of A
    */
    pin_write(lut0, self -> b_curr); // b0
    56da:	1e 00 78    	mov.w     [w14], w0
    56dc:	20 40 90    	mov.b     [w0+2], w0
    56de:	00 80 fb    	ze        w0, w0
    56e0:	80 00 78    	mov.w     w0, w1
    56e2:	4e 00 90    	mov.w     [w14+8], w0
    56e4:	fc f5 07    	rcall     0x42de <_pin_write>

000056e6 <.LSM62>:
    pin_write(lut1, self -> a_curr); // b1
    56e6:	1e 00 78    	mov.w     [w14], w0
    56e8:	10 40 78    	mov.b     [w0], w0
    56ea:	00 80 fb    	ze        w0, w0
    56ec:	80 00 78    	mov.w     w0, w1
    56ee:	3e 00 90    	mov.w     [w14+6], w0
    56f0:	f6 f5 07    	rcall     0x42de <_pin_write>

000056f2 <.LSM63>:
    pin_write(lut2, self -> b_prev); // b2
    56f2:	1e 00 78    	mov.w     [w14], w0
    56f4:	30 40 90    	mov.b     [w0+3], w0
    56f6:	00 80 fb    	ze        w0, w0
    56f8:	80 00 78    	mov.w     w0, w1
    56fa:	2e 00 90    	mov.w     [w14+4], w0
    56fc:	f0 f5 07    	rcall     0x42de <_pin_write>

000056fe <.LSM64>:
    pin_write(lut3, self -> a_prev); // b3
    56fe:	1e 00 78    	mov.w     [w14], w0
    5700:	10 40 90    	mov.b     [w0+1], w0
    5702:	00 80 fb    	ze        w0, w0
    5704:	80 00 78    	mov.w     w0, w1
    5706:	1e 00 90    	mov.w     [w14+2], w0
    5708:	ea f5 07    	rcall     0x42de <_pin_write>

0000570a <.LSM65>:
}
    570a:	00 80 fa    	ulnk      
    570c:	00 00 06    	return    

0000570e <_quad_reset_counter>:

void quad_reset_counter(_QUAD *self) {
    570e:	02 00 fa    	lnk       #0x2
    5710:	00 0f 78    	mov.w     w0, [w14]

00005712 <.LSM67>:
    /*
    Resets the counter associated with the given quadrature encoder to zero.
    */
    self -> counter = 0;
    5712:	1e 01 78    	mov.w     [w14], w2
    5714:	60 00 b8    	mul.uu    w0, #0x0, w0
    5716:	30 01 98    	mov.w     w0, [w2+6]
    5718:	41 01 98    	mov.w     w1, [w2+8]

0000571a <.LSM68>:
}    571a:	00 80 fa    	ulnk      
    571c:	00 00 06    	return    

0000571e <_dcm_locked_antiphase_speed>:
#include "dcm.h"

_DCM dcm1, dcm2;

uint16_t dcm_locked_antiphase_speed(uint16_t std_speed, uint8_t dir) {
    571e:	06 00 fa    	lnk       #0x6
    5720:	10 07 98    	mov.w     w0, [w14+2]
    5722:	41 47 98    	mov.b     w1, [w14+4]

00005724 <.LSM1>:
    /*
    Returns a speed 'centered' around 32768 for use in locked-antiphase control
    mode. e.g.,
    32768 = dcm_locked_antiphase_speed(0, 1) = dcm_locked_antiphase_speed(0, 0)
    65535 = dcm_locked_antiphase_speed(65535, 1)
    0 = dcm_locked_antiphase_speed(65535, 0)
    */
    if (std_speed = 0) {
    5724:	00 00 eb    	clr.w     w0
    5726:	00 0f 78    	mov.w     w0, [w14]
    5728:	1e 00 78    	mov.w     [w14], w0
    572a:	00 00 e0    	cp0.w     w0
    572c:	02 00 32    	bra       Z, 0x5732 <.L2>

0000572e <.LSM2>:
        return 32768;
    572e:	00 00 28    	mov.w     #0x8000, w0
    5730:	0c 00 37    	bra       0x574a <.L3>

00005732 <.L2>:
    } else if (dir == 1) {
    5732:	4e 40 90    	mov.b     [w14+4], w0
    5734:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    5736:	05 00 3a    	bra       NZ, 0x5742 <.L4>

00005738 <.LSM4>:
        return (std_speed / 2) + 32768;
    5738:	1e 00 78    	mov.w     [w14], w0
    573a:	80 00 d1    	lsr.w     w0, w1
    573c:	00 00 28    	mov.w     #0x8000, w0
    573e:	00 80 40    	add.w     w1, w0, w0
    5740:	04 00 37    	bra       0x574a <.L3>

00005742 <.L4>:
    } else {
        return 32767 - (std_speed / 2);
    5742:	1e 00 78    	mov.w     [w14], w0
    5744:	00 00 d1    	lsr.w     w0, w0
    5746:	f1 ff 27    	mov.w     #0x7fff, w1
    5748:	00 80 50    	sub.w     w1, w0, w0

0000574a <.L3>:
    }
}
    574a:	00 80 fa    	ulnk      
    574c:	00 00 06    	return    

0000574e <_dcm_init>:

void dcm_init(_DCM *self, _PIN *pin_PWM, _PIN *pin_DIR, uint16_t freq, uint8_t mode, _OC *oc) {
    574e:	0c 00 fa    	lnk       #0xc
    5750:	88 1f 78    	mov.w     w8, [w15++]
    5752:	00 0f 78    	mov.w     w0, [w14]
    5754:	11 07 98    	mov.w     w1, [w14+2]
    5756:	22 07 98    	mov.w     w2, [w14+4]
    5758:	33 07 98    	mov.w     w3, [w14+6]
    575a:	04 4f 98    	mov.b     w4, [w14+8]
    575c:	55 07 98    	mov.w     w5, [w14+10]

0000575e <.LSM8>:
    self->dir = 0;
    575e:	1e 00 78    	mov.w     [w14], w0
    5760:	80 40 eb    	clr.b     w1
    5762:	01 48 78    	mov.b     w1, [w0]

00005764 <.LSM9>:
    self->speed = 0;
    5764:	1e 00 78    	mov.w     [w14], w0
    5766:	80 00 eb    	clr.w     w1
    5768:	11 00 98    	mov.w     w1, [w0+2]

0000576a <.LSM10>:
    self->freq = freq;
    576a:	1e 00 78    	mov.w     [w14], w0
    576c:	be 00 90    	mov.w     [w14+6], w1
    576e:	21 00 98    	mov.w     w1, [w0+4]

00005770 <.LSM11>:
    self->pin_PWM = pin_PWM;
    5770:	1e 00 78    	mov.w     [w14], w0
    5772:	9e 00 90    	mov.w     [w14+2], w1
    5774:	41 00 98    	mov.w     w1, [w0+8]

00005776 <.LSM12>:
    self->pin_DIR = pin_DIR;
    5776:	1e 00 78    	mov.w     [w14], w0
    5778:	ae 00 90    	mov.w     [w14+4], w1
    577a:	51 00 98    	mov.w     w1, [w0+10]

0000577c <.LSM13>:
    self->mode = mode;
    577c:	1e 00 78    	mov.w     [w14], w0
    577e:	8e 48 90    	mov.b     [w14+8], w1
    5780:	61 40 98    	mov.b     w1, [w0+6]

00005782 <.LSM14>:
    self->oc = oc;
    5782:	1e 00 78    	mov.w     [w14], w0
    5784:	de 00 90    	mov.w     [w14+10], w1
    5786:	61 00 98    	mov.w     w1, [w0+12]

00005788 <.LSM15>:
    if (mode == 1) {
    5788:	0e 48 90    	mov.b     [w14+8], w0
    578a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    578c:	1a 00 3a    	bra       NZ, 0x57c2 <.L6>

0000578e <.LSM16>:
        // Locked-antiphase PWM control mode
        oc_pwm(self->oc, self->pin_DIR, NULL, freq, dcm_locked_antiphase_speed(0, self -> dir));
    578e:	1e 00 78    	mov.w     [w14], w0
    5790:	10 40 78    	mov.b     [w0], w0
    5792:	80 40 78    	mov.b     w0, w1
    5794:	00 00 eb    	clr.w     w0
    5796:	c3 ff 07    	rcall     0x571e <_dcm_locked_antiphase_speed>
    5798:	00 04 78    	mov.w     w0, w8
    579a:	3e 00 90    	mov.w     [w14+6], w0
    579c:	80 00 eb    	clr.w     w1
    579e:	00 de 07    	rcall     0x13a0 <___floatunsisf>
    57a0:	1e 01 78    	mov.w     [w14], w2
    57a2:	d2 03 90    	mov.w     [w2+10], w7
    57a4:	1e 01 78    	mov.w     [w14], w2
    57a6:	62 03 90    	mov.w     [w2+12], w6
    57a8:	88 01 78    	mov.w     w8, w3
    57aa:	00 02 be    	mov.d     w0, w4
    57ac:	00 01 eb    	clr.w     w2
    57ae:	87 00 78    	mov.w     w7, w1
    57b0:	06 00 78    	mov.w     w6, w0
    57b2:	ca f6 07    	rcall     0x4548 <_oc_pwm>

000057b4 <.LSM17>:
        pin_digitalOut(self->pin_PWM);
    57b4:	1e 00 78    	mov.w     [w14], w0
    57b6:	40 00 90    	mov.w     [w0+8], w0
    57b8:	f5 f4 07    	rcall     0x41a4 <_pin_digitalOut>

000057ba <.LSM18>:
        pin_set(self->pin_PWM);
    57ba:	1e 00 78    	mov.w     [w14], w0
    57bc:	40 00 90    	mov.w     [w0+8], w0
    57be:	4f f5 07    	rcall     0x425e <_pin_set>
    57c0:	15 00 37    	bra       0x57ec <.L5>

000057c2 <.L6>:
    } else {
        // Sign-magnitude PWM control mode
        oc_pwm(self->oc, self->pin_PWM, NULL, freq, self->speed);
    57c2:	1e 00 78    	mov.w     [w14], w0
    57c4:	10 04 90    	mov.w     [w0+2], w8
    57c6:	3e 00 90    	mov.w     [w14+6], w0
    57c8:	80 00 eb    	clr.w     w1
    57ca:	ea dd 07    	rcall     0x13a0 <___floatunsisf>
    57cc:	1e 01 78    	mov.w     [w14], w2
    57ce:	c2 03 90    	mov.w     [w2+8], w7
    57d0:	1e 01 78    	mov.w     [w14], w2
    57d2:	62 03 90    	mov.w     [w2+12], w6
    57d4:	88 01 78    	mov.w     w8, w3
    57d6:	00 02 be    	mov.d     w0, w4
    57d8:	00 01 eb    	clr.w     w2
    57da:	87 00 78    	mov.w     w7, w1
    57dc:	06 00 78    	mov.w     w6, w0
    57de:	b4 f6 07    	rcall     0x4548 <_oc_pwm>

000057e0 <.LSM20>:
        pin_digitalOut(self->pin_DIR);
    57e0:	1e 00 78    	mov.w     [w14], w0
    57e2:	50 00 90    	mov.w     [w0+10], w0
    57e4:	df f4 07    	rcall     0x41a4 <_pin_digitalOut>

000057e6 <.LSM21>:
        pin_clear(self->pin_DIR);
    57e6:	1e 00 78    	mov.w     [w14], w0
    57e8:	50 00 90    	mov.w     [w0+10], w0
    57ea:	4e f5 07    	rcall     0x4288 <_pin_clear>

000057ec <.L5>:
    }
}
    57ec:	4f 04 78    	mov.w     [--w15], w8
    57ee:	00 80 fa    	ulnk      
    57f0:	00 00 06    	return    

000057f2 <_init_dcm>:

void init_dcm(void) {
    57f2:	00 00 fa    	lnk       #0x0

000057f4 <.LSM24>:
    /*
    Initialized DC Motor libary. Nothing to do here for the time being. Included
    to prevent calls (force of habit) from breaking.
    */
}
    57f4:	00 80 fa    	ulnk      
    57f6:	00 00 06    	return    

000057f8 <_dcm_run>:

void dcm_run(_DCM *self) {
    57f8:	02 00 fa    	lnk       #0x2
    57fa:	00 0f 78    	mov.w     w0, [w14]

000057fc <.LSM26>:
    dcm_velocity(self, self->speed, self->dir);
    57fc:	1e 00 78    	mov.w     [w14], w0
    57fe:	90 40 78    	mov.b     [w0], w1
    5800:	1e 00 78    	mov.w     [w14], w0
    5802:	10 00 90    	mov.w     [w0+2], w0
    5804:	01 41 78    	mov.b     w1, w2
    5806:	80 00 78    	mov.w     w0, w1
    5808:	1e 00 78    	mov.w     [w14], w0
    580a:	3f 00 07    	rcall     0x588a <_dcm_velocity>

0000580c <.LSM27>:
}
    580c:	00 80 fa    	ulnk      
    580e:	00 00 06    	return    

00005810 <_dcm_speed>:

void dcm_speed(_DCM *self, uint16_t speed) {
    5810:	06 00 fa    	lnk       #0x6
    5812:	10 07 98    	mov.w     w0, [w14+2]
    5814:	21 07 98    	mov.w     w1, [w14+4]

00005816 <.LSM29>:
    self->speed = speed;
    5816:	1e 00 90    	mov.w     [w14+2], w0
    5818:	ae 00 90    	mov.w     [w14+4], w1
    581a:	11 00 98    	mov.w     w1, [w0+2]

0000581c <.LSM30>:

    if (self->mode == 1) {
    581c:	1e 00 90    	mov.w     [w14+2], w0
    581e:	60 40 90    	mov.b     [w0+6], w0
    5820:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    5822:	0b 00 3a    	bra       NZ, 0x583a <.L11>

00005824 <.LBB2>:
        // Locked-antiphase PWM control mode
        uint16_t offset_speed = dcm_locked_antiphase_speed(speed, self->dir);
    5824:	1e 00 90    	mov.w     [w14+2], w0
    5826:	10 40 78    	mov.b     [w0], w0
    5828:	80 40 78    	mov.b     w0, w1
    582a:	2e 00 90    	mov.w     [w14+4], w0
    582c:	78 ff 07    	rcall     0x571e <_dcm_locked_antiphase_speed>
    582e:	00 0f 78    	mov.w     w0, [w14]

00005830 <.LSM32>:
        pin_write(self->pin_DIR, offset_speed);
    5830:	1e 00 90    	mov.w     [w14+2], w0
    5832:	50 00 90    	mov.w     [w0+10], w0
    5834:	9e 00 78    	mov.w     [w14], w1
    5836:	53 f5 07    	rcall     0x42de <_pin_write>
    5838:	04 00 37    	bra       0x5842 <.L10>

0000583a <.L11>:
    } else {
        // Sign-magnitude PWM control mode
        pin_write(self->pin_PWM, speed);
    583a:	1e 00 90    	mov.w     [w14+2], w0
    583c:	40 00 90    	mov.w     [w0+8], w0
    583e:	ae 00 90    	mov.w     [w14+4], w1
    5840:	4e f5 07    	rcall     0x42de <_pin_write>

00005842 <.L10>:
    }

}
    5842:	00 80 fa    	ulnk      
    5844:	00 00 06    	return    

00005846 <_dcm_direction>:

void dcm_direction(_DCM *self, uint8_t dir) {
    5846:	06 00 fa    	lnk       #0x6
    5848:	10 07 98    	mov.w     w0, [w14+2]
    584a:	41 47 98    	mov.b     w1, [w14+4]

0000584c <.LSM36>:
    if (self->dir == dir) {
    584c:	1e 00 90    	mov.w     [w14+2], w0
    584e:	90 40 78    	mov.b     [w0], w1
    5850:	4e 40 90    	mov.b     [w14+4], w0
    5852:	80 cf 50    	sub.b     w1, w0, [w15]
    5854:	17 00 32    	bra       Z, 0x5884 <.L17>

00005856 <.LSM37>:
        return;
    }
    self->dir = dir;
    5856:	1e 00 90    	mov.w     [w14+2], w0
    5858:	ce 40 90    	mov.b     [w14+4], w1
    585a:	01 48 78    	mov.b     w1, [w0]

0000585c <.LSM38>:
    if (self->mode == 1) {
    585c:	1e 00 90    	mov.w     [w14+2], w0
    585e:	60 40 90    	mov.b     [w0+6], w0
    5860:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    5862:	0a 00 3a    	bra       NZ, 0x5878 <.L16>

00005864 <.LBB3>:
        // Locked-antiphase PWM control mode
        // Recalculate and write speed.
        uint16_t offset_speed = dcm_locked_antiphase_speed(self->speed, dir);
    5864:	1e 00 90    	mov.w     [w14+2], w0
    5866:	10 00 90    	mov.w     [w0+2], w0
    5868:	ce 40 90    	mov.b     [w14+4], w1
    586a:	59 ff 07    	rcall     0x571e <_dcm_locked_antiphase_speed>
    586c:	00 0f 78    	mov.w     w0, [w14]

0000586e <.LSM40>:
        pin_write(self->pin_DIR, offset_speed);
    586e:	1e 00 90    	mov.w     [w14+2], w0
    5870:	50 00 90    	mov.w     [w0+10], w0
    5872:	9e 00 78    	mov.w     [w14], w1
    5874:	34 f5 07    	rcall     0x42de <_pin_write>
    5876:	07 00 37    	bra       0x5886 <.L13>

00005878 <.L16>:
    } else {
        // Sign-magnitude PWM control mode
        pin_write(self->pin_DIR, dir);
    5878:	4e 40 90    	mov.b     [w14+4], w0
    587a:	80 80 fb    	ze        w0, w1
    587c:	1e 00 90    	mov.w     [w14+2], w0
    587e:	50 00 90    	mov.w     [w0+10], w0
    5880:	2e f5 07    	rcall     0x42de <_pin_write>
    5882:	01 00 37    	bra       0x5886 <.L13>

00005884 <.L17>:
    5884:	00 00 00    	nop       

00005886 <.L13>:
    }
}
    5886:	00 80 fa    	ulnk      
    5888:	00 00 06    	return    

0000588a <_dcm_velocity>:

void dcm_velocity(_DCM *self, uint16_t speed, uint8_t dir) {
    588a:	06 00 fa    	lnk       #0x6
    588c:	00 0f 78    	mov.w     w0, [w14]
    588e:	11 07 98    	mov.w     w1, [w14+2]
    5890:	42 47 98    	mov.b     w2, [w14+4]

00005892 <.LSM45>:
    dcm_speed(self, speed);
    5892:	9e 00 90    	mov.w     [w14+2], w1
    5894:	1e 00 78    	mov.w     [w14], w0
    5896:	bc ff 07    	rcall     0x5810 <_dcm_speed>

00005898 <.LSM46>:
    dcm_direction(self, dir);
    5898:	ce 40 90    	mov.b     [w14+4], w1
    589a:	1e 00 78    	mov.w     [w14], w0
    589c:	d4 ff 07    	rcall     0x5846 <_dcm_direction>

0000589e <.LSM47>:
}
    589e:	00 80 fa    	ulnk      
    58a0:	00 00 06    	return    

000058a2 <_dcm_stop>:

void dcm_stop(_DCM *self) {
    58a2:	02 00 fa    	lnk       #0x2
    58a4:	00 0f 78    	mov.w     w0, [w14]

000058a6 <.LSM49>:
    /*
    Stops motor.
    */
    dcm_speed(self, 0);
    58a6:	80 00 eb    	clr.w     w1
    58a8:	1e 00 78    	mov.w     [w14], w0
    58aa:	b2 ff 07    	rcall     0x5810 <_dcm_speed>

000058ac <.LSM50>:
}    58ac:	00 80 fa    	ulnk      
    58ae:	00 00 06    	return    

000058b0 <_init_md>:
#include "md.h"

_MD md1, md2, mdp;

void init_md(void) {
    58b0:	00 00 fa    	lnk       #0x0

000058b2 <.LSM1>:
    md_init(&md1, &D[8], &D[7], 1e3, &oc7);
    58b2:	c4 c8 21    	mov.w     #0x1c8c, w4
    58b4:	83 3e 20    	mov.w     #0x3e8, w3
    58b6:	22 b0 21    	mov.w     #0x1b02, w2
    58b8:	81 b1 21    	mov.w     #0x1b18, w1
    58ba:	80 f3 21    	mov.w     #0x1f38, w0
    58bc:	02 00 07    	rcall     0x58c2 <_md_init>

000058be <.LSM2>:
}
    58be:	00 80 fa    	ulnk      
    58c0:	00 00 06    	return    

000058c2 <_md_init>:

void md_init(_MD *self, _PIN *pin1, _PIN *pin2, uint16_t freq, _OC *oc) {
    58c2:	0a 00 fa    	lnk       #0xa
    58c4:	00 0f 78    	mov.w     w0, [w14]
    58c6:	11 07 98    	mov.w     w1, [w14+2]
    58c8:	22 07 98    	mov.w     w2, [w14+4]
    58ca:	33 07 98    	mov.w     w3, [w14+6]
    58cc:	44 07 98    	mov.w     w4, [w14+8]

000058ce <.LSM4>:
    self->dir = 0;
    58ce:	1e 00 78    	mov.w     [w14], w0
    58d0:	80 40 eb    	clr.b     w1
    58d2:	01 48 78    	mov.b     w1, [w0]

000058d4 <.LSM5>:
    self->speed = 0;
    58d4:	1e 00 78    	mov.w     [w14], w0
    58d6:	80 00 eb    	clr.w     w1
    58d8:	11 00 98    	mov.w     w1, [w0+2]

000058da <.LSM6>:
    self->freq = freq;
    58da:	1e 00 78    	mov.w     [w14], w0
    58dc:	be 00 90    	mov.w     [w14+6], w1
    58de:	21 00 98    	mov.w     w1, [w0+4]

000058e0 <.LSM7>:
    self->pins[0] = pin1;
    58e0:	1e 00 78    	mov.w     [w14], w0
    58e2:	9e 00 90    	mov.w     [w14+2], w1
    58e4:	41 00 98    	mov.w     w1, [w0+8]

000058e6 <.LSM8>:
    self->pins[1] = pin2;
    58e6:	1e 00 78    	mov.w     [w14], w0
    58e8:	ae 00 90    	mov.w     [w14+4], w1
    58ea:	51 00 98    	mov.w     w1, [w0+10]

000058ec <.LSM9>:
    self->braked = 0;
    58ec:	1e 00 78    	mov.w     [w14], w0
    58ee:	80 40 eb    	clr.b     w1
    58f0:	61 40 98    	mov.b     w1, [w0+6]

000058f2 <.LSM10>:
    self->oc = oc;
    58f2:	1e 00 78    	mov.w     [w14], w0
    58f4:	ce 00 90    	mov.w     [w14+8], w1
    58f6:	61 00 98    	mov.w     w1, [w0+12]

000058f8 <.LSM11>:

    oc_pwm(self->oc, self->pins[0], &timer5, freq, 0);
    58f8:	3e 00 90    	mov.w     [w14+6], w0
    58fa:	80 00 eb    	clr.w     w1
    58fc:	51 dd 07    	rcall     0x13a0 <___floatunsisf>
    58fe:	1e 01 78    	mov.w     [w14], w2
    5900:	c2 03 90    	mov.w     [w2+8], w7
    5902:	1e 01 78    	mov.w     [w14], w2
    5904:	62 03 90    	mov.w     [w2+12], w6
    5906:	80 01 eb    	clr.w     w3
    5908:	00 02 be    	mov.d     w0, w4
    590a:	62 da 21    	mov.w     #0x1da6, w2
    590c:	87 00 78    	mov.w     w7, w1
    590e:	06 00 78    	mov.w     w6, w0
    5910:	1b f6 07    	rcall     0x4548 <_oc_pwm>

00005912 <.LSM12>:
    OC5CON2 = 0x000F; //synchronize to timer5
    5912:	f0 00 20    	mov.w     #0xf, w0
    5914:	d0 0d 88    	mov.w     w0, 0x1ba

00005916 <.LSM13>:
    OC7CON2 = 0x000F;
    5916:	f0 00 20    	mov.w     #0xf, w0
    5918:	70 0e 88    	mov.w     w0, 0x1ce

0000591a <.LSM14>:
    pin_digitalOut(self->pins[1]);
    591a:	1e 00 78    	mov.w     [w14], w0
    591c:	50 00 90    	mov.w     [w0+10], w0
    591e:	42 f4 07    	rcall     0x41a4 <_pin_digitalOut>

00005920 <.LSM15>:
    pin_clear(self->pins[1]);
    5920:	1e 00 78    	mov.w     [w14], w0
    5922:	50 00 90    	mov.w     [w0+10], w0
    5924:	b1 f4 07    	rcall     0x4288 <_pin_clear>

00005926 <.LSM16>:
}
    5926:	00 80 fa    	ulnk      
    5928:	00 00 06    	return    

0000592a <_md_free>:

void md_free(_MD *self) {
    592a:	02 00 fa    	lnk       #0x2
    592c:	00 0f 78    	mov.w     w0, [w14]

0000592e <.LSM18>:
    // clear owned pins/oc's
}
    592e:	00 80 fa    	ulnk      
    5930:	00 00 06    	return    

00005932 <_md_brake>:

void md_brake(_MD *self) {
    5932:	02 00 fa    	lnk       #0x2
    5934:	00 0f 78    	mov.w     w0, [w14]

00005936 <.LSM20>:
    self->braked = 1;
    5936:	1e 00 78    	mov.w     [w14], w0
    5938:	11 c0 b3    	mov.b     #0x1, w1
    593a:	61 40 98    	mov.b     w1, [w0+6]

0000593c <.LSM21>:
    pin_write(self->pins[0], 0);
    593c:	1e 00 78    	mov.w     [w14], w0
    593e:	40 00 90    	mov.w     [w0+8], w0
    5940:	80 00 eb    	clr.w     w1
    5942:	cd f4 07    	rcall     0x42de <_pin_write>

00005944 <.LSM22>:
    pin_write(self->pins[1], 0);
    5944:	1e 00 78    	mov.w     [w14], w0
    5946:	50 00 90    	mov.w     [w0+10], w0
    5948:	80 00 eb    	clr.w     w1
    594a:	c9 f4 07    	rcall     0x42de <_pin_write>

0000594c <.LSM23>:
}
    594c:	00 80 fa    	ulnk      
    594e:	00 00 06    	return    

00005950 <_md_run>:

void md_run(_MD *self) {
    5950:	02 00 fa    	lnk       #0x2
    5952:	00 0f 78    	mov.w     w0, [w14]

00005954 <.LSM25>:
    self->braked = 0;
    5954:	1e 00 78    	mov.w     [w14], w0
    5956:	80 40 eb    	clr.b     w1
    5958:	61 40 98    	mov.b     w1, [w0+6]

0000595a <.LSM26>:
    md_velocity(self, self->speed, self->dir);
    595a:	1e 00 78    	mov.w     [w14], w0
    595c:	90 40 78    	mov.b     [w0], w1
    595e:	1e 00 78    	mov.w     [w14], w0
    5960:	10 00 90    	mov.w     [w0+2], w0
    5962:	01 41 78    	mov.b     w1, w2
    5964:	80 00 78    	mov.w     w0, w1
    5966:	1e 00 78    	mov.w     [w14], w0
    5968:	4c 00 07    	rcall     0x5a02 <_md_velocity>

0000596a <.LSM27>:
}
    596a:	00 80 fa    	ulnk      
    596c:	00 00 06    	return    

0000596e <_md_speed>:

void md_speed(_MD *self, uint16_t speed) {
    596e:	04 00 fa    	lnk       #0x4
    5970:	00 0f 78    	mov.w     w0, [w14]
    5972:	11 07 98    	mov.w     w1, [w14+2]

00005974 <.LSM29>:
    self->speed = speed;
    5974:	1e 00 78    	mov.w     [w14], w0
    5976:	9e 00 90    	mov.w     [w14+2], w1
    5978:	11 00 98    	mov.w     w1, [w0+2]

0000597a <.LSM30>:
    
    if (!self->braked) {
    597a:	1e 00 78    	mov.w     [w14], w0
    597c:	60 40 90    	mov.b     [w0+6], w0
    597e:	00 04 e0    	cp0.b     w0
    5980:	09 00 3a    	bra       NZ, 0x5994 <.L6>

00005982 <.LSM31>:
        pin_write(self->pins[self->dir], speed);
    5982:	1e 00 78    	mov.w     [w14], w0
    5984:	10 40 78    	mov.b     [w0], w0
    5986:	00 80 fb    	ze        w0, w0
    5988:	9e 00 78    	mov.w     [w14], w1
    598a:	64 00 40    	add.w     w0, #0x4, w0
    598c:	00 00 40    	add.w     w0, w0, w0
    598e:	61 00 78    	mov.w     [w1+w0], w0
    5990:	9e 00 90    	mov.w     [w14+2], w1
    5992:	a5 f4 07    	rcall     0x42de <_pin_write>

00005994 <.L6>:
    }
}
    5994:	00 80 fa    	ulnk      
    5996:	00 00 06    	return    

00005998 <_md_direction>:

void md_direction(_MD *self, uint8_t dir) {
    5998:	04 00 fa    	lnk       #0x4
    599a:	88 1f 78    	mov.w     w8, [w15++]
    599c:	00 0f 78    	mov.w     w0, [w14]
    599e:	21 47 98    	mov.b     w1, [w14+2]

000059a0 <.LSM34>:
    if (self->dir == dir) {
    59a0:	1e 00 78    	mov.w     [w14], w0
    59a2:	90 40 78    	mov.b     [w0], w1
    59a4:	2e 40 90    	mov.b     [w14+2], w0
    59a6:	80 cf 50    	sub.b     w1, w0, [w15]
    59a8:	28 00 32    	bra       Z, 0x59fa <.L11>

000059aa <.LSM35>:
        return;
    }
    self->dir = dir;
    59aa:	1e 00 78    	mov.w     [w14], w0
    59ac:	ae 40 90    	mov.b     [w14+2], w1
    59ae:	01 48 78    	mov.b     w1, [w0]

000059b0 <.LSM36>:

    oc_free(self->oc);
    59b0:	1e 00 78    	mov.w     [w14], w0
    59b2:	60 00 90    	mov.w     [w0+12], w0
    59b4:	8a f5 07    	rcall     0x44ca <_oc_free>

000059b6 <.LSM37>:
    oc_pwm(self->oc, self->pins[dir], &timer5, self->freq, self->speed);
    59b6:	1e 00 78    	mov.w     [w14], w0
    59b8:	10 04 90    	mov.w     [w0+2], w8
    59ba:	1e 00 78    	mov.w     [w14], w0
    59bc:	20 00 90    	mov.w     [w0+4], w0
    59be:	80 00 eb    	clr.w     w1
    59c0:	ef dc 07    	rcall     0x13a0 <___floatunsisf>
    59c2:	2e 41 90    	mov.b     [w14+2], w2
    59c4:	02 81 fb    	ze        w2, w2
    59c6:	9e 01 78    	mov.w     [w14], w3
    59c8:	64 01 41    	add.w     w2, #0x4, w2
    59ca:	02 01 41    	add.w     w2, w2, w2
    59cc:	e3 03 79    	mov.w     [w3+w2], w7
    59ce:	1e 01 78    	mov.w     [w14], w2
    59d0:	62 03 90    	mov.w     [w2+12], w6
    59d2:	88 01 78    	mov.w     w8, w3
    59d4:	00 02 be    	mov.d     w0, w4
    59d6:	62 da 21    	mov.w     #0x1da6, w2
    59d8:	87 00 78    	mov.w     w7, w1
    59da:	06 00 78    	mov.w     w6, w0
    59dc:	b5 f5 07    	rcall     0x4548 <_oc_pwm>

000059de <.LSM38>:
    OC5CON2 = 0x000F; //synchronize to timer5
    59de:	f0 00 20    	mov.w     #0xf, w0
    59e0:	d0 0d 88    	mov.w     w0, 0x1ba

000059e2 <.LSM39>:
    OC7CON2 = 0x000F;
    59e2:	f0 00 20    	mov.w     #0xf, w0
    59e4:	70 0e 88    	mov.w     w0, 0x1ce

000059e6 <.LSM40>:
    pin_clear(self->pins[!dir]);
    59e6:	2e 40 90    	mov.b     [w14+2], w0
    59e8:	00 80 fb    	ze        w0, w0
    59ea:	00 00 e9    	dec.w     w0, w0
    59ec:	4f 00 de    	lsr.w     w0, #0xf, w0
    59ee:	9e 00 78    	mov.w     [w14], w1
    59f0:	64 00 40    	add.w     w0, #0x4, w0
    59f2:	00 00 40    	add.w     w0, w0, w0
    59f4:	61 00 78    	mov.w     [w1+w0], w0
    59f6:	48 f4 07    	rcall     0x4288 <_pin_clear>
    59f8:	01 00 37    	bra       0x59fc <.L8>

000059fa <.L11>:
    59fa:	00 00 00    	nop       

000059fc <.L8>:
}
    59fc:	4f 04 78    	mov.w     [--w15], w8
    59fe:	00 80 fa    	ulnk      
    5a00:	00 00 06    	return    

00005a02 <_md_velocity>:

void md_velocity(_MD *self, uint16_t speed, uint8_t dir) {
    5a02:	06 00 fa    	lnk       #0x6
    5a04:	00 0f 78    	mov.w     w0, [w14]
    5a06:	11 07 98    	mov.w     w1, [w14+2]
    5a08:	42 47 98    	mov.b     w2, [w14+4]

00005a0a <.LSM44>:
    md_speed(self, speed);
    5a0a:	9e 00 90    	mov.w     [w14+2], w1
    5a0c:	1e 00 78    	mov.w     [w14], w0
    5a0e:	af ff 07    	rcall     0x596e <_md_speed>

00005a10 <.LSM45>:
    md_direction(self, dir);
    5a10:	ce 40 90    	mov.b     [w14+4], w1
    5a12:	1e 00 78    	mov.w     [w14], w0
    5a14:	c1 ff 07    	rcall     0x5998 <_md_direction>

00005a16 <.LSM46>:
}    5a16:	00 80 fa    	ulnk      
    5a18:	00 00 06    	return    
Disassembly of section .dinit:

00005a1a <.dinit>:
    5a1a:	e8 11 00    	nop       
    5a1c:	80 08 00    	nop       
    5a1e:	80 00 00    	nop       
    5a20:	62 08 00    	nop       
    5a22:	0e 00 00    	nop       
    5a24:	80 00 00    	nop       
    5a26:	68 1a 00    	nop       
    5a28:	b8 01 00    	nop       
    5a2a:	80 00 00    	nop       
    5a2c:	00 08 00    	nop       
    5a2e:	30 00 00    	nop       
    5a30:	80 00 00    	nop       
    5a32:	e8 1d 00    	nop       
    5a34:	10 00 00    	nop       
    5a36:	82 00 00    	nop       
    5a38:	bd 37 86    	mov.w     0xc6f6, w13
    5a3a:	33 bd 37    	bra       0xffffd4a2
    5a3c:	06 35 bd    	subr.w    0x1506
    5a3e:	37 86 36    	bra       LEU, 0xffff66ae
    5a40:	bd 37 86    	mov.w     0xc6f6, w13
    5a42:	37 00 00    	nop       
    5a44:	4e 1d 00    	nop       
    5a46:	6e 00 00    	nop       
    5a48:	80 00 00    	nop       
    5a4a:	ba 1f 00    	nop       
    5a4c:	10 00 00    	nop       
    5a4e:	82 00 00    	nop       
    5a50:	00 ff 01    	.pword 0x01ff00
    5a52:	00 01 00    	nop       
    5a54:	00 ff ff    	nopr      
    5a56:	00 00 01    	call      w0
    5a58:	00 01 ff    	nopr      
    5a5a:	00 00 00    	nop       
    5a5c:	bc 1d 00    	nop       
    5a5e:	2c 00 00    	nop       
    5a60:	80 00 00    	nop       
    5a62:	80 1e 00    	nop       
    5a64:	6e 00 00    	nop       
    5a66:	80 00 00    	nop       
    5a68:	ca 1f 00    	nop       
    5a6a:	0a 00 00    	nop       
    5a6c:	80 00 00    	nop       
    5a6e:	30 08 00    	nop       
    5a70:	20 00 00    	nop       
    5a72:	80 00 00    	nop       
    5a74:	74 08 00    	nop       
    5a76:	74 09 00    	nop       
    5a78:	80 00 00    	nop       
    5a7a:	70 08 00    	nop       
    5a7c:	04 00 00    	nop       
    5a7e:	80 00 00    	nop       
    5a80:	38 1f 00    	nop       
    5a82:	2a 00 00    	nop       
    5a84:	80 00 00    	nop       
    5a86:	20 1c 00    	nop       
    5a88:	a2 00 00    	nop       
    5a8a:	80 00 00    	nop       
    5a8c:	c2 1c 00    	nop       
    5a8e:	8c 00 00    	nop       
    5a90:	80 00 00    	nop       
    5a92:	00 1e 00    	nop       
    5a94:	80 00 00    	nop       
    5a96:	80 00 00    	nop       
    5a98:	50 08 00    	nop       
    5a9a:	12 00 00    	nop       
    5a9c:	80 00 00    	nop       
    5a9e:	84 1f 00    	nop       
    5aa0:	1c 00 00    	nop       
    5aa2:	80 00 00    	nop       
    5aa4:	ee 1e 00    	nop       
    5aa6:	4a 00 00    	nop       
    5aa8:	82 00 00    	nop       
    5aaa:	30 31 32    	bra       Z, 0xbd0c
    5aac:	33 34 35    	bra       LT, 0xc314
    5aae:	36 37 38    	bra       NOV, 0xc91c
    5ab0:	39 61 62    	and.b     w4, [w9++], [--w2]
    5ab2:	63 64 65    	and.b     w10, #0x3, [--w8]
    5ab4:	66 67 68    	xor.b     w0, #0x6, [--w14]
    5ab6:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    5ab8:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    5aba:	6f 70 71    	.pword 0x71706f
    5abc:	72 73 74    	.pword 0x747372
    5abe:	75 76 77    	.pword 0x777675
    5ac0:	78 79 7a    	.pword 0x7a7978
    5ac2:	00 00 00    	nop       
    5ac4:	21 15 11    	subr.w    w2, [w1--], [w10--]
    5ac6:	0e 0d 0c    	bra       OA, 0x74e4
    5ac8:	0b 0b 0a    	bfins     #0xb, #0x0, w9, w10
    5aca:	0a 09 09 
    5acc:	09 09 09    	repeat    #0x909
    5ace:	08 08 08    	do        #0x808, 0x6ae2
    5ad0:	08 08 08 
    5ad2:	08 07 07    	rcall     0x68e4
    5ad4:	07 07 07    	rcall     0x68e4
    5ad6:	07 07 07    	rcall     0x68e6
    5ad8:	07 07 07    	rcall     0x68e8
    5ada:	07 07 00    	nop       
    5adc:	f8 1d 00    	nop       
    5ade:	04 00 00    	nop       
    5ae0:	80 00 00    	nop       
    5ae2:	a0 1f 00    	nop       
    5ae4:	1a 00 00    	nop       
    5ae6:	82 00 00    	nop       
    5ae8:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    5aea:	74 7a 4c    	.pword 0x4c7a74
    5aec:	00 00 01    	call      w0
    5aee:	00 02 00    	nop       
    5af0:	04 00 08    	do        #0x4, 0x7af4
    5af2:	00 10 00 
    5af4:	00 00 20    	mov.w     #0x0, w0
    5af6:	2b 2d 23    	mov.w     #0x32d2, w11
    5af8:	30 00 00    	nop       
    5afa:	62 1f 00    	nop       
    5afc:	22 00 00    	nop       
    5afe:	82 00 00    	nop       
    5b00:	30 31 32    	bra       Z, 0xbd62
    5b02:	33 34 35    	bra       LT, 0xc36a
    5b04:	36 37 38    	bra       NOV, 0xc972
    5b06:	39 41 42    	add.b     w4, [w9++], w2
    5b08:	43 44 45    	add.b     w10, [--w3], w8
    5b0a:	46 00 30    	bra       OV, 0x5b98
    5b0c:	31 32 33    	bra       N, 0xbf70
    5b0e:	34 35 36    	bra       LEU, 0xc578
    5b10:	37 38 39    	bra       NC, 0xcb80
    5b12:	61 62 63    	and.b     w6, #0x1, [--w4]
    5b14:	64 65 66    	and.b     w12, #0x4, [--w10]
	...
Disassembly of section .text:

00005b1a <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    5b1a:	02 00 fa    	lnk       #0x2
    5b1c:	00 0f 78    	mov.w     w0, [w14]

00005b1e <.LSM1>:
    v ^= v >> 8;
    5b1e:	1e 00 78    	mov.w     [w14], w0
    5b20:	48 00 de    	lsr.w     w0, #0x8, w0
    5b22:	1e 0f 68    	xor.w     w0, [w14], [w14]

00005b24 <.LSM2>:
    v ^= v >> 4;
    5b24:	1e 00 78    	mov.w     [w14], w0
    5b26:	44 00 de    	lsr.w     w0, #0x4, w0
    5b28:	1e 0f 68    	xor.w     w0, [w14], [w14]

00005b2a <.LSM3>:
    v ^= v >> 2;
    5b2a:	1e 00 78    	mov.w     [w14], w0
    5b2c:	42 00 de    	lsr.w     w0, #0x2, w0
    5b2e:	1e 0f 68    	xor.w     w0, [w14], [w14]

00005b30 <.LSM4>:
    v ^= v >> 1;
    5b30:	1e 00 78    	mov.w     [w14], w0
    5b32:	00 00 d1    	lsr.w     w0, w0
    5b34:	1e 0f 68    	xor.w     w0, [w14], [w14]

00005b36 <.LSM5>:
    return v & 1;
    5b36:	1e 00 78    	mov.w     [w14], w0
    5b38:	00 40 78    	mov.b     w0, w0
    5b3a:	61 40 60    	and.b     w0, #0x1, w0

00005b3c <.LSM6>:
}
    5b3c:	00 80 fa    	ulnk      
    5b3e:	00 00 06    	return    
Disassembly of section .init.delay32:

00005b40 <___delay32>:
    5b40:	f0 3f b1    	sub.w     #0x3ff, w0
    5b42:	01 80 b1    	subb.w    #0x0, w1
    5b44:	06 00 35    	bra       LT, 0x5b52 <L21>

00005b46 <L41>:
    5b46:	ee 03 09    	repeat    #0x3ee
    5b48:	00 00 00    	nop       
    5b4a:	40 3f b1    	sub.w     #0x3f4, w0
    5b4c:	01 80 b1    	subb.w    #0x0, w1
    5b4e:	fb ff 3d    	bra       GE, 0x5b46 <L41>
    5b50:	10 00 b0    	add.w     #0x1, w0

00005b52 <L21>:
    5b52:	20 3f b0    	add.w     #0x3f2, w0
    5b54:	02 00 35    	bra       LT, 0x5b5a <L31>
    5b56:	00 80 09    	repeat    w0
    5b58:	00 00 00    	nop       

00005b5a <L31>:
    5b5a:	00 00 06    	return    
Disassembly of section .isr:

00005b5c <__DefaultInterrupt>:
    5b5c:	00 40 da    	.pword 0xda4000
    5b5e:	00 00 fe    	reset     
