
rocket_main.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	4f 57 21    	mov.w     #0x1574, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	00 94 24    	mov.w     #0x4940, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	40 44 02    	call      0x4440 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	c0 00 20    	mov.w     #0xc, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	c4 39 04    	goto      0x39c4 <___digitalRead>
    11e4:	00 00 00 
    11e6:	80 39 04    	goto      0x3980 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	e6 39 04    	goto      0x39e6 <___analogRead>
    11ec:	00 00 00 
    11ee:	06 27 04    	goto      0x2706 <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	48 27 04    	goto      0x2748 <___putc_buffer>
    11f4:	00 00 00 
    11f6:	2a 27 04    	goto      0x272a <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	40 28 04    	goto      0x2840 <___getc_buffer>
    11fc:	00 00 00 
    11fe:	70 3e 04    	goto      0x3e70 <___pwmWrite>
    1200:	00 00 00 
    1202:	42 3e 04    	goto      0x3e42 <___pwmRead>
    1204:	00 00 00 
    1206:	da 3e 04    	goto      0x3eda <___servoWrite>
    1208:	00 00 00 
    120a:	a8 3e 04    	goto      0x3ea8 <___servoRead>
    120c:	00 00 00 
    120e:	8c 19 04    	goto      0x198c <_prout>
    1210:	00 00 00 
    1212:	f0 23 04    	goto      0x23f0 <_closeall>
    1214:	00 00 00 
    1216:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    1218:	00 00 00 

0000121a <_close>:
    121a:	0a 00 fa    	lnk       #0xa
    121c:	11 00 20    	mov.w     #0x1, w1
    121e:	b1 bf 9f    	mov.w     w1, [w15-10]
    1220:	c0 bf 9f    	mov.w     w0, [w15-8]
    1222:	6a 80 57    	sub.w     w15, #0xa, w0
    1224:	01 09 07    	rcall     0x2428 <_doclose>
    1226:	4f b8 97    	mov.w     [w15-8], w0
    1228:	00 80 fa    	ulnk      
    122a:	00 00 06    	return    

0000122c <_remove>:
    122c:	0a 00 fa    	lnk       #0xa
    122e:	51 00 20    	mov.w     #0x5, w1
    1230:	b1 bf 9f    	mov.w     w1, [w15-10]
    1232:	c0 bf 9f    	mov.w     w0, [w15-8]
    1234:	6a 80 57    	sub.w     w15, #0xa, w0
    1236:	fa 08 07    	rcall     0x242c <_doremove>
    1238:	5f b8 97    	mov.w     [w15-6], w0
    123a:	00 80 fa    	ulnk      
    123c:	00 00 06    	return    

0000123e <_sbrk>:
    123e:	88 9f be    	mov.d     w8, [w15++]
    1240:	80 04 78    	mov.w     w0, w9
    1242:	90 ab 80    	mov.w     0x1572, w0
    1244:	00 00 e0    	cp0.w     w0
    1246:	04 00 3a    	bra       NZ, 0x1250 <.L2>
    1248:	0e 00 07    	rcall     0x1266 <_brk>
    124a:	00 84 eb    	setm.w    w8
    124c:	00 00 e0    	cp0.w     w0
    124e:	08 00 35    	bra       LT, 0x1260 <.L3>

00001250 <.L2>:
    1250:	98 ab 80    	mov.w     0x1572, w8
    1252:	09 00 e0    	cp0.w     w9
    1254:	05 00 32    	bra       Z, 0x1260 <.L3>
    1256:	09 00 44    	add.w     w8, w9, w0
    1258:	06 00 07    	rcall     0x1266 <_brk>
    125a:	00 00 e0    	cp0.w     w0
    125c:	01 00 3d    	bra       GE, 0x1260 <.L3>
    125e:	00 84 eb    	setm.w    w8

00001260 <.L3>:
    1260:	08 00 78    	mov.w     w8, w0
    1262:	4f 04 be    	mov.d     [--w15], w8
    1264:	00 00 06    	return    

00001266 <_brk>:
    1266:	80 00 78    	mov.w     w0, w1
    1268:	01 00 e0    	cp0.w     w1
    126a:	03 00 3a    	bra       NZ, 0x1272 <.L2>
    126c:	00 00 20    	mov.w     #0x0, w0
    126e:	90 ab 88    	mov.w     w0, 0x1572
    1270:	00 00 05    	retlw.w   #0x0, w0

00001272 <.L2>:
    1272:	00 80 eb    	setm.w    w0
    1274:	02 00 20    	mov.w     #0x0, w2
    1276:	82 8f 50    	sub.w     w1, w2, [w15]
    1278:	02 00 3e    	bra       GTU, 0x127e <.L3>
    127a:	91 ab 88    	mov.w     w1, 0x1572
    127c:	00 00 eb    	clr.w     w0

0000127e <.L3>:
    127e:	00 00 06    	return    

00001280 <___subsf3>:
    1280:	03 f0 a2    	btg.w     w3, #0xf

00001282 <___addsf3>:
    1282:	88 9f be    	mov.d     w8, [w15++]
    1284:	8a 9f be    	mov.d     w10, [w15++]
    1286:	8c 1f 78    	mov.w     w12, [w15++]
    1288:	f7 00 07    	rcall     0x1478 <__funpack2>
    128a:	fe 00 33    	bra       N, 0x1488 <__fPropagateNaN>
    128c:	64 50 e1    	cp.w      w10, #0x4
    128e:	4f 00 32    	bra       Z, 0x132e <aisinfinite>

00001290 <checkspecialb>:
    1290:	64 20 e1    	cp.w      w4, #0x4
    1292:	52 00 32    	bra       Z, 0x1338 <return2>
    1294:	03 82 6c    	xor.w     w9, w3, w4
    1296:	07 00 3b    	bra       NN, 0x12a6 <getsign>
    1298:	09 05 d0    	sl.w      w9, w10
    129a:	03 06 d0    	sl.w      w3, w12
    129c:	82 0f 54    	sub.w     w8, w2, [w15]
    129e:	0c 06 5d    	subb.w    w10, w12, w12
    12a0:	02 00 39    	bra       NC, 0x12a6 <getsign>
    12a2:	02 00 32    	bra       Z, 0x12a8 <gotsign>
    12a4:	89 01 78    	mov.w     w9, w3

000012a6 <getsign>:
    12a6:	03 06 78    	mov.w     w3, w12

000012a8 <gotsign>:
    12a8:	85 82 55    	sub.w     w11, w5, w5
    12aa:	04 00 3d    	bra       GE, 0x12b4 <expcanonical>
    12ac:	00 03 fd    	exch      w0, w6
    12ae:	81 03 fd    	exch      w1, w7
    12b0:	85 02 ea    	neg.w     w5, w5
    12b2:	8b 85 42    	add.w     w5, w11, w11

000012b4 <expcanonical>:
    12b4:	84 0f 72    	ior.w     w4, w4, [w15]
    12b6:	02 00 3b    	bra       NN, 0x12bc <nonegate>
    12b8:	60 00 10    	subr.w    w0, #0x0, w0
    12ba:	e0 80 18    	subbr.w   w1, #0x0, w1

000012bc <nonegate>:
    12bc:	60 11 b8    	mul.uu    w2, #0x0, w2
    12be:	00 05 eb    	clr.w     w10
    12c0:	7a 28 e1    	cp.w      w5, #0x1a
    12c2:	0a 00 39    	bra       NC, 0x12d8 <aligniter>
    12c4:	06 00 78    	mov.w     w6, w0
    12c6:	c7 5d dd    	sl.w      w11, #0x7, w11
    12c8:	f7 07 b2    	and.w     #0x7f, w7
    12ca:	87 80 75    	ior.w     w11, w7, w1
    12cc:	2d 00 37    	bra       0x1328 <signoff>

000012ce <align>:
    12ce:	82 81 71    	ior.w     w3, w2, w3
    12d0:	0a 01 78    	mov.w     w10, w2
    12d2:	61 05 60    	and.w     w0, #0x1, w10
    12d4:	81 80 d1    	asr.w     w1, w1
    12d6:	00 80 d3    	rrc.w     w0, w0

000012d8 <aligniter>:
    12d8:	85 02 e9    	dec.w     w5, w5
    12da:	f9 ff 3b    	bra       NN, 0x12ce <align>

000012dc <aligned>:
    12dc:	06 04 40    	add.w     w0, w6, w8
    12de:	87 84 48    	addc.w    w1, w7, w9
    12e0:	02 00 3b    	bra       NN, 0x12e6 <normalizesum>
    12e2:	60 04 14    	subr.w    w8, #0x0, w8
    12e4:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012e6 <normalizesum>:
    12e6:	09 88 a3    	btst.z    w9, #0x8
    12e8:	07 00 32    	bra       Z, 0x12f8 <checknormal>
    12ea:	8a 81 71    	ior.w     w3, w10, w3
    12ec:	82 81 71    	ior.w     w3, w2, w3
    12ee:	61 01 64    	and.w     w8, #0x1, w2
    12f0:	89 04 d1    	lsr.w     w9, w9
    12f2:	08 84 d3    	rrc.w     w8, w8
    12f4:	8b 05 e8    	inc.w     w11, w11
    12f6:	17 00 37    	bra       0x1326 <round>

000012f8 <checknormal>:
    12f8:	09 78 a3    	btst.z    w9, #0x7
    12fa:	13 00 3a    	bra       NZ, 0x1322 <discardguard>

000012fc <underflow>:
    12fc:	0b 00 e0    	cp0.w     w11
    12fe:	13 00 34    	bra       LE, 0x1326 <round>
    1300:	8b 05 e9    	dec.w     w11, w11
    1302:	08 04 44    	add.w     w8, w8, w8
    1304:	89 84 4c    	addc.w    w9, w9, w9
    1306:	0a 44 74    	ior.b     w8, w10, w8
    1308:	09 78 a3    	btst.z    w9, #0x7
    130a:	0d 00 3a    	bra       NZ, 0x1326 <round>

0000130c <normalizeloop>:
    130c:	0b 00 e0    	cp0.w     w11
    130e:	07 00 34    	bra       LE, 0x131e <normalizeexit>
    1310:	8b 05 e9    	dec.w     w11, w11
    1312:	08 04 44    	add.w     w8, w8, w8
    1314:	89 84 4c    	addc.w    w9, w9, w9
    1316:	01 00 3a    	bra       NZ, 0x131a <normalizetest>
    1318:	0b 00 20    	mov.w     #0x0, w11

0000131a <normalizetest>:
    131a:	09 78 a3    	btst.z    w9, #0x7
    131c:	f7 ff 32    	bra       Z, 0x130c <normalizeloop>

0000131e <normalizeexit>:
    131e:	00 01 eb    	clr.w     w2
    1320:	02 00 37    	bra       0x1326 <round>

00001322 <discardguard>:
    1322:	82 81 71    	ior.w     w3, w2, w3
    1324:	0a 01 78    	mov.w     w10, w2

00001326 <round>:
    1326:	6d 00 07    	rcall     0x1402 <__fpack>

00001328 <signoff>:
    1328:	0c f0 a7    	btsc.w    w12, #0xf
    132a:	01 f0 a0    	bset.w    w1, #0xf
    132c:	b6 00 37    	bra       0x149a <__fbopExit>

0000132e <aisinfinite>:
    132e:	64 20 e1    	cp.w      w4, #0x4
    1330:	02 00 3a    	bra       NZ, 0x1336 <return8>
    1332:	83 8f 6c    	xor.w     w9, w3, [w15]
    1334:	b6 00 33    	bra       N, 0x14a2 <__fbopReturnNaN>

00001336 <return8>:
    1336:	08 01 be    	mov.d     w8, w2

00001338 <return2>:
    1338:	02 00 be    	mov.d     w2, w0
    133a:	af 00 37    	bra       0x149a <__fbopExit>

0000133c <___divsf3>:
    133c:	88 9f be    	mov.d     w8, [w15++]
    133e:	8a 9f be    	mov.d     w10, [w15++]
    1340:	8c 1f 78    	mov.w     w12, [w15++]
    1342:	9a 00 07    	rcall     0x1478 <__funpack2>
    1344:	a1 00 33    	bra       N, 0x1488 <__fPropagateNaN>
    1346:	03 86 6c    	xor.w     w9, w3, w12
    1348:	64 50 e1    	cp.w      w10, #0x4
    134a:	2e 00 32    	bra       Z, 0x13a8 <aisinfinite>
    134c:	64 20 e1    	cp.w      w4, #0x4
    134e:	33 00 32    	bra       Z, 0x13b6 <returnZero>
    1350:	61 50 e1    	cp.w      w10, #0x1
    1352:	2f 00 32    	bra       Z, 0x13b2 <aiszero>
    1354:	61 20 e1    	cp.w      w4, #0x1
    1356:	31 00 32    	bra       Z, 0x13ba <returnInf>

00001358 <finitenonzero>:
    1358:	85 85 55    	sub.w     w11, w5, w11
    135a:	eb 07 b0    	add.w     #0x7e, w11
    135c:	09 00 20    	mov.w     #0x0, w9
    135e:	08 04 20    	mov.w     #0x40, w8
    1360:	05 00 37    	bra       0x136c <diventry>

00001362 <divnext>:
    1362:	08 04 44    	add.w     w8, w8, w8
    1364:	89 84 4c    	addc.w    w9, w9, w9
    1366:	0a 00 31    	bra       C, 0x137c <divdone>

00001368 <divloop>:
    1368:	06 03 43    	add.w     w6, w6, w6
    136a:	87 83 4b    	addc.w    w7, w7, w7

0000136c <diventry>:
    136c:	00 01 53    	sub.w     w6, w0, w2
    136e:	81 81 5b    	subb.w    w7, w1, w3
    1370:	f8 ff 33    	bra       N, 0x1362 <divnext>
    1372:	02 03 be    	mov.d     w2, w6
    1374:	08 00 a0    	bset.w    w8, #0x0
    1376:	08 04 44    	add.w     w8, w8, w8
    1378:	89 84 4c    	addc.w    w9, w9, w9
    137a:	f6 ff 39    	bra       NC, 0x1368 <divloop>

0000137c <divdone>:
    137c:	c6 39 dd    	sl.w      w7, #0x6, w3
    137e:	83 01 73    	ior.w     w6, w3, w3
    1380:	01 00 32    	bra       Z, 0x1384 <stickyok>
    1382:	13 00 20    	mov.w     #0x1, w3

00001384 <stickyok>:
    1384:	89 04 d1    	lsr.w     w9, w9
    1386:	08 84 d3    	rrc.w     w8, w8
    1388:	09 98 a3    	btst.z    w9, #0x9
    138a:	05 00 32    	bra       Z, 0x1396 <guardused>
    138c:	08 00 a7    	btsc.w    w8, #0x0
    138e:	03 00 a0    	bset.w    w3, #0x0
    1390:	89 04 d1    	lsr.w     w9, w9
    1392:	08 84 d3    	rrc.w     w8, w8
    1394:	8b 05 e8    	inc.w     w11, w11

00001396 <guardused>:
    1396:	89 04 d1    	lsr.w     w9, w9
    1398:	08 84 d3    	rrc.w     w8, w8
    139a:	00 01 eb    	clr.w     w2
    139c:	02 81 d2    	rlc.w     w2, w2
    139e:	31 00 07    	rcall     0x1402 <__fpack>

000013a0 <return0>:
    13a0:	01 f0 a1    	bclr.w    w1, #0xf
    13a2:	0c f0 a7    	btsc.w    w12, #0xf
    13a4:	01 f0 a0    	bset.w    w1, #0xf
    13a6:	79 00 37    	bra       0x149a <__fbopExit>

000013a8 <aisinfinite>:
    13a8:	64 20 e1    	cp.w      w4, #0x4
    13aa:	7b 00 32    	bra       Z, 0x14a2 <__fbopReturnNaN>

000013ac <return8>:
    13ac:	08 01 be    	mov.d     w8, w2

000013ae <return2>:
    13ae:	02 00 be    	mov.d     w2, w0
    13b0:	f7 ff 37    	bra       0x13a0 <return0>

000013b2 <aiszero>:
    13b2:	61 20 e1    	cp.w      w4, #0x1
    13b4:	76 00 32    	bra       Z, 0x14a2 <__fbopReturnNaN>

000013b6 <returnZero>:
    13b6:	60 00 b8    	mul.uu    w0, #0x0, w0
    13b8:	f3 ff 37    	bra       0x13a0 <return0>

000013ba <returnInf>:
    13ba:	00 00 20    	mov.w     #0x0, w0
    13bc:	01 f8 27    	mov.w     #0x7f80, w1
    13be:	f0 ff 37    	bra       0x13a0 <return0>

000013c0 <___eqsf2>:
    13c0:	14 00 20    	mov.w     #0x1, w4
    13c2:	b6 00 37    	bra       0x1530 <__fcompare>

000013c4 <___gesf2>:
    13c4:	f4 ff 2f    	mov.w     #0xffff, w4
    13c6:	b4 00 37    	bra       0x1530 <__fcompare>

000013c8 <___fixunssfsi>:
    13c8:	00 01 be    	mov.d     w0, w2
    13ca:	41 00 07    	rcall     0x144e <__funpack>
    13cc:	04 70 a7    	btsc.w    w4, #0x7
    13ce:	03 f0 a1    	bclr.w    w3, #0xf
    13d0:	03 f8 a3    	btst.z    w3, #0xf
    13d2:	13 00 3a    	bra       NZ, 0x13fa <returnzero>
    13d4:	65 09 b1    	sub.w     #0x96, w5
    13d6:	10 00 32    	bra       Z, 0x13f8 <exit>
    13d8:	09 00 35    	bra       LT, 0x13ec <shiftright>
    13da:	69 28 e1    	cp.w      w5, #0x9
    13dc:	02 00 35    	bra       LT, 0x13e2 <shiftleft>
    13de:	01 00 28    	mov.w     #0x8000, w1
    13e0:	00 00 05    	retlw.w   #0x0, w0

000013e2 <shiftleft>:
    13e2:	00 00 40    	add.w     w0, w0, w0
    13e4:	81 80 48    	addc.w    w1, w1, w1
    13e6:	85 02 e9    	dec.w     w5, w5
    13e8:	fc ff 3a    	bra       NZ, 0x13e2 <shiftleft>
    13ea:	00 00 06    	return    

000013ec <shiftright>:
    13ec:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13ee:	05 00 35    	bra       LT, 0x13fa <returnzero>

000013f0 <shiftrightloop>:
    13f0:	81 00 d1    	lsr.w     w1, w1
    13f2:	00 80 d3    	rrc.w     w0, w0
    13f4:	85 02 e8    	inc.w     w5, w5
    13f6:	fc ff 3a    	bra       NZ, 0x13f0 <shiftrightloop>

000013f8 <exit>:
    13f8:	00 00 06    	return    

000013fa <returnzero>:
    13fa:	80 00 eb    	clr.w     w1
    13fc:	00 00 05    	retlw.w   #0x0, w0

000013fe <___floatunsisf>:
    13fe:	60 11 b8    	mul.uu    w2, #0x0, w2
    1400:	b2 00 37    	bra       0x1566 <___floatundisf>

00001402 <__fpack>:
    1402:	81 00 20    	mov.w     #0x8, w1
    1404:	61 80 55    	sub.w     w11, #0x1, w0
    1406:	0b 00 3d    	bra       GE, 0x141e <notsubnormal>
    1408:	0b 00 20    	mov.w     #0x0, w11
    140a:	61 fe 2f    	mov.w     #0xffe6, w1
    140c:	01 00 e1    	cp.w      w0, w1
    140e:	1d 00 34    	bra       LE, 0x144a <zerosig>

00001410 <subnormal>:
    1410:	82 81 71    	ior.w     w3, w2, w3
    1412:	61 01 64    	and.w     w8, #0x1, w2
    1414:	89 04 d1    	lsr.w     w9, w9
    1416:	08 84 d3    	rrc.w     w8, w8
    1418:	00 00 e8    	inc.w     w0, w0
    141a:	fa ff 3a    	bra       NZ, 0x1410 <subnormal>
    141c:	71 00 20    	mov.w     #0x7, w1

0000141e <notsubnormal>:
    141e:	61 00 64    	and.w     w8, #0x1, w0
    1420:	03 00 70    	ior.w     w0, w3, w0
    1422:	02 00 60    	and.w     w0, w2, w0
    1424:	09 00 32    	bra       Z, 0x1438 <packupandgo>
    1426:	61 04 44    	add.w     w8, #0x1, w8
    1428:	e0 84 4c    	addc.w    w9, #0x0, w9
    142a:	09 88 a5    	btst.z    w9, w1
    142c:	05 00 32    	bra       Z, 0x1438 <packupandgo>
    142e:	8b 05 e8    	inc.w     w11, w11
    1430:	68 08 e1    	cp.w      w1, #0x8
    1432:	02 00 3a    	bra       NZ, 0x1438 <packupandgo>
    1434:	89 04 d1    	lsr.w     w9, w9
    1436:	08 84 d3    	rrc.w     w8, w8

00001438 <packupandgo>:
    1438:	f2 0f 20    	mov.w     #0xff, w2
    143a:	02 58 e1    	cp.w      w11, w2
    143c:	05 00 3d    	bra       GE, 0x1448 <overflow>
    143e:	c7 5d dd    	sl.w      w11, #0x7, w11
    1440:	f9 07 b2    	and.w     #0x7f, w9
    1442:	89 80 75    	ior.w     w11, w9, w1
    1444:	08 00 78    	mov.w     w8, w0
    1446:	00 00 06    	return    

00001448 <overflow>:
    1448:	0b f8 27    	mov.w     #0x7f80, w11

0000144a <zerosig>:
    144a:	8b 00 78    	mov.w     w11, w1
    144c:	00 00 05    	retlw.w   #0x0, w0

0000144e <__funpack>:
    144e:	c7 0a de    	lsr.w     w1, #0x7, w5
    1450:	f1 07 b2    	and.w     #0x7f, w1
    1452:	f5 0f b2    	and.w     #0xff, w5
    1454:	08 00 32    	bra       Z, 0x1466 <zeroorsub>
    1456:	e1 cf 42    	add.b     w5, #0x1, [w15]
    1458:	02 00 32    	bra       Z, 0x145e <nanorinf>

0000145a <finitereturn>:
    145a:	01 70 a0    	bset.w    w1, #0x7
    145c:	24 00 05    	retlw.w   #0x2, w4

0000145e <nanorinf>:
    145e:	81 0f 70    	ior.w     w0, w1, [w15]
    1460:	01 00 32    	bra       Z, 0x1464 <infinite>
    1462:	04 08 05    	retlw.w   #0x80, w4

00001464 <infinite>:
    1464:	44 00 05    	retlw.w   #0x4, w4

00001466 <zeroorsub>:
    1466:	81 0f 70    	ior.w     w0, w1, [w15]
    1468:	02 00 3a    	bra       NZ, 0x146e <subnormal>
    146a:	14 00 05    	retlw.w   #0x1, w4

0000146c <normalize>:
    146c:	85 02 e9    	dec.w     w5, w5

0000146e <subnormal>:
    146e:	00 00 40    	add.w     w0, w0, w0
    1470:	81 c0 48    	addc.b    w1, w1, w1
    1472:	fc ff 3b    	bra       NN, 0x146c <normalize>
    1474:	01 70 a0    	bset.w    w1, #0x7
    1476:	24 00 05    	retlw.w   #0x2, w4

00001478 <__funpack2>:
    1478:	00 04 be    	mov.d     w0, w8
    147a:	e9 ff 07    	rcall     0x144e <__funpack>
    147c:	00 03 be    	mov.d     w0, w6
    147e:	04 05 be    	mov.d     w4, w10
    1480:	02 00 be    	mov.d     w2, w0
    1482:	e5 ff 07    	rcall     0x144e <__funpack>
    1484:	84 4f 75    	ior.b     w10, w4, [w15]
    1486:	00 00 06    	return    

00001488 <__fPropagateNaN>:
    1488:	02 00 be    	mov.d     w2, w0
    148a:	64 50 e1    	cp.w      w10, #0x4
    148c:	05 00 36    	bra       LEU, 0x1498 <return0>
    148e:	64 20 e1    	cp.w      w4, #0x4
    1490:	02 00 36    	bra       LEU, 0x1496 <return8>
    1492:	09 68 a3    	btst.z    w9, #0x6
    1494:	01 00 3a    	bra       NZ, 0x1498 <return0>

00001496 <return8>:
    1496:	08 00 be    	mov.d     w8, w0

00001498 <return0>:
    1498:	01 60 a0    	bset.w    w1, #0x6

0000149a <__fbopExit>:
    149a:	4f 06 78    	mov.w     [--w15], w12
    149c:	4f 05 be    	mov.d     [--w15], w10
    149e:	4f 04 be    	mov.d     [--w15], w8
    14a0:	00 00 06    	return    

000014a2 <__fbopReturnNaN>:
    14a2:	f0 ff 2f    	mov.w     #0xffff, w0
    14a4:	f1 ff 27    	mov.w     #0x7fff, w1
    14a6:	f9 ff 37    	bra       0x149a <__fbopExit>

000014a8 <___mulsf3>:
    14a8:	88 9f be    	mov.d     w8, [w15++]
    14aa:	8a 9f be    	mov.d     w10, [w15++]
    14ac:	8c 1f 78    	mov.w     w12, [w15++]
    14ae:	e4 ff 07    	rcall     0x1478 <__funpack2>
    14b0:	eb ff 33    	bra       N, 0x1488 <__fPropagateNaN>
    14b2:	03 86 6c    	xor.w     w9, w3, w12
    14b4:	64 50 e1    	cp.w      w10, #0x4
    14b6:	24 00 32    	bra       Z, 0x1500 <aisinfinite>
    14b8:	64 20 e1    	cp.w      w4, #0x4
    14ba:	27 00 32    	bra       Z, 0x150a <bisinfinite>
    14bc:	61 50 e1    	cp.w      w10, #0x1
    14be:	22 00 32    	bra       Z, 0x1504 <return8>
    14c0:	61 20 e1    	cp.w      w4, #0x1
    14c2:	21 00 32    	bra       Z, 0x1506 <return2>
    14c4:	8b 85 42    	add.w     w5, w11, w11
    14c6:	eb 07 b1    	sub.w     #0x7e, w11
    14c8:	01 34 b8    	mul.uu    w6, w1, w8
    14ca:	00 3a b8    	mul.uu    w7, w0, w4
    14cc:	08 04 42    	add.w     w4, w8, w8
    14ce:	89 84 4a    	addc.w    w5, w9, w9
    14d0:	01 3a b8    	mul.uu    w7, w1, w4
    14d2:	00 30 b8    	mul.uu    w6, w0, w0
    14d4:	88 80 40    	add.w     w1, w8, w1
    14d6:	09 01 4a    	addc.w    w4, w9, w2
    14d8:	04 00 33    	bra       N, 0x14e2 <formsticky>
    14da:	00 00 40    	add.w     w0, w0, w0
    14dc:	81 80 48    	addc.w    w1, w1, w1
    14de:	02 01 49    	addc.w    w2, w2, w2
    14e0:	8b 05 e9    	dec.w     w11, w11

000014e2 <formsticky>:
    14e2:	c9 09 dd    	sl.w      w1, #0x9, w3
    14e4:	83 01 70    	ior.w     w0, w3, w3
    14e6:	01 00 32    	bra       Z, 0x14ea <formRandSig>
    14e8:	13 00 20    	mov.w     #0x1, w3

000014ea <formRandSig>:
    14ea:	c8 14 de    	lsr.w     w2, #0x8, w9
    14ec:	48 14 dd    	sl.w      w2, #0x8, w8
    14ee:	47 09 de    	lsr.w     w1, #0x7, w2
    14f0:	12 00 b2    	and.w     #0x1, w2
    14f2:	c8 08 de    	lsr.w     w1, #0x8, w1
    14f4:	08 84 70    	ior.w     w1, w8, w8
    14f6:	85 ff 07    	rcall     0x1402 <__fpack>

000014f8 <return0>:
    14f8:	01 f0 a1    	bclr.w    w1, #0xf
    14fa:	0c f0 a7    	btsc.w    w12, #0xf
    14fc:	01 f0 a0    	bset.w    w1, #0xf
    14fe:	cd ff 37    	bra       0x149a <__fbopExit>

00001500 <aisinfinite>:
    1500:	61 20 e1    	cp.w      w4, #0x1
    1502:	cf ff 32    	bra       Z, 0x14a2 <__fbopReturnNaN>

00001504 <return8>:
    1504:	08 01 be    	mov.d     w8, w2

00001506 <return2>:
    1506:	02 00 be    	mov.d     w2, w0
    1508:	f7 ff 37    	bra       0x14f8 <return0>

0000150a <bisinfinite>:
    150a:	61 50 e1    	cp.w      w10, #0x1
    150c:	fc ff 3a    	bra       NZ, 0x1506 <return2>
    150e:	c9 ff 37    	bra       0x14a2 <__fbopReturnNaN>

00001510 <___udivsi3>:
    1510:	60 22 b8    	mul.uu    w4, #0x0, w4
    1512:	06 02 20    	mov.w     #0x20, w6

00001514 <nextbit>:
    1514:	00 00 d0    	sl.w      w0, w0
    1516:	81 80 d2    	rlc.w     w1, w1
    1518:	04 82 d2    	rlc.w     w4, w4
    151a:	85 82 d2    	rlc.w     w5, w5
    151c:	00 00 a0    	bset.w    w0, #0x0
    151e:	02 02 52    	sub.w     w4, w2, w4
    1520:	83 82 5a    	subb.w    w5, w3, w5
    1522:	03 00 31    	bra       C, 0x152a <iterate>
    1524:	02 02 42    	add.w     w4, w2, w4
    1526:	83 82 4a    	addc.w    w5, w3, w5
    1528:	00 00 a1    	bclr.w    w0, #0x0

0000152a <iterate>:
    152a:	06 03 e9    	dec.w     w6, w6
    152c:	f3 ff 3a    	bra       NZ, 0x1514 <nextbit>
    152e:	00 00 06    	return    

00001530 <__fcompare>:
    1530:	88 9f be    	mov.d     w8, [w15++]
    1532:	8a 9f be    	mov.d     w10, [w15++]
    1534:	84 1f 78    	mov.w     w4, [w15++]
    1536:	a0 ff 07    	rcall     0x1478 <__funpack2>
    1538:	4f 00 78    	mov.w     [--w15], w0
    153a:	11 00 33    	bra       N, 0x155e <exit>
    153c:	f0 ff 2f    	mov.w     #0xffff, w0
    153e:	83 8f 6c    	xor.w     w9, w3, [w15]
    1540:	06 00 3b    	bra       NN, 0x154e <comparemag>
    1542:	04 05 65    	and.w     w10, w4, w10
    1544:	0a 00 a7    	btsc.w    w10, #0x0
    1546:	08 00 37    	bra       0x1558 <returnEqual>
    1548:	09 f0 a6    	btss.w    w9, #0xf
    154a:	10 00 20    	mov.w     #0x1, w0
    154c:	08 00 37    	bra       0x155e <exit>

0000154e <comparemag>:
    154e:	82 0f 54    	sub.w     w8, w2, [w15]
    1550:	83 8f 5c    	subb.w    w9, w3, [w15]
    1552:	03 00 39    	bra       NC, 0x155a <adjust>
    1554:	10 00 20    	mov.w     #0x1, w0
    1556:	01 00 3e    	bra       GTU, 0x155a <adjust>

00001558 <returnEqual>:
    1558:	00 00 20    	mov.w     #0x0, w0

0000155a <adjust>:
    155a:	09 f0 a7    	btsc.w    w9, #0xf
    155c:	00 00 ea    	neg.w     w0, w0

0000155e <exit>:
    155e:	4f 05 be    	mov.d     [--w15], w10
    1560:	4f 04 be    	mov.d     [--w15], w8
    1562:	00 00 e0    	cp0.w     w0
    1564:	00 00 06    	return    

00001566 <___floatundisf>:
    1566:	88 9f be    	mov.d     w8, [w15++]
    1568:	8a 9f be    	mov.d     w10, [w15++]
    156a:	00 82 70    	ior.w     w1, w0, w4
    156c:	04 02 71    	ior.w     w2, w4, w4
    156e:	04 82 71    	ior.w     w3, w4, w4
    1570:	26 00 32    	bra       Z, 0x15be <return0>
    1572:	00 04 be    	mov.d     w0, w8
    1574:	02 00 be    	mov.d     w2, w0
    1576:	60 11 b8    	mul.uu    w2, #0x0, w2
    1578:	6b 09 20    	mov.w     #0x96, w11
    157a:	95 02 20    	mov.w     #0x29, w5
    157c:	01 82 cf    	ff1l      w1, w4
    157e:	0a 00 39    	bra       NC, 0x1594 <fixshift>
    1580:	05 41 b1    	sub.b     #0x10, w5
    1582:	00 82 cf    	ff1l      w0, w4
    1584:	07 00 39    	bra       NC, 0x1594 <fixshift>
    1586:	05 41 b1    	sub.b     #0x10, w5
    1588:	09 82 cf    	ff1l      w9, w4
    158a:	04 00 39    	bra       NC, 0x1594 <fixshift>
    158c:	05 41 b1    	sub.b     #0x10, w5
    158e:	08 82 cf    	ff1l      w8, w4
    1590:	01 00 39    	bra       NC, 0x1594 <fixshift>
    1592:	05 41 b1    	sub.b     #0x10, w5

00001594 <fixshift>:
    1594:	05 42 52    	sub.b     w4, w5, w4
    1596:	12 00 32    	bra       Z, 0x15bc <round>
    1598:	0a 00 3b    	bra       NN, 0x15ae <shiftleft>

0000159a <shiftright>:
    159a:	82 81 71    	ior.w     w3, w2, w3
    159c:	61 01 64    	and.w     w8, #0x1, w2
    159e:	81 00 d1    	lsr.w     w1, w1
    15a0:	00 80 d3    	rrc.w     w0, w0
    15a2:	89 84 d3    	rrc.w     w9, w9
    15a4:	08 84 d3    	rrc.w     w8, w8
    15a6:	8b 05 e8    	inc.w     w11, w11
    15a8:	04 42 e8    	inc.b     w4, w4
    15aa:	f7 ff 3a    	bra       NZ, 0x159a <shiftright>
    15ac:	07 00 37    	bra       0x15bc <round>

000015ae <shiftleft>:
    15ae:	08 04 44    	add.w     w8, w8, w8
    15b0:	89 84 4c    	addc.w    w9, w9, w9
    15b2:	00 00 48    	addc.w    w0, w0, w0
    15b4:	81 80 48    	addc.w    w1, w1, w1
    15b6:	8b 05 e9    	dec.w     w11, w11
    15b8:	04 42 e9    	dec.b     w4, w4
    15ba:	f9 ff 3a    	bra       NZ, 0x15ae <shiftleft>

000015bc <round>:
    15bc:	22 ff 07    	rcall     0x1402 <__fpack>

000015be <return0>:
    15be:	4f 05 be    	mov.d     [--w15], w10
    15c0:	4f 04 be    	mov.d     [--w15], w8
    15c2:	00 00 06    	return    

000015c4 <_findmem>:
    15c4:	88 9f be    	mov.d     w8, [w15++]
    15c6:	00 04 78    	mov.w     w0, w8

000015c8 <.L14>:
    15c8:	31 ab 80    	mov.w     0x1566, w1
    15ca:	01 00 e0    	cp0.w     w1
    15cc:	02 00 32    	bra       Z, 0x15d2 <.L2>
    15ce:	01 00 78    	mov.w     w1, w0
    15d0:	0d 00 37    	bra       0x15ec <.L3>

000015d2 <.L2>:
    15d2:	41 ab 80    	mov.w     0x1568, w1
    15d4:	80 56 21    	mov.w     #0x1568, w0
    15d6:	04 00 37    	bra       0x15e0 <.L4>

000015d8 <.L6>:
    15d8:	91 0f 54    	sub.w     w8, [w1], [w15]
    15da:	25 00 36    	bra       LEU, 0x1626 <.L5>
    15dc:	01 80 e8    	inc2.w    w1, w0
    15de:	91 00 90    	mov.w     [w1+2], w1

000015e0 <.L4>:
    15e0:	01 00 e0    	cp0.w     w1
    15e2:	fa ff 3a    	bra       NZ, 0x15d8 <.L6>
    15e4:	10 00 37    	bra       0x1606 <.L7>

000015e6 <.L8>:
    15e6:	92 0f 54    	sub.w     w8, [w2], [w15]
    15e8:	1e 00 36    	bra       LEU, 0x1626 <.L5>
    15ea:	02 80 e8    	inc2.w    w2, w0

000015ec <.L3>:
    15ec:	10 01 78    	mov.w     [w0], w2
    15ee:	02 00 e0    	cp0.w     w2
    15f0:	fa ff 3a    	bra       NZ, 0x15e6 <.L8>
    15f2:	11 01 78    	mov.w     [w1], w2
    15f4:	41 ab 80    	mov.w     0x1568, w1
    15f6:	80 56 21    	mov.w     #0x1568, w0
    15f8:	04 00 37    	bra       0x1602 <.L9>

000015fa <.L10>:
    15fa:	91 0f 54    	sub.w     w8, [w1], [w15]
    15fc:	14 00 36    	bra       LEU, 0x1626 <.L5>
    15fe:	01 80 e8    	inc2.w    w1, w0
    1600:	91 00 90    	mov.w     [w1+2], w1

00001602 <.L9>:
    1602:	82 8f 50    	sub.w     w1, w2, [w15]
    1604:	fa ff 3a    	bra       NZ, 0x15fa <.L10>

00001606 <.L7>:
    1606:	79 ab 80    	mov.w     0x156e, w9

00001608 <.L13>:
    1608:	88 8f 54    	sub.w     w9, w8, [w15]
    160a:	01 00 31    	bra       C, 0x160e <.L11>
    160c:	88 04 78    	mov.w     w8, w9

0000160e <.L11>:
    160e:	09 00 78    	mov.w     w9, w0
    1610:	b2 00 07    	rcall     0x1776 <__Getmem>
    1612:	00 00 e0    	cp0.w     w0
    1614:	04 00 3a    	bra       NZ, 0x161e <.L12>
    1616:	88 8f 54    	sub.w     w9, w8, [w15]
    1618:	05 00 32    	bra       Z, 0x1624 <.L15>
    161a:	89 04 d1    	lsr.w     w9, w9
    161c:	f5 ff 37    	bra       0x1608 <.L13>

0000161e <.L12>:
    161e:	09 18 78    	mov.w     w9, [w0++]
    1620:	08 04 07    	rcall     0x1e32 <_free>
    1622:	d2 ff 37    	bra       0x15c8 <.L14>

00001624 <.L15>:
    1624:	00 00 eb    	clr.w     w0

00001626 <.L5>:
    1626:	4f 04 be    	mov.d     [--w15], w8
    1628:	00 00 06    	return    

0000162a <_malloc>:
    162a:	88 1f 78    	mov.w     w8, [w15++]
    162c:	63 04 40    	add.w     w0, #0x3, w8
    162e:	08 00 a1    	bclr.w    w8, #0x0
    1630:	80 00 eb    	clr.w     w1
    1632:	80 0f 54    	sub.w     w8, w0, [w15]
    1634:	21 00 36    	bra       LEU, 0x1678 <.L17>
    1636:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    1638:	01 00 3e    	bra       GTU, 0x163c <.L18>
    163a:	48 00 20    	mov.w     #0x4, w8

0000163c <.L18>:
    163c:	08 00 78    	mov.w     w8, w0
    163e:	c2 ff 07    	rcall     0x15c4 <_findmem>
    1640:	80 00 eb    	clr.w     w1
    1642:	00 00 e0    	cp0.w     w0
    1644:	19 00 32    	bra       Z, 0x1678 <.L17>
    1646:	90 00 78    	mov.w     [w0], w1
    1648:	91 01 78    	mov.w     [w1], w3
    164a:	64 81 51    	sub.w     w3, #0x4, w2
    164c:	88 0f 51    	sub.w     w2, w8, [w15]
    164e:	03 00 31    	bra       C, 0x1656 <.L19>
    1650:	11 01 90    	mov.w     [w1+2], w2
    1652:	02 08 78    	mov.w     w2, [w0]
    1654:	07 00 37    	bra       0x1664 <.L20>

00001656 <.L19>:
    1656:	08 81 40    	add.w     w1, w8, w2
    1658:	02 08 78    	mov.w     w2, [w0]
    165a:	91 01 90    	mov.w     [w1+2], w3
    165c:	13 01 98    	mov.w     w3, [w2+2]
    165e:	10 01 78    	mov.w     [w0], w2
    1660:	11 09 14    	subr.w    w8, [w1], [w2]
    1662:	88 08 78    	mov.w     w8, [w1]

00001664 <.L20>:
    1664:	10 01 78    	mov.w     [w0], w2
    1666:	00 00 eb    	clr.w     w0
    1668:	02 00 e0    	cp0.w     w2
    166a:	04 00 32    	bra       Z, 0x1674 <.L21>
    166c:	92 01 90    	mov.w     [w2+2], w3
    166e:	03 00 e0    	cp0.w     w3
    1670:	01 00 32    	bra       Z, 0x1674 <.L21>
    1672:	02 80 e8    	inc2.w    w2, w0

00001674 <.L21>:
    1674:	30 ab 88    	mov.w     w0, 0x1566
    1676:	81 80 e8    	inc2.w    w1, w1

00001678 <.L17>:
    1678:	01 00 78    	mov.w     w1, w0
    167a:	4f 04 78    	mov.w     [--w15], w8
    167c:	00 00 06    	return    

0000167e <_memcpy>:
    167e:	80 01 78    	mov.w     w0, w3
    1680:	02 00 37    	bra       0x1686 <.L2>

00001682 <.L3>:
    1682:	b1 59 78    	mov.b     [w1++], [w3++]
    1684:	02 01 e9    	dec.w     w2, w2

00001686 <.L2>:
    1686:	02 00 e0    	cp0.w     w2
    1688:	fc ff 3a    	bra       NZ, 0x1682 <.L3>
    168a:	00 00 06    	return    

0000168c <_puts>:
    168c:	81 3d 21    	mov.w     #0x13d8, w1
    168e:	89 03 07    	rcall     0x1da2 <_fputs>
    1690:	80 00 78    	mov.w     w0, w1
    1692:	00 80 eb    	setm.w    w0
    1694:	01 00 e0    	cp0.w     w1
    1696:	04 00 35    	bra       LT, 0x16a0 <.L2>
    1698:	81 3d 21    	mov.w     #0x13d8, w1
    169a:	a0 00 20    	mov.w     #0xa, w0
    169c:	51 01 07    	rcall     0x1940 <_fputc>
    169e:	4f 80 de    	asr.w     w0, #0xf, w0

000016a0 <.L2>:
    16a0:	00 00 06    	return    

000016a2 <_strcmp>:
    16a2:	02 00 37    	bra       0x16a8 <.L2>

000016a4 <.L4>:
    16a4:	02 04 e0    	cp0.b     w2
    16a6:	0b 00 32    	bra       Z, 0x16be <.L5>

000016a8 <.L2>:
    16a8:	81 01 78    	mov.w     w1, w3
    16aa:	00 02 78    	mov.w     w0, w4
    16ac:	30 41 78    	mov.b     [w0++], w2
    16ae:	b1 4f 51    	sub.b     w2, [w1++], [w15]
    16b0:	f9 ff 32    	bra       Z, 0x16a4 <.L4>
    16b2:	10 00 20    	mov.w     #0x1, w0
    16b4:	14 42 78    	mov.b     [w4], w4
    16b6:	93 4f 52    	sub.b     w4, [w3], [w15]
    16b8:	03 00 31    	bra       C, 0x16c0 <.L3>
    16ba:	00 80 eb    	setm.w    w0
    16bc:	00 00 06    	return    

000016be <.L5>:
    16be:	00 00 eb    	clr.w     w0

000016c0 <.L3>:
    16c0:	00 00 06    	return    

000016c2 <_strtoll>:
    16c2:	e4 87 47    	add.w     w15, #0x4, w15
    16c4:	88 9f be    	mov.d     w8, [w15++]
    16c6:	8a 9f be    	mov.d     w10, [w15++]
    16c8:	8c 1f 78    	mov.w     w12, [w15++]
    16ca:	8e 1f 78    	mov.w     w14, [w15++]
    16cc:	00 05 78    	mov.w     w0, w10
    16ce:	01 07 78    	mov.w     w1, w14
    16d0:	02 06 78    	mov.w     w2, w12
    16d2:	0e 00 e0    	cp0.w     w14
    16d4:	01 00 3a    	bra       NZ, 0x16d8 <.L2>
    16d6:	6e 87 57    	sub.w     w15, #0xe, w14

000016d8 <.L2>:
    16d8:	8a 05 78    	mov.w     w10, w11

000016da <.L3>:
    16da:	8b 04 78    	mov.w     w11, w9
    16dc:	89 05 78    	mov.w     w9, w11
    16de:	3b 44 78    	mov.b     [w11++], w8
    16e0:	08 00 fb    	se        w8, w0
    16e2:	19 01 07    	rcall     0x1916 <_isspace>
    16e4:	00 00 e0    	cp0.w     w0
    16e6:	f9 ff 3a    	bra       NZ, 0x16da <.L3>
    16e8:	d0 c2 b3    	mov.b     #0x2d, w0
    16ea:	80 4f 54    	sub.b     w8, w0, [w15]
    16ec:	03 00 32    	bra       Z, 0x16f4 <.L4>
    16ee:	00 c0 e9    	dec2.b    w0, w0
    16f0:	80 4f 54    	sub.b     w8, w0, [w15]
    16f2:	02 00 3a    	bra       NZ, 0x16f8 <.L14>

000016f4 <.L4>:
    16f4:	89 04 e8    	inc.w     w9, w9
    16f6:	01 00 37    	bra       0x16fa <.L5>

000016f8 <.L14>:
    16f8:	00 44 78    	mov.b     w0, w8

000016fa <.L5>:
    16fa:	0c 01 78    	mov.w     w12, w2
    16fc:	8e 00 78    	mov.w     w14, w1
    16fe:	09 00 78    	mov.w     w9, w0
    1700:	44 00 07    	rcall     0x178a <__Stoull>
    1702:	9e 8f 54    	sub.w     w9, [w14], [w15]
    1704:	01 00 3a    	bra       NZ, 0x1708 <.L6>
    1706:	0a 0f 78    	mov.w     w10, [w14]

00001708 <.L6>:
    1708:	9e 0f 55    	sub.w     w10, [w14], [w15]
    170a:	05 00 3a    	bra       NZ, 0x1716 <.L7>
    170c:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    170e:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1710:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1712:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1714:	17 00 3a    	bra       NZ, 0x1744 <.L8>

00001716 <.L7>:
    1716:	b4 c2 b3    	mov.b     #0x2b, w4
    1718:	84 4f 54    	sub.b     w8, w4, [w15]
    171a:	09 00 3a    	bra       NZ, 0x172e <.L9>
    171c:	f4 ff 2f    	mov.w     #0xffff, w4
    171e:	f5 ff 27    	mov.w     #0x7fff, w5
    1720:	60 33 b8    	mul.uu    w6, #0x0, w6
    1722:	04 00 e1    	cp.w      w0, w4
    1724:	05 88 e1    	cpb.w     w1, w5
    1726:	06 90 e1    	cpb.w     w2, w6
    1728:	07 98 e1    	cpb.w     w3, w7
    172a:	0c 00 3e    	bra       GTU, 0x1744 <.L8>
    172c:	1e 00 37    	bra       0x176a <.L12>

0000172e <.L9>:
    172e:	d4 c2 b3    	mov.b     #0x2d, w4
    1730:	84 4f 54    	sub.b     w8, w4, [w15]
    1732:	1b 00 3a    	bra       NZ, 0x176a <.L12>
    1734:	04 00 20    	mov.w     #0x0, w4
    1736:	05 00 28    	mov.w     #0x8000, w5
    1738:	60 33 b8    	mul.uu    w6, #0x0, w6
    173a:	04 00 e1    	cp.w      w0, w4
    173c:	05 88 e1    	cpb.w     w1, w5
    173e:	06 90 e1    	cpb.w     w2, w6
    1740:	07 98 e1    	cpb.w     w3, w7
    1742:	0d 00 36    	bra       LEU, 0x175e <.L11>

00001744 <.L8>:
    1744:	20 02 20    	mov.w     #0x22, w0
    1746:	50 ab 88    	mov.w     w0, 0x156a
    1748:	f0 ff 2f    	mov.w     #0xffff, w0
    174a:	f1 ff 27    	mov.w     #0x7fff, w1
    174c:	60 11 b8    	mul.uu    w2, #0x0, w2
    174e:	d4 c2 b3    	mov.b     #0x2d, w4
    1750:	84 4f 54    	sub.b     w8, w4, [w15]
    1752:	0b 00 3a    	bra       NZ, 0x176a <.L12>
    1754:	00 00 20    	mov.w     #0x0, w0
    1756:	01 00 28    	mov.w     #0x8000, w1
    1758:	f2 ff 2f    	mov.w     #0xffff, w2
    175a:	f3 ff 2f    	mov.w     #0xffff, w3
    175c:	06 00 37    	bra       0x176a <.L12>

0000175e <.L11>:
    175e:	60 22 b8    	mul.uu    w4, #0x0, w4
    1760:	60 33 b8    	mul.uu    w6, #0x0, w6
    1762:	00 00 52    	sub.w     w4, w0, w0
    1764:	81 80 5a    	subb.w    w5, w1, w1
    1766:	02 01 5b    	subb.w    w6, w2, w2
    1768:	83 81 5b    	subb.w    w7, w3, w3

0000176a <.L12>:
    176a:	4f 07 78    	mov.w     [--w15], w14
    176c:	4f 06 78    	mov.w     [--w15], w12
    176e:	4f 05 be    	mov.d     [--w15], w10
    1770:	4f 04 be    	mov.d     [--w15], w8
    1772:	4f 00 b1    	sub.w     #0x4, w15
    1774:	00 00 06    	return    

00001776 <__Getmem>:
    1776:	80 00 78    	mov.w     w0, w1
    1778:	00 00 eb    	clr.w     w0
    177a:	01 00 e0    	cp0.w     w1
    177c:	05 00 34    	bra       LE, 0x1788 <.L2>
    177e:	01 00 78    	mov.w     w1, w0
    1780:	5e fd 07    	rcall     0x123e <_sbrk>
    1782:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1784:	01 00 3a    	bra       NZ, 0x1788 <.L2>
    1786:	00 00 eb    	clr.w     w0

00001788 <.L2>:
    1788:	00 00 06    	return    

0000178a <__Stoull>:
    178a:	0f 02 b0    	add.w     #0x20, w15
    178c:	88 9f be    	mov.d     w8, [w15++]
    178e:	8a 9f be    	mov.d     w10, [w15++]
    1790:	8c 9f be    	mov.d     w12, [w15++]
    1792:	8e 1f 78    	mov.w     w14, [w15++]
    1794:	80 b7 9f    	mov.w     w0, [w15-32]
    1796:	01 07 78    	mov.w     w1, w14
    1798:	82 06 78    	mov.w     w2, w13
    179a:	00 04 78    	mov.w     w0, w8

0000179c <.L2>:
    179c:	08 06 78    	mov.w     w8, w12
    179e:	0c 04 78    	mov.w     w12, w8
    17a0:	38 40 78    	mov.b     [w8++], w0
    17a2:	e0 e7 9f    	mov.b     w0, [w15-26]
    17a4:	80 40 78    	mov.b     w0, w1
    17a6:	01 00 fb    	se        w1, w0
    17a8:	b6 00 07    	rcall     0x1916 <_isspace>
    17aa:	00 00 e0    	cp0.w     w0
    17ac:	f7 ff 3a    	bra       NZ, 0x179c <.L2>
    17ae:	d0 c2 b3    	mov.b     #0x2d, w0
    17b0:	6f e1 97    	mov.b     [w15-26], w2
    17b2:	80 4f 51    	sub.b     w2, w0, [w15]
    17b4:	03 00 32    	bra       Z, 0x17bc <.L3>
    17b6:	00 c0 e9    	dec2.b    w0, w0
    17b8:	80 4f 51    	sub.b     w2, w0, [w15]
    17ba:	02 00 3a    	bra       NZ, 0x17c0 <.L19>

000017bc <.L3>:
    17bc:	0c 06 e8    	inc.w     w12, w12
    17be:	01 00 37    	bra       0x17c2 <.L4>

000017c0 <.L19>:
    17c0:	e0 e7 9f    	mov.b     w0, [w15-26]

000017c2 <.L4>:
    17c2:	0d 00 e0    	cp0.w     w13
    17c4:	05 00 35    	bra       LT, 0x17d0 <.L5>
    17c6:	e1 8f 56    	sub.w     w13, #0x1, [w15]
    17c8:	03 00 32    	bra       Z, 0x17d0 <.L5>
    17ca:	40 02 20    	mov.w     #0x24, w0
    17cc:	80 8f 56    	sub.w     w13, w0, [w15]
    17ce:	07 00 34    	bra       LE, 0x17de <.L6>

000017d0 <.L5>:
    17d0:	60 44 b8    	mul.uu    w8, #0x0, w8
    17d2:	60 55 b8    	mul.uu    w10, #0x0, w10
    17d4:	0e 00 e0    	cp0.w     w14
    17d6:	97 00 32    	bra       Z, 0x1906 <.L7>
    17d8:	0f b2 97    	mov.w     [w15-32], w4
    17da:	04 0f 78    	mov.w     w4, [w14]
    17dc:	94 00 37    	bra       0x1906 <.L7>

000017de <.L6>:
    17de:	0d 00 e0    	cp0.w     w13
    17e0:	0e 00 32    	bra       Z, 0x17fe <.L8>
    17e2:	f0 8f 56    	sub.w     w13, #0x10, [w15]
    17e4:	1a 00 3a    	bra       NZ, 0x181a <.L9>
    17e6:	00 c3 b3    	mov.b     #0x30, w0
    17e8:	9c 4f 10    	subr.b    w0, [w12], [w15]
    17ea:	17 00 3a    	bra       NZ, 0x181a <.L9>
    17ec:	1c 40 90    	mov.b     [w12+1], w0
    17ee:	81 c7 b3    	mov.b     #0x78, w1
    17f0:	81 4f 50    	sub.b     w0, w1, [w15]
    17f2:	03 00 32    	bra       Z, 0x17fa <.L10>
    17f4:	81 c5 b3    	mov.b     #0x58, w1
    17f6:	81 4f 50    	sub.b     w0, w1, [w15]
    17f8:	10 00 3a    	bra       NZ, 0x181a <.L9>

000017fa <.L10>:
    17fa:	0c 86 e8    	inc2.w    w12, w12
    17fc:	0e 00 37    	bra       0x181a <.L9>

000017fe <.L8>:
    17fe:	ad 00 20    	mov.w     #0xa, w13
    1800:	00 c3 b3    	mov.b     #0x30, w0
    1802:	9c 4f 10    	subr.b    w0, [w12], [w15]
    1804:	0a 00 3a    	bra       NZ, 0x181a <.L9>
    1806:	1c 40 90    	mov.b     [w12+1], w0
    1808:	81 c7 b3    	mov.b     #0x78, w1
    180a:	81 4f 50    	sub.b     w0, w1, [w15]
    180c:	04 00 32    	bra       Z, 0x1816 <.L11>
    180e:	8d 00 20    	mov.w     #0x8, w13
    1810:	81 c5 b3    	mov.b     #0x58, w1
    1812:	81 4f 50    	sub.b     w0, w1, [w15]
    1814:	02 00 3a    	bra       NZ, 0x181a <.L9>

00001816 <.L11>:
    1816:	0c 86 e8    	inc2.w    w12, w12
    1818:	0d 01 20    	mov.w     #0x10, w13

0000181a <.L9>:
    181a:	0c 00 78    	mov.w     w12, w0

0000181c <.L12>:
    181c:	80 00 78    	mov.w     w0, w1
    181e:	01 00 78    	mov.w     w1, w0
    1820:	02 c3 b3    	mov.b     #0x30, w2
    1822:	b0 4f 11    	subr.b    w2, [w0++], [w15]
    1824:	fb ff 32    	bra       Z, 0x181c <.L12>
    1826:	e1 af 9f    	mov.w     w1, [w15-36]
    1828:	81 02 78    	mov.w     w1, w5
    182a:	95 b7 9f    	mov.w     w5, [w15-30]
    182c:	60 44 b8    	mul.uu    w8, #0x0, w8
    182e:	60 55 b8    	mul.uu    w10, #0x0, w10
    1830:	8c bf 9f    	mov.w     w12, [w15-16]
    1832:	1c 00 37    	bra       0x186c <.L13>

00001834 <.L14>:
    1834:	61 4a 21    	mov.w     #0x14a6, w1
    1836:	81 40 50    	sub.b     w0, w1, w1
    1838:	e1 df 9f    	mov.b     w1, [w15-34]
    183a:	61 6a b9    	mul.su    w13, #0x1, w4
    183c:	61 2b b9    	mul.su    w5, #0x1, w6
    183e:	08 00 be    	mov.d     w8, w0
    1840:	0a 01 be    	mov.d     w10, w2
    1842:	10 07 07    	rcall     0x2664 <___muldi3>
    1844:	ef da 97    	mov.b     [w15-34], w5
    1846:	05 02 fb    	se        w5, w4
    1848:	cf a2 de    	asr.w     w4, #0xf, w5
    184a:	61 2b b9    	mul.su    w5, #0x1, w6
    184c:	c4 b7 9f    	mov.w     w4, [w15-24]
    184e:	d5 b7 9f    	mov.w     w5, [w15-22]
    1850:	e6 b7 9f    	mov.w     w6, [w15-20]
    1852:	f7 b7 9f    	mov.w     w7, [w15-18]
    1854:	a8 af 9f    	mov.w     w8, [w15-44]
    1856:	b9 af 9f    	mov.w     w9, [w15-42]
    1858:	ca af 9f    	mov.w     w10, [w15-40]
    185a:	db af 9f    	mov.w     w11, [w15-38]
    185c:	4f b2 97    	mov.w     [w15-24], w4
    185e:	df b2 97    	mov.w     [w15-22], w5
    1860:	6f b3 97    	mov.w     [w15-20], w6
    1862:	ff b3 97    	mov.w     [w15-18], w7
    1864:	00 04 42    	add.w     w4, w0, w8
    1866:	81 84 4a    	addc.w    w5, w1, w9
    1868:	02 05 4b    	addc.w    w6, w2, w10
    186a:	83 85 4b    	addc.w    w7, w3, w11

0000186c <.L13>:
    186c:	9f b2 97    	mov.w     [w15-30], w5
    186e:	a5 b7 9f    	mov.w     w5, [w15-28]
    1870:	05 03 78    	mov.w     w5, w6
    1872:	36 00 fb    	se        [w6++], w0
    1874:	96 b7 9f    	mov.w     w6, [w15-30]
    1876:	57 00 07    	rcall     0x1926 <_tolower>
    1878:	0d 01 78    	mov.w     w13, w2
    187a:	80 00 78    	mov.w     w0, w1
    187c:	60 4a 21    	mov.w     #0x14a6, w0
    187e:	0b 03 07    	rcall     0x1e96 <_memchr>
    1880:	00 00 e0    	cp0.w     w0
    1882:	d8 ff 3a    	bra       NZ, 0x1834 <.L14>
    1884:	0f be 97    	mov.w     [w15-16], w12
    1886:	af b3 97    	mov.w     [w15-28], w7
    1888:	87 0f 56    	sub.w     w12, w7, [w15]
    188a:	07 00 3a    	bra       NZ, 0x189a <.L15>
    188c:	60 44 b8    	mul.uu    w8, #0x0, w8
    188e:	60 55 b8    	mul.uu    w10, #0x0, w10
    1890:	0e 00 e0    	cp0.w     w14
    1892:	39 00 32    	bra       Z, 0x1906 <.L7>
    1894:	0f b6 97    	mov.w     [w15-32], w12
    1896:	0c 0f 78    	mov.w     w12, [w14]
    1898:	36 00 37    	bra       0x1906 <.L7>

0000189a <.L15>:
    189a:	2f b0 97    	mov.w     [w15-28], w0
    189c:	6f a9 97    	mov.w     [w15-36], w2
    189e:	82 00 50    	sub.w     w0, w2, w1
    18a0:	b0 4c 21    	mov.w     #0x14cb, w0
    18a2:	60 c0 7e    	mov.b     [w0+w13], w0
    18a4:	00 00 fb    	se        w0, w0
    18a6:	00 80 50    	sub.w     w1, w0, w0
    18a8:	20 00 33    	bra       N, 0x18ea <.L16>
    18aa:	19 00 3a    	bra       NZ, 0x18de <.L17>
    18ac:	6f da 97    	mov.b     [w15-34], w4
    18ae:	04 00 fb    	se        w4, w0
    18b0:	cf 80 de    	asr.w     w0, #0xf, w1
    18b2:	61 09 b9    	mul.su    w1, #0x1, w2
    18b4:	00 00 54    	sub.w     w8, w0, w0
    18b6:	81 80 5c    	subb.w    w9, w1, w1
    18b8:	02 01 5d    	subb.w    w10, w2, w2
    18ba:	83 81 5d    	subb.w    w11, w3, w3
    18bc:	00 40 e1    	cp.w      w8, w0
    18be:	01 c8 e1    	cpb.w     w9, w1
    18c0:	02 d0 e1    	cpb.w     w10, w2
    18c2:	03 d8 e1    	cpb.w     w11, w3
    18c4:	0c 00 39    	bra       NC, 0x18de <.L17>
    18c6:	61 6a b9    	mul.su    w13, #0x1, w4
    18c8:	61 2b b9    	mul.su    w5, #0x1, w6
    18ca:	63 06 07    	rcall     0x2592 <___udivdi3>
    18cc:	2f aa 97    	mov.w     [w15-44], w4
    18ce:	bf aa 97    	mov.w     [w15-42], w5
    18d0:	4f ab 97    	mov.w     [w15-40], w6
    18d2:	df ab 97    	mov.w     [w15-38], w7
    18d4:	04 00 e1    	cp.w      w0, w4
    18d6:	05 88 e1    	cpb.w     w1, w5
    18d8:	06 90 e1    	cpb.w     w2, w6
    18da:	07 98 e1    	cpb.w     w3, w7
    18dc:	06 00 32    	bra       Z, 0x18ea <.L16>

000018de <.L17>:
    18de:	20 02 20    	mov.w     #0x22, w0
    18e0:	50 ab 88    	mov.w     w0, 0x156a
    18e2:	f8 ff 2f    	mov.w     #0xffff, w8
    18e4:	f9 ff 2f    	mov.w     #0xffff, w9
    18e6:	08 05 be    	mov.d     w8, w10
    18e8:	0a 00 37    	bra       0x18fe <.L18>

000018ea <.L16>:
    18ea:	d0 c2 b3    	mov.b     #0x2d, w0
    18ec:	ef e2 97    	mov.b     [w15-26], w5
    18ee:	80 cf 52    	sub.b     w5, w0, [w15]
    18f0:	06 00 3a    	bra       NZ, 0x18fe <.L18>
    18f2:	60 00 b8    	mul.uu    w0, #0x0, w0
    18f4:	60 11 b8    	mul.uu    w2, #0x0, w2
    18f6:	08 04 50    	sub.w     w0, w8, w8
    18f8:	89 84 58    	subb.w    w1, w9, w9
    18fa:	0a 05 59    	subb.w    w2, w10, w10
    18fc:	8b 85 59    	subb.w    w3, w11, w11

000018fe <.L18>:
    18fe:	0e 00 e0    	cp0.w     w14
    1900:	02 00 32    	bra       Z, 0x1906 <.L7>
    1902:	2f b3 97    	mov.w     [w15-28], w6
    1904:	06 0f 78    	mov.w     w6, [w14]

00001906 <.L7>:
    1906:	08 00 be    	mov.d     w8, w0
    1908:	0a 01 be    	mov.d     w10, w2
    190a:	4f 07 78    	mov.w     [--w15], w14
    190c:	4f 06 be    	mov.d     [--w15], w12
    190e:	4f 05 be    	mov.d     [--w15], w10
    1910:	4f 04 be    	mov.d     [--w15], w8
    1912:	0f 02 b1    	sub.w     #0x20, w15
    1914:	00 00 06    	return    

00001916 <_isspace>:
    1916:	69 00 e1    	cp.w      w0, #0x9
    1918:	04 00 35    	bra       LT, 0x1922 <nomatch>
    191a:	6d 00 e1    	cp.w      w0, #0xd
    191c:	03 00 34    	bra       LE, 0x1924 <match>
    191e:	00 02 b1    	sub.w     #0x20, w0
    1920:	01 00 32    	bra       Z, 0x1924 <match>

00001922 <nomatch>:
    1922:	00 00 05    	retlw.w   #0x0, w0

00001924 <match>:
    1924:	10 00 05    	retlw.w   #0x1, w0

00001926 <_tolower>:
    1926:	80 00 78    	mov.w     w0, w1
    1928:	11 04 b1    	sub.w     #0x41, w1
    192a:	03 00 35    	bra       LT, 0x1932 <nomatch>
    192c:	91 01 b1    	sub.w     #0x19, w1
    192e:	01 00 3c    	bra       GT, 0x1932 <nomatch>

00001930 <match>:
    1930:	00 50 a0    	bset.w    w0, #0x5

00001932 <nomatch>:
    1932:	00 00 06    	return    

00001934 <__Geterrno>:
    1934:	60 ab 80    	mov.w     0x156c, w0
    1936:	00 00 e0    	cp0.w     w0
    1938:	01 00 32    	bra       Z, 0x193c <.L2>
    193a:	00 00 01    	call      w0

0000193c <.L2>:
    193c:	a0 56 21    	mov.w     #0x156a, w0
    193e:	00 00 06    	return    

00001940 <_fputc>:
    1940:	88 9f be    	mov.d     w8, [w15++]
    1942:	8a 1f 78    	mov.w     w10, [w15++]
    1944:	00 04 be    	mov.d     w0, w8
    1946:	c9 00 90    	mov.w     [w9+8], w1
    1948:	69 00 90    	mov.w     [w9+12], w0
    194a:	80 8f 50    	sub.w     w1, w0, [w15]
    194c:	05 00 39    	bra       NC, 0x1958 <.L2>
    194e:	09 00 78    	mov.w     w9, w0
    1950:	c8 02 07    	rcall     0x1ee2 <__Fwprep>
    1952:	80 80 eb    	setm.w    w1
    1954:	00 00 e0    	cp0.w     w0
    1956:	16 00 35    	bra       LT, 0x1984 <.L3>

00001958 <.L2>:
    1958:	08 45 78    	mov.b     w8, w10
    195a:	49 00 90    	mov.w     [w9+8], w0
    195c:	08 58 78    	mov.b     w8, [w0++]
    195e:	c0 04 98    	mov.w     w0, [w9+8]
    1960:	19 00 78    	mov.w     [w9], w0
    1962:	00 b8 a3    	btst.z    w0, #0xb
    1964:	04 00 3a    	bra       NZ, 0x196e <.L4>
    1966:	00 a8 a3    	btst.z    w0, #0xa
    1968:	07 00 32    	bra       Z, 0x1978 <.L5>
    196a:	ea 4f 54    	sub.b     w8, #0xa, [w15]
    196c:	05 00 3a    	bra       NZ, 0x1978 <.L5>

0000196e <.L4>:
    196e:	09 00 78    	mov.w     w9, w0
    1970:	dd 01 07    	rcall     0x1d2c <__DNKfflush>
    1972:	80 80 eb    	setm.w    w1
    1974:	00 00 e0    	cp0.w     w0
    1976:	06 00 3a    	bra       NZ, 0x1984 <.L3>

00001978 <.L5>:
    1978:	00 c0 20    	mov.w     #0xc00, w0
    197a:	19 00 60    	and.w     w0, [w9], w0
    197c:	02 00 32    	bra       Z, 0x1982 <.L6>
    197e:	49 00 90    	mov.w     [w9+8], w0
    1980:	e0 04 98    	mov.w     w0, [w9+12]

00001982 <.L6>:
    1982:	8a 80 fb    	ze        w10, w1

00001984 <.L3>:
    1984:	01 00 78    	mov.w     w1, w0
    1986:	4f 05 78    	mov.w     [--w15], w10
    1988:	4f 04 be    	mov.d     [--w15], w8
    198a:	00 00 06    	return    

0000198c <_prout>:
    198c:	88 1f 78    	mov.w     w8, [w15++]
    198e:	02 04 78    	mov.w     w2, w8
    1990:	08 01 78    	mov.w     w8, w2
    1992:	75 fe 07    	rcall     0x167e <_memcpy>
    1994:	08 00 40    	add.w     w0, w8, w0
    1996:	4f 04 78    	mov.w     [--w15], w8
    1998:	00 00 06    	return    

0000199a <__sprintf_cdnopuxX>:
    199a:	00 00 fa    	lnk       #0x0
    199c:	88 1f 78    	mov.w     w8, [w15++]
    199e:	00 04 78    	mov.w     w0, w8
    19a0:	ea 81 57    	sub.w     w15, #0xa, w3
    19a2:	3f b9 97    	mov.w     [w15-10], w2
    19a4:	88 00 78    	mov.w     w8, w1
    19a6:	c0 98 21    	mov.w     #0x198c, w0
    19a8:	07 00 07    	rcall     0x19b8 <___Printf_cdnopuxX>
    19aa:	00 00 e0    	cp0.w     w0
    19ac:	02 00 35    	bra       LT, 0x19b2 <.L3>
    19ae:	80 40 eb    	clr.b     w1
    19b0:	01 74 78    	mov.b     w1, [w8+w0]

000019b2 <.L3>:
    19b2:	4f 04 78    	mov.w     [--w15], w8
    19b4:	00 80 fa    	ulnk      
    19b6:	00 00 06    	return    

000019b8 <___Printf_cdnopuxX>:
    19b8:	62 00 fa    	lnk       #0x62
    19ba:	88 9f be    	mov.d     w8, [w15++]
    19bc:	8a 1f 78    	mov.w     w10, [w15++]
    19be:	00 05 78    	mov.w     w0, w10
    19c0:	81 04 78    	mov.w     w1, w9
    19c2:	02 04 78    	mov.w     w2, w8
    19c4:	83 00 78    	mov.w     w3, w1
    19c6:	80 f9 2f    	mov.w     #0xff98, w0
    19c8:	0f 00 40    	add.w     w0, w15, w0
    19ca:	bd 04 07    	rcall     0x2346 <__Vacopy>
    19cc:	9a 97 9f    	mov.w     w10, [w15-94]
    19ce:	a9 97 9f    	mov.w     w9, [w15-92]
    19d0:	00 00 eb    	clr.w     w0
    19d2:	b0 9f 9f    	mov.w     w0, [w15-74]

000019d4 <.L31>:
    19d4:	18 85 fb    	ze        [w8], w10
    19d6:	8a 04 fb    	se        w10, w9
    19d8:	0a 05 ea    	neg.w     w10, w10
    19da:	4f 55 de    	lsr.w     w10, #0xf, w10
    19dc:	50 02 20    	mov.w     #0x25, w0
    19de:	80 8f 54    	sub.w     w9, w0, [w15]
    19e0:	0d 00 32    	bra       Z, 0x19fc <.L3>
    19e2:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    19e4:	0b 00 3a    	bra       NZ, 0x19fc <.L3>
    19e6:	0a 01 78    	mov.w     w10, w2
    19e8:	88 00 78    	mov.w     w8, w1
    19ea:	2f 90 97    	mov.w     [w15-92], w0
    19ec:	9f 91 97    	mov.w     [w15-94], w3
    19ee:	03 00 01    	call      w3
    19f0:	a0 97 9f    	mov.w     w0, [w15-92]
    19f2:	00 00 e0    	cp0.w     w0
    19f4:	8e 00 32    	bra       Z, 0x1b12 <.L27>
    19f6:	3f 98 97    	mov.w     [w15-74], w0
    19f8:	00 00 e8    	inc.w     w0, w0
    19fa:	b0 9f 9f    	mov.w     w0, [w15-74]

000019fc <.L3>:
    19fc:	0a 04 44    	add.w     w8, w10, w8
    19fe:	50 02 20    	mov.w     #0x25, w0
    1a00:	80 8f 54    	sub.w     w9, w0, [w15]
    1a02:	04 00 32    	bra       Z, 0x1a0c <.L5>
    1a04:	09 00 e0    	cp0.w     w9
    1a06:	e6 ff 3a    	bra       NZ, 0x19d4 <.L31>
    1a08:	3f 98 97    	mov.w     [w15-74], w0
    1a0a:	84 00 37    	bra       0x1b14 <.L4>

00001a0c <.L5>:
    1a0c:	00 00 eb    	clr.w     w0
    1a0e:	90 9f 9f    	mov.w     w0, [w15-78]
    1a10:	80 9f 9f    	mov.w     w0, [w15-80]
    1a12:	f0 97 9f    	mov.w     w0, [w15-82]
    1a14:	e0 97 9f    	mov.w     w0, [w15-84]
    1a16:	d0 97 9f    	mov.w     w0, [w15-86]
    1a18:	c0 97 9f    	mov.w     w0, [w15-88]
    1a1a:	07 00 37    	bra       0x1a2a <.L34>

00001a1c <.L8>:
    1a1c:	01 55 21    	mov.w     #0x1550, w1
    1a1e:	01 00 50    	sub.w     w0, w1, w0
    1a20:	00 00 40    	add.w     w0, w0, w0
    1a22:	41 54 21    	mov.w     #0x1544, w1
    1a24:	61 00 78    	mov.w     [w1+w0], w0
    1a26:	df 98 97    	mov.w     [w15-70], w1
    1a28:	01 00 70    	ior.w     w0, w1, w0

00001a2a <.L34>:
    1a2a:	d0 9f 9f    	mov.w     w0, [w15-70]
    1a2c:	88 04 78    	mov.w     w8, w9
    1a2e:	09 04 78    	mov.w     w9, w8
    1a30:	38 45 78    	mov.b     [w8++], w10
    1a32:	8a 00 fb    	se        w10, w1
    1a34:	00 55 21    	mov.w     #0x1550, w0
    1a36:	39 02 07    	rcall     0x1eaa <_strchr>
    1a38:	00 00 e0    	cp0.w     w0
    1a3a:	f0 ff 3a    	bra       NZ, 0x1a1c <.L8>
    1a3c:	a1 c2 b3    	mov.b     #0x2a, w1
    1a3e:	81 4f 55    	sub.b     w10, w1, [w15]
    1a40:	0e 00 3a    	bra       NZ, 0x1a5e <.L9>
    1a42:	cf 88 97    	mov.w     [w15-104], w1
    1a44:	01 80 e9    	dec2.w    w1, w0
    1a46:	c0 8f 9f    	mov.w     w0, [w15-104]
    1a48:	10 00 78    	mov.w     [w0], w0
    1a4a:	c0 9f 9f    	mov.w     w0, [w15-72]
    1a4c:	00 00 e0    	cp0.w     w0
    1a4e:	05 00 3d    	bra       GE, 0x1a5a <.L10>
    1a50:	00 00 ea    	neg.w     w0, w0
    1a52:	c0 9f 9f    	mov.w     w0, [w15-72]
    1a54:	5f 98 97    	mov.w     [w15-70], w0
    1a56:	00 20 a0    	bset.w    w0, #0x2
    1a58:	d0 9f 9f    	mov.w     w0, [w15-70]

00001a5a <.L10>:
    1a5a:	09 04 e8    	inc.w     w9, w8
    1a5c:	0f 00 37    	bra       0x1a7c <.L11>

00001a5e <.L9>:
    1a5e:	c0 9f 9f    	mov.w     w0, [w15-72]
    1a60:	00 00 eb    	clr.w     w0
    1a62:	05 00 37    	bra       0x1a6e <.L32>

00001a64 <.L14>:
    1a64:	f2 ff 27    	mov.w     #0x7fff, w2
    1a66:	82 0f 50    	sub.w     w0, w2, [w15]
    1a68:	02 00 32    	bra       Z, 0x1a6e <.L32>
    1a6a:	6a 01 b9    	mul.su    w0, #0xa, w2
    1a6c:	02 80 40    	add.w     w1, w2, w0

00001a6e <.L32>:
    1a6e:	09 04 78    	mov.w     w9, w8
    1a70:	88 04 78    	mov.w     w8, w9
    1a72:	b9 00 fb    	se        [w9++], w1
    1a74:	01 03 b1    	sub.w     #0x30, w1
    1a76:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1a78:	f5 ff 36    	bra       LEU, 0x1a64 <.L14>
    1a7a:	c0 9f 9f    	mov.w     w0, [w15-72]

00001a7c <.L11>:
    1a7c:	e0 c2 b3    	mov.b     #0x2e, w0
    1a7e:	98 4f 10    	subr.b    w0, [w8], [w15]
    1a80:	02 00 32    	bra       Z, 0x1a86 <.L15>
    1a82:	00 80 eb    	setm.w    w0
    1a84:	19 00 37    	bra       0x1ab8 <.L35>

00001a86 <.L15>:
    1a86:	a0 c2 b3    	mov.b     #0x2a, w0
    1a88:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1a8a:	07 00 3a    	bra       NZ, 0x1a9a <.L17>
    1a8c:	cf 88 97    	mov.w     [w15-104], w1
    1a8e:	01 80 e9    	dec2.w    w1, w0
    1a90:	c0 8f 9f    	mov.w     w0, [w15-104]
    1a92:	10 00 78    	mov.w     [w0], w0
    1a94:	a0 9f 9f    	mov.w     w0, [w15-76]
    1a96:	08 04 e8    	inc.w     w8, w8
    1a98:	10 00 37    	bra       0x1aba <.L16>

00001a9a <.L17>:
    1a9a:	00 00 eb    	clr.w     w0
    1a9c:	a0 9f 9f    	mov.w     w0, [w15-76]
    1a9e:	88 00 78    	mov.w     w8, w1
    1aa0:	05 00 37    	bra       0x1aac <.L33>

00001aa2 <.L20>:
    1aa2:	f3 ff 27    	mov.w     #0x7fff, w3
    1aa4:	83 0f 50    	sub.w     w0, w3, [w15]
    1aa6:	02 00 32    	bra       Z, 0x1aac <.L33>
    1aa8:	6a 02 b9    	mul.su    w0, #0xa, w4
    1aaa:	04 00 41    	add.w     w2, w4, w0

00001aac <.L33>:
    1aac:	01 04 78    	mov.w     w1, w8
    1aae:	88 00 78    	mov.w     w8, w1
    1ab0:	31 01 fb    	se        [w1++], w2
    1ab2:	02 03 b1    	sub.w     #0x30, w2
    1ab4:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1ab6:	f5 ff 36    	bra       LEU, 0x1aa2 <.L20>

00001ab8 <.L35>:
    1ab8:	a0 9f 9f    	mov.w     w0, [w15-76]

00001aba <.L16>:
    1aba:	98 44 78    	mov.b     [w8], w9
    1abc:	89 00 fb    	se        w9, w1
    1abe:	c0 53 21    	mov.w     #0x153c, w0
    1ac0:	f4 01 07    	rcall     0x1eaa <_strchr>
    1ac2:	00 00 e0    	cp0.w     w0
    1ac4:	02 00 32    	bra       Z, 0x1aca <.L25>
    1ac6:	08 04 e8    	inc.w     w8, w8
    1ac8:	01 00 37    	bra       0x1acc <.L21>

00001aca <.L25>:
    1aca:	80 44 eb    	clr.b     w9

00001acc <.L21>:
    1acc:	c9 7f 9f    	mov.b     w9, [w15-68]
    1ace:	80 c6 b3    	mov.b     #0x68, w0
    1ad0:	80 cf 54    	sub.b     w9, w0, [w15]
    1ad2:	04 00 3a    	bra       NZ, 0x1adc <.L22>
    1ad4:	98 cf 14    	subr.b    w9, [w8], [w15]
    1ad6:	0a 00 3a    	bra       NZ, 0x1aec <.L23>
    1ad8:	66 40 50    	sub.b     w0, #0x6, w0
    1ada:	06 00 37    	bra       0x1ae8 <.L36>

00001adc <.L22>:
    1adc:	c0 c6 b3    	mov.b     #0x6c, w0
    1ade:	80 cf 54    	sub.b     w9, w0, [w15]
    1ae0:	05 00 3a    	bra       NZ, 0x1aec <.L23>
    1ae2:	98 cf 14    	subr.b    w9, [w8], [w15]
    1ae4:	03 00 3a    	bra       NZ, 0x1aec <.L23>
    1ae6:	65 40 40    	add.b     w0, #0x5, w0

00001ae8 <.L36>:
    1ae8:	c0 7f 9f    	mov.b     w0, [w15-68]
    1aea:	08 04 e8    	inc.w     w8, w8

00001aec <.L23>:
    1aec:	18 01 fb    	se        [w8], w2
    1aee:	e3 fb 2f    	mov.w     #0xffbe, w3
    1af0:	8f 81 41    	add.w     w3, w15, w3
    1af2:	81 f9 2f    	mov.w     #0xff98, w1
    1af4:	8f 80 40    	add.w     w1, w15, w1
    1af6:	a0 f9 2f    	mov.w     #0xff9a, w0
    1af8:	0f 00 40    	add.w     w0, w15, w0
    1afa:	10 00 07    	rcall     0x1b1c <___Putfld_cdnopuxX>
    1afc:	00 00 e0    	cp0.w     w0
    1afe:	09 00 3a    	bra       NZ, 0x1b12 <.L27>
    1b00:	e1 fb 2f    	mov.w     #0xffbe, w1
    1b02:	8f 80 40    	add.w     w1, w15, w1
    1b04:	a0 f9 2f    	mov.w     #0xff9a, w0
    1b06:	0f 00 40    	add.w     w0, w15, w0
    1b08:	62 03 07    	rcall     0x21ce <__Puttxt>
    1b0a:	00 00 e0    	cp0.w     w0
    1b0c:	02 00 35    	bra       LT, 0x1b12 <.L27>
    1b0e:	08 04 e8    	inc.w     w8, w8
    1b10:	61 ff 37    	bra       0x19d4 <.L31>

00001b12 <.L27>:
    1b12:	00 80 eb    	setm.w    w0

00001b14 <.L4>:
    1b14:	4f 05 78    	mov.w     [--w15], w10
    1b16:	4f 04 be    	mov.d     [--w15], w8
    1b18:	00 80 fa    	ulnk      
    1b1a:	00 00 06    	return    

00001b1c <___Putfld_cdnopuxX>:
    1b1c:	88 1f 78    	mov.w     w8, [w15++]
    1b1e:	e4 c6 b3    	mov.b     #0x6e, w4
    1b20:	84 4f 51    	sub.b     w2, w4, [w15]
    1b22:	b6 00 32    	bra       Z, 0x1c90 <.L7>
    1b24:	10 00 3c    	bra       GT, 0x1b46 <.L9>
    1b26:	6b 42 52    	sub.b     w4, #0xb, w4
    1b28:	84 4f 51    	sub.b     w2, w4, [w15]
    1b2a:	18 00 32    	bra       Z, 0x1b5c <.L5>
    1b2c:	05 00 3c    	bra       GT, 0x1b38 <.L10>
    1b2e:	54 c2 b3    	mov.b     #0x25, w4
    1b30:	84 4f 51    	sub.b     w2, w4, [w15]
    1b32:	ee 00 32    	bra       Z, 0x1d10 <.L3>
    1b34:	84 c5 b3    	mov.b     #0x58, w4
    1b36:	0f 00 37    	bra       0x1b56 <.L47>

00001b38 <.L10>:
    1b38:	44 c6 b3    	mov.b     #0x64, w4
    1b3a:	84 4f 51    	sub.b     w2, w4, [w15]
    1b3c:	14 00 32    	bra       Z, 0x1b66 <.L6>
    1b3e:	65 42 42    	add.b     w4, #0x5, w4
    1b40:	84 4f 51    	sub.b     w2, w4, [w15]
    1b42:	e9 00 3a    	bra       NZ, 0x1d16 <.L2>
    1b44:	10 00 37    	bra       0x1b66 <.L6>

00001b46 <.L9>:
    1b46:	04 c7 b3    	mov.b     #0x70, w4
    1b48:	84 4f 51    	sub.b     w2, w4, [w15]
    1b4a:	d5 00 32    	bra       Z, 0x1cf6 <.L8>
    1b4c:	53 00 35    	bra       LT, 0x1bf4 <.L4>
    1b4e:	65 42 42    	add.b     w4, #0x5, w4
    1b50:	84 4f 51    	sub.b     w2, w4, [w15]
    1b52:	50 00 32    	bra       Z, 0x1bf4 <.L4>
    1b54:	63 42 42    	add.b     w4, #0x3, w4

00001b56 <.L47>:
    1b56:	84 4f 51    	sub.b     w2, w4, [w15]
    1b58:	de 00 3a    	bra       NZ, 0x1d16 <.L2>
    1b5a:	4c 00 37    	bra       0x1bf4 <.L4>

00001b5c <.L5>:
    1b5c:	11 81 e9    	dec2.w    [w1], w2
    1b5e:	82 08 78    	mov.w     w2, [w1]
    1b60:	f0 00 90    	mov.w     [w0+14], w1
    1b62:	12 41 78    	mov.b     [w2], w2
    1b64:	d6 00 37    	bra       0x1d12 <.L53>

00001b66 <.L6>:
    1b66:	20 62 90    	mov.b     [w0+34], w4
    1b68:	c5 c6 b3    	mov.b     #0x6c, w5
    1b6a:	85 4f 52    	sub.b     w4, w5, [w15]
    1b6c:	07 00 3a    	bra       NZ, 0x1b7c <.L12>
    1b6e:	91 02 78    	mov.w     [w1], w5
    1b70:	64 82 52    	sub.w     w5, #0x4, w4
    1b72:	84 08 78    	mov.w     w4, [w1]
    1b74:	14 02 be    	mov.d     [w4], w4
    1b76:	4f ab de    	asr.w     w5, #0xf, w6
    1b78:	86 03 78    	mov.w     w6, w7
    1b7a:	11 00 37    	bra       0x1b9e <.L13>

00001b7c <.L12>:
    1b7c:	15 c7 b3    	mov.b     #0x71, w5
    1b7e:	85 4f 52    	sub.b     w4, w5, [w15]
    1b80:	03 00 32    	bra       Z, 0x1b88 <.L43>
    1b82:	a5 c6 b3    	mov.b     #0x6a, w5
    1b84:	85 4f 52    	sub.b     w4, w5, [w15]
    1b86:	06 00 3a    	bra       NZ, 0x1b94 <.L15>

00001b88 <.L43>:
    1b88:	91 02 78    	mov.w     [w1], w5
    1b8a:	68 82 52    	sub.w     w5, #0x8, w4
    1b8c:	84 08 78    	mov.w     w4, [w1]
    1b8e:	54 03 be    	mov.d     [++w4], w6
    1b90:	44 02 be    	mov.d     [--w4], w4
    1b92:	05 00 37    	bra       0x1b9e <.L13>

00001b94 <.L15>:
    1b94:	11 82 e9    	dec2.w    [w1], w4
    1b96:	84 08 78    	mov.w     w4, [w1]
    1b98:	14 02 78    	mov.w     [w4], w4
    1b9a:	cf a2 de    	asr.w     w4, #0xf, w5
    1b9c:	61 2b b9    	mul.su    w5, #0x1, w6

00001b9e <.L13>:
    1b9e:	04 98 be    	mov.d     w4, [w0++]
    1ba0:	06 90 be    	mov.d     w6, [w0--]
    1ba2:	a0 60 90    	mov.b     [w0+34], w1
    1ba4:	88 c6 b3    	mov.b     #0x68, w8
    1ba6:	88 cf 50    	sub.b     w1, w8, [w15]
    1ba8:	0d 00 32    	bra       Z, 0x1bc4 <.L19>
    1baa:	28 c6 b3    	mov.b     #0x62, w8
    1bac:	88 cf 50    	sub.b     w1, w8, [w15]
    1bae:	04 00 3a    	bra       NZ, 0x1bb8 <.L18>
    1bb0:	04 02 fb    	se        w4, w4
    1bb2:	cf a2 de    	asr.w     w4, #0xf, w5
    1bb4:	61 2b b9    	mul.su    w5, #0x1, w6
    1bb6:	08 00 37    	bra       0x1bc8 <.L44>

00001bb8 <.L18>:
    1bb8:	48 c7 b3    	mov.b     #0x74, w8
    1bba:	88 cf 50    	sub.b     w1, w8, [w15]
    1bbc:	03 00 32    	bra       Z, 0x1bc4 <.L19>
    1bbe:	66 44 44    	add.b     w8, #0x6, w8
    1bc0:	88 cf 50    	sub.b     w1, w8, [w15]
    1bc2:	04 00 3a    	bra       NZ, 0x1bcc <.L17>

00001bc4 <.L19>:
    1bc4:	cf a2 de    	asr.w     w4, #0xf, w5
    1bc6:	61 2b b9    	mul.su    w5, #0x1, w6

00001bc8 <.L44>:
    1bc8:	04 98 be    	mov.d     w4, [w0++]
    1bca:	06 90 be    	mov.d     w6, [w0--]

00001bcc <.L17>:
    1bcc:	30 02 be    	mov.d     [w0++], w4
    1bce:	20 03 be    	mov.d     [w0--], w6
    1bd0:	f0 00 90    	mov.w     [w0+14], w1
    1bd2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1bd4:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1bd6:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1bd8:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1bda:	02 00 3d    	bra       GE, 0x1be0 <.L20>
    1bdc:	d4 c2 b3    	mov.b     #0x2d, w4
    1bde:	08 00 37    	bra       0x1bf0 <.L45>

00001be0 <.L20>:
    1be0:	00 12 90    	mov.w     [w0+32], w4
    1be2:	04 18 a3    	btst.z    w4, #0x1
    1be4:	02 00 32    	bra       Z, 0x1bea <.L22>
    1be6:	b4 c2 b3    	mov.b     #0x2b, w4
    1be8:	03 00 37    	bra       0x1bf0 <.L45>

00001bea <.L22>:
    1bea:	04 08 a3    	btst.z    w4, #0x0
    1bec:	4c 00 32    	bra       Z, 0x1c86 <.L31>
    1bee:	04 c2 b3    	mov.b     #0x20, w4

00001bf0 <.L45>:
    1bf0:	84 f1 78    	mov.b     w4, [w3+w1]
    1bf2:	47 00 37    	bra       0x1c82 <.L54>

00001bf4 <.L4>:
    1bf4:	20 62 90    	mov.b     [w0+34], w4
    1bf6:	c5 c6 b3    	mov.b     #0x6c, w5
    1bf8:	85 4f 52    	sub.b     w4, w5, [w15]
    1bfa:	06 00 3a    	bra       NZ, 0x1c08 <.L23>
    1bfc:	91 02 78    	mov.w     [w1], w5
    1bfe:	64 82 52    	sub.w     w5, #0x4, w4
    1c00:	84 08 78    	mov.w     w4, [w1]
    1c02:	14 02 be    	mov.d     [w4], w4
    1c04:	60 33 b8    	mul.uu    w6, #0x0, w6
    1c06:	11 00 37    	bra       0x1c2a <.L24>

00001c08 <.L23>:
    1c08:	15 c7 b3    	mov.b     #0x71, w5
    1c0a:	85 4f 52    	sub.b     w4, w5, [w15]
    1c0c:	03 00 32    	bra       Z, 0x1c14 <.L48>
    1c0e:	a5 c6 b3    	mov.b     #0x6a, w5
    1c10:	85 4f 52    	sub.b     w4, w5, [w15]
    1c12:	06 00 3a    	bra       NZ, 0x1c20 <.L26>

00001c14 <.L48>:
    1c14:	91 02 78    	mov.w     [w1], w5
    1c16:	68 82 52    	sub.w     w5, #0x8, w4
    1c18:	84 08 78    	mov.w     w4, [w1]
    1c1a:	54 03 be    	mov.d     [++w4], w6
    1c1c:	44 02 be    	mov.d     [--w4], w4
    1c1e:	05 00 37    	bra       0x1c2a <.L24>

00001c20 <.L26>:
    1c20:	11 82 e9    	dec2.w    [w1], w4
    1c22:	84 08 78    	mov.w     w4, [w1]
    1c24:	14 02 78    	mov.w     [w4], w4
    1c26:	80 02 eb    	clr.w     w5
    1c28:	60 33 b8    	mul.uu    w6, #0x0, w6

00001c2a <.L24>:
    1c2a:	04 98 be    	mov.d     w4, [w0++]
    1c2c:	06 90 be    	mov.d     w6, [w0--]
    1c2e:	a0 60 90    	mov.b     [w0+34], w1
    1c30:	88 c6 b3    	mov.b     #0x68, w8
    1c32:	88 cf 50    	sub.b     w1, w8, [w15]
    1c34:	0d 00 32    	bra       Z, 0x1c50 <.L30>
    1c36:	28 c6 b3    	mov.b     #0x62, w8
    1c38:	88 cf 50    	sub.b     w1, w8, [w15]
    1c3a:	04 00 3a    	bra       NZ, 0x1c44 <.L29>
    1c3c:	04 82 fb    	ze        w4, w4
    1c3e:	80 02 eb    	clr.w     w5
    1c40:	60 33 b8    	mul.uu    w6, #0x0, w6
    1c42:	08 00 37    	bra       0x1c54 <.L49>

00001c44 <.L29>:
    1c44:	48 c7 b3    	mov.b     #0x74, w8
    1c46:	88 cf 50    	sub.b     w1, w8, [w15]
    1c48:	03 00 32    	bra       Z, 0x1c50 <.L30>
    1c4a:	66 44 44    	add.b     w8, #0x6, w8
    1c4c:	88 cf 50    	sub.b     w1, w8, [w15]
    1c4e:	04 00 3a    	bra       NZ, 0x1c58 <.L28>

00001c50 <.L30>:
    1c50:	80 02 eb    	clr.w     w5
    1c52:	60 33 b8    	mul.uu    w6, #0x0, w6

00001c54 <.L49>:
    1c54:	04 98 be    	mov.d     w4, [w0++]
    1c56:	06 90 be    	mov.d     w6, [w0--]

00001c58 <.L28>:
    1c58:	80 10 90    	mov.w     [w0+32], w1
    1c5a:	01 38 a3    	btst.z    w1, #0x3
    1c5c:	14 00 32    	bra       Z, 0x1c86 <.L31>
    1c5e:	30 02 be    	mov.d     [w0++], w4
    1c60:	20 03 be    	mov.d     [w0--], w6
    1c62:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1c64:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1c66:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1c68:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1c6a:	0d 00 32    	bra       Z, 0x1c86 <.L31>
    1c6c:	81 c7 b3    	mov.b     #0x78, w1
    1c6e:	81 4f 51    	sub.b     w2, w1, [w15]
    1c70:	03 00 32    	bra       Z, 0x1c78 <.L32>
    1c72:	81 c5 b3    	mov.b     #0x58, w1
    1c74:	81 4f 51    	sub.b     w2, w1, [w15]
    1c76:	07 00 3a    	bra       NZ, 0x1c86 <.L31>

00001c78 <.L32>:
    1c78:	f0 00 90    	mov.w     [w0+14], w1
    1c7a:	04 c3 b3    	mov.b     #0x30, w4
    1c7c:	84 f1 78    	mov.b     w4, [w3+w1]
    1c7e:	81 00 e8    	inc.w     w1, w1
    1c80:	82 f1 78    	mov.b     w2, [w3+w1]

00001c82 <.L54>:
    1c82:	81 00 e8    	inc.w     w1, w1
    1c84:	71 00 98    	mov.w     w1, [w0+14]

00001c86 <.L31>:
    1c86:	f0 00 90    	mov.w     [w0+14], w1
    1c88:	81 81 41    	add.w     w3, w1, w3
    1c8a:	63 00 98    	mov.w     w3, [w0+12]
    1c8c:	82 40 78    	mov.b     w2, w1
    1c8e:	3e 00 37    	bra       0x1d0c <.L52>

00001c90 <.L7>:
    1c90:	a0 61 90    	mov.b     [w0+34], w3
    1c92:	c4 c6 b3    	mov.b     #0x6c, w4
    1c94:	11 81 e9    	dec2.w    [w1], w2
    1c96:	84 cf 51    	sub.b     w3, w4, [w15]
    1c98:	22 00 32    	bra       Z, 0x1cde <.L37>
    1c9a:	0a 00 3c    	bra       GT, 0x1cb0 <.L41>
    1c9c:	64 42 52    	sub.b     w4, #0x4, w4
    1c9e:	84 cf 51    	sub.b     w3, w4, [w15]
    1ca0:	25 00 32    	bra       Z, 0x1cec <.L51>
    1ca2:	04 c2 e8    	inc2.b    w4, w4
    1ca4:	84 cf 51    	sub.b     w3, w4, [w15]
    1ca6:	13 00 32    	bra       Z, 0x1cce <.L36>
    1ca8:	68 42 52    	sub.b     w4, #0x8, w4
    1caa:	84 cf 51    	sub.b     w3, w4, [w15]
    1cac:	1e 00 3a    	bra       NZ, 0x1cea <.L33>
    1cae:	0a 00 37    	bra       0x1cc4 <.L55>

00001cb0 <.L41>:
    1cb0:	44 c7 b3    	mov.b     #0x74, w4
    1cb2:	84 cf 51    	sub.b     w3, w4, [w15]
    1cb4:	1b 00 32    	bra       Z, 0x1cec <.L51>
    1cb6:	66 42 42    	add.b     w4, #0x6, w4
    1cb8:	84 cf 51    	sub.b     w3, w4, [w15]
    1cba:	18 00 32    	bra       Z, 0x1cec <.L51>
    1cbc:	69 42 52    	sub.b     w4, #0x9, w4
    1cbe:	84 cf 51    	sub.b     w3, w4, [w15]
    1cc0:	14 00 3a    	bra       NZ, 0x1cea <.L33>
    1cc2:	05 00 37    	bra       0x1cce <.L36>

00001cc4 <.L55>:
    1cc4:	82 08 78    	mov.w     w2, [w1]
    1cc6:	92 00 78    	mov.w     [w2], w1
    1cc8:	40 58 90    	mov.b     [w0+28], w0
    1cca:	80 48 78    	mov.b     w0, [w1]
    1ccc:	2c 00 37    	bra       0x1d26 <.L11>

00001cce <.L36>:
    1cce:	82 08 78    	mov.w     w2, [w1]
    1cd0:	92 00 78    	mov.w     [w2], w1
    1cd2:	60 0a 90    	mov.w     [w0+28], w4
    1cd4:	cf a2 de    	asr.w     w4, #0xf, w5
    1cd6:	61 2b b9    	mul.su    w5, #0x1, w6
    1cd8:	84 98 be    	mov.d     w4, [w1++]
    1cda:	86 90 be    	mov.d     w6, [w1--]
    1cdc:	24 00 37    	bra       0x1d26 <.L11>

00001cde <.L37>:
    1cde:	82 08 78    	mov.w     w2, [w1]
    1ce0:	92 00 78    	mov.w     [w2], w1
    1ce2:	60 09 90    	mov.w     [w0+28], w2
    1ce4:	cf 91 de    	asr.w     w2, #0xf, w3
    1ce6:	82 88 be    	mov.d     w2, [w1]
    1ce8:	1e 00 37    	bra       0x1d26 <.L11>

00001cea <.L33>:
    1cea:	11 81 e9    	dec2.w    [w1], w2

00001cec <.L51>:
    1cec:	82 08 78    	mov.w     w2, [w1]
    1cee:	92 00 78    	mov.w     [w2], w1
    1cf0:	60 08 90    	mov.w     [w0+28], w0
    1cf2:	80 08 78    	mov.w     w0, [w1]
    1cf4:	18 00 37    	bra       0x1d26 <.L11>

00001cf6 <.L8>:
    1cf6:	11 81 e9    	dec2.w    [w1], w2
    1cf8:	82 08 78    	mov.w     w2, [w1]
    1cfa:	12 02 78    	mov.w     [w2], w4
    1cfc:	cf a2 de    	asr.w     w4, #0xf, w5
    1cfe:	61 2b b9    	mul.su    w5, #0x1, w6
    1d00:	04 98 be    	mov.d     w4, [w0++]
    1d02:	06 90 be    	mov.d     w6, [w0--]
    1d04:	f0 00 90    	mov.w     [w0+14], w1
    1d06:	81 81 41    	add.w     w3, w1, w3
    1d08:	63 00 98    	mov.w     w3, [w0+12]
    1d0a:	81 c7 b3    	mov.b     #0x78, w1

00001d0c <.L52>:
    1d0c:	31 01 07    	rcall     0x1f70 <__Litob>
    1d0e:	0b 00 37    	bra       0x1d26 <.L11>

00001d10 <.L3>:
    1d10:	f0 00 90    	mov.w     [w0+14], w1

00001d12 <.L53>:
    1d12:	82 f1 78    	mov.b     w2, [w3+w1]
    1d14:	06 00 37    	bra       0x1d22 <.L50>

00001d16 <.L2>:
    1d16:	f0 00 90    	mov.w     [w0+14], w1
    1d18:	81 81 41    	add.w     w3, w1, w3
    1d1a:	02 04 e0    	cp0.b     w2
    1d1c:	01 00 3a    	bra       NZ, 0x1d20 <.L42>
    1d1e:	52 c2 b3    	mov.b     #0x25, w2

00001d20 <.L42>:
    1d20:	82 49 78    	mov.b     w2, [w3]

00001d22 <.L50>:
    1d22:	81 00 e8    	inc.w     w1, w1
    1d24:	71 00 98    	mov.w     w1, [w0+14]

00001d26 <.L11>:
    1d26:	00 00 eb    	clr.w     w0
    1d28:	4f 04 78    	mov.w     [--w15], w8
    1d2a:	00 00 06    	return    

00001d2c <__DNKfflush>:
    1d2c:	88 9f be    	mov.d     w8, [w15++]
    1d2e:	8a 1f 78    	mov.w     w10, [w15++]
    1d30:	00 04 78    	mov.w     w0, w8
    1d32:	08 00 e0    	cp0.w     w8
    1d34:	0d 00 3a    	bra       NZ, 0x1d50 <.L2>
    1d36:	68 42 21    	mov.w     #0x1426, w8
    1d38:	70 05 44    	add.w     w8, #0x10, w10
    1d3a:	80 04 eb    	clr.w     w9

00001d3c <.L4>:
    1d3c:	58 00 78    	mov.w     [++w8], w0
    1d3e:	00 00 e0    	cp0.w     w0
    1d40:	04 00 32    	bra       Z, 0x1d4a <.L3>
    1d42:	f4 ff 07    	rcall     0x1d2c <__DNKfflush>
    1d44:	00 00 e0    	cp0.w     w0
    1d46:	01 00 3d    	bra       GE, 0x1d4a <.L3>
    1d48:	80 84 eb    	setm.w    w9

00001d4a <.L3>:
    1d4a:	8a 0f 54    	sub.w     w8, w10, [w15]
    1d4c:	f7 ff 3a    	bra       NZ, 0x1d3c <.L4>
    1d4e:	25 00 37    	bra       0x1d9a <.L5>

00001d50 <.L2>:
    1d50:	00 00 22    	mov.w     #0x2000, w0
    1d52:	18 00 60    	and.w     w0, [w8], w0
    1d54:	80 04 eb    	clr.w     w9
    1d56:	21 00 32    	bra       Z, 0x1d9a <.L5>
    1d58:	a8 04 90    	mov.w     [w8+4], w9
    1d5a:	0f 00 37    	bra       0x1d7a <.L6>

00001d5c <.L8>:
    1d5c:	09 01 51    	sub.w     w2, w9, w2
    1d5e:	38 40 90    	mov.b     [w8+3], w0
    1d60:	00 00 fb    	se        w0, w0
    1d62:	89 00 78    	mov.w     w9, w1
    1d64:	84 06 07    	rcall     0x2a6e <_write>
    1d66:	00 00 e0    	cp0.w     w0
    1d68:	07 00 3c    	bra       GT, 0x1d78 <.L7>
    1d6a:	28 00 90    	mov.w     [w8+4], w0
    1d6c:	40 04 98    	mov.w     w0, [w8+8]
    1d6e:	60 04 98    	mov.w     w0, [w8+12]
    1d70:	50 0c 98    	mov.w     w0, [w8+26]
    1d72:	18 90 a0    	bset.w    [w8], #0x9
    1d74:	80 84 eb    	setm.w    w9
    1d76:	11 00 37    	bra       0x1d9a <.L5>

00001d78 <.L7>:
    1d78:	80 84 44    	add.w     w9, w0, w9

00001d7a <.L6>:
    1d7a:	48 01 90    	mov.w     [w8+8], w2
    1d7c:	82 8f 54    	sub.w     w9, w2, [w15]
    1d7e:	ee ff 39    	bra       NC, 0x1d5c <.L8>
    1d80:	28 00 90    	mov.w     [w8+4], w0
    1d82:	40 04 98    	mov.w     w0, [w8+8]
    1d84:	98 00 78    	mov.w     [w8], w1
    1d86:	02 c0 20    	mov.w     #0xc00, w2
    1d88:	02 81 60    	and.w     w1, w2, w2
    1d8a:	01 00 3a    	bra       NZ, 0x1d8e <.L9>
    1d8c:	38 00 90    	mov.w     [w8+6], w0

00001d8e <.L9>:
    1d8e:	01 e8 a3    	btst.z    w1, #0xe
    1d90:	02 00 32    	bra       Z, 0x1d96 <.L10>
    1d92:	60 04 98    	mov.w     w0, [w8+12]
    1d94:	01 00 37    	bra       0x1d98 <.L13>

00001d96 <.L10>:
    1d96:	50 0c 98    	mov.w     w0, [w8+26]

00001d98 <.L13>:
    1d98:	80 04 eb    	clr.w     w9

00001d9a <.L5>:
    1d9a:	09 00 78    	mov.w     w9, w0
    1d9c:	4f 05 78    	mov.w     [--w15], w10
    1d9e:	4f 04 be    	mov.d     [--w15], w8
    1da0:	00 00 06    	return    

00001da2 <_fputs>:
    1da2:	88 9f be    	mov.d     w8, [w15++]
    1da4:	8a 9f be    	mov.d     w10, [w15++]
    1da6:	80 04 78    	mov.w     w0, w9
    1da8:	01 04 78    	mov.w     w1, w8
    1daa:	2c 00 37    	bra       0x1e04 <.L2>

00001dac <.L9>:
    1dac:	c8 00 90    	mov.w     [w8+8], w1
    1dae:	68 00 90    	mov.w     [w8+12], w0
    1db0:	80 8f 50    	sub.w     w1, w0, [w15]
    1db2:	04 00 39    	bra       NC, 0x1dbc <.L3>
    1db4:	08 00 78    	mov.w     w8, w0
    1db6:	95 00 07    	rcall     0x1ee2 <__Fwprep>
    1db8:	00 00 e0    	cp0.w     w0
    1dba:	37 00 35    	bra       LT, 0x1e2a <.L13>

00001dbc <.L3>:
    1dbc:	00 40 20    	mov.w     #0x400, w0
    1dbe:	18 00 60    	and.w     w0, [w8], w0
    1dc0:	09 00 32    	bra       Z, 0x1dd4 <.L5>
    1dc2:	a1 00 20    	mov.w     #0xa, w1
    1dc4:	09 00 78    	mov.w     w9, w0
    1dc6:	83 00 07    	rcall     0x1ece <_strrchr>
    1dc8:	80 05 78    	mov.w     w0, w11
    1dca:	0b 00 e0    	cp0.w     w11
    1dcc:	03 00 32    	bra       Z, 0x1dd4 <.L5>
    1dce:	61 85 14    	subr.w    w9, #0x1, w10
    1dd0:	0a 85 45    	add.w     w11, w10, w10
    1dd2:	04 00 37    	bra       0x1ddc <.L6>

00001dd4 <.L5>:
    1dd4:	09 00 78    	mov.w     w9, w0
    1dd6:	75 00 07    	rcall     0x1ec2 <_strlen>
    1dd8:	00 05 78    	mov.w     w0, w10
    1dda:	80 05 eb    	clr.w     w11

00001ddc <.L6>:
    1ddc:	48 00 90    	mov.w     [w8+8], w0
    1dde:	e8 00 90    	mov.w     [w8+12], w1
    1de0:	80 80 50    	sub.w     w1, w0, w1
    1de2:	8a 8f 50    	sub.w     w1, w10, [w15]
    1de4:	02 00 31    	bra       C, 0x1dea <.L7>
    1de6:	01 05 78    	mov.w     w1, w10
    1de8:	80 05 eb    	clr.w     w11

00001dea <.L7>:
    1dea:	0a 01 78    	mov.w     w10, w2
    1dec:	89 00 78    	mov.w     w9, w1
    1dee:	47 fc 07    	rcall     0x167e <_memcpy>
    1df0:	48 00 90    	mov.w     [w8+8], w0
    1df2:	0a 00 40    	add.w     w0, w10, w0
    1df4:	40 04 98    	mov.w     w0, [w8+8]
    1df6:	0b 00 e0    	cp0.w     w11
    1df8:	04 00 32    	bra       Z, 0x1e02 <.L8>
    1dfa:	08 00 78    	mov.w     w8, w0
    1dfc:	97 ff 07    	rcall     0x1d2c <__DNKfflush>
    1dfe:	00 00 e0    	cp0.w     w0
    1e00:	14 00 3a    	bra       NZ, 0x1e2a <.L13>

00001e02 <.L8>:
    1e02:	8a 84 44    	add.w     w9, w10, w9

00001e04 <.L2>:
    1e04:	19 04 e0    	cp0.b     [w9]
    1e06:	d2 ff 3a    	bra       NZ, 0x1dac <.L9>
    1e08:	00 80 20    	mov.w     #0x800, w0
    1e0a:	18 00 60    	and.w     w0, [w8], w0
    1e0c:	06 00 32    	bra       Z, 0x1e1a <.L10>
    1e0e:	08 00 78    	mov.w     w8, w0
    1e10:	8d ff 07    	rcall     0x1d2c <__DNKfflush>
    1e12:	80 00 78    	mov.w     w0, w1
    1e14:	00 80 eb    	setm.w    w0
    1e16:	01 00 e0    	cp0.w     w1
    1e18:	09 00 3a    	bra       NZ, 0x1e2c <.L4>

00001e1a <.L10>:
    1e1a:	01 c0 20    	mov.w     #0xc00, w1
    1e1c:	98 80 60    	and.w     w1, [w8], w1
    1e1e:	00 00 eb    	clr.w     w0
    1e20:	05 00 32    	bra       Z, 0x1e2c <.L4>
    1e22:	48 00 90    	mov.w     [w8+8], w0
    1e24:	60 04 98    	mov.w     w0, [w8+12]
    1e26:	00 00 eb    	clr.w     w0
    1e28:	01 00 37    	bra       0x1e2c <.L4>

00001e2a <.L13>:
    1e2a:	00 80 eb    	setm.w    w0

00001e2c <.L4>:
    1e2c:	4f 05 be    	mov.d     [--w15], w10
    1e2e:	4f 04 be    	mov.d     [--w15], w8
    1e30:	00 00 06    	return    

00001e32 <_free>:
    1e32:	00 00 e0    	cp0.w     w0
    1e34:	2f 00 32    	bra       Z, 0x1e94 <.L1>
    1e36:	c0 01 78    	mov.w     [--w0], w3
    1e38:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    1e3a:	2c 00 36    	bra       LEU, 0x1e94 <.L1>
    1e3c:	03 08 a3    	btst.z    w3, #0x0
    1e3e:	2a 00 3a    	bra       NZ, 0x1e94 <.L1>
    1e40:	41 ab 80    	mov.w     0x1568, w1
    1e42:	01 00 e0    	cp0.w     w1
    1e44:	02 00 32    	bra       Z, 0x1e4a <.L3>
    1e46:	81 0f 50    	sub.w     w0, w1, [w15]
    1e48:	04 00 31    	bra       C, 0x1e52 <.L7>

00001e4a <.L3>:
    1e4a:	11 00 98    	mov.w     w1, [w0+2]
    1e4c:	40 ab 88    	mov.w     w0, 0x1568
    1e4e:	16 00 37    	bra       0x1e7c <.L5>

00001e50 <.L11>:
    1e50:	82 00 78    	mov.w     w2, w1

00001e52 <.L7>:
    1e52:	11 01 90    	mov.w     [w1+2], w2
    1e54:	02 00 e0    	cp0.w     w2
    1e56:	02 00 32    	bra       Z, 0x1e5c <.L6>
    1e58:	80 0f 51    	sub.w     w2, w0, [w15]
    1e5a:	fa ff 39    	bra       NC, 0x1e50 <.L11>

00001e5c <.L6>:
    1e5c:	11 02 78    	mov.w     [w1], w4
    1e5e:	84 82 40    	add.w     w1, w4, w5
    1e60:	85 0f 50    	sub.w     w0, w5, [w15]
    1e62:	18 00 39    	bra       NC, 0x1e94 <.L1>
    1e64:	80 8f 52    	sub.w     w5, w0, [w15]
    1e66:	03 00 3a    	bra       NZ, 0x1e6e <.L8>
    1e68:	83 08 42    	add.w     w4, w3, [w1]
    1e6a:	01 00 78    	mov.w     w1, w0
    1e6c:	07 00 37    	bra       0x1e7c <.L5>

00001e6e <.L8>:
    1e6e:	02 00 e0    	cp0.w     w2
    1e70:	03 00 32    	bra       Z, 0x1e78 <.L9>
    1e72:	83 01 40    	add.w     w0, w3, w3
    1e74:	83 0f 51    	sub.w     w2, w3, [w15]
    1e76:	0e 00 39    	bra       NC, 0x1e94 <.L1>

00001e78 <.L9>:
    1e78:	12 00 98    	mov.w     w2, [w0+2]
    1e7a:	90 00 98    	mov.w     w0, [w1+2]

00001e7c <.L5>:
    1e7c:	90 00 90    	mov.w     [w0+2], w1
    1e7e:	01 00 e0    	cp0.w     w1
    1e80:	09 00 32    	bra       Z, 0x1e94 <.L1>
    1e82:	10 01 40    	add.w     w0, [w0], w2
    1e84:	82 8f 50    	sub.w     w1, w2, [w15]
    1e86:	06 00 3a    	bra       NZ, 0x1e94 <.L1>
    1e88:	62 56 21    	mov.w     #0x1566, w2
    1e8a:	00 09 eb    	clr.w     [w2]
    1e8c:	10 01 78    	mov.w     [w0], w2
    1e8e:	11 08 41    	add.w     w2, [w1], [w0]
    1e90:	91 00 90    	mov.w     [w1+2], w1
    1e92:	11 00 98    	mov.w     w1, [w0+2]

00001e94 <.L1>:
    1e94:	00 00 06    	return    

00001e96 <_memchr>:
    1e96:	03 00 37    	bra       0x1e9e <.L2>

00001e98 <.L4>:
    1e98:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    1e9a:	05 00 32    	bra       Z, 0x1ea6 <.L5>
    1e9c:	02 01 e9    	dec.w     w2, w2

00001e9e <.L2>:
    1e9e:	80 01 78    	mov.w     w0, w3
    1ea0:	02 00 e0    	cp0.w     w2
    1ea2:	fa ff 3a    	bra       NZ, 0x1e98 <.L4>
    1ea4:	00 00 05    	retlw.w   #0x0, w0

00001ea6 <.L5>:
    1ea6:	03 00 78    	mov.w     w3, w0
    1ea8:	00 00 06    	return    

00001eaa <_strchr>:
    1eaa:	02 00 37    	bra       0x1eb0 <.L2>

00001eac <.L4>:
    1eac:	03 04 e0    	cp0.b     w3
    1eae:	06 00 32    	bra       Z, 0x1ebc <.L5>

00001eb0 <.L2>:
    1eb0:	00 01 78    	mov.w     w0, w2
    1eb2:	02 00 78    	mov.w     w2, w0
    1eb4:	b0 41 78    	mov.b     [w0++], w3
    1eb6:	81 cf 51    	sub.b     w3, w1, [w15]
    1eb8:	f9 ff 3a    	bra       NZ, 0x1eac <.L4>
    1eba:	01 00 37    	bra       0x1ebe <.L3>

00001ebc <.L5>:
    1ebc:	00 01 eb    	clr.w     w2

00001ebe <.L3>:
    1ebe:	02 00 78    	mov.w     w2, w0
    1ec0:	00 00 06    	return    

00001ec2 <_strlen>:
    1ec2:	80 00 78    	mov.w     w0, w1

00001ec4 <.L2>:
    1ec4:	01 01 78    	mov.w     w1, w2
    1ec6:	31 04 e0    	cp0.b     [w1++]
    1ec8:	fd ff 3a    	bra       NZ, 0x1ec4 <.L2>
    1eca:	00 00 51    	sub.w     w2, w0, w0
    1ecc:	00 00 06    	return    

00001ece <_strrchr>:
    1ece:	00 01 eb    	clr.w     w2

00001ed0 <.L3>:
    1ed0:	00 02 78    	mov.w     w0, w4
    1ed2:	b0 41 78    	mov.b     [w0++], w3
    1ed4:	81 cf 51    	sub.b     w3, w1, [w15]
    1ed6:	01 00 3a    	bra       NZ, 0x1eda <.L2>
    1ed8:	04 01 78    	mov.w     w4, w2

00001eda <.L2>:
    1eda:	03 04 e0    	cp0.b     w3
    1edc:	f9 ff 3a    	bra       NZ, 0x1ed0 <.L3>
    1ede:	02 00 78    	mov.w     w2, w0
    1ee0:	00 00 06    	return    

00001ee2 <__Fwprep>:
    1ee2:	88 9f be    	mov.d     w8, [w15++]
    1ee4:	8a 1f 78    	mov.w     w10, [w15++]
    1ee6:	00 04 78    	mov.w     w0, w8
    1ee8:	c8 00 90    	mov.w     [w8+8], w1
    1eea:	68 01 90    	mov.w     [w8+12], w2
    1eec:	00 00 eb    	clr.w     w0
    1eee:	82 8f 50    	sub.w     w1, w2, [w15]
    1ef0:	3c 00 39    	bra       NC, 0x1f6a <.L2>
    1ef2:	18 00 78    	mov.w     [w8], w0
    1ef4:	22 00 29    	mov.w     #0x9002, w2
    1ef6:	02 01 60    	and.w     w0, w2, w2
    1ef8:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    1efa:	07 00 32    	bra       Z, 0x1f0a <.L3>
    1efc:	01 20 24    	mov.w     #0x4200, w1
    1efe:	00 00 e0    	cp0.w     w0
    1f00:	01 00 3d    	bra       GE, 0x1f04 <.L4>
    1f02:	01 20 20    	mov.w     #0x200, w1

00001f04 <.L4>:
    1f04:	00 8c 70    	ior.w     w1, w0, [w8]
    1f06:	00 80 eb    	setm.w    w0
    1f08:	30 00 37    	bra       0x1f6a <.L2>

00001f0a <.L3>:
    1f0a:	02 00 26    	mov.w     #0x6000, w2
    1f0c:	02 00 60    	and.w     w0, w2, w0
    1f0e:	82 0f 50    	sub.w     w0, w2, [w15]
    1f10:	09 00 3a    	bra       NZ, 0x1f24 <.L5>
    1f12:	38 00 90    	mov.w     [w8+6], w0
    1f14:	80 8f 50    	sub.w     w1, w0, [w15]
    1f16:	06 00 39    	bra       NC, 0x1f24 <.L5>
    1f18:	08 00 78    	mov.w     w8, w0
    1f1a:	08 ff 07    	rcall     0x1d2c <__DNKfflush>
    1f1c:	80 00 78    	mov.w     w0, w1
    1f1e:	00 80 eb    	setm.w    w0
    1f20:	01 00 e0    	cp0.w     w1
    1f22:	23 00 3a    	bra       NZ, 0x1f6a <.L2>

00001f24 <.L5>:
    1f24:	18 05 78    	mov.w     [w8], w10
    1f26:	00 c0 20    	mov.w     #0xc00, w0
    1f28:	00 00 65    	and.w     w10, w0, w0
    1f2a:	18 00 3a    	bra       NZ, 0x1f5c <.L6>
    1f2c:	a8 04 90    	mov.w     [w8+4], w9
    1f2e:	60 02 20    	mov.w     #0x26, w0
    1f30:	08 00 40    	add.w     w0, w8, w0
    1f32:	80 8f 54    	sub.w     w9, w0, [w15]
    1f34:	13 00 3a    	bra       NZ, 0x1f5c <.L6>
    1f36:	00 20 20    	mov.w     #0x200, w0
    1f38:	78 fb 07    	rcall     0x162a <_malloc>
    1f3a:	20 04 98    	mov.w     w0, [w8+4]
    1f3c:	00 00 e0    	cp0.w     w0
    1f3e:	05 00 3a    	bra       NZ, 0x1f4a <.L7>
    1f40:	29 04 98    	mov.w     w9, [w8+4]
    1f42:	49 04 98    	mov.w     w9, [w8+8]
    1f44:	89 04 e8    	inc.w     w9, w9
    1f46:	39 04 98    	mov.w     w9, [w8+6]
    1f48:	08 00 37    	bra       0x1f5a <.L11>

00001f4a <.L7>:
    1f4a:	0a 60 a0    	bset.w    w10, #0x6
    1f4c:	0a 0c 78    	mov.w     w10, [w8]
    1f4e:	40 04 98    	mov.w     w0, [w8+8]
    1f50:	01 20 20    	mov.w     #0x200, w1
    1f52:	80 80 40    	add.w     w1, w0, w1
    1f54:	31 04 98    	mov.w     w1, [w8+6]
    1f56:	40 0c 98    	mov.w     w0, [w8+24]
    1f58:	50 0c 98    	mov.w     w0, [w8+26]

00001f5a <.L11>:
    1f5a:	f9 01 07    	rcall     0x234e <__Closreg>

00001f5c <.L6>:
    1f5c:	28 00 90    	mov.w     [w8+4], w0
    1f5e:	50 04 98    	mov.w     w0, [w8+10]
    1f60:	38 00 90    	mov.w     [w8+6], w0
    1f62:	60 04 98    	mov.w     w0, [w8+12]
    1f64:	00 00 26    	mov.w     #0x6000, w0
    1f66:	18 0c 70    	ior.w     w0, [w8], [w8]
    1f68:	00 00 eb    	clr.w     w0

00001f6a <.L2>:
    1f6a:	4f 05 78    	mov.w     [--w15], w10
    1f6c:	4f 04 be    	mov.d     [--w15], w8
    1f6e:	00 00 06    	return    

00001f70 <__Litob>:
    1f70:	fc 87 47    	add.w     w15, #0x1c, w15
    1f72:	88 9f be    	mov.d     w8, [w15++]
    1f74:	8a 9f be    	mov.d     w10, [w15++]
    1f76:	8c 9f be    	mov.d     w12, [w15++]
    1f78:	8e 1f 78    	mov.w     w14, [w15++]
    1f7a:	00 06 78    	mov.w     w0, w12
    1f7c:	80 c5 b3    	mov.b     #0x58, w0
    1f7e:	80 cf 50    	sub.b     w1, w0, [w15]
    1f80:	0a 00 32    	bra       Z, 0x1f96 <.L35>
    1f82:	77 40 40    	add.b     w0, #0x17, w0
    1f84:	80 cf 50    	sub.b     w1, w0, [w15]
    1f86:	0a 00 32    	bra       Z, 0x1f9c <.L36>
    1f88:	69 40 40    	add.b     w0, #0x9, w0
    1f8a:	80 cf 50    	sub.b     w1, w0, [w15]
    1f8c:	0b 00 32    	bra       Z, 0x1fa4 <.L37>
    1f8e:	b0 52 21    	mov.w     #0x152b, w0
    1f90:	80 bf 9f    	mov.w     w0, [w15-16]
    1f92:	ae 00 20    	mov.w     #0xa, w14
    1f94:	0a 00 37    	bra       0x1faa <.L2>

00001f96 <.L35>:
    1f96:	a2 51 21    	mov.w     #0x151a, w2
    1f98:	82 bf 9f    	mov.w     w2, [w15-16]
    1f9a:	06 00 37    	bra       0x1fa8 <.L46>

00001f9c <.L36>:
    1f9c:	b3 52 21    	mov.w     #0x152b, w3
    1f9e:	83 bf 9f    	mov.w     w3, [w15-16]
    1fa0:	8e 00 20    	mov.w     #0x8, w14
    1fa2:	03 00 37    	bra       0x1faa <.L2>

00001fa4 <.L37>:
    1fa4:	b4 52 21    	mov.w     #0x152b, w4
    1fa6:	84 bf 9f    	mov.w     w4, [w15-16]

00001fa8 <.L46>:
    1fa8:	0e 01 20    	mov.w     #0x10, w14

00001faa <.L2>:
    1faa:	3c 02 be    	mov.d     [w12++], w4
    1fac:	2c 03 be    	mov.d     [w12--], w6
    1fae:	06 05 be    	mov.d     w6, w10
    1fb0:	04 04 be    	mov.d     w4, w8
    1fb2:	40 c6 b3    	mov.b     #0x64, w0
    1fb4:	80 cf 50    	sub.b     w1, w0, [w15]
    1fb6:	03 00 32    	bra       Z, 0x1fbe <.L3>
    1fb8:	65 40 40    	add.b     w0, #0x5, w0
    1fba:	80 cf 50    	sub.b     w1, w0, [w15]
    1fbc:	0b 00 3a    	bra       NZ, 0x1fd4 <.L4>

00001fbe <.L3>:
    1fbe:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1fc0:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1fc2:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1fc4:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1fc6:	06 00 3d    	bra       GE, 0x1fd4 <.L4>
    1fc8:	60 00 b8    	mul.uu    w0, #0x0, w0
    1fca:	60 11 b8    	mul.uu    w2, #0x0, w2
    1fcc:	04 04 50    	sub.w     w0, w4, w8
    1fce:	85 84 58    	subb.w    w1, w5, w9
    1fd0:	06 05 59    	subb.w    w2, w6, w10
    1fd2:	87 85 59    	subb.w    w3, w7, w11

00001fd4 <.L4>:
    1fd4:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1fd6:	04 00 32    	bra       Z, 0x1fe0 <.L38>
    1fd8:	40 00 20    	mov.w     #0x4, w0
    1fda:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1fdc:	38 00 3a    	bra       NZ, 0x204e <.L51>
    1fde:	01 00 37    	bra       0x1fe2 <.L6>

00001fe0 <.L38>:
    1fe0:	30 00 20    	mov.w     #0x3, w0

00001fe2 <.L6>:
    1fe2:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1fe4:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1fe6:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1fe8:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1fea:	04 00 3a    	bra       NZ, 0x1ff4 <.L8>
    1fec:	dc 08 90    	mov.w     [w12+26], w1
    1fee:	8d 01 20    	mov.w     #0x18, w13
    1ff0:	01 00 e0    	cp0.w     w1
    1ff2:	06 00 32    	bra       Z, 0x2000

00001ff4 <.L8>:
    1ff4:	8e 00 e9    	dec.w     w14, w1
    1ff6:	88 80 60    	and.w     w1, w8, w1
    1ff8:	8f ba 97    	mov.w     [w15-16], w5
    1ffa:	e5 c0 78    	mov.b     [w5+w1], w1
    1ffc:	f1 ef 9f    	mov.b     w1, [w15-17]
    1ffe:	7d 01 20    	mov.w     #0x17, w13

00002000 <.L9>:
    2000:	80 00 78    	mov.w     w0, w1

00002002 <.LB101>:
    2002:	81 00 e9    	dec.w     w1, w1
    2004:	05 00 33    	bra       N, 0x2010 <.LE101>
    2006:	8b 05 d1    	lsr.w     w11, w11
    2008:	0a 85 d3    	rrc.w     w10, w10
    200a:	89 84 d3    	rrc.w     w9, w9
    200c:	08 84 d3    	rrc.w     w8, w8
    200e:	f9 ff 37    	bra       0x2002 <.LB101>

00002010 <.LE101>:
    2010:	08 9e be    	mov.d     w8, [w12++]
    2012:	0a 96 be    	mov.d     w10, [w12--]
    2014:	12 00 37    	bra       0x203a <.L10>

00002016 <.L12>:
    2016:	8d 06 e9    	dec.w     w13, w13
    2018:	8e 00 e9    	dec.w     w14, w1
    201a:	84 80 60    	and.w     w1, w4, w1
    201c:	0f b9 97    	mov.w     [w15-16], w2
    201e:	e2 c1 78    	mov.b     [w2+w1], w3
    2020:	82 fd 2f    	mov.w     #0xffd8, w2
    2022:	0f 01 41    	add.w     w2, w15, w2
    2024:	03 f1 7e    	mov.b     w3, [w2+w13]
    2026:	80 00 78    	mov.w     w0, w1

00002028 <.LB115>:
    2028:	81 00 e9    	dec.w     w1, w1
    202a:	05 00 33    	bra       N, 0x2036 <.LE115>
    202c:	87 83 d1    	asr.w     w7, w7
    202e:	06 83 d3    	rrc.w     w6, w6
    2030:	85 82 d3    	rrc.w     w5, w5
    2032:	04 82 d3    	rrc.w     w4, w4
    2034:	f9 ff 37    	bra       0x2028 <.LB115>

00002036 <.LE115>:
    2036:	04 9e be    	mov.d     w4, [w12++]
    2038:	06 96 be    	mov.d     w6, [w12--]

0000203a <.L10>:
    203a:	3c 02 be    	mov.d     [w12++], w4
    203c:	2c 03 be    	mov.d     [w12--], w6
    203e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2040:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2042:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2044:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2046:	8b 00 34    	bra       LE, 0x215e <.L11>
    2048:	0d 00 e0    	cp0.w     w13
    204a:	e5 ff 3c    	bra       GT, 0x2016 <.L12>
    204c:	88 00 37    	bra       0x215e <.L11>

0000204e <.L51>:
    204e:	2c 60 90    	mov.b     [w12+34], w0
    2050:	81 c6 b3    	mov.b     #0x68, w1
    2052:	81 4f 50    	sub.b     w0, w1, [w15]
    2054:	0b 00 32    	bra       Z, 0x206c <.L14>
    2056:	06 00 3c    	bra       GT, 0x2064 <.L16>
    2058:	00 04 e0    	cp0.b     w0
    205a:	08 00 32    	bra       Z, 0x206c <.L14>
    205c:	e6 c0 50    	sub.b     w1, #0x6, w1
    205e:	81 4f 50    	sub.b     w0, w1, [w15]
    2060:	4e 00 3a    	bra       NZ, 0x20fe <.L13>
    2062:	04 00 37    	bra       0x206c <.L14>

00002064 <.L16>:
    2064:	c1 c6 b3    	mov.b     #0x6c, w1
    2066:	81 4f 50    	sub.b     w0, w1, [w15]
    2068:	4a 00 3a    	bra       NZ, 0x20fe <.L13>
    206a:	21 00 37    	bra       0x20ae <.L52>

0000206c <.L14>:
    206c:	08 00 e0    	cp0.w     w8
    206e:	04 00 3a    	bra       NZ, 0x2078 <.L17>
    2070:	5c 08 90    	mov.w     [w12+26], w0
    2072:	8d 01 20    	mov.w     #0x18, w13
    2074:	00 00 e0    	cp0.w     w0
    2076:	06 00 32    	bra       Z, 0x2084 <.L18>

00002078 <.L17>:
    2078:	11 00 09    	repeat    #0x11
    207a:	0e 84 d8    	div.uw    w8, w14
    207c:	0f b9 97    	mov.w     [w15-16], w2
    207e:	e2 c0 78    	mov.b     [w2+w1], w1
    2080:	f1 ef 9f    	mov.b     w1, [w15-17]
    2082:	7d 01 20    	mov.w     #0x17, w13

00002084 <.L18>:
    2084:	11 00 09    	repeat    #0x11
    2086:	0e 84 d8    	div.uw    w8, w14
    2088:	0a 00 37    	bra       0x209e <.L47>

0000208a <.L21>:
    208a:	11 00 09    	repeat    #0x11
    208c:	0e 04 d8    	div.sw    w8, w14
    208e:	8d 06 e9    	dec.w     w13, w13
    2090:	0e 81 b9    	mul.ss    w0, w14, w2
    2092:	02 04 54    	sub.w     w8, w2, w8
    2094:	8f b8 97    	mov.w     [w15-16], w1
    2096:	61 41 7c    	mov.b     [w1+w8], w2
    2098:	81 fd 2f    	mov.w     #0xffd8, w1
    209a:	8f 80 40    	add.w     w1, w15, w1
    209c:	82 f0 7e    	mov.b     w2, [w1+w13]

0000209e <.L47>:
    209e:	00 04 78    	mov.w     w0, w8
    20a0:	08 00 e0    	cp0.w     w8
    20a2:	02 00 32    	bra       Z, 0x20a8 <.L20>
    20a4:	0d 00 e0    	cp0.w     w13
    20a6:	f1 ff 3c    	bra       GT, 0x208a <.L21>

000020a8 <.L20>:
    20a8:	cf c4 de    	asr.w     w8, #0xf, w9
    20aa:	61 4d b9    	mul.su    w9, #0x1, w10
    20ac:	25 00 37    	bra       0x20f8 <.L50>

000020ae <.L52>:
    20ae:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    20b0:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    20b2:	04 00 3a    	bra       NZ, 0x20bc <.L22>
    20b4:	5c 08 90    	mov.w     [w12+26], w0
    20b6:	8d 01 20    	mov.w     #0x18, w13
    20b8:	00 00 e0    	cp0.w     w0
    20ba:	07 00 32    	bra       Z, 0x20ca <.L23>

000020bc <.L22>:
    20bc:	61 71 b9    	mul.su    w14, #0x1, w2
    20be:	08 00 be    	mov.d     w8, w0
    20c0:	c6 01 07    	rcall     0x244e <___umodsi3>
    20c2:	8f b9 97    	mov.w     [w15-16], w3
    20c4:	e3 41 78    	mov.b     [w3+w0], w3
    20c6:	f3 ef 9f    	mov.b     w3, [w15-17]
    20c8:	7d 01 20    	mov.w     #0x17, w13

000020ca <.L23>:
    20ca:	61 71 b9    	mul.su    w14, #0x1, w2
    20cc:	08 00 be    	mov.d     w8, w0
    20ce:	20 fa 07    	rcall     0x1510 <___udivsi3>
    20d0:	0b 00 37    	bra       0x20e8 <.L48>

000020d2 <.L26>:
    20d2:	61 71 b9    	mul.su    w14, #0x1, w2
    20d4:	08 00 be    	mov.d     w8, w0
    20d6:	ac 01 07    	rcall     0x2430 <___divsi3>
    20d8:	8d 06 e9    	dec.w     w13, w13
    20da:	00 f1 b9    	mul.ss    w14, w0, w2
    20dc:	02 04 54    	sub.w     w8, w2, w8
    20de:	0f ba 97    	mov.w     [w15-16], w4
    20e0:	e4 42 7c    	mov.b     [w4+w8], w5
    20e2:	84 fd 2f    	mov.w     #0xffd8, w4
    20e4:	0f 02 42    	add.w     w4, w15, w4
    20e6:	05 f2 7e    	mov.b     w5, [w4+w13]

000020e8 <.L48>:
    20e8:	00 04 be    	mov.d     w0, w8
    20ea:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    20ec:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    20ee:	02 00 32    	bra       Z, 0x20f4 <.L25>
    20f0:	0d 00 e0    	cp0.w     w13
    20f2:	ef ff 3c    	bra       GT, 0x20d2 <.L26>

000020f4 <.L25>:
    20f4:	4f cd de    	asr.w     w9, #0xf, w10
    20f6:	8a 05 78    	mov.w     w10, w11

000020f8 <.L50>:
    20f8:	08 9e be    	mov.d     w8, [w12++]
    20fa:	0a 96 be    	mov.d     w10, [w12--]
    20fc:	30 00 37    	bra       0x215e <.L11>

000020fe <.L13>:
    20fe:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2100:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    2102:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    2104:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    2106:	04 00 3a    	bra       NZ, 0x2110 <.L27>
    2108:	5c 08 90    	mov.w     [w12+26], w0
    210a:	8d 01 20    	mov.w     #0x18, w13
    210c:	00 00 e0    	cp0.w     w0
    210e:	09 00 32    	bra       Z, 0x2122 <.L28>

00002110 <.L27>:
    2110:	61 72 b9    	mul.su    w14, #0x1, w4
    2112:	61 2b b9    	mul.su    w5, #0x1, w6
    2114:	08 00 be    	mov.d     w8, w0
    2116:	0a 01 be    	mov.d     w10, w2
    2118:	43 02 07    	rcall     0x25a0 <___umoddi3>
    211a:	0f ba 97    	mov.w     [w15-16], w4
    211c:	64 42 78    	mov.b     [w4+w0], w4
    211e:	f4 ef 9f    	mov.b     w4, [w15-17]
    2120:	7d 01 20    	mov.w     #0x17, w13

00002122 <.L28>:
    2122:	61 72 b9    	mul.su    w14, #0x1, w4
    2124:	61 2b b9    	mul.su    w5, #0x1, w6
    2126:	08 00 be    	mov.d     w8, w0
    2128:	0a 01 be    	mov.d     w10, w2
    212a:	33 02 07    	rcall     0x2592 <___udivdi3>
    212c:	0d 00 37    	bra       0x2148 <.L49>

0000212e <.L30>:
    212e:	61 72 b9    	mul.su    w14, #0x1, w4
    2130:	61 2b b9    	mul.su    w5, #0x1, w6
    2132:	08 00 be    	mov.d     w8, w0
    2134:	0a 01 be    	mov.d     w10, w2
    2136:	38 02 07    	rcall     0x25a8 <___divdi3>
    2138:	8d 06 e9    	dec.w     w13, w13
    213a:	00 f2 b9    	mul.ss    w14, w0, w4
    213c:	04 04 54    	sub.w     w8, w4, w8
    213e:	8f ba 97    	mov.w     [w15-16], w5
    2140:	65 42 7c    	mov.b     [w5+w8], w4
    2142:	85 fd 2f    	mov.w     #0xffd8, w5
    2144:	8f 82 42    	add.w     w5, w15, w5
    2146:	84 f2 7e    	mov.b     w4, [w5+w13]

00002148 <.L49>:
    2148:	00 9e be    	mov.d     w0, [w12++]
    214a:	02 96 be    	mov.d     w2, [w12--]
    214c:	3c 04 be    	mov.d     [w12++], w8
    214e:	2c 05 be    	mov.d     [w12--], w10
    2150:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    2152:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    2154:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    2156:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    2158:	02 00 34    	bra       LE, 0x215e <.L11>
    215a:	0d 00 e0    	cp0.w     w13
    215c:	e8 ff 3c    	bra       GT, 0x212e <.L30>

0000215e <.L11>:
    215e:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    2160:	10 00 3a    	bra       NZ, 0x2182 <.L31>
    2162:	0c 10 90    	mov.w     [w12+32], w0
    2164:	00 38 a3    	btst.z    w0, #0x3
    2166:	0d 00 32    	bra       Z, 0x2182 <.L31>
    2168:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    216a:	06 00 3e    	bra       GTU, 0x2178 <.L32>
    216c:	85 fd 2f    	mov.w     #0xffd8, w5
    216e:	8f 82 42    	add.w     w5, w15, w5
    2170:	e5 c0 7e    	mov.b     [w5+w13], w1
    2172:	00 c3 b3    	mov.b     #0x30, w0
    2174:	80 cf 50    	sub.b     w1, w0, [w15]
    2176:	05 00 32    	bra       Z, 0x2182 <.L31>

00002178 <.L32>:
    2178:	8d 06 e9    	dec.w     w13, w13
    217a:	02 c3 b3    	mov.b     #0x30, w2
    217c:	81 fd 2f    	mov.w     #0xffd8, w1
    217e:	8f 80 40    	add.w     w1, w15, w1
    2180:	82 f0 7e    	mov.b     w2, [w1+w13]

00002182 <.L31>:
    2182:	78 81 16    	subr.w    w13, #0x18, w2
    2184:	12 0e 98    	mov.w     w2, [w12+18]
    2186:	6c 00 90    	mov.w     [w12+12], w0
    2188:	83 fd 2f    	mov.w     #0xffd8, w3
    218a:	8f 81 41    	add.w     w3, w15, w3
    218c:	8d 80 41    	add.w     w3, w13, w1
    218e:	77 fa 07    	rcall     0x167e <_memcpy>
    2190:	1c 08 90    	mov.w     [w12+18], w0
    2192:	dc 08 90    	mov.w     [w12+26], w1
    2194:	81 0f 50    	sub.w     w0, w1, [w15]
    2196:	06 00 3d    	bra       GE, 0x21a4 <.L33>
    2198:	00 80 50    	sub.w     w1, w0, w0
    219a:	00 0e 98    	mov.w     w0, [w12+16]
    219c:	0c 10 90    	mov.w     [w12+32], w0
    219e:	00 40 a1    	bclr.w    w0, #0x4
    21a0:	00 16 98    	mov.w     w0, [w12+32]
    21a2:	0f 00 37    	bra       0x21c2 <.L1>

000021a4 <.L33>:
    21a4:	01 00 e0    	cp0.w     w1
    21a6:	0d 00 3d    	bra       GE, 0x21c2 <.L1>
    21a8:	8c 10 90    	mov.w     [w12+32], w1
    21aa:	f4 80 60    	and.w     w1, #0x14, w1
    21ac:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    21ae:	09 00 3a    	bra       NZ, 0x21c2 <.L1>
    21b0:	7c 09 90    	mov.w     [w12+30], w2
    21b2:	fc 00 90    	mov.w     [w12+14], w1
    21b4:	81 00 51    	sub.w     w2, w1, w1
    21b6:	0c 09 90    	mov.w     [w12+16], w2
    21b8:	82 80 50    	sub.w     w1, w2, w1
    21ba:	00 80 50    	sub.w     w1, w0, w0
    21bc:	42 40 a9    	bclr.b    0x42, #0x2
    21be:	01 00 34    	bra       LE, 0x21c2 <.L1>
    21c0:	00 0e 98    	mov.w     w0, [w12+16]

000021c2 <.L1>:
    21c2:	4f 07 78    	mov.w     [--w15], w14
    21c4:	4f 06 be    	mov.d     [--w15], w12
    21c6:	4f 05 be    	mov.d     [--w15], w10
    21c8:	4f 04 be    	mov.d     [--w15], w8
    21ca:	cf 01 b1    	sub.w     #0x1c, w15
    21cc:	00 00 06    	return    

000021ce <__Puttxt>:
    21ce:	04 00 fa    	lnk       #0x4
    21d0:	88 9f be    	mov.d     w8, [w15++]
    21d2:	8a 9f be    	mov.d     w10, [w15++]
    21d4:	8c 1f 78    	mov.w     w12, [w15++]
    21d6:	00 04 78    	mov.w     w0, w8
    21d8:	01 06 78    	mov.w     w1, w12
    21da:	f8 0d 90    	mov.w     [w8+30], w11
    21dc:	78 00 90    	mov.w     [w8+14], w0
    21de:	80 85 55    	sub.w     w11, w0, w11
    21e0:	08 08 90    	mov.w     [w8+16], w0
    21e2:	80 85 55    	sub.w     w11, w0, w11
    21e4:	18 08 90    	mov.w     [w8+18], w0
    21e6:	80 85 55    	sub.w     w11, w0, w11
    21e8:	28 08 90    	mov.w     [w8+20], w0
    21ea:	80 85 55    	sub.w     w11, w0, w11
    21ec:	38 08 90    	mov.w     [w8+22], w0
    21ee:	80 85 55    	sub.w     w11, w0, w11
    21f0:	48 08 90    	mov.w     [w8+24], w0
    21f2:	80 85 55    	sub.w     w11, w0, w11
    21f4:	00 02 22    	mov.w     #0x2020, w0
    21f6:	90 bf 9f    	mov.w     w0, [w15-14]
    21f8:	00 03 23    	mov.w     #0x3030, w0
    21fa:	a0 bf 9f    	mov.w     w0, [w15-12]
    21fc:	08 10 90    	mov.w     [w8+32], w0
    21fe:	00 28 a3    	btst.z    w0, #0x2
    2200:	15 00 3a    	bra       NZ, 0x222c <.L2>
    2202:	0b 00 e0    	cp0.w     w11
    2204:	13 00 34    	bra       LE, 0x222c <.L2>
    2206:	0b 05 78    	mov.w     w11, w10

00002208 <.L5>:
    2208:	8a 04 78    	mov.w     w10, w9
    220a:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    220c:	01 00 36    	bra       LEU, 0x2210 <.L3>
    220e:	29 00 20    	mov.w     #0x2, w9

00002210 <.L3>:
    2210:	c8 01 90    	mov.w     [w8+8], w3
    2212:	09 01 78    	mov.w     w9, w2
    2214:	ee 80 57    	sub.w     w15, #0xe, w1
    2216:	58 00 90    	mov.w     [w8+10], w0
    2218:	03 00 01    	call      w3
    221a:	50 04 98    	mov.w     w0, [w8+10]
    221c:	00 00 e0    	cp0.w     w0
    221e:	8c 00 32    	bra       Z, 0x2338 <.L29>
    2220:	68 08 90    	mov.w     [w8+28], w0
    2222:	09 00 40    	add.w     w0, w9, w0
    2224:	60 0c 98    	mov.w     w0, [w8+28]
    2226:	09 05 55    	sub.w     w10, w9, w10
    2228:	42 40 a9    	bclr.b    0x42, #0x2
    222a:	ee ff 3c    	bra       GT, 0x2208 <.L5>

0000222c <.L2>:
    222c:	78 01 90    	mov.w     [w8+14], w2
    222e:	02 00 e0    	cp0.w     w2
    2230:	0c 00 34    	bra       LE, 0x224a <.L6>
    2232:	c8 01 90    	mov.w     [w8+8], w3
    2234:	8c 00 78    	mov.w     w12, w1
    2236:	58 00 90    	mov.w     [w8+10], w0
    2238:	03 00 01    	call      w3
    223a:	50 04 98    	mov.w     w0, [w8+10]
    223c:	80 80 eb    	setm.w    w1
    223e:	00 00 e0    	cp0.w     w0
    2240:	7c 00 32    	bra       Z, 0x233a <.L4>
    2242:	e8 08 90    	mov.w     [w8+28], w1
    2244:	78 00 90    	mov.w     [w8+14], w0
    2246:	00 80 40    	add.w     w1, w0, w0
    2248:	60 0c 98    	mov.w     w0, [w8+28]

0000224a <.L6>:
    224a:	88 0c 90    	mov.w     [w8+16], w9

0000224c <.L30>:
    224c:	09 00 e0    	cp0.w     w9
    224e:	11 00 34    	bra       LE, 0x2272 <.L7>
    2250:	09 05 78    	mov.w     w9, w10
    2252:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    2254:	01 00 36    	bra       LEU, 0x2258 <.L8>
    2256:	2a 00 20    	mov.w     #0x2, w10

00002258 <.L8>:
    2258:	c8 01 90    	mov.w     [w8+8], w3
    225a:	0a 01 78    	mov.w     w10, w2
    225c:	ec 80 57    	sub.w     w15, #0xc, w1
    225e:	58 00 90    	mov.w     [w8+10], w0
    2260:	03 00 01    	call      w3
    2262:	50 04 98    	mov.w     w0, [w8+10]
    2264:	00 00 e0    	cp0.w     w0
    2266:	68 00 32    	bra       Z, 0x2338 <.L29>
    2268:	68 08 90    	mov.w     [w8+28], w0
    226a:	0a 00 40    	add.w     w0, w10, w0
    226c:	60 0c 98    	mov.w     w0, [w8+28]
    226e:	8a 84 54    	sub.w     w9, w10, w9
    2270:	ed ff 37    	bra       0x224c <.L30>

00002272 <.L7>:
    2272:	18 09 90    	mov.w     [w8+18], w2
    2274:	02 00 e0    	cp0.w     w2
    2276:	0c 00 34    	bra       LE, 0x2290 <.L10>
    2278:	c8 01 90    	mov.w     [w8+8], w3
    227a:	e8 00 90    	mov.w     [w8+12], w1
    227c:	58 00 90    	mov.w     [w8+10], w0
    227e:	03 00 01    	call      w3
    2280:	50 04 98    	mov.w     w0, [w8+10]
    2282:	80 80 eb    	setm.w    w1
    2284:	00 00 e0    	cp0.w     w0
    2286:	59 00 32    	bra       Z, 0x233a <.L4>
    2288:	e8 08 90    	mov.w     [w8+28], w1
    228a:	18 08 90    	mov.w     [w8+18], w0
    228c:	00 80 40    	add.w     w1, w0, w0
    228e:	60 0c 98    	mov.w     w0, [w8+28]

00002290 <.L10>:
    2290:	a8 0c 90    	mov.w     [w8+20], w9

00002292 <.L31>:
    2292:	09 00 e0    	cp0.w     w9
    2294:	11 00 34    	bra       LE, 0x22b8 <.L11>
    2296:	09 05 78    	mov.w     w9, w10
    2298:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    229a:	01 00 36    	bra       LEU, 0x229e <.L12>
    229c:	2a 00 20    	mov.w     #0x2, w10

0000229e <.L12>:
    229e:	c8 01 90    	mov.w     [w8+8], w3
    22a0:	0a 01 78    	mov.w     w10, w2
    22a2:	ec 80 57    	sub.w     w15, #0xc, w1
    22a4:	58 00 90    	mov.w     [w8+10], w0
    22a6:	03 00 01    	call      w3
    22a8:	50 04 98    	mov.w     w0, [w8+10]
    22aa:	00 00 e0    	cp0.w     w0
    22ac:	45 00 32    	bra       Z, 0x2338 <.L29>
    22ae:	68 08 90    	mov.w     [w8+28], w0
    22b0:	0a 00 40    	add.w     w0, w10, w0
    22b2:	60 0c 98    	mov.w     w0, [w8+28]
    22b4:	8a 84 54    	sub.w     w9, w10, w9
    22b6:	ed ff 37    	bra       0x2292 <.L31>

000022b8 <.L11>:
    22b8:	38 09 90    	mov.w     [w8+22], w2
    22ba:	02 00 e0    	cp0.w     w2
    22bc:	0e 00 34    	bra       LE, 0x22da <.L14>
    22be:	e8 00 90    	mov.w     [w8+12], w1
    22c0:	18 08 90    	mov.w     [w8+18], w0
    22c2:	80 80 40    	add.w     w1, w0, w1
    22c4:	c8 01 90    	mov.w     [w8+8], w3
    22c6:	58 00 90    	mov.w     [w8+10], w0
    22c8:	03 00 01    	call      w3
    22ca:	50 04 98    	mov.w     w0, [w8+10]
    22cc:	80 80 eb    	setm.w    w1
    22ce:	00 00 e0    	cp0.w     w0
    22d0:	34 00 32    	bra       Z, 0x233a <.L4>
    22d2:	e8 08 90    	mov.w     [w8+28], w1
    22d4:	38 08 90    	mov.w     [w8+22], w0
    22d6:	00 80 40    	add.w     w1, w0, w0
    22d8:	60 0c 98    	mov.w     w0, [w8+28]

000022da <.L14>:
    22da:	c8 0c 90    	mov.w     [w8+24], w9

000022dc <.L32>:
    22dc:	09 00 e0    	cp0.w     w9
    22de:	11 00 34    	bra       LE, 0x2302 <.L15>
    22e0:	09 05 78    	mov.w     w9, w10
    22e2:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    22e4:	01 00 36    	bra       LEU, 0x22e8 <.L16>
    22e6:	2a 00 20    	mov.w     #0x2, w10

000022e8 <.L16>:
    22e8:	c8 01 90    	mov.w     [w8+8], w3
    22ea:	0a 01 78    	mov.w     w10, w2
    22ec:	ec 80 57    	sub.w     w15, #0xc, w1
    22ee:	58 00 90    	mov.w     [w8+10], w0
    22f0:	03 00 01    	call      w3
    22f2:	50 04 98    	mov.w     w0, [w8+10]
    22f4:	00 00 e0    	cp0.w     w0
    22f6:	20 00 32    	bra       Z, 0x2338 <.L29>
    22f8:	68 08 90    	mov.w     [w8+28], w0
    22fa:	0a 00 40    	add.w     w0, w10, w0
    22fc:	60 0c 98    	mov.w     w0, [w8+28]
    22fe:	8a 84 54    	sub.w     w9, w10, w9
    2300:	ed ff 37    	bra       0x22dc <.L32>

00002302 <.L15>:
    2302:	08 10 90    	mov.w     [w8+32], w0
    2304:	80 00 eb    	clr.w     w1
    2306:	00 28 a3    	btst.z    w0, #0x2
    2308:	18 00 32    	bra       Z, 0x233a <.L4>
    230a:	0b 00 e0    	cp0.w     w11
    230c:	16 00 34    	bra       LE, 0x233a <.L4>
    230e:	8b 04 78    	mov.w     w11, w9

00002310 <.L19>:
    2310:	09 05 78    	mov.w     w9, w10
    2312:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    2314:	01 00 36    	bra       LEU, 0x2318 <.L18>
    2316:	2a 00 20    	mov.w     #0x2, w10

00002318 <.L18>:
    2318:	c8 01 90    	mov.w     [w8+8], w3
    231a:	0a 01 78    	mov.w     w10, w2
    231c:	ee 80 57    	sub.w     w15, #0xe, w1
    231e:	58 00 90    	mov.w     [w8+10], w0
    2320:	03 00 01    	call      w3
    2322:	50 04 98    	mov.w     w0, [w8+10]
    2324:	00 00 e0    	cp0.w     w0
    2326:	08 00 32    	bra       Z, 0x2338 <.L29>
    2328:	68 08 90    	mov.w     [w8+28], w0
    232a:	0a 00 40    	add.w     w0, w10, w0
    232c:	60 0c 98    	mov.w     w0, [w8+28]
    232e:	8a 84 54    	sub.w     w9, w10, w9
    2330:	42 40 a9    	bclr.b    0x42, #0x2
    2332:	ee ff 3c    	bra       GT, 0x2310 <.L19>
    2334:	80 00 eb    	clr.w     w1
    2336:	01 00 37    	bra       0x233a <.L4>

00002338 <.L29>:
    2338:	80 80 eb    	setm.w    w1

0000233a <.L4>:
    233a:	01 00 78    	mov.w     w1, w0
    233c:	4f 06 78    	mov.w     [--w15], w12
    233e:	4f 05 be    	mov.d     [--w15], w10
    2340:	4f 04 be    	mov.d     [--w15], w8
    2342:	00 80 fa    	ulnk      
    2344:	00 00 06    	return    

00002346 <__Vacopy>:
    2346:	01 08 78    	mov.w     w1, [w0]
    2348:	00 00 06    	return    

0000234a <_closeallreg>:
    234a:	00 3f 22    	mov.w     #0x23f0, w0
    234c:	61 00 37    	bra       0x2410 <__Atexit>

0000234e <__Closreg>:
    234e:	88 1f 78    	mov.w     w8, [w15++]
    2350:	08 57 21    	mov.w     #0x1570, w8
    2352:	18 04 e0    	cp0.b     [w8]
    2354:	03 00 3a    	bra       NZ, 0x235c <.L2>
    2356:	f9 ff 07    	rcall     0x234a <_closeallreg>
    2358:	20 c0 b3    	mov.b     #0x2, w0
    235a:	00 4c 78    	mov.b     w0, [w8]

0000235c <.L2>:
    235c:	4f 04 78    	mov.w     [--w15], w8
    235e:	00 00 06    	return    

00002360 <_fclose>:
    2360:	88 9f be    	mov.d     w8, [w15++]
    2362:	00 04 78    	mov.w     w0, w8
    2364:	08 00 78    	mov.w     w8, w0
    2366:	e2 fc 07    	rcall     0x1d2c <__DNKfflush>
    2368:	80 04 78    	mov.w     w0, w9
    236a:	00 04 20    	mov.w     #0x40, w0
    236c:	18 00 60    	and.w     w0, [w8], w0
    236e:	02 00 32    	bra       Z, 0x2374 <.L5>
    2370:	28 00 90    	mov.w     [w8+4], w0
    2372:	5f fd 07    	rcall     0x1e32 <_free>

00002374 <.L5>:
    2374:	00 00 eb    	clr.w     w0
    2376:	20 04 98    	mov.w     w0, [w8+4]
    2378:	38 40 90    	mov.b     [w8+3], w0
    237a:	00 04 e0    	cp0.b     w0
    237c:	05 00 35    	bra       LT, 0x2388 <.L6>
    237e:	00 00 fb    	se        w0, w0
    2380:	4c f7 07    	rcall     0x121a <_close>
    2382:	00 00 e0    	cp0.w     w0
    2384:	01 00 32    	bra       Z, 0x2388 <.L6>
    2386:	80 84 eb    	setm.w    w9

00002388 <.L6>:
    2388:	18 10 90    	mov.w     [w8+34], w0
    238a:	00 00 e0    	cp0.w     w0
    238c:	08 00 32    	bra       Z, 0x239e <.L7>
    238e:	4e f7 07    	rcall     0x122c <_remove>
    2390:	00 00 e0    	cp0.w     w0
    2392:	01 00 32    	bra       Z, 0x2396 <.L8>
    2394:	80 84 eb    	setm.w    w9

00002396 <.L8>:
    2396:	18 10 90    	mov.w     [w8+34], w0
    2398:	4c fd 07    	rcall     0x1e32 <_free>
    239a:	00 00 eb    	clr.w     w0
    239c:	10 14 98    	mov.w     w0, [w8+34]

0000239e <.L7>:
    239e:	00 08 20    	mov.w     #0x80, w0
    23a0:	18 00 60    	and.w     w0, [w8], w0
    23a2:	15 00 32    	bra       Z, 0x23ce <.L9>
    23a4:	00 01 eb    	clr.w     w2
    23a6:	60 00 b8    	mul.uu    w0, #0x0, w0

000023a8 <.L12>:
    23a8:	83 42 21    	mov.w     #0x1428, w3
    23aa:	02 02 d0    	sl.w      w2, w4
    23ac:	63 02 7a    	mov.w     [w3+w4], w4
    23ae:	88 0f 52    	sub.w     w4, w8, [w15]
    23b0:	05 00 3a    	bra       NZ, 0x23bc <.L10>
    23b2:	00 00 40    	add.w     w0, w0, w0
    23b4:	81 80 48    	addc.w    w1, w1, w1
    23b6:	00 80 41    	add.w     w3, w0, w0
    23b8:	00 08 eb    	clr.w     [w0]
    23ba:	06 00 37    	bra       0x23c8 <.L11>

000023bc <.L10>:
    23bc:	61 00 40    	add.w     w0, #0x1, w0
    23be:	e0 80 48    	addc.w    w1, #0x0, w1
    23c0:	02 01 e8    	inc.w     w2, w2
    23c2:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    23c4:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    23c6:	f0 ff 3a    	bra       NZ, 0x23a8 <.L12>

000023c8 <.L11>:
    23c8:	08 00 78    	mov.w     w8, w0
    23ca:	33 fd 07    	rcall     0x1e32 <_free>
    23cc:	0e 00 37    	bra       0x23ea <.L13>

000023ce <.L9>:
    23ce:	00 0c 78    	mov.w     w0, [w8]
    23d0:	00 c0 eb    	setm.b    w0
    23d2:	30 44 98    	mov.b     w0, [w8+3]
    23d4:	60 02 20    	mov.w     #0x26, w0
    23d6:	08 00 40    	add.w     w0, w8, w0
    23d8:	20 04 98    	mov.w     w0, [w8+4]
    23da:	40 04 98    	mov.w     w0, [w8+8]
    23dc:	50 04 98    	mov.w     w0, [w8+10]
    23de:	40 0c 98    	mov.w     w0, [w8+24]
    23e0:	60 04 98    	mov.w     w0, [w8+12]
    23e2:	50 0c 98    	mov.w     w0, [w8+26]
    23e4:	70 04 98    	mov.w     w0, [w8+14]
    23e6:	76 00 44    	add.w     w8, #0x16, w0
    23e8:	00 0c 98    	mov.w     w0, [w8+16]

000023ea <.L13>:
    23ea:	09 00 78    	mov.w     w9, w0
    23ec:	4f 04 be    	mov.d     [--w15], w8
    23ee:	00 00 06    	return    

000023f0 <_closeall>:
    23f0:	88 1f 78    	mov.w     w8, [w15++]
    23f2:	00 04 eb    	clr.w     w8

000023f4 <.L18>:
    23f4:	61 40 b8    	mul.uu    w8, #0x1, w0
    23f6:	e2 ff 2f    	mov.w     #0xfffe, w2
    23f8:	f3 ff 2f    	mov.w     #0xffff, w3
    23fa:	2c 00 07    	rcall     0x2454 <___mulp32eds3>
    23fc:	62 43 21    	mov.w     #0x1436, w2
    23fe:	62 00 78    	mov.w     [w2+w0], w0
    2400:	00 00 e0    	cp0.w     w0
    2402:	01 00 32    	bra       Z, 0x2406 <.L17>
    2404:	ad ff 07    	rcall     0x2360 <_fclose>

00002406 <.L17>:
    2406:	08 04 e8    	inc.w     w8, w8
    2408:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    240a:	f4 ff 3a    	bra       NZ, 0x23f4 <.L18>
    240c:	4f 04 78    	mov.w     [--w15], w8
    240e:	00 00 06    	return    

00002410 <__Atexit>:
    2410:	01 00 20    	mov.w     #0x0, w1
    2412:	01 00 e0    	cp0.w     w1
    2414:	08 00 32    	bra       Z, 0x2426 <.L1>
    2416:	01 00 80    	mov.w     0x0, w1
    2418:	01 00 e0    	cp0.w     w1
    241a:	05 00 32    	bra       Z, 0x2426 <.L1>
    241c:	81 00 e9    	dec.w     w1, w1
    241e:	01 00 88    	mov.w     w1, 0x0
    2420:	81 00 d0    	sl.w      w1, w1
    2422:	02 00 80    	mov.w     0x0, w2
    2424:	00 b1 78    	mov.w     w0, [w2+w1]

00002426 <.L1>:
    2426:	00 00 06    	return    

00002428 <_doclose>:
    2428:	00 c0 da    	.pword 0xdac000
    242a:	00 00 06    	return    

0000242c <_doremove>:
    242c:	00 c0 da    	.pword 0xdac000
    242e:	00 00 06    	return    

00002430 <___divsi3>:
    2430:	83 9f 68    	xor.w     w1, w3, [w15++]
    2432:	01 00 e0    	cp0.w     w1
    2434:	02 00 3d    	bra       GE, 0x243a <divtestb>
    2436:	60 00 10    	subr.w    w0, #0x0, w0
    2438:	e0 80 18    	subbr.w   w1, #0x0, w1

0000243a <divtestb>:
    243a:	03 00 e0    	cp0.w     w3
    243c:	02 00 3d    	bra       GE, 0x2442 <calcquot>
    243e:	60 01 11    	subr.w    w2, #0x0, w2
    2440:	e0 81 19    	subbr.w   w3, #0x0, w3

00002442 <calcquot>:
    2442:	66 f8 07    	rcall     0x1510 <___udivsi3>
    2444:	4f 00 e0    	cp0.w     [--w15]
    2446:	02 00 3b    	bra       NN, 0x244c <returnq>
    2448:	60 00 10    	subr.w    w0, #0x0, w0
    244a:	e0 80 18    	subbr.w   w1, #0x0, w1

0000244c <returnq>:
    244c:	00 00 06    	return    

0000244e <___umodsi3>:
    244e:	60 f8 07    	rcall     0x1510 <___udivsi3>
    2450:	04 00 be    	mov.d     w4, w0
    2452:	00 00 06    	return    

00002454 <___mulp32eds3>:
    2454:	02 0a b9    	mul.su    w1, w2, w4
    2456:	00 1b b9    	mul.su    w3, w0, w6
    2458:	02 00 b8    	mul.uu    w0, w2, w0
    245a:	81 00 42    	add.w     w4, w1, w1
    245c:	81 00 43    	add.w     w6, w1, w1
    245e:	00 00 06    	return    

00002460 <___PplusBdi>:
    2460:	88 9f be    	mov.d     w8, [w15++]
    2462:	8a 9f be    	mov.d     w10, [w15++]
    2464:	30 04 42    	add.w     w4, [w0++], w8
    2466:	b0 84 4a    	addc.w    w5, [w0++], w9
    2468:	30 05 4b    	addc.w    w6, [w0++], w10
    246a:	90 85 4b    	addc.w    w7, [w0], w11
    246c:	60 00 b1    	sub.w     #0x6, w0
    246e:	08 98 be    	mov.d     w8, [w0++]
    2470:	0a 90 be    	mov.d     w10, [w0--]
    2472:	04 40 e1    	cp.w      w8, w4
    2474:	05 c8 e1    	cpb.w     w9, w5
    2476:	06 d0 e1    	cpb.w     w10, w6
    2478:	07 d8 e1    	cpb.w     w11, w7
    247a:	02 00 31    	bra       C, 0x2480 <.L1>
    247c:	68 00 40    	add.w     w0, #0x8, w0
    247e:	10 08 e8    	inc.w     [w0], [w0]

00002480 <.L1>:
    2480:	4f 05 be    	mov.d     [--w15], w10
    2482:	4f 04 be    	mov.d     [--w15], w8
    2484:	00 00 06    	return    

00002486 <___PminusBdi>:
    2486:	88 9f be    	mov.d     w8, [w15++]
    2488:	8a 9f be    	mov.d     w10, [w15++]
    248a:	30 04 be    	mov.d     [w0++], w8
    248c:	20 05 be    	mov.d     [w0--], w10
    248e:	04 18 54    	sub.w     w8, w4, [w0++]
    2490:	05 98 5c    	subb.w    w9, w5, [w0++]
    2492:	06 18 5d    	subb.w    w10, w6, [w0++]
    2494:	07 98 5d    	subb.w    w11, w7, [w0++]
    2496:	11 00 20    	mov.w     #0x1, w1
    2498:	04 40 e1    	cp.w      w8, w4
    249a:	05 c8 e1    	cpb.w     w9, w5
    249c:	06 d0 e1    	cpb.w     w10, w6
    249e:	07 d8 e1    	cpb.w     w11, w7
    24a0:	01 00 39    	bra       NC, 0x24a4 <.L4>
    24a2:	80 00 eb    	clr.w     w1

000024a4 <.L4>:
    24a4:	10 88 10    	subr.w    w1, [w0], [w0]
    24a6:	4f 05 be    	mov.d     [--w15], w10
    24a8:	4f 04 be    	mov.d     [--w15], w8
    24aa:	00 00 06    	return    

000024ac <___udivmoddi3>:
    24ac:	12 00 fa    	lnk       #0x12
    24ae:	88 9f be    	mov.d     w8, [w15++]
    24b0:	8a 9f be    	mov.d     w10, [w15++]
    24b2:	8c 9f be    	mov.d     w12, [w15++]
    24b4:	e0 b7 9f    	mov.w     w0, [w15-20]
    24b6:	f1 b7 9f    	mov.w     w1, [w15-18]
    24b8:	82 bf 9f    	mov.w     w2, [w15-16]
    24ba:	93 bf 9f    	mov.w     w3, [w15-14]
    24bc:	06 05 be    	mov.d     w6, w10
    24be:	04 04 be    	mov.d     w4, w8
    24c0:	00 00 eb    	clr.w     w0
    24c2:	d0 b7 9f    	mov.w     w0, [w15-22]
    24c4:	c0 b7 9f    	mov.w     w0, [w15-24]
    24c6:	b0 b7 9f    	mov.w     w0, [w15-26]
    24c8:	a0 b7 9f    	mov.w     w0, [w15-28]
    24ca:	90 b7 9f    	mov.w     w0, [w15-30]
    24cc:	00 06 eb    	clr.w     w12

000024ce <.L9>:
    24ce:	5f b1 97    	mov.w     [w15-22], w2
    24d0:	cf b0 97    	mov.w     [w15-24], w1
    24d2:	82 01 41    	add.w     w2, w2, w3
    24d4:	3f b0 97    	mov.w     [w15-26], w0
    24d6:	02 00 e0    	cp0.w     w2
    24d8:	04 00 3d    	bra       GE, 0x24e2 <.L6>
    24da:	37 00 07    	rcall     0x254a <.LPA0>
    24dc:	7e 80 57    	sub.w     w15, #0x1e, w0
    24de:	c0 ff 07    	rcall     0x2460 <___PplusBdi>
    24e0:	03 00 37    	bra       0x24e8 <.L7>

000024e2 <.L6>:
    24e2:	33 00 07    	rcall     0x254a <.LPA0>
    24e4:	7e 80 57    	sub.w     w15, #0x1e, w0
    24e6:	cf ff 07    	rcall     0x2486 <___PminusBdi>

000024e8 <.L7>:
    24e8:	df b6 97    	mov.w     [w15-22], w13
    24ea:	0d 00 e0    	cp0.w     w13
    24ec:	0c 00 35    	bra       LT, 0x2506 <.L8>
    24ee:	6f b2 97    	mov.w     [w15-20], w4
    24f0:	ff b2 97    	mov.w     [w15-18], w5
    24f2:	0f bb 97    	mov.w     [w15-16], w6
    24f4:	9f bb 97    	mov.w     [w15-14], w7
    24f6:	10 00 20    	mov.w     #0x1, w0
    24f8:	01 00 20    	mov.w     #0x0, w1
    24fa:	60 11 b8    	mul.uu    w2, #0x0, w2
    24fc:	00 02 72    	ior.w     w4, w0, w4
    24fe:	81 82 72    	ior.w     w5, w1, w5
    2500:	02 03 73    	ior.w     w6, w2, w6
    2502:	83 83 73    	ior.w     w7, w3, w7
    2504:	1b 00 07    	rcall     0x253c <L0>

00002506 <.L8>:
    2506:	0c 06 e8    	inc.w     w12, w12
    2508:	01 04 20    	mov.w     #0x40, w1
    250a:	81 0f 56    	sub.w     w12, w1, [w15]
    250c:	e0 ff 3a    	bra       NZ, 0x24ce <.L9>
    250e:	0d 00 e0    	cp0.w     w13
    2510:	04 00 3d    	bra       GE, 0x251a <.L10>
    2512:	08 02 be    	mov.d     w8, w4
    2514:	0a 03 be    	mov.d     w10, w6
    2516:	7e 80 57    	sub.w     w15, #0x1e, w0
    2518:	a3 ff 07    	rcall     0x2460 <___PplusBdi>

0000251a <.L10>:
    251a:	5f a8 97    	mov.w     [w15-38], w0
    251c:	00 00 e0    	cp0.w     w0
    251e:	05 00 3a    	bra       NZ, 0x252a <.L11>
    2520:	1f b2 97    	mov.w     [w15-30], w4
    2522:	af b2 97    	mov.w     [w15-28], w5
    2524:	3f b3 97    	mov.w     [w15-26], w6
    2526:	cf b3 97    	mov.w     [w15-24], w7
    2528:	09 00 07    	rcall     0x253c <L0>

0000252a <.L11>:
    252a:	6f b0 97    	mov.w     [w15-20], w0
    252c:	ff b0 97    	mov.w     [w15-18], w1
    252e:	0f b9 97    	mov.w     [w15-16], w2
    2530:	9f b9 97    	mov.w     [w15-14], w3
    2532:	4f 06 be    	mov.d     [--w15], w12
    2534:	4f 05 be    	mov.d     [--w15], w10
    2536:	4f 04 be    	mov.d     [--w15], w8
    2538:	00 80 fa    	ulnk      
    253a:	00 00 06    	return    

0000253c <L0>:
    253c:	01 00 07    	rcall     0x2540 <.LPA5>
    253e:	00 00 06    	return    

00002540 <.LPA5>:
    2540:	a4 b7 9f    	mov.w     w4, [w15-28]
    2542:	b5 b7 9f    	mov.w     w5, [w15-26]
    2544:	c6 b7 9f    	mov.w     w6, [w15-24]
    2546:	d7 b7 9f    	mov.w     w7, [w15-22]
    2548:	00 00 06    	return    

0000254a <.LPA0>:
    254a:	4f 09 de    	lsr.w     w1, #0xf, w2
    254c:	82 81 71    	ior.w     w3, w2, w3
    254e:	b3 b7 9f    	mov.w     w3, [w15-26]
    2550:	4f 01 de    	lsr.w     w0, #0xf, w2
    2552:	81 80 40    	add.w     w1, w1, w1
    2554:	82 80 70    	ior.w     w1, w2, w1
    2556:	a1 b7 9f    	mov.w     w1, [w15-28]
    2558:	8f b0 97    	mov.w     [w15-32], w1
    255a:	4f 09 de    	lsr.w     w1, #0xf, w2
    255c:	00 00 40    	add.w     w0, w0, w0
    255e:	02 00 70    	ior.w     w0, w2, w0
    2560:	90 b7 9f    	mov.w     w0, [w15-30]
    2562:	7f a8 97    	mov.w     [w15-34], w0
    2564:	4f 01 de    	lsr.w     w0, #0xf, w2
    2566:	81 80 40    	add.w     w1, w1, w1
    2568:	82 80 70    	ior.w     w1, w2, w1
    256a:	81 b7 9f    	mov.w     w1, [w15-32]
    256c:	0d 00 07    	rcall     0x2588 <.LPA4>
    256e:	4f 3a de    	lsr.w     w7, #0xf, w4
    2570:	00 00 40    	add.w     w0, w0, w0
    2572:	04 00 70    	ior.w     w0, w4, w0
    2574:	f0 af 9f    	mov.w     w0, [w15-34]
    2576:	08 00 07    	rcall     0x2588 <.LPA4>
    2578:	04 02 42    	add.w     w4, w4, w4
    257a:	85 82 4a    	addc.w    w5, w5, w5
    257c:	06 03 4b    	addc.w    w6, w6, w6
    257e:	87 83 4b    	addc.w    w7, w7, w7
    2580:	df ff 07    	rcall     0x2540 <.LPA5>
    2582:	08 02 be    	mov.d     w8, w4
    2584:	0a 03 be    	mov.d     w10, w6
    2586:	00 00 06    	return    

00002588 <.LPA4>:
    2588:	2f b2 97    	mov.w     [w15-28], w4
    258a:	bf b2 97    	mov.w     [w15-26], w5
    258c:	4f b3 97    	mov.w     [w15-24], w6
    258e:	df b3 97    	mov.w     [w15-22], w7
    2590:	00 00 06    	return    

00002592 <___udivdi3>:
    2592:	88 1f 78    	mov.w     w8, [w15++]
    2594:	18 00 20    	mov.w     #0x1, w8
    2596:	88 1f 78    	mov.w     w8, [w15++]
    2598:	89 ff 07    	rcall     0x24ac <___udivmoddi3>
    259a:	8f 87 e9    	dec2.w    w15, w15
    259c:	4f 04 78    	mov.w     [--w15], w8
    259e:	00 00 06    	return    

000025a0 <___umoddi3>:
    25a0:	80 1f eb    	clr.w     [w15++]
    25a2:	84 ff 07    	rcall     0x24ac <___udivmoddi3>
    25a4:	8f 87 e9    	dec2.w    w15, w15
    25a6:	00 00 06    	return    

000025a8 <___divdi3>:
    25a8:	88 9f be    	mov.d     w8, [w15++]
    25aa:	8a 9f be    	mov.d     w10, [w15++]
    25ac:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    25ae:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    25b0:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    25b2:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    25b4:	0c 00 3d    	bra       GE, 0x25ce <.L15>
    25b6:	60 44 b8    	mul.uu    w8, #0x0, w8
    25b8:	60 55 b8    	mul.uu    w10, #0x0, w10
    25ba:	00 00 54    	sub.w     w8, w0, w0
    25bc:	81 80 5c    	subb.w    w9, w1, w1
    25be:	02 01 5d    	subb.w    w10, w2, w2
    25c0:	83 81 5d    	subb.w    w11, w3, w3
    25c2:	18 00 20    	mov.w     #0x1, w8
    25c4:	15 00 07    	rcall     0x25f0 <L0>
    25c6:	08 00 3d    	bra       GE, 0x25d8 <.L16>
    25c8:	18 00 07    	rcall     0x25fa <.LPA1>
    25ca:	00 04 eb    	clr.w     w8
    25cc:	05 00 37    	bra       0x25d8 <.L16>

000025ce <.L15>:
    25ce:	00 04 eb    	clr.w     w8
    25d0:	0f 00 07    	rcall     0x25f0 <L0>
    25d2:	02 00 3d    	bra       GE, 0x25d8 <.L16>
    25d4:	12 00 07    	rcall     0x25fa <.LPA1>
    25d6:	18 00 20    	mov.w     #0x1, w8

000025d8 <.L16>:
    25d8:	dc ff 07    	rcall     0x2592 <___udivdi3>
    25da:	08 00 e0    	cp0.w     w8
    25dc:	06 00 32    	bra       Z, 0x25ea <.L17>
    25de:	60 22 b8    	mul.uu    w4, #0x0, w4
    25e0:	60 33 b8    	mul.uu    w6, #0x0, w6
    25e2:	00 00 52    	sub.w     w4, w0, w0
    25e4:	81 80 5a    	subb.w    w5, w1, w1
    25e6:	02 01 5b    	subb.w    w6, w2, w2
    25e8:	83 81 5b    	subb.w    w7, w3, w3

000025ea <.L17>:
    25ea:	4f 05 be    	mov.d     [--w15], w10
    25ec:	4f 04 be    	mov.d     [--w15], w8
    25ee:	00 00 06    	return    

000025f0 <L0>:
    25f0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    25f2:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    25f4:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    25f6:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    25f8:	00 00 06    	return    

000025fa <.LPA1>:
    25fa:	60 44 b8    	mul.uu    w8, #0x0, w8
    25fc:	60 55 b8    	mul.uu    w10, #0x0, w10
    25fe:	04 02 54    	sub.w     w8, w4, w4
    2600:	85 82 5c    	subb.w    w9, w5, w5
    2602:	06 03 5d    	subb.w    w10, w6, w6
    2604:	87 83 5d    	subb.w    w11, w7, w7
    2606:	00 00 06    	return    

00002608 <___moddi3>:
    2608:	88 9f be    	mov.d     w8, [w15++]
    260a:	8a 9f be    	mov.d     w10, [w15++]
    260c:	8c 1f 78    	mov.w     w12, [w15++]
    260e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2610:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2612:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2614:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2616:	0d 00 3d    	bra       GE, 0x2632 <.L21>
    2618:	60 44 b8    	mul.uu    w8, #0x0, w8
    261a:	60 55 b8    	mul.uu    w10, #0x0, w10
    261c:	00 00 54    	sub.w     w8, w0, w0
    261e:	81 80 5c    	subb.w    w9, w1, w1
    2620:	02 01 5d    	subb.w    w10, w2, w2
    2622:	83 81 5d    	subb.w    w11, w3, w3
    2624:	1c 00 20    	mov.w     #0x1, w12
    2626:	08 20 e1    	cp.w      w4, w8
    2628:	09 a8 e1    	cpb.w     w5, w9
    262a:	0a b0 e1    	cpb.w     w6, w10
    262c:	0b b8 e1    	cpb.w     w7, w11
    262e:	0d 00 3d    	bra       GE, 0x264a <.L22>
    2630:	08 00 37    	bra       0x2642 <.L26>

00002632 <.L21>:
    2632:	00 06 eb    	clr.w     w12
    2634:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2636:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2638:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    263a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    263c:	06 00 3d    	bra       GE, 0x264a <.L22>
    263e:	60 44 b8    	mul.uu    w8, #0x0, w8
    2640:	60 55 b8    	mul.uu    w10, #0x0, w10

00002642 <.L26>:
    2642:	04 02 54    	sub.w     w8, w4, w4
    2644:	85 82 5c    	subb.w    w9, w5, w5
    2646:	06 03 5d    	subb.w    w10, w6, w6
    2648:	87 83 5d    	subb.w    w11, w7, w7

0000264a <.L22>:
    264a:	aa ff 07    	rcall     0x25a0 <___umoddi3>
    264c:	0c 00 e0    	cp0.w     w12
    264e:	06 00 32    	bra       Z, 0x265c <.L23>
    2650:	60 22 b8    	mul.uu    w4, #0x0, w4
    2652:	60 33 b8    	mul.uu    w6, #0x0, w6
    2654:	00 00 52    	sub.w     w4, w0, w0
    2656:	81 80 5a    	subb.w    w5, w1, w1
    2658:	02 01 5b    	subb.w    w6, w2, w2
    265a:	83 81 5b    	subb.w    w7, w3, w3

0000265c <.L23>:
    265c:	4f 06 78    	mov.w     [--w15], w12
    265e:	4f 05 be    	mov.d     [--w15], w10
    2660:	4f 04 be    	mov.d     [--w15], w8
    2662:	00 00 06    	return    

00002664 <___muldi3>:
    2664:	88 9f be    	mov.d     w8, [w15++]
    2666:	8a 9f be    	mov.d     w10, [w15++]
    2668:	8c 1f 78    	mov.w     w12, [w15++]
    266a:	00 06 eb    	clr.w     w12
    266c:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    266e:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2670:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2672:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2674:	07 00 3d    	bra       GE, 0x2684 <.L2>
    2676:	60 44 b8    	mul.uu    w8, #0x0, w8
    2678:	60 55 b8    	mul.uu    w10, #0x0, w10
    267a:	00 00 54    	sub.w     w8, w0, w0
    267c:	81 80 5c    	subb.w    w9, w1, w1
    267e:	02 01 5d    	subb.w    w10, w2, w2
    2680:	83 81 5d    	subb.w    w11, w3, w3
    2682:	1c 00 20    	mov.w     #0x1, w12

00002684 <.L2>:
    2684:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2686:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2688:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    268a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    268c:	07 00 3d    	bra       GE, 0x269c <.L3>
    268e:	60 44 b8    	mul.uu    w8, #0x0, w8
    2690:	60 55 b8    	mul.uu    w10, #0x0, w10
    2692:	04 02 54    	sub.w     w8, w4, w4
    2694:	85 82 5c    	subb.w    w9, w5, w5
    2696:	06 03 5d    	subb.w    w10, w6, w6
    2698:	87 83 5d    	subb.w    w11, w7, w7
    269a:	0c 00 a2    	btg.w     w12, #0x0

0000269c <.L3>:
    269c:	0c 00 07    	rcall     0x26b6 <___umuldi3>
    269e:	0c 00 e0    	cp0.w     w12
    26a0:	06 00 32    	bra       Z, 0x26ae <.L4>
    26a2:	60 22 b8    	mul.uu    w4, #0x0, w4
    26a4:	60 33 b8    	mul.uu    w6, #0x0, w6
    26a6:	00 00 52    	sub.w     w4, w0, w0
    26a8:	81 80 5a    	subb.w    w5, w1, w1
    26aa:	02 01 5b    	subb.w    w6, w2, w2
    26ac:	83 81 5b    	subb.w    w7, w3, w3

000026ae <.L4>:
    26ae:	4f 06 78    	mov.w     [--w15], w12
    26b0:	4f 05 be    	mov.d     [--w15], w10
    26b2:	4f 04 be    	mov.d     [--w15], w8
    26b4:	00 00 06    	return    

000026b6 <___umuldi3>:
    26b6:	88 9f be    	mov.d     w8, [w15++]
    26b8:	8a 9f be    	mov.d     w10, [w15++]
    26ba:	8c 9f be    	mov.d     w12, [w15++]
    26bc:	04 04 b8    	mul.uu    w0, w4, w8
    26be:	05 06 b8    	mul.uu    w0, w5, w12
    26c0:	89 04 46    	add.w     w12, w9, w9
    26c2:	60 85 4e    	addc.w    w13, #0x0, w10
    26c4:	06 06 b8    	mul.uu    w0, w6, w12
    26c6:	0a 05 46    	add.w     w12, w10, w10
    26c8:	e0 85 4e    	addc.w    w13, #0x0, w11
    26ca:	07 06 b8    	mul.uu    w0, w7, w12
    26cc:	8b 05 46    	add.w     w12, w11, w11
    26ce:	04 0e b8    	mul.uu    w1, w4, w12
    26d0:	89 04 46    	add.w     w12, w9, w9
    26d2:	0a 85 4e    	addc.w    w13, w10, w10
    26d4:	e0 85 4d    	addc.w    w11, #0x0, w11
    26d6:	05 0e b8    	mul.uu    w1, w5, w12
    26d8:	0a 05 46    	add.w     w12, w10, w10
    26da:	8b 85 4e    	addc.w    w13, w11, w11
    26dc:	06 0e b8    	mul.uu    w1, w6, w12
    26de:	8b 05 46    	add.w     w12, w11, w11
    26e0:	04 16 b8    	mul.uu    w2, w4, w12
    26e2:	0a 05 46    	add.w     w12, w10, w10
    26e4:	8b 85 4e    	addc.w    w13, w11, w11
    26e6:	05 16 b8    	mul.uu    w2, w5, w12
    26e8:	8b 05 46    	add.w     w12, w11, w11
    26ea:	04 1e b8    	mul.uu    w3, w4, w12
    26ec:	8b 05 46    	add.w     w12, w11, w11
    26ee:	08 00 be    	mov.d     w8, w0
    26f0:	0a 01 be    	mov.d     w10, w2
    26f2:	4f 06 be    	mov.d     [--w15], w12
    26f4:	4f 05 be    	mov.d     [--w15], w10
    26f6:	4f 04 be    	mov.d     [--w15], w8
    26f8:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	c6 34 04    	goto      0x34c6 <__T1Interrupt>
    1026:	00 00 00 
    1028:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	f4 34 04    	goto      0x34f4 <__T2Interrupt>
    1032:	00 00 00 
    1034:	22 35 04    	goto      0x3522 <__T3Interrupt>
    1036:	00 00 00 
    1038:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	2c 29 04    	goto      0x292c <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	fe 28 04    	goto      0x28fe <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	50 35 04    	goto      0x3550 <__T4Interrupt>
    1072:	00 00 00 
    1074:	7e 35 04    	goto      0x357e <__T5Interrupt>
    1076:	00 00 00 
    1078:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	88 29 04    	goto      0x2988 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	5a 29 04    	goto      0x295a <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	e4 29 04    	goto      0x29e4 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	b6 29 04    	goto      0x29b6 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	40 2a 04    	goto      0x2a40 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	12 2a 04    	goto      0x2a12 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	7a 4a 04    	goto      0x4a7a <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a6fa <.LC0>:
    a6fa:	25 30       	.word 0x3025
    a6fc:	32 58       	.word 0x5832
    a6fe:	00 0a       	.word 0xa00

0000a6ff <.LC1>:
    a6ff:	00 00       	.word 0

0000a701 <.LC2>:
    a701:	00 00       	.word 0
    a703:	00 00       	.word 0
	...
Disassembly of section .text:

00002706 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    2706:	04 00 fa    	lnk       #0x4
    2708:	00 0f 78    	mov.w     w0, [w14]
    270a:	21 47 98    	mov.b     w1, [w14+2]

0000270c <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    270c:	00 00 00    	nop       

0000270e <.L2>:
    270e:	1e 00 78    	mov.w     [w14], w0
    2710:	10 00 90    	mov.w     [w0+2], w0
    2712:	90 00 78    	mov.w     [w0], w1
    2714:	00 20 20    	mov.w     #0x200, w0
    2716:	00 80 60    	and.w     w1, w0, w0
    2718:	00 00 e0    	cp0.w     w0
    271a:	f9 ff 3a    	bra       NZ, 0x270e <.L2>

0000271c <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    271c:	1e 00 78    	mov.w     [w14], w0
    271e:	20 00 90    	mov.w     [w0+4], w0
    2720:	ae 40 90    	mov.b     [w14+2], w1
    2722:	81 80 fb    	ze        w1, w1
    2724:	01 08 78    	mov.w     w1, [w0]

00002726 <.LSM3>:
}
    2726:	00 80 fa    	ulnk      
    2728:	00 00 06    	return    

0000272a <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    272a:	02 00 fa    	lnk       #0x2
    272c:	00 0f 78    	mov.w     w0, [w14]

0000272e <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    272e:	00 00 00    	nop       

00002730 <.L4>:
    2730:	1e 00 78    	mov.w     [w14], w0
    2732:	10 00 90    	mov.w     [w0+2], w0
    2734:	10 00 78    	mov.w     [w0], w0
    2736:	61 00 60    	and.w     w0, #0x1, w0
    2738:	00 00 e0    	cp0.w     w0
    273a:	fa ff 32    	bra       Z, 0x2730 <.L4>

0000273c <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    273c:	1e 00 78    	mov.w     [w14], w0
    273e:	30 00 90    	mov.w     [w0+6], w0
    2740:	10 00 78    	mov.w     [w0], w0
    2742:	00 40 78    	mov.b     w0, w0

00002744 <.LSM7>:
}
    2744:	00 80 fa    	ulnk      
    2746:	00 00 06    	return    

00002748 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    2748:	04 00 fa    	lnk       #0x4
    274a:	00 0f 78    	mov.w     w0, [w14]
    274c:	21 47 98    	mov.b     w1, [w14+2]

0000274e <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    274e:	00 00 00    	nop       

00002750 <.L6>:
    2750:	1e 00 78    	mov.w     [w14], w0
    2752:	d0 10 90    	mov.w     [w0+42], w1
    2754:	1e 00 78    	mov.w     [w14], w0
    2756:	20 10 90    	mov.w     [w0+36], w0
    2758:	80 8f 50    	sub.w     w1, w0, [w15]
    275a:	fa ff 32    	bra       Z, 0x2750 <.L6>

0000275c <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    275c:	ff 3f fc    	disi      #0x3fff

0000275e <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    275e:	1e 00 78    	mov.w     [w14], w0
    2760:	90 10 90    	mov.w     [w0+34], w1
    2762:	1e 00 78    	mov.w     [w14], w0
    2764:	40 10 90    	mov.w     [w0+40], w0
    2766:	00 80 40    	add.w     w1, w0, w0
    2768:	ae 40 90    	mov.b     [w14+2], w1
    276a:	01 48 78    	mov.b     w1, [w0]

0000276c <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    276c:	1e 00 78    	mov.w     [w14], w0
    276e:	40 10 90    	mov.w     [w0+40], w0
    2770:	80 00 e8    	inc.w     w0, w1
    2772:	1e 00 78    	mov.w     [w14], w0
    2774:	20 10 90    	mov.w     [w0+36], w0
    2776:	00 01 78    	mov.w     w0, w2
    2778:	11 00 09    	repeat    #0x11
    277a:	82 80 d8    	div.uw    w1, w2
    277c:	80 00 fd    	exch      w0, w1
    277e:	80 00 78    	mov.w     w0, w1
    2780:	1e 00 78    	mov.w     [w14], w0
    2782:	41 10 98    	mov.w     w1, [w0+40]

00002784 <.LSM13>:
    self->TXbuffer.count++;
    2784:	1e 00 78    	mov.w     [w14], w0
    2786:	50 10 90    	mov.w     [w0+42], w0
    2788:	80 00 e8    	inc.w     w0, w1
    278a:	1e 00 78    	mov.w     [w14], w0
    278c:	51 10 98    	mov.w     w1, [w0+42]

0000278e <.LSM14>:
    enable_interrupts();
    278e:	52 20 ef    	clr.w     0x52

00002790 <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    2790:	1e 00 78    	mov.w     [w14], w0
    2792:	d0 10 90    	mov.w     [w0+42], w1
    2794:	1e 00 78    	mov.w     [w14], w0
    2796:	30 18 90    	mov.w     [w0+54], w0
    2798:	80 8f 50    	sub.w     w1, w0, [w15]
    279a:	08 00 39    	bra       NC, 0x27ac <.L5>

0000279c <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    279c:	1e 00 78    	mov.w     [w14], w0
    279e:	10 00 90    	mov.w     [w0+2], w0
    27a0:	9e 00 78    	mov.w     [w14], w1
    27a2:	91 00 90    	mov.w     [w1+2], w1
    27a4:	11 01 78    	mov.w     [w1], w2
    27a6:	01 40 20    	mov.w     #0x400, w1
    27a8:	82 80 70    	ior.w     w1, w2, w1
    27aa:	01 08 78    	mov.w     w1, [w0]

000027ac <.L5>:
                                                    // transmission
}
    27ac:	00 80 fa    	ulnk      
    27ae:	00 00 06    	return    

000027b0 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    27b0:	04 00 fa    	lnk       #0x4
    27b2:	10 07 98    	mov.w     w0, [w14+2]

000027b4 <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    27b4:	1e 00 90    	mov.w     [w14+2], w0
    27b6:	50 00 90    	mov.w     [w0+10], w0
    27b8:	9e 00 90    	mov.w     [w14+2], w1
    27ba:	d1 00 90    	mov.w     [w1+10], w1
    27bc:	11 01 78    	mov.w     [w1], w2
    27be:	9e 00 90    	mov.w     [w14+2], w1
    27c0:	e1 48 90    	mov.b     [w1+14], w1
    27c2:	81 80 fb    	ze        w1, w1
    27c4:	13 00 20    	mov.w     #0x1, w3
    27c6:	81 18 dd    	sl.w      w3, w1, w1
    27c8:	81 80 ea    	com.w     w1, w1
    27ca:	81 00 61    	and.w     w2, w1, w1
    27cc:	01 08 78    	mov.w     w1, [w0]

000027ce <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    27ce:	1e 00 90    	mov.w     [w14+2], w0
    27d0:	50 10 90    	mov.w     [w0+42], w0
    27d2:	00 00 e0    	cp0.w     w0
    27d4:	27 00 3a    	bra       NZ, 0x2824 <.L13>

000027d6 <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    27d6:	1e 00 90    	mov.w     [w14+2], w0
    27d8:	10 00 90    	mov.w     [w0+2], w0
    27da:	9e 00 90    	mov.w     [w14+2], w1
    27dc:	91 00 90    	mov.w     [w1+2], w1
    27de:	11 01 78    	mov.w     [w1], w2
    27e0:	f1 bf 2f    	mov.w     #0xfbff, w1
    27e2:	81 00 61    	and.w     w2, w1, w1
    27e4:	01 08 78    	mov.w     w1, [w0]

000027e6 <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    27e6:	1f 00 37    	bra       0x2826 <.L10>

000027e8 <.L12>:
        disable_interrupts();
    27e8:	ff 3f fc    	disi      #0x3fff

000027ea <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    27ea:	1e 00 90    	mov.w     [w14+2], w0
    27ec:	90 10 90    	mov.w     [w0+34], w1
    27ee:	1e 00 90    	mov.w     [w14+2], w0
    27f0:	30 10 90    	mov.w     [w0+38], w0
    27f2:	00 80 40    	add.w     w1, w0, w0
    27f4:	10 4f 78    	mov.b     [w0], [w14]

000027f6 <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    27f6:	1e 00 90    	mov.w     [w14+2], w0
    27f8:	30 10 90    	mov.w     [w0+38], w0
    27fa:	80 00 e8    	inc.w     w0, w1
    27fc:	1e 00 90    	mov.w     [w14+2], w0
    27fe:	20 10 90    	mov.w     [w0+36], w0
    2800:	00 01 78    	mov.w     w0, w2
    2802:	11 00 09    	repeat    #0x11
    2804:	82 80 d8    	div.uw    w1, w2
    2806:	80 00 fd    	exch      w0, w1
    2808:	80 00 78    	mov.w     w0, w1
    280a:	1e 00 90    	mov.w     [w14+2], w0
    280c:	31 10 98    	mov.w     w1, [w0+38]

0000280e <.LSM26>:
        self->TXbuffer.count--;
    280e:	1e 00 90    	mov.w     [w14+2], w0
    2810:	50 10 90    	mov.w     [w0+42], w0
    2812:	80 00 e9    	dec.w     w0, w1
    2814:	1e 00 90    	mov.w     [w14+2], w0
    2816:	51 10 98    	mov.w     w1, [w0+42]

00002818 <.LSM27>:
        enable_interrupts();
    2818:	52 20 ef    	clr.w     0x52

0000281a <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    281a:	1e 00 90    	mov.w     [w14+2], w0
    281c:	20 00 90    	mov.w     [w0+4], w0
    281e:	9e 80 fb    	ze        [w14], w1
    2820:	01 08 78    	mov.w     w1, [w0]
    2822:	01 00 37    	bra       0x2826 <.L10>

00002824 <.L13>:
    2824:	00 00 00    	nop       

00002826 <.L10>:
    2826:	1e 00 90    	mov.w     [w14+2], w0
    2828:	10 00 90    	mov.w     [w0+2], w0
    282a:	90 00 78    	mov.w     [w0], w1
    282c:	00 20 20    	mov.w     #0x200, w0
    282e:	00 80 60    	and.w     w1, w0, w0
    2830:	00 00 e0    	cp0.w     w0
    2832:	04 00 3a    	bra       NZ, 0x283c <.L8>
    2834:	1e 00 90    	mov.w     [w14+2], w0
    2836:	50 10 90    	mov.w     [w0+42], w0
    2838:	00 00 e0    	cp0.w     w0
    283a:	d6 ff 3a    	bra       NZ, 0x27e8 <.L12>

0000283c <.L8>:
    }
}
    283c:	00 80 fa    	ulnk      
    283e:	00 00 06    	return    

00002840 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    2840:	04 00 fa    	lnk       #0x4
    2842:	10 07 98    	mov.w     w0, [w14+2]

00002844 <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    2844:	00 00 00    	nop       

00002846 <.L15>:
    2846:	1e 00 90    	mov.w     [w14+2], w0
    2848:	20 18 90    	mov.w     [w0+52], w0
    284a:	00 00 e0    	cp0.w     w0
    284c:	fc ff 32    	bra       Z, 0x2846 <.L15>

0000284e <.LSM33>:
    disable_interrupts();
    284e:	ff 3f fc    	disi      #0x3fff

00002850 <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    2850:	1e 00 90    	mov.w     [w14+2], w0
    2852:	e0 10 90    	mov.w     [w0+44], w1
    2854:	1e 00 90    	mov.w     [w14+2], w0
    2856:	00 18 90    	mov.w     [w0+48], w0
    2858:	00 80 40    	add.w     w1, w0, w0
    285a:	10 4f 78    	mov.b     [w0], [w14]

0000285c <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    285c:	1e 00 90    	mov.w     [w14+2], w0
    285e:	00 18 90    	mov.w     [w0+48], w0
    2860:	80 00 e8    	inc.w     w0, w1
    2862:	1e 00 90    	mov.w     [w14+2], w0
    2864:	70 10 90    	mov.w     [w0+46], w0
    2866:	00 01 78    	mov.w     w0, w2
    2868:	11 00 09    	repeat    #0x11
    286a:	82 80 d8    	div.uw    w1, w2
    286c:	80 00 fd    	exch      w0, w1
    286e:	80 00 78    	mov.w     w0, w1
    2870:	1e 00 90    	mov.w     [w14+2], w0
    2872:	01 18 98    	mov.w     w1, [w0+48]

00002874 <.LSM36>:
    self->RXbuffer.count--;
    2874:	1e 00 90    	mov.w     [w14+2], w0
    2876:	20 18 90    	mov.w     [w0+52], w0
    2878:	80 00 e9    	dec.w     w0, w1
    287a:	1e 00 90    	mov.w     [w14+2], w0
    287c:	21 18 98    	mov.w     w1, [w0+52]

0000287e <.LSM37>:
    enable_interrupts();
    287e:	52 20 ef    	clr.w     0x52

00002880 <.LSM38>:
    return ch;
    2880:	1e 40 78    	mov.b     [w14], w0

00002882 <.LSM39>:
}
    2882:	00 80 fa    	ulnk      
    2884:	00 00 06    	return    

00002886 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    2886:	02 00 fa    	lnk       #0x2
    2888:	00 0f 78    	mov.w     w0, [w14]

0000288a <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    288a:	1e 00 78    	mov.w     [w14], w0
    288c:	50 00 90    	mov.w     [w0+10], w0
    288e:	9e 00 78    	mov.w     [w14], w1
    2890:	d1 00 90    	mov.w     [w1+10], w1
    2892:	11 01 78    	mov.w     [w1], w2
    2894:	9e 00 78    	mov.w     [w14], w1
    2896:	f1 48 90    	mov.b     [w1+15], w1
    2898:	81 80 fb    	ze        w1, w1
    289a:	13 00 20    	mov.w     #0x1, w3
    289c:	81 18 dd    	sl.w      w3, w1, w1
    289e:	81 80 ea    	com.w     w1, w1
    28a0:	81 00 61    	and.w     w2, w1, w1
    28a2:	01 08 78    	mov.w     w1, [w0]

000028a4 <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    28a4:	1d 00 37    	bra       0x28e0 <.L17>

000028a6 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    28a6:	ff 3f fc    	disi      #0x3fff

000028a8 <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    28a8:	1e 00 78    	mov.w     [w14], w0
    28aa:	e0 10 90    	mov.w     [w0+44], w1
    28ac:	1e 00 78    	mov.w     [w14], w0
    28ae:	10 18 90    	mov.w     [w0+50], w0
    28b0:	00 80 40    	add.w     w1, w0, w0
    28b2:	9e 00 78    	mov.w     [w14], w1
    28b4:	b1 00 90    	mov.w     [w1+6], w1
    28b6:	91 00 78    	mov.w     [w1], w1
    28b8:	81 40 78    	mov.b     w1, w1
    28ba:	01 48 78    	mov.b     w1, [w0]

000028bc <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    28bc:	1e 00 78    	mov.w     [w14], w0
    28be:	10 18 90    	mov.w     [w0+50], w0
    28c0:	80 00 e8    	inc.w     w0, w1
    28c2:	1e 00 78    	mov.w     [w14], w0
    28c4:	70 10 90    	mov.w     [w0+46], w0
    28c6:	00 01 78    	mov.w     w0, w2
    28c8:	11 00 09    	repeat    #0x11
    28ca:	82 80 d8    	div.uw    w1, w2
    28cc:	80 00 fd    	exch      w0, w1
    28ce:	80 00 78    	mov.w     w0, w1
    28d0:	1e 00 78    	mov.w     [w14], w0
    28d2:	11 18 98    	mov.w     w1, [w0+50]

000028d4 <.LSM46>:
        self->RXbuffer.count++;
    28d4:	1e 00 78    	mov.w     [w14], w0
    28d6:	20 18 90    	mov.w     [w0+52], w0
    28d8:	80 00 e8    	inc.w     w0, w1
    28da:	1e 00 78    	mov.w     [w14], w0
    28dc:	21 18 98    	mov.w     w1, [w0+52]

000028de <.LSM47>:
        enable_interrupts();
    28de:	52 20 ef    	clr.w     0x52

000028e0 <.L17>:
    28e0:	1e 00 78    	mov.w     [w14], w0
    28e2:	10 00 90    	mov.w     [w0+2], w0
    28e4:	10 00 78    	mov.w     [w0], w0
    28e6:	61 00 60    	and.w     w0, #0x1, w0
    28e8:	00 40 78    	mov.b     w0, w0
    28ea:	00 04 e0    	cp0.b     w0
    28ec:	06 00 32    	bra       Z, 0x28fa <.L16>

000028ee <.LSM49>:
    28ee:	1e 00 78    	mov.w     [w14], w0
    28f0:	a0 18 90    	mov.w     [w0+52], w1
    28f2:	1e 00 78    	mov.w     [w14], w0
    28f4:	70 10 90    	mov.w     [w0+46], w0

000028f6 <.LSM50>:
    28f6:	80 8f 50    	sub.w     w1, w0, [w15]
    28f8:	d6 ff 3a    	bra       NZ, 0x28a6 <.L19>

000028fa <.L16>:
    }
}
    28fa:	00 80 fa    	ulnk      
    28fc:	00 00 06    	return    

000028fe <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    28fe:	36 00 f8    	push      0x36
    2900:	80 9f be    	mov.d     w0, [w15++]
    2902:	82 9f be    	mov.d     w2, [w15++]
    2904:	84 9f be    	mov.d     w4, [w15++]
    2906:	86 9f be    	mov.d     w6, [w15++]
    2908:	32 00 f8    	push      0x32
    290a:	34 00 f8    	push      0x34
    290c:	10 00 20    	mov.w     #0x1, w0
    290e:	a0 01 88    	mov.w     w0, 0x34
    2910:	00 20 20    	mov.w     #0x200, w0
    2912:	90 01 88    	mov.w     w0, 0x32
    2914:	00 00 fa    	lnk       #0x0

00002916 <.LSM53>:
    __serviceTxInterrupt(&uart1);
    2916:	20 1f 21    	mov.w     #0x11f2, w0
    2918:	4b ff 07    	rcall     0x27b0 <___serviceTxInterrupt>

0000291a <.LSM54>:
}
    291a:	00 80 fa    	ulnk      
    291c:	34 00 f9    	pop       0x34
    291e:	32 00 f9    	pop       0x32
    2920:	4f 03 be    	mov.d     [--w15], w6
    2922:	4f 02 be    	mov.d     [--w15], w4
    2924:	4f 01 be    	mov.d     [--w15], w2
    2926:	4f 00 be    	mov.d     [--w15], w0
    2928:	36 00 f9    	pop       0x36
    292a:	00 40 06    	retfie    

0000292c <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    292c:	36 00 f8    	push      0x36
    292e:	80 9f be    	mov.d     w0, [w15++]
    2930:	82 9f be    	mov.d     w2, [w15++]
    2932:	84 9f be    	mov.d     w4, [w15++]
    2934:	86 9f be    	mov.d     w6, [w15++]
    2936:	32 00 f8    	push      0x32
    2938:	34 00 f8    	push      0x34
    293a:	10 00 20    	mov.w     #0x1, w0
    293c:	a0 01 88    	mov.w     w0, 0x34
    293e:	00 20 20    	mov.w     #0x200, w0
    2940:	90 01 88    	mov.w     w0, 0x32
    2942:	00 00 fa    	lnk       #0x0

00002944 <.LSM56>:
    __serviceRxInterrupt(&uart1);
    2944:	20 1f 21    	mov.w     #0x11f2, w0
    2946:	9f ff 07    	rcall     0x2886 <___serviceRxInterrupt>

00002948 <.LSM57>:
}
    2948:	00 80 fa    	ulnk      
    294a:	34 00 f9    	pop       0x34
    294c:	32 00 f9    	pop       0x32
    294e:	4f 03 be    	mov.d     [--w15], w6
    2950:	4f 02 be    	mov.d     [--w15], w4
    2952:	4f 01 be    	mov.d     [--w15], w2
    2954:	4f 00 be    	mov.d     [--w15], w0
    2956:	36 00 f9    	pop       0x36
    2958:	00 40 06    	retfie    

0000295a <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    295a:	36 00 f8    	push      0x36
    295c:	80 9f be    	mov.d     w0, [w15++]
    295e:	82 9f be    	mov.d     w2, [w15++]
    2960:	84 9f be    	mov.d     w4, [w15++]
    2962:	86 9f be    	mov.d     w6, [w15++]
    2964:	32 00 f8    	push      0x32
    2966:	34 00 f8    	push      0x34
    2968:	10 00 20    	mov.w     #0x1, w0
    296a:	a0 01 88    	mov.w     w0, 0x34
    296c:	00 20 20    	mov.w     #0x200, w0
    296e:	90 01 88    	mov.w     w0, 0x32
    2970:	00 00 fa    	lnk       #0x0

00002972 <.LSM59>:
    __serviceTxInterrupt(&uart2);
    2972:	e0 22 21    	mov.w     #0x122e, w0
    2974:	1d ff 07    	rcall     0x27b0 <___serviceTxInterrupt>

00002976 <.LSM60>:
}
    2976:	00 80 fa    	ulnk      
    2978:	34 00 f9    	pop       0x34
    297a:	32 00 f9    	pop       0x32
    297c:	4f 03 be    	mov.d     [--w15], w6
    297e:	4f 02 be    	mov.d     [--w15], w4
    2980:	4f 01 be    	mov.d     [--w15], w2
    2982:	4f 00 be    	mov.d     [--w15], w0
    2984:	36 00 f9    	pop       0x36
    2986:	00 40 06    	retfie    

00002988 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2988:	36 00 f8    	push      0x36
    298a:	80 9f be    	mov.d     w0, [w15++]
    298c:	82 9f be    	mov.d     w2, [w15++]
    298e:	84 9f be    	mov.d     w4, [w15++]
    2990:	86 9f be    	mov.d     w6, [w15++]
    2992:	32 00 f8    	push      0x32
    2994:	34 00 f8    	push      0x34
    2996:	10 00 20    	mov.w     #0x1, w0
    2998:	a0 01 88    	mov.w     w0, 0x34
    299a:	00 20 20    	mov.w     #0x200, w0
    299c:	90 01 88    	mov.w     w0, 0x32
    299e:	00 00 fa    	lnk       #0x0

000029a0 <.LSM62>:
    __serviceRxInterrupt(&uart2);
    29a0:	e0 22 21    	mov.w     #0x122e, w0
    29a2:	71 ff 07    	rcall     0x2886 <___serviceRxInterrupt>

000029a4 <.LSM63>:
}
    29a4:	00 80 fa    	ulnk      
    29a6:	34 00 f9    	pop       0x34
    29a8:	32 00 f9    	pop       0x32
    29aa:	4f 03 be    	mov.d     [--w15], w6
    29ac:	4f 02 be    	mov.d     [--w15], w4
    29ae:	4f 01 be    	mov.d     [--w15], w2
    29b0:	4f 00 be    	mov.d     [--w15], w0
    29b2:	36 00 f9    	pop       0x36
    29b4:	00 40 06    	retfie    

000029b6 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    29b6:	36 00 f8    	push      0x36
    29b8:	80 9f be    	mov.d     w0, [w15++]
    29ba:	82 9f be    	mov.d     w2, [w15++]
    29bc:	84 9f be    	mov.d     w4, [w15++]
    29be:	86 9f be    	mov.d     w6, [w15++]
    29c0:	32 00 f8    	push      0x32
    29c2:	34 00 f8    	push      0x34
    29c4:	10 00 20    	mov.w     #0x1, w0
    29c6:	a0 01 88    	mov.w     w0, 0x34
    29c8:	00 20 20    	mov.w     #0x200, w0
    29ca:	90 01 88    	mov.w     w0, 0x32
    29cc:	00 00 fa    	lnk       #0x0

000029ce <.LSM65>:
    __serviceTxInterrupt(&uart3);
    29ce:	a0 26 21    	mov.w     #0x126a, w0
    29d0:	ef fe 07    	rcall     0x27b0 <___serviceTxInterrupt>

000029d2 <.LSM66>:
}
    29d2:	00 80 fa    	ulnk      
    29d4:	34 00 f9    	pop       0x34
    29d6:	32 00 f9    	pop       0x32
    29d8:	4f 03 be    	mov.d     [--w15], w6
    29da:	4f 02 be    	mov.d     [--w15], w4
    29dc:	4f 01 be    	mov.d     [--w15], w2
    29de:	4f 00 be    	mov.d     [--w15], w0
    29e0:	36 00 f9    	pop       0x36
    29e2:	00 40 06    	retfie    

000029e4 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    29e4:	36 00 f8    	push      0x36
    29e6:	80 9f be    	mov.d     w0, [w15++]
    29e8:	82 9f be    	mov.d     w2, [w15++]
    29ea:	84 9f be    	mov.d     w4, [w15++]
    29ec:	86 9f be    	mov.d     w6, [w15++]
    29ee:	32 00 f8    	push      0x32
    29f0:	34 00 f8    	push      0x34
    29f2:	10 00 20    	mov.w     #0x1, w0
    29f4:	a0 01 88    	mov.w     w0, 0x34
    29f6:	00 20 20    	mov.w     #0x200, w0
    29f8:	90 01 88    	mov.w     w0, 0x32
    29fa:	00 00 fa    	lnk       #0x0

000029fc <.LSM68>:
    __serviceRxInterrupt(&uart3);
    29fc:	a0 26 21    	mov.w     #0x126a, w0
    29fe:	43 ff 07    	rcall     0x2886 <___serviceRxInterrupt>

00002a00 <.LSM69>:
}
    2a00:	00 80 fa    	ulnk      
    2a02:	34 00 f9    	pop       0x34
    2a04:	32 00 f9    	pop       0x32
    2a06:	4f 03 be    	mov.d     [--w15], w6
    2a08:	4f 02 be    	mov.d     [--w15], w4
    2a0a:	4f 01 be    	mov.d     [--w15], w2
    2a0c:	4f 00 be    	mov.d     [--w15], w0
    2a0e:	36 00 f9    	pop       0x36
    2a10:	00 40 06    	retfie    

00002a12 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    2a12:	36 00 f8    	push      0x36
    2a14:	80 9f be    	mov.d     w0, [w15++]
    2a16:	82 9f be    	mov.d     w2, [w15++]
    2a18:	84 9f be    	mov.d     w4, [w15++]
    2a1a:	86 9f be    	mov.d     w6, [w15++]
    2a1c:	32 00 f8    	push      0x32
    2a1e:	34 00 f8    	push      0x34
    2a20:	10 00 20    	mov.w     #0x1, w0
    2a22:	a0 01 88    	mov.w     w0, 0x34
    2a24:	00 20 20    	mov.w     #0x200, w0
    2a26:	90 01 88    	mov.w     w0, 0x32
    2a28:	00 00 fa    	lnk       #0x0

00002a2a <.LSM71>:
    __serviceTxInterrupt(&uart4);
    2a2a:	60 2a 21    	mov.w     #0x12a6, w0
    2a2c:	c1 fe 07    	rcall     0x27b0 <___serviceTxInterrupt>

00002a2e <.LSM72>:
}
    2a2e:	00 80 fa    	ulnk      
    2a30:	34 00 f9    	pop       0x34
    2a32:	32 00 f9    	pop       0x32
    2a34:	4f 03 be    	mov.d     [--w15], w6
    2a36:	4f 02 be    	mov.d     [--w15], w4
    2a38:	4f 01 be    	mov.d     [--w15], w2
    2a3a:	4f 00 be    	mov.d     [--w15], w0
    2a3c:	36 00 f9    	pop       0x36
    2a3e:	00 40 06    	retfie    

00002a40 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    2a40:	36 00 f8    	push      0x36
    2a42:	80 9f be    	mov.d     w0, [w15++]
    2a44:	82 9f be    	mov.d     w2, [w15++]
    2a46:	84 9f be    	mov.d     w4, [w15++]
    2a48:	86 9f be    	mov.d     w6, [w15++]
    2a4a:	32 00 f8    	push      0x32
    2a4c:	34 00 f8    	push      0x34
    2a4e:	10 00 20    	mov.w     #0x1, w0
    2a50:	a0 01 88    	mov.w     w0, 0x34
    2a52:	00 20 20    	mov.w     #0x200, w0
    2a54:	90 01 88    	mov.w     w0, 0x32
    2a56:	00 00 fa    	lnk       #0x0

00002a58 <.LSM74>:
    __serviceRxInterrupt(&uart4);
    2a58:	60 2a 21    	mov.w     #0x12a6, w0
    2a5a:	15 ff 07    	rcall     0x2886 <___serviceRxInterrupt>

00002a5c <.LSM75>:
}
    2a5c:	00 80 fa    	ulnk      
    2a5e:	34 00 f9    	pop       0x34
    2a60:	32 00 f9    	pop       0x32
    2a62:	4f 03 be    	mov.d     [--w15], w6
    2a64:	4f 02 be    	mov.d     [--w15], w4
    2a66:	4f 01 be    	mov.d     [--w15], w2
    2a68:	4f 00 be    	mov.d     [--w15], w0
    2a6a:	36 00 f9    	pop       0x36
    2a6c:	00 40 06    	retfie    

00002a6e <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2a6e:	08 00 fa    	lnk       #0x8
    2a70:	10 07 98    	mov.w     w0, [w14+2]
    2a72:	21 07 98    	mov.w     w1, [w14+4]
    2a74:	32 07 98    	mov.w     w2, [w14+6]

00002a76 <.LSM77>:
    int16_t i;

    switch (handle) {
    2a76:	1e 00 90    	mov.w     [w14+2], w0
    2a78:	00 00 e0    	cp0.w     w0
    2a7a:	25 00 35    	bra       LT, 0x2ac6 <.L37>
    2a7c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2a7e:	03 00 34    	bra       LE, 0x2a86 <.L30>
    2a80:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2a82:	11 00 32    	bra       Z, 0x2aa6 <.L31>

00002a84 <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    2a84:	21 00 37    	bra       0x2ac8 <.L34>

00002a86 <.L30>:
    2a86:	00 00 eb    	clr.w     w0
    2a88:	00 0f 78    	mov.w     w0, [w14]
    2a8a:	08 00 37    	bra       0x2a9c <.L32>

00002a8c <.L33>:
    2a8c:	2e 00 90    	mov.w     [w14+4], w0
    2a8e:	90 40 78    	mov.b     [w0], w1
    2a90:	2e 00 90    	mov.w     [w14+4], w0
    2a92:	00 00 e8    	inc.w     w0, w0
    2a94:	20 07 98    	mov.w     w0, [w14+4]
    2a96:	b0 41 80    	mov.w     0x836, w0
    2a98:	19 04 07    	rcall     0x32cc <_uart_putc>

00002a9a <.LSM81>:
    2a9a:	1e 0f e8    	inc.w     [w14], [w14]

00002a9c <.L32>:
    2a9c:	9e 00 78    	mov.w     [w14], w1
    2a9e:	3e 00 90    	mov.w     [w14+6], w0
    2aa0:	80 8f 50    	sub.w     w1, w0, [w15]
    2aa2:	f4 ff 39    	bra       NC, 0x2a8c <.L33>

00002aa4 <.LSM82>:
    2aa4:	11 00 37    	bra       0x2ac8 <.L34>

00002aa6 <.L31>:
    2aa6:	00 00 eb    	clr.w     w0
    2aa8:	00 0f 78    	mov.w     w0, [w14]
    2aaa:	08 00 37    	bra       0x2abc <.L35>

00002aac <.L36>:
    2aac:	2e 00 90    	mov.w     [w14+4], w0
    2aae:	90 40 78    	mov.b     [w0], w1
    2ab0:	2e 00 90    	mov.w     [w14+4], w0
    2ab2:	00 00 e8    	inc.w     w0, w0
    2ab4:	20 07 98    	mov.w     w0, [w14+4]
    2ab6:	c0 41 80    	mov.w     0x838, w0
    2ab8:	09 04 07    	rcall     0x32cc <_uart_putc>

00002aba <.LSM85>:
    2aba:	1e 0f e8    	inc.w     [w14], [w14]

00002abc <.L35>:
    2abc:	9e 00 78    	mov.w     [w14], w1
    2abe:	3e 00 90    	mov.w     [w14+6], w0
    2ac0:	80 8f 50    	sub.w     w1, w0, [w15]
    2ac2:	f4 ff 39    	bra       NC, 0x2aac <.L36>

00002ac4 <.LSM86>:
    2ac4:	01 00 37    	bra       0x2ac8 <.L34>

00002ac6 <.L37>:
    2ac6:	00 00 00    	nop       

00002ac8 <.L34>:
    }
    return len;
    2ac8:	3e 00 90    	mov.w     [w14+6], w0

00002aca <.LSM89>:
}
    2aca:	00 80 fa    	ulnk      
    2acc:	00 00 06    	return    

00002ace <_init_uart>:

void init_uart(void) {
    2ace:	00 00 fa    	lnk       #0x0

00002ad0 <.LSM91>:
    init_pin();
    2ad0:	98 07 07    	rcall     0x3a02 <_init_pin>

00002ad2 <.LSM92>:

    // pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    // pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    2ad2:	40 00 20    	mov.w     #0x4, w0
    2ad4:	80 1f 78    	mov.w     w0, [w15++]
    2ad6:	30 00 20    	mov.w     #0x3, w0
    2ad8:	80 1f 78    	mov.w     w0, [w15++]
    2ada:	80 c0 b3    	mov.b     #0x8, w0
    2adc:	80 1f 78    	mov.w     w0, [w15++]
    2ade:	00 40 eb    	clr.b     w0
    2ae0:	80 1f 78    	mov.w     w0, [w15++]
    2ae2:	40 6a 20    	mov.w     #0x6a4, w0
    2ae4:	80 1f 78    	mov.w     w0, [w15++]
    2ae6:	40 6a 20    	mov.w     #0x6a4, w0
    2ae8:	80 1f 78    	mov.w     w0, [w15++]
    2aea:	b0 c0 b3    	mov.b     #0xb, w0
    2aec:	80 1f 78    	mov.w     w0, [w15++]
    2aee:	c0 c0 b3    	mov.b     #0xc, w0
    2af0:	80 1f 78    	mov.w     w0, [w15++]
    2af2:	47 09 20    	mov.w     #0x94, w7
    2af4:	46 08 20    	mov.w     #0x84, w6
    2af6:	85 22 20    	mov.w     #0x228, w5
    2af8:	64 22 20    	mov.w     #0x226, w4
    2afa:	43 22 20    	mov.w     #0x224, w3
    2afc:	22 22 20    	mov.w     #0x222, w2
    2afe:	01 22 20    	mov.w     #0x220, w1
    2b00:	20 1f 21    	mov.w     #0x11f2, w0
    2b02:	51 00 07    	rcall     0x2ba6 <_uart_init>
    2b04:	f0 87 57    	sub.w     w15, #0x10, w15

00002b06 <.LSM93>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    2b06:	60 00 20    	mov.w     #0x6, w0
    2b08:	80 1f 78    	mov.w     w0, [w15++]
    2b0a:	50 00 20    	mov.w     #0x5, w0
    2b0c:	80 1f 78    	mov.w     w0, [w15++]
    2b0e:	80 c0 b3    	mov.b     #0x8, w0
    2b10:	80 1f 78    	mov.w     w0, [w15++]
    2b12:	00 40 eb    	clr.b     w0
    2b14:	80 1f 78    	mov.w     w0, [w15++]
    2b16:	60 6a 20    	mov.w     #0x6a6, w0
    2b18:	80 1f 78    	mov.w     w0, [w15++]
    2b1a:	60 6a 20    	mov.w     #0x6a6, w0
    2b1c:	80 1f 78    	mov.w     w0, [w15++]
    2b1e:	e0 c0 b3    	mov.b     #0xe, w0
    2b20:	80 1f 78    	mov.w     w0, [w15++]
    2b22:	f0 c0 b3    	mov.b     #0xf, w0
    2b24:	80 1f 78    	mov.w     w0, [w15++]
    2b26:	67 09 20    	mov.w     #0x96, w7
    2b28:	66 08 20    	mov.w     #0x86, w6
    2b2a:	85 23 20    	mov.w     #0x238, w5
    2b2c:	64 23 20    	mov.w     #0x236, w4
    2b2e:	43 23 20    	mov.w     #0x234, w3
    2b30:	22 23 20    	mov.w     #0x232, w2
    2b32:	01 23 20    	mov.w     #0x230, w1
    2b34:	e0 22 21    	mov.w     #0x122e, w0
    2b36:	37 00 07    	rcall     0x2ba6 <_uart_init>
    2b38:	f0 87 57    	sub.w     w15, #0x10, w15

00002b3a <.LSM94>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    2b3a:	d0 01 20    	mov.w     #0x1d, w0
    2b3c:	80 1f 78    	mov.w     w0, [w15++]
    2b3e:	c0 01 20    	mov.w     #0x1c, w0
    2b40:	80 1f 78    	mov.w     w0, [w15++]
    2b42:	80 c0 b3    	mov.b     #0x8, w0
    2b44:	80 1f 78    	mov.w     w0, [w15++]
    2b46:	80 c0 b3    	mov.b     #0x8, w0
    2b48:	80 1f 78    	mov.w     w0, [w15++]
    2b4a:	a0 6a 20    	mov.w     #0x6aa, w0
    2b4c:	80 1f 78    	mov.w     w0, [w15++]
    2b4e:	20 6a 20    	mov.w     #0x6a2, w0
    2b50:	80 1f 78    	mov.w     w0, [w15++]
    2b52:	20 c0 b3    	mov.b     #0x2, w0
    2b54:	80 1f 78    	mov.w     w0, [w15++]
    2b56:	30 c0 b3    	mov.b     #0x3, w0
    2b58:	80 1f 78    	mov.w     w0, [w15++]
    2b5a:	e7 09 20    	mov.w     #0x9e, w7
    2b5c:	e6 08 20    	mov.w     #0x8e, w6
    2b5e:	85 25 20    	mov.w     #0x258, w5
    2b60:	64 25 20    	mov.w     #0x256, w4
    2b62:	43 25 20    	mov.w     #0x254, w3
    2b64:	22 25 20    	mov.w     #0x252, w2
    2b66:	01 25 20    	mov.w     #0x250, w1
    2b68:	a0 26 21    	mov.w     #0x126a, w0
    2b6a:	1d 00 07    	rcall     0x2ba6 <_uart_init>
    2b6c:	f0 87 57    	sub.w     w15, #0x10, w15

00002b6e <.LSM95>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    2b6e:	f0 01 20    	mov.w     #0x1f, w0
    2b70:	80 1f 78    	mov.w     w0, [w15++]
    2b72:	e0 01 20    	mov.w     #0x1e, w0
    2b74:	80 1f 78    	mov.w     w0, [w15++]
    2b76:	80 c0 b3    	mov.b     #0x8, w0
    2b78:	80 1f 78    	mov.w     w0, [w15++]
    2b7a:	00 40 eb    	clr.b     w0
    2b7c:	80 1f 78    	mov.w     w0, [w15++]
    2b7e:	60 6b 20    	mov.w     #0x6b6, w0
    2b80:	80 1f 78    	mov.w     w0, [w15++]
    2b82:	60 6b 20    	mov.w     #0x6b6, w0
    2b84:	80 1f 78    	mov.w     w0, [w15++]
    2b86:	80 c0 b3    	mov.b     #0x8, w0
    2b88:	80 1f 78    	mov.w     w0, [w15++]
    2b8a:	90 c0 b3    	mov.b     #0x9, w0
    2b8c:	80 1f 78    	mov.w     w0, [w15++]
    2b8e:	e7 09 20    	mov.w     #0x9e, w7
    2b90:	e6 08 20    	mov.w     #0x8e, w6
    2b92:	85 2b 20    	mov.w     #0x2b8, w5
    2b94:	64 2b 20    	mov.w     #0x2b6, w4
    2b96:	43 2b 20    	mov.w     #0x2b4, w3
    2b98:	22 2b 20    	mov.w     #0x2b2, w2
    2b9a:	01 2b 20    	mov.w     #0x2b0, w1
    2b9c:	60 2a 21    	mov.w     #0x12a6, w0
    2b9e:	03 00 07    	rcall     0x2ba6 <_uart_init>
    2ba0:	f0 87 57    	sub.w     w15, #0x10, w15

00002ba2 <.LSM96>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    // uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    //           0, NULL, 0, NULL, 0);

    // _stdout = &uart1;
    // _stderr = &uart1;

}
    2ba2:	00 80 fa    	ulnk      
    2ba4:	00 00 06    	return    

00002ba6 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2ba6:	10 00 fa    	lnk       #0x10
    2ba8:	00 0f 78    	mov.w     w0, [w14]
    2baa:	11 07 98    	mov.w     w1, [w14+2]
    2bac:	22 07 98    	mov.w     w2, [w14+4]
    2bae:	33 07 98    	mov.w     w3, [w14+6]
    2bb0:	44 07 98    	mov.w     w4, [w14+8]
    2bb2:	55 07 98    	mov.w     w5, [w14+10]
    2bb4:	66 07 98    	mov.w     w6, [w14+12]
    2bb6:	77 07 98    	mov.w     w7, [w14+14]

00002bb8 <.LSM98>:
    self->UxMODE = UxMODE;
    2bb8:	1e 00 78    	mov.w     [w14], w0
    2bba:	9e 00 90    	mov.w     [w14+2], w1
    2bbc:	01 08 78    	mov.w     w1, [w0]

00002bbe <.LSM99>:
    self->UxSTA = UxSTA;
    2bbe:	1e 00 78    	mov.w     [w14], w0
    2bc0:	ae 00 90    	mov.w     [w14+4], w1
    2bc2:	11 00 98    	mov.w     w1, [w0+2]

00002bc4 <.LSM100>:
    self->UxTXREG = UxTXREG;
    2bc4:	1e 00 78    	mov.w     [w14], w0
    2bc6:	be 00 90    	mov.w     [w14+6], w1
    2bc8:	21 00 98    	mov.w     w1, [w0+4]

00002bca <.LSM101>:
    self->UxRXREG = UxRXREG;
    2bca:	1e 00 78    	mov.w     [w14], w0
    2bcc:	ce 00 90    	mov.w     [w14+8], w1
    2bce:	31 00 98    	mov.w     w1, [w0+6]

00002bd0 <.LSM102>:
    self->UxBRG = UxBRG;
    2bd0:	1e 00 78    	mov.w     [w14], w0
    2bd2:	de 00 90    	mov.w     [w14+10], w1
    2bd4:	41 00 98    	mov.w     w1, [w0+8]

00002bd6 <.LSM103>:
    self->IFSy = IFSy;
    2bd6:	1e 00 78    	mov.w     [w14], w0
    2bd8:	ee 00 90    	mov.w     [w14+12], w1
    2bda:	51 00 98    	mov.w     w1, [w0+10]

00002bdc <.LSM104>:
    self->IECy = IECy;
    2bdc:	1e 00 78    	mov.w     [w14], w0
    2bde:	fe 00 90    	mov.w     [w14+14], w1
    2be0:	61 00 98    	mov.w     w1, [w0+12]

00002be2 <.LSM105>:
    self->UxTXIF = UxTXIF;
    2be2:	1e 00 78    	mov.w     [w14], w0
    2be4:	8e f8 97    	mov.b     [w14-8], w1
    2be6:	61 48 98    	mov.b     w1, [w0+14]

00002be8 <.LSM106>:
    self->UxRXIF = UxRXIF;
    2be8:	1e 00 78    	mov.w     [w14], w0
    2bea:	ee f0 97    	mov.b     [w14-10], w1
    2bec:	71 48 98    	mov.b     w1, [w0+15]

00002bee <.LSM107>:
    self->RXrpinr = RXrpinr;
    2bee:	1e 00 78    	mov.w     [w14], w0
    2bf0:	ae b8 97    	mov.w     [w14-12], w1
    2bf2:	01 08 98    	mov.w     w1, [w0+16]

00002bf4 <.LSM108>:
    self->CTSrpinr = CTSrpinr;
    2bf4:	1e 00 78    	mov.w     [w14], w0
    2bf6:	9e b8 97    	mov.w     [w14-14], w1
    2bf8:	11 08 98    	mov.w     w1, [w0+18]

00002bfa <.LSM109>:
    self->RXrpshift = RXrpshift;
    2bfa:	1e 00 78    	mov.w     [w14], w0
    2bfc:	8e f0 97    	mov.b     [w14-16], w1
    2bfe:	41 50 98    	mov.b     w1, [w0+20]

00002c00 <.LSM110>:
    self->CTSrpshift = CTSrpshift;
    2c00:	1e 00 78    	mov.w     [w14], w0
    2c02:	ee e8 97    	mov.b     [w14-18], w1
    2c04:	51 50 98    	mov.b     w1, [w0+21]

00002c06 <.LSM111>:
    self->TXrpnum = TXrpnum;
    2c06:	1e 00 78    	mov.w     [w14], w0
    2c08:	ee b0 97    	mov.w     [w14-20], w1
    2c0a:	31 08 98    	mov.w     w1, [w0+22]

00002c0c <.LSM112>:
    self->RTSrpnum = RTSrpnum;
    2c0c:	1e 00 78    	mov.w     [w14], w0
    2c0e:	de b0 97    	mov.w     [w14-22], w1
    2c10:	41 08 98    	mov.w     w1, [w0+24]

00002c12 <.LSM113>:
    self->TX = NULL;
    2c12:	1e 00 78    	mov.w     [w14], w0
    2c14:	80 00 eb    	clr.w     w1
    2c16:	51 08 98    	mov.w     w1, [w0+26]

00002c18 <.LSM114>:
    self->RX = NULL;
    2c18:	1e 00 78    	mov.w     [w14], w0
    2c1a:	80 00 eb    	clr.w     w1
    2c1c:	61 08 98    	mov.w     w1, [w0+28]

00002c1e <.LSM115>:
    self->RTS = NULL;
    2c1e:	1e 00 78    	mov.w     [w14], w0
    2c20:	80 00 eb    	clr.w     w1
    2c22:	71 08 98    	mov.w     w1, [w0+30]

00002c24 <.LSM116>:
    self->CTS = NULL;
    2c24:	1e 00 78    	mov.w     [w14], w0
    2c26:	80 00 eb    	clr.w     w1
    2c28:	01 10 98    	mov.w     w1, [w0+32]

00002c2a <.LSM117>:
    self->TXbuffer.data = NULL;
    2c2a:	1e 00 78    	mov.w     [w14], w0
    2c2c:	80 00 eb    	clr.w     w1
    2c2e:	11 10 98    	mov.w     w1, [w0+34]

00002c30 <.LSM118>:
    self->TXbuffer.length = 0;
    2c30:	1e 00 78    	mov.w     [w14], w0
    2c32:	80 00 eb    	clr.w     w1
    2c34:	21 10 98    	mov.w     w1, [w0+36]

00002c36 <.LSM119>:
    self->TXbuffer.head = 0;
    2c36:	1e 00 78    	mov.w     [w14], w0
    2c38:	80 00 eb    	clr.w     w1
    2c3a:	31 10 98    	mov.w     w1, [w0+38]

00002c3c <.LSM120>:
    self->TXbuffer.tail = 0;
    2c3c:	1e 00 78    	mov.w     [w14], w0
    2c3e:	80 00 eb    	clr.w     w1
    2c40:	41 10 98    	mov.w     w1, [w0+40]

00002c42 <.LSM121>:
    self->TXbuffer.count = 0;
    2c42:	1e 00 78    	mov.w     [w14], w0
    2c44:	80 00 eb    	clr.w     w1
    2c46:	51 10 98    	mov.w     w1, [w0+42]

00002c48 <.LSM122>:
    self->RXbuffer.data = NULL;
    2c48:	1e 00 78    	mov.w     [w14], w0
    2c4a:	80 00 eb    	clr.w     w1
    2c4c:	61 10 98    	mov.w     w1, [w0+44]

00002c4e <.LSM123>:
    self->RXbuffer.length = 0;
    2c4e:	1e 00 78    	mov.w     [w14], w0
    2c50:	80 00 eb    	clr.w     w1
    2c52:	71 10 98    	mov.w     w1, [w0+46]

00002c54 <.LSM124>:
    self->RXbuffer.head = 0;
    2c54:	1e 00 78    	mov.w     [w14], w0
    2c56:	80 00 eb    	clr.w     w1
    2c58:	01 18 98    	mov.w     w1, [w0+48]

00002c5a <.LSM125>:
    self->RXbuffer.tail = 0;
    2c5a:	1e 00 78    	mov.w     [w14], w0
    2c5c:	80 00 eb    	clr.w     w1
    2c5e:	11 18 98    	mov.w     w1, [w0+50]

00002c60 <.LSM126>:
    self->RXbuffer.count = 0;
    2c60:	1e 00 78    	mov.w     [w14], w0
    2c62:	80 00 eb    	clr.w     w1
    2c64:	21 18 98    	mov.w     w1, [w0+52]

00002c66 <.LSM127>:
    self->TXthreshold = 1;
    2c66:	1e 00 78    	mov.w     [w14], w0
    2c68:	11 00 20    	mov.w     #0x1, w1
    2c6a:	31 18 98    	mov.w     w1, [w0+54]

00002c6c <.LSM128>:
    self->putc = NULL;
    2c6c:	1e 00 78    	mov.w     [w14], w0
    2c6e:	80 00 eb    	clr.w     w1
    2c70:	41 18 98    	mov.w     w1, [w0+56]

00002c72 <.LSM129>:
    self->getc = NULL;
    2c72:	1e 00 78    	mov.w     [w14], w0
    2c74:	80 00 eb    	clr.w     w1
    2c76:	51 18 98    	mov.w     w1, [w0+58]

00002c78 <.LSM130>:
}
    2c78:	00 80 fa    	ulnk      
    2c7a:	00 00 06    	return    

00002c7c <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    2c7c:	10 00 fa    	lnk       #0x10
    2c7e:	88 1f 78    	mov.w     w8, [w15++]
    2c80:	00 0f 78    	mov.w     w0, [w14]
    2c82:	11 07 98    	mov.w     w1, [w14+2]
    2c84:	22 07 98    	mov.w     w2, [w14+4]
    2c86:	33 07 98    	mov.w     w3, [w14+6]
    2c88:	44 07 98    	mov.w     w4, [w14+8]
    2c8a:	56 07 98    	mov.w     w6, [w14+10]
    2c8c:	67 07 98    	mov.w     w7, [w14+12]
    2c8e:	65 4f 98    	mov.b     w5, [w14+14]

00002c90 <.LSM132>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    2c90:	1e 00 78    	mov.w     [w14], w0
    2c92:	10 00 78    	mov.w     [w0], w0
    2c94:	80 00 eb    	clr.w     w1
    2c96:	01 08 78    	mov.w     w1, [w0]

00002c98 <.LSM133>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    2c98:	1e 00 90    	mov.w     [w14+2], w0
    2c9a:	60 00 90    	mov.w     [w0+12], w0
    2c9c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2c9e:	0e 02 32    	bra       Z, 0x30bc <.L73>
    2ca0:	2e 00 90    	mov.w     [w14+4], w0
    2ca2:	60 00 90    	mov.w     [w0+12], w0
    2ca4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2ca6:	0c 02 32    	bra       Z, 0x30c0 <.L74>

00002ca8 <.LSM134>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    2ca8:	1e 00 90    	mov.w     [w14+2], w0
    2caa:	00 08 90    	mov.w     [w0+16], w0
    2cac:	00 00 e0    	cp0.w     w0
    2cae:	69 00 3a    	bra       NZ, 0x2d82 <.L44>
    2cb0:	2e 00 90    	mov.w     [w14+4], w0
    2cb2:	00 08 90    	mov.w     [w0+16], w0
    2cb4:	00 00 e0    	cp0.w     w0
    2cb6:	65 00 3a    	bra       NZ, 0x2d82 <.L44>

00002cb8 <.LSM135>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    2cb8:	1e 00 90    	mov.w     [w14+2], w0
    2cba:	0a 08 07    	rcall     0x3cd0 <_pin_digitalOut>

00002cbc <.LSM136>:
        pin_set(TX);
    2cbc:	1e 00 90    	mov.w     [w14+2], w0
    2cbe:	65 08 07    	rcall     0x3d8a <_pin_set>

00002cc0 <.LSM137>:
        pin_digitalIn(RX);
    2cc0:	2e 00 90    	mov.w     [w14+4], w0
    2cc2:	df 07 07    	rcall     0x3c82 <_pin_digitalIn>

00002cc4 <.LSM138>:
        self->TX = TX;
    2cc4:	1e 00 78    	mov.w     [w14], w0
    2cc6:	9e 00 90    	mov.w     [w14+2], w1
    2cc8:	51 08 98    	mov.w     w1, [w0+26]

00002cca <.LSM139>:
        TX->owner = (void *)self;
    2cca:	1e 00 90    	mov.w     [w14+2], w0
    2ccc:	9e 00 78    	mov.w     [w14], w1
    2cce:	01 08 98    	mov.w     w1, [w0+16]

00002cd0 <.LSM140>:
        TX->write = NULL;
    2cd0:	1e 00 90    	mov.w     [w14+2], w0
    2cd2:	80 00 eb    	clr.w     w1
    2cd4:	11 08 98    	mov.w     w1, [w0+18]

00002cd6 <.LSM141>:
        TX->read = NULL;
    2cd6:	1e 00 90    	mov.w     [w14+2], w0
    2cd8:	80 00 eb    	clr.w     w1
    2cda:	21 08 98    	mov.w     w1, [w0+20]

00002cdc <.LSM142>:
        self->RX = RX;
    2cdc:	1e 00 78    	mov.w     [w14], w0
    2cde:	ae 00 90    	mov.w     [w14+4], w1
    2ce0:	61 08 98    	mov.w     w1, [w0+28]

00002ce2 <.LSM143>:
        RX->owner = (void *)self;
    2ce2:	2e 00 90    	mov.w     [w14+4], w0
    2ce4:	9e 00 78    	mov.w     [w14], w1
    2ce6:	01 08 98    	mov.w     w1, [w0+16]

00002ce8 <.LSM144>:
        RX->write = NULL;
    2ce8:	2e 00 90    	mov.w     [w14+4], w0
    2cea:	80 00 eb    	clr.w     w1
    2cec:	11 08 98    	mov.w     w1, [w0+18]

00002cee <.LSM145>:
        RX->read = NULL;
    2cee:	2e 00 90    	mov.w     [w14+4], w0
    2cf0:	80 00 eb    	clr.w     w1
    2cf2:	21 08 98    	mov.w     w1, [w0+20]

00002cf4 <.LSM146>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2cf4:	11 3a 80    	mov.w     0x742, w1
    2cf6:	f0 0b 20    	mov.w     #0xbf, w0
    2cf8:	00 81 60    	and.w     w1, w0, w2
    2cfa:	60 04 20    	mov.w     #0x46, w0
    2cfc:	71 05 20    	mov.w     #0x57, w1
    2cfe:	23 74 20    	mov.w     #0x742, w3
    2d00:	80 49 78    	mov.b     w0, [w3]
    2d02:	81 49 78    	mov.b     w1, [w3]
    2d04:	82 49 78    	mov.b     w2, [w3]

00002d06 <.LSM147>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    2d06:	1e 00 90    	mov.w     [w14+2], w0
    2d08:	70 00 90    	mov.w     [w0+14], w0
    2d0a:	9e 00 90    	mov.w     [w14+2], w1
    2d0c:	f1 00 90    	mov.w     [w1+14], w1
    2d0e:	11 01 78    	mov.w     [w1], w2
    2d10:	9e 00 90    	mov.w     [w14+2], w1
    2d12:	a1 48 90    	mov.b     [w1+10], w1
    2d14:	81 80 fb    	ze        w1, w1
    2d16:	f3 03 20    	mov.w     #0x3f, w3
    2d18:	81 18 dd    	sl.w      w3, w1, w1
    2d1a:	81 80 ea    	com.w     w1, w1
    2d1c:	81 00 61    	and.w     w2, w1, w1
    2d1e:	01 08 78    	mov.w     w1, [w0]

00002d20 <.LSM148>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    2d20:	1e 00 90    	mov.w     [w14+2], w0
    2d22:	70 00 90    	mov.w     [w0+14], w0
    2d24:	9e 00 90    	mov.w     [w14+2], w1
    2d26:	f1 00 90    	mov.w     [w1+14], w1
    2d28:	11 01 78    	mov.w     [w1], w2
    2d2a:	9e 00 78    	mov.w     [w14], w1
    2d2c:	b1 09 90    	mov.w     [w1+22], w3
    2d2e:	9e 00 90    	mov.w     [w14+2], w1
    2d30:	a1 48 90    	mov.b     [w1+10], w1
    2d32:	81 80 fb    	ze        w1, w1
    2d34:	81 18 dd    	sl.w      w3, w1, w1
    2d36:	82 80 70    	ior.w     w1, w2, w1
    2d38:	01 08 78    	mov.w     w1, [w0]

00002d3a <.LSM149>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    2d3a:	1e 00 78    	mov.w     [w14], w0
    2d3c:	00 08 90    	mov.w     [w0+16], w0
    2d3e:	9e 00 78    	mov.w     [w14], w1
    2d40:	81 08 90    	mov.w     [w1+16], w1
    2d42:	11 01 78    	mov.w     [w1], w2
    2d44:	9e 00 78    	mov.w     [w14], w1
    2d46:	c1 50 90    	mov.b     [w1+20], w1
    2d48:	81 80 fb    	ze        w1, w1
    2d4a:	f3 03 20    	mov.w     #0x3f, w3
    2d4c:	81 18 dd    	sl.w      w3, w1, w1
    2d4e:	81 80 ea    	com.w     w1, w1
    2d50:	81 00 61    	and.w     w2, w1, w1
    2d52:	01 08 78    	mov.w     w1, [w0]

00002d54 <.LSM150>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    2d54:	1e 00 78    	mov.w     [w14], w0
    2d56:	00 08 90    	mov.w     [w0+16], w0
    2d58:	9e 00 78    	mov.w     [w14], w1
    2d5a:	81 08 90    	mov.w     [w1+16], w1
    2d5c:	11 01 78    	mov.w     [w1], w2
    2d5e:	ae 00 90    	mov.w     [w14+4], w1
    2d60:	e1 01 90    	mov.w     [w1+12], w3
    2d62:	9e 00 78    	mov.w     [w14], w1
    2d64:	c1 50 90    	mov.b     [w1+20], w1
    2d66:	81 80 fb    	ze        w1, w1
    2d68:	81 18 dd    	sl.w      w3, w1, w1
    2d6a:	82 80 70    	ior.w     w1, w2, w1
    2d6c:	01 08 78    	mov.w     w1, [w0]

00002d6e <.LSM151>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2d6e:	11 3a 80    	mov.w     0x742, w1
    2d70:	00 04 20    	mov.w     #0x40, w0
    2d72:	01 01 70    	ior.w     w0, w1, w2
    2d74:	60 04 20    	mov.w     #0x46, w0
    2d76:	71 05 20    	mov.w     #0x57, w1
    2d78:	23 74 20    	mov.w     #0x742, w3
    2d7a:	80 49 78    	mov.b     w0, [w3]
    2d7c:	81 49 78    	mov.b     w1, [w3]
    2d7e:	82 49 78    	mov.b     w2, [w3]
    2d80:	0a 00 37    	bra       0x2d96 <.L45>

00002d82 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    2d82:	1e 00 78    	mov.w     [w14], w0
    2d84:	d0 08 90    	mov.w     [w0+26], w1
    2d86:	1e 00 90    	mov.w     [w14+2], w0
    2d88:	80 8f 50    	sub.w     w1, w0, [w15]
    2d8a:	9c 01 3a    	bra       NZ, 0x30c4 <.L75>
    2d8c:	1e 00 78    	mov.w     [w14], w0
    2d8e:	e0 08 90    	mov.w     [w0+28], w1
    2d90:	2e 00 90    	mov.w     [w14+4], w0
    2d92:	80 8f 50    	sub.w     w1, w0, [w15]
    2d94:	99 01 3a    	bra       NZ, 0x30c8 <.L76>

00002d96 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    2d96:	3e 00 90    	mov.w     [w14+6], w0
    2d98:	00 00 e0    	cp0.w     w0
    2d9a:	87 00 32    	bra       Z, 0x2eaa <.L47>
    2d9c:	4e 00 90    	mov.w     [w14+8], w0
    2d9e:	00 00 e0    	cp0.w     w0
    2da0:	84 00 32    	bra       Z, 0x2eaa <.L47>

00002da2 <.LSM154>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    2da2:	3e 00 90    	mov.w     [w14+6], w0
    2da4:	60 00 90    	mov.w     [w0+12], w0
    2da6:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2da8:	91 01 32    	bra       Z, 0x30cc <.L77>
    2daa:	4e 00 90    	mov.w     [w14+8], w0
    2dac:	60 00 90    	mov.w     [w0+12], w0
    2dae:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2db0:	8f 01 32    	bra       Z, 0x30d0 <.L78>

00002db2 <.LSM155>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    2db2:	3e 00 90    	mov.w     [w14+6], w0
    2db4:	00 08 90    	mov.w     [w0+16], w0
    2db6:	00 00 e0    	cp0.w     w0
    2db8:	69 00 3a    	bra       NZ, 0x2e8c <.L50>
    2dba:	4e 00 90    	mov.w     [w14+8], w0
    2dbc:	00 08 90    	mov.w     [w0+16], w0
    2dbe:	00 00 e0    	cp0.w     w0
    2dc0:	65 00 3a    	bra       NZ, 0x2e8c <.L50>

00002dc2 <.LSM156>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    2dc2:	3e 00 90    	mov.w     [w14+6], w0
    2dc4:	85 07 07    	rcall     0x3cd0 <_pin_digitalOut>

00002dc6 <.LSM157>:
            pin_set(RTS);
    2dc6:	3e 00 90    	mov.w     [w14+6], w0
    2dc8:	e0 07 07    	rcall     0x3d8a <_pin_set>

00002dca <.LSM158>:
            pin_digitalIn(CTS);
    2dca:	4e 00 90    	mov.w     [w14+8], w0
    2dcc:	5a 07 07    	rcall     0x3c82 <_pin_digitalIn>

00002dce <.LSM159>:
            self->RTS = RTS;
    2dce:	1e 00 78    	mov.w     [w14], w0
    2dd0:	be 00 90    	mov.w     [w14+6], w1
    2dd2:	71 08 98    	mov.w     w1, [w0+30]

00002dd4 <.LSM160>:
            RTS->owner = (void *)self;
    2dd4:	3e 00 90    	mov.w     [w14+6], w0
    2dd6:	9e 00 78    	mov.w     [w14], w1
    2dd8:	01 08 98    	mov.w     w1, [w0+16]

00002dda <.LSM161>:
            RTS->write = NULL;
    2dda:	3e 00 90    	mov.w     [w14+6], w0
    2ddc:	80 00 eb    	clr.w     w1
    2dde:	11 08 98    	mov.w     w1, [w0+18]

00002de0 <.LSM162>:
            RTS->read = NULL;
    2de0:	3e 00 90    	mov.w     [w14+6], w0
    2de2:	80 00 eb    	clr.w     w1
    2de4:	21 08 98    	mov.w     w1, [w0+20]

00002de6 <.LSM163>:
            self->CTS = CTS;
    2de6:	1e 00 78    	mov.w     [w14], w0
    2de8:	ce 00 90    	mov.w     [w14+8], w1
    2dea:	01 10 98    	mov.w     w1, [w0+32]

00002dec <.LSM164>:
            CTS->owner = (void *)self;
    2dec:	4e 00 90    	mov.w     [w14+8], w0
    2dee:	9e 00 78    	mov.w     [w14], w1
    2df0:	01 08 98    	mov.w     w1, [w0+16]

00002df2 <.LSM165>:
            CTS->write = NULL;
    2df2:	4e 00 90    	mov.w     [w14+8], w0
    2df4:	80 00 eb    	clr.w     w1
    2df6:	11 08 98    	mov.w     w1, [w0+18]

00002df8 <.LSM166>:
            CTS->read = NULL;
    2df8:	4e 00 90    	mov.w     [w14+8], w0
    2dfa:	80 00 eb    	clr.w     w1
    2dfc:	21 08 98    	mov.w     w1, [w0+20]

00002dfe <.LSM167>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    2dfe:	11 3a 80    	mov.w     0x742, w1
    2e00:	f0 0b 20    	mov.w     #0xbf, w0
    2e02:	00 81 60    	and.w     w1, w0, w2
    2e04:	60 04 20    	mov.w     #0x46, w0
    2e06:	71 05 20    	mov.w     #0x57, w1
    2e08:	23 74 20    	mov.w     #0x742, w3
    2e0a:	80 49 78    	mov.b     w0, [w3]
    2e0c:	81 49 78    	mov.b     w1, [w3]
    2e0e:	82 49 78    	mov.b     w2, [w3]

00002e10 <.LSM168>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    2e10:	3e 00 90    	mov.w     [w14+6], w0
    2e12:	70 00 90    	mov.w     [w0+14], w0
    2e14:	be 00 90    	mov.w     [w14+6], w1
    2e16:	f1 00 90    	mov.w     [w1+14], w1
    2e18:	11 01 78    	mov.w     [w1], w2
    2e1a:	be 00 90    	mov.w     [w14+6], w1
    2e1c:	a1 48 90    	mov.b     [w1+10], w1
    2e1e:	81 80 fb    	ze        w1, w1
    2e20:	f3 03 20    	mov.w     #0x3f, w3
    2e22:	81 18 dd    	sl.w      w3, w1, w1
    2e24:	81 80 ea    	com.w     w1, w1
    2e26:	81 00 61    	and.w     w2, w1, w1
    2e28:	01 08 78    	mov.w     w1, [w0]

00002e2a <.LSM169>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    2e2a:	3e 00 90    	mov.w     [w14+6], w0
    2e2c:	70 00 90    	mov.w     [w0+14], w0
    2e2e:	be 00 90    	mov.w     [w14+6], w1
    2e30:	f1 00 90    	mov.w     [w1+14], w1
    2e32:	11 01 78    	mov.w     [w1], w2
    2e34:	9e 00 78    	mov.w     [w14], w1
    2e36:	c1 09 90    	mov.w     [w1+24], w3
    2e38:	be 00 90    	mov.w     [w14+6], w1
    2e3a:	a1 48 90    	mov.b     [w1+10], w1
    2e3c:	81 80 fb    	ze        w1, w1
    2e3e:	81 18 dd    	sl.w      w3, w1, w1
    2e40:	82 80 70    	ior.w     w1, w2, w1
    2e42:	01 08 78    	mov.w     w1, [w0]

00002e44 <.LSM170>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    2e44:	1e 00 78    	mov.w     [w14], w0
    2e46:	10 08 90    	mov.w     [w0+18], w0
    2e48:	9e 00 78    	mov.w     [w14], w1
    2e4a:	91 08 90    	mov.w     [w1+18], w1
    2e4c:	11 01 78    	mov.w     [w1], w2
    2e4e:	9e 00 78    	mov.w     [w14], w1
    2e50:	d1 50 90    	mov.b     [w1+21], w1
    2e52:	81 80 fb    	ze        w1, w1
    2e54:	f3 03 20    	mov.w     #0x3f, w3
    2e56:	81 18 dd    	sl.w      w3, w1, w1
    2e58:	81 80 ea    	com.w     w1, w1
    2e5a:	81 00 61    	and.w     w2, w1, w1
    2e5c:	01 08 78    	mov.w     w1, [w0]

00002e5e <.LSM171>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    2e5e:	1e 00 78    	mov.w     [w14], w0
    2e60:	10 08 90    	mov.w     [w0+18], w0
    2e62:	9e 00 78    	mov.w     [w14], w1
    2e64:	91 08 90    	mov.w     [w1+18], w1
    2e66:	11 01 78    	mov.w     [w1], w2
    2e68:	ce 00 90    	mov.w     [w14+8], w1
    2e6a:	e1 01 90    	mov.w     [w1+12], w3
    2e6c:	9e 00 78    	mov.w     [w14], w1
    2e6e:	d1 50 90    	mov.b     [w1+21], w1
    2e70:	81 80 fb    	ze        w1, w1
    2e72:	81 18 dd    	sl.w      w3, w1, w1
    2e74:	82 80 70    	ior.w     w1, w2, w1
    2e76:	01 08 78    	mov.w     w1, [w0]

00002e78 <.LSM172>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    2e78:	11 3a 80    	mov.w     0x742, w1
    2e7a:	00 04 20    	mov.w     #0x40, w0
    2e7c:	01 01 70    	ior.w     w0, w1, w2
    2e7e:	60 04 20    	mov.w     #0x46, w0
    2e80:	71 05 20    	mov.w     #0x57, w1
    2e82:	23 74 20    	mov.w     #0x742, w3
    2e84:	80 49 78    	mov.b     w0, [w3]
    2e86:	81 49 78    	mov.b     w1, [w3]
    2e88:	82 49 78    	mov.b     w2, [w3]
    2e8a:	0a 00 37    	bra       0x2ea0 <.L51>

00002e8c <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    2e8c:	1e 00 78    	mov.w     [w14], w0
    2e8e:	f0 08 90    	mov.w     [w0+30], w1
    2e90:	3e 00 90    	mov.w     [w14+6], w0
    2e92:	80 8f 50    	sub.w     w1, w0, [w15]
    2e94:	1f 01 3a    	bra       NZ, 0x30d4 <.L79>
    2e96:	1e 00 78    	mov.w     [w14], w0
    2e98:	80 10 90    	mov.w     [w0+32], w1
    2e9a:	4e 00 90    	mov.w     [w14+8], w0
    2e9c:	80 8f 50    	sub.w     w1, w0, [w15]
    2e9e:	1c 01 3a    	bra       NZ, 0x30d8 <.L80>

00002ea0 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    2ea0:	1e 00 78    	mov.w     [w14], w0
    2ea2:	10 00 78    	mov.w     [w0], w0
    2ea4:	01 20 20    	mov.w     #0x200, w1
    2ea6:	01 08 78    	mov.w     w1, [w0]
    2ea8:	06 00 37    	bra       0x2eb6 <.L53>

00002eaa <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    2eaa:	3e 00 90    	mov.w     [w14+6], w0
    2eac:	00 00 e0    	cp0.w     w0
    2eae:	16 01 3a    	bra       NZ, 0x30dc <.L81>
    2eb0:	4e 00 90    	mov.w     [w14+8], w0
    2eb2:	00 00 e0    	cp0.w     w0
    2eb4:	15 01 3a    	bra       NZ, 0x30e0 <.L82>

00002eb6 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2eb6:	18 c0 b3    	mov.b     #0x1, w8
    2eb8:	02 40 22    	mov.w     #0x2400, w2
    2eba:	43 a7 24    	mov.w     #0x4a74, w3
    2ebc:	5e 00 90    	mov.w     [w14+10], w0
    2ebe:	ee 00 90    	mov.w     [w14+12], w1
    2ec0:	81 f2 07    	rcall     0x13c4 <___gesf2>
    2ec2:	00 00 e0    	cp0.w     w0
    2ec4:	01 00 3c    	bra       GT, 0x2ec8 <.L55>
    2ec6:	00 44 eb    	clr.b     w8

00002ec8 <.L55>:
    2ec8:	08 04 e0    	cp0.b     w8
    2eca:	04 00 32    	bra       Z, 0x2ed4 <.L56>

00002ecc <.LSM177>:
        baudrate = FCY/4.;
    2ecc:	00 40 22    	mov.w     #0x2400, w0
    2ece:	41 a7 24    	mov.w     #0x4a74, w1
    2ed0:	50 07 98    	mov.w     w0, [w14+10]
    2ed2:	61 07 98    	mov.w     w1, [w14+12]

00002ed4 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    2ed4:	18 c0 b3    	mov.b     #0x1, w8
    2ed6:	02 40 22    	mov.w     #0x2400, w2
    2ed8:	43 17 24    	mov.w     #0x4174, w3
    2eda:	5e 00 90    	mov.w     [w14+10], w0
    2edc:	ee 00 90    	mov.w     [w14+12], w1
    2ede:	70 f2 07    	rcall     0x13c0 <___eqsf2>
    2ee0:	00 00 e0    	cp0.w     w0
    2ee2:	01 00 35    	bra       LT, 0x2ee6 <.L57>
    2ee4:	00 44 eb    	clr.b     w8

00002ee6 <.L57>:
    2ee6:	08 04 e0    	cp0.b     w8
    2ee8:	04 00 32    	bra       Z, 0x2ef2 <.L58>

00002eea <.LSM179>:
        baudrate = FCY/(16.*65536.);
    2eea:	00 40 22    	mov.w     #0x2400, w0
    2eec:	41 17 24    	mov.w     #0x4174, w1
    2eee:	50 07 98    	mov.w     w0, [w14+10]
    2ef0:	61 07 98    	mov.w     w1, [w14+12]

00002ef2 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2ef2:	18 c0 b3    	mov.b     #0x1, w8
    2ef4:	02 40 22    	mov.w     #0x2400, w2
    2ef6:	43 27 24    	mov.w     #0x4274, w3
    2ef8:	5e 00 90    	mov.w     [w14+10], w0
    2efa:	ee 00 90    	mov.w     [w14+12], w1
    2efc:	61 f2 07    	rcall     0x13c0 <___eqsf2>
    2efe:	00 00 e0    	cp0.w     w0
    2f00:	01 00 34    	bra       LE, 0x2f04 <.L59>
    2f02:	00 44 eb    	clr.b     w8

00002f04 <.L59>:
    2f04:	08 04 e0    	cp0.b     w8
    2f06:	0f 00 32    	bra       Z, 0x2f26 <.L60>

00002f08 <.LSM181>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    2f08:	1e 00 78    	mov.w     [w14], w0
    2f0a:	40 04 90    	mov.w     [w0+8], w8
    2f0c:	5e 01 90    	mov.w     [w14+10], w2
    2f0e:	ee 01 90    	mov.w     [w14+12], w3
    2f10:	00 40 22    	mov.w     #0x2400, w0
    2f12:	41 97 24    	mov.w     #0x4974, w1
    2f14:	13 f2 07    	rcall     0x133c <___divsf3>
    2f16:	02 00 20    	mov.w     #0x0, w2
    2f18:	03 f0 23    	mov.w     #0x3f00, w3
    2f1a:	b3 f1 07    	rcall     0x1282 <___addsf3>
    2f1c:	55 f2 07    	rcall     0x13c8 <___fixunssfsi>
    2f1e:	00 00 78    	mov.w     w0, w0
    2f20:	00 00 e9    	dec.w     w0, w0
    2f22:	00 0c 78    	mov.w     w0, [w8]
    2f24:	15 00 37    	bra       0x2f50 <.L61>

00002f26 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2f26:	1e 00 78    	mov.w     [w14], w0
    2f28:	10 00 78    	mov.w     [w0], w0
    2f2a:	9e 00 78    	mov.w     [w14], w1
    2f2c:	91 00 78    	mov.w     [w1], w1
    2f2e:	91 00 78    	mov.w     [w1], w1
    2f30:	01 30 a0    	bset.w    w1, #0x3
    2f32:	01 08 78    	mov.w     w1, [w0]

00002f34 <.LSM183>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2f34:	1e 00 78    	mov.w     [w14], w0
    2f36:	40 04 90    	mov.w     [w0+8], w8
    2f38:	5e 01 90    	mov.w     [w14+10], w2
    2f3a:	ee 01 90    	mov.w     [w14+12], w3
    2f3c:	00 40 22    	mov.w     #0x2400, w0
    2f3e:	41 a7 24    	mov.w     #0x4a74, w1
    2f40:	fd f1 07    	rcall     0x133c <___divsf3>
    2f42:	02 00 20    	mov.w     #0x0, w2
    2f44:	03 f0 23    	mov.w     #0x3f00, w3
    2f46:	9d f1 07    	rcall     0x1282 <___addsf3>
    2f48:	3f f2 07    	rcall     0x13c8 <___fixunssfsi>
    2f4a:	00 00 78    	mov.w     w0, w0
    2f4c:	00 00 e9    	dec.w     w0, w0
    2f4e:	00 0c 78    	mov.w     w0, [w8]

00002f50 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2f50:	ee 48 90    	mov.b     [w14+14], w1
    2f52:	50 c4 b3    	mov.b     #0x45, w0
    2f54:	80 cf 50    	sub.b     w1, w0, [w15]
    2f56:	04 00 32    	bra       Z, 0x2f60 <.L62>
    2f58:	ee 48 90    	mov.b     [w14+14], w1
    2f5a:	50 c6 b3    	mov.b     #0x65, w0
    2f5c:	80 cf 50    	sub.b     w1, w0, [w15]
    2f5e:	08 00 3a    	bra       NZ, 0x2f70 <.L63>

00002f60 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2f60:	1e 00 78    	mov.w     [w14], w0
    2f62:	10 00 78    	mov.w     [w0], w0
    2f64:	9e 00 78    	mov.w     [w14], w1
    2f66:	91 00 78    	mov.w     [w1], w1
    2f68:	91 00 78    	mov.w     [w1], w1
    2f6a:	01 10 a0    	bset.w    w1, #0x1
    2f6c:	01 08 78    	mov.w     w1, [w0]
    2f6e:	18 00 37    	bra       0x2fa0 <.L64>

00002f70 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    2f70:	ee 48 90    	mov.b     [w14+14], w1
    2f72:	f0 c4 b3    	mov.b     #0x4f, w0
    2f74:	80 cf 50    	sub.b     w1, w0, [w15]
    2f76:	04 00 32    	bra       Z, 0x2f80 <.L65>
    2f78:	ee 48 90    	mov.b     [w14+14], w1
    2f7a:	f0 c6 b3    	mov.b     #0x6f, w0
    2f7c:	80 cf 50    	sub.b     w1, w0, [w15]
    2f7e:	08 00 3a    	bra       NZ, 0x2f90 <.L66>

00002f80 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    2f80:	1e 00 78    	mov.w     [w14], w0
    2f82:	10 00 78    	mov.w     [w0], w0
    2f84:	9e 00 78    	mov.w     [w14], w1
    2f86:	91 00 78    	mov.w     [w1], w1
    2f88:	91 00 78    	mov.w     [w1], w1
    2f8a:	01 20 a0    	bset.w    w1, #0x2
    2f8c:	01 08 78    	mov.w     w1, [w0]
    2f8e:	08 00 37    	bra       0x2fa0 <.L64>

00002f90 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    2f90:	ee 48 90    	mov.b     [w14+14], w1
    2f92:	e0 c4 b3    	mov.b     #0x4e, w0
    2f94:	80 cf 50    	sub.b     w1, w0, [w15]
    2f96:	04 00 32    	bra       Z, 0x2fa0 <.L64>
    2f98:	ee 48 90    	mov.b     [w14+14], w1
    2f9a:	e0 c6 b3    	mov.b     #0x6e, w0
    2f9c:	80 cf 50    	sub.b     w1, w0, [w15]
    2f9e:	a2 00 3a    	bra       NZ, 0x30e4 <.L83>

00002fa0 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    2fa0:	4e b8 97    	mov.w     [w14-8], w0
    2fa2:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2fa4:	08 00 3a    	bra       NZ, 0x2fb6 <.L67>

00002fa6 <.LSM190>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2fa6:	1e 00 78    	mov.w     [w14], w0
    2fa8:	10 00 78    	mov.w     [w0], w0
    2faa:	9e 00 78    	mov.w     [w14], w1
    2fac:	91 00 78    	mov.w     [w1], w1
    2fae:	91 00 78    	mov.w     [w1], w1
    2fb0:	01 00 a0    	bset.w    w1, #0x0
    2fb2:	01 08 78    	mov.w     w1, [w0]
    2fb4:	03 00 37    	bra       0x2fbc <.L68>

00002fb6 <.L67>:
    } else if (stopbits!=1) {
    2fb6:	4e b8 97    	mov.w     [w14-8], w0
    2fb8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2fba:	96 00 3a    	bra       NZ, 0x30e8 <.L84>

00002fbc <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    2fbc:	2e b8 97    	mov.w     [w14-12], w0
    2fbe:	00 00 e0    	cp0.w     w0
    2fc0:	04 00 3a    	bra       NZ, 0x2fca <.L69>

00002fc2 <.LSM193>:
        self->putc = __putc_nobuffer;
    2fc2:	1e 00 78    	mov.w     [w14], w0
    2fc4:	61 70 22    	mov.w     #0x2706, w1
    2fc6:	41 18 98    	mov.w     w1, [w0+56]
    2fc8:	36 00 37    	bra       0x3036 <.L70>

00002fca <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2fca:	1e 00 78    	mov.w     [w14], w0
    2fcc:	10 00 90    	mov.w     [w0+2], w0
    2fce:	9e 00 78    	mov.w     [w14], w1
    2fd0:	91 00 90    	mov.w     [w1+2], w1
    2fd2:	11 01 78    	mov.w     [w1], w2
    2fd4:	01 00 22    	mov.w     #0x2000, w1
    2fd6:	82 80 70    	ior.w     w1, w2, w1
    2fd8:	01 08 78    	mov.w     w1, [w0]

00002fda <.LSM195>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2fda:	1e 00 78    	mov.w     [w14], w0
    2fdc:	ae b8 97    	mov.w     [w14-12], w1
    2fde:	11 10 98    	mov.w     w1, [w0+34]

00002fe0 <.LSM196>:
        self->TXbuffer.length = TXbufferlen;
    2fe0:	1e 00 78    	mov.w     [w14], w0
    2fe2:	9e b8 97    	mov.w     [w14-14], w1
    2fe4:	21 10 98    	mov.w     w1, [w0+36]

00002fe6 <.LSM197>:
        self->TXbuffer.head = 0;
    2fe6:	1e 00 78    	mov.w     [w14], w0
    2fe8:	80 00 eb    	clr.w     w1
    2fea:	31 10 98    	mov.w     w1, [w0+38]

00002fec <.LSM198>:
        self->TXbuffer.tail = 0;
    2fec:	1e 00 78    	mov.w     [w14], w0
    2fee:	80 00 eb    	clr.w     w1
    2ff0:	41 10 98    	mov.w     w1, [w0+40]

00002ff2 <.LSM199>:
        self->TXbuffer.count = 0;
    2ff2:	1e 00 78    	mov.w     [w14], w0
    2ff4:	80 00 eb    	clr.w     w1
    2ff6:	51 10 98    	mov.w     w1, [w0+42]

00002ff8 <.LSM200>:
        self->TXthreshold = TXthreshold;
    2ff8:	1e 00 78    	mov.w     [w14], w0
    2ffa:	be b8 97    	mov.w     [w14-10], w1
    2ffc:	31 18 98    	mov.w     w1, [w0+54]

00002ffe <.LSM201>:
        self->putc = __putc_buffer;
    2ffe:	1e 00 78    	mov.w     [w14], w0
    3000:	81 74 22    	mov.w     #0x2748, w1
    3002:	41 18 98    	mov.w     w1, [w0+56]

00003004 <.LSM202>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    3004:	1e 00 78    	mov.w     [w14], w0
    3006:	50 00 90    	mov.w     [w0+10], w0
    3008:	9e 00 78    	mov.w     [w14], w1
    300a:	d1 00 90    	mov.w     [w1+10], w1
    300c:	11 01 78    	mov.w     [w1], w2
    300e:	9e 00 78    	mov.w     [w14], w1
    3010:	e1 48 90    	mov.b     [w1+14], w1
    3012:	81 80 fb    	ze        w1, w1
    3014:	13 00 20    	mov.w     #0x1, w3
    3016:	81 18 dd    	sl.w      w3, w1, w1
    3018:	81 80 ea    	com.w     w1, w1
    301a:	81 00 61    	and.w     w2, w1, w1
    301c:	01 08 78    	mov.w     w1, [w0]

0000301e <.LSM203>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    301e:	1e 00 78    	mov.w     [w14], w0
    3020:	60 00 90    	mov.w     [w0+12], w0
    3022:	9e 00 78    	mov.w     [w14], w1
    3024:	e1 00 90    	mov.w     [w1+12], w1
    3026:	11 01 78    	mov.w     [w1], w2
    3028:	9e 00 78    	mov.w     [w14], w1
    302a:	e1 48 90    	mov.b     [w1+14], w1
    302c:	81 80 fb    	ze        w1, w1
    302e:	13 00 20    	mov.w     #0x1, w3
    3030:	81 18 dd    	sl.w      w3, w1, w1
    3032:	82 80 70    	ior.w     w1, w2, w1
    3034:	01 08 78    	mov.w     w1, [w0]

00003036 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    3036:	0e b8 97    	mov.w     [w14-16], w0
    3038:	00 00 e0    	cp0.w     w0
    303a:	04 00 3a    	bra       NZ, 0x3044 <.L71>

0000303c <.LSM205>:
        self->getc = __getc_nobuffer;
    303c:	1e 00 78    	mov.w     [w14], w0
    303e:	a1 72 22    	mov.w     #0x272a, w1
    3040:	51 18 98    	mov.w     w1, [w0+58]
    3042:	2b 00 37    	bra       0x309a <.L72>

00003044 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    3044:	1e 00 78    	mov.w     [w14], w0
    3046:	8e b8 97    	mov.w     [w14-16], w1
    3048:	61 10 98    	mov.w     w1, [w0+44]

0000304a <.LSM207>:
        self->RXbuffer.length = RXbufferlen;
    304a:	1e 00 78    	mov.w     [w14], w0
    304c:	fe b0 97    	mov.w     [w14-18], w1
    304e:	71 10 98    	mov.w     w1, [w0+46]

00003050 <.LSM208>:
        self->RXbuffer.head = 0;
    3050:	1e 00 78    	mov.w     [w14], w0
    3052:	80 00 eb    	clr.w     w1
    3054:	01 18 98    	mov.w     w1, [w0+48]

00003056 <.LSM209>:
        self->RXbuffer.tail = 0;
    3056:	1e 00 78    	mov.w     [w14], w0
    3058:	80 00 eb    	clr.w     w1
    305a:	11 18 98    	mov.w     w1, [w0+50]

0000305c <.LSM210>:
        self->RXbuffer.count = 0;
    305c:	1e 00 78    	mov.w     [w14], w0
    305e:	80 00 eb    	clr.w     w1
    3060:	21 18 98    	mov.w     w1, [w0+52]

00003062 <.LSM211>:
        self->getc = __getc_buffer;
    3062:	1e 00 78    	mov.w     [w14], w0
    3064:	01 84 22    	mov.w     #0x2840, w1
    3066:	51 18 98    	mov.w     w1, [w0+58]

00003068 <.LSM212>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    3068:	1e 00 78    	mov.w     [w14], w0
    306a:	50 00 90    	mov.w     [w0+10], w0
    306c:	9e 00 78    	mov.w     [w14], w1
    306e:	d1 00 90    	mov.w     [w1+10], w1
    3070:	11 01 78    	mov.w     [w1], w2
    3072:	9e 00 78    	mov.w     [w14], w1
    3074:	f1 48 90    	mov.b     [w1+15], w1
    3076:	81 80 fb    	ze        w1, w1
    3078:	13 00 20    	mov.w     #0x1, w3
    307a:	81 18 dd    	sl.w      w3, w1, w1
    307c:	81 80 ea    	com.w     w1, w1
    307e:	81 00 61    	and.w     w2, w1, w1
    3080:	01 08 78    	mov.w     w1, [w0]

00003082 <.LSM213>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    3082:	1e 00 78    	mov.w     [w14], w0
    3084:	60 00 90    	mov.w     [w0+12], w0
    3086:	9e 00 78    	mov.w     [w14], w1
    3088:	e1 00 90    	mov.w     [w1+12], w1
    308a:	11 01 78    	mov.w     [w1], w2
    308c:	9e 00 78    	mov.w     [w14], w1
    308e:	f1 48 90    	mov.b     [w1+15], w1
    3090:	81 80 fb    	ze        w1, w1
    3092:	13 00 20    	mov.w     #0x1, w3
    3094:	81 18 dd    	sl.w      w3, w1, w1
    3096:	82 80 70    	ior.w     w1, w2, w1
    3098:	01 08 78    	mov.w     w1, [w0]

0000309a <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    309a:	1e 00 78    	mov.w     [w14], w0
    309c:	10 00 78    	mov.w     [w0], w0
    309e:	9e 00 78    	mov.w     [w14], w1
    30a0:	91 00 78    	mov.w     [w1], w1
    30a2:	11 01 78    	mov.w     [w1], w2
    30a4:	01 00 28    	mov.w     #0x8000, w1
    30a6:	82 80 70    	ior.w     w1, w2, w1
    30a8:	01 08 78    	mov.w     w1, [w0]

000030aa <.LSM215>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    30aa:	1e 00 78    	mov.w     [w14], w0
    30ac:	10 00 90    	mov.w     [w0+2], w0
    30ae:	9e 00 78    	mov.w     [w14], w1
    30b0:	91 00 90    	mov.w     [w1+2], w1
    30b2:	11 01 78    	mov.w     [w1], w2
    30b4:	01 40 20    	mov.w     #0x400, w1
    30b6:	82 80 70    	ior.w     w1, w2, w1
    30b8:	01 08 78    	mov.w     w1, [w0]
    30ba:	17 00 37    	bra       0x30ea <.L40>

000030bc <.L73>:
    30bc:	00 00 00    	nop       
    30be:	15 00 37    	bra       0x30ea <.L40>

000030c0 <.L74>:
    30c0:	00 00 00    	nop       
    30c2:	13 00 37    	bra       0x30ea <.L40>

000030c4 <.L75>:
    30c4:	00 00 00    	nop       
    30c6:	11 00 37    	bra       0x30ea <.L40>

000030c8 <.L76>:
    30c8:	00 00 00    	nop       
    30ca:	0f 00 37    	bra       0x30ea <.L40>

000030cc <.L77>:
    30cc:	00 00 00    	nop       
    30ce:	0d 00 37    	bra       0x30ea <.L40>

000030d0 <.L78>:
    30d0:	00 00 00    	nop       
    30d2:	0b 00 37    	bra       0x30ea <.L40>

000030d4 <.L79>:
    30d4:	00 00 00    	nop       
    30d6:	09 00 37    	bra       0x30ea <.L40>

000030d8 <.L80>:
    30d8:	00 00 00    	nop       
    30da:	07 00 37    	bra       0x30ea <.L40>

000030dc <.L81>:
    30dc:	00 00 00    	nop       
    30de:	05 00 37    	bra       0x30ea <.L40>

000030e0 <.L82>:
    30e0:	00 00 00    	nop       
    30e2:	03 00 37    	bra       0x30ea <.L40>

000030e4 <.L83>:
    30e4:	00 00 00    	nop       
    30e6:	01 00 37    	bra       0x30ea <.L40>

000030e8 <.L84>:
    30e8:	00 00 00    	nop       

000030ea <.L40>:
}
    30ea:	4f 04 78    	mov.w     [--w15], w8
    30ec:	00 80 fa    	ulnk      
    30ee:	00 00 06    	return    

000030f0 <_uart_close>:

void uart_close(_UART *self) {
    30f0:	02 00 fa    	lnk       #0x2
    30f2:	00 0f 78    	mov.w     w0, [w14]

000030f4 <.LSM225>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    30f4:	1e 00 78    	mov.w     [w14], w0
    30f6:	10 00 90    	mov.w     [w0+2], w0
    30f8:	9e 00 78    	mov.w     [w14], w1
    30fa:	91 00 90    	mov.w     [w1+2], w1
    30fc:	11 01 78    	mov.w     [w1], w2
    30fe:	f1 bf 2f    	mov.w     #0xfbff, w1
    3100:	81 00 61    	and.w     w2, w1, w1
    3102:	01 08 78    	mov.w     w1, [w0]

00003104 <.LSM226>:
    *(self->UxMODE) = 0;        // Disable UART module
    3104:	1e 00 78    	mov.w     [w14], w0
    3106:	10 00 78    	mov.w     [w0], w0
    3108:	80 00 eb    	clr.w     w1
    310a:	01 08 78    	mov.w     w1, [w0]

0000310c <.LSM227>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    310c:	1e 00 78    	mov.w     [w14], w0
    310e:	60 00 90    	mov.w     [w0+12], w0
    3110:	9e 00 78    	mov.w     [w14], w1
    3112:	e1 00 90    	mov.w     [w1+12], w1
    3114:	11 01 78    	mov.w     [w1], w2
    3116:	9e 00 78    	mov.w     [w14], w1
    3118:	e1 48 90    	mov.b     [w1+14], w1
    311a:	81 80 fb    	ze        w1, w1
    311c:	13 00 20    	mov.w     #0x1, w3
    311e:	81 18 dd    	sl.w      w3, w1, w1
    3120:	81 80 ea    	com.w     w1, w1
    3122:	81 00 61    	and.w     w2, w1, w1
    3124:	01 08 78    	mov.w     w1, [w0]

00003126 <.LSM228>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    3126:	1e 00 78    	mov.w     [w14], w0
    3128:	60 00 90    	mov.w     [w0+12], w0
    312a:	9e 00 78    	mov.w     [w14], w1
    312c:	e1 00 90    	mov.w     [w1+12], w1
    312e:	11 01 78    	mov.w     [w1], w2
    3130:	9e 00 78    	mov.w     [w14], w1
    3132:	f1 48 90    	mov.b     [w1+15], w1
    3134:	81 80 fb    	ze        w1, w1
    3136:	13 00 20    	mov.w     #0x1, w3
    3138:	81 18 dd    	sl.w      w3, w1, w1
    313a:	81 80 ea    	com.w     w1, w1
    313c:	81 00 61    	and.w     w2, w1, w1
    313e:	01 08 78    	mov.w     w1, [w0]

00003140 <.LSM229>:
    self->putc = NULL;
    3140:	1e 00 78    	mov.w     [w14], w0
    3142:	80 00 eb    	clr.w     w1
    3144:	41 18 98    	mov.w     w1, [w0+56]

00003146 <.LSM230>:
    self->getc = NULL;
    3146:	1e 00 78    	mov.w     [w14], w0
    3148:	80 00 eb    	clr.w     w1
    314a:	51 18 98    	mov.w     w1, [w0+58]

0000314c <.LSM231>:
    if (self->TX) {
    314c:	1e 00 78    	mov.w     [w14], w0
    314e:	50 08 90    	mov.w     [w0+26], w0
    3150:	00 00 e0    	cp0.w     w0
    3152:	2f 00 32    	bra       Z, 0x31b2 <.L86>

00003154 <.LSM232>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3154:	11 3a 80    	mov.w     0x742, w1
    3156:	f0 0b 20    	mov.w     #0xbf, w0
    3158:	00 81 60    	and.w     w1, w0, w2
    315a:	60 04 20    	mov.w     #0x46, w0
    315c:	71 05 20    	mov.w     #0x57, w1
    315e:	23 74 20    	mov.w     #0x742, w3
    3160:	80 49 78    	mov.b     w0, [w3]
    3162:	81 49 78    	mov.b     w1, [w3]
    3164:	82 49 78    	mov.b     w2, [w3]

00003166 <.LSM233>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    3166:	1e 00 78    	mov.w     [w14], w0
    3168:	50 08 90    	mov.w     [w0+26], w0
    316a:	70 00 90    	mov.w     [w0+14], w0
    316c:	9e 00 78    	mov.w     [w14], w1
    316e:	d1 08 90    	mov.w     [w1+26], w1
    3170:	f1 00 90    	mov.w     [w1+14], w1
    3172:	11 01 78    	mov.w     [w1], w2
    3174:	9e 00 78    	mov.w     [w14], w1
    3176:	d1 08 90    	mov.w     [w1+26], w1
    3178:	a1 48 90    	mov.b     [w1+10], w1
    317a:	81 80 fb    	ze        w1, w1
    317c:	f3 03 20    	mov.w     #0x3f, w3
    317e:	81 18 dd    	sl.w      w3, w1, w1
    3180:	81 80 ea    	com.w     w1, w1
    3182:	81 00 61    	and.w     w2, w1, w1
    3184:	01 08 78    	mov.w     w1, [w0]

00003186 <.LSM234>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3186:	11 3a 80    	mov.w     0x742, w1
    3188:	00 04 20    	mov.w     #0x40, w0
    318a:	01 01 70    	ior.w     w0, w1, w2
    318c:	60 04 20    	mov.w     #0x46, w0
    318e:	71 05 20    	mov.w     #0x57, w1
    3190:	23 74 20    	mov.w     #0x742, w3
    3192:	80 49 78    	mov.b     w0, [w3]
    3194:	81 49 78    	mov.b     w1, [w3]
    3196:	82 49 78    	mov.b     w2, [w3]

00003198 <.LSM235>:
        self->TX->owner = NULL;
    3198:	1e 00 78    	mov.w     [w14], w0
    319a:	50 08 90    	mov.w     [w0+26], w0
    319c:	80 00 eb    	clr.w     w1
    319e:	01 08 98    	mov.w     w1, [w0+16]

000031a0 <.LSM236>:
        pin_digitalOut(self->TX);
    31a0:	1e 00 78    	mov.w     [w14], w0
    31a2:	50 08 90    	mov.w     [w0+26], w0
    31a4:	95 05 07    	rcall     0x3cd0 <_pin_digitalOut>

000031a6 <.LSM237>:
        pin_set(self->TX);
    31a6:	1e 00 78    	mov.w     [w14], w0
    31a8:	50 08 90    	mov.w     [w0+26], w0
    31aa:	ef 05 07    	rcall     0x3d8a <_pin_set>

000031ac <.LSM238>:
        self->TX = NULL;
    31ac:	1e 00 78    	mov.w     [w14], w0
    31ae:	80 00 eb    	clr.w     w1
    31b0:	51 08 98    	mov.w     w1, [w0+26]

000031b2 <.L86>:
    }
    if (self->RX) {
    31b2:	1e 00 78    	mov.w     [w14], w0
    31b4:	60 08 90    	mov.w     [w0+28], w0
    31b6:	00 00 e0    	cp0.w     w0
    31b8:	28 00 32    	bra       Z, 0x320a <.L87>

000031ba <.LSM240>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    31ba:	11 3a 80    	mov.w     0x742, w1
    31bc:	f0 0b 20    	mov.w     #0xbf, w0
    31be:	00 81 60    	and.w     w1, w0, w2
    31c0:	60 04 20    	mov.w     #0x46, w0
    31c2:	71 05 20    	mov.w     #0x57, w1
    31c4:	23 74 20    	mov.w     #0x742, w3
    31c6:	80 49 78    	mov.b     w0, [w3]
    31c8:	81 49 78    	mov.b     w1, [w3]
    31ca:	82 49 78    	mov.b     w2, [w3]

000031cc <.LSM241>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    31cc:	1e 00 78    	mov.w     [w14], w0
    31ce:	00 08 90    	mov.w     [w0+16], w0
    31d0:	9e 00 78    	mov.w     [w14], w1
    31d2:	81 08 90    	mov.w     [w1+16], w1
    31d4:	11 01 78    	mov.w     [w1], w2
    31d6:	9e 00 78    	mov.w     [w14], w1
    31d8:	c1 50 90    	mov.b     [w1+20], w1
    31da:	81 80 fb    	ze        w1, w1
    31dc:	f3 03 20    	mov.w     #0x3f, w3
    31de:	81 18 dd    	sl.w      w3, w1, w1
    31e0:	82 80 70    	ior.w     w1, w2, w1
    31e2:	01 08 78    	mov.w     w1, [w0]

000031e4 <.LSM242>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    31e4:	11 3a 80    	mov.w     0x742, w1
    31e6:	00 04 20    	mov.w     #0x40, w0
    31e8:	01 01 70    	ior.w     w0, w1, w2
    31ea:	60 04 20    	mov.w     #0x46, w0
    31ec:	71 05 20    	mov.w     #0x57, w1
    31ee:	23 74 20    	mov.w     #0x742, w3
    31f0:	80 49 78    	mov.b     w0, [w3]
    31f2:	81 49 78    	mov.b     w1, [w3]
    31f4:	82 49 78    	mov.b     w2, [w3]

000031f6 <.LSM243>:
        self->RX->owner = NULL;
    31f6:	1e 00 78    	mov.w     [w14], w0
    31f8:	60 08 90    	mov.w     [w0+28], w0
    31fa:	80 00 eb    	clr.w     w1
    31fc:	01 08 98    	mov.w     w1, [w0+16]

000031fe <.LSM244>:
        pin_digitalIn(self->RX);
    31fe:	1e 00 78    	mov.w     [w14], w0
    3200:	60 08 90    	mov.w     [w0+28], w0
    3202:	3f 05 07    	rcall     0x3c82 <_pin_digitalIn>

00003204 <.LSM245>:
        self->RX = NULL;
    3204:	1e 00 78    	mov.w     [w14], w0
    3206:	80 00 eb    	clr.w     w1
    3208:	61 08 98    	mov.w     w1, [w0+28]

0000320a <.L87>:
    }
    if (self->RTS) {
    320a:	1e 00 78    	mov.w     [w14], w0
    320c:	70 08 90    	mov.w     [w0+30], w0
    320e:	00 00 e0    	cp0.w     w0
    3210:	2f 00 32    	bra       Z, 0x3270 <.L88>

00003212 <.LSM247>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3212:	11 3a 80    	mov.w     0x742, w1
    3214:	f0 0b 20    	mov.w     #0xbf, w0
    3216:	00 81 60    	and.w     w1, w0, w2
    3218:	60 04 20    	mov.w     #0x46, w0
    321a:	71 05 20    	mov.w     #0x57, w1
    321c:	23 74 20    	mov.w     #0x742, w3
    321e:	80 49 78    	mov.b     w0, [w3]
    3220:	81 49 78    	mov.b     w1, [w3]
    3222:	82 49 78    	mov.b     w2, [w3]

00003224 <.LSM248>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    3224:	1e 00 78    	mov.w     [w14], w0
    3226:	70 08 90    	mov.w     [w0+30], w0
    3228:	70 00 90    	mov.w     [w0+14], w0
    322a:	9e 00 78    	mov.w     [w14], w1
    322c:	f1 08 90    	mov.w     [w1+30], w1
    322e:	f1 00 90    	mov.w     [w1+14], w1
    3230:	11 01 78    	mov.w     [w1], w2
    3232:	9e 00 78    	mov.w     [w14], w1
    3234:	f1 08 90    	mov.w     [w1+30], w1
    3236:	a1 48 90    	mov.b     [w1+10], w1
    3238:	81 80 fb    	ze        w1, w1
    323a:	f3 03 20    	mov.w     #0x3f, w3
    323c:	81 18 dd    	sl.w      w3, w1, w1
    323e:	81 80 ea    	com.w     w1, w1
    3240:	81 00 61    	and.w     w2, w1, w1
    3242:	01 08 78    	mov.w     w1, [w0]

00003244 <.LSM249>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3244:	11 3a 80    	mov.w     0x742, w1
    3246:	00 04 20    	mov.w     #0x40, w0
    3248:	01 01 70    	ior.w     w0, w1, w2
    324a:	60 04 20    	mov.w     #0x46, w0
    324c:	71 05 20    	mov.w     #0x57, w1
    324e:	23 74 20    	mov.w     #0x742, w3
    3250:	80 49 78    	mov.b     w0, [w3]
    3252:	81 49 78    	mov.b     w1, [w3]
    3254:	82 49 78    	mov.b     w2, [w3]

00003256 <.LSM250>:
        self->RTS->owner = NULL;
    3256:	1e 00 78    	mov.w     [w14], w0
    3258:	70 08 90    	mov.w     [w0+30], w0
    325a:	80 00 eb    	clr.w     w1
    325c:	01 08 98    	mov.w     w1, [w0+16]

0000325e <.LSM251>:
        pin_digitalOut(self->RTS);
    325e:	1e 00 78    	mov.w     [w14], w0
    3260:	70 08 90    	mov.w     [w0+30], w0
    3262:	36 05 07    	rcall     0x3cd0 <_pin_digitalOut>

00003264 <.LSM252>:
        pin_set(self->RTS);
    3264:	1e 00 78    	mov.w     [w14], w0
    3266:	70 08 90    	mov.w     [w0+30], w0
    3268:	90 05 07    	rcall     0x3d8a <_pin_set>

0000326a <.LSM253>:
        self->RTS = NULL;
    326a:	1e 00 78    	mov.w     [w14], w0
    326c:	80 00 eb    	clr.w     w1
    326e:	71 08 98    	mov.w     w1, [w0+30]

00003270 <.L88>:
    }
    if (self->CTS) {
    3270:	1e 00 78    	mov.w     [w14], w0
    3272:	00 10 90    	mov.w     [w0+32], w0
    3274:	00 00 e0    	cp0.w     w0
    3276:	28 00 32    	bra       Z, 0x32c8 <.L85>

00003278 <.LSM255>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3278:	11 3a 80    	mov.w     0x742, w1
    327a:	f0 0b 20    	mov.w     #0xbf, w0
    327c:	00 81 60    	and.w     w1, w0, w2
    327e:	60 04 20    	mov.w     #0x46, w0
    3280:	71 05 20    	mov.w     #0x57, w1
    3282:	23 74 20    	mov.w     #0x742, w3
    3284:	80 49 78    	mov.b     w0, [w3]
    3286:	81 49 78    	mov.b     w1, [w3]
    3288:	82 49 78    	mov.b     w2, [w3]

0000328a <.LSM256>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    328a:	1e 00 78    	mov.w     [w14], w0
    328c:	10 08 90    	mov.w     [w0+18], w0
    328e:	9e 00 78    	mov.w     [w14], w1
    3290:	91 08 90    	mov.w     [w1+18], w1
    3292:	11 01 78    	mov.w     [w1], w2
    3294:	9e 00 78    	mov.w     [w14], w1
    3296:	d1 50 90    	mov.b     [w1+21], w1
    3298:	81 80 fb    	ze        w1, w1
    329a:	f3 03 20    	mov.w     #0x3f, w3
    329c:	81 18 dd    	sl.w      w3, w1, w1
    329e:	82 80 70    	ior.w     w1, w2, w1
    32a0:	01 08 78    	mov.w     w1, [w0]

000032a2 <.LSM257>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    32a2:	11 3a 80    	mov.w     0x742, w1
    32a4:	00 04 20    	mov.w     #0x40, w0
    32a6:	01 01 70    	ior.w     w0, w1, w2
    32a8:	60 04 20    	mov.w     #0x46, w0
    32aa:	71 05 20    	mov.w     #0x57, w1
    32ac:	23 74 20    	mov.w     #0x742, w3
    32ae:	80 49 78    	mov.b     w0, [w3]
    32b0:	81 49 78    	mov.b     w1, [w3]
    32b2:	82 49 78    	mov.b     w2, [w3]

000032b4 <.LSM258>:
        self->CTS->owner = NULL;
    32b4:	1e 00 78    	mov.w     [w14], w0
    32b6:	00 10 90    	mov.w     [w0+32], w0
    32b8:	80 00 eb    	clr.w     w1
    32ba:	01 08 98    	mov.w     w1, [w0+16]

000032bc <.LSM259>:
        pin_digitalIn(self->CTS);
    32bc:	1e 00 78    	mov.w     [w14], w0
    32be:	00 10 90    	mov.w     [w0+32], w0
    32c0:	e0 04 07    	rcall     0x3c82 <_pin_digitalIn>

000032c2 <.LSM260>:
        self->CTS = NULL;
    32c2:	1e 00 78    	mov.w     [w14], w0
    32c4:	80 00 eb    	clr.w     w1
    32c6:	01 10 98    	mov.w     w1, [w0+32]

000032c8 <.L85>:
    }
}
    32c8:	00 80 fa    	ulnk      
    32ca:	00 00 06    	return    

000032cc <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    32cc:	04 00 fa    	lnk       #0x4
    32ce:	00 0f 78    	mov.w     w0, [w14]
    32d0:	21 47 98    	mov.b     w1, [w14+2]

000032d2 <.LSM263>:
    if (self->putc)
    32d2:	1e 00 78    	mov.w     [w14], w0
    32d4:	40 18 90    	mov.w     [w0+56], w0
    32d6:	00 00 e0    	cp0.w     w0
    32d8:	05 00 32    	bra       Z, 0x32e4 <.L90>

000032da <.LSM264>:
        self->putc(self, ch);
    32da:	1e 00 78    	mov.w     [w14], w0
    32dc:	40 19 90    	mov.w     [w0+56], w2
    32de:	ae 40 90    	mov.b     [w14+2], w1
    32e0:	1e 00 78    	mov.w     [w14], w0
    32e2:	02 00 01    	call      w2

000032e4 <.L90>:
}
    32e4:	00 80 fa    	ulnk      
    32e6:	00 00 06    	return    

000032e8 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    32e8:	02 00 fa    	lnk       #0x2
    32ea:	00 0f 78    	mov.w     w0, [w14]

000032ec <.LSM267>:
    if (self->getc)
    32ec:	1e 00 78    	mov.w     [w14], w0
    32ee:	50 18 90    	mov.w     [w0+58], w0
    32f0:	00 00 e0    	cp0.w     w0
    32f2:	05 00 32    	bra       Z, 0x32fe <.L93>

000032f4 <.LSM268>:
        return self->getc(self);
    32f4:	1e 00 78    	mov.w     [w14], w0
    32f6:	d0 18 90    	mov.w     [w0+58], w1
    32f8:	1e 00 78    	mov.w     [w14], w0
    32fa:	01 00 01    	call      w1
    32fc:	01 00 37    	bra       0x3300 <.L94>

000032fe <.L93>:
    else
        return 0xFF;
    32fe:	00 c0 eb    	setm.b    w0

00003300 <.L94>:
}
    3300:	00 80 fa    	ulnk      
    3302:	00 00 06    	return    

00003304 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    3304:	02 00 fa    	lnk       #0x2
    3306:	00 0f 78    	mov.w     w0, [w14]

00003308 <.LSM272>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    3308:	1e 00 78    	mov.w     [w14], w0
    330a:	10 00 90    	mov.w     [w0+2], w0
    330c:	90 00 78    	mov.w     [w0], w1
    330e:	00 40 20    	mov.w     #0x400, w0
    3310:	00 80 60    	and.w     w1, w0, w0
    3312:	00 00 e0    	cp0.w     w0
    3314:	08 00 3a    	bra       NZ, 0x3326 <.L95>

00003316 <.LSM273>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    3316:	1e 00 78    	mov.w     [w14], w0
    3318:	10 00 90    	mov.w     [w0+2], w0
    331a:	9e 00 78    	mov.w     [w14], w1
    331c:	91 00 90    	mov.w     [w1+2], w1
    331e:	11 01 78    	mov.w     [w1], w2
    3320:	01 40 20    	mov.w     #0x400, w1
    3322:	82 80 70    	ior.w     w1, w2, w1
    3324:	01 08 78    	mov.w     w1, [w0]

00003326 <.L95>:
}
    3326:	00 80 fa    	ulnk      
    3328:	00 00 06    	return    

0000332a <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    332a:	04 00 fa    	lnk       #0x4
    332c:	00 0f 78    	mov.w     w0, [w14]
    332e:	11 07 98    	mov.w     w1, [w14+2]

00003330 <.LSM276>:
    while (*str)
    3330:	08 00 37    	bra       0x3342 <.L98>

00003332 <.L99>:
        uart_putc(self, *str++);
    3332:	1e 00 90    	mov.w     [w14+2], w0
    3334:	10 40 78    	mov.b     [w0], w0
    3336:	9e 00 90    	mov.w     [w14+2], w1
    3338:	81 00 e8    	inc.w     w1, w1
    333a:	11 07 98    	mov.w     w1, [w14+2]
    333c:	80 40 78    	mov.b     w0, w1
    333e:	1e 00 78    	mov.w     [w14], w0
    3340:	c5 ff 07    	rcall     0x32cc <_uart_putc>

00003342 <.L98>:
    3342:	1e 00 90    	mov.w     [w14+2], w0
    3344:	10 40 78    	mov.b     [w0], w0
    3346:	00 04 e0    	cp0.b     w0
    3348:	f4 ff 3a    	bra       NZ, 0x3332 <.L99>

0000334a <.LSM279>:
    uart_flushTxBuffer(self);
    334a:	1e 00 78    	mov.w     [w14], w0
    334c:	db ff 07    	rcall     0x3304 <_uart_flushTxBuffer>

0000334e <.LSM280>:
}
    334e:	00 80 fa    	ulnk      
    3350:	00 00 06    	return    

00003352 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    3352:	0a 00 fa    	lnk       #0xa
    3354:	20 07 98    	mov.w     w0, [w14+4]
    3356:	31 07 98    	mov.w     w1, [w14+6]
    3358:	42 07 98    	mov.w     w2, [w14+8]

0000335a <.LSM282>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    335a:	4e 00 90    	mov.w     [w14+8], w0
    335c:	00 00 e0    	cp0.w     w0
    335e:	87 00 32    	bra       Z, 0x346e <.L113>

00003360 <.LSM283>:
        return;

    if (len==1) {
    3360:	4e 00 90    	mov.w     [w14+8], w0
    3362:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3364:	04 00 3a    	bra       NZ, 0x336e <.L103>

00003366 <.LSM284>:
        *str = '\0';
    3366:	3e 00 90    	mov.w     [w14+6], w0
    3368:	80 40 eb    	clr.b     w1
    336a:	01 48 78    	mov.b     w1, [w0]

0000336c <.LSM285>:
        return;
    336c:	81 00 37    	bra       0x3470 <.L100>

0000336e <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    336e:	b1 c1 b3    	mov.b     #0x1b, w1
    3370:	2e 00 90    	mov.w     [w14+4], w0
    3372:	ac ff 07    	rcall     0x32cc <_uart_putc>

00003374 <.LSM287>:
    uart_putc(self, '7');
    3374:	71 c3 b3    	mov.b     #0x37, w1
    3376:	2e 00 90    	mov.w     [w14+4], w0
    3378:	a9 ff 07    	rcall     0x32cc <_uart_putc>

0000337a <.LSM288>:
    uart_flushTxBuffer(self);
    337a:	2e 00 90    	mov.w     [w14+4], w0
    337c:	c3 ff 07    	rcall     0x3304 <_uart_flushTxBuffer>

0000337e <.LSM289>:
    start = str;
    337e:	be 00 90    	mov.w     [w14+6], w1
    3380:	11 07 98    	mov.w     w1, [w14+2]

00003382 <.LSM290>:
    left = len;
    3382:	ce 00 90    	mov.w     [w14+8], w1
    3384:	01 0f 78    	mov.w     w1, [w14]
    3386:	03 00 37    	bra       0x338e <.L112>

00003388 <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    3388:	00 00 00    	nop       
    338a:	01 00 37    	bra       0x338e <.L112>

0000338c <.L115>:
    338c:	00 00 00    	nop       

0000338e <.L112>:
    338e:	2e 00 90    	mov.w     [w14+4], w0
    3390:	ab ff 07    	rcall     0x32e8 <_uart_getc>
    3392:	be 00 90    	mov.w     [w14+6], w1
    3394:	80 48 78    	mov.b     w0, [w1]

00003396 <.LSM293>:
    3396:	3e 00 90    	mov.w     [w14+6], w0
    3398:	10 40 78    	mov.b     [w0], w0
    339a:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    339c:	0c 00 3a    	bra       NZ, 0x33b6 <.L104>

0000339e <.LSM294>:

    *str = '\0';                            // Terminarte the string with null
    339e:	3e 00 90    	mov.w     [w14+6], w0
    33a0:	80 40 eb    	clr.b     w1
    33a2:	01 48 78    	mov.b     w1, [w0]

000033a4 <.LSM295>:
    uart_putc(self, '\n');                  // Send newline and
    33a4:	a1 c0 b3    	mov.b     #0xa, w1
    33a6:	2e 00 90    	mov.w     [w14+4], w0
    33a8:	91 ff 07    	rcall     0x32cc <_uart_putc>

000033aa <.LSM296>:
    uart_putc(self, '\r');                  //   carriage return
    33aa:	d1 c0 b3    	mov.b     #0xd, w1
    33ac:	2e 00 90    	mov.w     [w14+4], w0
    33ae:	8e ff 07    	rcall     0x32cc <_uart_putc>

000033b0 <.LSM297>:
    uart_flushTxBuffer(self);
    33b0:	2e 00 90    	mov.w     [w14+4], w0
    33b2:	a8 ff 07    	rcall     0x3304 <_uart_flushTxBuffer>
    33b4:	5d 00 37    	bra       0x3470 <.L100>

000033b6 <.L104>:
    33b6:	3e 00 90    	mov.w     [w14+6], w0
    33b8:	10 40 78    	mov.b     [w0], w0
    33ba:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    33bc:	16 00 3a    	bra       NZ, 0x33ea <.L105>

000033be <.LSM299>:
    33be:	b1 c1 b3    	mov.b     #0x1b, w1
    33c0:	2e 00 90    	mov.w     [w14+4], w0
    33c2:	84 ff 07    	rcall     0x32cc <_uart_putc>

000033c4 <.LSM300>:
    33c4:	81 c3 b3    	mov.b     #0x38, w1
    33c6:	2e 00 90    	mov.w     [w14+4], w0
    33c8:	81 ff 07    	rcall     0x32cc <_uart_putc>

000033ca <.LSM301>:
    33ca:	b1 c1 b3    	mov.b     #0x1b, w1
    33cc:	2e 00 90    	mov.w     [w14+4], w0
    33ce:	7e ff 07    	rcall     0x32cc <_uart_putc>

000033d0 <.LSM302>:
    33d0:	b1 c5 b3    	mov.b     #0x5b, w1
    33d2:	2e 00 90    	mov.w     [w14+4], w0
    33d4:	7b ff 07    	rcall     0x32cc <_uart_putc>

000033d6 <.LSM303>:
    33d6:	b1 c4 b3    	mov.b     #0x4b, w1
    33d8:	2e 00 90    	mov.w     [w14+4], w0
    33da:	78 ff 07    	rcall     0x32cc <_uart_putc>

000033dc <.LSM304>:
    33dc:	2e 00 90    	mov.w     [w14+4], w0
    33de:	92 ff 07    	rcall     0x3304 <_uart_flushTxBuffer>

000033e0 <.LSM305>:
    33e0:	9e 00 90    	mov.w     [w14+2], w1
    33e2:	31 07 98    	mov.w     w1, [w14+6]

000033e4 <.LSM306>:
    33e4:	ce 00 90    	mov.w     [w14+8], w1
    33e6:	01 0f 78    	mov.w     w1, [w14]

000033e8 <.LSM307>:
    33e8:	41 00 37    	bra       0x346c <.L106>

000033ea <.L105>:
    33ea:	3e 00 90    	mov.w     [w14+6], w0
    33ec:	10 40 78    	mov.b     [w0], w0
    33ee:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    33f0:	05 00 32    	bra       Z, 0x33fc <.L107>

000033f2 <.LSM309>:
    33f2:	3e 00 90    	mov.w     [w14+6], w0
    33f4:	90 40 78    	mov.b     [w0], w1

000033f6 <.LSM310>:
    33f6:	f0 c7 b3    	mov.b     #0x7f, w0
    33f8:	80 cf 50    	sub.b     w1, w0, [w15]
    33fa:	1a 00 3a    	bra       NZ, 0x3430 <.L108>

000033fc <.L107>:
    33fc:	be 00 90    	mov.w     [w14+6], w1
    33fe:	1e 00 90    	mov.w     [w14+2], w0
    3400:	80 8f 50    	sub.w     w1, w0, [w15]
    3402:	10 00 36    	bra       LEU, 0x3424 <.L109>

00003404 <.LSM312>:
    3404:	81 c0 b3    	mov.b     #0x8, w1
    3406:	2e 00 90    	mov.w     [w14+4], w0
    3408:	61 ff 07    	rcall     0x32cc <_uart_putc>

0000340a <.LSM313>:
    340a:	01 c2 b3    	mov.b     #0x20, w1
    340c:	2e 00 90    	mov.w     [w14+4], w0
    340e:	5e ff 07    	rcall     0x32cc <_uart_putc>

00003410 <.LSM314>:
    3410:	81 c0 b3    	mov.b     #0x8, w1
    3412:	2e 00 90    	mov.w     [w14+4], w0
    3414:	5b ff 07    	rcall     0x32cc <_uart_putc>

00003416 <.LSM315>:
    3416:	2e 00 90    	mov.w     [w14+4], w0
    3418:	75 ff 07    	rcall     0x3304 <_uart_flushTxBuffer>

0000341a <.LSM316>:
    341a:	3e 00 90    	mov.w     [w14+6], w0
    341c:	00 00 e9    	dec.w     w0, w0
    341e:	30 07 98    	mov.w     w0, [w14+6]

00003420 <.LSM317>:
    3420:	1e 0f e8    	inc.w     [w14], [w14]
    3422:	05 00 37    	bra       0x342e <.L110>

00003424 <.L109>:
    3424:	71 c0 b3    	mov.b     #0x7, w1
    3426:	2e 00 90    	mov.w     [w14+4], w0
    3428:	51 ff 07    	rcall     0x32cc <_uart_putc>

0000342a <.LSM319>:
    342a:	2e 00 90    	mov.w     [w14+4], w0
    342c:	6b ff 07    	rcall     0x3304 <_uart_flushTxBuffer>

0000342e <.L110>:
    342e:	1e 00 37    	bra       0x346c <.L106>

00003430 <.L108>:
    3430:	1e 00 78    	mov.w     [w14], w0
    3432:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3434:	06 00 3a    	bra       NZ, 0x3442 <.L111>

00003436 <.LSM322>:
    3436:	71 c0 b3    	mov.b     #0x7, w1
    3438:	2e 00 90    	mov.w     [w14+4], w0
    343a:	48 ff 07    	rcall     0x32cc <_uart_putc>

0000343c <.LSM323>:
    343c:	2e 00 90    	mov.w     [w14+4], w0
    343e:	62 ff 07    	rcall     0x3304 <_uart_flushTxBuffer>

00003440 <.LSM324>:
    3440:	15 00 37    	bra       0x346c <.L106>

00003442 <.L111>:
    3442:	3e 00 90    	mov.w     [w14+6], w0
    3444:	10 40 78    	mov.b     [w0], w0
    3446:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    3448:	9f ff 36    	bra       LEU, 0x3388 <.L114>
    344a:	3e 00 90    	mov.w     [w14+6], w0
    344c:	90 40 78    	mov.b     [w0], w1
    344e:	e0 c7 b3    	mov.b     #0x7e, w0
    3450:	80 cf 50    	sub.b     w1, w0, [w15]
    3452:	9c ff 3e    	bra       GTU, 0x338c <.L115>

00003454 <.LSM326>:
    3454:	3e 00 90    	mov.w     [w14+6], w0
    3456:	10 40 78    	mov.b     [w0], w0
    3458:	80 40 78    	mov.b     w0, w1
    345a:	2e 00 90    	mov.w     [w14+4], w0
    345c:	37 ff 07    	rcall     0x32cc <_uart_putc>

0000345e <.LSM327>:
    345e:	2e 00 90    	mov.w     [w14+4], w0
    3460:	51 ff 07    	rcall     0x3304 <_uart_flushTxBuffer>

00003462 <.LSM328>:
    3462:	3e 00 90    	mov.w     [w14+6], w0
    3464:	00 00 e8    	inc.w     w0, w0
    3466:	30 07 98    	mov.w     w0, [w14+6]

00003468 <.LSM329>:
    3468:	1e 0f e9    	dec.w     [w14], [w14]

0000346a <.LSM330>:
    346a:	91 ff 37    	bra       0x338e <.L112>

0000346c <.L106>:
    346c:	90 ff 37    	bra       0x338e <.L112>

0000346e <.L113>:
    346e:	00 00 00    	nop       

00003470 <.L100>:
}
    3470:	00 80 fa    	ulnk      
    3472:	00 00 06    	return    

00003474 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    3474:	02 00 fa    	lnk       #0x2
    3476:	00 0f 78    	mov.w     w0, [w14]

00003478 <.LSM1>:
    timer_lower(self);
    3478:	1e 00 78    	mov.w     [w14], w0
    347a:	01 02 07    	rcall     0x387e <_timer_lower>

0000347c <.LSM2>:
    if (self->every) {
    347c:	1e 00 78    	mov.w     [w14], w0
    347e:	10 08 90    	mov.w     [w0+18], w0
    3480:	00 00 e0    	cp0.w     w0
    3482:	05 00 32    	bra       Z, 0x348e <.L2>

00003484 <.LSM3>:
        self->every(self);
    3484:	1e 00 78    	mov.w     [w14], w0
    3486:	90 08 90    	mov.w     [w0+18], w1
    3488:	1e 00 78    	mov.w     [w14], w0
    348a:	01 00 01    	call      w1
    348c:	1a 00 37    	bra       0x34c2 <.L1>

0000348e <.L2>:
    } else if (self->after) {
    348e:	1e 00 78    	mov.w     [w14], w0
    3490:	20 08 90    	mov.w     [w0+20], w0
    3492:	00 00 e0    	cp0.w     w0
    3494:	14 00 32    	bra       Z, 0x34be <.L4>

00003496 <.LSM5>:
        if (self->aftercount) {
    3496:	1e 00 78    	mov.w     [w14], w0
    3498:	00 08 90    	mov.w     [w0+16], w0
    349a:	00 00 e0    	cp0.w     w0
    349c:	0a 00 32    	bra       Z, 0x34b2 <.L5>

0000349e <.LSM6>:
            self->after(self);
    349e:	1e 00 78    	mov.w     [w14], w0
    34a0:	a0 08 90    	mov.w     [w0+20], w1
    34a2:	1e 00 78    	mov.w     [w14], w0
    34a4:	01 00 01    	call      w1

000034a6 <.LSM7>:
            self->aftercount--;
    34a6:	1e 00 78    	mov.w     [w14], w0
    34a8:	00 08 90    	mov.w     [w0+16], w0
    34aa:	80 00 e9    	dec.w     w0, w1
    34ac:	1e 00 78    	mov.w     [w14], w0
    34ae:	01 08 98    	mov.w     w1, [w0+16]
    34b0:	08 00 37    	bra       0x34c2 <.L1>

000034b2 <.L5>:
        } else {
            timer_disableInterrupt(self);
    34b2:	1e 00 78    	mov.w     [w14], w0
    34b4:	0c 02 07    	rcall     0x38ce <_timer_disableInterrupt>

000034b6 <.LSM9>:
            self->after = NULL;
    34b6:	1e 00 78    	mov.w     [w14], w0
    34b8:	80 00 eb    	clr.w     w1
    34ba:	21 08 98    	mov.w     w1, [w0+20]
    34bc:	02 00 37    	bra       0x34c2 <.L1>

000034be <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    34be:	1e 00 78    	mov.w     [w14], w0
    34c0:	06 02 07    	rcall     0x38ce <_timer_disableInterrupt>

000034c2 <.L1>:
    }
}
    34c2:	00 80 fa    	ulnk      
    34c4:	00 00 06    	return    

000034c6 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    34c6:	36 00 f8    	push      0x36
    34c8:	80 9f be    	mov.d     w0, [w15++]
    34ca:	82 9f be    	mov.d     w2, [w15++]
    34cc:	84 9f be    	mov.d     w4, [w15++]
    34ce:	86 9f be    	mov.d     w6, [w15++]
    34d0:	32 00 f8    	push      0x32
    34d2:	34 00 f8    	push      0x34
    34d4:	10 00 20    	mov.w     #0x1, w0
    34d6:	a0 01 88    	mov.w     w0, 0x34
    34d8:	00 20 20    	mov.w     #0x200, w0
    34da:	90 01 88    	mov.w     w0, 0x32
    34dc:	00 00 fa    	lnk       #0x0

000034de <.LSM13>:
    timer_serviceInterrupt(&timer1);
    34de:	80 43 21    	mov.w     #0x1438, w0
    34e0:	c9 ff 07    	rcall     0x3474 <_timer_serviceInterrupt>

000034e2 <.LSM14>:
}
    34e2:	00 80 fa    	ulnk      
    34e4:	34 00 f9    	pop       0x34
    34e6:	32 00 f9    	pop       0x32
    34e8:	4f 03 be    	mov.d     [--w15], w6
    34ea:	4f 02 be    	mov.d     [--w15], w4
    34ec:	4f 01 be    	mov.d     [--w15], w2
    34ee:	4f 00 be    	mov.d     [--w15], w0
    34f0:	36 00 f9    	pop       0x36
    34f2:	00 40 06    	retfie    

000034f4 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    34f4:	36 00 f8    	push      0x36
    34f6:	80 9f be    	mov.d     w0, [w15++]
    34f8:	82 9f be    	mov.d     w2, [w15++]
    34fa:	84 9f be    	mov.d     w4, [w15++]
    34fc:	86 9f be    	mov.d     w6, [w15++]
    34fe:	32 00 f8    	push      0x32
    3500:	34 00 f8    	push      0x34
    3502:	10 00 20    	mov.w     #0x1, w0
    3504:	a0 01 88    	mov.w     w0, 0x34
    3506:	00 20 20    	mov.w     #0x200, w0
    3508:	90 01 88    	mov.w     w0, 0x32
    350a:	00 00 fa    	lnk       #0x0

0000350c <.LSM16>:
    timer_serviceInterrupt(&timer2);
    350c:	e0 44 21    	mov.w     #0x144e, w0
    350e:	b2 ff 07    	rcall     0x3474 <_timer_serviceInterrupt>

00003510 <.LSM17>:
}
    3510:	00 80 fa    	ulnk      
    3512:	34 00 f9    	pop       0x34
    3514:	32 00 f9    	pop       0x32
    3516:	4f 03 be    	mov.d     [--w15], w6
    3518:	4f 02 be    	mov.d     [--w15], w4
    351a:	4f 01 be    	mov.d     [--w15], w2
    351c:	4f 00 be    	mov.d     [--w15], w0
    351e:	36 00 f9    	pop       0x36
    3520:	00 40 06    	retfie    

00003522 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    3522:	36 00 f8    	push      0x36
    3524:	80 9f be    	mov.d     w0, [w15++]
    3526:	82 9f be    	mov.d     w2, [w15++]
    3528:	84 9f be    	mov.d     w4, [w15++]
    352a:	86 9f be    	mov.d     w6, [w15++]
    352c:	32 00 f8    	push      0x32
    352e:	34 00 f8    	push      0x34
    3530:	10 00 20    	mov.w     #0x1, w0
    3532:	a0 01 88    	mov.w     w0, 0x34
    3534:	00 20 20    	mov.w     #0x200, w0
    3536:	90 01 88    	mov.w     w0, 0x32
    3538:	00 00 fa    	lnk       #0x0

0000353a <.LSM19>:
    timer_serviceInterrupt(&timer3);
    353a:	40 46 21    	mov.w     #0x1464, w0
    353c:	9b ff 07    	rcall     0x3474 <_timer_serviceInterrupt>

0000353e <.LSM20>:
}
    353e:	00 80 fa    	ulnk      
    3540:	34 00 f9    	pop       0x34
    3542:	32 00 f9    	pop       0x32
    3544:	4f 03 be    	mov.d     [--w15], w6
    3546:	4f 02 be    	mov.d     [--w15], w4
    3548:	4f 01 be    	mov.d     [--w15], w2
    354a:	4f 00 be    	mov.d     [--w15], w0
    354c:	36 00 f9    	pop       0x36
    354e:	00 40 06    	retfie    

00003550 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    3550:	36 00 f8    	push      0x36
    3552:	80 9f be    	mov.d     w0, [w15++]
    3554:	82 9f be    	mov.d     w2, [w15++]
    3556:	84 9f be    	mov.d     w4, [w15++]
    3558:	86 9f be    	mov.d     w6, [w15++]
    355a:	32 00 f8    	push      0x32
    355c:	34 00 f8    	push      0x34
    355e:	10 00 20    	mov.w     #0x1, w0
    3560:	a0 01 88    	mov.w     w0, 0x34
    3562:	00 20 20    	mov.w     #0x200, w0
    3564:	90 01 88    	mov.w     w0, 0x32
    3566:	00 00 fa    	lnk       #0x0

00003568 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    3568:	a0 47 21    	mov.w     #0x147a, w0
    356a:	84 ff 07    	rcall     0x3474 <_timer_serviceInterrupt>

0000356c <.LSM23>:
}
    356c:	00 80 fa    	ulnk      
    356e:	34 00 f9    	pop       0x34
    3570:	32 00 f9    	pop       0x32
    3572:	4f 03 be    	mov.d     [--w15], w6
    3574:	4f 02 be    	mov.d     [--w15], w4
    3576:	4f 01 be    	mov.d     [--w15], w2
    3578:	4f 00 be    	mov.d     [--w15], w0
    357a:	36 00 f9    	pop       0x36
    357c:	00 40 06    	retfie    

0000357e <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    357e:	36 00 f8    	push      0x36
    3580:	80 9f be    	mov.d     w0, [w15++]
    3582:	82 9f be    	mov.d     w2, [w15++]
    3584:	84 9f be    	mov.d     w4, [w15++]
    3586:	86 9f be    	mov.d     w6, [w15++]
    3588:	32 00 f8    	push      0x32
    358a:	34 00 f8    	push      0x34
    358c:	10 00 20    	mov.w     #0x1, w0
    358e:	a0 01 88    	mov.w     w0, 0x34
    3590:	00 20 20    	mov.w     #0x200, w0
    3592:	90 01 88    	mov.w     w0, 0x32
    3594:	00 00 fa    	lnk       #0x0

00003596 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    3596:	00 49 21    	mov.w     #0x1490, w0
    3598:	6d ff 07    	rcall     0x3474 <_timer_serviceInterrupt>

0000359a <.LSM26>:
}
    359a:	00 80 fa    	ulnk      
    359c:	34 00 f9    	pop       0x34
    359e:	32 00 f9    	pop       0x32
    35a0:	4f 03 be    	mov.d     [--w15], w6
    35a2:	4f 02 be    	mov.d     [--w15], w4
    35a4:	4f 01 be    	mov.d     [--w15], w2
    35a6:	4f 00 be    	mov.d     [--w15], w0
    35a8:	36 00 f9    	pop       0x36
    35aa:	00 40 06    	retfie    

000035ac <_init_timer>:

void init_timer(void) {
    35ac:	00 00 fa    	lnk       #0x0

000035ae <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    35ae:	b0 00 20    	mov.w     #0xb, w0
    35b0:	80 1f 78    	mov.w     w0, [w15++]
    35b2:	47 00 20    	mov.w     #0x4, w7
    35b4:	36 c0 b3    	mov.b     #0x3, w6
    35b6:	45 09 20    	mov.w     #0x94, w5
    35b8:	44 08 20    	mov.w     #0x84, w4
    35ba:	03 10 20    	mov.w     #0x100, w3
    35bc:	22 10 20    	mov.w     #0x102, w2
    35be:	41 10 20    	mov.w     #0x104, w1
    35c0:	80 43 21    	mov.w     #0x1438, w0
    35c2:	33 00 07    	rcall     0x362a <_timer_init>
    35c4:	8f 87 e9    	dec2.w    w15, w15

000035c6 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    35c6:	c0 00 20    	mov.w     #0xc, w0
    35c8:	80 1f 78    	mov.w     w0, [w15++]
    35ca:	80 03 eb    	clr.w     w7
    35cc:	76 c0 b3    	mov.b     #0x7, w6
    35ce:	45 09 20    	mov.w     #0x94, w5
    35d0:	44 08 20    	mov.w     #0x84, w4
    35d2:	63 10 20    	mov.w     #0x106, w3
    35d4:	c2 10 20    	mov.w     #0x10c, w2
    35d6:	01 11 20    	mov.w     #0x110, w1
    35d8:	e0 44 21    	mov.w     #0x144e, w0
    35da:	27 00 07    	rcall     0x362a <_timer_init>
    35dc:	8f 87 e9    	dec2.w    w15, w15

000035de <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    35de:	d0 00 20    	mov.w     #0xd, w0
    35e0:	80 1f 78    	mov.w     w0, [w15++]
    35e2:	17 00 20    	mov.w     #0x1, w7
    35e4:	86 c0 b3    	mov.b     #0x8, w6
    35e6:	45 09 20    	mov.w     #0x94, w5
    35e8:	44 08 20    	mov.w     #0x84, w4
    35ea:	a3 10 20    	mov.w     #0x10a, w3
    35ec:	e2 10 20    	mov.w     #0x10e, w2
    35ee:	21 11 20    	mov.w     #0x112, w1
    35f0:	40 46 21    	mov.w     #0x1464, w0
    35f2:	1b 00 07    	rcall     0x362a <_timer_init>
    35f4:	8f 87 e9    	dec2.w    w15, w15

000035f6 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    35f6:	e0 00 20    	mov.w     #0xe, w0
    35f8:	80 1f 78    	mov.w     w0, [w15++]
    35fa:	27 00 20    	mov.w     #0x2, w7
    35fc:	b6 c0 b3    	mov.b     #0xb, w6
    35fe:	65 09 20    	mov.w     #0x96, w5
    3600:	64 08 20    	mov.w     #0x86, w4
    3602:	43 11 20    	mov.w     #0x114, w3
    3604:	a2 11 20    	mov.w     #0x11a, w2
    3606:	e1 11 20    	mov.w     #0x11e, w1
    3608:	a0 47 21    	mov.w     #0x147a, w0
    360a:	0f 00 07    	rcall     0x362a <_timer_init>
    360c:	8f 87 e9    	dec2.w    w15, w15

0000360e <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    360e:	f0 00 20    	mov.w     #0xf, w0
    3610:	80 1f 78    	mov.w     w0, [w15++]
    3612:	37 00 20    	mov.w     #0x3, w7
    3614:	c6 c0 b3    	mov.b     #0xc, w6
    3616:	65 09 20    	mov.w     #0x96, w5
    3618:	64 08 20    	mov.w     #0x86, w4
    361a:	83 11 20    	mov.w     #0x118, w3
    361c:	c2 11 20    	mov.w     #0x11c, w2
    361e:	01 12 20    	mov.w     #0x120, w1
    3620:	00 49 21    	mov.w     #0x1490, w0
    3622:	03 00 07    	rcall     0x362a <_timer_init>
    3624:	8f 87 e9    	dec2.w    w15, w15

00003626 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    3626:	00 80 fa    	ulnk      
    3628:	00 00 06    	return    

0000362a <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    362a:	10 00 fa    	lnk       #0x10
    362c:	00 0f 78    	mov.w     w0, [w14]
    362e:	11 07 98    	mov.w     w1, [w14+2]
    3630:	22 07 98    	mov.w     w2, [w14+4]
    3632:	33 07 98    	mov.w     w3, [w14+6]
    3634:	44 07 98    	mov.w     w4, [w14+8]
    3636:	55 07 98    	mov.w     w5, [w14+10]
    3638:	46 4f 98    	mov.b     w6, [w14+12]
    363a:	77 07 98    	mov.w     w7, [w14+14]

0000363c <.LSM35>:
    self->TxCON = TxCON;
    363c:	1e 00 78    	mov.w     [w14], w0
    363e:	9e 00 90    	mov.w     [w14+2], w1
    3640:	01 08 78    	mov.w     w1, [w0]

00003642 <.LSM36>:
    self->PRx = PRx;
    3642:	1e 00 78    	mov.w     [w14], w0
    3644:	ae 00 90    	mov.w     [w14+4], w1
    3646:	11 00 98    	mov.w     w1, [w0+2]

00003648 <.LSM37>:
    self->TMRx = TMRx;
    3648:	1e 00 78    	mov.w     [w14], w0
    364a:	be 00 90    	mov.w     [w14+6], w1
    364c:	21 00 98    	mov.w     w1, [w0+4]

0000364e <.LSM38>:
    self->IFSy = IFSy;
    364e:	1e 00 78    	mov.w     [w14], w0
    3650:	ce 00 90    	mov.w     [w14+8], w1
    3652:	31 00 98    	mov.w     w1, [w0+6]

00003654 <.LSM39>:
    self->IECy = IECy;
    3654:	1e 00 78    	mov.w     [w14], w0
    3656:	de 00 90    	mov.w     [w14+10], w1
    3658:	41 00 98    	mov.w     w1, [w0+8]

0000365a <.LSM40>:
    self->flagbit = flagbit;
    365a:	1e 00 78    	mov.w     [w14], w0
    365c:	ce 48 90    	mov.b     [w14+12], w1
    365e:	21 48 98    	mov.b     w1, [w0+10]

00003660 <.LSM41>:
    self->octselnum = octselnum;
    3660:	1e 00 78    	mov.w     [w14], w0
    3662:	fe 00 90    	mov.w     [w14+14], w1
    3664:	61 00 98    	mov.w     w1, [w0+12]

00003666 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    3666:	1e 00 78    	mov.w     [w14], w0
    3668:	ce b8 97    	mov.w     [w14-8], w1
    366a:	71 00 98    	mov.w     w1, [w0+14]

0000366c <.LSM43>:
    self->aftercount = 0;
    366c:	1e 00 78    	mov.w     [w14], w0
    366e:	80 00 eb    	clr.w     w1
    3670:	01 08 98    	mov.w     w1, [w0+16]

00003672 <.LSM44>:
    self->every = NULL;
    3672:	1e 00 78    	mov.w     [w14], w0
    3674:	80 00 eb    	clr.w     w1
    3676:	11 08 98    	mov.w     w1, [w0+18]

00003678 <.LSM45>:
    self->after = NULL;
    3678:	1e 00 78    	mov.w     [w14], w0
    367a:	80 00 eb    	clr.w     w1
    367c:	21 08 98    	mov.w     w1, [w0+20]

0000367e <.LSM46>:
}
    367e:	00 80 fa    	ulnk      
    3680:	00 00 06    	return    

00003682 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    3682:	06 00 fa    	lnk       #0x6
    3684:	88 1f 78    	mov.w     w8, [w15++]
    3686:	00 0f 78    	mov.w     w0, [w14]
    3688:	12 07 98    	mov.w     w2, [w14+2]
    368a:	23 07 98    	mov.w     w3, [w14+4]

0000368c <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    368c:	18 c0 b3    	mov.b     #0x1, w8
    368e:	d2 7b 23    	mov.w     #0x37bd, w2
    3690:	63 f8 23    	mov.w     #0x3f86, w3
    3692:	1e 00 90    	mov.w     [w14+2], w0
    3694:	ae 00 90    	mov.w     [w14+4], w1
    3696:	96 ee 07    	rcall     0x13c4 <___gesf2>
    3698:	00 00 e0    	cp0.w     w0
    369a:	01 00 3c    	bra       GT, 0x369e <.L14>
    369c:	00 44 eb    	clr.b     w8

0000369e <.L14>:
    369e:	08 04 e0    	cp0.b     w8
    36a0:	69 00 3a    	bra       NZ, 0x3774 <.L23>

000036a2 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    36a2:	18 c0 b3    	mov.b     #0x1, w8
    36a4:	d2 7b 23    	mov.w     #0x37bd, w2
    36a6:	63 e8 23    	mov.w     #0x3e86, w3
    36a8:	1e 00 90    	mov.w     [w14+2], w0
    36aa:	ae 00 90    	mov.w     [w14+4], w1
    36ac:	8b ee 07    	rcall     0x13c4 <___gesf2>
    36ae:	00 00 e0    	cp0.w     w0
    36b0:	01 00 3c    	bra       GT, 0x36b4 <.L17>
    36b2:	00 44 eb    	clr.b     w8

000036b4 <.L17>:
    36b4:	08 04 e0    	cp0.b     w8
    36b6:	12 00 32    	bra       Z, 0x36dc <.L18>

000036b8 <.LSM50>:
        timer_stop(self);
    36b8:	1e 00 78    	mov.w     [w14], w0
    36ba:	c4 00 07    	rcall     0x3844 <_timer_stop>

000036bc <.LSM51>:
        poke(self->TxCON, 0x0030);
    36bc:	1e 00 78    	mov.w     [w14], w0
    36be:	10 00 78    	mov.w     [w0], w0
    36c0:	01 03 20    	mov.w     #0x30, w1
    36c2:	01 08 78    	mov.w     w1, [w0]

000036c4 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    36c4:	1e 00 78    	mov.w     [w14], w0
    36c6:	10 04 90    	mov.w     [w0+2], w8
    36c8:	02 40 22    	mov.w     #0x2400, w2
    36ca:	43 77 24    	mov.w     #0x4774, w3
    36cc:	1e 00 90    	mov.w     [w14+2], w0
    36ce:	ae 00 90    	mov.w     [w14+4], w1
    36d0:	eb ee 07    	rcall     0x14a8 <___mulsf3>
    36d2:	7a ee 07    	rcall     0x13c8 <___fixunssfsi>
    36d4:	00 00 78    	mov.w     w0, w0
    36d6:	00 00 e9    	dec.w     w0, w0
    36d8:	00 0c 78    	mov.w     w0, [w8]
    36da:	4d 00 37    	bra       0x3776 <.L13>

000036dc <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    36dc:	18 c0 b3    	mov.b     #0x1, w8
    36de:	d2 7b 23    	mov.w     #0x37bd, w2
    36e0:	63 d0 23    	mov.w     #0x3d06, w3
    36e2:	1e 00 90    	mov.w     [w14+2], w0
    36e4:	ae 00 90    	mov.w     [w14+4], w1
    36e6:	6e ee 07    	rcall     0x13c4 <___gesf2>
    36e8:	00 00 e0    	cp0.w     w0
    36ea:	01 00 3c    	bra       GT, 0x36ee <.L19>
    36ec:	00 44 eb    	clr.b     w8

000036ee <.L19>:
    36ee:	08 04 e0    	cp0.b     w8
    36f0:	12 00 32    	bra       Z, 0x3716 <.L20>

000036f2 <.LSM54>:
        timer_stop(self);
    36f2:	1e 00 78    	mov.w     [w14], w0
    36f4:	a7 00 07    	rcall     0x3844 <_timer_stop>

000036f6 <.LSM55>:
        poke(self->TxCON, 0x0020);
    36f6:	1e 00 78    	mov.w     [w14], w0
    36f8:	10 00 78    	mov.w     [w0], w0
    36fa:	01 02 20    	mov.w     #0x20, w1
    36fc:	01 08 78    	mov.w     w1, [w0]

000036fe <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    36fe:	1e 00 78    	mov.w     [w14], w0
    3700:	10 04 90    	mov.w     [w0+2], w8
    3702:	02 40 22    	mov.w     #0x2400, w2
    3704:	43 87 24    	mov.w     #0x4874, w3
    3706:	1e 00 90    	mov.w     [w14+2], w0
    3708:	ae 00 90    	mov.w     [w14+4], w1
    370a:	ce ee 07    	rcall     0x14a8 <___mulsf3>
    370c:	5d ee 07    	rcall     0x13c8 <___fixunssfsi>
    370e:	00 00 78    	mov.w     w0, w0
    3710:	00 00 e9    	dec.w     w0, w0
    3712:	00 0c 78    	mov.w     w0, [w8]
    3714:	30 00 37    	bra       0x3776 <.L13>

00003716 <.L20>:
    } else if (period>(65536.*TCY)) {
    3716:	18 c0 b3    	mov.b     #0x1, w8
    3718:	d2 7b 23    	mov.w     #0x37bd, w2
    371a:	63 b8 23    	mov.w     #0x3b86, w3
    371c:	1e 00 90    	mov.w     [w14+2], w0
    371e:	ae 00 90    	mov.w     [w14+4], w1
    3720:	51 ee 07    	rcall     0x13c4 <___gesf2>
    3722:	00 00 e0    	cp0.w     w0
    3724:	01 00 3c    	bra       GT, 0x3728 <.L21>
    3726:	00 44 eb    	clr.b     w8

00003728 <.L21>:
    3728:	08 04 e0    	cp0.b     w8
    372a:	12 00 32    	bra       Z, 0x3750 <.L22>

0000372c <.LSM58>:
        timer_stop(self);
    372c:	1e 00 78    	mov.w     [w14], w0
    372e:	8a 00 07    	rcall     0x3844 <_timer_stop>

00003730 <.LSM59>:
        poke(self->TxCON, 0x0010);
    3730:	1e 00 78    	mov.w     [w14], w0
    3732:	10 00 78    	mov.w     [w0], w0
    3734:	01 01 20    	mov.w     #0x10, w1
    3736:	01 08 78    	mov.w     w1, [w0]

00003738 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3738:	1e 00 78    	mov.w     [w14], w0
    373a:	10 04 90    	mov.w     [w0+2], w8
    373c:	02 40 22    	mov.w     #0x2400, w2
    373e:	43 9f 24    	mov.w     #0x49f4, w3
    3740:	1e 00 90    	mov.w     [w14+2], w0
    3742:	ae 00 90    	mov.w     [w14+4], w1
    3744:	b1 ee 07    	rcall     0x14a8 <___mulsf3>
    3746:	40 ee 07    	rcall     0x13c8 <___fixunssfsi>
    3748:	00 00 78    	mov.w     w0, w0
    374a:	00 00 e9    	dec.w     w0, w0
    374c:	00 0c 78    	mov.w     w0, [w8]
    374e:	13 00 37    	bra       0x3776 <.L13>

00003750 <.L22>:
    } else {
        timer_stop(self);
    3750:	1e 00 78    	mov.w     [w14], w0
    3752:	78 00 07    	rcall     0x3844 <_timer_stop>

00003754 <.LSM62>:
        poke(self->TxCON, 0x0000);
    3754:	1e 00 78    	mov.w     [w14], w0
    3756:	10 00 78    	mov.w     [w0], w0
    3758:	80 00 eb    	clr.w     w1
    375a:	01 08 78    	mov.w     w1, [w0]

0000375c <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    375c:	1e 00 78    	mov.w     [w14], w0
    375e:	10 04 90    	mov.w     [w0+2], w8
    3760:	02 40 22    	mov.w     #0x2400, w2
    3762:	43 b7 24    	mov.w     #0x4b74, w3
    3764:	1e 00 90    	mov.w     [w14+2], w0
    3766:	ae 00 90    	mov.w     [w14+4], w1
    3768:	9f ee 07    	rcall     0x14a8 <___mulsf3>
    376a:	2e ee 07    	rcall     0x13c8 <___fixunssfsi>
    376c:	00 00 78    	mov.w     w0, w0
    376e:	00 00 e9    	dec.w     w0, w0
    3770:	00 0c 78    	mov.w     w0, [w8]
    3772:	01 00 37    	bra       0x3776 <.L13>

00003774 <.L23>:
    3774:	00 00 00    	nop       

00003776 <.L13>:
    }
}
    3776:	4f 04 78    	mov.w     [--w15], w8
    3778:	00 80 fa    	ulnk      
    377a:	00 00 06    	return    

0000377c <_timer_period>:

float timer_period(_TIMER *self) {
    377c:	04 00 fa    	lnk       #0x4
    377e:	88 9f be    	mov.d     w8, [w15++]
    3780:	10 07 98    	mov.w     w0, [w14+2]

00003782 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3782:	1e 00 90    	mov.w     [w14+2], w0
    3784:	10 00 78    	mov.w     [w0], w0
    3786:	90 00 78    	mov.w     [w0], w1
    3788:	00 03 20    	mov.w     #0x30, w0
    378a:	00 80 60    	and.w     w1, w0, w0
    378c:	44 00 de    	lsr.w     w0, #0x4, w0
    378e:	00 0f 78    	mov.w     w0, [w14]

00003790 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3790:	1e 00 78    	mov.w     [w14], w0
    3792:	c2 00 dd    	sl.w      w0, #0x2, w1
    3794:	60 55 21    	mov.w     #0x1556, w0
    3796:	00 80 40    	add.w     w1, w0, w0
    3798:	10 04 be    	mov.d     [w0], w8
    379a:	1e 00 90    	mov.w     [w14+2], w0
    379c:	10 00 90    	mov.w     [w0+2], w0
    379e:	10 00 78    	mov.w     [w0], w0
    37a0:	80 00 eb    	clr.w     w1
    37a2:	2d ee 07    	rcall     0x13fe <___floatunsisf>
    37a4:	02 00 20    	mov.w     #0x0, w2
    37a6:	03 f8 23    	mov.w     #0x3f80, w3
    37a8:	6c ed 07    	rcall     0x1282 <___addsf3>
    37aa:	00 01 be    	mov.d     w0, w2
    37ac:	08 00 be    	mov.d     w8, w0
    37ae:	7c ee 07    	rcall     0x14a8 <___mulsf3>

000037b0 <.LSM69>:
}
    37b0:	4f 04 be    	mov.d     [--w15], w8
    37b2:	00 80 fa    	ulnk      
    37b4:	00 00 06    	return    

000037b6 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    37b6:	06 00 fa    	lnk       #0x6
    37b8:	00 0f 78    	mov.w     w0, [w14]
    37ba:	12 07 98    	mov.w     w2, [w14+2]
    37bc:	23 07 98    	mov.w     w3, [w14+4]

000037be <.LSM71>:
    timer_setPeriod(self, 1./freq);
    37be:	1e 01 90    	mov.w     [w14+2], w2
    37c0:	ae 01 90    	mov.w     [w14+4], w3
    37c2:	00 00 20    	mov.w     #0x0, w0
    37c4:	01 f8 23    	mov.w     #0x3f80, w1
    37c6:	ba ed 07    	rcall     0x133c <___divsf3>
    37c8:	00 01 be    	mov.d     w0, w2
    37ca:	1e 00 78    	mov.w     [w14], w0
    37cc:	5a ff 07    	rcall     0x3682 <_timer_setPeriod>

000037ce <.LSM72>:
}
    37ce:	00 80 fa    	ulnk      
    37d0:	00 00 06    	return    

000037d2 <_timer_freq>:

float timer_freq(_TIMER *self) {
    37d2:	02 00 fa    	lnk       #0x2
    37d4:	00 0f 78    	mov.w     w0, [w14]

000037d6 <.LSM74>:
    return 1./timer_period(self);
    37d6:	1e 00 78    	mov.w     [w14], w0
    37d8:	d1 ff 07    	rcall     0x377c <_timer_period>
    37da:	00 01 be    	mov.d     w0, w2
    37dc:	00 00 20    	mov.w     #0x0, w0
    37de:	01 f8 23    	mov.w     #0x3f80, w1
    37e0:	ad ed 07    	rcall     0x133c <___divsf3>

000037e2 <.LSM75>:
}
    37e2:	00 80 fa    	ulnk      
    37e4:	00 00 06    	return    

000037e6 <_timer_time>:

float timer_time(_TIMER *self) {
    37e6:	04 00 fa    	lnk       #0x4
    37e8:	88 9f be    	mov.d     w8, [w15++]
    37ea:	10 07 98    	mov.w     w0, [w14+2]

000037ec <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    37ec:	1e 00 90    	mov.w     [w14+2], w0
    37ee:	10 00 78    	mov.w     [w0], w0
    37f0:	90 00 78    	mov.w     [w0], w1
    37f2:	00 03 20    	mov.w     #0x30, w0
    37f4:	00 80 60    	and.w     w1, w0, w0
    37f6:	44 00 de    	lsr.w     w0, #0x4, w0
    37f8:	00 0f 78    	mov.w     w0, [w14]

000037fa <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    37fa:	1e 00 78    	mov.w     [w14], w0
    37fc:	c2 00 dd    	sl.w      w0, #0x2, w1
    37fe:	60 55 21    	mov.w     #0x1556, w0
    3800:	00 80 40    	add.w     w1, w0, w0
    3802:	10 04 be    	mov.d     [w0], w8
    3804:	1e 00 90    	mov.w     [w14+2], w0
    3806:	10 00 90    	mov.w     [w0+2], w0
    3808:	10 00 78    	mov.w     [w0], w0
    380a:	80 00 eb    	clr.w     w1
    380c:	f8 ed 07    	rcall     0x13fe <___floatunsisf>
    380e:	02 00 20    	mov.w     #0x0, w2
    3810:	03 f8 23    	mov.w     #0x3f80, w3
    3812:	37 ed 07    	rcall     0x1282 <___addsf3>
    3814:	00 01 be    	mov.d     w0, w2
    3816:	08 00 be    	mov.d     w8, w0
    3818:	47 ee 07    	rcall     0x14a8 <___mulsf3>

0000381a <.LSM79>:
}
    381a:	4f 04 be    	mov.d     [--w15], w8
    381c:	00 80 fa    	ulnk      
    381e:	00 00 06    	return    

00003820 <_timer_start>:

void timer_start(_TIMER *self) {
    3820:	02 00 fa    	lnk       #0x2
    3822:	00 0f 78    	mov.w     w0, [w14]

00003824 <.LSM81>:
    timer_lower(self);
    3824:	1e 00 78    	mov.w     [w14], w0
    3826:	2b 00 07    	rcall     0x387e <_timer_lower>

00003828 <.LSM82>:
    poke(self->TMRx, 0);
    3828:	1e 00 78    	mov.w     [w14], w0
    382a:	20 00 90    	mov.w     [w0+4], w0
    382c:	80 00 eb    	clr.w     w1
    382e:	01 08 78    	mov.w     w1, [w0]

00003830 <.LSM83>:
    bitset(self->TxCON, 15);
    3830:	1e 00 78    	mov.w     [w14], w0
    3832:	10 00 78    	mov.w     [w0], w0
    3834:	9e 00 78    	mov.w     [w14], w1
    3836:	91 00 78    	mov.w     [w1], w1
    3838:	11 01 78    	mov.w     [w1], w2
    383a:	01 00 28    	mov.w     #0x8000, w1
    383c:	82 80 70    	ior.w     w1, w2, w1
    383e:	01 08 78    	mov.w     w1, [w0]

00003840 <.LSM84>:
}
    3840:	00 80 fa    	ulnk      
    3842:	00 00 06    	return    

00003844 <_timer_stop>:

void timer_stop(_TIMER *self) {
    3844:	02 00 fa    	lnk       #0x2
    3846:	00 0f 78    	mov.w     w0, [w14]

00003848 <.LSM86>:
    bitclear(self->TxCON, 15);
    3848:	1e 00 78    	mov.w     [w14], w0
    384a:	10 00 78    	mov.w     [w0], w0
    384c:	9e 00 78    	mov.w     [w14], w1
    384e:	91 00 78    	mov.w     [w1], w1
    3850:	11 01 78    	mov.w     [w1], w2
    3852:	f1 ff 27    	mov.w     #0x7fff, w1
    3854:	81 00 61    	and.w     w2, w1, w1
    3856:	01 08 78    	mov.w     w1, [w0]

00003858 <.LSM87>:
}
    3858:	00 80 fa    	ulnk      
    385a:	00 00 06    	return    

0000385c <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    385c:	02 00 fa    	lnk       #0x2
    385e:	00 0f 78    	mov.w     w0, [w14]

00003860 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    3860:	1e 00 78    	mov.w     [w14], w0
    3862:	30 00 90    	mov.w     [w0+6], w0
    3864:	90 00 78    	mov.w     [w0], w1
    3866:	1e 00 78    	mov.w     [w14], w0
    3868:	20 48 90    	mov.b     [w0+10], w0
    386a:	00 80 fb    	ze        w0, w0
    386c:	12 00 20    	mov.w     #0x1, w2
    386e:	00 10 dd    	sl.w      w2, w0, w0
    3870:	00 80 60    	and.w     w1, w0, w0
    3872:	00 f0 a7    	btsc.w    w0, #0xf
    3874:	00 00 ea    	neg.w     w0, w0
    3876:	00 00 ea    	neg.w     w0, w0
    3878:	4f 00 de    	lsr.w     w0, #0xf, w0

0000387a <.LSM90>:
}
    387a:	00 80 fa    	ulnk      
    387c:	00 00 06    	return    

0000387e <_timer_lower>:

void timer_lower(_TIMER *self) {
    387e:	02 00 fa    	lnk       #0x2
    3880:	00 0f 78    	mov.w     w0, [w14]

00003882 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3882:	1e 00 78    	mov.w     [w14], w0
    3884:	30 00 90    	mov.w     [w0+6], w0
    3886:	9e 00 78    	mov.w     [w14], w1
    3888:	b1 00 90    	mov.w     [w1+6], w1
    388a:	11 01 78    	mov.w     [w1], w2
    388c:	9e 00 78    	mov.w     [w14], w1
    388e:	a1 48 90    	mov.b     [w1+10], w1
    3890:	81 80 fb    	ze        w1, w1
    3892:	13 00 20    	mov.w     #0x1, w3
    3894:	81 18 dd    	sl.w      w3, w1, w1
    3896:	81 80 ea    	com.w     w1, w1
    3898:	81 00 61    	and.w     w2, w1, w1
    389a:	01 08 78    	mov.w     w1, [w0]

0000389c <.LSM93>:
}
    389c:	00 80 fa    	ulnk      
    389e:	00 00 06    	return    

000038a0 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    38a0:	02 00 fa    	lnk       #0x2
    38a2:	00 0f 78    	mov.w     w0, [w14]

000038a4 <.LSM95>:
    return peek(self->TMRx);
    38a4:	1e 00 78    	mov.w     [w14], w0
    38a6:	20 00 90    	mov.w     [w0+4], w0
    38a8:	10 00 78    	mov.w     [w0], w0

000038aa <.LSM96>:
}
    38aa:	00 80 fa    	ulnk      
    38ac:	00 00 06    	return    

000038ae <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    38ae:	02 00 fa    	lnk       #0x2
    38b0:	00 0f 78    	mov.w     w0, [w14]

000038b2 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    38b2:	1e 00 78    	mov.w     [w14], w0
    38b4:	40 00 90    	mov.w     [w0+8], w0
    38b6:	9e 00 78    	mov.w     [w14], w1
    38b8:	c1 00 90    	mov.w     [w1+8], w1
    38ba:	11 01 78    	mov.w     [w1], w2
    38bc:	9e 00 78    	mov.w     [w14], w1
    38be:	a1 48 90    	mov.b     [w1+10], w1
    38c0:	81 80 fb    	ze        w1, w1
    38c2:	13 00 20    	mov.w     #0x1, w3
    38c4:	81 18 dd    	sl.w      w3, w1, w1
    38c6:	82 80 70    	ior.w     w1, w2, w1
    38c8:	01 08 78    	mov.w     w1, [w0]

000038ca <.LSM99>:
}
    38ca:	00 80 fa    	ulnk      
    38cc:	00 00 06    	return    

000038ce <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    38ce:	02 00 fa    	lnk       #0x2
    38d0:	00 0f 78    	mov.w     w0, [w14]

000038d2 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    38d2:	1e 00 78    	mov.w     [w14], w0
    38d4:	40 00 90    	mov.w     [w0+8], w0
    38d6:	9e 00 78    	mov.w     [w14], w1
    38d8:	c1 00 90    	mov.w     [w1+8], w1
    38da:	11 01 78    	mov.w     [w1], w2
    38dc:	9e 00 78    	mov.w     [w14], w1
    38de:	a1 48 90    	mov.b     [w1+10], w1
    38e0:	81 80 fb    	ze        w1, w1
    38e2:	13 00 20    	mov.w     #0x1, w3
    38e4:	81 18 dd    	sl.w      w3, w1, w1
    38e6:	81 80 ea    	com.w     w1, w1
    38e8:	81 00 61    	and.w     w2, w1, w1
    38ea:	01 08 78    	mov.w     w1, [w0]

000038ec <.LSM102>:
}
    38ec:	00 80 fa    	ulnk      
    38ee:	00 00 06    	return    

000038f0 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    38f0:	08 00 fa    	lnk       #0x8
    38f2:	00 0f 78    	mov.w     w0, [w14]
    38f4:	12 07 98    	mov.w     w2, [w14+2]
    38f6:	23 07 98    	mov.w     w3, [w14+4]
    38f8:	31 07 98    	mov.w     w1, [w14+6]

000038fa <.LSM104>:
    timer_disableInterrupt(self);
    38fa:	1e 00 78    	mov.w     [w14], w0
    38fc:	e8 ff 07    	rcall     0x38ce <_timer_disableInterrupt>

000038fe <.LSM105>:
    timer_setPeriod(self, interval);
    38fe:	1e 01 90    	mov.w     [w14+2], w2
    3900:	ae 01 90    	mov.w     [w14+4], w3
    3902:	1e 00 78    	mov.w     [w14], w0
    3904:	be fe 07    	rcall     0x3682 <_timer_setPeriod>

00003906 <.LSM106>:
    self->aftercount = 0;
    3906:	1e 00 78    	mov.w     [w14], w0
    3908:	80 00 eb    	clr.w     w1
    390a:	01 08 98    	mov.w     w1, [w0+16]

0000390c <.LSM107>:
    self->every = callback;
    390c:	1e 00 78    	mov.w     [w14], w0
    390e:	be 00 90    	mov.w     [w14+6], w1
    3910:	11 08 98    	mov.w     w1, [w0+18]

00003912 <.LSM108>:
    self->after = NULL;
    3912:	1e 00 78    	mov.w     [w14], w0
    3914:	80 00 eb    	clr.w     w1
    3916:	21 08 98    	mov.w     w1, [w0+20]

00003918 <.LSM109>:
    timer_enableInterrupt(self);
    3918:	1e 00 78    	mov.w     [w14], w0
    391a:	c9 ff 07    	rcall     0x38ae <_timer_enableInterrupt>

0000391c <.LSM110>:
    timer_start(self);
    391c:	1e 00 78    	mov.w     [w14], w0
    391e:	80 ff 07    	rcall     0x3820 <_timer_start>

00003920 <.LSM111>:
}
    3920:	00 80 fa    	ulnk      
    3922:	00 00 06    	return    

00003924 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    3924:	0a 00 fa    	lnk       #0xa
    3926:	00 0f 78    	mov.w     w0, [w14]
    3928:	12 07 98    	mov.w     w2, [w14+2]
    392a:	23 07 98    	mov.w     w3, [w14+4]
    392c:	31 07 98    	mov.w     w1, [w14+6]
    392e:	44 07 98    	mov.w     w4, [w14+8]

00003930 <.LSM113>:
    timer_disableInterrupt(self);
    3930:	1e 00 78    	mov.w     [w14], w0
    3932:	cd ff 07    	rcall     0x38ce <_timer_disableInterrupt>

00003934 <.LSM114>:
    timer_setPeriod(self, delay);
    3934:	1e 01 90    	mov.w     [w14+2], w2
    3936:	ae 01 90    	mov.w     [w14+4], w3
    3938:	1e 00 78    	mov.w     [w14], w0
    393a:	a3 fe 07    	rcall     0x3682 <_timer_setPeriod>

0000393c <.LSM115>:
    self->aftercount = num_times;
    393c:	1e 00 78    	mov.w     [w14], w0
    393e:	be 00 90    	mov.w     [w14+6], w1
    3940:	01 08 98    	mov.w     w1, [w0+16]

00003942 <.LSM116>:
    self->every = NULL;
    3942:	1e 00 78    	mov.w     [w14], w0
    3944:	80 00 eb    	clr.w     w1
    3946:	11 08 98    	mov.w     w1, [w0+18]

00003948 <.LSM117>:
    self->after = callback;
    3948:	1e 00 78    	mov.w     [w14], w0
    394a:	ce 00 90    	mov.w     [w14+8], w1
    394c:	21 08 98    	mov.w     w1, [w0+20]

0000394e <.LSM118>:
    timer_enableInterrupt(self);
    394e:	1e 00 78    	mov.w     [w14], w0
    3950:	ae ff 07    	rcall     0x38ae <_timer_enableInterrupt>

00003952 <.LSM119>:
    timer_start(self);
    3952:	1e 00 78    	mov.w     [w14], w0
    3954:	65 ff 07    	rcall     0x3820 <_timer_start>

00003956 <.LSM120>:
}
    3956:	00 80 fa    	ulnk      
    3958:	00 00 06    	return    

0000395a <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    395a:	02 00 fa    	lnk       #0x2
    395c:	00 0f 78    	mov.w     w0, [w14]

0000395e <.LSM122>:
    timer_disableInterrupt(self);
    395e:	1e 00 78    	mov.w     [w14], w0
    3960:	b6 ff 07    	rcall     0x38ce <_timer_disableInterrupt>

00003962 <.LSM123>:
    timer_lower(self);
    3962:	1e 00 78    	mov.w     [w14], w0
    3964:	8c ff 07    	rcall     0x387e <_timer_lower>

00003966 <.LSM124>:
    timer_stop(self);
    3966:	1e 00 78    	mov.w     [w14], w0
    3968:	6d ff 07    	rcall     0x3844 <_timer_stop>

0000396a <.LSM125>:
    self->aftercount = 0;
    396a:	1e 00 78    	mov.w     [w14], w0
    396c:	80 00 eb    	clr.w     w1
    396e:	01 08 98    	mov.w     w1, [w0+16]

00003970 <.LSM126>:
    self->every = NULL;
    3970:	1e 00 78    	mov.w     [w14], w0
    3972:	80 00 eb    	clr.w     w1
    3974:	11 08 98    	mov.w     w1, [w0+18]

00003976 <.LSM127>:
    self->after = NULL;
    3976:	1e 00 78    	mov.w     [w14], w0
    3978:	80 00 eb    	clr.w     w1
    397a:	21 08 98    	mov.w     w1, [w0+20]

0000397c <.LSM128>:
}
    397c:	00 80 fa    	ulnk      
    397e:	00 00 06    	return    

00003980 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    3980:	04 00 fa    	lnk       #0x4
    3982:	00 0f 78    	mov.w     w0, [w14]
    3984:	11 07 98    	mov.w     w1, [w14+2]

00003986 <.LSM1>:
    if (val)
    3986:	1e 00 90    	mov.w     [w14+2], w0
    3988:	00 00 e0    	cp0.w     w0
    398a:	0d 00 32    	bra       Z, 0x39a6 <.L2>

0000398c <.LSM2>:
        bitset(self->port, self->bit);
    398c:	1e 00 78    	mov.w     [w14], w0
    398e:	10 00 78    	mov.w     [w0], w0
    3990:	9e 00 78    	mov.w     [w14], w1
    3992:	91 00 78    	mov.w     [w1], w1
    3994:	11 01 78    	mov.w     [w1], w2
    3996:	9e 00 78    	mov.w     [w14], w1
    3998:	e1 40 90    	mov.b     [w1+6], w1
    399a:	81 80 fb    	ze        w1, w1
    399c:	13 00 20    	mov.w     #0x1, w3
    399e:	81 18 dd    	sl.w      w3, w1, w1
    39a0:	82 80 70    	ior.w     w1, w2, w1
    39a2:	01 08 78    	mov.w     w1, [w0]
    39a4:	0d 00 37    	bra       0x39c0 <.L1>

000039a6 <.L2>:
    else
        bitclear(self->port, self->bit);
    39a6:	1e 00 78    	mov.w     [w14], w0
    39a8:	10 00 78    	mov.w     [w0], w0
    39aa:	9e 00 78    	mov.w     [w14], w1
    39ac:	91 00 78    	mov.w     [w1], w1
    39ae:	11 01 78    	mov.w     [w1], w2
    39b0:	9e 00 78    	mov.w     [w14], w1
    39b2:	e1 40 90    	mov.b     [w1+6], w1
    39b4:	81 80 fb    	ze        w1, w1
    39b6:	13 00 20    	mov.w     #0x1, w3
    39b8:	81 18 dd    	sl.w      w3, w1, w1
    39ba:	81 80 ea    	com.w     w1, w1
    39bc:	81 00 61    	and.w     w2, w1, w1
    39be:	01 08 78    	mov.w     w1, [w0]

000039c0 <.L1>:
}
    39c0:	00 80 fa    	ulnk      
    39c2:	00 00 06    	return    

000039c4 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    39c4:	02 00 fa    	lnk       #0x2
    39c6:	00 0f 78    	mov.w     w0, [w14]

000039c8 <.LSM6>:
    return bitread(self->port, self->bit);
    39c8:	1e 00 78    	mov.w     [w14], w0
    39ca:	10 00 78    	mov.w     [w0], w0
    39cc:	90 00 78    	mov.w     [w0], w1
    39ce:	1e 00 78    	mov.w     [w14], w0
    39d0:	60 40 90    	mov.b     [w0+6], w0
    39d2:	00 80 fb    	ze        w0, w0
    39d4:	12 00 20    	mov.w     #0x1, w2
    39d6:	00 10 dd    	sl.w      w2, w0, w0
    39d8:	00 80 60    	and.w     w1, w0, w0
    39da:	00 f0 a7    	btsc.w    w0, #0xf
    39dc:	00 00 ea    	neg.w     w0, w0
    39de:	00 00 ea    	neg.w     w0, w0
    39e0:	4f 00 de    	lsr.w     w0, #0xf, w0

000039e2 <.LSM7>:
}
    39e2:	00 80 fa    	ulnk      
    39e4:	00 00 06    	return    

000039e6 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    39e6:	02 00 fa    	lnk       #0x2
    39e8:	00 0f 78    	mov.w     w0, [w14]

000039ea <.LSM9>:
    AD1CHS = self->annum;
    39ea:	1e 00 78    	mov.w     [w14], w0
    39ec:	40 00 90    	mov.w     [w0+8], w0
    39ee:	40 19 88    	mov.w     w0, 0x328

000039f0 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    39f0:	20 23 a8    	bset.b    0x320, #0x1

000039f2 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    39f2:	00 00 00    	nop       

000039f4 <.L6>:
    39f4:	00 19 80    	mov.w     0x320, w0
    39f6:	61 00 60    	and.w     w0, #0x1, w0
    39f8:	00 00 e0    	cp0.w     w0
    39fa:	fc ff 32    	bra       Z, 0x39f4 <.L6>

000039fc <.LSM12>:
    return ADC1BUF0;
    39fc:	00 18 80    	mov.w     0x300, w0

000039fe <.LSM13>:
}
    39fe:	00 80 fa    	ulnk      
    3a00:	00 00 06    	return    

00003a02 <_init_pin>:

void init_pin(void) {
    3a02:	02 00 fa    	lnk       #0x2

00003a04 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a04:	40 6d 20    	mov.w     #0x6d4, w0
    3a06:	80 1f 78    	mov.w     w0, [w15++]
    3a08:	47 01 20    	mov.w     #0x14, w7
    3a0a:	00 43 eb    	clr.b     w6
    3a0c:	80 82 eb    	setm.w    w5
    3a0e:	54 c0 b3    	mov.b     #0x5, w4
    3a10:	80 01 eb    	clr.w     w3
    3a12:	82 2d 20    	mov.w     #0x2d8, w2
    3a14:	a1 2d 20    	mov.w     #0x2da, w1
    3a16:	a0 03 21    	mov.w     #0x103a, w0
    3a18:	08 01 07    	rcall     0x3c2a <_pin_init>
    3a1a:	8f 87 e9    	dec2.w    w15, w15

00003a1c <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a1c:	80 6d 20    	mov.w     #0x6d8, w0
    3a1e:	80 1f 78    	mov.w     w0, [w15++]
    3a20:	97 01 20    	mov.w     #0x19, w7
    3a22:	86 c0 b3    	mov.b     #0x8, w6
    3a24:	80 82 eb    	setm.w    w5
    3a26:	44 c0 b3    	mov.b     #0x4, w4
    3a28:	80 01 eb    	clr.w     w3
    3a2a:	82 2d 20    	mov.w     #0x2d8, w2
    3a2c:	a1 2d 20    	mov.w     #0x2da, w1
    3a2e:	00 05 21    	mov.w     #0x1050, w0
    3a30:	fc 00 07    	rcall     0x3c2a <_pin_init>
    3a32:	8f 87 e9    	dec2.w    w15, w15

00003a34 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3a34:	a0 6c 20    	mov.w     #0x6ca, w0
    3a36:	80 1f 78    	mov.w     w0, [w15++]
    3a38:	a7 00 20    	mov.w     #0xa, w7
    3a3a:	00 43 eb    	clr.b     w6
    3a3c:	80 82 eb    	setm.w    w5
    3a3e:	44 c0 b3    	mov.b     #0x4, w4
    3a40:	80 01 eb    	clr.w     w3
    3a42:	82 2e 20    	mov.w     #0x2e8, w2
    3a44:	a1 2e 20    	mov.w     #0x2ea, w1
    3a46:	60 06 21    	mov.w     #0x1066, w0
    3a48:	f0 00 07    	rcall     0x3c2a <_pin_init>
    3a4a:	8f 87 e9    	dec2.w    w15, w15

00003a4c <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3a4c:	00 6d 20    	mov.w     #0x6d0, w0
    3a4e:	80 1f 78    	mov.w     w0, [w15++]
    3a50:	17 01 20    	mov.w     #0x11, w7
    3a52:	86 c0 b3    	mov.b     #0x8, w6
    3a54:	80 82 eb    	setm.w    w5
    3a56:	54 c0 b3    	mov.b     #0x5, w4
    3a58:	80 01 eb    	clr.w     w3
    3a5a:	82 2e 20    	mov.w     #0x2e8, w2
    3a5c:	a1 2e 20    	mov.w     #0x2ea, w1
    3a5e:	c0 07 21    	mov.w     #0x107c, w0
    3a60:	e4 00 07    	rcall     0x3c2a <_pin_init>
    3a62:	8f 87 e9    	dec2.w    w15, w15

00003a64 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3a64:	c0 6d 20    	mov.w     #0x6dc, w0
    3a66:	80 1f 78    	mov.w     w0, [w15++]
    3a68:	d7 01 20    	mov.w     #0x1d, w7
    3a6a:	86 c0 b3    	mov.b     #0x8, w6
    3a6c:	f5 00 20    	mov.w     #0xf, w5
    3a6e:	f4 c0 b3    	mov.b     #0xf, w4
    3a70:	23 4e 20    	mov.w     #0x4e2, w3
    3a72:	82 2c 20    	mov.w     #0x2c8, w2
    3a74:	a1 2c 20    	mov.w     #0x2ca, w1
    3a76:	20 09 21    	mov.w     #0x1092, w0
    3a78:	d8 00 07    	rcall     0x3c2a <_pin_init>
    3a7a:	8f 87 e9    	dec2.w    w15, w15

00003a7c <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3a7c:	00 6d 20    	mov.w     #0x6d0, w0
    3a7e:	80 1f 78    	mov.w     w0, [w15++]
    3a80:	07 01 20    	mov.w     #0x10, w7
    3a82:	00 43 eb    	clr.b     w6
    3a84:	80 82 eb    	setm.w    w5
    3a86:	34 c0 b3    	mov.b     #0x3, w4
    3a88:	80 01 eb    	clr.w     w3
    3a8a:	82 2e 20    	mov.w     #0x2e8, w2
    3a8c:	a1 2e 20    	mov.w     #0x2ea, w1
    3a8e:	80 0a 21    	mov.w     #0x10a8, w0
    3a90:	cc 00 07    	rcall     0x3c2a <_pin_init>
    3a92:	8f 87 e9    	dec2.w    w15, w15

00003a94 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3a94:	20 6c 20    	mov.w     #0x6c2, w0
    3a96:	80 1f 78    	mov.w     w0, [w15++]
    3a98:	27 00 20    	mov.w     #0x2, w7
    3a9a:	00 43 eb    	clr.b     w6
    3a9c:	80 82 eb    	setm.w    w5
    3a9e:	84 c0 b3    	mov.b     #0x8, w4
    3aa0:	80 01 eb    	clr.w     w3
    3aa2:	82 2d 20    	mov.w     #0x2d8, w2
    3aa4:	a1 2d 20    	mov.w     #0x2da, w1
    3aa6:	e0 0b 21    	mov.w     #0x10be, w0
    3aa8:	c0 00 07    	rcall     0x3c2a <_pin_init>
    3aaa:	8f 87 e9    	dec2.w    w15, w15

00003aac <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3aac:	c0 6c 20    	mov.w     #0x6cc, w0
    3aae:	80 1f 78    	mov.w     w0, [w15++]
    3ab0:	c7 00 20    	mov.w     #0xc, w7
    3ab2:	00 43 eb    	clr.b     w6
    3ab4:	80 82 eb    	setm.w    w5
    3ab6:	b4 c0 b3    	mov.b     #0xb, w4
    3ab8:	80 01 eb    	clr.w     w3
    3aba:	82 2d 20    	mov.w     #0x2d8, w2
    3abc:	a1 2d 20    	mov.w     #0x2da, w1
    3abe:	40 0d 21    	mov.w     #0x10d4, w0
    3ac0:	b4 00 07    	rcall     0x3c2a <_pin_init>
    3ac2:	8f 87 e9    	dec2.w    w15, w15

00003ac4 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3ac4:	40 6c 20    	mov.w     #0x6c4, w0
    3ac6:	80 1f 78    	mov.w     w0, [w15++]
    3ac8:	47 00 20    	mov.w     #0x4, w7
    3aca:	00 43 eb    	clr.b     w6
    3acc:	80 82 eb    	setm.w    w5
    3ace:	94 c0 b3    	mov.b     #0x9, w4
    3ad0:	80 01 eb    	clr.w     w3
    3ad2:	82 2d 20    	mov.w     #0x2d8, w2
    3ad4:	a1 2d 20    	mov.w     #0x2da, w1
    3ad6:	a0 0e 21    	mov.w     #0x10ea, w0
    3ad8:	a8 00 07    	rcall     0x3c2a <_pin_init>
    3ada:	8f 87 e9    	dec2.w    w15, w15

00003adc <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3adc:	20 6c 20    	mov.w     #0x6c2, w0
    3ade:	80 1f 78    	mov.w     w0, [w15++]
    3ae0:	37 00 20    	mov.w     #0x3, w7
    3ae2:	86 c0 b3    	mov.b     #0x8, w6
    3ae4:	80 82 eb    	setm.w    w5
    3ae6:	a4 c0 b3    	mov.b     #0xa, w4
    3ae8:	80 01 eb    	clr.w     w3
    3aea:	82 2d 20    	mov.w     #0x2d8, w2
    3aec:	a1 2d 20    	mov.w     #0x2da, w1
    3aee:	00 10 21    	mov.w     #0x1100, w0
    3af0:	9c 00 07    	rcall     0x3c2a <_pin_init>
    3af2:	8f 87 e9    	dec2.w    w15, w15

00003af4 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3af4:	a0 6c 20    	mov.w     #0x6ca, w0
    3af6:	80 1f 78    	mov.w     w0, [w15++]
    3af8:	b7 00 20    	mov.w     #0xb, w7
    3afa:	86 c0 b3    	mov.b     #0x8, w6
    3afc:	80 82 eb    	setm.w    w5
    3afe:	00 42 eb    	clr.b     w4
    3b00:	80 01 eb    	clr.w     w3
    3b02:	82 2d 20    	mov.w     #0x2d8, w2
    3b04:	a1 2d 20    	mov.w     #0x2da, w1
    3b06:	60 11 21    	mov.w     #0x1116, w0
    3b08:	90 00 07    	rcall     0x3c2a <_pin_init>
    3b0a:	8f 87 e9    	dec2.w    w15, w15

00003b0c <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3b0c:	80 6d 20    	mov.w     #0x6d8, w0
    3b0e:	80 1f 78    	mov.w     w0, [w15++]
    3b10:	87 01 20    	mov.w     #0x18, w7
    3b12:	00 43 eb    	clr.b     w6
    3b14:	80 82 eb    	setm.w    w5
    3b16:	14 c0 b3    	mov.b     #0x1, w4
    3b18:	80 01 eb    	clr.w     w3
    3b1a:	82 2d 20    	mov.w     #0x2d8, w2
    3b1c:	a1 2d 20    	mov.w     #0x2da, w1
    3b1e:	c0 12 21    	mov.w     #0x112c, w0
    3b20:	84 00 07    	rcall     0x3c2a <_pin_init>
    3b22:	8f 87 e9    	dec2.w    w15, w15

00003b24 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3b24:	60 6d 20    	mov.w     #0x6d6, w0
    3b26:	80 1f 78    	mov.w     w0, [w15++]
    3b28:	77 01 20    	mov.w     #0x17, w7
    3b2a:	86 c0 b3    	mov.b     #0x8, w6
    3b2c:	80 82 eb    	setm.w    w5
    3b2e:	24 c0 b3    	mov.b     #0x2, w4
    3b30:	80 01 eb    	clr.w     w3
    3b32:	82 2d 20    	mov.w     #0x2d8, w2
    3b34:	a1 2d 20    	mov.w     #0x2da, w1
    3b36:	20 14 21    	mov.w     #0x1142, w0
    3b38:	78 00 07    	rcall     0x3c2a <_pin_init>
    3b3a:	8f 87 e9    	dec2.w    w15, w15

00003b3c <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3b3c:	60 6d 20    	mov.w     #0x6d6, w0
    3b3e:	80 1f 78    	mov.w     w0, [w15++]
    3b40:	67 01 20    	mov.w     #0x16, w7
    3b42:	00 43 eb    	clr.b     w6
    3b44:	80 82 eb    	setm.w    w5
    3b46:	34 c0 b3    	mov.b     #0x3, w4
    3b48:	80 01 eb    	clr.w     w3
    3b4a:	82 2d 20    	mov.w     #0x2d8, w2
    3b4c:	a1 2d 20    	mov.w     #0x2da, w1
    3b4e:	80 15 21    	mov.w     #0x1158, w0
    3b50:	6c 00 07    	rcall     0x3c2a <_pin_init>
    3b52:	8f 87 e9    	dec2.w    w15, w15

00003b54 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3b54:	00 6c 20    	mov.w     #0x6c0, w0
    3b56:	80 1f 78    	mov.w     w0, [w15++]
    3b58:	80 03 eb    	clr.w     w7
    3b5a:	00 43 eb    	clr.b     w6
    3b5c:	80 02 eb    	clr.w     w5
    3b5e:	00 42 eb    	clr.b     w4
    3b60:	23 4e 20    	mov.w     #0x4e2, w3
    3b62:	82 2c 20    	mov.w     #0x2c8, w2
    3b64:	a1 2c 20    	mov.w     #0x2ca, w1
    3b66:	c0 1d 21    	mov.w     #0x11dc, w0
    3b68:	60 00 07    	rcall     0x3c2a <_pin_init>
    3b6a:	8f 87 e9    	dec2.w    w15, w15

00003b6c <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3b6c:	00 6c 20    	mov.w     #0x6c0, w0
    3b6e:	80 1f 78    	mov.w     w0, [w15++]
    3b70:	17 00 20    	mov.w     #0x1, w7
    3b72:	86 c0 b3    	mov.b     #0x8, w6
    3b74:	15 00 20    	mov.w     #0x1, w5
    3b76:	14 c0 b3    	mov.b     #0x1, w4
    3b78:	23 4e 20    	mov.w     #0x4e2, w3
    3b7a:	82 2c 20    	mov.w     #0x2c8, w2
    3b7c:	a1 2c 20    	mov.w     #0x2ca, w1
    3b7e:	60 1c 21    	mov.w     #0x11c6, w0
    3b80:	54 00 07    	rcall     0x3c2a <_pin_init>
    3b82:	8f 87 e9    	dec2.w    w15, w15

00003b84 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3b84:	c0 6c 20    	mov.w     #0x6cc, w0
    3b86:	80 1f 78    	mov.w     w0, [w15++]
    3b88:	d7 00 20    	mov.w     #0xd, w7
    3b8a:	86 c0 b3    	mov.b     #0x8, w6
    3b8c:	25 00 20    	mov.w     #0x2, w5
    3b8e:	24 c0 b3    	mov.b     #0x2, w4
    3b90:	23 4e 20    	mov.w     #0x4e2, w3
    3b92:	82 2c 20    	mov.w     #0x2c8, w2
    3b94:	a1 2c 20    	mov.w     #0x2ca, w1
    3b96:	00 1b 21    	mov.w     #0x11b0, w0
    3b98:	48 00 07    	rcall     0x3c2a <_pin_init>
    3b9a:	8f 87 e9    	dec2.w    w15, w15

00003b9c <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3b9c:	00 00 eb    	clr.w     w0
    3b9e:	80 1f 78    	mov.w     w0, [w15++]
    3ba0:	80 83 eb    	setm.w    w7
    3ba2:	00 43 eb    	clr.b     w6
    3ba4:	35 00 20    	mov.w     #0x3, w5
    3ba6:	34 c0 b3    	mov.b     #0x3, w4
    3ba8:	23 4e 20    	mov.w     #0x4e2, w3
    3baa:	82 2c 20    	mov.w     #0x2c8, w2
    3bac:	a1 2c 20    	mov.w     #0x2ca, w1
    3bae:	a0 19 21    	mov.w     #0x119a, w0
    3bb0:	3c 00 07    	rcall     0x3c2a <_pin_init>
    3bb2:	8f 87 e9    	dec2.w    w15, w15

00003bb4 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3bb4:	c0 6d 20    	mov.w     #0x6dc, w0
    3bb6:	80 1f 78    	mov.w     w0, [w15++]
    3bb8:	c7 01 20    	mov.w     #0x1c, w7
    3bba:	00 43 eb    	clr.b     w6
    3bbc:	45 00 20    	mov.w     #0x4, w5
    3bbe:	44 c0 b3    	mov.b     #0x4, w4
    3bc0:	23 4e 20    	mov.w     #0x4e2, w3
    3bc2:	82 2c 20    	mov.w     #0x2c8, w2
    3bc4:	a1 2c 20    	mov.w     #0x2ca, w1
    3bc6:	40 18 21    	mov.w     #0x1184, w0
    3bc8:	30 00 07    	rcall     0x3c2a <_pin_init>
    3bca:	8f 87 e9    	dec2.w    w15, w15

00003bcc <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3bcc:	20 6d 20    	mov.w     #0x6d2, w0
    3bce:	80 1f 78    	mov.w     w0, [w15++]
    3bd0:	27 01 20    	mov.w     #0x12, w7
    3bd2:	00 43 eb    	clr.b     w6
    3bd4:	55 00 20    	mov.w     #0x5, w5
    3bd6:	54 c0 b3    	mov.b     #0x5, w4
    3bd8:	23 4e 20    	mov.w     #0x4e2, w3
    3bda:	82 2c 20    	mov.w     #0x2c8, w2
    3bdc:	a1 2c 20    	mov.w     #0x2ca, w1
    3bde:	e0 16 21    	mov.w     #0x116e, w0
    3be0:	24 00 07    	rcall     0x3c2a <_pin_init>
    3be2:	8f 87 e9    	dec2.w    w15, w15

00003be4 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    3be4:	00 00 eb    	clr.w     w0
    3be6:	00 0f 78    	mov.w     w0, [w14]
    3be8:	07 00 37    	bra       0x3bf8 <.L8>

00003bea <.L9>:
        pin_digitalIn(&D[i]);
    3bea:	1e 00 78    	mov.w     [w14], w0
    3bec:	76 00 b9    	mul.su    w0, #0x16, w0
    3bee:	80 00 78    	mov.w     w0, w1
    3bf0:	a0 03 21    	mov.w     #0x103a, w0
    3bf2:	00 80 40    	add.w     w1, w0, w0
    3bf4:	46 00 07    	rcall     0x3c82 <_pin_digitalIn>

00003bf6 <.LSM37>:
    3bf6:	1e 0f e8    	inc.w     [w14], [w14]

00003bf8 <.L8>:
    3bf8:	1e 00 78    	mov.w     [w14], w0
    3bfa:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    3bfc:	f6 ff 36    	bra       LEU, 0x3bea <.L9>

00003bfe <.LSM38>:
    for (i = 0; i<6; i++)
    3bfe:	00 00 eb    	clr.w     w0
    3c00:	00 0f 78    	mov.w     w0, [w14]
    3c02:	07 00 37    	bra       0x3c12 <.L10>

00003c04 <.L11>:
        pin_analogIn(&A[i]);
    3c04:	1e 00 78    	mov.w     [w14], w0
    3c06:	76 00 b9    	mul.su    w0, #0x16, w0
    3c08:	80 00 78    	mov.w     w0, w1
    3c0a:	e0 16 21    	mov.w     #0x116e, w0
    3c0c:	00 80 40    	add.w     w1, w0, w0
    3c0e:	95 00 07    	rcall     0x3d3a <_pin_analogIn>

00003c10 <.LSM40>:
    3c10:	1e 0f e8    	inc.w     [w14], [w14]

00003c12 <.L10>:
    3c12:	1e 00 78    	mov.w     [w14], w0
    3c14:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3c16:	f6 ff 36    	bra       LEU, 0x3c04 <.L11>

00003c18 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    3c18:	00 2e 20    	mov.w     #0x2e0, w0
    3c1a:	00 19 88    	mov.w     w0, 0x320

00003c1c <.LSM42>:
    AD1CON2 = 0;
    3c1c:	22 23 ef    	clr.w     0x322

00003c1e <.LSM43>:
    AD1CON3 = 0x0C40;
    3c1e:	00 c4 20    	mov.w     #0xc40, w0
    3c20:	20 19 88    	mov.w     w0, 0x324

00003c22 <.LSM44>:
    AD1CHS = 0;
    3c22:	28 23 ef    	clr.w     0x328

00003c24 <.LSM45>:
    AD1CON1bits.ADON = 1;
    3c24:	21 e3 a8    	bset.b    0x321, #0x7

00003c26 <.LSM46>:
}
    3c26:	00 80 fa    	ulnk      
    3c28:	00 00 06    	return    

00003c2a <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    3c2a:	10 00 fa    	lnk       #0x10
    3c2c:	00 0f 78    	mov.w     w0, [w14]
    3c2e:	11 07 98    	mov.w     w1, [w14+2]
    3c30:	22 07 98    	mov.w     w2, [w14+4]
    3c32:	33 07 98    	mov.w     w3, [w14+6]
    3c34:	04 4f 98    	mov.b     w4, [w14+8]
    3c36:	55 07 98    	mov.w     w5, [w14+10]
    3c38:	46 4f 98    	mov.b     w6, [w14+12]
    3c3a:	77 07 98    	mov.w     w7, [w14+14]

00003c3c <.LSM48>:
    self->port = port;
    3c3c:	1e 00 78    	mov.w     [w14], w0
    3c3e:	9e 00 90    	mov.w     [w14+2], w1
    3c40:	01 08 78    	mov.w     w1, [w0]

00003c42 <.LSM49>:
    self->tris = tris;
    3c42:	1e 00 78    	mov.w     [w14], w0
    3c44:	ae 00 90    	mov.w     [w14+4], w1
    3c46:	11 00 98    	mov.w     w1, [w0+2]

00003c48 <.LSM50>:
    self->ans = ans;
    3c48:	1e 00 78    	mov.w     [w14], w0
    3c4a:	be 00 90    	mov.w     [w14+6], w1
    3c4c:	21 00 98    	mov.w     w1, [w0+4]

00003c4e <.LSM51>:
    self->bit = bit;
    3c4e:	1e 00 78    	mov.w     [w14], w0
    3c50:	8e 48 90    	mov.b     [w14+8], w1
    3c52:	61 40 98    	mov.b     w1, [w0+6]

00003c54 <.LSM52>:
    self->annum = annum;
    3c54:	1e 00 78    	mov.w     [w14], w0
    3c56:	de 00 90    	mov.w     [w14+10], w1
    3c58:	41 00 98    	mov.w     w1, [w0+8]

00003c5a <.LSM53>:
    self->rpshift = rpshift;
    3c5a:	1e 00 78    	mov.w     [w14], w0
    3c5c:	ce 48 90    	mov.b     [w14+12], w1
    3c5e:	21 48 98    	mov.b     w1, [w0+10]

00003c60 <.LSM54>:
    self->rpnum = rpnum;
    3c60:	fe 00 90    	mov.w     [w14+14], w1
    3c62:	1e 00 78    	mov.w     [w14], w0
    3c64:	61 00 98    	mov.w     w1, [w0+12]

00003c66 <.LSM55>:
    self->rpor = rpor;
    3c66:	1e 00 78    	mov.w     [w14], w0
    3c68:	ce b8 97    	mov.w     [w14-8], w1
    3c6a:	71 00 98    	mov.w     w1, [w0+14]

00003c6c <.LSM56>:
    self->owner = NULL;
    3c6c:	1e 00 78    	mov.w     [w14], w0
    3c6e:	80 00 eb    	clr.w     w1
    3c70:	01 08 98    	mov.w     w1, [w0+16]

00003c72 <.LSM57>:
    self->write = NULL;
    3c72:	1e 00 78    	mov.w     [w14], w0
    3c74:	80 00 eb    	clr.w     w1
    3c76:	11 08 98    	mov.w     w1, [w0+18]

00003c78 <.LSM58>:
    self->read = NULL;
    3c78:	1e 00 78    	mov.w     [w14], w0
    3c7a:	80 00 eb    	clr.w     w1
    3c7c:	21 08 98    	mov.w     w1, [w0+20]

00003c7e <.LSM59>:
}
    3c7e:	00 80 fa    	ulnk      
    3c80:	00 00 06    	return    

00003c82 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    3c82:	02 00 fa    	lnk       #0x2
    3c84:	00 0f 78    	mov.w     w0, [w14]

00003c86 <.LSM61>:
    if (self->ans)
    3c86:	1e 00 78    	mov.w     [w14], w0
    3c88:	20 00 90    	mov.w     [w0+4], w0
    3c8a:	00 00 e0    	cp0.w     w0
    3c8c:	0d 00 32    	bra       Z, 0x3ca8 <.L14>

00003c8e <.LSM62>:
        bitclear(self->ans, self->bit);
    3c8e:	1e 00 78    	mov.w     [w14], w0
    3c90:	20 00 90    	mov.w     [w0+4], w0
    3c92:	9e 00 78    	mov.w     [w14], w1
    3c94:	a1 00 90    	mov.w     [w1+4], w1
    3c96:	11 01 78    	mov.w     [w1], w2
    3c98:	9e 00 78    	mov.w     [w14], w1
    3c9a:	e1 40 90    	mov.b     [w1+6], w1
    3c9c:	81 80 fb    	ze        w1, w1
    3c9e:	13 00 20    	mov.w     #0x1, w3
    3ca0:	81 18 dd    	sl.w      w3, w1, w1
    3ca2:	81 80 ea    	com.w     w1, w1
    3ca4:	81 00 61    	and.w     w2, w1, w1
    3ca6:	01 08 78    	mov.w     w1, [w0]

00003ca8 <.L14>:
    bitset(self->tris, self->bit);
    3ca8:	1e 00 78    	mov.w     [w14], w0
    3caa:	10 00 90    	mov.w     [w0+2], w0
    3cac:	9e 00 78    	mov.w     [w14], w1
    3cae:	91 00 90    	mov.w     [w1+2], w1
    3cb0:	11 01 78    	mov.w     [w1], w2
    3cb2:	9e 00 78    	mov.w     [w14], w1
    3cb4:	e1 40 90    	mov.b     [w1+6], w1
    3cb6:	81 80 fb    	ze        w1, w1
    3cb8:	13 00 20    	mov.w     #0x1, w3
    3cba:	81 18 dd    	sl.w      w3, w1, w1
    3cbc:	82 80 70    	ior.w     w1, w2, w1
    3cbe:	01 08 78    	mov.w     w1, [w0]

00003cc0 <.LSM64>:
    self->write = NULL;
    3cc0:	1e 00 78    	mov.w     [w14], w0
    3cc2:	80 00 eb    	clr.w     w1
    3cc4:	11 08 98    	mov.w     w1, [w0+18]

00003cc6 <.LSM65>:
    self->read = __digitalRead;    
    3cc6:	1e 00 78    	mov.w     [w14], w0
    3cc8:	41 9c 23    	mov.w     #0x39c4, w1
    3cca:	21 08 98    	mov.w     w1, [w0+20]

00003ccc <.LSM66>:
}
    3ccc:	00 80 fa    	ulnk      
    3cce:	00 00 06    	return    

00003cd0 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    3cd0:	02 00 fa    	lnk       #0x2
    3cd2:	00 0f 78    	mov.w     w0, [w14]

00003cd4 <.LSM68>:
    if (self->ans)
    3cd4:	1e 00 78    	mov.w     [w14], w0
    3cd6:	20 00 90    	mov.w     [w0+4], w0
    3cd8:	00 00 e0    	cp0.w     w0
    3cda:	0d 00 32    	bra       Z, 0x3cf6 <.L16>

00003cdc <.LSM69>:
        bitclear(self->ans, self->bit);
    3cdc:	1e 00 78    	mov.w     [w14], w0
    3cde:	20 00 90    	mov.w     [w0+4], w0
    3ce0:	9e 00 78    	mov.w     [w14], w1
    3ce2:	a1 00 90    	mov.w     [w1+4], w1
    3ce4:	11 01 78    	mov.w     [w1], w2
    3ce6:	9e 00 78    	mov.w     [w14], w1
    3ce8:	e1 40 90    	mov.b     [w1+6], w1
    3cea:	81 80 fb    	ze        w1, w1
    3cec:	13 00 20    	mov.w     #0x1, w3
    3cee:	81 18 dd    	sl.w      w3, w1, w1
    3cf0:	81 80 ea    	com.w     w1, w1
    3cf2:	81 00 61    	and.w     w2, w1, w1
    3cf4:	01 08 78    	mov.w     w1, [w0]

00003cf6 <.L16>:
    bitclear(self->port, self->bit);
    3cf6:	1e 00 78    	mov.w     [w14], w0
    3cf8:	10 00 78    	mov.w     [w0], w0
    3cfa:	9e 00 78    	mov.w     [w14], w1
    3cfc:	91 00 78    	mov.w     [w1], w1
    3cfe:	11 01 78    	mov.w     [w1], w2
    3d00:	9e 00 78    	mov.w     [w14], w1
    3d02:	e1 40 90    	mov.b     [w1+6], w1
    3d04:	81 80 fb    	ze        w1, w1
    3d06:	13 00 20    	mov.w     #0x1, w3
    3d08:	81 18 dd    	sl.w      w3, w1, w1
    3d0a:	81 80 ea    	com.w     w1, w1
    3d0c:	81 00 61    	and.w     w2, w1, w1
    3d0e:	01 08 78    	mov.w     w1, [w0]

00003d10 <.LSM71>:
    bitclear(self->tris, self->bit);
    3d10:	1e 00 78    	mov.w     [w14], w0
    3d12:	10 00 90    	mov.w     [w0+2], w0
    3d14:	9e 00 78    	mov.w     [w14], w1
    3d16:	91 00 90    	mov.w     [w1+2], w1
    3d18:	11 01 78    	mov.w     [w1], w2
    3d1a:	9e 00 78    	mov.w     [w14], w1
    3d1c:	e1 40 90    	mov.b     [w1+6], w1
    3d1e:	81 80 fb    	ze        w1, w1
    3d20:	13 00 20    	mov.w     #0x1, w3
    3d22:	81 18 dd    	sl.w      w3, w1, w1
    3d24:	81 80 ea    	com.w     w1, w1
    3d26:	81 00 61    	and.w     w2, w1, w1
    3d28:	01 08 78    	mov.w     w1, [w0]

00003d2a <.LSM72>:
    self->write = __digitalWrite;
    3d2a:	1e 00 78    	mov.w     [w14], w0
    3d2c:	01 98 23    	mov.w     #0x3980, w1
    3d2e:	11 08 98    	mov.w     w1, [w0+18]

00003d30 <.LSM73>:
    self->read = __digitalRead;
    3d30:	1e 00 78    	mov.w     [w14], w0
    3d32:	41 9c 23    	mov.w     #0x39c4, w1
    3d34:	21 08 98    	mov.w     w1, [w0+20]

00003d36 <.LSM74>:
}
    3d36:	00 80 fa    	ulnk      
    3d38:	00 00 06    	return    

00003d3a <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    3d3a:	02 00 fa    	lnk       #0x2
    3d3c:	00 0f 78    	mov.w     w0, [w14]

00003d3e <.LSM76>:
    if (!(self->ans))
    3d3e:	1e 00 78    	mov.w     [w14], w0
    3d40:	20 00 90    	mov.w     [w0+4], w0
    3d42:	00 00 e0    	cp0.w     w0
    3d44:	1f 00 32    	bra       Z, 0x3d84 <.L20>

00003d46 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    3d46:	1e 00 78    	mov.w     [w14], w0
    3d48:	10 00 90    	mov.w     [w0+2], w0
    3d4a:	9e 00 78    	mov.w     [w14], w1
    3d4c:	91 00 90    	mov.w     [w1+2], w1
    3d4e:	11 01 78    	mov.w     [w1], w2
    3d50:	9e 00 78    	mov.w     [w14], w1
    3d52:	e1 40 90    	mov.b     [w1+6], w1
    3d54:	81 80 fb    	ze        w1, w1
    3d56:	13 00 20    	mov.w     #0x1, w3
    3d58:	81 18 dd    	sl.w      w3, w1, w1
    3d5a:	82 80 70    	ior.w     w1, w2, w1
    3d5c:	01 08 78    	mov.w     w1, [w0]

00003d5e <.LSM78>:
    bitset(self->ans, self->bit);
    3d5e:	1e 00 78    	mov.w     [w14], w0
    3d60:	20 00 90    	mov.w     [w0+4], w0
    3d62:	9e 00 78    	mov.w     [w14], w1
    3d64:	a1 00 90    	mov.w     [w1+4], w1
    3d66:	11 01 78    	mov.w     [w1], w2
    3d68:	9e 00 78    	mov.w     [w14], w1
    3d6a:	e1 40 90    	mov.b     [w1+6], w1
    3d6c:	81 80 fb    	ze        w1, w1
    3d6e:	13 00 20    	mov.w     #0x1, w3
    3d70:	81 18 dd    	sl.w      w3, w1, w1
    3d72:	82 80 70    	ior.w     w1, w2, w1
    3d74:	01 08 78    	mov.w     w1, [w0]

00003d76 <.LSM79>:
    self->write = NULL;
    3d76:	1e 00 78    	mov.w     [w14], w0
    3d78:	80 00 eb    	clr.w     w1
    3d7a:	11 08 98    	mov.w     w1, [w0+18]

00003d7c <.LSM80>:
    self->read = __analogRead;
    3d7c:	1e 00 78    	mov.w     [w14], w0
    3d7e:	61 9e 23    	mov.w     #0x39e6, w1
    3d80:	21 08 98    	mov.w     w1, [w0+20]
    3d82:	01 00 37    	bra       0x3d86 <.L17>

00003d84 <.L20>:
    3d84:	00 00 00    	nop       

00003d86 <.L17>:
}
    3d86:	00 80 fa    	ulnk      
    3d88:	00 00 06    	return    

00003d8a <_pin_set>:

void pin_set(_PIN *self) {
    3d8a:	02 00 fa    	lnk       #0x2
    3d8c:	00 0f 78    	mov.w     w0, [w14]

00003d8e <.LSM84>:
    if (self->write==__digitalWrite)
    3d8e:	1e 00 78    	mov.w     [w14], w0
    3d90:	90 08 90    	mov.w     [w0+18], w1
    3d92:	00 98 23    	mov.w     #0x3980, w0
    3d94:	80 8f 50    	sub.w     w1, w0, [w15]
    3d96:	0c 00 3a    	bra       NZ, 0x3db0 <.L21>

00003d98 <.LSM85>:
        bitset(self->port, self->bit);
    3d98:	1e 00 78    	mov.w     [w14], w0
    3d9a:	10 00 78    	mov.w     [w0], w0
    3d9c:	9e 00 78    	mov.w     [w14], w1
    3d9e:	91 00 78    	mov.w     [w1], w1
    3da0:	11 01 78    	mov.w     [w1], w2
    3da2:	9e 00 78    	mov.w     [w14], w1
    3da4:	e1 40 90    	mov.b     [w1+6], w1
    3da6:	81 80 fb    	ze        w1, w1
    3da8:	13 00 20    	mov.w     #0x1, w3
    3daa:	81 18 dd    	sl.w      w3, w1, w1
    3dac:	82 80 70    	ior.w     w1, w2, w1
    3dae:	01 08 78    	mov.w     w1, [w0]

00003db0 <.L21>:
}
    3db0:	00 80 fa    	ulnk      
    3db2:	00 00 06    	return    

00003db4 <_pin_clear>:

void pin_clear(_PIN *self) {
    3db4:	02 00 fa    	lnk       #0x2
    3db6:	00 0f 78    	mov.w     w0, [w14]

00003db8 <.LSM88>:
    if (self->write==__digitalWrite)
    3db8:	1e 00 78    	mov.w     [w14], w0
    3dba:	90 08 90    	mov.w     [w0+18], w1
    3dbc:	00 98 23    	mov.w     #0x3980, w0
    3dbe:	80 8f 50    	sub.w     w1, w0, [w15]
    3dc0:	0d 00 3a    	bra       NZ, 0x3ddc <.L23>

00003dc2 <.LSM89>:
        bitclear(self->port, self->bit);
    3dc2:	1e 00 78    	mov.w     [w14], w0
    3dc4:	10 00 78    	mov.w     [w0], w0
    3dc6:	9e 00 78    	mov.w     [w14], w1
    3dc8:	91 00 78    	mov.w     [w1], w1
    3dca:	11 01 78    	mov.w     [w1], w2
    3dcc:	9e 00 78    	mov.w     [w14], w1
    3dce:	e1 40 90    	mov.b     [w1+6], w1
    3dd0:	81 80 fb    	ze        w1, w1
    3dd2:	13 00 20    	mov.w     #0x1, w3
    3dd4:	81 18 dd    	sl.w      w3, w1, w1
    3dd6:	81 80 ea    	com.w     w1, w1
    3dd8:	81 00 61    	and.w     w2, w1, w1
    3dda:	01 08 78    	mov.w     w1, [w0]

00003ddc <.L23>:
}
    3ddc:	00 80 fa    	ulnk      
    3dde:	00 00 06    	return    

00003de0 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    3de0:	02 00 fa    	lnk       #0x2
    3de2:	00 0f 78    	mov.w     w0, [w14]

00003de4 <.LSM92>:
    if (self->write==__digitalWrite)
    3de4:	1e 00 78    	mov.w     [w14], w0
    3de6:	90 08 90    	mov.w     [w0+18], w1
    3de8:	00 98 23    	mov.w     #0x3980, w0
    3dea:	80 8f 50    	sub.w     w1, w0, [w15]
    3dec:	0c 00 3a    	bra       NZ, 0x3e06 <.L25>

00003dee <.LSM93>:
        bitflip(self->port, self->bit);
    3dee:	1e 00 78    	mov.w     [w14], w0
    3df0:	10 00 78    	mov.w     [w0], w0
    3df2:	9e 00 78    	mov.w     [w14], w1
    3df4:	91 00 78    	mov.w     [w1], w1
    3df6:	11 01 78    	mov.w     [w1], w2
    3df8:	9e 00 78    	mov.w     [w14], w1
    3dfa:	e1 40 90    	mov.b     [w1+6], w1
    3dfc:	81 80 fb    	ze        w1, w1
    3dfe:	13 00 20    	mov.w     #0x1, w3
    3e00:	81 18 dd    	sl.w      w3, w1, w1
    3e02:	81 00 69    	xor.w     w2, w1, w1
    3e04:	01 08 78    	mov.w     w1, [w0]

00003e06 <.L25>:
}
    3e06:	00 80 fa    	ulnk      
    3e08:	00 00 06    	return    

00003e0a <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3e0a:	04 00 fa    	lnk       #0x4
    3e0c:	00 0f 78    	mov.w     w0, [w14]
    3e0e:	11 07 98    	mov.w     w1, [w14+2]

00003e10 <.LSM96>:
    if (self->write)
    3e10:	1e 00 78    	mov.w     [w14], w0
    3e12:	10 08 90    	mov.w     [w0+18], w0
    3e14:	00 00 e0    	cp0.w     w0
    3e16:	05 00 32    	bra       Z, 0x3e22 <.L27>

00003e18 <.LSM97>:
        self->write(self, val);
    3e18:	1e 00 78    	mov.w     [w14], w0
    3e1a:	10 09 90    	mov.w     [w0+18], w2
    3e1c:	9e 00 90    	mov.w     [w14+2], w1
    3e1e:	1e 00 78    	mov.w     [w14], w0
    3e20:	02 00 01    	call      w2

00003e22 <.L27>:
}
    3e22:	00 80 fa    	ulnk      
    3e24:	00 00 06    	return    

00003e26 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3e26:	02 00 fa    	lnk       #0x2
    3e28:	00 0f 78    	mov.w     w0, [w14]

00003e2a <.LSM100>:
    if (self->read)
    3e2a:	1e 00 78    	mov.w     [w14], w0
    3e2c:	20 08 90    	mov.w     [w0+20], w0
    3e2e:	00 00 e0    	cp0.w     w0
    3e30:	05 00 32    	bra       Z, 0x3e3c <.L30>

00003e32 <.LSM101>:
        return self->read(self);
    3e32:	1e 00 78    	mov.w     [w14], w0
    3e34:	a0 08 90    	mov.w     [w0+20], w1
    3e36:	1e 00 78    	mov.w     [w14], w0
    3e38:	01 00 01    	call      w1
    3e3a:	01 00 37    	bra       0x3e3e <.L31>

00003e3c <.L30>:
    else
        return 0xFFFF;
    3e3c:	00 80 eb    	setm.w    w0

00003e3e <.L31>:
}
    3e3e:	00 80 fa    	ulnk      
    3e40:	00 00 06    	return    

00003e42 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    3e42:	08 00 fa    	lnk       #0x8
    3e44:	30 07 98    	mov.w     w0, [w14+6]

00003e46 <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3e46:	3e 00 90    	mov.w     [w14+6], w0
    3e48:	00 08 90    	mov.w     [w0+16], w0
    3e4a:	00 0f 78    	mov.w     w0, [w14]

00003e4c <.LSM2>:
    temp.w[0] = 0;
    3e4c:	00 00 eb    	clr.w     w0
    3e4e:	10 07 98    	mov.w     w0, [w14+2]

00003e50 <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    3e50:	1e 00 78    	mov.w     [w14], w0
    3e52:	30 00 90    	mov.w     [w0+6], w0
    3e54:	10 00 78    	mov.w     [w0], w0
    3e56:	20 07 98    	mov.w     w0, [w14+4]

00003e58 <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    3e58:	1e 02 90    	mov.w     [w14+2], w4
    3e5a:	ae 02 90    	mov.w     [w14+4], w5
    3e5c:	1e 00 78    	mov.w     [w14], w0
    3e5e:	20 00 90    	mov.w     [w0+4], w0
    3e60:	10 00 78    	mov.w     [w0], w0
    3e62:	80 00 eb    	clr.w     w1
    3e64:	00 01 be    	mov.d     w0, w2
    3e66:	04 00 be    	mov.d     w4, w0
    3e68:	53 eb 07    	rcall     0x1510 <___udivsi3>
    3e6a:	00 00 78    	mov.w     w0, w0

00003e6c <.LSM5>:
}
    3e6c:	00 80 fa    	ulnk      
    3e6e:	00 00 06    	return    

00003e70 <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    3e70:	0a 00 fa    	lnk       #0xa
    3e72:	30 07 98    	mov.w     w0, [w14+6]
    3e74:	41 07 98    	mov.w     w1, [w14+8]

00003e76 <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3e76:	3e 00 90    	mov.w     [w14+6], w0
    3e78:	00 08 90    	mov.w     [w0+16], w0
    3e7a:	00 0f 78    	mov.w     w0, [w14]

00003e7c <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    3e7c:	4e 00 90    	mov.w     [w14+8], w0
    3e7e:	61 01 b8    	mul.uu    w0, #0x1, w2
    3e80:	1e 00 78    	mov.w     [w14], w0
    3e82:	20 00 90    	mov.w     [w0+4], w0
    3e84:	10 00 78    	mov.w     [w0], w0
    3e86:	80 00 eb    	clr.w     w1
    3e88:	00 9a b9    	mul.ss    w3, w0, w4
    3e8a:	04 02 78    	mov.w     w4, w4
    3e8c:	02 8b b9    	mul.ss    w1, w2, w6
    3e8e:	86 02 78    	mov.w     w6, w5
    3e90:	05 02 42    	add.w     w4, w5, w4
    3e92:	00 10 b8    	mul.uu    w2, w0, w0
    3e94:	01 02 42    	add.w     w4, w1, w4
    3e96:	84 00 78    	mov.w     w4, w1
    3e98:	10 07 98    	mov.w     w0, [w14+2]
    3e9a:	21 07 98    	mov.w     w1, [w14+4]

00003e9c <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    3e9c:	1e 00 78    	mov.w     [w14], w0
    3e9e:	30 00 90    	mov.w     [w0+6], w0
    3ea0:	ae 00 90    	mov.w     [w14+4], w1
    3ea2:	01 08 78    	mov.w     w1, [w0]

00003ea4 <.LSM10>:
}
    3ea4:	00 80 fa    	ulnk      
    3ea6:	00 00 06    	return    

00003ea8 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    3ea8:	08 00 fa    	lnk       #0x8
    3eaa:	30 07 98    	mov.w     w0, [w14+6]

00003eac <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3eac:	3e 00 90    	mov.w     [w14+6], w0
    3eae:	00 08 90    	mov.w     [w0+16], w0
    3eb0:	00 0f 78    	mov.w     w0, [w14]

00003eb2 <.LSM13>:
    temp.w[0] = 0;
    3eb2:	00 00 eb    	clr.w     w0
    3eb4:	10 07 98    	mov.w     w0, [w14+2]

00003eb6 <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    3eb6:	1e 00 78    	mov.w     [w14], w0
    3eb8:	20 00 90    	mov.w     [w0+4], w0
    3eba:	90 00 78    	mov.w     [w0], w1
    3ebc:	1e 00 78    	mov.w     [w14], w0
    3ebe:	60 00 90    	mov.w     [w0+12], w0
    3ec0:	00 80 50    	sub.w     w1, w0, w0
    3ec2:	20 07 98    	mov.w     w0, [w14+4]

00003ec4 <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    3ec4:	1e 02 90    	mov.w     [w14+2], w4
    3ec6:	ae 02 90    	mov.w     [w14+4], w5
    3ec8:	1e 00 78    	mov.w     [w14], w0
    3eca:	70 00 90    	mov.w     [w0+14], w0
    3ecc:	80 00 eb    	clr.w     w1
    3ece:	00 01 be    	mov.d     w0, w2
    3ed0:	04 00 be    	mov.d     w4, w0
    3ed2:	1e eb 07    	rcall     0x1510 <___udivsi3>
    3ed4:	00 00 78    	mov.w     w0, w0

00003ed6 <.LSM16>:
}
    3ed6:	00 80 fa    	ulnk      
    3ed8:	00 00 06    	return    

00003eda <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    3eda:	0a 00 fa    	lnk       #0xa
    3edc:	30 07 98    	mov.w     w0, [w14+6]
    3ede:	41 07 98    	mov.w     w1, [w14+8]

00003ee0 <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3ee0:	3e 00 90    	mov.w     [w14+6], w0
    3ee2:	00 08 90    	mov.w     [w0+16], w0
    3ee4:	00 0f 78    	mov.w     w0, [w14]

00003ee6 <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    3ee6:	4e 00 90    	mov.w     [w14+8], w0
    3ee8:	61 01 b8    	mul.uu    w0, #0x1, w2
    3eea:	1e 00 78    	mov.w     [w14], w0
    3eec:	70 00 90    	mov.w     [w0+14], w0
    3eee:	80 00 eb    	clr.w     w1
    3ef0:	00 9a b9    	mul.ss    w3, w0, w4
    3ef2:	04 02 78    	mov.w     w4, w4
    3ef4:	02 8b b9    	mul.ss    w1, w2, w6
    3ef6:	86 02 78    	mov.w     w6, w5
    3ef8:	05 02 42    	add.w     w4, w5, w4
    3efa:	00 10 b8    	mul.uu    w2, w0, w0
    3efc:	01 02 42    	add.w     w4, w1, w4
    3efe:	84 00 78    	mov.w     w4, w1
    3f00:	10 07 98    	mov.w     w0, [w14+2]
    3f02:	21 07 98    	mov.w     w1, [w14+4]

00003f04 <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    3f04:	1e 00 78    	mov.w     [w14], w0
    3f06:	20 00 90    	mov.w     [w0+4], w0
    3f08:	9e 00 78    	mov.w     [w14], w1
    3f0a:	61 01 90    	mov.w     [w1+12], w2
    3f0c:	ae 00 90    	mov.w     [w14+4], w1
    3f0e:	81 00 41    	add.w     w2, w1, w1
    3f10:	01 08 78    	mov.w     w1, [w0]

00003f12 <.LSM21>:
}
    3f12:	00 80 fa    	ulnk      
    3f14:	00 00 06    	return    

00003f16 <_init_oc>:

void init_oc(void) {
    3f16:	00 00 fa    	lnk       #0x0

00003f18 <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    3f18:	26 01 20    	mov.w     #0x12, w6
    3f1a:	85 19 20    	mov.w     #0x198, w5
    3f1c:	64 19 20    	mov.w     #0x196, w4
    3f1e:	43 19 20    	mov.w     #0x194, w3
    3f20:	22 19 20    	mov.w     #0x192, w2
    3f22:	01 19 20    	mov.w     #0x190, w1
    3f24:	e0 30 21    	mov.w     #0x130e, w0
    3f26:	42 00 07    	rcall     0x3fac <_oc_init>

00003f28 <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    3f28:	36 01 20    	mov.w     #0x13, w6
    3f2a:	25 1a 20    	mov.w     #0x1a2, w5
    3f2c:	04 1a 20    	mov.w     #0x1a0, w4
    3f2e:	e3 19 20    	mov.w     #0x19e, w3
    3f30:	c2 19 20    	mov.w     #0x19c, w2
    3f32:	a1 19 20    	mov.w     #0x19a, w1
    3f34:	00 32 21    	mov.w     #0x1320, w0
    3f36:	3a 00 07    	rcall     0x3fac <_oc_init>

00003f38 <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    3f38:	46 01 20    	mov.w     #0x14, w6
    3f3a:	c5 1a 20    	mov.w     #0x1ac, w5
    3f3c:	a4 1a 20    	mov.w     #0x1aa, w4
    3f3e:	83 1a 20    	mov.w     #0x1a8, w3
    3f40:	62 1a 20    	mov.w     #0x1a6, w2
    3f42:	41 1a 20    	mov.w     #0x1a4, w1
    3f44:	20 33 21    	mov.w     #0x1332, w0
    3f46:	32 00 07    	rcall     0x3fac <_oc_init>

00003f48 <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    3f48:	56 01 20    	mov.w     #0x15, w6
    3f4a:	65 1b 20    	mov.w     #0x1b6, w5
    3f4c:	44 1b 20    	mov.w     #0x1b4, w4
    3f4e:	23 1b 20    	mov.w     #0x1b2, w3
    3f50:	02 1b 20    	mov.w     #0x1b0, w2
    3f52:	e1 1a 20    	mov.w     #0x1ae, w1
    3f54:	40 34 21    	mov.w     #0x1344, w0
    3f56:	2a 00 07    	rcall     0x3fac <_oc_init>

00003f58 <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    3f58:	66 01 20    	mov.w     #0x16, w6
    3f5a:	05 1c 20    	mov.w     #0x1c0, w5
    3f5c:	e4 1b 20    	mov.w     #0x1be, w4
    3f5e:	c3 1b 20    	mov.w     #0x1bc, w3
    3f60:	a2 1b 20    	mov.w     #0x1ba, w2
    3f62:	81 1b 20    	mov.w     #0x1b8, w1
    3f64:	60 35 21    	mov.w     #0x1356, w0
    3f66:	22 00 07    	rcall     0x3fac <_oc_init>

00003f68 <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    3f68:	76 01 20    	mov.w     #0x17, w6
    3f6a:	a5 1c 20    	mov.w     #0x1ca, w5
    3f6c:	84 1c 20    	mov.w     #0x1c8, w4
    3f6e:	63 1c 20    	mov.w     #0x1c6, w3
    3f70:	42 1c 20    	mov.w     #0x1c4, w2
    3f72:	21 1c 20    	mov.w     #0x1c2, w1
    3f74:	80 36 21    	mov.w     #0x1368, w0
    3f76:	1a 00 07    	rcall     0x3fac <_oc_init>

00003f78 <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    3f78:	86 01 20    	mov.w     #0x18, w6
    3f7a:	45 1d 20    	mov.w     #0x1d4, w5
    3f7c:	24 1d 20    	mov.w     #0x1d2, w4
    3f7e:	03 1d 20    	mov.w     #0x1d0, w3
    3f80:	e2 1c 20    	mov.w     #0x1ce, w2
    3f82:	c1 1c 20    	mov.w     #0x1cc, w1
    3f84:	a0 37 21    	mov.w     #0x137a, w0
    3f86:	12 00 07    	rcall     0x3fac <_oc_init>

00003f88 <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    3f88:	96 01 20    	mov.w     #0x19, w6
    3f8a:	e5 1d 20    	mov.w     #0x1de, w5
    3f8c:	c4 1d 20    	mov.w     #0x1dc, w4
    3f8e:	a3 1d 20    	mov.w     #0x1da, w3
    3f90:	82 1d 20    	mov.w     #0x1d8, w2
    3f92:	61 1d 20    	mov.w     #0x1d6, w1
    3f94:	c0 38 21    	mov.w     #0x138c, w0
    3f96:	0a 00 07    	rcall     0x3fac <_oc_init>

00003f98 <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    3f98:	36 02 20    	mov.w     #0x23, w6
    3f9a:	85 1e 20    	mov.w     #0x1e8, w5
    3f9c:	64 1e 20    	mov.w     #0x1e6, w4
    3f9e:	43 1e 20    	mov.w     #0x1e4, w3
    3fa0:	22 1e 20    	mov.w     #0x1e2, w2
    3fa2:	01 1e 20    	mov.w     #0x1e0, w1
    3fa4:	e0 39 21    	mov.w     #0x139e, w0
    3fa6:	02 00 07    	rcall     0x3fac <_oc_init>

00003fa8 <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    3fa8:	00 80 fa    	ulnk      
    3faa:	00 00 06    	return    

00003fac <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    3fac:	0e 00 fa    	lnk       #0xe
    3fae:	00 0f 78    	mov.w     w0, [w14]
    3fb0:	11 07 98    	mov.w     w1, [w14+2]
    3fb2:	22 07 98    	mov.w     w2, [w14+4]
    3fb4:	33 07 98    	mov.w     w3, [w14+6]
    3fb6:	44 07 98    	mov.w     w4, [w14+8]
    3fb8:	55 07 98    	mov.w     w5, [w14+10]
    3fba:	66 07 98    	mov.w     w6, [w14+12]

00003fbc <.LSM34>:
    self->OCxCON1 = OCxCON1;
    3fbc:	1e 00 78    	mov.w     [w14], w0
    3fbe:	9e 00 90    	mov.w     [w14+2], w1
    3fc0:	01 08 78    	mov.w     w1, [w0]

00003fc2 <.LSM35>:
    self->OCxCON2 = OCxCON2;
    3fc2:	1e 00 78    	mov.w     [w14], w0
    3fc4:	ae 00 90    	mov.w     [w14+4], w1
    3fc6:	11 00 98    	mov.w     w1, [w0+2]

00003fc8 <.LSM36>:
    self->OCxRS = OCxRS;
    3fc8:	1e 00 78    	mov.w     [w14], w0
    3fca:	be 00 90    	mov.w     [w14+6], w1
    3fcc:	21 00 98    	mov.w     w1, [w0+4]

00003fce <.LSM37>:
    self->OCxR = OCxR;
    3fce:	1e 00 78    	mov.w     [w14], w0
    3fd0:	ce 00 90    	mov.w     [w14+8], w1
    3fd2:	31 00 98    	mov.w     w1, [w0+6]

00003fd4 <.LSM38>:
    self->OCxTMR = OCxTMR;
    3fd4:	1e 00 78    	mov.w     [w14], w0
    3fd6:	de 00 90    	mov.w     [w14+10], w1
    3fd8:	41 00 98    	mov.w     w1, [w0+8]

00003fda <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    3fda:	1e 00 78    	mov.w     [w14], w0
    3fdc:	01 e8 23    	mov.w     #0x3e80, w1
    3fde:	61 00 98    	mov.w     w1, [w0+12]

00003fe0 <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    3fe0:	1e 00 78    	mov.w     [w14], w0
    3fe2:	01 e8 23    	mov.w     #0x3e80, w1
    3fe4:	71 00 98    	mov.w     w1, [w0+14]

00003fe6 <.LSM41>:
    self->rpnum = rpnum;
    3fe6:	1e 00 78    	mov.w     [w14], w0
    3fe8:	ee 00 90    	mov.w     [w14+12], w1
    3fea:	51 00 98    	mov.w     w1, [w0+10]

00003fec <.LSM42>:
    self->pin = NULL;
    3fec:	1e 00 78    	mov.w     [w14], w0
    3fee:	80 00 eb    	clr.w     w1
    3ff0:	01 08 98    	mov.w     w1, [w0+16]

00003ff2 <.LSM43>:
}
    3ff2:	00 80 fa    	ulnk      
    3ff4:	00 00 06    	return    

00003ff6 <_oc_free>:

void oc_free(_OC *self) {
    3ff6:	02 00 fa    	lnk       #0x2
    3ff8:	00 0f 78    	mov.w     w0, [w14]

00003ffa <.LSM45>:
    *(self->OCxCON1) = 0;
    3ffa:	1e 00 78    	mov.w     [w14], w0
    3ffc:	10 00 78    	mov.w     [w0], w0
    3ffe:	80 00 eb    	clr.w     w1
    4000:	01 08 78    	mov.w     w1, [w0]

00004002 <.LSM46>:
    *(self->OCxCON2) = 0;
    4002:	1e 00 78    	mov.w     [w14], w0
    4004:	10 00 90    	mov.w     [w0+2], w0
    4006:	80 00 eb    	clr.w     w1
    4008:	01 08 78    	mov.w     w1, [w0]

0000400a <.LSM47>:
    if (self->pin) {
    400a:	1e 00 78    	mov.w     [w14], w0
    400c:	00 08 90    	mov.w     [w0+16], w0
    400e:	00 00 e0    	cp0.w     w0
    4010:	2f 00 32    	bra       Z, 0x4070 <.L7>

00004012 <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    4012:	11 3a 80    	mov.w     0x742, w1
    4014:	f0 0b 20    	mov.w     #0xbf, w0
    4016:	00 81 60    	and.w     w1, w0, w2
    4018:	60 04 20    	mov.w     #0x46, w0
    401a:	71 05 20    	mov.w     #0x57, w1
    401c:	23 74 20    	mov.w     #0x742, w3
    401e:	80 49 78    	mov.b     w0, [w3]
    4020:	81 49 78    	mov.b     w1, [w3]
    4022:	82 49 78    	mov.b     w2, [w3]

00004024 <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    4024:	1e 00 78    	mov.w     [w14], w0
    4026:	00 08 90    	mov.w     [w0+16], w0
    4028:	70 00 90    	mov.w     [w0+14], w0
    402a:	9e 00 78    	mov.w     [w14], w1
    402c:	81 08 90    	mov.w     [w1+16], w1
    402e:	f1 00 90    	mov.w     [w1+14], w1
    4030:	11 01 78    	mov.w     [w1], w2
    4032:	9e 00 78    	mov.w     [w14], w1
    4034:	81 08 90    	mov.w     [w1+16], w1
    4036:	a1 48 90    	mov.b     [w1+10], w1
    4038:	81 80 fb    	ze        w1, w1
    403a:	f3 03 20    	mov.w     #0x3f, w3
    403c:	81 18 dd    	sl.w      w3, w1, w1
    403e:	81 80 ea    	com.w     w1, w1
    4040:	81 00 61    	and.w     w2, w1, w1
    4042:	01 08 78    	mov.w     w1, [w0]

00004044 <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    4044:	11 3a 80    	mov.w     0x742, w1
    4046:	00 04 20    	mov.w     #0x40, w0
    4048:	01 01 70    	ior.w     w0, w1, w2
    404a:	60 04 20    	mov.w     #0x46, w0
    404c:	71 05 20    	mov.w     #0x57, w1
    404e:	23 74 20    	mov.w     #0x742, w3
    4050:	80 49 78    	mov.b     w0, [w3]
    4052:	81 49 78    	mov.b     w1, [w3]
    4054:	82 49 78    	mov.b     w2, [w3]

00004056 <.LSM51>:
        self->pin->owner = NULL;
    4056:	1e 00 78    	mov.w     [w14], w0
    4058:	00 08 90    	mov.w     [w0+16], w0
    405a:	80 00 eb    	clr.w     w1
    405c:	01 08 98    	mov.w     w1, [w0+16]

0000405e <.LSM52>:
        pin_digitalOut(self->pin);
    405e:	1e 00 78    	mov.w     [w14], w0
    4060:	00 08 90    	mov.w     [w0+16], w0
    4062:	36 fe 07    	rcall     0x3cd0 <_pin_digitalOut>

00004064 <.LSM53>:
        pin_clear(self->pin);
    4064:	1e 00 78    	mov.w     [w14], w0
    4066:	00 08 90    	mov.w     [w0+16], w0
    4068:	a5 fe 07    	rcall     0x3db4 <_pin_clear>

0000406a <.LSM54>:
        self->pin = NULL;
    406a:	1e 00 78    	mov.w     [w14], w0
    406c:	80 00 eb    	clr.w     w1
    406e:	01 08 98    	mov.w     w1, [w0+16]

00004070 <.L7>:
    }
}
    4070:	00 80 fa    	ulnk      
    4072:	00 00 06    	return    

00004074 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    4074:	10 00 fa    	lnk       #0x10
    4076:	88 1f 78    	mov.w     w8, [w15++]
    4078:	20 07 98    	mov.w     w0, [w14+4]
    407a:	31 07 98    	mov.w     w1, [w14+6]
    407c:	42 07 98    	mov.w     w2, [w14+8]
    407e:	54 07 98    	mov.w     w4, [w14+10]
    4080:	65 07 98    	mov.w     w5, [w14+12]
    4082:	73 07 98    	mov.w     w3, [w14+14]

00004084 <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    4084:	3e 00 90    	mov.w     [w14+6], w0
    4086:	60 00 90    	mov.w     [w0+12], w0
    4088:	e1 0f 40    	add.w     w0, #0x1, [w15]
    408a:	9c 00 32    	bra       Z, 0x41c4 <.L18>

0000408c <.LSM58>:
        return;
    if (pin->owner==NULL) {
    408c:	3e 00 90    	mov.w     [w14+6], w0
    408e:	00 08 90    	mov.w     [w0+16], w0
    4090:	00 00 e0    	cp0.w     w0
    4092:	33 00 3a    	bra       NZ, 0x40fa <.L12>

00004094 <.LSM59>:
        self->pin = pin;
    4094:	2e 00 90    	mov.w     [w14+4], w0
    4096:	be 00 90    	mov.w     [w14+6], w1
    4098:	01 08 98    	mov.w     w1, [w0+16]

0000409a <.LSM60>:
        pin->owner = (void *)self;
    409a:	3e 00 90    	mov.w     [w14+6], w0
    409c:	ae 00 90    	mov.w     [w14+4], w1
    409e:	01 08 98    	mov.w     w1, [w0+16]

000040a0 <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    40a0:	11 3a 80    	mov.w     0x742, w1
    40a2:	f0 0b 20    	mov.w     #0xbf, w0
    40a4:	00 81 60    	and.w     w1, w0, w2
    40a6:	60 04 20    	mov.w     #0x46, w0
    40a8:	71 05 20    	mov.w     #0x57, w1
    40aa:	23 74 20    	mov.w     #0x742, w3
    40ac:	80 49 78    	mov.b     w0, [w3]
    40ae:	81 49 78    	mov.b     w1, [w3]
    40b0:	82 49 78    	mov.b     w2, [w3]

000040b2 <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    40b2:	3e 00 90    	mov.w     [w14+6], w0
    40b4:	70 00 90    	mov.w     [w0+14], w0
    40b6:	be 00 90    	mov.w     [w14+6], w1
    40b8:	f1 00 90    	mov.w     [w1+14], w1
    40ba:	11 01 78    	mov.w     [w1], w2
    40bc:	be 00 90    	mov.w     [w14+6], w1
    40be:	a1 48 90    	mov.b     [w1+10], w1
    40c0:	81 80 fb    	ze        w1, w1
    40c2:	f3 03 20    	mov.w     #0x3f, w3
    40c4:	81 18 dd    	sl.w      w3, w1, w1
    40c6:	81 80 ea    	com.w     w1, w1
    40c8:	81 00 61    	and.w     w2, w1, w1
    40ca:	01 08 78    	mov.w     w1, [w0]

000040cc <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    40cc:	3e 00 90    	mov.w     [w14+6], w0
    40ce:	70 00 90    	mov.w     [w0+14], w0
    40d0:	be 00 90    	mov.w     [w14+6], w1
    40d2:	f1 00 90    	mov.w     [w1+14], w1
    40d4:	11 01 78    	mov.w     [w1], w2
    40d6:	ae 00 90    	mov.w     [w14+4], w1
    40d8:	d1 01 90    	mov.w     [w1+10], w3
    40da:	be 00 90    	mov.w     [w14+6], w1
    40dc:	a1 48 90    	mov.b     [w1+10], w1
    40de:	81 80 fb    	ze        w1, w1
    40e0:	81 18 dd    	sl.w      w3, w1, w1
    40e2:	82 80 70    	ior.w     w1, w2, w1
    40e4:	01 08 78    	mov.w     w1, [w0]

000040e6 <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    40e6:	11 3a 80    	mov.w     0x742, w1
    40e8:	00 04 20    	mov.w     #0x40, w0
    40ea:	01 01 70    	ior.w     w0, w1, w2
    40ec:	60 04 20    	mov.w     #0x46, w0
    40ee:	71 05 20    	mov.w     #0x57, w1
    40f0:	23 74 20    	mov.w     #0x742, w3
    40f2:	80 49 78    	mov.b     w0, [w3]
    40f4:	81 49 78    	mov.b     w1, [w3]
    40f6:	82 49 78    	mov.b     w2, [w3]
    40f8:	05 00 37    	bra       0x4104 <.L13>

000040fa <.L12>:
    } else if (pin->owner!=(void *)self) {
    40fa:	3e 00 90    	mov.w     [w14+6], w0
    40fc:	80 08 90    	mov.w     [w0+16], w1
    40fe:	2e 00 90    	mov.w     [w14+4], w0
    4100:	80 8f 50    	sub.w     w1, w0, [w15]
    4102:	62 00 3a    	bra       NZ, 0x41c8 <.L19>

00004104 <.L13>:
        return;
    }
    if (timer) {
    4104:	4e 00 90    	mov.w     [w14+8], w0
    4106:	00 00 e0    	cp0.w     w0
    4108:	1c 00 32    	bra       Z, 0x4142 <.L14>

0000410a <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    410a:	2e 00 90    	mov.w     [w14+4], w0
    410c:	10 00 78    	mov.w     [w0], w0
    410e:	ce 00 90    	mov.w     [w14+8], w1
    4110:	e1 00 90    	mov.w     [w1+12], w1
    4112:	ca 08 dd    	sl.w      w1, #0xa, w1
    4114:	61 00 b3    	ior.w     #0x6, w1
    4116:	01 08 78    	mov.w     w1, [w0]

00004118 <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    4118:	2e 00 90    	mov.w     [w14+4], w0
    411a:	10 00 90    	mov.w     [w0+2], w0
    411c:	f1 01 20    	mov.w     #0x1f, w1
    411e:	01 08 78    	mov.w     w1, [w0]

00004120 <.LSM69>:
        timer_setFreq(timer, freq);
    4120:	5e 01 90    	mov.w     [w14+10], w2
    4122:	ee 01 90    	mov.w     [w14+12], w3
    4124:	4e 00 90    	mov.w     [w14+8], w0
    4126:	47 fb 07    	rcall     0x37b6 <_timer_setFreq>

00004128 <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    4128:	2e 00 90    	mov.w     [w14+4], w0
    412a:	20 00 90    	mov.w     [w0+4], w0
    412c:	ce 00 90    	mov.w     [w14+8], w1
    412e:	91 00 90    	mov.w     [w1+2], w1
    4130:	91 00 78    	mov.w     [w1], w1
    4132:	01 08 78    	mov.w     w1, [w0]

00004134 <.LSM71>:
        *(self->OCxTMR) = 0;
    4134:	2e 00 90    	mov.w     [w14+4], w0
    4136:	40 00 90    	mov.w     [w0+8], w0
    4138:	80 00 eb    	clr.w     w1
    413a:	01 08 78    	mov.w     w1, [w0]

0000413c <.LSM72>:
        timer_start(timer);
    413c:	4e 00 90    	mov.w     [w14+8], w0
    413e:	70 fb 07    	rcall     0x3820 <_timer_start>
    4140:	25 00 37    	bra       0x418c <.L15>

00004142 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    4142:	2e 00 90    	mov.w     [w14+4], w0
    4144:	10 00 78    	mov.w     [w0], w0
    4146:	61 c0 21    	mov.w     #0x1c06, w1
    4148:	01 08 78    	mov.w     w1, [w0]

0000414a <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    414a:	2e 00 90    	mov.w     [w14+4], w0
    414c:	10 00 90    	mov.w     [w0+2], w0
    414e:	f1 01 20    	mov.w     #0x1f, w1
    4150:	01 08 78    	mov.w     w1, [w0]

00004152 <.LSM75>:
        if (freq<(FCY/65536.))
    4152:	18 c0 b3    	mov.b     #0x1, w8
    4154:	02 40 22    	mov.w     #0x2400, w2
    4156:	43 37 24    	mov.w     #0x4374, w3
    4158:	5e 00 90    	mov.w     [w14+10], w0
    415a:	ee 00 90    	mov.w     [w14+12], w1
    415c:	31 e9 07    	rcall     0x13c0 <___eqsf2>
    415e:	00 00 e0    	cp0.w     w0
    4160:	01 00 35    	bra       LT, 0x4164 <.L16>
    4162:	00 44 eb    	clr.b     w8

00004164 <.L16>:
    4164:	08 04 e0    	cp0.b     w8
    4166:	05 00 32    	bra       Z, 0x4172 <.L17>

00004168 <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    4168:	2e 00 90    	mov.w     [w14+4], w0
    416a:	20 00 90    	mov.w     [w0+4], w0
    416c:	80 80 eb    	setm.w    w1
    416e:	01 08 78    	mov.w     w1, [w0]
    4170:	0d 00 37    	bra       0x418c <.L15>

00004172 <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    4172:	2e 00 90    	mov.w     [w14+4], w0
    4174:	20 04 90    	mov.w     [w0+4], w8
    4176:	5e 01 90    	mov.w     [w14+10], w2
    4178:	ee 01 90    	mov.w     [w14+12], w3
    417a:	00 40 22    	mov.w     #0x2400, w0
    417c:	41 b7 24    	mov.w     #0x4b74, w1
    417e:	de e8 07    	rcall     0x133c <___divsf3>
    4180:	02 00 20    	mov.w     #0x0, w2
    4182:	03 f8 23    	mov.w     #0x3f80, w3
    4184:	7d e8 07    	rcall     0x1280 <___subsf3>
    4186:	20 e9 07    	rcall     0x13c8 <___fixunssfsi>
    4188:	00 00 78    	mov.w     w0, w0
    418a:	00 0c 78    	mov.w     w0, [w8]

0000418c <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    418c:	7e 00 90    	mov.w     [w14+14], w0
    418e:	61 01 b8    	mul.uu    w0, #0x1, w2
    4190:	2e 00 90    	mov.w     [w14+4], w0
    4192:	20 00 90    	mov.w     [w0+4], w0
    4194:	10 00 78    	mov.w     [w0], w0
    4196:	80 00 eb    	clr.w     w1
    4198:	00 9a b9    	mul.ss    w3, w0, w4
    419a:	04 02 78    	mov.w     w4, w4
    419c:	02 8b b9    	mul.ss    w1, w2, w6
    419e:	86 02 78    	mov.w     w6, w5
    41a0:	05 02 42    	add.w     w4, w5, w4
    41a2:	00 10 b8    	mul.uu    w2, w0, w0
    41a4:	01 02 42    	add.w     w4, w1, w4
    41a6:	84 00 78    	mov.w     w4, w1
    41a8:	00 8f be    	mov.d     w0, [w14]

000041aa <.LSM79>:
    *(self->OCxR) = temp.w[1];
    41aa:	2e 00 90    	mov.w     [w14+4], w0
    41ac:	30 00 90    	mov.w     [w0+6], w0
    41ae:	9e 00 90    	mov.w     [w14+2], w1
    41b0:	01 08 78    	mov.w     w1, [w0]

000041b2 <.LSM80>:
    self->pin->write = __pwmWrite;
    41b2:	2e 00 90    	mov.w     [w14+4], w0
    41b4:	00 08 90    	mov.w     [w0+16], w0
    41b6:	01 e7 23    	mov.w     #0x3e70, w1
    41b8:	11 08 98    	mov.w     w1, [w0+18]

000041ba <.LSM81>:
    self->pin->read = __pwmRead;
    41ba:	2e 00 90    	mov.w     [w14+4], w0
    41bc:	00 08 90    	mov.w     [w0+16], w0
    41be:	21 e4 23    	mov.w     #0x3e42, w1
    41c0:	21 08 98    	mov.w     w1, [w0+20]
    41c2:	03 00 37    	bra       0x41ca <.L9>

000041c4 <.L18>:
    41c4:	00 00 00    	nop       
    41c6:	01 00 37    	bra       0x41ca <.L9>

000041c8 <.L19>:
    41c8:	00 00 00    	nop       

000041ca <.L9>:
}
    41ca:	4f 04 78    	mov.w     [--w15], w8
    41cc:	00 80 fa    	ulnk      
    41ce:	00 00 06    	return    

000041d0 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    41d0:	14 00 fa    	lnk       #0x14
    41d2:	20 07 98    	mov.w     w0, [w14+4]
    41d4:	31 07 98    	mov.w     w1, [w14+6]
    41d6:	42 07 98    	mov.w     w2, [w14+8]
    41d8:	54 07 98    	mov.w     w4, [w14+10]
    41da:	65 07 98    	mov.w     w5, [w14+12]
    41dc:	76 07 98    	mov.w     w6, [w14+14]
    41de:	07 0f 98    	mov.w     w7, [w14+16]
    41e0:	13 0f 98    	mov.w     w3, [w14+18]

000041e2 <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    41e2:	3e 00 90    	mov.w     [w14+6], w0
    41e4:	60 00 90    	mov.w     [w0+12], w0
    41e6:	e1 0f 40    	add.w     w0, #0x1, [w15]
    41e8:	87 00 32    	bra       Z, 0x42f8 <.L25>

000041ea <.LSM87>:
        return;
    if (pin->owner==NULL) {
    41ea:	3e 00 90    	mov.w     [w14+6], w0
    41ec:	00 08 90    	mov.w     [w0+16], w0
    41ee:	00 00 e0    	cp0.w     w0
    41f0:	33 00 3a    	bra       NZ, 0x4258 <.L23>

000041f2 <.LSM88>:
        self->pin = pin;
    41f2:	2e 00 90    	mov.w     [w14+4], w0
    41f4:	be 00 90    	mov.w     [w14+6], w1
    41f6:	01 08 98    	mov.w     w1, [w0+16]

000041f8 <.LSM89>:
        pin->owner = (void *)self;
    41f8:	3e 00 90    	mov.w     [w14+6], w0
    41fa:	ae 00 90    	mov.w     [w14+4], w1
    41fc:	01 08 98    	mov.w     w1, [w0+16]

000041fe <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    41fe:	11 3a 80    	mov.w     0x742, w1
    4200:	f0 0b 20    	mov.w     #0xbf, w0
    4202:	00 81 60    	and.w     w1, w0, w2
    4204:	60 04 20    	mov.w     #0x46, w0
    4206:	71 05 20    	mov.w     #0x57, w1
    4208:	23 74 20    	mov.w     #0x742, w3
    420a:	80 49 78    	mov.b     w0, [w3]
    420c:	81 49 78    	mov.b     w1, [w3]
    420e:	82 49 78    	mov.b     w2, [w3]

00004210 <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    4210:	3e 00 90    	mov.w     [w14+6], w0
    4212:	70 00 90    	mov.w     [w0+14], w0
    4214:	be 00 90    	mov.w     [w14+6], w1
    4216:	f1 00 90    	mov.w     [w1+14], w1
    4218:	11 01 78    	mov.w     [w1], w2
    421a:	be 00 90    	mov.w     [w14+6], w1
    421c:	a1 48 90    	mov.b     [w1+10], w1
    421e:	81 80 fb    	ze        w1, w1
    4220:	f3 03 20    	mov.w     #0x3f, w3
    4222:	81 18 dd    	sl.w      w3, w1, w1
    4224:	81 80 ea    	com.w     w1, w1
    4226:	81 00 61    	and.w     w2, w1, w1
    4228:	01 08 78    	mov.w     w1, [w0]

0000422a <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    422a:	3e 00 90    	mov.w     [w14+6], w0
    422c:	70 00 90    	mov.w     [w0+14], w0
    422e:	be 00 90    	mov.w     [w14+6], w1
    4230:	f1 00 90    	mov.w     [w1+14], w1
    4232:	11 01 78    	mov.w     [w1], w2
    4234:	ae 00 90    	mov.w     [w14+4], w1
    4236:	d1 01 90    	mov.w     [w1+10], w3
    4238:	be 00 90    	mov.w     [w14+6], w1
    423a:	a1 48 90    	mov.b     [w1+10], w1
    423c:	81 80 fb    	ze        w1, w1
    423e:	81 18 dd    	sl.w      w3, w1, w1
    4240:	82 80 70    	ior.w     w1, w2, w1
    4242:	01 08 78    	mov.w     w1, [w0]

00004244 <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    4244:	11 3a 80    	mov.w     0x742, w1
    4246:	00 04 20    	mov.w     #0x40, w0
    4248:	01 01 70    	ior.w     w0, w1, w2
    424a:	60 04 20    	mov.w     #0x46, w0
    424c:	71 05 20    	mov.w     #0x57, w1
    424e:	23 74 20    	mov.w     #0x742, w3
    4250:	80 49 78    	mov.b     w0, [w3]
    4252:	81 49 78    	mov.b     w1, [w3]
    4254:	82 49 78    	mov.b     w2, [w3]
    4256:	05 00 37    	bra       0x4262 <.L24>

00004258 <.L23>:
    } else if (pin->owner!=(void *)self) {
    4258:	3e 00 90    	mov.w     [w14+6], w0
    425a:	80 08 90    	mov.w     [w0+16], w1
    425c:	2e 00 90    	mov.w     [w14+4], w0
    425e:	80 8f 50    	sub.w     w1, w0, [w15]
    4260:	4d 00 3a    	bra       NZ, 0x42fc <.L26>

00004262 <.L24>:
        return;
    }
    if (timer) {
    4262:	4e 00 90    	mov.w     [w14+8], w0
    4264:	00 00 e0    	cp0.w     w0
    4266:	4b 00 32    	bra       Z, 0x42fe <.L20>

00004268 <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    4268:	02 40 22    	mov.w     #0x2400, w2
    426a:	43 b7 24    	mov.w     #0x4b74, w3
    426c:	7e 00 90    	mov.w     [w14+14], w0
    426e:	8e 08 90    	mov.w     [w14+16], w1
    4270:	1b e9 07    	rcall     0x14a8 <___mulsf3>
    4272:	aa e8 07    	rcall     0x13c8 <___fixunssfsi>
    4274:	80 00 78    	mov.w     w0, w1
    4276:	2e 00 90    	mov.w     [w14+4], w0
    4278:	61 00 98    	mov.w     w1, [w0+12]

0000427a <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    427a:	7e 01 90    	mov.w     [w14+14], w2
    427c:	8e 09 90    	mov.w     [w14+16], w3
    427e:	3e b8 97    	mov.w     [w14-10], w0
    4280:	ce b8 97    	mov.w     [w14-8], w1
    4282:	fe e7 07    	rcall     0x1280 <___subsf3>
    4284:	02 40 22    	mov.w     #0x2400, w2
    4286:	43 b7 24    	mov.w     #0x4b74, w3
    4288:	0f e9 07    	rcall     0x14a8 <___mulsf3>
    428a:	9e e8 07    	rcall     0x13c8 <___fixunssfsi>
    428c:	80 00 78    	mov.w     w0, w1
    428e:	2e 00 90    	mov.w     [w14+4], w0
    4290:	71 00 98    	mov.w     w1, [w0+14]

00004292 <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    4292:	2e 00 90    	mov.w     [w14+4], w0
    4294:	10 00 78    	mov.w     [w0], w0
    4296:	f1 c0 21    	mov.w     #0x1c0f, w1
    4298:	01 08 78    	mov.w     w1, [w0]

0000429a <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    429a:	2e 00 90    	mov.w     [w14+4], w0
    429c:	10 00 90    	mov.w     [w0+2], w0
    429e:	ce 00 90    	mov.w     [w14+8], w1
    42a0:	71 01 90    	mov.w     [w1+14], w2
    42a2:	01 08 20    	mov.w     #0x80, w1
    42a4:	82 80 70    	ior.w     w1, w2, w1
    42a6:	01 08 78    	mov.w     w1, [w0]

000042a8 <.LSM100>:
        *(self->OCxR) = 1;
    42a8:	2e 00 90    	mov.w     [w14+4], w0
    42aa:	30 00 90    	mov.w     [w0+6], w0
    42ac:	11 00 20    	mov.w     #0x1, w1
    42ae:	01 08 78    	mov.w     w1, [w0]

000042b0 <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    42b0:	1e 08 90    	mov.w     [w14+18], w0
    42b2:	61 01 b8    	mul.uu    w0, #0x1, w2
    42b4:	2e 00 90    	mov.w     [w14+4], w0
    42b6:	70 00 90    	mov.w     [w0+14], w0
    42b8:	80 00 eb    	clr.w     w1
    42ba:	00 9a b9    	mul.ss    w3, w0, w4
    42bc:	04 02 78    	mov.w     w4, w4
    42be:	02 8b b9    	mul.ss    w1, w2, w6
    42c0:	86 02 78    	mov.w     w6, w5
    42c2:	05 02 42    	add.w     w4, w5, w4
    42c4:	00 10 b8    	mul.uu    w2, w0, w0
    42c6:	01 02 42    	add.w     w4, w1, w4
    42c8:	84 00 78    	mov.w     w4, w1
    42ca:	00 8f be    	mov.d     w0, [w14]

000042cc <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    42cc:	2e 00 90    	mov.w     [w14+4], w0
    42ce:	20 00 90    	mov.w     [w0+4], w0
    42d0:	ae 00 90    	mov.w     [w14+4], w1
    42d2:	61 01 90    	mov.w     [w1+12], w2
    42d4:	9e 00 90    	mov.w     [w14+2], w1
    42d6:	81 00 41    	add.w     w2, w1, w1
    42d8:	01 08 78    	mov.w     w1, [w0]

000042da <.LSM103>:
        timer_setPeriod(timer, interval);
    42da:	5e 01 90    	mov.w     [w14+10], w2
    42dc:	ee 01 90    	mov.w     [w14+12], w3
    42de:	4e 00 90    	mov.w     [w14+8], w0
    42e0:	d0 f9 07    	rcall     0x3682 <_timer_setPeriod>

000042e2 <.LSM104>:
        timer_start(timer);
    42e2:	4e 00 90    	mov.w     [w14+8], w0
    42e4:	9d fa 07    	rcall     0x3820 <_timer_start>

000042e6 <.LSM105>:
        self->pin->write = __servoWrite;
    42e6:	2e 00 90    	mov.w     [w14+4], w0
    42e8:	00 08 90    	mov.w     [w0+16], w0
    42ea:	a1 ed 23    	mov.w     #0x3eda, w1
    42ec:	11 08 98    	mov.w     w1, [w0+18]

000042ee <.LSM106>:
        self->pin->read = __servoRead;
    42ee:	2e 00 90    	mov.w     [w14+4], w0
    42f0:	00 08 90    	mov.w     [w0+16], w0
    42f2:	81 ea 23    	mov.w     #0x3ea8, w1
    42f4:	21 08 98    	mov.w     w1, [w0+20]
    42f6:	03 00 37    	bra       0x42fe <.L20>

000042f8 <.L25>:
    42f8:	00 00 00    	nop       
    42fa:	01 00 37    	bra       0x42fe <.L20>

000042fc <.L26>:
    42fc:	00 00 00    	nop       

000042fe <.L20>:
    }
}
    42fe:	00 80 fa    	ulnk      
    4300:	00 00 06    	return    

00004302 <_print_buffer>:
_PIN *FWD, *REV;

uint8_t MC_TXBUF[1024], MC_RXBUF[1024];

void print_buffer(uint8_t *buffer, uint16_t size) {
    4302:	0a 00 fa    	lnk       #0xa
    4304:	30 07 98    	mov.w     w0, [w14+6]
    4306:	41 07 98    	mov.w     w1, [w14+8]

00004308 <.LSM1>:
    int i;
    uint8_t* buf_str = (uint8_t*) malloc (2*size + 1);
    4308:	4e 00 90    	mov.w     [w14+8], w0
    430a:	00 00 40    	add.w     w0, w0, w0
    430c:	00 00 e8    	inc.w     w0, w0
    430e:	8d e9 07    	rcall     0x162a <_malloc>
    4310:	20 07 98    	mov.w     w0, [w14+4]

00004312 <.LSM2>:
    uint8_t* buf_ptr = buf_str;
    4312:	ae 00 90    	mov.w     [w14+4], w1
    4314:	11 07 98    	mov.w     w1, [w14+2]

00004316 <.LSM3>:
    for (i = 0; i < size; i++)
    4316:	00 00 eb    	clr.w     w0
    4318:	00 0f 78    	mov.w     w0, [w14]
    431a:	0f 00 37    	bra       0x433a <.L2>

0000431c <.L3>:
    {
        buf_ptr += sprintf(buf_ptr, "%02X", buffer[i]);
    431c:	1e 00 78    	mov.w     [w14], w0
    431e:	be 00 90    	mov.w     [w14+6], w1
    4320:	00 80 40    	add.w     w1, w0, w0
    4322:	10 40 78    	mov.b     [w0], w0
    4324:	80 80 fb    	ze        w0, w1
    4326:	1e 00 90    	mov.w     [w14+2], w0
    4328:	81 1f 78    	mov.w     w1, [w15++]
    432a:	a1 6f 2a    	mov.w     #0xa6fa, w1
    432c:	81 1f 78    	mov.w     w1, [w15++]
    432e:	35 eb 07    	rcall     0x199a <__sprintf_cdnopuxX>
    4330:	e4 87 57    	sub.w     w15, #0x4, w15
    4332:	9e 00 90    	mov.w     [w14+2], w1
    4334:	00 80 40    	add.w     w1, w0, w0
    4336:	10 07 98    	mov.w     w0, [w14+2]

00004338 <.LSM5>:
    4338:	1e 0f e8    	inc.w     [w14], [w14]

0000433a <.L2>:
    433a:	9e 00 78    	mov.w     [w14], w1
    433c:	4e 00 90    	mov.w     [w14+8], w0
    433e:	80 8f 50    	sub.w     w1, w0, [w15]
    4340:	ed ff 39    	bra       NC, 0x431c <.L3>

00004342 <.LSM6>:
    }
    sprintf(buf_ptr,"\n");
    4342:	1e 00 90    	mov.w     [w14+2], w0
    4344:	22 00 20    	mov.w     #0x2, w2
    4346:	f1 6f 2a    	mov.w     #0xa6ff, w1
    4348:	9a e9 07    	rcall     0x167e <_memcpy>

0000434a <.LSM7>:
    *(buf_ptr + 1) = '\0';
    434a:	1e 00 90    	mov.w     [w14+2], w0
    434c:	00 00 e8    	inc.w     w0, w0
    434e:	80 40 eb    	clr.b     w1
    4350:	01 48 78    	mov.b     w1, [w0]

00004352 <.LSM8>:
    printf("%s\n", buf_str);
    4352:	2e 00 90    	mov.w     [w14+4], w0
    4354:	9b e9 07    	rcall     0x168c <_puts>

00004356 <.LSM9>:
}
    4356:	00 80 fa    	ulnk      
    4358:	00 00 06    	return    

0000435a <_check_for_string>:

char check_for_string(uint8_t *str) {
    435a:	06 00 fa    	lnk       #0x6
    435c:	20 07 98    	mov.w     w0, [w14+4]

0000435e <.LSM11>:
    /*
    If the input string buffer is "test", turn on led1 and return 1. Else 
    turn off led1 and return 0.
    */
    int rc = strcmp(str, "test");
    435e:	11 70 2a    	mov.w     #0xa701, w1
    4360:	2e 00 90    	mov.w     [w14+4], w0
    4362:	9f e9 07    	rcall     0x16a2 <_strcmp>
    4364:	10 07 98    	mov.w     w0, [w14+2]

00004366 <.LSM12>:
    char out;
    if (rc == 0) {
    4366:	1e 00 90    	mov.w     [w14+2], w0
    4368:	00 00 e0    	cp0.w     w0
    436a:	05 00 3a    	bra       NZ, 0x4376 <.L5>

0000436c <.LSM13>:
        led_on(&led1);
    436c:	00 80 20    	mov.w     #0x800, w0
    436e:	55 01 07    	rcall     0x461a <_led_on>

00004370 <.LSM14>:
        out = 1;
    4370:	10 c0 b3    	mov.b     #0x1, w0
    4372:	00 4f 78    	mov.b     w0, [w14]
    4374:	04 00 37    	bra       0x437e <.L6>

00004376 <.L5>:
    } else {
        led_off(&led1);
    4376:	00 80 20    	mov.w     #0x800, w0
    4378:	60 01 07    	rcall     0x463a <_led_off>

0000437a <.LSM16>:
        out = 0;
    437a:	00 40 eb    	clr.b     w0
    437c:	00 4f 78    	mov.b     w0, [w14]

0000437e <.L6>:
    }
    return out;
    437e:	1e 40 78    	mov.b     [w14], w0

00004380 <.LSM18>:
}
    4380:	00 80 fa    	ulnk      
    4382:	00 00 06    	return    

00004384 <_convert_msg>:

uint64_t convert_msg(uint8_t *str) {
    4384:	0a 00 fa    	lnk       #0xa
    4386:	40 07 98    	mov.w     w0, [w14+8]

00004388 <.LSM20>:
    /* 
    Interprets string buffer which represents a hexadecimal number and stores 
    the encoded value as a uint64_t
    */

    // sprintf(a, "%08x%08x\r\n", 0xffff, 40);
    // printf("%d\r\n", a[0]);
    // printf("%s", a);
    uint64_t decoded_msg = (uint64_t)strtoll(str, NULL, 16);
    4388:	02 01 20    	mov.w     #0x10, w2
    438a:	80 00 eb    	clr.w     w1
    438c:	4e 00 90    	mov.w     [w14+8], w0
    438e:	99 e9 07    	rcall     0x16c2 <_strtoll>
    4390:	cf 80 de    	asr.w     w0, #0xf, w1
    4392:	61 09 b9    	mul.su    w1, #0x1, w2
    4394:	00 9f be    	mov.d     w0, [w14++]
    4396:	02 97 be    	mov.d     w2, [w14--]

00004398 <.LSM21>:
    return decoded_msg;
    4398:	3e 00 be    	mov.d     [w14++], w0
    439a:	2e 01 be    	mov.d     [w14--], w2

0000439c <.LSM22>:
}
    439c:	00 80 fa    	ulnk      
    439e:	00 00 06    	return    

000043a0 <_parse_addr>:

char parse_addr(uint64_t *msg) {
    43a0:	04 00 fa    	lnk       #0x4
    43a2:	10 07 98    	mov.w     w0, [w14+2]

000043a4 <.LSM24>:
    /*
    Parses the received message and returns a char representing whether this 
    information is addressed to this device.
    */
    // uint8_t msg_addr = (uint8_t)(*msg & ((uint64_t)(0xFF) << 56));
    uint8_t msg_addr = (uint8_t)(*msg & ((uint64_t)(0xFF)));
    43a4:	1e 00 90    	mov.w     [w14+2], w0
    43a6:	50 01 be    	mov.d     [++w0], w2
    43a8:	40 00 be    	mov.d     [--w0], w0
    43aa:	10 47 98    	mov.b     w0, [w14+1]

000043ac <.LSM25>:
    char is_recipient = 0;
    43ac:	00 40 eb    	clr.b     w0
    43ae:	00 4f 78    	mov.b     w0, [w14]

000043b0 <.LSM26>:
    if (msg_addr == LOCAL_ADDR) {
    43b0:	1e 40 90    	mov.b     [w14+1], w0
    43b2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    43b4:	02 00 3a    	bra       NZ, 0x43ba <.L9>

000043b6 <.LSM27>:
        is_recipient = 1;
    43b6:	10 c0 b3    	mov.b     #0x1, w0
    43b8:	00 4f 78    	mov.b     w0, [w14]

000043ba <.L9>:
    }
    return is_recipient;
    43ba:	1e 40 78    	mov.b     [w14], w0

000043bc <.LSM29>:
}
    43bc:	00 80 fa    	ulnk      
    43be:	00 00 06    	return    

000043c0 <_setup_uart>:

void setup_uart() {
    43c0:	00 00 fa    	lnk       #0x0

000043c2 <.LSM31>:
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           // 0, TXBUF, 1024, RXBUF, 1024);

    // uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
    //            float baudrate, int8_t parity, int16_t stopbits, 
    //            uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
    //            uint8_t *RXbuffer, uint16_t RXbufferlen)

    // uart_open(&uart2, &D[0], &D[1], NULL, NULL, 115200., 'N', 1, 
    //           0, MC_TXBUF, 1024, MC_RXBUF, 1024);
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           0, TXBUF, 1024, RXBUF, 1024);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    43c2:	40 6d 20    	mov.w     #0x6d4, w0
    43c4:	80 1f 78    	mov.w     w0, [w15++]
    43c6:	57 01 20    	mov.w     #0x15, w7
    43c8:	86 c0 b3    	mov.b     #0x8, w6
    43ca:	80 82 eb    	setm.w    w5
    43cc:	64 c0 b3    	mov.b     #0x6, w4
    43ce:	80 01 eb    	clr.w     w3
    43d0:	02 2f 20    	mov.w     #0x2f0, w2
    43d2:	21 2f 20    	mov.w     #0x2f2, w1
    43d4:	80 2f 21    	mov.w     #0x12f8, w0
    43d6:	29 fc 07    	rcall     0x3c2a <_pin_init>
    43d8:	8f 87 e9    	dec2.w    w15, w15

000043da <.LSM32>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    43da:	a0 6d 20    	mov.w     #0x6da, w0
    43dc:	80 1f 78    	mov.w     w0, [w15++]
    43de:	a7 01 20    	mov.w     #0x1a, w7
    43e0:	00 43 eb    	clr.b     w6
    43e2:	80 82 eb    	setm.w    w5
    43e4:	74 c0 b3    	mov.b     #0x7, w4
    43e6:	80 01 eb    	clr.w     w3
    43e8:	02 2f 20    	mov.w     #0x2f0, w2
    43ea:	21 2f 20    	mov.w     #0x2f2, w1
    43ec:	20 2e 21    	mov.w     #0x12e2, w0
    43ee:	1d fc 07    	rcall     0x3c2a <_pin_init>
    43f0:	8f 87 e9    	dec2.w    w15, w15

000043f2 <.LSM33>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);
    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    43f2:	00 40 20    	mov.w     #0x400, w0
    43f4:	80 1f 78    	mov.w     w0, [w15++]
    43f6:	a0 c3 20    	mov.w     #0xc3a, w0
    43f8:	80 1f 78    	mov.w     w0, [w15++]
    43fa:	00 40 20    	mov.w     #0x400, w0
    43fc:	80 1f 78    	mov.w     w0, [w15++]
    43fe:	a0 83 20    	mov.w     #0x83a, w0
    4400:	80 1f 78    	mov.w     w0, [w15++]
    4402:	00 00 eb    	clr.w     w0
    4404:	80 1f 78    	mov.w     w0, [w15++]
    4406:	10 00 20    	mov.w     #0x1, w0
    4408:	80 1f 78    	mov.w     w0, [w15++]
    440a:	e5 c4 b3    	mov.b     #0x4e, w5
    440c:	06 00 20    	mov.w     #0x0, w6
    440e:	67 69 24    	mov.w     #0x4696, w7
    4410:	00 02 eb    	clr.w     w4
    4412:	80 01 eb    	clr.w     w3
    4414:	82 2f 21    	mov.w     #0x12f8, w2
    4416:	21 2e 21    	mov.w     #0x12e2, w1
    4418:	20 1f 21    	mov.w     #0x11f2, w0
    441a:	30 f4 07    	rcall     0x2c7c <_uart_open>
    441c:	ec 87 57    	sub.w     w15, #0xc, w15

0000441e <.LSM34>:
              0, MC_TXBUF, 1024, MC_RXBUF, 1024);
}
    441e:	00 80 fa    	ulnk      
    4420:	00 00 06    	return    

00004422 <_setup>:

void setup() {
    4422:	00 00 fa    	lnk       #0x0

00004424 <.LSM36>:
    timer_setPeriod(&timer1, 1);  // Timer for LED operation/status blink
    4424:	02 00 20    	mov.w     #0x0, w2
    4426:	03 f8 23    	mov.w     #0x3f80, w3
    4428:	80 43 21    	mov.w     #0x1438, w0
    442a:	2b f9 07    	rcall     0x3682 <_timer_setPeriod>

0000442c <.LSM37>:
    // timer_setPeriod(&timer2, 0.5);
    timer_setPeriod(&timer3, .01);
    442c:	a2 70 2d    	mov.w     #0xd70a, w2
    442e:	33 c2 23    	mov.w     #0x3c23, w3
    4430:	40 46 21    	mov.w     #0x1464, w0
    4432:	27 f9 07    	rcall     0x3682 <_timer_setPeriod>

00004434 <.LSM38>:
    timer_start(&timer1);
    4434:	80 43 21    	mov.w     #0x1438, w0
    4436:	f4 f9 07    	rcall     0x3820 <_timer_start>

00004438 <.LSM39>:
    // timer_start(&timer2);
    timer_start(&timer3);
    4438:	40 46 21    	mov.w     #0x1464, w0
    443a:	f2 f9 07    	rcall     0x3820 <_timer_start>

0000443c <.LSM40>:
    // setup_uart();
}
    443c:	00 80 fa    	ulnk      
    443e:	00 00 06    	return    

00004440 <_main>:

int16_t main(void) {
    4440:	5a 00 fa    	lnk       #0x5a

00004442 <.LSM42>:
        // printf("Starting Rocket Controller...\r\n");
    init_clock();
    4442:	00 10 20    	mov.w     #0x100, w0
    4444:	20 3a 88    	mov.w     w0, 0x744

00004446 <.LSM43>:
    init_ui();
    4446:	87 00 07    	rcall     0x4556 <_init_ui>

00004448 <.LSM44>:
    init_timer();
    4448:	b1 f8 07    	rcall     0x35ac <_init_timer>

0000444a <.LSM45>:
    init_uart();
    444a:	41 f3 07    	rcall     0x2ace <_init_uart>

0000444c <.LSM46>:
    init_pin();
    444c:	da fa 07    	rcall     0x3a02 <_init_pin>

0000444e <.LSM47>:
    init_oc();
    444e:	63 fd 07    	rcall     0x3f16 <_init_oc>

00004450 <.LSM48>:
    // ***init_md:  may need to change md.c so it utilizes less DIO pins    
    init_md();
    4450:	86 01 07    	rcall     0x475e <_init_md>

00004452 <.LSM49>:
    setup();
    4452:	e7 ff 07    	rcall     0x4422 <_setup>

00004454 <.LSM50>:

    uint16_t counter = 0;
    4454:	00 00 eb    	clr.w     w0
    4456:	20 07 98    	mov.w     w0, [w14+4]

00004458 <.LSM51>:
    uint8_t rec_msg [64];
    uint64_t msg;
    char is_recip = 0;
    4458:	00 40 eb    	clr.b     w0
    445a:	60 47 98    	mov.b     w0, [w14+6]

0000445c <.LSM52>:

    // Initialize motor vars/pins
    uint16_t MOTOR_SPEED = 0xC000;
    445c:	00 00 2c    	mov.w     #0xc000, w0
    445e:	00 0f 78    	mov.w     w0, [w14]

00004460 <.LSM53>:
    uint16_t MOTOR_DIR_TRACK = 0;   // tracks vert dir of rocket
    4460:	00 00 eb    	clr.w     w0
    4462:	10 07 98    	mov.w     w0, [w14+2]

00004464 <.LSM54>:
    MOTOR_DIR = &D[0];
    4464:	a0 03 21    	mov.w     #0x103a, w0
    4466:	80 41 88    	mov.w     w0, 0x830

00004468 <.LSM55>:
    FWD = &D[2];
    4468:	60 06 21    	mov.w     #0x1066, w0
    446a:	90 41 88    	mov.w     w0, 0x832

0000446c <.LSM56>:
    REV = &D[13];
    446c:	80 15 21    	mov.w     #0x1158, w0
    446e:	a0 41 88    	mov.w     w0, 0x834

00004470 <.LSM57>:
    pin_digitalOut(MOTOR_DIR);
    4470:	80 41 80    	mov.w     0x830, w0
    4472:	2e fc 07    	rcall     0x3cd0 <_pin_digitalOut>

00004474 <.LSM58>:

    uint8_t direction = 1;
    4474:	10 c0 b3    	mov.b     #0x1, w0
    4476:	70 47 98    	mov.b     w0, [w14+7]

00004478 <.LSM59>:

    const uint16_t MOTOR_SPEED_LIMIT = 0xFFF0;
    4478:	00 ff 2f    	mov.w     #0xfff0, w0
    447a:	40 07 98    	mov.w     w0, [w14+8]

0000447c <.LSM60>:
    const uint16_t GRAV_VAL = 0x00F0;
    447c:	00 0f 20    	mov.w     #0xf0, w0
    447e:	50 07 98    	mov.w     w0, [w14+10]

00004480 <.LSM61>:
    const uint16_t THRUST_VAL = GRAV_VAL*2;
    4480:	5e 00 90    	mov.w     [w14+10], w0
    4482:	00 00 40    	add.w     w0, w0, w0
    4484:	60 07 98    	mov.w     w0, [w14+12]

00004486 <.LSM62>:
    uint16_t mot_speed = 0;
    4486:	00 00 eb    	clr.w     w0
    4488:	70 07 98    	mov.w     w0, [w14+14]

0000448a <.LSM63>:
    int mot_dir = 0;
    448a:	00 00 eb    	clr.w     w0
    448c:	00 0f 98    	mov.w     w0, [w14+16]

0000448e <.LSM64>:
    pin_clear(MOTOR_DIR);
    448e:	80 41 80    	mov.w     0x830, w0
    4490:	91 fc 07    	rcall     0x3db4 <_pin_clear>

00004492 <.L25>:
    while (1) {

        if (timer_flag(&timer2)) {
    4492:	e0 44 21    	mov.w     #0x144e, w0
    4494:	e3 f9 07    	rcall     0x385c <_timer_flag>
    4496:	00 00 e0    	cp0.w     w0
    4498:	19 00 32    	bra       Z, 0x44cc <.L13>

0000449a <.LSM66>:
            timer_lower(&timer2);
    449a:	e0 44 21    	mov.w     #0x144e, w0
    449c:	f0 f9 07    	rcall     0x387e <_timer_lower>

0000449e <.LSM67>:
            uart_gets(&uart1, rec_msg, 64);
    449e:	72 00 47    	add.w     w14, #0x12, w0
    44a0:	02 04 20    	mov.w     #0x40, w2
    44a2:	80 00 78    	mov.w     w0, w1
    44a4:	20 1f 21    	mov.w     #0x11f2, w0
    44a6:	55 f7 07    	rcall     0x3352 <_uart_gets>

000044a8 <.LSM68>:
            msg = convert_msg(rec_msg);
    44a8:	72 00 47    	add.w     w14, #0x12, w0
    44aa:	6c ff 07    	rcall     0x4384 <_convert_msg>
    44ac:	10 2f 98    	mov.w     w0, [w14+82]
    44ae:	21 2f 98    	mov.w     w1, [w14+84]
    44b0:	32 2f 98    	mov.w     w2, [w14+86]
    44b2:	43 2f 98    	mov.w     w3, [w14+88]

000044b4 <.LSM69>:
            is_recip = parse_addr(&msg);
    44b4:	20 05 20    	mov.w     #0x52, w0
    44b6:	0e 00 40    	add.w     w0, w14, w0
    44b8:	73 ff 07    	rcall     0x43a0 <_parse_addr>
    44ba:	60 47 98    	mov.b     w0, [w14+6]

000044bc <.LSM70>:
            if (is_recip == 1) {
    44bc:	6e 40 90    	mov.b     [w14+6], w0
    44be:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    44c0:	03 00 3a    	bra       NZ, 0x44c8 <.L14>

000044c2 <.LSM71>:
                led_on(&led3);
    44c2:	00 81 20    	mov.w     #0x810, w0
    44c4:	aa 00 07    	rcall     0x461a <_led_on>
    44c6:	02 00 37    	bra       0x44cc <.L13>

000044c8 <.L14>:
            } else {
                led_off(&led3);
    44c8:	00 81 20    	mov.w     #0x810, w0
    44ca:	b7 00 07    	rcall     0x463a <_led_off>

000044cc <.L13>:
            }
        }
        if(timer_flag(&timer3)) {
    44cc:	40 46 21    	mov.w     #0x1464, w0
    44ce:	c6 f9 07    	rcall     0x385c <_timer_flag>
    44d0:	00 00 e0    	cp0.w     w0
    44d2:	35 00 32    	bra       Z, 0x453e <.L15>

000044d4 <.LSM74>:
            timer_lower(&timer3);
    44d4:	40 46 21    	mov.w     #0x1464, w0
    44d6:	d3 f9 07    	rcall     0x387e <_timer_lower>

000044d8 <.LSM75>:
            // Handle rocket thrust
            if (pin_read(FWD)) { // Thrust on
    44d8:	90 41 80    	mov.w     0x832, w0
    44da:	a5 fc 07    	rcall     0x3e26 <_pin_read>
    44dc:	00 00 e0    	cp0.w     w0
    44de:	18 00 32    	bra       Z, 0x4510 <.L16>

000044e0 <.LSM76>:
                if (MOTOR_DIR_TRACK == 0) {  // rocket falling
    44e0:	1e 00 90    	mov.w     [w14+2], w0
    44e2:	00 00 e0    	cp0.w     w0
    44e4:	0c 00 3a    	bra       NZ, 0x44fe <.L17>

000044e6 <.LSM77>:
                    if (MOTOR_SPEED > THRUST_VAL) {  // nonzero velocity
    44e6:	6e 00 90    	mov.w     [w14+12], w0
    44e8:	9e 00 78    	mov.w     [w14], w1
    44ea:	80 8f 50    	sub.w     w1, w0, [w15]
    44ec:	03 00 36    	bra       LEU, 0x44f4 <.L18>

000044ee <.LSM78>:
                        MOTOR_SPEED = MOTOR_SPEED - THRUST_VAL;
    44ee:	6e 00 90    	mov.w     [w14+12], w0
    44f0:	1e 0f 10    	subr.w    w0, [w14], [w14]
    44f2:	0b 00 37    	bra       0x450a <.L19>

000044f4 <.L18>:
                    }
                    else {  // zero velocity
                        MOTOR_DIR_TRACK = 1;
    44f4:	10 00 20    	mov.w     #0x1, w0
    44f6:	10 07 98    	mov.w     w0, [w14+2]

000044f8 <.LSM80>:
                        MOTOR_SPEED = 0;
    44f8:	00 00 eb    	clr.w     w0
    44fa:	00 0f 78    	mov.w     w0, [w14]
    44fc:	06 00 37    	bra       0x450a <.L19>

000044fe <.L17>:
                    }
                }
                else { // rocket rising
                    if (MOTOR_SPEED < MOTOR_SPEED_LIMIT) {
    44fe:	4e 00 90    	mov.w     [w14+8], w0
    4500:	9e 00 78    	mov.w     [w14], w1
    4502:	80 8f 50    	sub.w     w1, w0, [w15]
    4504:	02 00 31    	bra       C, 0x450a <.L19>

00004506 <.LSM82>:
                        MOTOR_SPEED = MOTOR_SPEED + THRUST_VAL;
    4506:	6e 00 90    	mov.w     [w14+12], w0
    4508:	1e 0f 40    	add.w     w0, [w14], [w14]

0000450a <.L19>:
                    }
                }
                // pin_set(MOTOR_DIR);
                // if (MOTOR_SPEED < MOTOR_SPEED_LIMIT) {
                //     MOTOR_SPEED = MOTOR_SPEED + THRUST_VAL;
                // }
                // md_speed(&mdp, MOTOR_SPEED);
                led_on(&led2);
    450a:	80 80 20    	mov.w     #0x808, w0
    450c:	86 00 07    	rcall     0x461a <_led_on>
    450e:	17 00 37    	bra       0x453e <.L15>

00004510 <.L16>:
            }
            else { // no thrust
                if (MOTOR_DIR_TRACK == 0) { // rocket falling
    4510:	1e 00 90    	mov.w     [w14+2], w0
    4512:	00 00 e0    	cp0.w     w0
    4514:	07 00 3a    	bra       NZ, 0x4524 <.L20>

00004516 <.LSM85>:
                    if (MOTOR_SPEED < MOTOR_SPEED_LIMIT) {
    4516:	4e 00 90    	mov.w     [w14+8], w0
    4518:	9e 00 78    	mov.w     [w14], w1
    451a:	80 8f 50    	sub.w     w1, w0, [w15]
    451c:	0e 00 31    	bra       C, 0x453a <.L21>

0000451e <.LSM86>:
                        MOTOR_SPEED = MOTOR_SPEED + GRAV_VAL;
    451e:	5e 00 90    	mov.w     [w14+10], w0
    4520:	1e 0f 40    	add.w     w0, [w14], [w14]
    4522:	0b 00 37    	bra       0x453a <.L21>

00004524 <.L20>:
                    }
                }
                else {  // rocket rising
                    if (MOTOR_SPEED > THRUST_VAL) {
    4524:	6e 00 90    	mov.w     [w14+12], w0
    4526:	9e 00 78    	mov.w     [w14], w1
    4528:	80 8f 50    	sub.w     w1, w0, [w15]
    452a:	03 00 36    	bra       LEU, 0x4532 <.L22>

0000452c <.LSM88>:
                        MOTOR_SPEED = MOTOR_SPEED - GRAV_VAL;
    452c:	5e 00 90    	mov.w     [w14+10], w0
    452e:	1e 0f 10    	subr.w    w0, [w14], [w14]
    4530:	04 00 37    	bra       0x453a <.L21>

00004532 <.L22>:
                    }
                    else {
                        MOTOR_DIR_TRACK = 0;
    4532:	00 00 eb    	clr.w     w0
    4534:	10 07 98    	mov.w     w0, [w14+2]

00004536 <.LSM90>:
                        MOTOR_SPEED = GRAV_VAL;
    4536:	de 00 90    	mov.w     [w14+10], w1
    4538:	01 0f 78    	mov.w     w1, [w14]

0000453a <.L21>:
                    }
                }
                led_off(&led2);
    453a:	80 80 20    	mov.w     #0x808, w0
    453c:	7e 00 07    	rcall     0x463a <_led_off>

0000453e <.L15>:
            }
        }
        if (MOTOR_DIR_TRACK) {
    453e:	1e 00 90    	mov.w     [w14+2], w0
    4540:	00 00 e0    	cp0.w     w0
    4542:	03 00 32    	bra       Z, 0x454a <.L23>

00004544 <.LSM93>:
            pin_set(MOTOR_DIR);
    4544:	80 41 80    	mov.w     0x830, w0
    4546:	21 fc 07    	rcall     0x3d8a <_pin_set>
    4548:	02 00 37    	bra       0x454e <.L24>

0000454a <.L23>:
        }
        else {
            pin_clear(MOTOR_DIR);
    454a:	80 41 80    	mov.w     0x830, w0
    454c:	33 fc 07    	rcall     0x3db4 <_pin_clear>

0000454e <.L24>:
        }
        md_speed(&mdp, MOTOR_SPEED);
    454e:	9e 00 78    	mov.w     [w14], w1
    4550:	c0 50 21    	mov.w     #0x150c, w0
    4552:	86 01 07    	rcall     0x4860 <_md_speed>

00004554 <.LSM96>:
    }
    4554:	9e ff 37    	bra       0x4492 <.L25>

00004556 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    4556:	00 00 fa    	lnk       #0x0

00004558 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4558:	74 c0 b3    	mov.b     #0x7, w4
    455a:	63 4e 20    	mov.w     #0x4e6, w3
    455c:	82 2d 20    	mov.w     #0x2d8, w2
    455e:	a1 2d 20    	mov.w     #0x2da, w1
    4560:	00 80 20    	mov.w     #0x800, w0
    4562:	20 00 07    	rcall     0x45a4 <_led_init>

00004564 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4564:	00 42 eb    	clr.b     w4
    4566:	a3 4e 20    	mov.w     #0x4ea, w3
    4568:	82 2e 20    	mov.w     #0x2e8, w2
    456a:	a1 2e 20    	mov.w     #0x2ea, w1
    456c:	80 80 20    	mov.w     #0x808, w0
    456e:	1a 00 07    	rcall     0x45a4 <_led_init>

00004570 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4570:	14 c0 b3    	mov.b     #0x1, w4
    4572:	a3 4e 20    	mov.w     #0x4ea, w3
    4574:	82 2e 20    	mov.w     #0x2e8, w2
    4576:	a1 2e 20    	mov.w     #0x2ea, w1
    4578:	00 81 20    	mov.w     #0x810, w0
    457a:	14 00 07    	rcall     0x45a4 <_led_init>

0000457c <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    457c:	f4 c0 b3    	mov.b     #0xf, w4
    457e:	43 4e 20    	mov.w     #0x4e4, w3
    4580:	02 2d 20    	mov.w     #0x2d0, w2
    4582:	21 2d 20    	mov.w     #0x2d2, w1
    4584:	80 81 20    	mov.w     #0x818, w0
    4586:	ad 00 07    	rcall     0x46e2 <_sw_init>

00004588 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    4588:	c4 c0 b3    	mov.b     #0xc, w4
    458a:	43 4e 20    	mov.w     #0x4e4, w3
    458c:	02 2d 20    	mov.w     #0x2d0, w2
    458e:	21 2d 20    	mov.w     #0x2d2, w1
    4590:	00 82 20    	mov.w     #0x820, w0
    4592:	a7 00 07    	rcall     0x46e2 <_sw_init>

00004594 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4594:	c4 c0 b3    	mov.b     #0xc, w4
    4596:	23 4e 20    	mov.w     #0x4e2, w3
    4598:	82 2c 20    	mov.w     #0x2c8, w2
    459a:	a1 2c 20    	mov.w     #0x2ca, w1
    459c:	80 82 20    	mov.w     #0x828, w0
    459e:	a1 00 07    	rcall     0x46e2 <_sw_init>

000045a0 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    45a0:	00 80 fa    	ulnk      
    45a2:	00 00 06    	return    

000045a4 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    45a4:	0a 00 fa    	lnk       #0xa
    45a6:	00 0f 78    	mov.w     w0, [w14]
    45a8:	11 07 98    	mov.w     w1, [w14+2]
    45aa:	22 07 98    	mov.w     w2, [w14+4]
    45ac:	33 07 98    	mov.w     w3, [w14+6]
    45ae:	04 4f 98    	mov.b     w4, [w14+8]

000045b0 <.LSM9>:
    self->port = port;
    45b0:	1e 00 78    	mov.w     [w14], w0
    45b2:	9e 00 90    	mov.w     [w14+2], w1
    45b4:	01 08 78    	mov.w     w1, [w0]

000045b6 <.LSM10>:
    self->tris = tris;
    45b6:	1e 00 78    	mov.w     [w14], w0
    45b8:	ae 00 90    	mov.w     [w14+4], w1
    45ba:	11 00 98    	mov.w     w1, [w0+2]

000045bc <.LSM11>:
    self->ans = ans;
    45bc:	1e 00 78    	mov.w     [w14], w0
    45be:	be 00 90    	mov.w     [w14+6], w1
    45c0:	21 00 98    	mov.w     w1, [w0+4]

000045c2 <.LSM12>:
    self->bit = bit;
    45c2:	1e 00 78    	mov.w     [w14], w0
    45c4:	8e 48 90    	mov.b     [w14+8], w1
    45c6:	61 40 98    	mov.b     w1, [w0+6]

000045c8 <.LSM13>:

    bitclear(self->ans, self->bit);
    45c8:	1e 00 78    	mov.w     [w14], w0
    45ca:	20 00 90    	mov.w     [w0+4], w0
    45cc:	9e 00 78    	mov.w     [w14], w1
    45ce:	a1 00 90    	mov.w     [w1+4], w1
    45d0:	11 01 78    	mov.w     [w1], w2
    45d2:	9e 00 78    	mov.w     [w14], w1
    45d4:	e1 40 90    	mov.b     [w1+6], w1
    45d6:	81 80 fb    	ze        w1, w1
    45d8:	13 00 20    	mov.w     #0x1, w3
    45da:	81 18 dd    	sl.w      w3, w1, w1
    45dc:	81 80 ea    	com.w     w1, w1
    45de:	81 00 61    	and.w     w2, w1, w1
    45e0:	01 08 78    	mov.w     w1, [w0]

000045e2 <.LSM14>:
    bitclear(self->port, self->bit);
    45e2:	1e 00 78    	mov.w     [w14], w0
    45e4:	10 00 78    	mov.w     [w0], w0
    45e6:	9e 00 78    	mov.w     [w14], w1
    45e8:	91 00 78    	mov.w     [w1], w1
    45ea:	11 01 78    	mov.w     [w1], w2
    45ec:	9e 00 78    	mov.w     [w14], w1
    45ee:	e1 40 90    	mov.b     [w1+6], w1
    45f0:	81 80 fb    	ze        w1, w1
    45f2:	13 00 20    	mov.w     #0x1, w3
    45f4:	81 18 dd    	sl.w      w3, w1, w1
    45f6:	81 80 ea    	com.w     w1, w1
    45f8:	81 00 61    	and.w     w2, w1, w1
    45fa:	01 08 78    	mov.w     w1, [w0]

000045fc <.LSM15>:
    bitclear(self->tris, self->bit);
    45fc:	1e 00 78    	mov.w     [w14], w0
    45fe:	10 00 90    	mov.w     [w0+2], w0
    4600:	9e 00 78    	mov.w     [w14], w1
    4602:	91 00 90    	mov.w     [w1+2], w1
    4604:	11 01 78    	mov.w     [w1], w2
    4606:	9e 00 78    	mov.w     [w14], w1
    4608:	e1 40 90    	mov.b     [w1+6], w1
    460a:	81 80 fb    	ze        w1, w1
    460c:	13 00 20    	mov.w     #0x1, w3
    460e:	81 18 dd    	sl.w      w3, w1, w1
    4610:	81 80 ea    	com.w     w1, w1
    4612:	81 00 61    	and.w     w2, w1, w1
    4614:	01 08 78    	mov.w     w1, [w0]

00004616 <.LSM16>:
}
    4616:	00 80 fa    	ulnk      
    4618:	00 00 06    	return    

0000461a <_led_on>:

void led_on(_LED *self) {
    461a:	02 00 fa    	lnk       #0x2
    461c:	00 0f 78    	mov.w     w0, [w14]

0000461e <.LSM18>:
    bitset(self->port, self->bit);
    461e:	1e 00 78    	mov.w     [w14], w0
    4620:	10 00 78    	mov.w     [w0], w0
    4622:	9e 00 78    	mov.w     [w14], w1
    4624:	91 00 78    	mov.w     [w1], w1
    4626:	11 01 78    	mov.w     [w1], w2
    4628:	9e 00 78    	mov.w     [w14], w1
    462a:	e1 40 90    	mov.b     [w1+6], w1
    462c:	81 80 fb    	ze        w1, w1
    462e:	13 00 20    	mov.w     #0x1, w3
    4630:	81 18 dd    	sl.w      w3, w1, w1
    4632:	82 80 70    	ior.w     w1, w2, w1
    4634:	01 08 78    	mov.w     w1, [w0]

00004636 <.LSM19>:
}
    4636:	00 80 fa    	ulnk      
    4638:	00 00 06    	return    

0000463a <_led_off>:

void led_off(_LED *self) {
    463a:	02 00 fa    	lnk       #0x2
    463c:	00 0f 78    	mov.w     w0, [w14]

0000463e <.LSM21>:
    bitclear(self->port, self->bit);
    463e:	1e 00 78    	mov.w     [w14], w0
    4640:	10 00 78    	mov.w     [w0], w0
    4642:	9e 00 78    	mov.w     [w14], w1
    4644:	91 00 78    	mov.w     [w1], w1
    4646:	11 01 78    	mov.w     [w1], w2
    4648:	9e 00 78    	mov.w     [w14], w1
    464a:	e1 40 90    	mov.b     [w1+6], w1
    464c:	81 80 fb    	ze        w1, w1
    464e:	13 00 20    	mov.w     #0x1, w3
    4650:	81 18 dd    	sl.w      w3, w1, w1
    4652:	81 80 ea    	com.w     w1, w1
    4654:	81 00 61    	and.w     w2, w1, w1
    4656:	01 08 78    	mov.w     w1, [w0]

00004658 <.LSM22>:
}
    4658:	00 80 fa    	ulnk      
    465a:	00 00 06    	return    

0000465c <_led_toggle>:

void led_toggle(_LED *self) {
    465c:	02 00 fa    	lnk       #0x2
    465e:	00 0f 78    	mov.w     w0, [w14]

00004660 <.LSM24>:
    bitflip(self->port, self->bit);
    4660:	1e 00 78    	mov.w     [w14], w0
    4662:	10 00 78    	mov.w     [w0], w0
    4664:	9e 00 78    	mov.w     [w14], w1
    4666:	91 00 78    	mov.w     [w1], w1
    4668:	11 01 78    	mov.w     [w1], w2
    466a:	9e 00 78    	mov.w     [w14], w1
    466c:	e1 40 90    	mov.b     [w1+6], w1
    466e:	81 80 fb    	ze        w1, w1
    4670:	13 00 20    	mov.w     #0x1, w3
    4672:	81 18 dd    	sl.w      w3, w1, w1
    4674:	81 00 69    	xor.w     w2, w1, w1
    4676:	01 08 78    	mov.w     w1, [w0]

00004678 <.LSM25>:
}
    4678:	00 80 fa    	ulnk      
    467a:	00 00 06    	return    

0000467c <_led_write>:

void led_write(_LED *self, uint16_t val) {
    467c:	04 00 fa    	lnk       #0x4
    467e:	00 0f 78    	mov.w     w0, [w14]
    4680:	11 07 98    	mov.w     w1, [w14+2]

00004682 <.LSM27>:
    if (val)
    4682:	1e 00 90    	mov.w     [w14+2], w0
    4684:	00 00 e0    	cp0.w     w0
    4686:	0d 00 32    	bra       Z, 0x46a2 <.L7>

00004688 <.LSM28>:
        bitset(self->port, self->bit);
    4688:	1e 00 78    	mov.w     [w14], w0
    468a:	10 00 78    	mov.w     [w0], w0
    468c:	9e 00 78    	mov.w     [w14], w1
    468e:	91 00 78    	mov.w     [w1], w1
    4690:	11 01 78    	mov.w     [w1], w2
    4692:	9e 00 78    	mov.w     [w14], w1
    4694:	e1 40 90    	mov.b     [w1+6], w1
    4696:	81 80 fb    	ze        w1, w1
    4698:	13 00 20    	mov.w     #0x1, w3
    469a:	81 18 dd    	sl.w      w3, w1, w1
    469c:	82 80 70    	ior.w     w1, w2, w1
    469e:	01 08 78    	mov.w     w1, [w0]
    46a0:	0d 00 37    	bra       0x46bc <.L6>

000046a2 <.L7>:
    else
        bitclear(self->port, self->bit);
    46a2:	1e 00 78    	mov.w     [w14], w0
    46a4:	10 00 78    	mov.w     [w0], w0
    46a6:	9e 00 78    	mov.w     [w14], w1
    46a8:	91 00 78    	mov.w     [w1], w1
    46aa:	11 01 78    	mov.w     [w1], w2
    46ac:	9e 00 78    	mov.w     [w14], w1
    46ae:	e1 40 90    	mov.b     [w1+6], w1
    46b0:	81 80 fb    	ze        w1, w1
    46b2:	13 00 20    	mov.w     #0x1, w3
    46b4:	81 18 dd    	sl.w      w3, w1, w1
    46b6:	81 80 ea    	com.w     w1, w1
    46b8:	81 00 61    	and.w     w2, w1, w1
    46ba:	01 08 78    	mov.w     w1, [w0]

000046bc <.L6>:
}
    46bc:	00 80 fa    	ulnk      
    46be:	00 00 06    	return    

000046c0 <_led_read>:

uint16_t led_read(_LED *self) {
    46c0:	02 00 fa    	lnk       #0x2
    46c2:	00 0f 78    	mov.w     w0, [w14]

000046c4 <.LSM32>:
    return bitread(self->port, self->bit);
    46c4:	1e 00 78    	mov.w     [w14], w0
    46c6:	10 00 78    	mov.w     [w0], w0
    46c8:	90 00 78    	mov.w     [w0], w1
    46ca:	1e 00 78    	mov.w     [w14], w0
    46cc:	60 40 90    	mov.b     [w0+6], w0
    46ce:	00 80 fb    	ze        w0, w0
    46d0:	12 00 20    	mov.w     #0x1, w2
    46d2:	00 10 dd    	sl.w      w2, w0, w0
    46d4:	00 80 60    	and.w     w1, w0, w0
    46d6:	00 f0 a7    	btsc.w    w0, #0xf
    46d8:	00 00 ea    	neg.w     w0, w0
    46da:	00 00 ea    	neg.w     w0, w0
    46dc:	4f 00 de    	lsr.w     w0, #0xf, w0

000046de <.LSM33>:
}
    46de:	00 80 fa    	ulnk      
    46e0:	00 00 06    	return    

000046e2 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    46e2:	0a 00 fa    	lnk       #0xa
    46e4:	00 0f 78    	mov.w     w0, [w14]
    46e6:	11 07 98    	mov.w     w1, [w14+2]
    46e8:	22 07 98    	mov.w     w2, [w14+4]
    46ea:	33 07 98    	mov.w     w3, [w14+6]
    46ec:	04 4f 98    	mov.b     w4, [w14+8]

000046ee <.LSM35>:
    self->port = port;
    46ee:	1e 00 78    	mov.w     [w14], w0
    46f0:	9e 00 90    	mov.w     [w14+2], w1
    46f2:	01 08 78    	mov.w     w1, [w0]

000046f4 <.LSM36>:
    self->tris = tris;
    46f4:	1e 00 78    	mov.w     [w14], w0
    46f6:	ae 00 90    	mov.w     [w14+4], w1
    46f8:	11 00 98    	mov.w     w1, [w0+2]

000046fa <.LSM37>:
    self->ans = ans;
    46fa:	1e 00 78    	mov.w     [w14], w0
    46fc:	be 00 90    	mov.w     [w14+6], w1
    46fe:	21 00 98    	mov.w     w1, [w0+4]

00004700 <.LSM38>:
    self->bit = bit;
    4700:	1e 00 78    	mov.w     [w14], w0
    4702:	8e 48 90    	mov.b     [w14+8], w1
    4704:	61 40 98    	mov.b     w1, [w0+6]

00004706 <.LSM39>:

    bitclear(self->ans, self->bit);
    4706:	1e 00 78    	mov.w     [w14], w0
    4708:	20 00 90    	mov.w     [w0+4], w0
    470a:	9e 00 78    	mov.w     [w14], w1
    470c:	a1 00 90    	mov.w     [w1+4], w1
    470e:	11 01 78    	mov.w     [w1], w2
    4710:	9e 00 78    	mov.w     [w14], w1
    4712:	e1 40 90    	mov.b     [w1+6], w1
    4714:	81 80 fb    	ze        w1, w1
    4716:	13 00 20    	mov.w     #0x1, w3
    4718:	81 18 dd    	sl.w      w3, w1, w1
    471a:	81 80 ea    	com.w     w1, w1
    471c:	81 00 61    	and.w     w2, w1, w1
    471e:	01 08 78    	mov.w     w1, [w0]

00004720 <.LSM40>:
    bitset(self->tris, self->bit);
    4720:	1e 00 78    	mov.w     [w14], w0
    4722:	10 00 90    	mov.w     [w0+2], w0
    4724:	9e 00 78    	mov.w     [w14], w1
    4726:	91 00 90    	mov.w     [w1+2], w1
    4728:	11 01 78    	mov.w     [w1], w2
    472a:	9e 00 78    	mov.w     [w14], w1
    472c:	e1 40 90    	mov.b     [w1+6], w1
    472e:	81 80 fb    	ze        w1, w1
    4730:	13 00 20    	mov.w     #0x1, w3
    4732:	81 18 dd    	sl.w      w3, w1, w1
    4734:	82 80 70    	ior.w     w1, w2, w1
    4736:	01 08 78    	mov.w     w1, [w0]

00004738 <.LSM41>:
}
    4738:	00 80 fa    	ulnk      
    473a:	00 00 06    	return    

0000473c <_sw_read>:

uint16_t sw_read(_SW *self) {
    473c:	02 00 fa    	lnk       #0x2
    473e:	00 0f 78    	mov.w     w0, [w14]

00004740 <.LSM43>:
    return bitread(self->port, self->bit);
    4740:	1e 00 78    	mov.w     [w14], w0
    4742:	10 00 78    	mov.w     [w0], w0
    4744:	90 00 78    	mov.w     [w0], w1
    4746:	1e 00 78    	mov.w     [w14], w0
    4748:	60 40 90    	mov.b     [w0+6], w0
    474a:	00 80 fb    	ze        w0, w0
    474c:	12 00 20    	mov.w     #0x1, w2
    474e:	00 10 dd    	sl.w      w2, w0, w0
    4750:	00 80 60    	and.w     w1, w0, w0
    4752:	00 f0 a7    	btsc.w    w0, #0xf
    4754:	00 00 ea    	neg.w     w0, w0
    4756:	00 00 ea    	neg.w     w0, w0
    4758:	4f 00 de    	lsr.w     w0, #0xf, w0

0000475a <.LSM44>:
}
    475a:	00 80 fa    	ulnk      
    475c:	00 00 06    	return    

0000475e <_init_md>:
#include "md.h"

_MD md1, md2, mdp;

void init_md(void) {
    475e:	00 00 fa    	lnk       #0x0

00004760 <.LSM1>:
    md_init(&md1, &D[8], &D[7], 1e3, &oc7);
    4760:	a4 37 21    	mov.w     #0x137a, w4
    4762:	83 3e 20    	mov.w     #0x3e8, w3
    4764:	42 0d 21    	mov.w     #0x10d4, w2
    4766:	a1 0e 21    	mov.w     #0x10ea, w1
    4768:	00 4f 21    	mov.w     #0x14f0, w0
    476a:	0e 00 07    	rcall     0x4788 <_md_init>

0000476c <.LSM2>:
    md_init(&md2, &D[5], &D[6], 1e3, &oc5);
    476c:	64 35 21    	mov.w     #0x1356, w4
    476e:	83 3e 20    	mov.w     #0x3e8, w3
    4770:	e2 0b 21    	mov.w     #0x10be, w2
    4772:	81 0a 21    	mov.w     #0x10a8, w1
    4774:	e0 4f 21    	mov.w     #0x14fe, w0
    4776:	08 00 07    	rcall     0x4788 <_md_init>

00004778 <.LSM3>:
    md_init(&mdp, NULL, NULL, 1e3, NULL);
    4778:	00 02 eb    	clr.w     w4
    477a:	83 3e 20    	mov.w     #0x3e8, w3
    477c:	00 01 eb    	clr.w     w2
    477e:	80 00 eb    	clr.w     w1
    4780:	c0 50 21    	mov.w     #0x150c, w0
    4782:	02 00 07    	rcall     0x4788 <_md_init>

00004784 <.LSM4>:
}
    4784:	00 80 fa    	ulnk      
    4786:	00 00 06    	return    

00004788 <_md_init>:

void md_init(_MD *self, _PIN *pin1, _PIN *pin2, uint16_t freq, _OC *oc) {
    4788:	0a 00 fa    	lnk       #0xa
    478a:	00 0f 78    	mov.w     w0, [w14]
    478c:	11 07 98    	mov.w     w1, [w14+2]
    478e:	22 07 98    	mov.w     w2, [w14+4]
    4790:	33 07 98    	mov.w     w3, [w14+6]
    4792:	44 07 98    	mov.w     w4, [w14+8]

00004794 <.LSM6>:
    self->dir = 0;
    4794:	1e 00 78    	mov.w     [w14], w0
    4796:	80 40 eb    	clr.b     w1
    4798:	01 48 78    	mov.b     w1, [w0]

0000479a <.LSM7>:
    self->speed = 0;
    479a:	1e 00 78    	mov.w     [w14], w0
    479c:	80 00 eb    	clr.w     w1
    479e:	11 00 98    	mov.w     w1, [w0+2]

000047a0 <.LSM8>:
    self->freq = freq;
    47a0:	1e 00 78    	mov.w     [w14], w0
    47a2:	be 00 90    	mov.w     [w14+6], w1
    47a4:	21 00 98    	mov.w     w1, [w0+4]

000047a6 <.LSM9>:
    self->pins[0] = pin1;
    47a6:	1e 00 78    	mov.w     [w14], w0
    47a8:	9e 00 90    	mov.w     [w14+2], w1
    47aa:	41 00 98    	mov.w     w1, [w0+8]

000047ac <.LSM10>:
    self->pins[1] = pin2;
    47ac:	1e 00 78    	mov.w     [w14], w0
    47ae:	ae 00 90    	mov.w     [w14+4], w1
    47b0:	51 00 98    	mov.w     w1, [w0+10]

000047b2 <.LSM11>:
    self->braked = 0;
    47b2:	1e 00 78    	mov.w     [w14], w0
    47b4:	80 40 eb    	clr.b     w1
    47b6:	61 40 98    	mov.b     w1, [w0+6]

000047b8 <.LSM12>:
    self->oc = oc;
    47b8:	1e 00 78    	mov.w     [w14], w0
    47ba:	ce 00 90    	mov.w     [w14+8], w1
    47bc:	61 00 98    	mov.w     w1, [w0+12]

000047be <.LSM13>:

    if (self != &mdp) {
    47be:	c0 50 21    	mov.w     #0x150c, w0
    47c0:	9e 00 78    	mov.w     [w14], w1
    47c2:	80 8f 50    	sub.w     w1, w0, [w15]
    47c4:	17 00 32    	bra       Z, 0x47f4 <.L2>

000047c6 <.LSM14>:
        oc_pwm(self->oc, self->pins[0], &timer5, freq, 0);
    47c6:	3e 00 90    	mov.w     [w14+6], w0
    47c8:	80 00 eb    	clr.w     w1
    47ca:	19 e6 07    	rcall     0x13fe <___floatunsisf>
    47cc:	1e 01 78    	mov.w     [w14], w2
    47ce:	c2 03 90    	mov.w     [w2+8], w7
    47d0:	1e 01 78    	mov.w     [w14], w2
    47d2:	62 03 90    	mov.w     [w2+12], w6
    47d4:	80 01 eb    	clr.w     w3
    47d6:	00 02 be    	mov.d     w0, w4
    47d8:	02 49 21    	mov.w     #0x1490, w2
    47da:	87 00 78    	mov.w     w7, w1
    47dc:	06 00 78    	mov.w     w6, w0
    47de:	4a fc 07    	rcall     0x4074 <_oc_pwm>

000047e0 <.LSM15>:
        OC5CON2 = 0x000F; //synchronize to timer5
    47e0:	f0 00 20    	mov.w     #0xf, w0
    47e2:	d0 0d 88    	mov.w     w0, 0x1ba

000047e4 <.LSM16>:
        OC7CON2 = 0x000F;
    47e4:	f0 00 20    	mov.w     #0xf, w0
    47e6:	70 0e 88    	mov.w     w0, 0x1ce

000047e8 <.LSM17>:
        pin_digitalOut(self->pins[1]);
    47e8:	1e 00 78    	mov.w     [w14], w0
    47ea:	50 00 90    	mov.w     [w0+10], w0
    47ec:	71 fa 07    	rcall     0x3cd0 <_pin_digitalOut>

000047ee <.LSM18>:
        pin_clear(self->pins[1]);
    47ee:	1e 00 78    	mov.w     [w14], w0
    47f0:	50 00 90    	mov.w     [w0+10], w0
    47f2:	e0 fa 07    	rcall     0x3db4 <_pin_clear>

000047f4 <.L2>:
    }
}
    47f4:	00 80 fa    	ulnk      
    47f6:	00 00 06    	return    

000047f8 <_md_free>:

void md_free(_MD *self) {
    47f8:	02 00 fa    	lnk       #0x2
    47fa:	00 0f 78    	mov.w     w0, [w14]

000047fc <.LSM21>:
    // clear owned pins/oc's
}
    47fc:	00 80 fa    	ulnk      
    47fe:	00 00 06    	return    

00004800 <_md_brake>:

void md_brake(_MD *self) {
    4800:	02 00 fa    	lnk       #0x2
    4802:	00 0f 78    	mov.w     w0, [w14]

00004804 <.LSM23>:
    self->braked = 1;
    4804:	1e 00 78    	mov.w     [w14], w0
    4806:	11 c0 b3    	mov.b     #0x1, w1
    4808:	61 40 98    	mov.b     w1, [w0+6]

0000480a <.LSM24>:
    if (self == &mdp) {
    480a:	c0 50 21    	mov.w     #0x150c, w0
    480c:	9e 00 78    	mov.w     [w14], w1
    480e:	80 8f 50    	sub.w     w1, w0, [w15]
    4810:	05 00 3a    	bra       NZ, 0x481c <.L6>

00004812 <.LSM25>:
        md_brake(&md1);
    4812:	00 4f 21    	mov.w     #0x14f0, w0
    4814:	f5 ff 07    	rcall     0x4800 <_md_brake>

00004816 <.LSM26>:
        md_brake(&md2);
    4816:	e0 4f 21    	mov.w     #0x14fe, w0
    4818:	f3 ff 07    	rcall     0x4800 <_md_brake>
    481a:	08 00 37    	bra       0x482c <.L5>

0000481c <.L6>:
    } else {
        pin_write(self->pins[0], 0);
    481c:	1e 00 78    	mov.w     [w14], w0
    481e:	40 00 90    	mov.w     [w0+8], w0
    4820:	80 00 eb    	clr.w     w1
    4822:	f3 fa 07    	rcall     0x3e0a <_pin_write>

00004824 <.LSM28>:
        pin_write(self->pins[1], 0);
    4824:	1e 00 78    	mov.w     [w14], w0
    4826:	50 00 90    	mov.w     [w0+10], w0
    4828:	80 00 eb    	clr.w     w1
    482a:	ef fa 07    	rcall     0x3e0a <_pin_write>

0000482c <.L5>:
    }
}
    482c:	00 80 fa    	ulnk      
    482e:	00 00 06    	return    

00004830 <_md_run>:

void md_run(_MD *self) {
    4830:	02 00 fa    	lnk       #0x2
    4832:	00 0f 78    	mov.w     w0, [w14]

00004834 <.LSM31>:
    self->braked = 0;
    4834:	1e 00 78    	mov.w     [w14], w0
    4836:	80 40 eb    	clr.b     w1
    4838:	61 40 98    	mov.b     w1, [w0+6]

0000483a <.LSM32>:
    if (self == &mdp) {
    483a:	c0 50 21    	mov.w     #0x150c, w0
    483c:	9e 00 78    	mov.w     [w14], w1
    483e:	80 8f 50    	sub.w     w1, w0, [w15]
    4840:	05 00 3a    	bra       NZ, 0x484c <.L9>

00004842 <.LSM33>:
        md_run(&md1);
    4842:	00 4f 21    	mov.w     #0x14f0, w0
    4844:	f5 ff 07    	rcall     0x4830 <_md_run>

00004846 <.LSM34>:
        md_run(&md2);
    4846:	e0 4f 21    	mov.w     #0x14fe, w0
    4848:	f3 ff 07    	rcall     0x4830 <_md_run>
    484a:	08 00 37    	bra       0x485c <.L8>

0000484c <.L9>:
    } else {
        md_velocity(self, self->speed, self->dir);
    484c:	1e 00 78    	mov.w     [w14], w0
    484e:	90 40 78    	mov.b     [w0], w1
    4850:	1e 00 78    	mov.w     [w14], w0
    4852:	10 00 90    	mov.w     [w0+2], w0
    4854:	01 41 78    	mov.b     w1, w2
    4856:	80 00 78    	mov.w     w0, w1
    4858:	1e 00 78    	mov.w     [w14], w0
    485a:	66 00 07    	rcall     0x4928 <_md_velocity>

0000485c <.L8>:
    }
}
    485c:	00 80 fa    	ulnk      
    485e:	00 00 06    	return    

00004860 <_md_speed>:

void md_speed(_MD *self, uint16_t speed) {
    4860:	04 00 fa    	lnk       #0x4
    4862:	00 0f 78    	mov.w     w0, [w14]
    4864:	11 07 98    	mov.w     w1, [w14+2]

00004866 <.LSM38>:
    self->speed = speed;
    4866:	1e 00 78    	mov.w     [w14], w0
    4868:	9e 00 90    	mov.w     [w14+2], w1
    486a:	11 00 98    	mov.w     w1, [w0+2]

0000486c <.LSM39>:

    if (self == &mdp) {
    486c:	c0 50 21    	mov.w     #0x150c, w0
    486e:	9e 00 78    	mov.w     [w14], w1
    4870:	80 8f 50    	sub.w     w1, w0, [w15]
    4872:	0b 00 3a    	bra       NZ, 0x488a <.L12>

00004874 <.LSM40>:
        md_speed(&md1, self->speed);
    4874:	1e 00 78    	mov.w     [w14], w0
    4876:	10 00 90    	mov.w     [w0+2], w0
    4878:	80 00 78    	mov.w     w0, w1
    487a:	00 4f 21    	mov.w     #0x14f0, w0
    487c:	f1 ff 07    	rcall     0x4860 <_md_speed>

0000487e <.LSM41>:
        md_speed(&md2, self->speed);
    487e:	1e 00 78    	mov.w     [w14], w0
    4880:	10 00 90    	mov.w     [w0+2], w0
    4882:	80 00 78    	mov.w     w0, w1
    4884:	e0 4f 21    	mov.w     #0x14fe, w0
    4886:	ec ff 07    	rcall     0x4860 <_md_speed>
    4888:	0d 00 37    	bra       0x48a4 <.L11>

0000488a <.L12>:
    } else if (!self->braked) {
    488a:	1e 00 78    	mov.w     [w14], w0
    488c:	60 40 90    	mov.b     [w0+6], w0
    488e:	00 04 e0    	cp0.b     w0
    4890:	09 00 3a    	bra       NZ, 0x48a4 <.L11>

00004892 <.LSM43>:
        pin_write(self->pins[self->dir], speed);
    4892:	1e 00 78    	mov.w     [w14], w0
    4894:	10 40 78    	mov.b     [w0], w0
    4896:	00 80 fb    	ze        w0, w0
    4898:	9e 00 78    	mov.w     [w14], w1
    489a:	64 00 40    	add.w     w0, #0x4, w0
    489c:	00 00 40    	add.w     w0, w0, w0
    489e:	61 00 78    	mov.w     [w1+w0], w0
    48a0:	9e 00 90    	mov.w     [w14+2], w1
    48a2:	b3 fa 07    	rcall     0x3e0a <_pin_write>

000048a4 <.L11>:
    }
}
    48a4:	00 80 fa    	ulnk      
    48a6:	00 00 06    	return    

000048a8 <_md_direction>:

void md_direction(_MD *self, uint8_t dir) {
    48a8:	04 00 fa    	lnk       #0x4
    48aa:	88 1f 78    	mov.w     w8, [w15++]
    48ac:	00 0f 78    	mov.w     w0, [w14]
    48ae:	21 47 98    	mov.b     w1, [w14+2]

000048b0 <.LSM46>:
    if (self->dir == dir) {
    48b0:	1e 00 78    	mov.w     [w14], w0
    48b2:	90 40 78    	mov.b     [w0], w1
    48b4:	2e 40 90    	mov.b     [w14+2], w0
    48b6:	80 cf 50    	sub.b     w1, w0, [w15]
    48b8:	33 00 32    	bra       Z, 0x4920 <.L18>

000048ba <.LSM47>:
        return;
    }
    self->dir = dir;
    48ba:	1e 00 78    	mov.w     [w14], w0
    48bc:	ae 40 90    	mov.b     [w14+2], w1
    48be:	01 48 78    	mov.b     w1, [w0]

000048c0 <.LSM48>:

    if (self == &mdp) {
    48c0:	c0 50 21    	mov.w     #0x150c, w0
    48c2:	9e 00 78    	mov.w     [w14], w1
    48c4:	80 8f 50    	sub.w     w1, w0, [w15]
    48c6:	07 00 3a    	bra       NZ, 0x48d6 <.L17>

000048c8 <.LSM49>:
        md_direction(&md1, dir);
    48c8:	ae 40 90    	mov.b     [w14+2], w1
    48ca:	00 4f 21    	mov.w     #0x14f0, w0
    48cc:	ed ff 07    	rcall     0x48a8 <_md_direction>

000048ce <.LSM50>:
        md_direction(&md2, dir);
    48ce:	ae 40 90    	mov.b     [w14+2], w1
    48d0:	e0 4f 21    	mov.w     #0x14fe, w0
    48d2:	ea ff 07    	rcall     0x48a8 <_md_direction>
    48d4:	26 00 37    	bra       0x4922 <.L14>

000048d6 <.L17>:
    } else {
        oc_free(self->oc);
    48d6:	1e 00 78    	mov.w     [w14], w0
    48d8:	60 00 90    	mov.w     [w0+12], w0
    48da:	8d fb 07    	rcall     0x3ff6 <_oc_free>

000048dc <.LSM52>:
        oc_pwm(self->oc, self->pins[dir], &timer5, self->freq, self->speed);
    48dc:	1e 00 78    	mov.w     [w14], w0
    48de:	10 04 90    	mov.w     [w0+2], w8
    48e0:	1e 00 78    	mov.w     [w14], w0
    48e2:	20 00 90    	mov.w     [w0+4], w0
    48e4:	80 00 eb    	clr.w     w1
    48e6:	8b e5 07    	rcall     0x13fe <___floatunsisf>
    48e8:	2e 41 90    	mov.b     [w14+2], w2
    48ea:	02 81 fb    	ze        w2, w2
    48ec:	9e 01 78    	mov.w     [w14], w3
    48ee:	64 01 41    	add.w     w2, #0x4, w2
    48f0:	02 01 41    	add.w     w2, w2, w2
    48f2:	e3 03 79    	mov.w     [w3+w2], w7
    48f4:	1e 01 78    	mov.w     [w14], w2
    48f6:	62 03 90    	mov.w     [w2+12], w6
    48f8:	88 01 78    	mov.w     w8, w3
    48fa:	00 02 be    	mov.d     w0, w4
    48fc:	02 49 21    	mov.w     #0x1490, w2
    48fe:	87 00 78    	mov.w     w7, w1
    4900:	06 00 78    	mov.w     w6, w0
    4902:	b8 fb 07    	rcall     0x4074 <_oc_pwm>

00004904 <.LSM53>:
        OC5CON2 = 0x000F; //synchronize to timer5
    4904:	f0 00 20    	mov.w     #0xf, w0
    4906:	d0 0d 88    	mov.w     w0, 0x1ba

00004908 <.LSM54>:
        OC7CON2 = 0x000F;
    4908:	f0 00 20    	mov.w     #0xf, w0
    490a:	70 0e 88    	mov.w     w0, 0x1ce

0000490c <.LSM55>:
        pin_clear(self->pins[!dir]);
    490c:	2e 40 90    	mov.b     [w14+2], w0
    490e:	00 80 fb    	ze        w0, w0
    4910:	00 00 e9    	dec.w     w0, w0
    4912:	4f 00 de    	lsr.w     w0, #0xf, w0
    4914:	9e 00 78    	mov.w     [w14], w1
    4916:	64 00 40    	add.w     w0, #0x4, w0
    4918:	00 00 40    	add.w     w0, w0, w0
    491a:	61 00 78    	mov.w     [w1+w0], w0
    491c:	4b fa 07    	rcall     0x3db4 <_pin_clear>
    491e:	01 00 37    	bra       0x4922 <.L14>

00004920 <.L18>:
    4920:	00 00 00    	nop       

00004922 <.L14>:
    }
}
    4922:	4f 04 78    	mov.w     [--w15], w8
    4924:	00 80 fa    	ulnk      
    4926:	00 00 06    	return    

00004928 <_md_velocity>:

void md_velocity(_MD *self, uint16_t speed, uint8_t dir) {
    4928:	06 00 fa    	lnk       #0x6
    492a:	00 0f 78    	mov.w     w0, [w14]
    492c:	11 07 98    	mov.w     w1, [w14+2]
    492e:	42 47 98    	mov.b     w2, [w14+4]

00004930 <.LSM59>:
    md_speed(self, speed);
    4930:	9e 00 90    	mov.w     [w14+2], w1
    4932:	1e 00 78    	mov.w     [w14], w0
    4934:	95 ff 07    	rcall     0x4860 <_md_speed>

00004936 <.LSM60>:
    md_direction(self, dir);
    4936:	ce 40 90    	mov.b     [w14+4], w1
    4938:	1e 00 78    	mov.w     [w14], w0
    493a:	b6 ff 07    	rcall     0x48a8 <_md_direction>

0000493c <.LSM61>:
}    493c:	00 80 fa    	ulnk      
    493e:	00 00 06    	return    
Disassembly of section .dinit:

00004940 <.dinit>:
    4940:	3a 08 00    	nop       
    4942:	00 08 00    	nop       
    4944:	80 00 00    	nop       
    4946:	30 08 00    	nop       
    4948:	06 00 00    	nop       
    494a:	80 00 00    	nop       
    494c:	3a 10 00    	nop       
    494e:	b8 01 00    	nop       
    4950:	80 00 00    	nop       
    4952:	00 08 00    	nop       
    4954:	30 00 00    	nop       
    4956:	80 00 00    	nop       
    4958:	56 15 00    	nop       
    495a:	10 00 00    	nop       
    495c:	82 00 00    	nop       
    495e:	bd 37 86    	mov.w     0xc6f6, w13
    4960:	33 bd 37    	bra       0xffffc3c8
    4962:	06 35 bd    	subr.w    0x1506
    4964:	37 86 36    	bra       LEU, 0xffff55d4
    4966:	bd 37 86    	mov.w     0xc6f6, w13
    4968:	37 00 00    	nop       
    496a:	38 14 00    	nop       
    496c:	6e 00 00    	nop       
    496e:	80 00 00    	nop       
    4970:	f2 11 00    	nop       
    4972:	1c 01 00    	nop       
    4974:	80 00 00    	nop       
    4976:	36 08 00    	nop       
    4978:	04 00 00    	nop       
    497a:	80 00 00    	nop       
    497c:	f0 14 00    	nop       
    497e:	2a 00 00    	nop       
    4980:	80 00 00    	nop       
    4982:	0e 13 00    	nop       
    4984:	a2 00 00    	nop       
    4986:	80 00 00    	nop       
    4988:	6e 15 00    	nop       
    498a:	02 00 00    	nop       
    498c:	82 00 00    	nop       
    498e:	04 00 00    	nop       
    4990:	66 15 00    	nop       
    4992:	04 00 00    	nop       
    4994:	80 00 00    	nop       
    4996:	b0 13 00    	nop       
    4998:	88 00 00    	nop       
    499a:	82 00 00    	nop       
    499c:	01 00 00    	nop       
    499e:	00 d6 13    	subr.b    w7, w0, [w12--]
    49a0:	d7 13 d6    	rlnc.w    0x13d7, WREG
    49a2:	13 d6 13    	subr.b    w7, [w3], [w12--]
    49a4:	d6 13 d6    	rlnc.w    0x13d6, WREG
    49a6:	13 c6 13    	subr.b    w7, [w3], w12
	...
    49b6:	00 02 08    	do        #0x200, 0x4bbc
    49b8:	01 01 fe 
    49ba:	13 ff 13    	.pword 0x13ff13
    49bc:	fe 13 fe    	.pword 0xfe13fe
    49be:	13 fe 13    	.pword 0x13fe13
    49c0:	fe 13 ee    	neg.w     0x13fe, WREG
    49c2:	13 00 00    	nop       
	...
    49d0:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207b586>
    49d2:	08 02 02 
    49d4:	26 14 27    	mov.w     #0x7142, w6
    49d6:	14 26 14    	subr.w    w8, [w4], [--w12]
    49d8:	26 14 26    	mov.w     #0x6142, w6
    49da:	14 26 14    	subr.w    w8, [w4], [--w12]
    49dc:	16 14 00    	nop       
	...
    49ec:	b0 13 d8    	div2.sw   w7, w0
    49ee:	13 00 14    	subr.w    w8, [w3], w0
	...
    49f8:	a6 14 00    	nop       
    49fa:	4a 00 00    	nop       
    49fc:	82 00 00    	nop       
    49fe:	30 31 32    	bra       Z, 0xac60
    4a00:	33 34 35    	bra       LT, 0xb268
    4a02:	36 37 38    	bra       NOV, 0xb870
    4a04:	39 61 62    	and.b     w4, [w9++], [--w2]
    4a06:	63 64 65    	and.b     w10, #0x3, [--w8]
    4a08:	66 67 68    	xor.b     w0, #0x6, [--w14]
    4a0a:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    4a0c:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    4a0e:	6f 70 71    	.pword 0x71706f
    4a10:	72 73 74    	.pword 0x747372
    4a12:	75 76 77    	.pword 0x777675
    4a14:	78 79 7a    	.pword 0x7a7978
    4a16:	00 00 00    	nop       
    4a18:	41 29 21    	mov.w     #0x1294, w1
    4a1a:	1c 19 17    	subr.w    w14, [w12], [w2++]
    4a1c:	16 15 14    	subr.w    w8, [w6], [w10--]
    4a1e:	13 12 12    	subr.w    w4, [w3], [w4--]
    4a20:	11 11 11    	subr.w    w2, [w1], [w2--]
    4a22:	10 10 10    	subr.w    w0, [w0], [w0--]
    4a24:	0f 0f 0f    	bra       SB, 0x6844
    4a26:	0f 0e 0e    	bra       SA, 0x6646
    4a28:	0e 0e 0e    	bra       SA, 0x6646
    4a2a:	0e 0e 0d    	bra       OB, 0x6648
    4a2c:	0d 0d 0d    	bra       OB, 0x6448
    4a2e:	0d 0d 00    	nop       
    4a30:	6a 15 00    	nop       
    4a32:	04 00 00    	nop       
    4a34:	80 00 00    	nop       
    4a36:	3c 15 00    	nop       
    4a38:	1a 00 00    	nop       
    4a3a:	82 00 00    	nop       
    4a3c:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    4a3e:	74 7a 4c    	.pword 0x4c7a74
    4a40:	00 00 01    	call      w0
    4a42:	00 02 00    	nop       
    4a44:	04 00 08    	do        #0x4, 0x6a48
    4a46:	00 10 00 
    4a48:	00 00 20    	mov.w     #0x0, w0
    4a4a:	2b 2d 23    	mov.w     #0x32d2, w11
    4a4c:	30 00 00    	nop       
    4a4e:	1a 15 00    	nop       
    4a50:	22 00 00    	nop       
    4a52:	82 00 00    	nop       
    4a54:	30 31 32    	bra       Z, 0xacb6
    4a56:	33 34 35    	bra       LT, 0xb2be
    4a58:	36 37 38    	bra       NOV, 0xb8c6
    4a5a:	39 41 42    	add.b     w4, [w9++], w2
    4a5c:	43 44 45    	add.b     w10, [--w3], w8
    4a5e:	46 00 30    	bra       OV, 0x4aec
    4a60:	31 32 33    	bra       N, 0xaec4
    4a62:	34 35 36    	bra       LEU, 0xb4cc
    4a64:	37 38 39    	bra       NC, 0xbad4
    4a66:	61 62 63    	and.b     w6, #0x1, [--w4]
    4a68:	64 65 66    	and.b     w12, #0x4, [--w10]
    4a6a:	00 00 00    	nop       
    4a6c:	70 15 00    	nop       
    4a6e:	02 00 00    	nop       
    4a70:	80 00 00    	nop       
    4a72:	72 15 00    	nop       
    4a74:	02 00 00    	nop       
    4a76:	80 00 00    	nop       
    4a78:	00 00 00    	nop       
Disassembly of section .isr:

00004a7a <__DefaultInterrupt>:
    4a7a:	00 40 da    	.pword 0xda4000
    4a7c:	00 00 fe    	reset     
