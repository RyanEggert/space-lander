
master_main.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	6f 5b 21    	mov.w     #0x15b6, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	e0 6d 24    	mov.w     #0x46de, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	74 44 02    	call      0x4474 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	c0 06 20    	mov.w     #0x6c, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	30 3e 04    	goto      0x3e30 <___digitalRead>
    11e4:	00 00 00 
    11e6:	ec 3d 04    	goto      0x3dec <___digitalWrite>
    11e8:	00 00 00 
    11ea:	52 3e 04    	goto      0x3e52 <___analogRead>
    11ec:	00 00 00 
    11ee:	8e 22 04    	goto      0x228e <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	d0 22 04    	goto      0x22d0 <___putc_buffer>
    11f4:	00 00 00 
    11f6:	b2 22 04    	goto      0x22b2 <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	c8 23 04    	goto      0x23c8 <___getc_buffer>
    11fc:	00 00 00 
    11fe:	90 17 04    	goto      0x1790 <_prout>
    1200:	00 00 00 

00001202 <___subsf3>:
    1202:	03 f0 a2    	btg.w     w3, #0xf

00001204 <___addsf3>:
    1204:	88 9f be    	mov.d     w8, [w15++]
    1206:	8a 9f be    	mov.d     w10, [w15++]
    1208:	8c 1f 78    	mov.w     w12, [w15++]
    120a:	f7 00 07    	rcall     0x13fa <__funpack2>
    120c:	fe 00 33    	bra       N, 0x140a <__fPropagateNaN>
    120e:	64 50 e1    	cp.w      w10, #0x4
    1210:	4f 00 32    	bra       Z, 0x12b0 <aisinfinite>

00001212 <checkspecialb>:
    1212:	64 20 e1    	cp.w      w4, #0x4
    1214:	52 00 32    	bra       Z, 0x12ba <return2>
    1216:	03 82 6c    	xor.w     w9, w3, w4
    1218:	07 00 3b    	bra       NN, 0x1228 <getsign>
    121a:	09 05 d0    	sl.w      w9, w10
    121c:	03 06 d0    	sl.w      w3, w12
    121e:	82 0f 54    	sub.w     w8, w2, [w15]
    1220:	0c 06 5d    	subb.w    w10, w12, w12
    1222:	02 00 39    	bra       NC, 0x1228 <getsign>
    1224:	02 00 32    	bra       Z, 0x122a <gotsign>
    1226:	89 01 78    	mov.w     w9, w3

00001228 <getsign>:
    1228:	03 06 78    	mov.w     w3, w12

0000122a <gotsign>:
    122a:	85 82 55    	sub.w     w11, w5, w5
    122c:	04 00 3d    	bra       GE, 0x1236 <expcanonical>
    122e:	00 03 fd    	exch      w0, w6
    1230:	81 03 fd    	exch      w1, w7
    1232:	85 02 ea    	neg.w     w5, w5
    1234:	8b 85 42    	add.w     w5, w11, w11

00001236 <expcanonical>:
    1236:	84 0f 72    	ior.w     w4, w4, [w15]
    1238:	02 00 3b    	bra       NN, 0x123e <nonegate>
    123a:	60 00 10    	subr.w    w0, #0x0, w0
    123c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000123e <nonegate>:
    123e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1240:	00 05 eb    	clr.w     w10
    1242:	7a 28 e1    	cp.w      w5, #0x1a
    1244:	0a 00 39    	bra       NC, 0x125a <aligniter>
    1246:	06 00 78    	mov.w     w6, w0
    1248:	c7 5d dd    	sl.w      w11, #0x7, w11
    124a:	f7 07 b2    	and.w     #0x7f, w7
    124c:	87 80 75    	ior.w     w11, w7, w1
    124e:	2d 00 37    	bra       0x12aa <signoff>

00001250 <align>:
    1250:	82 81 71    	ior.w     w3, w2, w3
    1252:	0a 01 78    	mov.w     w10, w2
    1254:	61 05 60    	and.w     w0, #0x1, w10
    1256:	81 80 d1    	asr.w     w1, w1
    1258:	00 80 d3    	rrc.w     w0, w0

0000125a <aligniter>:
    125a:	85 02 e9    	dec.w     w5, w5
    125c:	f9 ff 3b    	bra       NN, 0x1250 <align>

0000125e <aligned>:
    125e:	06 04 40    	add.w     w0, w6, w8
    1260:	87 84 48    	addc.w    w1, w7, w9
    1262:	02 00 3b    	bra       NN, 0x1268 <normalizesum>
    1264:	60 04 14    	subr.w    w8, #0x0, w8
    1266:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001268 <normalizesum>:
    1268:	09 88 a3    	btst.z    w9, #0x8
    126a:	07 00 32    	bra       Z, 0x127a <checknormal>
    126c:	8a 81 71    	ior.w     w3, w10, w3
    126e:	82 81 71    	ior.w     w3, w2, w3
    1270:	61 01 64    	and.w     w8, #0x1, w2
    1272:	89 04 d1    	lsr.w     w9, w9
    1274:	08 84 d3    	rrc.w     w8, w8
    1276:	8b 05 e8    	inc.w     w11, w11
    1278:	17 00 37    	bra       0x12a8 <round>

0000127a <checknormal>:
    127a:	09 78 a3    	btst.z    w9, #0x7
    127c:	13 00 3a    	bra       NZ, 0x12a4 <discardguard>

0000127e <underflow>:
    127e:	0b 00 e0    	cp0.w     w11
    1280:	13 00 34    	bra       LE, 0x12a8 <round>
    1282:	8b 05 e9    	dec.w     w11, w11
    1284:	08 04 44    	add.w     w8, w8, w8
    1286:	89 84 4c    	addc.w    w9, w9, w9
    1288:	0a 44 74    	ior.b     w8, w10, w8
    128a:	09 78 a3    	btst.z    w9, #0x7
    128c:	0d 00 3a    	bra       NZ, 0x12a8 <round>

0000128e <normalizeloop>:
    128e:	0b 00 e0    	cp0.w     w11
    1290:	07 00 34    	bra       LE, 0x12a0 <normalizeexit>
    1292:	8b 05 e9    	dec.w     w11, w11
    1294:	08 04 44    	add.w     w8, w8, w8
    1296:	89 84 4c    	addc.w    w9, w9, w9
    1298:	01 00 3a    	bra       NZ, 0x129c <normalizetest>
    129a:	0b 00 20    	mov.w     #0x0, w11

0000129c <normalizetest>:
    129c:	09 78 a3    	btst.z    w9, #0x7
    129e:	f7 ff 32    	bra       Z, 0x128e <normalizeloop>

000012a0 <normalizeexit>:
    12a0:	00 01 eb    	clr.w     w2
    12a2:	02 00 37    	bra       0x12a8 <round>

000012a4 <discardguard>:
    12a4:	82 81 71    	ior.w     w3, w2, w3
    12a6:	0a 01 78    	mov.w     w10, w2

000012a8 <round>:
    12a8:	6d 00 07    	rcall     0x1384 <__fpack>

000012aa <signoff>:
    12aa:	0c f0 a7    	btsc.w    w12, #0xf
    12ac:	01 f0 a0    	bset.w    w1, #0xf
    12ae:	b6 00 37    	bra       0x141c <__fbopExit>

000012b0 <aisinfinite>:
    12b0:	64 20 e1    	cp.w      w4, #0x4
    12b2:	02 00 3a    	bra       NZ, 0x12b8 <return8>
    12b4:	83 8f 6c    	xor.w     w9, w3, [w15]
    12b6:	b6 00 33    	bra       N, 0x1424 <__fbopReturnNaN>

000012b8 <return8>:
    12b8:	08 01 be    	mov.d     w8, w2

000012ba <return2>:
    12ba:	02 00 be    	mov.d     w2, w0
    12bc:	af 00 37    	bra       0x141c <__fbopExit>

000012be <___divsf3>:
    12be:	88 9f be    	mov.d     w8, [w15++]
    12c0:	8a 9f be    	mov.d     w10, [w15++]
    12c2:	8c 1f 78    	mov.w     w12, [w15++]
    12c4:	9a 00 07    	rcall     0x13fa <__funpack2>
    12c6:	a1 00 33    	bra       N, 0x140a <__fPropagateNaN>
    12c8:	03 86 6c    	xor.w     w9, w3, w12
    12ca:	64 50 e1    	cp.w      w10, #0x4
    12cc:	2e 00 32    	bra       Z, 0x132a <aisinfinite>
    12ce:	64 20 e1    	cp.w      w4, #0x4
    12d0:	33 00 32    	bra       Z, 0x1338 <returnZero>
    12d2:	61 50 e1    	cp.w      w10, #0x1
    12d4:	2f 00 32    	bra       Z, 0x1334 <aiszero>
    12d6:	61 20 e1    	cp.w      w4, #0x1
    12d8:	31 00 32    	bra       Z, 0x133c <returnInf>

000012da <finitenonzero>:
    12da:	85 85 55    	sub.w     w11, w5, w11
    12dc:	eb 07 b0    	add.w     #0x7e, w11
    12de:	09 00 20    	mov.w     #0x0, w9
    12e0:	08 04 20    	mov.w     #0x40, w8
    12e2:	05 00 37    	bra       0x12ee <diventry>

000012e4 <divnext>:
    12e4:	08 04 44    	add.w     w8, w8, w8
    12e6:	89 84 4c    	addc.w    w9, w9, w9
    12e8:	0a 00 31    	bra       C, 0x12fe <divdone>

000012ea <divloop>:
    12ea:	06 03 43    	add.w     w6, w6, w6
    12ec:	87 83 4b    	addc.w    w7, w7, w7

000012ee <diventry>:
    12ee:	00 01 53    	sub.w     w6, w0, w2
    12f0:	81 81 5b    	subb.w    w7, w1, w3
    12f2:	f8 ff 33    	bra       N, 0x12e4 <divnext>
    12f4:	02 03 be    	mov.d     w2, w6
    12f6:	08 00 a0    	bset.w    w8, #0x0
    12f8:	08 04 44    	add.w     w8, w8, w8
    12fa:	89 84 4c    	addc.w    w9, w9, w9
    12fc:	f6 ff 39    	bra       NC, 0x12ea <divloop>

000012fe <divdone>:
    12fe:	c6 39 dd    	sl.w      w7, #0x6, w3
    1300:	83 01 73    	ior.w     w6, w3, w3
    1302:	01 00 32    	bra       Z, 0x1306 <stickyok>
    1304:	13 00 20    	mov.w     #0x1, w3

00001306 <stickyok>:
    1306:	89 04 d1    	lsr.w     w9, w9
    1308:	08 84 d3    	rrc.w     w8, w8
    130a:	09 98 a3    	btst.z    w9, #0x9
    130c:	05 00 32    	bra       Z, 0x1318 <guardused>
    130e:	08 00 a7    	btsc.w    w8, #0x0
    1310:	03 00 a0    	bset.w    w3, #0x0
    1312:	89 04 d1    	lsr.w     w9, w9
    1314:	08 84 d3    	rrc.w     w8, w8
    1316:	8b 05 e8    	inc.w     w11, w11

00001318 <guardused>:
    1318:	89 04 d1    	lsr.w     w9, w9
    131a:	08 84 d3    	rrc.w     w8, w8
    131c:	00 01 eb    	clr.w     w2
    131e:	02 81 d2    	rlc.w     w2, w2
    1320:	31 00 07    	rcall     0x1384 <__fpack>

00001322 <return0>:
    1322:	01 f0 a1    	bclr.w    w1, #0xf
    1324:	0c f0 a7    	btsc.w    w12, #0xf
    1326:	01 f0 a0    	bset.w    w1, #0xf
    1328:	79 00 37    	bra       0x141c <__fbopExit>

0000132a <aisinfinite>:
    132a:	64 20 e1    	cp.w      w4, #0x4
    132c:	7b 00 32    	bra       Z, 0x1424 <__fbopReturnNaN>

0000132e <return8>:
    132e:	08 01 be    	mov.d     w8, w2

00001330 <return2>:
    1330:	02 00 be    	mov.d     w2, w0
    1332:	f7 ff 37    	bra       0x1322 <return0>

00001334 <aiszero>:
    1334:	61 20 e1    	cp.w      w4, #0x1
    1336:	76 00 32    	bra       Z, 0x1424 <__fbopReturnNaN>

00001338 <returnZero>:
    1338:	60 00 b8    	mul.uu    w0, #0x0, w0
    133a:	f3 ff 37    	bra       0x1322 <return0>

0000133c <returnInf>:
    133c:	00 00 20    	mov.w     #0x0, w0
    133e:	01 f8 27    	mov.w     #0x7f80, w1
    1340:	f0 ff 37    	bra       0x1322 <return0>

00001342 <___eqsf2>:
    1342:	14 00 20    	mov.w     #0x1, w4
    1344:	a6 00 37    	bra       0x1492 <__fcompare>

00001346 <___gesf2>:
    1346:	f4 ff 2f    	mov.w     #0xffff, w4
    1348:	a4 00 37    	bra       0x1492 <__fcompare>

0000134a <___fixunssfsi>:
    134a:	00 01 be    	mov.d     w0, w2
    134c:	41 00 07    	rcall     0x13d0 <__funpack>
    134e:	04 70 a7    	btsc.w    w4, #0x7
    1350:	03 f0 a1    	bclr.w    w3, #0xf
    1352:	03 f8 a3    	btst.z    w3, #0xf
    1354:	13 00 3a    	bra       NZ, 0x137c <returnzero>
    1356:	65 09 b1    	sub.w     #0x96, w5
    1358:	10 00 32    	bra       Z, 0x137a <exit>
    135a:	09 00 35    	bra       LT, 0x136e <shiftright>
    135c:	69 28 e1    	cp.w      w5, #0x9
    135e:	02 00 35    	bra       LT, 0x1364 <shiftleft>
    1360:	01 00 28    	mov.w     #0x8000, w1
    1362:	00 00 05    	retlw.w   #0x0, w0

00001364 <shiftleft>:
    1364:	00 00 40    	add.w     w0, w0, w0
    1366:	81 80 48    	addc.w    w1, w1, w1
    1368:	85 02 e9    	dec.w     w5, w5
    136a:	fc ff 3a    	bra       NZ, 0x1364 <shiftleft>
    136c:	00 00 06    	return    

0000136e <shiftright>:
    136e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1370:	05 00 35    	bra       LT, 0x137c <returnzero>

00001372 <shiftrightloop>:
    1372:	81 00 d1    	lsr.w     w1, w1
    1374:	00 80 d3    	rrc.w     w0, w0
    1376:	85 02 e8    	inc.w     w5, w5
    1378:	fc ff 3a    	bra       NZ, 0x1372 <shiftrightloop>

0000137a <exit>:
    137a:	00 00 06    	return    

0000137c <returnzero>:
    137c:	80 00 eb    	clr.w     w1
    137e:	00 00 05    	retlw.w   #0x0, w0

00001380 <___floatunsisf>:
    1380:	60 11 b8    	mul.uu    w2, #0x0, w2
    1382:	a2 00 37    	bra       0x14c8 <___floatundisf>

00001384 <__fpack>:
    1384:	81 00 20    	mov.w     #0x8, w1
    1386:	61 80 55    	sub.w     w11, #0x1, w0
    1388:	0b 00 3d    	bra       GE, 0x13a0 <notsubnormal>
    138a:	0b 00 20    	mov.w     #0x0, w11
    138c:	61 fe 2f    	mov.w     #0xffe6, w1
    138e:	01 00 e1    	cp.w      w0, w1
    1390:	1d 00 34    	bra       LE, 0x13cc <zerosig>

00001392 <subnormal>:
    1392:	82 81 71    	ior.w     w3, w2, w3
    1394:	61 01 64    	and.w     w8, #0x1, w2
    1396:	89 04 d1    	lsr.w     w9, w9
    1398:	08 84 d3    	rrc.w     w8, w8
    139a:	00 00 e8    	inc.w     w0, w0
    139c:	fa ff 3a    	bra       NZ, 0x1392 <subnormal>
    139e:	71 00 20    	mov.w     #0x7, w1

000013a0 <notsubnormal>:
    13a0:	61 00 64    	and.w     w8, #0x1, w0
    13a2:	03 00 70    	ior.w     w0, w3, w0
    13a4:	02 00 60    	and.w     w0, w2, w0
    13a6:	09 00 32    	bra       Z, 0x13ba <packupandgo>
    13a8:	61 04 44    	add.w     w8, #0x1, w8
    13aa:	e0 84 4c    	addc.w    w9, #0x0, w9
    13ac:	09 88 a5    	btst.z    w9, w1
    13ae:	05 00 32    	bra       Z, 0x13ba <packupandgo>
    13b0:	8b 05 e8    	inc.w     w11, w11
    13b2:	68 08 e1    	cp.w      w1, #0x8
    13b4:	02 00 3a    	bra       NZ, 0x13ba <packupandgo>
    13b6:	89 04 d1    	lsr.w     w9, w9
    13b8:	08 84 d3    	rrc.w     w8, w8

000013ba <packupandgo>:
    13ba:	f2 0f 20    	mov.w     #0xff, w2
    13bc:	02 58 e1    	cp.w      w11, w2
    13be:	05 00 3d    	bra       GE, 0x13ca <overflow>
    13c0:	c7 5d dd    	sl.w      w11, #0x7, w11
    13c2:	f9 07 b2    	and.w     #0x7f, w9
    13c4:	89 80 75    	ior.w     w11, w9, w1
    13c6:	08 00 78    	mov.w     w8, w0
    13c8:	00 00 06    	return    

000013ca <overflow>:
    13ca:	0b f8 27    	mov.w     #0x7f80, w11

000013cc <zerosig>:
    13cc:	8b 00 78    	mov.w     w11, w1
    13ce:	00 00 05    	retlw.w   #0x0, w0

000013d0 <__funpack>:
    13d0:	c7 0a de    	lsr.w     w1, #0x7, w5
    13d2:	f1 07 b2    	and.w     #0x7f, w1
    13d4:	f5 0f b2    	and.w     #0xff, w5
    13d6:	08 00 32    	bra       Z, 0x13e8 <zeroorsub>
    13d8:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13da:	02 00 32    	bra       Z, 0x13e0 <nanorinf>

000013dc <finitereturn>:
    13dc:	01 70 a0    	bset.w    w1, #0x7
    13de:	24 00 05    	retlw.w   #0x2, w4

000013e0 <nanorinf>:
    13e0:	81 0f 70    	ior.w     w0, w1, [w15]
    13e2:	01 00 32    	bra       Z, 0x13e6 <infinite>
    13e4:	04 08 05    	retlw.w   #0x80, w4

000013e6 <infinite>:
    13e6:	44 00 05    	retlw.w   #0x4, w4

000013e8 <zeroorsub>:
    13e8:	81 0f 70    	ior.w     w0, w1, [w15]
    13ea:	02 00 3a    	bra       NZ, 0x13f0 <subnormal>
    13ec:	14 00 05    	retlw.w   #0x1, w4

000013ee <normalize>:
    13ee:	85 02 e9    	dec.w     w5, w5

000013f0 <subnormal>:
    13f0:	00 00 40    	add.w     w0, w0, w0
    13f2:	81 c0 48    	addc.b    w1, w1, w1
    13f4:	fc ff 3b    	bra       NN, 0x13ee <normalize>
    13f6:	01 70 a0    	bset.w    w1, #0x7
    13f8:	24 00 05    	retlw.w   #0x2, w4

000013fa <__funpack2>:
    13fa:	00 04 be    	mov.d     w0, w8
    13fc:	e9 ff 07    	rcall     0x13d0 <__funpack>
    13fe:	00 03 be    	mov.d     w0, w6
    1400:	04 05 be    	mov.d     w4, w10
    1402:	02 00 be    	mov.d     w2, w0
    1404:	e5 ff 07    	rcall     0x13d0 <__funpack>
    1406:	84 4f 75    	ior.b     w10, w4, [w15]
    1408:	00 00 06    	return    

0000140a <__fPropagateNaN>:
    140a:	02 00 be    	mov.d     w2, w0
    140c:	64 50 e1    	cp.w      w10, #0x4
    140e:	05 00 36    	bra       LEU, 0x141a <return0>
    1410:	64 20 e1    	cp.w      w4, #0x4
    1412:	02 00 36    	bra       LEU, 0x1418 <return8>
    1414:	09 68 a3    	btst.z    w9, #0x6
    1416:	01 00 3a    	bra       NZ, 0x141a <return0>

00001418 <return8>:
    1418:	08 00 be    	mov.d     w8, w0

0000141a <return0>:
    141a:	01 60 a0    	bset.w    w1, #0x6

0000141c <__fbopExit>:
    141c:	4f 06 78    	mov.w     [--w15], w12
    141e:	4f 05 be    	mov.d     [--w15], w10
    1420:	4f 04 be    	mov.d     [--w15], w8
    1422:	00 00 06    	return    

00001424 <__fbopReturnNaN>:
    1424:	f0 ff 2f    	mov.w     #0xffff, w0
    1426:	f1 ff 27    	mov.w     #0x7fff, w1
    1428:	f9 ff 37    	bra       0x141c <__fbopExit>

0000142a <___mulsf3>:
    142a:	88 9f be    	mov.d     w8, [w15++]
    142c:	8a 9f be    	mov.d     w10, [w15++]
    142e:	8c 1f 78    	mov.w     w12, [w15++]
    1430:	e4 ff 07    	rcall     0x13fa <__funpack2>
    1432:	eb ff 33    	bra       N, 0x140a <__fPropagateNaN>
    1434:	03 86 6c    	xor.w     w9, w3, w12
    1436:	64 50 e1    	cp.w      w10, #0x4
    1438:	24 00 32    	bra       Z, 0x1482 <aisinfinite>
    143a:	64 20 e1    	cp.w      w4, #0x4
    143c:	27 00 32    	bra       Z, 0x148c <bisinfinite>
    143e:	61 50 e1    	cp.w      w10, #0x1
    1440:	22 00 32    	bra       Z, 0x1486 <return8>
    1442:	61 20 e1    	cp.w      w4, #0x1
    1444:	21 00 32    	bra       Z, 0x1488 <return2>
    1446:	8b 85 42    	add.w     w5, w11, w11
    1448:	eb 07 b1    	sub.w     #0x7e, w11
    144a:	01 34 b8    	mul.uu    w6, w1, w8
    144c:	00 3a b8    	mul.uu    w7, w0, w4
    144e:	08 04 42    	add.w     w4, w8, w8
    1450:	89 84 4a    	addc.w    w5, w9, w9
    1452:	01 3a b8    	mul.uu    w7, w1, w4
    1454:	00 30 b8    	mul.uu    w6, w0, w0
    1456:	88 80 40    	add.w     w1, w8, w1
    1458:	09 01 4a    	addc.w    w4, w9, w2
    145a:	04 00 33    	bra       N, 0x1464 <formsticky>
    145c:	00 00 40    	add.w     w0, w0, w0
    145e:	81 80 48    	addc.w    w1, w1, w1
    1460:	02 01 49    	addc.w    w2, w2, w2
    1462:	8b 05 e9    	dec.w     w11, w11

00001464 <formsticky>:
    1464:	c9 09 dd    	sl.w      w1, #0x9, w3
    1466:	83 01 70    	ior.w     w0, w3, w3
    1468:	01 00 32    	bra       Z, 0x146c <formRandSig>
    146a:	13 00 20    	mov.w     #0x1, w3

0000146c <formRandSig>:
    146c:	c8 14 de    	lsr.w     w2, #0x8, w9
    146e:	48 14 dd    	sl.w      w2, #0x8, w8
    1470:	47 09 de    	lsr.w     w1, #0x7, w2
    1472:	12 00 b2    	and.w     #0x1, w2
    1474:	c8 08 de    	lsr.w     w1, #0x8, w1
    1476:	08 84 70    	ior.w     w1, w8, w8
    1478:	85 ff 07    	rcall     0x1384 <__fpack>

0000147a <return0>:
    147a:	01 f0 a1    	bclr.w    w1, #0xf
    147c:	0c f0 a7    	btsc.w    w12, #0xf
    147e:	01 f0 a0    	bset.w    w1, #0xf
    1480:	cd ff 37    	bra       0x141c <__fbopExit>

00001482 <aisinfinite>:
    1482:	61 20 e1    	cp.w      w4, #0x1
    1484:	cf ff 32    	bra       Z, 0x1424 <__fbopReturnNaN>

00001486 <return8>:
    1486:	08 01 be    	mov.d     w8, w2

00001488 <return2>:
    1488:	02 00 be    	mov.d     w2, w0
    148a:	f7 ff 37    	bra       0x147a <return0>

0000148c <bisinfinite>:
    148c:	61 50 e1    	cp.w      w10, #0x1
    148e:	fc ff 3a    	bra       NZ, 0x1488 <return2>
    1490:	c9 ff 37    	bra       0x1424 <__fbopReturnNaN>

00001492 <__fcompare>:
    1492:	88 9f be    	mov.d     w8, [w15++]
    1494:	8a 9f be    	mov.d     w10, [w15++]
    1496:	84 1f 78    	mov.w     w4, [w15++]
    1498:	b0 ff 07    	rcall     0x13fa <__funpack2>
    149a:	4f 00 78    	mov.w     [--w15], w0
    149c:	11 00 33    	bra       N, 0x14c0 <exit>
    149e:	f0 ff 2f    	mov.w     #0xffff, w0
    14a0:	83 8f 6c    	xor.w     w9, w3, [w15]
    14a2:	06 00 3b    	bra       NN, 0x14b0 <comparemag>
    14a4:	04 05 65    	and.w     w10, w4, w10
    14a6:	0a 00 a7    	btsc.w    w10, #0x0
    14a8:	08 00 37    	bra       0x14ba <returnEqual>
    14aa:	09 f0 a6    	btss.w    w9, #0xf
    14ac:	10 00 20    	mov.w     #0x1, w0
    14ae:	08 00 37    	bra       0x14c0 <exit>

000014b0 <comparemag>:
    14b0:	82 0f 54    	sub.w     w8, w2, [w15]
    14b2:	83 8f 5c    	subb.w    w9, w3, [w15]
    14b4:	03 00 39    	bra       NC, 0x14bc <adjust>
    14b6:	10 00 20    	mov.w     #0x1, w0
    14b8:	01 00 3e    	bra       GTU, 0x14bc <adjust>

000014ba <returnEqual>:
    14ba:	00 00 20    	mov.w     #0x0, w0

000014bc <adjust>:
    14bc:	09 f0 a7    	btsc.w    w9, #0xf
    14be:	00 00 ea    	neg.w     w0, w0

000014c0 <exit>:
    14c0:	4f 05 be    	mov.d     [--w15], w10
    14c2:	4f 04 be    	mov.d     [--w15], w8
    14c4:	00 00 e0    	cp0.w     w0
    14c6:	00 00 06    	return    

000014c8 <___floatundisf>:
    14c8:	88 9f be    	mov.d     w8, [w15++]
    14ca:	8a 9f be    	mov.d     w10, [w15++]
    14cc:	00 82 70    	ior.w     w1, w0, w4
    14ce:	04 02 71    	ior.w     w2, w4, w4
    14d0:	04 82 71    	ior.w     w3, w4, w4
    14d2:	26 00 32    	bra       Z, 0x1520 <return0>
    14d4:	00 04 be    	mov.d     w0, w8
    14d6:	02 00 be    	mov.d     w2, w0
    14d8:	60 11 b8    	mul.uu    w2, #0x0, w2
    14da:	6b 09 20    	mov.w     #0x96, w11
    14dc:	95 02 20    	mov.w     #0x29, w5
    14de:	01 82 cf    	ff1l      w1, w4
    14e0:	0a 00 39    	bra       NC, 0x14f6 <fixshift>
    14e2:	05 41 b1    	sub.b     #0x10, w5
    14e4:	00 82 cf    	ff1l      w0, w4
    14e6:	07 00 39    	bra       NC, 0x14f6 <fixshift>
    14e8:	05 41 b1    	sub.b     #0x10, w5
    14ea:	09 82 cf    	ff1l      w9, w4
    14ec:	04 00 39    	bra       NC, 0x14f6 <fixshift>
    14ee:	05 41 b1    	sub.b     #0x10, w5
    14f0:	08 82 cf    	ff1l      w8, w4
    14f2:	01 00 39    	bra       NC, 0x14f6 <fixshift>
    14f4:	05 41 b1    	sub.b     #0x10, w5

000014f6 <fixshift>:
    14f6:	05 42 52    	sub.b     w4, w5, w4
    14f8:	12 00 32    	bra       Z, 0x151e <round>
    14fa:	0a 00 3b    	bra       NN, 0x1510 <shiftleft>

000014fc <shiftright>:
    14fc:	82 81 71    	ior.w     w3, w2, w3
    14fe:	61 01 64    	and.w     w8, #0x1, w2
    1500:	81 00 d1    	lsr.w     w1, w1
    1502:	00 80 d3    	rrc.w     w0, w0
    1504:	89 84 d3    	rrc.w     w9, w9
    1506:	08 84 d3    	rrc.w     w8, w8
    1508:	8b 05 e8    	inc.w     w11, w11
    150a:	04 42 e8    	inc.b     w4, w4
    150c:	f7 ff 3a    	bra       NZ, 0x14fc <shiftright>
    150e:	07 00 37    	bra       0x151e <round>

00001510 <shiftleft>:
    1510:	08 04 44    	add.w     w8, w8, w8
    1512:	89 84 4c    	addc.w    w9, w9, w9
    1514:	00 00 48    	addc.w    w0, w0, w0
    1516:	81 80 48    	addc.w    w1, w1, w1
    1518:	8b 05 e9    	dec.w     w11, w11
    151a:	04 42 e9    	dec.b     w4, w4
    151c:	f9 ff 3a    	bra       NZ, 0x1510 <shiftleft>

0000151e <round>:
    151e:	32 ff 07    	rcall     0x1384 <__fpack>

00001520 <return0>:
    1520:	4f 05 be    	mov.d     [--w15], w10
    1522:	4f 04 be    	mov.d     [--w15], w8
    1524:	00 00 06    	return    

00001526 <_strtoll>:
    1526:	e4 87 47    	add.w     w15, #0x4, w15
    1528:	88 9f be    	mov.d     w8, [w15++]
    152a:	8a 9f be    	mov.d     w10, [w15++]
    152c:	8c 1f 78    	mov.w     w12, [w15++]
    152e:	8e 1f 78    	mov.w     w14, [w15++]
    1530:	00 05 78    	mov.w     w0, w10
    1532:	01 07 78    	mov.w     w1, w14
    1534:	02 06 78    	mov.w     w2, w12
    1536:	0e 00 e0    	cp0.w     w14
    1538:	01 00 3a    	bra       NZ, 0x153c <.L2>
    153a:	6e 87 57    	sub.w     w15, #0xe, w14

0000153c <.L2>:
    153c:	8a 05 78    	mov.w     w10, w11

0000153e <.L3>:
    153e:	8b 04 78    	mov.w     w11, w9
    1540:	89 05 78    	mov.w     w9, w11
    1542:	3b 44 78    	mov.b     [w11++], w8
    1544:	08 00 fb    	se        w8, w0
    1546:	0f 01 07    	rcall     0x1766 <_isspace>
    1548:	00 00 e0    	cp0.w     w0
    154a:	f9 ff 3a    	bra       NZ, 0x153e <.L3>
    154c:	d0 c2 b3    	mov.b     #0x2d, w0
    154e:	80 4f 54    	sub.b     w8, w0, [w15]
    1550:	03 00 32    	bra       Z, 0x1558 <.L4>
    1552:	00 c0 e9    	dec2.b    w0, w0
    1554:	80 4f 54    	sub.b     w8, w0, [w15]
    1556:	02 00 3a    	bra       NZ, 0x155c <.L14>

00001558 <.L4>:
    1558:	89 04 e8    	inc.w     w9, w9
    155a:	01 00 37    	bra       0x155e <.L5>

0000155c <.L14>:
    155c:	00 44 78    	mov.b     w0, w8

0000155e <.L5>:
    155e:	0c 01 78    	mov.w     w12, w2
    1560:	8e 00 78    	mov.w     w14, w1
    1562:	09 00 78    	mov.w     w9, w0
    1564:	3a 00 07    	rcall     0x15da <__Stoull>
    1566:	9e 8f 54    	sub.w     w9, [w14], [w15]
    1568:	01 00 3a    	bra       NZ, 0x156c <.L6>
    156a:	0a 0f 78    	mov.w     w10, [w14]

0000156c <.L6>:
    156c:	9e 0f 55    	sub.w     w10, [w14], [w15]
    156e:	05 00 3a    	bra       NZ, 0x157a <.L7>
    1570:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1572:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1574:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1576:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1578:	17 00 3a    	bra       NZ, 0x15a8 <.L8>

0000157a <.L7>:
    157a:	b4 c2 b3    	mov.b     #0x2b, w4
    157c:	84 4f 54    	sub.b     w8, w4, [w15]
    157e:	09 00 3a    	bra       NZ, 0x1592 <.L9>
    1580:	f4 ff 2f    	mov.w     #0xffff, w4
    1582:	f5 ff 27    	mov.w     #0x7fff, w5
    1584:	60 33 b8    	mul.uu    w6, #0x0, w6
    1586:	04 00 e1    	cp.w      w0, w4
    1588:	05 88 e1    	cpb.w     w1, w5
    158a:	06 90 e1    	cpb.w     w2, w6
    158c:	07 98 e1    	cpb.w     w3, w7
    158e:	0c 00 3e    	bra       GTU, 0x15a8 <.L8>
    1590:	1e 00 37    	bra       0x15ce <.L12>

00001592 <.L9>:
    1592:	d4 c2 b3    	mov.b     #0x2d, w4
    1594:	84 4f 54    	sub.b     w8, w4, [w15]
    1596:	1b 00 3a    	bra       NZ, 0x15ce <.L12>
    1598:	04 00 20    	mov.w     #0x0, w4
    159a:	05 00 28    	mov.w     #0x8000, w5
    159c:	60 33 b8    	mul.uu    w6, #0x0, w6
    159e:	04 00 e1    	cp.w      w0, w4
    15a0:	05 88 e1    	cpb.w     w1, w5
    15a2:	06 90 e1    	cpb.w     w2, w6
    15a4:	07 98 e1    	cpb.w     w3, w7
    15a6:	0d 00 36    	bra       LEU, 0x15c2 <.L11>

000015a8 <.L8>:
    15a8:	20 02 20    	mov.w     #0x22, w0
    15aa:	d0 9f 88    	mov.w     w0, 0x13fa
    15ac:	f0 ff 2f    	mov.w     #0xffff, w0
    15ae:	f1 ff 27    	mov.w     #0x7fff, w1
    15b0:	60 11 b8    	mul.uu    w2, #0x0, w2
    15b2:	d4 c2 b3    	mov.b     #0x2d, w4
    15b4:	84 4f 54    	sub.b     w8, w4, [w15]
    15b6:	0b 00 3a    	bra       NZ, 0x15ce <.L12>
    15b8:	00 00 20    	mov.w     #0x0, w0
    15ba:	01 00 28    	mov.w     #0x8000, w1
    15bc:	f2 ff 2f    	mov.w     #0xffff, w2
    15be:	f3 ff 2f    	mov.w     #0xffff, w3
    15c0:	06 00 37    	bra       0x15ce <.L12>

000015c2 <.L11>:
    15c2:	60 22 b8    	mul.uu    w4, #0x0, w4
    15c4:	60 33 b8    	mul.uu    w6, #0x0, w6
    15c6:	00 00 52    	sub.w     w4, w0, w0
    15c8:	81 80 5a    	subb.w    w5, w1, w1
    15ca:	02 01 5b    	subb.w    w6, w2, w2
    15cc:	83 81 5b    	subb.w    w7, w3, w3

000015ce <.L12>:
    15ce:	4f 07 78    	mov.w     [--w15], w14
    15d0:	4f 06 78    	mov.w     [--w15], w12
    15d2:	4f 05 be    	mov.d     [--w15], w10
    15d4:	4f 04 be    	mov.d     [--w15], w8
    15d6:	4f 00 b1    	sub.w     #0x4, w15
    15d8:	00 00 06    	return    

000015da <__Stoull>:
    15da:	0f 02 b0    	add.w     #0x20, w15
    15dc:	88 9f be    	mov.d     w8, [w15++]
    15de:	8a 9f be    	mov.d     w10, [w15++]
    15e0:	8c 9f be    	mov.d     w12, [w15++]
    15e2:	8e 1f 78    	mov.w     w14, [w15++]
    15e4:	80 b7 9f    	mov.w     w0, [w15-32]
    15e6:	01 07 78    	mov.w     w1, w14
    15e8:	82 06 78    	mov.w     w2, w13
    15ea:	00 04 78    	mov.w     w0, w8

000015ec <.L2>:
    15ec:	08 06 78    	mov.w     w8, w12
    15ee:	0c 04 78    	mov.w     w12, w8
    15f0:	38 40 78    	mov.b     [w8++], w0
    15f2:	e0 e7 9f    	mov.b     w0, [w15-26]
    15f4:	80 40 78    	mov.b     w0, w1
    15f6:	01 00 fb    	se        w1, w0
    15f8:	b6 00 07    	rcall     0x1766 <_isspace>
    15fa:	00 00 e0    	cp0.w     w0
    15fc:	f7 ff 3a    	bra       NZ, 0x15ec <.L2>
    15fe:	d0 c2 b3    	mov.b     #0x2d, w0
    1600:	6f e1 97    	mov.b     [w15-26], w2
    1602:	80 4f 51    	sub.b     w2, w0, [w15]
    1604:	03 00 32    	bra       Z, 0x160c <.L3>
    1606:	00 c0 e9    	dec2.b    w0, w0
    1608:	80 4f 51    	sub.b     w2, w0, [w15]
    160a:	02 00 3a    	bra       NZ, 0x1610 <.L19>

0000160c <.L3>:
    160c:	0c 06 e8    	inc.w     w12, w12
    160e:	01 00 37    	bra       0x1612 <.L4>

00001610 <.L19>:
    1610:	e0 e7 9f    	mov.b     w0, [w15-26]

00001612 <.L4>:
    1612:	0d 00 e0    	cp0.w     w13
    1614:	05 00 35    	bra       LT, 0x1620 <.L5>
    1616:	e1 8f 56    	sub.w     w13, #0x1, [w15]
    1618:	03 00 32    	bra       Z, 0x1620 <.L5>
    161a:	40 02 20    	mov.w     #0x24, w0
    161c:	80 8f 56    	sub.w     w13, w0, [w15]
    161e:	07 00 34    	bra       LE, 0x162e <.L6>

00001620 <.L5>:
    1620:	60 44 b8    	mul.uu    w8, #0x0, w8
    1622:	60 55 b8    	mul.uu    w10, #0x0, w10
    1624:	0e 00 e0    	cp0.w     w14
    1626:	97 00 32    	bra       Z, 0x1756 <.L7>
    1628:	0f b2 97    	mov.w     [w15-32], w4
    162a:	04 0f 78    	mov.w     w4, [w14]
    162c:	94 00 37    	bra       0x1756 <.L7>

0000162e <.L6>:
    162e:	0d 00 e0    	cp0.w     w13
    1630:	0e 00 32    	bra       Z, 0x164e <.L8>
    1632:	f0 8f 56    	sub.w     w13, #0x10, [w15]
    1634:	1a 00 3a    	bra       NZ, 0x166a <.L9>
    1636:	00 c3 b3    	mov.b     #0x30, w0
    1638:	9c 4f 10    	subr.b    w0, [w12], [w15]
    163a:	17 00 3a    	bra       NZ, 0x166a <.L9>
    163c:	1c 40 90    	mov.b     [w12+1], w0
    163e:	81 c7 b3    	mov.b     #0x78, w1
    1640:	81 4f 50    	sub.b     w0, w1, [w15]
    1642:	03 00 32    	bra       Z, 0x164a <.L10>
    1644:	81 c5 b3    	mov.b     #0x58, w1
    1646:	81 4f 50    	sub.b     w0, w1, [w15]
    1648:	10 00 3a    	bra       NZ, 0x166a <.L9>

0000164a <.L10>:
    164a:	0c 86 e8    	inc2.w    w12, w12
    164c:	0e 00 37    	bra       0x166a <.L9>

0000164e <.L8>:
    164e:	ad 00 20    	mov.w     #0xa, w13
    1650:	00 c3 b3    	mov.b     #0x30, w0
    1652:	9c 4f 10    	subr.b    w0, [w12], [w15]
    1654:	0a 00 3a    	bra       NZ, 0x166a <.L9>
    1656:	1c 40 90    	mov.b     [w12+1], w0
    1658:	81 c7 b3    	mov.b     #0x78, w1
    165a:	81 4f 50    	sub.b     w0, w1, [w15]
    165c:	04 00 32    	bra       Z, 0x1666 <.L11>
    165e:	8d 00 20    	mov.w     #0x8, w13
    1660:	81 c5 b3    	mov.b     #0x58, w1
    1662:	81 4f 50    	sub.b     w0, w1, [w15]
    1664:	02 00 3a    	bra       NZ, 0x166a <.L9>

00001666 <.L11>:
    1666:	0c 86 e8    	inc2.w    w12, w12
    1668:	0d 01 20    	mov.w     #0x10, w13

0000166a <.L9>:
    166a:	0c 00 78    	mov.w     w12, w0

0000166c <.L12>:
    166c:	80 00 78    	mov.w     w0, w1
    166e:	01 00 78    	mov.w     w1, w0
    1670:	02 c3 b3    	mov.b     #0x30, w2
    1672:	b0 4f 11    	subr.b    w2, [w0++], [w15]
    1674:	fb ff 32    	bra       Z, 0x166c <.L12>
    1676:	e1 af 9f    	mov.w     w1, [w15-36]
    1678:	81 02 78    	mov.w     w1, w5
    167a:	95 b7 9f    	mov.w     w5, [w15-30]
    167c:	60 44 b8    	mul.uu    w8, #0x0, w8
    167e:	60 55 b8    	mul.uu    w10, #0x0, w10
    1680:	8c bf 9f    	mov.w     w12, [w15-16]
    1682:	1c 00 37    	bra       0x16bc <.L13>

00001684 <.L14>:
    1684:	01 3a 21    	mov.w     #0x13a0, w1
    1686:	81 40 50    	sub.b     w0, w1, w1
    1688:	e1 df 9f    	mov.b     w1, [w15-34]
    168a:	61 6a b9    	mul.su    w13, #0x1, w4
    168c:	61 2b b9    	mul.su    w5, #0x1, w6
    168e:	08 00 be    	mov.d     w8, w0
    1690:	0a 01 be    	mov.d     w10, w2
    1692:	7c 05 07    	rcall     0x218c <___muldi3>
    1694:	ef da 97    	mov.b     [w15-34], w5
    1696:	05 02 fb    	se        w5, w4
    1698:	cf a2 de    	asr.w     w4, #0xf, w5
    169a:	61 2b b9    	mul.su    w5, #0x1, w6
    169c:	c4 b7 9f    	mov.w     w4, [w15-24]
    169e:	d5 b7 9f    	mov.w     w5, [w15-22]
    16a0:	e6 b7 9f    	mov.w     w6, [w15-20]
    16a2:	f7 b7 9f    	mov.w     w7, [w15-18]
    16a4:	a8 af 9f    	mov.w     w8, [w15-44]
    16a6:	b9 af 9f    	mov.w     w9, [w15-42]
    16a8:	ca af 9f    	mov.w     w10, [w15-40]
    16aa:	db af 9f    	mov.w     w11, [w15-38]
    16ac:	4f b2 97    	mov.w     [w15-24], w4
    16ae:	df b2 97    	mov.w     [w15-22], w5
    16b0:	6f b3 97    	mov.w     [w15-20], w6
    16b2:	ff b3 97    	mov.w     [w15-18], w7
    16b4:	00 04 42    	add.w     w4, w0, w8
    16b6:	81 84 4a    	addc.w    w5, w1, w9
    16b8:	02 05 4b    	addc.w    w6, w2, w10
    16ba:	83 85 4b    	addc.w    w7, w3, w11

000016bc <.L13>:
    16bc:	9f b2 97    	mov.w     [w15-30], w5
    16be:	a5 b7 9f    	mov.w     w5, [w15-28]
    16c0:	05 03 78    	mov.w     w5, w6
    16c2:	36 00 fb    	se        [w6++], w0
    16c4:	96 b7 9f    	mov.w     w6, [w15-30]
    16c6:	57 00 07    	rcall     0x1776 <_tolower>
    16c8:	0d 01 78    	mov.w     w13, w2
    16ca:	80 00 78    	mov.w     w0, w1
    16cc:	00 3a 21    	mov.w     #0x13a0, w0
    16ce:	30 02 07    	rcall     0x1b30 <_memchr>
    16d0:	00 00 e0    	cp0.w     w0
    16d2:	d8 ff 3a    	bra       NZ, 0x1684 <.L14>
    16d4:	0f be 97    	mov.w     [w15-16], w12
    16d6:	af b3 97    	mov.w     [w15-28], w7
    16d8:	87 0f 56    	sub.w     w12, w7, [w15]
    16da:	07 00 3a    	bra       NZ, 0x16ea <.L15>
    16dc:	60 44 b8    	mul.uu    w8, #0x0, w8
    16de:	60 55 b8    	mul.uu    w10, #0x0, w10
    16e0:	0e 00 e0    	cp0.w     w14
    16e2:	39 00 32    	bra       Z, 0x1756 <.L7>
    16e4:	0f b6 97    	mov.w     [w15-32], w12
    16e6:	0c 0f 78    	mov.w     w12, [w14]
    16e8:	36 00 37    	bra       0x1756 <.L7>

000016ea <.L15>:
    16ea:	2f b0 97    	mov.w     [w15-28], w0
    16ec:	6f a9 97    	mov.w     [w15-36], w2
    16ee:	82 00 50    	sub.w     w0, w2, w1
    16f0:	50 3c 21    	mov.w     #0x13c5, w0
    16f2:	60 c0 7e    	mov.b     [w0+w13], w0
    16f4:	00 00 fb    	se        w0, w0
    16f6:	00 80 50    	sub.w     w1, w0, w0
    16f8:	20 00 33    	bra       N, 0x173a <.L16>
    16fa:	19 00 3a    	bra       NZ, 0x172e <.L17>
    16fc:	6f da 97    	mov.b     [w15-34], w4
    16fe:	04 00 fb    	se        w4, w0
    1700:	cf 80 de    	asr.w     w0, #0xf, w1
    1702:	61 09 b9    	mul.su    w1, #0x1, w2
    1704:	00 00 54    	sub.w     w8, w0, w0
    1706:	81 80 5c    	subb.w    w9, w1, w1
    1708:	02 01 5d    	subb.w    w10, w2, w2
    170a:	83 81 5d    	subb.w    w11, w3, w3
    170c:	00 40 e1    	cp.w      w8, w0
    170e:	01 c8 e1    	cpb.w     w9, w1
    1710:	02 d0 e1    	cpb.w     w10, w2
    1712:	03 d8 e1    	cpb.w     w11, w3
    1714:	0c 00 39    	bra       NC, 0x172e <.L17>
    1716:	61 6a b9    	mul.su    w13, #0x1, w4
    1718:	61 2b b9    	mul.su    w5, #0x1, w6
    171a:	cf 04 07    	rcall     0x20ba <___udivdi3>
    171c:	2f aa 97    	mov.w     [w15-44], w4
    171e:	bf aa 97    	mov.w     [w15-42], w5
    1720:	4f ab 97    	mov.w     [w15-40], w6
    1722:	df ab 97    	mov.w     [w15-38], w7
    1724:	04 00 e1    	cp.w      w0, w4
    1726:	05 88 e1    	cpb.w     w1, w5
    1728:	06 90 e1    	cpb.w     w2, w6
    172a:	07 98 e1    	cpb.w     w3, w7
    172c:	06 00 32    	bra       Z, 0x173a <.L16>

0000172e <.L17>:
    172e:	20 02 20    	mov.w     #0x22, w0
    1730:	d0 9f 88    	mov.w     w0, 0x13fa
    1732:	f8 ff 2f    	mov.w     #0xffff, w8
    1734:	f9 ff 2f    	mov.w     #0xffff, w9
    1736:	08 05 be    	mov.d     w8, w10
    1738:	0a 00 37    	bra       0x174e <.L18>

0000173a <.L16>:
    173a:	d0 c2 b3    	mov.b     #0x2d, w0
    173c:	ef e2 97    	mov.b     [w15-26], w5
    173e:	80 cf 52    	sub.b     w5, w0, [w15]
    1740:	06 00 3a    	bra       NZ, 0x174e <.L18>
    1742:	60 00 b8    	mul.uu    w0, #0x0, w0
    1744:	60 11 b8    	mul.uu    w2, #0x0, w2
    1746:	08 04 50    	sub.w     w0, w8, w8
    1748:	89 84 58    	subb.w    w1, w9, w9
    174a:	0a 05 59    	subb.w    w2, w10, w10
    174c:	8b 85 59    	subb.w    w3, w11, w11

0000174e <.L18>:
    174e:	0e 00 e0    	cp0.w     w14
    1750:	02 00 32    	bra       Z, 0x1756 <.L7>
    1752:	2f b3 97    	mov.w     [w15-28], w6
    1754:	06 0f 78    	mov.w     w6, [w14]

00001756 <.L7>:
    1756:	08 00 be    	mov.d     w8, w0
    1758:	0a 01 be    	mov.d     w10, w2
    175a:	4f 07 78    	mov.w     [--w15], w14
    175c:	4f 06 be    	mov.d     [--w15], w12
    175e:	4f 05 be    	mov.d     [--w15], w10
    1760:	4f 04 be    	mov.d     [--w15], w8
    1762:	0f 02 b1    	sub.w     #0x20, w15
    1764:	00 00 06    	return    

00001766 <_isspace>:
    1766:	69 00 e1    	cp.w      w0, #0x9
    1768:	04 00 35    	bra       LT, 0x1772 <nomatch>
    176a:	6d 00 e1    	cp.w      w0, #0xd
    176c:	03 00 34    	bra       LE, 0x1774 <match>
    176e:	00 02 b1    	sub.w     #0x20, w0
    1770:	01 00 32    	bra       Z, 0x1774 <match>

00001772 <nomatch>:
    1772:	00 00 05    	retlw.w   #0x0, w0

00001774 <match>:
    1774:	10 00 05    	retlw.w   #0x1, w0

00001776 <_tolower>:
    1776:	80 00 78    	mov.w     w0, w1
    1778:	11 04 b1    	sub.w     #0x41, w1
    177a:	03 00 35    	bra       LT, 0x1782 <nomatch>
    177c:	91 01 b1    	sub.w     #0x19, w1
    177e:	01 00 3c    	bra       GT, 0x1782 <nomatch>

00001780 <match>:
    1780:	00 50 a0    	bset.w    w0, #0x5

00001782 <nomatch>:
    1782:	00 00 06    	return    

00001784 <__Geterrno>:
    1784:	e0 9f 80    	mov.w     0x13fc, w0
    1786:	00 00 e0    	cp0.w     w0
    1788:	01 00 32    	bra       Z, 0x178c <.L2>
    178a:	00 00 01    	call      w0

0000178c <.L2>:
    178c:	a0 3f 21    	mov.w     #0x13fa, w0
    178e:	00 00 06    	return    

00001790 <_prout>:
    1790:	88 1f 78    	mov.w     w8, [w15++]
    1792:	02 04 78    	mov.w     w2, w8
    1794:	08 01 78    	mov.w     w8, w2
    1796:	d6 01 07    	rcall     0x1b44 <_memcpy>
    1798:	08 00 40    	add.w     w0, w8, w0
    179a:	4f 04 78    	mov.w     [--w15], w8
    179c:	00 00 06    	return    

0000179e <__sprintf_cdnopuxX>:
    179e:	00 00 fa    	lnk       #0x0
    17a0:	88 1f 78    	mov.w     w8, [w15++]
    17a2:	00 04 78    	mov.w     w0, w8
    17a4:	ea 81 57    	sub.w     w15, #0xa, w3
    17a6:	3f b9 97    	mov.w     [w15-10], w2
    17a8:	88 00 78    	mov.w     w8, w1
    17aa:	00 79 21    	mov.w     #0x1790, w0
    17ac:	07 00 07    	rcall     0x17bc <___Printf_cdnopuxX>
    17ae:	00 00 e0    	cp0.w     w0
    17b0:	02 00 35    	bra       LT, 0x17b6 <.L3>
    17b2:	80 40 eb    	clr.b     w1
    17b4:	01 74 78    	mov.b     w1, [w8+w0]

000017b6 <.L3>:
    17b6:	4f 04 78    	mov.w     [--w15], w8
    17b8:	00 80 fa    	ulnk      
    17ba:	00 00 06    	return    

000017bc <___Printf_cdnopuxX>:
    17bc:	62 00 fa    	lnk       #0x62
    17be:	88 9f be    	mov.d     w8, [w15++]
    17c0:	8a 1f 78    	mov.w     w10, [w15++]
    17c2:	00 05 78    	mov.w     w0, w10
    17c4:	81 04 78    	mov.w     w1, w9
    17c6:	02 04 78    	mov.w     w2, w8
    17c8:	83 00 78    	mov.w     w3, w1
    17ca:	80 f9 2f    	mov.w     #0xff98, w0
    17cc:	0f 00 40    	add.w     w0, w15, w0
    17ce:	b8 03 07    	rcall     0x1f40 <__Vacopy>
    17d0:	9a 97 9f    	mov.w     w10, [w15-94]
    17d2:	a9 97 9f    	mov.w     w9, [w15-92]
    17d4:	00 00 eb    	clr.w     w0
    17d6:	b0 9f 9f    	mov.w     w0, [w15-74]

000017d8 <.L31>:
    17d8:	18 85 fb    	ze        [w8], w10
    17da:	8a 04 fb    	se        w10, w9
    17dc:	0a 05 ea    	neg.w     w10, w10
    17de:	4f 55 de    	lsr.w     w10, #0xf, w10
    17e0:	50 02 20    	mov.w     #0x25, w0
    17e2:	80 8f 54    	sub.w     w9, w0, [w15]
    17e4:	0d 00 32    	bra       Z, 0x1800 <.L3>
    17e6:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    17e8:	0b 00 3a    	bra       NZ, 0x1800 <.L3>
    17ea:	0a 01 78    	mov.w     w10, w2
    17ec:	88 00 78    	mov.w     w8, w1
    17ee:	2f 90 97    	mov.w     [w15-92], w0
    17f0:	9f 91 97    	mov.w     [w15-94], w3
    17f2:	03 00 01    	call      w3
    17f4:	a0 97 9f    	mov.w     w0, [w15-92]
    17f6:	00 00 e0    	cp0.w     w0
    17f8:	8e 00 32    	bra       Z, 0x1916 <.L27>
    17fa:	3f 98 97    	mov.w     [w15-74], w0
    17fc:	00 00 e8    	inc.w     w0, w0
    17fe:	b0 9f 9f    	mov.w     w0, [w15-74]

00001800 <.L3>:
    1800:	0a 04 44    	add.w     w8, w10, w8
    1802:	50 02 20    	mov.w     #0x25, w0
    1804:	80 8f 54    	sub.w     w9, w0, [w15]
    1806:	04 00 32    	bra       Z, 0x1810 <.L5>
    1808:	09 00 e0    	cp0.w     w9
    180a:	e6 ff 3a    	bra       NZ, 0x17d8 <.L31>
    180c:	3f 98 97    	mov.w     [w15-74], w0
    180e:	84 00 37    	bra       0x1918 <.L4>

00001810 <.L5>:
    1810:	00 00 eb    	clr.w     w0
    1812:	90 9f 9f    	mov.w     w0, [w15-78]
    1814:	80 9f 9f    	mov.w     w0, [w15-80]
    1816:	f0 97 9f    	mov.w     w0, [w15-82]
    1818:	e0 97 9f    	mov.w     w0, [w15-84]
    181a:	d0 97 9f    	mov.w     w0, [w15-86]
    181c:	c0 97 9f    	mov.w     w0, [w15-88]
    181e:	07 00 37    	bra       0x182e <.L34>

00001820 <.L8>:
    1820:	01 5b 21    	mov.w     #0x15b0, w1
    1822:	01 00 50    	sub.w     w0, w1, w0
    1824:	00 00 40    	add.w     w0, w0, w0
    1826:	41 5a 21    	mov.w     #0x15a4, w1
    1828:	61 00 78    	mov.w     [w1+w0], w0
    182a:	df 98 97    	mov.w     [w15-70], w1
    182c:	01 00 70    	ior.w     w0, w1, w0

0000182e <.L34>:
    182e:	d0 9f 9f    	mov.w     w0, [w15-70]
    1830:	88 04 78    	mov.w     w8, w9
    1832:	09 04 78    	mov.w     w9, w8
    1834:	38 45 78    	mov.b     [w8++], w10
    1836:	8a 00 fb    	se        w10, w1
    1838:	00 5b 21    	mov.w     #0x15b0, w0
    183a:	8b 01 07    	rcall     0x1b52 <_strchr>
    183c:	00 00 e0    	cp0.w     w0
    183e:	f0 ff 3a    	bra       NZ, 0x1820 <.L8>
    1840:	a1 c2 b3    	mov.b     #0x2a, w1
    1842:	81 4f 55    	sub.b     w10, w1, [w15]
    1844:	0e 00 3a    	bra       NZ, 0x1862 <.L9>
    1846:	cf 88 97    	mov.w     [w15-104], w1
    1848:	01 80 e9    	dec2.w    w1, w0
    184a:	c0 8f 9f    	mov.w     w0, [w15-104]
    184c:	10 00 78    	mov.w     [w0], w0
    184e:	c0 9f 9f    	mov.w     w0, [w15-72]
    1850:	00 00 e0    	cp0.w     w0
    1852:	05 00 3d    	bra       GE, 0x185e <.L10>
    1854:	00 00 ea    	neg.w     w0, w0
    1856:	c0 9f 9f    	mov.w     w0, [w15-72]
    1858:	5f 98 97    	mov.w     [w15-70], w0
    185a:	00 20 a0    	bset.w    w0, #0x2
    185c:	d0 9f 9f    	mov.w     w0, [w15-70]

0000185e <.L10>:
    185e:	09 04 e8    	inc.w     w9, w8
    1860:	0f 00 37    	bra       0x1880 <.L11>

00001862 <.L9>:
    1862:	c0 9f 9f    	mov.w     w0, [w15-72]
    1864:	00 00 eb    	clr.w     w0
    1866:	05 00 37    	bra       0x1872 <.L32>

00001868 <.L14>:
    1868:	f2 ff 27    	mov.w     #0x7fff, w2
    186a:	82 0f 50    	sub.w     w0, w2, [w15]
    186c:	02 00 32    	bra       Z, 0x1872 <.L32>
    186e:	6a 01 b9    	mul.su    w0, #0xa, w2
    1870:	02 80 40    	add.w     w1, w2, w0

00001872 <.L32>:
    1872:	09 04 78    	mov.w     w9, w8
    1874:	88 04 78    	mov.w     w8, w9
    1876:	b9 00 fb    	se        [w9++], w1
    1878:	01 03 b1    	sub.w     #0x30, w1
    187a:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    187c:	f5 ff 36    	bra       LEU, 0x1868 <.L14>
    187e:	c0 9f 9f    	mov.w     w0, [w15-72]

00001880 <.L11>:
    1880:	e0 c2 b3    	mov.b     #0x2e, w0
    1882:	98 4f 10    	subr.b    w0, [w8], [w15]
    1884:	02 00 32    	bra       Z, 0x188a <.L15>
    1886:	00 80 eb    	setm.w    w0
    1888:	19 00 37    	bra       0x18bc <.L35>

0000188a <.L15>:
    188a:	a0 c2 b3    	mov.b     #0x2a, w0
    188c:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    188e:	07 00 3a    	bra       NZ, 0x189e <.L17>
    1890:	cf 88 97    	mov.w     [w15-104], w1
    1892:	01 80 e9    	dec2.w    w1, w0
    1894:	c0 8f 9f    	mov.w     w0, [w15-104]
    1896:	10 00 78    	mov.w     [w0], w0
    1898:	a0 9f 9f    	mov.w     w0, [w15-76]
    189a:	08 04 e8    	inc.w     w8, w8
    189c:	10 00 37    	bra       0x18be <.L16>

0000189e <.L17>:
    189e:	00 00 eb    	clr.w     w0
    18a0:	a0 9f 9f    	mov.w     w0, [w15-76]
    18a2:	88 00 78    	mov.w     w8, w1
    18a4:	05 00 37    	bra       0x18b0 <.L33>

000018a6 <.L20>:
    18a6:	f3 ff 27    	mov.w     #0x7fff, w3
    18a8:	83 0f 50    	sub.w     w0, w3, [w15]
    18aa:	02 00 32    	bra       Z, 0x18b0 <.L33>
    18ac:	6a 02 b9    	mul.su    w0, #0xa, w4
    18ae:	04 00 41    	add.w     w2, w4, w0

000018b0 <.L33>:
    18b0:	01 04 78    	mov.w     w1, w8
    18b2:	88 00 78    	mov.w     w8, w1
    18b4:	31 01 fb    	se        [w1++], w2
    18b6:	02 03 b1    	sub.w     #0x30, w2
    18b8:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    18ba:	f5 ff 36    	bra       LEU, 0x18a6 <.L20>

000018bc <.L35>:
    18bc:	a0 9f 9f    	mov.w     w0, [w15-76]

000018be <.L16>:
    18be:	98 44 78    	mov.b     [w8], w9
    18c0:	89 00 fb    	se        w9, w1
    18c2:	c0 59 21    	mov.w     #0x159c, w0
    18c4:	46 01 07    	rcall     0x1b52 <_strchr>
    18c6:	00 00 e0    	cp0.w     w0
    18c8:	02 00 32    	bra       Z, 0x18ce <.L25>
    18ca:	08 04 e8    	inc.w     w8, w8
    18cc:	01 00 37    	bra       0x18d0 <.L21>

000018ce <.L25>:
    18ce:	80 44 eb    	clr.b     w9

000018d0 <.L21>:
    18d0:	c9 7f 9f    	mov.b     w9, [w15-68]
    18d2:	80 c6 b3    	mov.b     #0x68, w0
    18d4:	80 cf 54    	sub.b     w9, w0, [w15]
    18d6:	04 00 3a    	bra       NZ, 0x18e0 <.L22>
    18d8:	98 cf 14    	subr.b    w9, [w8], [w15]
    18da:	0a 00 3a    	bra       NZ, 0x18f0 <.L23>
    18dc:	66 40 50    	sub.b     w0, #0x6, w0
    18de:	06 00 37    	bra       0x18ec <.L36>

000018e0 <.L22>:
    18e0:	c0 c6 b3    	mov.b     #0x6c, w0
    18e2:	80 cf 54    	sub.b     w9, w0, [w15]
    18e4:	05 00 3a    	bra       NZ, 0x18f0 <.L23>
    18e6:	98 cf 14    	subr.b    w9, [w8], [w15]
    18e8:	03 00 3a    	bra       NZ, 0x18f0 <.L23>
    18ea:	65 40 40    	add.b     w0, #0x5, w0

000018ec <.L36>:
    18ec:	c0 7f 9f    	mov.b     w0, [w15-68]
    18ee:	08 04 e8    	inc.w     w8, w8

000018f0 <.L23>:
    18f0:	18 01 fb    	se        [w8], w2
    18f2:	e3 fb 2f    	mov.w     #0xffbe, w3
    18f4:	8f 81 41    	add.w     w3, w15, w3
    18f6:	81 f9 2f    	mov.w     #0xff98, w1
    18f8:	8f 80 40    	add.w     w1, w15, w1
    18fa:	a0 f9 2f    	mov.w     #0xff9a, w0
    18fc:	0f 00 40    	add.w     w0, w15, w0
    18fe:	10 00 07    	rcall     0x1920 <___Putfld_cdnopuxX>
    1900:	00 00 e0    	cp0.w     w0
    1902:	09 00 3a    	bra       NZ, 0x1916 <.L27>
    1904:	e1 fb 2f    	mov.w     #0xffbe, w1
    1906:	8f 80 40    	add.w     w1, w15, w1
    1908:	a0 f9 2f    	mov.w     #0xff9a, w0
    190a:	0f 00 40    	add.w     w0, w15, w0
    190c:	5d 02 07    	rcall     0x1dc8 <__Puttxt>
    190e:	00 00 e0    	cp0.w     w0
    1910:	02 00 35    	bra       LT, 0x1916 <.L27>
    1912:	08 04 e8    	inc.w     w8, w8
    1914:	61 ff 37    	bra       0x17d8 <.L31>

00001916 <.L27>:
    1916:	00 80 eb    	setm.w    w0

00001918 <.L4>:
    1918:	4f 05 78    	mov.w     [--w15], w10
    191a:	4f 04 be    	mov.d     [--w15], w8
    191c:	00 80 fa    	ulnk      
    191e:	00 00 06    	return    

00001920 <___Putfld_cdnopuxX>:
    1920:	88 1f 78    	mov.w     w8, [w15++]
    1922:	e4 c6 b3    	mov.b     #0x6e, w4
    1924:	84 4f 51    	sub.b     w2, w4, [w15]
    1926:	b6 00 32    	bra       Z, 0x1a94 <.L7>
    1928:	10 00 3c    	bra       GT, 0x194a <.L9>
    192a:	6b 42 52    	sub.b     w4, #0xb, w4
    192c:	84 4f 51    	sub.b     w2, w4, [w15]
    192e:	18 00 32    	bra       Z, 0x1960 <.L5>
    1930:	05 00 3c    	bra       GT, 0x193c <.L10>
    1932:	54 c2 b3    	mov.b     #0x25, w4
    1934:	84 4f 51    	sub.b     w2, w4, [w15]
    1936:	ee 00 32    	bra       Z, 0x1b14 <.L3>
    1938:	84 c5 b3    	mov.b     #0x58, w4
    193a:	0f 00 37    	bra       0x195a <.L47>

0000193c <.L10>:
    193c:	44 c6 b3    	mov.b     #0x64, w4
    193e:	84 4f 51    	sub.b     w2, w4, [w15]
    1940:	14 00 32    	bra       Z, 0x196a <.L6>
    1942:	65 42 42    	add.b     w4, #0x5, w4
    1944:	84 4f 51    	sub.b     w2, w4, [w15]
    1946:	e9 00 3a    	bra       NZ, 0x1b1a <.L2>
    1948:	10 00 37    	bra       0x196a <.L6>

0000194a <.L9>:
    194a:	04 c7 b3    	mov.b     #0x70, w4
    194c:	84 4f 51    	sub.b     w2, w4, [w15]
    194e:	d5 00 32    	bra       Z, 0x1afa <.L8>
    1950:	53 00 35    	bra       LT, 0x19f8 <.L4>
    1952:	65 42 42    	add.b     w4, #0x5, w4
    1954:	84 4f 51    	sub.b     w2, w4, [w15]
    1956:	50 00 32    	bra       Z, 0x19f8 <.L4>
    1958:	63 42 42    	add.b     w4, #0x3, w4

0000195a <.L47>:
    195a:	84 4f 51    	sub.b     w2, w4, [w15]
    195c:	de 00 3a    	bra       NZ, 0x1b1a <.L2>
    195e:	4c 00 37    	bra       0x19f8 <.L4>

00001960 <.L5>:
    1960:	11 81 e9    	dec2.w    [w1], w2
    1962:	82 08 78    	mov.w     w2, [w1]
    1964:	f0 00 90    	mov.w     [w0+14], w1
    1966:	12 41 78    	mov.b     [w2], w2
    1968:	d6 00 37    	bra       0x1b16 <.L53>

0000196a <.L6>:
    196a:	20 62 90    	mov.b     [w0+34], w4
    196c:	c5 c6 b3    	mov.b     #0x6c, w5
    196e:	85 4f 52    	sub.b     w4, w5, [w15]
    1970:	07 00 3a    	bra       NZ, 0x1980 <.L12>
    1972:	91 02 78    	mov.w     [w1], w5
    1974:	64 82 52    	sub.w     w5, #0x4, w4
    1976:	84 08 78    	mov.w     w4, [w1]
    1978:	14 02 be    	mov.d     [w4], w4
    197a:	4f ab de    	asr.w     w5, #0xf, w6
    197c:	86 03 78    	mov.w     w6, w7
    197e:	11 00 37    	bra       0x19a2 <.L13>

00001980 <.L12>:
    1980:	15 c7 b3    	mov.b     #0x71, w5
    1982:	85 4f 52    	sub.b     w4, w5, [w15]
    1984:	03 00 32    	bra       Z, 0x198c <.L43>
    1986:	a5 c6 b3    	mov.b     #0x6a, w5
    1988:	85 4f 52    	sub.b     w4, w5, [w15]
    198a:	06 00 3a    	bra       NZ, 0x1998 <.L15>

0000198c <.L43>:
    198c:	91 02 78    	mov.w     [w1], w5
    198e:	68 82 52    	sub.w     w5, #0x8, w4
    1990:	84 08 78    	mov.w     w4, [w1]
    1992:	54 03 be    	mov.d     [++w4], w6
    1994:	44 02 be    	mov.d     [--w4], w4
    1996:	05 00 37    	bra       0x19a2 <.L13>

00001998 <.L15>:
    1998:	11 82 e9    	dec2.w    [w1], w4
    199a:	84 08 78    	mov.w     w4, [w1]
    199c:	14 02 78    	mov.w     [w4], w4
    199e:	cf a2 de    	asr.w     w4, #0xf, w5
    19a0:	61 2b b9    	mul.su    w5, #0x1, w6

000019a2 <.L13>:
    19a2:	04 98 be    	mov.d     w4, [w0++]
    19a4:	06 90 be    	mov.d     w6, [w0--]
    19a6:	a0 60 90    	mov.b     [w0+34], w1
    19a8:	88 c6 b3    	mov.b     #0x68, w8
    19aa:	88 cf 50    	sub.b     w1, w8, [w15]
    19ac:	0d 00 32    	bra       Z, 0x19c8 <.L19>
    19ae:	28 c6 b3    	mov.b     #0x62, w8
    19b0:	88 cf 50    	sub.b     w1, w8, [w15]
    19b2:	04 00 3a    	bra       NZ, 0x19bc <.L18>
    19b4:	04 02 fb    	se        w4, w4
    19b6:	cf a2 de    	asr.w     w4, #0xf, w5
    19b8:	61 2b b9    	mul.su    w5, #0x1, w6
    19ba:	08 00 37    	bra       0x19cc <.L44>

000019bc <.L18>:
    19bc:	48 c7 b3    	mov.b     #0x74, w8
    19be:	88 cf 50    	sub.b     w1, w8, [w15]
    19c0:	03 00 32    	bra       Z, 0x19c8 <.L19>
    19c2:	66 44 44    	add.b     w8, #0x6, w8
    19c4:	88 cf 50    	sub.b     w1, w8, [w15]
    19c6:	04 00 3a    	bra       NZ, 0x19d0 <.L17>

000019c8 <.L19>:
    19c8:	cf a2 de    	asr.w     w4, #0xf, w5
    19ca:	61 2b b9    	mul.su    w5, #0x1, w6

000019cc <.L44>:
    19cc:	04 98 be    	mov.d     w4, [w0++]
    19ce:	06 90 be    	mov.d     w6, [w0--]

000019d0 <.L17>:
    19d0:	30 02 be    	mov.d     [w0++], w4
    19d2:	20 03 be    	mov.d     [w0--], w6
    19d4:	f0 00 90    	mov.w     [w0+14], w1
    19d6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    19d8:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    19da:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    19dc:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    19de:	02 00 3d    	bra       GE, 0x19e4 <.L20>
    19e0:	d4 c2 b3    	mov.b     #0x2d, w4
    19e2:	08 00 37    	bra       0x19f4 <.L45>

000019e4 <.L20>:
    19e4:	00 12 90    	mov.w     [w0+32], w4
    19e6:	04 18 a3    	btst.z    w4, #0x1
    19e8:	02 00 32    	bra       Z, 0x19ee <.L22>
    19ea:	b4 c2 b3    	mov.b     #0x2b, w4
    19ec:	03 00 37    	bra       0x19f4 <.L45>

000019ee <.L22>:
    19ee:	04 08 a3    	btst.z    w4, #0x0
    19f0:	4c 00 32    	bra       Z, 0x1a8a <.L31>
    19f2:	04 c2 b3    	mov.b     #0x20, w4

000019f4 <.L45>:
    19f4:	84 f1 78    	mov.b     w4, [w3+w1]
    19f6:	47 00 37    	bra       0x1a86 <.L54>

000019f8 <.L4>:
    19f8:	20 62 90    	mov.b     [w0+34], w4
    19fa:	c5 c6 b3    	mov.b     #0x6c, w5
    19fc:	85 4f 52    	sub.b     w4, w5, [w15]
    19fe:	06 00 3a    	bra       NZ, 0x1a0c <.L23>
    1a00:	91 02 78    	mov.w     [w1], w5
    1a02:	64 82 52    	sub.w     w5, #0x4, w4
    1a04:	84 08 78    	mov.w     w4, [w1]
    1a06:	14 02 be    	mov.d     [w4], w4
    1a08:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a0a:	11 00 37    	bra       0x1a2e <.L24>

00001a0c <.L23>:
    1a0c:	15 c7 b3    	mov.b     #0x71, w5
    1a0e:	85 4f 52    	sub.b     w4, w5, [w15]
    1a10:	03 00 32    	bra       Z, 0x1a18 <.L48>
    1a12:	a5 c6 b3    	mov.b     #0x6a, w5
    1a14:	85 4f 52    	sub.b     w4, w5, [w15]
    1a16:	06 00 3a    	bra       NZ, 0x1a24 <.L26>

00001a18 <.L48>:
    1a18:	91 02 78    	mov.w     [w1], w5
    1a1a:	68 82 52    	sub.w     w5, #0x8, w4
    1a1c:	84 08 78    	mov.w     w4, [w1]
    1a1e:	54 03 be    	mov.d     [++w4], w6
    1a20:	44 02 be    	mov.d     [--w4], w4
    1a22:	05 00 37    	bra       0x1a2e <.L24>

00001a24 <.L26>:
    1a24:	11 82 e9    	dec2.w    [w1], w4
    1a26:	84 08 78    	mov.w     w4, [w1]
    1a28:	14 02 78    	mov.w     [w4], w4
    1a2a:	80 02 eb    	clr.w     w5
    1a2c:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a2e <.L24>:
    1a2e:	04 98 be    	mov.d     w4, [w0++]
    1a30:	06 90 be    	mov.d     w6, [w0--]
    1a32:	a0 60 90    	mov.b     [w0+34], w1
    1a34:	88 c6 b3    	mov.b     #0x68, w8
    1a36:	88 cf 50    	sub.b     w1, w8, [w15]
    1a38:	0d 00 32    	bra       Z, 0x1a54 <.L30>
    1a3a:	28 c6 b3    	mov.b     #0x62, w8
    1a3c:	88 cf 50    	sub.b     w1, w8, [w15]
    1a3e:	04 00 3a    	bra       NZ, 0x1a48 <.L29>
    1a40:	04 82 fb    	ze        w4, w4
    1a42:	80 02 eb    	clr.w     w5
    1a44:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a46:	08 00 37    	bra       0x1a58 <.L49>

00001a48 <.L29>:
    1a48:	48 c7 b3    	mov.b     #0x74, w8
    1a4a:	88 cf 50    	sub.b     w1, w8, [w15]
    1a4c:	03 00 32    	bra       Z, 0x1a54 <.L30>
    1a4e:	66 44 44    	add.b     w8, #0x6, w8
    1a50:	88 cf 50    	sub.b     w1, w8, [w15]
    1a52:	04 00 3a    	bra       NZ, 0x1a5c <.L28>

00001a54 <.L30>:
    1a54:	80 02 eb    	clr.w     w5
    1a56:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a58 <.L49>:
    1a58:	04 98 be    	mov.d     w4, [w0++]
    1a5a:	06 90 be    	mov.d     w6, [w0--]

00001a5c <.L28>:
    1a5c:	80 10 90    	mov.w     [w0+32], w1
    1a5e:	01 38 a3    	btst.z    w1, #0x3
    1a60:	14 00 32    	bra       Z, 0x1a8a <.L31>
    1a62:	30 02 be    	mov.d     [w0++], w4
    1a64:	20 03 be    	mov.d     [w0--], w6
    1a66:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a68:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1a6a:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1a6c:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1a6e:	0d 00 32    	bra       Z, 0x1a8a <.L31>
    1a70:	81 c7 b3    	mov.b     #0x78, w1
    1a72:	81 4f 51    	sub.b     w2, w1, [w15]
    1a74:	03 00 32    	bra       Z, 0x1a7c <.L32>
    1a76:	81 c5 b3    	mov.b     #0x58, w1
    1a78:	81 4f 51    	sub.b     w2, w1, [w15]
    1a7a:	07 00 3a    	bra       NZ, 0x1a8a <.L31>

00001a7c <.L32>:
    1a7c:	f0 00 90    	mov.w     [w0+14], w1
    1a7e:	04 c3 b3    	mov.b     #0x30, w4
    1a80:	84 f1 78    	mov.b     w4, [w3+w1]
    1a82:	81 00 e8    	inc.w     w1, w1
    1a84:	82 f1 78    	mov.b     w2, [w3+w1]

00001a86 <.L54>:
    1a86:	81 00 e8    	inc.w     w1, w1
    1a88:	71 00 98    	mov.w     w1, [w0+14]

00001a8a <.L31>:
    1a8a:	f0 00 90    	mov.w     [w0+14], w1
    1a8c:	81 81 41    	add.w     w3, w1, w3
    1a8e:	63 00 98    	mov.w     w3, [w0+12]
    1a90:	82 40 78    	mov.b     w2, w1
    1a92:	3e 00 37    	bra       0x1b10 <.L52>

00001a94 <.L7>:
    1a94:	a0 61 90    	mov.b     [w0+34], w3
    1a96:	c4 c6 b3    	mov.b     #0x6c, w4
    1a98:	11 81 e9    	dec2.w    [w1], w2
    1a9a:	84 cf 51    	sub.b     w3, w4, [w15]
    1a9c:	22 00 32    	bra       Z, 0x1ae2 <.L37>
    1a9e:	0a 00 3c    	bra       GT, 0x1ab4 <.L41>
    1aa0:	64 42 52    	sub.b     w4, #0x4, w4
    1aa2:	84 cf 51    	sub.b     w3, w4, [w15]
    1aa4:	25 00 32    	bra       Z, 0x1af0 <.L51>
    1aa6:	04 c2 e8    	inc2.b    w4, w4
    1aa8:	84 cf 51    	sub.b     w3, w4, [w15]
    1aaa:	13 00 32    	bra       Z, 0x1ad2 <.L36>
    1aac:	68 42 52    	sub.b     w4, #0x8, w4
    1aae:	84 cf 51    	sub.b     w3, w4, [w15]
    1ab0:	1e 00 3a    	bra       NZ, 0x1aee <.L33>
    1ab2:	0a 00 37    	bra       0x1ac8 <.L55>

00001ab4 <.L41>:
    1ab4:	44 c7 b3    	mov.b     #0x74, w4
    1ab6:	84 cf 51    	sub.b     w3, w4, [w15]
    1ab8:	1b 00 32    	bra       Z, 0x1af0 <.L51>
    1aba:	66 42 42    	add.b     w4, #0x6, w4
    1abc:	84 cf 51    	sub.b     w3, w4, [w15]
    1abe:	18 00 32    	bra       Z, 0x1af0 <.L51>
    1ac0:	69 42 52    	sub.b     w4, #0x9, w4
    1ac2:	84 cf 51    	sub.b     w3, w4, [w15]
    1ac4:	14 00 3a    	bra       NZ, 0x1aee <.L33>
    1ac6:	05 00 37    	bra       0x1ad2 <.L36>

00001ac8 <.L55>:
    1ac8:	82 08 78    	mov.w     w2, [w1]
    1aca:	92 00 78    	mov.w     [w2], w1
    1acc:	40 58 90    	mov.b     [w0+28], w0
    1ace:	80 48 78    	mov.b     w0, [w1]
    1ad0:	2c 00 37    	bra       0x1b2a <.L11>

00001ad2 <.L36>:
    1ad2:	82 08 78    	mov.w     w2, [w1]
    1ad4:	92 00 78    	mov.w     [w2], w1
    1ad6:	60 0a 90    	mov.w     [w0+28], w4
    1ad8:	cf a2 de    	asr.w     w4, #0xf, w5
    1ada:	61 2b b9    	mul.su    w5, #0x1, w6
    1adc:	84 98 be    	mov.d     w4, [w1++]
    1ade:	86 90 be    	mov.d     w6, [w1--]
    1ae0:	24 00 37    	bra       0x1b2a <.L11>

00001ae2 <.L37>:
    1ae2:	82 08 78    	mov.w     w2, [w1]
    1ae4:	92 00 78    	mov.w     [w2], w1
    1ae6:	60 09 90    	mov.w     [w0+28], w2
    1ae8:	cf 91 de    	asr.w     w2, #0xf, w3
    1aea:	82 88 be    	mov.d     w2, [w1]
    1aec:	1e 00 37    	bra       0x1b2a <.L11>

00001aee <.L33>:
    1aee:	11 81 e9    	dec2.w    [w1], w2

00001af0 <.L51>:
    1af0:	82 08 78    	mov.w     w2, [w1]
    1af2:	92 00 78    	mov.w     [w2], w1
    1af4:	60 08 90    	mov.w     [w0+28], w0
    1af6:	80 08 78    	mov.w     w0, [w1]
    1af8:	18 00 37    	bra       0x1b2a <.L11>

00001afa <.L8>:
    1afa:	11 81 e9    	dec2.w    [w1], w2
    1afc:	82 08 78    	mov.w     w2, [w1]
    1afe:	12 02 78    	mov.w     [w2], w4
    1b00:	cf a2 de    	asr.w     w4, #0xf, w5
    1b02:	61 2b b9    	mul.su    w5, #0x1, w6
    1b04:	04 98 be    	mov.d     w4, [w0++]
    1b06:	06 90 be    	mov.d     w6, [w0--]
    1b08:	f0 00 90    	mov.w     [w0+14], w1
    1b0a:	81 81 41    	add.w     w3, w1, w3
    1b0c:	63 00 98    	mov.w     w3, [w0+12]
    1b0e:	81 c7 b3    	mov.b     #0x78, w1

00001b10 <.L52>:
    1b10:	2c 00 07    	rcall     0x1b6a <__Litob>
    1b12:	0b 00 37    	bra       0x1b2a <.L11>

00001b14 <.L3>:
    1b14:	f0 00 90    	mov.w     [w0+14], w1

00001b16 <.L53>:
    1b16:	82 f1 78    	mov.b     w2, [w3+w1]
    1b18:	06 00 37    	bra       0x1b26 <.L50>

00001b1a <.L2>:
    1b1a:	f0 00 90    	mov.w     [w0+14], w1
    1b1c:	81 81 41    	add.w     w3, w1, w3
    1b1e:	02 04 e0    	cp0.b     w2
    1b20:	01 00 3a    	bra       NZ, 0x1b24 <.L42>
    1b22:	52 c2 b3    	mov.b     #0x25, w2

00001b24 <.L42>:
    1b24:	82 49 78    	mov.b     w2, [w3]

00001b26 <.L50>:
    1b26:	81 00 e8    	inc.w     w1, w1
    1b28:	71 00 98    	mov.w     w1, [w0+14]

00001b2a <.L11>:
    1b2a:	00 00 eb    	clr.w     w0
    1b2c:	4f 04 78    	mov.w     [--w15], w8
    1b2e:	00 00 06    	return    

00001b30 <_memchr>:
    1b30:	03 00 37    	bra       0x1b38 <.L2>

00001b32 <.L4>:
    1b32:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    1b34:	05 00 32    	bra       Z, 0x1b40 <.L5>
    1b36:	02 01 e9    	dec.w     w2, w2

00001b38 <.L2>:
    1b38:	80 01 78    	mov.w     w0, w3
    1b3a:	02 00 e0    	cp0.w     w2
    1b3c:	fa ff 3a    	bra       NZ, 0x1b32 <.L4>
    1b3e:	00 00 05    	retlw.w   #0x0, w0

00001b40 <.L5>:
    1b40:	03 00 78    	mov.w     w3, w0
    1b42:	00 00 06    	return    

00001b44 <_memcpy>:
    1b44:	80 01 78    	mov.w     w0, w3
    1b46:	02 00 37    	bra       0x1b4c <.L2>

00001b48 <.L3>:
    1b48:	b1 59 78    	mov.b     [w1++], [w3++]
    1b4a:	02 01 e9    	dec.w     w2, w2

00001b4c <.L2>:
    1b4c:	02 00 e0    	cp0.w     w2
    1b4e:	fc ff 3a    	bra       NZ, 0x1b48 <.L3>
    1b50:	00 00 06    	return    

00001b52 <_strchr>:
    1b52:	02 00 37    	bra       0x1b58 <.L2>

00001b54 <.L4>:
    1b54:	03 04 e0    	cp0.b     w3
    1b56:	06 00 32    	bra       Z, 0x1b64 <.L5>

00001b58 <.L2>:
    1b58:	00 01 78    	mov.w     w0, w2
    1b5a:	02 00 78    	mov.w     w2, w0
    1b5c:	b0 41 78    	mov.b     [w0++], w3
    1b5e:	81 cf 51    	sub.b     w3, w1, [w15]
    1b60:	f9 ff 3a    	bra       NZ, 0x1b54 <.L4>
    1b62:	01 00 37    	bra       0x1b66 <.L3>

00001b64 <.L5>:
    1b64:	00 01 eb    	clr.w     w2

00001b66 <.L3>:
    1b66:	02 00 78    	mov.w     w2, w0
    1b68:	00 00 06    	return    

00001b6a <__Litob>:
    1b6a:	fc 87 47    	add.w     w15, #0x1c, w15
    1b6c:	88 9f be    	mov.d     w8, [w15++]
    1b6e:	8a 9f be    	mov.d     w10, [w15++]
    1b70:	8c 9f be    	mov.d     w12, [w15++]
    1b72:	8e 1f 78    	mov.w     w14, [w15++]
    1b74:	00 06 78    	mov.w     w0, w12
    1b76:	80 c5 b3    	mov.b     #0x58, w0
    1b78:	80 cf 50    	sub.b     w1, w0, [w15]
    1b7a:	0a 00 32    	bra       Z, 0x1b90 <.L35>
    1b7c:	77 40 40    	add.b     w0, #0x17, w0
    1b7e:	80 cf 50    	sub.b     w1, w0, [w15]
    1b80:	0a 00 32    	bra       Z, 0x1b96 <.L36>
    1b82:	69 40 40    	add.b     w0, #0x9, w0
    1b84:	80 cf 50    	sub.b     w1, w0, [w15]
    1b86:	0b 00 32    	bra       Z, 0x1b9e <.L37>
    1b88:	b0 58 21    	mov.w     #0x158b, w0
    1b8a:	80 bf 9f    	mov.w     w0, [w15-16]
    1b8c:	ae 00 20    	mov.w     #0xa, w14
    1b8e:	0a 00 37    	bra       0x1ba4 <.L2>

00001b90 <.L35>:
    1b90:	a2 57 21    	mov.w     #0x157a, w2
    1b92:	82 bf 9f    	mov.w     w2, [w15-16]
    1b94:	06 00 37    	bra       0x1ba2 <.L46>

00001b96 <.L36>:
    1b96:	b3 58 21    	mov.w     #0x158b, w3
    1b98:	83 bf 9f    	mov.w     w3, [w15-16]
    1b9a:	8e 00 20    	mov.w     #0x8, w14
    1b9c:	03 00 37    	bra       0x1ba4 <.L2>

00001b9e <.L37>:
    1b9e:	b4 58 21    	mov.w     #0x158b, w4
    1ba0:	84 bf 9f    	mov.w     w4, [w15-16]

00001ba2 <.L46>:
    1ba2:	0e 01 20    	mov.w     #0x10, w14

00001ba4 <.L2>:
    1ba4:	3c 02 be    	mov.d     [w12++], w4
    1ba6:	2c 03 be    	mov.d     [w12--], w6
    1ba8:	06 05 be    	mov.d     w6, w10
    1baa:	04 04 be    	mov.d     w4, w8
    1bac:	40 c6 b3    	mov.b     #0x64, w0
    1bae:	80 cf 50    	sub.b     w1, w0, [w15]
    1bb0:	03 00 32    	bra       Z, 0x1bb8 <.L3>
    1bb2:	65 40 40    	add.b     w0, #0x5, w0
    1bb4:	80 cf 50    	sub.b     w1, w0, [w15]
    1bb6:	0b 00 3a    	bra       NZ, 0x1bce <.L4>

00001bb8 <.L3>:
    1bb8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1bba:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1bbc:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1bbe:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1bc0:	06 00 3d    	bra       GE, 0x1bce <.L4>
    1bc2:	60 00 b8    	mul.uu    w0, #0x0, w0
    1bc4:	60 11 b8    	mul.uu    w2, #0x0, w2
    1bc6:	04 04 50    	sub.w     w0, w4, w8
    1bc8:	85 84 58    	subb.w    w1, w5, w9
    1bca:	06 05 59    	subb.w    w2, w6, w10
    1bcc:	87 85 59    	subb.w    w3, w7, w11

00001bce <.L4>:
    1bce:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1bd0:	04 00 32    	bra       Z, 0x1bda <.L38>
    1bd2:	40 00 20    	mov.w     #0x4, w0
    1bd4:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1bd6:	38 00 3a    	bra       NZ, 0x1c48 <.L51>
    1bd8:	01 00 37    	bra       0x1bdc <.L6>

00001bda <.L38>:
    1bda:	30 00 20    	mov.w     #0x3, w0

00001bdc <.L6>:
    1bdc:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1bde:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1be0:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1be2:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1be4:	04 00 3a    	bra       NZ, 0x1bee <.L8>
    1be6:	dc 08 90    	mov.w     [w12+26], w1
    1be8:	8d 01 20    	mov.w     #0x18, w13
    1bea:	01 00 e0    	cp0.w     w1
    1bec:	06 00 32    	bra       Z, 0x1bfa <.L9>

00001bee <.L8>:
    1bee:	8e 00 e9    	dec.w     w14, w1
    1bf0:	88 80 60    	and.w     w1, w8, w1
    1bf2:	8f ba 97    	mov.w     [w15-16], w5
    1bf4:	e5 c0 78    	mov.b     [w5+w1], w1
    1bf6:	f1 ef 9f    	mov.b     w1, [w15-17]
    1bf8:	7d 01 20    	mov.w     #0x17, w13

00001bfa <.L9>:
    1bfa:	80 00 78    	mov.w     w0, w1

00001bfc <.LB101>:
    1bfc:	81 00 e9    	dec.w     w1, w1
    1bfe:	05 00 33    	bra       N, 0x1c0a <.LE101>
    1c00:	8b 05 d1    	lsr.w     w11, w11
    1c02:	0a 85 d3    	rrc.w     w10, w10
    1c04:	89 84 d3    	rrc.w     w9, w9
    1c06:	08 84 d3    	rrc.w     w8, w8
    1c08:	f9 ff 37    	bra       0x1bfc <.LB101>

00001c0a <.LE101>:
    1c0a:	08 9e be    	mov.d     w8, [w12++]
    1c0c:	0a 96 be    	mov.d     w10, [w12--]
    1c0e:	12 00 37    	bra       0x1c34 <.L10>

00001c10 <.L12>:
    1c10:	8d 06 e9    	dec.w     w13, w13
    1c12:	8e 00 e9    	dec.w     w14, w1
    1c14:	84 80 60    	and.w     w1, w4, w1
    1c16:	0f b9 97    	mov.w     [w15-16], w2
    1c18:	e2 c1 78    	mov.b     [w2+w1], w3
    1c1a:	82 fd 2f    	mov.w     #0xffd8, w2
    1c1c:	0f 01 41    	add.w     w2, w15, w2
    1c1e:	03 f1 7e    	mov.b     w3, [w2+w13]
    1c20:	80 00 78    	mov.w     w0, w1

00001c22 <.LB115>:
    1c22:	81 00 e9    	dec.w     w1, w1
    1c24:	05 00 33    	bra       N, 0x1c30 <.LE115>
    1c26:	87 83 d1    	asr.w     w7, w7
    1c28:	06 83 d3    	rrc.w     w6, w6
    1c2a:	85 82 d3    	rrc.w     w5, w5
    1c2c:	04 82 d3    	rrc.w     w4, w4
    1c2e:	f9 ff 37    	bra       0x1c22 <.LB115>

00001c30 <.LE115>:
    1c30:	04 9e be    	mov.d     w4, [w12++]
    1c32:	06 96 be    	mov.d     w6, [w12--]

00001c34 <.L10>:
    1c34:	3c 02 be    	mov.d     [w12++], w4
    1c36:	2c 03 be    	mov.d     [w12--], w6
    1c38:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1c3a:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1c3c:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1c3e:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1c40:	8b 00 34    	bra       LE, 0x1d58 <.L11>
    1c42:	0d 00 e0    	cp0.w     w13
    1c44:	e5 ff 3c    	bra       GT, 0x1c10 <.L12>
    1c46:	88 00 37    	bra       0x1d58 <.L11>

00001c48 <.L51>:
    1c48:	2c 60 90    	mov.b     [w12+34], w0
    1c4a:	81 c6 b3    	mov.b     #0x68, w1
    1c4c:	81 4f 50    	sub.b     w0, w1, [w15]
    1c4e:	0b 00 32    	bra       Z, 0x1c66 <.L14>
    1c50:	06 00 3c    	bra       GT, 0x1c5e <.L16>
    1c52:	00 04 e0    	cp0.b     w0
    1c54:	08 00 32    	bra       Z, 0x1c66 <.L14>
    1c56:	e6 c0 50    	sub.b     w1, #0x6, w1
    1c58:	81 4f 50    	sub.b     w0, w1, [w15]
    1c5a:	4e 00 3a    	bra       NZ, 0x1cf8 <.L13>
    1c5c:	04 00 37    	bra       0x1c66 <.L14>

00001c5e <.L16>:
    1c5e:	c1 c6 b3    	mov.b     #0x6c, w1
    1c60:	81 4f 50    	sub.b     w0, w1, [w15]
    1c62:	4a 00 3a    	bra       NZ, 0x1cf8 <.L13>
    1c64:	21 00 37    	bra       0x1ca8 <.L52>

00001c66 <.L14>:
    1c66:	08 00 e0    	cp0.w     w8
    1c68:	04 00 3a    	bra       NZ, 0x1c72 <.L17>
    1c6a:	5c 08 90    	mov.w     [w12+26], w0
    1c6c:	8d 01 20    	mov.w     #0x18, w13
    1c6e:	00 00 e0    	cp0.w     w0
    1c70:	06 00 32    	bra       Z, 0x1c7e <.L18>

00001c72 <.L17>:
    1c72:	11 00 09    	repeat    #0x11
    1c74:	0e 84 d8    	div.uw    w8, w14
    1c76:	0f b9 97    	mov.w     [w15-16], w2
    1c78:	e2 c0 78    	mov.b     [w2+w1], w1
    1c7a:	f1 ef 9f    	mov.b     w1, [w15-17]
    1c7c:	7d 01 20    	mov.w     #0x17, w13

00001c7e <.L18>:
    1c7e:	11 00 09    	repeat    #0x11
    1c80:	0e 84 d8    	div.uw    w8, w14
    1c82:	0a 00 37    	bra       0x1c98 <.L47>

00001c84 <.L21>:
    1c84:	11 00 09    	repeat    #0x11
    1c86:	0e 04 d8    	div.sw    w8, w14
    1c88:	8d 06 e9    	dec.w     w13, w13
    1c8a:	0e 81 b9    	mul.ss    w0, w14, w2
    1c8c:	02 04 54    	sub.w     w8, w2, w8
    1c8e:	8f b8 97    	mov.w     [w15-16], w1
    1c90:	61 41 7c    	mov.b     [w1+w8], w2
    1c92:	81 fd 2f    	mov.w     #0xffd8, w1
    1c94:	8f 80 40    	add.w     w1, w15, w1
    1c96:	82 f0 7e    	mov.b     w2, [w1+w13]

00001c98 <.L47>:
    1c98:	00 04 78    	mov.w     w0, w8
    1c9a:	08 00 e0    	cp0.w     w8
    1c9c:	02 00 32    	bra       Z, 0x1ca2 <.L20>
    1c9e:	0d 00 e0    	cp0.w     w13
    1ca0:	f1 ff 3c    	bra       GT, 0x1c84 <.L21>

00001ca2 <.L20>:
    1ca2:	cf c4 de    	asr.w     w8, #0xf, w9
    1ca4:	61 4d b9    	mul.su    w9, #0x1, w10
    1ca6:	25 00 37    	bra       0x1cf2 <.L50>

00001ca8 <.L52>:
    1ca8:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1caa:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1cac:	04 00 3a    	bra       NZ, 0x1cb6 <.L22>
    1cae:	5c 08 90    	mov.w     [w12+26], w0
    1cb0:	8d 01 20    	mov.w     #0x18, w13
    1cb2:	00 00 e0    	cp0.w     w0
    1cb4:	07 00 32    	bra       Z, 0x1cc4 <.L23>

00001cb6 <.L22>:
    1cb6:	61 71 b9    	mul.su    w14, #0x1, w2
    1cb8:	08 00 be    	mov.d     w8, w0
    1cba:	63 01 07    	rcall     0x1f82 <___umodsi3>
    1cbc:	8f b9 97    	mov.w     [w15-16], w3
    1cbe:	e3 41 78    	mov.b     [w3+w0], w3
    1cc0:	f3 ef 9f    	mov.b     w3, [w15-17]
    1cc2:	7d 01 20    	mov.w     #0x17, w13

00001cc4 <.L23>:
    1cc4:	61 71 b9    	mul.su    w14, #0x1, w2
    1cc6:	08 00 be    	mov.d     w8, w0
    1cc8:	4c 01 07    	rcall     0x1f62 <___udivsi3>
    1cca:	0b 00 37    	bra       0x1ce2 <.L48>

00001ccc <.L26>:
    1ccc:	61 71 b9    	mul.su    w14, #0x1, w2
    1cce:	08 00 be    	mov.d     w8, w0
    1cd0:	39 01 07    	rcall     0x1f44 <___divsi3>
    1cd2:	8d 06 e9    	dec.w     w13, w13
    1cd4:	00 f1 b9    	mul.ss    w14, w0, w2
    1cd6:	02 04 54    	sub.w     w8, w2, w8
    1cd8:	0f ba 97    	mov.w     [w15-16], w4
    1cda:	e4 42 7c    	mov.b     [w4+w8], w5
    1cdc:	84 fd 2f    	mov.w     #0xffd8, w4
    1cde:	0f 02 42    	add.w     w4, w15, w4
    1ce0:	05 f2 7e    	mov.b     w5, [w4+w13]

00001ce2 <.L48>:
    1ce2:	00 04 be    	mov.d     w0, w8
    1ce4:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1ce6:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1ce8:	02 00 32    	bra       Z, 0x1cee <.L25>
    1cea:	0d 00 e0    	cp0.w     w13
    1cec:	ef ff 3c    	bra       GT, 0x1ccc <.L26>

00001cee <.L25>:
    1cee:	4f cd de    	asr.w     w9, #0xf, w10
    1cf0:	8a 05 78    	mov.w     w10, w11

00001cf2 <.L50>:
    1cf2:	08 9e be    	mov.d     w8, [w12++]
    1cf4:	0a 96 be    	mov.d     w10, [w12--]
    1cf6:	30 00 37    	bra       0x1d58 <.L11>

00001cf8 <.L13>:
    1cf8:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1cfa:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1cfc:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1cfe:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1d00:	04 00 3a    	bra       NZ, 0x1d0a <.L27>
    1d02:	5c 08 90    	mov.w     [w12+26], w0
    1d04:	8d 01 20    	mov.w     #0x18, w13
    1d06:	00 00 e0    	cp0.w     w0
    1d08:	09 00 32    	bra       Z, 0x1d1c <.L28>

00001d0a <.L27>:
    1d0a:	61 72 b9    	mul.su    w14, #0x1, w4
    1d0c:	61 2b b9    	mul.su    w5, #0x1, w6
    1d0e:	08 00 be    	mov.d     w8, w0
    1d10:	0a 01 be    	mov.d     w10, w2
    1d12:	da 01 07    	rcall     0x20c8 <___umoddi3>
    1d14:	0f ba 97    	mov.w     [w15-16], w4
    1d16:	64 42 78    	mov.b     [w4+w0], w4
    1d18:	f4 ef 9f    	mov.b     w4, [w15-17]
    1d1a:	7d 01 20    	mov.w     #0x17, w13

00001d1c <.L28>:
    1d1c:	61 72 b9    	mul.su    w14, #0x1, w4
    1d1e:	61 2b b9    	mul.su    w5, #0x1, w6
    1d20:	08 00 be    	mov.d     w8, w0
    1d22:	0a 01 be    	mov.d     w10, w2
    1d24:	ca 01 07    	rcall     0x20ba <___udivdi3>
    1d26:	0d 00 37    	bra       0x1d42 <.L49>

00001d28 <.L30>:
    1d28:	61 72 b9    	mul.su    w14, #0x1, w4
    1d2a:	61 2b b9    	mul.su    w5, #0x1, w6
    1d2c:	08 00 be    	mov.d     w8, w0
    1d2e:	0a 01 be    	mov.d     w10, w2
    1d30:	cf 01 07    	rcall     0x20d0 <___divdi3>
    1d32:	8d 06 e9    	dec.w     w13, w13
    1d34:	00 f2 b9    	mul.ss    w14, w0, w4
    1d36:	04 04 54    	sub.w     w8, w4, w8
    1d38:	8f ba 97    	mov.w     [w15-16], w5
    1d3a:	65 42 7c    	mov.b     [w5+w8], w4
    1d3c:	85 fd 2f    	mov.w     #0xffd8, w5
    1d3e:	8f 82 42    	add.w     w5, w15, w5
    1d40:	84 f2 7e    	mov.b     w4, [w5+w13]

00001d42 <.L49>:
    1d42:	00 9e be    	mov.d     w0, [w12++]
    1d44:	02 96 be    	mov.d     w2, [w12--]
    1d46:	3c 04 be    	mov.d     [w12++], w8
    1d48:	2c 05 be    	mov.d     [w12--], w10
    1d4a:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1d4c:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1d4e:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1d50:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1d52:	02 00 34    	bra       LE, 0x1d58 <.L11>
    1d54:	0d 00 e0    	cp0.w     w13
    1d56:	e8 ff 3c    	bra       GT, 0x1d28 <.L30>

00001d58 <.L11>:
    1d58:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1d5a:	10 00 3a    	bra       NZ, 0x1d7c <.L31>
    1d5c:	0c 10 90    	mov.w     [w12+32], w0
    1d5e:	00 38 a3    	btst.z    w0, #0x3
    1d60:	0d 00 32    	bra       Z, 0x1d7c <.L31>
    1d62:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    1d64:	06 00 3e    	bra       GTU, 0x1d72 <.L32>
    1d66:	85 fd 2f    	mov.w     #0xffd8, w5
    1d68:	8f 82 42    	add.w     w5, w15, w5
    1d6a:	e5 c0 7e    	mov.b     [w5+w13], w1
    1d6c:	00 c3 b3    	mov.b     #0x30, w0
    1d6e:	80 cf 50    	sub.b     w1, w0, [w15]
    1d70:	05 00 32    	bra       Z, 0x1d7c <.L31>

00001d72 <.L32>:
    1d72:	8d 06 e9    	dec.w     w13, w13
    1d74:	02 c3 b3    	mov.b     #0x30, w2
    1d76:	81 fd 2f    	mov.w     #0xffd8, w1
    1d78:	8f 80 40    	add.w     w1, w15, w1
    1d7a:	82 f0 7e    	mov.b     w2, [w1+w13]

00001d7c <.L31>:
    1d7c:	78 81 16    	subr.w    w13, #0x18, w2
    1d7e:	12 0e 98    	mov.w     w2, [w12+18]
    1d80:	6c 00 90    	mov.w     [w12+12], w0
    1d82:	83 fd 2f    	mov.w     #0xffd8, w3
    1d84:	8f 81 41    	add.w     w3, w15, w3
    1d86:	8d 80 41    	add.w     w3, w13, w1
    1d88:	dd fe 07    	rcall     0x1b44 <_memcpy>
    1d8a:	1c 08 90    	mov.w     [w12+18], w0
    1d8c:	dc 08 90    	mov.w     [w12+26], w1
    1d8e:	81 0f 50    	sub.w     w0, w1, [w15]
    1d90:	06 00 3d    	bra       GE, 0x1d9e <.L33>
    1d92:	00 80 50    	sub.w     w1, w0, w0
    1d94:	00 0e 98    	mov.w     w0, [w12+16]
    1d96:	0c 10 90    	mov.w     [w12+32], w0
    1d98:	00 40 a1    	bclr.w    w0, #0x4
    1d9a:	00 16 98    	mov.w     w0, [w12+32]
    1d9c:	0f 00 37    	bra       0x1dbc <.L1>

00001d9e <.L33>:
    1d9e:	01 00 e0    	cp0.w     w1
    1da0:	0d 00 3d    	bra       GE, 0x1dbc <.L1>
    1da2:	8c 10 90    	mov.w     [w12+32], w1
    1da4:	f4 80 60    	and.w     w1, #0x14, w1
    1da6:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    1da8:	09 00 3a    	bra       NZ, 0x1dbc <.L1>
    1daa:	7c 09 90    	mov.w     [w12+30], w2
    1dac:	fc 00 90    	mov.w     [w12+14], w1
    1dae:	81 00 51    	sub.w     w2, w1, w1
    1db0:	0c 09 90    	mov.w     [w12+16], w2
    1db2:	82 80 50    	sub.w     w1, w2, w1
    1db4:	00 80 50    	sub.w     w1, w0, w0
    1db6:	42 40 a9    	bclr.b    0x42, #0x2
    1db8:	01 00 34    	bra       LE, 0x1dbc <.L1>
    1dba:	00 0e 98    	mov.w     w0, [w12+16]

00001dbc <.L1>:
    1dbc:	4f 07 78    	mov.w     [--w15], w14
    1dbe:	4f 06 be    	mov.d     [--w15], w12
    1dc0:	4f 05 be    	mov.d     [--w15], w10
    1dc2:	4f 04 be    	mov.d     [--w15], w8
    1dc4:	cf 01 b1    	sub.w     #0x1c, w15
    1dc6:	00 00 06    	return    

00001dc8 <__Puttxt>:
    1dc8:	04 00 fa    	lnk       #0x4
    1dca:	88 9f be    	mov.d     w8, [w15++]
    1dcc:	8a 9f be    	mov.d     w10, [w15++]
    1dce:	8c 1f 78    	mov.w     w12, [w15++]
    1dd0:	00 04 78    	mov.w     w0, w8
    1dd2:	01 06 78    	mov.w     w1, w12
    1dd4:	f8 0d 90    	mov.w     [w8+30], w11
    1dd6:	78 00 90    	mov.w     [w8+14], w0
    1dd8:	80 85 55    	sub.w     w11, w0, w11
    1dda:	08 08 90    	mov.w     [w8+16], w0
    1ddc:	80 85 55    	sub.w     w11, w0, w11
    1dde:	18 08 90    	mov.w     [w8+18], w0
    1de0:	80 85 55    	sub.w     w11, w0, w11
    1de2:	28 08 90    	mov.w     [w8+20], w0
    1de4:	80 85 55    	sub.w     w11, w0, w11
    1de6:	38 08 90    	mov.w     [w8+22], w0
    1de8:	80 85 55    	sub.w     w11, w0, w11
    1dea:	48 08 90    	mov.w     [w8+24], w0
    1dec:	80 85 55    	sub.w     w11, w0, w11
    1dee:	00 02 22    	mov.w     #0x2020, w0
    1df0:	90 bf 9f    	mov.w     w0, [w15-14]
    1df2:	00 03 23    	mov.w     #0x3030, w0
    1df4:	a0 bf 9f    	mov.w     w0, [w15-12]
    1df6:	08 10 90    	mov.w     [w8+32], w0
    1df8:	00 28 a3    	btst.z    w0, #0x2
    1dfa:	15 00 3a    	bra       NZ, 0x1e26 <.L2>
    1dfc:	0b 00 e0    	cp0.w     w11
    1dfe:	13 00 34    	bra       LE, 0x1e26 <.L2>
    1e00:	0b 05 78    	mov.w     w11, w10

00001e02 <.L5>:
    1e02:	8a 04 78    	mov.w     w10, w9
    1e04:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    1e06:	01 00 36    	bra       LEU, 0x1e0a <.L3>
    1e08:	29 00 20    	mov.w     #0x2, w9

00001e0a <.L3>:
    1e0a:	c8 01 90    	mov.w     [w8+8], w3
    1e0c:	09 01 78    	mov.w     w9, w2
    1e0e:	ee 80 57    	sub.w     w15, #0xe, w1
    1e10:	58 00 90    	mov.w     [w8+10], w0
    1e12:	03 00 01    	call      w3
    1e14:	50 04 98    	mov.w     w0, [w8+10]
    1e16:	00 00 e0    	cp0.w     w0
    1e18:	8c 00 32    	bra       Z, 0x1f32 <.L29>
    1e1a:	68 08 90    	mov.w     [w8+28], w0
    1e1c:	09 00 40    	add.w     w0, w9, w0
    1e1e:	60 0c 98    	mov.w     w0, [w8+28]
    1e20:	09 05 55    	sub.w     w10, w9, w10
    1e22:	42 40 a9    	bclr.b    0x42, #0x2
    1e24:	ee ff 3c    	bra       GT, 0x1e02 <.L5>

00001e26 <.L2>:
    1e26:	78 01 90    	mov.w     [w8+14], w2
    1e28:	02 00 e0    	cp0.w     w2
    1e2a:	0c 00 34    	bra       LE, 0x1e44 <.L6>
    1e2c:	c8 01 90    	mov.w     [w8+8], w3
    1e2e:	8c 00 78    	mov.w     w12, w1
    1e30:	58 00 90    	mov.w     [w8+10], w0
    1e32:	03 00 01    	call      w3
    1e34:	50 04 98    	mov.w     w0, [w8+10]
    1e36:	80 80 eb    	setm.w    w1
    1e38:	00 00 e0    	cp0.w     w0
    1e3a:	7c 00 32    	bra       Z, 0x1f34 <.L4>
    1e3c:	e8 08 90    	mov.w     [w8+28], w1
    1e3e:	78 00 90    	mov.w     [w8+14], w0
    1e40:	00 80 40    	add.w     w1, w0, w0
    1e42:	60 0c 98    	mov.w     w0, [w8+28]

00001e44 <.L6>:
    1e44:	88 0c 90    	mov.w     [w8+16], w9

00001e46 <.L30>:
    1e46:	09 00 e0    	cp0.w     w9
    1e48:	11 00 34    	bra       LE, 0x1e6c <.L7>
    1e4a:	09 05 78    	mov.w     w9, w10
    1e4c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1e4e:	01 00 36    	bra       LEU, 0x1e52 <.L8>
    1e50:	2a 00 20    	mov.w     #0x2, w10

00001e52 <.L8>:
    1e52:	c8 01 90    	mov.w     [w8+8], w3
    1e54:	0a 01 78    	mov.w     w10, w2
    1e56:	ec 80 57    	sub.w     w15, #0xc, w1
    1e58:	58 00 90    	mov.w     [w8+10], w0
    1e5a:	03 00 01    	call      w3
    1e5c:	50 04 98    	mov.w     w0, [w8+10]
    1e5e:	00 00 e0    	cp0.w     w0
    1e60:	68 00 32    	bra       Z, 0x1f32 <.L29>
    1e62:	68 08 90    	mov.w     [w8+28], w0
    1e64:	0a 00 40    	add.w     w0, w10, w0
    1e66:	60 0c 98    	mov.w     w0, [w8+28]
    1e68:	8a 84 54    	sub.w     w9, w10, w9
    1e6a:	ed ff 37    	bra       0x1e46 <.L30>

00001e6c <.L7>:
    1e6c:	18 09 90    	mov.w     [w8+18], w2
    1e6e:	02 00 e0    	cp0.w     w2
    1e70:	0c 00 34    	bra       LE, 0x1e8a <.L10>
    1e72:	c8 01 90    	mov.w     [w8+8], w3
    1e74:	e8 00 90    	mov.w     [w8+12], w1
    1e76:	58 00 90    	mov.w     [w8+10], w0
    1e78:	03 00 01    	call      w3
    1e7a:	50 04 98    	mov.w     w0, [w8+10]
    1e7c:	80 80 eb    	setm.w    w1
    1e7e:	00 00 e0    	cp0.w     w0
    1e80:	59 00 32    	bra       Z, 0x1f34 <.L4>
    1e82:	e8 08 90    	mov.w     [w8+28], w1
    1e84:	18 08 90    	mov.w     [w8+18], w0
    1e86:	00 80 40    	add.w     w1, w0, w0
    1e88:	60 0c 98    	mov.w     w0, [w8+28]

00001e8a <.L10>:
    1e8a:	a8 0c 90    	mov.w     [w8+20], w9

00001e8c <.L31>:
    1e8c:	09 00 e0    	cp0.w     w9
    1e8e:	11 00 34    	bra       LE, 0x1eb2 <.L11>
    1e90:	09 05 78    	mov.w     w9, w10
    1e92:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1e94:	01 00 36    	bra       LEU, 0x1e98 <.L12>
    1e96:	2a 00 20    	mov.w     #0x2, w10

00001e98 <.L12>:
    1e98:	c8 01 90    	mov.w     [w8+8], w3
    1e9a:	0a 01 78    	mov.w     w10, w2
    1e9c:	ec 80 57    	sub.w     w15, #0xc, w1
    1e9e:	58 00 90    	mov.w     [w8+10], w0
    1ea0:	03 00 01    	call      w3
    1ea2:	50 04 98    	mov.w     w0, [w8+10]
    1ea4:	00 00 e0    	cp0.w     w0
    1ea6:	45 00 32    	bra       Z, 0x1f32 <.L29>
    1ea8:	68 08 90    	mov.w     [w8+28], w0
    1eaa:	0a 00 40    	add.w     w0, w10, w0
    1eac:	60 0c 98    	mov.w     w0, [w8+28]
    1eae:	8a 84 54    	sub.w     w9, w10, w9
    1eb0:	ed ff 37    	bra       0x1e8c <.L31>

00001eb2 <.L11>:
    1eb2:	38 09 90    	mov.w     [w8+22], w2
    1eb4:	02 00 e0    	cp0.w     w2
    1eb6:	0e 00 34    	bra       LE, 0x1ed4 <.L14>
    1eb8:	e8 00 90    	mov.w     [w8+12], w1
    1eba:	18 08 90    	mov.w     [w8+18], w0
    1ebc:	80 80 40    	add.w     w1, w0, w1
    1ebe:	c8 01 90    	mov.w     [w8+8], w3
    1ec0:	58 00 90    	mov.w     [w8+10], w0
    1ec2:	03 00 01    	call      w3
    1ec4:	50 04 98    	mov.w     w0, [w8+10]
    1ec6:	80 80 eb    	setm.w    w1
    1ec8:	00 00 e0    	cp0.w     w0
    1eca:	34 00 32    	bra       Z, 0x1f34 <.L4>
    1ecc:	e8 08 90    	mov.w     [w8+28], w1
    1ece:	38 08 90    	mov.w     [w8+22], w0
    1ed0:	00 80 40    	add.w     w1, w0, w0
    1ed2:	60 0c 98    	mov.w     w0, [w8+28]

00001ed4 <.L14>:
    1ed4:	c8 0c 90    	mov.w     [w8+24], w9

00001ed6 <.L32>:
    1ed6:	09 00 e0    	cp0.w     w9
    1ed8:	11 00 34    	bra       LE, 0x1efc <.L15>
    1eda:	09 05 78    	mov.w     w9, w10
    1edc:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1ede:	01 00 36    	bra       LEU, 0x1ee2 <.L16>
    1ee0:	2a 00 20    	mov.w     #0x2, w10

00001ee2 <.L16>:
    1ee2:	c8 01 90    	mov.w     [w8+8], w3
    1ee4:	0a 01 78    	mov.w     w10, w2
    1ee6:	ec 80 57    	sub.w     w15, #0xc, w1
    1ee8:	58 00 90    	mov.w     [w8+10], w0
    1eea:	03 00 01    	call      w3
    1eec:	50 04 98    	mov.w     w0, [w8+10]
    1eee:	00 00 e0    	cp0.w     w0
    1ef0:	20 00 32    	bra       Z, 0x1f32 <.L29>
    1ef2:	68 08 90    	mov.w     [w8+28], w0
    1ef4:	0a 00 40    	add.w     w0, w10, w0
    1ef6:	60 0c 98    	mov.w     w0, [w8+28]
    1ef8:	8a 84 54    	sub.w     w9, w10, w9
    1efa:	ed ff 37    	bra       0x1ed6 <.L32>

00001efc <.L15>:
    1efc:	08 10 90    	mov.w     [w8+32], w0
    1efe:	80 00 eb    	clr.w     w1
    1f00:	00 28 a3    	btst.z    w0, #0x2
    1f02:	18 00 32    	bra       Z, 0x1f34 <.L4>
    1f04:	0b 00 e0    	cp0.w     w11
    1f06:	16 00 34    	bra       LE, 0x1f34 <.L4>
    1f08:	8b 04 78    	mov.w     w11, w9

00001f0a <.L19>:
    1f0a:	09 05 78    	mov.w     w9, w10
    1f0c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1f0e:	01 00 36    	bra       LEU, 0x1f12 <.L18>
    1f10:	2a 00 20    	mov.w     #0x2, w10

00001f12 <.L18>:
    1f12:	c8 01 90    	mov.w     [w8+8], w3
    1f14:	0a 01 78    	mov.w     w10, w2
    1f16:	ee 80 57    	sub.w     w15, #0xe, w1
    1f18:	58 00 90    	mov.w     [w8+10], w0
    1f1a:	03 00 01    	call      w3
    1f1c:	50 04 98    	mov.w     w0, [w8+10]
    1f1e:	00 00 e0    	cp0.w     w0
    1f20:	08 00 32    	bra       Z, 0x1f32 <.L29>
    1f22:	68 08 90    	mov.w     [w8+28], w0
    1f24:	0a 00 40    	add.w     w0, w10, w0
    1f26:	60 0c 98    	mov.w     w0, [w8+28]
    1f28:	8a 84 54    	sub.w     w9, w10, w9
    1f2a:	42 40 a9    	bclr.b    0x42, #0x2
    1f2c:	ee ff 3c    	bra       GT, 0x1f0a <.L19>
    1f2e:	80 00 eb    	clr.w     w1
    1f30:	01 00 37    	bra       0x1f34 <.L4>

00001f32 <.L29>:
    1f32:	80 80 eb    	setm.w    w1

00001f34 <.L4>:
    1f34:	01 00 78    	mov.w     w1, w0
    1f36:	4f 06 78    	mov.w     [--w15], w12
    1f38:	4f 05 be    	mov.d     [--w15], w10
    1f3a:	4f 04 be    	mov.d     [--w15], w8
    1f3c:	00 80 fa    	ulnk      
    1f3e:	00 00 06    	return    

00001f40 <__Vacopy>:
    1f40:	01 08 78    	mov.w     w1, [w0]
    1f42:	00 00 06    	return    

00001f44 <___divsi3>:
    1f44:	83 9f 68    	xor.w     w1, w3, [w15++]
    1f46:	01 00 e0    	cp0.w     w1
    1f48:	02 00 3d    	bra       GE, 0x1f4e <divtestb>
    1f4a:	60 00 10    	subr.w    w0, #0x0, w0
    1f4c:	e0 80 18    	subbr.w   w1, #0x0, w1

00001f4e <divtestb>:
    1f4e:	03 00 e0    	cp0.w     w3
    1f50:	02 00 3d    	bra       GE, 0x1f56 <calcquot>
    1f52:	60 01 11    	subr.w    w2, #0x0, w2
    1f54:	e0 81 19    	subbr.w   w3, #0x0, w3

00001f56 <calcquot>:
    1f56:	05 00 07    	rcall     0x1f62 <___udivsi3>
    1f58:	4f 00 e0    	cp0.w     [--w15]
    1f5a:	02 00 3b    	bra       NN, 0x1f60 <returnq>
    1f5c:	60 00 10    	subr.w    w0, #0x0, w0
    1f5e:	e0 80 18    	subbr.w   w1, #0x0, w1

00001f60 <returnq>:
    1f60:	00 00 06    	return    

00001f62 <___udivsi3>:
    1f62:	60 22 b8    	mul.uu    w4, #0x0, w4
    1f64:	06 02 20    	mov.w     #0x20, w6

00001f66 <nextbit>:
    1f66:	00 00 d0    	sl.w      w0, w0
    1f68:	81 80 d2    	rlc.w     w1, w1
    1f6a:	04 82 d2    	rlc.w     w4, w4
    1f6c:	85 82 d2    	rlc.w     w5, w5
    1f6e:	00 00 a0    	bset.w    w0, #0x0
    1f70:	02 02 52    	sub.w     w4, w2, w4
    1f72:	83 82 5a    	subb.w    w5, w3, w5
    1f74:	03 00 31    	bra       C, 0x1f7c <iterate>
    1f76:	02 02 42    	add.w     w4, w2, w4
    1f78:	83 82 4a    	addc.w    w5, w3, w5
    1f7a:	00 00 a1    	bclr.w    w0, #0x0

00001f7c <iterate>:
    1f7c:	06 03 e9    	dec.w     w6, w6
    1f7e:	f3 ff 3a    	bra       NZ, 0x1f66 <nextbit>
    1f80:	00 00 06    	return    

00001f82 <___umodsi3>:
    1f82:	ef ff 07    	rcall     0x1f62 <___udivsi3>
    1f84:	04 00 be    	mov.d     w4, w0
    1f86:	00 00 06    	return    

00001f88 <___PplusBdi>:
    1f88:	88 9f be    	mov.d     w8, [w15++]
    1f8a:	8a 9f be    	mov.d     w10, [w15++]
    1f8c:	30 04 42    	add.w     w4, [w0++], w8
    1f8e:	b0 84 4a    	addc.w    w5, [w0++], w9
    1f90:	30 05 4b    	addc.w    w6, [w0++], w10
    1f92:	90 85 4b    	addc.w    w7, [w0], w11
    1f94:	60 00 b1    	sub.w     #0x6, w0
    1f96:	08 98 be    	mov.d     w8, [w0++]
    1f98:	0a 90 be    	mov.d     w10, [w0--]
    1f9a:	04 40 e1    	cp.w      w8, w4
    1f9c:	05 c8 e1    	cpb.w     w9, w5
    1f9e:	06 d0 e1    	cpb.w     w10, w6
    1fa0:	07 d8 e1    	cpb.w     w11, w7
    1fa2:	02 00 31    	bra       C, 0x1fa8 <.L1>
    1fa4:	68 00 40    	add.w     w0, #0x8, w0
    1fa6:	10 08 e8    	inc.w     [w0], [w0]

00001fa8 <.L1>:
    1fa8:	4f 05 be    	mov.d     [--w15], w10
    1faa:	4f 04 be    	mov.d     [--w15], w8
    1fac:	00 00 06    	return    

00001fae <___PminusBdi>:
    1fae:	88 9f be    	mov.d     w8, [w15++]
    1fb0:	8a 9f be    	mov.d     w10, [w15++]
    1fb2:	30 04 be    	mov.d     [w0++], w8
    1fb4:	20 05 be    	mov.d     [w0--], w10
    1fb6:	04 18 54    	sub.w     w8, w4, [w0++]
    1fb8:	05 98 5c    	subb.w    w9, w5, [w0++]
    1fba:	06 18 5d    	subb.w    w10, w6, [w0++]
    1fbc:	07 98 5d    	subb.w    w11, w7, [w0++]
    1fbe:	11 00 20    	mov.w     #0x1, w1
    1fc0:	04 40 e1    	cp.w      w8, w4
    1fc2:	05 c8 e1    	cpb.w     w9, w5
    1fc4:	06 d0 e1    	cpb.w     w10, w6
    1fc6:	07 d8 e1    	cpb.w     w11, w7
    1fc8:	01 00 39    	bra       NC, 0x1fcc <.L4>
    1fca:	80 00 eb    	clr.w     w1

00001fcc <.L4>:
    1fcc:	10 88 10    	subr.w    w1, [w0], [w0]
    1fce:	4f 05 be    	mov.d     [--w15], w10
    1fd0:	4f 04 be    	mov.d     [--w15], w8
    1fd2:	00 00 06    	return    

00001fd4 <___udivmoddi3>:
    1fd4:	12 00 fa    	lnk       #0x12
    1fd6:	88 9f be    	mov.d     w8, [w15++]
    1fd8:	8a 9f be    	mov.d     w10, [w15++]
    1fda:	8c 9f be    	mov.d     w12, [w15++]
    1fdc:	e0 b7 9f    	mov.w     w0, [w15-20]
    1fde:	f1 b7 9f    	mov.w     w1, [w15-18]
    1fe0:	82 bf 9f    	mov.w     w2, [w15-16]
    1fe2:	93 bf 9f    	mov.w     w3, [w15-14]
    1fe4:	06 05 be    	mov.d     w6, w10
    1fe6:	04 04 be    	mov.d     w4, w8
    1fe8:	00 00 eb    	clr.w     w0
    1fea:	d0 b7 9f    	mov.w     w0, [w15-22]
    1fec:	c0 b7 9f    	mov.w     w0, [w15-24]
    1fee:	b0 b7 9f    	mov.w     w0, [w15-26]
    1ff0:	a0 b7 9f    	mov.w     w0, [w15-28]
    1ff2:	90 b7 9f    	mov.w     w0, [w15-30]
    1ff4:	00 06 eb    	clr.w     w12

00001ff6 <.L9>:
    1ff6:	5f b1 97    	mov.w     [w15-22], w2
    1ff8:	cf b0 97    	mov.w     [w15-24], w1
    1ffa:	82 01 41    	add.w     w2, w2, w3
    1ffc:	3f b0 97    	mov.w     [w15-26], w0
    1ffe:	02 00 e0    	cp0.w     w2
    2000:	04 00 3d    	bra       GE, 0x200a <.L6>
    2002:	37 00 07    	rcall     0x2072 <.LPA0>
    2004:	7e 80 57    	sub.w     w15, #0x1e, w0
    2006:	c0 ff 07    	rcall     0x1f88 <___PplusBdi>
    2008:	03 00 37    	bra       0x2010 <.L7>

0000200a <.L6>:
    200a:	33 00 07    	rcall     0x2072 <.LPA0>
    200c:	7e 80 57    	sub.w     w15, #0x1e, w0
    200e:	cf ff 07    	rcall     0x1fae <___PminusBdi>

00002010 <.L7>:
    2010:	df b6 97    	mov.w     [w15-22], w13
    2012:	0d 00 e0    	cp0.w     w13
    2014:	0c 00 35    	bra       LT, 0x202e <.L8>
    2016:	6f b2 97    	mov.w     [w15-20], w4
    2018:	ff b2 97    	mov.w     [w15-18], w5
    201a:	0f bb 97    	mov.w     [w15-16], w6
    201c:	9f bb 97    	mov.w     [w15-14], w7
    201e:	10 00 20    	mov.w     #0x1, w0
    2020:	01 00 20    	mov.w     #0x0, w1
    2022:	60 11 b8    	mul.uu    w2, #0x0, w2
    2024:	00 02 72    	ior.w     w4, w0, w4
    2026:	81 82 72    	ior.w     w5, w1, w5
    2028:	02 03 73    	ior.w     w6, w2, w6
    202a:	83 83 73    	ior.w     w7, w3, w7
    202c:	1b 00 07    	rcall     0x2064 <L0>

0000202e <.L8>:
    202e:	0c 06 e8    	inc.w     w12, w12
    2030:	01 04 20    	mov.w     #0x40, w1
    2032:	81 0f 56    	sub.w     w12, w1, [w15]
    2034:	e0 ff 3a    	bra       NZ, 0x1ff6 <.L9>
    2036:	0d 00 e0    	cp0.w     w13
    2038:	04 00 3d    	bra       GE, 0x2042 <.L10>
    203a:	08 02 be    	mov.d     w8, w4
    203c:	0a 03 be    	mov.d     w10, w6
    203e:	7e 80 57    	sub.w     w15, #0x1e, w0
    2040:	a3 ff 07    	rcall     0x1f88 <___PplusBdi>

00002042 <.L10>:
    2042:	5f a8 97    	mov.w     [w15-38], w0
    2044:	00 00 e0    	cp0.w     w0
    2046:	05 00 3a    	bra       NZ, 0x2052 <.L11>
    2048:	1f b2 97    	mov.w     [w15-30], w4
    204a:	af b2 97    	mov.w     [w15-28], w5
    204c:	3f b3 97    	mov.w     [w15-26], w6
    204e:	cf b3 97    	mov.w     [w15-24], w7
    2050:	09 00 07    	rcall     0x2064 <L0>

00002052 <.L11>:
    2052:	6f b0 97    	mov.w     [w15-20], w0
    2054:	ff b0 97    	mov.w     [w15-18], w1
    2056:	0f b9 97    	mov.w     [w15-16], w2
    2058:	9f b9 97    	mov.w     [w15-14], w3
    205a:	4f 06 be    	mov.d     [--w15], w12
    205c:	4f 05 be    	mov.d     [--w15], w10
    205e:	4f 04 be    	mov.d     [--w15], w8
    2060:	00 80 fa    	ulnk      
    2062:	00 00 06    	return    

00002064 <L0>:
    2064:	01 00 07    	rcall     0x2068 <.LPA5>
    2066:	00 00 06    	return    

00002068 <.LPA5>:
    2068:	a4 b7 9f    	mov.w     w4, [w15-28]
    206a:	b5 b7 9f    	mov.w     w5, [w15-26]
    206c:	c6 b7 9f    	mov.w     w6, [w15-24]
    206e:	d7 b7 9f    	mov.w     w7, [w15-22]
    2070:	00 00 06    	return    

00002072 <.LPA0>:
    2072:	4f 09 de    	lsr.w     w1, #0xf, w2
    2074:	82 81 71    	ior.w     w3, w2, w3
    2076:	b3 b7 9f    	mov.w     w3, [w15-26]
    2078:	4f 01 de    	lsr.w     w0, #0xf, w2
    207a:	81 80 40    	add.w     w1, w1, w1
    207c:	82 80 70    	ior.w     w1, w2, w1
    207e:	a1 b7 9f    	mov.w     w1, [w15-28]
    2080:	8f b0 97    	mov.w     [w15-32], w1
    2082:	4f 09 de    	lsr.w     w1, #0xf, w2
    2084:	00 00 40    	add.w     w0, w0, w0
    2086:	02 00 70    	ior.w     w0, w2, w0
    2088:	90 b7 9f    	mov.w     w0, [w15-30]
    208a:	7f a8 97    	mov.w     [w15-34], w0
    208c:	4f 01 de    	lsr.w     w0, #0xf, w2
    208e:	81 80 40    	add.w     w1, w1, w1
    2090:	82 80 70    	ior.w     w1, w2, w1
    2092:	81 b7 9f    	mov.w     w1, [w15-32]
    2094:	0d 00 07    	rcall     0x20b0 <.LPA4>
    2096:	4f 3a de    	lsr.w     w7, #0xf, w4
    2098:	00 00 40    	add.w     w0, w0, w0
    209a:	04 00 70    	ior.w     w0, w4, w0
    209c:	f0 af 9f    	mov.w     w0, [w15-34]
    209e:	08 00 07    	rcall     0x20b0 <.LPA4>
    20a0:	04 02 42    	add.w     w4, w4, w4
    20a2:	85 82 4a    	addc.w    w5, w5, w5
    20a4:	06 03 4b    	addc.w    w6, w6, w6
    20a6:	87 83 4b    	addc.w    w7, w7, w7
    20a8:	df ff 07    	rcall     0x2068 <.LPA5>
    20aa:	08 02 be    	mov.d     w8, w4
    20ac:	0a 03 be    	mov.d     w10, w6
    20ae:	00 00 06    	return    

000020b0 <.LPA4>:
    20b0:	2f b2 97    	mov.w     [w15-28], w4
    20b2:	bf b2 97    	mov.w     [w15-26], w5
    20b4:	4f b3 97    	mov.w     [w15-24], w6
    20b6:	df b3 97    	mov.w     [w15-22], w7
    20b8:	00 00 06    	return    

000020ba <___udivdi3>:
    20ba:	88 1f 78    	mov.w     w8, [w15++]
    20bc:	18 00 20    	mov.w     #0x1, w8
    20be:	88 1f 78    	mov.w     w8, [w15++]
    20c0:	89 ff 07    	rcall     0x1fd4 <___udivmoddi3>
    20c2:	8f 87 e9    	dec2.w    w15, w15
    20c4:	4f 04 78    	mov.w     [--w15], w8
    20c6:	00 00 06    	return    

000020c8 <___umoddi3>:
    20c8:	80 1f eb    	clr.w     [w15++]
    20ca:	84 ff 07    	rcall     0x1fd4 <___udivmoddi3>
    20cc:	8f 87 e9    	dec2.w    w15, w15
    20ce:	00 00 06    	return    

000020d0 <___divdi3>:
    20d0:	88 9f be    	mov.d     w8, [w15++]
    20d2:	8a 9f be    	mov.d     w10, [w15++]
    20d4:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    20d6:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    20d8:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    20da:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    20dc:	0c 00 3d    	bra       GE, 0x20f6 <.L15>
    20de:	60 44 b8    	mul.uu    w8, #0x0, w8
    20e0:	60 55 b8    	mul.uu    w10, #0x0, w10
    20e2:	00 00 54    	sub.w     w8, w0, w0
    20e4:	81 80 5c    	subb.w    w9, w1, w1
    20e6:	02 01 5d    	subb.w    w10, w2, w2
    20e8:	83 81 5d    	subb.w    w11, w3, w3
    20ea:	18 00 20    	mov.w     #0x1, w8
    20ec:	15 00 07    	rcall     0x2118 <L0>
    20ee:	08 00 3d    	bra       GE, 0x2100 <.L16>
    20f0:	18 00 07    	rcall     0x2122 <.LPA1>
    20f2:	00 04 eb    	clr.w     w8
    20f4:	05 00 37    	bra       0x2100 <.L16>

000020f6 <.L15>:
    20f6:	00 04 eb    	clr.w     w8
    20f8:	0f 00 07    	rcall     0x2118 <L0>
    20fa:	02 00 3d    	bra       GE, 0x2100 <.L16>
    20fc:	12 00 07    	rcall     0x2122 <.LPA1>
    20fe:	18 00 20    	mov.w     #0x1, w8

00002100 <.L16>:
    2100:	dc ff 07    	rcall     0x20ba <___udivdi3>
    2102:	08 00 e0    	cp0.w     w8
    2104:	06 00 32    	bra       Z, 0x2112 <.L17>
    2106:	60 22 b8    	mul.uu    w4, #0x0, w4
    2108:	60 33 b8    	mul.uu    w6, #0x0, w6
    210a:	00 00 52    	sub.w     w4, w0, w0
    210c:	81 80 5a    	subb.w    w5, w1, w1
    210e:	02 01 5b    	subb.w    w6, w2, w2
    2110:	83 81 5b    	subb.w    w7, w3, w3

00002112 <.L17>:
    2112:	4f 05 be    	mov.d     [--w15], w10
    2114:	4f 04 be    	mov.d     [--w15], w8
    2116:	00 00 06    	return    

00002118 <L0>:
    2118:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    211a:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    211c:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    211e:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2120:	00 00 06    	return    

00002122 <.LPA1>:
    2122:	60 44 b8    	mul.uu    w8, #0x0, w8
    2124:	60 55 b8    	mul.uu    w10, #0x0, w10
    2126:	04 02 54    	sub.w     w8, w4, w4
    2128:	85 82 5c    	subb.w    w9, w5, w5
    212a:	06 03 5d    	subb.w    w10, w6, w6
    212c:	87 83 5d    	subb.w    w11, w7, w7
    212e:	00 00 06    	return    

00002130 <___moddi3>:
    2130:	88 9f be    	mov.d     w8, [w15++]
    2132:	8a 9f be    	mov.d     w10, [w15++]
    2134:	8c 1f 78    	mov.w     w12, [w15++]
    2136:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2138:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    213a:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    213c:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    213e:	0d 00 3d    	bra       GE, 0x215a <.L21>
    2140:	60 44 b8    	mul.uu    w8, #0x0, w8
    2142:	60 55 b8    	mul.uu    w10, #0x0, w10
    2144:	00 00 54    	sub.w     w8, w0, w0
    2146:	81 80 5c    	subb.w    w9, w1, w1
    2148:	02 01 5d    	subb.w    w10, w2, w2
    214a:	83 81 5d    	subb.w    w11, w3, w3
    214c:	1c 00 20    	mov.w     #0x1, w12
    214e:	08 20 e1    	cp.w      w4, w8
    2150:	09 a8 e1    	cpb.w     w5, w9
    2152:	0a b0 e1    	cpb.w     w6, w10
    2154:	0b b8 e1    	cpb.w     w7, w11
    2156:	0d 00 3d    	bra       GE, 0x2172 <.L22>
    2158:	08 00 37    	bra       0x216a <.L26>

0000215a <.L21>:
    215a:	00 06 eb    	clr.w     w12
    215c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    215e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2160:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2162:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2164:	06 00 3d    	bra       GE, 0x2172 <.L22>
    2166:	60 44 b8    	mul.uu    w8, #0x0, w8
    2168:	60 55 b8    	mul.uu    w10, #0x0, w10

0000216a <.L26>:
    216a:	04 02 54    	sub.w     w8, w4, w4
    216c:	85 82 5c    	subb.w    w9, w5, w5
    216e:	06 03 5d    	subb.w    w10, w6, w6
    2170:	87 83 5d    	subb.w    w11, w7, w7

00002172 <.L22>:
    2172:	aa ff 07    	rcall     0x20c8 <___umoddi3>
    2174:	0c 00 e0    	cp0.w     w12
    2176:	06 00 32    	bra       Z, 0x2184 <.L23>
    2178:	60 22 b8    	mul.uu    w4, #0x0, w4
    217a:	60 33 b8    	mul.uu    w6, #0x0, w6
    217c:	00 00 52    	sub.w     w4, w0, w0
    217e:	81 80 5a    	subb.w    w5, w1, w1
    2180:	02 01 5b    	subb.w    w6, w2, w2
    2182:	83 81 5b    	subb.w    w7, w3, w3

00002184 <.L23>:
    2184:	4f 06 78    	mov.w     [--w15], w12
    2186:	4f 05 be    	mov.d     [--w15], w10
    2188:	4f 04 be    	mov.d     [--w15], w8
    218a:	00 00 06    	return    

0000218c <___muldi3>:
    218c:	88 9f be    	mov.d     w8, [w15++]
    218e:	8a 9f be    	mov.d     w10, [w15++]
    2190:	8c 1f 78    	mov.w     w12, [w15++]
    2192:	00 06 eb    	clr.w     w12
    2194:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2196:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2198:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    219a:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    219c:	07 00 3d    	bra       GE, 0x21ac <.L2>
    219e:	60 44 b8    	mul.uu    w8, #0x0, w8
    21a0:	60 55 b8    	mul.uu    w10, #0x0, w10
    21a2:	00 00 54    	sub.w     w8, w0, w0
    21a4:	81 80 5c    	subb.w    w9, w1, w1
    21a6:	02 01 5d    	subb.w    w10, w2, w2
    21a8:	83 81 5d    	subb.w    w11, w3, w3
    21aa:	1c 00 20    	mov.w     #0x1, w12

000021ac <.L2>:
    21ac:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    21ae:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    21b0:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    21b2:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    21b4:	07 00 3d    	bra       GE, 0x21c4 <.L3>
    21b6:	60 44 b8    	mul.uu    w8, #0x0, w8
    21b8:	60 55 b8    	mul.uu    w10, #0x0, w10
    21ba:	04 02 54    	sub.w     w8, w4, w4
    21bc:	85 82 5c    	subb.w    w9, w5, w5
    21be:	06 03 5d    	subb.w    w10, w6, w6
    21c0:	87 83 5d    	subb.w    w11, w7, w7
    21c2:	0c 00 a2    	btg.w     w12, #0x0

000021c4 <.L3>:
    21c4:	0c 00 07    	rcall     0x21de <___umuldi3>
    21c6:	0c 00 e0    	cp0.w     w12
    21c8:	06 00 32    	bra       Z, 0x21d6 <.L4>
    21ca:	60 22 b8    	mul.uu    w4, #0x0, w4
    21cc:	60 33 b8    	mul.uu    w6, #0x0, w6
    21ce:	00 00 52    	sub.w     w4, w0, w0
    21d0:	81 80 5a    	subb.w    w5, w1, w1
    21d2:	02 01 5b    	subb.w    w6, w2, w2
    21d4:	83 81 5b    	subb.w    w7, w3, w3

000021d6 <.L4>:
    21d6:	4f 06 78    	mov.w     [--w15], w12
    21d8:	4f 05 be    	mov.d     [--w15], w10
    21da:	4f 04 be    	mov.d     [--w15], w8
    21dc:	00 00 06    	return    

000021de <___umuldi3>:
    21de:	88 9f be    	mov.d     w8, [w15++]
    21e0:	8a 9f be    	mov.d     w10, [w15++]
    21e2:	8c 9f be    	mov.d     w12, [w15++]
    21e4:	04 04 b8    	mul.uu    w0, w4, w8
    21e6:	05 06 b8    	mul.uu    w0, w5, w12
    21e8:	89 04 46    	add.w     w12, w9, w9
    21ea:	60 85 4e    	addc.w    w13, #0x0, w10
    21ec:	06 06 b8    	mul.uu    w0, w6, w12
    21ee:	0a 05 46    	add.w     w12, w10, w10
    21f0:	e0 85 4e    	addc.w    w13, #0x0, w11
    21f2:	07 06 b8    	mul.uu    w0, w7, w12
    21f4:	8b 05 46    	add.w     w12, w11, w11
    21f6:	04 0e b8    	mul.uu    w1, w4, w12
    21f8:	89 04 46    	add.w     w12, w9, w9
    21fa:	0a 85 4e    	addc.w    w13, w10, w10
    21fc:	e0 85 4d    	addc.w    w11, #0x0, w11
    21fe:	05 0e b8    	mul.uu    w1, w5, w12
    2200:	0a 05 46    	add.w     w12, w10, w10
    2202:	8b 85 4e    	addc.w    w13, w11, w11
    2204:	06 0e b8    	mul.uu    w1, w6, w12
    2206:	8b 05 46    	add.w     w12, w11, w11
    2208:	04 16 b8    	mul.uu    w2, w4, w12
    220a:	0a 05 46    	add.w     w12, w10, w10
    220c:	8b 85 4e    	addc.w    w13, w11, w11
    220e:	05 16 b8    	mul.uu    w2, w5, w12
    2210:	8b 05 46    	add.w     w12, w11, w11
    2212:	04 1e b8    	mul.uu    w3, w4, w12
    2214:	8b 05 46    	add.w     w12, w11, w11
    2216:	08 00 be    	mov.d     w8, w0
    2218:	0a 01 be    	mov.d     w10, w2
    221a:	4f 06 be    	mov.d     [--w15], w12
    221c:	4f 05 be    	mov.d     [--w15], w10
    221e:	4f 04 be    	mov.d     [--w15], w8
    2220:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	32 39 04    	goto      0x3932 <__T1Interrupt>
    1026:	00 00 00 
    1028:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	60 39 04    	goto      0x3960 <__T2Interrupt>
    1032:	00 00 00 
    1034:	8e 39 04    	goto      0x398e <__T3Interrupt>
    1036:	00 00 00 
    1038:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	b4 24 04    	goto      0x24b4 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	86 24 04    	goto      0x2486 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	bc 39 04    	goto      0x39bc <__T4Interrupt>
    1072:	00 00 00 
    1074:	ea 39 04    	goto      0x39ea <__T5Interrupt>
    1076:	00 00 00 
    1078:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	10 25 04    	goto      0x2510 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	e2 24 04    	goto      0x24e2 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	6c 25 04    	goto      0x256c <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	3e 25 04    	goto      0x253e <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	b2 38 04    	goto      0x38b2 <__USB1Interrupt>
    10ee:	00 00 00 
    10f0:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	c8 25 04    	goto      0x25c8 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	9a 25 04    	goto      0x259a <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	a2 47 04    	goto      0x47a2 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a222 <.LC0-0x62>:
    a222:	12 01       	.word 0x112
    a224:	00 02       	.word 0x200
    a226:	00 00       	.word 0
    a228:	00 40       	.word 0x4000
    a22a:	66 66       	.word 0x6666
    a22c:	03 00       	.word 0x3
    a22e:	00 00       	.word 0
    a230:	01 02       	.word 0x201
    a232:	00 01       	.word 0x100
    a234:	09 02       	.word 0x209
    a236:	12 00       	.word 0x12
    a238:	01 01       	.word 0x101
    a23a:	00 a0       	.word 0xa000
    a23c:	32 09       	.word 0x932
    a23e:	04 00       	.word 0x4
    a240:	00 00       	.word 0
    a242:	ff 00       	.word 0xff
    a244:	ff 00       	.word 0xff
    a246:	04 03       	.word 0x304
    a248:	09 04       	.word 0x409
    a24a:	1a 03       	.word 0x31a
    a24c:	4f 00       	.word 0x4f
    a24e:	6c 00       	.word 0x6c
    a250:	69 00       	.word 0x69
    a252:	6e 00       	.word 0x6e
    a254:	20 00       	.word 0x20
    a256:	43 00       	.word 0x43
    a258:	6f 00       	.word 0x6f
    a25a:	6c 00       	.word 0x6c
    a25c:	6c 00       	.word 0x6c
    a25e:	65 00       	.word 0x65
    a260:	67 00       	.word 0x67
    a262:	65 00       	.word 0x65
    a264:	20 03       	.word 0x320
    a266:	50 00       	.word 0x50
    a268:	49 00       	.word 0x49
    a26a:	43 00       	.word 0x43
    a26c:	32 00       	.word 0x32
    a26e:	34 00       	.word 0x34
    a270:	46 00       	.word 0x46
    a272:	4a 00       	.word 0x4a
    a274:	31 00       	.word 0x31
    a276:	32 00       	.word 0x32
    a278:	38 00       	.word 0x38
    a27a:	47 00       	.word 0x47
    a27c:	42 00       	.word 0x42
    a27e:	32 00       	.word 0x32
    a280:	30 00       	.word 0x30
    a282:	36 00       	.word 0x36

0000a284 <.LC0>:
    a284:	25 30       	.word 0x3025
    a286:	31 78       	.word 0x7831
    a288:	25 30       	.word 0x3025
    a28a:	31 78       	.word 0x7831
    a28c:	0d 00       	.word 0xd
Disassembly of section .text:

0000228e <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    228e:	04 00 fa    	lnk       #0x4
    2290:	00 0f 78    	mov.w     w0, [w14]
    2292:	21 47 98    	mov.b     w1, [w14+2]

00002294 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    2294:	00 00 00    	nop       

00002296 <.L2>:
    2296:	1e 00 78    	mov.w     [w14], w0
    2298:	10 00 90    	mov.w     [w0+2], w0
    229a:	90 00 78    	mov.w     [w0], w1
    229c:	00 20 20    	mov.w     #0x200, w0
    229e:	00 80 60    	and.w     w1, w0, w0
    22a0:	00 00 e0    	cp0.w     w0
    22a2:	f9 ff 3a    	bra       NZ, 0x2296 <.L2>

000022a4 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    22a4:	1e 00 78    	mov.w     [w14], w0
    22a6:	20 00 90    	mov.w     [w0+4], w0
    22a8:	ae 40 90    	mov.b     [w14+2], w1
    22aa:	81 80 fb    	ze        w1, w1
    22ac:	01 08 78    	mov.w     w1, [w0]

000022ae <.LSM3>:
}
    22ae:	00 80 fa    	ulnk      
    22b0:	00 00 06    	return    

000022b2 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    22b2:	02 00 fa    	lnk       #0x2
    22b4:	00 0f 78    	mov.w     w0, [w14]

000022b6 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    22b6:	00 00 00    	nop       

000022b8 <.L4>:
    22b8:	1e 00 78    	mov.w     [w14], w0
    22ba:	10 00 90    	mov.w     [w0+2], w0
    22bc:	10 00 78    	mov.w     [w0], w0
    22be:	61 00 60    	and.w     w0, #0x1, w0
    22c0:	00 00 e0    	cp0.w     w0
    22c2:	fa ff 32    	bra       Z, 0x22b8 <.L4>

000022c4 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    22c4:	1e 00 78    	mov.w     [w14], w0
    22c6:	30 00 90    	mov.w     [w0+6], w0
    22c8:	10 00 78    	mov.w     [w0], w0
    22ca:	00 40 78    	mov.b     w0, w0

000022cc <.LSM7>:
}
    22cc:	00 80 fa    	ulnk      
    22ce:	00 00 06    	return    

000022d0 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    22d0:	04 00 fa    	lnk       #0x4
    22d2:	00 0f 78    	mov.w     w0, [w14]
    22d4:	21 47 98    	mov.b     w1, [w14+2]

000022d6 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    22d6:	00 00 00    	nop       

000022d8 <.L6>:
    22d8:	1e 00 78    	mov.w     [w14], w0
    22da:	d0 10 90    	mov.w     [w0+42], w1
    22dc:	1e 00 78    	mov.w     [w14], w0
    22de:	20 10 90    	mov.w     [w0+36], w0
    22e0:	80 8f 50    	sub.w     w1, w0, [w15]
    22e2:	fa ff 32    	bra       Z, 0x22d8 <.L6>

000022e4 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    22e4:	ff 3f fc    	disi      #0x3fff

000022e6 <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    22e6:	1e 00 78    	mov.w     [w14], w0
    22e8:	90 10 90    	mov.w     [w0+34], w1
    22ea:	1e 00 78    	mov.w     [w14], w0
    22ec:	40 10 90    	mov.w     [w0+40], w0
    22ee:	00 80 40    	add.w     w1, w0, w0
    22f0:	ae 40 90    	mov.b     [w14+2], w1
    22f2:	01 48 78    	mov.b     w1, [w0]

000022f4 <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    22f4:	1e 00 78    	mov.w     [w14], w0
    22f6:	40 10 90    	mov.w     [w0+40], w0
    22f8:	80 00 e8    	inc.w     w0, w1
    22fa:	1e 00 78    	mov.w     [w14], w0
    22fc:	20 10 90    	mov.w     [w0+36], w0
    22fe:	00 01 78    	mov.w     w0, w2
    2300:	11 00 09    	repeat    #0x11
    2302:	82 80 d8    	div.uw    w1, w2
    2304:	80 00 fd    	exch      w0, w1
    2306:	80 00 78    	mov.w     w0, w1
    2308:	1e 00 78    	mov.w     [w14], w0
    230a:	41 10 98    	mov.w     w1, [w0+40]

0000230c <.LSM13>:
    self->TXbuffer.count++;
    230c:	1e 00 78    	mov.w     [w14], w0
    230e:	50 10 90    	mov.w     [w0+42], w0
    2310:	80 00 e8    	inc.w     w0, w1
    2312:	1e 00 78    	mov.w     [w14], w0
    2314:	51 10 98    	mov.w     w1, [w0+42]

00002316 <.LSM14>:
    enable_interrupts();
    2316:	52 20 ef    	clr.w     0x52

00002318 <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    2318:	1e 00 78    	mov.w     [w14], w0
    231a:	d0 10 90    	mov.w     [w0+42], w1
    231c:	1e 00 78    	mov.w     [w14], w0
    231e:	30 18 90    	mov.w     [w0+54], w0
    2320:	80 8f 50    	sub.w     w1, w0, [w15]
    2322:	08 00 39    	bra       NC, 0x2334 <.L5>

00002324 <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    2324:	1e 00 78    	mov.w     [w14], w0
    2326:	10 00 90    	mov.w     [w0+2], w0
    2328:	9e 00 78    	mov.w     [w14], w1
    232a:	91 00 90    	mov.w     [w1+2], w1
    232c:	11 01 78    	mov.w     [w1], w2
    232e:	01 40 20    	mov.w     #0x400, w1
    2330:	82 80 70    	ior.w     w1, w2, w1
    2332:	01 08 78    	mov.w     w1, [w0]

00002334 <.L5>:
                                                    // transmission
}
    2334:	00 80 fa    	ulnk      
    2336:	00 00 06    	return    

00002338 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    2338:	04 00 fa    	lnk       #0x4
    233a:	10 07 98    	mov.w     w0, [w14+2]

0000233c <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    233c:	1e 00 90    	mov.w     [w14+2], w0
    233e:	50 00 90    	mov.w     [w0+10], w0
    2340:	9e 00 90    	mov.w     [w14+2], w1
    2342:	d1 00 90    	mov.w     [w1+10], w1
    2344:	11 01 78    	mov.w     [w1], w2
    2346:	9e 00 90    	mov.w     [w14+2], w1
    2348:	e1 48 90    	mov.b     [w1+14], w1
    234a:	81 80 fb    	ze        w1, w1
    234c:	13 00 20    	mov.w     #0x1, w3
    234e:	81 18 dd    	sl.w      w3, w1, w1
    2350:	81 80 ea    	com.w     w1, w1
    2352:	81 00 61    	and.w     w2, w1, w1
    2354:	01 08 78    	mov.w     w1, [w0]

00002356 <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    2356:	1e 00 90    	mov.w     [w14+2], w0
    2358:	50 10 90    	mov.w     [w0+42], w0
    235a:	00 00 e0    	cp0.w     w0
    235c:	27 00 3a    	bra       NZ, 0x23ac <.L13>

0000235e <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    235e:	1e 00 90    	mov.w     [w14+2], w0
    2360:	10 00 90    	mov.w     [w0+2], w0
    2362:	9e 00 90    	mov.w     [w14+2], w1
    2364:	91 00 90    	mov.w     [w1+2], w1
    2366:	11 01 78    	mov.w     [w1], w2
    2368:	f1 bf 2f    	mov.w     #0xfbff, w1
    236a:	81 00 61    	and.w     w2, w1, w1
    236c:	01 08 78    	mov.w     w1, [w0]

0000236e <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    236e:	1f 00 37    	bra       0x23ae <.L10>

00002370 <.L12>:
        disable_interrupts();
    2370:	ff 3f fc    	disi      #0x3fff

00002372 <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    2372:	1e 00 90    	mov.w     [w14+2], w0
    2374:	90 10 90    	mov.w     [w0+34], w1
    2376:	1e 00 90    	mov.w     [w14+2], w0
    2378:	30 10 90    	mov.w     [w0+38], w0
    237a:	00 80 40    	add.w     w1, w0, w0
    237c:	10 4f 78    	mov.b     [w0], [w14]

0000237e <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    237e:	1e 00 90    	mov.w     [w14+2], w0
    2380:	30 10 90    	mov.w     [w0+38], w0
    2382:	80 00 e8    	inc.w     w0, w1
    2384:	1e 00 90    	mov.w     [w14+2], w0
    2386:	20 10 90    	mov.w     [w0+36], w0
    2388:	00 01 78    	mov.w     w0, w2
    238a:	11 00 09    	repeat    #0x11
    238c:	82 80 d8    	div.uw    w1, w2
    238e:	80 00 fd    	exch      w0, w1
    2390:	80 00 78    	mov.w     w0, w1
    2392:	1e 00 90    	mov.w     [w14+2], w0
    2394:	31 10 98    	mov.w     w1, [w0+38]

00002396 <.LSM26>:
        self->TXbuffer.count--;
    2396:	1e 00 90    	mov.w     [w14+2], w0
    2398:	50 10 90    	mov.w     [w0+42], w0
    239a:	80 00 e9    	dec.w     w0, w1
    239c:	1e 00 90    	mov.w     [w14+2], w0
    239e:	51 10 98    	mov.w     w1, [w0+42]

000023a0 <.LSM27>:
        enable_interrupts();
    23a0:	52 20 ef    	clr.w     0x52

000023a2 <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    23a2:	1e 00 90    	mov.w     [w14+2], w0
    23a4:	20 00 90    	mov.w     [w0+4], w0
    23a6:	9e 80 fb    	ze        [w14], w1
    23a8:	01 08 78    	mov.w     w1, [w0]
    23aa:	01 00 37    	bra       0x23ae <.L10>

000023ac <.L13>:
    23ac:	00 00 00    	nop       

000023ae <.L10>:
    23ae:	1e 00 90    	mov.w     [w14+2], w0
    23b0:	10 00 90    	mov.w     [w0+2], w0
    23b2:	90 00 78    	mov.w     [w0], w1
    23b4:	00 20 20    	mov.w     #0x200, w0
    23b6:	00 80 60    	and.w     w1, w0, w0
    23b8:	00 00 e0    	cp0.w     w0
    23ba:	04 00 3a    	bra       NZ, 0x23c4 <.L8>
    23bc:	1e 00 90    	mov.w     [w14+2], w0
    23be:	50 10 90    	mov.w     [w0+42], w0
    23c0:	00 00 e0    	cp0.w     w0
    23c2:	d6 ff 3a    	bra       NZ, 0x2370 <.L12>

000023c4 <.L8>:
    }
}
    23c4:	00 80 fa    	ulnk      
    23c6:	00 00 06    	return    

000023c8 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    23c8:	04 00 fa    	lnk       #0x4
    23ca:	10 07 98    	mov.w     w0, [w14+2]

000023cc <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    23cc:	00 00 00    	nop       

000023ce <.L15>:
    23ce:	1e 00 90    	mov.w     [w14+2], w0
    23d0:	20 18 90    	mov.w     [w0+52], w0
    23d2:	00 00 e0    	cp0.w     w0
    23d4:	fc ff 32    	bra       Z, 0x23ce <.L15>

000023d6 <.LSM33>:
    disable_interrupts();
    23d6:	ff 3f fc    	disi      #0x3fff

000023d8 <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    23d8:	1e 00 90    	mov.w     [w14+2], w0
    23da:	e0 10 90    	mov.w     [w0+44], w1
    23dc:	1e 00 90    	mov.w     [w14+2], w0
    23de:	00 18 90    	mov.w     [w0+48], w0
    23e0:	00 80 40    	add.w     w1, w0, w0
    23e2:	10 4f 78    	mov.b     [w0], [w14]

000023e4 <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    23e4:	1e 00 90    	mov.w     [w14+2], w0
    23e6:	00 18 90    	mov.w     [w0+48], w0
    23e8:	80 00 e8    	inc.w     w0, w1
    23ea:	1e 00 90    	mov.w     [w14+2], w0
    23ec:	70 10 90    	mov.w     [w0+46], w0
    23ee:	00 01 78    	mov.w     w0, w2
    23f0:	11 00 09    	repeat    #0x11
    23f2:	82 80 d8    	div.uw    w1, w2
    23f4:	80 00 fd    	exch      w0, w1
    23f6:	80 00 78    	mov.w     w0, w1
    23f8:	1e 00 90    	mov.w     [w14+2], w0
    23fa:	01 18 98    	mov.w     w1, [w0+48]

000023fc <.LSM36>:
    self->RXbuffer.count--;
    23fc:	1e 00 90    	mov.w     [w14+2], w0
    23fe:	20 18 90    	mov.w     [w0+52], w0
    2400:	80 00 e9    	dec.w     w0, w1
    2402:	1e 00 90    	mov.w     [w14+2], w0
    2404:	21 18 98    	mov.w     w1, [w0+52]

00002406 <.LSM37>:
    enable_interrupts();
    2406:	52 20 ef    	clr.w     0x52

00002408 <.LSM38>:
    return ch;
    2408:	1e 40 78    	mov.b     [w14], w0

0000240a <.LSM39>:
}
    240a:	00 80 fa    	ulnk      
    240c:	00 00 06    	return    

0000240e <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    240e:	02 00 fa    	lnk       #0x2
    2410:	00 0f 78    	mov.w     w0, [w14]

00002412 <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2412:	1e 00 78    	mov.w     [w14], w0
    2414:	50 00 90    	mov.w     [w0+10], w0
    2416:	9e 00 78    	mov.w     [w14], w1
    2418:	d1 00 90    	mov.w     [w1+10], w1
    241a:	11 01 78    	mov.w     [w1], w2
    241c:	9e 00 78    	mov.w     [w14], w1
    241e:	f1 48 90    	mov.b     [w1+15], w1
    2420:	81 80 fb    	ze        w1, w1
    2422:	13 00 20    	mov.w     #0x1, w3
    2424:	81 18 dd    	sl.w      w3, w1, w1
    2426:	81 80 ea    	com.w     w1, w1
    2428:	81 00 61    	and.w     w2, w1, w1
    242a:	01 08 78    	mov.w     w1, [w0]

0000242c <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    242c:	1d 00 37    	bra       0x2468 <.L17>

0000242e <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    242e:	ff 3f fc    	disi      #0x3fff

00002430 <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    2430:	1e 00 78    	mov.w     [w14], w0
    2432:	e0 10 90    	mov.w     [w0+44], w1
    2434:	1e 00 78    	mov.w     [w14], w0
    2436:	10 18 90    	mov.w     [w0+50], w0
    2438:	00 80 40    	add.w     w1, w0, w0
    243a:	9e 00 78    	mov.w     [w14], w1
    243c:	b1 00 90    	mov.w     [w1+6], w1
    243e:	91 00 78    	mov.w     [w1], w1
    2440:	81 40 78    	mov.b     w1, w1
    2442:	01 48 78    	mov.b     w1, [w0]

00002444 <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    2444:	1e 00 78    	mov.w     [w14], w0
    2446:	10 18 90    	mov.w     [w0+50], w0
    2448:	80 00 e8    	inc.w     w0, w1
    244a:	1e 00 78    	mov.w     [w14], w0
    244c:	70 10 90    	mov.w     [w0+46], w0
    244e:	00 01 78    	mov.w     w0, w2
    2450:	11 00 09    	repeat    #0x11
    2452:	82 80 d8    	div.uw    w1, w2
    2454:	80 00 fd    	exch      w0, w1
    2456:	80 00 78    	mov.w     w0, w1
    2458:	1e 00 78    	mov.w     [w14], w0
    245a:	11 18 98    	mov.w     w1, [w0+50]

0000245c <.LSM46>:
        self->RXbuffer.count++;
    245c:	1e 00 78    	mov.w     [w14], w0
    245e:	20 18 90    	mov.w     [w0+52], w0
    2460:	80 00 e8    	inc.w     w0, w1
    2462:	1e 00 78    	mov.w     [w14], w0
    2464:	21 18 98    	mov.w     w1, [w0+52]

00002466 <.LSM47>:
        enable_interrupts();
    2466:	52 20 ef    	clr.w     0x52

00002468 <.L17>:
    2468:	1e 00 78    	mov.w     [w14], w0
    246a:	10 00 90    	mov.w     [w0+2], w0
    246c:	10 00 78    	mov.w     [w0], w0
    246e:	61 00 60    	and.w     w0, #0x1, w0
    2470:	00 40 78    	mov.b     w0, w0
    2472:	00 04 e0    	cp0.b     w0
    2474:	06 00 32    	bra       Z, 0x2482 <.L16>

00002476 <.LSM49>:
    2476:	1e 00 78    	mov.w     [w14], w0
    2478:	a0 18 90    	mov.w     [w0+52], w1
    247a:	1e 00 78    	mov.w     [w14], w0
    247c:	70 10 90    	mov.w     [w0+46], w0

0000247e <.LSM50>:
    247e:	80 8f 50    	sub.w     w1, w0, [w15]
    2480:	d6 ff 3a    	bra       NZ, 0x242e <.L19>

00002482 <.L16>:
    }
}
    2482:	00 80 fa    	ulnk      
    2484:	00 00 06    	return    

00002486 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    2486:	36 00 f8    	push      0x36
    2488:	80 9f be    	mov.d     w0, [w15++]
    248a:	82 9f be    	mov.d     w2, [w15++]
    248c:	84 9f be    	mov.d     w4, [w15++]
    248e:	86 9f be    	mov.d     w6, [w15++]
    2490:	32 00 f8    	push      0x32
    2492:	34 00 f8    	push      0x34
    2494:	10 00 20    	mov.w     #0x1, w0
    2496:	a0 01 88    	mov.w     w0, 0x34
    2498:	00 20 20    	mov.w     #0x200, w0
    249a:	90 01 88    	mov.w     w0, 0x32
    249c:	00 00 fa    	lnk       #0x0

0000249e <.LSM53>:
    __serviceTxInterrupt(&uart1);
    249e:	40 28 21    	mov.w     #0x1284, w0
    24a0:	4b ff 07    	rcall     0x2338 <___serviceTxInterrupt>

000024a2 <.LSM54>:
}
    24a2:	00 80 fa    	ulnk      
    24a4:	34 00 f9    	pop       0x34
    24a6:	32 00 f9    	pop       0x32
    24a8:	4f 03 be    	mov.d     [--w15], w6
    24aa:	4f 02 be    	mov.d     [--w15], w4
    24ac:	4f 01 be    	mov.d     [--w15], w2
    24ae:	4f 00 be    	mov.d     [--w15], w0
    24b0:	36 00 f9    	pop       0x36
    24b2:	00 40 06    	retfie    

000024b4 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    24b4:	36 00 f8    	push      0x36
    24b6:	80 9f be    	mov.d     w0, [w15++]
    24b8:	82 9f be    	mov.d     w2, [w15++]
    24ba:	84 9f be    	mov.d     w4, [w15++]
    24bc:	86 9f be    	mov.d     w6, [w15++]
    24be:	32 00 f8    	push      0x32
    24c0:	34 00 f8    	push      0x34
    24c2:	10 00 20    	mov.w     #0x1, w0
    24c4:	a0 01 88    	mov.w     w0, 0x34
    24c6:	00 20 20    	mov.w     #0x200, w0
    24c8:	90 01 88    	mov.w     w0, 0x32
    24ca:	00 00 fa    	lnk       #0x0

000024cc <.LSM56>:
    __serviceRxInterrupt(&uart1);
    24cc:	40 28 21    	mov.w     #0x1284, w0
    24ce:	9f ff 07    	rcall     0x240e <___serviceRxInterrupt>

000024d0 <.LSM57>:
}
    24d0:	00 80 fa    	ulnk      
    24d2:	34 00 f9    	pop       0x34
    24d4:	32 00 f9    	pop       0x32
    24d6:	4f 03 be    	mov.d     [--w15], w6
    24d8:	4f 02 be    	mov.d     [--w15], w4
    24da:	4f 01 be    	mov.d     [--w15], w2
    24dc:	4f 00 be    	mov.d     [--w15], w0
    24de:	36 00 f9    	pop       0x36
    24e0:	00 40 06    	retfie    

000024e2 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    24e2:	36 00 f8    	push      0x36
    24e4:	80 9f be    	mov.d     w0, [w15++]
    24e6:	82 9f be    	mov.d     w2, [w15++]
    24e8:	84 9f be    	mov.d     w4, [w15++]
    24ea:	86 9f be    	mov.d     w6, [w15++]
    24ec:	32 00 f8    	push      0x32
    24ee:	34 00 f8    	push      0x34
    24f0:	10 00 20    	mov.w     #0x1, w0
    24f2:	a0 01 88    	mov.w     w0, 0x34
    24f4:	00 20 20    	mov.w     #0x200, w0
    24f6:	90 01 88    	mov.w     w0, 0x32
    24f8:	00 00 fa    	lnk       #0x0

000024fa <.LSM59>:
    __serviceTxInterrupt(&uart2);
    24fa:	00 2c 21    	mov.w     #0x12c0, w0
    24fc:	1d ff 07    	rcall     0x2338 <___serviceTxInterrupt>

000024fe <.LSM60>:
}
    24fe:	00 80 fa    	ulnk      
    2500:	34 00 f9    	pop       0x34
    2502:	32 00 f9    	pop       0x32
    2504:	4f 03 be    	mov.d     [--w15], w6
    2506:	4f 02 be    	mov.d     [--w15], w4
    2508:	4f 01 be    	mov.d     [--w15], w2
    250a:	4f 00 be    	mov.d     [--w15], w0
    250c:	36 00 f9    	pop       0x36
    250e:	00 40 06    	retfie    

00002510 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2510:	36 00 f8    	push      0x36
    2512:	80 9f be    	mov.d     w0, [w15++]
    2514:	82 9f be    	mov.d     w2, [w15++]
    2516:	84 9f be    	mov.d     w4, [w15++]
    2518:	86 9f be    	mov.d     w6, [w15++]
    251a:	32 00 f8    	push      0x32
    251c:	34 00 f8    	push      0x34
    251e:	10 00 20    	mov.w     #0x1, w0
    2520:	a0 01 88    	mov.w     w0, 0x34
    2522:	00 20 20    	mov.w     #0x200, w0
    2524:	90 01 88    	mov.w     w0, 0x32
    2526:	00 00 fa    	lnk       #0x0

00002528 <.LSM62>:
    __serviceRxInterrupt(&uart2);
    2528:	00 2c 21    	mov.w     #0x12c0, w0
    252a:	71 ff 07    	rcall     0x240e <___serviceRxInterrupt>

0000252c <.LSM63>:
}
    252c:	00 80 fa    	ulnk      
    252e:	34 00 f9    	pop       0x34
    2530:	32 00 f9    	pop       0x32
    2532:	4f 03 be    	mov.d     [--w15], w6
    2534:	4f 02 be    	mov.d     [--w15], w4
    2536:	4f 01 be    	mov.d     [--w15], w2
    2538:	4f 00 be    	mov.d     [--w15], w0
    253a:	36 00 f9    	pop       0x36
    253c:	00 40 06    	retfie    

0000253e <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    253e:	36 00 f8    	push      0x36
    2540:	80 9f be    	mov.d     w0, [w15++]
    2542:	82 9f be    	mov.d     w2, [w15++]
    2544:	84 9f be    	mov.d     w4, [w15++]
    2546:	86 9f be    	mov.d     w6, [w15++]
    2548:	32 00 f8    	push      0x32
    254a:	34 00 f8    	push      0x34
    254c:	10 00 20    	mov.w     #0x1, w0
    254e:	a0 01 88    	mov.w     w0, 0x34
    2550:	00 20 20    	mov.w     #0x200, w0
    2552:	90 01 88    	mov.w     w0, 0x32
    2554:	00 00 fa    	lnk       #0x0

00002556 <.LSM65>:
    __serviceTxInterrupt(&uart3);
    2556:	c0 2f 21    	mov.w     #0x12fc, w0
    2558:	ef fe 07    	rcall     0x2338 <___serviceTxInterrupt>

0000255a <.LSM66>:
}
    255a:	00 80 fa    	ulnk      
    255c:	34 00 f9    	pop       0x34
    255e:	32 00 f9    	pop       0x32
    2560:	4f 03 be    	mov.d     [--w15], w6
    2562:	4f 02 be    	mov.d     [--w15], w4
    2564:	4f 01 be    	mov.d     [--w15], w2
    2566:	4f 00 be    	mov.d     [--w15], w0
    2568:	36 00 f9    	pop       0x36
    256a:	00 40 06    	retfie    

0000256c <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    256c:	36 00 f8    	push      0x36
    256e:	80 9f be    	mov.d     w0, [w15++]
    2570:	82 9f be    	mov.d     w2, [w15++]
    2572:	84 9f be    	mov.d     w4, [w15++]
    2574:	86 9f be    	mov.d     w6, [w15++]
    2576:	32 00 f8    	push      0x32
    2578:	34 00 f8    	push      0x34
    257a:	10 00 20    	mov.w     #0x1, w0
    257c:	a0 01 88    	mov.w     w0, 0x34
    257e:	00 20 20    	mov.w     #0x200, w0
    2580:	90 01 88    	mov.w     w0, 0x32
    2582:	00 00 fa    	lnk       #0x0

00002584 <.LSM68>:
    __serviceRxInterrupt(&uart3);
    2584:	c0 2f 21    	mov.w     #0x12fc, w0
    2586:	43 ff 07    	rcall     0x240e <___serviceRxInterrupt>

00002588 <.LSM69>:
}
    2588:	00 80 fa    	ulnk      
    258a:	34 00 f9    	pop       0x34
    258c:	32 00 f9    	pop       0x32
    258e:	4f 03 be    	mov.d     [--w15], w6
    2590:	4f 02 be    	mov.d     [--w15], w4
    2592:	4f 01 be    	mov.d     [--w15], w2
    2594:	4f 00 be    	mov.d     [--w15], w0
    2596:	36 00 f9    	pop       0x36
    2598:	00 40 06    	retfie    

0000259a <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    259a:	36 00 f8    	push      0x36
    259c:	80 9f be    	mov.d     w0, [w15++]
    259e:	82 9f be    	mov.d     w2, [w15++]
    25a0:	84 9f be    	mov.d     w4, [w15++]
    25a2:	86 9f be    	mov.d     w6, [w15++]
    25a4:	32 00 f8    	push      0x32
    25a6:	34 00 f8    	push      0x34
    25a8:	10 00 20    	mov.w     #0x1, w0
    25aa:	a0 01 88    	mov.w     w0, 0x34
    25ac:	00 20 20    	mov.w     #0x200, w0
    25ae:	90 01 88    	mov.w     w0, 0x32
    25b0:	00 00 fa    	lnk       #0x0

000025b2 <.LSM71>:
    __serviceTxInterrupt(&uart4);
    25b2:	80 33 21    	mov.w     #0x1338, w0
    25b4:	c1 fe 07    	rcall     0x2338 <___serviceTxInterrupt>

000025b6 <.LSM72>:
}
    25b6:	00 80 fa    	ulnk      
    25b8:	34 00 f9    	pop       0x34
    25ba:	32 00 f9    	pop       0x32
    25bc:	4f 03 be    	mov.d     [--w15], w6
    25be:	4f 02 be    	mov.d     [--w15], w4
    25c0:	4f 01 be    	mov.d     [--w15], w2
    25c2:	4f 00 be    	mov.d     [--w15], w0
    25c4:	36 00 f9    	pop       0x36
    25c6:	00 40 06    	retfie    

000025c8 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    25c8:	36 00 f8    	push      0x36
    25ca:	80 9f be    	mov.d     w0, [w15++]
    25cc:	82 9f be    	mov.d     w2, [w15++]
    25ce:	84 9f be    	mov.d     w4, [w15++]
    25d0:	86 9f be    	mov.d     w6, [w15++]
    25d2:	32 00 f8    	push      0x32
    25d4:	34 00 f8    	push      0x34
    25d6:	10 00 20    	mov.w     #0x1, w0
    25d8:	a0 01 88    	mov.w     w0, 0x34
    25da:	00 20 20    	mov.w     #0x200, w0
    25dc:	90 01 88    	mov.w     w0, 0x32
    25de:	00 00 fa    	lnk       #0x0

000025e0 <.LSM74>:
    __serviceRxInterrupt(&uart4);
    25e0:	80 33 21    	mov.w     #0x1338, w0
    25e2:	15 ff 07    	rcall     0x240e <___serviceRxInterrupt>

000025e4 <.LSM75>:
}
    25e4:	00 80 fa    	ulnk      
    25e6:	34 00 f9    	pop       0x34
    25e8:	32 00 f9    	pop       0x32
    25ea:	4f 03 be    	mov.d     [--w15], w6
    25ec:	4f 02 be    	mov.d     [--w15], w4
    25ee:	4f 01 be    	mov.d     [--w15], w2
    25f0:	4f 00 be    	mov.d     [--w15], w0
    25f2:	36 00 f9    	pop       0x36
    25f4:	00 40 06    	retfie    

000025f6 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    25f6:	08 00 fa    	lnk       #0x8
    25f8:	10 07 98    	mov.w     w0, [w14+2]
    25fa:	21 07 98    	mov.w     w1, [w14+4]
    25fc:	32 07 98    	mov.w     w2, [w14+6]

000025fe <.LSM77>:
    int16_t i;

    switch (handle) {
    25fe:	1e 00 90    	mov.w     [w14+2], w0
    2600:	00 00 e0    	cp0.w     w0
    2602:	25 00 35    	bra       LT, 0x264e <.L37>
    2604:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2606:	03 00 34    	bra       LE, 0x260e <.L30>
    2608:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    260a:	11 00 32    	bra       Z, 0x262e <.L31>

0000260c <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    260c:	21 00 37    	bra       0x2650 <.L34>

0000260e <.L30>:
    260e:	00 00 eb    	clr.w     w0
    2610:	00 0f 78    	mov.w     w0, [w14]
    2612:	08 00 37    	bra       0x2624 <.L32>

00002614 <.L33>:
    2614:	2e 00 90    	mov.w     [w14+4], w0
    2616:	90 40 78    	mov.b     [w0], w1
    2618:	2e 00 90    	mov.w     [w14+4], w0
    261a:	00 00 e8    	inc.w     w0, w0
    261c:	20 07 98    	mov.w     w0, [w14+4]
    261e:	40 42 80    	mov.w     0x848, w0
    2620:	19 04 07    	rcall     0x2e54 <_uart_putc>

00002622 <.LSM81>:
    2622:	1e 0f e8    	inc.w     [w14], [w14]

00002624 <.L32>:
    2624:	9e 00 78    	mov.w     [w14], w1
    2626:	3e 00 90    	mov.w     [w14+6], w0
    2628:	80 8f 50    	sub.w     w1, w0, [w15]
    262a:	f4 ff 39    	bra       NC, 0x2614 <.L33>

0000262c <.LSM82>:
    262c:	11 00 37    	bra       0x2650 <.L34>

0000262e <.L31>:
    262e:	00 00 eb    	clr.w     w0
    2630:	00 0f 78    	mov.w     w0, [w14]
    2632:	08 00 37    	bra       0x2644 <.L35>

00002634 <.L36>:
    2634:	2e 00 90    	mov.w     [w14+4], w0
    2636:	90 40 78    	mov.b     [w0], w1
    2638:	2e 00 90    	mov.w     [w14+4], w0
    263a:	00 00 e8    	inc.w     w0, w0
    263c:	20 07 98    	mov.w     w0, [w14+4]
    263e:	50 42 80    	mov.w     0x84a, w0
    2640:	09 04 07    	rcall     0x2e54 <_uart_putc>

00002642 <.LSM85>:
    2642:	1e 0f e8    	inc.w     [w14], [w14]

00002644 <.L35>:
    2644:	9e 00 78    	mov.w     [w14], w1
    2646:	3e 00 90    	mov.w     [w14+6], w0
    2648:	80 8f 50    	sub.w     w1, w0, [w15]
    264a:	f4 ff 39    	bra       NC, 0x2634 <.L36>

0000264c <.LSM86>:
    264c:	01 00 37    	bra       0x2650 <.L34>

0000264e <.L37>:
    264e:	00 00 00    	nop       

00002650 <.L34>:
    }
    return len;
    2650:	3e 00 90    	mov.w     [w14+6], w0

00002652 <.LSM89>:
}
    2652:	00 80 fa    	ulnk      
    2654:	00 00 06    	return    

00002656 <_init_uart>:

void init_uart(void) {
    2656:	00 00 fa    	lnk       #0x0

00002658 <.LSM91>:
    init_pin();
    2658:	0a 0c 07    	rcall     0x3e6e <_init_pin>

0000265a <.LSM92>:

    // pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    // pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    265a:	40 00 20    	mov.w     #0x4, w0
    265c:	80 1f 78    	mov.w     w0, [w15++]
    265e:	30 00 20    	mov.w     #0x3, w0
    2660:	80 1f 78    	mov.w     w0, [w15++]
    2662:	80 c0 b3    	mov.b     #0x8, w0
    2664:	80 1f 78    	mov.w     w0, [w15++]
    2666:	00 40 eb    	clr.b     w0
    2668:	80 1f 78    	mov.w     w0, [w15++]
    266a:	40 6a 20    	mov.w     #0x6a4, w0
    266c:	80 1f 78    	mov.w     w0, [w15++]
    266e:	40 6a 20    	mov.w     #0x6a4, w0
    2670:	80 1f 78    	mov.w     w0, [w15++]
    2672:	b0 c0 b3    	mov.b     #0xb, w0
    2674:	80 1f 78    	mov.w     w0, [w15++]
    2676:	c0 c0 b3    	mov.b     #0xc, w0
    2678:	80 1f 78    	mov.w     w0, [w15++]
    267a:	47 09 20    	mov.w     #0x94, w7
    267c:	46 08 20    	mov.w     #0x84, w6
    267e:	85 22 20    	mov.w     #0x228, w5
    2680:	64 22 20    	mov.w     #0x226, w4
    2682:	43 22 20    	mov.w     #0x224, w3
    2684:	22 22 20    	mov.w     #0x222, w2
    2686:	01 22 20    	mov.w     #0x220, w1
    2688:	40 28 21    	mov.w     #0x1284, w0
    268a:	51 00 07    	rcall     0x272e <_uart_init>
    268c:	f0 87 57    	sub.w     w15, #0x10, w15

0000268e <.LSM93>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    268e:	60 00 20    	mov.w     #0x6, w0
    2690:	80 1f 78    	mov.w     w0, [w15++]
    2692:	50 00 20    	mov.w     #0x5, w0
    2694:	80 1f 78    	mov.w     w0, [w15++]
    2696:	80 c0 b3    	mov.b     #0x8, w0
    2698:	80 1f 78    	mov.w     w0, [w15++]
    269a:	00 40 eb    	clr.b     w0
    269c:	80 1f 78    	mov.w     w0, [w15++]
    269e:	60 6a 20    	mov.w     #0x6a6, w0
    26a0:	80 1f 78    	mov.w     w0, [w15++]
    26a2:	60 6a 20    	mov.w     #0x6a6, w0
    26a4:	80 1f 78    	mov.w     w0, [w15++]
    26a6:	e0 c0 b3    	mov.b     #0xe, w0
    26a8:	80 1f 78    	mov.w     w0, [w15++]
    26aa:	f0 c0 b3    	mov.b     #0xf, w0
    26ac:	80 1f 78    	mov.w     w0, [w15++]
    26ae:	67 09 20    	mov.w     #0x96, w7
    26b0:	66 08 20    	mov.w     #0x86, w6
    26b2:	85 23 20    	mov.w     #0x238, w5
    26b4:	64 23 20    	mov.w     #0x236, w4
    26b6:	43 23 20    	mov.w     #0x234, w3
    26b8:	22 23 20    	mov.w     #0x232, w2
    26ba:	01 23 20    	mov.w     #0x230, w1
    26bc:	00 2c 21    	mov.w     #0x12c0, w0
    26be:	37 00 07    	rcall     0x272e <_uart_init>
    26c0:	f0 87 57    	sub.w     w15, #0x10, w15

000026c2 <.LSM94>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    26c2:	d0 01 20    	mov.w     #0x1d, w0
    26c4:	80 1f 78    	mov.w     w0, [w15++]
    26c6:	c0 01 20    	mov.w     #0x1c, w0
    26c8:	80 1f 78    	mov.w     w0, [w15++]
    26ca:	80 c0 b3    	mov.b     #0x8, w0
    26cc:	80 1f 78    	mov.w     w0, [w15++]
    26ce:	80 c0 b3    	mov.b     #0x8, w0
    26d0:	80 1f 78    	mov.w     w0, [w15++]
    26d2:	a0 6a 20    	mov.w     #0x6aa, w0
    26d4:	80 1f 78    	mov.w     w0, [w15++]
    26d6:	20 6a 20    	mov.w     #0x6a2, w0
    26d8:	80 1f 78    	mov.w     w0, [w15++]
    26da:	20 c0 b3    	mov.b     #0x2, w0
    26dc:	80 1f 78    	mov.w     w0, [w15++]
    26de:	30 c0 b3    	mov.b     #0x3, w0
    26e0:	80 1f 78    	mov.w     w0, [w15++]
    26e2:	e7 09 20    	mov.w     #0x9e, w7
    26e4:	e6 08 20    	mov.w     #0x8e, w6
    26e6:	85 25 20    	mov.w     #0x258, w5
    26e8:	64 25 20    	mov.w     #0x256, w4
    26ea:	43 25 20    	mov.w     #0x254, w3
    26ec:	22 25 20    	mov.w     #0x252, w2
    26ee:	01 25 20    	mov.w     #0x250, w1
    26f0:	c0 2f 21    	mov.w     #0x12fc, w0
    26f2:	1d 00 07    	rcall     0x272e <_uart_init>
    26f4:	f0 87 57    	sub.w     w15, #0x10, w15

000026f6 <.LSM95>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    26f6:	f0 01 20    	mov.w     #0x1f, w0
    26f8:	80 1f 78    	mov.w     w0, [w15++]
    26fa:	e0 01 20    	mov.w     #0x1e, w0
    26fc:	80 1f 78    	mov.w     w0, [w15++]
    26fe:	80 c0 b3    	mov.b     #0x8, w0
    2700:	80 1f 78    	mov.w     w0, [w15++]
    2702:	00 40 eb    	clr.b     w0
    2704:	80 1f 78    	mov.w     w0, [w15++]
    2706:	60 6b 20    	mov.w     #0x6b6, w0
    2708:	80 1f 78    	mov.w     w0, [w15++]
    270a:	60 6b 20    	mov.w     #0x6b6, w0
    270c:	80 1f 78    	mov.w     w0, [w15++]
    270e:	80 c0 b3    	mov.b     #0x8, w0
    2710:	80 1f 78    	mov.w     w0, [w15++]
    2712:	90 c0 b3    	mov.b     #0x9, w0
    2714:	80 1f 78    	mov.w     w0, [w15++]
    2716:	e7 09 20    	mov.w     #0x9e, w7
    2718:	e6 08 20    	mov.w     #0x8e, w6
    271a:	85 2b 20    	mov.w     #0x2b8, w5
    271c:	64 2b 20    	mov.w     #0x2b6, w4
    271e:	43 2b 20    	mov.w     #0x2b4, w3
    2720:	22 2b 20    	mov.w     #0x2b2, w2
    2722:	01 2b 20    	mov.w     #0x2b0, w1
    2724:	80 33 21    	mov.w     #0x1338, w0
    2726:	03 00 07    	rcall     0x272e <_uart_init>
    2728:	f0 87 57    	sub.w     w15, #0x10, w15

0000272a <.LSM96>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    // uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    //           0, NULL, 0, NULL, 0);

    // _stdout = &uart1;
    // _stderr = &uart1;
}
    272a:	00 80 fa    	ulnk      
    272c:	00 00 06    	return    

0000272e <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    272e:	10 00 fa    	lnk       #0x10
    2730:	00 0f 78    	mov.w     w0, [w14]
    2732:	11 07 98    	mov.w     w1, [w14+2]
    2734:	22 07 98    	mov.w     w2, [w14+4]
    2736:	33 07 98    	mov.w     w3, [w14+6]
    2738:	44 07 98    	mov.w     w4, [w14+8]
    273a:	55 07 98    	mov.w     w5, [w14+10]
    273c:	66 07 98    	mov.w     w6, [w14+12]
    273e:	77 07 98    	mov.w     w7, [w14+14]

00002740 <.LSM98>:
    self->UxMODE = UxMODE;
    2740:	1e 00 78    	mov.w     [w14], w0
    2742:	9e 00 90    	mov.w     [w14+2], w1
    2744:	01 08 78    	mov.w     w1, [w0]

00002746 <.LSM99>:
    self->UxSTA = UxSTA;
    2746:	1e 00 78    	mov.w     [w14], w0
    2748:	ae 00 90    	mov.w     [w14+4], w1
    274a:	11 00 98    	mov.w     w1, [w0+2]

0000274c <.LSM100>:
    self->UxTXREG = UxTXREG;
    274c:	1e 00 78    	mov.w     [w14], w0
    274e:	be 00 90    	mov.w     [w14+6], w1
    2750:	21 00 98    	mov.w     w1, [w0+4]

00002752 <.LSM101>:
    self->UxRXREG = UxRXREG;
    2752:	1e 00 78    	mov.w     [w14], w0
    2754:	ce 00 90    	mov.w     [w14+8], w1
    2756:	31 00 98    	mov.w     w1, [w0+6]

00002758 <.LSM102>:
    self->UxBRG = UxBRG;
    2758:	1e 00 78    	mov.w     [w14], w0
    275a:	de 00 90    	mov.w     [w14+10], w1
    275c:	41 00 98    	mov.w     w1, [w0+8]

0000275e <.LSM103>:
    self->IFSy = IFSy;
    275e:	1e 00 78    	mov.w     [w14], w0
    2760:	ee 00 90    	mov.w     [w14+12], w1
    2762:	51 00 98    	mov.w     w1, [w0+10]

00002764 <.LSM104>:
    self->IECy = IECy;
    2764:	1e 00 78    	mov.w     [w14], w0
    2766:	fe 00 90    	mov.w     [w14+14], w1
    2768:	61 00 98    	mov.w     w1, [w0+12]

0000276a <.LSM105>:
    self->UxTXIF = UxTXIF;
    276a:	1e 00 78    	mov.w     [w14], w0
    276c:	8e f8 97    	mov.b     [w14-8], w1
    276e:	61 48 98    	mov.b     w1, [w0+14]

00002770 <.LSM106>:
    self->UxRXIF = UxRXIF;
    2770:	1e 00 78    	mov.w     [w14], w0
    2772:	ee f0 97    	mov.b     [w14-10], w1
    2774:	71 48 98    	mov.b     w1, [w0+15]

00002776 <.LSM107>:
    self->RXrpinr = RXrpinr;
    2776:	1e 00 78    	mov.w     [w14], w0
    2778:	ae b8 97    	mov.w     [w14-12], w1
    277a:	01 08 98    	mov.w     w1, [w0+16]

0000277c <.LSM108>:
    self->CTSrpinr = CTSrpinr;
    277c:	1e 00 78    	mov.w     [w14], w0
    277e:	9e b8 97    	mov.w     [w14-14], w1
    2780:	11 08 98    	mov.w     w1, [w0+18]

00002782 <.LSM109>:
    self->RXrpshift = RXrpshift;
    2782:	1e 00 78    	mov.w     [w14], w0
    2784:	8e f0 97    	mov.b     [w14-16], w1
    2786:	41 50 98    	mov.b     w1, [w0+20]

00002788 <.LSM110>:
    self->CTSrpshift = CTSrpshift;
    2788:	1e 00 78    	mov.w     [w14], w0
    278a:	ee e8 97    	mov.b     [w14-18], w1
    278c:	51 50 98    	mov.b     w1, [w0+21]

0000278e <.LSM111>:
    self->TXrpnum = TXrpnum;
    278e:	1e 00 78    	mov.w     [w14], w0
    2790:	ee b0 97    	mov.w     [w14-20], w1
    2792:	31 08 98    	mov.w     w1, [w0+22]

00002794 <.LSM112>:
    self->RTSrpnum = RTSrpnum;
    2794:	1e 00 78    	mov.w     [w14], w0
    2796:	de b0 97    	mov.w     [w14-22], w1
    2798:	41 08 98    	mov.w     w1, [w0+24]

0000279a <.LSM113>:
    self->TX = NULL;
    279a:	1e 00 78    	mov.w     [w14], w0
    279c:	80 00 eb    	clr.w     w1
    279e:	51 08 98    	mov.w     w1, [w0+26]

000027a0 <.LSM114>:
    self->RX = NULL;
    27a0:	1e 00 78    	mov.w     [w14], w0
    27a2:	80 00 eb    	clr.w     w1
    27a4:	61 08 98    	mov.w     w1, [w0+28]

000027a6 <.LSM115>:
    self->RTS = NULL;
    27a6:	1e 00 78    	mov.w     [w14], w0
    27a8:	80 00 eb    	clr.w     w1
    27aa:	71 08 98    	mov.w     w1, [w0+30]

000027ac <.LSM116>:
    self->CTS = NULL;
    27ac:	1e 00 78    	mov.w     [w14], w0
    27ae:	80 00 eb    	clr.w     w1
    27b0:	01 10 98    	mov.w     w1, [w0+32]

000027b2 <.LSM117>:
    self->TXbuffer.data = NULL;
    27b2:	1e 00 78    	mov.w     [w14], w0
    27b4:	80 00 eb    	clr.w     w1
    27b6:	11 10 98    	mov.w     w1, [w0+34]

000027b8 <.LSM118>:
    self->TXbuffer.length = 0;
    27b8:	1e 00 78    	mov.w     [w14], w0
    27ba:	80 00 eb    	clr.w     w1
    27bc:	21 10 98    	mov.w     w1, [w0+36]

000027be <.LSM119>:
    self->TXbuffer.head = 0;
    27be:	1e 00 78    	mov.w     [w14], w0
    27c0:	80 00 eb    	clr.w     w1
    27c2:	31 10 98    	mov.w     w1, [w0+38]

000027c4 <.LSM120>:
    self->TXbuffer.tail = 0;
    27c4:	1e 00 78    	mov.w     [w14], w0
    27c6:	80 00 eb    	clr.w     w1
    27c8:	41 10 98    	mov.w     w1, [w0+40]

000027ca <.LSM121>:
    self->TXbuffer.count = 0;
    27ca:	1e 00 78    	mov.w     [w14], w0
    27cc:	80 00 eb    	clr.w     w1
    27ce:	51 10 98    	mov.w     w1, [w0+42]

000027d0 <.LSM122>:
    self->RXbuffer.data = NULL;
    27d0:	1e 00 78    	mov.w     [w14], w0
    27d2:	80 00 eb    	clr.w     w1
    27d4:	61 10 98    	mov.w     w1, [w0+44]

000027d6 <.LSM123>:
    self->RXbuffer.length = 0;
    27d6:	1e 00 78    	mov.w     [w14], w0
    27d8:	80 00 eb    	clr.w     w1
    27da:	71 10 98    	mov.w     w1, [w0+46]

000027dc <.LSM124>:
    self->RXbuffer.head = 0;
    27dc:	1e 00 78    	mov.w     [w14], w0
    27de:	80 00 eb    	clr.w     w1
    27e0:	01 18 98    	mov.w     w1, [w0+48]

000027e2 <.LSM125>:
    self->RXbuffer.tail = 0;
    27e2:	1e 00 78    	mov.w     [w14], w0
    27e4:	80 00 eb    	clr.w     w1
    27e6:	11 18 98    	mov.w     w1, [w0+50]

000027e8 <.LSM126>:
    self->RXbuffer.count = 0;
    27e8:	1e 00 78    	mov.w     [w14], w0
    27ea:	80 00 eb    	clr.w     w1
    27ec:	21 18 98    	mov.w     w1, [w0+52]

000027ee <.LSM127>:
    self->TXthreshold = 1;
    27ee:	1e 00 78    	mov.w     [w14], w0
    27f0:	11 00 20    	mov.w     #0x1, w1
    27f2:	31 18 98    	mov.w     w1, [w0+54]

000027f4 <.LSM128>:
    self->putc = NULL;
    27f4:	1e 00 78    	mov.w     [w14], w0
    27f6:	80 00 eb    	clr.w     w1
    27f8:	41 18 98    	mov.w     w1, [w0+56]

000027fa <.LSM129>:
    self->getc = NULL;
    27fa:	1e 00 78    	mov.w     [w14], w0
    27fc:	80 00 eb    	clr.w     w1
    27fe:	51 18 98    	mov.w     w1, [w0+58]

00002800 <.LSM130>:
}
    2800:	00 80 fa    	ulnk      
    2802:	00 00 06    	return    

00002804 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    2804:	10 00 fa    	lnk       #0x10
    2806:	88 1f 78    	mov.w     w8, [w15++]
    2808:	00 0f 78    	mov.w     w0, [w14]
    280a:	11 07 98    	mov.w     w1, [w14+2]
    280c:	22 07 98    	mov.w     w2, [w14+4]
    280e:	33 07 98    	mov.w     w3, [w14+6]
    2810:	44 07 98    	mov.w     w4, [w14+8]
    2812:	56 07 98    	mov.w     w6, [w14+10]
    2814:	67 07 98    	mov.w     w7, [w14+12]
    2816:	65 4f 98    	mov.b     w5, [w14+14]

00002818 <.LSM132>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    2818:	1e 00 78    	mov.w     [w14], w0
    281a:	10 00 78    	mov.w     [w0], w0
    281c:	80 00 eb    	clr.w     w1
    281e:	01 08 78    	mov.w     w1, [w0]

00002820 <.LSM133>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    2820:	1e 00 90    	mov.w     [w14+2], w0
    2822:	60 00 90    	mov.w     [w0+12], w0
    2824:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2826:	0e 02 32    	bra       Z, 0x2c44 <.L73>
    2828:	2e 00 90    	mov.w     [w14+4], w0
    282a:	60 00 90    	mov.w     [w0+12], w0
    282c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    282e:	0c 02 32    	bra       Z, 0x2c48 <.L74>

00002830 <.LSM134>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    2830:	1e 00 90    	mov.w     [w14+2], w0
    2832:	00 08 90    	mov.w     [w0+16], w0
    2834:	00 00 e0    	cp0.w     w0
    2836:	69 00 3a    	bra       NZ, 0x290a <.L44>
    2838:	2e 00 90    	mov.w     [w14+4], w0
    283a:	00 08 90    	mov.w     [w0+16], w0
    283c:	00 00 e0    	cp0.w     w0
    283e:	65 00 3a    	bra       NZ, 0x290a <.L44>

00002840 <.LSM135>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    2840:	1e 00 90    	mov.w     [w14+2], w0
    2842:	7c 0c 07    	rcall     0x413c <_pin_digitalOut>

00002844 <.LSM136>:
        pin_set(TX);
    2844:	1e 00 90    	mov.w     [w14+2], w0
    2846:	d7 0c 07    	rcall     0x41f6 <_pin_set>

00002848 <.LSM137>:
        pin_digitalIn(RX);
    2848:	2e 00 90    	mov.w     [w14+4], w0
    284a:	51 0c 07    	rcall     0x40ee <_pin_digitalIn>

0000284c <.LSM138>:
        self->TX = TX;
    284c:	1e 00 78    	mov.w     [w14], w0
    284e:	9e 00 90    	mov.w     [w14+2], w1
    2850:	51 08 98    	mov.w     w1, [w0+26]

00002852 <.LSM139>:
        TX->owner = (void *)self;
    2852:	1e 00 90    	mov.w     [w14+2], w0
    2854:	9e 00 78    	mov.w     [w14], w1
    2856:	01 08 98    	mov.w     w1, [w0+16]

00002858 <.LSM140>:
        TX->write = NULL;
    2858:	1e 00 90    	mov.w     [w14+2], w0
    285a:	80 00 eb    	clr.w     w1
    285c:	11 08 98    	mov.w     w1, [w0+18]

0000285e <.LSM141>:
        TX->read = NULL;
    285e:	1e 00 90    	mov.w     [w14+2], w0
    2860:	80 00 eb    	clr.w     w1
    2862:	21 08 98    	mov.w     w1, [w0+20]

00002864 <.LSM142>:
        self->RX = RX;
    2864:	1e 00 78    	mov.w     [w14], w0
    2866:	ae 00 90    	mov.w     [w14+4], w1
    2868:	61 08 98    	mov.w     w1, [w0+28]

0000286a <.LSM143>:
        RX->owner = (void *)self;
    286a:	2e 00 90    	mov.w     [w14+4], w0
    286c:	9e 00 78    	mov.w     [w14], w1
    286e:	01 08 98    	mov.w     w1, [w0+16]

00002870 <.LSM144>:
        RX->write = NULL;
    2870:	2e 00 90    	mov.w     [w14+4], w0
    2872:	80 00 eb    	clr.w     w1
    2874:	11 08 98    	mov.w     w1, [w0+18]

00002876 <.LSM145>:
        RX->read = NULL;
    2876:	2e 00 90    	mov.w     [w14+4], w0
    2878:	80 00 eb    	clr.w     w1
    287a:	21 08 98    	mov.w     w1, [w0+20]

0000287c <.LSM146>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    287c:	11 3a 80    	mov.w     0x742, w1
    287e:	f0 0b 20    	mov.w     #0xbf, w0
    2880:	00 81 60    	and.w     w1, w0, w2
    2882:	60 04 20    	mov.w     #0x46, w0
    2884:	71 05 20    	mov.w     #0x57, w1
    2886:	23 74 20    	mov.w     #0x742, w3
    2888:	80 49 78    	mov.b     w0, [w3]
    288a:	81 49 78    	mov.b     w1, [w3]
    288c:	82 49 78    	mov.b     w2, [w3]

0000288e <.LSM147>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    288e:	1e 00 90    	mov.w     [w14+2], w0
    2890:	70 00 90    	mov.w     [w0+14], w0
    2892:	9e 00 90    	mov.w     [w14+2], w1
    2894:	f1 00 90    	mov.w     [w1+14], w1
    2896:	11 01 78    	mov.w     [w1], w2
    2898:	9e 00 90    	mov.w     [w14+2], w1
    289a:	a1 48 90    	mov.b     [w1+10], w1
    289c:	81 80 fb    	ze        w1, w1
    289e:	f3 03 20    	mov.w     #0x3f, w3
    28a0:	81 18 dd    	sl.w      w3, w1, w1
    28a2:	81 80 ea    	com.w     w1, w1
    28a4:	81 00 61    	and.w     w2, w1, w1
    28a6:	01 08 78    	mov.w     w1, [w0]

000028a8 <.LSM148>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    28a8:	1e 00 90    	mov.w     [w14+2], w0
    28aa:	70 00 90    	mov.w     [w0+14], w0
    28ac:	9e 00 90    	mov.w     [w14+2], w1
    28ae:	f1 00 90    	mov.w     [w1+14], w1
    28b0:	11 01 78    	mov.w     [w1], w2
    28b2:	9e 00 78    	mov.w     [w14], w1
    28b4:	b1 09 90    	mov.w     [w1+22], w3
    28b6:	9e 00 90    	mov.w     [w14+2], w1
    28b8:	a1 48 90    	mov.b     [w1+10], w1
    28ba:	81 80 fb    	ze        w1, w1
    28bc:	81 18 dd    	sl.w      w3, w1, w1
    28be:	82 80 70    	ior.w     w1, w2, w1
    28c0:	01 08 78    	mov.w     w1, [w0]

000028c2 <.LSM149>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    28c2:	1e 00 78    	mov.w     [w14], w0
    28c4:	00 08 90    	mov.w     [w0+16], w0
    28c6:	9e 00 78    	mov.w     [w14], w1
    28c8:	81 08 90    	mov.w     [w1+16], w1
    28ca:	11 01 78    	mov.w     [w1], w2
    28cc:	9e 00 78    	mov.w     [w14], w1
    28ce:	c1 50 90    	mov.b     [w1+20], w1
    28d0:	81 80 fb    	ze        w1, w1
    28d2:	f3 03 20    	mov.w     #0x3f, w3
    28d4:	81 18 dd    	sl.w      w3, w1, w1
    28d6:	81 80 ea    	com.w     w1, w1
    28d8:	81 00 61    	and.w     w2, w1, w1
    28da:	01 08 78    	mov.w     w1, [w0]

000028dc <.LSM150>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    28dc:	1e 00 78    	mov.w     [w14], w0
    28de:	00 08 90    	mov.w     [w0+16], w0
    28e0:	9e 00 78    	mov.w     [w14], w1
    28e2:	81 08 90    	mov.w     [w1+16], w1
    28e4:	11 01 78    	mov.w     [w1], w2
    28e6:	ae 00 90    	mov.w     [w14+4], w1
    28e8:	e1 01 90    	mov.w     [w1+12], w3
    28ea:	9e 00 78    	mov.w     [w14], w1
    28ec:	c1 50 90    	mov.b     [w1+20], w1
    28ee:	81 80 fb    	ze        w1, w1
    28f0:	81 18 dd    	sl.w      w3, w1, w1
    28f2:	82 80 70    	ior.w     w1, w2, w1
    28f4:	01 08 78    	mov.w     w1, [w0]

000028f6 <.LSM151>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    28f6:	11 3a 80    	mov.w     0x742, w1
    28f8:	00 04 20    	mov.w     #0x40, w0
    28fa:	01 01 70    	ior.w     w0, w1, w2
    28fc:	60 04 20    	mov.w     #0x46, w0
    28fe:	71 05 20    	mov.w     #0x57, w1
    2900:	23 74 20    	mov.w     #0x742, w3
    2902:	80 49 78    	mov.b     w0, [w3]
    2904:	81 49 78    	mov.b     w1, [w3]
    2906:	82 49 78    	mov.b     w2, [w3]
    2908:	0a 00 37    	bra       0x291e <.L45>

0000290a <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    290a:	1e 00 78    	mov.w     [w14], w0
    290c:	d0 08 90    	mov.w     [w0+26], w1
    290e:	1e 00 90    	mov.w     [w14+2], w0
    2910:	80 8f 50    	sub.w     w1, w0, [w15]
    2912:	9c 01 3a    	bra       NZ, 0x2c4c <.L75>
    2914:	1e 00 78    	mov.w     [w14], w0
    2916:	e0 08 90    	mov.w     [w0+28], w1
    2918:	2e 00 90    	mov.w     [w14+4], w0
    291a:	80 8f 50    	sub.w     w1, w0, [w15]
    291c:	99 01 3a    	bra       NZ, 0x2c50 <.L76>

0000291e <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    291e:	3e 00 90    	mov.w     [w14+6], w0
    2920:	00 00 e0    	cp0.w     w0
    2922:	87 00 32    	bra       Z, 0x2a32 <.L47>
    2924:	4e 00 90    	mov.w     [w14+8], w0
    2926:	00 00 e0    	cp0.w     w0
    2928:	84 00 32    	bra       Z, 0x2a32 <.L47>

0000292a <.LSM154>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    292a:	3e 00 90    	mov.w     [w14+6], w0
    292c:	60 00 90    	mov.w     [w0+12], w0
    292e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2930:	91 01 32    	bra       Z, 0x2c54 <.L77>
    2932:	4e 00 90    	mov.w     [w14+8], w0
    2934:	60 00 90    	mov.w     [w0+12], w0
    2936:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2938:	8f 01 32    	bra       Z, 0x2c58 <.L78>

0000293a <.LSM155>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    293a:	3e 00 90    	mov.w     [w14+6], w0
    293c:	00 08 90    	mov.w     [w0+16], w0
    293e:	00 00 e0    	cp0.w     w0
    2940:	69 00 3a    	bra       NZ, 0x2a14 <.L50>
    2942:	4e 00 90    	mov.w     [w14+8], w0
    2944:	00 08 90    	mov.w     [w0+16], w0
    2946:	00 00 e0    	cp0.w     w0
    2948:	65 00 3a    	bra       NZ, 0x2a14 <.L50>

0000294a <.LSM156>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    294a:	3e 00 90    	mov.w     [w14+6], w0
    294c:	f7 0b 07    	rcall     0x413c <_pin_digitalOut>

0000294e <.LSM157>:
            pin_set(RTS);
    294e:	3e 00 90    	mov.w     [w14+6], w0
    2950:	52 0c 07    	rcall     0x41f6 <_pin_set>

00002952 <.LSM158>:
            pin_digitalIn(CTS);
    2952:	4e 00 90    	mov.w     [w14+8], w0
    2954:	cc 0b 07    	rcall     0x40ee <_pin_digitalIn>

00002956 <.LSM159>:
            self->RTS = RTS;
    2956:	1e 00 78    	mov.w     [w14], w0
    2958:	be 00 90    	mov.w     [w14+6], w1
    295a:	71 08 98    	mov.w     w1, [w0+30]

0000295c <.LSM160>:
            RTS->owner = (void *)self;
    295c:	3e 00 90    	mov.w     [w14+6], w0
    295e:	9e 00 78    	mov.w     [w14], w1
    2960:	01 08 98    	mov.w     w1, [w0+16]

00002962 <.LSM161>:
            RTS->write = NULL;
    2962:	3e 00 90    	mov.w     [w14+6], w0
    2964:	80 00 eb    	clr.w     w1
    2966:	11 08 98    	mov.w     w1, [w0+18]

00002968 <.LSM162>:
            RTS->read = NULL;
    2968:	3e 00 90    	mov.w     [w14+6], w0
    296a:	80 00 eb    	clr.w     w1
    296c:	21 08 98    	mov.w     w1, [w0+20]

0000296e <.LSM163>:
            self->CTS = CTS;
    296e:	1e 00 78    	mov.w     [w14], w0
    2970:	ce 00 90    	mov.w     [w14+8], w1
    2972:	01 10 98    	mov.w     w1, [w0+32]

00002974 <.LSM164>:
            CTS->owner = (void *)self;
    2974:	4e 00 90    	mov.w     [w14+8], w0
    2976:	9e 00 78    	mov.w     [w14], w1
    2978:	01 08 98    	mov.w     w1, [w0+16]

0000297a <.LSM165>:
            CTS->write = NULL;
    297a:	4e 00 90    	mov.w     [w14+8], w0
    297c:	80 00 eb    	clr.w     w1
    297e:	11 08 98    	mov.w     w1, [w0+18]

00002980 <.LSM166>:
            CTS->read = NULL;
    2980:	4e 00 90    	mov.w     [w14+8], w0
    2982:	80 00 eb    	clr.w     w1
    2984:	21 08 98    	mov.w     w1, [w0+20]

00002986 <.LSM167>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    2986:	11 3a 80    	mov.w     0x742, w1
    2988:	f0 0b 20    	mov.w     #0xbf, w0
    298a:	00 81 60    	and.w     w1, w0, w2
    298c:	60 04 20    	mov.w     #0x46, w0
    298e:	71 05 20    	mov.w     #0x57, w1
    2990:	23 74 20    	mov.w     #0x742, w3
    2992:	80 49 78    	mov.b     w0, [w3]
    2994:	81 49 78    	mov.b     w1, [w3]
    2996:	82 49 78    	mov.b     w2, [w3]

00002998 <.LSM168>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    2998:	3e 00 90    	mov.w     [w14+6], w0
    299a:	70 00 90    	mov.w     [w0+14], w0
    299c:	be 00 90    	mov.w     [w14+6], w1
    299e:	f1 00 90    	mov.w     [w1+14], w1
    29a0:	11 01 78    	mov.w     [w1], w2
    29a2:	be 00 90    	mov.w     [w14+6], w1
    29a4:	a1 48 90    	mov.b     [w1+10], w1
    29a6:	81 80 fb    	ze        w1, w1
    29a8:	f3 03 20    	mov.w     #0x3f, w3
    29aa:	81 18 dd    	sl.w      w3, w1, w1
    29ac:	81 80 ea    	com.w     w1, w1
    29ae:	81 00 61    	and.w     w2, w1, w1
    29b0:	01 08 78    	mov.w     w1, [w0]

000029b2 <.LSM169>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    29b2:	3e 00 90    	mov.w     [w14+6], w0
    29b4:	70 00 90    	mov.w     [w0+14], w0
    29b6:	be 00 90    	mov.w     [w14+6], w1
    29b8:	f1 00 90    	mov.w     [w1+14], w1
    29ba:	11 01 78    	mov.w     [w1], w2
    29bc:	9e 00 78    	mov.w     [w14], w1
    29be:	c1 09 90    	mov.w     [w1+24], w3
    29c0:	be 00 90    	mov.w     [w14+6], w1
    29c2:	a1 48 90    	mov.b     [w1+10], w1
    29c4:	81 80 fb    	ze        w1, w1
    29c6:	81 18 dd    	sl.w      w3, w1, w1
    29c8:	82 80 70    	ior.w     w1, w2, w1
    29ca:	01 08 78    	mov.w     w1, [w0]

000029cc <.LSM170>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    29cc:	1e 00 78    	mov.w     [w14], w0
    29ce:	10 08 90    	mov.w     [w0+18], w0
    29d0:	9e 00 78    	mov.w     [w14], w1
    29d2:	91 08 90    	mov.w     [w1+18], w1
    29d4:	11 01 78    	mov.w     [w1], w2
    29d6:	9e 00 78    	mov.w     [w14], w1
    29d8:	d1 50 90    	mov.b     [w1+21], w1
    29da:	81 80 fb    	ze        w1, w1
    29dc:	f3 03 20    	mov.w     #0x3f, w3
    29de:	81 18 dd    	sl.w      w3, w1, w1
    29e0:	81 80 ea    	com.w     w1, w1
    29e2:	81 00 61    	and.w     w2, w1, w1
    29e4:	01 08 78    	mov.w     w1, [w0]

000029e6 <.LSM171>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    29e6:	1e 00 78    	mov.w     [w14], w0
    29e8:	10 08 90    	mov.w     [w0+18], w0
    29ea:	9e 00 78    	mov.w     [w14], w1
    29ec:	91 08 90    	mov.w     [w1+18], w1
    29ee:	11 01 78    	mov.w     [w1], w2
    29f0:	ce 00 90    	mov.w     [w14+8], w1
    29f2:	e1 01 90    	mov.w     [w1+12], w3
    29f4:	9e 00 78    	mov.w     [w14], w1
    29f6:	d1 50 90    	mov.b     [w1+21], w1
    29f8:	81 80 fb    	ze        w1, w1
    29fa:	81 18 dd    	sl.w      w3, w1, w1
    29fc:	82 80 70    	ior.w     w1, w2, w1
    29fe:	01 08 78    	mov.w     w1, [w0]

00002a00 <.LSM172>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    2a00:	11 3a 80    	mov.w     0x742, w1
    2a02:	00 04 20    	mov.w     #0x40, w0
    2a04:	01 01 70    	ior.w     w0, w1, w2
    2a06:	60 04 20    	mov.w     #0x46, w0
    2a08:	71 05 20    	mov.w     #0x57, w1
    2a0a:	23 74 20    	mov.w     #0x742, w3
    2a0c:	80 49 78    	mov.b     w0, [w3]
    2a0e:	81 49 78    	mov.b     w1, [w3]
    2a10:	82 49 78    	mov.b     w2, [w3]
    2a12:	0a 00 37    	bra       0x2a28 <.L51>

00002a14 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    2a14:	1e 00 78    	mov.w     [w14], w0
    2a16:	f0 08 90    	mov.w     [w0+30], w1
    2a18:	3e 00 90    	mov.w     [w14+6], w0
    2a1a:	80 8f 50    	sub.w     w1, w0, [w15]
    2a1c:	1f 01 3a    	bra       NZ, 0x2c5c <.L79>
    2a1e:	1e 00 78    	mov.w     [w14], w0
    2a20:	80 10 90    	mov.w     [w0+32], w1
    2a22:	4e 00 90    	mov.w     [w14+8], w0
    2a24:	80 8f 50    	sub.w     w1, w0, [w15]
    2a26:	1c 01 3a    	bra       NZ, 0x2c60 <.L80>

00002a28 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    2a28:	1e 00 78    	mov.w     [w14], w0
    2a2a:	10 00 78    	mov.w     [w0], w0
    2a2c:	01 20 20    	mov.w     #0x200, w1
    2a2e:	01 08 78    	mov.w     w1, [w0]
    2a30:	06 00 37    	bra       0x2a3e <.L53>

00002a32 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    2a32:	3e 00 90    	mov.w     [w14+6], w0
    2a34:	00 00 e0    	cp0.w     w0
    2a36:	16 01 3a    	bra       NZ, 0x2c64 <.L81>
    2a38:	4e 00 90    	mov.w     [w14+8], w0
    2a3a:	00 00 e0    	cp0.w     w0
    2a3c:	15 01 3a    	bra       NZ, 0x2c68 <.L82>

00002a3e <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2a3e:	18 c0 b3    	mov.b     #0x1, w8
    2a40:	02 40 22    	mov.w     #0x2400, w2
    2a42:	43 a7 24    	mov.w     #0x4a74, w3
    2a44:	5e 00 90    	mov.w     [w14+10], w0
    2a46:	ee 00 90    	mov.w     [w14+12], w1
    2a48:	7e f4 07    	rcall     0x1346 <___gesf2>
    2a4a:	00 00 e0    	cp0.w     w0
    2a4c:	01 00 3c    	bra       GT, 0x2a50 <.L55>
    2a4e:	00 44 eb    	clr.b     w8

00002a50 <.L55>:
    2a50:	08 04 e0    	cp0.b     w8
    2a52:	04 00 32    	bra       Z, 0x2a5c <.L56>

00002a54 <.LSM177>:
        baudrate = FCY/4.;
    2a54:	00 40 22    	mov.w     #0x2400, w0
    2a56:	41 a7 24    	mov.w     #0x4a74, w1
    2a58:	50 07 98    	mov.w     w0, [w14+10]
    2a5a:	61 07 98    	mov.w     w1, [w14+12]

00002a5c <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    2a5c:	18 c0 b3    	mov.b     #0x1, w8
    2a5e:	02 40 22    	mov.w     #0x2400, w2
    2a60:	43 17 24    	mov.w     #0x4174, w3
    2a62:	5e 00 90    	mov.w     [w14+10], w0
    2a64:	ee 00 90    	mov.w     [w14+12], w1
    2a66:	6d f4 07    	rcall     0x1342 <___eqsf2>
    2a68:	00 00 e0    	cp0.w     w0
    2a6a:	01 00 35    	bra       LT, 0x2a6e <.L57>
    2a6c:	00 44 eb    	clr.b     w8

00002a6e <.L57>:
    2a6e:	08 04 e0    	cp0.b     w8
    2a70:	04 00 32    	bra       Z, 0x2a7a <.L58>

00002a72 <.LSM179>:
        baudrate = FCY/(16.*65536.);
    2a72:	00 40 22    	mov.w     #0x2400, w0
    2a74:	41 17 24    	mov.w     #0x4174, w1
    2a76:	50 07 98    	mov.w     w0, [w14+10]
    2a78:	61 07 98    	mov.w     w1, [w14+12]

00002a7a <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2a7a:	18 c0 b3    	mov.b     #0x1, w8
    2a7c:	02 40 22    	mov.w     #0x2400, w2
    2a7e:	43 27 24    	mov.w     #0x4274, w3
    2a80:	5e 00 90    	mov.w     [w14+10], w0
    2a82:	ee 00 90    	mov.w     [w14+12], w1
    2a84:	5e f4 07    	rcall     0x1342 <___eqsf2>
    2a86:	00 00 e0    	cp0.w     w0
    2a88:	01 00 34    	bra       LE, 0x2a8c <.L59>
    2a8a:	00 44 eb    	clr.b     w8

00002a8c <.L59>:
    2a8c:	08 04 e0    	cp0.b     w8
    2a8e:	0f 00 32    	bra       Z, 0x2aae <.L60>

00002a90 <.LSM181>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    2a90:	1e 00 78    	mov.w     [w14], w0
    2a92:	40 04 90    	mov.w     [w0+8], w8
    2a94:	5e 01 90    	mov.w     [w14+10], w2
    2a96:	ee 01 90    	mov.w     [w14+12], w3
    2a98:	00 40 22    	mov.w     #0x2400, w0
    2a9a:	41 97 24    	mov.w     #0x4974, w1
    2a9c:	10 f4 07    	rcall     0x12be <___divsf3>
    2a9e:	02 00 20    	mov.w     #0x0, w2
    2aa0:	03 f0 23    	mov.w     #0x3f00, w3
    2aa2:	b0 f3 07    	rcall     0x1204 <___addsf3>
    2aa4:	52 f4 07    	rcall     0x134a <___fixunssfsi>
    2aa6:	00 00 78    	mov.w     w0, w0
    2aa8:	00 00 e9    	dec.w     w0, w0
    2aaa:	00 0c 78    	mov.w     w0, [w8]
    2aac:	15 00 37    	bra       0x2ad8 <.L61>

00002aae <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2aae:	1e 00 78    	mov.w     [w14], w0
    2ab0:	10 00 78    	mov.w     [w0], w0
    2ab2:	9e 00 78    	mov.w     [w14], w1
    2ab4:	91 00 78    	mov.w     [w1], w1
    2ab6:	91 00 78    	mov.w     [w1], w1
    2ab8:	01 30 a0    	bset.w    w1, #0x3
    2aba:	01 08 78    	mov.w     w1, [w0]

00002abc <.LSM183>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2abc:	1e 00 78    	mov.w     [w14], w0
    2abe:	40 04 90    	mov.w     [w0+8], w8
    2ac0:	5e 01 90    	mov.w     [w14+10], w2
    2ac2:	ee 01 90    	mov.w     [w14+12], w3
    2ac4:	00 40 22    	mov.w     #0x2400, w0
    2ac6:	41 a7 24    	mov.w     #0x4a74, w1
    2ac8:	fa f3 07    	rcall     0x12be <___divsf3>
    2aca:	02 00 20    	mov.w     #0x0, w2
    2acc:	03 f0 23    	mov.w     #0x3f00, w3
    2ace:	9a f3 07    	rcall     0x1204 <___addsf3>
    2ad0:	3c f4 07    	rcall     0x134a <___fixunssfsi>
    2ad2:	00 00 78    	mov.w     w0, w0
    2ad4:	00 00 e9    	dec.w     w0, w0
    2ad6:	00 0c 78    	mov.w     w0, [w8]

00002ad8 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2ad8:	ee 48 90    	mov.b     [w14+14], w1
    2ada:	50 c4 b3    	mov.b     #0x45, w0
    2adc:	80 cf 50    	sub.b     w1, w0, [w15]
    2ade:	04 00 32    	bra       Z, 0x2ae8 <.L62>
    2ae0:	ee 48 90    	mov.b     [w14+14], w1
    2ae2:	50 c6 b3    	mov.b     #0x65, w0
    2ae4:	80 cf 50    	sub.b     w1, w0, [w15]
    2ae6:	08 00 3a    	bra       NZ, 0x2af8 <.L63>

00002ae8 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2ae8:	1e 00 78    	mov.w     [w14], w0
    2aea:	10 00 78    	mov.w     [w0], w0
    2aec:	9e 00 78    	mov.w     [w14], w1
    2aee:	91 00 78    	mov.w     [w1], w1
    2af0:	91 00 78    	mov.w     [w1], w1
    2af2:	01 10 a0    	bset.w    w1, #0x1
    2af4:	01 08 78    	mov.w     w1, [w0]
    2af6:	18 00 37    	bra       0x2b28 <.L64>

00002af8 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    2af8:	ee 48 90    	mov.b     [w14+14], w1
    2afa:	f0 c4 b3    	mov.b     #0x4f, w0
    2afc:	80 cf 50    	sub.b     w1, w0, [w15]
    2afe:	04 00 32    	bra       Z, 0x2b08 <.L65>
    2b00:	ee 48 90    	mov.b     [w14+14], w1
    2b02:	f0 c6 b3    	mov.b     #0x6f, w0
    2b04:	80 cf 50    	sub.b     w1, w0, [w15]
    2b06:	08 00 3a    	bra       NZ, 0x2b18 <.L66>

00002b08 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    2b08:	1e 00 78    	mov.w     [w14], w0
    2b0a:	10 00 78    	mov.w     [w0], w0
    2b0c:	9e 00 78    	mov.w     [w14], w1
    2b0e:	91 00 78    	mov.w     [w1], w1
    2b10:	91 00 78    	mov.w     [w1], w1
    2b12:	01 20 a0    	bset.w    w1, #0x2
    2b14:	01 08 78    	mov.w     w1, [w0]
    2b16:	08 00 37    	bra       0x2b28 <.L64>

00002b18 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    2b18:	ee 48 90    	mov.b     [w14+14], w1
    2b1a:	e0 c4 b3    	mov.b     #0x4e, w0
    2b1c:	80 cf 50    	sub.b     w1, w0, [w15]
    2b1e:	04 00 32    	bra       Z, 0x2b28 <.L64>
    2b20:	ee 48 90    	mov.b     [w14+14], w1
    2b22:	e0 c6 b3    	mov.b     #0x6e, w0
    2b24:	80 cf 50    	sub.b     w1, w0, [w15]
    2b26:	a2 00 3a    	bra       NZ, 0x2c6c <.L83>

00002b28 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    2b28:	4e b8 97    	mov.w     [w14-8], w0
    2b2a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2b2c:	08 00 3a    	bra       NZ, 0x2b3e <.L67>

00002b2e <.LSM190>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2b2e:	1e 00 78    	mov.w     [w14], w0
    2b30:	10 00 78    	mov.w     [w0], w0
    2b32:	9e 00 78    	mov.w     [w14], w1
    2b34:	91 00 78    	mov.w     [w1], w1
    2b36:	91 00 78    	mov.w     [w1], w1
    2b38:	01 00 a0    	bset.w    w1, #0x0
    2b3a:	01 08 78    	mov.w     w1, [w0]
    2b3c:	03 00 37    	bra       0x2b44 <.L68>

00002b3e <.L67>:
    } else if (stopbits!=1) {
    2b3e:	4e b8 97    	mov.w     [w14-8], w0
    2b40:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2b42:	96 00 3a    	bra       NZ, 0x2c70 <.L84>

00002b44 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    2b44:	2e b8 97    	mov.w     [w14-12], w0
    2b46:	00 00 e0    	cp0.w     w0
    2b48:	04 00 3a    	bra       NZ, 0x2b52 <.L69>

00002b4a <.LSM193>:
        self->putc = __putc_nobuffer;
    2b4a:	1e 00 78    	mov.w     [w14], w0
    2b4c:	e1 28 22    	mov.w     #0x228e, w1
    2b4e:	41 18 98    	mov.w     w1, [w0+56]
    2b50:	36 00 37    	bra       0x2bbe <.L70>

00002b52 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2b52:	1e 00 78    	mov.w     [w14], w0
    2b54:	10 00 90    	mov.w     [w0+2], w0
    2b56:	9e 00 78    	mov.w     [w14], w1
    2b58:	91 00 90    	mov.w     [w1+2], w1
    2b5a:	11 01 78    	mov.w     [w1], w2
    2b5c:	01 00 22    	mov.w     #0x2000, w1
    2b5e:	82 80 70    	ior.w     w1, w2, w1
    2b60:	01 08 78    	mov.w     w1, [w0]

00002b62 <.LSM195>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2b62:	1e 00 78    	mov.w     [w14], w0
    2b64:	ae b8 97    	mov.w     [w14-12], w1
    2b66:	11 10 98    	mov.w     w1, [w0+34]

00002b68 <.LSM196>:
        self->TXbuffer.length = TXbufferlen;
    2b68:	1e 00 78    	mov.w     [w14], w0
    2b6a:	9e b8 97    	mov.w     [w14-14], w1
    2b6c:	21 10 98    	mov.w     w1, [w0+36]

00002b6e <.LSM197>:
        self->TXbuffer.head = 0;
    2b6e:	1e 00 78    	mov.w     [w14], w0
    2b70:	80 00 eb    	clr.w     w1
    2b72:	31 10 98    	mov.w     w1, [w0+38]

00002b74 <.LSM198>:
        self->TXbuffer.tail = 0;
    2b74:	1e 00 78    	mov.w     [w14], w0
    2b76:	80 00 eb    	clr.w     w1
    2b78:	41 10 98    	mov.w     w1, [w0+40]

00002b7a <.LSM199>:
        self->TXbuffer.count = 0;
    2b7a:	1e 00 78    	mov.w     [w14], w0
    2b7c:	80 00 eb    	clr.w     w1
    2b7e:	51 10 98    	mov.w     w1, [w0+42]

00002b80 <.LSM200>:
        self->TXthreshold = TXthreshold;
    2b80:	1e 00 78    	mov.w     [w14], w0
    2b82:	be b8 97    	mov.w     [w14-10], w1
    2b84:	31 18 98    	mov.w     w1, [w0+54]

00002b86 <.LSM201>:
        self->putc = __putc_buffer;
    2b86:	1e 00 78    	mov.w     [w14], w0
    2b88:	01 2d 22    	mov.w     #0x22d0, w1
    2b8a:	41 18 98    	mov.w     w1, [w0+56]

00002b8c <.LSM202>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2b8c:	1e 00 78    	mov.w     [w14], w0
    2b8e:	50 00 90    	mov.w     [w0+10], w0
    2b90:	9e 00 78    	mov.w     [w14], w1
    2b92:	d1 00 90    	mov.w     [w1+10], w1
    2b94:	11 01 78    	mov.w     [w1], w2
    2b96:	9e 00 78    	mov.w     [w14], w1
    2b98:	e1 48 90    	mov.b     [w1+14], w1
    2b9a:	81 80 fb    	ze        w1, w1
    2b9c:	13 00 20    	mov.w     #0x1, w3
    2b9e:	81 18 dd    	sl.w      w3, w1, w1
    2ba0:	81 80 ea    	com.w     w1, w1
    2ba2:	81 00 61    	and.w     w2, w1, w1
    2ba4:	01 08 78    	mov.w     w1, [w0]

00002ba6 <.LSM203>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2ba6:	1e 00 78    	mov.w     [w14], w0
    2ba8:	60 00 90    	mov.w     [w0+12], w0
    2baa:	9e 00 78    	mov.w     [w14], w1
    2bac:	e1 00 90    	mov.w     [w1+12], w1
    2bae:	11 01 78    	mov.w     [w1], w2
    2bb0:	9e 00 78    	mov.w     [w14], w1
    2bb2:	e1 48 90    	mov.b     [w1+14], w1
    2bb4:	81 80 fb    	ze        w1, w1
    2bb6:	13 00 20    	mov.w     #0x1, w3
    2bb8:	81 18 dd    	sl.w      w3, w1, w1
    2bba:	82 80 70    	ior.w     w1, w2, w1
    2bbc:	01 08 78    	mov.w     w1, [w0]

00002bbe <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    2bbe:	0e b8 97    	mov.w     [w14-16], w0
    2bc0:	00 00 e0    	cp0.w     w0
    2bc2:	04 00 3a    	bra       NZ, 0x2bcc <.L71>

00002bc4 <.LSM205>:
        self->getc = __getc_nobuffer;
    2bc4:	1e 00 78    	mov.w     [w14], w0
    2bc6:	21 2b 22    	mov.w     #0x22b2, w1
    2bc8:	51 18 98    	mov.w     w1, [w0+58]
    2bca:	2b 00 37    	bra       0x2c22 <.L72>

00002bcc <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    2bcc:	1e 00 78    	mov.w     [w14], w0
    2bce:	8e b8 97    	mov.w     [w14-16], w1
    2bd0:	61 10 98    	mov.w     w1, [w0+44]

00002bd2 <.LSM207>:
        self->RXbuffer.length = RXbufferlen;
    2bd2:	1e 00 78    	mov.w     [w14], w0
    2bd4:	fe b0 97    	mov.w     [w14-18], w1
    2bd6:	71 10 98    	mov.w     w1, [w0+46]

00002bd8 <.LSM208>:
        self->RXbuffer.head = 0;
    2bd8:	1e 00 78    	mov.w     [w14], w0
    2bda:	80 00 eb    	clr.w     w1
    2bdc:	01 18 98    	mov.w     w1, [w0+48]

00002bde <.LSM209>:
        self->RXbuffer.tail = 0;
    2bde:	1e 00 78    	mov.w     [w14], w0
    2be0:	80 00 eb    	clr.w     w1
    2be2:	11 18 98    	mov.w     w1, [w0+50]

00002be4 <.LSM210>:
        self->RXbuffer.count = 0;
    2be4:	1e 00 78    	mov.w     [w14], w0
    2be6:	80 00 eb    	clr.w     w1
    2be8:	21 18 98    	mov.w     w1, [w0+52]

00002bea <.LSM211>:
        self->getc = __getc_buffer;
    2bea:	1e 00 78    	mov.w     [w14], w0
    2bec:	81 3c 22    	mov.w     #0x23c8, w1
    2bee:	51 18 98    	mov.w     w1, [w0+58]

00002bf0 <.LSM212>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2bf0:	1e 00 78    	mov.w     [w14], w0
    2bf2:	50 00 90    	mov.w     [w0+10], w0
    2bf4:	9e 00 78    	mov.w     [w14], w1
    2bf6:	d1 00 90    	mov.w     [w1+10], w1
    2bf8:	11 01 78    	mov.w     [w1], w2
    2bfa:	9e 00 78    	mov.w     [w14], w1
    2bfc:	f1 48 90    	mov.b     [w1+15], w1
    2bfe:	81 80 fb    	ze        w1, w1
    2c00:	13 00 20    	mov.w     #0x1, w3
    2c02:	81 18 dd    	sl.w      w3, w1, w1
    2c04:	81 80 ea    	com.w     w1, w1
    2c06:	81 00 61    	and.w     w2, w1, w1
    2c08:	01 08 78    	mov.w     w1, [w0]

00002c0a <.LSM213>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    2c0a:	1e 00 78    	mov.w     [w14], w0
    2c0c:	60 00 90    	mov.w     [w0+12], w0
    2c0e:	9e 00 78    	mov.w     [w14], w1
    2c10:	e1 00 90    	mov.w     [w1+12], w1
    2c12:	11 01 78    	mov.w     [w1], w2
    2c14:	9e 00 78    	mov.w     [w14], w1
    2c16:	f1 48 90    	mov.b     [w1+15], w1
    2c18:	81 80 fb    	ze        w1, w1
    2c1a:	13 00 20    	mov.w     #0x1, w3
    2c1c:	81 18 dd    	sl.w      w3, w1, w1
    2c1e:	82 80 70    	ior.w     w1, w2, w1
    2c20:	01 08 78    	mov.w     w1, [w0]

00002c22 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    2c22:	1e 00 78    	mov.w     [w14], w0
    2c24:	10 00 78    	mov.w     [w0], w0
    2c26:	9e 00 78    	mov.w     [w14], w1
    2c28:	91 00 78    	mov.w     [w1], w1
    2c2a:	11 01 78    	mov.w     [w1], w2
    2c2c:	01 00 28    	mov.w     #0x8000, w1
    2c2e:	82 80 70    	ior.w     w1, w2, w1
    2c30:	01 08 78    	mov.w     w1, [w0]

00002c32 <.LSM215>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    2c32:	1e 00 78    	mov.w     [w14], w0
    2c34:	10 00 90    	mov.w     [w0+2], w0
    2c36:	9e 00 78    	mov.w     [w14], w1
    2c38:	91 00 90    	mov.w     [w1+2], w1
    2c3a:	11 01 78    	mov.w     [w1], w2
    2c3c:	01 40 20    	mov.w     #0x400, w1
    2c3e:	82 80 70    	ior.w     w1, w2, w1
    2c40:	01 08 78    	mov.w     w1, [w0]
    2c42:	17 00 37    	bra       0x2c72 <.L40>

00002c44 <.L73>:
    2c44:	00 00 00    	nop       
    2c46:	15 00 37    	bra       0x2c72 <.L40>

00002c48 <.L74>:
    2c48:	00 00 00    	nop       
    2c4a:	13 00 37    	bra       0x2c72 <.L40>

00002c4c <.L75>:
    2c4c:	00 00 00    	nop       
    2c4e:	11 00 37    	bra       0x2c72 <.L40>

00002c50 <.L76>:
    2c50:	00 00 00    	nop       
    2c52:	0f 00 37    	bra       0x2c72 <.L40>

00002c54 <.L77>:
    2c54:	00 00 00    	nop       
    2c56:	0d 00 37    	bra       0x2c72 <.L40>

00002c58 <.L78>:
    2c58:	00 00 00    	nop       
    2c5a:	0b 00 37    	bra       0x2c72 <.L40>

00002c5c <.L79>:
    2c5c:	00 00 00    	nop       
    2c5e:	09 00 37    	bra       0x2c72 <.L40>

00002c60 <.L80>:
    2c60:	00 00 00    	nop       
    2c62:	07 00 37    	bra       0x2c72 <.L40>

00002c64 <.L81>:
    2c64:	00 00 00    	nop       
    2c66:	05 00 37    	bra       0x2c72 <.L40>

00002c68 <.L82>:
    2c68:	00 00 00    	nop       
    2c6a:	03 00 37    	bra       0x2c72 <.L40>

00002c6c <.L83>:
    2c6c:	00 00 00    	nop       
    2c6e:	01 00 37    	bra       0x2c72 <.L40>

00002c70 <.L84>:
    2c70:	00 00 00    	nop       

00002c72 <.L40>:
}
    2c72:	4f 04 78    	mov.w     [--w15], w8
    2c74:	00 80 fa    	ulnk      
    2c76:	00 00 06    	return    

00002c78 <_uart_close>:

void uart_close(_UART *self) {
    2c78:	02 00 fa    	lnk       #0x2
    2c7a:	00 0f 78    	mov.w     w0, [w14]

00002c7c <.LSM225>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2c7c:	1e 00 78    	mov.w     [w14], w0
    2c7e:	10 00 90    	mov.w     [w0+2], w0
    2c80:	9e 00 78    	mov.w     [w14], w1
    2c82:	91 00 90    	mov.w     [w1+2], w1
    2c84:	11 01 78    	mov.w     [w1], w2
    2c86:	f1 bf 2f    	mov.w     #0xfbff, w1
    2c88:	81 00 61    	and.w     w2, w1, w1
    2c8a:	01 08 78    	mov.w     w1, [w0]

00002c8c <.LSM226>:
    *(self->UxMODE) = 0;        // Disable UART module
    2c8c:	1e 00 78    	mov.w     [w14], w0
    2c8e:	10 00 78    	mov.w     [w0], w0
    2c90:	80 00 eb    	clr.w     w1
    2c92:	01 08 78    	mov.w     w1, [w0]

00002c94 <.LSM227>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    2c94:	1e 00 78    	mov.w     [w14], w0
    2c96:	60 00 90    	mov.w     [w0+12], w0
    2c98:	9e 00 78    	mov.w     [w14], w1
    2c9a:	e1 00 90    	mov.w     [w1+12], w1
    2c9c:	11 01 78    	mov.w     [w1], w2
    2c9e:	9e 00 78    	mov.w     [w14], w1
    2ca0:	e1 48 90    	mov.b     [w1+14], w1
    2ca2:	81 80 fb    	ze        w1, w1
    2ca4:	13 00 20    	mov.w     #0x1, w3
    2ca6:	81 18 dd    	sl.w      w3, w1, w1
    2ca8:	81 80 ea    	com.w     w1, w1
    2caa:	81 00 61    	and.w     w2, w1, w1
    2cac:	01 08 78    	mov.w     w1, [w0]

00002cae <.LSM228>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2cae:	1e 00 78    	mov.w     [w14], w0
    2cb0:	60 00 90    	mov.w     [w0+12], w0
    2cb2:	9e 00 78    	mov.w     [w14], w1
    2cb4:	e1 00 90    	mov.w     [w1+12], w1
    2cb6:	11 01 78    	mov.w     [w1], w2
    2cb8:	9e 00 78    	mov.w     [w14], w1
    2cba:	f1 48 90    	mov.b     [w1+15], w1
    2cbc:	81 80 fb    	ze        w1, w1
    2cbe:	13 00 20    	mov.w     #0x1, w3
    2cc0:	81 18 dd    	sl.w      w3, w1, w1
    2cc2:	81 80 ea    	com.w     w1, w1
    2cc4:	81 00 61    	and.w     w2, w1, w1
    2cc6:	01 08 78    	mov.w     w1, [w0]

00002cc8 <.LSM229>:
    self->putc = NULL;
    2cc8:	1e 00 78    	mov.w     [w14], w0
    2cca:	80 00 eb    	clr.w     w1
    2ccc:	41 18 98    	mov.w     w1, [w0+56]

00002cce <.LSM230>:
    self->getc = NULL;
    2cce:	1e 00 78    	mov.w     [w14], w0
    2cd0:	80 00 eb    	clr.w     w1
    2cd2:	51 18 98    	mov.w     w1, [w0+58]

00002cd4 <.LSM231>:
    if (self->TX) {
    2cd4:	1e 00 78    	mov.w     [w14], w0
    2cd6:	50 08 90    	mov.w     [w0+26], w0
    2cd8:	00 00 e0    	cp0.w     w0
    2cda:	2f 00 32    	bra       Z, 0x2d3a <.L86>

00002cdc <.LSM232>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2cdc:	11 3a 80    	mov.w     0x742, w1
    2cde:	f0 0b 20    	mov.w     #0xbf, w0
    2ce0:	00 81 60    	and.w     w1, w0, w2
    2ce2:	60 04 20    	mov.w     #0x46, w0
    2ce4:	71 05 20    	mov.w     #0x57, w1
    2ce6:	23 74 20    	mov.w     #0x742, w3
    2ce8:	80 49 78    	mov.b     w0, [w3]
    2cea:	81 49 78    	mov.b     w1, [w3]
    2cec:	82 49 78    	mov.b     w2, [w3]

00002cee <.LSM233>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2cee:	1e 00 78    	mov.w     [w14], w0
    2cf0:	50 08 90    	mov.w     [w0+26], w0
    2cf2:	70 00 90    	mov.w     [w0+14], w0
    2cf4:	9e 00 78    	mov.w     [w14], w1
    2cf6:	d1 08 90    	mov.w     [w1+26], w1
    2cf8:	f1 00 90    	mov.w     [w1+14], w1
    2cfa:	11 01 78    	mov.w     [w1], w2
    2cfc:	9e 00 78    	mov.w     [w14], w1
    2cfe:	d1 08 90    	mov.w     [w1+26], w1
    2d00:	a1 48 90    	mov.b     [w1+10], w1
    2d02:	81 80 fb    	ze        w1, w1
    2d04:	f3 03 20    	mov.w     #0x3f, w3
    2d06:	81 18 dd    	sl.w      w3, w1, w1
    2d08:	81 80 ea    	com.w     w1, w1
    2d0a:	81 00 61    	and.w     w2, w1, w1
    2d0c:	01 08 78    	mov.w     w1, [w0]

00002d0e <.LSM234>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2d0e:	11 3a 80    	mov.w     0x742, w1
    2d10:	00 04 20    	mov.w     #0x40, w0
    2d12:	01 01 70    	ior.w     w0, w1, w2
    2d14:	60 04 20    	mov.w     #0x46, w0
    2d16:	71 05 20    	mov.w     #0x57, w1
    2d18:	23 74 20    	mov.w     #0x742, w3
    2d1a:	80 49 78    	mov.b     w0, [w3]
    2d1c:	81 49 78    	mov.b     w1, [w3]
    2d1e:	82 49 78    	mov.b     w2, [w3]

00002d20 <.LSM235>:
        self->TX->owner = NULL;
    2d20:	1e 00 78    	mov.w     [w14], w0
    2d22:	50 08 90    	mov.w     [w0+26], w0
    2d24:	80 00 eb    	clr.w     w1
    2d26:	01 08 98    	mov.w     w1, [w0+16]

00002d28 <.LSM236>:
        pin_digitalOut(self->TX);
    2d28:	1e 00 78    	mov.w     [w14], w0
    2d2a:	50 08 90    	mov.w     [w0+26], w0
    2d2c:	07 0a 07    	rcall     0x413c <_pin_digitalOut>

00002d2e <.LSM237>:
        pin_set(self->TX);
    2d2e:	1e 00 78    	mov.w     [w14], w0
    2d30:	50 08 90    	mov.w     [w0+26], w0
    2d32:	61 0a 07    	rcall     0x41f6 <_pin_set>

00002d34 <.LSM238>:
        self->TX = NULL;
    2d34:	1e 00 78    	mov.w     [w14], w0
    2d36:	80 00 eb    	clr.w     w1
    2d38:	51 08 98    	mov.w     w1, [w0+26]

00002d3a <.L86>:
    }
    if (self->RX) {
    2d3a:	1e 00 78    	mov.w     [w14], w0
    2d3c:	60 08 90    	mov.w     [w0+28], w0
    2d3e:	00 00 e0    	cp0.w     w0
    2d40:	28 00 32    	bra       Z, 0x2d92 <.L87>

00002d42 <.LSM240>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2d42:	11 3a 80    	mov.w     0x742, w1
    2d44:	f0 0b 20    	mov.w     #0xbf, w0
    2d46:	00 81 60    	and.w     w1, w0, w2
    2d48:	60 04 20    	mov.w     #0x46, w0
    2d4a:	71 05 20    	mov.w     #0x57, w1
    2d4c:	23 74 20    	mov.w     #0x742, w3
    2d4e:	80 49 78    	mov.b     w0, [w3]
    2d50:	81 49 78    	mov.b     w1, [w3]
    2d52:	82 49 78    	mov.b     w2, [w3]

00002d54 <.LSM241>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2d54:	1e 00 78    	mov.w     [w14], w0
    2d56:	00 08 90    	mov.w     [w0+16], w0
    2d58:	9e 00 78    	mov.w     [w14], w1
    2d5a:	81 08 90    	mov.w     [w1+16], w1
    2d5c:	11 01 78    	mov.w     [w1], w2
    2d5e:	9e 00 78    	mov.w     [w14], w1
    2d60:	c1 50 90    	mov.b     [w1+20], w1
    2d62:	81 80 fb    	ze        w1, w1
    2d64:	f3 03 20    	mov.w     #0x3f, w3
    2d66:	81 18 dd    	sl.w      w3, w1, w1
    2d68:	82 80 70    	ior.w     w1, w2, w1
    2d6a:	01 08 78    	mov.w     w1, [w0]

00002d6c <.LSM242>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2d6c:	11 3a 80    	mov.w     0x742, w1
    2d6e:	00 04 20    	mov.w     #0x40, w0
    2d70:	01 01 70    	ior.w     w0, w1, w2
    2d72:	60 04 20    	mov.w     #0x46, w0
    2d74:	71 05 20    	mov.w     #0x57, w1
    2d76:	23 74 20    	mov.w     #0x742, w3
    2d78:	80 49 78    	mov.b     w0, [w3]
    2d7a:	81 49 78    	mov.b     w1, [w3]
    2d7c:	82 49 78    	mov.b     w2, [w3]

00002d7e <.LSM243>:
        self->RX->owner = NULL;
    2d7e:	1e 00 78    	mov.w     [w14], w0
    2d80:	60 08 90    	mov.w     [w0+28], w0
    2d82:	80 00 eb    	clr.w     w1
    2d84:	01 08 98    	mov.w     w1, [w0+16]

00002d86 <.LSM244>:
        pin_digitalIn(self->RX);
    2d86:	1e 00 78    	mov.w     [w14], w0
    2d88:	60 08 90    	mov.w     [w0+28], w0
    2d8a:	b1 09 07    	rcall     0x40ee <_pin_digitalIn>

00002d8c <.LSM245>:
        self->RX = NULL;
    2d8c:	1e 00 78    	mov.w     [w14], w0
    2d8e:	80 00 eb    	clr.w     w1
    2d90:	61 08 98    	mov.w     w1, [w0+28]

00002d92 <.L87>:
    }
    if (self->RTS) {
    2d92:	1e 00 78    	mov.w     [w14], w0
    2d94:	70 08 90    	mov.w     [w0+30], w0
    2d96:	00 00 e0    	cp0.w     w0
    2d98:	2f 00 32    	bra       Z, 0x2df8 <.L88>

00002d9a <.LSM247>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2d9a:	11 3a 80    	mov.w     0x742, w1
    2d9c:	f0 0b 20    	mov.w     #0xbf, w0
    2d9e:	00 81 60    	and.w     w1, w0, w2
    2da0:	60 04 20    	mov.w     #0x46, w0
    2da2:	71 05 20    	mov.w     #0x57, w1
    2da4:	23 74 20    	mov.w     #0x742, w3
    2da6:	80 49 78    	mov.b     w0, [w3]
    2da8:	81 49 78    	mov.b     w1, [w3]
    2daa:	82 49 78    	mov.b     w2, [w3]

00002dac <.LSM248>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2dac:	1e 00 78    	mov.w     [w14], w0
    2dae:	70 08 90    	mov.w     [w0+30], w0
    2db0:	70 00 90    	mov.w     [w0+14], w0
    2db2:	9e 00 78    	mov.w     [w14], w1
    2db4:	f1 08 90    	mov.w     [w1+30], w1
    2db6:	f1 00 90    	mov.w     [w1+14], w1
    2db8:	11 01 78    	mov.w     [w1], w2
    2dba:	9e 00 78    	mov.w     [w14], w1
    2dbc:	f1 08 90    	mov.w     [w1+30], w1
    2dbe:	a1 48 90    	mov.b     [w1+10], w1
    2dc0:	81 80 fb    	ze        w1, w1
    2dc2:	f3 03 20    	mov.w     #0x3f, w3
    2dc4:	81 18 dd    	sl.w      w3, w1, w1
    2dc6:	81 80 ea    	com.w     w1, w1
    2dc8:	81 00 61    	and.w     w2, w1, w1
    2dca:	01 08 78    	mov.w     w1, [w0]

00002dcc <.LSM249>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2dcc:	11 3a 80    	mov.w     0x742, w1
    2dce:	00 04 20    	mov.w     #0x40, w0
    2dd0:	01 01 70    	ior.w     w0, w1, w2
    2dd2:	60 04 20    	mov.w     #0x46, w0
    2dd4:	71 05 20    	mov.w     #0x57, w1
    2dd6:	23 74 20    	mov.w     #0x742, w3
    2dd8:	80 49 78    	mov.b     w0, [w3]
    2dda:	81 49 78    	mov.b     w1, [w3]
    2ddc:	82 49 78    	mov.b     w2, [w3]

00002dde <.LSM250>:
        self->RTS->owner = NULL;
    2dde:	1e 00 78    	mov.w     [w14], w0
    2de0:	70 08 90    	mov.w     [w0+30], w0
    2de2:	80 00 eb    	clr.w     w1
    2de4:	01 08 98    	mov.w     w1, [w0+16]

00002de6 <.LSM251>:
        pin_digitalOut(self->RTS);
    2de6:	1e 00 78    	mov.w     [w14], w0
    2de8:	70 08 90    	mov.w     [w0+30], w0
    2dea:	a8 09 07    	rcall     0x413c <_pin_digitalOut>

00002dec <.LSM252>:
        pin_set(self->RTS);
    2dec:	1e 00 78    	mov.w     [w14], w0
    2dee:	70 08 90    	mov.w     [w0+30], w0
    2df0:	02 0a 07    	rcall     0x41f6 <_pin_set>

00002df2 <.LSM253>:
        self->RTS = NULL;
    2df2:	1e 00 78    	mov.w     [w14], w0
    2df4:	80 00 eb    	clr.w     w1
    2df6:	71 08 98    	mov.w     w1, [w0+30]

00002df8 <.L88>:
    }
    if (self->CTS) {
    2df8:	1e 00 78    	mov.w     [w14], w0
    2dfa:	00 10 90    	mov.w     [w0+32], w0
    2dfc:	00 00 e0    	cp0.w     w0
    2dfe:	28 00 32    	bra       Z, 0x2e50 <.L85>

00002e00 <.LSM255>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2e00:	11 3a 80    	mov.w     0x742, w1
    2e02:	f0 0b 20    	mov.w     #0xbf, w0
    2e04:	00 81 60    	and.w     w1, w0, w2
    2e06:	60 04 20    	mov.w     #0x46, w0
    2e08:	71 05 20    	mov.w     #0x57, w1
    2e0a:	23 74 20    	mov.w     #0x742, w3
    2e0c:	80 49 78    	mov.b     w0, [w3]
    2e0e:	81 49 78    	mov.b     w1, [w3]
    2e10:	82 49 78    	mov.b     w2, [w3]

00002e12 <.LSM256>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2e12:	1e 00 78    	mov.w     [w14], w0
    2e14:	10 08 90    	mov.w     [w0+18], w0
    2e16:	9e 00 78    	mov.w     [w14], w1
    2e18:	91 08 90    	mov.w     [w1+18], w1
    2e1a:	11 01 78    	mov.w     [w1], w2
    2e1c:	9e 00 78    	mov.w     [w14], w1
    2e1e:	d1 50 90    	mov.b     [w1+21], w1
    2e20:	81 80 fb    	ze        w1, w1
    2e22:	f3 03 20    	mov.w     #0x3f, w3
    2e24:	81 18 dd    	sl.w      w3, w1, w1
    2e26:	82 80 70    	ior.w     w1, w2, w1
    2e28:	01 08 78    	mov.w     w1, [w0]

00002e2a <.LSM257>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2e2a:	11 3a 80    	mov.w     0x742, w1
    2e2c:	00 04 20    	mov.w     #0x40, w0
    2e2e:	01 01 70    	ior.w     w0, w1, w2
    2e30:	60 04 20    	mov.w     #0x46, w0
    2e32:	71 05 20    	mov.w     #0x57, w1
    2e34:	23 74 20    	mov.w     #0x742, w3
    2e36:	80 49 78    	mov.b     w0, [w3]
    2e38:	81 49 78    	mov.b     w1, [w3]
    2e3a:	82 49 78    	mov.b     w2, [w3]

00002e3c <.LSM258>:
        self->CTS->owner = NULL;
    2e3c:	1e 00 78    	mov.w     [w14], w0
    2e3e:	00 10 90    	mov.w     [w0+32], w0
    2e40:	80 00 eb    	clr.w     w1
    2e42:	01 08 98    	mov.w     w1, [w0+16]

00002e44 <.LSM259>:
        pin_digitalIn(self->CTS);
    2e44:	1e 00 78    	mov.w     [w14], w0
    2e46:	00 10 90    	mov.w     [w0+32], w0
    2e48:	52 09 07    	rcall     0x40ee <_pin_digitalIn>

00002e4a <.LSM260>:
        self->CTS = NULL;
    2e4a:	1e 00 78    	mov.w     [w14], w0
    2e4c:	80 00 eb    	clr.w     w1
    2e4e:	01 10 98    	mov.w     w1, [w0+32]

00002e50 <.L85>:
    }
}
    2e50:	00 80 fa    	ulnk      
    2e52:	00 00 06    	return    

00002e54 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2e54:	04 00 fa    	lnk       #0x4
    2e56:	00 0f 78    	mov.w     w0, [w14]
    2e58:	21 47 98    	mov.b     w1, [w14+2]

00002e5a <.LSM263>:
    if (self->putc)
    2e5a:	1e 00 78    	mov.w     [w14], w0
    2e5c:	40 18 90    	mov.w     [w0+56], w0
    2e5e:	00 00 e0    	cp0.w     w0
    2e60:	05 00 32    	bra       Z, 0x2e6c <.L90>

00002e62 <.LSM264>:
        self->putc(self, ch);
    2e62:	1e 00 78    	mov.w     [w14], w0
    2e64:	40 19 90    	mov.w     [w0+56], w2
    2e66:	ae 40 90    	mov.b     [w14+2], w1
    2e68:	1e 00 78    	mov.w     [w14], w0
    2e6a:	02 00 01    	call      w2

00002e6c <.L90>:
}
    2e6c:	00 80 fa    	ulnk      
    2e6e:	00 00 06    	return    

00002e70 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2e70:	02 00 fa    	lnk       #0x2
    2e72:	00 0f 78    	mov.w     w0, [w14]

00002e74 <.LSM267>:
    if (self->getc)
    2e74:	1e 00 78    	mov.w     [w14], w0
    2e76:	50 18 90    	mov.w     [w0+58], w0
    2e78:	00 00 e0    	cp0.w     w0
    2e7a:	05 00 32    	bra       Z, 0x2e86 <.L93>

00002e7c <.LSM268>:
        return self->getc(self);
    2e7c:	1e 00 78    	mov.w     [w14], w0
    2e7e:	d0 18 90    	mov.w     [w0+58], w1
    2e80:	1e 00 78    	mov.w     [w14], w0
    2e82:	01 00 01    	call      w1
    2e84:	01 00 37    	bra       0x2e88 <.L94>

00002e86 <.L93>:
    else
        return 0xFF;
    2e86:	00 c0 eb    	setm.b    w0

00002e88 <.L94>:
}
    2e88:	00 80 fa    	ulnk      
    2e8a:	00 00 06    	return    

00002e8c <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2e8c:	02 00 fa    	lnk       #0x2
    2e8e:	00 0f 78    	mov.w     w0, [w14]

00002e90 <.LSM272>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2e90:	1e 00 78    	mov.w     [w14], w0
    2e92:	10 00 90    	mov.w     [w0+2], w0
    2e94:	90 00 78    	mov.w     [w0], w1
    2e96:	00 40 20    	mov.w     #0x400, w0
    2e98:	00 80 60    	and.w     w1, w0, w0
    2e9a:	00 00 e0    	cp0.w     w0
    2e9c:	08 00 3a    	bra       NZ, 0x2eae <.L95>

00002e9e <.LSM273>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2e9e:	1e 00 78    	mov.w     [w14], w0
    2ea0:	10 00 90    	mov.w     [w0+2], w0
    2ea2:	9e 00 78    	mov.w     [w14], w1
    2ea4:	91 00 90    	mov.w     [w1+2], w1
    2ea6:	11 01 78    	mov.w     [w1], w2
    2ea8:	01 40 20    	mov.w     #0x400, w1
    2eaa:	82 80 70    	ior.w     w1, w2, w1
    2eac:	01 08 78    	mov.w     w1, [w0]

00002eae <.L95>:
}
    2eae:	00 80 fa    	ulnk      
    2eb0:	00 00 06    	return    

00002eb2 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2eb2:	04 00 fa    	lnk       #0x4
    2eb4:	00 0f 78    	mov.w     w0, [w14]
    2eb6:	11 07 98    	mov.w     w1, [w14+2]

00002eb8 <.LSM276>:
    while (*str)
    2eb8:	08 00 37    	bra       0x2eca <.L98>

00002eba <.L99>:
        uart_putc(self, *str++);
    2eba:	1e 00 90    	mov.w     [w14+2], w0
    2ebc:	10 40 78    	mov.b     [w0], w0
    2ebe:	9e 00 90    	mov.w     [w14+2], w1
    2ec0:	81 00 e8    	inc.w     w1, w1
    2ec2:	11 07 98    	mov.w     w1, [w14+2]
    2ec4:	80 40 78    	mov.b     w0, w1
    2ec6:	1e 00 78    	mov.w     [w14], w0
    2ec8:	c5 ff 07    	rcall     0x2e54 <_uart_putc>

00002eca <.L98>:
    2eca:	1e 00 90    	mov.w     [w14+2], w0
    2ecc:	10 40 78    	mov.b     [w0], w0
    2ece:	00 04 e0    	cp0.b     w0
    2ed0:	f4 ff 3a    	bra       NZ, 0x2eba <.L99>

00002ed2 <.LSM279>:
    uart_flushTxBuffer(self);
    2ed2:	1e 00 78    	mov.w     [w14], w0
    2ed4:	db ff 07    	rcall     0x2e8c <_uart_flushTxBuffer>

00002ed6 <.LSM280>:
}
    2ed6:	00 80 fa    	ulnk      
    2ed8:	00 00 06    	return    

00002eda <_uart_gets_term>:

void uart_gets_term(_UART *self, uint8_t *str, uint16_t len) {
    2eda:	0a 00 fa    	lnk       #0xa
    2edc:	20 07 98    	mov.w     w0, [w14+4]
    2ede:	31 07 98    	mov.w     w1, [w14+6]
    2ee0:	42 07 98    	mov.w     w2, [w14+8]

00002ee2 <.LSM282>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2ee2:	4e 00 90    	mov.w     [w14+8], w0
    2ee4:	00 00 e0    	cp0.w     w0
    2ee6:	87 00 32    	bra       Z, 0x2ff6 <.L113>

00002ee8 <.LSM283>:
        return;

    if (len==1) {
    2ee8:	4e 00 90    	mov.w     [w14+8], w0
    2eea:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2eec:	04 00 3a    	bra       NZ, 0x2ef6 <.L103>

00002eee <.LSM284>:
        *str = '\0';
    2eee:	3e 00 90    	mov.w     [w14+6], w0
    2ef0:	80 40 eb    	clr.b     w1
    2ef2:	01 48 78    	mov.b     w1, [w0]

00002ef4 <.LSM285>:
        return;
    2ef4:	81 00 37    	bra       0x2ff8 <.L100>

00002ef6 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2ef6:	b1 c1 b3    	mov.b     #0x1b, w1
    2ef8:	2e 00 90    	mov.w     [w14+4], w0
    2efa:	ac ff 07    	rcall     0x2e54 <_uart_putc>

00002efc <.LSM287>:
    uart_putc(self, '7');
    2efc:	71 c3 b3    	mov.b     #0x37, w1
    2efe:	2e 00 90    	mov.w     [w14+4], w0
    2f00:	a9 ff 07    	rcall     0x2e54 <_uart_putc>

00002f02 <.LSM288>:
    uart_flushTxBuffer(self);
    2f02:	2e 00 90    	mov.w     [w14+4], w0
    2f04:	c3 ff 07    	rcall     0x2e8c <_uart_flushTxBuffer>

00002f06 <.LSM289>:
    start = str;
    2f06:	be 00 90    	mov.w     [w14+6], w1
    2f08:	11 07 98    	mov.w     w1, [w14+2]

00002f0a <.LSM290>:
    left = len;
    2f0a:	ce 00 90    	mov.w     [w14+8], w1
    2f0c:	01 0f 78    	mov.w     w1, [w14]
    2f0e:	03 00 37    	bra       0x2f16 <.L112>

00002f10 <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2f10:	00 00 00    	nop       
    2f12:	01 00 37    	bra       0x2f16 <.L112>

00002f14 <.L115>:
    2f14:	00 00 00    	nop       

00002f16 <.L112>:
    2f16:	2e 00 90    	mov.w     [w14+4], w0
    2f18:	ab ff 07    	rcall     0x2e70 <_uart_getc>
    2f1a:	be 00 90    	mov.w     [w14+6], w1
    2f1c:	80 48 78    	mov.b     w0, [w1]

00002f1e <.LSM293>:
    2f1e:	3e 00 90    	mov.w     [w14+6], w0
    2f20:	10 40 78    	mov.b     [w0], w0
    2f22:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2f24:	0c 00 3a    	bra       NZ, 0x2f3e <.L104>

00002f26 <.LSM294>:

    *str = '\0';                            // Terminarte the string with null
    2f26:	3e 00 90    	mov.w     [w14+6], w0
    2f28:	80 40 eb    	clr.b     w1
    2f2a:	01 48 78    	mov.b     w1, [w0]

00002f2c <.LSM295>:
    uart_putc(self, '\n');                  // Send newline and
    2f2c:	a1 c0 b3    	mov.b     #0xa, w1
    2f2e:	2e 00 90    	mov.w     [w14+4], w0
    2f30:	91 ff 07    	rcall     0x2e54 <_uart_putc>

00002f32 <.LSM296>:
    uart_putc(self, '\r');                  //   carriage return
    2f32:	d1 c0 b3    	mov.b     #0xd, w1
    2f34:	2e 00 90    	mov.w     [w14+4], w0
    2f36:	8e ff 07    	rcall     0x2e54 <_uart_putc>

00002f38 <.LSM297>:
    uart_flushTxBuffer(self);
    2f38:	2e 00 90    	mov.w     [w14+4], w0
    2f3a:	a8 ff 07    	rcall     0x2e8c <_uart_flushTxBuffer>
    2f3c:	5d 00 37    	bra       0x2ff8 <.L100>

00002f3e <.L104>:
    2f3e:	3e 00 90    	mov.w     [w14+6], w0
    2f40:	10 40 78    	mov.b     [w0], w0
    2f42:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2f44:	16 00 3a    	bra       NZ, 0x2f72 <.L105>

00002f46 <.LSM299>:
    2f46:	b1 c1 b3    	mov.b     #0x1b, w1
    2f48:	2e 00 90    	mov.w     [w14+4], w0
    2f4a:	84 ff 07    	rcall     0x2e54 <_uart_putc>

00002f4c <.LSM300>:
    2f4c:	81 c3 b3    	mov.b     #0x38, w1
    2f4e:	2e 00 90    	mov.w     [w14+4], w0
    2f50:	81 ff 07    	rcall     0x2e54 <_uart_putc>

00002f52 <.LSM301>:
    2f52:	b1 c1 b3    	mov.b     #0x1b, w1
    2f54:	2e 00 90    	mov.w     [w14+4], w0
    2f56:	7e ff 07    	rcall     0x2e54 <_uart_putc>

00002f58 <.LSM302>:
    2f58:	b1 c5 b3    	mov.b     #0x5b, w1
    2f5a:	2e 00 90    	mov.w     [w14+4], w0
    2f5c:	7b ff 07    	rcall     0x2e54 <_uart_putc>

00002f5e <.LSM303>:
    2f5e:	b1 c4 b3    	mov.b     #0x4b, w1
    2f60:	2e 00 90    	mov.w     [w14+4], w0
    2f62:	78 ff 07    	rcall     0x2e54 <_uart_putc>

00002f64 <.LSM304>:
    2f64:	2e 00 90    	mov.w     [w14+4], w0
    2f66:	92 ff 07    	rcall     0x2e8c <_uart_flushTxBuffer>

00002f68 <.LSM305>:
    2f68:	9e 00 90    	mov.w     [w14+2], w1
    2f6a:	31 07 98    	mov.w     w1, [w14+6]

00002f6c <.LSM306>:
    2f6c:	ce 00 90    	mov.w     [w14+8], w1
    2f6e:	01 0f 78    	mov.w     w1, [w14]

00002f70 <.LSM307>:
    2f70:	41 00 37    	bra       0x2ff4 <.L106>

00002f72 <.L105>:
    2f72:	3e 00 90    	mov.w     [w14+6], w0
    2f74:	10 40 78    	mov.b     [w0], w0
    2f76:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2f78:	05 00 32    	bra       Z, 0x2f84 <.L107>

00002f7a <.LSM309>:
    2f7a:	3e 00 90    	mov.w     [w14+6], w0
    2f7c:	90 40 78    	mov.b     [w0], w1

00002f7e <.LSM310>:
    2f7e:	f0 c7 b3    	mov.b     #0x7f, w0
    2f80:	80 cf 50    	sub.b     w1, w0, [w15]
    2f82:	1a 00 3a    	bra       NZ, 0x2fb8 <.L108>

00002f84 <.L107>:
    2f84:	be 00 90    	mov.w     [w14+6], w1
    2f86:	1e 00 90    	mov.w     [w14+2], w0
    2f88:	80 8f 50    	sub.w     w1, w0, [w15]
    2f8a:	10 00 36    	bra       LEU, 0x2fac <.L109>

00002f8c <.LSM312>:
    2f8c:	81 c0 b3    	mov.b     #0x8, w1
    2f8e:	2e 00 90    	mov.w     [w14+4], w0
    2f90:	61 ff 07    	rcall     0x2e54 <_uart_putc>

00002f92 <.LSM313>:
    2f92:	01 c2 b3    	mov.b     #0x20, w1
    2f94:	2e 00 90    	mov.w     [w14+4], w0
    2f96:	5e ff 07    	rcall     0x2e54 <_uart_putc>

00002f98 <.LSM314>:
    2f98:	81 c0 b3    	mov.b     #0x8, w1
    2f9a:	2e 00 90    	mov.w     [w14+4], w0
    2f9c:	5b ff 07    	rcall     0x2e54 <_uart_putc>

00002f9e <.LSM315>:
    2f9e:	2e 00 90    	mov.w     [w14+4], w0
    2fa0:	75 ff 07    	rcall     0x2e8c <_uart_flushTxBuffer>

00002fa2 <.LSM316>:
    2fa2:	3e 00 90    	mov.w     [w14+6], w0
    2fa4:	00 00 e9    	dec.w     w0, w0
    2fa6:	30 07 98    	mov.w     w0, [w14+6]

00002fa8 <.LSM317>:
    2fa8:	1e 0f e8    	inc.w     [w14], [w14]
    2faa:	05 00 37    	bra       0x2fb6 <.L110>

00002fac <.L109>:
    2fac:	71 c0 b3    	mov.b     #0x7, w1
    2fae:	2e 00 90    	mov.w     [w14+4], w0
    2fb0:	51 ff 07    	rcall     0x2e54 <_uart_putc>

00002fb2 <.LSM319>:
    2fb2:	2e 00 90    	mov.w     [w14+4], w0
    2fb4:	6b ff 07    	rcall     0x2e8c <_uart_flushTxBuffer>

00002fb6 <.L110>:
    2fb6:	1e 00 37    	bra       0x2ff4 <.L106>

00002fb8 <.L108>:
    2fb8:	1e 00 78    	mov.w     [w14], w0
    2fba:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2fbc:	06 00 3a    	bra       NZ, 0x2fca <.L111>

00002fbe <.LSM322>:
    2fbe:	71 c0 b3    	mov.b     #0x7, w1
    2fc0:	2e 00 90    	mov.w     [w14+4], w0
    2fc2:	48 ff 07    	rcall     0x2e54 <_uart_putc>

00002fc4 <.LSM323>:
    2fc4:	2e 00 90    	mov.w     [w14+4], w0
    2fc6:	62 ff 07    	rcall     0x2e8c <_uart_flushTxBuffer>

00002fc8 <.LSM324>:
    2fc8:	15 00 37    	bra       0x2ff4 <.L106>

00002fca <.L111>:
    2fca:	3e 00 90    	mov.w     [w14+6], w0
    2fcc:	10 40 78    	mov.b     [w0], w0
    2fce:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2fd0:	9f ff 36    	bra       LEU, 0x2f10 <.L114>
    2fd2:	3e 00 90    	mov.w     [w14+6], w0
    2fd4:	90 40 78    	mov.b     [w0], w1
    2fd6:	e0 c7 b3    	mov.b     #0x7e, w0
    2fd8:	80 cf 50    	sub.b     w1, w0, [w15]
    2fda:	9c ff 3e    	bra       GTU, 0x2f14 <.L115>

00002fdc <.LSM326>:
    2fdc:	3e 00 90    	mov.w     [w14+6], w0
    2fde:	10 40 78    	mov.b     [w0], w0
    2fe0:	80 40 78    	mov.b     w0, w1
    2fe2:	2e 00 90    	mov.w     [w14+4], w0
    2fe4:	37 ff 07    	rcall     0x2e54 <_uart_putc>

00002fe6 <.LSM327>:
    2fe6:	2e 00 90    	mov.w     [w14+4], w0
    2fe8:	51 ff 07    	rcall     0x2e8c <_uart_flushTxBuffer>

00002fea <.LSM328>:
    2fea:	3e 00 90    	mov.w     [w14+6], w0
    2fec:	00 00 e8    	inc.w     w0, w0
    2fee:	30 07 98    	mov.w     w0, [w14+6]

00002ff0 <.LSM329>:
    2ff0:	1e 0f e9    	dec.w     [w14], [w14]

00002ff2 <.LSM330>:
    2ff2:	91 ff 37    	bra       0x2f16 <.L112>

00002ff4 <.L106>:
    2ff4:	90 ff 37    	bra       0x2f16 <.L112>

00002ff6 <.L113>:
    2ff6:	00 00 00    	nop       

00002ff8 <.L100>:
}
    2ff8:	00 80 fa    	ulnk      
    2ffa:	00 00 06    	return    

00002ffc <_uart_gets>:


void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2ffc:	0c 00 fa    	lnk       #0xc
    2ffe:	30 07 98    	mov.w     w0, [w14+6]
    3000:	41 07 98    	mov.w     w1, [w14+8]
    3002:	52 07 98    	mov.w     w2, [w14+10]

00003004 <.LSM334>:
    uint8_t *start;
    uint16_t left;
    uint8_t char_count = 0;
    3004:	00 40 eb    	clr.b     w0
    3006:	00 4f 78    	mov.b     w0, [w14]

00003008 <.LSM335>:

    if (len==0)
    3008:	5e 00 90    	mov.w     [w14+10], w0
    300a:	00 00 e0    	cp0.w     w0
    300c:	1a 00 32    	bra       Z, 0x3042 <.L123>

0000300e <.LSM336>:
        return;

    if (len==1) {
    300e:	5e 00 90    	mov.w     [w14+10], w0
    3010:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3012:	04 00 3a    	bra       NZ, 0x301c <.L119>

00003014 <.LSM337>:
        *str = '\0';
    3014:	4e 00 90    	mov.w     [w14+8], w0
    3016:	80 40 eb    	clr.b     w1
    3018:	01 48 78    	mov.b     w1, [w0]

0000301a <.LSM338>:
        return;
    301a:	16 00 37    	bra       0x3048 <.L116>

0000301c <.L119>:
    }

    // uart_flushTxBuffer(self);
    start = str;
    301c:	ce 00 90    	mov.w     [w14+8], w1
    301e:	11 07 98    	mov.w     w1, [w14+2]

00003020 <.LSM340>:
    left = len;
    3020:	de 00 90    	mov.w     [w14+10], w1
    3022:	21 07 98    	mov.w     w1, [w14+4]
    3024:	01 00 37    	bra       0x3028 <.L122>

00003026 <.L125>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        char_count ++;
        if (*str=='\r') {                     // If character is return,
            break;
        }
        if (char_count >= UART_MSG_MAX_LEN) { // Terminate if max length reached.
            break;
        }  
    }
    3026:	00 00 00    	nop       

00003028 <.L122>:
    3028:	3e 00 90    	mov.w     [w14+6], w0
    302a:	22 ff 07    	rcall     0x2e70 <_uart_getc>
    302c:	ce 00 90    	mov.w     [w14+8], w1
    302e:	80 48 78    	mov.b     w0, [w1]

00003030 <.LSM343>:
    3030:	1e 4f e8    	inc.b     [w14], [w14]

00003032 <.LSM344>:
    3032:	4e 00 90    	mov.w     [w14+8], w0
    3034:	10 40 78    	mov.b     [w0], w0
    3036:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3038:	06 00 32    	bra       Z, 0x3046 <.L124>

0000303a <.LSM345>:
    303a:	1e 40 78    	mov.b     [w14], w0
    303c:	00 04 e0    	cp0.b     w0
    303e:	f3 ff 3d    	bra       GE, 0x3026 <.L125>

00003040 <.LSM346>:
    3040:	03 00 37    	bra       0x3048 <.L116>

00003042 <.L123>:
    3042:	00 00 00    	nop       
    3044:	01 00 37    	bra       0x3048 <.L116>

00003046 <.L124>:
    3046:	00 00 00    	nop       

00003048 <.L116>:
}         
    3048:	00 80 fa    	ulnk      
    304a:	00 00 06    	return    

0000304c <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    304c:	04 00 fa    	lnk       #0x4

0000304e <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    304e:	94 24 a8    	bset.b    0x494, #0x1

00003050 <.LSM2>:
    U1ADDR = 0;
    3050:	96 24 ef    	clr.w     0x496

00003052 <.LSM3>:
    U1EIR = 0xFF;
    3052:	f0 0f 20    	mov.w     #0xff, w0
    3054:	70 24 88    	mov.w     w0, 0x48e

00003056 <.LSM4>:
    U1CONbits.PPBRST = 0;
    3056:	94 24 a9    	bclr.b    0x494, #0x1

00003058 <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    3058:	a0 4a 20    	mov.w     #0x4aa, w0
    305a:	10 07 98    	mov.w     w0, [w14+2]

0000305c <.LSM6>:
    for (n = 0; n<16; n++)
    305c:	00 40 eb    	clr.b     w0
    305e:	00 4f 78    	mov.b     w0, [w14]
    3060:	07 00 37    	bra       0x3070 <.L2>

00003062 <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    3062:	1e 80 fb    	ze        [w14], w0
    3064:	00 00 40    	add.w     w0, w0, w0
    3066:	9e 00 90    	mov.w     [w14+2], w1
    3068:	00 80 40    	add.w     w1, w0, w0
    306a:	80 00 eb    	clr.w     w1
    306c:	01 08 78    	mov.w     w1, [w0]

0000306e <.LSM8>:
    306e:	1e 4f e8    	inc.b     [w14], [w14]

00003070 <.L2>:
    3070:	1e 40 78    	mov.b     [w14], w0
    3072:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    3074:	f6 ff 36    	bra       LEU, 0x3062 <.L3>

00003076 <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    3076:	d0 00 20    	mov.w     #0xd, w0
    3078:	50 25 88    	mov.w     w0, 0x4aa

0000307a <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    307a:	00 40 21    	mov.w     #0x1400, w0
    307c:	01 c4 b3    	mov.b     #0x40, w1
    307e:	01 48 78    	mov.b     w1, [w0]

00003080 <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    3080:	00 48 21    	mov.w     #0x1480, w0
    3082:	10 a0 88    	mov.w     w0, 0x1402

00003084 <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    3084:	10 40 21    	mov.w     #0x1401, w0
    3086:	81 c8 b3    	mov.b     #0x88, w1
    3088:	01 48 78    	mov.b     w1, [w0]

0000308a <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    308a:	00 4c 21    	mov.w     #0x14c0, w0
    308c:	30 a0 88    	mov.w     w0, 0x1406

0000308e <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    308e:	50 40 21    	mov.w     #0x1405, w0
    3090:	81 c0 b3    	mov.b     #0x8, w1
    3092:	01 48 78    	mov.b     w1, [w0]

00003094 <.LSM15>:
    U1CNFG1 = 0x00;
    3094:	a6 24 ef    	clr.w     0x4a6

00003096 <.LSM16>:
    U1CNFG2 = 0x00;
    3096:	a8 24 ef    	clr.w     0x4a8

00003098 <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    3098:	00 40 21    	mov.w     #0x1400, w0
    309a:	48 00 de    	lsr.w     w0, #0x8, w0
    309c:	c0 24 88    	mov.w     w0, 0x498

0000309e <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    309e:	86 44 a8    	bset.b    0x486, #0x2

000030a0 <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    30a0:	86 e4 a8    	bset.b    0x486, #0x7

000030a2 <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    30a2:	88 04 a8    	bset.b    0x488, #0x0

000030a4 <.LSM21>:
    U1CONbits.PKTDIS = 0;
    30a4:	94 a4 a9    	bclr.b    0x494, #0x5

000030a6 <.LSM22>:
    USB_curr_config = 0x00;
    30a6:	3d 68 ef    	clr.b     0x83d

000030a8 <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    30a8:	40 68 ef    	clr.b     0x840

000030aa <.LSM24>:
    USB_device_status = 0x01;
    30aa:	10 c0 b3    	mov.b     #0x1, w0
    30ac:	3e e8 b7    	mov.b     WREG, 0x83e

000030ae <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    30ae:	00 50 21    	mov.w     #0x1500, w0
    30b0:	80 c0 eb    	setm.b    w1
    30b2:	01 48 78    	mov.b     w1, [w0]

000030b4 <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    30b4:	10 50 21    	mov.w     #0x1501, w0
    30b6:	80 c0 eb    	setm.b    w1
    30b8:	01 48 78    	mov.b     w1, [w0]

000030ba <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    30ba:	00 00 00    	nop       

000030bc <.L4>:
    30bc:	a1 24 80    	mov.w     0x494, w1
    30be:	00 04 20    	mov.w     #0x40, w0
    30c0:	00 80 60    	and.w     w1, w0, w0
    30c2:	00 00 e0    	cp0.w     w0
    30c4:	fb ff 3a    	bra       NZ, 0x30bc <.L4>

000030c6 <.LSM28>:
}
    30c6:	00 80 fa    	ulnk      
    30c8:	00 00 06    	return    

000030ca <_ServiceUSB>:

void ServiceUSB(void) {
    30ca:	06 00 fa    	lnk       #0x6

000030cc <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    30cc:	50 24 80    	mov.w     0x48a, w0
    30ce:	62 00 60    	and.w     w0, #0x2, w0
    30d0:	00 00 e0    	cp0.w     w0
    30d2:	05 00 32    	bra       Z, 0x30de <.L6>

000030d4 <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    30d4:	f0 0f 20    	mov.w     #0xff, w0
    30d6:	70 24 88    	mov.w     w0, 0x48e

000030d8 <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    30d8:	20 00 20    	mov.w     #0x2, w0
    30da:	50 24 88    	mov.w     w0, 0x48a
    30dc:	90 00 37    	bra       0x31fe <.L5>

000030de <.L6>:
    } else if (U1IRbits.SOFIF) {
    30de:	50 24 80    	mov.w     0x48a, w0
    30e0:	64 00 60    	and.w     w0, #0x4, w0
    30e2:	00 00 e0    	cp0.w     w0
    30e4:	03 00 32    	bra       Z, 0x30ec <.L8>

000030e6 <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    30e6:	40 00 20    	mov.w     #0x4, w0
    30e8:	50 24 88    	mov.w     w0, 0x48a
    30ea:	89 00 37    	bra       0x31fe <.L5>

000030ec <.L8>:
    } else if (U1IRbits.IDLEIF) {
    30ec:	50 24 80    	mov.w     0x48a, w0
    30ee:	70 00 60    	and.w     w0, #0x10, w0
    30f0:	00 00 e0    	cp0.w     w0
    30f2:	03 00 32    	bra       Z, 0x30fa <.L9>

000030f4 <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    30f4:	00 01 20    	mov.w     #0x10, w0
    30f6:	50 24 88    	mov.w     w0, 0x48a
    30f8:	82 00 37    	bra       0x31fe <.L5>

000030fa <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    30fa:	51 24 80    	mov.w     0x48a, w1
    30fc:	00 02 20    	mov.w     #0x20, w0
    30fe:	00 80 60    	and.w     w1, w0, w0
    3100:	00 00 e0    	cp0.w     w0
    3102:	03 00 32    	bra       Z, 0x310a <.L10>

00003104 <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    3104:	00 02 20    	mov.w     #0x20, w0
    3106:	50 24 88    	mov.w     w0, 0x48a
    3108:	7a 00 37    	bra       0x31fe <.L5>

0000310a <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    310a:	51 24 80    	mov.w     0x48a, w1
    310c:	00 08 20    	mov.w     #0x80, w0
    310e:	00 80 60    	and.w     w1, w0, w0
    3110:	00 00 e0    	cp0.w     w0
    3112:	03 00 32    	bra       Z, 0x311a <.L11>

00003114 <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    3114:	00 08 20    	mov.w     #0x80, w0
    3116:	50 24 88    	mov.w     w0, 0x48a
    3118:	72 00 37    	bra       0x31fe <.L5>

0000311a <.L11>:
    } else if (U1IRbits.URSTIF) {
    311a:	50 24 80    	mov.w     0x48a, w0
    311c:	61 00 60    	and.w     w0, #0x1, w0
    311e:	00 00 e0    	cp0.w     w0
    3120:	34 00 32    	bra       Z, 0x318a <.L12>

00003122 <.LSM42>:
        USB_curr_config = 0x00;
    3122:	3d 68 ef    	clr.b     0x83d

00003124 <.LSM43>:
        while (U1IRbits.TRNIF) {
    3124:	08 00 37    	bra       0x3136 <.L13>

00003126 <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    3126:	80 00 20    	mov.w     #0x8, w0
    3128:	50 24 88    	mov.w     w0, 0x48a

0000312a <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    312a:	00 00 00    	nop       

0000312c <.LSM46>:
            __builtin_nop();
    312c:	00 00 00    	nop       

0000312e <.LSM47>:
            __builtin_nop();
    312e:	00 00 00    	nop       

00003130 <.LSM48>:
            __builtin_nop();
    3130:	00 00 00    	nop       

00003132 <.LSM49>:
            __builtin_nop();
    3132:	00 00 00    	nop       

00003134 <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    3134:	00 00 00    	nop       

00003136 <.L13>:
    3136:	50 24 80    	mov.w     0x48a, w0
    3138:	68 00 60    	and.w     w0, #0x8, w0
    313a:	00 00 e0    	cp0.w     w0
    313c:	f4 ff 3a    	bra       NZ, 0x3126 <.L14>

0000313e <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    313e:	a0 4a 20    	mov.w     #0x4aa, w0
    3140:	10 07 98    	mov.w     w0, [w14+2]

00003142 <.LSM53>:
        for (n = 0; n<16; n++)
    3142:	00 40 eb    	clr.b     w0
    3144:	00 4f 78    	mov.b     w0, [w14]
    3146:	07 00 37    	bra       0x3156 <.L15>

00003148 <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    3148:	1e 80 fb    	ze        [w14], w0
    314a:	00 00 40    	add.w     w0, w0, w0
    314c:	9e 00 90    	mov.w     [w14+2], w1
    314e:	00 80 40    	add.w     w1, w0, w0
    3150:	80 00 eb    	clr.w     w1
    3152:	01 08 78    	mov.w     w1, [w0]

00003154 <.LSM55>:
    3154:	1e 4f e8    	inc.b     [w14], [w14]

00003156 <.L15>:
    3156:	1e 40 78    	mov.b     [w14], w0
    3158:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    315a:	f6 ff 36    	bra       LEU, 0x3148 <.L16>

0000315c <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    315c:	00 40 21    	mov.w     #0x1400, w0
    315e:	01 c4 b3    	mov.b     #0x40, w1
    3160:	01 48 78    	mov.b     w1, [w0]

00003162 <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    3162:	00 48 21    	mov.w     #0x1480, w0
    3164:	10 a0 88    	mov.w     w0, 0x1402

00003166 <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    3166:	10 40 21    	mov.w     #0x1401, w0
    3168:	81 c8 b3    	mov.b     #0x88, w1
    316a:	01 48 78    	mov.b     w1, [w0]

0000316c <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    316c:	00 4c 21    	mov.w     #0x14c0, w0
    316e:	30 a0 88    	mov.w     w0, 0x1406

00003170 <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    3170:	50 40 21    	mov.w     #0x1405, w0
    3172:	81 c0 b3    	mov.b     #0x8, w1
    3174:	01 48 78    	mov.b     w1, [w0]

00003176 <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    3176:	96 24 ef    	clr.w     0x496

00003178 <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    3178:	f0 0f 20    	mov.w     #0xff, w0
    317a:	50 24 88    	mov.w     w0, 0x48a

0000317c <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    317c:	d0 00 20    	mov.w     #0xd, w0
    317e:	50 25 88    	mov.w     w0, 0x4aa

00003180 <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    3180:	10 c0 b3    	mov.b     #0x1, w0
    3182:	40 e8 b7    	mov.b     WREG, 0x840

00003184 <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    3184:	10 c0 b3    	mov.b     #0x1, w0
    3186:	3e e8 b7    	mov.b     WREG, 0x83e
    3188:	3a 00 37    	bra       0x31fe <.L5>

0000318a <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    318a:	50 24 80    	mov.w     0x48a, w0
    318c:	68 00 60    	and.w     w0, #0x8, w0
    318e:	00 00 e0    	cp0.w     w0
    3190:	36 00 32    	bra       Z, 0x31fe <.L5>

00003192 <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    3192:	90 24 80    	mov.w     0x492, w0
    3194:	43 00 de    	lsr.w     w0, #0x3, w0
    3196:	c2 00 dd    	sl.w      w0, #0x2, w1
    3198:	00 40 21    	mov.w     #0x1400, w0
    319a:	00 80 40    	add.w     w1, w0, w0
    319c:	20 07 98    	mov.w     w0, [w14+4]

0000319e <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    319e:	2e 00 90    	mov.w     [w14+4], w0
    31a0:	10 40 90    	mov.b     [w0+1], w0
    31a2:	31 e8 b7    	mov.b     WREG, 0x831

000031a4 <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    31a4:	2e 00 90    	mov.w     [w14+4], w0
    31a6:	10 40 78    	mov.b     [w0], w0
    31a8:	30 e8 b7    	mov.b     WREG, 0x830

000031aa <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    31aa:	2e 00 90    	mov.w     [w14+4], w0
    31ac:	10 00 90    	mov.w     [w0+2], w0
    31ae:	90 41 88    	mov.w     w0, 0x832

000031b0 <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    31b0:	90 24 80    	mov.w     0x492, w0
    31b2:	00 40 78    	mov.b     w0, w0
    31b4:	3f e8 b7    	mov.b     WREG, 0x83f

000031b6 <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    31b6:	80 00 20    	mov.w     #0x8, w0
    31b8:	50 24 88    	mov.w     w0, 0x48a

000031ba <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    31ba:	3c 68 ef    	clr.b     0x83c

000031bc <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    31bc:	31 c8 bf    	mov.b     0x831, WREG
    31be:	80 80 fb    	ze        w0, w1
    31c0:	c0 03 20    	mov.w     #0x3c, w0
    31c2:	00 80 60    	and.w     w1, w0, w0
    31c4:	41 02 20    	mov.w     #0x24, w1
    31c6:	81 0f 50    	sub.w     w0, w1, [w15]
    31c8:	08 00 32    	bra       Z, 0x31da <.L19>
    31ca:	41 03 20    	mov.w     #0x34, w1
    31cc:	81 0f 50    	sub.w     w0, w1, [w15]
    31ce:	03 00 32    	bra       Z, 0x31d6 <.L20>
    31d0:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    31d2:	05 00 32    	bra       Z, 0x31de <.L18>
    31d4:	05 00 37    	bra       0x31e0 <.L17>

000031d6 <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    31d6:	15 00 07    	rcall     0x3202 <_ProcessSetupToken>

000031d8 <.LSM76>:
                break;
    31d8:	03 00 37    	bra       0x31e0 <.L17>

000031da <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    31da:	dc 02 07    	rcall     0x3794 <_ProcessInToken>

000031dc <.LSM78>:
                break;
    31dc:	01 00 37    	bra       0x31e0 <.L17>

000031de <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    31de:	0e 03 07    	rcall     0x37fc <_ProcessOutToken>

000031e0 <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    31e0:	3c c8 bf    	mov.b     0x83c, WREG
    31e2:	00 80 fb    	ze        w0, w0
    31e4:	61 00 60    	and.w     w0, #0x1, w0
    31e6:	00 40 78    	mov.b     w0, w0
    31e8:	00 04 e0    	cp0.b     w0
    31ea:	09 00 32    	bra       Z, 0x31fe <.L5>

000031ec <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    31ec:	00 40 21    	mov.w     #0x1400, w0
    31ee:	01 c4 b3    	mov.b     #0x40, w1
    31f0:	01 48 78    	mov.b     w1, [w0]

000031f2 <.LSM82>:
            BD[EP0IN].status = 0x84;
    31f2:	50 40 21    	mov.w     #0x1405, w0
    31f4:	41 c8 b3    	mov.b     #0x84, w1
    31f6:	01 48 78    	mov.b     w1, [w0]

000031f8 <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    31f8:	10 40 21    	mov.w     #0x1401, w0
    31fa:	41 c8 b3    	mov.b     #0x84, w1
    31fc:	01 48 78    	mov.b     w1, [w0]

000031fe <.L5>:
        }
    }
}
    31fe:	00 80 fa    	ulnk      
    3200:	00 00 06    	return    

00003202 <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    3202:	02 00 fa    	lnk       #0x2

00003204 <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    3204:	91 41 80    	mov.w     0x832, w1
    3206:	01 0f 78    	mov.w     w1, [w14]

00003208 <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    3208:	1e 00 78    	mov.w     [w14], w0
    320a:	90 40 78    	mov.b     [w0], w1
    320c:	40 83 20    	mov.w     #0x834, w0
    320e:	01 48 78    	mov.b     w1, [w0]
    3210:	1e 0f e8    	inc.w     [w14], [w14]

00003212 <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    3212:	1e 00 78    	mov.w     [w14], w0
    3214:	90 40 78    	mov.b     [w0], w1
    3216:	40 83 20    	mov.w     #0x834, w0
    3218:	11 40 98    	mov.b     w1, [w0+1]
    321a:	1e 0f e8    	inc.w     [w14], [w14]

0000321c <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    321c:	1e 00 78    	mov.w     [w14], w0
    321e:	90 40 78    	mov.b     [w0], w1
    3220:	40 83 20    	mov.w     #0x834, w0
    3222:	21 40 98    	mov.b     w1, [w0+2]
    3224:	1e 0f e8    	inc.w     [w14], [w14]

00003226 <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    3226:	1e 00 78    	mov.w     [w14], w0
    3228:	90 40 78    	mov.b     [w0], w1
    322a:	40 83 20    	mov.w     #0x834, w0
    322c:	31 40 98    	mov.b     w1, [w0+3]
    322e:	1e 0f e8    	inc.w     [w14], [w14]

00003230 <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    3230:	1e 00 78    	mov.w     [w14], w0
    3232:	90 40 78    	mov.b     [w0], w1
    3234:	40 83 20    	mov.w     #0x834, w0
    3236:	41 40 98    	mov.b     w1, [w0+4]
    3238:	1e 0f e8    	inc.w     [w14], [w14]

0000323a <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    323a:	1e 00 78    	mov.w     [w14], w0
    323c:	90 40 78    	mov.b     [w0], w1
    323e:	40 83 20    	mov.w     #0x834, w0
    3240:	51 40 98    	mov.b     w1, [w0+5]
    3242:	1e 0f e8    	inc.w     [w14], [w14]

00003244 <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    3244:	1e 00 78    	mov.w     [w14], w0
    3246:	90 40 78    	mov.b     [w0], w1
    3248:	40 83 20    	mov.w     #0x834, w0
    324a:	61 40 98    	mov.b     w1, [w0+6]
    324c:	1e 0f e8    	inc.w     [w14], [w14]

0000324e <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    324e:	1e 00 78    	mov.w     [w14], w0
    3250:	90 40 78    	mov.b     [w0], w1
    3252:	40 83 20    	mov.w     #0x834, w0
    3254:	71 40 98    	mov.b     w1, [w0+7]
    3256:	1e 0f e8    	inc.w     [w14], [w14]

00003258 <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    3258:	00 40 21    	mov.w     #0x1400, w0
    325a:	01 c4 b3    	mov.b     #0x40, w1
    325c:	01 48 78    	mov.b     w1, [w0]

0000325e <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    325e:	50 40 21    	mov.w     #0x1405, w0
    3260:	81 c0 b3    	mov.b     #0x8, w1
    3262:	01 48 78    	mov.b     w1, [w0]

00003264 <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    3264:	40 83 20    	mov.w     #0x834, w0
    3266:	10 40 78    	mov.b     [w0], w0
    3268:	00 04 e0    	cp0.b     w0
    326a:	06 00 35    	bra       LT, 0x3278 <.L22>
    326c:	40 83 20    	mov.w     #0x834, w0
    326e:	30 00 90    	mov.w     [w0+6], w0
    3270:	00 00 e0    	cp0.w     w0
    3272:	02 00 32    	bra       Z, 0x3278 <.L22>
    3274:	80 cc b3    	mov.b     #0xc8, w0
    3276:	01 00 37    	bra       0x327a <.L23>

00003278 <.L22>:
    3278:	80 c8 b3    	mov.b     #0x88, w0

0000327a <.L23>:
    327a:	11 40 21    	mov.w     #0x1401, w1
    327c:	80 48 78    	mov.b     w0, [w1]

0000327e <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    327e:	94 a4 a9    	bclr.b    0x494, #0x5

00003280 <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    3280:	00 50 21    	mov.w     #0x1500, w0
    3282:	80 c0 eb    	setm.b    w1
    3284:	01 48 78    	mov.b     w1, [w0]

00003286 <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    3286:	10 50 21    	mov.w     #0x1501, w0
    3288:	80 c0 eb    	setm.b    w1
    328a:	01 48 78    	mov.b     w1, [w0]

0000328c <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    328c:	40 83 20    	mov.w     #0x834, w0
    328e:	10 40 78    	mov.b     [w0], w0
    3290:	80 80 fb    	ze        w0, w1
    3292:	00 06 20    	mov.w     #0x60, w0
    3294:	00 80 60    	and.w     w1, w0, w0
    3296:	00 00 e0    	cp0.w     w0
    3298:	04 00 32    	bra       Z, 0x32a2 <.L25>
    329a:	01 04 20    	mov.w     #0x40, w1
    329c:	81 0f 50    	sub.w     w0, w1, [w15]
    329e:	03 00 32    	bra       Z, 0x32a6 <.L26>
    32a0:	04 00 37    	bra       0x32aa <.L28>

000032a2 <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    32a2:	08 00 07    	rcall     0x32b4 <_StandardRequests>

000032a4 <.LSM103>:
            break;
    32a4:	05 00 37    	bra       0x32b0 <.L21>

000032a6 <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    32a6:	03 08 07    	rcall     0x42ae <_VendorRequests>

000032a8 <.LSM105>:
            break;
    32a8:	03 00 37    	bra       0x32b0 <.L21>

000032aa <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    32aa:	3c c8 bf    	mov.b     0x83c, WREG
    32ac:	00 04 a0    	bset.b    w0, #0x0
    32ae:	3c e8 b7    	mov.b     WREG, 0x83c

000032b0 <.L21>:
    }
}
    32b0:	00 80 fa    	ulnk      
    32b2:	00 00 06    	return    

000032b4 <_StandardRequests>:

void StandardRequests(void) {
    32b4:	06 00 fa    	lnk       #0x6

000032b6 <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    32b6:	40 83 20    	mov.w     #0x834, w0
    32b8:	10 40 90    	mov.b     [w0+1], w0
    32ba:	00 80 fb    	ze        w0, w0
    32bc:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    32be:	79 01 32    	bra       Z, 0x35b2 <.L34>
    32c0:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    32c2:	0c 00 3c    	bra       GT, 0x32dc <.L39>
    32c4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    32c6:	bf 00 32    	bra       Z, 0x3446 <.L32>
    32c8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    32ca:	03 00 3c    	bra       GT, 0x32d2 <.L40>
    32cc:	00 00 e0    	cp0.w     w0
    32ce:	12 00 32    	bra       Z, 0x32f4 <.L31>
    32d0:	5c 02 37    	bra       0x378a <.L30>

000032d2 <.L40>:
    32d2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    32d4:	b8 00 32    	bra       Z, 0x3446 <.L32>
    32d6:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    32d8:	4c 01 32    	bra       Z, 0x3572 <.L33>
    32da:	57 02 37    	bra       0x378a <.L30>

000032dc <.L39>:
    32dc:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    32de:	ef 01 32    	bra       Z, 0x36be <.L36>
    32e0:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    32e2:	03 00 3c    	bra       GT, 0x32ea <.L41>
    32e4:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    32e6:	e0 01 32    	bra       Z, 0x36a8 <.L35>
    32e8:	50 02 37    	bra       0x378a <.L30>

000032ea <.L41>:
    32ea:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    32ec:	12 02 32    	bra       Z, 0x3712 <.L37>
    32ee:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    32f0:	2b 02 32    	bra       Z, 0x3748 <.L38>
    32f2:	4b 02 37    	bra       0x378a <.L30>

000032f4 <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    32f4:	40 83 20    	mov.w     #0x834, w0
    32f6:	10 40 78    	mov.b     [w0], w0
    32f8:	00 80 fb    	ze        w0, w0
    32fa:	7f 00 60    	and.w     w0, #0x1f, w0
    32fc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    32fe:	13 00 32    	bra       Z, 0x3326 <.L44>
    3300:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3302:	32 00 32    	bra       Z, 0x3368 <.L45>
    3304:	00 00 e0    	cp0.w     w0
    3306:	9a 00 3a    	bra       NZ, 0x343c <.L128>

00003308 <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    3308:	30 a0 80    	mov.w     0x1406, w0
    330a:	e1 83 20    	mov.w     #0x83e, w1
    330c:	91 40 78    	mov.b     [w1], w1
    330e:	01 48 78    	mov.b     w1, [w0]

00003310 <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    3310:	30 a0 80    	mov.w     0x1406, w0
    3312:	00 00 e8    	inc.w     w0, w0
    3314:	80 40 eb    	clr.b     w1
    3316:	01 48 78    	mov.b     w1, [w0]

00003318 <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    3318:	40 40 21    	mov.w     #0x1404, w0
    331a:	21 c0 b3    	mov.b     #0x2, w1
    331c:	01 48 78    	mov.b     w1, [w0]

0000331e <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    331e:	50 40 21    	mov.w     #0x1405, w0
    3320:	81 cc b3    	mov.b     #0xc8, w1
    3322:	01 48 78    	mov.b     w1, [w0]

00003324 <.LSM115>:
                    break;
    3324:	8f 00 37    	bra       0x3444 <.L46>

00003326 <.L44>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    3326:	40 c8 bf    	mov.b     0x840, WREG
    3328:	00 80 fb    	ze        w0, w0
    332a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    332c:	03 00 32    	bra       Z, 0x3334 <.L48>
    332e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3330:	05 00 32    	bra       Z, 0x333c <.L49>
    3332:	19 00 37    	bra       0x3366 <.L47>

00003334 <.L48>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3334:	3c c8 bf    	mov.b     0x83c, WREG
    3336:	00 04 a0    	bset.b    w0, #0x0
    3338:	3c e8 b7    	mov.b     WREG, 0x83c

0000333a <.LSM118>:
                            break;
    333a:	15 00 37    	bra       0x3366 <.L47>

0000333c <.L49>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    333c:	40 83 20    	mov.w     #0x834, w0
    333e:	40 40 90    	mov.b     [w0+4], w0
    3340:	00 04 e0    	cp0.b     w0
    3342:	0e 00 3a    	bra       NZ, 0x3360 <.L50>

00003344 <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    3344:	30 a0 80    	mov.w     0x1406, w0
    3346:	80 40 eb    	clr.b     w1
    3348:	01 48 78    	mov.b     w1, [w0]

0000334a <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    334a:	30 a0 80    	mov.w     0x1406, w0
    334c:	00 00 e8    	inc.w     w0, w0
    334e:	80 40 eb    	clr.b     w1
    3350:	01 48 78    	mov.b     w1, [w0]

00003352 <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    3352:	40 40 21    	mov.w     #0x1404, w0
    3354:	21 c0 b3    	mov.b     #0x2, w1
    3356:	01 48 78    	mov.b     w1, [w0]

00003358 <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3358:	50 40 21    	mov.w     #0x1405, w0
    335a:	81 cc b3    	mov.b     #0xc8, w1
    335c:	01 48 78    	mov.b     w1, [w0]
    335e:	03 00 37    	bra       0x3366 <.L47>

00003360 <.L50>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3360:	3c c8 bf    	mov.b     0x83c, WREG
    3362:	00 04 a0    	bset.b    w0, #0x0
    3364:	3c e8 b7    	mov.b     WREG, 0x83c

00003366 <.L47>:
                            }
                    }
                    break;
    3366:	6e 00 37    	bra       0x3444 <.L46>

00003368 <.L45>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    3368:	40 c8 bf    	mov.b     0x840, WREG
    336a:	00 80 fb    	ze        w0, w0
    336c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    336e:	03 00 32    	bra       Z, 0x3376 <.L52>
    3370:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3372:	29 00 32    	bra       Z, 0x33c6 <.L53>
    3374:	5f 00 37    	bra       0x3434 <.L129>

00003376 <.L52>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    3376:	40 83 20    	mov.w     #0x834, w0
    3378:	40 40 90    	mov.b     [w0+4], w0
    337a:	00 80 fb    	ze        w0, w0
    337c:	6f 00 60    	and.w     w0, #0xf, w0
    337e:	00 00 e0    	cp0.w     w0
    3380:	1e 00 3a    	bra       NZ, 0x33be <.L54>

00003382 <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    3382:	31 a0 80    	mov.w     0x1406, w1
    3384:	40 83 20    	mov.w     #0x834, w0
    3386:	40 40 90    	mov.b     [w0+4], w0
    3388:	00 04 e0    	cp0.b     w0
    338a:	07 00 3d    	bra       GE, 0x339a <.L55>
    338c:	50 40 21    	mov.w     #0x1405, w0
    338e:	10 40 78    	mov.b     [w0], w0
    3390:	00 80 fb    	ze        w0, w0
    3392:	64 00 60    	and.w     w0, #0x4, w0
    3394:	42 80 de    	asr.w     w0, #0x2, w0
    3396:	00 40 78    	mov.b     w0, w0
    3398:	06 00 37    	bra       0x33a6 <.L56>

0000339a <.L55>:
    339a:	10 40 21    	mov.w     #0x1401, w0
    339c:	10 40 78    	mov.b     [w0], w0
    339e:	00 80 fb    	ze        w0, w0
    33a0:	64 00 60    	and.w     w0, #0x4, w0
    33a2:	42 80 de    	asr.w     w0, #0x2, w0
    33a4:	00 40 78    	mov.b     w0, w0

000033a6 <.L56>:
    33a6:	80 48 78    	mov.b     w0, [w1]

000033a8 <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    33a8:	30 a0 80    	mov.w     0x1406, w0
    33aa:	00 00 e8    	inc.w     w0, w0
    33ac:	80 40 eb    	clr.b     w1
    33ae:	01 48 78    	mov.b     w1, [w0]

000033b0 <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    33b0:	40 40 21    	mov.w     #0x1404, w0
    33b2:	21 c0 b3    	mov.b     #0x2, w1
    33b4:	01 48 78    	mov.b     w1, [w0]

000033b6 <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    33b6:	50 40 21    	mov.w     #0x1405, w0
    33b8:	81 cc b3    	mov.b     #0xc8, w1
    33ba:	01 48 78    	mov.b     w1, [w0]
    33bc:	03 00 37    	bra       0x33c4 <.L57>

000033be <.L54>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    33be:	3c c8 bf    	mov.b     0x83c, WREG
    33c0:	00 04 a0    	bset.b    w0, #0x0
    33c2:	3c e8 b7    	mov.b     WREG, 0x83c

000033c4 <.L57>:
                            }
                            break;
    33c4:	3a 00 37    	bra       0x343a <.L58>

000033c6 <.L53>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    33c6:	a0 4a 20    	mov.w     #0x4aa, w0
    33c8:	10 07 98    	mov.w     w0, [w14+2]

000033ca <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    33ca:	40 83 20    	mov.w     #0x834, w0
    33cc:	40 40 90    	mov.b     [w0+4], w0
    33ce:	6f 4f 60    	and.b     w0, #0xf, [w14]

000033d0 <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    33d0:	1e 80 fb    	ze        [w14], w0
    33d2:	00 00 40    	add.w     w0, w0, w0
    33d4:	80 00 78    	mov.w     w0, w1
    33d6:	40 83 20    	mov.w     #0x834, w0
    33d8:	40 40 90    	mov.b     [w0+4], w0
    33da:	00 00 fb    	se        w0, w0
    33dc:	4f 00 de    	lsr.w     w0, #0xf, w0
    33de:	01 00 70    	ior.w     w0, w1, w0
    33e0:	c2 00 dd    	sl.w      w0, #0x2, w1
    33e2:	00 40 21    	mov.w     #0x1400, w0
    33e4:	00 80 40    	add.w     w1, w0, w0
    33e6:	20 07 98    	mov.w     w0, [w14+4]

000033e8 <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    33e8:	1e 80 fb    	ze        [w14], w0
    33ea:	00 00 40    	add.w     w0, w0, w0
    33ec:	9e 00 90    	mov.w     [w14+2], w1
    33ee:	00 80 40    	add.w     w1, w0, w0
    33f0:	90 00 78    	mov.w     [w0], w1
    33f2:	40 83 20    	mov.w     #0x834, w0
    33f4:	40 40 90    	mov.b     [w0+4], w0
    33f6:	00 04 e0    	cp0.b     w0
    33f8:	02 00 3d    	bra       GE, 0x33fe <.L59>
    33fa:	40 00 20    	mov.w     #0x4, w0
    33fc:	01 00 37    	bra       0x3400 <.L60>

000033fe <.L59>:
    33fe:	80 00 20    	mov.w     #0x8, w0

00003400 <.L60>:
    3400:	00 80 60    	and.w     w1, w0, w0
    3402:	00 00 e0    	cp0.w     w0
    3404:	13 00 32    	bra       Z, 0x342c <.L61>

00003406 <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    3406:	30 a0 80    	mov.w     0x1406, w0
    3408:	ae 00 90    	mov.w     [w14+4], w1
    340a:	91 40 90    	mov.b     [w1+1], w1
    340c:	81 80 fb    	ze        w1, w1
    340e:	e4 80 60    	and.w     w1, #0x4, w1
    3410:	c2 88 de    	asr.w     w1, #0x2, w1
    3412:	81 40 78    	mov.b     w1, w1
    3414:	01 48 78    	mov.b     w1, [w0]

00003416 <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    3416:	30 a0 80    	mov.w     0x1406, w0
    3418:	00 00 e8    	inc.w     w0, w0
    341a:	80 40 eb    	clr.b     w1
    341c:	01 48 78    	mov.b     w1, [w0]

0000341e <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    341e:	40 40 21    	mov.w     #0x1404, w0
    3420:	21 c0 b3    	mov.b     #0x2, w1
    3422:	01 48 78    	mov.b     w1, [w0]

00003424 <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3424:	50 40 21    	mov.w     #0x1405, w0
    3426:	81 cc b3    	mov.b     #0xc8, w1
    3428:	01 48 78    	mov.b     w1, [w0]
    342a:	03 00 37    	bra       0x3432 <.L62>

0000342c <.L61>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    342c:	3c c8 bf    	mov.b     0x83c, WREG
    342e:	00 04 a0    	bset.b    w0, #0x0
    3430:	3c e8 b7    	mov.b     WREG, 0x83c

00003432 <.L62>:
                            }
                            break;
    3432:	03 00 37    	bra       0x343a <.L58>

00003434 <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3434:	3c c8 bf    	mov.b     0x83c, WREG
    3436:	00 04 a0    	bset.b    w0, #0x0
    3438:	3c e8 b7    	mov.b     WREG, 0x83c

0000343a <.L58>:
                    }
                    break;
    343a:	04 00 37    	bra       0x3444 <.L46>

0000343c <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    343c:	3c c8 bf    	mov.b     0x83c, WREG
    343e:	00 04 a0    	bset.b    w0, #0x0
    3440:	3c e8 b7    	mov.b     WREG, 0x83c

00003442 <.LSM147>:
            }
            break;
    3442:	a6 01 37    	bra       0x3790 <.L29>

00003444 <.L46>:
    3444:	a5 01 37    	bra       0x3790 <.L29>

00003446 <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    3446:	40 83 20    	mov.w     #0x834, w0
    3448:	10 40 78    	mov.b     [w0], w0
    344a:	00 80 fb    	ze        w0, w0
    344c:	7f 00 60    	and.w     w0, #0x1f, w0
    344e:	00 00 e0    	cp0.w     w0
    3450:	03 00 32    	bra       Z, 0x3458 <.L65>
    3452:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3454:	1e 00 32    	bra       Z, 0x3492 <.L66>
    3456:	88 00 37    	bra       0x3568 <.L130>

00003458 <.L65>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    3458:	40 83 20    	mov.w     #0x834, w0
    345a:	20 40 90    	mov.b     [w0+2], w0
    345c:	00 80 fb    	ze        w0, w0
    345e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3460:	14 00 3a    	bra       NZ, 0x348a <.L131>

00003462 <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    3462:	40 83 20    	mov.w     #0x834, w0
    3464:	10 40 90    	mov.b     [w0+1], w0
    3466:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3468:	06 00 3a    	bra       NZ, 0x3476 <.L69>

0000346a <.LSM151>:
                                USB_device_status &= 0xFE;
    346a:	e1 83 20    	mov.w     #0x83e, w1
    346c:	91 40 78    	mov.b     [w1], w1
    346e:	e0 cf b3    	mov.b     #0xfe, w0
    3470:	00 c0 60    	and.b     w1, w0, w0
    3472:	3e e8 b7    	mov.b     WREG, 0x83e
    3474:	03 00 37    	bra       0x347c <.L70>

00003476 <.L69>:
                            else
                                USB_device_status |= 0x01;
    3476:	3e c8 bf    	mov.b     0x83e, WREG
    3478:	00 04 a0    	bset.b    w0, #0x0
    347a:	3e e8 b7    	mov.b     WREG, 0x83e

0000347c <.L70>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    347c:	40 40 21    	mov.w     #0x1404, w0
    347e:	80 40 eb    	clr.b     w1
    3480:	01 48 78    	mov.b     w1, [w0]

00003482 <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3482:	50 40 21    	mov.w     #0x1405, w0
    3484:	81 cc b3    	mov.b     #0xc8, w1
    3486:	01 48 78    	mov.b     w1, [w0]

00003488 <.LSM155>:
                            break;
    3488:	03 00 37    	bra       0x3490 <.L71>

0000348a <.L131>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    348a:	3c c8 bf    	mov.b     0x83c, WREG
    348c:	00 04 a0    	bset.b    w0, #0x0
    348e:	3c e8 b7    	mov.b     WREG, 0x83c

00003490 <.L71>:
                    }
                    break;
    3490:	6f 00 37    	bra       0x3570 <.L72>

00003492 <.L66>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    3492:	40 c8 bf    	mov.b     0x840, WREG
    3494:	00 80 fb    	ze        w0, w0
    3496:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3498:	03 00 32    	bra       Z, 0x34a0 <.L74>
    349a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    349c:	12 00 32    	bra       Z, 0x34c2 <.L75>
    349e:	60 00 37    	bra       0x3560 <.L132>

000034a0 <.L74>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    34a0:	40 83 20    	mov.w     #0x834, w0
    34a2:	40 40 90    	mov.b     [w0+4], w0
    34a4:	00 80 fb    	ze        w0, w0
    34a6:	6f 00 60    	and.w     w0, #0xf, w0
    34a8:	00 00 e0    	cp0.w     w0
    34aa:	07 00 3a    	bra       NZ, 0x34ba <.L76>

000034ac <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    34ac:	40 40 21    	mov.w     #0x1404, w0
    34ae:	80 40 eb    	clr.b     w1
    34b0:	01 48 78    	mov.b     w1, [w0]

000034b2 <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    34b2:	50 40 21    	mov.w     #0x1405, w0
    34b4:	81 cc b3    	mov.b     #0xc8, w1
    34b6:	01 48 78    	mov.b     w1, [w0]
    34b8:	03 00 37    	bra       0x34c0 <.L77>

000034ba <.L76>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    34ba:	3c c8 bf    	mov.b     0x83c, WREG
    34bc:	00 04 a0    	bset.b    w0, #0x0
    34be:	3c e8 b7    	mov.b     WREG, 0x83c

000034c0 <.L77>:
                            }
                            break;
    34c0:	52 00 37    	bra       0x3566 <.L78>

000034c2 <.L75>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    34c2:	a0 4a 20    	mov.w     #0x4aa, w0
    34c4:	10 07 98    	mov.w     w0, [w14+2]

000034c6 <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    34c6:	40 83 20    	mov.w     #0x834, w0
    34c8:	40 40 90    	mov.b     [w0+4], w0
    34ca:	6f 4f 60    	and.b     w0, #0xf, [w14]
    34cc:	1e 40 78    	mov.b     [w14], w0
    34ce:	00 04 e0    	cp0.b     w0
    34d0:	3b 00 32    	bra       Z, 0x3548 <.L79>

000034d2 <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    34d2:	1e 80 fb    	ze        [w14], w0
    34d4:	00 00 40    	add.w     w0, w0, w0
    34d6:	80 00 78    	mov.w     w0, w1
    34d8:	40 83 20    	mov.w     #0x834, w0
    34da:	40 40 90    	mov.b     [w0+4], w0
    34dc:	00 00 fb    	se        w0, w0
    34de:	4f 00 de    	lsr.w     w0, #0xf, w0
    34e0:	01 00 70    	ior.w     w0, w1, w0
    34e2:	c2 00 dd    	sl.w      w0, #0x2, w1
    34e4:	00 40 21    	mov.w     #0x1400, w0
    34e6:	00 80 40    	add.w     w1, w0, w0
    34e8:	20 07 98    	mov.w     w0, [w14+4]

000034ea <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    34ea:	40 83 20    	mov.w     #0x834, w0
    34ec:	40 40 90    	mov.b     [w0+4], w0
    34ee:	00 04 e0    	cp0.b     w0
    34f0:	16 00 3d    	bra       GE, 0x351e <.L80>

000034f2 <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    34f2:	1e 80 fb    	ze        [w14], w0
    34f4:	00 00 40    	add.w     w0, w0, w0
    34f6:	9e 00 90    	mov.w     [w14+2], w1
    34f8:	00 80 40    	add.w     w1, w0, w0
    34fa:	10 00 78    	mov.w     [w0], w0
    34fc:	64 00 60    	and.w     w0, #0x4, w0
    34fe:	00 00 e0    	cp0.w     w0
    3500:	0a 00 32    	bra       Z, 0x3516 <.L81>

00003502 <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    3502:	40 83 20    	mov.w     #0x834, w0
    3504:	10 40 90    	mov.b     [w0+1], w0
    3506:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3508:	02 00 3a    	bra       NZ, 0x350e <.L82>
    350a:	00 40 eb    	clr.b     w0
    350c:	01 00 37    	bra       0x3510 <.L83>

0000350e <.L82>:
    350e:	40 c8 b3    	mov.b     #0x84, w0

00003510 <.L83>:
    3510:	ae 00 90    	mov.w     [w14+4], w1
    3512:	90 40 98    	mov.b     w0, [w1+1]
    3514:	19 00 37    	bra       0x3548 <.L79>

00003516 <.L81>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3516:	3c c8 bf    	mov.b     0x83c, WREG
    3518:	00 04 a0    	bset.b    w0, #0x0
    351a:	3c e8 b7    	mov.b     WREG, 0x83c
    351c:	15 00 37    	bra       0x3548 <.L79>

0000351e <.L80>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    351e:	1e 80 fb    	ze        [w14], w0
    3520:	00 00 40    	add.w     w0, w0, w0
    3522:	9e 00 90    	mov.w     [w14+2], w1
    3524:	00 80 40    	add.w     w1, w0, w0
    3526:	10 00 78    	mov.w     [w0], w0
    3528:	68 00 60    	and.w     w0, #0x8, w0
    352a:	00 00 e0    	cp0.w     w0
    352c:	0a 00 32    	bra       Z, 0x3542 <.L84>

0000352e <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    352e:	40 83 20    	mov.w     #0x834, w0
    3530:	10 40 90    	mov.b     [w0+1], w0
    3532:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3534:	02 00 3a    	bra       NZ, 0x353a <.L85>
    3536:	80 c8 b3    	mov.b     #0x88, w0
    3538:	01 00 37    	bra       0x353c <.L86>

0000353a <.L85>:
    353a:	40 c8 b3    	mov.b     #0x84, w0

0000353c <.L86>:
    353c:	ae 00 90    	mov.w     [w14+4], w1
    353e:	90 40 98    	mov.b     w0, [w1+1]
    3540:	03 00 37    	bra       0x3548 <.L79>

00003542 <.L84>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3542:	3c c8 bf    	mov.b     0x83c, WREG
    3544:	00 04 a0    	bset.b    w0, #0x0
    3546:	3c e8 b7    	mov.b     WREG, 0x83c

00003548 <.L79>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    3548:	3c c8 bf    	mov.b     0x83c, WREG
    354a:	00 80 fb    	ze        w0, w0
    354c:	61 00 60    	and.w     w0, #0x1, w0
    354e:	00 00 e0    	cp0.w     w0
    3550:	06 00 3a    	bra       NZ, 0x355e <.L87>

00003552 <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    3552:	40 40 21    	mov.w     #0x1404, w0
    3554:	80 40 eb    	clr.b     w1
    3556:	01 48 78    	mov.b     w1, [w0]

00003558 <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    3558:	50 40 21    	mov.w     #0x1405, w0
    355a:	81 cc b3    	mov.b     #0xc8, w1
    355c:	01 48 78    	mov.b     w1, [w0]

0000355e <.L87>:
                            }
                            break;
    355e:	03 00 37    	bra       0x3566 <.L78>

00003560 <.L132>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3560:	3c c8 bf    	mov.b     0x83c, WREG
    3562:	00 04 a0    	bset.b    w0, #0x0
    3564:	3c e8 b7    	mov.b     WREG, 0x83c

00003566 <.L78>:
                    }
                    break;
    3566:	04 00 37    	bra       0x3570 <.L72>

00003568 <.L130>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    3568:	3c c8 bf    	mov.b     0x83c, WREG
    356a:	00 04 a0    	bset.b    w0, #0x0
    356c:	3c e8 b7    	mov.b     WREG, 0x83c

0000356e <.LSM181>:
            }
            break;
    356e:	10 01 37    	bra       0x3790 <.L29>

00003570 <.L72>:
    3570:	0f 01 37    	bra       0x3790 <.L29>

00003572 <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    3572:	40 83 20    	mov.w     #0x834, w0
    3574:	20 40 90    	mov.b     [w0+2], w0
    3576:	00 04 e0    	cp0.b     w0
    3578:	04 00 3d    	bra       GE, 0x3582 <.L88>

0000357a <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    357a:	3c c8 bf    	mov.b     0x83c, WREG
    357c:	00 04 a0    	bset.b    w0, #0x0
    357e:	3c e8 b7    	mov.b     WREG, 0x83c

00003580 <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    3580:	07 01 37    	bra       0x3790 <.L29>

00003582 <.L88>:
    3582:	40 83 20    	mov.w     #0x834, w0
    3584:	90 40 78    	mov.b     [w0], w1
    3586:	00 50 21    	mov.w     #0x1500, w0
    3588:	01 48 78    	mov.b     w1, [w0]

0000358a <.LSM186>:
    358a:	40 83 20    	mov.w     #0x834, w0
    358c:	90 40 90    	mov.b     [w0+1], w1
    358e:	10 50 21    	mov.w     #0x1501, w0
    3590:	01 48 78    	mov.b     w1, [w0]

00003592 <.LSM187>:
    3592:	40 83 20    	mov.w     #0x834, w0
    3594:	10 00 90    	mov.w     [w0+2], w0
    3596:	10 a8 88    	mov.w     w0, 0x1502

00003598 <.LSM188>:
    3598:	40 83 20    	mov.w     #0x834, w0
    359a:	20 00 90    	mov.w     [w0+4], w0
    359c:	20 a8 88    	mov.w     w0, 0x1504

0000359e <.LSM189>:
    359e:	40 83 20    	mov.w     #0x834, w0
    35a0:	30 00 90    	mov.w     [w0+6], w0
    35a2:	30 a8 88    	mov.w     w0, 0x1506

000035a4 <.LSM190>:
    35a4:	40 40 21    	mov.w     #0x1404, w0
    35a6:	80 40 eb    	clr.b     w1
    35a8:	01 48 78    	mov.b     w1, [w0]

000035aa <.LSM191>:
    35aa:	50 40 21    	mov.w     #0x1405, w0
    35ac:	81 cc b3    	mov.b     #0xc8, w1
    35ae:	01 48 78    	mov.b     w1, [w0]

000035b0 <.LSM192>:
    35b0:	ef 00 37    	bra       0x3790 <.L29>

000035b2 <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    35b2:	40 83 20    	mov.w     #0x834, w0
    35b4:	90 40 78    	mov.b     [w0], w1
    35b6:	00 50 21    	mov.w     #0x1500, w0
    35b8:	01 48 78    	mov.b     w1, [w0]

000035ba <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    35ba:	40 83 20    	mov.w     #0x834, w0
    35bc:	90 40 90    	mov.b     [w0+1], w1
    35be:	10 50 21    	mov.w     #0x1501, w0
    35c0:	01 48 78    	mov.b     w1, [w0]

000035c2 <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    35c2:	40 83 20    	mov.w     #0x834, w0
    35c4:	10 00 90    	mov.w     [w0+2], w0
    35c6:	10 a8 88    	mov.w     w0, 0x1502

000035c8 <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    35c8:	40 83 20    	mov.w     #0x834, w0
    35ca:	20 00 90    	mov.w     [w0+4], w0
    35cc:	20 a8 88    	mov.w     w0, 0x1504

000035ce <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    35ce:	40 83 20    	mov.w     #0x834, w0
    35d0:	30 00 90    	mov.w     [w0+6], w0
    35d2:	30 a8 88    	mov.w     w0, 0x1506

000035d4 <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    35d4:	40 83 20    	mov.w     #0x834, w0
    35d6:	30 40 90    	mov.b     [w0+3], w0
    35d8:	00 80 fb    	ze        w0, w0
    35da:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    35dc:	14 00 32    	bra       Z, 0x3606 <.L92>
    35de:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    35e0:	36 00 32    	bra       Z, 0x364e <.L93>
    35e2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    35e4:	5c 00 3a    	bra       NZ, 0x369e <.L133>

000035e6 <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    35e6:	20 22 2a    	mov.w     #0xa222, w0
    35e8:	40 a8 88    	mov.w     w0, 0x1508

000035ea <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    35ea:	40 a8 80    	mov.w     0x1508, w0
    35ec:	10 40 78    	mov.b     [w0], w0
    35ee:	00 80 fb    	ze        w0, w0
    35f0:	50 a8 88    	mov.w     w0, 0x150a

000035f2 <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    35f2:	40 83 20    	mov.w     #0x834, w0
    35f4:	b0 00 90    	mov.w     [w0+6], w1
    35f6:	50 a8 80    	mov.w     0x150a, w0
    35f8:	80 8f 50    	sub.w     w1, w0, [w15]
    35fa:	03 00 31    	bra       C, 0x3602 <.L94>

000035fc <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    35fc:	40 83 20    	mov.w     #0x834, w0
    35fe:	30 00 90    	mov.w     [w0+6], w0
    3600:	50 a8 88    	mov.w     w0, 0x150a

00003602 <.L94>:
                    }
                    SendDataPacket();
    3602:	22 01 07    	rcall     0x3848 <_SendDataPacket>

00003604 <.LSM204>:
                    break;
    3604:	50 00 37    	bra       0x36a6 <.L95>

00003606 <.L92>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    3606:	40 83 20    	mov.w     #0x834, w0
    3608:	20 40 90    	mov.b     [w0+2], w0
    360a:	00 80 fb    	ze        w0, w0
    360c:	00 00 e0    	cp0.w     w0
    360e:	03 00 3a    	bra       NZ, 0x3616 <.L134>

00003610 <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    3610:	40 23 2a    	mov.w     #0xa234, w0
    3612:	40 a8 88    	mov.w     w0, 0x1508

00003614 <.LSM207>:
                            break;
    3614:	03 00 37    	bra       0x361c <.L98>

00003616 <.L134>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    3616:	3c c8 bf    	mov.b     0x83c, WREG
    3618:	00 04 a0    	bset.b    w0, #0x0
    361a:	3c e8 b7    	mov.b     WREG, 0x83c

0000361c <.L98>:
                    }
                    if (!(USB_error_flags&0x01)) {
    361c:	3c c8 bf    	mov.b     0x83c, WREG
    361e:	00 80 fb    	ze        w0, w0
    3620:	61 00 60    	and.w     w0, #0x1, w0
    3622:	00 00 e0    	cp0.w     w0
    3624:	13 00 3a    	bra       NZ, 0x364c <.L99>

00003626 <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    3626:	40 a8 80    	mov.w     0x1508, w0
    3628:	00 80 e8    	inc2.w    w0, w0
    362a:	90 40 78    	mov.b     [w0], w1
    362c:	a0 50 21    	mov.w     #0x150a, w0
    362e:	01 48 78    	mov.b     w1, [w0]

00003630 <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    3630:	40 a8 80    	mov.w     0x1508, w0
    3632:	63 00 40    	add.w     w0, #0x3, w0
    3634:	90 40 78    	mov.b     [w0], w1
    3636:	b0 50 21    	mov.w     #0x150b, w0
    3638:	01 48 78    	mov.b     w1, [w0]

0000363a <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    363a:	40 83 20    	mov.w     #0x834, w0
    363c:	b0 00 90    	mov.w     [w0+6], w1
    363e:	50 a8 80    	mov.w     0x150a, w0
    3640:	80 8f 50    	sub.w     w1, w0, [w15]
    3642:	03 00 31    	bra       C, 0x364a <.L100>

00003644 <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    3644:	40 83 20    	mov.w     #0x834, w0
    3646:	30 00 90    	mov.w     [w0+6], w0
    3648:	50 a8 88    	mov.w     w0, 0x150a

0000364a <.L100>:
                        }
                        SendDataPacket();
    364a:	fe 00 07    	rcall     0x3848 <_SendDataPacket>

0000364c <.L99>:
                    }
                    break;
    364c:	2c 00 37    	bra       0x36a6 <.L95>

0000364e <.L93>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    364e:	40 83 20    	mov.w     #0x834, w0
    3650:	20 40 90    	mov.b     [w0+2], w0
    3652:	00 80 fb    	ze        w0, w0
    3654:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3656:	07 00 32    	bra       Z, 0x3666 <.L103>
    3658:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    365a:	08 00 32    	bra       Z, 0x366c <.L104>
    365c:	00 00 e0    	cp0.w     w0
    365e:	09 00 3a    	bra       NZ, 0x3672 <.L135>

00003660 <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    3660:	60 24 2a    	mov.w     #0xa246, w0
    3662:	40 a8 88    	mov.w     w0, 0x1508

00003664 <.LSM218>:
                            break;
    3664:	09 00 37    	bra       0x3678 <.L105>

00003666 <.L103>:
                        case 1:
                            USB_request.data_ptr = String1;
    3666:	a0 24 2a    	mov.w     #0xa24a, w0
    3668:	40 a8 88    	mov.w     w0, 0x1508

0000366a <.LSM220>:
                            break;
    366a:	06 00 37    	bra       0x3678 <.L105>

0000366c <.L104>:
                        case 2:
                            USB_request.data_ptr = String2;
    366c:	40 26 2a    	mov.w     #0xa264, w0
    366e:	40 a8 88    	mov.w     w0, 0x1508

00003670 <.LSM222>:
                            break;
    3670:	03 00 37    	bra       0x3678 <.L105>

00003672 <.L135>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    3672:	3c c8 bf    	mov.b     0x83c, WREG
    3674:	00 04 a0    	bset.b    w0, #0x0
    3676:	3c e8 b7    	mov.b     WREG, 0x83c

00003678 <.L105>:
                    }
                    if (!(USB_error_flags&0x01)) {
    3678:	3c c8 bf    	mov.b     0x83c, WREG
    367a:	00 80 fb    	ze        w0, w0
    367c:	61 00 60    	and.w     w0, #0x1, w0
    367e:	00 00 e0    	cp0.w     w0
    3680:	0d 00 3a    	bra       NZ, 0x369c <.L106>

00003682 <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    3682:	40 a8 80    	mov.w     0x1508, w0
    3684:	10 40 78    	mov.b     [w0], w0
    3686:	00 80 fb    	ze        w0, w0
    3688:	50 a8 88    	mov.w     w0, 0x150a

0000368a <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    368a:	40 83 20    	mov.w     #0x834, w0
    368c:	b0 00 90    	mov.w     [w0+6], w1
    368e:	50 a8 80    	mov.w     0x150a, w0
    3690:	80 8f 50    	sub.w     w1, w0, [w15]
    3692:	03 00 31    	bra       C, 0x369a <.L107>

00003694 <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    3694:	40 83 20    	mov.w     #0x834, w0
    3696:	30 00 90    	mov.w     [w0+6], w0
    3698:	50 a8 88    	mov.w     w0, 0x150a

0000369a <.L107>:
                        }
                        SendDataPacket();
    369a:	d6 00 07    	rcall     0x3848 <_SendDataPacket>

0000369c <.L106>:
                    }
                    break;
    369c:	04 00 37    	bra       0x36a6 <.L95>

0000369e <.L133>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    369e:	3c c8 bf    	mov.b     0x83c, WREG
    36a0:	00 04 a0    	bset.b    w0, #0x0
    36a2:	3c e8 b7    	mov.b     WREG, 0x83c

000036a4 <.LSM231>:
            }
            break;
    36a4:	75 00 37    	bra       0x3790 <.L29>

000036a6 <.L95>:
    36a6:	74 00 37    	bra       0x3790 <.L29>

000036a8 <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    36a8:	30 a0 80    	mov.w     0x1406, w0
    36aa:	d1 83 20    	mov.w     #0x83d, w1
    36ac:	91 40 78    	mov.b     [w1], w1
    36ae:	01 48 78    	mov.b     w1, [w0]

000036b0 <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    36b0:	40 40 21    	mov.w     #0x1404, w0
    36b2:	11 c0 b3    	mov.b     #0x1, w1
    36b4:	01 48 78    	mov.b     w1, [w0]

000036b6 <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    36b6:	50 40 21    	mov.w     #0x1405, w0
    36b8:	81 cc b3    	mov.b     #0xc8, w1
    36ba:	01 48 78    	mov.b     w1, [w0]

000036bc <.LSM235>:
            break;
    36bc:	69 00 37    	bra       0x3790 <.L29>

000036be <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    36be:	40 83 20    	mov.w     #0x834, w0
    36c0:	20 40 90    	mov.b     [w0+2], w0
    36c2:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    36c4:	22 00 3e    	bra       GTU, 0x370a <.L108>

000036c6 <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    36c6:	a0 4a 20    	mov.w     #0x4aa, w0
    36c8:	10 07 98    	mov.w     w0, [w14+2]

000036ca <.LSM238>:
                for (n = 1; n<16; n++)
    36ca:	10 c0 b3    	mov.b     #0x1, w0
    36cc:	00 4f 78    	mov.b     w0, [w14]
    36ce:	07 00 37    	bra       0x36de <.L109>

000036d0 <.L110>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    36d0:	1e 80 fb    	ze        [w14], w0
    36d2:	00 00 40    	add.w     w0, w0, w0
    36d4:	9e 00 90    	mov.w     [w14+2], w1
    36d6:	00 80 40    	add.w     w1, w0, w0
    36d8:	80 00 eb    	clr.w     w1
    36da:	01 08 78    	mov.w     w1, [w0]

000036dc <.LSM240>:
    36dc:	1e 4f e8    	inc.b     [w14], [w14]

000036de <.L109>:
    36de:	1e 40 78    	mov.b     [w14], w0
    36e0:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    36e2:	f6 ff 36    	bra       LEU, 0x36d0 <.L110>

000036e4 <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    36e4:	40 83 20    	mov.w     #0x834, w0
    36e6:	20 40 90    	mov.b     [w0+2], w0
    36e8:	3d e8 b7    	mov.b     WREG, 0x83d
    36ea:	3d c8 bf    	mov.b     0x83d, WREG
    36ec:	00 80 fb    	ze        w0, w0
    36ee:	00 00 e0    	cp0.w     w0
    36f0:	03 00 3a    	bra       NZ, 0x36f8 <.L136>

000036f2 <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    36f2:	20 c0 b3    	mov.b     #0x2, w0
    36f4:	40 e8 b7    	mov.b     WREG, 0x840

000036f6 <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    36f6:	02 00 37    	bra       0x36fc <.L113>

000036f8 <.L136>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    36f8:	30 c0 b3    	mov.b     #0x3, w0
    36fa:	40 e8 b7    	mov.b     WREG, 0x840

000036fc <.L113>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    36fc:	40 40 21    	mov.w     #0x1404, w0
    36fe:	80 40 eb    	clr.b     w1
    3700:	01 48 78    	mov.b     w1, [w0]

00003702 <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    3702:	50 40 21    	mov.w     #0x1405, w0
    3704:	81 cc b3    	mov.b     #0xc8, w1
    3706:	01 48 78    	mov.b     w1, [w0]

00003708 <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    3708:	43 00 37    	bra       0x3790 <.L29>

0000370a <.L108>:
    370a:	3c c8 bf    	mov.b     0x83c, WREG
    370c:	00 04 a0    	bset.b    w0, #0x0
    370e:	3c e8 b7    	mov.b     WREG, 0x83c

00003710 <.LSM249>:
    3710:	3f 00 37    	bra       0x3790 <.L29>

00003712 <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    3712:	40 c8 bf    	mov.b     0x840, WREG
    3714:	00 80 fb    	ze        w0, w0
    3716:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3718:	13 00 3a    	bra       NZ, 0x3740 <.L137>

0000371a <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    371a:	40 83 20    	mov.w     #0x834, w0
    371c:	40 40 90    	mov.b     [w0+4], w0
    371e:	00 04 e0    	cp0.b     w0
    3720:	0a 00 3a    	bra       NZ, 0x3736 <.L117>

00003722 <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    3722:	30 a0 80    	mov.w     0x1406, w0
    3724:	80 40 eb    	clr.b     w1
    3726:	01 48 78    	mov.b     w1, [w0]

00003728 <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    3728:	40 40 21    	mov.w     #0x1404, w0
    372a:	11 c0 b3    	mov.b     #0x1, w1
    372c:	01 48 78    	mov.b     w1, [w0]

0000372e <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    372e:	50 40 21    	mov.w     #0x1405, w0
    3730:	81 cc b3    	mov.b     #0xc8, w1
    3732:	01 48 78    	mov.b     w1, [w0]
    3734:	03 00 37    	bra       0x373c <.L118>

00003736 <.L117>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    3736:	3c c8 bf    	mov.b     0x83c, WREG
    3738:	00 04 a0    	bset.b    w0, #0x0
    373a:	3c e8 b7    	mov.b     WREG, 0x83c

0000373c <.L118>:
                    }
                    break;
    373c:	00 00 00    	nop       

0000373e <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    373e:	28 00 37    	bra       0x3790 <.L29>

00003740 <.L137>:
    3740:	3c c8 bf    	mov.b     0x83c, WREG
    3742:	00 04 a0    	bset.b    w0, #0x0
    3744:	3c e8 b7    	mov.b     WREG, 0x83c

00003746 <.LSM259>:
    3746:	24 00 37    	bra       0x3790 <.L29>

00003748 <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    3748:	40 c8 bf    	mov.b     0x840, WREG
    374a:	00 80 fb    	ze        w0, w0
    374c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    374e:	19 00 3a    	bra       NZ, 0x3782 <.L138>

00003750 <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3750:	40 83 20    	mov.w     #0x834, w0
    3752:	40 40 90    	mov.b     [w0+4], w0
    3754:	00 04 e0    	cp0.b     w0
    3756:	10 00 3a    	bra       NZ, 0x3778 <.L122>

00003758 <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    3758:	40 83 20    	mov.w     #0x834, w0
    375a:	20 40 90    	mov.b     [w0+2], w0
    375c:	00 80 fb    	ze        w0, w0
    375e:	00 00 e0    	cp0.w     w0
    3760:	07 00 3a    	bra       NZ, 0x3770 <.L139>

00003762 <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    3762:	40 40 21    	mov.w     #0x1404, w0
    3764:	80 40 eb    	clr.b     w1
    3766:	01 48 78    	mov.b     w1, [w0]

00003768 <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    3768:	50 40 21    	mov.w     #0x1405, w0
    376a:	81 cc b3    	mov.b     #0xc8, w1
    376c:	01 48 78    	mov.b     w1, [w0]

0000376e <.LSM265>:
                                break;
    376e:	07 00 37    	bra       0x377e <.L126>

00003770 <.L139>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3770:	3c c8 bf    	mov.b     0x83c, WREG
    3772:	00 04 a0    	bset.b    w0, #0x0
    3774:	3c e8 b7    	mov.b     WREG, 0x83c
    3776:	03 00 37    	bra       0x377e <.L126>

00003778 <.L122>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    3778:	3c c8 bf    	mov.b     0x83c, WREG
    377a:	00 04 a0    	bset.b    w0, #0x0
    377c:	3c e8 b7    	mov.b     WREG, 0x83c

0000377e <.L126>:
                    }
                    break;
    377e:	00 00 00    	nop       

00003780 <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    3780:	07 00 37    	bra       0x3790 <.L29>

00003782 <.L138>:
    3782:	3c c8 bf    	mov.b     0x83c, WREG
    3784:	00 04 a0    	bset.b    w0, #0x0
    3786:	3c e8 b7    	mov.b     WREG, 0x83c

00003788 <.LSM271>:
    3788:	03 00 37    	bra       0x3790 <.L29>

0000378a <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    378a:	3c c8 bf    	mov.b     0x83c, WREG
    378c:	00 04 a0    	bset.b    w0, #0x0
    378e:	3c e8 b7    	mov.b     WREG, 0x83c

00003790 <.L29>:
    }
}
    3790:	00 80 fa    	ulnk      
    3792:	00 00 06    	return    

00003794 <_ProcessInToken>:

void ProcessInToken(void) {
    3794:	00 00 fa    	lnk       #0x0

00003796 <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    3796:	3f c8 bf    	mov.b     0x83f, WREG
    3798:	80 80 fb    	ze        w0, w1
    379a:	00 0f 20    	mov.w     #0xf0, w0
    379c:	00 80 60    	and.w     w1, w0, w0
    379e:	00 00 e0    	cp0.w     w0
    37a0:	2b 00 3a    	bra       NZ, 0x37f8 <.L140>

000037a2 <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    37a2:	00 50 21    	mov.w     #0x1500, w0
    37a4:	10 40 78    	mov.b     [w0], w0
    37a6:	80 80 fb    	ze        w0, w1
    37a8:	00 06 20    	mov.w     #0x60, w0
    37aa:	00 80 60    	and.w     w1, w0, w0
    37ac:	01 02 20    	mov.w     #0x20, w1
    37ae:	81 0f 50    	sub.w     w0, w1, [w15]
    37b0:	1f 00 32    	bra       Z, 0x37f0 <.L154>
    37b2:	01 04 20    	mov.w     #0x40, w1
    37b4:	81 0f 50    	sub.w     w0, w1, [w15]
    37b6:	1a 00 32    	bra       Z, 0x37ec <.L146>
    37b8:	00 00 e0    	cp0.w     w0
    37ba:	1d 00 3a    	bra       NZ, 0x37f6 <.L155>

000037bc <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    37bc:	10 50 21    	mov.w     #0x1501, w0
    37be:	10 40 78    	mov.b     [w0], w0
    37c0:	00 80 fb    	ze        w0, w0
    37c2:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    37c4:	03 00 32    	bra       Z, 0x37cc <.L148>
    37c6:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    37c8:	0e 00 32    	bra       Z, 0x37e6 <.L149>

000037ca <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    37ca:	13 00 37    	bra       0x37f2 <.L143>

000037cc <.L148>:
    37cc:	20 50 21    	mov.w     #0x1502, w0
    37ce:	10 40 78    	mov.b     [w0], w0
    37d0:	00 80 fb    	ze        w0, w0
    37d2:	b0 24 88    	mov.w     w0, 0x496
    37d4:	b0 24 80    	mov.w     0x496, w0
    37d6:	00 00 e0    	cp0.w     w0
    37d8:	03 00 3a    	bra       NZ, 0x37e0 <.L153>

000037da <.LSM280>:
    37da:	10 c0 b3    	mov.b     #0x1, w0
    37dc:	40 e8 b7    	mov.b     WREG, 0x840

000037de <.LSM281>:
    37de:	02 00 37    	bra       0x37e4 <.L152>

000037e0 <.L153>:
    37e0:	20 c0 b3    	mov.b     #0x2, w0
    37e2:	40 e8 b7    	mov.b     WREG, 0x840

000037e4 <.L152>:
    37e4:	02 00 37    	bra       0x37ea <.L147>

000037e6 <.L149>:
    37e6:	30 00 07    	rcall     0x3848 <_SendDataPacket>

000037e8 <.LSM285>:
    37e8:	00 00 00    	nop       

000037ea <.L147>:
    37ea:	03 00 37    	bra       0x37f2 <.L143>

000037ec <.L146>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    37ec:	b7 05 07    	rcall     0x435c <_VendorRequestsIn>

000037ee <.LSM288>:
                    break;
    37ee:	01 00 37    	bra       0x37f2 <.L143>

000037f0 <.L154>:
    37f0:	00 00 00    	nop       

000037f2 <.L143>:
            }
            break;
    37f2:	00 00 00    	nop       
    37f4:	01 00 37    	bra       0x37f8 <.L140>

000037f6 <.L155>:
    37f6:	00 00 00    	nop       

000037f8 <.L140>:
    }
}
    37f8:	00 80 fa    	ulnk      
    37fa:	00 00 06    	return    

000037fc <_ProcessOutToken>:

void ProcessOutToken(void) {
    37fc:	00 00 fa    	lnk       #0x0

000037fe <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    37fe:	3f c8 bf    	mov.b     0x83f, WREG
    3800:	80 80 fb    	ze        w0, w1
    3802:	00 0f 20    	mov.w     #0xf0, w0
    3804:	00 80 60    	and.w     w1, w0, w0
    3806:	00 00 e0    	cp0.w     w0
    3808:	1d 00 3a    	bra       NZ, 0x3844 <.L156>

0000380a <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    380a:	00 50 21    	mov.w     #0x1500, w0
    380c:	10 40 78    	mov.b     [w0], w0
    380e:	80 80 fb    	ze        w0, w1
    3810:	00 06 20    	mov.w     #0x60, w0
    3812:	00 80 60    	and.w     w1, w0, w0
    3814:	01 02 20    	mov.w     #0x20, w1
    3816:	81 0f 50    	sub.w     w0, w1, [w15]
    3818:	05 00 32    	bra       Z, 0x3824 <.L163>
    381a:	01 04 20    	mov.w     #0x40, w1
    381c:	81 0f 50    	sub.w     w0, w1, [w15]
    381e:	04 00 3a    	bra       NZ, 0x3828 <.L164>

00003820 <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    3820:	a3 05 07    	rcall     0x4368 <_VendorRequestsOut>

00003822 <.LSM296>:
                    break;
    3822:	03 00 37    	bra       0x382a <.L159>

00003824 <.L163>:
    3824:	00 00 00    	nop       
    3826:	01 00 37    	bra       0x382a <.L159>

00003828 <.L164>:
    3828:	00 00 00    	nop       

0000382a <.L159>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    382a:	00 40 21    	mov.w     #0x1400, w0
    382c:	01 c4 b3    	mov.b     #0x40, w1
    382e:	01 48 78    	mov.b     w1, [w0]

00003830 <.LSM300>:
            BD[EP0OUT].status = 0x88;
    3830:	10 40 21    	mov.w     #0x1401, w0
    3832:	81 c8 b3    	mov.b     #0x88, w1
    3834:	01 48 78    	mov.b     w1, [w0]

00003836 <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    3836:	40 40 21    	mov.w     #0x1404, w0
    3838:	80 40 eb    	clr.b     w1
    383a:	01 48 78    	mov.b     w1, [w0]

0000383c <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    383c:	50 40 21    	mov.w     #0x1405, w0
    383e:	81 cc b3    	mov.b     #0xc8, w1
    3840:	01 48 78    	mov.b     w1, [w0]

00003842 <.LSM303>:
            break;
    3842:	00 00 00    	nop       

00003844 <.L156>:
    }
}
    3844:	00 80 fa    	ulnk      
    3846:	00 00 06    	return    

00003848 <_SendDataPacket>:

void SendDataPacket(void) {
    3848:	02 00 fa    	lnk       #0x2

0000384a <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    384a:	51 a8 80    	mov.w     0x150a, w1
    384c:	f0 03 20    	mov.w     #0x3f, w0
    384e:	80 8f 50    	sub.w     w1, w0, [w15]
    3850:	0b 00 3e    	bra       GTU, 0x3868 <.L166>

00003852 <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    3852:	50 a8 80    	mov.w     0x150a, w0
    3854:	00 4f 78    	mov.b     w0, [w14]

00003856 <.LSM308>:
        USB_request.bytes_left.w = 0;
    3856:	00 00 eb    	clr.w     w0
    3858:	50 a8 88    	mov.w     w0, 0x150a

0000385a <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    385a:	00 50 21    	mov.w     #0x1500, w0
    385c:	80 c0 eb    	setm.b    w1
    385e:	01 48 78    	mov.b     w1, [w0]

00003860 <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    3860:	10 50 21    	mov.w     #0x1501, w0
    3862:	80 c0 eb    	setm.b    w1
    3864:	01 48 78    	mov.b     w1, [w0]
    3866:	05 00 37    	bra       0x3872 <.L167>

00003868 <.L166>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    3868:	00 c4 b3    	mov.b     #0x40, w0
    386a:	00 4f 78    	mov.b     w0, [w14]

0000386c <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    386c:	50 a8 80    	mov.w     0x150a, w0
    386e:	00 04 b1    	sub.w     #0x40, w0
    3870:	50 a8 88    	mov.w     w0, 0x150a

00003872 <.L167>:
    }
    for (n = 0; n<packet_length; n++) {
    3872:	00 40 eb    	clr.b     w0
    3874:	10 47 98    	mov.b     w0, [w14+1]
    3876:	0c 00 37    	bra       0x3890 <.L168>

00003878 <.L169>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    3878:	31 a0 80    	mov.w     0x1406, w1
    387a:	1e 40 90    	mov.b     [w14+1], w0
    387c:	00 80 fb    	ze        w0, w0
    387e:	80 80 40    	add.w     w1, w0, w1
    3880:	40 a8 80    	mov.w     0x1508, w0
    3882:	10 41 78    	mov.b     [w0], w2
    3884:	82 48 78    	mov.b     w2, [w1]
    3886:	00 00 e8    	inc.w     w0, w0
    3888:	40 a8 88    	mov.w     w0, 0x1508

0000388a <.LSM315>:
    388a:	1e 40 90    	mov.b     [w14+1], w0
    388c:	00 40 e8    	inc.b     w0, w0
    388e:	10 47 98    	mov.b     w0, [w14+1]

00003890 <.L168>:
    3890:	1e 40 90    	mov.b     [w14+1], w0
    3892:	9e 4f 50    	sub.b     w0, [w14], [w15]
    3894:	f1 ff 39    	bra       NC, 0x3878 <.L169>

00003896 <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    3896:	40 40 21    	mov.w     #0x1404, w0
    3898:	1e 48 78    	mov.b     [w14], [w0]

0000389a <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    389a:	50 40 21    	mov.w     #0x1405, w0
    389c:	10 40 78    	mov.b     [w0], w0
    389e:	00 c0 ea    	com.b     w0, w0
    38a0:	02 c4 b3    	mov.b     #0x40, w2
    38a2:	82 40 60    	and.b     w0, w2, w1
    38a4:	80 c8 b3    	mov.b     #0x88, w0
    38a6:	00 c0 70    	ior.b     w1, w0, w0
    38a8:	80 40 78    	mov.b     w0, w1
    38aa:	50 40 21    	mov.w     #0x1405, w0
    38ac:	01 48 78    	mov.b     w1, [w0]

000038ae <.LSM318>:
}
    38ae:	00 80 fa    	ulnk      
    38b0:	00 00 06    	return    

000038b2 <__USB1Interrupt>:

//Making Service USB interrupt driven
void __attribute__((interrupt, auto_psv)) _USB1Interrupt(void) {
    38b2:	36 00 f8    	push      0x36
    38b4:	80 9f be    	mov.d     w0, [w15++]
    38b6:	82 9f be    	mov.d     w2, [w15++]
    38b8:	84 9f be    	mov.d     w4, [w15++]
    38ba:	86 9f be    	mov.d     w6, [w15++]
    38bc:	32 00 f8    	push      0x32
    38be:	34 00 f8    	push      0x34
    38c0:	10 00 20    	mov.w     #0x1, w0
    38c2:	a0 01 88    	mov.w     w0, 0x34
    38c4:	00 20 20    	mov.w     #0x200, w0
    38c6:	90 01 88    	mov.w     w0, 0x32
    38c8:	00 00 fa    	lnk       #0x0

000038ca <.LSM320>:
    IFS5bits.USB1IF = 0; //flag
    38ca:	8e c0 a9    	bclr.b    0x8e, #0x6

000038cc <.LSM321>:
    ServiceUSB();
    38cc:	fe fb 07    	rcall     0x30ca <_ServiceUSB>

000038ce <.LSM322>:
}
    38ce:	00 80 fa    	ulnk      
    38d0:	34 00 f9    	pop       0x34
    38d2:	32 00 f9    	pop       0x32
    38d4:	4f 03 be    	mov.d     [--w15], w6
    38d6:	4f 02 be    	mov.d     [--w15], w4
    38d8:	4f 01 be    	mov.d     [--w15], w2
    38da:	4f 00 be    	mov.d     [--w15], w0
    38dc:	36 00 f9    	pop       0x36
    38de:	00 40 06    	retfie    

000038e0 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    38e0:	02 00 fa    	lnk       #0x2
    38e2:	00 0f 78    	mov.w     w0, [w14]

000038e4 <.LSM1>:
    timer_lower(self);
    38e4:	1e 00 78    	mov.w     [w14], w0
    38e6:	01 02 07    	rcall     0x3cea <_timer_lower>

000038e8 <.LSM2>:
    if (self->every) {
    38e8:	1e 00 78    	mov.w     [w14], w0
    38ea:	10 08 90    	mov.w     [w0+18], w0
    38ec:	00 00 e0    	cp0.w     w0
    38ee:	05 00 32    	bra       Z, 0x38fa <.L2>

000038f0 <.LSM3>:
        self->every(self);
    38f0:	1e 00 78    	mov.w     [w14], w0
    38f2:	90 08 90    	mov.w     [w0+18], w1
    38f4:	1e 00 78    	mov.w     [w14], w0
    38f6:	01 00 01    	call      w1
    38f8:	1a 00 37    	bra       0x392e <.L1>

000038fa <.L2>:
    } else if (self->after) {
    38fa:	1e 00 78    	mov.w     [w14], w0
    38fc:	20 08 90    	mov.w     [w0+20], w0
    38fe:	00 00 e0    	cp0.w     w0
    3900:	14 00 32    	bra       Z, 0x392a <.L4>

00003902 <.LSM5>:
        if (self->aftercount) {
    3902:	1e 00 78    	mov.w     [w14], w0
    3904:	00 08 90    	mov.w     [w0+16], w0
    3906:	00 00 e0    	cp0.w     w0
    3908:	0a 00 32    	bra       Z, 0x391e <.L5>

0000390a <.LSM6>:
            self->after(self);
    390a:	1e 00 78    	mov.w     [w14], w0
    390c:	a0 08 90    	mov.w     [w0+20], w1
    390e:	1e 00 78    	mov.w     [w14], w0
    3910:	01 00 01    	call      w1

00003912 <.LSM7>:
            self->aftercount--;
    3912:	1e 00 78    	mov.w     [w14], w0
    3914:	00 08 90    	mov.w     [w0+16], w0
    3916:	80 00 e9    	dec.w     w0, w1
    3918:	1e 00 78    	mov.w     [w14], w0
    391a:	01 08 98    	mov.w     w1, [w0+16]
    391c:	08 00 37    	bra       0x392e <.L1>

0000391e <.L5>:
        } else {
            timer_disableInterrupt(self);
    391e:	1e 00 78    	mov.w     [w14], w0
    3920:	0c 02 07    	rcall     0x3d3a <_timer_disableInterrupt>

00003922 <.LSM9>:
            self->after = NULL;
    3922:	1e 00 78    	mov.w     [w14], w0
    3924:	80 00 eb    	clr.w     w1
    3926:	21 08 98    	mov.w     w1, [w0+20]
    3928:	02 00 37    	bra       0x392e <.L1>

0000392a <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    392a:	1e 00 78    	mov.w     [w14], w0
    392c:	06 02 07    	rcall     0x3d3a <_timer_disableInterrupt>

0000392e <.L1>:
    }
}
    392e:	00 80 fa    	ulnk      
    3930:	00 00 06    	return    

00003932 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    3932:	36 00 f8    	push      0x36
    3934:	80 9f be    	mov.d     w0, [w15++]
    3936:	82 9f be    	mov.d     w2, [w15++]
    3938:	84 9f be    	mov.d     w4, [w15++]
    393a:	86 9f be    	mov.d     w6, [w15++]
    393c:	32 00 f8    	push      0x32
    393e:	34 00 f8    	push      0x34
    3940:	10 00 20    	mov.w     #0x1, w0
    3942:	a0 01 88    	mov.w     w0, 0x34
    3944:	00 20 20    	mov.w     #0x200, w0
    3946:	90 01 88    	mov.w     w0, 0x32
    3948:	00 00 fa    	lnk       #0x0

0000394a <.LSM13>:
    timer_serviceInterrupt(&timer1);
    394a:	c0 50 21    	mov.w     #0x150c, w0
    394c:	c9 ff 07    	rcall     0x38e0 <_timer_serviceInterrupt>

0000394e <.LSM14>:
}
    394e:	00 80 fa    	ulnk      
    3950:	34 00 f9    	pop       0x34
    3952:	32 00 f9    	pop       0x32
    3954:	4f 03 be    	mov.d     [--w15], w6
    3956:	4f 02 be    	mov.d     [--w15], w4
    3958:	4f 01 be    	mov.d     [--w15], w2
    395a:	4f 00 be    	mov.d     [--w15], w0
    395c:	36 00 f9    	pop       0x36
    395e:	00 40 06    	retfie    

00003960 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    3960:	36 00 f8    	push      0x36
    3962:	80 9f be    	mov.d     w0, [w15++]
    3964:	82 9f be    	mov.d     w2, [w15++]
    3966:	84 9f be    	mov.d     w4, [w15++]
    3968:	86 9f be    	mov.d     w6, [w15++]
    396a:	32 00 f8    	push      0x32
    396c:	34 00 f8    	push      0x34
    396e:	10 00 20    	mov.w     #0x1, w0
    3970:	a0 01 88    	mov.w     w0, 0x34
    3972:	00 20 20    	mov.w     #0x200, w0
    3974:	90 01 88    	mov.w     w0, 0x32
    3976:	00 00 fa    	lnk       #0x0

00003978 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    3978:	20 52 21    	mov.w     #0x1522, w0
    397a:	b2 ff 07    	rcall     0x38e0 <_timer_serviceInterrupt>

0000397c <.LSM17>:
}
    397c:	00 80 fa    	ulnk      
    397e:	34 00 f9    	pop       0x34
    3980:	32 00 f9    	pop       0x32
    3982:	4f 03 be    	mov.d     [--w15], w6
    3984:	4f 02 be    	mov.d     [--w15], w4
    3986:	4f 01 be    	mov.d     [--w15], w2
    3988:	4f 00 be    	mov.d     [--w15], w0
    398a:	36 00 f9    	pop       0x36
    398c:	00 40 06    	retfie    

0000398e <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    398e:	36 00 f8    	push      0x36
    3990:	80 9f be    	mov.d     w0, [w15++]
    3992:	82 9f be    	mov.d     w2, [w15++]
    3994:	84 9f be    	mov.d     w4, [w15++]
    3996:	86 9f be    	mov.d     w6, [w15++]
    3998:	32 00 f8    	push      0x32
    399a:	34 00 f8    	push      0x34
    399c:	10 00 20    	mov.w     #0x1, w0
    399e:	a0 01 88    	mov.w     w0, 0x34
    39a0:	00 20 20    	mov.w     #0x200, w0
    39a2:	90 01 88    	mov.w     w0, 0x32
    39a4:	00 00 fa    	lnk       #0x0

000039a6 <.LSM19>:
    timer_serviceInterrupt(&timer3);
    39a6:	80 53 21    	mov.w     #0x1538, w0
    39a8:	9b ff 07    	rcall     0x38e0 <_timer_serviceInterrupt>

000039aa <.LSM20>:
}
    39aa:	00 80 fa    	ulnk      
    39ac:	34 00 f9    	pop       0x34
    39ae:	32 00 f9    	pop       0x32
    39b0:	4f 03 be    	mov.d     [--w15], w6
    39b2:	4f 02 be    	mov.d     [--w15], w4
    39b4:	4f 01 be    	mov.d     [--w15], w2
    39b6:	4f 00 be    	mov.d     [--w15], w0
    39b8:	36 00 f9    	pop       0x36
    39ba:	00 40 06    	retfie    

000039bc <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    39bc:	36 00 f8    	push      0x36
    39be:	80 9f be    	mov.d     w0, [w15++]
    39c0:	82 9f be    	mov.d     w2, [w15++]
    39c2:	84 9f be    	mov.d     w4, [w15++]
    39c4:	86 9f be    	mov.d     w6, [w15++]
    39c6:	32 00 f8    	push      0x32
    39c8:	34 00 f8    	push      0x34
    39ca:	10 00 20    	mov.w     #0x1, w0
    39cc:	a0 01 88    	mov.w     w0, 0x34
    39ce:	00 20 20    	mov.w     #0x200, w0
    39d0:	90 01 88    	mov.w     w0, 0x32
    39d2:	00 00 fa    	lnk       #0x0

000039d4 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    39d4:	e0 54 21    	mov.w     #0x154e, w0
    39d6:	84 ff 07    	rcall     0x38e0 <_timer_serviceInterrupt>

000039d8 <.LSM23>:
}
    39d8:	00 80 fa    	ulnk      
    39da:	34 00 f9    	pop       0x34
    39dc:	32 00 f9    	pop       0x32
    39de:	4f 03 be    	mov.d     [--w15], w6
    39e0:	4f 02 be    	mov.d     [--w15], w4
    39e2:	4f 01 be    	mov.d     [--w15], w2
    39e4:	4f 00 be    	mov.d     [--w15], w0
    39e6:	36 00 f9    	pop       0x36
    39e8:	00 40 06    	retfie    

000039ea <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    39ea:	36 00 f8    	push      0x36
    39ec:	80 9f be    	mov.d     w0, [w15++]
    39ee:	82 9f be    	mov.d     w2, [w15++]
    39f0:	84 9f be    	mov.d     w4, [w15++]
    39f2:	86 9f be    	mov.d     w6, [w15++]
    39f4:	32 00 f8    	push      0x32
    39f6:	34 00 f8    	push      0x34
    39f8:	10 00 20    	mov.w     #0x1, w0
    39fa:	a0 01 88    	mov.w     w0, 0x34
    39fc:	00 20 20    	mov.w     #0x200, w0
    39fe:	90 01 88    	mov.w     w0, 0x32
    3a00:	00 00 fa    	lnk       #0x0

00003a02 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    3a02:	40 56 21    	mov.w     #0x1564, w0
    3a04:	6d ff 07    	rcall     0x38e0 <_timer_serviceInterrupt>

00003a06 <.LSM26>:
}
    3a06:	00 80 fa    	ulnk      
    3a08:	34 00 f9    	pop       0x34
    3a0a:	32 00 f9    	pop       0x32
    3a0c:	4f 03 be    	mov.d     [--w15], w6
    3a0e:	4f 02 be    	mov.d     [--w15], w4
    3a10:	4f 01 be    	mov.d     [--w15], w2
    3a12:	4f 00 be    	mov.d     [--w15], w0
    3a14:	36 00 f9    	pop       0x36
    3a16:	00 40 06    	retfie    

00003a18 <_init_timer>:

void init_timer(void) {
    3a18:	00 00 fa    	lnk       #0x0

00003a1a <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    3a1a:	b0 00 20    	mov.w     #0xb, w0
    3a1c:	80 1f 78    	mov.w     w0, [w15++]
    3a1e:	47 00 20    	mov.w     #0x4, w7
    3a20:	36 c0 b3    	mov.b     #0x3, w6
    3a22:	45 09 20    	mov.w     #0x94, w5
    3a24:	44 08 20    	mov.w     #0x84, w4
    3a26:	03 10 20    	mov.w     #0x100, w3
    3a28:	22 10 20    	mov.w     #0x102, w2
    3a2a:	41 10 20    	mov.w     #0x104, w1
    3a2c:	c0 50 21    	mov.w     #0x150c, w0
    3a2e:	33 00 07    	rcall     0x3a96 <_timer_init>
    3a30:	8f 87 e9    	dec2.w    w15, w15

00003a32 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    3a32:	c0 00 20    	mov.w     #0xc, w0
    3a34:	80 1f 78    	mov.w     w0, [w15++]
    3a36:	80 03 eb    	clr.w     w7
    3a38:	76 c0 b3    	mov.b     #0x7, w6
    3a3a:	45 09 20    	mov.w     #0x94, w5
    3a3c:	44 08 20    	mov.w     #0x84, w4
    3a3e:	63 10 20    	mov.w     #0x106, w3
    3a40:	c2 10 20    	mov.w     #0x10c, w2
    3a42:	01 11 20    	mov.w     #0x110, w1
    3a44:	20 52 21    	mov.w     #0x1522, w0
    3a46:	27 00 07    	rcall     0x3a96 <_timer_init>
    3a48:	8f 87 e9    	dec2.w    w15, w15

00003a4a <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    3a4a:	d0 00 20    	mov.w     #0xd, w0
    3a4c:	80 1f 78    	mov.w     w0, [w15++]
    3a4e:	17 00 20    	mov.w     #0x1, w7
    3a50:	86 c0 b3    	mov.b     #0x8, w6
    3a52:	45 09 20    	mov.w     #0x94, w5
    3a54:	44 08 20    	mov.w     #0x84, w4
    3a56:	a3 10 20    	mov.w     #0x10a, w3
    3a58:	e2 10 20    	mov.w     #0x10e, w2
    3a5a:	21 11 20    	mov.w     #0x112, w1
    3a5c:	80 53 21    	mov.w     #0x1538, w0
    3a5e:	1b 00 07    	rcall     0x3a96 <_timer_init>
    3a60:	8f 87 e9    	dec2.w    w15, w15

00003a62 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    3a62:	e0 00 20    	mov.w     #0xe, w0
    3a64:	80 1f 78    	mov.w     w0, [w15++]
    3a66:	27 00 20    	mov.w     #0x2, w7
    3a68:	b6 c0 b3    	mov.b     #0xb, w6
    3a6a:	65 09 20    	mov.w     #0x96, w5
    3a6c:	64 08 20    	mov.w     #0x86, w4
    3a6e:	43 11 20    	mov.w     #0x114, w3
    3a70:	a2 11 20    	mov.w     #0x11a, w2
    3a72:	e1 11 20    	mov.w     #0x11e, w1
    3a74:	e0 54 21    	mov.w     #0x154e, w0
    3a76:	0f 00 07    	rcall     0x3a96 <_timer_init>
    3a78:	8f 87 e9    	dec2.w    w15, w15

00003a7a <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    3a7a:	f0 00 20    	mov.w     #0xf, w0
    3a7c:	80 1f 78    	mov.w     w0, [w15++]
    3a7e:	37 00 20    	mov.w     #0x3, w7
    3a80:	c6 c0 b3    	mov.b     #0xc, w6
    3a82:	65 09 20    	mov.w     #0x96, w5
    3a84:	64 08 20    	mov.w     #0x86, w4
    3a86:	83 11 20    	mov.w     #0x118, w3
    3a88:	c2 11 20    	mov.w     #0x11c, w2
    3a8a:	01 12 20    	mov.w     #0x120, w1
    3a8c:	40 56 21    	mov.w     #0x1564, w0
    3a8e:	03 00 07    	rcall     0x3a96 <_timer_init>
    3a90:	8f 87 e9    	dec2.w    w15, w15

00003a92 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    3a92:	00 80 fa    	ulnk      
    3a94:	00 00 06    	return    

00003a96 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    3a96:	10 00 fa    	lnk       #0x10
    3a98:	00 0f 78    	mov.w     w0, [w14]
    3a9a:	11 07 98    	mov.w     w1, [w14+2]
    3a9c:	22 07 98    	mov.w     w2, [w14+4]
    3a9e:	33 07 98    	mov.w     w3, [w14+6]
    3aa0:	44 07 98    	mov.w     w4, [w14+8]
    3aa2:	55 07 98    	mov.w     w5, [w14+10]
    3aa4:	46 4f 98    	mov.b     w6, [w14+12]
    3aa6:	77 07 98    	mov.w     w7, [w14+14]

00003aa8 <.LSM35>:
    self->TxCON = TxCON;
    3aa8:	1e 00 78    	mov.w     [w14], w0
    3aaa:	9e 00 90    	mov.w     [w14+2], w1
    3aac:	01 08 78    	mov.w     w1, [w0]

00003aae <.LSM36>:
    self->PRx = PRx;
    3aae:	1e 00 78    	mov.w     [w14], w0
    3ab0:	ae 00 90    	mov.w     [w14+4], w1
    3ab2:	11 00 98    	mov.w     w1, [w0+2]

00003ab4 <.LSM37>:
    self->TMRx = TMRx;
    3ab4:	1e 00 78    	mov.w     [w14], w0
    3ab6:	be 00 90    	mov.w     [w14+6], w1
    3ab8:	21 00 98    	mov.w     w1, [w0+4]

00003aba <.LSM38>:
    self->IFSy = IFSy;
    3aba:	1e 00 78    	mov.w     [w14], w0
    3abc:	ce 00 90    	mov.w     [w14+8], w1
    3abe:	31 00 98    	mov.w     w1, [w0+6]

00003ac0 <.LSM39>:
    self->IECy = IECy;
    3ac0:	1e 00 78    	mov.w     [w14], w0
    3ac2:	de 00 90    	mov.w     [w14+10], w1
    3ac4:	41 00 98    	mov.w     w1, [w0+8]

00003ac6 <.LSM40>:
    self->flagbit = flagbit;
    3ac6:	1e 00 78    	mov.w     [w14], w0
    3ac8:	ce 48 90    	mov.b     [w14+12], w1
    3aca:	21 48 98    	mov.b     w1, [w0+10]

00003acc <.LSM41>:
    self->octselnum = octselnum;
    3acc:	1e 00 78    	mov.w     [w14], w0
    3ace:	fe 00 90    	mov.w     [w14+14], w1
    3ad0:	61 00 98    	mov.w     w1, [w0+12]

00003ad2 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    3ad2:	1e 00 78    	mov.w     [w14], w0
    3ad4:	ce b8 97    	mov.w     [w14-8], w1
    3ad6:	71 00 98    	mov.w     w1, [w0+14]

00003ad8 <.LSM43>:
    self->aftercount = 0;
    3ad8:	1e 00 78    	mov.w     [w14], w0
    3ada:	80 00 eb    	clr.w     w1
    3adc:	01 08 98    	mov.w     w1, [w0+16]

00003ade <.LSM44>:
    self->every = NULL;
    3ade:	1e 00 78    	mov.w     [w14], w0
    3ae0:	80 00 eb    	clr.w     w1
    3ae2:	11 08 98    	mov.w     w1, [w0+18]

00003ae4 <.LSM45>:
    self->after = NULL;
    3ae4:	1e 00 78    	mov.w     [w14], w0
    3ae6:	80 00 eb    	clr.w     w1
    3ae8:	21 08 98    	mov.w     w1, [w0+20]

00003aea <.LSM46>:
}
    3aea:	00 80 fa    	ulnk      
    3aec:	00 00 06    	return    

00003aee <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    3aee:	06 00 fa    	lnk       #0x6
    3af0:	88 1f 78    	mov.w     w8, [w15++]
    3af2:	00 0f 78    	mov.w     w0, [w14]
    3af4:	12 07 98    	mov.w     w2, [w14+2]
    3af6:	23 07 98    	mov.w     w3, [w14+4]

00003af8 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    3af8:	18 c0 b3    	mov.b     #0x1, w8
    3afa:	d2 7b 23    	mov.w     #0x37bd, w2
    3afc:	63 f8 23    	mov.w     #0x3f86, w3
    3afe:	1e 00 90    	mov.w     [w14+2], w0
    3b00:	ae 00 90    	mov.w     [w14+4], w1
    3b02:	21 ec 07    	rcall     0x1346 <___gesf2>
    3b04:	00 00 e0    	cp0.w     w0
    3b06:	01 00 3c    	bra       GT, 0x3b0a <.L14>
    3b08:	00 44 eb    	clr.b     w8

00003b0a <.L14>:
    3b0a:	08 04 e0    	cp0.b     w8
    3b0c:	69 00 3a    	bra       NZ, 0x3be0 <.L23>

00003b0e <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    3b0e:	18 c0 b3    	mov.b     #0x1, w8
    3b10:	d2 7b 23    	mov.w     #0x37bd, w2
    3b12:	63 e8 23    	mov.w     #0x3e86, w3
    3b14:	1e 00 90    	mov.w     [w14+2], w0
    3b16:	ae 00 90    	mov.w     [w14+4], w1
    3b18:	16 ec 07    	rcall     0x1346 <___gesf2>
    3b1a:	00 00 e0    	cp0.w     w0
    3b1c:	01 00 3c    	bra       GT, 0x3b20 <.L17>
    3b1e:	00 44 eb    	clr.b     w8

00003b20 <.L17>:
    3b20:	08 04 e0    	cp0.b     w8
    3b22:	12 00 32    	bra       Z, 0x3b48 <.L18>

00003b24 <.LSM50>:
        timer_stop(self);
    3b24:	1e 00 78    	mov.w     [w14], w0
    3b26:	c4 00 07    	rcall     0x3cb0 <_timer_stop>

00003b28 <.LSM51>:
        poke(self->TxCON, 0x0030);
    3b28:	1e 00 78    	mov.w     [w14], w0
    3b2a:	10 00 78    	mov.w     [w0], w0
    3b2c:	01 03 20    	mov.w     #0x30, w1
    3b2e:	01 08 78    	mov.w     w1, [w0]

00003b30 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    3b30:	1e 00 78    	mov.w     [w14], w0
    3b32:	10 04 90    	mov.w     [w0+2], w8
    3b34:	02 40 22    	mov.w     #0x2400, w2
    3b36:	43 77 24    	mov.w     #0x4774, w3
    3b38:	1e 00 90    	mov.w     [w14+2], w0
    3b3a:	ae 00 90    	mov.w     [w14+4], w1
    3b3c:	76 ec 07    	rcall     0x142a <___mulsf3>
    3b3e:	05 ec 07    	rcall     0x134a <___fixunssfsi>
    3b40:	00 00 78    	mov.w     w0, w0
    3b42:	00 00 e9    	dec.w     w0, w0
    3b44:	00 0c 78    	mov.w     w0, [w8]
    3b46:	4d 00 37    	bra       0x3be2 <.L13>

00003b48 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    3b48:	18 c0 b3    	mov.b     #0x1, w8
    3b4a:	d2 7b 23    	mov.w     #0x37bd, w2
    3b4c:	63 d0 23    	mov.w     #0x3d06, w3
    3b4e:	1e 00 90    	mov.w     [w14+2], w0
    3b50:	ae 00 90    	mov.w     [w14+4], w1
    3b52:	f9 eb 07    	rcall     0x1346 <___gesf2>
    3b54:	00 00 e0    	cp0.w     w0
    3b56:	01 00 3c    	bra       GT, 0x3b5a <.L19>
    3b58:	00 44 eb    	clr.b     w8

00003b5a <.L19>:
    3b5a:	08 04 e0    	cp0.b     w8
    3b5c:	12 00 32    	bra       Z, 0x3b82 <.L20>

00003b5e <.LSM54>:
        timer_stop(self);
    3b5e:	1e 00 78    	mov.w     [w14], w0
    3b60:	a7 00 07    	rcall     0x3cb0 <_timer_stop>

00003b62 <.LSM55>:
        poke(self->TxCON, 0x0020);
    3b62:	1e 00 78    	mov.w     [w14], w0
    3b64:	10 00 78    	mov.w     [w0], w0
    3b66:	01 02 20    	mov.w     #0x20, w1
    3b68:	01 08 78    	mov.w     w1, [w0]

00003b6a <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    3b6a:	1e 00 78    	mov.w     [w14], w0
    3b6c:	10 04 90    	mov.w     [w0+2], w8
    3b6e:	02 40 22    	mov.w     #0x2400, w2
    3b70:	43 87 24    	mov.w     #0x4874, w3
    3b72:	1e 00 90    	mov.w     [w14+2], w0
    3b74:	ae 00 90    	mov.w     [w14+4], w1
    3b76:	59 ec 07    	rcall     0x142a <___mulsf3>
    3b78:	e8 eb 07    	rcall     0x134a <___fixunssfsi>
    3b7a:	00 00 78    	mov.w     w0, w0
    3b7c:	00 00 e9    	dec.w     w0, w0
    3b7e:	00 0c 78    	mov.w     w0, [w8]
    3b80:	30 00 37    	bra       0x3be2 <.L13>

00003b82 <.L20>:
    } else if (period>(65536.*TCY)) {
    3b82:	18 c0 b3    	mov.b     #0x1, w8
    3b84:	d2 7b 23    	mov.w     #0x37bd, w2
    3b86:	63 b8 23    	mov.w     #0x3b86, w3
    3b88:	1e 00 90    	mov.w     [w14+2], w0
    3b8a:	ae 00 90    	mov.w     [w14+4], w1
    3b8c:	dc eb 07    	rcall     0x1346 <___gesf2>
    3b8e:	00 00 e0    	cp0.w     w0
    3b90:	01 00 3c    	bra       GT, 0x3b94 <.L21>
    3b92:	00 44 eb    	clr.b     w8

00003b94 <.L21>:
    3b94:	08 04 e0    	cp0.b     w8
    3b96:	12 00 32    	bra       Z, 0x3bbc <.L22>

00003b98 <.LSM58>:
        timer_stop(self);
    3b98:	1e 00 78    	mov.w     [w14], w0
    3b9a:	8a 00 07    	rcall     0x3cb0 <_timer_stop>

00003b9c <.LSM59>:
        poke(self->TxCON, 0x0010);
    3b9c:	1e 00 78    	mov.w     [w14], w0
    3b9e:	10 00 78    	mov.w     [w0], w0
    3ba0:	01 01 20    	mov.w     #0x10, w1
    3ba2:	01 08 78    	mov.w     w1, [w0]

00003ba4 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3ba4:	1e 00 78    	mov.w     [w14], w0
    3ba6:	10 04 90    	mov.w     [w0+2], w8
    3ba8:	02 40 22    	mov.w     #0x2400, w2
    3baa:	43 9f 24    	mov.w     #0x49f4, w3
    3bac:	1e 00 90    	mov.w     [w14+2], w0
    3bae:	ae 00 90    	mov.w     [w14+4], w1
    3bb0:	3c ec 07    	rcall     0x142a <___mulsf3>
    3bb2:	cb eb 07    	rcall     0x134a <___fixunssfsi>
    3bb4:	00 00 78    	mov.w     w0, w0
    3bb6:	00 00 e9    	dec.w     w0, w0
    3bb8:	00 0c 78    	mov.w     w0, [w8]
    3bba:	13 00 37    	bra       0x3be2 <.L13>

00003bbc <.L22>:
    } else {
        timer_stop(self);
    3bbc:	1e 00 78    	mov.w     [w14], w0
    3bbe:	78 00 07    	rcall     0x3cb0 <_timer_stop>

00003bc0 <.LSM62>:
        poke(self->TxCON, 0x0000);
    3bc0:	1e 00 78    	mov.w     [w14], w0
    3bc2:	10 00 78    	mov.w     [w0], w0
    3bc4:	80 00 eb    	clr.w     w1
    3bc6:	01 08 78    	mov.w     w1, [w0]

00003bc8 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    3bc8:	1e 00 78    	mov.w     [w14], w0
    3bca:	10 04 90    	mov.w     [w0+2], w8
    3bcc:	02 40 22    	mov.w     #0x2400, w2
    3bce:	43 b7 24    	mov.w     #0x4b74, w3
    3bd0:	1e 00 90    	mov.w     [w14+2], w0
    3bd2:	ae 00 90    	mov.w     [w14+4], w1
    3bd4:	2a ec 07    	rcall     0x142a <___mulsf3>
    3bd6:	b9 eb 07    	rcall     0x134a <___fixunssfsi>
    3bd8:	00 00 78    	mov.w     w0, w0
    3bda:	00 00 e9    	dec.w     w0, w0
    3bdc:	00 0c 78    	mov.w     w0, [w8]
    3bde:	01 00 37    	bra       0x3be2 <.L13>

00003be0 <.L23>:
    3be0:	00 00 00    	nop       

00003be2 <.L13>:
    }
}
    3be2:	4f 04 78    	mov.w     [--w15], w8
    3be4:	00 80 fa    	ulnk      
    3be6:	00 00 06    	return    

00003be8 <_timer_period>:

float timer_period(_TIMER *self) {
    3be8:	04 00 fa    	lnk       #0x4
    3bea:	88 9f be    	mov.d     w8, [w15++]
    3bec:	10 07 98    	mov.w     w0, [w14+2]

00003bee <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3bee:	1e 00 90    	mov.w     [w14+2], w0
    3bf0:	10 00 78    	mov.w     [w0], w0
    3bf2:	90 00 78    	mov.w     [w0], w1
    3bf4:	00 03 20    	mov.w     #0x30, w0
    3bf6:	00 80 60    	and.w     w1, w0, w0
    3bf8:	44 00 de    	lsr.w     w0, #0x4, w0
    3bfa:	00 0f 78    	mov.w     w0, [w14]

00003bfc <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3bfc:	1e 00 78    	mov.w     [w14], w0
    3bfe:	c2 00 dd    	sl.w      w0, #0x2, w1
    3c00:	a0 3e 21    	mov.w     #0x13ea, w0
    3c02:	00 80 40    	add.w     w1, w0, w0
    3c04:	10 04 be    	mov.d     [w0], w8
    3c06:	1e 00 90    	mov.w     [w14+2], w0
    3c08:	10 00 90    	mov.w     [w0+2], w0
    3c0a:	10 00 78    	mov.w     [w0], w0
    3c0c:	80 00 eb    	clr.w     w1
    3c0e:	b8 eb 07    	rcall     0x1380 <___floatunsisf>
    3c10:	02 00 20    	mov.w     #0x0, w2
    3c12:	03 f8 23    	mov.w     #0x3f80, w3
    3c14:	f7 ea 07    	rcall     0x1204 <___addsf3>
    3c16:	00 01 be    	mov.d     w0, w2
    3c18:	08 00 be    	mov.d     w8, w0
    3c1a:	07 ec 07    	rcall     0x142a <___mulsf3>

00003c1c <.LSM69>:
}
    3c1c:	4f 04 be    	mov.d     [--w15], w8
    3c1e:	00 80 fa    	ulnk      
    3c20:	00 00 06    	return    

00003c22 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    3c22:	06 00 fa    	lnk       #0x6
    3c24:	00 0f 78    	mov.w     w0, [w14]
    3c26:	12 07 98    	mov.w     w2, [w14+2]
    3c28:	23 07 98    	mov.w     w3, [w14+4]

00003c2a <.LSM71>:
    timer_setPeriod(self, 1./freq);
    3c2a:	1e 01 90    	mov.w     [w14+2], w2
    3c2c:	ae 01 90    	mov.w     [w14+4], w3
    3c2e:	00 00 20    	mov.w     #0x0, w0
    3c30:	01 f8 23    	mov.w     #0x3f80, w1
    3c32:	45 eb 07    	rcall     0x12be <___divsf3>
    3c34:	00 01 be    	mov.d     w0, w2
    3c36:	1e 00 78    	mov.w     [w14], w0
    3c38:	5a ff 07    	rcall     0x3aee <_timer_setPeriod>

00003c3a <.LSM72>:
}
    3c3a:	00 80 fa    	ulnk      
    3c3c:	00 00 06    	return    

00003c3e <_timer_freq>:

float timer_freq(_TIMER *self) {
    3c3e:	02 00 fa    	lnk       #0x2
    3c40:	00 0f 78    	mov.w     w0, [w14]

00003c42 <.LSM74>:
    return 1./timer_period(self);
    3c42:	1e 00 78    	mov.w     [w14], w0
    3c44:	d1 ff 07    	rcall     0x3be8 <_timer_period>
    3c46:	00 01 be    	mov.d     w0, w2
    3c48:	00 00 20    	mov.w     #0x0, w0
    3c4a:	01 f8 23    	mov.w     #0x3f80, w1
    3c4c:	38 eb 07    	rcall     0x12be <___divsf3>

00003c4e <.LSM75>:
}
    3c4e:	00 80 fa    	ulnk      
    3c50:	00 00 06    	return    

00003c52 <_timer_time>:

float timer_time(_TIMER *self) {
    3c52:	04 00 fa    	lnk       #0x4
    3c54:	88 9f be    	mov.d     w8, [w15++]
    3c56:	10 07 98    	mov.w     w0, [w14+2]

00003c58 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3c58:	1e 00 90    	mov.w     [w14+2], w0
    3c5a:	10 00 78    	mov.w     [w0], w0
    3c5c:	90 00 78    	mov.w     [w0], w1
    3c5e:	00 03 20    	mov.w     #0x30, w0
    3c60:	00 80 60    	and.w     w1, w0, w0
    3c62:	44 00 de    	lsr.w     w0, #0x4, w0
    3c64:	00 0f 78    	mov.w     w0, [w14]

00003c66 <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3c66:	1e 00 78    	mov.w     [w14], w0
    3c68:	c2 00 dd    	sl.w      w0, #0x2, w1
    3c6a:	a0 3e 21    	mov.w     #0x13ea, w0
    3c6c:	00 80 40    	add.w     w1, w0, w0
    3c6e:	10 04 be    	mov.d     [w0], w8
    3c70:	1e 00 90    	mov.w     [w14+2], w0
    3c72:	10 00 90    	mov.w     [w0+2], w0
    3c74:	10 00 78    	mov.w     [w0], w0
    3c76:	80 00 eb    	clr.w     w1
    3c78:	83 eb 07    	rcall     0x1380 <___floatunsisf>
    3c7a:	02 00 20    	mov.w     #0x0, w2
    3c7c:	03 f8 23    	mov.w     #0x3f80, w3
    3c7e:	c2 ea 07    	rcall     0x1204 <___addsf3>
    3c80:	00 01 be    	mov.d     w0, w2
    3c82:	08 00 be    	mov.d     w8, w0
    3c84:	d2 eb 07    	rcall     0x142a <___mulsf3>

00003c86 <.LSM79>:
}
    3c86:	4f 04 be    	mov.d     [--w15], w8
    3c88:	00 80 fa    	ulnk      
    3c8a:	00 00 06    	return    

00003c8c <_timer_start>:

void timer_start(_TIMER *self) {
    3c8c:	02 00 fa    	lnk       #0x2
    3c8e:	00 0f 78    	mov.w     w0, [w14]

00003c90 <.LSM81>:
    timer_lower(self);
    3c90:	1e 00 78    	mov.w     [w14], w0
    3c92:	2b 00 07    	rcall     0x3cea <_timer_lower>

00003c94 <.LSM82>:
    poke(self->TMRx, 0);
    3c94:	1e 00 78    	mov.w     [w14], w0
    3c96:	20 00 90    	mov.w     [w0+4], w0
    3c98:	80 00 eb    	clr.w     w1
    3c9a:	01 08 78    	mov.w     w1, [w0]

00003c9c <.LSM83>:
    bitset(self->TxCON, 15);
    3c9c:	1e 00 78    	mov.w     [w14], w0
    3c9e:	10 00 78    	mov.w     [w0], w0
    3ca0:	9e 00 78    	mov.w     [w14], w1
    3ca2:	91 00 78    	mov.w     [w1], w1
    3ca4:	11 01 78    	mov.w     [w1], w2
    3ca6:	01 00 28    	mov.w     #0x8000, w1
    3ca8:	82 80 70    	ior.w     w1, w2, w1
    3caa:	01 08 78    	mov.w     w1, [w0]

00003cac <.LSM84>:
}
    3cac:	00 80 fa    	ulnk      
    3cae:	00 00 06    	return    

00003cb0 <_timer_stop>:

void timer_stop(_TIMER *self) {
    3cb0:	02 00 fa    	lnk       #0x2
    3cb2:	00 0f 78    	mov.w     w0, [w14]

00003cb4 <.LSM86>:
    bitclear(self->TxCON, 15);
    3cb4:	1e 00 78    	mov.w     [w14], w0
    3cb6:	10 00 78    	mov.w     [w0], w0
    3cb8:	9e 00 78    	mov.w     [w14], w1
    3cba:	91 00 78    	mov.w     [w1], w1
    3cbc:	11 01 78    	mov.w     [w1], w2
    3cbe:	f1 ff 27    	mov.w     #0x7fff, w1
    3cc0:	81 00 61    	and.w     w2, w1, w1
    3cc2:	01 08 78    	mov.w     w1, [w0]

00003cc4 <.LSM87>:
}
    3cc4:	00 80 fa    	ulnk      
    3cc6:	00 00 06    	return    

00003cc8 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    3cc8:	02 00 fa    	lnk       #0x2
    3cca:	00 0f 78    	mov.w     w0, [w14]

00003ccc <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    3ccc:	1e 00 78    	mov.w     [w14], w0
    3cce:	30 00 90    	mov.w     [w0+6], w0
    3cd0:	90 00 78    	mov.w     [w0], w1
    3cd2:	1e 00 78    	mov.w     [w14], w0
    3cd4:	20 48 90    	mov.b     [w0+10], w0
    3cd6:	00 80 fb    	ze        w0, w0
    3cd8:	12 00 20    	mov.w     #0x1, w2
    3cda:	00 10 dd    	sl.w      w2, w0, w0
    3cdc:	00 80 60    	and.w     w1, w0, w0
    3cde:	00 f0 a7    	btsc.w    w0, #0xf
    3ce0:	00 00 ea    	neg.w     w0, w0
    3ce2:	00 00 ea    	neg.w     w0, w0
    3ce4:	4f 00 de    	lsr.w     w0, #0xf, w0

00003ce6 <.LSM90>:
}
    3ce6:	00 80 fa    	ulnk      
    3ce8:	00 00 06    	return    

00003cea <_timer_lower>:

void timer_lower(_TIMER *self) {
    3cea:	02 00 fa    	lnk       #0x2
    3cec:	00 0f 78    	mov.w     w0, [w14]

00003cee <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3cee:	1e 00 78    	mov.w     [w14], w0
    3cf0:	30 00 90    	mov.w     [w0+6], w0
    3cf2:	9e 00 78    	mov.w     [w14], w1
    3cf4:	b1 00 90    	mov.w     [w1+6], w1
    3cf6:	11 01 78    	mov.w     [w1], w2
    3cf8:	9e 00 78    	mov.w     [w14], w1
    3cfa:	a1 48 90    	mov.b     [w1+10], w1
    3cfc:	81 80 fb    	ze        w1, w1
    3cfe:	13 00 20    	mov.w     #0x1, w3
    3d00:	81 18 dd    	sl.w      w3, w1, w1
    3d02:	81 80 ea    	com.w     w1, w1
    3d04:	81 00 61    	and.w     w2, w1, w1
    3d06:	01 08 78    	mov.w     w1, [w0]

00003d08 <.LSM93>:
}
    3d08:	00 80 fa    	ulnk      
    3d0a:	00 00 06    	return    

00003d0c <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    3d0c:	02 00 fa    	lnk       #0x2
    3d0e:	00 0f 78    	mov.w     w0, [w14]

00003d10 <.LSM95>:
    return peek(self->TMRx);
    3d10:	1e 00 78    	mov.w     [w14], w0
    3d12:	20 00 90    	mov.w     [w0+4], w0
    3d14:	10 00 78    	mov.w     [w0], w0

00003d16 <.LSM96>:
}
    3d16:	00 80 fa    	ulnk      
    3d18:	00 00 06    	return    

00003d1a <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    3d1a:	02 00 fa    	lnk       #0x2
    3d1c:	00 0f 78    	mov.w     w0, [w14]

00003d1e <.LSM98>:
    bitset(self->IECy, self->flagbit);
    3d1e:	1e 00 78    	mov.w     [w14], w0
    3d20:	40 00 90    	mov.w     [w0+8], w0
    3d22:	9e 00 78    	mov.w     [w14], w1
    3d24:	c1 00 90    	mov.w     [w1+8], w1
    3d26:	11 01 78    	mov.w     [w1], w2
    3d28:	9e 00 78    	mov.w     [w14], w1
    3d2a:	a1 48 90    	mov.b     [w1+10], w1
    3d2c:	81 80 fb    	ze        w1, w1
    3d2e:	13 00 20    	mov.w     #0x1, w3
    3d30:	81 18 dd    	sl.w      w3, w1, w1
    3d32:	82 80 70    	ior.w     w1, w2, w1
    3d34:	01 08 78    	mov.w     w1, [w0]

00003d36 <.LSM99>:
}
    3d36:	00 80 fa    	ulnk      
    3d38:	00 00 06    	return    

00003d3a <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3d3a:	02 00 fa    	lnk       #0x2
    3d3c:	00 0f 78    	mov.w     w0, [w14]

00003d3e <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    3d3e:	1e 00 78    	mov.w     [w14], w0
    3d40:	40 00 90    	mov.w     [w0+8], w0
    3d42:	9e 00 78    	mov.w     [w14], w1
    3d44:	c1 00 90    	mov.w     [w1+8], w1
    3d46:	11 01 78    	mov.w     [w1], w2
    3d48:	9e 00 78    	mov.w     [w14], w1
    3d4a:	a1 48 90    	mov.b     [w1+10], w1
    3d4c:	81 80 fb    	ze        w1, w1
    3d4e:	13 00 20    	mov.w     #0x1, w3
    3d50:	81 18 dd    	sl.w      w3, w1, w1
    3d52:	81 80 ea    	com.w     w1, w1
    3d54:	81 00 61    	and.w     w2, w1, w1
    3d56:	01 08 78    	mov.w     w1, [w0]

00003d58 <.LSM102>:
}
    3d58:	00 80 fa    	ulnk      
    3d5a:	00 00 06    	return    

00003d5c <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3d5c:	08 00 fa    	lnk       #0x8
    3d5e:	00 0f 78    	mov.w     w0, [w14]
    3d60:	12 07 98    	mov.w     w2, [w14+2]
    3d62:	23 07 98    	mov.w     w3, [w14+4]
    3d64:	31 07 98    	mov.w     w1, [w14+6]

00003d66 <.LSM104>:
    timer_disableInterrupt(self);
    3d66:	1e 00 78    	mov.w     [w14], w0
    3d68:	e8 ff 07    	rcall     0x3d3a <_timer_disableInterrupt>

00003d6a <.LSM105>:
    timer_setPeriod(self, interval);
    3d6a:	1e 01 90    	mov.w     [w14+2], w2
    3d6c:	ae 01 90    	mov.w     [w14+4], w3
    3d6e:	1e 00 78    	mov.w     [w14], w0
    3d70:	be fe 07    	rcall     0x3aee <_timer_setPeriod>

00003d72 <.LSM106>:
    self->aftercount = 0;
    3d72:	1e 00 78    	mov.w     [w14], w0
    3d74:	80 00 eb    	clr.w     w1
    3d76:	01 08 98    	mov.w     w1, [w0+16]

00003d78 <.LSM107>:
    self->every = callback;
    3d78:	1e 00 78    	mov.w     [w14], w0
    3d7a:	be 00 90    	mov.w     [w14+6], w1
    3d7c:	11 08 98    	mov.w     w1, [w0+18]

00003d7e <.LSM108>:
    self->after = NULL;
    3d7e:	1e 00 78    	mov.w     [w14], w0
    3d80:	80 00 eb    	clr.w     w1
    3d82:	21 08 98    	mov.w     w1, [w0+20]

00003d84 <.LSM109>:
    timer_enableInterrupt(self);
    3d84:	1e 00 78    	mov.w     [w14], w0
    3d86:	c9 ff 07    	rcall     0x3d1a <_timer_enableInterrupt>

00003d88 <.LSM110>:
    timer_start(self);
    3d88:	1e 00 78    	mov.w     [w14], w0
    3d8a:	80 ff 07    	rcall     0x3c8c <_timer_start>

00003d8c <.LSM111>:
}
    3d8c:	00 80 fa    	ulnk      
    3d8e:	00 00 06    	return    

00003d90 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    3d90:	0a 00 fa    	lnk       #0xa
    3d92:	00 0f 78    	mov.w     w0, [w14]
    3d94:	12 07 98    	mov.w     w2, [w14+2]
    3d96:	23 07 98    	mov.w     w3, [w14+4]
    3d98:	31 07 98    	mov.w     w1, [w14+6]
    3d9a:	44 07 98    	mov.w     w4, [w14+8]

00003d9c <.LSM113>:
    timer_disableInterrupt(self);
    3d9c:	1e 00 78    	mov.w     [w14], w0
    3d9e:	cd ff 07    	rcall     0x3d3a <_timer_disableInterrupt>

00003da0 <.LSM114>:
    timer_setPeriod(self, delay);
    3da0:	1e 01 90    	mov.w     [w14+2], w2
    3da2:	ae 01 90    	mov.w     [w14+4], w3
    3da4:	1e 00 78    	mov.w     [w14], w0
    3da6:	a3 fe 07    	rcall     0x3aee <_timer_setPeriod>

00003da8 <.LSM115>:
    self->aftercount = num_times;
    3da8:	1e 00 78    	mov.w     [w14], w0
    3daa:	be 00 90    	mov.w     [w14+6], w1
    3dac:	01 08 98    	mov.w     w1, [w0+16]

00003dae <.LSM116>:
    self->every = NULL;
    3dae:	1e 00 78    	mov.w     [w14], w0
    3db0:	80 00 eb    	clr.w     w1
    3db2:	11 08 98    	mov.w     w1, [w0+18]

00003db4 <.LSM117>:
    self->after = callback;
    3db4:	1e 00 78    	mov.w     [w14], w0
    3db6:	ce 00 90    	mov.w     [w14+8], w1
    3db8:	21 08 98    	mov.w     w1, [w0+20]

00003dba <.LSM118>:
    timer_enableInterrupt(self);
    3dba:	1e 00 78    	mov.w     [w14], w0
    3dbc:	ae ff 07    	rcall     0x3d1a <_timer_enableInterrupt>

00003dbe <.LSM119>:
    timer_start(self);
    3dbe:	1e 00 78    	mov.w     [w14], w0
    3dc0:	65 ff 07    	rcall     0x3c8c <_timer_start>

00003dc2 <.LSM120>:
}
    3dc2:	00 80 fa    	ulnk      
    3dc4:	00 00 06    	return    

00003dc6 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    3dc6:	02 00 fa    	lnk       #0x2
    3dc8:	00 0f 78    	mov.w     w0, [w14]

00003dca <.LSM122>:
    timer_disableInterrupt(self);
    3dca:	1e 00 78    	mov.w     [w14], w0
    3dcc:	b6 ff 07    	rcall     0x3d3a <_timer_disableInterrupt>

00003dce <.LSM123>:
    timer_lower(self);
    3dce:	1e 00 78    	mov.w     [w14], w0
    3dd0:	8c ff 07    	rcall     0x3cea <_timer_lower>

00003dd2 <.LSM124>:
    timer_stop(self);
    3dd2:	1e 00 78    	mov.w     [w14], w0
    3dd4:	6d ff 07    	rcall     0x3cb0 <_timer_stop>

00003dd6 <.LSM125>:
    self->aftercount = 0;
    3dd6:	1e 00 78    	mov.w     [w14], w0
    3dd8:	80 00 eb    	clr.w     w1
    3dda:	01 08 98    	mov.w     w1, [w0+16]

00003ddc <.LSM126>:
    self->every = NULL;
    3ddc:	1e 00 78    	mov.w     [w14], w0
    3dde:	80 00 eb    	clr.w     w1
    3de0:	11 08 98    	mov.w     w1, [w0+18]

00003de2 <.LSM127>:
    self->after = NULL;
    3de2:	1e 00 78    	mov.w     [w14], w0
    3de4:	80 00 eb    	clr.w     w1
    3de6:	21 08 98    	mov.w     w1, [w0+20]

00003de8 <.LSM128>:
}
    3de8:	00 80 fa    	ulnk      
    3dea:	00 00 06    	return    

00003dec <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    3dec:	04 00 fa    	lnk       #0x4
    3dee:	00 0f 78    	mov.w     w0, [w14]
    3df0:	11 07 98    	mov.w     w1, [w14+2]

00003df2 <.LSM1>:
    if (val)
    3df2:	1e 00 90    	mov.w     [w14+2], w0
    3df4:	00 00 e0    	cp0.w     w0
    3df6:	0d 00 32    	bra       Z, 0x3e12 <.L2>

00003df8 <.LSM2>:
        bitset(self->port, self->bit);
    3df8:	1e 00 78    	mov.w     [w14], w0
    3dfa:	10 00 78    	mov.w     [w0], w0
    3dfc:	9e 00 78    	mov.w     [w14], w1
    3dfe:	91 00 78    	mov.w     [w1], w1
    3e00:	11 01 78    	mov.w     [w1], w2
    3e02:	9e 00 78    	mov.w     [w14], w1
    3e04:	e1 40 90    	mov.b     [w1+6], w1
    3e06:	81 80 fb    	ze        w1, w1
    3e08:	13 00 20    	mov.w     #0x1, w3
    3e0a:	81 18 dd    	sl.w      w3, w1, w1
    3e0c:	82 80 70    	ior.w     w1, w2, w1
    3e0e:	01 08 78    	mov.w     w1, [w0]
    3e10:	0d 00 37    	bra       0x3e2c <.L1>

00003e12 <.L2>:
    else
        bitclear(self->port, self->bit);
    3e12:	1e 00 78    	mov.w     [w14], w0
    3e14:	10 00 78    	mov.w     [w0], w0
    3e16:	9e 00 78    	mov.w     [w14], w1
    3e18:	91 00 78    	mov.w     [w1], w1
    3e1a:	11 01 78    	mov.w     [w1], w2
    3e1c:	9e 00 78    	mov.w     [w14], w1
    3e1e:	e1 40 90    	mov.b     [w1+6], w1
    3e20:	81 80 fb    	ze        w1, w1
    3e22:	13 00 20    	mov.w     #0x1, w3
    3e24:	81 18 dd    	sl.w      w3, w1, w1
    3e26:	81 80 ea    	com.w     w1, w1
    3e28:	81 00 61    	and.w     w2, w1, w1
    3e2a:	01 08 78    	mov.w     w1, [w0]

00003e2c <.L1>:
}
    3e2c:	00 80 fa    	ulnk      
    3e2e:	00 00 06    	return    

00003e30 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    3e30:	02 00 fa    	lnk       #0x2
    3e32:	00 0f 78    	mov.w     w0, [w14]

00003e34 <.LSM6>:
    return bitread(self->port, self->bit);
    3e34:	1e 00 78    	mov.w     [w14], w0
    3e36:	10 00 78    	mov.w     [w0], w0
    3e38:	90 00 78    	mov.w     [w0], w1
    3e3a:	1e 00 78    	mov.w     [w14], w0
    3e3c:	60 40 90    	mov.b     [w0+6], w0
    3e3e:	00 80 fb    	ze        w0, w0
    3e40:	12 00 20    	mov.w     #0x1, w2
    3e42:	00 10 dd    	sl.w      w2, w0, w0
    3e44:	00 80 60    	and.w     w1, w0, w0
    3e46:	00 f0 a7    	btsc.w    w0, #0xf
    3e48:	00 00 ea    	neg.w     w0, w0
    3e4a:	00 00 ea    	neg.w     w0, w0
    3e4c:	4f 00 de    	lsr.w     w0, #0xf, w0

00003e4e <.LSM7>:
}
    3e4e:	00 80 fa    	ulnk      
    3e50:	00 00 06    	return    

00003e52 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    3e52:	02 00 fa    	lnk       #0x2
    3e54:	00 0f 78    	mov.w     w0, [w14]

00003e56 <.LSM9>:
    AD1CHS = self->annum;
    3e56:	1e 00 78    	mov.w     [w14], w0
    3e58:	40 00 90    	mov.w     [w0+8], w0
    3e5a:	40 19 88    	mov.w     w0, 0x328

00003e5c <.LSM10>:
    AD1CON1bits.SAMP = 1;
    3e5c:	20 23 a8    	bset.b    0x320, #0x1

00003e5e <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    3e5e:	00 00 00    	nop       

00003e60 <.L6>:
    3e60:	00 19 80    	mov.w     0x320, w0
    3e62:	61 00 60    	and.w     w0, #0x1, w0
    3e64:	00 00 e0    	cp0.w     w0
    3e66:	fc ff 32    	bra       Z, 0x3e60 <.L6>

00003e68 <.LSM12>:
    return ADC1BUF0;
    3e68:	00 18 80    	mov.w     0x300, w0

00003e6a <.LSM13>:
}
    3e6a:	00 80 fa    	ulnk      
    3e6c:	00 00 06    	return    

00003e6e <_init_pin>:

void init_pin(void) {
    3e6e:	02 00 fa    	lnk       #0x2

00003e70 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e70:	40 6d 20    	mov.w     #0x6d4, w0
    3e72:	80 1f 78    	mov.w     w0, [w15++]
    3e74:	47 01 20    	mov.w     #0x14, w7
    3e76:	00 43 eb    	clr.b     w6
    3e78:	80 82 eb    	setm.w    w5
    3e7a:	54 c0 b3    	mov.b     #0x5, w4
    3e7c:	80 01 eb    	clr.w     w3
    3e7e:	82 2d 20    	mov.w     #0x2d8, w2
    3e80:	a1 2d 20    	mov.w     #0x2da, w1
    3e82:	c0 0c 21    	mov.w     #0x10cc, w0
    3e84:	08 01 07    	rcall     0x4096 <_pin_init>
    3e86:	8f 87 e9    	dec2.w    w15, w15

00003e88 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e88:	80 6d 20    	mov.w     #0x6d8, w0
    3e8a:	80 1f 78    	mov.w     w0, [w15++]
    3e8c:	97 01 20    	mov.w     #0x19, w7
    3e8e:	86 c0 b3    	mov.b     #0x8, w6
    3e90:	80 82 eb    	setm.w    w5
    3e92:	44 c0 b3    	mov.b     #0x4, w4
    3e94:	80 01 eb    	clr.w     w3
    3e96:	82 2d 20    	mov.w     #0x2d8, w2
    3e98:	a1 2d 20    	mov.w     #0x2da, w1
    3e9a:	20 0e 21    	mov.w     #0x10e2, w0
    3e9c:	fc 00 07    	rcall     0x4096 <_pin_init>
    3e9e:	8f 87 e9    	dec2.w    w15, w15

00003ea0 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3ea0:	a0 6c 20    	mov.w     #0x6ca, w0
    3ea2:	80 1f 78    	mov.w     w0, [w15++]
    3ea4:	a7 00 20    	mov.w     #0xa, w7
    3ea6:	00 43 eb    	clr.b     w6
    3ea8:	80 82 eb    	setm.w    w5
    3eaa:	44 c0 b3    	mov.b     #0x4, w4
    3eac:	80 01 eb    	clr.w     w3
    3eae:	82 2e 20    	mov.w     #0x2e8, w2
    3eb0:	a1 2e 20    	mov.w     #0x2ea, w1
    3eb2:	80 0f 21    	mov.w     #0x10f8, w0
    3eb4:	f0 00 07    	rcall     0x4096 <_pin_init>
    3eb6:	8f 87 e9    	dec2.w    w15, w15

00003eb8 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3eb8:	00 6d 20    	mov.w     #0x6d0, w0
    3eba:	80 1f 78    	mov.w     w0, [w15++]
    3ebc:	17 01 20    	mov.w     #0x11, w7
    3ebe:	86 c0 b3    	mov.b     #0x8, w6
    3ec0:	80 82 eb    	setm.w    w5
    3ec2:	54 c0 b3    	mov.b     #0x5, w4
    3ec4:	80 01 eb    	clr.w     w3
    3ec6:	82 2e 20    	mov.w     #0x2e8, w2
    3ec8:	a1 2e 20    	mov.w     #0x2ea, w1
    3eca:	e0 10 21    	mov.w     #0x110e, w0
    3ecc:	e4 00 07    	rcall     0x4096 <_pin_init>
    3ece:	8f 87 e9    	dec2.w    w15, w15

00003ed0 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3ed0:	c0 6d 20    	mov.w     #0x6dc, w0
    3ed2:	80 1f 78    	mov.w     w0, [w15++]
    3ed4:	d7 01 20    	mov.w     #0x1d, w7
    3ed6:	86 c0 b3    	mov.b     #0x8, w6
    3ed8:	f5 00 20    	mov.w     #0xf, w5
    3eda:	f4 c0 b3    	mov.b     #0xf, w4
    3edc:	23 4e 20    	mov.w     #0x4e2, w3
    3ede:	82 2c 20    	mov.w     #0x2c8, w2
    3ee0:	a1 2c 20    	mov.w     #0x2ca, w1
    3ee2:	40 12 21    	mov.w     #0x1124, w0
    3ee4:	d8 00 07    	rcall     0x4096 <_pin_init>
    3ee6:	8f 87 e9    	dec2.w    w15, w15

00003ee8 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3ee8:	00 6d 20    	mov.w     #0x6d0, w0
    3eea:	80 1f 78    	mov.w     w0, [w15++]
    3eec:	07 01 20    	mov.w     #0x10, w7
    3eee:	00 43 eb    	clr.b     w6
    3ef0:	80 82 eb    	setm.w    w5
    3ef2:	34 c0 b3    	mov.b     #0x3, w4
    3ef4:	80 01 eb    	clr.w     w3
    3ef6:	82 2e 20    	mov.w     #0x2e8, w2
    3ef8:	a1 2e 20    	mov.w     #0x2ea, w1
    3efa:	a0 13 21    	mov.w     #0x113a, w0
    3efc:	cc 00 07    	rcall     0x4096 <_pin_init>
    3efe:	8f 87 e9    	dec2.w    w15, w15

00003f00 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f00:	20 6c 20    	mov.w     #0x6c2, w0
    3f02:	80 1f 78    	mov.w     w0, [w15++]
    3f04:	27 00 20    	mov.w     #0x2, w7
    3f06:	00 43 eb    	clr.b     w6
    3f08:	80 82 eb    	setm.w    w5
    3f0a:	84 c0 b3    	mov.b     #0x8, w4
    3f0c:	80 01 eb    	clr.w     w3
    3f0e:	82 2d 20    	mov.w     #0x2d8, w2
    3f10:	a1 2d 20    	mov.w     #0x2da, w1
    3f12:	00 15 21    	mov.w     #0x1150, w0
    3f14:	c0 00 07    	rcall     0x4096 <_pin_init>
    3f16:	8f 87 e9    	dec2.w    w15, w15

00003f18 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f18:	c0 6c 20    	mov.w     #0x6cc, w0
    3f1a:	80 1f 78    	mov.w     w0, [w15++]
    3f1c:	c7 00 20    	mov.w     #0xc, w7
    3f1e:	00 43 eb    	clr.b     w6
    3f20:	80 82 eb    	setm.w    w5
    3f22:	b4 c0 b3    	mov.b     #0xb, w4
    3f24:	80 01 eb    	clr.w     w3
    3f26:	82 2d 20    	mov.w     #0x2d8, w2
    3f28:	a1 2d 20    	mov.w     #0x2da, w1
    3f2a:	60 16 21    	mov.w     #0x1166, w0
    3f2c:	b4 00 07    	rcall     0x4096 <_pin_init>
    3f2e:	8f 87 e9    	dec2.w    w15, w15

00003f30 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f30:	40 6c 20    	mov.w     #0x6c4, w0
    3f32:	80 1f 78    	mov.w     w0, [w15++]
    3f34:	47 00 20    	mov.w     #0x4, w7
    3f36:	00 43 eb    	clr.b     w6
    3f38:	80 82 eb    	setm.w    w5
    3f3a:	94 c0 b3    	mov.b     #0x9, w4
    3f3c:	80 01 eb    	clr.w     w3
    3f3e:	82 2d 20    	mov.w     #0x2d8, w2
    3f40:	a1 2d 20    	mov.w     #0x2da, w1
    3f42:	c0 17 21    	mov.w     #0x117c, w0
    3f44:	a8 00 07    	rcall     0x4096 <_pin_init>
    3f46:	8f 87 e9    	dec2.w    w15, w15

00003f48 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f48:	20 6c 20    	mov.w     #0x6c2, w0
    3f4a:	80 1f 78    	mov.w     w0, [w15++]
    3f4c:	37 00 20    	mov.w     #0x3, w7
    3f4e:	86 c0 b3    	mov.b     #0x8, w6
    3f50:	80 82 eb    	setm.w    w5
    3f52:	a4 c0 b3    	mov.b     #0xa, w4
    3f54:	80 01 eb    	clr.w     w3
    3f56:	82 2d 20    	mov.w     #0x2d8, w2
    3f58:	a1 2d 20    	mov.w     #0x2da, w1
    3f5a:	20 19 21    	mov.w     #0x1192, w0
    3f5c:	9c 00 07    	rcall     0x4096 <_pin_init>
    3f5e:	8f 87 e9    	dec2.w    w15, w15

00003f60 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f60:	a0 6c 20    	mov.w     #0x6ca, w0
    3f62:	80 1f 78    	mov.w     w0, [w15++]
    3f64:	b7 00 20    	mov.w     #0xb, w7
    3f66:	86 c0 b3    	mov.b     #0x8, w6
    3f68:	80 82 eb    	setm.w    w5
    3f6a:	00 42 eb    	clr.b     w4
    3f6c:	80 01 eb    	clr.w     w3
    3f6e:	82 2d 20    	mov.w     #0x2d8, w2
    3f70:	a1 2d 20    	mov.w     #0x2da, w1
    3f72:	80 1a 21    	mov.w     #0x11a8, w0
    3f74:	90 00 07    	rcall     0x4096 <_pin_init>
    3f76:	8f 87 e9    	dec2.w    w15, w15

00003f78 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f78:	80 6d 20    	mov.w     #0x6d8, w0
    3f7a:	80 1f 78    	mov.w     w0, [w15++]
    3f7c:	87 01 20    	mov.w     #0x18, w7
    3f7e:	00 43 eb    	clr.b     w6
    3f80:	80 82 eb    	setm.w    w5
    3f82:	14 c0 b3    	mov.b     #0x1, w4
    3f84:	80 01 eb    	clr.w     w3
    3f86:	82 2d 20    	mov.w     #0x2d8, w2
    3f88:	a1 2d 20    	mov.w     #0x2da, w1
    3f8a:	e0 1b 21    	mov.w     #0x11be, w0
    3f8c:	84 00 07    	rcall     0x4096 <_pin_init>
    3f8e:	8f 87 e9    	dec2.w    w15, w15

00003f90 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f90:	60 6d 20    	mov.w     #0x6d6, w0
    3f92:	80 1f 78    	mov.w     w0, [w15++]
    3f94:	77 01 20    	mov.w     #0x17, w7
    3f96:	86 c0 b3    	mov.b     #0x8, w6
    3f98:	80 82 eb    	setm.w    w5
    3f9a:	24 c0 b3    	mov.b     #0x2, w4
    3f9c:	80 01 eb    	clr.w     w3
    3f9e:	82 2d 20    	mov.w     #0x2d8, w2
    3fa0:	a1 2d 20    	mov.w     #0x2da, w1
    3fa2:	40 1d 21    	mov.w     #0x11d4, w0
    3fa4:	78 00 07    	rcall     0x4096 <_pin_init>
    3fa6:	8f 87 e9    	dec2.w    w15, w15

00003fa8 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3fa8:	60 6d 20    	mov.w     #0x6d6, w0
    3faa:	80 1f 78    	mov.w     w0, [w15++]
    3fac:	67 01 20    	mov.w     #0x16, w7
    3fae:	00 43 eb    	clr.b     w6
    3fb0:	80 82 eb    	setm.w    w5
    3fb2:	34 c0 b3    	mov.b     #0x3, w4
    3fb4:	80 01 eb    	clr.w     w3
    3fb6:	82 2d 20    	mov.w     #0x2d8, w2
    3fb8:	a1 2d 20    	mov.w     #0x2da, w1
    3fba:	a0 1e 21    	mov.w     #0x11ea, w0
    3fbc:	6c 00 07    	rcall     0x4096 <_pin_init>
    3fbe:	8f 87 e9    	dec2.w    w15, w15

00003fc0 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3fc0:	00 6c 20    	mov.w     #0x6c0, w0
    3fc2:	80 1f 78    	mov.w     w0, [w15++]
    3fc4:	80 03 eb    	clr.w     w7
    3fc6:	00 43 eb    	clr.b     w6
    3fc8:	80 02 eb    	clr.w     w5
    3fca:	00 42 eb    	clr.b     w4
    3fcc:	23 4e 20    	mov.w     #0x4e2, w3
    3fce:	82 2c 20    	mov.w     #0x2c8, w2
    3fd0:	a1 2c 20    	mov.w     #0x2ca, w1
    3fd2:	e0 26 21    	mov.w     #0x126e, w0
    3fd4:	60 00 07    	rcall     0x4096 <_pin_init>
    3fd6:	8f 87 e9    	dec2.w    w15, w15

00003fd8 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3fd8:	00 6c 20    	mov.w     #0x6c0, w0
    3fda:	80 1f 78    	mov.w     w0, [w15++]
    3fdc:	17 00 20    	mov.w     #0x1, w7
    3fde:	86 c0 b3    	mov.b     #0x8, w6
    3fe0:	15 00 20    	mov.w     #0x1, w5
    3fe2:	14 c0 b3    	mov.b     #0x1, w4
    3fe4:	23 4e 20    	mov.w     #0x4e2, w3
    3fe6:	82 2c 20    	mov.w     #0x2c8, w2
    3fe8:	a1 2c 20    	mov.w     #0x2ca, w1
    3fea:	80 25 21    	mov.w     #0x1258, w0
    3fec:	54 00 07    	rcall     0x4096 <_pin_init>
    3fee:	8f 87 e9    	dec2.w    w15, w15

00003ff0 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3ff0:	c0 6c 20    	mov.w     #0x6cc, w0
    3ff2:	80 1f 78    	mov.w     w0, [w15++]
    3ff4:	d7 00 20    	mov.w     #0xd, w7
    3ff6:	86 c0 b3    	mov.b     #0x8, w6
    3ff8:	25 00 20    	mov.w     #0x2, w5
    3ffa:	24 c0 b3    	mov.b     #0x2, w4
    3ffc:	23 4e 20    	mov.w     #0x4e2, w3
    3ffe:	82 2c 20    	mov.w     #0x2c8, w2
    4000:	a1 2c 20    	mov.w     #0x2ca, w1
    4002:	20 24 21    	mov.w     #0x1242, w0
    4004:	48 00 07    	rcall     0x4096 <_pin_init>
    4006:	8f 87 e9    	dec2.w    w15, w15

00004008 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4008:	00 00 eb    	clr.w     w0
    400a:	80 1f 78    	mov.w     w0, [w15++]
    400c:	80 83 eb    	setm.w    w7
    400e:	00 43 eb    	clr.b     w6
    4010:	35 00 20    	mov.w     #0x3, w5
    4012:	34 c0 b3    	mov.b     #0x3, w4
    4014:	23 4e 20    	mov.w     #0x4e2, w3
    4016:	82 2c 20    	mov.w     #0x2c8, w2
    4018:	a1 2c 20    	mov.w     #0x2ca, w1
    401a:	c0 22 21    	mov.w     #0x122c, w0
    401c:	3c 00 07    	rcall     0x4096 <_pin_init>
    401e:	8f 87 e9    	dec2.w    w15, w15

00004020 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4020:	c0 6d 20    	mov.w     #0x6dc, w0
    4022:	80 1f 78    	mov.w     w0, [w15++]
    4024:	c7 01 20    	mov.w     #0x1c, w7
    4026:	00 43 eb    	clr.b     w6
    4028:	45 00 20    	mov.w     #0x4, w5
    402a:	44 c0 b3    	mov.b     #0x4, w4
    402c:	23 4e 20    	mov.w     #0x4e2, w3
    402e:	82 2c 20    	mov.w     #0x2c8, w2
    4030:	a1 2c 20    	mov.w     #0x2ca, w1
    4032:	60 21 21    	mov.w     #0x1216, w0
    4034:	30 00 07    	rcall     0x4096 <_pin_init>
    4036:	8f 87 e9    	dec2.w    w15, w15

00004038 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4038:	20 6d 20    	mov.w     #0x6d2, w0
    403a:	80 1f 78    	mov.w     w0, [w15++]
    403c:	27 01 20    	mov.w     #0x12, w7
    403e:	00 43 eb    	clr.b     w6
    4040:	55 00 20    	mov.w     #0x5, w5
    4042:	54 c0 b3    	mov.b     #0x5, w4
    4044:	23 4e 20    	mov.w     #0x4e2, w3
    4046:	82 2c 20    	mov.w     #0x2c8, w2
    4048:	a1 2c 20    	mov.w     #0x2ca, w1
    404a:	00 20 21    	mov.w     #0x1200, w0
    404c:	24 00 07    	rcall     0x4096 <_pin_init>
    404e:	8f 87 e9    	dec2.w    w15, w15

00004050 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    4050:	00 00 eb    	clr.w     w0
    4052:	00 0f 78    	mov.w     w0, [w14]
    4054:	07 00 37    	bra       0x4064 <.L8>

00004056 <.L9>:
        pin_digitalIn(&D[i]);
    4056:	1e 00 78    	mov.w     [w14], w0
    4058:	76 00 b9    	mul.su    w0, #0x16, w0
    405a:	80 00 78    	mov.w     w0, w1
    405c:	c0 0c 21    	mov.w     #0x10cc, w0
    405e:	00 80 40    	add.w     w1, w0, w0
    4060:	46 00 07    	rcall     0x40ee <_pin_digitalIn>

00004062 <.LSM37>:
    4062:	1e 0f e8    	inc.w     [w14], [w14]

00004064 <.L8>:
    4064:	1e 00 78    	mov.w     [w14], w0
    4066:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    4068:	f6 ff 36    	bra       LEU, 0x4056 <.L9>

0000406a <.LSM38>:
    for (i = 0; i<6; i++)
    406a:	00 00 eb    	clr.w     w0
    406c:	00 0f 78    	mov.w     w0, [w14]
    406e:	07 00 37    	bra       0x407e <.L10>

00004070 <.L11>:
        pin_analogIn(&A[i]);
    4070:	1e 00 78    	mov.w     [w14], w0
    4072:	76 00 b9    	mul.su    w0, #0x16, w0
    4074:	80 00 78    	mov.w     w0, w1
    4076:	00 20 21    	mov.w     #0x1200, w0
    4078:	00 80 40    	add.w     w1, w0, w0
    407a:	95 00 07    	rcall     0x41a6 <_pin_analogIn>

0000407c <.LSM40>:
    407c:	1e 0f e8    	inc.w     [w14], [w14]

0000407e <.L10>:
    407e:	1e 00 78    	mov.w     [w14], w0
    4080:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    4082:	f6 ff 36    	bra       LEU, 0x4070 <.L11>

00004084 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    4084:	00 2e 20    	mov.w     #0x2e0, w0
    4086:	00 19 88    	mov.w     w0, 0x320

00004088 <.LSM42>:
    AD1CON2 = 0;
    4088:	22 23 ef    	clr.w     0x322

0000408a <.LSM43>:
    AD1CON3 = 0x0C40;
    408a:	00 c4 20    	mov.w     #0xc40, w0
    408c:	20 19 88    	mov.w     w0, 0x324

0000408e <.LSM44>:
    AD1CHS = 0;
    408e:	28 23 ef    	clr.w     0x328

00004090 <.LSM45>:
    AD1CON1bits.ADON = 1;
    4090:	21 e3 a8    	bset.b    0x321, #0x7

00004092 <.LSM46>:
}
    4092:	00 80 fa    	ulnk      
    4094:	00 00 06    	return    

00004096 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    4096:	10 00 fa    	lnk       #0x10
    4098:	00 0f 78    	mov.w     w0, [w14]
    409a:	11 07 98    	mov.w     w1, [w14+2]
    409c:	22 07 98    	mov.w     w2, [w14+4]
    409e:	33 07 98    	mov.w     w3, [w14+6]
    40a0:	04 4f 98    	mov.b     w4, [w14+8]
    40a2:	55 07 98    	mov.w     w5, [w14+10]
    40a4:	46 4f 98    	mov.b     w6, [w14+12]
    40a6:	77 07 98    	mov.w     w7, [w14+14]

000040a8 <.LSM48>:
    self->port = port;
    40a8:	1e 00 78    	mov.w     [w14], w0
    40aa:	9e 00 90    	mov.w     [w14+2], w1
    40ac:	01 08 78    	mov.w     w1, [w0]

000040ae <.LSM49>:
    self->tris = tris;
    40ae:	1e 00 78    	mov.w     [w14], w0
    40b0:	ae 00 90    	mov.w     [w14+4], w1
    40b2:	11 00 98    	mov.w     w1, [w0+2]

000040b4 <.LSM50>:
    self->ans = ans;
    40b4:	1e 00 78    	mov.w     [w14], w0
    40b6:	be 00 90    	mov.w     [w14+6], w1
    40b8:	21 00 98    	mov.w     w1, [w0+4]

000040ba <.LSM51>:
    self->bit = bit;
    40ba:	1e 00 78    	mov.w     [w14], w0
    40bc:	8e 48 90    	mov.b     [w14+8], w1
    40be:	61 40 98    	mov.b     w1, [w0+6]

000040c0 <.LSM52>:
    self->annum = annum;
    40c0:	1e 00 78    	mov.w     [w14], w0
    40c2:	de 00 90    	mov.w     [w14+10], w1
    40c4:	41 00 98    	mov.w     w1, [w0+8]

000040c6 <.LSM53>:
    self->rpshift = rpshift;
    40c6:	1e 00 78    	mov.w     [w14], w0
    40c8:	ce 48 90    	mov.b     [w14+12], w1
    40ca:	21 48 98    	mov.b     w1, [w0+10]

000040cc <.LSM54>:
    self->rpnum = rpnum;
    40cc:	fe 00 90    	mov.w     [w14+14], w1
    40ce:	1e 00 78    	mov.w     [w14], w0
    40d0:	61 00 98    	mov.w     w1, [w0+12]

000040d2 <.LSM55>:
    self->rpor = rpor;
    40d2:	1e 00 78    	mov.w     [w14], w0
    40d4:	ce b8 97    	mov.w     [w14-8], w1
    40d6:	71 00 98    	mov.w     w1, [w0+14]

000040d8 <.LSM56>:
    self->owner = NULL;
    40d8:	1e 00 78    	mov.w     [w14], w0
    40da:	80 00 eb    	clr.w     w1
    40dc:	01 08 98    	mov.w     w1, [w0+16]

000040de <.LSM57>:
    self->write = NULL;
    40de:	1e 00 78    	mov.w     [w14], w0
    40e0:	80 00 eb    	clr.w     w1
    40e2:	11 08 98    	mov.w     w1, [w0+18]

000040e4 <.LSM58>:
    self->read = NULL;
    40e4:	1e 00 78    	mov.w     [w14], w0
    40e6:	80 00 eb    	clr.w     w1
    40e8:	21 08 98    	mov.w     w1, [w0+20]

000040ea <.LSM59>:
}
    40ea:	00 80 fa    	ulnk      
    40ec:	00 00 06    	return    

000040ee <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    40ee:	02 00 fa    	lnk       #0x2
    40f0:	00 0f 78    	mov.w     w0, [w14]

000040f2 <.LSM61>:
    if (self->ans)
    40f2:	1e 00 78    	mov.w     [w14], w0
    40f4:	20 00 90    	mov.w     [w0+4], w0
    40f6:	00 00 e0    	cp0.w     w0
    40f8:	0d 00 32    	bra       Z, 0x4114 <.L14>

000040fa <.LSM62>:
        bitclear(self->ans, self->bit);
    40fa:	1e 00 78    	mov.w     [w14], w0
    40fc:	20 00 90    	mov.w     [w0+4], w0
    40fe:	9e 00 78    	mov.w     [w14], w1
    4100:	a1 00 90    	mov.w     [w1+4], w1
    4102:	11 01 78    	mov.w     [w1], w2
    4104:	9e 00 78    	mov.w     [w14], w1
    4106:	e1 40 90    	mov.b     [w1+6], w1
    4108:	81 80 fb    	ze        w1, w1
    410a:	13 00 20    	mov.w     #0x1, w3
    410c:	81 18 dd    	sl.w      w3, w1, w1
    410e:	81 80 ea    	com.w     w1, w1
    4110:	81 00 61    	and.w     w2, w1, w1
    4112:	01 08 78    	mov.w     w1, [w0]

00004114 <.L14>:
    bitset(self->tris, self->bit);
    4114:	1e 00 78    	mov.w     [w14], w0
    4116:	10 00 90    	mov.w     [w0+2], w0
    4118:	9e 00 78    	mov.w     [w14], w1
    411a:	91 00 90    	mov.w     [w1+2], w1
    411c:	11 01 78    	mov.w     [w1], w2
    411e:	9e 00 78    	mov.w     [w14], w1
    4120:	e1 40 90    	mov.b     [w1+6], w1
    4122:	81 80 fb    	ze        w1, w1
    4124:	13 00 20    	mov.w     #0x1, w3
    4126:	81 18 dd    	sl.w      w3, w1, w1
    4128:	82 80 70    	ior.w     w1, w2, w1
    412a:	01 08 78    	mov.w     w1, [w0]

0000412c <.LSM64>:
    self->write = NULL;
    412c:	1e 00 78    	mov.w     [w14], w0
    412e:	80 00 eb    	clr.w     w1
    4130:	11 08 98    	mov.w     w1, [w0+18]

00004132 <.LSM65>:
    self->read = __digitalRead;    
    4132:	1e 00 78    	mov.w     [w14], w0
    4134:	01 e3 23    	mov.w     #0x3e30, w1
    4136:	21 08 98    	mov.w     w1, [w0+20]

00004138 <.LSM66>:
}
    4138:	00 80 fa    	ulnk      
    413a:	00 00 06    	return    

0000413c <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    413c:	02 00 fa    	lnk       #0x2
    413e:	00 0f 78    	mov.w     w0, [w14]

00004140 <.LSM68>:
    if (self->ans)
    4140:	1e 00 78    	mov.w     [w14], w0
    4142:	20 00 90    	mov.w     [w0+4], w0
    4144:	00 00 e0    	cp0.w     w0
    4146:	0d 00 32    	bra       Z, 0x4162 <.L16>

00004148 <.LSM69>:
        bitclear(self->ans, self->bit);
    4148:	1e 00 78    	mov.w     [w14], w0
    414a:	20 00 90    	mov.w     [w0+4], w0
    414c:	9e 00 78    	mov.w     [w14], w1
    414e:	a1 00 90    	mov.w     [w1+4], w1
    4150:	11 01 78    	mov.w     [w1], w2
    4152:	9e 00 78    	mov.w     [w14], w1
    4154:	e1 40 90    	mov.b     [w1+6], w1
    4156:	81 80 fb    	ze        w1, w1
    4158:	13 00 20    	mov.w     #0x1, w3
    415a:	81 18 dd    	sl.w      w3, w1, w1
    415c:	81 80 ea    	com.w     w1, w1
    415e:	81 00 61    	and.w     w2, w1, w1
    4160:	01 08 78    	mov.w     w1, [w0]

00004162 <.L16>:
    bitclear(self->port, self->bit);
    4162:	1e 00 78    	mov.w     [w14], w0
    4164:	10 00 78    	mov.w     [w0], w0
    4166:	9e 00 78    	mov.w     [w14], w1
    4168:	91 00 78    	mov.w     [w1], w1
    416a:	11 01 78    	mov.w     [w1], w2
    416c:	9e 00 78    	mov.w     [w14], w1
    416e:	e1 40 90    	mov.b     [w1+6], w1
    4170:	81 80 fb    	ze        w1, w1
    4172:	13 00 20    	mov.w     #0x1, w3
    4174:	81 18 dd    	sl.w      w3, w1, w1
    4176:	81 80 ea    	com.w     w1, w1
    4178:	81 00 61    	and.w     w2, w1, w1
    417a:	01 08 78    	mov.w     w1, [w0]

0000417c <.LSM71>:
    bitclear(self->tris, self->bit);
    417c:	1e 00 78    	mov.w     [w14], w0
    417e:	10 00 90    	mov.w     [w0+2], w0
    4180:	9e 00 78    	mov.w     [w14], w1
    4182:	91 00 90    	mov.w     [w1+2], w1
    4184:	11 01 78    	mov.w     [w1], w2
    4186:	9e 00 78    	mov.w     [w14], w1
    4188:	e1 40 90    	mov.b     [w1+6], w1
    418a:	81 80 fb    	ze        w1, w1
    418c:	13 00 20    	mov.w     #0x1, w3
    418e:	81 18 dd    	sl.w      w3, w1, w1
    4190:	81 80 ea    	com.w     w1, w1
    4192:	81 00 61    	and.w     w2, w1, w1
    4194:	01 08 78    	mov.w     w1, [w0]

00004196 <.LSM72>:
    self->write = __digitalWrite;
    4196:	1e 00 78    	mov.w     [w14], w0
    4198:	c1 de 23    	mov.w     #0x3dec, w1
    419a:	11 08 98    	mov.w     w1, [w0+18]

0000419c <.LSM73>:
    self->read = __digitalRead;
    419c:	1e 00 78    	mov.w     [w14], w0
    419e:	01 e3 23    	mov.w     #0x3e30, w1
    41a0:	21 08 98    	mov.w     w1, [w0+20]

000041a2 <.LSM74>:
}
    41a2:	00 80 fa    	ulnk      
    41a4:	00 00 06    	return    

000041a6 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    41a6:	02 00 fa    	lnk       #0x2
    41a8:	00 0f 78    	mov.w     w0, [w14]

000041aa <.LSM76>:
    if (!(self->ans))
    41aa:	1e 00 78    	mov.w     [w14], w0
    41ac:	20 00 90    	mov.w     [w0+4], w0
    41ae:	00 00 e0    	cp0.w     w0
    41b0:	1f 00 32    	bra       Z, 0x41f0 <.L20>

000041b2 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    41b2:	1e 00 78    	mov.w     [w14], w0
    41b4:	10 00 90    	mov.w     [w0+2], w0
    41b6:	9e 00 78    	mov.w     [w14], w1
    41b8:	91 00 90    	mov.w     [w1+2], w1
    41ba:	11 01 78    	mov.w     [w1], w2
    41bc:	9e 00 78    	mov.w     [w14], w1
    41be:	e1 40 90    	mov.b     [w1+6], w1
    41c0:	81 80 fb    	ze        w1, w1
    41c2:	13 00 20    	mov.w     #0x1, w3
    41c4:	81 18 dd    	sl.w      w3, w1, w1
    41c6:	82 80 70    	ior.w     w1, w2, w1
    41c8:	01 08 78    	mov.w     w1, [w0]

000041ca <.LSM78>:
    bitset(self->ans, self->bit);
    41ca:	1e 00 78    	mov.w     [w14], w0
    41cc:	20 00 90    	mov.w     [w0+4], w0
    41ce:	9e 00 78    	mov.w     [w14], w1
    41d0:	a1 00 90    	mov.w     [w1+4], w1
    41d2:	11 01 78    	mov.w     [w1], w2
    41d4:	9e 00 78    	mov.w     [w14], w1
    41d6:	e1 40 90    	mov.b     [w1+6], w1
    41d8:	81 80 fb    	ze        w1, w1
    41da:	13 00 20    	mov.w     #0x1, w3
    41dc:	81 18 dd    	sl.w      w3, w1, w1
    41de:	82 80 70    	ior.w     w1, w2, w1
    41e0:	01 08 78    	mov.w     w1, [w0]

000041e2 <.LSM79>:
    self->write = NULL;
    41e2:	1e 00 78    	mov.w     [w14], w0
    41e4:	80 00 eb    	clr.w     w1
    41e6:	11 08 98    	mov.w     w1, [w0+18]

000041e8 <.LSM80>:
    self->read = __analogRead;
    41e8:	1e 00 78    	mov.w     [w14], w0
    41ea:	21 e5 23    	mov.w     #0x3e52, w1
    41ec:	21 08 98    	mov.w     w1, [w0+20]
    41ee:	01 00 37    	bra       0x41f2 <.L17>

000041f0 <.L20>:
    41f0:	00 00 00    	nop       

000041f2 <.L17>:
}
    41f2:	00 80 fa    	ulnk      
    41f4:	00 00 06    	return    

000041f6 <_pin_set>:

void pin_set(_PIN *self) {
    41f6:	02 00 fa    	lnk       #0x2
    41f8:	00 0f 78    	mov.w     w0, [w14]

000041fa <.LSM84>:
    if (self->write==__digitalWrite)
    41fa:	1e 00 78    	mov.w     [w14], w0
    41fc:	90 08 90    	mov.w     [w0+18], w1
    41fe:	c0 de 23    	mov.w     #0x3dec, w0
    4200:	80 8f 50    	sub.w     w1, w0, [w15]
    4202:	0c 00 3a    	bra       NZ, 0x421c <.L21>

00004204 <.LSM85>:
        bitset(self->port, self->bit);
    4204:	1e 00 78    	mov.w     [w14], w0
    4206:	10 00 78    	mov.w     [w0], w0
    4208:	9e 00 78    	mov.w     [w14], w1
    420a:	91 00 78    	mov.w     [w1], w1
    420c:	11 01 78    	mov.w     [w1], w2
    420e:	9e 00 78    	mov.w     [w14], w1
    4210:	e1 40 90    	mov.b     [w1+6], w1
    4212:	81 80 fb    	ze        w1, w1
    4214:	13 00 20    	mov.w     #0x1, w3
    4216:	81 18 dd    	sl.w      w3, w1, w1
    4218:	82 80 70    	ior.w     w1, w2, w1
    421a:	01 08 78    	mov.w     w1, [w0]

0000421c <.L21>:
}
    421c:	00 80 fa    	ulnk      
    421e:	00 00 06    	return    

00004220 <_pin_clear>:

void pin_clear(_PIN *self) {
    4220:	02 00 fa    	lnk       #0x2
    4222:	00 0f 78    	mov.w     w0, [w14]

00004224 <.LSM88>:
    if (self->write==__digitalWrite)
    4224:	1e 00 78    	mov.w     [w14], w0
    4226:	90 08 90    	mov.w     [w0+18], w1
    4228:	c0 de 23    	mov.w     #0x3dec, w0
    422a:	80 8f 50    	sub.w     w1, w0, [w15]
    422c:	0d 00 3a    	bra       NZ, 0x4248 <.L23>

0000422e <.LSM89>:
        bitclear(self->port, self->bit);
    422e:	1e 00 78    	mov.w     [w14], w0
    4230:	10 00 78    	mov.w     [w0], w0
    4232:	9e 00 78    	mov.w     [w14], w1
    4234:	91 00 78    	mov.w     [w1], w1
    4236:	11 01 78    	mov.w     [w1], w2
    4238:	9e 00 78    	mov.w     [w14], w1
    423a:	e1 40 90    	mov.b     [w1+6], w1
    423c:	81 80 fb    	ze        w1, w1
    423e:	13 00 20    	mov.w     #0x1, w3
    4240:	81 18 dd    	sl.w      w3, w1, w1
    4242:	81 80 ea    	com.w     w1, w1
    4244:	81 00 61    	and.w     w2, w1, w1
    4246:	01 08 78    	mov.w     w1, [w0]

00004248 <.L23>:
}
    4248:	00 80 fa    	ulnk      
    424a:	00 00 06    	return    

0000424c <_pin_toggle>:

void pin_toggle(_PIN *self) {
    424c:	02 00 fa    	lnk       #0x2
    424e:	00 0f 78    	mov.w     w0, [w14]

00004250 <.LSM92>:
    if (self->write==__digitalWrite)
    4250:	1e 00 78    	mov.w     [w14], w0
    4252:	90 08 90    	mov.w     [w0+18], w1
    4254:	c0 de 23    	mov.w     #0x3dec, w0
    4256:	80 8f 50    	sub.w     w1, w0, [w15]
    4258:	0c 00 3a    	bra       NZ, 0x4272 <.L25>

0000425a <.LSM93>:
        bitflip(self->port, self->bit);
    425a:	1e 00 78    	mov.w     [w14], w0
    425c:	10 00 78    	mov.w     [w0], w0
    425e:	9e 00 78    	mov.w     [w14], w1
    4260:	91 00 78    	mov.w     [w1], w1
    4262:	11 01 78    	mov.w     [w1], w2
    4264:	9e 00 78    	mov.w     [w14], w1
    4266:	e1 40 90    	mov.b     [w1+6], w1
    4268:	81 80 fb    	ze        w1, w1
    426a:	13 00 20    	mov.w     #0x1, w3
    426c:	81 18 dd    	sl.w      w3, w1, w1
    426e:	81 00 69    	xor.w     w2, w1, w1
    4270:	01 08 78    	mov.w     w1, [w0]

00004272 <.L25>:
}
    4272:	00 80 fa    	ulnk      
    4274:	00 00 06    	return    

00004276 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    4276:	04 00 fa    	lnk       #0x4
    4278:	00 0f 78    	mov.w     w0, [w14]
    427a:	11 07 98    	mov.w     w1, [w14+2]

0000427c <.LSM96>:
    if (self->write)
    427c:	1e 00 78    	mov.w     [w14], w0
    427e:	10 08 90    	mov.w     [w0+18], w0
    4280:	00 00 e0    	cp0.w     w0
    4282:	05 00 32    	bra       Z, 0x428e <.L27>

00004284 <.LSM97>:
        self->write(self, val);
    4284:	1e 00 78    	mov.w     [w14], w0
    4286:	10 09 90    	mov.w     [w0+18], w2
    4288:	9e 00 90    	mov.w     [w14+2], w1
    428a:	1e 00 78    	mov.w     [w14], w0
    428c:	02 00 01    	call      w2

0000428e <.L27>:
}
    428e:	00 80 fa    	ulnk      
    4290:	00 00 06    	return    

00004292 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    4292:	02 00 fa    	lnk       #0x2
    4294:	00 0f 78    	mov.w     w0, [w14]

00004296 <.LSM100>:
    if (self->read)
    4296:	1e 00 78    	mov.w     [w14], w0
    4298:	20 08 90    	mov.w     [w0+20], w0
    429a:	00 00 e0    	cp0.w     w0
    429c:	05 00 32    	bra       Z, 0x42a8 <.L30>

0000429e <.LSM101>:
        return self->read(self);
    429e:	1e 00 78    	mov.w     [w14], w0
    42a0:	a0 08 90    	mov.w     [w0+20], w1
    42a2:	1e 00 78    	mov.w     [w14], w0
    42a4:	01 00 01    	call      w1
    42a6:	01 00 37    	bra       0x42aa <.L31>

000042a8 <.L30>:
    else
        return 0xFFFF;
    42a8:	00 80 eb    	setm.w    w0

000042aa <.L31>:
}
    42aa:	00 80 fa    	ulnk      
    42ac:	00 00 06    	return    

000042ae <_VendorRequests>:
uint16_t rocket_state;
uint16_t rocket_speed, rocket_tilt;
uint8_t rec_msg[64], tx_msg[64];

void VendorRequests(void) {
    42ae:	02 00 fa    	lnk       #0x2

000042b0 <.LSM1>:
    WORD temp;
    switch (USB_setup.bRequest) {
    42b0:	40 83 20    	mov.w     #0x834, w0
    42b2:	10 40 90    	mov.b     [w0+1], w0
    42b4:	00 80 fb    	ze        w0, w0
    42b6:	00 00 e0    	cp0.w     w0
    42b8:	03 00 32    	bra       Z, 0x42c0 <.L3>
    42ba:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    42bc:	08 00 32    	bra       Z, 0x42ce <.L4>
    42be:	49 00 37    	bra       0x4352 <.L6>

000042c0 <.L3>:
        case SET_STATE:
            // state = USB_setup.wValue.w;
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    42c0:	40 40 21    	mov.w     #0x1404, w0
    42c2:	80 40 eb    	clr.b     w1
    42c4:	01 48 78    	mov.b     w1, [w0]

000042c6 <.LSM3>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    42c6:	50 40 21    	mov.w     #0x1405, w0
    42c8:	81 cc b3    	mov.b     #0xc8, w1
    42ca:	01 48 78    	mov.b     w1, [w0]

000042cc <.LSM4>:
            break;
    42cc:	45 00 37    	bra       0x4358 <.L1>

000042ce <.L4>:
        case GET_VALS:
            temp.w = rocket_tilt;
    42ce:	30 42 80    	mov.w     0x846, w0
    42d0:	00 0f 78    	mov.w     w0, [w14]

000042d2 <.LSM6>:
            BD[EP0IN].address[0] = temp.b[0];
    42d2:	30 a0 80    	mov.w     0x1406, w0
    42d4:	9e 40 78    	mov.b     [w14], w1
    42d6:	01 48 78    	mov.b     w1, [w0]

000042d8 <.LSM7>:
            BD[EP0IN].address[1] = temp.b[1];
    42d8:	30 a0 80    	mov.w     0x1406, w0
    42da:	00 00 e8    	inc.w     w0, w0
    42dc:	9e 40 90    	mov.b     [w14+1], w1
    42de:	01 48 78    	mov.b     w1, [w0]

000042e0 <.LSM8>:
            temp.w = uart1.TXbuffer.tail;
    42e0:	60 95 80    	mov.w     0x12ac, w0
    42e2:	00 0f 78    	mov.w     w0, [w14]

000042e4 <.LSM9>:
            BD[EP0IN].address[2] = temp.b[0];
    42e4:	30 a0 80    	mov.w     0x1406, w0
    42e6:	00 80 e8    	inc2.w    w0, w0
    42e8:	9e 40 78    	mov.b     [w14], w1
    42ea:	01 48 78    	mov.b     w1, [w0]

000042ec <.LSM10>:
            BD[EP0IN].address[3] = temp.b[1];
    42ec:	30 a0 80    	mov.w     0x1406, w0
    42ee:	63 00 40    	add.w     w0, #0x3, w0
    42f0:	9e 40 90    	mov.b     [w14+1], w1
    42f2:	01 48 78    	mov.b     w1, [w0]

000042f4 <.LSM11>:
            temp.w = uart1.TXbuffer.count;
    42f4:	70 95 80    	mov.w     0x12ae, w0
    42f6:	00 0f 78    	mov.w     w0, [w14]

000042f8 <.LSM12>:
            BD[EP0IN].address[4] = temp.b[0];
    42f8:	30 a0 80    	mov.w     0x1406, w0
    42fa:	64 00 40    	add.w     w0, #0x4, w0
    42fc:	9e 40 78    	mov.b     [w14], w1
    42fe:	01 48 78    	mov.b     w1, [w0]

00004300 <.LSM13>:
            BD[EP0IN].address[5] = temp.b[1];
    4300:	30 a0 80    	mov.w     0x1406, w0
    4302:	65 00 40    	add.w     w0, #0x5, w0
    4304:	9e 40 90    	mov.b     [w14+1], w1
    4306:	01 48 78    	mov.b     w1, [w0]

00004308 <.LSM14>:

            temp.w = uart1.RXbuffer.head;
    4308:	a0 95 80    	mov.w     0x12b4, w0
    430a:	00 0f 78    	mov.w     w0, [w14]

0000430c <.LSM15>:
            BD[EP0IN].address[6] = temp.b[0];
    430c:	30 a0 80    	mov.w     0x1406, w0
    430e:	66 00 40    	add.w     w0, #0x6, w0
    4310:	9e 40 78    	mov.b     [w14], w1
    4312:	01 48 78    	mov.b     w1, [w0]

00004314 <.LSM16>:
            BD[EP0IN].address[7] = temp.b[1];
    4314:	30 a0 80    	mov.w     0x1406, w0
    4316:	67 00 40    	add.w     w0, #0x7, w0
    4318:	9e 40 90    	mov.b     [w14+1], w1
    431a:	01 48 78    	mov.b     w1, [w0]

0000431c <.LSM17>:
            temp.w = uart1.RXbuffer.tail;
    431c:	b0 95 80    	mov.w     0x12b6, w0
    431e:	00 0f 78    	mov.w     w0, [w14]

00004320 <.LSM18>:
            BD[EP0IN].address[8] = temp.b[0];
    4320:	30 a0 80    	mov.w     0x1406, w0
    4322:	68 00 40    	add.w     w0, #0x8, w0
    4324:	9e 40 78    	mov.b     [w14], w1
    4326:	01 48 78    	mov.b     w1, [w0]

00004328 <.LSM19>:
            BD[EP0IN].address[9] = temp.b[1];
    4328:	30 a0 80    	mov.w     0x1406, w0
    432a:	69 00 40    	add.w     w0, #0x9, w0
    432c:	9e 40 90    	mov.b     [w14+1], w1
    432e:	01 48 78    	mov.b     w1, [w0]

00004330 <.LSM20>:
            temp.w = uart1.RXbuffer.count;
    4330:	c0 95 80    	mov.w     0x12b8, w0
    4332:	00 0f 78    	mov.w     w0, [w14]

00004334 <.LSM21>:
            BD[EP0IN].address[10] = temp.b[0];
    4334:	30 a0 80    	mov.w     0x1406, w0
    4336:	6a 00 40    	add.w     w0, #0xa, w0
    4338:	9e 40 78    	mov.b     [w14], w1
    433a:	01 48 78    	mov.b     w1, [w0]

0000433c <.LSM22>:
            BD[EP0IN].address[11] = temp.b[1];
    433c:	30 a0 80    	mov.w     0x1406, w0
    433e:	6b 00 40    	add.w     w0, #0xb, w0
    4340:	9e 40 90    	mov.b     [w14+1], w1
    4342:	01 48 78    	mov.b     w1, [w0]

00004344 <.LSM23>:
            BD[EP0IN].bytecount = 12;    // set EP0 IN byte count to 4
    4344:	40 40 21    	mov.w     #0x1404, w0
    4346:	c1 c0 b3    	mov.b     #0xc, w1
    4348:	01 48 78    	mov.b     w1, [w0]

0000434a <.LSM24>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    434a:	50 40 21    	mov.w     #0x1405, w0
    434c:	81 cc b3    	mov.b     #0xc8, w1
    434e:	01 48 78    	mov.b     w1, [w0]

00004350 <.LSM25>:
            break;            
    4350:	03 00 37    	bra       0x4358 <.L1>

00004352 <.L6>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    4352:	3c c8 bf    	mov.b     0x83c, WREG
    4354:	00 04 a0    	bset.b    w0, #0x0
    4356:	3c e8 b7    	mov.b     WREG, 0x83c

00004358 <.L1>:
    }
}
    4358:	00 80 fa    	ulnk      
    435a:	00 00 06    	return    

0000435c <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    435c:	00 00 fa    	lnk       #0x0

0000435e <.LSM29>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    435e:	3c c8 bf    	mov.b     0x83c, WREG
    4360:	00 04 a0    	bset.b    w0, #0x0
    4362:	3c e8 b7    	mov.b     WREG, 0x83c

00004364 <.LSM30>:
    }
}
    4364:	00 80 fa    	ulnk      
    4366:	00 00 06    	return    

00004368 <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    4368:	00 00 fa    	lnk       #0x0

0000436a <.LSM32>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    436a:	3c c8 bf    	mov.b     0x83c, WREG
    436c:	00 04 a0    	bset.b    w0, #0x0
    436e:	3c e8 b7    	mov.b     WREG, 0x83c

00004370 <.LSM33>:
    }
}
    4370:	00 80 fa    	ulnk      
    4372:	00 00 06    	return    

00004374 <_UART_ctl>:

void UART_ctl(uint8_t cmd, uint8_t value){
    4374:	0a 00 fa    	lnk       #0xa
    4376:	00 4f 98    	mov.b     w0, [w14+8]
    4378:	11 4f 98    	mov.b     w1, [w14+9]

0000437a <.LSM35>:
    sprintf(tx_msg, "%01x%01x\r", value, cmd); //value could be state or command
    437a:	0e 48 90    	mov.b     [w14+8], w0
    437c:	00 81 fb    	ze        w0, w2
    437e:	1e 48 90    	mov.b     [w14+9], w0
    4380:	80 80 fb    	ze        w0, w1
    4382:	c0 08 21    	mov.w     #0x108c, w0
    4384:	82 1f 78    	mov.w     w2, [w15++]
    4386:	81 1f 78    	mov.w     w1, [w15++]
    4388:	41 28 2a    	mov.w     #0xa284, w1
    438a:	81 1f 78    	mov.w     w1, [w15++]
    438c:	08 ea 07    	rcall     0x179e <__sprintf_cdnopuxX>
    438e:	e6 87 57    	sub.w     w15, #0x6, w15

00004390 <.LSM36>:
    uart_puts(&uart1, tx_msg);
    4390:	c1 08 21    	mov.w     #0x108c, w1
    4392:	40 28 21    	mov.w     #0x1284, w0
    4394:	8e f5 07    	rcall     0x2eb2 <_uart_puts>

00004396 <.LSM37>:
    if (cmd == GET_ROCKET_VALS){
    4396:	0e 48 90    	mov.b     [w14+8], w0
    4398:	00 04 e0    	cp0.b     w0
    439a:	28 00 3a    	bra       NZ, 0x43ec <.L9>

0000439c <.LBB2>:
        // led_toggle(&led2);
        uart_gets(&uart1, rec_msg, 64);
    439c:	02 04 20    	mov.w     #0x40, w2
    439e:	c1 04 21    	mov.w     #0x104c, w1
    43a0:	40 28 21    	mov.w     #0x1284, w0
    43a2:	2c f6 07    	rcall     0x2ffc <_uart_gets>

000043a4 <.LSM39>:
        led_toggle(&led3);
    43a4:	00 81 20    	mov.w     #0x810, w0
    43a6:	1a 01 07    	rcall     0x45dc <_led_toggle>

000043a8 <.LSM40>:
        uint64_t decoded_msg = (uint64_t)strtoll(rec_msg, NULL, 16);
    43a8:	02 01 20    	mov.w     #0x10, w2
    43aa:	80 00 eb    	clr.w     w1
    43ac:	c0 04 21    	mov.w     #0x104c, w0
    43ae:	bb e8 07    	rcall     0x1526
    43b0:	cf 80 de    	asr.w     w0, #0xf, w1
    43b2:	61 09 b9    	mul.su    w1, #0x1, w2
    43b4:	00 9f be    	mov.d     w0, [w14++]
    43b6:	02 97 be    	mov.d     w2, [w14--]

000043b8 <.LSM41>:
        rocket_speed = (decoded_msg & 0xffff00000000) >> 32;
    43b8:	3e 02 be    	mov.d     [w14++], w4
    43ba:	2e 03 be    	mov.d     [w14--], w6
    43bc:	60 00 b8    	mul.uu    w0, #0x0, w0
    43be:	f2 ff 2f    	mov.w     #0xffff, w2
    43c0:	03 00 20    	mov.w     #0x0, w3
    43c2:	00 00 62    	and.w     w4, w0, w0
    43c4:	81 80 62    	and.w     w5, w1, w1
    43c6:	02 01 63    	and.w     w6, w2, w2
    43c8:	83 81 63    	and.w     w7, w3, w3
    43ca:	02 00 78    	mov.w     w2, w0
    43cc:	00 00 78    	mov.w     w0, w0
    43ce:	20 42 88    	mov.w     w0, 0x844

000043d0 <.LSM42>:
        rocket_tilt = (decoded_msg & 0x0000ffff0000) >> 16;
    43d0:	3e 02 be    	mov.d     [w14++], w4
    43d2:	2e 03 be    	mov.d     [w14--], w6
    43d4:	00 00 20    	mov.w     #0x0, w0
    43d6:	f1 ff 2f    	mov.w     #0xffff, w1
    43d8:	60 11 b8    	mul.uu    w2, #0x0, w2
    43da:	00 00 62    	and.w     w4, w0, w0
    43dc:	81 80 62    	and.w     w5, w1, w1
    43de:	02 01 63    	and.w     w6, w2, w2
    43e0:	83 81 63    	and.w     w7, w3, w3
    43e2:	01 00 78    	mov.w     w1, w0
    43e4:	00 00 78    	mov.w     w0, w0
    43e6:	30 42 88    	mov.w     w0, 0x846

000043e8 <.LSM43>:
        rocket_state = decoded_msg & 0x00000000ffff;
    43e8:	1e 00 78    	mov.w     [w14], w0
    43ea:	10 42 88    	mov.w     w0, 0x842

000043ec <.L9>:
    }
}
    43ec:	00 80 fa    	ulnk      
    43ee:	00 00 06    	return    

000043f0 <_setup_uart>:

void setup_uart() {
    43f0:	00 00 fa    	lnk       #0x0

000043f2 <.LSM46>:
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           // 0, TXBUF, 1024, RXBUF, 1024);

    // uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
    //            float baudrate, int8_t parity, int16_t stopbits, 
    //            uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
    //            uint8_t *RXbuffer, uint16_t RXbufferlen)

    // uart_open(&uart2, &D[0], &D[1], NULL, NULL, 115200., 'N', 1, 
    //           0, RC_TXBUF, 1024, RC_RXBUF, 1024);
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           0, TXBUF, 1024, RXBUF, 1024);

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    43f2:	40 6d 20    	mov.w     #0x6d4, w0
    43f4:	80 1f 78    	mov.w     w0, [w15++]
    43f6:	57 01 20    	mov.w     #0x15, w7
    43f8:	86 c0 b3    	mov.b     #0x8, w6
    43fa:	80 82 eb    	setm.w    w5
    43fc:	64 c0 b3    	mov.b     #0x6, w4
    43fe:	80 01 eb    	clr.w     w3
    4400:	02 2f 20    	mov.w     #0x2f0, w2
    4402:	21 2f 20    	mov.w     #0x2f2, w1
    4404:	40 37 21    	mov.w     #0x1374, w0
    4406:	47 fe 07    	rcall     0x4096 <_pin_init>
    4408:	8f 87 e9    	dec2.w    w15, w15

0000440a <.LSM47>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    440a:	a0 6d 20    	mov.w     #0x6da, w0
    440c:	80 1f 78    	mov.w     w0, [w15++]
    440e:	a7 01 20    	mov.w     #0x1a, w7
    4410:	00 43 eb    	clr.b     w6
    4412:	80 82 eb    	setm.w    w5
    4414:	74 c0 b3    	mov.b     #0x7, w4
    4416:	80 01 eb    	clr.w     w3
    4418:	02 2f 20    	mov.w     #0x2f0, w2
    441a:	21 2f 20    	mov.w     #0x2f2, w1
    441c:	a0 38 21    	mov.w     #0x138a, w0
    441e:	3b fe 07    	rcall     0x4096 <_pin_init>
    4420:	8f 87 e9    	dec2.w    w15, w15

00004422 <.LSM48>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);
    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    4422:	00 40 20    	mov.w     #0x400, w0
    4424:	80 1f 78    	mov.w     w0, [w15++]
    4426:	c0 c4 20    	mov.w     #0xc4c, w0
    4428:	80 1f 78    	mov.w     w0, [w15++]
    442a:	00 40 20    	mov.w     #0x400, w0
    442c:	80 1f 78    	mov.w     w0, [w15++]
    442e:	c0 84 20    	mov.w     #0x84c, w0
    4430:	80 1f 78    	mov.w     w0, [w15++]
    4432:	00 00 eb    	clr.w     w0
    4434:	80 1f 78    	mov.w     w0, [w15++]
    4436:	10 00 20    	mov.w     #0x1, w0
    4438:	80 1f 78    	mov.w     w0, [w15++]
    443a:	e5 c4 b3    	mov.b     #0x4e, w5
    443c:	06 00 20    	mov.w     #0x0, w6
    443e:	67 69 24    	mov.w     #0x4696, w7
    4440:	00 02 eb    	clr.w     w4
    4442:	80 01 eb    	clr.w     w3
    4444:	a2 38 21    	mov.w     #0x138a, w2
    4446:	41 37 21    	mov.w     #0x1374, w1
    4448:	40 28 21    	mov.w     #0x1284, w0
    444a:	dc f1 07    	rcall     0x2804 <_uart_open>
    444c:	ec 87 57    	sub.w     w15, #0xc, w15

0000444e <.LSM49>:
              0, RC_TXBUF, 1024, RC_RXBUF, 1024);
}
    444e:	00 80 fa    	ulnk      
    4450:	00 00 06    	return    

00004452 <_setup>:

void setup() {
    4452:	00 00 fa    	lnk       #0x0

00004454 <.LSM51>:
    timer_setPeriod(&timer1, 1);  // Timer for LED operation/status blink
    4454:	02 00 20    	mov.w     #0x0, w2
    4456:	03 f8 23    	mov.w     #0x3f80, w3
    4458:	c0 50 21    	mov.w     #0x150c, w0
    445a:	49 fb 07    	rcall     0x3aee <_timer_setPeriod>

0000445c <.LSM52>:
    timer_setPeriod(&timer2, 0.5); 
    445c:	02 00 20    	mov.w     #0x0, w2
    445e:	03 f0 23    	mov.w     #0x3f00, w3
    4460:	20 52 21    	mov.w     #0x1522, w0
    4462:	45 fb 07    	rcall     0x3aee <_timer_setPeriod>

00004464 <.LSM53>:
    timer_start(&timer1);
    4464:	c0 50 21    	mov.w     #0x150c, w0
    4466:	12 fc 07    	rcall     0x3c8c <_timer_start>

00004468 <.LSM54>:
    timer_start(&timer2);
    4468:	20 52 21    	mov.w     #0x1522, w0
    446a:	10 fc 07    	rcall     0x3c8c <_timer_start>

0000446c <.LSM55>:

    setup_uart();
    446c:	c1 ff 07    	rcall     0x43f0 <_setup_uart>

0000446e <.LSM56>:
    rocket_tilt, rocket_speed = 0;
    446e:	44 28 ef    	clr.w     0x844

00004470 <.LSM57>:
}
    4470:	00 80 fa    	ulnk      
    4472:	00 00 06    	return    

00004474 <_main>:

int16_t main(void) {
    4474:	42 00 fa    	lnk       #0x42

00004476 <.LSM59>:
    // printf("Starting Master Controller...\r\n");
    init_clock();
    4476:	00 10 20    	mov.w     #0x100, w0
    4478:	20 3a 88    	mov.w     w0, 0x744

0000447a <.LSM60>:
    init_ui();
    447a:	2d 00 07    	rcall     0x44d6 <_init_ui>

0000447c <.LSM61>:
    init_timer();
    447c:	cd fa 07    	rcall     0x3a18 <_init_timer>

0000447e <.LSM62>:
    init_uart();
    447e:	eb f0 07    	rcall     0x2656 <_init_uart>

00004480 <.LSM63>:
    setup();
    4480:	e8 ff 07    	rcall     0x4452 <_setup>

00004482 <.LSM64>:
    uint16_t counter = 0;
    4482:	00 00 eb    	clr.w     w0
    4484:	00 0f 78    	mov.w     w0, [w14]

00004486 <.LSM65>:
    uint8_t status_msg [64];
    led_off(&led2);
    4486:	80 80 20    	mov.w     #0x808, w0
    4488:	98 00 07    	rcall     0x45ba <_led_off>

0000448a <.LSM66>:
    led_off(&led3);
    448a:	00 81 20    	mov.w     #0x810, w0
    448c:	96 00 07    	rcall     0x45ba <_led_off>

0000448e <.LSM67>:

    InitUSB();
    448e:	de f5 07    	rcall     0x304c <_InitUSB>

00004490 <.LSM68>:
    U1IE = 0xFF; //setting up ISR for USB requests
    4490:	f0 0f 20    	mov.w     #0xff, w0
    4492:	60 24 88    	mov.w     w0, 0x48c

00004494 <.LSM69>:
    U1EIE = 0xFF;
    4494:	f0 0f 20    	mov.w     #0xff, w0
    4496:	80 24 88    	mov.w     w0, 0x490

00004498 <.LSM70>:
    IFS5bits.USB1IF = 0; //flag
    4498:	8e c0 a9    	bclr.b    0x8e, #0x6

0000449a <.LSM71>:
    IEC5bits.USB1IE = 1; //enable
    449a:	9e c0 a8    	bset.b    0x9e, #0x6
    449c:	01 00 37    	bra       0x44a0 <.L17>

0000449e <.L18>:

    while (1) {
        if (timer_flag(&timer1)) {
            // Blink green light to show normal operation.
            timer_lower(&timer1);
            led_toggle(&led1);
        }
        if (timer_flag(&timer2)) {
            // Transmit UART data
            timer_lower(&timer2);
            counter ++;
            // sprintf(status_msg, "This is message #%d.\r", counter);
            // uint8_t addr = counter % 4;
            // uint8_t cmd = 28;
            // sprintf(status_msg, "%02x%02x\r", cmd, addr);
            // uart_puts(&uart1, status_msg);
            // UART_ctl(SEND_ROCKET_COMMANDS, 0b11);
            // UART_ctl(SET_ROCKET_STATE, IDLE);
            UART_ctl(GET_ROCKET_VALS,0b0);
            
            // if (rocket_state == 15) {
            //     led_on(&led1);
            // }

            // else{
            //     led_off(&led1);
            // }

            // if(rocket_speed ==15){
            //     led_on(&led2);
            // }

            // else{
            //     led_off(&led2);
            // }

             if(rocket_tilt==15){
                led_on(&led2);
            }

            else{
                led_off(&led2);
            }
       
       
        }   
    }
    449e:	00 00 00    	nop       

000044a0 <.L17>:
    44a0:	c0 50 21    	mov.w     #0x150c, w0
    44a2:	12 fc 07    	rcall     0x3cc8 <_timer_flag>
    44a4:	00 00 e0    	cp0.w     w0
    44a6:	04 00 32    	bra       Z, 0x44b0 <.L14>

000044a8 <.LSM74>:
    44a8:	c0 50 21    	mov.w     #0x150c, w0
    44aa:	1f fc 07    	rcall     0x3cea <_timer_lower>

000044ac <.LSM75>:
    44ac:	00 80 20    	mov.w     #0x800, w0
    44ae:	96 00 07    	rcall     0x45dc <_led_toggle>

000044b0 <.L14>:
    44b0:	20 52 21    	mov.w     #0x1522, w0
    44b2:	0a fc 07    	rcall     0x3cc8 <_timer_flag>
    44b4:	00 00 e0    	cp0.w     w0
    44b6:	f3 ff 32    	bra       Z, 0x449e <.L18>

000044b8 <.LSM77>:
    44b8:	20 52 21    	mov.w     #0x1522, w0
    44ba:	17 fc 07    	rcall     0x3cea <_timer_lower>

000044bc <.LSM78>:
    44bc:	1e 0f e8    	inc.w     [w14], [w14]

000044be <.LSM79>:
    44be:	80 40 eb    	clr.b     w1
    44c0:	00 40 eb    	clr.b     w0
    44c2:	58 ff 07    	rcall     0x4374 <_UART_ctl>

000044c4 <.LSM80>:
    44c4:	30 42 80    	mov.w     0x846, w0
    44c6:	ef 0f 50    	sub.w     w0, #0xf, [w15]
    44c8:	03 00 3a    	bra       NZ, 0x44d0 <.L16>

000044ca <.LSM81>:
    44ca:	80 80 20    	mov.w     #0x808, w0
    44cc:	66 00 07    	rcall     0x459a <_led_on>

000044ce <.LSM82>:
    44ce:	e8 ff 37    	bra       0x44a0 <.L17>

000044d0 <.L16>:
    44d0:	80 80 20    	mov.w     #0x808, w0
    44d2:	73 00 07    	rcall     0x45ba <_led_off>

000044d4 <.LSM84>:
    44d4:	e5 ff 37    	bra       0x44a0 <.L17>

000044d6 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    44d6:	00 00 fa    	lnk       #0x0

000044d8 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    44d8:	74 c0 b3    	mov.b     #0x7, w4
    44da:	63 4e 20    	mov.w     #0x4e6, w3
    44dc:	82 2d 20    	mov.w     #0x2d8, w2
    44de:	a1 2d 20    	mov.w     #0x2da, w1
    44e0:	00 80 20    	mov.w     #0x800, w0
    44e2:	20 00 07    	rcall     0x4524 <_led_init>

000044e4 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    44e4:	00 42 eb    	clr.b     w4
    44e6:	a3 4e 20    	mov.w     #0x4ea, w3
    44e8:	82 2e 20    	mov.w     #0x2e8, w2
    44ea:	a1 2e 20    	mov.w     #0x2ea, w1
    44ec:	80 80 20    	mov.w     #0x808, w0
    44ee:	1a 00 07    	rcall     0x4524 <_led_init>

000044f0 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    44f0:	14 c0 b3    	mov.b     #0x1, w4
    44f2:	a3 4e 20    	mov.w     #0x4ea, w3
    44f4:	82 2e 20    	mov.w     #0x2e8, w2
    44f6:	a1 2e 20    	mov.w     #0x2ea, w1
    44f8:	00 81 20    	mov.w     #0x810, w0
    44fa:	14 00 07    	rcall     0x4524 <_led_init>

000044fc <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    44fc:	f4 c0 b3    	mov.b     #0xf, w4
    44fe:	43 4e 20    	mov.w     #0x4e4, w3
    4500:	02 2d 20    	mov.w     #0x2d0, w2
    4502:	21 2d 20    	mov.w     #0x2d2, w1
    4504:	80 81 20    	mov.w     #0x818, w0
    4506:	ad 00 07    	rcall     0x4662 <_sw_init>

00004508 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    4508:	c4 c0 b3    	mov.b     #0xc, w4
    450a:	43 4e 20    	mov.w     #0x4e4, w3
    450c:	02 2d 20    	mov.w     #0x2d0, w2
    450e:	21 2d 20    	mov.w     #0x2d2, w1
    4510:	00 82 20    	mov.w     #0x820, w0
    4512:	a7 00 07    	rcall     0x4662 <_sw_init>

00004514 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4514:	c4 c0 b3    	mov.b     #0xc, w4
    4516:	23 4e 20    	mov.w     #0x4e2, w3
    4518:	82 2c 20    	mov.w     #0x2c8, w2
    451a:	a1 2c 20    	mov.w     #0x2ca, w1
    451c:	80 82 20    	mov.w     #0x828, w0
    451e:	a1 00 07    	rcall     0x4662 <_sw_init>

00004520 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    4520:	00 80 fa    	ulnk      
    4522:	00 00 06    	return    

00004524 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    4524:	0a 00 fa    	lnk       #0xa
    4526:	00 0f 78    	mov.w     w0, [w14]
    4528:	11 07 98    	mov.w     w1, [w14+2]
    452a:	22 07 98    	mov.w     w2, [w14+4]
    452c:	33 07 98    	mov.w     w3, [w14+6]
    452e:	04 4f 98    	mov.b     w4, [w14+8]

00004530 <.LSM9>:
    self->port = port;
    4530:	1e 00 78    	mov.w     [w14], w0
    4532:	9e 00 90    	mov.w     [w14+2], w1
    4534:	01 08 78    	mov.w     w1, [w0]

00004536 <.LSM10>:
    self->tris = tris;
    4536:	1e 00 78    	mov.w     [w14], w0
    4538:	ae 00 90    	mov.w     [w14+4], w1
    453a:	11 00 98    	mov.w     w1, [w0+2]

0000453c <.LSM11>:
    self->ans = ans;
    453c:	1e 00 78    	mov.w     [w14], w0
    453e:	be 00 90    	mov.w     [w14+6], w1
    4540:	21 00 98    	mov.w     w1, [w0+4]

00004542 <.LSM12>:
    self->bit = bit;
    4542:	1e 00 78    	mov.w     [w14], w0
    4544:	8e 48 90    	mov.b     [w14+8], w1
    4546:	61 40 98    	mov.b     w1, [w0+6]

00004548 <.LSM13>:

    bitclear(self->ans, self->bit);
    4548:	1e 00 78    	mov.w     [w14], w0
    454a:	20 00 90    	mov.w     [w0+4], w0
    454c:	9e 00 78    	mov.w     [w14], w1
    454e:	a1 00 90    	mov.w     [w1+4], w1
    4550:	11 01 78    	mov.w     [w1], w2
    4552:	9e 00 78    	mov.w     [w14], w1
    4554:	e1 40 90    	mov.b     [w1+6], w1
    4556:	81 80 fb    	ze        w1, w1
    4558:	13 00 20    	mov.w     #0x1, w3
    455a:	81 18 dd    	sl.w      w3, w1, w1
    455c:	81 80 ea    	com.w     w1, w1
    455e:	81 00 61    	and.w     w2, w1, w1
    4560:	01 08 78    	mov.w     w1, [w0]

00004562 <.LSM14>:
    bitclear(self->port, self->bit);
    4562:	1e 00 78    	mov.w     [w14], w0
    4564:	10 00 78    	mov.w     [w0], w0
    4566:	9e 00 78    	mov.w     [w14], w1
    4568:	91 00 78    	mov.w     [w1], w1
    456a:	11 01 78    	mov.w     [w1], w2
    456c:	9e 00 78    	mov.w     [w14], w1
    456e:	e1 40 90    	mov.b     [w1+6], w1
    4570:	81 80 fb    	ze        w1, w1
    4572:	13 00 20    	mov.w     #0x1, w3
    4574:	81 18 dd    	sl.w      w3, w1, w1
    4576:	81 80 ea    	com.w     w1, w1
    4578:	81 00 61    	and.w     w2, w1, w1
    457a:	01 08 78    	mov.w     w1, [w0]

0000457c <.LSM15>:
    bitclear(self->tris, self->bit);
    457c:	1e 00 78    	mov.w     [w14], w0
    457e:	10 00 90    	mov.w     [w0+2], w0
    4580:	9e 00 78    	mov.w     [w14], w1
    4582:	91 00 90    	mov.w     [w1+2], w1
    4584:	11 01 78    	mov.w     [w1], w2
    4586:	9e 00 78    	mov.w     [w14], w1
    4588:	e1 40 90    	mov.b     [w1+6], w1
    458a:	81 80 fb    	ze        w1, w1
    458c:	13 00 20    	mov.w     #0x1, w3
    458e:	81 18 dd    	sl.w      w3, w1, w1
    4590:	81 80 ea    	com.w     w1, w1
    4592:	81 00 61    	and.w     w2, w1, w1
    4594:	01 08 78    	mov.w     w1, [w0]

00004596 <.LSM16>:
}
    4596:	00 80 fa    	ulnk      
    4598:	00 00 06    	return    

0000459a <_led_on>:

void led_on(_LED *self) {
    459a:	02 00 fa    	lnk       #0x2
    459c:	00 0f 78    	mov.w     w0, [w14]

0000459e <.LSM18>:
    bitset(self->port, self->bit);
    459e:	1e 00 78    	mov.w     [w14], w0
    45a0:	10 00 78    	mov.w     [w0], w0
    45a2:	9e 00 78    	mov.w     [w14], w1
    45a4:	91 00 78    	mov.w     [w1], w1
    45a6:	11 01 78    	mov.w     [w1], w2
    45a8:	9e 00 78    	mov.w     [w14], w1
    45aa:	e1 40 90    	mov.b     [w1+6], w1
    45ac:	81 80 fb    	ze        w1, w1
    45ae:	13 00 20    	mov.w     #0x1, w3
    45b0:	81 18 dd    	sl.w      w3, w1, w1
    45b2:	82 80 70    	ior.w     w1, w2, w1
    45b4:	01 08 78    	mov.w     w1, [w0]

000045b6 <.LSM19>:
}
    45b6:	00 80 fa    	ulnk      
    45b8:	00 00 06    	return    

000045ba <_led_off>:

void led_off(_LED *self) {
    45ba:	02 00 fa    	lnk       #0x2
    45bc:	00 0f 78    	mov.w     w0, [w14]

000045be <.LSM21>:
    bitclear(self->port, self->bit);
    45be:	1e 00 78    	mov.w     [w14], w0
    45c0:	10 00 78    	mov.w     [w0], w0
    45c2:	9e 00 78    	mov.w     [w14], w1
    45c4:	91 00 78    	mov.w     [w1], w1
    45c6:	11 01 78    	mov.w     [w1], w2
    45c8:	9e 00 78    	mov.w     [w14], w1
    45ca:	e1 40 90    	mov.b     [w1+6], w1
    45cc:	81 80 fb    	ze        w1, w1
    45ce:	13 00 20    	mov.w     #0x1, w3
    45d0:	81 18 dd    	sl.w      w3, w1, w1
    45d2:	81 80 ea    	com.w     w1, w1
    45d4:	81 00 61    	and.w     w2, w1, w1
    45d6:	01 08 78    	mov.w     w1, [w0]

000045d8 <.LSM22>:
}
    45d8:	00 80 fa    	ulnk      
    45da:	00 00 06    	return    

000045dc <_led_toggle>:

void led_toggle(_LED *self) {
    45dc:	02 00 fa    	lnk       #0x2
    45de:	00 0f 78    	mov.w     w0, [w14]

000045e0 <.LSM24>:
    bitflip(self->port, self->bit);
    45e0:	1e 00 78    	mov.w     [w14], w0
    45e2:	10 00 78    	mov.w     [w0], w0
    45e4:	9e 00 78    	mov.w     [w14], w1
    45e6:	91 00 78    	mov.w     [w1], w1
    45e8:	11 01 78    	mov.w     [w1], w2
    45ea:	9e 00 78    	mov.w     [w14], w1
    45ec:	e1 40 90    	mov.b     [w1+6], w1
    45ee:	81 80 fb    	ze        w1, w1
    45f0:	13 00 20    	mov.w     #0x1, w3
    45f2:	81 18 dd    	sl.w      w3, w1, w1
    45f4:	81 00 69    	xor.w     w2, w1, w1
    45f6:	01 08 78    	mov.w     w1, [w0]

000045f8 <.LSM25>:
}
    45f8:	00 80 fa    	ulnk      
    45fa:	00 00 06    	return    

000045fc <_led_write>:

void led_write(_LED *self, uint16_t val) {
    45fc:	04 00 fa    	lnk       #0x4
    45fe:	00 0f 78    	mov.w     w0, [w14]
    4600:	11 07 98    	mov.w     w1, [w14+2]

00004602 <.LSM27>:
    if (val)
    4602:	1e 00 90    	mov.w     [w14+2], w0
    4604:	00 00 e0    	cp0.w     w0
    4606:	0d 00 32    	bra       Z, 0x4622 <.L7>

00004608 <.LSM28>:
        bitset(self->port, self->bit);
    4608:	1e 00 78    	mov.w     [w14], w0
    460a:	10 00 78    	mov.w     [w0], w0
    460c:	9e 00 78    	mov.w     [w14], w1
    460e:	91 00 78    	mov.w     [w1], w1
    4610:	11 01 78    	mov.w     [w1], w2
    4612:	9e 00 78    	mov.w     [w14], w1
    4614:	e1 40 90    	mov.b     [w1+6], w1
    4616:	81 80 fb    	ze        w1, w1
    4618:	13 00 20    	mov.w     #0x1, w3
    461a:	81 18 dd    	sl.w      w3, w1, w1
    461c:	82 80 70    	ior.w     w1, w2, w1
    461e:	01 08 78    	mov.w     w1, [w0]
    4620:	0d 00 37    	bra       0x463c <.L6>

00004622 <.L7>:
    else
        bitclear(self->port, self->bit);
    4622:	1e 00 78    	mov.w     [w14], w0
    4624:	10 00 78    	mov.w     [w0], w0
    4626:	9e 00 78    	mov.w     [w14], w1
    4628:	91 00 78    	mov.w     [w1], w1
    462a:	11 01 78    	mov.w     [w1], w2
    462c:	9e 00 78    	mov.w     [w14], w1
    462e:	e1 40 90    	mov.b     [w1+6], w1
    4630:	81 80 fb    	ze        w1, w1
    4632:	13 00 20    	mov.w     #0x1, w3
    4634:	81 18 dd    	sl.w      w3, w1, w1
    4636:	81 80 ea    	com.w     w1, w1
    4638:	81 00 61    	and.w     w2, w1, w1
    463a:	01 08 78    	mov.w     w1, [w0]

0000463c <.L6>:
}
    463c:	00 80 fa    	ulnk      
    463e:	00 00 06    	return    

00004640 <_led_read>:

uint16_t led_read(_LED *self) {
    4640:	02 00 fa    	lnk       #0x2
    4642:	00 0f 78    	mov.w     w0, [w14]

00004644 <.LSM32>:
    return bitread(self->port, self->bit);
    4644:	1e 00 78    	mov.w     [w14], w0
    4646:	10 00 78    	mov.w     [w0], w0
    4648:	90 00 78    	mov.w     [w0], w1
    464a:	1e 00 78    	mov.w     [w14], w0
    464c:	60 40 90    	mov.b     [w0+6], w0
    464e:	00 80 fb    	ze        w0, w0
    4650:	12 00 20    	mov.w     #0x1, w2
    4652:	00 10 dd    	sl.w      w2, w0, w0
    4654:	00 80 60    	and.w     w1, w0, w0
    4656:	00 f0 a7    	btsc.w    w0, #0xf
    4658:	00 00 ea    	neg.w     w0, w0
    465a:	00 00 ea    	neg.w     w0, w0
    465c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000465e <.LSM33>:
}
    465e:	00 80 fa    	ulnk      
    4660:	00 00 06    	return    

00004662 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    4662:	0a 00 fa    	lnk       #0xa
    4664:	00 0f 78    	mov.w     w0, [w14]
    4666:	11 07 98    	mov.w     w1, [w14+2]
    4668:	22 07 98    	mov.w     w2, [w14+4]
    466a:	33 07 98    	mov.w     w3, [w14+6]
    466c:	04 4f 98    	mov.b     w4, [w14+8]

0000466e <.LSM35>:
    self->port = port;
    466e:	1e 00 78    	mov.w     [w14], w0
    4670:	9e 00 90    	mov.w     [w14+2], w1
    4672:	01 08 78    	mov.w     w1, [w0]

00004674 <.LSM36>:
    self->tris = tris;
    4674:	1e 00 78    	mov.w     [w14], w0
    4676:	ae 00 90    	mov.w     [w14+4], w1
    4678:	11 00 98    	mov.w     w1, [w0+2]

0000467a <.LSM37>:
    self->ans = ans;
    467a:	1e 00 78    	mov.w     [w14], w0
    467c:	be 00 90    	mov.w     [w14+6], w1
    467e:	21 00 98    	mov.w     w1, [w0+4]

00004680 <.LSM38>:
    self->bit = bit;
    4680:	1e 00 78    	mov.w     [w14], w0
    4682:	8e 48 90    	mov.b     [w14+8], w1
    4684:	61 40 98    	mov.b     w1, [w0+6]

00004686 <.LSM39>:

    bitclear(self->ans, self->bit);
    4686:	1e 00 78    	mov.w     [w14], w0
    4688:	20 00 90    	mov.w     [w0+4], w0
    468a:	9e 00 78    	mov.w     [w14], w1
    468c:	a1 00 90    	mov.w     [w1+4], w1
    468e:	11 01 78    	mov.w     [w1], w2
    4690:	9e 00 78    	mov.w     [w14], w1
    4692:	e1 40 90    	mov.b     [w1+6], w1
    4694:	81 80 fb    	ze        w1, w1
    4696:	13 00 20    	mov.w     #0x1, w3
    4698:	81 18 dd    	sl.w      w3, w1, w1
    469a:	81 80 ea    	com.w     w1, w1
    469c:	81 00 61    	and.w     w2, w1, w1
    469e:	01 08 78    	mov.w     w1, [w0]

000046a0 <.LSM40>:
    bitset(self->tris, self->bit);
    46a0:	1e 00 78    	mov.w     [w14], w0
    46a2:	10 00 90    	mov.w     [w0+2], w0
    46a4:	9e 00 78    	mov.w     [w14], w1
    46a6:	91 00 90    	mov.w     [w1+2], w1
    46a8:	11 01 78    	mov.w     [w1], w2
    46aa:	9e 00 78    	mov.w     [w14], w1
    46ac:	e1 40 90    	mov.b     [w1+6], w1
    46ae:	81 80 fb    	ze        w1, w1
    46b0:	13 00 20    	mov.w     #0x1, w3
    46b2:	81 18 dd    	sl.w      w3, w1, w1
    46b4:	82 80 70    	ior.w     w1, w2, w1
    46b6:	01 08 78    	mov.w     w1, [w0]

000046b8 <.LSM41>:
}
    46b8:	00 80 fa    	ulnk      
    46ba:	00 00 06    	return    

000046bc <_sw_read>:

uint16_t sw_read(_SW *self) {
    46bc:	02 00 fa    	lnk       #0x2
    46be:	00 0f 78    	mov.w     w0, [w14]

000046c0 <.LSM43>:
    return bitread(self->port, self->bit);
    46c0:	1e 00 78    	mov.w     [w14], w0
    46c2:	10 00 78    	mov.w     [w0], w0
    46c4:	90 00 78    	mov.w     [w0], w1
    46c6:	1e 00 78    	mov.w     [w14], w0
    46c8:	60 40 90    	mov.b     [w0+6], w0
    46ca:	00 80 fb    	ze        w0, w0
    46cc:	12 00 20    	mov.w     #0x1, w2
    46ce:	00 10 dd    	sl.w      w2, w0, w0
    46d0:	00 80 60    	and.w     w1, w0, w0
    46d2:	00 f0 a7    	btsc.w    w0, #0xf
    46d4:	00 00 ea    	neg.w     w0, w0
    46d6:	00 00 ea    	neg.w     w0, w0
    46d8:	4f 00 de    	lsr.w     w0, #0xf, w0

000046da <.LSM44>:
}
    46da:	00 80 fa    	ulnk      
    46dc:	00 00 06    	return    
Disassembly of section .dinit:

000046de <.dinit>:
    46de:	4c 08 00    	nop       
    46e0:	80 08 00    	nop       
    46e2:	80 00 00    	nop       
    46e4:	42 08 00    	nop       
    46e6:	06 00 00    	nop       
    46e8:	80 00 00    	nop       
    46ea:	cc 10 00    	nop       
    46ec:	b8 01 00    	nop       
    46ee:	80 00 00    	nop       
    46f0:	00 08 00    	nop       
    46f2:	30 00 00    	nop       
    46f4:	80 00 00    	nop       
    46f6:	ea 13 00    	nop       
    46f8:	10 00 00    	nop       
    46fa:	82 00 00    	nop       
    46fc:	bd 37 86    	mov.w     0xc6f6, w13
    46fe:	33 bd 37    	bra       0xffffc166
    4700:	06 35 bd    	subr.w    0x1506
    4702:	37 86 36    	bra       LEU, 0xffff5372
    4704:	bd 37 86    	mov.w     0xc6f6, w13
    4706:	37 00 00    	nop       
    4708:	0c 15 00    	nop       
    470a:	6e 00 00    	nop       
    470c:	80 00 00    	nop       
    470e:	80 14 00    	nop       
    4710:	8c 00 00    	nop       
    4712:	80 00 00    	nop       
    4714:	00 14 00    	nop       
    4716:	80 00 00    	nop       
    4718:	80 00 00    	nop       
    471a:	30 08 00    	nop       
    471c:	12 00 00    	nop       
    471e:	80 00 00    	nop       
    4720:	84 12 00    	nop       
    4722:	1c 01 00    	nop       
    4724:	80 00 00    	nop       
    4726:	48 08 00    	nop       
    4728:	04 00 00    	nop       
    472a:	80 00 00    	nop       
    472c:	a0 13 00    	nop       
    472e:	4a 00 00    	nop       
    4730:	82 00 00    	nop       
    4732:	30 31 32    	bra       Z, 0xa994
    4734:	33 34 35    	bra       LT, 0xaf9c
    4736:	36 37 38    	bra       NOV, 0xb5a4
    4738:	39 61 62    	and.b     w4, [w9++], [--w2]
    473a:	63 64 65    	and.b     w10, #0x3, [--w8]
    473c:	66 67 68    	xor.b     w0, #0x6, [--w14]
    473e:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    4740:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    4742:	6f 70 71    	.pword 0x71706f
    4744:	72 73 74    	.pword 0x747372
    4746:	75 76 77    	.pword 0x777675
    4748:	78 79 7a    	.pword 0x7a7978
    474a:	00 00 00    	nop       
    474c:	41 29 21    	mov.w     #0x1294, w1
    474e:	1c 19 17    	subr.w    w14, [w12], [w2++]
    4750:	16 15 14    	subr.w    w8, [w6], [w10--]
    4752:	13 12 12    	subr.w    w4, [w3], [w4--]
    4754:	11 11 11    	subr.w    w2, [w1], [w2--]
    4756:	10 10 10    	subr.w    w0, [w0], [w0--]
    4758:	0f 0f 0f    	bra       SB, 0x6578
    475a:	0f 0e 0e    	bra       SA, 0x637a
    475c:	0e 0e 0e    	bra       SA, 0x637a
    475e:	0e 0e 0d    	bra       OB, 0x637c
    4760:	0d 0d 0d    	bra       OB, 0x617c
    4762:	0d 0d 00    	nop       
    4764:	fa 13 00    	nop       
    4766:	04 00 00    	nop       
    4768:	80 00 00    	nop       
    476a:	9c 15 00    	nop       
    476c:	1a 00 00    	nop       
    476e:	82 00 00    	nop       
    4770:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    4772:	74 7a 4c    	.pword 0x4c7a74
    4774:	00 00 01    	call      w0
    4776:	00 02 00    	nop       
    4778:	04 00 08    	do        #0x4, 0x677c
    477a:	00 10 00 
    477c:	00 00 20    	mov.w     #0x0, w0
    477e:	2b 2d 23    	mov.w     #0x32d2, w11
    4780:	30 00 00    	nop       
    4782:	7a 15 00    	nop       
    4784:	22 00 00    	nop       
    4786:	82 00 00    	nop       
    4788:	30 31 32    	bra       Z, 0xa9ea
    478a:	33 34 35    	bra       LT, 0xaff2
    478c:	36 37 38    	bra       NOV, 0xb5fa
    478e:	39 41 42    	add.b     w4, [w9++], w2
    4790:	43 44 45    	add.b     w10, [--w3], w8
    4792:	46 00 30    	bra       OV, 0x4820
    4794:	31 32 33    	bra       N, 0xabf8
    4796:	34 35 36    	bra       LEU, 0xb200
    4798:	37 38 39    	bra       NC, 0xb808
    479a:	61 62 63    	and.b     w6, #0x1, [--w4]
    479c:	64 65 66    	and.b     w12, #0x4, [--w10]
	...
Disassembly of section .isr:

000047a2 <__DefaultInterrupt>:
    47a2:	00 40 da    	.pword 0xda4000
    47a4:	00 00 fe    	reset     
