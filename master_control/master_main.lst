
master_main.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	0f e8 21    	mov.w     #0x1e80, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	00 80 24    	mov.w     #0x4800, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	c2 45 02    	call      0x45c2 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	c0 06 20    	mov.w     #0x6c, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	b8 44 04    	goto      0x44b8 <_reset>
    11e4:	00 00 00 
    11e6:	84 44 04    	goto      0x4484 <_idle>
    11e8:	00 00 00 
    11ea:	ee 44 04    	goto      0x44ee <_flying>
    11ec:	00 00 00 
    11ee:	14 45 04    	goto      0x4514 <_lose>
    11f0:	00 00 00 
    11f2:	5a 45 04    	goto      0x455a <_win>
    11f4:	00 00 00 
    11f6:	2a 3e 04    	goto      0x3e2a <___digitalRead>
    11f8:	00 00 00 
    11fa:	e6 3d 04    	goto      0x3de6 <___digitalWrite>
    11fc:	00 00 00 
    11fe:	4c 3e 04    	goto      0x3e4c <___analogRead>
    1200:	00 00 00 
    1202:	9e 21 04    	goto      0x219e <___putc_nobuffer>
    1204:	00 00 00 
    1206:	e0 21 04    	goto      0x21e0 <___putc_buffer>
    1208:	00 00 00 
    120a:	c2 21 04    	goto      0x21c2 <___getc_nobuffer>
    120c:	00 00 00 
    120e:	d8 22 04    	goto      0x22d8 <___getc_buffer>
    1210:	00 00 00 
    1212:	2a 17 04    	goto      0x172a <_prout>
    1214:	00 00 00 

00001216 <___subsf3>:
    1216:	03 f0 a2    	btg.w     w3, #0xf

00001218 <___addsf3>:
    1218:	88 9f be    	mov.d     w8, [w15++]
    121a:	8a 9f be    	mov.d     w10, [w15++]
    121c:	8c 1f 78    	mov.w     w12, [w15++]
    121e:	f7 00 07    	rcall     0x140e <__funpack2>
    1220:	fe 00 33    	bra       N, 0x141e <__fPropagateNaN>
    1222:	64 50 e1    	cp.w      w10, #0x4
    1224:	4f 00 32    	bra       Z, 0x12c4 <aisinfinite>

00001226 <checkspecialb>:
    1226:	64 20 e1    	cp.w      w4, #0x4
    1228:	52 00 32    	bra       Z, 0x12ce <return2>
    122a:	03 82 6c    	xor.w     w9, w3, w4
    122c:	07 00 3b    	bra       NN, 0x123c <getsign>
    122e:	09 05 d0    	sl.w      w9, w10
    1230:	03 06 d0    	sl.w      w3, w12
    1232:	82 0f 54    	sub.w     w8, w2, [w15]
    1234:	0c 06 5d    	subb.w    w10, w12, w12
    1236:	02 00 39    	bra       NC, 0x123c <getsign>
    1238:	02 00 32    	bra       Z, 0x123e <gotsign>
    123a:	89 01 78    	mov.w     w9, w3

0000123c <getsign>:
    123c:	03 06 78    	mov.w     w3, w12

0000123e <gotsign>:
    123e:	85 82 55    	sub.w     w11, w5, w5
    1240:	04 00 3d    	bra       GE, 0x124a <expcanonical>
    1242:	00 03 fd    	exch      w0, w6
    1244:	81 03 fd    	exch      w1, w7
    1246:	85 02 ea    	neg.w     w5, w5
    1248:	8b 85 42    	add.w     w5, w11, w11

0000124a <expcanonical>:
    124a:	84 0f 72    	ior.w     w4, w4, [w15]
    124c:	02 00 3b    	bra       NN, 0x1252 <nonegate>
    124e:	60 00 10    	subr.w    w0, #0x0, w0
    1250:	e0 80 18    	subbr.w   w1, #0x0, w1

00001252 <nonegate>:
    1252:	60 11 b8    	mul.uu    w2, #0x0, w2
    1254:	00 05 eb    	clr.w     w10
    1256:	7a 28 e1    	cp.w      w5, #0x1a
    1258:	0a 00 39    	bra       NC, 0x126e <aligniter>
    125a:	06 00 78    	mov.w     w6, w0
    125c:	c7 5d dd    	sl.w      w11, #0x7, w11
    125e:	f7 07 b2    	and.w     #0x7f, w7
    1260:	87 80 75    	ior.w     w11, w7, w1
    1262:	2d 00 37    	bra       0x12be <signoff>

00001264 <align>:
    1264:	82 81 71    	ior.w     w3, w2, w3
    1266:	0a 01 78    	mov.w     w10, w2
    1268:	61 05 60    	and.w     w0, #0x1, w10
    126a:	81 80 d1    	asr.w     w1, w1
    126c:	00 80 d3    	rrc.w     w0, w0

0000126e <aligniter>:
    126e:	85 02 e9    	dec.w     w5, w5
    1270:	f9 ff 3b    	bra       NN, 0x1264 <align>

00001272 <aligned>:
    1272:	06 04 40    	add.w     w0, w6, w8
    1274:	87 84 48    	addc.w    w1, w7, w9
    1276:	02 00 3b    	bra       NN, 0x127c <normalizesum>
    1278:	60 04 14    	subr.w    w8, #0x0, w8
    127a:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000127c <normalizesum>:
    127c:	09 88 a3    	btst.z    w9, #0x8
    127e:	07 00 32    	bra       Z, 0x128e <checknormal>
    1280:	8a 81 71    	ior.w     w3, w10, w3
    1282:	82 81 71    	ior.w     w3, w2, w3
    1284:	61 01 64    	and.w     w8, #0x1, w2
    1286:	89 04 d1    	lsr.w     w9, w9
    1288:	08 84 d3    	rrc.w     w8, w8
    128a:	8b 05 e8    	inc.w     w11, w11
    128c:	17 00 37    	bra       0x12bc <round>

0000128e <checknormal>:
    128e:	09 78 a3    	btst.z    w9, #0x7
    1290:	13 00 3a    	bra       NZ, 0x12b8 <discardguard>

00001292 <underflow>:
    1292:	0b 00 e0    	cp0.w     w11
    1294:	13 00 34    	bra       LE, 0x12bc <round>
    1296:	8b 05 e9    	dec.w     w11, w11
    1298:	08 04 44    	add.w     w8, w8, w8
    129a:	89 84 4c    	addc.w    w9, w9, w9
    129c:	0a 44 74    	ior.b     w8, w10, w8
    129e:	09 78 a3    	btst.z    w9, #0x7
    12a0:	0d 00 3a    	bra       NZ, 0x12bc <round>

000012a2 <normalizeloop>:
    12a2:	0b 00 e0    	cp0.w     w11
    12a4:	07 00 34    	bra       LE, 0x12b4 <normalizeexit>
    12a6:	8b 05 e9    	dec.w     w11, w11
    12a8:	08 04 44    	add.w     w8, w8, w8
    12aa:	89 84 4c    	addc.w    w9, w9, w9
    12ac:	01 00 3a    	bra       NZ, 0x12b0 <normalizetest>
    12ae:	0b 00 20    	mov.w     #0x0, w11

000012b0 <normalizetest>:
    12b0:	09 78 a3    	btst.z    w9, #0x7
    12b2:	f7 ff 32    	bra       Z, 0x12a2 <normalizeloop>

000012b4 <normalizeexit>:
    12b4:	00 01 eb    	clr.w     w2
    12b6:	02 00 37    	bra       0x12bc <round>

000012b8 <discardguard>:
    12b8:	82 81 71    	ior.w     w3, w2, w3
    12ba:	0a 01 78    	mov.w     w10, w2

000012bc <round>:
    12bc:	6d 00 07    	rcall     0x1398 <__fpack>

000012be <signoff>:
    12be:	0c f0 a7    	btsc.w    w12, #0xf
    12c0:	01 f0 a0    	bset.w    w1, #0xf
    12c2:	b6 00 37    	bra       0x1430 <__fbopExit>

000012c4 <aisinfinite>:
    12c4:	64 20 e1    	cp.w      w4, #0x4
    12c6:	02 00 3a    	bra       NZ, 0x12cc <return8>
    12c8:	83 8f 6c    	xor.w     w9, w3, [w15]
    12ca:	b6 00 33    	bra       N, 0x1438 <__fbopReturnNaN>

000012cc <return8>:
    12cc:	08 01 be    	mov.d     w8, w2

000012ce <return2>:
    12ce:	02 00 be    	mov.d     w2, w0
    12d0:	af 00 37    	bra       0x1430 <__fbopExit>

000012d2 <___divsf3>:
    12d2:	88 9f be    	mov.d     w8, [w15++]
    12d4:	8a 9f be    	mov.d     w10, [w15++]
    12d6:	8c 1f 78    	mov.w     w12, [w15++]
    12d8:	9a 00 07    	rcall     0x140e <__funpack2>
    12da:	a1 00 33    	bra       N, 0x141e <__fPropagateNaN>
    12dc:	03 86 6c    	xor.w     w9, w3, w12
    12de:	64 50 e1    	cp.w      w10, #0x4
    12e0:	2e 00 32    	bra       Z, 0x133e <aisinfinite>
    12e2:	64 20 e1    	cp.w      w4, #0x4
    12e4:	33 00 32    	bra       Z, 0x134c <returnZero>
    12e6:	61 50 e1    	cp.w      w10, #0x1
    12e8:	2f 00 32    	bra       Z, 0x1348 <aiszero>
    12ea:	61 20 e1    	cp.w      w4, #0x1
    12ec:	31 00 32    	bra       Z, 0x1350 <returnInf>

000012ee <finitenonzero>:
    12ee:	85 85 55    	sub.w     w11, w5, w11
    12f0:	eb 07 b0    	add.w     #0x7e, w11
    12f2:	09 00 20    	mov.w     #0x0, w9
    12f4:	08 04 20    	mov.w     #0x40, w8
    12f6:	05 00 37    	bra       0x1302 <diventry>

000012f8 <divnext>:
    12f8:	08 04 44    	add.w     w8, w8, w8
    12fa:	89 84 4c    	addc.w    w9, w9, w9
    12fc:	0a 00 31    	bra       C, 0x1312 <divdone>

000012fe <divloop>:
    12fe:	06 03 43    	add.w     w6, w6, w6
    1300:	87 83 4b    	addc.w    w7, w7, w7

00001302 <diventry>:
    1302:	00 01 53    	sub.w     w6, w0, w2
    1304:	81 81 5b    	subb.w    w7, w1, w3
    1306:	f8 ff 33    	bra       N, 0x12f8 <divnext>
    1308:	02 03 be    	mov.d     w2, w6
    130a:	08 00 a0    	bset.w    w8, #0x0
    130c:	08 04 44    	add.w     w8, w8, w8
    130e:	89 84 4c    	addc.w    w9, w9, w9
    1310:	f6 ff 39    	bra       NC, 0x12fe <divloop>

00001312 <divdone>:
    1312:	c6 39 dd    	sl.w      w7, #0x6, w3
    1314:	83 01 73    	ior.w     w6, w3, w3
    1316:	01 00 32    	bra       Z, 0x131a <stickyok>
    1318:	13 00 20    	mov.w     #0x1, w3

0000131a <stickyok>:
    131a:	89 04 d1    	lsr.w     w9, w9
    131c:	08 84 d3    	rrc.w     w8, w8
    131e:	09 98 a3    	btst.z    w9, #0x9
    1320:	05 00 32    	bra       Z, 0x132c <guardused>
    1322:	08 00 a7    	btsc.w    w8, #0x0
    1324:	03 00 a0    	bset.w    w3, #0x0
    1326:	89 04 d1    	lsr.w     w9, w9
    1328:	08 84 d3    	rrc.w     w8, w8
    132a:	8b 05 e8    	inc.w     w11, w11

0000132c <guardused>:
    132c:	89 04 d1    	lsr.w     w9, w9
    132e:	08 84 d3    	rrc.w     w8, w8
    1330:	00 01 eb    	clr.w     w2
    1332:	02 81 d2    	rlc.w     w2, w2
    1334:	31 00 07    	rcall     0x1398 <__fpack>

00001336 <return0>:
    1336:	01 f0 a1    	bclr.w    w1, #0xf
    1338:	0c f0 a7    	btsc.w    w12, #0xf
    133a:	01 f0 a0    	bset.w    w1, #0xf
    133c:	79 00 37    	bra       0x1430 <__fbopExit>

0000133e <aisinfinite>:
    133e:	64 20 e1    	cp.w      w4, #0x4
    1340:	7b 00 32    	bra       Z, 0x1438 <__fbopReturnNaN>

00001342 <return8>:
    1342:	08 01 be    	mov.d     w8, w2

00001344 <return2>:
    1344:	02 00 be    	mov.d     w2, w0
    1346:	f7 ff 37    	bra       0x1336 <return0>

00001348 <aiszero>:
    1348:	61 20 e1    	cp.w      w4, #0x1
    134a:	76 00 32    	bra       Z, 0x1438 <__fbopReturnNaN>

0000134c <returnZero>:
    134c:	60 00 b8    	mul.uu    w0, #0x0, w0
    134e:	f3 ff 37    	bra       0x1336 <return0>

00001350 <returnInf>:
    1350:	00 00 20    	mov.w     #0x0, w0
    1352:	01 f8 27    	mov.w     #0x7f80, w1
    1354:	f0 ff 37    	bra       0x1336 <return0>

00001356 <___eqsf2>:
    1356:	14 00 20    	mov.w     #0x1, w4
    1358:	a6 00 37    	bra       0x14a6 <__fcompare>

0000135a <___gesf2>:
    135a:	f4 ff 2f    	mov.w     #0xffff, w4
    135c:	a4 00 37    	bra       0x14a6 <__fcompare>

0000135e <___fixunssfsi>:
    135e:	00 01 be    	mov.d     w0, w2
    1360:	41 00 07    	rcall     0x13e4 <__funpack>
    1362:	04 70 a7    	btsc.w    w4, #0x7
    1364:	03 f0 a1    	bclr.w    w3, #0xf
    1366:	03 f8 a3    	btst.z    w3, #0xf
    1368:	13 00 3a    	bra       NZ, 0x1390 <returnzero>
    136a:	65 09 b1    	sub.w     #0x96, w5
    136c:	10 00 32    	bra       Z, 0x138e <exit>
    136e:	09 00 35    	bra       LT, 0x1382 <shiftright>
    1370:	69 28 e1    	cp.w      w5, #0x9
    1372:	02 00 35    	bra       LT, 0x1378 <shiftleft>
    1374:	01 00 28    	mov.w     #0x8000, w1
    1376:	00 00 05    	retlw.w   #0x0, w0

00001378 <shiftleft>:
    1378:	00 00 40    	add.w     w0, w0, w0
    137a:	81 80 48    	addc.w    w1, w1, w1
    137c:	85 02 e9    	dec.w     w5, w5
    137e:	fc ff 3a    	bra       NZ, 0x1378 <shiftleft>
    1380:	00 00 06    	return    

00001382 <shiftright>:
    1382:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1384:	05 00 35    	bra       LT, 0x1390 <returnzero>

00001386 <shiftrightloop>:
    1386:	81 00 d1    	lsr.w     w1, w1
    1388:	00 80 d3    	rrc.w     w0, w0
    138a:	85 02 e8    	inc.w     w5, w5
    138c:	fc ff 3a    	bra       NZ, 0x1386 <shiftrightloop>

0000138e <exit>:
    138e:	00 00 06    	return    

00001390 <returnzero>:
    1390:	80 00 eb    	clr.w     w1
    1392:	00 00 05    	retlw.w   #0x0, w0

00001394 <___floatunsisf>:
    1394:	60 11 b8    	mul.uu    w2, #0x0, w2
    1396:	a2 00 37    	bra       0x14dc <___floatundisf>

00001398 <__fpack>:
    1398:	81 00 20    	mov.w     #0x8, w1
    139a:	61 80 55    	sub.w     w11, #0x1, w0
    139c:	0b 00 3d    	bra       GE, 0x13b4 <notsubnormal>
    139e:	0b 00 20    	mov.w     #0x0, w11
    13a0:	61 fe 2f    	mov.w     #0xffe6, w1
    13a2:	01 00 e1    	cp.w      w0, w1
    13a4:	1d 00 34    	bra       LE, 0x13e0 <zerosig>

000013a6 <subnormal>:
    13a6:	82 81 71    	ior.w     w3, w2, w3
    13a8:	61 01 64    	and.w     w8, #0x1, w2
    13aa:	89 04 d1    	lsr.w     w9, w9
    13ac:	08 84 d3    	rrc.w     w8, w8
    13ae:	00 00 e8    	inc.w     w0, w0
    13b0:	fa ff 3a    	bra       NZ, 0x13a6 <subnormal>
    13b2:	71 00 20    	mov.w     #0x7, w1

000013b4 <notsubnormal>:
    13b4:	61 00 64    	and.w     w8, #0x1, w0
    13b6:	03 00 70    	ior.w     w0, w3, w0
    13b8:	02 00 60    	and.w     w0, w2, w0
    13ba:	09 00 32    	bra       Z, 0x13ce <packupandgo>
    13bc:	61 04 44    	add.w     w8, #0x1, w8
    13be:	e0 84 4c    	addc.w    w9, #0x0, w9
    13c0:	09 88 a5    	btst.z    w9, w1
    13c2:	05 00 32    	bra       Z, 0x13ce <packupandgo>
    13c4:	8b 05 e8    	inc.w     w11, w11
    13c6:	68 08 e1    	cp.w      w1, #0x8
    13c8:	02 00 3a    	bra       NZ, 0x13ce <packupandgo>
    13ca:	89 04 d1    	lsr.w     w9, w9
    13cc:	08 84 d3    	rrc.w     w8, w8

000013ce <packupandgo>:
    13ce:	f2 0f 20    	mov.w     #0xff, w2
    13d0:	02 58 e1    	cp.w      w11, w2
    13d2:	05 00 3d    	bra       GE, 0x13de <overflow>
    13d4:	c7 5d dd    	sl.w      w11, #0x7, w11
    13d6:	f9 07 b2    	and.w     #0x7f, w9
    13d8:	89 80 75    	ior.w     w11, w9, w1
    13da:	08 00 78    	mov.w     w8, w0
    13dc:	00 00 06    	return    

000013de <overflow>:
    13de:	0b f8 27    	mov.w     #0x7f80, w11

000013e0 <zerosig>:
    13e0:	8b 00 78    	mov.w     w11, w1
    13e2:	00 00 05    	retlw.w   #0x0, w0

000013e4 <__funpack>:
    13e4:	c7 0a de    	lsr.w     w1, #0x7, w5
    13e6:	f1 07 b2    	and.w     #0x7f, w1
    13e8:	f5 0f b2    	and.w     #0xff, w5
    13ea:	08 00 32    	bra       Z, 0x13fc <zeroorsub>
    13ec:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13ee:	02 00 32    	bra       Z, 0x13f4 <nanorinf>

000013f0 <finitereturn>:
    13f0:	01 70 a0    	bset.w    w1, #0x7
    13f2:	24 00 05    	retlw.w   #0x2, w4

000013f4 <nanorinf>:
    13f4:	81 0f 70    	ior.w     w0, w1, [w15]
    13f6:	01 00 32    	bra       Z, 0x13fa <infinite>
    13f8:	04 08 05    	retlw.w   #0x80, w4

000013fa <infinite>:
    13fa:	44 00 05    	retlw.w   #0x4, w4

000013fc <zeroorsub>:
    13fc:	81 0f 70    	ior.w     w0, w1, [w15]
    13fe:	02 00 3a    	bra       NZ, 0x1404 <subnormal>
    1400:	14 00 05    	retlw.w   #0x1, w4

00001402 <normalize>:
    1402:	85 02 e9    	dec.w     w5, w5

00001404 <subnormal>:
    1404:	00 00 40    	add.w     w0, w0, w0
    1406:	81 c0 48    	addc.b    w1, w1, w1
    1408:	fc ff 3b    	bra       NN, 0x1402 <normalize>
    140a:	01 70 a0    	bset.w    w1, #0x7
    140c:	24 00 05    	retlw.w   #0x2, w4

0000140e <__funpack2>:
    140e:	00 04 be    	mov.d     w0, w8
    1410:	e9 ff 07    	rcall     0x13e4 <__funpack>
    1412:	00 03 be    	mov.d     w0, w6
    1414:	04 05 be    	mov.d     w4, w10
    1416:	02 00 be    	mov.d     w2, w0
    1418:	e5 ff 07    	rcall     0x13e4 <__funpack>
    141a:	84 4f 75    	ior.b     w10, w4, [w15]
    141c:	00 00 06    	return    

0000141e <__fPropagateNaN>:
    141e:	02 00 be    	mov.d     w2, w0
    1420:	64 50 e1    	cp.w      w10, #0x4
    1422:	05 00 36    	bra       LEU, 0x142e <return0>
    1424:	64 20 e1    	cp.w      w4, #0x4
    1426:	02 00 36    	bra       LEU, 0x142c <return8>
    1428:	09 68 a3    	btst.z    w9, #0x6
    142a:	01 00 3a    	bra       NZ, 0x142e <return0>

0000142c <return8>:
    142c:	08 00 be    	mov.d     w8, w0

0000142e <return0>:
    142e:	01 60 a0    	bset.w    w1, #0x6

00001430 <__fbopExit>:
    1430:	4f 06 78    	mov.w     [--w15], w12
    1432:	4f 05 be    	mov.d     [--w15], w10
    1434:	4f 04 be    	mov.d     [--w15], w8
    1436:	00 00 06    	return    

00001438 <__fbopReturnNaN>:
    1438:	f0 ff 2f    	mov.w     #0xffff, w0
    143a:	f1 ff 27    	mov.w     #0x7fff, w1
    143c:	f9 ff 37    	bra       0x1430 <__fbopExit>

0000143e <___mulsf3>:
    143e:	88 9f be    	mov.d     w8, [w15++]
    1440:	8a 9f be    	mov.d     w10, [w15++]
    1442:	8c 1f 78    	mov.w     w12, [w15++]
    1444:	e4 ff 07    	rcall     0x140e <__funpack2>
    1446:	eb ff 33    	bra       N, 0x141e <__fPropagateNaN>
    1448:	03 86 6c    	xor.w     w9, w3, w12
    144a:	64 50 e1    	cp.w      w10, #0x4
    144c:	24 00 32    	bra       Z, 0x1496 <aisinfinite>
    144e:	64 20 e1    	cp.w      w4, #0x4
    1450:	27 00 32    	bra       Z, 0x14a0 <bisinfinite>
    1452:	61 50 e1    	cp.w      w10, #0x1
    1454:	22 00 32    	bra       Z, 0x149a <return8>
    1456:	61 20 e1    	cp.w      w4, #0x1
    1458:	21 00 32    	bra       Z, 0x149c <return2>
    145a:	8b 85 42    	add.w     w5, w11, w11
    145c:	eb 07 b1    	sub.w     #0x7e, w11
    145e:	01 34 b8    	mul.uu    w6, w1, w8
    1460:	00 3a b8    	mul.uu    w7, w0, w4
    1462:	08 04 42    	add.w     w4, w8, w8
    1464:	89 84 4a    	addc.w    w5, w9, w9
    1466:	01 3a b8    	mul.uu    w7, w1, w4
    1468:	00 30 b8    	mul.uu    w6, w0, w0
    146a:	88 80 40    	add.w     w1, w8, w1
    146c:	09 01 4a    	addc.w    w4, w9, w2
    146e:	04 00 33    	bra       N, 0x1478 <formsticky>
    1470:	00 00 40    	add.w     w0, w0, w0
    1472:	81 80 48    	addc.w    w1, w1, w1
    1474:	02 01 49    	addc.w    w2, w2, w2
    1476:	8b 05 e9    	dec.w     w11, w11

00001478 <formsticky>:
    1478:	c9 09 dd    	sl.w      w1, #0x9, w3
    147a:	83 01 70    	ior.w     w0, w3, w3
    147c:	01 00 32    	bra       Z, 0x1480 <formRandSig>
    147e:	13 00 20    	mov.w     #0x1, w3

00001480 <formRandSig>:
    1480:	c8 14 de    	lsr.w     w2, #0x8, w9
    1482:	48 14 dd    	sl.w      w2, #0x8, w8
    1484:	47 09 de    	lsr.w     w1, #0x7, w2
    1486:	12 00 b2    	and.w     #0x1, w2
    1488:	c8 08 de    	lsr.w     w1, #0x8, w1
    148a:	08 84 70    	ior.w     w1, w8, w8
    148c:	85 ff 07    	rcall     0x1398 <__fpack>

0000148e <return0>:
    148e:	01 f0 a1    	bclr.w    w1, #0xf
    1490:	0c f0 a7    	btsc.w    w12, #0xf
    1492:	01 f0 a0    	bset.w    w1, #0xf
    1494:	cd ff 37    	bra       0x1430 <__fbopExit>

00001496 <aisinfinite>:
    1496:	61 20 e1    	cp.w      w4, #0x1
    1498:	cf ff 32    	bra       Z, 0x1438 <__fbopReturnNaN>

0000149a <return8>:
    149a:	08 01 be    	mov.d     w8, w2

0000149c <return2>:
    149c:	02 00 be    	mov.d     w2, w0
    149e:	f7 ff 37    	bra       0x148e <return0>

000014a0 <bisinfinite>:
    14a0:	61 50 e1    	cp.w      w10, #0x1
    14a2:	fc ff 3a    	bra       NZ, 0x149c <return2>
    14a4:	c9 ff 37    	bra       0x1438 <__fbopReturnNaN>

000014a6 <__fcompare>:
    14a6:	88 9f be    	mov.d     w8, [w15++]
    14a8:	8a 9f be    	mov.d     w10, [w15++]
    14aa:	84 1f 78    	mov.w     w4, [w15++]
    14ac:	b0 ff 07    	rcall     0x140e <__funpack2>
    14ae:	4f 00 78    	mov.w     [--w15], w0
    14b0:	11 00 33    	bra       N, 0x14d4 <exit>
    14b2:	f0 ff 2f    	mov.w     #0xffff, w0
    14b4:	83 8f 6c    	xor.w     w9, w3, [w15]
    14b6:	06 00 3b    	bra       NN, 0x14c4 <comparemag>
    14b8:	04 05 65    	and.w     w10, w4, w10
    14ba:	0a 00 a7    	btsc.w    w10, #0x0
    14bc:	08 00 37    	bra       0x14ce <returnEqual>
    14be:	09 f0 a6    	btss.w    w9, #0xf
    14c0:	10 00 20    	mov.w     #0x1, w0
    14c2:	08 00 37    	bra       0x14d4 <exit>

000014c4 <comparemag>:
    14c4:	82 0f 54    	sub.w     w8, w2, [w15]
    14c6:	83 8f 5c    	subb.w    w9, w3, [w15]
    14c8:	03 00 39    	bra       NC, 0x14d0 <adjust>
    14ca:	10 00 20    	mov.w     #0x1, w0
    14cc:	01 00 3e    	bra       GTU, 0x14d0 <adjust>

000014ce <returnEqual>:
    14ce:	00 00 20    	mov.w     #0x0, w0

000014d0 <adjust>:
    14d0:	09 f0 a7    	btsc.w    w9, #0xf
    14d2:	00 00 ea    	neg.w     w0, w0

000014d4 <exit>:
    14d4:	4f 05 be    	mov.d     [--w15], w10
    14d6:	4f 04 be    	mov.d     [--w15], w8
    14d8:	00 00 e0    	cp0.w     w0
    14da:	00 00 06    	return    

000014dc <___floatundisf>:
    14dc:	88 9f be    	mov.d     w8, [w15++]
    14de:	8a 9f be    	mov.d     w10, [w15++]
    14e0:	00 82 70    	ior.w     w1, w0, w4
    14e2:	04 02 71    	ior.w     w2, w4, w4
    14e4:	04 82 71    	ior.w     w3, w4, w4
    14e6:	26 00 32    	bra       Z, 0x1534 <return0>
    14e8:	00 04 be    	mov.d     w0, w8
    14ea:	02 00 be    	mov.d     w2, w0
    14ec:	60 11 b8    	mul.uu    w2, #0x0, w2
    14ee:	6b 09 20    	mov.w     #0x96, w11
    14f0:	95 02 20    	mov.w     #0x29, w5
    14f2:	01 82 cf    	ff1l      w1, w4
    14f4:	0a 00 39    	bra       NC, 0x150a <fixshift>
    14f6:	05 41 b1    	sub.b     #0x10, w5
    14f8:	00 82 cf    	ff1l      w0, w4
    14fa:	07 00 39    	bra       NC, 0x150a <fixshift>
    14fc:	05 41 b1    	sub.b     #0x10, w5
    14fe:	09 82 cf    	ff1l      w9, w4
    1500:	04 00 39    	bra       NC, 0x150a <fixshift>
    1502:	05 41 b1    	sub.b     #0x10, w5
    1504:	08 82 cf    	ff1l      w8, w4
    1506:	01 00 39    	bra       NC, 0x150a <fixshift>
    1508:	05 41 b1    	sub.b     #0x10, w5

0000150a <fixshift>:
    150a:	05 42 52    	sub.b     w4, w5, w4
    150c:	12 00 32    	bra       Z, 0x1532 <round>
    150e:	0a 00 3b    	bra       NN, 0x1524 <shiftleft>

00001510 <shiftright>:
    1510:	82 81 71    	ior.w     w3, w2, w3
    1512:	61 01 64    	and.w     w8, #0x1, w2
    1514:	81 00 d1    	lsr.w     w1, w1
    1516:	00 80 d3    	rrc.w     w0, w0
    1518:	89 84 d3    	rrc.w     w9, w9
    151a:	08 84 d3    	rrc.w     w8, w8
    151c:	8b 05 e8    	inc.w     w11, w11
    151e:	04 42 e8    	inc.b     w4, w4
    1520:	f7 ff 3a    	bra       NZ, 0x1510 <shiftright>
    1522:	07 00 37    	bra       0x1532 <round>

00001524 <shiftleft>:
    1524:	08 04 44    	add.w     w8, w8, w8
    1526:	89 84 4c    	addc.w    w9, w9, w9
    1528:	00 00 48    	addc.w    w0, w0, w0
    152a:	81 80 48    	addc.w    w1, w1, w1
    152c:	8b 05 e9    	dec.w     w11, w11
    152e:	04 42 e9    	dec.b     w4, w4
    1530:	f9 ff 3a    	bra       NZ, 0x1524 <shiftleft>

00001532 <round>:
    1532:	32 ff 07    	rcall     0x1398 <__fpack>

00001534 <return0>:
    1534:	4f 05 be    	mov.d     [--w15], w10
    1536:	4f 04 be    	mov.d     [--w15], w8
    1538:	00 00 06    	return    

0000153a <_strtol>:
    153a:	e4 87 47    	add.w     w15, #0x4, w15
    153c:	88 9f be    	mov.d     w8, [w15++]
    153e:	8a 9f be    	mov.d     w10, [w15++]
    1540:	8c 1f 78    	mov.w     w12, [w15++]
    1542:	8e 1f 78    	mov.w     w14, [w15++]
    1544:	00 05 78    	mov.w     w0, w10
    1546:	01 07 78    	mov.w     w1, w14
    1548:	02 06 78    	mov.w     w2, w12
    154a:	0e 00 e0    	cp0.w     w14
    154c:	01 00 3a    	bra       NZ, 0x1550 <.L2>
    154e:	6e 87 57    	sub.w     w15, #0xe, w14

00001550 <.L2>:
    1550:	8a 05 78    	mov.w     w10, w11

00001552 <.L3>:
    1552:	8b 04 78    	mov.w     w11, w9
    1554:	89 05 78    	mov.w     w9, w11
    1556:	3b 44 78    	mov.b     [w11++], w8
    1558:	08 00 fb    	se        w8, w0
    155a:	d2 00 07    	rcall     0x1700 <_isspace>
    155c:	00 00 e0    	cp0.w     w0
    155e:	f9 ff 3a    	bra       NZ, 0x1552 <.L3>
    1560:	d0 c2 b3    	mov.b     #0x2d, w0
    1562:	80 4f 54    	sub.b     w8, w0, [w15]
    1564:	03 00 32    	bra       Z, 0x156c <.L4>
    1566:	00 c0 e9    	dec2.b    w0, w0
    1568:	80 4f 54    	sub.b     w8, w0, [w15]
    156a:	02 00 3a    	bra       NZ, 0x1570 <.L14>

0000156c <.L4>:
    156c:	89 04 e8    	inc.w     w9, w9
    156e:	01 00 37    	bra       0x1572 <.L5>

00001570 <.L14>:
    1570:	00 44 78    	mov.b     w0, w8

00001572 <.L5>:
    1572:	0c 01 78    	mov.w     w12, w2
    1574:	8e 00 78    	mov.w     w14, w1
    1576:	09 00 78    	mov.w     w9, w0
    1578:	29 00 07    	rcall     0x15cc <__Stoul>
    157a:	9e 8f 54    	sub.w     w9, [w14], [w15]
    157c:	01 00 3a    	bra       NZ, 0x1580 <.L6>
    157e:	0a 0f 78    	mov.w     w10, [w14]

00001580 <.L6>:
    1580:	9e 0f 55    	sub.w     w10, [w14], [w15]
    1582:	03 00 3a    	bra       NZ, 0x158a <.L7>
    1584:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1586:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1588:	0f 00 3a    	bra       NZ, 0x15a8 <.L8>

0000158a <.L7>:
    158a:	b2 c2 b3    	mov.b     #0x2b, w2
    158c:	82 4f 54    	sub.b     w8, w2, [w15]
    158e:	04 00 3a    	bra       NZ, 0x1598 <.L9>
    1590:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1592:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1594:	15 00 3d    	bra       GE, 0x15c0 <.L12>
    1596:	08 00 37    	bra       0x15a8 <.L8>

00001598 <.L9>:
    1598:	d2 c2 b3    	mov.b     #0x2d, w2
    159a:	82 4f 54    	sub.b     w8, w2, [w15]
    159c:	11 00 3a    	bra       NZ, 0x15c0 <.L12>
    159e:	02 00 20    	mov.w     #0x0, w2
    15a0:	03 00 28    	mov.w     #0x8000, w3
    15a2:	82 0f 50    	sub.w     w0, w2, [w15]
    15a4:	83 8f 58    	subb.w    w1, w3, [w15]
    15a6:	0a 00 36    	bra       LEU, 0x15bc <.L11>

000015a8 <.L8>:
    15a8:	20 02 20    	mov.w     #0x22, w0
    15aa:	90 ec 88    	mov.w     w0, 0x1d92
    15ac:	f0 ff 2f    	mov.w     #0xffff, w0
    15ae:	f1 ff 27    	mov.w     #0x7fff, w1
    15b0:	d2 c2 b3    	mov.b     #0x2d, w2
    15b2:	82 4f 54    	sub.b     w8, w2, [w15]
    15b4:	05 00 3a    	bra       NZ, 0x15c0 <.L12>
    15b6:	00 00 20    	mov.w     #0x0, w0
    15b8:	01 00 28    	mov.w     #0x8000, w1
    15ba:	02 00 37    	bra       0x15c0 <.L12>

000015bc <.L11>:
    15bc:	60 00 10    	subr.w    w0, #0x0, w0
    15be:	e0 80 18    	subbr.w   w1, #0x0, w1

000015c0 <.L12>:
    15c0:	4f 07 78    	mov.w     [--w15], w14
    15c2:	4f 06 78    	mov.w     [--w15], w12
    15c4:	4f 05 be    	mov.d     [--w15], w10
    15c6:	4f 04 be    	mov.d     [--w15], w8
    15c8:	4f 00 b1    	sub.w     #0x4, w15
    15ca:	00 00 06    	return    

000015cc <__Stoul>:
    15cc:	ee 87 47    	add.w     w15, #0xe, w15
    15ce:	88 9f be    	mov.d     w8, [w15++]
    15d0:	8a 9f be    	mov.d     w10, [w15++]
    15d2:	8c 9f be    	mov.d     w12, [w15++]
    15d4:	8e 1f 78    	mov.w     w14, [w15++]
    15d6:	f0 b7 9f    	mov.w     w0, [w15-18]
    15d8:	01 06 78    	mov.w     w1, w12
    15da:	82 05 78    	mov.w     w2, w11
    15dc:	00 04 78    	mov.w     w0, w8

000015de <.L2>:
    15de:	08 05 78    	mov.w     w8, w10
    15e0:	0a 04 78    	mov.w     w10, w8
    15e2:	b8 46 78    	mov.b     [w8++], w13
    15e4:	0d 00 fb    	se        w13, w0
    15e6:	8c 00 07    	rcall     0x1700 <_isspace>
    15e8:	00 00 e0    	cp0.w     w0
    15ea:	f9 ff 3a    	bra       NZ, 0x15de <.L2>
    15ec:	d0 c2 b3    	mov.b     #0x2d, w0
    15ee:	80 cf 56    	sub.b     w13, w0, [w15]
    15f0:	03 00 32    	bra       Z, 0x15f8 <.L3>
    15f2:	00 c0 e9    	dec2.b    w0, w0
    15f4:	80 cf 56    	sub.b     w13, w0, [w15]
    15f6:	02 00 3a    	bra       NZ, 0x15fc <.L19>

000015f8 <.L3>:
    15f8:	0a 05 e8    	inc.w     w10, w10
    15fa:	01 00 37    	bra       0x15fe <.L4>

000015fc <.L19>:
    15fc:	80 46 78    	mov.b     w0, w13

000015fe <.L4>:
    15fe:	0b 00 e0    	cp0.w     w11
    1600:	05 00 35    	bra       LT, 0x160c <.L5>
    1602:	e1 8f 55    	sub.w     w11, #0x1, [w15]
    1604:	03 00 32    	bra       Z, 0x160c <.L5>
    1606:	40 02 20    	mov.w     #0x24, w0
    1608:	80 8f 55    	sub.w     w11, w0, [w15]
    160a:	06 00 34    	bra       LE, 0x1618 <.L6>

0000160c <.L5>:
    160c:	60 44 b8    	mul.uu    w8, #0x0, w8
    160e:	0c 00 e0    	cp0.w     w12
    1610:	70 00 32    	bra       Z, 0x16f2 <.L7>
    1612:	7f b0 97    	mov.w     [w15-18], w0
    1614:	00 0e 78    	mov.w     w0, [w12]
    1616:	6d 00 37    	bra       0x16f2 <.L7>

00001618 <.L6>:
    1618:	0b 00 e0    	cp0.w     w11
    161a:	0e 00 32    	bra       Z, 0x1638 <.L8>
    161c:	f0 8f 55    	sub.w     w11, #0x10, [w15]
    161e:	1a 00 3a    	bra       NZ, 0x1654 <.L9>
    1620:	00 c3 b3    	mov.b     #0x30, w0
    1622:	9a 4f 10    	subr.b    w0, [w10], [w15]
    1624:	17 00 3a    	bra       NZ, 0x1654 <.L9>
    1626:	1a 40 90    	mov.b     [w10+1], w0
    1628:	81 c7 b3    	mov.b     #0x78, w1
    162a:	81 4f 50    	sub.b     w0, w1, [w15]
    162c:	03 00 32    	bra       Z, 0x1634 <.L10>
    162e:	81 c5 b3    	mov.b     #0x58, w1
    1630:	81 4f 50    	sub.b     w0, w1, [w15]
    1632:	10 00 3a    	bra       NZ, 0x1654 <.L9>

00001634 <.L10>:
    1634:	0a 85 e8    	inc2.w    w10, w10
    1636:	0e 00 37    	bra       0x1654 <.L9>

00001638 <.L8>:
    1638:	ab 00 20    	mov.w     #0xa, w11
    163a:	00 c3 b3    	mov.b     #0x30, w0
    163c:	9a 4f 10    	subr.b    w0, [w10], [w15]
    163e:	0a 00 3a    	bra       NZ, 0x1654 <.L9>
    1640:	1a 40 90    	mov.b     [w10+1], w0
    1642:	81 c7 b3    	mov.b     #0x78, w1
    1644:	81 4f 50    	sub.b     w0, w1, [w15]
    1646:	04 00 32    	bra       Z, 0x1650 <.L11>
    1648:	8b 00 20    	mov.w     #0x8, w11
    164a:	81 c5 b3    	mov.b     #0x58, w1
    164c:	81 4f 50    	sub.b     w0, w1, [w15]
    164e:	02 00 3a    	bra       NZ, 0x1654 <.L9>

00001650 <.L11>:
    1650:	0a 85 e8    	inc2.w    w10, w10
    1652:	0b 01 20    	mov.w     #0x10, w11

00001654 <.L9>:
    1654:	0a 00 78    	mov.w     w10, w0

00001656 <.L12>:
    1656:	00 02 78    	mov.w     w0, w4
    1658:	04 00 78    	mov.w     w4, w0
    165a:	01 c3 b3    	mov.b     #0x30, w1
    165c:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    165e:	fb ff 32    	bra       Z, 0x1656 <.L12>
    1660:	04 07 78    	mov.w     w4, w14
    1662:	60 44 b8    	mul.uu    w8, #0x0, w8
    1664:	b4 b7 9f    	mov.w     w4, [w15-26]
    1666:	0d 00 37    	bra       0x1682 <.L13>

00001668 <.L14>:
    1668:	c1 cf 21    	mov.w     #0x1cfc, w1
    166a:	81 40 50    	sub.b     w0, w1, w1
    166c:	c1 ef 9f    	mov.b     w1, [w15-20]
    166e:	61 59 b9    	mul.su    w11, #0x1, w2
    1670:	08 00 be    	mov.d     w8, w0
    1672:	57 04 07    	rcall     0x1f22 <___mulp32eds3>
    1674:	4f ea 97    	mov.b     [w15-20], w4
    1676:	04 01 fb    	se        w4, w2
    1678:	cf 91 de    	asr.w     w2, #0xf, w3
    167a:	c8 b7 9f    	mov.w     w8, [w15-24]
    167c:	d9 b7 9f    	mov.w     w9, [w15-22]
    167e:	02 04 40    	add.w     w0, w2, w8
    1680:	83 84 48    	addc.w    w1, w3, w9

00001682 <.L13>:
    1682:	8e 02 78    	mov.w     w14, w5
    1684:	3e 00 fb    	se        [w14++], w0
    1686:	85 bf 9f    	mov.w     w5, [w15-16]
    1688:	43 00 07    	rcall     0x1710 <_tolower>
    168a:	0b 01 78    	mov.w     w11, w2
    168c:	80 00 78    	mov.w     w0, w1
    168e:	c0 cf 21    	mov.w     #0x1cfc, w0
    1690:	1c 02 07    	rcall     0x1aca <_memchr>
    1692:	8f ba 97    	mov.w     [w15-16], w5
    1694:	00 00 e0    	cp0.w     w0
    1696:	e8 ff 3a    	bra       NZ, 0x1668 <.L14>
    1698:	3f b2 97    	mov.w     [w15-26], w4
    169a:	85 0f 55    	sub.w     w10, w5, [w15]
    169c:	05 00 3a    	bra       NZ, 0x16a8 <.L15>
    169e:	60 44 b8    	mul.uu    w8, #0x0, w8
    16a0:	0c 00 e0    	cp0.w     w12
    16a2:	27 00 32    	bra       Z, 0x16f2 <.L7>
    16a4:	ff b2 97    	mov.w     [w15-18], w5
    16a6:	24 00 37    	bra       0x16f0 <.L24>

000016a8 <.L15>:
    16a8:	04 82 52    	sub.w     w5, w4, w4
    16aa:	10 d2 21    	mov.w     #0x1d21, w0
    16ac:	60 c0 7d    	mov.b     [w0+w11], w0
    16ae:	00 00 fb    	se        w0, w0
    16b0:	00 02 52    	sub.w     w4, w0, w4
    16b2:	17 00 33    	bra       N, 0x16e2 <.L16>
    16b4:	11 00 3a    	bra       NZ, 0x16d8 <.L17>
    16b6:	4f e9 97    	mov.b     [w15-20], w2
    16b8:	02 00 fb    	se        w2, w0
    16ba:	cf 80 de    	asr.w     w0, #0xf, w1
    16bc:	00 00 54    	sub.w     w8, w0, w0
    16be:	81 80 5c    	subb.w    w9, w1, w1
    16c0:	80 0f 54    	sub.w     w8, w0, [w15]
    16c2:	81 8f 5c    	subb.w    w9, w1, [w15]
    16c4:	09 00 39    	bra       NC, 0x16d8 <.L17>
    16c6:	61 59 b9    	mul.su    w11, #0x1, w2
    16c8:	85 bf 9f    	mov.w     w5, [w15-16]
    16ca:	18 04 07    	rcall     0x1efc <___udivsi3>
    16cc:	8f ba 97    	mov.w     [w15-16], w5
    16ce:	4f b1 97    	mov.w     [w15-24], w2
    16d0:	df b1 97    	mov.w     [w15-22], w3
    16d2:	82 0f 50    	sub.w     w0, w2, [w15]
    16d4:	83 8f 58    	subb.w    w1, w3, [w15]
    16d6:	05 00 32    	bra       Z, 0x16e2 <.L16>

000016d8 <.L17>:
    16d8:	20 02 20    	mov.w     #0x22, w0
    16da:	90 ec 88    	mov.w     w0, 0x1d92
    16dc:	00 84 eb    	setm.w    w8
    16de:	80 84 eb    	setm.w    w9
    16e0:	05 00 37    	bra       0x16ec <.L18>

000016e2 <.L16>:
    16e2:	d0 c2 b3    	mov.b     #0x2d, w0
    16e4:	80 cf 56    	sub.b     w13, w0, [w15]
    16e6:	02 00 3a    	bra       NZ, 0x16ec <.L18>
    16e8:	60 04 14    	subr.w    w8, #0x0, w8
    16ea:	e0 84 1c    	subbr.w   w9, #0x0, w9

000016ec <.L18>:
    16ec:	0c 00 e0    	cp0.w     w12
    16ee:	01 00 32    	bra       Z, 0x16f2 <.L7>

000016f0 <.L24>:
    16f0:	05 0e 78    	mov.w     w5, [w12]

000016f2 <.L7>:
    16f2:	08 00 be    	mov.d     w8, w0
    16f4:	4f 07 78    	mov.w     [--w15], w14
    16f6:	4f 06 be    	mov.d     [--w15], w12
    16f8:	4f 05 be    	mov.d     [--w15], w10
    16fa:	4f 04 be    	mov.d     [--w15], w8
    16fc:	ef 00 b1    	sub.w     #0xe, w15
    16fe:	00 00 06    	return    

00001700 <_isspace>:
    1700:	69 00 e1    	cp.w      w0, #0x9
    1702:	04 00 35    	bra       LT, 0x170c <nomatch>
    1704:	6d 00 e1    	cp.w      w0, #0xd
    1706:	03 00 34    	bra       LE, 0x170e <match>
    1708:	00 02 b1    	sub.w     #0x20, w0
    170a:	01 00 32    	bra       Z, 0x170e <match>

0000170c <nomatch>:
    170c:	00 00 05    	retlw.w   #0x0, w0

0000170e <match>:
    170e:	10 00 05    	retlw.w   #0x1, w0

00001710 <_tolower>:
    1710:	80 00 78    	mov.w     w0, w1
    1712:	11 04 b1    	sub.w     #0x41, w1
    1714:	03 00 35    	bra       LT, 0x171c <nomatch>
    1716:	91 01 b1    	sub.w     #0x19, w1
    1718:	01 00 3c    	bra       GT, 0x171c <nomatch>

0000171a <match>:
    171a:	00 50 a0    	bset.w    w0, #0x5

0000171c <nomatch>:
    171c:	00 00 06    	return    

0000171e <__Geterrno>:
    171e:	a0 ec 80    	mov.w     0x1d94, w0
    1720:	00 00 e0    	cp0.w     w0
    1722:	01 00 32    	bra       Z, 0x1726 <.L2>
    1724:	00 00 01    	call      w0

00001726 <.L2>:
    1726:	20 d9 21    	mov.w     #0x1d92, w0
    1728:	00 00 06    	return    

0000172a <_prout>:
    172a:	88 1f 78    	mov.w     w8, [w15++]
    172c:	02 04 78    	mov.w     w2, w8
    172e:	08 01 78    	mov.w     w8, w2
    1730:	d6 01 07    	rcall     0x1ade <_memcpy>
    1732:	08 00 40    	add.w     w0, w8, w0
    1734:	4f 04 78    	mov.w     [--w15], w8
    1736:	00 00 06    	return    

00001738 <__sprintf_cdnopuxX>:
    1738:	00 00 fa    	lnk       #0x0
    173a:	88 1f 78    	mov.w     w8, [w15++]
    173c:	00 04 78    	mov.w     w0, w8
    173e:	ea 81 57    	sub.w     w15, #0xa, w3
    1740:	3f b9 97    	mov.w     [w15-10], w2
    1742:	88 00 78    	mov.w     w8, w1
    1744:	a0 72 21    	mov.w     #0x172a, w0
    1746:	07 00 07    	rcall     0x1756 <___Printf_cdnopuxX>
    1748:	00 00 e0    	cp0.w     w0
    174a:	02 00 35    	bra       LT, 0x1750 <.L3>
    174c:	80 40 eb    	clr.b     w1
    174e:	01 74 78    	mov.b     w1, [w8+w0]

00001750 <.L3>:
    1750:	4f 04 78    	mov.w     [--w15], w8
    1752:	00 80 fa    	ulnk      
    1754:	00 00 06    	return    

00001756 <___Printf_cdnopuxX>:
    1756:	62 00 fa    	lnk       #0x62
    1758:	88 9f be    	mov.d     w8, [w15++]
    175a:	8a 1f 78    	mov.w     w10, [w15++]
    175c:	00 05 78    	mov.w     w0, w10
    175e:	81 04 78    	mov.w     w1, w9
    1760:	02 04 78    	mov.w     w2, w8
    1762:	83 00 78    	mov.w     w3, w1
    1764:	80 f9 2f    	mov.w     #0xff98, w0
    1766:	0f 00 40    	add.w     w0, w15, w0
    1768:	b8 03 07    	rcall     0x1eda <__Vacopy>
    176a:	9a 97 9f    	mov.w     w10, [w15-94]
    176c:	a9 97 9f    	mov.w     w9, [w15-92]
    176e:	00 00 eb    	clr.w     w0
    1770:	b0 9f 9f    	mov.w     w0, [w15-74]

00001772 <.L31>:
    1772:	18 85 fb    	ze        [w8], w10
    1774:	8a 04 fb    	se        w10, w9
    1776:	0a 05 ea    	neg.w     w10, w10
    1778:	4f 55 de    	lsr.w     w10, #0xf, w10
    177a:	50 02 20    	mov.w     #0x25, w0
    177c:	80 8f 54    	sub.w     w9, w0, [w15]
    177e:	0d 00 32    	bra       Z, 0x179a <.L3>
    1780:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    1782:	0b 00 3a    	bra       NZ, 0x179a <.L3>
    1784:	0a 01 78    	mov.w     w10, w2
    1786:	88 00 78    	mov.w     w8, w1
    1788:	2f 90 97    	mov.w     [w15-92], w0
    178a:	9f 91 97    	mov.w     [w15-94], w3
    178c:	03 00 01    	call      w3
    178e:	a0 97 9f    	mov.w     w0, [w15-92]
    1790:	00 00 e0    	cp0.w     w0
    1792:	8e 00 32    	bra       Z, 0x18b0 <.L27>
    1794:	3f 98 97    	mov.w     [w15-74], w0
    1796:	00 00 e8    	inc.w     w0, w0
    1798:	b0 9f 9f    	mov.w     w0, [w15-74]

0000179a <.L3>:
    179a:	0a 04 44    	add.w     w8, w10, w8
    179c:	50 02 20    	mov.w     #0x25, w0
    179e:	80 8f 54    	sub.w     w9, w0, [w15]
    17a0:	04 00 32    	bra       Z, 0x17aa <.L5>
    17a2:	09 00 e0    	cp0.w     w9
    17a4:	e6 ff 3a    	bra       NZ, 0x1772 <.L31>
    17a6:	3f 98 97    	mov.w     [w15-74], w0
    17a8:	84 00 37    	bra       0x18b2 <.L4>

000017aa <.L5>:
    17aa:	00 00 eb    	clr.w     w0
    17ac:	90 9f 9f    	mov.w     w0, [w15-78]
    17ae:	80 9f 9f    	mov.w     w0, [w15-80]
    17b0:	f0 97 9f    	mov.w     w0, [w15-82]
    17b2:	e0 97 9f    	mov.w     w0, [w15-84]
    17b4:	d0 97 9f    	mov.w     w0, [w15-86]
    17b6:	c0 97 9f    	mov.w     w0, [w15-88]
    17b8:	07 00 37    	bra       0x17c8 <.L34>

000017ba <.L8>:
    17ba:	c1 d7 21    	mov.w     #0x1d7c, w1
    17bc:	01 00 50    	sub.w     w0, w1, w0
    17be:	00 00 40    	add.w     w0, w0, w0
    17c0:	01 d7 21    	mov.w     #0x1d70, w1
    17c2:	61 00 78    	mov.w     [w1+w0], w0
    17c4:	df 98 97    	mov.w     [w15-70], w1
    17c6:	01 00 70    	ior.w     w0, w1, w0

000017c8 <.L34>:
    17c8:	d0 9f 9f    	mov.w     w0, [w15-70]
    17ca:	88 04 78    	mov.w     w8, w9
    17cc:	09 04 78    	mov.w     w9, w8
    17ce:	38 45 78    	mov.b     [w8++], w10
    17d0:	8a 00 fb    	se        w10, w1
    17d2:	c0 d7 21    	mov.w     #0x1d7c, w0
    17d4:	8b 01 07    	rcall     0x1aec <_strchr>
    17d6:	00 00 e0    	cp0.w     w0
    17d8:	f0 ff 3a    	bra       NZ, 0x17ba <.L8>
    17da:	a1 c2 b3    	mov.b     #0x2a, w1
    17dc:	81 4f 55    	sub.b     w10, w1, [w15]
    17de:	0e 00 3a    	bra       NZ, 0x17fc <.L9>
    17e0:	cf 88 97    	mov.w     [w15-104], w1
    17e2:	01 80 e9    	dec2.w    w1, w0
    17e4:	c0 8f 9f    	mov.w     w0, [w15-104]
    17e6:	10 00 78    	mov.w     [w0], w0
    17e8:	c0 9f 9f    	mov.w     w0, [w15-72]
    17ea:	00 00 e0    	cp0.w     w0
    17ec:	05 00 3d    	bra       GE, 0x17f8 <.L10>
    17ee:	00 00 ea    	neg.w     w0, w0
    17f0:	c0 9f 9f    	mov.w     w0, [w15-72]
    17f2:	5f 98 97    	mov.w     [w15-70], w0
    17f4:	00 20 a0    	bset.w    w0, #0x2
    17f6:	d0 9f 9f    	mov.w     w0, [w15-70]

000017f8 <.L10>:
    17f8:	09 04 e8    	inc.w     w9, w8
    17fa:	0f 00 37    	bra       0x181a <.L11>

000017fc <.L9>:
    17fc:	c0 9f 9f    	mov.w     w0, [w15-72]
    17fe:	00 00 eb    	clr.w     w0
    1800:	05 00 37    	bra       0x180c <.L32>

00001802 <.L14>:
    1802:	f2 ff 27    	mov.w     #0x7fff, w2
    1804:	82 0f 50    	sub.w     w0, w2, [w15]
    1806:	02 00 32    	bra       Z, 0x180c <.L32>
    1808:	6a 01 b9    	mul.su    w0, #0xa, w2
    180a:	02 80 40    	add.w     w1, w2, w0

0000180c <.L32>:
    180c:	09 04 78    	mov.w     w9, w8
    180e:	88 04 78    	mov.w     w8, w9
    1810:	b9 00 fb    	se        [w9++], w1
    1812:	01 03 b1    	sub.w     #0x30, w1
    1814:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1816:	f5 ff 36    	bra       LEU, 0x1802 <.L14>
    1818:	c0 9f 9f    	mov.w     w0, [w15-72]

0000181a <.L11>:
    181a:	e0 c2 b3    	mov.b     #0x2e, w0
    181c:	98 4f 10    	subr.b    w0, [w8], [w15]
    181e:	02 00 32    	bra       Z, 0x1824 <.L15>
    1820:	00 80 eb    	setm.w    w0
    1822:	19 00 37    	bra       0x1856 <.L35>

00001824 <.L15>:
    1824:	a0 c2 b3    	mov.b     #0x2a, w0
    1826:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1828:	07 00 3a    	bra       NZ, 0x1838 <.L17>
    182a:	cf 88 97    	mov.w     [w15-104], w1
    182c:	01 80 e9    	dec2.w    w1, w0
    182e:	c0 8f 9f    	mov.w     w0, [w15-104]
    1830:	10 00 78    	mov.w     [w0], w0
    1832:	a0 9f 9f    	mov.w     w0, [w15-76]
    1834:	08 04 e8    	inc.w     w8, w8
    1836:	10 00 37    	bra       0x1858 <.L16>

00001838 <.L17>:
    1838:	00 00 eb    	clr.w     w0
    183a:	a0 9f 9f    	mov.w     w0, [w15-76]
    183c:	88 00 78    	mov.w     w8, w1
    183e:	05 00 37    	bra       0x184a <.L33>

00001840 <.L20>:
    1840:	f3 ff 27    	mov.w     #0x7fff, w3
    1842:	83 0f 50    	sub.w     w0, w3, [w15]
    1844:	02 00 32    	bra       Z, 0x184a <.L33>
    1846:	6a 02 b9    	mul.su    w0, #0xa, w4
    1848:	04 00 41    	add.w     w2, w4, w0

0000184a <.L33>:
    184a:	01 04 78    	mov.w     w1, w8
    184c:	88 00 78    	mov.w     w8, w1
    184e:	31 01 fb    	se        [w1++], w2
    1850:	02 03 b1    	sub.w     #0x30, w2
    1852:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1854:	f5 ff 36    	bra       LEU, 0x1840 <.L20>

00001856 <.L35>:
    1856:	a0 9f 9f    	mov.w     w0, [w15-76]

00001858 <.L16>:
    1858:	98 44 78    	mov.b     [w8], w9
    185a:	89 00 fb    	se        w9, w1
    185c:	80 d6 21    	mov.w     #0x1d68, w0
    185e:	46 01 07    	rcall     0x1aec <_strchr>
    1860:	00 00 e0    	cp0.w     w0
    1862:	02 00 32    	bra       Z, 0x1868 <.L25>
    1864:	08 04 e8    	inc.w     w8, w8
    1866:	01 00 37    	bra       0x186a <.L21>

00001868 <.L25>:
    1868:	80 44 eb    	clr.b     w9

0000186a <.L21>:
    186a:	c9 7f 9f    	mov.b     w9, [w15-68]
    186c:	80 c6 b3    	mov.b     #0x68, w0
    186e:	80 cf 54    	sub.b     w9, w0, [w15]
    1870:	04 00 3a    	bra       NZ, 0x187a <.L22>
    1872:	98 cf 14    	subr.b    w9, [w8], [w15]
    1874:	0a 00 3a    	bra       NZ, 0x188a <.L23>
    1876:	66 40 50    	sub.b     w0, #0x6, w0
    1878:	06 00 37    	bra       0x1886 <.L36>

0000187a <.L22>:
    187a:	c0 c6 b3    	mov.b     #0x6c, w0
    187c:	80 cf 54    	sub.b     w9, w0, [w15]
    187e:	05 00 3a    	bra       NZ, 0x188a <.L23>
    1880:	98 cf 14    	subr.b    w9, [w8], [w15]
    1882:	03 00 3a    	bra       NZ, 0x188a <.L23>
    1884:	65 40 40    	add.b     w0, #0x5, w0

00001886 <.L36>:
    1886:	c0 7f 9f    	mov.b     w0, [w15-68]
    1888:	08 04 e8    	inc.w     w8, w8

0000188a <.L23>:
    188a:	18 01 fb    	se        [w8], w2
    188c:	e3 fb 2f    	mov.w     #0xffbe, w3
    188e:	8f 81 41    	add.w     w3, w15, w3
    1890:	81 f9 2f    	mov.w     #0xff98, w1
    1892:	8f 80 40    	add.w     w1, w15, w1
    1894:	a0 f9 2f    	mov.w     #0xff9a, w0
    1896:	0f 00 40    	add.w     w0, w15, w0
    1898:	10 00 07    	rcall     0x18ba <___Putfld_cdnopuxX>
    189a:	00 00 e0    	cp0.w     w0
    189c:	09 00 3a    	bra       NZ, 0x18b0 <.L27>
    189e:	e1 fb 2f    	mov.w     #0xffbe, w1
    18a0:	8f 80 40    	add.w     w1, w15, w1
    18a2:	a0 f9 2f    	mov.w     #0xff9a, w0
    18a4:	0f 00 40    	add.w     w0, w15, w0
    18a6:	5d 02 07    	rcall     0x1d62 <__Puttxt>
    18a8:	00 00 e0    	cp0.w     w0
    18aa:	02 00 35    	bra       LT, 0x18b0 <.L27>
    18ac:	08 04 e8    	inc.w     w8, w8
    18ae:	61 ff 37    	bra       0x1772 <.L31>

000018b0 <.L27>:
    18b0:	00 80 eb    	setm.w    w0

000018b2 <.L4>:
    18b2:	4f 05 78    	mov.w     [--w15], w10
    18b4:	4f 04 be    	mov.d     [--w15], w8
    18b6:	00 80 fa    	ulnk      
    18b8:	00 00 06    	return    

000018ba <___Putfld_cdnopuxX>:
    18ba:	88 1f 78    	mov.w     w8, [w15++]
    18bc:	e4 c6 b3    	mov.b     #0x6e, w4
    18be:	84 4f 51    	sub.b     w2, w4, [w15]
    18c0:	b6 00 32    	bra       Z, 0x1a2e <.L7>
    18c2:	10 00 3c    	bra       GT, 0x18e4 <.L9>
    18c4:	6b 42 52    	sub.b     w4, #0xb, w4
    18c6:	84 4f 51    	sub.b     w2, w4, [w15]
    18c8:	18 00 32    	bra       Z, 0x18fa <.L5>
    18ca:	05 00 3c    	bra       GT, 0x18d6 <.L10>
    18cc:	54 c2 b3    	mov.b     #0x25, w4
    18ce:	84 4f 51    	sub.b     w2, w4, [w15]
    18d0:	ee 00 32    	bra       Z, 0x1aae <.L3>
    18d2:	84 c5 b3    	mov.b     #0x58, w4
    18d4:	0f 00 37    	bra       0x18f4 <.L47>

000018d6 <.L10>:
    18d6:	44 c6 b3    	mov.b     #0x64, w4
    18d8:	84 4f 51    	sub.b     w2, w4, [w15]
    18da:	14 00 32    	bra       Z, 0x1904 <.L6>
    18dc:	65 42 42    	add.b     w4, #0x5, w4
    18de:	84 4f 51    	sub.b     w2, w4, [w15]
    18e0:	e9 00 3a    	bra       NZ, 0x1ab4 <.L2>
    18e2:	10 00 37    	bra       0x1904 <.L6>

000018e4 <.L9>:
    18e4:	04 c7 b3    	mov.b     #0x70, w4
    18e6:	84 4f 51    	sub.b     w2, w4, [w15]
    18e8:	d5 00 32    	bra       Z, 0x1a94 <.L8>
    18ea:	53 00 35    	bra       LT, 0x1992 <.L4>
    18ec:	65 42 42    	add.b     w4, #0x5, w4
    18ee:	84 4f 51    	sub.b     w2, w4, [w15]
    18f0:	50 00 32    	bra       Z, 0x1992 <.L4>
    18f2:	63 42 42    	add.b     w4, #0x3, w4

000018f4 <.L47>:
    18f4:	84 4f 51    	sub.b     w2, w4, [w15]
    18f6:	de 00 3a    	bra       NZ, 0x1ab4 <.L2>
    18f8:	4c 00 37    	bra       0x1992 <.L4>

000018fa <.L5>:
    18fa:	11 81 e9    	dec2.w    [w1], w2
    18fc:	82 08 78    	mov.w     w2, [w1]
    18fe:	f0 00 90    	mov.w     [w0+14], w1
    1900:	12 41 78    	mov.b     [w2], w2
    1902:	d6 00 37    	bra       0x1ab0 <.L53>

00001904 <.L6>:
    1904:	20 62 90    	mov.b     [w0+34], w4
    1906:	c5 c6 b3    	mov.b     #0x6c, w5
    1908:	85 4f 52    	sub.b     w4, w5, [w15]
    190a:	07 00 3a    	bra       NZ, 0x191a <.L12>
    190c:	91 02 78    	mov.w     [w1], w5
    190e:	64 82 52    	sub.w     w5, #0x4, w4
    1910:	84 08 78    	mov.w     w4, [w1]
    1912:	14 02 be    	mov.d     [w4], w4
    1914:	4f ab de    	asr.w     w5, #0xf, w6
    1916:	86 03 78    	mov.w     w6, w7
    1918:	11 00 37    	bra       0x193c <.L13>

0000191a <.L12>:
    191a:	15 c7 b3    	mov.b     #0x71, w5
    191c:	85 4f 52    	sub.b     w4, w5, [w15]
    191e:	03 00 32    	bra       Z, 0x1926 <.L43>
    1920:	a5 c6 b3    	mov.b     #0x6a, w5
    1922:	85 4f 52    	sub.b     w4, w5, [w15]
    1924:	06 00 3a    	bra       NZ, 0x1932 <.L15>

00001926 <.L43>:
    1926:	91 02 78    	mov.w     [w1], w5
    1928:	68 82 52    	sub.w     w5, #0x8, w4
    192a:	84 08 78    	mov.w     w4, [w1]
    192c:	54 03 be    	mov.d     [++w4], w6
    192e:	44 02 be    	mov.d     [--w4], w4
    1930:	05 00 37    	bra       0x193c <.L13>

00001932 <.L15>:
    1932:	11 82 e9    	dec2.w    [w1], w4
    1934:	84 08 78    	mov.w     w4, [w1]
    1936:	14 02 78    	mov.w     [w4], w4
    1938:	cf a2 de    	asr.w     w4, #0xf, w5
    193a:	61 2b b9    	mul.su    w5, #0x1, w6

0000193c <.L13>:
    193c:	04 98 be    	mov.d     w4, [w0++]
    193e:	06 90 be    	mov.d     w6, [w0--]
    1940:	a0 60 90    	mov.b     [w0+34], w1
    1942:	88 c6 b3    	mov.b     #0x68, w8
    1944:	88 cf 50    	sub.b     w1, w8, [w15]
    1946:	0d 00 32    	bra       Z, 0x1962 <.L19>
    1948:	28 c6 b3    	mov.b     #0x62, w8
    194a:	88 cf 50    	sub.b     w1, w8, [w15]
    194c:	04 00 3a    	bra       NZ, 0x1956 <.L18>
    194e:	04 02 fb    	se        w4, w4
    1950:	cf a2 de    	asr.w     w4, #0xf, w5
    1952:	61 2b b9    	mul.su    w5, #0x1, w6
    1954:	08 00 37    	bra       0x1966 <.L44>

00001956 <.L18>:
    1956:	48 c7 b3    	mov.b     #0x74, w8
    1958:	88 cf 50    	sub.b     w1, w8, [w15]
    195a:	03 00 32    	bra       Z, 0x1962 <.L19>
    195c:	66 44 44    	add.b     w8, #0x6, w8
    195e:	88 cf 50    	sub.b     w1, w8, [w15]
    1960:	04 00 3a    	bra       NZ, 0x196a <.L17>

00001962 <.L19>:
    1962:	cf a2 de    	asr.w     w4, #0xf, w5
    1964:	61 2b b9    	mul.su    w5, #0x1, w6

00001966 <.L44>:
    1966:	04 98 be    	mov.d     w4, [w0++]
    1968:	06 90 be    	mov.d     w6, [w0--]

0000196a <.L17>:
    196a:	30 02 be    	mov.d     [w0++], w4
    196c:	20 03 be    	mov.d     [w0--], w6
    196e:	f0 00 90    	mov.w     [w0+14], w1
    1970:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1972:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1974:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1976:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1978:	02 00 3d    	bra       GE, 0x197e <.L20>
    197a:	d4 c2 b3    	mov.b     #0x2d, w4
    197c:	08 00 37    	bra       0x198e <.L45>

0000197e <.L20>:
    197e:	00 12 90    	mov.w     [w0+32], w4
    1980:	04 18 a3    	btst.z    w4, #0x1
    1982:	02 00 32    	bra       Z, 0x1988 <.L22>
    1984:	b4 c2 b3    	mov.b     #0x2b, w4
    1986:	03 00 37    	bra       0x198e <.L45>

00001988 <.L22>:
    1988:	04 08 a3    	btst.z    w4, #0x0
    198a:	4c 00 32    	bra       Z, 0x1a24 <.L31>
    198c:	04 c2 b3    	mov.b     #0x20, w4

0000198e <.L45>:
    198e:	84 f1 78    	mov.b     w4, [w3+w1]
    1990:	47 00 37    	bra       0x1a20 <.L54>

00001992 <.L4>:
    1992:	20 62 90    	mov.b     [w0+34], w4
    1994:	c5 c6 b3    	mov.b     #0x6c, w5
    1996:	85 4f 52    	sub.b     w4, w5, [w15]
    1998:	06 00 3a    	bra       NZ, 0x19a6 <.L23>
    199a:	91 02 78    	mov.w     [w1], w5
    199c:	64 82 52    	sub.w     w5, #0x4, w4
    199e:	84 08 78    	mov.w     w4, [w1]
    19a0:	14 02 be    	mov.d     [w4], w4
    19a2:	60 33 b8    	mul.uu    w6, #0x0, w6
    19a4:	11 00 37    	bra       0x19c8 <.L24>

000019a6 <.L23>:
    19a6:	15 c7 b3    	mov.b     #0x71, w5
    19a8:	85 4f 52    	sub.b     w4, w5, [w15]
    19aa:	03 00 32    	bra       Z, 0x19b2 <.L48>
    19ac:	a5 c6 b3    	mov.b     #0x6a, w5
    19ae:	85 4f 52    	sub.b     w4, w5, [w15]
    19b0:	06 00 3a    	bra       NZ, 0x19be <.L26>

000019b2 <.L48>:
    19b2:	91 02 78    	mov.w     [w1], w5
    19b4:	68 82 52    	sub.w     w5, #0x8, w4
    19b6:	84 08 78    	mov.w     w4, [w1]
    19b8:	54 03 be    	mov.d     [++w4], w6
    19ba:	44 02 be    	mov.d     [--w4], w4
    19bc:	05 00 37    	bra       0x19c8 <.L24>

000019be <.L26>:
    19be:	11 82 e9    	dec2.w    [w1], w4
    19c0:	84 08 78    	mov.w     w4, [w1]
    19c2:	14 02 78    	mov.w     [w4], w4
    19c4:	80 02 eb    	clr.w     w5
    19c6:	60 33 b8    	mul.uu    w6, #0x0, w6

000019c8 <.L24>:
    19c8:	04 98 be    	mov.d     w4, [w0++]
    19ca:	06 90 be    	mov.d     w6, [w0--]
    19cc:	a0 60 90    	mov.b     [w0+34], w1
    19ce:	88 c6 b3    	mov.b     #0x68, w8
    19d0:	88 cf 50    	sub.b     w1, w8, [w15]
    19d2:	0d 00 32    	bra       Z, 0x19ee <.L30>
    19d4:	28 c6 b3    	mov.b     #0x62, w8
    19d6:	88 cf 50    	sub.b     w1, w8, [w15]
    19d8:	04 00 3a    	bra       NZ, 0x19e2 <.L29>
    19da:	04 82 fb    	ze        w4, w4
    19dc:	80 02 eb    	clr.w     w5
    19de:	60 33 b8    	mul.uu    w6, #0x0, w6
    19e0:	08 00 37    	bra       0x19f2 <.L49>

000019e2 <.L29>:
    19e2:	48 c7 b3    	mov.b     #0x74, w8
    19e4:	88 cf 50    	sub.b     w1, w8, [w15]
    19e6:	03 00 32    	bra       Z, 0x19ee <.L30>
    19e8:	66 44 44    	add.b     w8, #0x6, w8
    19ea:	88 cf 50    	sub.b     w1, w8, [w15]
    19ec:	04 00 3a    	bra       NZ, 0x19f6 <.L28>

000019ee <.L30>:
    19ee:	80 02 eb    	clr.w     w5
    19f0:	60 33 b8    	mul.uu    w6, #0x0, w6

000019f2 <.L49>:
    19f2:	04 98 be    	mov.d     w4, [w0++]
    19f4:	06 90 be    	mov.d     w6, [w0--]

000019f6 <.L28>:
    19f6:	80 10 90    	mov.w     [w0+32], w1
    19f8:	01 38 a3    	btst.z    w1, #0x3
    19fa:	14 00 32    	bra       Z, 0x1a24 <.L31>
    19fc:	30 02 be    	mov.d     [w0++], w4
    19fe:	20 03 be    	mov.d     [w0--], w6
    1a00:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a02:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1a04:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1a06:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1a08:	0d 00 32    	bra       Z, 0x1a24 <.L31>
    1a0a:	81 c7 b3    	mov.b     #0x78, w1
    1a0c:	81 4f 51    	sub.b     w2, w1, [w15]
    1a0e:	03 00 32    	bra       Z, 0x1a16 <.L32>
    1a10:	81 c5 b3    	mov.b     #0x58, w1
    1a12:	81 4f 51    	sub.b     w2, w1, [w15]
    1a14:	07 00 3a    	bra       NZ, 0x1a24 <.L31>

00001a16 <.L32>:
    1a16:	f0 00 90    	mov.w     [w0+14], w1
    1a18:	04 c3 b3    	mov.b     #0x30, w4
    1a1a:	84 f1 78    	mov.b     w4, [w3+w1]
    1a1c:	81 00 e8    	inc.w     w1, w1
    1a1e:	82 f1 78    	mov.b     w2, [w3+w1]

00001a20 <.L54>:
    1a20:	81 00 e8    	inc.w     w1, w1
    1a22:	71 00 98    	mov.w     w1, [w0+14]

00001a24 <.L31>:
    1a24:	f0 00 90    	mov.w     [w0+14], w1
    1a26:	81 81 41    	add.w     w3, w1, w3
    1a28:	63 00 98    	mov.w     w3, [w0+12]
    1a2a:	82 40 78    	mov.b     w2, w1
    1a2c:	3e 00 37    	bra       0x1aaa <.L52>

00001a2e <.L7>:
    1a2e:	a0 61 90    	mov.b     [w0+34], w3
    1a30:	c4 c6 b3    	mov.b     #0x6c, w4
    1a32:	11 81 e9    	dec2.w    [w1], w2
    1a34:	84 cf 51    	sub.b     w3, w4, [w15]
    1a36:	22 00 32    	bra       Z, 0x1a7c <.L37>
    1a38:	0a 00 3c    	bra       GT, 0x1a4e <.L41>
    1a3a:	64 42 52    	sub.b     w4, #0x4, w4
    1a3c:	84 cf 51    	sub.b     w3, w4, [w15]
    1a3e:	25 00 32    	bra       Z, 0x1a8a <.L51>
    1a40:	04 c2 e8    	inc2.b    w4, w4
    1a42:	84 cf 51    	sub.b     w3, w4, [w15]
    1a44:	13 00 32    	bra       Z, 0x1a6c <.L36>
    1a46:	68 42 52    	sub.b     w4, #0x8, w4
    1a48:	84 cf 51    	sub.b     w3, w4, [w15]
    1a4a:	1e 00 3a    	bra       NZ, 0x1a88 <.L33>
    1a4c:	0a 00 37    	bra       0x1a62 <.L55>

00001a4e <.L41>:
    1a4e:	44 c7 b3    	mov.b     #0x74, w4
    1a50:	84 cf 51    	sub.b     w3, w4, [w15]
    1a52:	1b 00 32    	bra       Z, 0x1a8a <.L51>
    1a54:	66 42 42    	add.b     w4, #0x6, w4
    1a56:	84 cf 51    	sub.b     w3, w4, [w15]
    1a58:	18 00 32    	bra       Z, 0x1a8a <.L51>
    1a5a:	69 42 52    	sub.b     w4, #0x9, w4
    1a5c:	84 cf 51    	sub.b     w3, w4, [w15]
    1a5e:	14 00 3a    	bra       NZ, 0x1a88 <.L33>
    1a60:	05 00 37    	bra       0x1a6c <.L36>

00001a62 <.L55>:
    1a62:	82 08 78    	mov.w     w2, [w1]
    1a64:	92 00 78    	mov.w     [w2], w1
    1a66:	40 58 90    	mov.b     [w0+28], w0
    1a68:	80 48 78    	mov.b     w0, [w1]
    1a6a:	2c 00 37    	bra       0x1ac4 <.L11>

00001a6c <.L36>:
    1a6c:	82 08 78    	mov.w     w2, [w1]
    1a6e:	92 00 78    	mov.w     [w2], w1
    1a70:	60 0a 90    	mov.w     [w0+28], w4
    1a72:	cf a2 de    	asr.w     w4, #0xf, w5
    1a74:	61 2b b9    	mul.su    w5, #0x1, w6
    1a76:	84 98 be    	mov.d     w4, [w1++]
    1a78:	86 90 be    	mov.d     w6, [w1--]
    1a7a:	24 00 37    	bra       0x1ac4 <.L11>

00001a7c <.L37>:
    1a7c:	82 08 78    	mov.w     w2, [w1]
    1a7e:	92 00 78    	mov.w     [w2], w1
    1a80:	60 09 90    	mov.w     [w0+28], w2
    1a82:	cf 91 de    	asr.w     w2, #0xf, w3
    1a84:	82 88 be    	mov.d     w2, [w1]
    1a86:	1e 00 37    	bra       0x1ac4 <.L11>

00001a88 <.L33>:
    1a88:	11 81 e9    	dec2.w    [w1], w2

00001a8a <.L51>:
    1a8a:	82 08 78    	mov.w     w2, [w1]
    1a8c:	92 00 78    	mov.w     [w2], w1
    1a8e:	60 08 90    	mov.w     [w0+28], w0
    1a90:	80 08 78    	mov.w     w0, [w1]
    1a92:	18 00 37    	bra       0x1ac4 <.L11>

00001a94 <.L8>:
    1a94:	11 81 e9    	dec2.w    [w1], w2
    1a96:	82 08 78    	mov.w     w2, [w1]
    1a98:	12 02 78    	mov.w     [w2], w4
    1a9a:	cf a2 de    	asr.w     w4, #0xf, w5
    1a9c:	61 2b b9    	mul.su    w5, #0x1, w6
    1a9e:	04 98 be    	mov.d     w4, [w0++]
    1aa0:	06 90 be    	mov.d     w6, [w0--]
    1aa2:	f0 00 90    	mov.w     [w0+14], w1
    1aa4:	81 81 41    	add.w     w3, w1, w3
    1aa6:	63 00 98    	mov.w     w3, [w0+12]
    1aa8:	81 c7 b3    	mov.b     #0x78, w1

00001aaa <.L52>:
    1aaa:	2c 00 07    	rcall     0x1b04 <__Litob>
    1aac:	0b 00 37    	bra       0x1ac4 <.L11>

00001aae <.L3>:
    1aae:	f0 00 90    	mov.w     [w0+14], w1

00001ab0 <.L53>:
    1ab0:	82 f1 78    	mov.b     w2, [w3+w1]
    1ab2:	06 00 37    	bra       0x1ac0 <.L50>

00001ab4 <.L2>:
    1ab4:	f0 00 90    	mov.w     [w0+14], w1
    1ab6:	81 81 41    	add.w     w3, w1, w3
    1ab8:	02 04 e0    	cp0.b     w2
    1aba:	01 00 3a    	bra       NZ, 0x1abe <.L42>
    1abc:	52 c2 b3    	mov.b     #0x25, w2

00001abe <.L42>:
    1abe:	82 49 78    	mov.b     w2, [w3]

00001ac0 <.L50>:
    1ac0:	81 00 e8    	inc.w     w1, w1
    1ac2:	71 00 98    	mov.w     w1, [w0+14]

00001ac4 <.L11>:
    1ac4:	00 00 eb    	clr.w     w0
    1ac6:	4f 04 78    	mov.w     [--w15], w8
    1ac8:	00 00 06    	return    

00001aca <_memchr>:
    1aca:	03 00 37    	bra       0x1ad2 <.L2>

00001acc <.L4>:
    1acc:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    1ace:	05 00 32    	bra       Z, 0x1ada <.L5>
    1ad0:	02 01 e9    	dec.w     w2, w2

00001ad2 <.L2>:
    1ad2:	80 01 78    	mov.w     w0, w3
    1ad4:	02 00 e0    	cp0.w     w2
    1ad6:	fa ff 3a    	bra       NZ, 0x1acc <.L4>
    1ad8:	00 00 05    	retlw.w   #0x0, w0

00001ada <.L5>:
    1ada:	03 00 78    	mov.w     w3, w0
    1adc:	00 00 06    	return    

00001ade <_memcpy>:
    1ade:	80 01 78    	mov.w     w0, w3
    1ae0:	02 00 37    	bra       0x1ae6 <.L2>

00001ae2 <.L3>:
    1ae2:	b1 59 78    	mov.b     [w1++], [w3++]
    1ae4:	02 01 e9    	dec.w     w2, w2

00001ae6 <.L2>:
    1ae6:	02 00 e0    	cp0.w     w2
    1ae8:	fc ff 3a    	bra       NZ, 0x1ae2 <.L3>
    1aea:	00 00 06    	return    

00001aec <_strchr>:
    1aec:	02 00 37    	bra       0x1af2 <.L2>

00001aee <.L4>:
    1aee:	03 04 e0    	cp0.b     w3
    1af0:	06 00 32    	bra       Z, 0x1afe <.L5>

00001af2 <.L2>:
    1af2:	00 01 78    	mov.w     w0, w2
    1af4:	02 00 78    	mov.w     w2, w0
    1af6:	b0 41 78    	mov.b     [w0++], w3
    1af8:	81 cf 51    	sub.b     w3, w1, [w15]
    1afa:	f9 ff 3a    	bra       NZ, 0x1aee <.L4>
    1afc:	01 00 37    	bra       0x1b00 <.L3>

00001afe <.L5>:
    1afe:	00 01 eb    	clr.w     w2

00001b00 <.L3>:
    1b00:	02 00 78    	mov.w     w2, w0
    1b02:	00 00 06    	return    

00001b04 <__Litob>:
    1b04:	fc 87 47    	add.w     w15, #0x1c, w15
    1b06:	88 9f be    	mov.d     w8, [w15++]
    1b08:	8a 9f be    	mov.d     w10, [w15++]
    1b0a:	8c 9f be    	mov.d     w12, [w15++]
    1b0c:	8e 1f 78    	mov.w     w14, [w15++]
    1b0e:	00 06 78    	mov.w     w0, w12
    1b10:	80 c5 b3    	mov.b     #0x58, w0
    1b12:	80 cf 50    	sub.b     w1, w0, [w15]
    1b14:	0a 00 32    	bra       Z, 0x1b2a <.L35>
    1b16:	77 40 40    	add.b     w0, #0x17, w0
    1b18:	80 cf 50    	sub.b     w1, w0, [w15]
    1b1a:	0a 00 32    	bra       Z, 0x1b30 <.L36>
    1b1c:	69 40 40    	add.b     w0, #0x9, w0
    1b1e:	80 cf 50    	sub.b     w1, w0, [w15]
    1b20:	0b 00 32    	bra       Z, 0x1b38 <.L37>
    1b22:	70 d5 21    	mov.w     #0x1d57, w0
    1b24:	80 bf 9f    	mov.w     w0, [w15-16]
    1b26:	ae 00 20    	mov.w     #0xa, w14
    1b28:	0a 00 37    	bra       0x1b3e <.L2>

00001b2a <.L35>:
    1b2a:	62 d4 21    	mov.w     #0x1d46, w2
    1b2c:	82 bf 9f    	mov.w     w2, [w15-16]
    1b2e:	06 00 37    	bra       0x1b3c <.L46>

00001b30 <.L36>:
    1b30:	73 d5 21    	mov.w     #0x1d57, w3
    1b32:	83 bf 9f    	mov.w     w3, [w15-16]
    1b34:	8e 00 20    	mov.w     #0x8, w14
    1b36:	03 00 37    	bra       0x1b3e <.L2>

00001b38 <.L37>:
    1b38:	74 d5 21    	mov.w     #0x1d57, w4
    1b3a:	84 bf 9f    	mov.w     w4, [w15-16]

00001b3c <.L46>:
    1b3c:	0e 01 20    	mov.w     #0x10, w14

00001b3e <.L2>:
    1b3e:	3c 02 be    	mov.d     [w12++], w4
    1b40:	2c 03 be    	mov.d     [w12--], w6
    1b42:	06 05 be    	mov.d     w6, w10
    1b44:	04 04 be    	mov.d     w4, w8
    1b46:	40 c6 b3    	mov.b     #0x64, w0
    1b48:	80 cf 50    	sub.b     w1, w0, [w15]
    1b4a:	03 00 32    	bra       Z, 0x1b52 <.L3>
    1b4c:	65 40 40    	add.b     w0, #0x5, w0
    1b4e:	80 cf 50    	sub.b     w1, w0, [w15]
    1b50:	0b 00 3a    	bra       NZ, 0x1b68 <.L4>

00001b52 <.L3>:
    1b52:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1b54:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1b56:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1b58:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1b5a:	06 00 3d    	bra       GE, 0x1b68 <.L4>
    1b5c:	60 00 b8    	mul.uu    w0, #0x0, w0
    1b5e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1b60:	04 04 50    	sub.w     w0, w4, w8
    1b62:	85 84 58    	subb.w    w1, w5, w9
    1b64:	06 05 59    	subb.w    w2, w6, w10
    1b66:	87 85 59    	subb.w    w3, w7, w11

00001b68 <.L4>:
    1b68:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1b6a:	04 00 32    	bra       Z, 0x1b74 <.L38>
    1b6c:	40 00 20    	mov.w     #0x4, w0
    1b6e:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1b70:	38 00 3a    	bra       NZ, 0x1be2 <.L51>
    1b72:	01 00 37    	bra       0x1b76 <.L6>

00001b74 <.L38>:
    1b74:	30 00 20    	mov.w     #0x3, w0

00001b76 <.L6>:
    1b76:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1b78:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1b7a:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1b7c:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1b7e:	04 00 3a    	bra       NZ, 0x1b88 <.L8>
    1b80:	dc 08 90    	mov.w     [w12+26], w1
    1b82:	8d 01 20    	mov.w     #0x18, w13
    1b84:	01 00 e0    	cp0.w     w1
    1b86:	06 00 32    	bra       Z, 0x1b94 <.L9>

00001b88 <.L8>:
    1b88:	8e 00 e9    	dec.w     w14, w1
    1b8a:	88 80 60    	and.w     w1, w8, w1
    1b8c:	8f ba 97    	mov.w     [w15-16], w5
    1b8e:	e5 c0 78    	mov.b     [w5+w1], w1
    1b90:	f1 ef 9f    	mov.b     w1, [w15-17]
    1b92:	7d 01 20    	mov.w     #0x17, w13

00001b94 <.L9>:
    1b94:	80 00 78    	mov.w     w0, w1

00001b96 <.LB101>:
    1b96:	81 00 e9    	dec.w     w1, w1
    1b98:	05 00 33    	bra       N, 0x1ba4 <.LE101>
    1b9a:	8b 05 d1    	lsr.w     w11, w11
    1b9c:	0a 85 d3    	rrc.w     w10, w10
    1b9e:	89 84 d3    	rrc.w     w9, w9
    1ba0:	08 84 d3    	rrc.w     w8, w8
    1ba2:	f9 ff 37    	bra       0x1b96 <.LB101>

00001ba4 <.LE101>:
    1ba4:	08 9e be    	mov.d     w8, [w12++]
    1ba6:	0a 96 be    	mov.d     w10, [w12--]
    1ba8:	12 00 37    	bra       0x1bce <.L10>

00001baa <.L12>:
    1baa:	8d 06 e9    	dec.w     w13, w13
    1bac:	8e 00 e9    	dec.w     w14, w1
    1bae:	84 80 60    	and.w     w1, w4, w1
    1bb0:	0f b9 97    	mov.w     [w15-16], w2
    1bb2:	e2 c1 78    	mov.b     [w2+w1], w3
    1bb4:	82 fd 2f    	mov.w     #0xffd8, w2
    1bb6:	0f 01 41    	add.w     w2, w15, w2
    1bb8:	03 f1 7e    	mov.b     w3, [w2+w13]
    1bba:	80 00 78    	mov.w     w0, w1

00001bbc <.LB115>:
    1bbc:	81 00 e9    	dec.w     w1, w1
    1bbe:	05 00 33    	bra       N, 0x1bca <.LE115>
    1bc0:	87 83 d1    	asr.w     w7, w7
    1bc2:	06 83 d3    	rrc.w     w6, w6
    1bc4:	85 82 d3    	rrc.w     w5, w5
    1bc6:	04 82 d3    	rrc.w     w4, w4
    1bc8:	f9 ff 37    	bra       0x1bbc <.LB115>

00001bca <.LE115>:
    1bca:	04 9e be    	mov.d     w4, [w12++]
    1bcc:	06 96 be    	mov.d     w6, [w12--]

00001bce <.L10>:
    1bce:	3c 02 be    	mov.d     [w12++], w4
    1bd0:	2c 03 be    	mov.d     [w12--], w6
    1bd2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1bd4:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1bd6:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1bd8:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1bda:	8b 00 34    	bra       LE, 0x1cf2 <.L11>
    1bdc:	0d 00 e0    	cp0.w     w13
    1bde:	e5 ff 3c    	bra       GT, 0x1baa <.L12>
    1be0:	88 00 37    	bra       0x1cf2 <.L11>

00001be2 <.L51>:
    1be2:	2c 60 90    	mov.b     [w12+34], w0
    1be4:	81 c6 b3    	mov.b     #0x68, w1
    1be6:	81 4f 50    	sub.b     w0, w1, [w15]
    1be8:	0b 00 32    	bra       Z, 0x1c00 <.L14>
    1bea:	06 00 3c    	bra       GT, 0x1bf8 <.L16>
    1bec:	00 04 e0    	cp0.b     w0
    1bee:	08 00 32    	bra       Z, 0x1c00 <.L14>
    1bf0:	e6 c0 50    	sub.b     w1, #0x6, w1
    1bf2:	81 4f 50    	sub.b     w0, w1, [w15]
    1bf4:	4e 00 3a    	bra       NZ, 0x1c92 <.L13>
    1bf6:	04 00 37    	bra       0x1c00 <.L14>

00001bf8 <.L16>:
    1bf8:	c1 c6 b3    	mov.b     #0x6c, w1
    1bfa:	81 4f 50    	sub.b     w0, w1, [w15]
    1bfc:	4a 00 3a    	bra       NZ, 0x1c92 <.L13>
    1bfe:	21 00 37    	bra       0x1c42 <.L52>

00001c00 <.L14>:
    1c00:	08 00 e0    	cp0.w     w8
    1c02:	04 00 3a    	bra       NZ, 0x1c0c <.L17>
    1c04:	5c 08 90    	mov.w     [w12+26], w0
    1c06:	8d 01 20    	mov.w     #0x18, w13
    1c08:	00 00 e0    	cp0.w     w0
    1c0a:	06 00 32    	bra       Z, 0x1c18 <.L18>

00001c0c <.L17>:
    1c0c:	11 00 09    	repeat    #0x11
    1c0e:	0e 84 d8    	div.uw    w8, w14
    1c10:	0f b9 97    	mov.w     [w15-16], w2
    1c12:	e2 c0 78    	mov.b     [w2+w1], w1
    1c14:	f1 ef 9f    	mov.b     w1, [w15-17]
    1c16:	7d 01 20    	mov.w     #0x17, w13

00001c18 <.L18>:
    1c18:	11 00 09    	repeat    #0x11
    1c1a:	0e 84 d8    	div.uw    w8, w14
    1c1c:	0a 00 37    	bra       0x1c32 <.L47>

00001c1e <.L21>:
    1c1e:	11 00 09    	repeat    #0x11
    1c20:	0e 04 d8    	div.sw    w8, w14
    1c22:	8d 06 e9    	dec.w     w13, w13
    1c24:	0e 81 b9    	mul.ss    w0, w14, w2
    1c26:	02 04 54    	sub.w     w8, w2, w8
    1c28:	8f b8 97    	mov.w     [w15-16], w1
    1c2a:	61 41 7c    	mov.b     [w1+w8], w2
    1c2c:	81 fd 2f    	mov.w     #0xffd8, w1
    1c2e:	8f 80 40    	add.w     w1, w15, w1
    1c30:	82 f0 7e    	mov.b     w2, [w1+w13]

00001c32 <.L47>:
    1c32:	00 04 78    	mov.w     w0, w8
    1c34:	08 00 e0    	cp0.w     w8
    1c36:	02 00 32    	bra       Z, 0x1c3c <.L20>
    1c38:	0d 00 e0    	cp0.w     w13
    1c3a:	f1 ff 3c    	bra       GT, 0x1c1e <.L21>

00001c3c <.L20>:
    1c3c:	cf c4 de    	asr.w     w8, #0xf, w9
    1c3e:	61 4d b9    	mul.su    w9, #0x1, w10
    1c40:	25 00 37    	bra       0x1c8c <.L50>

00001c42 <.L52>:
    1c42:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c44:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c46:	04 00 3a    	bra       NZ, 0x1c50 <.L22>
    1c48:	5c 08 90    	mov.w     [w12+26], w0
    1c4a:	8d 01 20    	mov.w     #0x18, w13
    1c4c:	00 00 e0    	cp0.w     w0
    1c4e:	07 00 32    	bra       Z, 0x1c5e <.L23>

00001c50 <.L22>:
    1c50:	61 71 b9    	mul.su    w14, #0x1, w2
    1c52:	08 00 be    	mov.d     w8, w0
    1c54:	63 01 07    	rcall     0x1f1c <___umodsi3>
    1c56:	8f b9 97    	mov.w     [w15-16], w3
    1c58:	e3 41 78    	mov.b     [w3+w0], w3
    1c5a:	f3 ef 9f    	mov.b     w3, [w15-17]
    1c5c:	7d 01 20    	mov.w     #0x17, w13

00001c5e <.L23>:
    1c5e:	61 71 b9    	mul.su    w14, #0x1, w2
    1c60:	08 00 be    	mov.d     w8, w0
    1c62:	4c 01 07    	rcall     0x1efc <___udivsi3>
    1c64:	0b 00 37    	bra       0x1c7c <.L48>

00001c66 <.L26>:
    1c66:	61 71 b9    	mul.su    w14, #0x1, w2
    1c68:	08 00 be    	mov.d     w8, w0
    1c6a:	39 01 07    	rcall     0x1ede <___divsi3>
    1c6c:	8d 06 e9    	dec.w     w13, w13
    1c6e:	00 f1 b9    	mul.ss    w14, w0, w2
    1c70:	02 04 54    	sub.w     w8, w2, w8
    1c72:	0f ba 97    	mov.w     [w15-16], w4
    1c74:	e4 42 7c    	mov.b     [w4+w8], w5
    1c76:	84 fd 2f    	mov.w     #0xffd8, w4
    1c78:	0f 02 42    	add.w     w4, w15, w4
    1c7a:	05 f2 7e    	mov.b     w5, [w4+w13]

00001c7c <.L48>:
    1c7c:	00 04 be    	mov.d     w0, w8
    1c7e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1c80:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1c82:	02 00 32    	bra       Z, 0x1c88 <.L25>
    1c84:	0d 00 e0    	cp0.w     w13
    1c86:	ef ff 3c    	bra       GT, 0x1c66 <.L26>

00001c88 <.L25>:
    1c88:	4f cd de    	asr.w     w9, #0xf, w10
    1c8a:	8a 05 78    	mov.w     w10, w11

00001c8c <.L50>:
    1c8c:	08 9e be    	mov.d     w8, [w12++]
    1c8e:	0a 96 be    	mov.d     w10, [w12--]
    1c90:	30 00 37    	bra       0x1cf2 <.L11>

00001c92 <.L13>:
    1c92:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1c94:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1c96:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1c98:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1c9a:	04 00 3a    	bra       NZ, 0x1ca4 <.L27>
    1c9c:	5c 08 90    	mov.w     [w12+26], w0
    1c9e:	8d 01 20    	mov.w     #0x18, w13
    1ca0:	00 00 e0    	cp0.w     w0
    1ca2:	09 00 32    	bra       Z, 0x1cb6 <.L28>

00001ca4 <.L27>:
    1ca4:	61 72 b9    	mul.su    w14, #0x1, w4
    1ca6:	61 2b b9    	mul.su    w5, #0x1, w6
    1ca8:	08 00 be    	mov.d     w8, w0
    1caa:	0a 01 be    	mov.d     w10, w2
    1cac:	e0 01 07    	rcall     0x206e <___umoddi3>
    1cae:	0f ba 97    	mov.w     [w15-16], w4
    1cb0:	64 42 78    	mov.b     [w4+w0], w4
    1cb2:	f4 ef 9f    	mov.b     w4, [w15-17]
    1cb4:	7d 01 20    	mov.w     #0x17, w13

00001cb6 <.L28>:
    1cb6:	61 72 b9    	mul.su    w14, #0x1, w4
    1cb8:	61 2b b9    	mul.su    w5, #0x1, w6
    1cba:	08 00 be    	mov.d     w8, w0
    1cbc:	0a 01 be    	mov.d     w10, w2
    1cbe:	d0 01 07    	rcall     0x2060 <___udivdi3>
    1cc0:	0d 00 37    	bra       0x1cdc <.L49>

00001cc2 <.L30>:
    1cc2:	61 72 b9    	mul.su    w14, #0x1, w4
    1cc4:	61 2b b9    	mul.su    w5, #0x1, w6
    1cc6:	08 00 be    	mov.d     w8, w0
    1cc8:	0a 01 be    	mov.d     w10, w2
    1cca:	d5 01 07    	rcall     0x2076 <___divdi3>
    1ccc:	8d 06 e9    	dec.w     w13, w13
    1cce:	00 f2 b9    	mul.ss    w14, w0, w4
    1cd0:	04 04 54    	sub.w     w8, w4, w8
    1cd2:	8f ba 97    	mov.w     [w15-16], w5
    1cd4:	65 42 7c    	mov.b     [w5+w8], w4
    1cd6:	85 fd 2f    	mov.w     #0xffd8, w5
    1cd8:	8f 82 42    	add.w     w5, w15, w5
    1cda:	84 f2 7e    	mov.b     w4, [w5+w13]

00001cdc <.L49>:
    1cdc:	00 9e be    	mov.d     w0, [w12++]
    1cde:	02 96 be    	mov.d     w2, [w12--]
    1ce0:	3c 04 be    	mov.d     [w12++], w8
    1ce2:	2c 05 be    	mov.d     [w12--], w10
    1ce4:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1ce6:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1ce8:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1cea:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1cec:	02 00 34    	bra       LE, 0x1cf2 <.L11>
    1cee:	0d 00 e0    	cp0.w     w13
    1cf0:	e8 ff 3c    	bra       GT, 0x1cc2 <.L30>

00001cf2 <.L11>:
    1cf2:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1cf4:	10 00 3a    	bra       NZ, 0x1d16 <.L31>
    1cf6:	0c 10 90    	mov.w     [w12+32], w0
    1cf8:	00 38 a3    	btst.z    w0, #0x3
    1cfa:	0d 00 32    	bra       Z, 0x1d16 <.L31>
    1cfc:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    1cfe:	06 00 3e    	bra       GTU, 0x1d0c <.L32>
    1d00:	85 fd 2f    	mov.w     #0xffd8, w5
    1d02:	8f 82 42    	add.w     w5, w15, w5
    1d04:	e5 c0 7e    	mov.b     [w5+w13], w1
    1d06:	00 c3 b3    	mov.b     #0x30, w0
    1d08:	80 cf 50    	sub.b     w1, w0, [w15]
    1d0a:	05 00 32    	bra       Z, 0x1d16 <.L31>

00001d0c <.L32>:
    1d0c:	8d 06 e9    	dec.w     w13, w13
    1d0e:	02 c3 b3    	mov.b     #0x30, w2
    1d10:	81 fd 2f    	mov.w     #0xffd8, w1
    1d12:	8f 80 40    	add.w     w1, w15, w1
    1d14:	82 f0 7e    	mov.b     w2, [w1+w13]

00001d16 <.L31>:
    1d16:	78 81 16    	subr.w    w13, #0x18, w2
    1d18:	12 0e 98    	mov.w     w2, [w12+18]
    1d1a:	6c 00 90    	mov.w     [w12+12], w0
    1d1c:	83 fd 2f    	mov.w     #0xffd8, w3
    1d1e:	8f 81 41    	add.w     w3, w15, w3
    1d20:	8d 80 41    	add.w     w3, w13, w1
    1d22:	dd fe 07    	rcall     0x1ade <_memcpy>
    1d24:	1c 08 90    	mov.w     [w12+18], w0
    1d26:	dc 08 90    	mov.w     [w12+26], w1
    1d28:	81 0f 50    	sub.w     w0, w1, [w15]
    1d2a:	06 00 3d    	bra       GE, 0x1d38 <.L33>
    1d2c:	00 80 50    	sub.w     w1, w0, w0
    1d2e:	00 0e 98    	mov.w     w0, [w12+16]
    1d30:	0c 10 90    	mov.w     [w12+32], w0
    1d32:	00 40 a1    	bclr.w    w0, #0x4
    1d34:	00 16 98    	mov.w     w0, [w12+32]
    1d36:	0f 00 37    	bra       0x1d56 <.L1>

00001d38 <.L33>:
    1d38:	01 00 e0    	cp0.w     w1
    1d3a:	0d 00 3d    	bra       GE, 0x1d56 <.L1>
    1d3c:	8c 10 90    	mov.w     [w12+32], w1
    1d3e:	f4 80 60    	and.w     w1, #0x14, w1
    1d40:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    1d42:	09 00 3a    	bra       NZ, 0x1d56 <.L1>
    1d44:	7c 09 90    	mov.w     [w12+30], w2
    1d46:	fc 00 90    	mov.w     [w12+14], w1
    1d48:	81 00 51    	sub.w     w2, w1, w1
    1d4a:	0c 09 90    	mov.w     [w12+16], w2
    1d4c:	82 80 50    	sub.w     w1, w2, w1
    1d4e:	00 80 50    	sub.w     w1, w0, w0
    1d50:	42 40 a9    	bclr.b    0x42, #0x2
    1d52:	01 00 34    	bra       LE, 0x1d56 <.L1>
    1d54:	00 0e 98    	mov.w     w0, [w12+16]

00001d56 <.L1>:
    1d56:	4f 07 78    	mov.w     [--w15], w14
    1d58:	4f 06 be    	mov.d     [--w15], w12
    1d5a:	4f 05 be    	mov.d     [--w15], w10
    1d5c:	4f 04 be    	mov.d     [--w15], w8
    1d5e:	cf 01 b1    	sub.w     #0x1c, w15
    1d60:	00 00 06    	return    

00001d62 <__Puttxt>:
    1d62:	04 00 fa    	lnk       #0x4
    1d64:	88 9f be    	mov.d     w8, [w15++]
    1d66:	8a 9f be    	mov.d     w10, [w15++]
    1d68:	8c 1f 78    	mov.w     w12, [w15++]
    1d6a:	00 04 78    	mov.w     w0, w8
    1d6c:	01 06 78    	mov.w     w1, w12
    1d6e:	f8 0d 90    	mov.w     [w8+30], w11
    1d70:	78 00 90    	mov.w     [w8+14], w0
    1d72:	80 85 55    	sub.w     w11, w0, w11
    1d74:	08 08 90    	mov.w     [w8+16], w0
    1d76:	80 85 55    	sub.w     w11, w0, w11
    1d78:	18 08 90    	mov.w     [w8+18], w0
    1d7a:	80 85 55    	sub.w     w11, w0, w11
    1d7c:	28 08 90    	mov.w     [w8+20], w0
    1d7e:	80 85 55    	sub.w     w11, w0, w11
    1d80:	38 08 90    	mov.w     [w8+22], w0
    1d82:	80 85 55    	sub.w     w11, w0, w11
    1d84:	48 08 90    	mov.w     [w8+24], w0
    1d86:	80 85 55    	sub.w     w11, w0, w11
    1d88:	00 02 22    	mov.w     #0x2020, w0
    1d8a:	90 bf 9f    	mov.w     w0, [w15-14]
    1d8c:	00 03 23    	mov.w     #0x3030, w0
    1d8e:	a0 bf 9f    	mov.w     w0, [w15-12]
    1d90:	08 10 90    	mov.w     [w8+32], w0
    1d92:	00 28 a3    	btst.z    w0, #0x2
    1d94:	15 00 3a    	bra       NZ, 0x1dc0 <.L2>
    1d96:	0b 00 e0    	cp0.w     w11
    1d98:	13 00 34    	bra       LE, 0x1dc0 <.L2>
    1d9a:	0b 05 78    	mov.w     w11, w10

00001d9c <.L5>:
    1d9c:	8a 04 78    	mov.w     w10, w9
    1d9e:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    1da0:	01 00 36    	bra       LEU, 0x1da4 <.L3>
    1da2:	29 00 20    	mov.w     #0x2, w9

00001da4 <.L3>:
    1da4:	c8 01 90    	mov.w     [w8+8], w3
    1da6:	09 01 78    	mov.w     w9, w2
    1da8:	ee 80 57    	sub.w     w15, #0xe, w1
    1daa:	58 00 90    	mov.w     [w8+10], w0
    1dac:	03 00 01    	call      w3
    1dae:	50 04 98    	mov.w     w0, [w8+10]
    1db0:	00 00 e0    	cp0.w     w0
    1db2:	8c 00 32    	bra       Z, 0x1ecc <.L29>
    1db4:	68 08 90    	mov.w     [w8+28], w0
    1db6:	09 00 40    	add.w     w0, w9, w0
    1db8:	60 0c 98    	mov.w     w0, [w8+28]
    1dba:	09 05 55    	sub.w     w10, w9, w10
    1dbc:	42 40 a9    	bclr.b    0x42, #0x2
    1dbe:	ee ff 3c    	bra       GT, 0x1d9c <.L5>

00001dc0 <.L2>:
    1dc0:	78 01 90    	mov.w     [w8+14], w2
    1dc2:	02 00 e0    	cp0.w     w2
    1dc4:	0c 00 34    	bra       LE, 0x1dde <.L6>
    1dc6:	c8 01 90    	mov.w     [w8+8], w3
    1dc8:	8c 00 78    	mov.w     w12, w1
    1dca:	58 00 90    	mov.w     [w8+10], w0
    1dcc:	03 00 01    	call      w3
    1dce:	50 04 98    	mov.w     w0, [w8+10]
    1dd0:	80 80 eb    	setm.w    w1
    1dd2:	00 00 e0    	cp0.w     w0
    1dd4:	7c 00 32    	bra       Z, 0x1ece <.L4>
    1dd6:	e8 08 90    	mov.w     [w8+28], w1
    1dd8:	78 00 90    	mov.w     [w8+14], w0
    1dda:	00 80 40    	add.w     w1, w0, w0
    1ddc:	60 0c 98    	mov.w     w0, [w8+28]

00001dde <.L6>:
    1dde:	88 0c 90    	mov.w     [w8+16], w9

00001de0 <.L30>:
    1de0:	09 00 e0    	cp0.w     w9
    1de2:	11 00 34    	bra       LE, 0x1e06 <.L7>
    1de4:	09 05 78    	mov.w     w9, w10
    1de6:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1de8:	01 00 36    	bra       LEU, 0x1dec <.L8>
    1dea:	2a 00 20    	mov.w     #0x2, w10

00001dec <.L8>:
    1dec:	c8 01 90    	mov.w     [w8+8], w3
    1dee:	0a 01 78    	mov.w     w10, w2
    1df0:	ec 80 57    	sub.w     w15, #0xc, w1
    1df2:	58 00 90    	mov.w     [w8+10], w0
    1df4:	03 00 01    	call      w3
    1df6:	50 04 98    	mov.w     w0, [w8+10]
    1df8:	00 00 e0    	cp0.w     w0
    1dfa:	68 00 32    	bra       Z, 0x1ecc <.L29>
    1dfc:	68 08 90    	mov.w     [w8+28], w0
    1dfe:	0a 00 40    	add.w     w0, w10, w0
    1e00:	60 0c 98    	mov.w     w0, [w8+28]
    1e02:	8a 84 54    	sub.w     w9, w10, w9
    1e04:	ed ff 37    	bra       0x1de0 <.L30>

00001e06 <.L7>:
    1e06:	18 09 90    	mov.w     [w8+18], w2
    1e08:	02 00 e0    	cp0.w     w2
    1e0a:	0c 00 34    	bra       LE, 0x1e24 <.L10>
    1e0c:	c8 01 90    	mov.w     [w8+8], w3
    1e0e:	e8 00 90    	mov.w     [w8+12], w1
    1e10:	58 00 90    	mov.w     [w8+10], w0
    1e12:	03 00 01    	call      w3
    1e14:	50 04 98    	mov.w     w0, [w8+10]
    1e16:	80 80 eb    	setm.w    w1
    1e18:	00 00 e0    	cp0.w     w0
    1e1a:	59 00 32    	bra       Z, 0x1ece <.L4>
    1e1c:	e8 08 90    	mov.w     [w8+28], w1
    1e1e:	18 08 90    	mov.w     [w8+18], w0
    1e20:	00 80 40    	add.w     w1, w0, w0
    1e22:	60 0c 98    	mov.w     w0, [w8+28]

00001e24 <.L10>:
    1e24:	a8 0c 90    	mov.w     [w8+20], w9

00001e26 <.L31>:
    1e26:	09 00 e0    	cp0.w     w9
    1e28:	11 00 34    	bra       LE, 0x1e4c <.L11>
    1e2a:	09 05 78    	mov.w     w9, w10
    1e2c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1e2e:	01 00 36    	bra       LEU, 0x1e32 <.L12>
    1e30:	2a 00 20    	mov.w     #0x2, w10

00001e32 <.L12>:
    1e32:	c8 01 90    	mov.w     [w8+8], w3
    1e34:	0a 01 78    	mov.w     w10, w2
    1e36:	ec 80 57    	sub.w     w15, #0xc, w1
    1e38:	58 00 90    	mov.w     [w8+10], w0
    1e3a:	03 00 01    	call      w3
    1e3c:	50 04 98    	mov.w     w0, [w8+10]
    1e3e:	00 00 e0    	cp0.w     w0
    1e40:	45 00 32    	bra       Z, 0x1ecc <.L29>
    1e42:	68 08 90    	mov.w     [w8+28], w0
    1e44:	0a 00 40    	add.w     w0, w10, w0
    1e46:	60 0c 98    	mov.w     w0, [w8+28]
    1e48:	8a 84 54    	sub.w     w9, w10, w9
    1e4a:	ed ff 37    	bra       0x1e26 <.L31>

00001e4c <.L11>:
    1e4c:	38 09 90    	mov.w     [w8+22], w2
    1e4e:	02 00 e0    	cp0.w     w2
    1e50:	0e 00 34    	bra       LE, 0x1e6e <.L14>
    1e52:	e8 00 90    	mov.w     [w8+12], w1
    1e54:	18 08 90    	mov.w     [w8+18], w0
    1e56:	80 80 40    	add.w     w1, w0, w1
    1e58:	c8 01 90    	mov.w     [w8+8], w3
    1e5a:	58 00 90    	mov.w     [w8+10], w0
    1e5c:	03 00 01    	call      w3
    1e5e:	50 04 98    	mov.w     w0, [w8+10]
    1e60:	80 80 eb    	setm.w    w1
    1e62:	00 00 e0    	cp0.w     w0
    1e64:	34 00 32    	bra       Z, 0x1ece <.L4>
    1e66:	e8 08 90    	mov.w     [w8+28], w1
    1e68:	38 08 90    	mov.w     [w8+22], w0
    1e6a:	00 80 40    	add.w     w1, w0, w0
    1e6c:	60 0c 98    	mov.w     w0, [w8+28]

00001e6e <.L14>:
    1e6e:	c8 0c 90    	mov.w     [w8+24], w9

00001e70 <.L32>:
    1e70:	09 00 e0    	cp0.w     w9
    1e72:	11 00 34    	bra       LE, 0x1e96 <.L15>
    1e74:	09 05 78    	mov.w     w9, w10
    1e76:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1e78:	01 00 36    	bra       LEU, 0x1e7c <.L16>
    1e7a:	2a 00 20    	mov.w     #0x2, w10

00001e7c <.L16>:
    1e7c:	c8 01 90    	mov.w     [w8+8], w3
    1e7e:	0a 01 78    	mov.w     w10, w2
    1e80:	ec 80 57    	sub.w     w15, #0xc, w1
    1e82:	58 00 90    	mov.w     [w8+10], w0
    1e84:	03 00 01    	call      w3
    1e86:	50 04 98    	mov.w     w0, [w8+10]
    1e88:	00 00 e0    	cp0.w     w0
    1e8a:	20 00 32    	bra       Z, 0x1ecc <.L29>
    1e8c:	68 08 90    	mov.w     [w8+28], w0
    1e8e:	0a 00 40    	add.w     w0, w10, w0
    1e90:	60 0c 98    	mov.w     w0, [w8+28]
    1e92:	8a 84 54    	sub.w     w9, w10, w9
    1e94:	ed ff 37    	bra       0x1e70 <.L32>

00001e96 <.L15>:
    1e96:	08 10 90    	mov.w     [w8+32], w0
    1e98:	80 00 eb    	clr.w     w1
    1e9a:	00 28 a3    	btst.z    w0, #0x2
    1e9c:	18 00 32    	bra       Z, 0x1ece <.L4>
    1e9e:	0b 00 e0    	cp0.w     w11
    1ea0:	16 00 34    	bra       LE, 0x1ece <.L4>
    1ea2:	8b 04 78    	mov.w     w11, w9

00001ea4 <.L19>:
    1ea4:	09 05 78    	mov.w     w9, w10
    1ea6:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1ea8:	01 00 36    	bra       LEU, 0x1eac <.L18>
    1eaa:	2a 00 20    	mov.w     #0x2, w10

00001eac <.L18>:
    1eac:	c8 01 90    	mov.w     [w8+8], w3
    1eae:	0a 01 78    	mov.w     w10, w2
    1eb0:	ee 80 57    	sub.w     w15, #0xe, w1
    1eb2:	58 00 90    	mov.w     [w8+10], w0
    1eb4:	03 00 01    	call      w3
    1eb6:	50 04 98    	mov.w     w0, [w8+10]
    1eb8:	00 00 e0    	cp0.w     w0
    1eba:	08 00 32    	bra       Z, 0x1ecc <.L29>
    1ebc:	68 08 90    	mov.w     [w8+28], w0
    1ebe:	0a 00 40    	add.w     w0, w10, w0
    1ec0:	60 0c 98    	mov.w     w0, [w8+28]
    1ec2:	8a 84 54    	sub.w     w9, w10, w9
    1ec4:	42 40 a9    	bclr.b    0x42, #0x2
    1ec6:	ee ff 3c    	bra       GT, 0x1ea4 <.L19>
    1ec8:	80 00 eb    	clr.w     w1
    1eca:	01 00 37    	bra       0x1ece <.L4>

00001ecc <.L29>:
    1ecc:	80 80 eb    	setm.w    w1

00001ece <.L4>:
    1ece:	01 00 78    	mov.w     w1, w0
    1ed0:	4f 06 78    	mov.w     [--w15], w12
    1ed2:	4f 05 be    	mov.d     [--w15], w10
    1ed4:	4f 04 be    	mov.d     [--w15], w8
    1ed6:	00 80 fa    	ulnk      
    1ed8:	00 00 06    	return    

00001eda <__Vacopy>:
    1eda:	01 08 78    	mov.w     w1, [w0]
    1edc:	00 00 06    	return    

00001ede <___divsi3>:
    1ede:	83 9f 68    	xor.w     w1, w3, [w15++]
    1ee0:	01 00 e0    	cp0.w     w1
    1ee2:	02 00 3d    	bra       GE, 0x1ee8 <divtestb>
    1ee4:	60 00 10    	subr.w    w0, #0x0, w0
    1ee6:	e0 80 18    	subbr.w   w1, #0x0, w1

00001ee8 <divtestb>:
    1ee8:	03 00 e0    	cp0.w     w3
    1eea:	02 00 3d    	bra       GE, 0x1ef0 <calcquot>
    1eec:	60 01 11    	subr.w    w2, #0x0, w2
    1eee:	e0 81 19    	subbr.w   w3, #0x0, w3

00001ef0 <calcquot>:
    1ef0:	05 00 07    	rcall     0x1efc <___udivsi3>
    1ef2:	4f 00 e0    	cp0.w     [--w15]
    1ef4:	02 00 3b    	bra       NN, 0x1efa <returnq>
    1ef6:	60 00 10    	subr.w    w0, #0x0, w0
    1ef8:	e0 80 18    	subbr.w   w1, #0x0, w1

00001efa <returnq>:
    1efa:	00 00 06    	return    

00001efc <___udivsi3>:
    1efc:	60 22 b8    	mul.uu    w4, #0x0, w4
    1efe:	06 02 20    	mov.w     #0x20, w6

00001f00 <nextbit>:
    1f00:	00 00 d0    	sl.w      w0, w0
    1f02:	81 80 d2    	rlc.w     w1, w1
    1f04:	04 82 d2    	rlc.w     w4, w4
    1f06:	85 82 d2    	rlc.w     w5, w5
    1f08:	00 00 a0    	bset.w    w0, #0x0
    1f0a:	02 02 52    	sub.w     w4, w2, w4
    1f0c:	83 82 5a    	subb.w    w5, w3, w5
    1f0e:	03 00 31    	bra       C, 0x1f16 <iterate>
    1f10:	02 02 42    	add.w     w4, w2, w4
    1f12:	83 82 4a    	addc.w    w5, w3, w5
    1f14:	00 00 a1    	bclr.w    w0, #0x0

00001f16 <iterate>:
    1f16:	06 03 e9    	dec.w     w6, w6
    1f18:	f3 ff 3a    	bra       NZ, 0x1f00 <nextbit>
    1f1a:	00 00 06    	return    

00001f1c <___umodsi3>:
    1f1c:	ef ff 07    	rcall     0x1efc <___udivsi3>
    1f1e:	04 00 be    	mov.d     w4, w0
    1f20:	00 00 06    	return    

00001f22 <___mulp32eds3>:
    1f22:	02 0a b9    	mul.su    w1, w2, w4
    1f24:	00 1b b9    	mul.su    w3, w0, w6
    1f26:	02 00 b8    	mul.uu    w0, w2, w0
    1f28:	81 00 42    	add.w     w4, w1, w1
    1f2a:	81 00 43    	add.w     w6, w1, w1
    1f2c:	00 00 06    	return    

00001f2e <___PplusBdi>:
    1f2e:	88 9f be    	mov.d     w8, [w15++]
    1f30:	8a 9f be    	mov.d     w10, [w15++]
    1f32:	30 04 42    	add.w     w4, [w0++], w8
    1f34:	b0 84 4a    	addc.w    w5, [w0++], w9
    1f36:	30 05 4b    	addc.w    w6, [w0++], w10
    1f38:	90 85 4b    	addc.w    w7, [w0], w11
    1f3a:	60 00 b1    	sub.w     #0x6, w0
    1f3c:	08 98 be    	mov.d     w8, [w0++]
    1f3e:	0a 90 be    	mov.d     w10, [w0--]
    1f40:	04 40 e1    	cp.w      w8, w4
    1f42:	05 c8 e1    	cpb.w     w9, w5
    1f44:	06 d0 e1    	cpb.w     w10, w6
    1f46:	07 d8 e1    	cpb.w     w11, w7
    1f48:	02 00 31    	bra       C, 0x1f4e <.L1>
    1f4a:	68 00 40    	add.w     w0, #0x8, w0
    1f4c:	10 08 e8    	inc.w     [w0], [w0]

00001f4e <.L1>:
    1f4e:	4f 05 be    	mov.d     [--w15], w10
    1f50:	4f 04 be    	mov.d     [--w15], w8
    1f52:	00 00 06    	return    

00001f54 <___PminusBdi>:
    1f54:	88 9f be    	mov.d     w8, [w15++]
    1f56:	8a 9f be    	mov.d     w10, [w15++]
    1f58:	30 04 be    	mov.d     [w0++], w8
    1f5a:	20 05 be    	mov.d     [w0--], w10
    1f5c:	04 18 54    	sub.w     w8, w4, [w0++]
    1f5e:	05 98 5c    	subb.w    w9, w5, [w0++]
    1f60:	06 18 5d    	subb.w    w10, w6, [w0++]
    1f62:	07 98 5d    	subb.w    w11, w7, [w0++]
    1f64:	11 00 20    	mov.w     #0x1, w1
    1f66:	04 40 e1    	cp.w      w8, w4
    1f68:	05 c8 e1    	cpb.w     w9, w5
    1f6a:	06 d0 e1    	cpb.w     w10, w6
    1f6c:	07 d8 e1    	cpb.w     w11, w7
    1f6e:	01 00 39    	bra       NC, 0x1f72 <.L4>
    1f70:	80 00 eb    	clr.w     w1

00001f72 <.L4>:
    1f72:	10 88 10    	subr.w    w1, [w0], [w0]
    1f74:	4f 05 be    	mov.d     [--w15], w10
    1f76:	4f 04 be    	mov.d     [--w15], w8
    1f78:	00 00 06    	return    

00001f7a <___udivmoddi3>:
    1f7a:	12 00 fa    	lnk       #0x12
    1f7c:	88 9f be    	mov.d     w8, [w15++]
    1f7e:	8a 9f be    	mov.d     w10, [w15++]
    1f80:	8c 9f be    	mov.d     w12, [w15++]
    1f82:	e0 b7 9f    	mov.w     w0, [w15-20]
    1f84:	f1 b7 9f    	mov.w     w1, [w15-18]
    1f86:	82 bf 9f    	mov.w     w2, [w15-16]
    1f88:	93 bf 9f    	mov.w     w3, [w15-14]
    1f8a:	06 05 be    	mov.d     w6, w10
    1f8c:	04 04 be    	mov.d     w4, w8
    1f8e:	00 00 eb    	clr.w     w0
    1f90:	d0 b7 9f    	mov.w     w0, [w15-22]
    1f92:	c0 b7 9f    	mov.w     w0, [w15-24]
    1f94:	b0 b7 9f    	mov.w     w0, [w15-26]
    1f96:	a0 b7 9f    	mov.w     w0, [w15-28]
    1f98:	90 b7 9f    	mov.w     w0, [w15-30]
    1f9a:	00 06 eb    	clr.w     w12

00001f9c <.L9>:
    1f9c:	5f b1 97    	mov.w     [w15-22], w2
    1f9e:	cf b0 97    	mov.w     [w15-24], w1
    1fa0:	82 01 41    	add.w     w2, w2, w3
    1fa2:	3f b0 97    	mov.w     [w15-26], w0
    1fa4:	02 00 e0    	cp0.w     w2
    1fa6:	04 00 3d    	bra       GE, 0x1fb0 <.L6>
    1fa8:	37 00 07    	rcall     0x2018 <.LPA0>
    1faa:	7e 80 57    	sub.w     w15, #0x1e, w0
    1fac:	c0 ff 07    	rcall     0x1f2e <___PplusBdi>
    1fae:	03 00 37    	bra       0x1fb6 <.L7>

00001fb0 <.L6>:
    1fb0:	33 00 07    	rcall     0x2018 <.LPA0>
    1fb2:	7e 80 57    	sub.w     w15, #0x1e, w0
    1fb4:	cf ff 07    	rcall     0x1f54 <___PminusBdi>

00001fb6 <.L7>:
    1fb6:	df b6 97    	mov.w     [w15-22], w13
    1fb8:	0d 00 e0    	cp0.w     w13
    1fba:	0c 00 35    	bra       LT, 0x1fd4 <.L8>
    1fbc:	6f b2 97    	mov.w     [w15-20], w4
    1fbe:	ff b2 97    	mov.w     [w15-18], w5
    1fc0:	0f bb 97    	mov.w     [w15-16], w6
    1fc2:	9f bb 97    	mov.w     [w15-14], w7
    1fc4:	10 00 20    	mov.w     #0x1, w0
    1fc6:	01 00 20    	mov.w     #0x0, w1
    1fc8:	60 11 b8    	mul.uu    w2, #0x0, w2
    1fca:	00 02 72    	ior.w     w4, w0, w4
    1fcc:	81 82 72    	ior.w     w5, w1, w5
    1fce:	02 03 73    	ior.w     w6, w2, w6
    1fd0:	83 83 73    	ior.w     w7, w3, w7
    1fd2:	1b 00 07    	rcall     0x200a <L0>

00001fd4 <.L8>:
    1fd4:	0c 06 e8    	inc.w     w12, w12
    1fd6:	01 04 20    	mov.w     #0x40, w1
    1fd8:	81 0f 56    	sub.w     w12, w1, [w15]
    1fda:	e0 ff 3a    	bra       NZ, 0x1f9c <.L9>
    1fdc:	0d 00 e0    	cp0.w     w13
    1fde:	04 00 3d    	bra       GE, 0x1fe8 <.L10>
    1fe0:	08 02 be    	mov.d     w8, w4
    1fe2:	0a 03 be    	mov.d     w10, w6
    1fe4:	7e 80 57    	sub.w     w15, #0x1e, w0
    1fe6:	a3 ff 07    	rcall     0x1f2e <___PplusBdi>

00001fe8 <.L10>:
    1fe8:	5f a8 97    	mov.w     [w15-38], w0
    1fea:	00 00 e0    	cp0.w     w0
    1fec:	05 00 3a    	bra       NZ, 0x1ff8 <.L11>
    1fee:	1f b2 97    	mov.w     [w15-30], w4
    1ff0:	af b2 97    	mov.w     [w15-28], w5
    1ff2:	3f b3 97    	mov.w     [w15-26], w6
    1ff4:	cf b3 97    	mov.w     [w15-24], w7
    1ff6:	09 00 07    	rcall     0x200a <L0>

00001ff8 <.L11>:
    1ff8:	6f b0 97    	mov.w     [w15-20], w0
    1ffa:	ff b0 97    	mov.w     [w15-18], w1
    1ffc:	0f b9 97    	mov.w     [w15-16], w2
    1ffe:	9f b9 97    	mov.w     [w15-14], w3
    2000:	4f 06 be    	mov.d     [--w15], w12
    2002:	4f 05 be    	mov.d     [--w15], w10
    2004:	4f 04 be    	mov.d     [--w15], w8
    2006:	00 80 fa    	ulnk      
    2008:	00 00 06    	return    

0000200a <L0>:
    200a:	01 00 07    	rcall     0x200e <.LPA5>
    200c:	00 00 06    	return    

0000200e <.LPA5>:
    200e:	a4 b7 9f    	mov.w     w4, [w15-28]
    2010:	b5 b7 9f    	mov.w     w5, [w15-26]
    2012:	c6 b7 9f    	mov.w     w6, [w15-24]
    2014:	d7 b7 9f    	mov.w     w7, [w15-22]
    2016:	00 00 06    	return    

00002018 <.LPA0>:
    2018:	4f 09 de    	lsr.w     w1, #0xf, w2
    201a:	82 81 71    	ior.w     w3, w2, w3
    201c:	b3 b7 9f    	mov.w     w3, [w15-26]
    201e:	4f 01 de    	lsr.w     w0, #0xf, w2
    2020:	81 80 40    	add.w     w1, w1, w1
    2022:	82 80 70    	ior.w     w1, w2, w1
    2024:	a1 b7 9f    	mov.w     w1, [w15-28]
    2026:	8f b0 97    	mov.w     [w15-32], w1
    2028:	4f 09 de    	lsr.w     w1, #0xf, w2
    202a:	00 00 40    	add.w     w0, w0, w0
    202c:	02 00 70    	ior.w     w0, w2, w0
    202e:	90 b7 9f    	mov.w     w0, [w15-30]
    2030:	7f a8 97    	mov.w     [w15-34], w0
    2032:	4f 01 de    	lsr.w     w0, #0xf, w2
    2034:	81 80 40    	add.w     w1, w1, w1
    2036:	82 80 70    	ior.w     w1, w2, w1
    2038:	81 b7 9f    	mov.w     w1, [w15-32]
    203a:	0d 00 07    	rcall     0x2056 <.LPA4>
    203c:	4f 3a de    	lsr.w     w7, #0xf, w4
    203e:	00 00 40    	add.w     w0, w0, w0
    2040:	04 00 70    	ior.w     w0, w4, w0
    2042:	f0 af 9f    	mov.w     w0, [w15-34]
    2044:	08 00 07    	rcall     0x2056 <.LPA4>
    2046:	04 02 42    	add.w     w4, w4, w4
    2048:	85 82 4a    	addc.w    w5, w5, w5
    204a:	06 03 4b    	addc.w    w6, w6, w6
    204c:	87 83 4b    	addc.w    w7, w7, w7
    204e:	df ff 07    	rcall     0x200e <.LPA5>
    2050:	08 02 be    	mov.d     w8, w4
    2052:	0a 03 be    	mov.d     w10, w6
    2054:	00 00 06    	return    

00002056 <.LPA4>:
    2056:	2f b2 97    	mov.w     [w15-28], w4
    2058:	bf b2 97    	mov.w     [w15-26], w5
    205a:	4f b3 97    	mov.w     [w15-24], w6
    205c:	df b3 97    	mov.w     [w15-22], w7
    205e:	00 00 06    	return    

00002060 <___udivdi3>:
    2060:	88 1f 78    	mov.w     w8, [w15++]
    2062:	18 00 20    	mov.w     #0x1, w8
    2064:	88 1f 78    	mov.w     w8, [w15++]
    2066:	89 ff 07    	rcall     0x1f7a <___udivmoddi3>
    2068:	8f 87 e9    	dec2.w    w15, w15
    206a:	4f 04 78    	mov.w     [--w15], w8
    206c:	00 00 06    	return    

0000206e <___umoddi3>:
    206e:	80 1f eb    	clr.w     [w15++]
    2070:	84 ff 07    	rcall     0x1f7a <___udivmoddi3>
    2072:	8f 87 e9    	dec2.w    w15, w15
    2074:	00 00 06    	return    

00002076 <___divdi3>:
    2076:	88 9f be    	mov.d     w8, [w15++]
    2078:	8a 9f be    	mov.d     w10, [w15++]
    207a:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    207c:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    207e:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2080:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2082:	0c 00 3d    	bra       GE, 0x209c <.L15>
    2084:	60 44 b8    	mul.uu    w8, #0x0, w8
    2086:	60 55 b8    	mul.uu    w10, #0x0, w10
    2088:	00 00 54    	sub.w     w8, w0, w0
    208a:	81 80 5c    	subb.w    w9, w1, w1
    208c:	02 01 5d    	subb.w    w10, w2, w2
    208e:	83 81 5d    	subb.w    w11, w3, w3
    2090:	18 00 20    	mov.w     #0x1, w8
    2092:	15 00 07    	rcall     0x20be <L0>
    2094:	08 00 3d    	bra       GE, 0x20a6 <.L16>
    2096:	18 00 07    	rcall     0x20c8 <.LPA1>
    2098:	00 04 eb    	clr.w     w8
    209a:	05 00 37    	bra       0x20a6 <.L16>

0000209c <.L15>:
    209c:	00 04 eb    	clr.w     w8
    209e:	0f 00 07    	rcall     0x20be <L0>
    20a0:	02 00 3d    	bra       GE, 0x20a6 <.L16>
    20a2:	12 00 07    	rcall     0x20c8 <.LPA1>
    20a4:	18 00 20    	mov.w     #0x1, w8

000020a6 <.L16>:
    20a6:	dc ff 07    	rcall     0x2060 <___udivdi3>
    20a8:	08 00 e0    	cp0.w     w8
    20aa:	06 00 32    	bra       Z, 0x20b8 <.L17>
    20ac:	60 22 b8    	mul.uu    w4, #0x0, w4
    20ae:	60 33 b8    	mul.uu    w6, #0x0, w6
    20b0:	00 00 52    	sub.w     w4, w0, w0
    20b2:	81 80 5a    	subb.w    w5, w1, w1
    20b4:	02 01 5b    	subb.w    w6, w2, w2
    20b6:	83 81 5b    	subb.w    w7, w3, w3

000020b8 <.L17>:
    20b8:	4f 05 be    	mov.d     [--w15], w10
    20ba:	4f 04 be    	mov.d     [--w15], w8
    20bc:	00 00 06    	return    

000020be <L0>:
    20be:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    20c0:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    20c2:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    20c4:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    20c6:	00 00 06    	return    

000020c8 <.LPA1>:
    20c8:	60 44 b8    	mul.uu    w8, #0x0, w8
    20ca:	60 55 b8    	mul.uu    w10, #0x0, w10
    20cc:	04 02 54    	sub.w     w8, w4, w4
    20ce:	85 82 5c    	subb.w    w9, w5, w5
    20d0:	06 03 5d    	subb.w    w10, w6, w6
    20d2:	87 83 5d    	subb.w    w11, w7, w7
    20d4:	00 00 06    	return    

000020d6 <___moddi3>:
    20d6:	88 9f be    	mov.d     w8, [w15++]
    20d8:	8a 9f be    	mov.d     w10, [w15++]
    20da:	8c 1f 78    	mov.w     w12, [w15++]
    20dc:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    20de:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    20e0:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    20e2:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    20e4:	0d 00 3d    	bra       GE, 0x2100 <.L21>
    20e6:	60 44 b8    	mul.uu    w8, #0x0, w8
    20e8:	60 55 b8    	mul.uu    w10, #0x0, w10
    20ea:	00 00 54    	sub.w     w8, w0, w0
    20ec:	81 80 5c    	subb.w    w9, w1, w1
    20ee:	02 01 5d    	subb.w    w10, w2, w2
    20f0:	83 81 5d    	subb.w    w11, w3, w3
    20f2:	1c 00 20    	mov.w     #0x1, w12
    20f4:	08 20 e1    	cp.w      w4, w8
    20f6:	09 a8 e1    	cpb.w     w5, w9
    20f8:	0a b0 e1    	cpb.w     w6, w10
    20fa:	0b b8 e1    	cpb.w     w7, w11
    20fc:	0d 00 3d    	bra       GE, 0x2118 <.L22>
    20fe:	08 00 37    	bra       0x2110 <.L26>

00002100 <.L21>:
    2100:	00 06 eb    	clr.w     w12
    2102:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2104:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2106:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2108:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    210a:	06 00 3d    	bra       GE, 0x2118 <.L22>
    210c:	60 44 b8    	mul.uu    w8, #0x0, w8
    210e:	60 55 b8    	mul.uu    w10, #0x0, w10

00002110 <.L26>:
    2110:	04 02 54    	sub.w     w8, w4, w4
    2112:	85 82 5c    	subb.w    w9, w5, w5
    2114:	06 03 5d    	subb.w    w10, w6, w6
    2116:	87 83 5d    	subb.w    w11, w7, w7

00002118 <.L22>:
    2118:	aa ff 07    	rcall     0x206e <___umoddi3>
    211a:	0c 00 e0    	cp0.w     w12
    211c:	06 00 32    	bra       Z, 0x212a <.L23>
    211e:	60 22 b8    	mul.uu    w4, #0x0, w4
    2120:	60 33 b8    	mul.uu    w6, #0x0, w6
    2122:	00 00 52    	sub.w     w4, w0, w0
    2124:	81 80 5a    	subb.w    w5, w1, w1
    2126:	02 01 5b    	subb.w    w6, w2, w2
    2128:	83 81 5b    	subb.w    w7, w3, w3

0000212a <.L23>:
    212a:	4f 06 78    	mov.w     [--w15], w12
    212c:	4f 05 be    	mov.d     [--w15], w10
    212e:	4f 04 be    	mov.d     [--w15], w8
    2130:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	2c 39 04    	goto      0x392c <__T1Interrupt>
    1026:	00 00 00 
    1028:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	5a 39 04    	goto      0x395a <__T2Interrupt>
    1032:	00 00 00 
    1034:	88 39 04    	goto      0x3988 <__T3Interrupt>
    1036:	00 00 00 
    1038:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	c4 23 04    	goto      0x23c4 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	96 23 04    	goto      0x2396 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	b6 39 04    	goto      0x39b6 <__T4Interrupt>
    1072:	00 00 00 
    1074:	e4 39 04    	goto      0x39e4 <__T5Interrupt>
    1076:	00 00 00 
    1078:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	20 24 04    	goto      0x2420 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	f2 23 04    	goto      0x23f2 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	7c 24 04    	goto      0x247c <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	4e 24 04    	goto      0x244e <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	ac 38 04    	goto      0x38ac <__USB1Interrupt>
    10ee:	00 00 00 
    10f0:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	d8 24 04    	goto      0x24d8 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	aa 24 04    	goto      0x24aa <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	c4 48 04    	goto      0x48c4 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a132 <.LC0-0x62>:
    a132:	12 01       	.word 0x112
    a134:	00 02       	.word 0x200
    a136:	00 00       	.word 0
    a138:	00 40       	.word 0x4000
    a13a:	66 66       	.word 0x6666
    a13c:	04 00       	.word 0x4
    a13e:	00 00       	.word 0
    a140:	01 02       	.word 0x201
    a142:	00 01       	.word 0x100
    a144:	09 02       	.word 0x209
    a146:	12 00       	.word 0x12
    a148:	01 01       	.word 0x101
    a14a:	00 a0       	.word 0xa000
    a14c:	32 09       	.word 0x932
    a14e:	04 00       	.word 0x4
    a150:	00 00       	.word 0
    a152:	ff 00       	.word 0xff
    a154:	ff 00       	.word 0xff
    a156:	04 03       	.word 0x304
    a158:	09 04       	.word 0x409
    a15a:	1a 03       	.word 0x31a
    a15c:	4f 00       	.word 0x4f
    a15e:	6c 00       	.word 0x6c
    a160:	69 00       	.word 0x69
    a162:	6e 00       	.word 0x6e
    a164:	20 00       	.word 0x20
    a166:	43 00       	.word 0x43
    a168:	6f 00       	.word 0x6f
    a16a:	6c 00       	.word 0x6c
    a16c:	6c 00       	.word 0x6c
    a16e:	65 00       	.word 0x65
    a170:	67 00       	.word 0x67
    a172:	65 00       	.word 0x65
    a174:	20 03       	.word 0x320
    a176:	50 00       	.word 0x50
    a178:	49 00       	.word 0x49
    a17a:	43 00       	.word 0x43
    a17c:	32 00       	.word 0x32
    a17e:	34 00       	.word 0x34
    a180:	46 00       	.word 0x46
    a182:	4a 00       	.word 0x4a
    a184:	31 00       	.word 0x31
    a186:	32 00       	.word 0x32
    a188:	38 00       	.word 0x38
    a18a:	47 00       	.word 0x47
    a18c:	42 00       	.word 0x42
    a18e:	32 00       	.word 0x32
    a190:	30 00       	.word 0x30
    a192:	36 00       	.word 0x36

0000a194 <.LC0>:
    a194:	25 30       	.word 0x3025
    a196:	31 78       	.word 0x7831
    a198:	25 30       	.word 0x3025
    a19a:	31 78       	.word 0x7831
    a19c:	0d 00       	.word 0xd
Disassembly of section .text:

0000219e <___putc_nobuffer>:
_PIN TX2, RX2, RTS2, CTS2;

uint8_t HWTXBUF[1024], HWRXBUF[1024];

void __putc_nobuffer(_UART *self, uint8_t ch) {
    219e:	04 00 fa    	lnk       #0x4
    21a0:	00 0f 78    	mov.w     w0, [w14]
    21a2:	21 47 98    	mov.b     w1, [w14+2]

000021a4 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    21a4:	00 00 00    	nop       

000021a6 <.L2>:
    21a6:	1e 00 78    	mov.w     [w14], w0
    21a8:	10 00 90    	mov.w     [w0+2], w0
    21aa:	90 00 78    	mov.w     [w0], w1
    21ac:	00 20 20    	mov.w     #0x200, w0
    21ae:	00 80 60    	and.w     w1, w0, w0
    21b0:	00 00 e0    	cp0.w     w0
    21b2:	f9 ff 3a    	bra       NZ, 0x21a6 <.L2>

000021b4 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    21b4:	1e 00 78    	mov.w     [w14], w0
    21b6:	20 00 90    	mov.w     [w0+4], w0
    21b8:	ae 40 90    	mov.b     [w14+2], w1
    21ba:	81 80 fb    	ze        w1, w1
    21bc:	01 08 78    	mov.w     w1, [w0]

000021be <.LSM3>:
}
    21be:	00 80 fa    	ulnk      
    21c0:	00 00 06    	return    

000021c2 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    21c2:	02 00 fa    	lnk       #0x2
    21c4:	00 0f 78    	mov.w     w0, [w14]

000021c6 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    21c6:	00 00 00    	nop       

000021c8 <.L4>:
    21c8:	1e 00 78    	mov.w     [w14], w0
    21ca:	10 00 90    	mov.w     [w0+2], w0
    21cc:	10 00 78    	mov.w     [w0], w0
    21ce:	61 00 60    	and.w     w0, #0x1, w0
    21d0:	00 00 e0    	cp0.w     w0
    21d2:	fa ff 32    	bra       Z, 0x21c8 <.L4>

000021d4 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    21d4:	1e 00 78    	mov.w     [w14], w0
    21d6:	30 00 90    	mov.w     [w0+6], w0
    21d8:	10 00 78    	mov.w     [w0], w0
    21da:	00 40 78    	mov.b     w0, w0

000021dc <.LSM7>:
}
    21dc:	00 80 fa    	ulnk      
    21de:	00 00 06    	return    

000021e0 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    21e0:	04 00 fa    	lnk       #0x4
    21e2:	00 0f 78    	mov.w     w0, [w14]
    21e4:	21 47 98    	mov.b     w1, [w14+2]

000021e6 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    21e6:	00 00 00    	nop       

000021e8 <.L6>:
    21e8:	1e 00 78    	mov.w     [w14], w0
    21ea:	d0 10 90    	mov.w     [w0+42], w1
    21ec:	1e 00 78    	mov.w     [w14], w0
    21ee:	20 10 90    	mov.w     [w0+36], w0
    21f0:	80 8f 50    	sub.w     w1, w0, [w15]
    21f2:	fa ff 32    	bra       Z, 0x21e8 <.L6>

000021f4 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    21f4:	ff 3f fc    	disi      #0x3fff

000021f6 <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    21f6:	1e 00 78    	mov.w     [w14], w0
    21f8:	90 10 90    	mov.w     [w0+34], w1
    21fa:	1e 00 78    	mov.w     [w14], w0
    21fc:	40 10 90    	mov.w     [w0+40], w0
    21fe:	00 80 40    	add.w     w1, w0, w0
    2200:	ae 40 90    	mov.b     [w14+2], w1
    2202:	01 48 78    	mov.b     w1, [w0]

00002204 <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    2204:	1e 00 78    	mov.w     [w14], w0
    2206:	40 10 90    	mov.w     [w0+40], w0
    2208:	80 00 e8    	inc.w     w0, w1
    220a:	1e 00 78    	mov.w     [w14], w0
    220c:	20 10 90    	mov.w     [w0+36], w0
    220e:	00 01 78    	mov.w     w0, w2
    2210:	11 00 09    	repeat    #0x11
    2212:	82 80 d8    	div.uw    w1, w2
    2214:	80 00 fd    	exch      w0, w1
    2216:	80 00 78    	mov.w     w0, w1
    2218:	1e 00 78    	mov.w     [w14], w0
    221a:	41 10 98    	mov.w     w1, [w0+40]

0000221c <.LSM13>:
    self->TXbuffer.count++;
    221c:	1e 00 78    	mov.w     [w14], w0
    221e:	50 10 90    	mov.w     [w0+42], w0
    2220:	80 00 e8    	inc.w     w0, w1
    2222:	1e 00 78    	mov.w     [w14], w0
    2224:	51 10 98    	mov.w     w1, [w0+42]

00002226 <.LSM14>:
    enable_interrupts();
    2226:	52 20 ef    	clr.w     0x52

00002228 <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    2228:	1e 00 78    	mov.w     [w14], w0
    222a:	d0 10 90    	mov.w     [w0+42], w1
    222c:	1e 00 78    	mov.w     [w14], w0
    222e:	30 18 90    	mov.w     [w0+54], w0
    2230:	80 8f 50    	sub.w     w1, w0, [w15]
    2232:	08 00 39    	bra       NC, 0x2244 <.L5>

00002234 <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    2234:	1e 00 78    	mov.w     [w14], w0
    2236:	10 00 90    	mov.w     [w0+2], w0
    2238:	9e 00 78    	mov.w     [w14], w1
    223a:	91 00 90    	mov.w     [w1+2], w1
    223c:	11 01 78    	mov.w     [w1], w2
    223e:	01 40 20    	mov.w     #0x400, w1
    2240:	82 80 70    	ior.w     w1, w2, w1
    2242:	01 08 78    	mov.w     w1, [w0]

00002244 <.L5>:
                                                    // transmission
}
    2244:	00 80 fa    	ulnk      
    2246:	00 00 06    	return    

00002248 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    2248:	04 00 fa    	lnk       #0x4
    224a:	10 07 98    	mov.w     w0, [w14+2]

0000224c <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    224c:	1e 00 90    	mov.w     [w14+2], w0
    224e:	50 00 90    	mov.w     [w0+10], w0
    2250:	9e 00 90    	mov.w     [w14+2], w1
    2252:	d1 00 90    	mov.w     [w1+10], w1
    2254:	11 01 78    	mov.w     [w1], w2
    2256:	9e 00 90    	mov.w     [w14+2], w1
    2258:	e1 48 90    	mov.b     [w1+14], w1
    225a:	81 80 fb    	ze        w1, w1
    225c:	13 00 20    	mov.w     #0x1, w3
    225e:	81 18 dd    	sl.w      w3, w1, w1
    2260:	81 80 ea    	com.w     w1, w1
    2262:	81 00 61    	and.w     w2, w1, w1
    2264:	01 08 78    	mov.w     w1, [w0]

00002266 <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    2266:	1e 00 90    	mov.w     [w14+2], w0
    2268:	50 10 90    	mov.w     [w0+42], w0
    226a:	00 00 e0    	cp0.w     w0
    226c:	27 00 3a    	bra       NZ, 0x22bc <.L13>

0000226e <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    226e:	1e 00 90    	mov.w     [w14+2], w0
    2270:	10 00 90    	mov.w     [w0+2], w0
    2272:	9e 00 90    	mov.w     [w14+2], w1
    2274:	91 00 90    	mov.w     [w1+2], w1
    2276:	11 01 78    	mov.w     [w1], w2
    2278:	f1 bf 2f    	mov.w     #0xfbff, w1
    227a:	81 00 61    	and.w     w2, w1, w1
    227c:	01 08 78    	mov.w     w1, [w0]

0000227e <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    227e:	1f 00 37    	bra       0x22be <.L10>

00002280 <.L12>:
        disable_interrupts();
    2280:	ff 3f fc    	disi      #0x3fff

00002282 <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    2282:	1e 00 90    	mov.w     [w14+2], w0
    2284:	90 10 90    	mov.w     [w0+34], w1
    2286:	1e 00 90    	mov.w     [w14+2], w0
    2288:	30 10 90    	mov.w     [w0+38], w0
    228a:	00 80 40    	add.w     w1, w0, w0
    228c:	10 4f 78    	mov.b     [w0], [w14]

0000228e <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    228e:	1e 00 90    	mov.w     [w14+2], w0
    2290:	30 10 90    	mov.w     [w0+38], w0
    2292:	80 00 e8    	inc.w     w0, w1
    2294:	1e 00 90    	mov.w     [w14+2], w0
    2296:	20 10 90    	mov.w     [w0+36], w0
    2298:	00 01 78    	mov.w     w0, w2
    229a:	11 00 09    	repeat    #0x11
    229c:	82 80 d8    	div.uw    w1, w2
    229e:	80 00 fd    	exch      w0, w1
    22a0:	80 00 78    	mov.w     w0, w1
    22a2:	1e 00 90    	mov.w     [w14+2], w0
    22a4:	31 10 98    	mov.w     w1, [w0+38]

000022a6 <.LSM26>:
        self->TXbuffer.count--;
    22a6:	1e 00 90    	mov.w     [w14+2], w0
    22a8:	50 10 90    	mov.w     [w0+42], w0
    22aa:	80 00 e9    	dec.w     w0, w1
    22ac:	1e 00 90    	mov.w     [w14+2], w0
    22ae:	51 10 98    	mov.w     w1, [w0+42]

000022b0 <.LSM27>:
        enable_interrupts();
    22b0:	52 20 ef    	clr.w     0x52

000022b2 <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    22b2:	1e 00 90    	mov.w     [w14+2], w0
    22b4:	20 00 90    	mov.w     [w0+4], w0
    22b6:	9e 80 fb    	ze        [w14], w1
    22b8:	01 08 78    	mov.w     w1, [w0]
    22ba:	01 00 37    	bra       0x22be <.L10>

000022bc <.L13>:
    22bc:	00 00 00    	nop       

000022be <.L10>:
    22be:	1e 00 90    	mov.w     [w14+2], w0
    22c0:	10 00 90    	mov.w     [w0+2], w0
    22c2:	90 00 78    	mov.w     [w0], w1
    22c4:	00 20 20    	mov.w     #0x200, w0
    22c6:	00 80 60    	and.w     w1, w0, w0
    22c8:	00 00 e0    	cp0.w     w0
    22ca:	04 00 3a    	bra       NZ, 0x22d4 <.L8>
    22cc:	1e 00 90    	mov.w     [w14+2], w0
    22ce:	50 10 90    	mov.w     [w0+42], w0
    22d0:	00 00 e0    	cp0.w     w0
    22d2:	d6 ff 3a    	bra       NZ, 0x2280 <.L12>

000022d4 <.L8>:
    }
}
    22d4:	00 80 fa    	ulnk      
    22d6:	00 00 06    	return    

000022d8 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    22d8:	04 00 fa    	lnk       #0x4
    22da:	10 07 98    	mov.w     w0, [w14+2]

000022dc <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    22dc:	00 00 00    	nop       

000022de <.L15>:
    22de:	1e 00 90    	mov.w     [w14+2], w0
    22e0:	20 18 90    	mov.w     [w0+52], w0
    22e2:	00 00 e0    	cp0.w     w0
    22e4:	fc ff 32    	bra       Z, 0x22de <.L15>

000022e6 <.LSM33>:
    disable_interrupts();
    22e6:	ff 3f fc    	disi      #0x3fff

000022e8 <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    22e8:	1e 00 90    	mov.w     [w14+2], w0
    22ea:	e0 10 90    	mov.w     [w0+44], w1
    22ec:	1e 00 90    	mov.w     [w14+2], w0
    22ee:	00 18 90    	mov.w     [w0+48], w0
    22f0:	00 80 40    	add.w     w1, w0, w0
    22f2:	10 4f 78    	mov.b     [w0], [w14]

000022f4 <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    22f4:	1e 00 90    	mov.w     [w14+2], w0
    22f6:	00 18 90    	mov.w     [w0+48], w0
    22f8:	80 00 e8    	inc.w     w0, w1
    22fa:	1e 00 90    	mov.w     [w14+2], w0
    22fc:	70 10 90    	mov.w     [w0+46], w0
    22fe:	00 01 78    	mov.w     w0, w2
    2300:	11 00 09    	repeat    #0x11
    2302:	82 80 d8    	div.uw    w1, w2
    2304:	80 00 fd    	exch      w0, w1
    2306:	80 00 78    	mov.w     w0, w1
    2308:	1e 00 90    	mov.w     [w14+2], w0
    230a:	01 18 98    	mov.w     w1, [w0+48]

0000230c <.LSM36>:
    self->RXbuffer.count--;
    230c:	1e 00 90    	mov.w     [w14+2], w0
    230e:	20 18 90    	mov.w     [w0+52], w0
    2310:	80 00 e9    	dec.w     w0, w1
    2312:	1e 00 90    	mov.w     [w14+2], w0
    2314:	21 18 98    	mov.w     w1, [w0+52]

00002316 <.LSM37>:
    enable_interrupts();
    2316:	52 20 ef    	clr.w     0x52

00002318 <.LSM38>:
    return ch;
    2318:	1e 40 78    	mov.b     [w14], w0

0000231a <.LSM39>:
}
    231a:	00 80 fa    	ulnk      
    231c:	00 00 06    	return    

0000231e <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    231e:	02 00 fa    	lnk       #0x2
    2320:	00 0f 78    	mov.w     w0, [w14]

00002322 <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2322:	1e 00 78    	mov.w     [w14], w0
    2324:	50 00 90    	mov.w     [w0+10], w0
    2326:	9e 00 78    	mov.w     [w14], w1
    2328:	d1 00 90    	mov.w     [w1+10], w1
    232a:	11 01 78    	mov.w     [w1], w2
    232c:	9e 00 78    	mov.w     [w14], w1
    232e:	f1 48 90    	mov.b     [w1+15], w1
    2330:	81 80 fb    	ze        w1, w1
    2332:	13 00 20    	mov.w     #0x1, w3
    2334:	81 18 dd    	sl.w      w3, w1, w1
    2336:	81 80 ea    	com.w     w1, w1
    2338:	81 00 61    	and.w     w2, w1, w1
    233a:	01 08 78    	mov.w     w1, [w0]

0000233c <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    233c:	1d 00 37    	bra       0x2378 <.L17>

0000233e <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    233e:	ff 3f fc    	disi      #0x3fff

00002340 <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    2340:	1e 00 78    	mov.w     [w14], w0
    2342:	e0 10 90    	mov.w     [w0+44], w1
    2344:	1e 00 78    	mov.w     [w14], w0
    2346:	10 18 90    	mov.w     [w0+50], w0
    2348:	00 80 40    	add.w     w1, w0, w0
    234a:	9e 00 78    	mov.w     [w14], w1
    234c:	b1 00 90    	mov.w     [w1+6], w1
    234e:	91 00 78    	mov.w     [w1], w1
    2350:	81 40 78    	mov.b     w1, w1
    2352:	01 48 78    	mov.b     w1, [w0]

00002354 <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    2354:	1e 00 78    	mov.w     [w14], w0
    2356:	10 18 90    	mov.w     [w0+50], w0
    2358:	80 00 e8    	inc.w     w0, w1
    235a:	1e 00 78    	mov.w     [w14], w0
    235c:	70 10 90    	mov.w     [w0+46], w0
    235e:	00 01 78    	mov.w     w0, w2
    2360:	11 00 09    	repeat    #0x11
    2362:	82 80 d8    	div.uw    w1, w2
    2364:	80 00 fd    	exch      w0, w1
    2366:	80 00 78    	mov.w     w0, w1
    2368:	1e 00 78    	mov.w     [w14], w0
    236a:	11 18 98    	mov.w     w1, [w0+50]

0000236c <.LSM46>:
        self->RXbuffer.count++;
    236c:	1e 00 78    	mov.w     [w14], w0
    236e:	20 18 90    	mov.w     [w0+52], w0
    2370:	80 00 e8    	inc.w     w0, w1
    2372:	1e 00 78    	mov.w     [w14], w0
    2374:	21 18 98    	mov.w     w1, [w0+52]

00002376 <.LSM47>:
        enable_interrupts();
    2376:	52 20 ef    	clr.w     0x52

00002378 <.L17>:
    2378:	1e 00 78    	mov.w     [w14], w0
    237a:	10 00 90    	mov.w     [w0+2], w0
    237c:	10 00 78    	mov.w     [w0], w0
    237e:	61 00 60    	and.w     w0, #0x1, w0
    2380:	00 40 78    	mov.b     w0, w0
    2382:	00 04 e0    	cp0.b     w0
    2384:	06 00 32    	bra       Z, 0x2392 <.L16>

00002386 <.LSM49>:
    2386:	1e 00 78    	mov.w     [w14], w0
    2388:	a0 18 90    	mov.w     [w0+52], w1
    238a:	1e 00 78    	mov.w     [w14], w0
    238c:	70 10 90    	mov.w     [w0+46], w0

0000238e <.LSM50>:
    238e:	80 8f 50    	sub.w     w1, w0, [w15]
    2390:	d6 ff 3a    	bra       NZ, 0x233e <.L19>

00002392 <.L16>:
    }
}
    2392:	00 80 fa    	ulnk      
    2394:	00 00 06    	return    

00002396 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    2396:	36 00 f8    	push      0x36
    2398:	80 9f be    	mov.d     w0, [w15++]
    239a:	82 9f be    	mov.d     w2, [w15++]
    239c:	84 9f be    	mov.d     w4, [w15++]
    239e:	86 9f be    	mov.d     w6, [w15++]
    23a0:	32 00 f8    	push      0x32
    23a2:	34 00 f8    	push      0x34
    23a4:	10 00 20    	mov.w     #0x1, w0
    23a6:	a0 01 88    	mov.w     w0, 0x34
    23a8:	00 20 20    	mov.w     #0x200, w0
    23aa:	90 01 88    	mov.w     w0, 0x32
    23ac:	00 00 fa    	lnk       #0x0

000023ae <.LSM53>:
    __serviceTxInterrupt(&uart1);
    23ae:	60 85 20    	mov.w     #0x856, w0
    23b0:	4b ff 07    	rcall     0x2248 <___serviceTxInterrupt>

000023b2 <.LSM54>:
}
    23b2:	00 80 fa    	ulnk      
    23b4:	34 00 f9    	pop       0x34
    23b6:	32 00 f9    	pop       0x32
    23b8:	4f 03 be    	mov.d     [--w15], w6
    23ba:	4f 02 be    	mov.d     [--w15], w4
    23bc:	4f 01 be    	mov.d     [--w15], w2
    23be:	4f 00 be    	mov.d     [--w15], w0
    23c0:	36 00 f9    	pop       0x36
    23c2:	00 40 06    	retfie    

000023c4 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    23c4:	36 00 f8    	push      0x36
    23c6:	80 9f be    	mov.d     w0, [w15++]
    23c8:	82 9f be    	mov.d     w2, [w15++]
    23ca:	84 9f be    	mov.d     w4, [w15++]
    23cc:	86 9f be    	mov.d     w6, [w15++]
    23ce:	32 00 f8    	push      0x32
    23d0:	34 00 f8    	push      0x34
    23d2:	10 00 20    	mov.w     #0x1, w0
    23d4:	a0 01 88    	mov.w     w0, 0x34
    23d6:	00 20 20    	mov.w     #0x200, w0
    23d8:	90 01 88    	mov.w     w0, 0x32
    23da:	00 00 fa    	lnk       #0x0

000023dc <.LSM56>:
    __serviceRxInterrupt(&uart1);
    23dc:	60 85 20    	mov.w     #0x856, w0
    23de:	9f ff 07    	rcall     0x231e <___serviceRxInterrupt>

000023e0 <.LSM57>:
}
    23e0:	00 80 fa    	ulnk      
    23e2:	34 00 f9    	pop       0x34
    23e4:	32 00 f9    	pop       0x32
    23e6:	4f 03 be    	mov.d     [--w15], w6
    23e8:	4f 02 be    	mov.d     [--w15], w4
    23ea:	4f 01 be    	mov.d     [--w15], w2
    23ec:	4f 00 be    	mov.d     [--w15], w0
    23ee:	36 00 f9    	pop       0x36
    23f0:	00 40 06    	retfie    

000023f2 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    23f2:	36 00 f8    	push      0x36
    23f4:	80 9f be    	mov.d     w0, [w15++]
    23f6:	82 9f be    	mov.d     w2, [w15++]
    23f8:	84 9f be    	mov.d     w4, [w15++]
    23fa:	86 9f be    	mov.d     w6, [w15++]
    23fc:	32 00 f8    	push      0x32
    23fe:	34 00 f8    	push      0x34
    2400:	10 00 20    	mov.w     #0x1, w0
    2402:	a0 01 88    	mov.w     w0, 0x34
    2404:	00 20 20    	mov.w     #0x200, w0
    2406:	90 01 88    	mov.w     w0, 0x32
    2408:	00 00 fa    	lnk       #0x0

0000240a <.LSM59>:
    __serviceTxInterrupt(&uart2);
    240a:	20 89 20    	mov.w     #0x892, w0
    240c:	1d ff 07    	rcall     0x2248 <___serviceTxInterrupt>

0000240e <.LSM60>:
}
    240e:	00 80 fa    	ulnk      
    2410:	34 00 f9    	pop       0x34
    2412:	32 00 f9    	pop       0x32
    2414:	4f 03 be    	mov.d     [--w15], w6
    2416:	4f 02 be    	mov.d     [--w15], w4
    2418:	4f 01 be    	mov.d     [--w15], w2
    241a:	4f 00 be    	mov.d     [--w15], w0
    241c:	36 00 f9    	pop       0x36
    241e:	00 40 06    	retfie    

00002420 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2420:	36 00 f8    	push      0x36
    2422:	80 9f be    	mov.d     w0, [w15++]
    2424:	82 9f be    	mov.d     w2, [w15++]
    2426:	84 9f be    	mov.d     w4, [w15++]
    2428:	86 9f be    	mov.d     w6, [w15++]
    242a:	32 00 f8    	push      0x32
    242c:	34 00 f8    	push      0x34
    242e:	10 00 20    	mov.w     #0x1, w0
    2430:	a0 01 88    	mov.w     w0, 0x34
    2432:	00 20 20    	mov.w     #0x200, w0
    2434:	90 01 88    	mov.w     w0, 0x32
    2436:	00 00 fa    	lnk       #0x0

00002438 <.LSM62>:
    __serviceRxInterrupt(&uart2);
    2438:	20 89 20    	mov.w     #0x892, w0
    243a:	71 ff 07    	rcall     0x231e <___serviceRxInterrupt>

0000243c <.LSM63>:
}
    243c:	00 80 fa    	ulnk      
    243e:	34 00 f9    	pop       0x34
    2440:	32 00 f9    	pop       0x32
    2442:	4f 03 be    	mov.d     [--w15], w6
    2444:	4f 02 be    	mov.d     [--w15], w4
    2446:	4f 01 be    	mov.d     [--w15], w2
    2448:	4f 00 be    	mov.d     [--w15], w0
    244a:	36 00 f9    	pop       0x36
    244c:	00 40 06    	retfie    

0000244e <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    244e:	36 00 f8    	push      0x36
    2450:	80 9f be    	mov.d     w0, [w15++]
    2452:	82 9f be    	mov.d     w2, [w15++]
    2454:	84 9f be    	mov.d     w4, [w15++]
    2456:	86 9f be    	mov.d     w6, [w15++]
    2458:	32 00 f8    	push      0x32
    245a:	34 00 f8    	push      0x34
    245c:	10 00 20    	mov.w     #0x1, w0
    245e:	a0 01 88    	mov.w     w0, 0x34
    2460:	00 20 20    	mov.w     #0x200, w0
    2462:	90 01 88    	mov.w     w0, 0x32
    2464:	00 00 fa    	lnk       #0x0

00002466 <.LSM65>:
    __serviceTxInterrupt(&uart3);
    2466:	e0 8c 20    	mov.w     #0x8ce, w0
    2468:	ef fe 07    	rcall     0x2248 <___serviceTxInterrupt>

0000246a <.LSM66>:
}
    246a:	00 80 fa    	ulnk      
    246c:	34 00 f9    	pop       0x34
    246e:	32 00 f9    	pop       0x32
    2470:	4f 03 be    	mov.d     [--w15], w6
    2472:	4f 02 be    	mov.d     [--w15], w4
    2474:	4f 01 be    	mov.d     [--w15], w2
    2476:	4f 00 be    	mov.d     [--w15], w0
    2478:	36 00 f9    	pop       0x36
    247a:	00 40 06    	retfie    

0000247c <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    247c:	36 00 f8    	push      0x36
    247e:	80 9f be    	mov.d     w0, [w15++]
    2480:	82 9f be    	mov.d     w2, [w15++]
    2482:	84 9f be    	mov.d     w4, [w15++]
    2484:	86 9f be    	mov.d     w6, [w15++]
    2486:	32 00 f8    	push      0x32
    2488:	34 00 f8    	push      0x34
    248a:	10 00 20    	mov.w     #0x1, w0
    248c:	a0 01 88    	mov.w     w0, 0x34
    248e:	00 20 20    	mov.w     #0x200, w0
    2490:	90 01 88    	mov.w     w0, 0x32
    2492:	00 00 fa    	lnk       #0x0

00002494 <.LSM68>:
    __serviceRxInterrupt(&uart3);
    2494:	e0 8c 20    	mov.w     #0x8ce, w0
    2496:	43 ff 07    	rcall     0x231e <___serviceRxInterrupt>

00002498 <.LSM69>:
}
    2498:	00 80 fa    	ulnk      
    249a:	34 00 f9    	pop       0x34
    249c:	32 00 f9    	pop       0x32
    249e:	4f 03 be    	mov.d     [--w15], w6
    24a0:	4f 02 be    	mov.d     [--w15], w4
    24a2:	4f 01 be    	mov.d     [--w15], w2
    24a4:	4f 00 be    	mov.d     [--w15], w0
    24a6:	36 00 f9    	pop       0x36
    24a8:	00 40 06    	retfie    

000024aa <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    24aa:	36 00 f8    	push      0x36
    24ac:	80 9f be    	mov.d     w0, [w15++]
    24ae:	82 9f be    	mov.d     w2, [w15++]
    24b0:	84 9f be    	mov.d     w4, [w15++]
    24b2:	86 9f be    	mov.d     w6, [w15++]
    24b4:	32 00 f8    	push      0x32
    24b6:	34 00 f8    	push      0x34
    24b8:	10 00 20    	mov.w     #0x1, w0
    24ba:	a0 01 88    	mov.w     w0, 0x34
    24bc:	00 20 20    	mov.w     #0x200, w0
    24be:	90 01 88    	mov.w     w0, 0x32
    24c0:	00 00 fa    	lnk       #0x0

000024c2 <.LSM71>:
    __serviceTxInterrupt(&uart4);
    24c2:	a0 90 20    	mov.w     #0x90a, w0
    24c4:	c1 fe 07    	rcall     0x2248 <___serviceTxInterrupt>

000024c6 <.LSM72>:
}
    24c6:	00 80 fa    	ulnk      
    24c8:	34 00 f9    	pop       0x34
    24ca:	32 00 f9    	pop       0x32
    24cc:	4f 03 be    	mov.d     [--w15], w6
    24ce:	4f 02 be    	mov.d     [--w15], w4
    24d0:	4f 01 be    	mov.d     [--w15], w2
    24d2:	4f 00 be    	mov.d     [--w15], w0
    24d4:	36 00 f9    	pop       0x36
    24d6:	00 40 06    	retfie    

000024d8 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    24d8:	36 00 f8    	push      0x36
    24da:	80 9f be    	mov.d     w0, [w15++]
    24dc:	82 9f be    	mov.d     w2, [w15++]
    24de:	84 9f be    	mov.d     w4, [w15++]
    24e0:	86 9f be    	mov.d     w6, [w15++]
    24e2:	32 00 f8    	push      0x32
    24e4:	34 00 f8    	push      0x34
    24e6:	10 00 20    	mov.w     #0x1, w0
    24e8:	a0 01 88    	mov.w     w0, 0x34
    24ea:	00 20 20    	mov.w     #0x200, w0
    24ec:	90 01 88    	mov.w     w0, 0x32
    24ee:	00 00 fa    	lnk       #0x0

000024f0 <.LSM74>:
    __serviceRxInterrupt(&uart4);
    24f0:	a0 90 20    	mov.w     #0x90a, w0
    24f2:	15 ff 07    	rcall     0x231e <___serviceRxInterrupt>

000024f4 <.LSM75>:
}
    24f4:	00 80 fa    	ulnk      
    24f6:	34 00 f9    	pop       0x34
    24f8:	32 00 f9    	pop       0x32
    24fa:	4f 03 be    	mov.d     [--w15], w6
    24fc:	4f 02 be    	mov.d     [--w15], w4
    24fe:	4f 01 be    	mov.d     [--w15], w2
    2500:	4f 00 be    	mov.d     [--w15], w0
    2502:	36 00 f9    	pop       0x36
    2504:	00 40 06    	retfie    

00002506 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2506:	08 00 fa    	lnk       #0x8
    2508:	10 07 98    	mov.w     w0, [w14+2]
    250a:	21 07 98    	mov.w     w1, [w14+4]
    250c:	32 07 98    	mov.w     w2, [w14+6]

0000250e <.LSM77>:
    int16_t i;

    switch (handle) {
    250e:	1e 00 90    	mov.w     [w14+2], w0
    2510:	00 00 e0    	cp0.w     w0
    2512:	25 00 35    	bra       LT, 0x255e <.L37>
    2514:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2516:	03 00 34    	bra       LE, 0x251e <.L30>
    2518:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    251a:	11 00 32    	bra       Z, 0x253e <.L31>

0000251c <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    251c:	21 00 37    	bra       0x2560 <.L34>

0000251e <.L30>:
    251e:	00 00 eb    	clr.w     w0
    2520:	00 0f 78    	mov.w     w0, [w14]
    2522:	08 00 37    	bra       0x2534 <.L32>

00002524 <.L33>:
    2524:	2e 00 90    	mov.w     [w14+4], w0
    2526:	90 40 78    	mov.b     [w0], w1
    2528:	2e 00 90    	mov.w     [w14+4], w0
    252a:	00 00 e8    	inc.w     w0, w0
    252c:	20 07 98    	mov.w     w0, [w14+4]
    252e:	90 42 80    	mov.w     0x852, w0
    2530:	7b 04 07    	rcall     0x2e28 <_uart_putc>

00002532 <.LSM81>:
    2532:	1e 0f e8    	inc.w     [w14], [w14]

00002534 <.L32>:
    2534:	9e 00 78    	mov.w     [w14], w1
    2536:	3e 00 90    	mov.w     [w14+6], w0
    2538:	80 8f 50    	sub.w     w1, w0, [w15]
    253a:	f4 ff 39    	bra       NC, 0x2524 <.L33>

0000253c <.LSM82>:
    253c:	11 00 37    	bra       0x2560 <.L34>

0000253e <.L31>:
    253e:	00 00 eb    	clr.w     w0
    2540:	00 0f 78    	mov.w     w0, [w14]
    2542:	08 00 37    	bra       0x2554 <.L35>

00002544 <.L36>:
    2544:	2e 00 90    	mov.w     [w14+4], w0
    2546:	90 40 78    	mov.b     [w0], w1
    2548:	2e 00 90    	mov.w     [w14+4], w0
    254a:	00 00 e8    	inc.w     w0, w0
    254c:	20 07 98    	mov.w     w0, [w14+4]
    254e:	a0 42 80    	mov.w     0x854, w0
    2550:	6b 04 07    	rcall     0x2e28 <_uart_putc>

00002552 <.LSM85>:
    2552:	1e 0f e8    	inc.w     [w14], [w14]

00002554 <.L35>:
    2554:	9e 00 78    	mov.w     [w14], w1
    2556:	3e 00 90    	mov.w     [w14+6], w0
    2558:	80 8f 50    	sub.w     w1, w0, [w15]
    255a:	f4 ff 39    	bra       NC, 0x2544 <.L36>

0000255c <.LSM86>:
    255c:	01 00 37    	bra       0x2560 <.L34>

0000255e <.L37>:
    255e:	00 00 00    	nop       

00002560 <.L34>:
    }
    return len;
    2560:	3e 00 90    	mov.w     [w14+6], w0

00002562 <.LSM89>:
}
    2562:	00 80 fa    	ulnk      
    2564:	00 00 06    	return    

00002566 <_init_uart>:

void init_uart(void) {
    2566:	00 00 fa    	lnk       #0x0

00002568 <.LSM91>:
    init_pin();
    2568:	7f 0c 07    	rcall     0x3e68 <_init_pin>

0000256a <.LSM92>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    256a:	40 6d 20    	mov.w     #0x6d4, w0
    256c:	80 1f 78    	mov.w     w0, [w15++]
    256e:	57 01 20    	mov.w     #0x15, w7
    2570:	86 c0 b3    	mov.b     #0x8, w6
    2572:	80 82 eb    	setm.w    w5
    2574:	64 c0 b3    	mov.b     #0x6, w4
    2576:	80 01 eb    	clr.w     w3
    2578:	02 2f 20    	mov.w     #0x2f0, w2
    257a:	21 2f 20    	mov.w     #0x2f2, w1
    257c:	60 94 20    	mov.w     #0x946, w0
    257e:	88 0d 07    	rcall     0x4090 <_pin_init>
    2580:	8f 87 e9    	dec2.w    w15, w15

00002582 <.LSM93>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2582:	a0 6d 20    	mov.w     #0x6da, w0
    2584:	80 1f 78    	mov.w     w0, [w15++]
    2586:	a7 01 20    	mov.w     #0x1a, w7
    2588:	00 43 eb    	clr.b     w6
    258a:	80 82 eb    	setm.w    w5
    258c:	74 c0 b3    	mov.b     #0x7, w4
    258e:	80 01 eb    	clr.w     w3
    2590:	02 2f 20    	mov.w     #0x2f0, w2
    2592:	21 2f 20    	mov.w     #0x2f2, w1
    2594:	c0 95 20    	mov.w     #0x95c, w0
    2596:	7c 0d 07    	rcall     0x4090 <_pin_init>
    2598:	8f 87 e9    	dec2.w    w15, w15

0000259a <.LSM94>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    pin_init(&TX2, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    259a:	60 6c 20    	mov.w     #0x6c6, w0
    259c:	80 1f 78    	mov.w     w0, [w15++]
    259e:	77 00 20    	mov.w     #0x7, w7
    25a0:	86 c0 b3    	mov.b     #0x8, w6
    25a2:	75 00 20    	mov.w     #0x7, w5
    25a4:	74 c0 b3    	mov.b     #0x7, w4
    25a6:	23 4e 20    	mov.w     #0x4e2, w3
    25a8:	82 2c 20    	mov.w     #0x2c8, w2
    25aa:	a1 2c 20    	mov.w     #0x2ca, w1
    25ac:	20 97 20    	mov.w     #0x972, w0
    25ae:	70 0d 07    	rcall     0x4090 <_pin_init>
    25b0:	8f 87 e9    	dec2.w    w15, w15

000025b2 <.LSM95>:
             (uint16_t *)&ANSB, 7, 7, 8, 7, (uint16_t *)&RPOR3);
    pin_init(&RX2, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    25b2:	60 6c 20    	mov.w     #0x6c6, w0
    25b4:	80 1f 78    	mov.w     w0, [w15++]
    25b6:	67 00 20    	mov.w     #0x6, w7
    25b8:	00 43 eb    	clr.b     w6
    25ba:	65 00 20    	mov.w     #0x6, w5
    25bc:	64 c0 b3    	mov.b     #0x6, w4
    25be:	23 4e 20    	mov.w     #0x4e2, w3
    25c0:	82 2c 20    	mov.w     #0x2c8, w2
    25c2:	a1 2c 20    	mov.w     #0x2ca, w1
    25c4:	80 98 20    	mov.w     #0x988, w0
    25c6:	64 0d 07    	rcall     0x4090 <_pin_init>
    25c8:	8f 87 e9    	dec2.w    w15, w15

000025ca <.LSM96>:
             (uint16_t *)&ANSB, 6, 6, 0, 6, (uint16_t *)&RPOR3);
    pin_init(&RTS2, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    25ca:	a0 6d 20    	mov.w     #0x6da, w0
    25cc:	80 1f 78    	mov.w     w0, [w15++]
    25ce:	b7 01 20    	mov.w     #0x1b, w7
    25d0:	86 c0 b3    	mov.b     #0x8, w6
    25d2:	80 82 eb    	setm.w    w5
    25d4:	94 c0 b3    	mov.b     #0x9, w4
    25d6:	80 01 eb    	clr.w     w3
    25d8:	02 2f 20    	mov.w     #0x2f0, w2
    25da:	21 2f 20    	mov.w     #0x2f2, w1
    25dc:	e0 99 20    	mov.w     #0x99e, w0
    25de:	58 0d 07    	rcall     0x4090 <_pin_init>
    25e0:	8f 87 e9    	dec2.w    w15, w15

000025e2 <.LSM97>:
             (uint16_t *)NULL, 9, -1, 8, 27, (uint16_t *)&RPOR13);
    pin_init(&CTS2, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    25e2:	20 6d 20    	mov.w     #0x6d2, w0
    25e4:	80 1f 78    	mov.w     w0, [w15++]
    25e6:	37 01 20    	mov.w     #0x13, w7
    25e8:	86 c0 b3    	mov.b     #0x8, w6
    25ea:	80 82 eb    	setm.w    w5
    25ec:	84 c0 b3    	mov.b     #0x8, w4
    25ee:	80 01 eb    	clr.w     w3
    25f0:	02 2f 20    	mov.w     #0x2f0, w2
    25f2:	21 2f 20    	mov.w     #0x2f2, w1
    25f4:	40 9b 20    	mov.w     #0x9b4, w0
    25f6:	4c 0d 07    	rcall     0x4090 <_pin_init>
    25f8:	8f 87 e9    	dec2.w    w15, w15

000025fa <.LSM98>:
             (uint16_t *)NULL, 8, -1, 8, 19, (uint16_t *)&RPOR9);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    25fa:	40 00 20    	mov.w     #0x4, w0
    25fc:	80 1f 78    	mov.w     w0, [w15++]
    25fe:	30 00 20    	mov.w     #0x3, w0
    2600:	80 1f 78    	mov.w     w0, [w15++]
    2602:	80 c0 b3    	mov.b     #0x8, w0
    2604:	80 1f 78    	mov.w     w0, [w15++]
    2606:	00 40 eb    	clr.b     w0
    2608:	80 1f 78    	mov.w     w0, [w15++]
    260a:	40 6a 20    	mov.w     #0x6a4, w0
    260c:	80 1f 78    	mov.w     w0, [w15++]
    260e:	40 6a 20    	mov.w     #0x6a4, w0
    2610:	80 1f 78    	mov.w     w0, [w15++]
    2612:	b0 c0 b3    	mov.b     #0xb, w0
    2614:	80 1f 78    	mov.w     w0, [w15++]
    2616:	c0 c0 b3    	mov.b     #0xc, w0
    2618:	80 1f 78    	mov.w     w0, [w15++]
    261a:	47 09 20    	mov.w     #0x94, w7
    261c:	46 08 20    	mov.w     #0x84, w6
    261e:	85 22 20    	mov.w     #0x228, w5
    2620:	64 22 20    	mov.w     #0x226, w4
    2622:	43 22 20    	mov.w     #0x224, w3
    2624:	22 22 20    	mov.w     #0x222, w2
    2626:	01 22 20    	mov.w     #0x220, w1
    2628:	60 85 20    	mov.w     #0x856, w0
    262a:	6b 00 07    	rcall     0x2702 <_uart_init>
    262c:	f0 87 57    	sub.w     w15, #0x10, w15

0000262e <.LSM99>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    262e:	60 00 20    	mov.w     #0x6, w0
    2630:	80 1f 78    	mov.w     w0, [w15++]
    2632:	50 00 20    	mov.w     #0x5, w0
    2634:	80 1f 78    	mov.w     w0, [w15++]
    2636:	80 c0 b3    	mov.b     #0x8, w0
    2638:	80 1f 78    	mov.w     w0, [w15++]
    263a:	00 40 eb    	clr.b     w0
    263c:	80 1f 78    	mov.w     w0, [w15++]
    263e:	60 6a 20    	mov.w     #0x6a6, w0
    2640:	80 1f 78    	mov.w     w0, [w15++]
    2642:	60 6a 20    	mov.w     #0x6a6, w0
    2644:	80 1f 78    	mov.w     w0, [w15++]
    2646:	e0 c0 b3    	mov.b     #0xe, w0
    2648:	80 1f 78    	mov.w     w0, [w15++]
    264a:	f0 c0 b3    	mov.b     #0xf, w0
    264c:	80 1f 78    	mov.w     w0, [w15++]
    264e:	67 09 20    	mov.w     #0x96, w7
    2650:	66 08 20    	mov.w     #0x86, w6
    2652:	85 23 20    	mov.w     #0x238, w5
    2654:	64 23 20    	mov.w     #0x236, w4
    2656:	43 23 20    	mov.w     #0x234, w3
    2658:	22 23 20    	mov.w     #0x232, w2
    265a:	01 23 20    	mov.w     #0x230, w1
    265c:	20 89 20    	mov.w     #0x892, w0
    265e:	51 00 07    	rcall     0x2702 <_uart_init>
    2660:	f0 87 57    	sub.w     w15, #0x10, w15

00002662 <.LSM100>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    2662:	d0 01 20    	mov.w     #0x1d, w0
    2664:	80 1f 78    	mov.w     w0, [w15++]
    2666:	c0 01 20    	mov.w     #0x1c, w0
    2668:	80 1f 78    	mov.w     w0, [w15++]
    266a:	80 c0 b3    	mov.b     #0x8, w0
    266c:	80 1f 78    	mov.w     w0, [w15++]
    266e:	80 c0 b3    	mov.b     #0x8, w0
    2670:	80 1f 78    	mov.w     w0, [w15++]
    2672:	a0 6a 20    	mov.w     #0x6aa, w0
    2674:	80 1f 78    	mov.w     w0, [w15++]
    2676:	20 6a 20    	mov.w     #0x6a2, w0
    2678:	80 1f 78    	mov.w     w0, [w15++]
    267a:	20 c0 b3    	mov.b     #0x2, w0
    267c:	80 1f 78    	mov.w     w0, [w15++]
    267e:	30 c0 b3    	mov.b     #0x3, w0
    2680:	80 1f 78    	mov.w     w0, [w15++]
    2682:	e7 09 20    	mov.w     #0x9e, w7
    2684:	e6 08 20    	mov.w     #0x8e, w6
    2686:	85 25 20    	mov.w     #0x258, w5
    2688:	64 25 20    	mov.w     #0x256, w4
    268a:	43 25 20    	mov.w     #0x254, w3
    268c:	22 25 20    	mov.w     #0x252, w2
    268e:	01 25 20    	mov.w     #0x250, w1
    2690:	e0 8c 20    	mov.w     #0x8ce, w0
    2692:	37 00 07    	rcall     0x2702 <_uart_init>
    2694:	f0 87 57    	sub.w     w15, #0x10, w15

00002696 <.LSM101>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    2696:	f0 01 20    	mov.w     #0x1f, w0
    2698:	80 1f 78    	mov.w     w0, [w15++]
    269a:	e0 01 20    	mov.w     #0x1e, w0
    269c:	80 1f 78    	mov.w     w0, [w15++]
    269e:	80 c0 b3    	mov.b     #0x8, w0
    26a0:	80 1f 78    	mov.w     w0, [w15++]
    26a2:	00 40 eb    	clr.b     w0
    26a4:	80 1f 78    	mov.w     w0, [w15++]
    26a6:	60 6b 20    	mov.w     #0x6b6, w0
    26a8:	80 1f 78    	mov.w     w0, [w15++]
    26aa:	60 6b 20    	mov.w     #0x6b6, w0
    26ac:	80 1f 78    	mov.w     w0, [w15++]
    26ae:	80 c0 b3    	mov.b     #0x8, w0
    26b0:	80 1f 78    	mov.w     w0, [w15++]
    26b2:	90 c0 b3    	mov.b     #0x9, w0
    26b4:	80 1f 78    	mov.w     w0, [w15++]
    26b6:	e7 09 20    	mov.w     #0x9e, w7
    26b8:	e6 08 20    	mov.w     #0x8e, w6
    26ba:	85 2b 20    	mov.w     #0x2b8, w5
    26bc:	64 2b 20    	mov.w     #0x2b6, w4
    26be:	43 2b 20    	mov.w     #0x2b4, w3
    26c0:	22 2b 20    	mov.w     #0x2b2, w2
    26c2:	01 2b 20    	mov.w     #0x2b0, w1
    26c4:	a0 90 20    	mov.w     #0x90a, w0
    26c6:	1d 00 07    	rcall     0x2702 <_uart_init>
    26c8:	f0 87 57    	sub.w     w15, #0x10, w15

000026ca <.LSM102>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart2, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    26ca:	00 40 20    	mov.w     #0x400, w0
    26cc:	80 1f 78    	mov.w     w0, [w15++]
    26ce:	a0 dc 20    	mov.w     #0xdca, w0
    26d0:	80 1f 78    	mov.w     w0, [w15++]
    26d2:	00 40 20    	mov.w     #0x400, w0
    26d4:	80 1f 78    	mov.w     w0, [w15++]
    26d6:	a0 9c 20    	mov.w     #0x9ca, w0
    26d8:	80 1f 78    	mov.w     w0, [w15++]
    26da:	00 00 eb    	clr.w     w0
    26dc:	80 1f 78    	mov.w     w0, [w15++]
    26de:	10 00 20    	mov.w     #0x1, w0
    26e0:	80 1f 78    	mov.w     w0, [w15++]
    26e2:	e5 c4 b3    	mov.b     #0x4e, w5
    26e4:	06 00 20    	mov.w     #0x0, w6
    26e6:	67 69 24    	mov.w     #0x4696, w7
    26e8:	00 02 eb    	clr.w     w4
    26ea:	80 01 eb    	clr.w     w3
    26ec:	c2 95 20    	mov.w     #0x95c, w2
    26ee:	61 94 20    	mov.w     #0x946, w1
    26f0:	20 89 20    	mov.w     #0x892, w0
    26f2:	72 00 07    	rcall     0x27d8 <_uart_open>
    26f4:	ec 87 57    	sub.w     w15, #0xc, w15

000026f6 <.LSM103>:
              0, HWTXBUF, 1024, HWRXBUF, 1024);

    _stdout = &uart2;
    26f6:	20 89 20    	mov.w     #0x892, w0
    26f8:	90 42 88    	mov.w     w0, 0x852

000026fa <.LSM104>:
    _stderr = &uart2;
    26fa:	20 89 20    	mov.w     #0x892, w0
    26fc:	a0 42 88    	mov.w     w0, 0x854

000026fe <.LSM105>:
}
    26fe:	00 80 fa    	ulnk      
    2700:	00 00 06    	return    

00002702 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2702:	10 00 fa    	lnk       #0x10
    2704:	00 0f 78    	mov.w     w0, [w14]
    2706:	11 07 98    	mov.w     w1, [w14+2]
    2708:	22 07 98    	mov.w     w2, [w14+4]
    270a:	33 07 98    	mov.w     w3, [w14+6]
    270c:	44 07 98    	mov.w     w4, [w14+8]
    270e:	55 07 98    	mov.w     w5, [w14+10]
    2710:	66 07 98    	mov.w     w6, [w14+12]
    2712:	77 07 98    	mov.w     w7, [w14+14]

00002714 <.LSM107>:
    self->UxMODE = UxMODE;
    2714:	1e 00 78    	mov.w     [w14], w0
    2716:	9e 00 90    	mov.w     [w14+2], w1
    2718:	01 08 78    	mov.w     w1, [w0]

0000271a <.LSM108>:
    self->UxSTA = UxSTA;
    271a:	1e 00 78    	mov.w     [w14], w0
    271c:	ae 00 90    	mov.w     [w14+4], w1
    271e:	11 00 98    	mov.w     w1, [w0+2]

00002720 <.LSM109>:
    self->UxTXREG = UxTXREG;
    2720:	1e 00 78    	mov.w     [w14], w0
    2722:	be 00 90    	mov.w     [w14+6], w1
    2724:	21 00 98    	mov.w     w1, [w0+4]

00002726 <.LSM110>:
    self->UxRXREG = UxRXREG;
    2726:	1e 00 78    	mov.w     [w14], w0
    2728:	ce 00 90    	mov.w     [w14+8], w1
    272a:	31 00 98    	mov.w     w1, [w0+6]

0000272c <.LSM111>:
    self->UxBRG = UxBRG;
    272c:	1e 00 78    	mov.w     [w14], w0
    272e:	de 00 90    	mov.w     [w14+10], w1
    2730:	41 00 98    	mov.w     w1, [w0+8]

00002732 <.LSM112>:
    self->IFSy = IFSy;
    2732:	1e 00 78    	mov.w     [w14], w0
    2734:	ee 00 90    	mov.w     [w14+12], w1
    2736:	51 00 98    	mov.w     w1, [w0+10]

00002738 <.LSM113>:
    self->IECy = IECy;
    2738:	1e 00 78    	mov.w     [w14], w0
    273a:	fe 00 90    	mov.w     [w14+14], w1
    273c:	61 00 98    	mov.w     w1, [w0+12]

0000273e <.LSM114>:
    self->UxTXIF = UxTXIF;
    273e:	1e 00 78    	mov.w     [w14], w0
    2740:	8e f8 97    	mov.b     [w14-8], w1
    2742:	61 48 98    	mov.b     w1, [w0+14]

00002744 <.LSM115>:
    self->UxRXIF = UxRXIF;
    2744:	1e 00 78    	mov.w     [w14], w0
    2746:	ee f0 97    	mov.b     [w14-10], w1
    2748:	71 48 98    	mov.b     w1, [w0+15]

0000274a <.LSM116>:
    self->RXrpinr = RXrpinr;
    274a:	1e 00 78    	mov.w     [w14], w0
    274c:	ae b8 97    	mov.w     [w14-12], w1
    274e:	01 08 98    	mov.w     w1, [w0+16]

00002750 <.LSM117>:
    self->CTSrpinr = CTSrpinr;
    2750:	1e 00 78    	mov.w     [w14], w0
    2752:	9e b8 97    	mov.w     [w14-14], w1
    2754:	11 08 98    	mov.w     w1, [w0+18]

00002756 <.LSM118>:
    self->RXrpshift = RXrpshift;
    2756:	1e 00 78    	mov.w     [w14], w0
    2758:	8e f0 97    	mov.b     [w14-16], w1
    275a:	41 50 98    	mov.b     w1, [w0+20]

0000275c <.LSM119>:
    self->CTSrpshift = CTSrpshift;
    275c:	1e 00 78    	mov.w     [w14], w0
    275e:	ee e8 97    	mov.b     [w14-18], w1
    2760:	51 50 98    	mov.b     w1, [w0+21]

00002762 <.LSM120>:
    self->TXrpnum = TXrpnum;
    2762:	1e 00 78    	mov.w     [w14], w0
    2764:	ee b0 97    	mov.w     [w14-20], w1
    2766:	31 08 98    	mov.w     w1, [w0+22]

00002768 <.LSM121>:
    self->RTSrpnum = RTSrpnum;
    2768:	1e 00 78    	mov.w     [w14], w0
    276a:	de b0 97    	mov.w     [w14-22], w1
    276c:	41 08 98    	mov.w     w1, [w0+24]

0000276e <.LSM122>:
    self->TX = NULL;
    276e:	1e 00 78    	mov.w     [w14], w0
    2770:	80 00 eb    	clr.w     w1
    2772:	51 08 98    	mov.w     w1, [w0+26]

00002774 <.LSM123>:
    self->RX = NULL;
    2774:	1e 00 78    	mov.w     [w14], w0
    2776:	80 00 eb    	clr.w     w1
    2778:	61 08 98    	mov.w     w1, [w0+28]

0000277a <.LSM124>:
    self->RTS = NULL;
    277a:	1e 00 78    	mov.w     [w14], w0
    277c:	80 00 eb    	clr.w     w1
    277e:	71 08 98    	mov.w     w1, [w0+30]

00002780 <.LSM125>:
    self->CTS = NULL;
    2780:	1e 00 78    	mov.w     [w14], w0
    2782:	80 00 eb    	clr.w     w1
    2784:	01 10 98    	mov.w     w1, [w0+32]

00002786 <.LSM126>:
    self->TXbuffer.data = NULL;
    2786:	1e 00 78    	mov.w     [w14], w0
    2788:	80 00 eb    	clr.w     w1
    278a:	11 10 98    	mov.w     w1, [w0+34]

0000278c <.LSM127>:
    self->TXbuffer.length = 0;
    278c:	1e 00 78    	mov.w     [w14], w0
    278e:	80 00 eb    	clr.w     w1
    2790:	21 10 98    	mov.w     w1, [w0+36]

00002792 <.LSM128>:
    self->TXbuffer.head = 0;
    2792:	1e 00 78    	mov.w     [w14], w0
    2794:	80 00 eb    	clr.w     w1
    2796:	31 10 98    	mov.w     w1, [w0+38]

00002798 <.LSM129>:
    self->TXbuffer.tail = 0;
    2798:	1e 00 78    	mov.w     [w14], w0
    279a:	80 00 eb    	clr.w     w1
    279c:	41 10 98    	mov.w     w1, [w0+40]

0000279e <.LSM130>:
    self->TXbuffer.count = 0;
    279e:	1e 00 78    	mov.w     [w14], w0
    27a0:	80 00 eb    	clr.w     w1
    27a2:	51 10 98    	mov.w     w1, [w0+42]

000027a4 <.LSM131>:
    self->RXbuffer.data = NULL;
    27a4:	1e 00 78    	mov.w     [w14], w0
    27a6:	80 00 eb    	clr.w     w1
    27a8:	61 10 98    	mov.w     w1, [w0+44]

000027aa <.LSM132>:
    self->RXbuffer.length = 0;
    27aa:	1e 00 78    	mov.w     [w14], w0
    27ac:	80 00 eb    	clr.w     w1
    27ae:	71 10 98    	mov.w     w1, [w0+46]

000027b0 <.LSM133>:
    self->RXbuffer.head = 0;
    27b0:	1e 00 78    	mov.w     [w14], w0
    27b2:	80 00 eb    	clr.w     w1
    27b4:	01 18 98    	mov.w     w1, [w0+48]

000027b6 <.LSM134>:
    self->RXbuffer.tail = 0;
    27b6:	1e 00 78    	mov.w     [w14], w0
    27b8:	80 00 eb    	clr.w     w1
    27ba:	11 18 98    	mov.w     w1, [w0+50]

000027bc <.LSM135>:
    self->RXbuffer.count = 0;
    27bc:	1e 00 78    	mov.w     [w14], w0
    27be:	80 00 eb    	clr.w     w1
    27c0:	21 18 98    	mov.w     w1, [w0+52]

000027c2 <.LSM136>:
    self->TXthreshold = 1;
    27c2:	1e 00 78    	mov.w     [w14], w0
    27c4:	11 00 20    	mov.w     #0x1, w1
    27c6:	31 18 98    	mov.w     w1, [w0+54]

000027c8 <.LSM137>:
    self->putc = NULL;
    27c8:	1e 00 78    	mov.w     [w14], w0
    27ca:	80 00 eb    	clr.w     w1
    27cc:	41 18 98    	mov.w     w1, [w0+56]

000027ce <.LSM138>:
    self->getc = NULL;
    27ce:	1e 00 78    	mov.w     [w14], w0
    27d0:	80 00 eb    	clr.w     w1
    27d2:	51 18 98    	mov.w     w1, [w0+58]

000027d4 <.LSM139>:
}
    27d4:	00 80 fa    	ulnk      
    27d6:	00 00 06    	return    

000027d8 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    27d8:	10 00 fa    	lnk       #0x10
    27da:	88 1f 78    	mov.w     w8, [w15++]
    27dc:	00 0f 78    	mov.w     w0, [w14]
    27de:	11 07 98    	mov.w     w1, [w14+2]
    27e0:	22 07 98    	mov.w     w2, [w14+4]
    27e2:	33 07 98    	mov.w     w3, [w14+6]
    27e4:	44 07 98    	mov.w     w4, [w14+8]
    27e6:	56 07 98    	mov.w     w6, [w14+10]
    27e8:	67 07 98    	mov.w     w7, [w14+12]
    27ea:	65 4f 98    	mov.b     w5, [w14+14]

000027ec <.LSM141>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    27ec:	1e 00 78    	mov.w     [w14], w0
    27ee:	10 00 78    	mov.w     [w0], w0
    27f0:	80 00 eb    	clr.w     w1
    27f2:	01 08 78    	mov.w     w1, [w0]

000027f4 <.LSM142>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    27f4:	1e 00 90    	mov.w     [w14+2], w0
    27f6:	60 00 90    	mov.w     [w0+12], w0
    27f8:	e1 0f 40    	add.w     w0, #0x1, [w15]
    27fa:	0e 02 32    	bra       Z, 0x2c18 <.L73>
    27fc:	2e 00 90    	mov.w     [w14+4], w0
    27fe:	60 00 90    	mov.w     [w0+12], w0
    2800:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2802:	0c 02 32    	bra       Z, 0x2c1c <.L74>

00002804 <.LSM143>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    2804:	1e 00 90    	mov.w     [w14+2], w0
    2806:	00 08 90    	mov.w     [w0+16], w0
    2808:	00 00 e0    	cp0.w     w0
    280a:	69 00 3a    	bra       NZ, 0x28de <.L44>
    280c:	2e 00 90    	mov.w     [w14+4], w0
    280e:	00 08 90    	mov.w     [w0+16], w0
    2810:	00 00 e0    	cp0.w     w0
    2812:	65 00 3a    	bra       NZ, 0x28de <.L44>

00002814 <.LSM144>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    2814:	1e 00 90    	mov.w     [w14+2], w0
    2816:	8f 0c 07    	rcall     0x4136 <_pin_digitalOut>

00002818 <.LSM145>:
        pin_set(TX);
    2818:	1e 00 90    	mov.w     [w14+2], w0
    281a:	ea 0c 07    	rcall     0x41f0 <_pin_set>

0000281c <.LSM146>:
        pin_digitalIn(RX);
    281c:	2e 00 90    	mov.w     [w14+4], w0
    281e:	64 0c 07    	rcall     0x40e8 <_pin_digitalIn>

00002820 <.LSM147>:
        self->TX = TX;
    2820:	1e 00 78    	mov.w     [w14], w0
    2822:	9e 00 90    	mov.w     [w14+2], w1
    2824:	51 08 98    	mov.w     w1, [w0+26]

00002826 <.LSM148>:
        TX->owner = (void *)self;
    2826:	1e 00 90    	mov.w     [w14+2], w0
    2828:	9e 00 78    	mov.w     [w14], w1
    282a:	01 08 98    	mov.w     w1, [w0+16]

0000282c <.LSM149>:
        TX->write = NULL;
    282c:	1e 00 90    	mov.w     [w14+2], w0
    282e:	80 00 eb    	clr.w     w1
    2830:	11 08 98    	mov.w     w1, [w0+18]

00002832 <.LSM150>:
        TX->read = NULL;
    2832:	1e 00 90    	mov.w     [w14+2], w0
    2834:	80 00 eb    	clr.w     w1
    2836:	21 08 98    	mov.w     w1, [w0+20]

00002838 <.LSM151>:
        self->RX = RX;
    2838:	1e 00 78    	mov.w     [w14], w0
    283a:	ae 00 90    	mov.w     [w14+4], w1
    283c:	61 08 98    	mov.w     w1, [w0+28]

0000283e <.LSM152>:
        RX->owner = (void *)self;
    283e:	2e 00 90    	mov.w     [w14+4], w0
    2840:	9e 00 78    	mov.w     [w14], w1
    2842:	01 08 98    	mov.w     w1, [w0+16]

00002844 <.LSM153>:
        RX->write = NULL;
    2844:	2e 00 90    	mov.w     [w14+4], w0
    2846:	80 00 eb    	clr.w     w1
    2848:	11 08 98    	mov.w     w1, [w0+18]

0000284a <.LSM154>:
        RX->read = NULL;
    284a:	2e 00 90    	mov.w     [w14+4], w0
    284c:	80 00 eb    	clr.w     w1
    284e:	21 08 98    	mov.w     w1, [w0+20]

00002850 <.LSM155>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2850:	11 3a 80    	mov.w     0x742, w1
    2852:	f0 0b 20    	mov.w     #0xbf, w0
    2854:	00 81 60    	and.w     w1, w0, w2
    2856:	60 04 20    	mov.w     #0x46, w0
    2858:	71 05 20    	mov.w     #0x57, w1
    285a:	23 74 20    	mov.w     #0x742, w3
    285c:	80 49 78    	mov.b     w0, [w3]
    285e:	81 49 78    	mov.b     w1, [w3]
    2860:	82 49 78    	mov.b     w2, [w3]

00002862 <.LSM156>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    2862:	1e 00 90    	mov.w     [w14+2], w0
    2864:	70 00 90    	mov.w     [w0+14], w0
    2866:	9e 00 90    	mov.w     [w14+2], w1
    2868:	f1 00 90    	mov.w     [w1+14], w1
    286a:	11 01 78    	mov.w     [w1], w2
    286c:	9e 00 90    	mov.w     [w14+2], w1
    286e:	a1 48 90    	mov.b     [w1+10], w1
    2870:	81 80 fb    	ze        w1, w1
    2872:	f3 03 20    	mov.w     #0x3f, w3
    2874:	81 18 dd    	sl.w      w3, w1, w1
    2876:	81 80 ea    	com.w     w1, w1
    2878:	81 00 61    	and.w     w2, w1, w1
    287a:	01 08 78    	mov.w     w1, [w0]

0000287c <.LSM157>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    287c:	1e 00 90    	mov.w     [w14+2], w0
    287e:	70 00 90    	mov.w     [w0+14], w0
    2880:	9e 00 90    	mov.w     [w14+2], w1
    2882:	f1 00 90    	mov.w     [w1+14], w1
    2884:	11 01 78    	mov.w     [w1], w2
    2886:	9e 00 78    	mov.w     [w14], w1
    2888:	b1 09 90    	mov.w     [w1+22], w3
    288a:	9e 00 90    	mov.w     [w14+2], w1
    288c:	a1 48 90    	mov.b     [w1+10], w1
    288e:	81 80 fb    	ze        w1, w1
    2890:	81 18 dd    	sl.w      w3, w1, w1
    2892:	82 80 70    	ior.w     w1, w2, w1
    2894:	01 08 78    	mov.w     w1, [w0]

00002896 <.LSM158>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    2896:	1e 00 78    	mov.w     [w14], w0
    2898:	00 08 90    	mov.w     [w0+16], w0
    289a:	9e 00 78    	mov.w     [w14], w1
    289c:	81 08 90    	mov.w     [w1+16], w1
    289e:	11 01 78    	mov.w     [w1], w2
    28a0:	9e 00 78    	mov.w     [w14], w1
    28a2:	c1 50 90    	mov.b     [w1+20], w1
    28a4:	81 80 fb    	ze        w1, w1
    28a6:	f3 03 20    	mov.w     #0x3f, w3
    28a8:	81 18 dd    	sl.w      w3, w1, w1
    28aa:	81 80 ea    	com.w     w1, w1
    28ac:	81 00 61    	and.w     w2, w1, w1
    28ae:	01 08 78    	mov.w     w1, [w0]

000028b0 <.LSM159>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    28b0:	1e 00 78    	mov.w     [w14], w0
    28b2:	00 08 90    	mov.w     [w0+16], w0
    28b4:	9e 00 78    	mov.w     [w14], w1
    28b6:	81 08 90    	mov.w     [w1+16], w1
    28b8:	11 01 78    	mov.w     [w1], w2
    28ba:	ae 00 90    	mov.w     [w14+4], w1
    28bc:	e1 01 90    	mov.w     [w1+12], w3
    28be:	9e 00 78    	mov.w     [w14], w1
    28c0:	c1 50 90    	mov.b     [w1+20], w1
    28c2:	81 80 fb    	ze        w1, w1
    28c4:	81 18 dd    	sl.w      w3, w1, w1
    28c6:	82 80 70    	ior.w     w1, w2, w1
    28c8:	01 08 78    	mov.w     w1, [w0]

000028ca <.LSM160>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    28ca:	11 3a 80    	mov.w     0x742, w1
    28cc:	00 04 20    	mov.w     #0x40, w0
    28ce:	01 01 70    	ior.w     w0, w1, w2
    28d0:	60 04 20    	mov.w     #0x46, w0
    28d2:	71 05 20    	mov.w     #0x57, w1
    28d4:	23 74 20    	mov.w     #0x742, w3
    28d6:	80 49 78    	mov.b     w0, [w3]
    28d8:	81 49 78    	mov.b     w1, [w3]
    28da:	82 49 78    	mov.b     w2, [w3]
    28dc:	0a 00 37    	bra       0x28f2 <.L45>

000028de <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    28de:	1e 00 78    	mov.w     [w14], w0
    28e0:	d0 08 90    	mov.w     [w0+26], w1
    28e2:	1e 00 90    	mov.w     [w14+2], w0
    28e4:	80 8f 50    	sub.w     w1, w0, [w15]
    28e6:	9c 01 3a    	bra       NZ, 0x2c20 <.L75>
    28e8:	1e 00 78    	mov.w     [w14], w0
    28ea:	e0 08 90    	mov.w     [w0+28], w1
    28ec:	2e 00 90    	mov.w     [w14+4], w0
    28ee:	80 8f 50    	sub.w     w1, w0, [w15]
    28f0:	99 01 3a    	bra       NZ, 0x2c24 <.L76>

000028f2 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    28f2:	3e 00 90    	mov.w     [w14+6], w0
    28f4:	00 00 e0    	cp0.w     w0
    28f6:	87 00 32    	bra       Z, 0x2a06 <.L47>
    28f8:	4e 00 90    	mov.w     [w14+8], w0
    28fa:	00 00 e0    	cp0.w     w0
    28fc:	84 00 32    	bra       Z, 0x2a06 <.L47>

000028fe <.LSM163>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    28fe:	3e 00 90    	mov.w     [w14+6], w0
    2900:	60 00 90    	mov.w     [w0+12], w0
    2902:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2904:	91 01 32    	bra       Z, 0x2c28 <.L77>
    2906:	4e 00 90    	mov.w     [w14+8], w0
    2908:	60 00 90    	mov.w     [w0+12], w0
    290a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    290c:	8f 01 32    	bra       Z, 0x2c2c <.L78>

0000290e <.LSM164>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    290e:	3e 00 90    	mov.w     [w14+6], w0
    2910:	00 08 90    	mov.w     [w0+16], w0
    2912:	00 00 e0    	cp0.w     w0
    2914:	69 00 3a    	bra       NZ, 0x29e8 <.L50>
    2916:	4e 00 90    	mov.w     [w14+8], w0
    2918:	00 08 90    	mov.w     [w0+16], w0
    291a:	00 00 e0    	cp0.w     w0
    291c:	65 00 3a    	bra       NZ, 0x29e8 <.L50>

0000291e <.LSM165>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    291e:	3e 00 90    	mov.w     [w14+6], w0
    2920:	0a 0c 07    	rcall     0x4136 <_pin_digitalOut>

00002922 <.LSM166>:
            pin_set(RTS);
    2922:	3e 00 90    	mov.w     [w14+6], w0
    2924:	65 0c 07    	rcall     0x41f0 <_pin_set>

00002926 <.LSM167>:
            pin_digitalIn(CTS);
    2926:	4e 00 90    	mov.w     [w14+8], w0
    2928:	df 0b 07    	rcall     0x40e8 <_pin_digitalIn>

0000292a <.LSM168>:
            self->RTS = RTS;
    292a:	1e 00 78    	mov.w     [w14], w0
    292c:	be 00 90    	mov.w     [w14+6], w1
    292e:	71 08 98    	mov.w     w1, [w0+30]

00002930 <.LSM169>:
            RTS->owner = (void *)self;
    2930:	3e 00 90    	mov.w     [w14+6], w0
    2932:	9e 00 78    	mov.w     [w14], w1
    2934:	01 08 98    	mov.w     w1, [w0+16]

00002936 <.LSM170>:
            RTS->write = NULL;
    2936:	3e 00 90    	mov.w     [w14+6], w0
    2938:	80 00 eb    	clr.w     w1
    293a:	11 08 98    	mov.w     w1, [w0+18]

0000293c <.LSM171>:
            RTS->read = NULL;
    293c:	3e 00 90    	mov.w     [w14+6], w0
    293e:	80 00 eb    	clr.w     w1
    2940:	21 08 98    	mov.w     w1, [w0+20]

00002942 <.LSM172>:
            self->CTS = CTS;
    2942:	1e 00 78    	mov.w     [w14], w0
    2944:	ce 00 90    	mov.w     [w14+8], w1
    2946:	01 10 98    	mov.w     w1, [w0+32]

00002948 <.LSM173>:
            CTS->owner = (void *)self;
    2948:	4e 00 90    	mov.w     [w14+8], w0
    294a:	9e 00 78    	mov.w     [w14], w1
    294c:	01 08 98    	mov.w     w1, [w0+16]

0000294e <.LSM174>:
            CTS->write = NULL;
    294e:	4e 00 90    	mov.w     [w14+8], w0
    2950:	80 00 eb    	clr.w     w1
    2952:	11 08 98    	mov.w     w1, [w0+18]

00002954 <.LSM175>:
            CTS->read = NULL;
    2954:	4e 00 90    	mov.w     [w14+8], w0
    2956:	80 00 eb    	clr.w     w1
    2958:	21 08 98    	mov.w     w1, [w0+20]

0000295a <.LSM176>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    295a:	11 3a 80    	mov.w     0x742, w1
    295c:	f0 0b 20    	mov.w     #0xbf, w0
    295e:	00 81 60    	and.w     w1, w0, w2
    2960:	60 04 20    	mov.w     #0x46, w0
    2962:	71 05 20    	mov.w     #0x57, w1
    2964:	23 74 20    	mov.w     #0x742, w3
    2966:	80 49 78    	mov.b     w0, [w3]
    2968:	81 49 78    	mov.b     w1, [w3]
    296a:	82 49 78    	mov.b     w2, [w3]

0000296c <.LSM177>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    296c:	3e 00 90    	mov.w     [w14+6], w0
    296e:	70 00 90    	mov.w     [w0+14], w0
    2970:	be 00 90    	mov.w     [w14+6], w1
    2972:	f1 00 90    	mov.w     [w1+14], w1
    2974:	11 01 78    	mov.w     [w1], w2
    2976:	be 00 90    	mov.w     [w14+6], w1
    2978:	a1 48 90    	mov.b     [w1+10], w1
    297a:	81 80 fb    	ze        w1, w1
    297c:	f3 03 20    	mov.w     #0x3f, w3
    297e:	81 18 dd    	sl.w      w3, w1, w1
    2980:	81 80 ea    	com.w     w1, w1
    2982:	81 00 61    	and.w     w2, w1, w1
    2984:	01 08 78    	mov.w     w1, [w0]

00002986 <.LSM178>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    2986:	3e 00 90    	mov.w     [w14+6], w0
    2988:	70 00 90    	mov.w     [w0+14], w0
    298a:	be 00 90    	mov.w     [w14+6], w1
    298c:	f1 00 90    	mov.w     [w1+14], w1
    298e:	11 01 78    	mov.w     [w1], w2
    2990:	9e 00 78    	mov.w     [w14], w1
    2992:	c1 09 90    	mov.w     [w1+24], w3
    2994:	be 00 90    	mov.w     [w14+6], w1
    2996:	a1 48 90    	mov.b     [w1+10], w1
    2998:	81 80 fb    	ze        w1, w1
    299a:	81 18 dd    	sl.w      w3, w1, w1
    299c:	82 80 70    	ior.w     w1, w2, w1
    299e:	01 08 78    	mov.w     w1, [w0]

000029a0 <.LSM179>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    29a0:	1e 00 78    	mov.w     [w14], w0
    29a2:	10 08 90    	mov.w     [w0+18], w0
    29a4:	9e 00 78    	mov.w     [w14], w1
    29a6:	91 08 90    	mov.w     [w1+18], w1
    29a8:	11 01 78    	mov.w     [w1], w2
    29aa:	9e 00 78    	mov.w     [w14], w1
    29ac:	d1 50 90    	mov.b     [w1+21], w1
    29ae:	81 80 fb    	ze        w1, w1
    29b0:	f3 03 20    	mov.w     #0x3f, w3
    29b2:	81 18 dd    	sl.w      w3, w1, w1
    29b4:	81 80 ea    	com.w     w1, w1
    29b6:	81 00 61    	and.w     w2, w1, w1
    29b8:	01 08 78    	mov.w     w1, [w0]

000029ba <.LSM180>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    29ba:	1e 00 78    	mov.w     [w14], w0
    29bc:	10 08 90    	mov.w     [w0+18], w0
    29be:	9e 00 78    	mov.w     [w14], w1
    29c0:	91 08 90    	mov.w     [w1+18], w1
    29c2:	11 01 78    	mov.w     [w1], w2
    29c4:	ce 00 90    	mov.w     [w14+8], w1
    29c6:	e1 01 90    	mov.w     [w1+12], w3
    29c8:	9e 00 78    	mov.w     [w14], w1
    29ca:	d1 50 90    	mov.b     [w1+21], w1
    29cc:	81 80 fb    	ze        w1, w1
    29ce:	81 18 dd    	sl.w      w3, w1, w1
    29d0:	82 80 70    	ior.w     w1, w2, w1
    29d2:	01 08 78    	mov.w     w1, [w0]

000029d4 <.LSM181>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    29d4:	11 3a 80    	mov.w     0x742, w1
    29d6:	00 04 20    	mov.w     #0x40, w0
    29d8:	01 01 70    	ior.w     w0, w1, w2
    29da:	60 04 20    	mov.w     #0x46, w0
    29dc:	71 05 20    	mov.w     #0x57, w1
    29de:	23 74 20    	mov.w     #0x742, w3
    29e0:	80 49 78    	mov.b     w0, [w3]
    29e2:	81 49 78    	mov.b     w1, [w3]
    29e4:	82 49 78    	mov.b     w2, [w3]
    29e6:	0a 00 37    	bra       0x29fc <.L51>

000029e8 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    29e8:	1e 00 78    	mov.w     [w14], w0
    29ea:	f0 08 90    	mov.w     [w0+30], w1
    29ec:	3e 00 90    	mov.w     [w14+6], w0
    29ee:	80 8f 50    	sub.w     w1, w0, [w15]
    29f0:	1f 01 3a    	bra       NZ, 0x2c30 <.L79>
    29f2:	1e 00 78    	mov.w     [w14], w0
    29f4:	80 10 90    	mov.w     [w0+32], w1
    29f6:	4e 00 90    	mov.w     [w14+8], w0
    29f8:	80 8f 50    	sub.w     w1, w0, [w15]
    29fa:	1c 01 3a    	bra       NZ, 0x2c34 <.L80>

000029fc <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    29fc:	1e 00 78    	mov.w     [w14], w0
    29fe:	10 00 78    	mov.w     [w0], w0
    2a00:	01 20 20    	mov.w     #0x200, w1
    2a02:	01 08 78    	mov.w     w1, [w0]
    2a04:	06 00 37    	bra       0x2a12 <.L53>

00002a06 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    2a06:	3e 00 90    	mov.w     [w14+6], w0
    2a08:	00 00 e0    	cp0.w     w0
    2a0a:	16 01 3a    	bra       NZ, 0x2c38 <.L81>
    2a0c:	4e 00 90    	mov.w     [w14+8], w0
    2a0e:	00 00 e0    	cp0.w     w0
    2a10:	15 01 3a    	bra       NZ, 0x2c3c <.L82>

00002a12 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2a12:	18 c0 b3    	mov.b     #0x1, w8
    2a14:	02 40 22    	mov.w     #0x2400, w2
    2a16:	43 a7 24    	mov.w     #0x4a74, w3
    2a18:	5e 00 90    	mov.w     [w14+10], w0
    2a1a:	ee 00 90    	mov.w     [w14+12], w1
    2a1c:	9e f4 07    	rcall     0x135a <___gesf2>
    2a1e:	00 00 e0    	cp0.w     w0
    2a20:	01 00 3c    	bra       GT, 0x2a24 <.L55>
    2a22:	00 44 eb    	clr.b     w8

00002a24 <.L55>:
    2a24:	08 04 e0    	cp0.b     w8
    2a26:	04 00 32    	bra       Z, 0x2a30 <.L56>

00002a28 <.LSM186>:
        baudrate = FCY/4.;
    2a28:	00 40 22    	mov.w     #0x2400, w0
    2a2a:	41 a7 24    	mov.w     #0x4a74, w1
    2a2c:	50 07 98    	mov.w     w0, [w14+10]
    2a2e:	61 07 98    	mov.w     w1, [w14+12]

00002a30 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    2a30:	18 c0 b3    	mov.b     #0x1, w8
    2a32:	02 40 22    	mov.w     #0x2400, w2
    2a34:	43 17 24    	mov.w     #0x4174, w3
    2a36:	5e 00 90    	mov.w     [w14+10], w0
    2a38:	ee 00 90    	mov.w     [w14+12], w1
    2a3a:	8d f4 07    	rcall     0x1356 <___eqsf2>
    2a3c:	00 00 e0    	cp0.w     w0
    2a3e:	01 00 35    	bra       LT, 0x2a42 <.L57>
    2a40:	00 44 eb    	clr.b     w8

00002a42 <.L57>:
    2a42:	08 04 e0    	cp0.b     w8
    2a44:	04 00 32    	bra       Z, 0x2a4e <.L58>

00002a46 <.LSM188>:
        baudrate = FCY/(16.*65536.);
    2a46:	00 40 22    	mov.w     #0x2400, w0
    2a48:	41 17 24    	mov.w     #0x4174, w1
    2a4a:	50 07 98    	mov.w     w0, [w14+10]
    2a4c:	61 07 98    	mov.w     w1, [w14+12]

00002a4e <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2a4e:	18 c0 b3    	mov.b     #0x1, w8
    2a50:	02 40 22    	mov.w     #0x2400, w2
    2a52:	43 27 24    	mov.w     #0x4274, w3
    2a54:	5e 00 90    	mov.w     [w14+10], w0
    2a56:	ee 00 90    	mov.w     [w14+12], w1
    2a58:	7e f4 07    	rcall     0x1356 <___eqsf2>
    2a5a:	00 00 e0    	cp0.w     w0
    2a5c:	01 00 34    	bra       LE, 0x2a60 <.L59>
    2a5e:	00 44 eb    	clr.b     w8

00002a60 <.L59>:
    2a60:	08 04 e0    	cp0.b     w8
    2a62:	0f 00 32    	bra       Z, 0x2a82 <.L60>

00002a64 <.LSM190>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    2a64:	1e 00 78    	mov.w     [w14], w0
    2a66:	40 04 90    	mov.w     [w0+8], w8
    2a68:	5e 01 90    	mov.w     [w14+10], w2
    2a6a:	ee 01 90    	mov.w     [w14+12], w3
    2a6c:	00 40 22    	mov.w     #0x2400, w0
    2a6e:	41 97 24    	mov.w     #0x4974, w1
    2a70:	30 f4 07    	rcall     0x12d2 <___divsf3>
    2a72:	02 00 20    	mov.w     #0x0, w2
    2a74:	03 f0 23    	mov.w     #0x3f00, w3
    2a76:	d0 f3 07    	rcall     0x1218 <___addsf3>
    2a78:	72 f4 07    	rcall     0x135e <___fixunssfsi>
    2a7a:	00 00 78    	mov.w     w0, w0
    2a7c:	00 00 e9    	dec.w     w0, w0
    2a7e:	00 0c 78    	mov.w     w0, [w8]
    2a80:	15 00 37    	bra       0x2aac <.L61>

00002a82 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2a82:	1e 00 78    	mov.w     [w14], w0
    2a84:	10 00 78    	mov.w     [w0], w0
    2a86:	9e 00 78    	mov.w     [w14], w1
    2a88:	91 00 78    	mov.w     [w1], w1
    2a8a:	91 00 78    	mov.w     [w1], w1
    2a8c:	01 30 a0    	bset.w    w1, #0x3
    2a8e:	01 08 78    	mov.w     w1, [w0]

00002a90 <.LSM192>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2a90:	1e 00 78    	mov.w     [w14], w0
    2a92:	40 04 90    	mov.w     [w0+8], w8
    2a94:	5e 01 90    	mov.w     [w14+10], w2
    2a96:	ee 01 90    	mov.w     [w14+12], w3
    2a98:	00 40 22    	mov.w     #0x2400, w0
    2a9a:	41 a7 24    	mov.w     #0x4a74, w1
    2a9c:	1a f4 07    	rcall     0x12d2 <___divsf3>
    2a9e:	02 00 20    	mov.w     #0x0, w2
    2aa0:	03 f0 23    	mov.w     #0x3f00, w3
    2aa2:	ba f3 07    	rcall     0x1218 <___addsf3>
    2aa4:	5c f4 07    	rcall     0x135e <___fixunssfsi>
    2aa6:	00 00 78    	mov.w     w0, w0
    2aa8:	00 00 e9    	dec.w     w0, w0
    2aaa:	00 0c 78    	mov.w     w0, [w8]

00002aac <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2aac:	ee 48 90    	mov.b     [w14+14], w1
    2aae:	50 c4 b3    	mov.b     #0x45, w0
    2ab0:	80 cf 50    	sub.b     w1, w0, [w15]
    2ab2:	04 00 32    	bra       Z, 0x2abc <.L62>
    2ab4:	ee 48 90    	mov.b     [w14+14], w1
    2ab6:	50 c6 b3    	mov.b     #0x65, w0
    2ab8:	80 cf 50    	sub.b     w1, w0, [w15]
    2aba:	08 00 3a    	bra       NZ, 0x2acc <.L63>

00002abc <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2abc:	1e 00 78    	mov.w     [w14], w0
    2abe:	10 00 78    	mov.w     [w0], w0
    2ac0:	9e 00 78    	mov.w     [w14], w1
    2ac2:	91 00 78    	mov.w     [w1], w1
    2ac4:	91 00 78    	mov.w     [w1], w1
    2ac6:	01 10 a0    	bset.w    w1, #0x1
    2ac8:	01 08 78    	mov.w     w1, [w0]
    2aca:	18 00 37    	bra       0x2afc <.L64>

00002acc <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    2acc:	ee 48 90    	mov.b     [w14+14], w1
    2ace:	f0 c4 b3    	mov.b     #0x4f, w0
    2ad0:	80 cf 50    	sub.b     w1, w0, [w15]
    2ad2:	04 00 32    	bra       Z, 0x2adc <.L65>
    2ad4:	ee 48 90    	mov.b     [w14+14], w1
    2ad6:	f0 c6 b3    	mov.b     #0x6f, w0
    2ad8:	80 cf 50    	sub.b     w1, w0, [w15]
    2ada:	08 00 3a    	bra       NZ, 0x2aec <.L66>

00002adc <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    2adc:	1e 00 78    	mov.w     [w14], w0
    2ade:	10 00 78    	mov.w     [w0], w0
    2ae0:	9e 00 78    	mov.w     [w14], w1
    2ae2:	91 00 78    	mov.w     [w1], w1
    2ae4:	91 00 78    	mov.w     [w1], w1
    2ae6:	01 20 a0    	bset.w    w1, #0x2
    2ae8:	01 08 78    	mov.w     w1, [w0]
    2aea:	08 00 37    	bra       0x2afc <.L64>

00002aec <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    2aec:	ee 48 90    	mov.b     [w14+14], w1
    2aee:	e0 c4 b3    	mov.b     #0x4e, w0
    2af0:	80 cf 50    	sub.b     w1, w0, [w15]
    2af2:	04 00 32    	bra       Z, 0x2afc <.L64>
    2af4:	ee 48 90    	mov.b     [w14+14], w1
    2af6:	e0 c6 b3    	mov.b     #0x6e, w0
    2af8:	80 cf 50    	sub.b     w1, w0, [w15]
    2afa:	a2 00 3a    	bra       NZ, 0x2c40 <.L83>

00002afc <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    2afc:	4e b8 97    	mov.w     [w14-8], w0
    2afe:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2b00:	08 00 3a    	bra       NZ, 0x2b12 <.L67>

00002b02 <.LSM199>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2b02:	1e 00 78    	mov.w     [w14], w0
    2b04:	10 00 78    	mov.w     [w0], w0
    2b06:	9e 00 78    	mov.w     [w14], w1
    2b08:	91 00 78    	mov.w     [w1], w1
    2b0a:	91 00 78    	mov.w     [w1], w1
    2b0c:	01 00 a0    	bset.w    w1, #0x0
    2b0e:	01 08 78    	mov.w     w1, [w0]
    2b10:	03 00 37    	bra       0x2b18 <.L68>

00002b12 <.L67>:
    } else if (stopbits!=1) {
    2b12:	4e b8 97    	mov.w     [w14-8], w0
    2b14:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2b16:	96 00 3a    	bra       NZ, 0x2c44 <.L84>

00002b18 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    2b18:	2e b8 97    	mov.w     [w14-12], w0
    2b1a:	00 00 e0    	cp0.w     w0
    2b1c:	04 00 3a    	bra       NZ, 0x2b26 <.L69>

00002b1e <.LSM202>:
        self->putc = __putc_nobuffer;
    2b1e:	1e 00 78    	mov.w     [w14], w0
    2b20:	e1 19 22    	mov.w     #0x219e, w1
    2b22:	41 18 98    	mov.w     w1, [w0+56]
    2b24:	36 00 37    	bra       0x2b92 <.L70>

00002b26 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2b26:	1e 00 78    	mov.w     [w14], w0
    2b28:	10 00 90    	mov.w     [w0+2], w0
    2b2a:	9e 00 78    	mov.w     [w14], w1
    2b2c:	91 00 90    	mov.w     [w1+2], w1
    2b2e:	11 01 78    	mov.w     [w1], w2
    2b30:	01 00 22    	mov.w     #0x2000, w1
    2b32:	82 80 70    	ior.w     w1, w2, w1
    2b34:	01 08 78    	mov.w     w1, [w0]

00002b36 <.LSM204>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2b36:	1e 00 78    	mov.w     [w14], w0
    2b38:	ae b8 97    	mov.w     [w14-12], w1
    2b3a:	11 10 98    	mov.w     w1, [w0+34]

00002b3c <.LSM205>:
        self->TXbuffer.length = TXbufferlen;
    2b3c:	1e 00 78    	mov.w     [w14], w0
    2b3e:	9e b8 97    	mov.w     [w14-14], w1
    2b40:	21 10 98    	mov.w     w1, [w0+36]

00002b42 <.LSM206>:
        self->TXbuffer.head = 0;
    2b42:	1e 00 78    	mov.w     [w14], w0
    2b44:	80 00 eb    	clr.w     w1
    2b46:	31 10 98    	mov.w     w1, [w0+38]

00002b48 <.LSM207>:
        self->TXbuffer.tail = 0;
    2b48:	1e 00 78    	mov.w     [w14], w0
    2b4a:	80 00 eb    	clr.w     w1
    2b4c:	41 10 98    	mov.w     w1, [w0+40]

00002b4e <.LSM208>:
        self->TXbuffer.count = 0;
    2b4e:	1e 00 78    	mov.w     [w14], w0
    2b50:	80 00 eb    	clr.w     w1
    2b52:	51 10 98    	mov.w     w1, [w0+42]

00002b54 <.LSM209>:
        self->TXthreshold = TXthreshold;
    2b54:	1e 00 78    	mov.w     [w14], w0
    2b56:	be b8 97    	mov.w     [w14-10], w1
    2b58:	31 18 98    	mov.w     w1, [w0+54]

00002b5a <.LSM210>:
        self->putc = __putc_buffer;
    2b5a:	1e 00 78    	mov.w     [w14], w0
    2b5c:	01 1e 22    	mov.w     #0x21e0, w1
    2b5e:	41 18 98    	mov.w     w1, [w0+56]

00002b60 <.LSM211>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2b60:	1e 00 78    	mov.w     [w14], w0
    2b62:	50 00 90    	mov.w     [w0+10], w0
    2b64:	9e 00 78    	mov.w     [w14], w1
    2b66:	d1 00 90    	mov.w     [w1+10], w1
    2b68:	11 01 78    	mov.w     [w1], w2
    2b6a:	9e 00 78    	mov.w     [w14], w1
    2b6c:	e1 48 90    	mov.b     [w1+14], w1
    2b6e:	81 80 fb    	ze        w1, w1
    2b70:	13 00 20    	mov.w     #0x1, w3
    2b72:	81 18 dd    	sl.w      w3, w1, w1
    2b74:	81 80 ea    	com.w     w1, w1
    2b76:	81 00 61    	and.w     w2, w1, w1
    2b78:	01 08 78    	mov.w     w1, [w0]

00002b7a <.LSM212>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2b7a:	1e 00 78    	mov.w     [w14], w0
    2b7c:	60 00 90    	mov.w     [w0+12], w0
    2b7e:	9e 00 78    	mov.w     [w14], w1
    2b80:	e1 00 90    	mov.w     [w1+12], w1
    2b82:	11 01 78    	mov.w     [w1], w2
    2b84:	9e 00 78    	mov.w     [w14], w1
    2b86:	e1 48 90    	mov.b     [w1+14], w1
    2b88:	81 80 fb    	ze        w1, w1
    2b8a:	13 00 20    	mov.w     #0x1, w3
    2b8c:	81 18 dd    	sl.w      w3, w1, w1
    2b8e:	82 80 70    	ior.w     w1, w2, w1
    2b90:	01 08 78    	mov.w     w1, [w0]

00002b92 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    2b92:	0e b8 97    	mov.w     [w14-16], w0
    2b94:	00 00 e0    	cp0.w     w0
    2b96:	04 00 3a    	bra       NZ, 0x2ba0 <.L71>

00002b98 <.LSM214>:
        self->getc = __getc_nobuffer;
    2b98:	1e 00 78    	mov.w     [w14], w0
    2b9a:	21 1c 22    	mov.w     #0x21c2, w1
    2b9c:	51 18 98    	mov.w     w1, [w0+58]
    2b9e:	2b 00 37    	bra       0x2bf6 <.L72>

00002ba0 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    2ba0:	1e 00 78    	mov.w     [w14], w0
    2ba2:	8e b8 97    	mov.w     [w14-16], w1
    2ba4:	61 10 98    	mov.w     w1, [w0+44]

00002ba6 <.LSM216>:
        self->RXbuffer.length = RXbufferlen;
    2ba6:	1e 00 78    	mov.w     [w14], w0
    2ba8:	fe b0 97    	mov.w     [w14-18], w1
    2baa:	71 10 98    	mov.w     w1, [w0+46]

00002bac <.LSM217>:
        self->RXbuffer.head = 0;
    2bac:	1e 00 78    	mov.w     [w14], w0
    2bae:	80 00 eb    	clr.w     w1
    2bb0:	01 18 98    	mov.w     w1, [w0+48]

00002bb2 <.LSM218>:
        self->RXbuffer.tail = 0;
    2bb2:	1e 00 78    	mov.w     [w14], w0
    2bb4:	80 00 eb    	clr.w     w1
    2bb6:	11 18 98    	mov.w     w1, [w0+50]

00002bb8 <.LSM219>:
        self->RXbuffer.count = 0;
    2bb8:	1e 00 78    	mov.w     [w14], w0
    2bba:	80 00 eb    	clr.w     w1
    2bbc:	21 18 98    	mov.w     w1, [w0+52]

00002bbe <.LSM220>:
        self->getc = __getc_buffer;
    2bbe:	1e 00 78    	mov.w     [w14], w0
    2bc0:	81 2d 22    	mov.w     #0x22d8, w1
    2bc2:	51 18 98    	mov.w     w1, [w0+58]

00002bc4 <.LSM221>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2bc4:	1e 00 78    	mov.w     [w14], w0
    2bc6:	50 00 90    	mov.w     [w0+10], w0
    2bc8:	9e 00 78    	mov.w     [w14], w1
    2bca:	d1 00 90    	mov.w     [w1+10], w1
    2bcc:	11 01 78    	mov.w     [w1], w2
    2bce:	9e 00 78    	mov.w     [w14], w1
    2bd0:	f1 48 90    	mov.b     [w1+15], w1
    2bd2:	81 80 fb    	ze        w1, w1
    2bd4:	13 00 20    	mov.w     #0x1, w3
    2bd6:	81 18 dd    	sl.w      w3, w1, w1
    2bd8:	81 80 ea    	com.w     w1, w1
    2bda:	81 00 61    	and.w     w2, w1, w1
    2bdc:	01 08 78    	mov.w     w1, [w0]

00002bde <.LSM222>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    2bde:	1e 00 78    	mov.w     [w14], w0
    2be0:	60 00 90    	mov.w     [w0+12], w0
    2be2:	9e 00 78    	mov.w     [w14], w1
    2be4:	e1 00 90    	mov.w     [w1+12], w1
    2be6:	11 01 78    	mov.w     [w1], w2
    2be8:	9e 00 78    	mov.w     [w14], w1
    2bea:	f1 48 90    	mov.b     [w1+15], w1
    2bec:	81 80 fb    	ze        w1, w1
    2bee:	13 00 20    	mov.w     #0x1, w3
    2bf0:	81 18 dd    	sl.w      w3, w1, w1
    2bf2:	82 80 70    	ior.w     w1, w2, w1
    2bf4:	01 08 78    	mov.w     w1, [w0]

00002bf6 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    2bf6:	1e 00 78    	mov.w     [w14], w0
    2bf8:	10 00 78    	mov.w     [w0], w0
    2bfa:	9e 00 78    	mov.w     [w14], w1
    2bfc:	91 00 78    	mov.w     [w1], w1
    2bfe:	11 01 78    	mov.w     [w1], w2
    2c00:	01 00 28    	mov.w     #0x8000, w1
    2c02:	82 80 70    	ior.w     w1, w2, w1
    2c04:	01 08 78    	mov.w     w1, [w0]

00002c06 <.LSM224>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    2c06:	1e 00 78    	mov.w     [w14], w0
    2c08:	10 00 90    	mov.w     [w0+2], w0
    2c0a:	9e 00 78    	mov.w     [w14], w1
    2c0c:	91 00 90    	mov.w     [w1+2], w1
    2c0e:	11 01 78    	mov.w     [w1], w2
    2c10:	01 40 20    	mov.w     #0x400, w1
    2c12:	82 80 70    	ior.w     w1, w2, w1
    2c14:	01 08 78    	mov.w     w1, [w0]
    2c16:	17 00 37    	bra       0x2c46 <.L40>

00002c18 <.L73>:
    2c18:	00 00 00    	nop       
    2c1a:	15 00 37    	bra       0x2c46 <.L40>

00002c1c <.L74>:
    2c1c:	00 00 00    	nop       
    2c1e:	13 00 37    	bra       0x2c46 <.L40>

00002c20 <.L75>:
    2c20:	00 00 00    	nop       
    2c22:	11 00 37    	bra       0x2c46 <.L40>

00002c24 <.L76>:
    2c24:	00 00 00    	nop       
    2c26:	0f 00 37    	bra       0x2c46 <.L40>

00002c28 <.L77>:
    2c28:	00 00 00    	nop       
    2c2a:	0d 00 37    	bra       0x2c46 <.L40>

00002c2c <.L78>:
    2c2c:	00 00 00    	nop       
    2c2e:	0b 00 37    	bra       0x2c46 <.L40>

00002c30 <.L79>:
    2c30:	00 00 00    	nop       
    2c32:	09 00 37    	bra       0x2c46 <.L40>

00002c34 <.L80>:
    2c34:	00 00 00    	nop       
    2c36:	07 00 37    	bra       0x2c46 <.L40>

00002c38 <.L81>:
    2c38:	00 00 00    	nop       
    2c3a:	05 00 37    	bra       0x2c46 <.L40>

00002c3c <.L82>:
    2c3c:	00 00 00    	nop       
    2c3e:	03 00 37    	bra       0x2c46 <.L40>

00002c40 <.L83>:
    2c40:	00 00 00    	nop       
    2c42:	01 00 37    	bra       0x2c46 <.L40>

00002c44 <.L84>:
    2c44:	00 00 00    	nop       

00002c46 <.L40>:
}
    2c46:	4f 04 78    	mov.w     [--w15], w8
    2c48:	00 80 fa    	ulnk      
    2c4a:	00 00 06    	return    

00002c4c <_uart_close>:

void uart_close(_UART *self) {
    2c4c:	02 00 fa    	lnk       #0x2
    2c4e:	00 0f 78    	mov.w     w0, [w14]

00002c50 <.LSM234>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2c50:	1e 00 78    	mov.w     [w14], w0
    2c52:	10 00 90    	mov.w     [w0+2], w0
    2c54:	9e 00 78    	mov.w     [w14], w1
    2c56:	91 00 90    	mov.w     [w1+2], w1
    2c58:	11 01 78    	mov.w     [w1], w2
    2c5a:	f1 bf 2f    	mov.w     #0xfbff, w1
    2c5c:	81 00 61    	and.w     w2, w1, w1
    2c5e:	01 08 78    	mov.w     w1, [w0]

00002c60 <.LSM235>:
    *(self->UxMODE) = 0;        // Disable UART module
    2c60:	1e 00 78    	mov.w     [w14], w0
    2c62:	10 00 78    	mov.w     [w0], w0
    2c64:	80 00 eb    	clr.w     w1
    2c66:	01 08 78    	mov.w     w1, [w0]

00002c68 <.LSM236>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    2c68:	1e 00 78    	mov.w     [w14], w0
    2c6a:	60 00 90    	mov.w     [w0+12], w0
    2c6c:	9e 00 78    	mov.w     [w14], w1
    2c6e:	e1 00 90    	mov.w     [w1+12], w1
    2c70:	11 01 78    	mov.w     [w1], w2
    2c72:	9e 00 78    	mov.w     [w14], w1
    2c74:	e1 48 90    	mov.b     [w1+14], w1
    2c76:	81 80 fb    	ze        w1, w1
    2c78:	13 00 20    	mov.w     #0x1, w3
    2c7a:	81 18 dd    	sl.w      w3, w1, w1
    2c7c:	81 80 ea    	com.w     w1, w1
    2c7e:	81 00 61    	and.w     w2, w1, w1
    2c80:	01 08 78    	mov.w     w1, [w0]

00002c82 <.LSM237>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2c82:	1e 00 78    	mov.w     [w14], w0
    2c84:	60 00 90    	mov.w     [w0+12], w0
    2c86:	9e 00 78    	mov.w     [w14], w1
    2c88:	e1 00 90    	mov.w     [w1+12], w1
    2c8a:	11 01 78    	mov.w     [w1], w2
    2c8c:	9e 00 78    	mov.w     [w14], w1
    2c8e:	f1 48 90    	mov.b     [w1+15], w1
    2c90:	81 80 fb    	ze        w1, w1
    2c92:	13 00 20    	mov.w     #0x1, w3
    2c94:	81 18 dd    	sl.w      w3, w1, w1
    2c96:	81 80 ea    	com.w     w1, w1
    2c98:	81 00 61    	and.w     w2, w1, w1
    2c9a:	01 08 78    	mov.w     w1, [w0]

00002c9c <.LSM238>:
    self->putc = NULL;
    2c9c:	1e 00 78    	mov.w     [w14], w0
    2c9e:	80 00 eb    	clr.w     w1
    2ca0:	41 18 98    	mov.w     w1, [w0+56]

00002ca2 <.LSM239>:
    self->getc = NULL;
    2ca2:	1e 00 78    	mov.w     [w14], w0
    2ca4:	80 00 eb    	clr.w     w1
    2ca6:	51 18 98    	mov.w     w1, [w0+58]

00002ca8 <.LSM240>:
    if (self->TX) {
    2ca8:	1e 00 78    	mov.w     [w14], w0
    2caa:	50 08 90    	mov.w     [w0+26], w0
    2cac:	00 00 e0    	cp0.w     w0
    2cae:	2f 00 32    	bra       Z, 0x2d0e <.L86>

00002cb0 <.LSM241>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2cb0:	11 3a 80    	mov.w     0x742, w1
    2cb2:	f0 0b 20    	mov.w     #0xbf, w0
    2cb4:	00 81 60    	and.w     w1, w0, w2
    2cb6:	60 04 20    	mov.w     #0x46, w0
    2cb8:	71 05 20    	mov.w     #0x57, w1
    2cba:	23 74 20    	mov.w     #0x742, w3
    2cbc:	80 49 78    	mov.b     w0, [w3]
    2cbe:	81 49 78    	mov.b     w1, [w3]
    2cc0:	82 49 78    	mov.b     w2, [w3]

00002cc2 <.LSM242>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2cc2:	1e 00 78    	mov.w     [w14], w0
    2cc4:	50 08 90    	mov.w     [w0+26], w0
    2cc6:	70 00 90    	mov.w     [w0+14], w0
    2cc8:	9e 00 78    	mov.w     [w14], w1
    2cca:	d1 08 90    	mov.w     [w1+26], w1
    2ccc:	f1 00 90    	mov.w     [w1+14], w1
    2cce:	11 01 78    	mov.w     [w1], w2
    2cd0:	9e 00 78    	mov.w     [w14], w1
    2cd2:	d1 08 90    	mov.w     [w1+26], w1
    2cd4:	a1 48 90    	mov.b     [w1+10], w1
    2cd6:	81 80 fb    	ze        w1, w1
    2cd8:	f3 03 20    	mov.w     #0x3f, w3
    2cda:	81 18 dd    	sl.w      w3, w1, w1
    2cdc:	81 80 ea    	com.w     w1, w1
    2cde:	81 00 61    	and.w     w2, w1, w1
    2ce0:	01 08 78    	mov.w     w1, [w0]

00002ce2 <.LSM243>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ce2:	11 3a 80    	mov.w     0x742, w1
    2ce4:	00 04 20    	mov.w     #0x40, w0
    2ce6:	01 01 70    	ior.w     w0, w1, w2
    2ce8:	60 04 20    	mov.w     #0x46, w0
    2cea:	71 05 20    	mov.w     #0x57, w1
    2cec:	23 74 20    	mov.w     #0x742, w3
    2cee:	80 49 78    	mov.b     w0, [w3]
    2cf0:	81 49 78    	mov.b     w1, [w3]
    2cf2:	82 49 78    	mov.b     w2, [w3]

00002cf4 <.LSM244>:
        self->TX->owner = NULL;
    2cf4:	1e 00 78    	mov.w     [w14], w0
    2cf6:	50 08 90    	mov.w     [w0+26], w0
    2cf8:	80 00 eb    	clr.w     w1
    2cfa:	01 08 98    	mov.w     w1, [w0+16]

00002cfc <.LSM245>:
        pin_digitalOut(self->TX);
    2cfc:	1e 00 78    	mov.w     [w14], w0
    2cfe:	50 08 90    	mov.w     [w0+26], w0
    2d00:	1a 0a 07    	rcall     0x4136 <_pin_digitalOut>

00002d02 <.LSM246>:
        pin_set(self->TX);
    2d02:	1e 00 78    	mov.w     [w14], w0
    2d04:	50 08 90    	mov.w     [w0+26], w0
    2d06:	74 0a 07    	rcall     0x41f0 <_pin_set>

00002d08 <.LSM247>:
        self->TX = NULL;
    2d08:	1e 00 78    	mov.w     [w14], w0
    2d0a:	80 00 eb    	clr.w     w1
    2d0c:	51 08 98    	mov.w     w1, [w0+26]

00002d0e <.L86>:
    }
    if (self->RX) {
    2d0e:	1e 00 78    	mov.w     [w14], w0
    2d10:	60 08 90    	mov.w     [w0+28], w0
    2d12:	00 00 e0    	cp0.w     w0
    2d14:	28 00 32    	bra       Z, 0x2d66 <.L87>

00002d16 <.LSM249>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2d16:	11 3a 80    	mov.w     0x742, w1
    2d18:	f0 0b 20    	mov.w     #0xbf, w0
    2d1a:	00 81 60    	and.w     w1, w0, w2
    2d1c:	60 04 20    	mov.w     #0x46, w0
    2d1e:	71 05 20    	mov.w     #0x57, w1
    2d20:	23 74 20    	mov.w     #0x742, w3
    2d22:	80 49 78    	mov.b     w0, [w3]
    2d24:	81 49 78    	mov.b     w1, [w3]
    2d26:	82 49 78    	mov.b     w2, [w3]

00002d28 <.LSM250>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2d28:	1e 00 78    	mov.w     [w14], w0
    2d2a:	00 08 90    	mov.w     [w0+16], w0
    2d2c:	9e 00 78    	mov.w     [w14], w1
    2d2e:	81 08 90    	mov.w     [w1+16], w1
    2d30:	11 01 78    	mov.w     [w1], w2
    2d32:	9e 00 78    	mov.w     [w14], w1
    2d34:	c1 50 90    	mov.b     [w1+20], w1
    2d36:	81 80 fb    	ze        w1, w1
    2d38:	f3 03 20    	mov.w     #0x3f, w3
    2d3a:	81 18 dd    	sl.w      w3, w1, w1
    2d3c:	82 80 70    	ior.w     w1, w2, w1
    2d3e:	01 08 78    	mov.w     w1, [w0]

00002d40 <.LSM251>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2d40:	11 3a 80    	mov.w     0x742, w1
    2d42:	00 04 20    	mov.w     #0x40, w0
    2d44:	01 01 70    	ior.w     w0, w1, w2
    2d46:	60 04 20    	mov.w     #0x46, w0
    2d48:	71 05 20    	mov.w     #0x57, w1
    2d4a:	23 74 20    	mov.w     #0x742, w3
    2d4c:	80 49 78    	mov.b     w0, [w3]
    2d4e:	81 49 78    	mov.b     w1, [w3]
    2d50:	82 49 78    	mov.b     w2, [w3]

00002d52 <.LSM252>:
        self->RX->owner = NULL;
    2d52:	1e 00 78    	mov.w     [w14], w0
    2d54:	60 08 90    	mov.w     [w0+28], w0
    2d56:	80 00 eb    	clr.w     w1
    2d58:	01 08 98    	mov.w     w1, [w0+16]

00002d5a <.LSM253>:
        pin_digitalIn(self->RX);
    2d5a:	1e 00 78    	mov.w     [w14], w0
    2d5c:	60 08 90    	mov.w     [w0+28], w0
    2d5e:	c4 09 07    	rcall     0x40e8 <_pin_digitalIn>

00002d60 <.LSM254>:
        self->RX = NULL;
    2d60:	1e 00 78    	mov.w     [w14], w0
    2d62:	80 00 eb    	clr.w     w1
    2d64:	61 08 98    	mov.w     w1, [w0+28]

00002d66 <.L87>:
    }
    if (self->RTS) {
    2d66:	1e 00 78    	mov.w     [w14], w0
    2d68:	70 08 90    	mov.w     [w0+30], w0
    2d6a:	00 00 e0    	cp0.w     w0
    2d6c:	2f 00 32    	bra       Z, 0x2dcc <.L88>

00002d6e <.LSM256>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2d6e:	11 3a 80    	mov.w     0x742, w1
    2d70:	f0 0b 20    	mov.w     #0xbf, w0
    2d72:	00 81 60    	and.w     w1, w0, w2
    2d74:	60 04 20    	mov.w     #0x46, w0
    2d76:	71 05 20    	mov.w     #0x57, w1
    2d78:	23 74 20    	mov.w     #0x742, w3
    2d7a:	80 49 78    	mov.b     w0, [w3]
    2d7c:	81 49 78    	mov.b     w1, [w3]
    2d7e:	82 49 78    	mov.b     w2, [w3]

00002d80 <.LSM257>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2d80:	1e 00 78    	mov.w     [w14], w0
    2d82:	70 08 90    	mov.w     [w0+30], w0
    2d84:	70 00 90    	mov.w     [w0+14], w0
    2d86:	9e 00 78    	mov.w     [w14], w1
    2d88:	f1 08 90    	mov.w     [w1+30], w1
    2d8a:	f1 00 90    	mov.w     [w1+14], w1
    2d8c:	11 01 78    	mov.w     [w1], w2
    2d8e:	9e 00 78    	mov.w     [w14], w1
    2d90:	f1 08 90    	mov.w     [w1+30], w1
    2d92:	a1 48 90    	mov.b     [w1+10], w1
    2d94:	81 80 fb    	ze        w1, w1
    2d96:	f3 03 20    	mov.w     #0x3f, w3
    2d98:	81 18 dd    	sl.w      w3, w1, w1
    2d9a:	81 80 ea    	com.w     w1, w1
    2d9c:	81 00 61    	and.w     w2, w1, w1
    2d9e:	01 08 78    	mov.w     w1, [w0]

00002da0 <.LSM258>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2da0:	11 3a 80    	mov.w     0x742, w1
    2da2:	00 04 20    	mov.w     #0x40, w0
    2da4:	01 01 70    	ior.w     w0, w1, w2
    2da6:	60 04 20    	mov.w     #0x46, w0
    2da8:	71 05 20    	mov.w     #0x57, w1
    2daa:	23 74 20    	mov.w     #0x742, w3
    2dac:	80 49 78    	mov.b     w0, [w3]
    2dae:	81 49 78    	mov.b     w1, [w3]
    2db0:	82 49 78    	mov.b     w2, [w3]

00002db2 <.LSM259>:
        self->RTS->owner = NULL;
    2db2:	1e 00 78    	mov.w     [w14], w0
    2db4:	70 08 90    	mov.w     [w0+30], w0
    2db6:	80 00 eb    	clr.w     w1
    2db8:	01 08 98    	mov.w     w1, [w0+16]

00002dba <.LSM260>:
        pin_digitalOut(self->RTS);
    2dba:	1e 00 78    	mov.w     [w14], w0
    2dbc:	70 08 90    	mov.w     [w0+30], w0
    2dbe:	bb 09 07    	rcall     0x4136 <_pin_digitalOut>

00002dc0 <.LSM261>:
        pin_set(self->RTS);
    2dc0:	1e 00 78    	mov.w     [w14], w0
    2dc2:	70 08 90    	mov.w     [w0+30], w0
    2dc4:	15 0a 07    	rcall     0x41f0 <_pin_set>

00002dc6 <.LSM262>:
        self->RTS = NULL;
    2dc6:	1e 00 78    	mov.w     [w14], w0
    2dc8:	80 00 eb    	clr.w     w1
    2dca:	71 08 98    	mov.w     w1, [w0+30]

00002dcc <.L88>:
    }
    if (self->CTS) {
    2dcc:	1e 00 78    	mov.w     [w14], w0
    2dce:	00 10 90    	mov.w     [w0+32], w0
    2dd0:	00 00 e0    	cp0.w     w0
    2dd2:	28 00 32    	bra       Z, 0x2e24 <.L85>

00002dd4 <.LSM264>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2dd4:	11 3a 80    	mov.w     0x742, w1
    2dd6:	f0 0b 20    	mov.w     #0xbf, w0
    2dd8:	00 81 60    	and.w     w1, w0, w2
    2dda:	60 04 20    	mov.w     #0x46, w0
    2ddc:	71 05 20    	mov.w     #0x57, w1
    2dde:	23 74 20    	mov.w     #0x742, w3
    2de0:	80 49 78    	mov.b     w0, [w3]
    2de2:	81 49 78    	mov.b     w1, [w3]
    2de4:	82 49 78    	mov.b     w2, [w3]

00002de6 <.LSM265>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2de6:	1e 00 78    	mov.w     [w14], w0
    2de8:	10 08 90    	mov.w     [w0+18], w0
    2dea:	9e 00 78    	mov.w     [w14], w1
    2dec:	91 08 90    	mov.w     [w1+18], w1
    2dee:	11 01 78    	mov.w     [w1], w2
    2df0:	9e 00 78    	mov.w     [w14], w1
    2df2:	d1 50 90    	mov.b     [w1+21], w1
    2df4:	81 80 fb    	ze        w1, w1
    2df6:	f3 03 20    	mov.w     #0x3f, w3
    2df8:	81 18 dd    	sl.w      w3, w1, w1
    2dfa:	82 80 70    	ior.w     w1, w2, w1
    2dfc:	01 08 78    	mov.w     w1, [w0]

00002dfe <.LSM266>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2dfe:	11 3a 80    	mov.w     0x742, w1
    2e00:	00 04 20    	mov.w     #0x40, w0
    2e02:	01 01 70    	ior.w     w0, w1, w2
    2e04:	60 04 20    	mov.w     #0x46, w0
    2e06:	71 05 20    	mov.w     #0x57, w1
    2e08:	23 74 20    	mov.w     #0x742, w3
    2e0a:	80 49 78    	mov.b     w0, [w3]
    2e0c:	81 49 78    	mov.b     w1, [w3]
    2e0e:	82 49 78    	mov.b     w2, [w3]

00002e10 <.LSM267>:
        self->CTS->owner = NULL;
    2e10:	1e 00 78    	mov.w     [w14], w0
    2e12:	00 10 90    	mov.w     [w0+32], w0
    2e14:	80 00 eb    	clr.w     w1
    2e16:	01 08 98    	mov.w     w1, [w0+16]

00002e18 <.LSM268>:
        pin_digitalIn(self->CTS);
    2e18:	1e 00 78    	mov.w     [w14], w0
    2e1a:	00 10 90    	mov.w     [w0+32], w0
    2e1c:	65 09 07    	rcall     0x40e8 <_pin_digitalIn>

00002e1e <.LSM269>:
        self->CTS = NULL;
    2e1e:	1e 00 78    	mov.w     [w14], w0
    2e20:	80 00 eb    	clr.w     w1
    2e22:	01 10 98    	mov.w     w1, [w0+32]

00002e24 <.L85>:
    }
}
    2e24:	00 80 fa    	ulnk      
    2e26:	00 00 06    	return    

00002e28 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2e28:	04 00 fa    	lnk       #0x4
    2e2a:	00 0f 78    	mov.w     w0, [w14]
    2e2c:	21 47 98    	mov.b     w1, [w14+2]

00002e2e <.LSM272>:
    if (self->putc)
    2e2e:	1e 00 78    	mov.w     [w14], w0
    2e30:	40 18 90    	mov.w     [w0+56], w0
    2e32:	00 00 e0    	cp0.w     w0
    2e34:	05 00 32    	bra       Z, 0x2e40 <.L90>

00002e36 <.LSM273>:
        self->putc(self, ch);
    2e36:	1e 00 78    	mov.w     [w14], w0
    2e38:	40 19 90    	mov.w     [w0+56], w2
    2e3a:	ae 40 90    	mov.b     [w14+2], w1
    2e3c:	1e 00 78    	mov.w     [w14], w0
    2e3e:	02 00 01    	call      w2

00002e40 <.L90>:
}
    2e40:	00 80 fa    	ulnk      
    2e42:	00 00 06    	return    

00002e44 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2e44:	02 00 fa    	lnk       #0x2
    2e46:	00 0f 78    	mov.w     w0, [w14]

00002e48 <.LSM276>:
    if (self->getc)
    2e48:	1e 00 78    	mov.w     [w14], w0
    2e4a:	50 18 90    	mov.w     [w0+58], w0
    2e4c:	00 00 e0    	cp0.w     w0
    2e4e:	05 00 32    	bra       Z, 0x2e5a <.L93>

00002e50 <.LSM277>:
        return self->getc(self);
    2e50:	1e 00 78    	mov.w     [w14], w0
    2e52:	d0 18 90    	mov.w     [w0+58], w1
    2e54:	1e 00 78    	mov.w     [w14], w0
    2e56:	01 00 01    	call      w1
    2e58:	01 00 37    	bra       0x2e5c <.L94>

00002e5a <.L93>:
    else
        return 0xFF;
    2e5a:	00 c0 eb    	setm.b    w0

00002e5c <.L94>:
}
    2e5c:	00 80 fa    	ulnk      
    2e5e:	00 00 06    	return    

00002e60 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2e60:	02 00 fa    	lnk       #0x2
    2e62:	00 0f 78    	mov.w     w0, [w14]

00002e64 <.LSM281>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2e64:	1e 00 78    	mov.w     [w14], w0
    2e66:	10 00 90    	mov.w     [w0+2], w0
    2e68:	90 00 78    	mov.w     [w0], w1
    2e6a:	00 40 20    	mov.w     #0x400, w0
    2e6c:	00 80 60    	and.w     w1, w0, w0
    2e6e:	00 00 e0    	cp0.w     w0
    2e70:	08 00 3a    	bra       NZ, 0x2e82 <.L95>

00002e72 <.LSM282>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2e72:	1e 00 78    	mov.w     [w14], w0
    2e74:	10 00 90    	mov.w     [w0+2], w0
    2e76:	9e 00 78    	mov.w     [w14], w1
    2e78:	91 00 90    	mov.w     [w1+2], w1
    2e7a:	11 01 78    	mov.w     [w1], w2
    2e7c:	01 40 20    	mov.w     #0x400, w1
    2e7e:	82 80 70    	ior.w     w1, w2, w1
    2e80:	01 08 78    	mov.w     w1, [w0]

00002e82 <.L95>:
}
    2e82:	00 80 fa    	ulnk      
    2e84:	00 00 06    	return    

00002e86 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2e86:	04 00 fa    	lnk       #0x4
    2e88:	00 0f 78    	mov.w     w0, [w14]
    2e8a:	11 07 98    	mov.w     w1, [w14+2]

00002e8c <.LSM285>:
    while (*str)
    2e8c:	08 00 37    	bra       0x2e9e <.L98>

00002e8e <.L99>:
        uart_putc(self, *str++);
    2e8e:	1e 00 90    	mov.w     [w14+2], w0
    2e90:	10 40 78    	mov.b     [w0], w0
    2e92:	9e 00 90    	mov.w     [w14+2], w1
    2e94:	81 00 e8    	inc.w     w1, w1
    2e96:	11 07 98    	mov.w     w1, [w14+2]
    2e98:	80 40 78    	mov.b     w0, w1
    2e9a:	1e 00 78    	mov.w     [w14], w0
    2e9c:	c5 ff 07    	rcall     0x2e28 <_uart_putc>

00002e9e <.L98>:
    2e9e:	1e 00 90    	mov.w     [w14+2], w0
    2ea0:	10 40 78    	mov.b     [w0], w0
    2ea2:	00 04 e0    	cp0.b     w0
    2ea4:	f4 ff 3a    	bra       NZ, 0x2e8e <.L99>

00002ea6 <.LSM288>:
    uart_flushTxBuffer(self);
    2ea6:	1e 00 78    	mov.w     [w14], w0
    2ea8:	db ff 07    	rcall     0x2e60 <_uart_flushTxBuffer>

00002eaa <.LSM289>:
}
    2eaa:	00 80 fa    	ulnk      
    2eac:	00 00 06    	return    

00002eae <_uart_gets_term>:

void uart_gets_term(_UART *self, uint8_t *str, uint16_t len) {
    2eae:	0a 00 fa    	lnk       #0xa
    2eb0:	20 07 98    	mov.w     w0, [w14+4]
    2eb2:	31 07 98    	mov.w     w1, [w14+6]
    2eb4:	42 07 98    	mov.w     w2, [w14+8]

00002eb6 <.LSM291>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2eb6:	4e 00 90    	mov.w     [w14+8], w0
    2eb8:	00 00 e0    	cp0.w     w0
    2eba:	87 00 32    	bra       Z, 0x2fca <.L113>

00002ebc <.LSM292>:
        return;

    if (len==1) {
    2ebc:	4e 00 90    	mov.w     [w14+8], w0
    2ebe:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2ec0:	04 00 3a    	bra       NZ, 0x2eca <.L103>

00002ec2 <.LSM293>:
        *str = '\0';
    2ec2:	3e 00 90    	mov.w     [w14+6], w0
    2ec4:	80 40 eb    	clr.b     w1
    2ec6:	01 48 78    	mov.b     w1, [w0]

00002ec8 <.LSM294>:
        return;
    2ec8:	81 00 37    	bra       0x2fcc <.L100>

00002eca <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2eca:	b1 c1 b3    	mov.b     #0x1b, w1
    2ecc:	2e 00 90    	mov.w     [w14+4], w0
    2ece:	ac ff 07    	rcall     0x2e28 <_uart_putc>

00002ed0 <.LSM296>:
    uart_putc(self, '7');
    2ed0:	71 c3 b3    	mov.b     #0x37, w1
    2ed2:	2e 00 90    	mov.w     [w14+4], w0
    2ed4:	a9 ff 07    	rcall     0x2e28 <_uart_putc>

00002ed6 <.LSM297>:
    uart_flushTxBuffer(self);
    2ed6:	2e 00 90    	mov.w     [w14+4], w0
    2ed8:	c3 ff 07    	rcall     0x2e60 <_uart_flushTxBuffer>

00002eda <.LSM298>:
    start = str;
    2eda:	be 00 90    	mov.w     [w14+6], w1
    2edc:	11 07 98    	mov.w     w1, [w14+2]

00002ede <.LSM299>:
    left = len;
    2ede:	ce 00 90    	mov.w     [w14+8], w1
    2ee0:	01 0f 78    	mov.w     w1, [w14]
    2ee2:	03 00 37    	bra       0x2eea <.L112>

00002ee4 <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2ee4:	00 00 00    	nop       
    2ee6:	01 00 37    	bra       0x2eea <.L112>

00002ee8 <.L115>:
    2ee8:	00 00 00    	nop       

00002eea <.L112>:
    2eea:	2e 00 90    	mov.w     [w14+4], w0
    2eec:	ab ff 07    	rcall     0x2e44 <_uart_getc>
    2eee:	be 00 90    	mov.w     [w14+6], w1
    2ef0:	80 48 78    	mov.b     w0, [w1]

00002ef2 <.LSM302>:
    2ef2:	3e 00 90    	mov.w     [w14+6], w0
    2ef4:	10 40 78    	mov.b     [w0], w0
    2ef6:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2ef8:	0c 00 3a    	bra       NZ, 0x2f12 <.L104>

00002efa <.LSM303>:

    *str = '\0';                            // Terminarte the string with null
    2efa:	3e 00 90    	mov.w     [w14+6], w0
    2efc:	80 40 eb    	clr.b     w1
    2efe:	01 48 78    	mov.b     w1, [w0]

00002f00 <.LSM304>:
    uart_putc(self, '\n');                  // Send newline and
    2f00:	a1 c0 b3    	mov.b     #0xa, w1
    2f02:	2e 00 90    	mov.w     [w14+4], w0
    2f04:	91 ff 07    	rcall     0x2e28 <_uart_putc>

00002f06 <.LSM305>:
    uart_putc(self, '\r');                  //   carriage return
    2f06:	d1 c0 b3    	mov.b     #0xd, w1
    2f08:	2e 00 90    	mov.w     [w14+4], w0
    2f0a:	8e ff 07    	rcall     0x2e28 <_uart_putc>

00002f0c <.LSM306>:
    uart_flushTxBuffer(self);
    2f0c:	2e 00 90    	mov.w     [w14+4], w0
    2f0e:	a8 ff 07    	rcall     0x2e60 <_uart_flushTxBuffer>
    2f10:	5d 00 37    	bra       0x2fcc <.L100>

00002f12 <.L104>:
    2f12:	3e 00 90    	mov.w     [w14+6], w0
    2f14:	10 40 78    	mov.b     [w0], w0
    2f16:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2f18:	16 00 3a    	bra       NZ, 0x2f46 <.L105>

00002f1a <.LSM308>:
    2f1a:	b1 c1 b3    	mov.b     #0x1b, w1
    2f1c:	2e 00 90    	mov.w     [w14+4], w0
    2f1e:	84 ff 07    	rcall     0x2e28 <_uart_putc>

00002f20 <.LSM309>:
    2f20:	81 c3 b3    	mov.b     #0x38, w1
    2f22:	2e 00 90    	mov.w     [w14+4], w0
    2f24:	81 ff 07    	rcall     0x2e28 <_uart_putc>

00002f26 <.LSM310>:
    2f26:	b1 c1 b3    	mov.b     #0x1b, w1
    2f28:	2e 00 90    	mov.w     [w14+4], w0
    2f2a:	7e ff 07    	rcall     0x2e28 <_uart_putc>

00002f2c <.LSM311>:
    2f2c:	b1 c5 b3    	mov.b     #0x5b, w1
    2f2e:	2e 00 90    	mov.w     [w14+4], w0
    2f30:	7b ff 07    	rcall     0x2e28 <_uart_putc>

00002f32 <.LSM312>:
    2f32:	b1 c4 b3    	mov.b     #0x4b, w1
    2f34:	2e 00 90    	mov.w     [w14+4], w0
    2f36:	78 ff 07    	rcall     0x2e28 <_uart_putc>

00002f38 <.LSM313>:
    2f38:	2e 00 90    	mov.w     [w14+4], w0
    2f3a:	92 ff 07    	rcall     0x2e60 <_uart_flushTxBuffer>

00002f3c <.LSM314>:
    2f3c:	9e 00 90    	mov.w     [w14+2], w1
    2f3e:	31 07 98    	mov.w     w1, [w14+6]

00002f40 <.LSM315>:
    2f40:	ce 00 90    	mov.w     [w14+8], w1
    2f42:	01 0f 78    	mov.w     w1, [w14]

00002f44 <.LSM316>:
    2f44:	41 00 37    	bra       0x2fc8 <.L106>

00002f46 <.L105>:
    2f46:	3e 00 90    	mov.w     [w14+6], w0
    2f48:	10 40 78    	mov.b     [w0], w0
    2f4a:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2f4c:	05 00 32    	bra       Z, 0x2f58 <.L107>

00002f4e <.LSM318>:
    2f4e:	3e 00 90    	mov.w     [w14+6], w0
    2f50:	90 40 78    	mov.b     [w0], w1

00002f52 <.LSM319>:
    2f52:	f0 c7 b3    	mov.b     #0x7f, w0
    2f54:	80 cf 50    	sub.b     w1, w0, [w15]
    2f56:	1a 00 3a    	bra       NZ, 0x2f8c <.L108>

00002f58 <.L107>:
    2f58:	be 00 90    	mov.w     [w14+6], w1
    2f5a:	1e 00 90    	mov.w     [w14+2], w0
    2f5c:	80 8f 50    	sub.w     w1, w0, [w15]
    2f5e:	10 00 36    	bra       LEU, 0x2f80 <.L109>

00002f60 <.LSM321>:
    2f60:	81 c0 b3    	mov.b     #0x8, w1
    2f62:	2e 00 90    	mov.w     [w14+4], w0
    2f64:	61 ff 07    	rcall     0x2e28 <_uart_putc>

00002f66 <.LSM322>:
    2f66:	01 c2 b3    	mov.b     #0x20, w1
    2f68:	2e 00 90    	mov.w     [w14+4], w0
    2f6a:	5e ff 07    	rcall     0x2e28 <_uart_putc>

00002f6c <.LSM323>:
    2f6c:	81 c0 b3    	mov.b     #0x8, w1
    2f6e:	2e 00 90    	mov.w     [w14+4], w0
    2f70:	5b ff 07    	rcall     0x2e28 <_uart_putc>

00002f72 <.LSM324>:
    2f72:	2e 00 90    	mov.w     [w14+4], w0
    2f74:	75 ff 07    	rcall     0x2e60 <_uart_flushTxBuffer>

00002f76 <.LSM325>:
    2f76:	3e 00 90    	mov.w     [w14+6], w0
    2f78:	00 00 e9    	dec.w     w0, w0
    2f7a:	30 07 98    	mov.w     w0, [w14+6]

00002f7c <.LSM326>:
    2f7c:	1e 0f e8    	inc.w     [w14], [w14]
    2f7e:	05 00 37    	bra       0x2f8a <.L110>

00002f80 <.L109>:
    2f80:	71 c0 b3    	mov.b     #0x7, w1
    2f82:	2e 00 90    	mov.w     [w14+4], w0
    2f84:	51 ff 07    	rcall     0x2e28 <_uart_putc>

00002f86 <.LSM328>:
    2f86:	2e 00 90    	mov.w     [w14+4], w0
    2f88:	6b ff 07    	rcall     0x2e60 <_uart_flushTxBuffer>

00002f8a <.L110>:
    2f8a:	1e 00 37    	bra       0x2fc8 <.L106>

00002f8c <.L108>:
    2f8c:	1e 00 78    	mov.w     [w14], w0
    2f8e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2f90:	06 00 3a    	bra       NZ, 0x2f9e <.L111>

00002f92 <.LSM331>:
    2f92:	71 c0 b3    	mov.b     #0x7, w1
    2f94:	2e 00 90    	mov.w     [w14+4], w0
    2f96:	48 ff 07    	rcall     0x2e28 <_uart_putc>

00002f98 <.LSM332>:
    2f98:	2e 00 90    	mov.w     [w14+4], w0
    2f9a:	62 ff 07    	rcall     0x2e60 <_uart_flushTxBuffer>

00002f9c <.LSM333>:
    2f9c:	15 00 37    	bra       0x2fc8 <.L106>

00002f9e <.L111>:
    2f9e:	3e 00 90    	mov.w     [w14+6], w0
    2fa0:	10 40 78    	mov.b     [w0], w0
    2fa2:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2fa4:	9f ff 36    	bra       LEU, 0x2ee4 <.L114>
    2fa6:	3e 00 90    	mov.w     [w14+6], w0
    2fa8:	90 40 78    	mov.b     [w0], w1
    2faa:	e0 c7 b3    	mov.b     #0x7e, w0
    2fac:	80 cf 50    	sub.b     w1, w0, [w15]
    2fae:	9c ff 3e    	bra       GTU, 0x2ee8 <.L115>

00002fb0 <.LSM335>:
    2fb0:	3e 00 90    	mov.w     [w14+6], w0
    2fb2:	10 40 78    	mov.b     [w0], w0
    2fb4:	80 40 78    	mov.b     w0, w1
    2fb6:	2e 00 90    	mov.w     [w14+4], w0
    2fb8:	37 ff 07    	rcall     0x2e28 <_uart_putc>

00002fba <.LSM336>:
    2fba:	2e 00 90    	mov.w     [w14+4], w0
    2fbc:	51 ff 07    	rcall     0x2e60 <_uart_flushTxBuffer>

00002fbe <.LSM337>:
    2fbe:	3e 00 90    	mov.w     [w14+6], w0
    2fc0:	00 00 e8    	inc.w     w0, w0
    2fc2:	30 07 98    	mov.w     w0, [w14+6]

00002fc4 <.LSM338>:
    2fc4:	1e 0f e9    	dec.w     [w14], [w14]

00002fc6 <.LSM339>:
    2fc6:	91 ff 37    	bra       0x2eea <.L112>

00002fc8 <.L106>:
    2fc8:	90 ff 37    	bra       0x2eea <.L112>

00002fca <.L113>:
    2fca:	00 00 00    	nop       

00002fcc <.L100>:
}
    2fcc:	00 80 fa    	ulnk      
    2fce:	00 00 06    	return    

00002fd0 <_uart_gets>:


void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2fd0:	0c 00 fa    	lnk       #0xc
    2fd2:	30 07 98    	mov.w     w0, [w14+6]
    2fd4:	41 07 98    	mov.w     w1, [w14+8]
    2fd6:	52 07 98    	mov.w     w2, [w14+10]

00002fd8 <.LSM343>:
    uint8_t *start;
    uint16_t left;
    uint8_t char_count = 0;
    2fd8:	00 40 eb    	clr.b     w0
    2fda:	00 4f 78    	mov.b     w0, [w14]

00002fdc <.LSM344>:

    if (len==0)
    2fdc:	5e 00 90    	mov.w     [w14+10], w0
    2fde:	00 00 e0    	cp0.w     w0
    2fe0:	2f 00 32    	bra       Z, 0x3040 <.L125>

00002fe2 <.LSM345>:
        return;

    if (len==1) {
    2fe2:	5e 00 90    	mov.w     [w14+10], w0
    2fe4:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2fe6:	04 00 3a    	bra       NZ, 0x2ff0 <.L119>

00002fe8 <.LSM346>:
        *str = '\0';
    2fe8:	4e 00 90    	mov.w     [w14+8], w0
    2fea:	80 40 eb    	clr.b     w1
    2fec:	01 48 78    	mov.b     w1, [w0]

00002fee <.LSM347>:
        return;
    2fee:	29 00 37    	bra       0x3042 <.L116>

00002ff0 <.L119>:
    }

    // uart_flushTxBuffer(self);
    start = str;
    2ff0:	ce 00 90    	mov.w     [w14+8], w1
    2ff2:	11 07 98    	mov.w     w1, [w14+2]

00002ff4 <.LSM349>:
    left = len;
    2ff4:	de 00 90    	mov.w     [w14+10], w1
    2ff6:	21 07 98    	mov.w     w1, [w14+4]
    2ff8:	03 00 37    	bra       0x3000

00002ffa <.L128>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        char_count ++;
        if (*str=='\r') {                     // If character is return,
            break;
        }
        if (char_count >= UART_MSG_MAX_LEN) { // Terminate if max length reached.
            break;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            str++;                          //   and advance the pointer.

        }
    }
    2ffa:	00 00 00    	nop       
    2ffc:	01 00 37    	bra       0x3000

00002ffe <.L129>:
    2ffe:	00 00 00    	nop       

00003000 <.L124>:
    3000:	3e 00 90    	mov.w     [w14+6], w0
    3002:	20 ff 07    	rcall     0x2e44 <_uart_getc>
    3004:	ce 00 90    	mov.w     [w14+8], w1
    3006:	80 48 78    	mov.b     w0, [w1]

00003008 <.LSM352>:
    3008:	1e 4f e8    	inc.b     [w14], [w14]

0000300a <.LSM353>:
    300a:	4e 00 90    	mov.w     [w14+8], w0
    300c:	10 40 78    	mov.b     [w0], w0
    300e:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3010:	10 00 32    	bra       Z, 0x3032 <.L126>

00003012 <.LSM354>:
    3012:	1e 40 78    	mov.b     [w14], w0
    3014:	00 04 e0    	cp0.b     w0
    3016:	0f 00 35    	bra       LT, 0x3036 <.L127>

00003018 <.LSM355>:
    3018:	4e 00 90    	mov.w     [w14+8], w0
    301a:	10 40 78    	mov.b     [w0], w0
    301c:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    301e:	ed ff 36    	bra       LEU, 0x2ffa <.L128>
    3020:	4e 00 90    	mov.w     [w14+8], w0
    3022:	90 40 78    	mov.b     [w0], w1
    3024:	e0 c7 b3    	mov.b     #0x7e, w0
    3026:	80 cf 50    	sub.b     w1, w0, [w15]
    3028:	ea ff 3e    	bra       GTU, 0x2ffe <.L129>

0000302a <.LSM356>:
    302a:	4e 00 90    	mov.w     [w14+8], w0
    302c:	00 00 e8    	inc.w     w0, w0
    302e:	40 07 98    	mov.w     w0, [w14+8]

00003030 <.LSM357>:
    3030:	e7 ff 37    	bra       0x3000

00003032 <.L126>:
    3032:	00 00 00    	nop       
    3034:	01 00 37    	bra       0x3038 <.L121>

00003036 <.L127>:
    3036:	00 00 00    	nop       

00003038 <.L121>:
    *str = '\0';  
    3038:	4e 00 90    	mov.w     [w14+8], w0
    303a:	80 40 eb    	clr.b     w1
    303c:	01 48 78    	mov.b     w1, [w0]
    303e:	01 00 37    	bra       0x3042 <.L116>

00003040 <.L125>:
    3040:	00 00 00    	nop       

00003042 <.L116>:
}         
    3042:	00 80 fa    	ulnk      
    3044:	00 00 06    	return    

00003046 <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    3046:	04 00 fa    	lnk       #0x4

00003048 <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    3048:	94 24 a8    	bset.b    0x494, #0x1

0000304a <.LSM2>:
    U1ADDR = 0;
    304a:	96 24 ef    	clr.w     0x496

0000304c <.LSM3>:
    U1EIR = 0xFF;
    304c:	f0 0f 20    	mov.w     #0xff, w0
    304e:	70 24 88    	mov.w     w0, 0x48e

00003050 <.LSM4>:
    U1CONbits.PPBRST = 0;
    3050:	94 24 a9    	bclr.b    0x494, #0x1

00003052 <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    3052:	a0 4a 20    	mov.w     #0x4aa, w0
    3054:	10 07 98    	mov.w     w0, [w14+2]

00003056 <.LSM6>:
    for (n = 0; n<16; n++)
    3056:	00 40 eb    	clr.b     w0
    3058:	00 4f 78    	mov.b     w0, [w14]
    305a:	07 00 37    	bra       0x306a <.L2>

0000305c <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    305c:	1e 80 fb    	ze        [w14], w0
    305e:	00 00 40    	add.w     w0, w0, w0
    3060:	9e 00 90    	mov.w     [w14+2], w1
    3062:	00 80 40    	add.w     w1, w0, w0
    3064:	80 00 eb    	clr.w     w1
    3066:	01 08 78    	mov.w     w1, [w0]

00003068 <.LSM8>:
    3068:	1e 4f e8    	inc.b     [w14], [w14]

0000306a <.L2>:
    306a:	1e 40 78    	mov.b     [w14], w0
    306c:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    306e:	f6 ff 36    	bra       LEU, 0x305c <.L3>

00003070 <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    3070:	d0 00 20    	mov.w     #0xd, w0
    3072:	50 25 88    	mov.w     w0, 0x4aa

00003074 <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    3074:	00 e0 21    	mov.w     #0x1e00, w0
    3076:	01 c4 b3    	mov.b     #0x40, w1
    3078:	01 48 78    	mov.b     w1, [w0]

0000307a <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    307a:	20 c0 21    	mov.w     #0x1c02, w0
    307c:	10 f0 88    	mov.w     w0, 0x1e02

0000307e <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    307e:	10 e0 21    	mov.w     #0x1e01, w0
    3080:	81 c8 b3    	mov.b     #0x88, w1
    3082:	01 48 78    	mov.b     w1, [w0]

00003084 <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    3084:	20 c4 21    	mov.w     #0x1c42, w0
    3086:	30 f0 88    	mov.w     w0, 0x1e06

00003088 <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    3088:	50 e0 21    	mov.w     #0x1e05, w0
    308a:	81 c0 b3    	mov.b     #0x8, w1
    308c:	01 48 78    	mov.b     w1, [w0]

0000308e <.LSM15>:
    U1CNFG1 = 0x00;
    308e:	a6 24 ef    	clr.w     0x4a6

00003090 <.LSM16>:
    U1CNFG2 = 0x00;
    3090:	a8 24 ef    	clr.w     0x4a8

00003092 <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    3092:	00 e0 21    	mov.w     #0x1e00, w0
    3094:	48 00 de    	lsr.w     w0, #0x8, w0
    3096:	c0 24 88    	mov.w     w0, 0x498

00003098 <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    3098:	86 44 a8    	bset.b    0x486, #0x2

0000309a <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    309a:	86 e4 a8    	bset.b    0x486, #0x7

0000309c <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    309c:	88 04 a8    	bset.b    0x488, #0x0

0000309e <.LSM21>:
    U1CONbits.PKTDIS = 0;
    309e:	94 a4 a9    	bclr.b    0x494, #0x5

000030a0 <.LSM22>:
    USB_curr_config = 0x00;
    30a0:	3d 68 ef    	clr.b     0x83d

000030a2 <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    30a2:	40 68 ef    	clr.b     0x840

000030a4 <.LSM24>:
    USB_device_status = 0x01;
    30a4:	10 c0 b3    	mov.b     #0x1, w0
    30a6:	3e e8 b7    	mov.b     WREG, 0x83e

000030a8 <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    30a8:	20 c8 21    	mov.w     #0x1c82, w0
    30aa:	80 c0 eb    	setm.b    w1
    30ac:	01 48 78    	mov.b     w1, [w0]

000030ae <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    30ae:	30 c8 21    	mov.w     #0x1c83, w0
    30b0:	80 c0 eb    	setm.b    w1
    30b2:	01 48 78    	mov.b     w1, [w0]

000030b4 <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    30b4:	00 00 00    	nop       

000030b6 <.L4>:
    30b6:	a1 24 80    	mov.w     0x494, w1
    30b8:	00 04 20    	mov.w     #0x40, w0
    30ba:	00 80 60    	and.w     w1, w0, w0
    30bc:	00 00 e0    	cp0.w     w0
    30be:	fb ff 3a    	bra       NZ, 0x30b6 <.L4>

000030c0 <.LSM28>:
}
    30c0:	00 80 fa    	ulnk      
    30c2:	00 00 06    	return    

000030c4 <_ServiceUSB>:

void ServiceUSB(void) {
    30c4:	06 00 fa    	lnk       #0x6

000030c6 <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    30c6:	50 24 80    	mov.w     0x48a, w0
    30c8:	62 00 60    	and.w     w0, #0x2, w0
    30ca:	00 00 e0    	cp0.w     w0
    30cc:	05 00 32    	bra       Z, 0x30d8 <.L6>

000030ce <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    30ce:	f0 0f 20    	mov.w     #0xff, w0
    30d0:	70 24 88    	mov.w     w0, 0x48e

000030d2 <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    30d2:	20 00 20    	mov.w     #0x2, w0
    30d4:	50 24 88    	mov.w     w0, 0x48a
    30d6:	90 00 37    	bra       0x31f8 <.L5>

000030d8 <.L6>:
    } else if (U1IRbits.SOFIF) {
    30d8:	50 24 80    	mov.w     0x48a, w0
    30da:	64 00 60    	and.w     w0, #0x4, w0
    30dc:	00 00 e0    	cp0.w     w0
    30de:	03 00 32    	bra       Z, 0x30e6 <.L8>

000030e0 <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    30e0:	40 00 20    	mov.w     #0x4, w0
    30e2:	50 24 88    	mov.w     w0, 0x48a
    30e4:	89 00 37    	bra       0x31f8 <.L5>

000030e6 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    30e6:	50 24 80    	mov.w     0x48a, w0
    30e8:	70 00 60    	and.w     w0, #0x10, w0
    30ea:	00 00 e0    	cp0.w     w0
    30ec:	03 00 32    	bra       Z, 0x30f4 <.L9>

000030ee <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    30ee:	00 01 20    	mov.w     #0x10, w0
    30f0:	50 24 88    	mov.w     w0, 0x48a
    30f2:	82 00 37    	bra       0x31f8 <.L5>

000030f4 <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    30f4:	51 24 80    	mov.w     0x48a, w1
    30f6:	00 02 20    	mov.w     #0x20, w0
    30f8:	00 80 60    	and.w     w1, w0, w0
    30fa:	00 00 e0    	cp0.w     w0
    30fc:	03 00 32    	bra       Z, 0x3104 <.L10>

000030fe <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    30fe:	00 02 20    	mov.w     #0x20, w0
    3100:	50 24 88    	mov.w     w0, 0x48a
    3102:	7a 00 37    	bra       0x31f8 <.L5>

00003104 <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    3104:	51 24 80    	mov.w     0x48a, w1
    3106:	00 08 20    	mov.w     #0x80, w0
    3108:	00 80 60    	and.w     w1, w0, w0
    310a:	00 00 e0    	cp0.w     w0
    310c:	03 00 32    	bra       Z, 0x3114 <.L11>

0000310e <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    310e:	00 08 20    	mov.w     #0x80, w0
    3110:	50 24 88    	mov.w     w0, 0x48a
    3112:	72 00 37    	bra       0x31f8 <.L5>

00003114 <.L11>:
    } else if (U1IRbits.URSTIF) {
    3114:	50 24 80    	mov.w     0x48a, w0
    3116:	61 00 60    	and.w     w0, #0x1, w0
    3118:	00 00 e0    	cp0.w     w0
    311a:	34 00 32    	bra       Z, 0x3184 <.L12>

0000311c <.LSM42>:
        USB_curr_config = 0x00;
    311c:	3d 68 ef    	clr.b     0x83d

0000311e <.LSM43>:
        while (U1IRbits.TRNIF) {
    311e:	08 00 37    	bra       0x3130 <.L13>

00003120 <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    3120:	80 00 20    	mov.w     #0x8, w0
    3122:	50 24 88    	mov.w     w0, 0x48a

00003124 <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    3124:	00 00 00    	nop       

00003126 <.LSM46>:
            __builtin_nop();
    3126:	00 00 00    	nop       

00003128 <.LSM47>:
            __builtin_nop();
    3128:	00 00 00    	nop       

0000312a <.LSM48>:
            __builtin_nop();
    312a:	00 00 00    	nop       

0000312c <.LSM49>:
            __builtin_nop();
    312c:	00 00 00    	nop       

0000312e <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    312e:	00 00 00    	nop       

00003130 <.L13>:
    3130:	50 24 80    	mov.w     0x48a, w0
    3132:	68 00 60    	and.w     w0, #0x8, w0
    3134:	00 00 e0    	cp0.w     w0
    3136:	f4 ff 3a    	bra       NZ, 0x3120 <.L14>

00003138 <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    3138:	a0 4a 20    	mov.w     #0x4aa, w0
    313a:	10 07 98    	mov.w     w0, [w14+2]

0000313c <.LSM53>:
        for (n = 0; n<16; n++)
    313c:	00 40 eb    	clr.b     w0
    313e:	00 4f 78    	mov.b     w0, [w14]
    3140:	07 00 37    	bra       0x3150 <.L15>

00003142 <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    3142:	1e 80 fb    	ze        [w14], w0
    3144:	00 00 40    	add.w     w0, w0, w0
    3146:	9e 00 90    	mov.w     [w14+2], w1
    3148:	00 80 40    	add.w     w1, w0, w0
    314a:	80 00 eb    	clr.w     w1
    314c:	01 08 78    	mov.w     w1, [w0]

0000314e <.LSM55>:
    314e:	1e 4f e8    	inc.b     [w14], [w14]

00003150 <.L15>:
    3150:	1e 40 78    	mov.b     [w14], w0
    3152:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    3154:	f6 ff 36    	bra       LEU, 0x3142 <.L16>

00003156 <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    3156:	00 e0 21    	mov.w     #0x1e00, w0
    3158:	01 c4 b3    	mov.b     #0x40, w1
    315a:	01 48 78    	mov.b     w1, [w0]

0000315c <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    315c:	20 c0 21    	mov.w     #0x1c02, w0
    315e:	10 f0 88    	mov.w     w0, 0x1e02

00003160 <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    3160:	10 e0 21    	mov.w     #0x1e01, w0
    3162:	81 c8 b3    	mov.b     #0x88, w1
    3164:	01 48 78    	mov.b     w1, [w0]

00003166 <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    3166:	20 c4 21    	mov.w     #0x1c42, w0
    3168:	30 f0 88    	mov.w     w0, 0x1e06

0000316a <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    316a:	50 e0 21    	mov.w     #0x1e05, w0
    316c:	81 c0 b3    	mov.b     #0x8, w1
    316e:	01 48 78    	mov.b     w1, [w0]

00003170 <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    3170:	96 24 ef    	clr.w     0x496

00003172 <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    3172:	f0 0f 20    	mov.w     #0xff, w0
    3174:	50 24 88    	mov.w     w0, 0x48a

00003176 <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    3176:	d0 00 20    	mov.w     #0xd, w0
    3178:	50 25 88    	mov.w     w0, 0x4aa

0000317a <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    317a:	10 c0 b3    	mov.b     #0x1, w0
    317c:	40 e8 b7    	mov.b     WREG, 0x840

0000317e <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    317e:	10 c0 b3    	mov.b     #0x1, w0
    3180:	3e e8 b7    	mov.b     WREG, 0x83e
    3182:	3a 00 37    	bra       0x31f8 <.L5>

00003184 <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    3184:	50 24 80    	mov.w     0x48a, w0
    3186:	68 00 60    	and.w     w0, #0x8, w0
    3188:	00 00 e0    	cp0.w     w0
    318a:	36 00 32    	bra       Z, 0x31f8 <.L5>

0000318c <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    318c:	90 24 80    	mov.w     0x492, w0
    318e:	43 00 de    	lsr.w     w0, #0x3, w0
    3190:	c2 00 dd    	sl.w      w0, #0x2, w1
    3192:	00 e0 21    	mov.w     #0x1e00, w0
    3194:	00 80 40    	add.w     w1, w0, w0
    3196:	20 07 98    	mov.w     w0, [w14+4]

00003198 <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    3198:	2e 00 90    	mov.w     [w14+4], w0
    319a:	10 40 90    	mov.b     [w0+1], w0
    319c:	31 e8 b7    	mov.b     WREG, 0x831

0000319e <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    319e:	2e 00 90    	mov.w     [w14+4], w0
    31a0:	10 40 78    	mov.b     [w0], w0
    31a2:	30 e8 b7    	mov.b     WREG, 0x830

000031a4 <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    31a4:	2e 00 90    	mov.w     [w14+4], w0
    31a6:	10 00 90    	mov.w     [w0+2], w0
    31a8:	90 41 88    	mov.w     w0, 0x832

000031aa <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    31aa:	90 24 80    	mov.w     0x492, w0
    31ac:	00 40 78    	mov.b     w0, w0
    31ae:	3f e8 b7    	mov.b     WREG, 0x83f

000031b0 <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    31b0:	80 00 20    	mov.w     #0x8, w0
    31b2:	50 24 88    	mov.w     w0, 0x48a

000031b4 <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    31b4:	3c 68 ef    	clr.b     0x83c

000031b6 <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    31b6:	31 c8 bf    	mov.b     0x831, WREG
    31b8:	80 80 fb    	ze        w0, w1
    31ba:	c0 03 20    	mov.w     #0x3c, w0
    31bc:	00 80 60    	and.w     w1, w0, w0
    31be:	41 02 20    	mov.w     #0x24, w1
    31c0:	81 0f 50    	sub.w     w0, w1, [w15]
    31c2:	08 00 32    	bra       Z, 0x31d4 <.L19>
    31c4:	41 03 20    	mov.w     #0x34, w1
    31c6:	81 0f 50    	sub.w     w0, w1, [w15]
    31c8:	03 00 32    	bra       Z, 0x31d0 <.L20>
    31ca:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    31cc:	05 00 32    	bra       Z, 0x31d8 <.L18>
    31ce:	05 00 37    	bra       0x31da <.L17>

000031d0 <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    31d0:	15 00 07    	rcall     0x31fc <_ProcessSetupToken>

000031d2 <.LSM76>:
                break;
    31d2:	03 00 37    	bra       0x31da <.L17>

000031d4 <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    31d4:	dc 02 07    	rcall     0x378e <_ProcessInToken>

000031d6 <.LSM78>:
                break;
    31d6:	01 00 37    	bra       0x31da <.L17>

000031d8 <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    31d8:	0e 03 07    	rcall     0x37f6 <_ProcessOutToken>

000031da <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    31da:	3c c8 bf    	mov.b     0x83c, WREG
    31dc:	00 80 fb    	ze        w0, w0
    31de:	61 00 60    	and.w     w0, #0x1, w0
    31e0:	00 40 78    	mov.b     w0, w0
    31e2:	00 04 e0    	cp0.b     w0
    31e4:	09 00 32    	bra       Z, 0x31f8 <.L5>

000031e6 <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    31e6:	00 e0 21    	mov.w     #0x1e00, w0
    31e8:	01 c4 b3    	mov.b     #0x40, w1
    31ea:	01 48 78    	mov.b     w1, [w0]

000031ec <.LSM82>:
            BD[EP0IN].status = 0x84;
    31ec:	50 e0 21    	mov.w     #0x1e05, w0
    31ee:	41 c8 b3    	mov.b     #0x84, w1
    31f0:	01 48 78    	mov.b     w1, [w0]

000031f2 <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    31f2:	10 e0 21    	mov.w     #0x1e01, w0
    31f4:	41 c8 b3    	mov.b     #0x84, w1
    31f6:	01 48 78    	mov.b     w1, [w0]

000031f8 <.L5>:
        }
    }
}
    31f8:	00 80 fa    	ulnk      
    31fa:	00 00 06    	return    

000031fc <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    31fc:	02 00 fa    	lnk       #0x2

000031fe <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    31fe:	91 41 80    	mov.w     0x832, w1
    3200:	01 0f 78    	mov.w     w1, [w14]

00003202 <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    3202:	1e 00 78    	mov.w     [w14], w0
    3204:	90 40 78    	mov.b     [w0], w1
    3206:	40 83 20    	mov.w     #0x834, w0
    3208:	01 48 78    	mov.b     w1, [w0]
    320a:	1e 0f e8    	inc.w     [w14], [w14]

0000320c <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    320c:	1e 00 78    	mov.w     [w14], w0
    320e:	90 40 78    	mov.b     [w0], w1
    3210:	40 83 20    	mov.w     #0x834, w0
    3212:	11 40 98    	mov.b     w1, [w0+1]
    3214:	1e 0f e8    	inc.w     [w14], [w14]

00003216 <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    3216:	1e 00 78    	mov.w     [w14], w0
    3218:	90 40 78    	mov.b     [w0], w1
    321a:	40 83 20    	mov.w     #0x834, w0
    321c:	21 40 98    	mov.b     w1, [w0+2]
    321e:	1e 0f e8    	inc.w     [w14], [w14]

00003220 <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    3220:	1e 00 78    	mov.w     [w14], w0
    3222:	90 40 78    	mov.b     [w0], w1
    3224:	40 83 20    	mov.w     #0x834, w0
    3226:	31 40 98    	mov.b     w1, [w0+3]
    3228:	1e 0f e8    	inc.w     [w14], [w14]

0000322a <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    322a:	1e 00 78    	mov.w     [w14], w0
    322c:	90 40 78    	mov.b     [w0], w1
    322e:	40 83 20    	mov.w     #0x834, w0
    3230:	41 40 98    	mov.b     w1, [w0+4]
    3232:	1e 0f e8    	inc.w     [w14], [w14]

00003234 <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    3234:	1e 00 78    	mov.w     [w14], w0
    3236:	90 40 78    	mov.b     [w0], w1
    3238:	40 83 20    	mov.w     #0x834, w0
    323a:	51 40 98    	mov.b     w1, [w0+5]
    323c:	1e 0f e8    	inc.w     [w14], [w14]

0000323e <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    323e:	1e 00 78    	mov.w     [w14], w0
    3240:	90 40 78    	mov.b     [w0], w1
    3242:	40 83 20    	mov.w     #0x834, w0
    3244:	61 40 98    	mov.b     w1, [w0+6]
    3246:	1e 0f e8    	inc.w     [w14], [w14]

00003248 <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    3248:	1e 00 78    	mov.w     [w14], w0
    324a:	90 40 78    	mov.b     [w0], w1
    324c:	40 83 20    	mov.w     #0x834, w0
    324e:	71 40 98    	mov.b     w1, [w0+7]
    3250:	1e 0f e8    	inc.w     [w14], [w14]

00003252 <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    3252:	00 e0 21    	mov.w     #0x1e00, w0
    3254:	01 c4 b3    	mov.b     #0x40, w1
    3256:	01 48 78    	mov.b     w1, [w0]

00003258 <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    3258:	50 e0 21    	mov.w     #0x1e05, w0
    325a:	81 c0 b3    	mov.b     #0x8, w1
    325c:	01 48 78    	mov.b     w1, [w0]

0000325e <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    325e:	40 83 20    	mov.w     #0x834, w0
    3260:	10 40 78    	mov.b     [w0], w0
    3262:	00 04 e0    	cp0.b     w0
    3264:	06 00 35    	bra       LT, 0x3272 <.L22>
    3266:	40 83 20    	mov.w     #0x834, w0
    3268:	30 00 90    	mov.w     [w0+6], w0
    326a:	00 00 e0    	cp0.w     w0
    326c:	02 00 32    	bra       Z, 0x3272 <.L22>
    326e:	80 cc b3    	mov.b     #0xc8, w0
    3270:	01 00 37    	bra       0x3274 <.L23>

00003272 <.L22>:
    3272:	80 c8 b3    	mov.b     #0x88, w0

00003274 <.L23>:
    3274:	11 e0 21    	mov.w     #0x1e01, w1
    3276:	80 48 78    	mov.b     w0, [w1]

00003278 <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    3278:	94 a4 a9    	bclr.b    0x494, #0x5

0000327a <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    327a:	20 c8 21    	mov.w     #0x1c82, w0
    327c:	80 c0 eb    	setm.b    w1
    327e:	01 48 78    	mov.b     w1, [w0]

00003280 <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    3280:	30 c8 21    	mov.w     #0x1c83, w0
    3282:	80 c0 eb    	setm.b    w1
    3284:	01 48 78    	mov.b     w1, [w0]

00003286 <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    3286:	40 83 20    	mov.w     #0x834, w0
    3288:	10 40 78    	mov.b     [w0], w0
    328a:	80 80 fb    	ze        w0, w1
    328c:	00 06 20    	mov.w     #0x60, w0
    328e:	00 80 60    	and.w     w1, w0, w0
    3290:	00 00 e0    	cp0.w     w0
    3292:	04 00 32    	bra       Z, 0x329c <.L25>
    3294:	01 04 20    	mov.w     #0x40, w1
    3296:	81 0f 50    	sub.w     w0, w1, [w15]
    3298:	03 00 32    	bra       Z, 0x32a0 <.L26>
    329a:	04 00 37    	bra       0x32a4 <.L28>

0000329c <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    329c:	08 00 07    	rcall     0x32ae <_StandardRequests>

0000329e <.LSM103>:
            break;
    329e:	05 00 37    	bra       0x32aa <.L21>

000032a0 <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    32a0:	03 08 07    	rcall     0x42a8 <_VendorRequests>

000032a2 <.LSM105>:
            break;
    32a2:	03 00 37    	bra       0x32aa <.L21>

000032a4 <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    32a4:	3c c8 bf    	mov.b     0x83c, WREG
    32a6:	00 04 a0    	bset.b    w0, #0x0
    32a8:	3c e8 b7    	mov.b     WREG, 0x83c

000032aa <.L21>:
    }
}
    32aa:	00 80 fa    	ulnk      
    32ac:	00 00 06    	return    

000032ae <_StandardRequests>:

void StandardRequests(void) {
    32ae:	06 00 fa    	lnk       #0x6

000032b0 <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    32b0:	40 83 20    	mov.w     #0x834, w0
    32b2:	10 40 90    	mov.b     [w0+1], w0
    32b4:	00 80 fb    	ze        w0, w0
    32b6:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    32b8:	79 01 32    	bra       Z, 0x35ac <.L34>
    32ba:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    32bc:	0c 00 3c    	bra       GT, 0x32d6 <.L39>
    32be:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    32c0:	bf 00 32    	bra       Z, 0x3440 <.L32>
    32c2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    32c4:	03 00 3c    	bra       GT, 0x32cc <.L40>
    32c6:	00 00 e0    	cp0.w     w0
    32c8:	12 00 32    	bra       Z, 0x32ee <.L31>
    32ca:	5c 02 37    	bra       0x3784 <.L30>

000032cc <.L40>:
    32cc:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    32ce:	b8 00 32    	bra       Z, 0x3440 <.L32>
    32d0:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    32d2:	4c 01 32    	bra       Z, 0x356c <.L33>
    32d4:	57 02 37    	bra       0x3784 <.L30>

000032d6 <.L39>:
    32d6:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    32d8:	ef 01 32    	bra       Z, 0x36b8 <.L36>
    32da:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    32dc:	03 00 3c    	bra       GT, 0x32e4 <.L41>
    32de:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    32e0:	e0 01 32    	bra       Z, 0x36a2 <.L35>
    32e2:	50 02 37    	bra       0x3784 <.L30>

000032e4 <.L41>:
    32e4:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    32e6:	12 02 32    	bra       Z, 0x370c <.L37>
    32e8:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    32ea:	2b 02 32    	bra       Z, 0x3742 <.L38>
    32ec:	4b 02 37    	bra       0x3784 <.L30>

000032ee <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    32ee:	40 83 20    	mov.w     #0x834, w0
    32f0:	10 40 78    	mov.b     [w0], w0
    32f2:	00 80 fb    	ze        w0, w0
    32f4:	7f 00 60    	and.w     w0, #0x1f, w0
    32f6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    32f8:	13 00 32    	bra       Z, 0x3320 <.L44>
    32fa:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    32fc:	32 00 32    	bra       Z, 0x3362 <.L45>
    32fe:	00 00 e0    	cp0.w     w0
    3300:	9a 00 3a    	bra       NZ, 0x3436 <.L128>

00003302 <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    3302:	30 f0 80    	mov.w     0x1e06, w0
    3304:	e1 83 20    	mov.w     #0x83e, w1
    3306:	91 40 78    	mov.b     [w1], w1
    3308:	01 48 78    	mov.b     w1, [w0]

0000330a <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    330a:	30 f0 80    	mov.w     0x1e06, w0
    330c:	00 00 e8    	inc.w     w0, w0
    330e:	80 40 eb    	clr.b     w1
    3310:	01 48 78    	mov.b     w1, [w0]

00003312 <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    3312:	40 e0 21    	mov.w     #0x1e04, w0
    3314:	21 c0 b3    	mov.b     #0x2, w1
    3316:	01 48 78    	mov.b     w1, [w0]

00003318 <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    3318:	50 e0 21    	mov.w     #0x1e05, w0
    331a:	81 cc b3    	mov.b     #0xc8, w1
    331c:	01 48 78    	mov.b     w1, [w0]

0000331e <.LSM115>:
                    break;
    331e:	8f 00 37    	bra       0x343e <.L46>

00003320 <.L44>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    3320:	40 c8 bf    	mov.b     0x840, WREG
    3322:	00 80 fb    	ze        w0, w0
    3324:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3326:	03 00 32    	bra       Z, 0x332e <.L48>
    3328:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    332a:	05 00 32    	bra       Z, 0x3336 <.L49>
    332c:	19 00 37    	bra       0x3360 <.L47>

0000332e <.L48>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    332e:	3c c8 bf    	mov.b     0x83c, WREG
    3330:	00 04 a0    	bset.b    w0, #0x0
    3332:	3c e8 b7    	mov.b     WREG, 0x83c

00003334 <.LSM118>:
                            break;
    3334:	15 00 37    	bra       0x3360 <.L47>

00003336 <.L49>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3336:	40 83 20    	mov.w     #0x834, w0
    3338:	40 40 90    	mov.b     [w0+4], w0
    333a:	00 04 e0    	cp0.b     w0
    333c:	0e 00 3a    	bra       NZ, 0x335a <.L50>

0000333e <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    333e:	30 f0 80    	mov.w     0x1e06, w0
    3340:	80 40 eb    	clr.b     w1
    3342:	01 48 78    	mov.b     w1, [w0]

00003344 <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    3344:	30 f0 80    	mov.w     0x1e06, w0
    3346:	00 00 e8    	inc.w     w0, w0
    3348:	80 40 eb    	clr.b     w1
    334a:	01 48 78    	mov.b     w1, [w0]

0000334c <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    334c:	40 e0 21    	mov.w     #0x1e04, w0
    334e:	21 c0 b3    	mov.b     #0x2, w1
    3350:	01 48 78    	mov.b     w1, [w0]

00003352 <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3352:	50 e0 21    	mov.w     #0x1e05, w0
    3354:	81 cc b3    	mov.b     #0xc8, w1
    3356:	01 48 78    	mov.b     w1, [w0]
    3358:	03 00 37    	bra       0x3360 <.L47>

0000335a <.L50>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    335a:	3c c8 bf    	mov.b     0x83c, WREG
    335c:	00 04 a0    	bset.b    w0, #0x0
    335e:	3c e8 b7    	mov.b     WREG, 0x83c

00003360 <.L47>:
                            }
                    }
                    break;
    3360:	6e 00 37    	bra       0x343e <.L46>

00003362 <.L45>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    3362:	40 c8 bf    	mov.b     0x840, WREG
    3364:	00 80 fb    	ze        w0, w0
    3366:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3368:	03 00 32    	bra       Z, 0x3370 <.L52>
    336a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    336c:	29 00 32    	bra       Z, 0x33c0 <.L53>
    336e:	5f 00 37    	bra       0x342e <.L129>

00003370 <.L52>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    3370:	40 83 20    	mov.w     #0x834, w0
    3372:	40 40 90    	mov.b     [w0+4], w0
    3374:	00 80 fb    	ze        w0, w0
    3376:	6f 00 60    	and.w     w0, #0xf, w0
    3378:	00 00 e0    	cp0.w     w0
    337a:	1e 00 3a    	bra       NZ, 0x33b8 <.L54>

0000337c <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    337c:	31 f0 80    	mov.w     0x1e06, w1
    337e:	40 83 20    	mov.w     #0x834, w0
    3380:	40 40 90    	mov.b     [w0+4], w0
    3382:	00 04 e0    	cp0.b     w0
    3384:	07 00 3d    	bra       GE, 0x3394 <.L55>
    3386:	50 e0 21    	mov.w     #0x1e05, w0
    3388:	10 40 78    	mov.b     [w0], w0
    338a:	00 80 fb    	ze        w0, w0
    338c:	64 00 60    	and.w     w0, #0x4, w0
    338e:	42 80 de    	asr.w     w0, #0x2, w0
    3390:	00 40 78    	mov.b     w0, w0
    3392:	06 00 37    	bra       0x33a0 <.L56>

00003394 <.L55>:
    3394:	10 e0 21    	mov.w     #0x1e01, w0
    3396:	10 40 78    	mov.b     [w0], w0
    3398:	00 80 fb    	ze        w0, w0
    339a:	64 00 60    	and.w     w0, #0x4, w0
    339c:	42 80 de    	asr.w     w0, #0x2, w0
    339e:	00 40 78    	mov.b     w0, w0

000033a0 <.L56>:
    33a0:	80 48 78    	mov.b     w0, [w1]

000033a2 <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    33a2:	30 f0 80    	mov.w     0x1e06, w0
    33a4:	00 00 e8    	inc.w     w0, w0
    33a6:	80 40 eb    	clr.b     w1
    33a8:	01 48 78    	mov.b     w1, [w0]

000033aa <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    33aa:	40 e0 21    	mov.w     #0x1e04, w0
    33ac:	21 c0 b3    	mov.b     #0x2, w1
    33ae:	01 48 78    	mov.b     w1, [w0]

000033b0 <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    33b0:	50 e0 21    	mov.w     #0x1e05, w0
    33b2:	81 cc b3    	mov.b     #0xc8, w1
    33b4:	01 48 78    	mov.b     w1, [w0]
    33b6:	03 00 37    	bra       0x33be <.L57>

000033b8 <.L54>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    33b8:	3c c8 bf    	mov.b     0x83c, WREG
    33ba:	00 04 a0    	bset.b    w0, #0x0
    33bc:	3c e8 b7    	mov.b     WREG, 0x83c

000033be <.L57>:
                            }
                            break;
    33be:	3a 00 37    	bra       0x3434 <.L58>

000033c0 <.L53>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    33c0:	a0 4a 20    	mov.w     #0x4aa, w0
    33c2:	10 07 98    	mov.w     w0, [w14+2]

000033c4 <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    33c4:	40 83 20    	mov.w     #0x834, w0
    33c6:	40 40 90    	mov.b     [w0+4], w0
    33c8:	6f 4f 60    	and.b     w0, #0xf, [w14]

000033ca <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    33ca:	1e 80 fb    	ze        [w14], w0
    33cc:	00 00 40    	add.w     w0, w0, w0
    33ce:	80 00 78    	mov.w     w0, w1
    33d0:	40 83 20    	mov.w     #0x834, w0
    33d2:	40 40 90    	mov.b     [w0+4], w0
    33d4:	00 00 fb    	se        w0, w0
    33d6:	4f 00 de    	lsr.w     w0, #0xf, w0
    33d8:	01 00 70    	ior.w     w0, w1, w0
    33da:	c2 00 dd    	sl.w      w0, #0x2, w1
    33dc:	00 e0 21    	mov.w     #0x1e00, w0
    33de:	00 80 40    	add.w     w1, w0, w0
    33e0:	20 07 98    	mov.w     w0, [w14+4]

000033e2 <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    33e2:	1e 80 fb    	ze        [w14], w0
    33e4:	00 00 40    	add.w     w0, w0, w0
    33e6:	9e 00 90    	mov.w     [w14+2], w1
    33e8:	00 80 40    	add.w     w1, w0, w0
    33ea:	90 00 78    	mov.w     [w0], w1
    33ec:	40 83 20    	mov.w     #0x834, w0
    33ee:	40 40 90    	mov.b     [w0+4], w0
    33f0:	00 04 e0    	cp0.b     w0
    33f2:	02 00 3d    	bra       GE, 0x33f8 <.L59>
    33f4:	40 00 20    	mov.w     #0x4, w0
    33f6:	01 00 37    	bra       0x33fa <.L60>

000033f8 <.L59>:
    33f8:	80 00 20    	mov.w     #0x8, w0

000033fa <.L60>:
    33fa:	00 80 60    	and.w     w1, w0, w0
    33fc:	00 00 e0    	cp0.w     w0
    33fe:	13 00 32    	bra       Z, 0x3426 <.L61>

00003400 <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    3400:	30 f0 80    	mov.w     0x1e06, w0
    3402:	ae 00 90    	mov.w     [w14+4], w1
    3404:	91 40 90    	mov.b     [w1+1], w1
    3406:	81 80 fb    	ze        w1, w1
    3408:	e4 80 60    	and.w     w1, #0x4, w1
    340a:	c2 88 de    	asr.w     w1, #0x2, w1
    340c:	81 40 78    	mov.b     w1, w1
    340e:	01 48 78    	mov.b     w1, [w0]

00003410 <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    3410:	30 f0 80    	mov.w     0x1e06, w0
    3412:	00 00 e8    	inc.w     w0, w0
    3414:	80 40 eb    	clr.b     w1
    3416:	01 48 78    	mov.b     w1, [w0]

00003418 <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    3418:	40 e0 21    	mov.w     #0x1e04, w0
    341a:	21 c0 b3    	mov.b     #0x2, w1
    341c:	01 48 78    	mov.b     w1, [w0]

0000341e <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    341e:	50 e0 21    	mov.w     #0x1e05, w0
    3420:	81 cc b3    	mov.b     #0xc8, w1
    3422:	01 48 78    	mov.b     w1, [w0]
    3424:	03 00 37    	bra       0x342c <.L62>

00003426 <.L61>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3426:	3c c8 bf    	mov.b     0x83c, WREG
    3428:	00 04 a0    	bset.b    w0, #0x0
    342a:	3c e8 b7    	mov.b     WREG, 0x83c

0000342c <.L62>:
                            }
                            break;
    342c:	03 00 37    	bra       0x3434 <.L58>

0000342e <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    342e:	3c c8 bf    	mov.b     0x83c, WREG
    3430:	00 04 a0    	bset.b    w0, #0x0
    3432:	3c e8 b7    	mov.b     WREG, 0x83c

00003434 <.L58>:
                    }
                    break;
    3434:	04 00 37    	bra       0x343e <.L46>

00003436 <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    3436:	3c c8 bf    	mov.b     0x83c, WREG
    3438:	00 04 a0    	bset.b    w0, #0x0
    343a:	3c e8 b7    	mov.b     WREG, 0x83c

0000343c <.LSM147>:
            }
            break;
    343c:	a6 01 37    	bra       0x378a <.L29>

0000343e <.L46>:
    343e:	a5 01 37    	bra       0x378a <.L29>

00003440 <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    3440:	40 83 20    	mov.w     #0x834, w0
    3442:	10 40 78    	mov.b     [w0], w0
    3444:	00 80 fb    	ze        w0, w0
    3446:	7f 00 60    	and.w     w0, #0x1f, w0
    3448:	00 00 e0    	cp0.w     w0
    344a:	03 00 32    	bra       Z, 0x3452 <.L65>
    344c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    344e:	1e 00 32    	bra       Z, 0x348c <.L66>
    3450:	88 00 37    	bra       0x3562 <.L130>

00003452 <.L65>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    3452:	40 83 20    	mov.w     #0x834, w0
    3454:	20 40 90    	mov.b     [w0+2], w0
    3456:	00 80 fb    	ze        w0, w0
    3458:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    345a:	14 00 3a    	bra       NZ, 0x3484 <.L131>

0000345c <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    345c:	40 83 20    	mov.w     #0x834, w0
    345e:	10 40 90    	mov.b     [w0+1], w0
    3460:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3462:	06 00 3a    	bra       NZ, 0x3470 <.L69>

00003464 <.LSM151>:
                                USB_device_status &= 0xFE;
    3464:	e1 83 20    	mov.w     #0x83e, w1
    3466:	91 40 78    	mov.b     [w1], w1
    3468:	e0 cf b3    	mov.b     #0xfe, w0
    346a:	00 c0 60    	and.b     w1, w0, w0
    346c:	3e e8 b7    	mov.b     WREG, 0x83e
    346e:	03 00 37    	bra       0x3476 <.L70>

00003470 <.L69>:
                            else
                                USB_device_status |= 0x01;
    3470:	3e c8 bf    	mov.b     0x83e, WREG
    3472:	00 04 a0    	bset.b    w0, #0x0
    3474:	3e e8 b7    	mov.b     WREG, 0x83e

00003476 <.L70>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    3476:	40 e0 21    	mov.w     #0x1e04, w0
    3478:	80 40 eb    	clr.b     w1
    347a:	01 48 78    	mov.b     w1, [w0]

0000347c <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    347c:	50 e0 21    	mov.w     #0x1e05, w0
    347e:	81 cc b3    	mov.b     #0xc8, w1
    3480:	01 48 78    	mov.b     w1, [w0]

00003482 <.LSM155>:
                            break;
    3482:	03 00 37    	bra       0x348a <.L71>

00003484 <.L131>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3484:	3c c8 bf    	mov.b     0x83c, WREG
    3486:	00 04 a0    	bset.b    w0, #0x0
    3488:	3c e8 b7    	mov.b     WREG, 0x83c

0000348a <.L71>:
                    }
                    break;
    348a:	6f 00 37    	bra       0x356a <.L72>

0000348c <.L66>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    348c:	40 c8 bf    	mov.b     0x840, WREG
    348e:	00 80 fb    	ze        w0, w0
    3490:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3492:	03 00 32    	bra       Z, 0x349a <.L74>
    3494:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3496:	12 00 32    	bra       Z, 0x34bc <.L75>
    3498:	60 00 37    	bra       0x355a <.L132>

0000349a <.L74>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    349a:	40 83 20    	mov.w     #0x834, w0
    349c:	40 40 90    	mov.b     [w0+4], w0
    349e:	00 80 fb    	ze        w0, w0
    34a0:	6f 00 60    	and.w     w0, #0xf, w0
    34a2:	00 00 e0    	cp0.w     w0
    34a4:	07 00 3a    	bra       NZ, 0x34b4 <.L76>

000034a6 <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    34a6:	40 e0 21    	mov.w     #0x1e04, w0
    34a8:	80 40 eb    	clr.b     w1
    34aa:	01 48 78    	mov.b     w1, [w0]

000034ac <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    34ac:	50 e0 21    	mov.w     #0x1e05, w0
    34ae:	81 cc b3    	mov.b     #0xc8, w1
    34b0:	01 48 78    	mov.b     w1, [w0]
    34b2:	03 00 37    	bra       0x34ba <.L77>

000034b4 <.L76>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    34b4:	3c c8 bf    	mov.b     0x83c, WREG
    34b6:	00 04 a0    	bset.b    w0, #0x0
    34b8:	3c e8 b7    	mov.b     WREG, 0x83c

000034ba <.L77>:
                            }
                            break;
    34ba:	52 00 37    	bra       0x3560 <.L78>

000034bc <.L75>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    34bc:	a0 4a 20    	mov.w     #0x4aa, w0
    34be:	10 07 98    	mov.w     w0, [w14+2]

000034c0 <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    34c0:	40 83 20    	mov.w     #0x834, w0
    34c2:	40 40 90    	mov.b     [w0+4], w0
    34c4:	6f 4f 60    	and.b     w0, #0xf, [w14]
    34c6:	1e 40 78    	mov.b     [w14], w0
    34c8:	00 04 e0    	cp0.b     w0
    34ca:	3b 00 32    	bra       Z, 0x3542 <.L79>

000034cc <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    34cc:	1e 80 fb    	ze        [w14], w0
    34ce:	00 00 40    	add.w     w0, w0, w0
    34d0:	80 00 78    	mov.w     w0, w1
    34d2:	40 83 20    	mov.w     #0x834, w0
    34d4:	40 40 90    	mov.b     [w0+4], w0
    34d6:	00 00 fb    	se        w0, w0
    34d8:	4f 00 de    	lsr.w     w0, #0xf, w0
    34da:	01 00 70    	ior.w     w0, w1, w0
    34dc:	c2 00 dd    	sl.w      w0, #0x2, w1
    34de:	00 e0 21    	mov.w     #0x1e00, w0
    34e0:	00 80 40    	add.w     w1, w0, w0
    34e2:	20 07 98    	mov.w     w0, [w14+4]

000034e4 <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    34e4:	40 83 20    	mov.w     #0x834, w0
    34e6:	40 40 90    	mov.b     [w0+4], w0
    34e8:	00 04 e0    	cp0.b     w0
    34ea:	16 00 3d    	bra       GE, 0x3518 <.L80>

000034ec <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    34ec:	1e 80 fb    	ze        [w14], w0
    34ee:	00 00 40    	add.w     w0, w0, w0
    34f0:	9e 00 90    	mov.w     [w14+2], w1
    34f2:	00 80 40    	add.w     w1, w0, w0
    34f4:	10 00 78    	mov.w     [w0], w0
    34f6:	64 00 60    	and.w     w0, #0x4, w0
    34f8:	00 00 e0    	cp0.w     w0
    34fa:	0a 00 32    	bra       Z, 0x3510 <.L81>

000034fc <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    34fc:	40 83 20    	mov.w     #0x834, w0
    34fe:	10 40 90    	mov.b     [w0+1], w0
    3500:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3502:	02 00 3a    	bra       NZ, 0x3508 <.L82>
    3504:	00 40 eb    	clr.b     w0
    3506:	01 00 37    	bra       0x350a <.L83>

00003508 <.L82>:
    3508:	40 c8 b3    	mov.b     #0x84, w0

0000350a <.L83>:
    350a:	ae 00 90    	mov.w     [w14+4], w1
    350c:	90 40 98    	mov.b     w0, [w1+1]
    350e:	19 00 37    	bra       0x3542 <.L79>

00003510 <.L81>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3510:	3c c8 bf    	mov.b     0x83c, WREG
    3512:	00 04 a0    	bset.b    w0, #0x0
    3514:	3c e8 b7    	mov.b     WREG, 0x83c
    3516:	15 00 37    	bra       0x3542 <.L79>

00003518 <.L80>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    3518:	1e 80 fb    	ze        [w14], w0
    351a:	00 00 40    	add.w     w0, w0, w0
    351c:	9e 00 90    	mov.w     [w14+2], w1
    351e:	00 80 40    	add.w     w1, w0, w0
    3520:	10 00 78    	mov.w     [w0], w0
    3522:	68 00 60    	and.w     w0, #0x8, w0
    3524:	00 00 e0    	cp0.w     w0
    3526:	0a 00 32    	bra       Z, 0x353c <.L84>

00003528 <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    3528:	40 83 20    	mov.w     #0x834, w0
    352a:	10 40 90    	mov.b     [w0+1], w0
    352c:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    352e:	02 00 3a    	bra       NZ, 0x3534 <.L85>
    3530:	80 c8 b3    	mov.b     #0x88, w0
    3532:	01 00 37    	bra       0x3536 <.L86>

00003534 <.L85>:
    3534:	40 c8 b3    	mov.b     #0x84, w0

00003536 <.L86>:
    3536:	ae 00 90    	mov.w     [w14+4], w1
    3538:	90 40 98    	mov.b     w0, [w1+1]
    353a:	03 00 37    	bra       0x3542 <.L79>

0000353c <.L84>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    353c:	3c c8 bf    	mov.b     0x83c, WREG
    353e:	00 04 a0    	bset.b    w0, #0x0
    3540:	3c e8 b7    	mov.b     WREG, 0x83c

00003542 <.L79>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    3542:	3c c8 bf    	mov.b     0x83c, WREG
    3544:	00 80 fb    	ze        w0, w0
    3546:	61 00 60    	and.w     w0, #0x1, w0
    3548:	00 00 e0    	cp0.w     w0
    354a:	06 00 3a    	bra       NZ, 0x3558 <.L87>

0000354c <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    354c:	40 e0 21    	mov.w     #0x1e04, w0
    354e:	80 40 eb    	clr.b     w1
    3550:	01 48 78    	mov.b     w1, [w0]

00003552 <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    3552:	50 e0 21    	mov.w     #0x1e05, w0
    3554:	81 cc b3    	mov.b     #0xc8, w1
    3556:	01 48 78    	mov.b     w1, [w0]

00003558 <.L87>:
                            }
                            break;
    3558:	03 00 37    	bra       0x3560 <.L78>

0000355a <.L132>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    355a:	3c c8 bf    	mov.b     0x83c, WREG
    355c:	00 04 a0    	bset.b    w0, #0x0
    355e:	3c e8 b7    	mov.b     WREG, 0x83c

00003560 <.L78>:
                    }
                    break;
    3560:	04 00 37    	bra       0x356a <.L72>

00003562 <.L130>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    3562:	3c c8 bf    	mov.b     0x83c, WREG
    3564:	00 04 a0    	bset.b    w0, #0x0
    3566:	3c e8 b7    	mov.b     WREG, 0x83c

00003568 <.LSM181>:
            }
            break;
    3568:	10 01 37    	bra       0x378a <.L29>

0000356a <.L72>:
    356a:	0f 01 37    	bra       0x378a <.L29>

0000356c <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    356c:	40 83 20    	mov.w     #0x834, w0
    356e:	20 40 90    	mov.b     [w0+2], w0
    3570:	00 04 e0    	cp0.b     w0
    3572:	04 00 3d    	bra       GE, 0x357c <.L88>

00003574 <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    3574:	3c c8 bf    	mov.b     0x83c, WREG
    3576:	00 04 a0    	bset.b    w0, #0x0
    3578:	3c e8 b7    	mov.b     WREG, 0x83c

0000357a <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    357a:	07 01 37    	bra       0x378a <.L29>

0000357c <.L88>:
    357c:	40 83 20    	mov.w     #0x834, w0
    357e:	90 40 78    	mov.b     [w0], w1
    3580:	20 c8 21    	mov.w     #0x1c82, w0
    3582:	01 48 78    	mov.b     w1, [w0]

00003584 <.LSM186>:
    3584:	40 83 20    	mov.w     #0x834, w0
    3586:	90 40 90    	mov.b     [w0+1], w1
    3588:	30 c8 21    	mov.w     #0x1c83, w0
    358a:	01 48 78    	mov.b     w1, [w0]

0000358c <.LSM187>:
    358c:	40 83 20    	mov.w     #0x834, w0
    358e:	10 00 90    	mov.w     [w0+2], w0
    3590:	20 e4 88    	mov.w     w0, 0x1c84

00003592 <.LSM188>:
    3592:	40 83 20    	mov.w     #0x834, w0
    3594:	20 00 90    	mov.w     [w0+4], w0
    3596:	30 e4 88    	mov.w     w0, 0x1c86

00003598 <.LSM189>:
    3598:	40 83 20    	mov.w     #0x834, w0
    359a:	30 00 90    	mov.w     [w0+6], w0
    359c:	40 e4 88    	mov.w     w0, 0x1c88

0000359e <.LSM190>:
    359e:	40 e0 21    	mov.w     #0x1e04, w0
    35a0:	80 40 eb    	clr.b     w1
    35a2:	01 48 78    	mov.b     w1, [w0]

000035a4 <.LSM191>:
    35a4:	50 e0 21    	mov.w     #0x1e05, w0
    35a6:	81 cc b3    	mov.b     #0xc8, w1
    35a8:	01 48 78    	mov.b     w1, [w0]

000035aa <.LSM192>:
    35aa:	ef 00 37    	bra       0x378a <.L29>

000035ac <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    35ac:	40 83 20    	mov.w     #0x834, w0
    35ae:	90 40 78    	mov.b     [w0], w1
    35b0:	20 c8 21    	mov.w     #0x1c82, w0
    35b2:	01 48 78    	mov.b     w1, [w0]

000035b4 <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    35b4:	40 83 20    	mov.w     #0x834, w0
    35b6:	90 40 90    	mov.b     [w0+1], w1
    35b8:	30 c8 21    	mov.w     #0x1c83, w0
    35ba:	01 48 78    	mov.b     w1, [w0]

000035bc <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    35bc:	40 83 20    	mov.w     #0x834, w0
    35be:	10 00 90    	mov.w     [w0+2], w0
    35c0:	20 e4 88    	mov.w     w0, 0x1c84

000035c2 <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    35c2:	40 83 20    	mov.w     #0x834, w0
    35c4:	20 00 90    	mov.w     [w0+4], w0
    35c6:	30 e4 88    	mov.w     w0, 0x1c86

000035c8 <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    35c8:	40 83 20    	mov.w     #0x834, w0
    35ca:	30 00 90    	mov.w     [w0+6], w0
    35cc:	40 e4 88    	mov.w     w0, 0x1c88

000035ce <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    35ce:	40 83 20    	mov.w     #0x834, w0
    35d0:	30 40 90    	mov.b     [w0+3], w0
    35d2:	00 80 fb    	ze        w0, w0
    35d4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    35d6:	14 00 32    	bra       Z, 0x3600 <.L92>
    35d8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    35da:	36 00 32    	bra       Z, 0x3648 <.L93>
    35dc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    35de:	5c 00 3a    	bra       NZ, 0x3698 <.L133>

000035e0 <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    35e0:	20 13 2a    	mov.w     #0xa132, w0
    35e2:	50 e4 88    	mov.w     w0, 0x1c8a

000035e4 <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    35e4:	50 e4 80    	mov.w     0x1c8a, w0
    35e6:	10 40 78    	mov.b     [w0], w0
    35e8:	00 80 fb    	ze        w0, w0
    35ea:	60 e4 88    	mov.w     w0, 0x1c8c

000035ec <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    35ec:	40 83 20    	mov.w     #0x834, w0
    35ee:	b0 00 90    	mov.w     [w0+6], w1
    35f0:	60 e4 80    	mov.w     0x1c8c, w0
    35f2:	80 8f 50    	sub.w     w1, w0, [w15]
    35f4:	03 00 31    	bra       C, 0x35fc <.L94>

000035f6 <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    35f6:	40 83 20    	mov.w     #0x834, w0
    35f8:	30 00 90    	mov.w     [w0+6], w0
    35fa:	60 e4 88    	mov.w     w0, 0x1c8c

000035fc <.L94>:
                    }
                    SendDataPacket();
    35fc:	22 01 07    	rcall     0x3842 <_SendDataPacket>

000035fe <.LSM204>:
                    break;
    35fe:	50 00 37    	bra       0x36a0 <.L95>

00003600 <.L92>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    3600:	40 83 20    	mov.w     #0x834, w0
    3602:	20 40 90    	mov.b     [w0+2], w0
    3604:	00 80 fb    	ze        w0, w0
    3606:	00 00 e0    	cp0.w     w0
    3608:	03 00 3a    	bra       NZ, 0x3610 <.L134>

0000360a <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    360a:	40 14 2a    	mov.w     #0xa144, w0
    360c:	50 e4 88    	mov.w     w0, 0x1c8a

0000360e <.LSM207>:
                            break;
    360e:	03 00 37    	bra       0x3616 <.L98>

00003610 <.L134>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    3610:	3c c8 bf    	mov.b     0x83c, WREG
    3612:	00 04 a0    	bset.b    w0, #0x0
    3614:	3c e8 b7    	mov.b     WREG, 0x83c

00003616 <.L98>:
                    }
                    if (!(USB_error_flags&0x01)) {
    3616:	3c c8 bf    	mov.b     0x83c, WREG
    3618:	00 80 fb    	ze        w0, w0
    361a:	61 00 60    	and.w     w0, #0x1, w0
    361c:	00 00 e0    	cp0.w     w0
    361e:	13 00 3a    	bra       NZ, 0x3646 <.L99>

00003620 <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    3620:	50 e4 80    	mov.w     0x1c8a, w0
    3622:	00 80 e8    	inc2.w    w0, w0
    3624:	90 40 78    	mov.b     [w0], w1
    3626:	c0 c8 21    	mov.w     #0x1c8c, w0
    3628:	01 48 78    	mov.b     w1, [w0]

0000362a <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    362a:	50 e4 80    	mov.w     0x1c8a, w0
    362c:	63 00 40    	add.w     w0, #0x3, w0
    362e:	90 40 78    	mov.b     [w0], w1
    3630:	d0 c8 21    	mov.w     #0x1c8d, w0
    3632:	01 48 78    	mov.b     w1, [w0]

00003634 <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    3634:	40 83 20    	mov.w     #0x834, w0
    3636:	b0 00 90    	mov.w     [w0+6], w1
    3638:	60 e4 80    	mov.w     0x1c8c, w0
    363a:	80 8f 50    	sub.w     w1, w0, [w15]
    363c:	03 00 31    	bra       C, 0x3644 <.L100>

0000363e <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    363e:	40 83 20    	mov.w     #0x834, w0
    3640:	30 00 90    	mov.w     [w0+6], w0
    3642:	60 e4 88    	mov.w     w0, 0x1c8c

00003644 <.L100>:
                        }
                        SendDataPacket();
    3644:	fe 00 07    	rcall     0x3842 <_SendDataPacket>

00003646 <.L99>:
                    }
                    break;
    3646:	2c 00 37    	bra       0x36a0 <.L95>

00003648 <.L93>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    3648:	40 83 20    	mov.w     #0x834, w0
    364a:	20 40 90    	mov.b     [w0+2], w0
    364c:	00 80 fb    	ze        w0, w0
    364e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3650:	07 00 32    	bra       Z, 0x3660 <.L103>
    3652:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3654:	08 00 32    	bra       Z, 0x3666 <.L104>
    3656:	00 00 e0    	cp0.w     w0
    3658:	09 00 3a    	bra       NZ, 0x366c <.L135>

0000365a <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    365a:	60 15 2a    	mov.w     #0xa156, w0
    365c:	50 e4 88    	mov.w     w0, 0x1c8a

0000365e <.LSM218>:
                            break;
    365e:	09 00 37    	bra       0x3672 <.L105>

00003660 <.L103>:
                        case 1:
                            USB_request.data_ptr = String1;
    3660:	a0 15 2a    	mov.w     #0xa15a, w0
    3662:	50 e4 88    	mov.w     w0, 0x1c8a

00003664 <.LSM220>:
                            break;
    3664:	06 00 37    	bra       0x3672 <.L105>

00003666 <.L104>:
                        case 2:
                            USB_request.data_ptr = String2;
    3666:	40 17 2a    	mov.w     #0xa174, w0
    3668:	50 e4 88    	mov.w     w0, 0x1c8a

0000366a <.LSM222>:
                            break;
    366a:	03 00 37    	bra       0x3672 <.L105>

0000366c <.L135>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    366c:	3c c8 bf    	mov.b     0x83c, WREG
    366e:	00 04 a0    	bset.b    w0, #0x0
    3670:	3c e8 b7    	mov.b     WREG, 0x83c

00003672 <.L105>:
                    }
                    if (!(USB_error_flags&0x01)) {
    3672:	3c c8 bf    	mov.b     0x83c, WREG
    3674:	00 80 fb    	ze        w0, w0
    3676:	61 00 60    	and.w     w0, #0x1, w0
    3678:	00 00 e0    	cp0.w     w0
    367a:	0d 00 3a    	bra       NZ, 0x3696 <.L106>

0000367c <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    367c:	50 e4 80    	mov.w     0x1c8a, w0
    367e:	10 40 78    	mov.b     [w0], w0
    3680:	00 80 fb    	ze        w0, w0
    3682:	60 e4 88    	mov.w     w0, 0x1c8c

00003684 <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    3684:	40 83 20    	mov.w     #0x834, w0
    3686:	b0 00 90    	mov.w     [w0+6], w1
    3688:	60 e4 80    	mov.w     0x1c8c, w0
    368a:	80 8f 50    	sub.w     w1, w0, [w15]
    368c:	03 00 31    	bra       C, 0x3694 <.L107>

0000368e <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    368e:	40 83 20    	mov.w     #0x834, w0
    3690:	30 00 90    	mov.w     [w0+6], w0
    3692:	60 e4 88    	mov.w     w0, 0x1c8c

00003694 <.L107>:
                        }
                        SendDataPacket();
    3694:	d6 00 07    	rcall     0x3842 <_SendDataPacket>

00003696 <.L106>:
                    }
                    break;
    3696:	04 00 37    	bra       0x36a0 <.L95>

00003698 <.L133>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    3698:	3c c8 bf    	mov.b     0x83c, WREG
    369a:	00 04 a0    	bset.b    w0, #0x0
    369c:	3c e8 b7    	mov.b     WREG, 0x83c

0000369e <.LSM231>:
            }
            break;
    369e:	75 00 37    	bra       0x378a <.L29>

000036a0 <.L95>:
    36a0:	74 00 37    	bra       0x378a <.L29>

000036a2 <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    36a2:	30 f0 80    	mov.w     0x1e06, w0
    36a4:	d1 83 20    	mov.w     #0x83d, w1
    36a6:	91 40 78    	mov.b     [w1], w1
    36a8:	01 48 78    	mov.b     w1, [w0]

000036aa <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    36aa:	40 e0 21    	mov.w     #0x1e04, w0
    36ac:	11 c0 b3    	mov.b     #0x1, w1
    36ae:	01 48 78    	mov.b     w1, [w0]

000036b0 <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    36b0:	50 e0 21    	mov.w     #0x1e05, w0
    36b2:	81 cc b3    	mov.b     #0xc8, w1
    36b4:	01 48 78    	mov.b     w1, [w0]

000036b6 <.LSM235>:
            break;
    36b6:	69 00 37    	bra       0x378a <.L29>

000036b8 <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    36b8:	40 83 20    	mov.w     #0x834, w0
    36ba:	20 40 90    	mov.b     [w0+2], w0
    36bc:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    36be:	22 00 3e    	bra       GTU, 0x3704 <.L108>

000036c0 <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    36c0:	a0 4a 20    	mov.w     #0x4aa, w0
    36c2:	10 07 98    	mov.w     w0, [w14+2]

000036c4 <.LSM238>:
                for (n = 1; n<16; n++)
    36c4:	10 c0 b3    	mov.b     #0x1, w0
    36c6:	00 4f 78    	mov.b     w0, [w14]
    36c8:	07 00 37    	bra       0x36d8 <.L109>

000036ca <.L110>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    36ca:	1e 80 fb    	ze        [w14], w0
    36cc:	00 00 40    	add.w     w0, w0, w0
    36ce:	9e 00 90    	mov.w     [w14+2], w1
    36d0:	00 80 40    	add.w     w1, w0, w0
    36d2:	80 00 eb    	clr.w     w1
    36d4:	01 08 78    	mov.w     w1, [w0]

000036d6 <.LSM240>:
    36d6:	1e 4f e8    	inc.b     [w14], [w14]

000036d8 <.L109>:
    36d8:	1e 40 78    	mov.b     [w14], w0
    36da:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    36dc:	f6 ff 36    	bra       LEU, 0x36ca <.L110>

000036de <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    36de:	40 83 20    	mov.w     #0x834, w0
    36e0:	20 40 90    	mov.b     [w0+2], w0
    36e2:	3d e8 b7    	mov.b     WREG, 0x83d
    36e4:	3d c8 bf    	mov.b     0x83d, WREG
    36e6:	00 80 fb    	ze        w0, w0
    36e8:	00 00 e0    	cp0.w     w0
    36ea:	03 00 3a    	bra       NZ, 0x36f2 <.L136>

000036ec <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    36ec:	20 c0 b3    	mov.b     #0x2, w0
    36ee:	40 e8 b7    	mov.b     WREG, 0x840

000036f0 <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    36f0:	02 00 37    	bra       0x36f6 <.L113>

000036f2 <.L136>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    36f2:	30 c0 b3    	mov.b     #0x3, w0
    36f4:	40 e8 b7    	mov.b     WREG, 0x840

000036f6 <.L113>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    36f6:	40 e0 21    	mov.w     #0x1e04, w0
    36f8:	80 40 eb    	clr.b     w1
    36fa:	01 48 78    	mov.b     w1, [w0]

000036fc <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    36fc:	50 e0 21    	mov.w     #0x1e05, w0
    36fe:	81 cc b3    	mov.b     #0xc8, w1
    3700:	01 48 78    	mov.b     w1, [w0]

00003702 <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    3702:	43 00 37    	bra       0x378a <.L29>

00003704 <.L108>:
    3704:	3c c8 bf    	mov.b     0x83c, WREG
    3706:	00 04 a0    	bset.b    w0, #0x0
    3708:	3c e8 b7    	mov.b     WREG, 0x83c

0000370a <.LSM249>:
    370a:	3f 00 37    	bra       0x378a <.L29>

0000370c <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    370c:	40 c8 bf    	mov.b     0x840, WREG
    370e:	00 80 fb    	ze        w0, w0
    3710:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3712:	13 00 3a    	bra       NZ, 0x373a <.L137>

00003714 <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3714:	40 83 20    	mov.w     #0x834, w0
    3716:	40 40 90    	mov.b     [w0+4], w0
    3718:	00 04 e0    	cp0.b     w0
    371a:	0a 00 3a    	bra       NZ, 0x3730 <.L117>

0000371c <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    371c:	30 f0 80    	mov.w     0x1e06, w0
    371e:	80 40 eb    	clr.b     w1
    3720:	01 48 78    	mov.b     w1, [w0]

00003722 <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    3722:	40 e0 21    	mov.w     #0x1e04, w0
    3724:	11 c0 b3    	mov.b     #0x1, w1
    3726:	01 48 78    	mov.b     w1, [w0]

00003728 <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3728:	50 e0 21    	mov.w     #0x1e05, w0
    372a:	81 cc b3    	mov.b     #0xc8, w1
    372c:	01 48 78    	mov.b     w1, [w0]
    372e:	03 00 37    	bra       0x3736 <.L118>

00003730 <.L117>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    3730:	3c c8 bf    	mov.b     0x83c, WREG
    3732:	00 04 a0    	bset.b    w0, #0x0
    3734:	3c e8 b7    	mov.b     WREG, 0x83c

00003736 <.L118>:
                    }
                    break;
    3736:	00 00 00    	nop       

00003738 <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    3738:	28 00 37    	bra       0x378a <.L29>

0000373a <.L137>:
    373a:	3c c8 bf    	mov.b     0x83c, WREG
    373c:	00 04 a0    	bset.b    w0, #0x0
    373e:	3c e8 b7    	mov.b     WREG, 0x83c

00003740 <.LSM259>:
    3740:	24 00 37    	bra       0x378a <.L29>

00003742 <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    3742:	40 c8 bf    	mov.b     0x840, WREG
    3744:	00 80 fb    	ze        w0, w0
    3746:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3748:	19 00 3a    	bra       NZ, 0x377c <.L138>

0000374a <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    374a:	40 83 20    	mov.w     #0x834, w0
    374c:	40 40 90    	mov.b     [w0+4], w0
    374e:	00 04 e0    	cp0.b     w0
    3750:	10 00 3a    	bra       NZ, 0x3772 <.L122>

00003752 <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    3752:	40 83 20    	mov.w     #0x834, w0
    3754:	20 40 90    	mov.b     [w0+2], w0
    3756:	00 80 fb    	ze        w0, w0
    3758:	00 00 e0    	cp0.w     w0
    375a:	07 00 3a    	bra       NZ, 0x376a <.L139>

0000375c <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    375c:	40 e0 21    	mov.w     #0x1e04, w0
    375e:	80 40 eb    	clr.b     w1
    3760:	01 48 78    	mov.b     w1, [w0]

00003762 <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    3762:	50 e0 21    	mov.w     #0x1e05, w0
    3764:	81 cc b3    	mov.b     #0xc8, w1
    3766:	01 48 78    	mov.b     w1, [w0]

00003768 <.LSM265>:
                                break;
    3768:	07 00 37    	bra       0x3778 <.L126>

0000376a <.L139>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    376a:	3c c8 bf    	mov.b     0x83c, WREG
    376c:	00 04 a0    	bset.b    w0, #0x0
    376e:	3c e8 b7    	mov.b     WREG, 0x83c
    3770:	03 00 37    	bra       0x3778 <.L126>

00003772 <.L122>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    3772:	3c c8 bf    	mov.b     0x83c, WREG
    3774:	00 04 a0    	bset.b    w0, #0x0
    3776:	3c e8 b7    	mov.b     WREG, 0x83c

00003778 <.L126>:
                    }
                    break;
    3778:	00 00 00    	nop       

0000377a <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    377a:	07 00 37    	bra       0x378a <.L29>

0000377c <.L138>:
    377c:	3c c8 bf    	mov.b     0x83c, WREG
    377e:	00 04 a0    	bset.b    w0, #0x0
    3780:	3c e8 b7    	mov.b     WREG, 0x83c

00003782 <.LSM271>:
    3782:	03 00 37    	bra       0x378a <.L29>

00003784 <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    3784:	3c c8 bf    	mov.b     0x83c, WREG
    3786:	00 04 a0    	bset.b    w0, #0x0
    3788:	3c e8 b7    	mov.b     WREG, 0x83c

0000378a <.L29>:
    }
}
    378a:	00 80 fa    	ulnk      
    378c:	00 00 06    	return    

0000378e <_ProcessInToken>:

void ProcessInToken(void) {
    378e:	00 00 fa    	lnk       #0x0

00003790 <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    3790:	3f c8 bf    	mov.b     0x83f, WREG
    3792:	80 80 fb    	ze        w0, w1
    3794:	00 0f 20    	mov.w     #0xf0, w0
    3796:	00 80 60    	and.w     w1, w0, w0
    3798:	00 00 e0    	cp0.w     w0
    379a:	2b 00 3a    	bra       NZ, 0x37f2 <.L140>

0000379c <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    379c:	20 c8 21    	mov.w     #0x1c82, w0
    379e:	10 40 78    	mov.b     [w0], w0
    37a0:	80 80 fb    	ze        w0, w1
    37a2:	00 06 20    	mov.w     #0x60, w0
    37a4:	00 80 60    	and.w     w1, w0, w0
    37a6:	01 02 20    	mov.w     #0x20, w1
    37a8:	81 0f 50    	sub.w     w0, w1, [w15]
    37aa:	1f 00 32    	bra       Z, 0x37ea <.L154>
    37ac:	01 04 20    	mov.w     #0x40, w1
    37ae:	81 0f 50    	sub.w     w0, w1, [w15]
    37b0:	1a 00 32    	bra       Z, 0x37e6 <.L146>
    37b2:	00 00 e0    	cp0.w     w0
    37b4:	1d 00 3a    	bra       NZ, 0x37f0 <.L155>

000037b6 <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    37b6:	30 c8 21    	mov.w     #0x1c83, w0
    37b8:	10 40 78    	mov.b     [w0], w0
    37ba:	00 80 fb    	ze        w0, w0
    37bc:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    37be:	03 00 32    	bra       Z, 0x37c6 <.L148>
    37c0:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    37c2:	0e 00 32    	bra       Z, 0x37e0 <.L149>

000037c4 <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    37c4:	13 00 37    	bra       0x37ec <.L143>

000037c6 <.L148>:
    37c6:	40 c8 21    	mov.w     #0x1c84, w0
    37c8:	10 40 78    	mov.b     [w0], w0
    37ca:	00 80 fb    	ze        w0, w0
    37cc:	b0 24 88    	mov.w     w0, 0x496
    37ce:	b0 24 80    	mov.w     0x496, w0
    37d0:	00 00 e0    	cp0.w     w0
    37d2:	03 00 3a    	bra       NZ, 0x37da <.L153>

000037d4 <.LSM280>:
    37d4:	10 c0 b3    	mov.b     #0x1, w0
    37d6:	40 e8 b7    	mov.b     WREG, 0x840

000037d8 <.LSM281>:
    37d8:	02 00 37    	bra       0x37de <.L152>

000037da <.L153>:
    37da:	20 c0 b3    	mov.b     #0x2, w0
    37dc:	40 e8 b7    	mov.b     WREG, 0x840

000037de <.L152>:
    37de:	02 00 37    	bra       0x37e4 <.L147>

000037e0 <.L149>:
    37e0:	30 00 07    	rcall     0x3842 <_SendDataPacket>

000037e2 <.LSM285>:
    37e2:	00 00 00    	nop       

000037e4 <.L147>:
    37e4:	03 00 37    	bra       0x37ec <.L143>

000037e6 <.L146>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    37e6:	dc 05 07    	rcall     0x43a0 <_VendorRequestsIn>

000037e8 <.LSM288>:
                    break;
    37e8:	01 00 37    	bra       0x37ec <.L143>

000037ea <.L154>:
    37ea:	00 00 00    	nop       

000037ec <.L143>:
            }
            break;
    37ec:	00 00 00    	nop       
    37ee:	01 00 37    	bra       0x37f2 <.L140>

000037f0 <.L155>:
    37f0:	00 00 00    	nop       

000037f2 <.L140>:
    }
}
    37f2:	00 80 fa    	ulnk      
    37f4:	00 00 06    	return    

000037f6 <_ProcessOutToken>:

void ProcessOutToken(void) {
    37f6:	00 00 fa    	lnk       #0x0

000037f8 <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    37f8:	3f c8 bf    	mov.b     0x83f, WREG
    37fa:	80 80 fb    	ze        w0, w1
    37fc:	00 0f 20    	mov.w     #0xf0, w0
    37fe:	00 80 60    	and.w     w1, w0, w0
    3800:	00 00 e0    	cp0.w     w0
    3802:	1d 00 3a    	bra       NZ, 0x383e <.L156>

00003804 <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    3804:	20 c8 21    	mov.w     #0x1c82, w0
    3806:	10 40 78    	mov.b     [w0], w0
    3808:	80 80 fb    	ze        w0, w1
    380a:	00 06 20    	mov.w     #0x60, w0
    380c:	00 80 60    	and.w     w1, w0, w0
    380e:	01 02 20    	mov.w     #0x20, w1
    3810:	81 0f 50    	sub.w     w0, w1, [w15]
    3812:	05 00 32    	bra       Z, 0x381e <.L163>
    3814:	01 04 20    	mov.w     #0x40, w1
    3816:	81 0f 50    	sub.w     w0, w1, [w15]
    3818:	04 00 3a    	bra       NZ, 0x3822 <.L164>

0000381a <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    381a:	c8 05 07    	rcall     0x43ac <_VendorRequestsOut>

0000381c <.LSM296>:
                    break;
    381c:	03 00 37    	bra       0x3824 <.L159>

0000381e <.L163>:
    381e:	00 00 00    	nop       
    3820:	01 00 37    	bra       0x3824 <.L159>

00003822 <.L164>:
    3822:	00 00 00    	nop       

00003824 <.L159>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    3824:	00 e0 21    	mov.w     #0x1e00, w0
    3826:	01 c4 b3    	mov.b     #0x40, w1
    3828:	01 48 78    	mov.b     w1, [w0]

0000382a <.LSM300>:
            BD[EP0OUT].status = 0x88;
    382a:	10 e0 21    	mov.w     #0x1e01, w0
    382c:	81 c8 b3    	mov.b     #0x88, w1
    382e:	01 48 78    	mov.b     w1, [w0]

00003830 <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    3830:	40 e0 21    	mov.w     #0x1e04, w0
    3832:	80 40 eb    	clr.b     w1
    3834:	01 48 78    	mov.b     w1, [w0]

00003836 <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3836:	50 e0 21    	mov.w     #0x1e05, w0
    3838:	81 cc b3    	mov.b     #0xc8, w1
    383a:	01 48 78    	mov.b     w1, [w0]

0000383c <.LSM303>:
            break;
    383c:	00 00 00    	nop       

0000383e <.L156>:
    }
}
    383e:	00 80 fa    	ulnk      
    3840:	00 00 06    	return    

00003842 <_SendDataPacket>:

void SendDataPacket(void) {
    3842:	02 00 fa    	lnk       #0x2

00003844 <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    3844:	61 e4 80    	mov.w     0x1c8c, w1
    3846:	f0 03 20    	mov.w     #0x3f, w0
    3848:	80 8f 50    	sub.w     w1, w0, [w15]
    384a:	0b 00 3e    	bra       GTU, 0x3862 <.L166>

0000384c <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    384c:	60 e4 80    	mov.w     0x1c8c, w0
    384e:	00 4f 78    	mov.b     w0, [w14]

00003850 <.LSM308>:
        USB_request.bytes_left.w = 0;
    3850:	00 00 eb    	clr.w     w0
    3852:	60 e4 88    	mov.w     w0, 0x1c8c

00003854 <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    3854:	20 c8 21    	mov.w     #0x1c82, w0
    3856:	80 c0 eb    	setm.b    w1
    3858:	01 48 78    	mov.b     w1, [w0]

0000385a <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    385a:	30 c8 21    	mov.w     #0x1c83, w0
    385c:	80 c0 eb    	setm.b    w1
    385e:	01 48 78    	mov.b     w1, [w0]
    3860:	05 00 37    	bra       0x386c <.L167>

00003862 <.L166>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    3862:	00 c4 b3    	mov.b     #0x40, w0
    3864:	00 4f 78    	mov.b     w0, [w14]

00003866 <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    3866:	60 e4 80    	mov.w     0x1c8c, w0
    3868:	00 04 b1    	sub.w     #0x40, w0
    386a:	60 e4 88    	mov.w     w0, 0x1c8c

0000386c <.L167>:
    }
    for (n = 0; n<packet_length; n++) {
    386c:	00 40 eb    	clr.b     w0
    386e:	10 47 98    	mov.b     w0, [w14+1]
    3870:	0c 00 37    	bra       0x388a <.L168>

00003872 <.L169>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    3872:	31 f0 80    	mov.w     0x1e06, w1
    3874:	1e 40 90    	mov.b     [w14+1], w0
    3876:	00 80 fb    	ze        w0, w0
    3878:	80 80 40    	add.w     w1, w0, w1
    387a:	50 e4 80    	mov.w     0x1c8a, w0
    387c:	10 41 78    	mov.b     [w0], w2
    387e:	82 48 78    	mov.b     w2, [w1]
    3880:	00 00 e8    	inc.w     w0, w0
    3882:	50 e4 88    	mov.w     w0, 0x1c8a

00003884 <.LSM315>:
    3884:	1e 40 90    	mov.b     [w14+1], w0
    3886:	00 40 e8    	inc.b     w0, w0
    3888:	10 47 98    	mov.b     w0, [w14+1]

0000388a <.L168>:
    388a:	1e 40 90    	mov.b     [w14+1], w0
    388c:	9e 4f 50    	sub.b     w0, [w14], [w15]
    388e:	f1 ff 39    	bra       NC, 0x3872 <.L169>

00003890 <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    3890:	40 e0 21    	mov.w     #0x1e04, w0
    3892:	1e 48 78    	mov.b     [w14], [w0]

00003894 <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    3894:	50 e0 21    	mov.w     #0x1e05, w0
    3896:	10 40 78    	mov.b     [w0], w0
    3898:	00 c0 ea    	com.b     w0, w0
    389a:	02 c4 b3    	mov.b     #0x40, w2
    389c:	82 40 60    	and.b     w0, w2, w1
    389e:	80 c8 b3    	mov.b     #0x88, w0
    38a0:	00 c0 70    	ior.b     w1, w0, w0
    38a2:	80 40 78    	mov.b     w0, w1
    38a4:	50 e0 21    	mov.w     #0x1e05, w0
    38a6:	01 48 78    	mov.b     w1, [w0]

000038a8 <.LSM318>:
}
    38a8:	00 80 fa    	ulnk      
    38aa:	00 00 06    	return    

000038ac <__USB1Interrupt>:

//Making Service USB interrupt driven
void __attribute__((interrupt, auto_psv)) _USB1Interrupt(void) {
    38ac:	36 00 f8    	push      0x36
    38ae:	80 9f be    	mov.d     w0, [w15++]
    38b0:	82 9f be    	mov.d     w2, [w15++]
    38b2:	84 9f be    	mov.d     w4, [w15++]
    38b4:	86 9f be    	mov.d     w6, [w15++]
    38b6:	32 00 f8    	push      0x32
    38b8:	34 00 f8    	push      0x34
    38ba:	10 00 20    	mov.w     #0x1, w0
    38bc:	a0 01 88    	mov.w     w0, 0x34
    38be:	00 20 20    	mov.w     #0x200, w0
    38c0:	90 01 88    	mov.w     w0, 0x32
    38c2:	00 00 fa    	lnk       #0x0

000038c4 <.LSM320>:
    IFS5bits.USB1IF = 0; //flag
    38c4:	8e c0 a9    	bclr.b    0x8e, #0x6

000038c6 <.LSM321>:
    ServiceUSB();
    38c6:	fe fb 07    	rcall     0x30c4 <_ServiceUSB>

000038c8 <.LSM322>:
}
    38c8:	00 80 fa    	ulnk      
    38ca:	34 00 f9    	pop       0x34
    38cc:	32 00 f9    	pop       0x32
    38ce:	4f 03 be    	mov.d     [--w15], w6
    38d0:	4f 02 be    	mov.d     [--w15], w4
    38d2:	4f 01 be    	mov.d     [--w15], w2
    38d4:	4f 00 be    	mov.d     [--w15], w0
    38d6:	36 00 f9    	pop       0x36
    38d8:	00 40 06    	retfie    

000038da <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    38da:	02 00 fa    	lnk       #0x2
    38dc:	00 0f 78    	mov.w     w0, [w14]

000038de <.LSM1>:
    timer_lower(self);
    38de:	1e 00 78    	mov.w     [w14], w0
    38e0:	01 02 07    	rcall     0x3ce4 <_timer_lower>

000038e2 <.LSM2>:
    if (self->every) {
    38e2:	1e 00 78    	mov.w     [w14], w0
    38e4:	10 08 90    	mov.w     [w0+18], w0
    38e6:	00 00 e0    	cp0.w     w0
    38e8:	05 00 32    	bra       Z, 0x38f4 <.L2>

000038ea <.LSM3>:
        self->every(self);
    38ea:	1e 00 78    	mov.w     [w14], w0
    38ec:	90 08 90    	mov.w     [w0+18], w1
    38ee:	1e 00 78    	mov.w     [w14], w0
    38f0:	01 00 01    	call      w1
    38f2:	1a 00 37    	bra       0x3928 <.L1>

000038f4 <.L2>:
    } else if (self->after) {
    38f4:	1e 00 78    	mov.w     [w14], w0
    38f6:	20 08 90    	mov.w     [w0+20], w0
    38f8:	00 00 e0    	cp0.w     w0
    38fa:	14 00 32    	bra       Z, 0x3924 <.L4>

000038fc <.LSM5>:
        if (self->aftercount) {
    38fc:	1e 00 78    	mov.w     [w14], w0
    38fe:	00 08 90    	mov.w     [w0+16], w0
    3900:	00 00 e0    	cp0.w     w0
    3902:	0a 00 32    	bra       Z, 0x3918 <.L5>

00003904 <.LSM6>:
            self->after(self);
    3904:	1e 00 78    	mov.w     [w14], w0
    3906:	a0 08 90    	mov.w     [w0+20], w1
    3908:	1e 00 78    	mov.w     [w14], w0
    390a:	01 00 01    	call      w1

0000390c <.LSM7>:
            self->aftercount--;
    390c:	1e 00 78    	mov.w     [w14], w0
    390e:	00 08 90    	mov.w     [w0+16], w0
    3910:	80 00 e9    	dec.w     w0, w1
    3912:	1e 00 78    	mov.w     [w14], w0
    3914:	01 08 98    	mov.w     w1, [w0+16]
    3916:	08 00 37    	bra       0x3928 <.L1>

00003918 <.L5>:
        } else {
            timer_disableInterrupt(self);
    3918:	1e 00 78    	mov.w     [w14], w0
    391a:	0c 02 07    	rcall     0x3d34 <_timer_disableInterrupt>

0000391c <.LSM9>:
            self->after = NULL;
    391c:	1e 00 78    	mov.w     [w14], w0
    391e:	80 00 eb    	clr.w     w1
    3920:	21 08 98    	mov.w     w1, [w0+20]
    3922:	02 00 37    	bra       0x3928 <.L1>

00003924 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    3924:	1e 00 78    	mov.w     [w14], w0
    3926:	06 02 07    	rcall     0x3d34 <_timer_disableInterrupt>

00003928 <.L1>:
    }
}
    3928:	00 80 fa    	ulnk      
    392a:	00 00 06    	return    

0000392c <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    392c:	36 00 f8    	push      0x36
    392e:	80 9f be    	mov.d     w0, [w15++]
    3930:	82 9f be    	mov.d     w2, [w15++]
    3932:	84 9f be    	mov.d     w4, [w15++]
    3934:	86 9f be    	mov.d     w6, [w15++]
    3936:	32 00 f8    	push      0x32
    3938:	34 00 f8    	push      0x34
    393a:	10 00 20    	mov.w     #0x1, w0
    393c:	a0 01 88    	mov.w     w0, 0x34
    393e:	00 20 20    	mov.w     #0x200, w0
    3940:	90 01 88    	mov.w     w0, 0x32
    3942:	00 00 fa    	lnk       #0x0

00003944 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    3944:	e0 c8 21    	mov.w     #0x1c8e, w0
    3946:	c9 ff 07    	rcall     0x38da <_timer_serviceInterrupt>

00003948 <.LSM14>:
}
    3948:	00 80 fa    	ulnk      
    394a:	34 00 f9    	pop       0x34
    394c:	32 00 f9    	pop       0x32
    394e:	4f 03 be    	mov.d     [--w15], w6
    3950:	4f 02 be    	mov.d     [--w15], w4
    3952:	4f 01 be    	mov.d     [--w15], w2
    3954:	4f 00 be    	mov.d     [--w15], w0
    3956:	36 00 f9    	pop       0x36
    3958:	00 40 06    	retfie    

0000395a <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    395a:	36 00 f8    	push      0x36
    395c:	80 9f be    	mov.d     w0, [w15++]
    395e:	82 9f be    	mov.d     w2, [w15++]
    3960:	84 9f be    	mov.d     w4, [w15++]
    3962:	86 9f be    	mov.d     w6, [w15++]
    3964:	32 00 f8    	push      0x32
    3966:	34 00 f8    	push      0x34
    3968:	10 00 20    	mov.w     #0x1, w0
    396a:	a0 01 88    	mov.w     w0, 0x34
    396c:	00 20 20    	mov.w     #0x200, w0
    396e:	90 01 88    	mov.w     w0, 0x32
    3970:	00 00 fa    	lnk       #0x0

00003972 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    3972:	40 ca 21    	mov.w     #0x1ca4, w0
    3974:	b2 ff 07    	rcall     0x38da <_timer_serviceInterrupt>

00003976 <.LSM17>:
}
    3976:	00 80 fa    	ulnk      
    3978:	34 00 f9    	pop       0x34
    397a:	32 00 f9    	pop       0x32
    397c:	4f 03 be    	mov.d     [--w15], w6
    397e:	4f 02 be    	mov.d     [--w15], w4
    3980:	4f 01 be    	mov.d     [--w15], w2
    3982:	4f 00 be    	mov.d     [--w15], w0
    3984:	36 00 f9    	pop       0x36
    3986:	00 40 06    	retfie    

00003988 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    3988:	36 00 f8    	push      0x36
    398a:	80 9f be    	mov.d     w0, [w15++]
    398c:	82 9f be    	mov.d     w2, [w15++]
    398e:	84 9f be    	mov.d     w4, [w15++]
    3990:	86 9f be    	mov.d     w6, [w15++]
    3992:	32 00 f8    	push      0x32
    3994:	34 00 f8    	push      0x34
    3996:	10 00 20    	mov.w     #0x1, w0
    3998:	a0 01 88    	mov.w     w0, 0x34
    399a:	00 20 20    	mov.w     #0x200, w0
    399c:	90 01 88    	mov.w     w0, 0x32
    399e:	00 00 fa    	lnk       #0x0

000039a0 <.LSM19>:
    timer_serviceInterrupt(&timer3);
    39a0:	a0 cb 21    	mov.w     #0x1cba, w0
    39a2:	9b ff 07    	rcall     0x38da <_timer_serviceInterrupt>

000039a4 <.LSM20>:
}
    39a4:	00 80 fa    	ulnk      
    39a6:	34 00 f9    	pop       0x34
    39a8:	32 00 f9    	pop       0x32
    39aa:	4f 03 be    	mov.d     [--w15], w6
    39ac:	4f 02 be    	mov.d     [--w15], w4
    39ae:	4f 01 be    	mov.d     [--w15], w2
    39b0:	4f 00 be    	mov.d     [--w15], w0
    39b2:	36 00 f9    	pop       0x36
    39b4:	00 40 06    	retfie    

000039b6 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    39b6:	36 00 f8    	push      0x36
    39b8:	80 9f be    	mov.d     w0, [w15++]
    39ba:	82 9f be    	mov.d     w2, [w15++]
    39bc:	84 9f be    	mov.d     w4, [w15++]
    39be:	86 9f be    	mov.d     w6, [w15++]
    39c0:	32 00 f8    	push      0x32
    39c2:	34 00 f8    	push      0x34
    39c4:	10 00 20    	mov.w     #0x1, w0
    39c6:	a0 01 88    	mov.w     w0, 0x34
    39c8:	00 20 20    	mov.w     #0x200, w0
    39ca:	90 01 88    	mov.w     w0, 0x32
    39cc:	00 00 fa    	lnk       #0x0

000039ce <.LSM22>:
    timer_serviceInterrupt(&timer4);
    39ce:	00 cd 21    	mov.w     #0x1cd0, w0
    39d0:	84 ff 07    	rcall     0x38da <_timer_serviceInterrupt>

000039d2 <.LSM23>:
}
    39d2:	00 80 fa    	ulnk      
    39d4:	34 00 f9    	pop       0x34
    39d6:	32 00 f9    	pop       0x32
    39d8:	4f 03 be    	mov.d     [--w15], w6
    39da:	4f 02 be    	mov.d     [--w15], w4
    39dc:	4f 01 be    	mov.d     [--w15], w2
    39de:	4f 00 be    	mov.d     [--w15], w0
    39e0:	36 00 f9    	pop       0x36
    39e2:	00 40 06    	retfie    

000039e4 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    39e4:	36 00 f8    	push      0x36
    39e6:	80 9f be    	mov.d     w0, [w15++]
    39e8:	82 9f be    	mov.d     w2, [w15++]
    39ea:	84 9f be    	mov.d     w4, [w15++]
    39ec:	86 9f be    	mov.d     w6, [w15++]
    39ee:	32 00 f8    	push      0x32
    39f0:	34 00 f8    	push      0x34
    39f2:	10 00 20    	mov.w     #0x1, w0
    39f4:	a0 01 88    	mov.w     w0, 0x34
    39f6:	00 20 20    	mov.w     #0x200, w0
    39f8:	90 01 88    	mov.w     w0, 0x32
    39fa:	00 00 fa    	lnk       #0x0

000039fc <.LSM25>:
    timer_serviceInterrupt(&timer5);
    39fc:	60 ce 21    	mov.w     #0x1ce6, w0
    39fe:	6d ff 07    	rcall     0x38da <_timer_serviceInterrupt>

00003a00 <.LSM26>:
}
    3a00:	00 80 fa    	ulnk      
    3a02:	34 00 f9    	pop       0x34
    3a04:	32 00 f9    	pop       0x32
    3a06:	4f 03 be    	mov.d     [--w15], w6
    3a08:	4f 02 be    	mov.d     [--w15], w4
    3a0a:	4f 01 be    	mov.d     [--w15], w2
    3a0c:	4f 00 be    	mov.d     [--w15], w0
    3a0e:	36 00 f9    	pop       0x36
    3a10:	00 40 06    	retfie    

00003a12 <_init_timer>:

void init_timer(void) {
    3a12:	00 00 fa    	lnk       #0x0

00003a14 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    3a14:	b0 00 20    	mov.w     #0xb, w0
    3a16:	80 1f 78    	mov.w     w0, [w15++]
    3a18:	47 00 20    	mov.w     #0x4, w7
    3a1a:	36 c0 b3    	mov.b     #0x3, w6
    3a1c:	45 09 20    	mov.w     #0x94, w5
    3a1e:	44 08 20    	mov.w     #0x84, w4
    3a20:	03 10 20    	mov.w     #0x100, w3
    3a22:	22 10 20    	mov.w     #0x102, w2
    3a24:	41 10 20    	mov.w     #0x104, w1
    3a26:	e0 c8 21    	mov.w     #0x1c8e, w0
    3a28:	33 00 07    	rcall     0x3a90 <_timer_init>
    3a2a:	8f 87 e9    	dec2.w    w15, w15

00003a2c <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    3a2c:	c0 00 20    	mov.w     #0xc, w0
    3a2e:	80 1f 78    	mov.w     w0, [w15++]
    3a30:	80 03 eb    	clr.w     w7
    3a32:	76 c0 b3    	mov.b     #0x7, w6
    3a34:	45 09 20    	mov.w     #0x94, w5
    3a36:	44 08 20    	mov.w     #0x84, w4
    3a38:	63 10 20    	mov.w     #0x106, w3
    3a3a:	c2 10 20    	mov.w     #0x10c, w2
    3a3c:	01 11 20    	mov.w     #0x110, w1
    3a3e:	40 ca 21    	mov.w     #0x1ca4, w0
    3a40:	27 00 07    	rcall     0x3a90 <_timer_init>
    3a42:	8f 87 e9    	dec2.w    w15, w15

00003a44 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    3a44:	d0 00 20    	mov.w     #0xd, w0
    3a46:	80 1f 78    	mov.w     w0, [w15++]
    3a48:	17 00 20    	mov.w     #0x1, w7
    3a4a:	86 c0 b3    	mov.b     #0x8, w6
    3a4c:	45 09 20    	mov.w     #0x94, w5
    3a4e:	44 08 20    	mov.w     #0x84, w4
    3a50:	a3 10 20    	mov.w     #0x10a, w3
    3a52:	e2 10 20    	mov.w     #0x10e, w2
    3a54:	21 11 20    	mov.w     #0x112, w1
    3a56:	a0 cb 21    	mov.w     #0x1cba, w0
    3a58:	1b 00 07    	rcall     0x3a90 <_timer_init>
    3a5a:	8f 87 e9    	dec2.w    w15, w15

00003a5c <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    3a5c:	e0 00 20    	mov.w     #0xe, w0
    3a5e:	80 1f 78    	mov.w     w0, [w15++]
    3a60:	27 00 20    	mov.w     #0x2, w7
    3a62:	b6 c0 b3    	mov.b     #0xb, w6
    3a64:	65 09 20    	mov.w     #0x96, w5
    3a66:	64 08 20    	mov.w     #0x86, w4
    3a68:	43 11 20    	mov.w     #0x114, w3
    3a6a:	a2 11 20    	mov.w     #0x11a, w2
    3a6c:	e1 11 20    	mov.w     #0x11e, w1
    3a6e:	00 cd 21    	mov.w     #0x1cd0, w0
    3a70:	0f 00 07    	rcall     0x3a90 <_timer_init>
    3a72:	8f 87 e9    	dec2.w    w15, w15

00003a74 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    3a74:	f0 00 20    	mov.w     #0xf, w0
    3a76:	80 1f 78    	mov.w     w0, [w15++]
    3a78:	37 00 20    	mov.w     #0x3, w7
    3a7a:	c6 c0 b3    	mov.b     #0xc, w6
    3a7c:	65 09 20    	mov.w     #0x96, w5
    3a7e:	64 08 20    	mov.w     #0x86, w4
    3a80:	83 11 20    	mov.w     #0x118, w3
    3a82:	c2 11 20    	mov.w     #0x11c, w2
    3a84:	01 12 20    	mov.w     #0x120, w1
    3a86:	60 ce 21    	mov.w     #0x1ce6, w0
    3a88:	03 00 07    	rcall     0x3a90 <_timer_init>
    3a8a:	8f 87 e9    	dec2.w    w15, w15

00003a8c <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    3a8c:	00 80 fa    	ulnk      
    3a8e:	00 00 06    	return    

00003a90 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    3a90:	10 00 fa    	lnk       #0x10
    3a92:	00 0f 78    	mov.w     w0, [w14]
    3a94:	11 07 98    	mov.w     w1, [w14+2]
    3a96:	22 07 98    	mov.w     w2, [w14+4]
    3a98:	33 07 98    	mov.w     w3, [w14+6]
    3a9a:	44 07 98    	mov.w     w4, [w14+8]
    3a9c:	55 07 98    	mov.w     w5, [w14+10]
    3a9e:	46 4f 98    	mov.b     w6, [w14+12]
    3aa0:	77 07 98    	mov.w     w7, [w14+14]

00003aa2 <.LSM35>:
    self->TxCON = TxCON;
    3aa2:	1e 00 78    	mov.w     [w14], w0
    3aa4:	9e 00 90    	mov.w     [w14+2], w1
    3aa6:	01 08 78    	mov.w     w1, [w0]

00003aa8 <.LSM36>:
    self->PRx = PRx;
    3aa8:	1e 00 78    	mov.w     [w14], w0
    3aaa:	ae 00 90    	mov.w     [w14+4], w1
    3aac:	11 00 98    	mov.w     w1, [w0+2]

00003aae <.LSM37>:
    self->TMRx = TMRx;
    3aae:	1e 00 78    	mov.w     [w14], w0
    3ab0:	be 00 90    	mov.w     [w14+6], w1
    3ab2:	21 00 98    	mov.w     w1, [w0+4]

00003ab4 <.LSM38>:
    self->IFSy = IFSy;
    3ab4:	1e 00 78    	mov.w     [w14], w0
    3ab6:	ce 00 90    	mov.w     [w14+8], w1
    3ab8:	31 00 98    	mov.w     w1, [w0+6]

00003aba <.LSM39>:
    self->IECy = IECy;
    3aba:	1e 00 78    	mov.w     [w14], w0
    3abc:	de 00 90    	mov.w     [w14+10], w1
    3abe:	41 00 98    	mov.w     w1, [w0+8]

00003ac0 <.LSM40>:
    self->flagbit = flagbit;
    3ac0:	1e 00 78    	mov.w     [w14], w0
    3ac2:	ce 48 90    	mov.b     [w14+12], w1
    3ac4:	21 48 98    	mov.b     w1, [w0+10]

00003ac6 <.LSM41>:
    self->octselnum = octselnum;
    3ac6:	1e 00 78    	mov.w     [w14], w0
    3ac8:	fe 00 90    	mov.w     [w14+14], w1
    3aca:	61 00 98    	mov.w     w1, [w0+12]

00003acc <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    3acc:	1e 00 78    	mov.w     [w14], w0
    3ace:	ce b8 97    	mov.w     [w14-8], w1
    3ad0:	71 00 98    	mov.w     w1, [w0+14]

00003ad2 <.LSM43>:
    self->aftercount = 0;
    3ad2:	1e 00 78    	mov.w     [w14], w0
    3ad4:	80 00 eb    	clr.w     w1
    3ad6:	01 08 98    	mov.w     w1, [w0+16]

00003ad8 <.LSM44>:
    self->every = NULL;
    3ad8:	1e 00 78    	mov.w     [w14], w0
    3ada:	80 00 eb    	clr.w     w1
    3adc:	11 08 98    	mov.w     w1, [w0+18]

00003ade <.LSM45>:
    self->after = NULL;
    3ade:	1e 00 78    	mov.w     [w14], w0
    3ae0:	80 00 eb    	clr.w     w1
    3ae2:	21 08 98    	mov.w     w1, [w0+20]

00003ae4 <.LSM46>:
}
    3ae4:	00 80 fa    	ulnk      
    3ae6:	00 00 06    	return    

00003ae8 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    3ae8:	06 00 fa    	lnk       #0x6
    3aea:	88 1f 78    	mov.w     w8, [w15++]
    3aec:	00 0f 78    	mov.w     w0, [w14]
    3aee:	12 07 98    	mov.w     w2, [w14+2]
    3af0:	23 07 98    	mov.w     w3, [w14+4]

00003af2 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    3af2:	18 c0 b3    	mov.b     #0x1, w8
    3af4:	d2 7b 23    	mov.w     #0x37bd, w2
    3af6:	63 f8 23    	mov.w     #0x3f86, w3
    3af8:	1e 00 90    	mov.w     [w14+2], w0
    3afa:	ae 00 90    	mov.w     [w14+4], w1
    3afc:	2e ec 07    	rcall     0x135a <___gesf2>
    3afe:	00 00 e0    	cp0.w     w0
    3b00:	01 00 3c    	bra       GT, 0x3b04 <.L14>
    3b02:	00 44 eb    	clr.b     w8

00003b04 <.L14>:
    3b04:	08 04 e0    	cp0.b     w8
    3b06:	69 00 3a    	bra       NZ, 0x3bda <.L23>

00003b08 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    3b08:	18 c0 b3    	mov.b     #0x1, w8
    3b0a:	d2 7b 23    	mov.w     #0x37bd, w2
    3b0c:	63 e8 23    	mov.w     #0x3e86, w3
    3b0e:	1e 00 90    	mov.w     [w14+2], w0
    3b10:	ae 00 90    	mov.w     [w14+4], w1
    3b12:	23 ec 07    	rcall     0x135a <___gesf2>
    3b14:	00 00 e0    	cp0.w     w0
    3b16:	01 00 3c    	bra       GT, 0x3b1a <.L17>
    3b18:	00 44 eb    	clr.b     w8

00003b1a <.L17>:
    3b1a:	08 04 e0    	cp0.b     w8
    3b1c:	12 00 32    	bra       Z, 0x3b42 <.L18>

00003b1e <.LSM50>:
        timer_stop(self);
    3b1e:	1e 00 78    	mov.w     [w14], w0
    3b20:	c4 00 07    	rcall     0x3caa <_timer_stop>

00003b22 <.LSM51>:
        poke(self->TxCON, 0x0030);
    3b22:	1e 00 78    	mov.w     [w14], w0
    3b24:	10 00 78    	mov.w     [w0], w0
    3b26:	01 03 20    	mov.w     #0x30, w1
    3b28:	01 08 78    	mov.w     w1, [w0]

00003b2a <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    3b2a:	1e 00 78    	mov.w     [w14], w0
    3b2c:	10 04 90    	mov.w     [w0+2], w8
    3b2e:	02 40 22    	mov.w     #0x2400, w2
    3b30:	43 77 24    	mov.w     #0x4774, w3
    3b32:	1e 00 90    	mov.w     [w14+2], w0
    3b34:	ae 00 90    	mov.w     [w14+4], w1
    3b36:	83 ec 07    	rcall     0x143e <___mulsf3>
    3b38:	12 ec 07    	rcall     0x135e <___fixunssfsi>
    3b3a:	00 00 78    	mov.w     w0, w0
    3b3c:	00 00 e9    	dec.w     w0, w0
    3b3e:	00 0c 78    	mov.w     w0, [w8]
    3b40:	4d 00 37    	bra       0x3bdc <.L13>

00003b42 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    3b42:	18 c0 b3    	mov.b     #0x1, w8
    3b44:	d2 7b 23    	mov.w     #0x37bd, w2
    3b46:	63 d0 23    	mov.w     #0x3d06, w3
    3b48:	1e 00 90    	mov.w     [w14+2], w0
    3b4a:	ae 00 90    	mov.w     [w14+4], w1
    3b4c:	06 ec 07    	rcall     0x135a <___gesf2>
    3b4e:	00 00 e0    	cp0.w     w0
    3b50:	01 00 3c    	bra       GT, 0x3b54 <.L19>
    3b52:	00 44 eb    	clr.b     w8

00003b54 <.L19>:
    3b54:	08 04 e0    	cp0.b     w8
    3b56:	12 00 32    	bra       Z, 0x3b7c <.L20>

00003b58 <.LSM54>:
        timer_stop(self);
    3b58:	1e 00 78    	mov.w     [w14], w0
    3b5a:	a7 00 07    	rcall     0x3caa <_timer_stop>

00003b5c <.LSM55>:
        poke(self->TxCON, 0x0020);
    3b5c:	1e 00 78    	mov.w     [w14], w0
    3b5e:	10 00 78    	mov.w     [w0], w0
    3b60:	01 02 20    	mov.w     #0x20, w1
    3b62:	01 08 78    	mov.w     w1, [w0]

00003b64 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    3b64:	1e 00 78    	mov.w     [w14], w0
    3b66:	10 04 90    	mov.w     [w0+2], w8
    3b68:	02 40 22    	mov.w     #0x2400, w2
    3b6a:	43 87 24    	mov.w     #0x4874, w3
    3b6c:	1e 00 90    	mov.w     [w14+2], w0
    3b6e:	ae 00 90    	mov.w     [w14+4], w1
    3b70:	66 ec 07    	rcall     0x143e <___mulsf3>
    3b72:	f5 eb 07    	rcall     0x135e <___fixunssfsi>
    3b74:	00 00 78    	mov.w     w0, w0
    3b76:	00 00 e9    	dec.w     w0, w0
    3b78:	00 0c 78    	mov.w     w0, [w8]
    3b7a:	30 00 37    	bra       0x3bdc <.L13>

00003b7c <.L20>:
    } else if (period>(65536.*TCY)) {
    3b7c:	18 c0 b3    	mov.b     #0x1, w8
    3b7e:	d2 7b 23    	mov.w     #0x37bd, w2
    3b80:	63 b8 23    	mov.w     #0x3b86, w3
    3b82:	1e 00 90    	mov.w     [w14+2], w0
    3b84:	ae 00 90    	mov.w     [w14+4], w1
    3b86:	e9 eb 07    	rcall     0x135a <___gesf2>
    3b88:	00 00 e0    	cp0.w     w0
    3b8a:	01 00 3c    	bra       GT, 0x3b8e <.L21>
    3b8c:	00 44 eb    	clr.b     w8

00003b8e <.L21>:
    3b8e:	08 04 e0    	cp0.b     w8
    3b90:	12 00 32    	bra       Z, 0x3bb6 <.L22>

00003b92 <.LSM58>:
        timer_stop(self);
    3b92:	1e 00 78    	mov.w     [w14], w0
    3b94:	8a 00 07    	rcall     0x3caa <_timer_stop>

00003b96 <.LSM59>:
        poke(self->TxCON, 0x0010);
    3b96:	1e 00 78    	mov.w     [w14], w0
    3b98:	10 00 78    	mov.w     [w0], w0
    3b9a:	01 01 20    	mov.w     #0x10, w1
    3b9c:	01 08 78    	mov.w     w1, [w0]

00003b9e <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3b9e:	1e 00 78    	mov.w     [w14], w0
    3ba0:	10 04 90    	mov.w     [w0+2], w8
    3ba2:	02 40 22    	mov.w     #0x2400, w2
    3ba4:	43 9f 24    	mov.w     #0x49f4, w3
    3ba6:	1e 00 90    	mov.w     [w14+2], w0
    3ba8:	ae 00 90    	mov.w     [w14+4], w1
    3baa:	49 ec 07    	rcall     0x143e <___mulsf3>
    3bac:	d8 eb 07    	rcall     0x135e <___fixunssfsi>
    3bae:	00 00 78    	mov.w     w0, w0
    3bb0:	00 00 e9    	dec.w     w0, w0
    3bb2:	00 0c 78    	mov.w     w0, [w8]
    3bb4:	13 00 37    	bra       0x3bdc <.L13>

00003bb6 <.L22>:
    } else {
        timer_stop(self);
    3bb6:	1e 00 78    	mov.w     [w14], w0
    3bb8:	78 00 07    	rcall     0x3caa <_timer_stop>

00003bba <.LSM62>:
        poke(self->TxCON, 0x0000);
    3bba:	1e 00 78    	mov.w     [w14], w0
    3bbc:	10 00 78    	mov.w     [w0], w0
    3bbe:	80 00 eb    	clr.w     w1
    3bc0:	01 08 78    	mov.w     w1, [w0]

00003bc2 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    3bc2:	1e 00 78    	mov.w     [w14], w0
    3bc4:	10 04 90    	mov.w     [w0+2], w8
    3bc6:	02 40 22    	mov.w     #0x2400, w2
    3bc8:	43 b7 24    	mov.w     #0x4b74, w3
    3bca:	1e 00 90    	mov.w     [w14+2], w0
    3bcc:	ae 00 90    	mov.w     [w14+4], w1
    3bce:	37 ec 07    	rcall     0x143e <___mulsf3>
    3bd0:	c6 eb 07    	rcall     0x135e <___fixunssfsi>
    3bd2:	00 00 78    	mov.w     w0, w0
    3bd4:	00 00 e9    	dec.w     w0, w0
    3bd6:	00 0c 78    	mov.w     w0, [w8]
    3bd8:	01 00 37    	bra       0x3bdc <.L13>

00003bda <.L23>:
    3bda:	00 00 00    	nop       

00003bdc <.L13>:
    }
}
    3bdc:	4f 04 78    	mov.w     [--w15], w8
    3bde:	00 80 fa    	ulnk      
    3be0:	00 00 06    	return    

00003be2 <_timer_period>:

float timer_period(_TIMER *self) {
    3be2:	04 00 fa    	lnk       #0x4
    3be4:	88 9f be    	mov.d     w8, [w15++]
    3be6:	10 07 98    	mov.w     w0, [w14+2]

00003be8 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3be8:	1e 00 90    	mov.w     [w14+2], w0
    3bea:	10 00 78    	mov.w     [w0], w0
    3bec:	90 00 78    	mov.w     [w0], w1
    3bee:	00 03 20    	mov.w     #0x30, w0
    3bf0:	00 80 60    	and.w     w1, w0, w0
    3bf2:	44 00 de    	lsr.w     w0, #0x4, w0
    3bf4:	00 0f 78    	mov.w     w0, [w14]

00003bf6 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3bf6:	1e 00 78    	mov.w     [w14], w0
    3bf8:	c2 00 dd    	sl.w      w0, #0x2, w1
    3bfa:	20 d8 21    	mov.w     #0x1d82, w0
    3bfc:	00 80 40    	add.w     w1, w0, w0
    3bfe:	10 04 be    	mov.d     [w0], w8
    3c00:	1e 00 90    	mov.w     [w14+2], w0
    3c02:	10 00 90    	mov.w     [w0+2], w0
    3c04:	10 00 78    	mov.w     [w0], w0
    3c06:	80 00 eb    	clr.w     w1
    3c08:	c5 eb 07    	rcall     0x1394 <___floatunsisf>
    3c0a:	02 00 20    	mov.w     #0x0, w2
    3c0c:	03 f8 23    	mov.w     #0x3f80, w3
    3c0e:	04 eb 07    	rcall     0x1218 <___addsf3>
    3c10:	00 01 be    	mov.d     w0, w2
    3c12:	08 00 be    	mov.d     w8, w0
    3c14:	14 ec 07    	rcall     0x143e <___mulsf3>

00003c16 <.LSM69>:
}
    3c16:	4f 04 be    	mov.d     [--w15], w8
    3c18:	00 80 fa    	ulnk      
    3c1a:	00 00 06    	return    

00003c1c <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    3c1c:	06 00 fa    	lnk       #0x6
    3c1e:	00 0f 78    	mov.w     w0, [w14]
    3c20:	12 07 98    	mov.w     w2, [w14+2]
    3c22:	23 07 98    	mov.w     w3, [w14+4]

00003c24 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    3c24:	1e 01 90    	mov.w     [w14+2], w2
    3c26:	ae 01 90    	mov.w     [w14+4], w3
    3c28:	00 00 20    	mov.w     #0x0, w0
    3c2a:	01 f8 23    	mov.w     #0x3f80, w1
    3c2c:	52 eb 07    	rcall     0x12d2 <___divsf3>
    3c2e:	00 01 be    	mov.d     w0, w2
    3c30:	1e 00 78    	mov.w     [w14], w0
    3c32:	5a ff 07    	rcall     0x3ae8 <_timer_setPeriod>

00003c34 <.LSM72>:
}
    3c34:	00 80 fa    	ulnk      
    3c36:	00 00 06    	return    

00003c38 <_timer_freq>:

float timer_freq(_TIMER *self) {
    3c38:	02 00 fa    	lnk       #0x2
    3c3a:	00 0f 78    	mov.w     w0, [w14]

00003c3c <.LSM74>:
    return 1./timer_period(self);
    3c3c:	1e 00 78    	mov.w     [w14], w0
    3c3e:	d1 ff 07    	rcall     0x3be2 <_timer_period>
    3c40:	00 01 be    	mov.d     w0, w2
    3c42:	00 00 20    	mov.w     #0x0, w0
    3c44:	01 f8 23    	mov.w     #0x3f80, w1
    3c46:	45 eb 07    	rcall     0x12d2 <___divsf3>

00003c48 <.LSM75>:
}
    3c48:	00 80 fa    	ulnk      
    3c4a:	00 00 06    	return    

00003c4c <_timer_time>:

float timer_time(_TIMER *self) {
    3c4c:	04 00 fa    	lnk       #0x4
    3c4e:	88 9f be    	mov.d     w8, [w15++]
    3c50:	10 07 98    	mov.w     w0, [w14+2]

00003c52 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3c52:	1e 00 90    	mov.w     [w14+2], w0
    3c54:	10 00 78    	mov.w     [w0], w0
    3c56:	90 00 78    	mov.w     [w0], w1
    3c58:	00 03 20    	mov.w     #0x30, w0
    3c5a:	00 80 60    	and.w     w1, w0, w0
    3c5c:	44 00 de    	lsr.w     w0, #0x4, w0
    3c5e:	00 0f 78    	mov.w     w0, [w14]

00003c60 <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3c60:	1e 00 78    	mov.w     [w14], w0
    3c62:	c2 00 dd    	sl.w      w0, #0x2, w1
    3c64:	20 d8 21    	mov.w     #0x1d82, w0
    3c66:	00 80 40    	add.w     w1, w0, w0
    3c68:	10 04 be    	mov.d     [w0], w8
    3c6a:	1e 00 90    	mov.w     [w14+2], w0
    3c6c:	10 00 90    	mov.w     [w0+2], w0
    3c6e:	10 00 78    	mov.w     [w0], w0
    3c70:	80 00 eb    	clr.w     w1
    3c72:	90 eb 07    	rcall     0x1394 <___floatunsisf>
    3c74:	02 00 20    	mov.w     #0x0, w2
    3c76:	03 f8 23    	mov.w     #0x3f80, w3
    3c78:	cf ea 07    	rcall     0x1218 <___addsf3>
    3c7a:	00 01 be    	mov.d     w0, w2
    3c7c:	08 00 be    	mov.d     w8, w0
    3c7e:	df eb 07    	rcall     0x143e <___mulsf3>

00003c80 <.LSM79>:
}
    3c80:	4f 04 be    	mov.d     [--w15], w8
    3c82:	00 80 fa    	ulnk      
    3c84:	00 00 06    	return    

00003c86 <_timer_start>:

void timer_start(_TIMER *self) {
    3c86:	02 00 fa    	lnk       #0x2
    3c88:	00 0f 78    	mov.w     w0, [w14]

00003c8a <.LSM81>:
    timer_lower(self);
    3c8a:	1e 00 78    	mov.w     [w14], w0
    3c8c:	2b 00 07    	rcall     0x3ce4 <_timer_lower>

00003c8e <.LSM82>:
    poke(self->TMRx, 0);
    3c8e:	1e 00 78    	mov.w     [w14], w0
    3c90:	20 00 90    	mov.w     [w0+4], w0
    3c92:	80 00 eb    	clr.w     w1
    3c94:	01 08 78    	mov.w     w1, [w0]

00003c96 <.LSM83>:
    bitset(self->TxCON, 15);
    3c96:	1e 00 78    	mov.w     [w14], w0
    3c98:	10 00 78    	mov.w     [w0], w0
    3c9a:	9e 00 78    	mov.w     [w14], w1
    3c9c:	91 00 78    	mov.w     [w1], w1
    3c9e:	11 01 78    	mov.w     [w1], w2
    3ca0:	01 00 28    	mov.w     #0x8000, w1
    3ca2:	82 80 70    	ior.w     w1, w2, w1
    3ca4:	01 08 78    	mov.w     w1, [w0]

00003ca6 <.LSM84>:
}
    3ca6:	00 80 fa    	ulnk      
    3ca8:	00 00 06    	return    

00003caa <_timer_stop>:

void timer_stop(_TIMER *self) {
    3caa:	02 00 fa    	lnk       #0x2
    3cac:	00 0f 78    	mov.w     w0, [w14]

00003cae <.LSM86>:
    bitclear(self->TxCON, 15);
    3cae:	1e 00 78    	mov.w     [w14], w0
    3cb0:	10 00 78    	mov.w     [w0], w0
    3cb2:	9e 00 78    	mov.w     [w14], w1
    3cb4:	91 00 78    	mov.w     [w1], w1
    3cb6:	11 01 78    	mov.w     [w1], w2
    3cb8:	f1 ff 27    	mov.w     #0x7fff, w1
    3cba:	81 00 61    	and.w     w2, w1, w1
    3cbc:	01 08 78    	mov.w     w1, [w0]

00003cbe <.LSM87>:
}
    3cbe:	00 80 fa    	ulnk      
    3cc0:	00 00 06    	return    

00003cc2 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    3cc2:	02 00 fa    	lnk       #0x2
    3cc4:	00 0f 78    	mov.w     w0, [w14]

00003cc6 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    3cc6:	1e 00 78    	mov.w     [w14], w0
    3cc8:	30 00 90    	mov.w     [w0+6], w0
    3cca:	90 00 78    	mov.w     [w0], w1
    3ccc:	1e 00 78    	mov.w     [w14], w0
    3cce:	20 48 90    	mov.b     [w0+10], w0
    3cd0:	00 80 fb    	ze        w0, w0
    3cd2:	12 00 20    	mov.w     #0x1, w2
    3cd4:	00 10 dd    	sl.w      w2, w0, w0
    3cd6:	00 80 60    	and.w     w1, w0, w0
    3cd8:	00 f0 a7    	btsc.w    w0, #0xf
    3cda:	00 00 ea    	neg.w     w0, w0
    3cdc:	00 00 ea    	neg.w     w0, w0
    3cde:	4f 00 de    	lsr.w     w0, #0xf, w0

00003ce0 <.LSM90>:
}
    3ce0:	00 80 fa    	ulnk      
    3ce2:	00 00 06    	return    

00003ce4 <_timer_lower>:

void timer_lower(_TIMER *self) {
    3ce4:	02 00 fa    	lnk       #0x2
    3ce6:	00 0f 78    	mov.w     w0, [w14]

00003ce8 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3ce8:	1e 00 78    	mov.w     [w14], w0
    3cea:	30 00 90    	mov.w     [w0+6], w0
    3cec:	9e 00 78    	mov.w     [w14], w1
    3cee:	b1 00 90    	mov.w     [w1+6], w1
    3cf0:	11 01 78    	mov.w     [w1], w2
    3cf2:	9e 00 78    	mov.w     [w14], w1
    3cf4:	a1 48 90    	mov.b     [w1+10], w1
    3cf6:	81 80 fb    	ze        w1, w1
    3cf8:	13 00 20    	mov.w     #0x1, w3
    3cfa:	81 18 dd    	sl.w      w3, w1, w1
    3cfc:	81 80 ea    	com.w     w1, w1
    3cfe:	81 00 61    	and.w     w2, w1, w1
    3d00:	01 08 78    	mov.w     w1, [w0]

00003d02 <.LSM93>:
}
    3d02:	00 80 fa    	ulnk      
    3d04:	00 00 06    	return    

00003d06 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    3d06:	02 00 fa    	lnk       #0x2
    3d08:	00 0f 78    	mov.w     w0, [w14]

00003d0a <.LSM95>:
    return peek(self->TMRx);
    3d0a:	1e 00 78    	mov.w     [w14], w0
    3d0c:	20 00 90    	mov.w     [w0+4], w0
    3d0e:	10 00 78    	mov.w     [w0], w0

00003d10 <.LSM96>:
}
    3d10:	00 80 fa    	ulnk      
    3d12:	00 00 06    	return    

00003d14 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    3d14:	02 00 fa    	lnk       #0x2
    3d16:	00 0f 78    	mov.w     w0, [w14]

00003d18 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    3d18:	1e 00 78    	mov.w     [w14], w0
    3d1a:	40 00 90    	mov.w     [w0+8], w0
    3d1c:	9e 00 78    	mov.w     [w14], w1
    3d1e:	c1 00 90    	mov.w     [w1+8], w1
    3d20:	11 01 78    	mov.w     [w1], w2
    3d22:	9e 00 78    	mov.w     [w14], w1
    3d24:	a1 48 90    	mov.b     [w1+10], w1
    3d26:	81 80 fb    	ze        w1, w1
    3d28:	13 00 20    	mov.w     #0x1, w3
    3d2a:	81 18 dd    	sl.w      w3, w1, w1
    3d2c:	82 80 70    	ior.w     w1, w2, w1
    3d2e:	01 08 78    	mov.w     w1, [w0]

00003d30 <.LSM99>:
}
    3d30:	00 80 fa    	ulnk      
    3d32:	00 00 06    	return    

00003d34 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3d34:	02 00 fa    	lnk       #0x2
    3d36:	00 0f 78    	mov.w     w0, [w14]

00003d38 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    3d38:	1e 00 78    	mov.w     [w14], w0
    3d3a:	40 00 90    	mov.w     [w0+8], w0
    3d3c:	9e 00 78    	mov.w     [w14], w1
    3d3e:	c1 00 90    	mov.w     [w1+8], w1
    3d40:	11 01 78    	mov.w     [w1], w2
    3d42:	9e 00 78    	mov.w     [w14], w1
    3d44:	a1 48 90    	mov.b     [w1+10], w1
    3d46:	81 80 fb    	ze        w1, w1
    3d48:	13 00 20    	mov.w     #0x1, w3
    3d4a:	81 18 dd    	sl.w      w3, w1, w1
    3d4c:	81 80 ea    	com.w     w1, w1
    3d4e:	81 00 61    	and.w     w2, w1, w1
    3d50:	01 08 78    	mov.w     w1, [w0]

00003d52 <.LSM102>:
}
    3d52:	00 80 fa    	ulnk      
    3d54:	00 00 06    	return    

00003d56 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3d56:	08 00 fa    	lnk       #0x8
    3d58:	00 0f 78    	mov.w     w0, [w14]
    3d5a:	12 07 98    	mov.w     w2, [w14+2]
    3d5c:	23 07 98    	mov.w     w3, [w14+4]
    3d5e:	31 07 98    	mov.w     w1, [w14+6]

00003d60 <.LSM104>:
    timer_disableInterrupt(self);
    3d60:	1e 00 78    	mov.w     [w14], w0
    3d62:	e8 ff 07    	rcall     0x3d34 <_timer_disableInterrupt>

00003d64 <.LSM105>:
    timer_setPeriod(self, interval);
    3d64:	1e 01 90    	mov.w     [w14+2], w2
    3d66:	ae 01 90    	mov.w     [w14+4], w3
    3d68:	1e 00 78    	mov.w     [w14], w0
    3d6a:	be fe 07    	rcall     0x3ae8 <_timer_setPeriod>

00003d6c <.LSM106>:
    self->aftercount = 0;
    3d6c:	1e 00 78    	mov.w     [w14], w0
    3d6e:	80 00 eb    	clr.w     w1
    3d70:	01 08 98    	mov.w     w1, [w0+16]

00003d72 <.LSM107>:
    self->every = callback;
    3d72:	1e 00 78    	mov.w     [w14], w0
    3d74:	be 00 90    	mov.w     [w14+6], w1
    3d76:	11 08 98    	mov.w     w1, [w0+18]

00003d78 <.LSM108>:
    self->after = NULL;
    3d78:	1e 00 78    	mov.w     [w14], w0
    3d7a:	80 00 eb    	clr.w     w1
    3d7c:	21 08 98    	mov.w     w1, [w0+20]

00003d7e <.LSM109>:
    timer_enableInterrupt(self);
    3d7e:	1e 00 78    	mov.w     [w14], w0
    3d80:	c9 ff 07    	rcall     0x3d14 <_timer_enableInterrupt>

00003d82 <.LSM110>:
    timer_start(self);
    3d82:	1e 00 78    	mov.w     [w14], w0
    3d84:	80 ff 07    	rcall     0x3c86 <_timer_start>

00003d86 <.LSM111>:
}
    3d86:	00 80 fa    	ulnk      
    3d88:	00 00 06    	return    

00003d8a <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    3d8a:	0a 00 fa    	lnk       #0xa
    3d8c:	00 0f 78    	mov.w     w0, [w14]
    3d8e:	12 07 98    	mov.w     w2, [w14+2]
    3d90:	23 07 98    	mov.w     w3, [w14+4]
    3d92:	31 07 98    	mov.w     w1, [w14+6]
    3d94:	44 07 98    	mov.w     w4, [w14+8]

00003d96 <.LSM113>:
    timer_disableInterrupt(self);
    3d96:	1e 00 78    	mov.w     [w14], w0
    3d98:	cd ff 07    	rcall     0x3d34 <_timer_disableInterrupt>

00003d9a <.LSM114>:
    timer_setPeriod(self, delay);
    3d9a:	1e 01 90    	mov.w     [w14+2], w2
    3d9c:	ae 01 90    	mov.w     [w14+4], w3
    3d9e:	1e 00 78    	mov.w     [w14], w0
    3da0:	a3 fe 07    	rcall     0x3ae8 <_timer_setPeriod>

00003da2 <.LSM115>:
    self->aftercount = num_times;
    3da2:	1e 00 78    	mov.w     [w14], w0
    3da4:	be 00 90    	mov.w     [w14+6], w1
    3da6:	01 08 98    	mov.w     w1, [w0+16]

00003da8 <.LSM116>:
    self->every = NULL;
    3da8:	1e 00 78    	mov.w     [w14], w0
    3daa:	80 00 eb    	clr.w     w1
    3dac:	11 08 98    	mov.w     w1, [w0+18]

00003dae <.LSM117>:
    self->after = callback;
    3dae:	1e 00 78    	mov.w     [w14], w0
    3db0:	ce 00 90    	mov.w     [w14+8], w1
    3db2:	21 08 98    	mov.w     w1, [w0+20]

00003db4 <.LSM118>:
    timer_enableInterrupt(self);
    3db4:	1e 00 78    	mov.w     [w14], w0
    3db6:	ae ff 07    	rcall     0x3d14 <_timer_enableInterrupt>

00003db8 <.LSM119>:
    timer_start(self);
    3db8:	1e 00 78    	mov.w     [w14], w0
    3dba:	65 ff 07    	rcall     0x3c86 <_timer_start>

00003dbc <.LSM120>:
}
    3dbc:	00 80 fa    	ulnk      
    3dbe:	00 00 06    	return    

00003dc0 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    3dc0:	02 00 fa    	lnk       #0x2
    3dc2:	00 0f 78    	mov.w     w0, [w14]

00003dc4 <.LSM122>:
    timer_disableInterrupt(self);
    3dc4:	1e 00 78    	mov.w     [w14], w0
    3dc6:	b6 ff 07    	rcall     0x3d34 <_timer_disableInterrupt>

00003dc8 <.LSM123>:
    timer_lower(self);
    3dc8:	1e 00 78    	mov.w     [w14], w0
    3dca:	8c ff 07    	rcall     0x3ce4 <_timer_lower>

00003dcc <.LSM124>:
    timer_stop(self);
    3dcc:	1e 00 78    	mov.w     [w14], w0
    3dce:	6d ff 07    	rcall     0x3caa <_timer_stop>

00003dd0 <.LSM125>:
    self->aftercount = 0;
    3dd0:	1e 00 78    	mov.w     [w14], w0
    3dd2:	80 00 eb    	clr.w     w1
    3dd4:	01 08 98    	mov.w     w1, [w0+16]

00003dd6 <.LSM126>:
    self->every = NULL;
    3dd6:	1e 00 78    	mov.w     [w14], w0
    3dd8:	80 00 eb    	clr.w     w1
    3dda:	11 08 98    	mov.w     w1, [w0+18]

00003ddc <.LSM127>:
    self->after = NULL;
    3ddc:	1e 00 78    	mov.w     [w14], w0
    3dde:	80 00 eb    	clr.w     w1
    3de0:	21 08 98    	mov.w     w1, [w0+20]

00003de2 <.LSM128>:
}
    3de2:	00 80 fa    	ulnk      
    3de4:	00 00 06    	return    

00003de6 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    3de6:	04 00 fa    	lnk       #0x4
    3de8:	00 0f 78    	mov.w     w0, [w14]
    3dea:	11 07 98    	mov.w     w1, [w14+2]

00003dec <.LSM1>:
    if (val)
    3dec:	1e 00 90    	mov.w     [w14+2], w0
    3dee:	00 00 e0    	cp0.w     w0
    3df0:	0d 00 32    	bra       Z, 0x3e0c <.L2>

00003df2 <.LSM2>:
        bitset(self->port, self->bit);
    3df2:	1e 00 78    	mov.w     [w14], w0
    3df4:	10 00 78    	mov.w     [w0], w0
    3df6:	9e 00 78    	mov.w     [w14], w1
    3df8:	91 00 78    	mov.w     [w1], w1
    3dfa:	11 01 78    	mov.w     [w1], w2
    3dfc:	9e 00 78    	mov.w     [w14], w1
    3dfe:	e1 40 90    	mov.b     [w1+6], w1
    3e00:	81 80 fb    	ze        w1, w1
    3e02:	13 00 20    	mov.w     #0x1, w3
    3e04:	81 18 dd    	sl.w      w3, w1, w1
    3e06:	82 80 70    	ior.w     w1, w2, w1
    3e08:	01 08 78    	mov.w     w1, [w0]
    3e0a:	0d 00 37    	bra       0x3e26 <.L1>

00003e0c <.L2>:
    else
        bitclear(self->port, self->bit);
    3e0c:	1e 00 78    	mov.w     [w14], w0
    3e0e:	10 00 78    	mov.w     [w0], w0
    3e10:	9e 00 78    	mov.w     [w14], w1
    3e12:	91 00 78    	mov.w     [w1], w1
    3e14:	11 01 78    	mov.w     [w1], w2
    3e16:	9e 00 78    	mov.w     [w14], w1
    3e18:	e1 40 90    	mov.b     [w1+6], w1
    3e1a:	81 80 fb    	ze        w1, w1
    3e1c:	13 00 20    	mov.w     #0x1, w3
    3e1e:	81 18 dd    	sl.w      w3, w1, w1
    3e20:	81 80 ea    	com.w     w1, w1
    3e22:	81 00 61    	and.w     w2, w1, w1
    3e24:	01 08 78    	mov.w     w1, [w0]

00003e26 <.L1>:
}
    3e26:	00 80 fa    	ulnk      
    3e28:	00 00 06    	return    

00003e2a <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    3e2a:	02 00 fa    	lnk       #0x2
    3e2c:	00 0f 78    	mov.w     w0, [w14]

00003e2e <.LSM6>:
    return bitread(self->port, self->bit);
    3e2e:	1e 00 78    	mov.w     [w14], w0
    3e30:	10 00 78    	mov.w     [w0], w0
    3e32:	90 00 78    	mov.w     [w0], w1
    3e34:	1e 00 78    	mov.w     [w14], w0
    3e36:	60 40 90    	mov.b     [w0+6], w0
    3e38:	00 80 fb    	ze        w0, w0
    3e3a:	12 00 20    	mov.w     #0x1, w2
    3e3c:	00 10 dd    	sl.w      w2, w0, w0
    3e3e:	00 80 60    	and.w     w1, w0, w0
    3e40:	00 f0 a7    	btsc.w    w0, #0xf
    3e42:	00 00 ea    	neg.w     w0, w0
    3e44:	00 00 ea    	neg.w     w0, w0
    3e46:	4f 00 de    	lsr.w     w0, #0xf, w0

00003e48 <.LSM7>:
}
    3e48:	00 80 fa    	ulnk      
    3e4a:	00 00 06    	return    

00003e4c <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    3e4c:	02 00 fa    	lnk       #0x2
    3e4e:	00 0f 78    	mov.w     w0, [w14]

00003e50 <.LSM9>:
    AD1CHS = self->annum;
    3e50:	1e 00 78    	mov.w     [w14], w0
    3e52:	40 00 90    	mov.w     [w0+8], w0
    3e54:	40 19 88    	mov.w     w0, 0x328

00003e56 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    3e56:	20 23 a8    	bset.b    0x320, #0x1

00003e58 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    3e58:	00 00 00    	nop       

00003e5a <.L6>:
    3e5a:	00 19 80    	mov.w     0x320, w0
    3e5c:	61 00 60    	and.w     w0, #0x1, w0
    3e5e:	00 00 e0    	cp0.w     w0
    3e60:	fc ff 32    	bra       Z, 0x3e5a <.L6>

00003e62 <.LSM12>:
    return ADC1BUF0;
    3e62:	00 18 80    	mov.w     0x300, w0

00003e64 <.LSM13>:
}
    3e64:	00 80 fa    	ulnk      
    3e66:	00 00 06    	return    

00003e68 <_init_pin>:

void init_pin(void) {
    3e68:	02 00 fa    	lnk       #0x2

00003e6a <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e6a:	40 6d 20    	mov.w     #0x6d4, w0
    3e6c:	80 1f 78    	mov.w     w0, [w15++]
    3e6e:	47 01 20    	mov.w     #0x14, w7
    3e70:	00 43 eb    	clr.b     w6
    3e72:	80 82 eb    	setm.w    w5
    3e74:	54 c0 b3    	mov.b     #0x5, w4
    3e76:	80 01 eb    	clr.w     w3
    3e78:	82 2d 20    	mov.w     #0x2d8, w2
    3e7a:	a1 2d 20    	mov.w     #0x2da, w1
    3e7c:	a0 a4 21    	mov.w     #0x1a4a, w0
    3e7e:	08 01 07    	rcall     0x4090 <_pin_init>
    3e80:	8f 87 e9    	dec2.w    w15, w15

00003e82 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e82:	80 6d 20    	mov.w     #0x6d8, w0
    3e84:	80 1f 78    	mov.w     w0, [w15++]
    3e86:	97 01 20    	mov.w     #0x19, w7
    3e88:	86 c0 b3    	mov.b     #0x8, w6
    3e8a:	80 82 eb    	setm.w    w5
    3e8c:	44 c0 b3    	mov.b     #0x4, w4
    3e8e:	80 01 eb    	clr.w     w3
    3e90:	82 2d 20    	mov.w     #0x2d8, w2
    3e92:	a1 2d 20    	mov.w     #0x2da, w1
    3e94:	00 a6 21    	mov.w     #0x1a60, w0
    3e96:	fc 00 07    	rcall     0x4090 <_pin_init>
    3e98:	8f 87 e9    	dec2.w    w15, w15

00003e9a <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3e9a:	a0 6c 20    	mov.w     #0x6ca, w0
    3e9c:	80 1f 78    	mov.w     w0, [w15++]
    3e9e:	a7 00 20    	mov.w     #0xa, w7
    3ea0:	00 43 eb    	clr.b     w6
    3ea2:	80 82 eb    	setm.w    w5
    3ea4:	44 c0 b3    	mov.b     #0x4, w4
    3ea6:	80 01 eb    	clr.w     w3
    3ea8:	82 2e 20    	mov.w     #0x2e8, w2
    3eaa:	a1 2e 20    	mov.w     #0x2ea, w1
    3eac:	60 a7 21    	mov.w     #0x1a76, w0
    3eae:	f0 00 07    	rcall     0x4090 <_pin_init>
    3eb0:	8f 87 e9    	dec2.w    w15, w15

00003eb2 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3eb2:	00 6d 20    	mov.w     #0x6d0, w0
    3eb4:	80 1f 78    	mov.w     w0, [w15++]
    3eb6:	17 01 20    	mov.w     #0x11, w7
    3eb8:	86 c0 b3    	mov.b     #0x8, w6
    3eba:	80 82 eb    	setm.w    w5
    3ebc:	54 c0 b3    	mov.b     #0x5, w4
    3ebe:	80 01 eb    	clr.w     w3
    3ec0:	82 2e 20    	mov.w     #0x2e8, w2
    3ec2:	a1 2e 20    	mov.w     #0x2ea, w1
    3ec4:	c0 a8 21    	mov.w     #0x1a8c, w0
    3ec6:	e4 00 07    	rcall     0x4090 <_pin_init>
    3ec8:	8f 87 e9    	dec2.w    w15, w15

00003eca <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3eca:	c0 6d 20    	mov.w     #0x6dc, w0
    3ecc:	80 1f 78    	mov.w     w0, [w15++]
    3ece:	d7 01 20    	mov.w     #0x1d, w7
    3ed0:	86 c0 b3    	mov.b     #0x8, w6
    3ed2:	f5 00 20    	mov.w     #0xf, w5
    3ed4:	f4 c0 b3    	mov.b     #0xf, w4
    3ed6:	23 4e 20    	mov.w     #0x4e2, w3
    3ed8:	82 2c 20    	mov.w     #0x2c8, w2
    3eda:	a1 2c 20    	mov.w     #0x2ca, w1
    3edc:	20 aa 21    	mov.w     #0x1aa2, w0
    3ede:	d8 00 07    	rcall     0x4090 <_pin_init>
    3ee0:	8f 87 e9    	dec2.w    w15, w15

00003ee2 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3ee2:	00 6d 20    	mov.w     #0x6d0, w0
    3ee4:	80 1f 78    	mov.w     w0, [w15++]
    3ee6:	07 01 20    	mov.w     #0x10, w7
    3ee8:	00 43 eb    	clr.b     w6
    3eea:	80 82 eb    	setm.w    w5
    3eec:	34 c0 b3    	mov.b     #0x3, w4
    3eee:	80 01 eb    	clr.w     w3
    3ef0:	82 2e 20    	mov.w     #0x2e8, w2
    3ef2:	a1 2e 20    	mov.w     #0x2ea, w1
    3ef4:	80 ab 21    	mov.w     #0x1ab8, w0
    3ef6:	cc 00 07    	rcall     0x4090 <_pin_init>
    3ef8:	8f 87 e9    	dec2.w    w15, w15

00003efa <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3efa:	20 6c 20    	mov.w     #0x6c2, w0
    3efc:	80 1f 78    	mov.w     w0, [w15++]
    3efe:	27 00 20    	mov.w     #0x2, w7
    3f00:	00 43 eb    	clr.b     w6
    3f02:	80 82 eb    	setm.w    w5
    3f04:	84 c0 b3    	mov.b     #0x8, w4
    3f06:	80 01 eb    	clr.w     w3
    3f08:	82 2d 20    	mov.w     #0x2d8, w2
    3f0a:	a1 2d 20    	mov.w     #0x2da, w1
    3f0c:	e0 ac 21    	mov.w     #0x1ace, w0
    3f0e:	c0 00 07    	rcall     0x4090 <_pin_init>
    3f10:	8f 87 e9    	dec2.w    w15, w15

00003f12 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f12:	c0 6c 20    	mov.w     #0x6cc, w0
    3f14:	80 1f 78    	mov.w     w0, [w15++]
    3f16:	c7 00 20    	mov.w     #0xc, w7
    3f18:	00 43 eb    	clr.b     w6
    3f1a:	80 82 eb    	setm.w    w5
    3f1c:	b4 c0 b3    	mov.b     #0xb, w4
    3f1e:	80 01 eb    	clr.w     w3
    3f20:	82 2d 20    	mov.w     #0x2d8, w2
    3f22:	a1 2d 20    	mov.w     #0x2da, w1
    3f24:	40 ae 21    	mov.w     #0x1ae4, w0
    3f26:	b4 00 07    	rcall     0x4090 <_pin_init>
    3f28:	8f 87 e9    	dec2.w    w15, w15

00003f2a <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f2a:	40 6c 20    	mov.w     #0x6c4, w0
    3f2c:	80 1f 78    	mov.w     w0, [w15++]
    3f2e:	47 00 20    	mov.w     #0x4, w7
    3f30:	00 43 eb    	clr.b     w6
    3f32:	80 82 eb    	setm.w    w5
    3f34:	94 c0 b3    	mov.b     #0x9, w4
    3f36:	80 01 eb    	clr.w     w3
    3f38:	82 2d 20    	mov.w     #0x2d8, w2
    3f3a:	a1 2d 20    	mov.w     #0x2da, w1
    3f3c:	a0 af 21    	mov.w     #0x1afa, w0
    3f3e:	a8 00 07    	rcall     0x4090 <_pin_init>
    3f40:	8f 87 e9    	dec2.w    w15, w15

00003f42 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f42:	20 6c 20    	mov.w     #0x6c2, w0
    3f44:	80 1f 78    	mov.w     w0, [w15++]
    3f46:	37 00 20    	mov.w     #0x3, w7
    3f48:	86 c0 b3    	mov.b     #0x8, w6
    3f4a:	80 82 eb    	setm.w    w5
    3f4c:	a4 c0 b3    	mov.b     #0xa, w4
    3f4e:	80 01 eb    	clr.w     w3
    3f50:	82 2d 20    	mov.w     #0x2d8, w2
    3f52:	a1 2d 20    	mov.w     #0x2da, w1
    3f54:	00 b1 21    	mov.w     #0x1b10, w0
    3f56:	9c 00 07    	rcall     0x4090 <_pin_init>
    3f58:	8f 87 e9    	dec2.w    w15, w15

00003f5a <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f5a:	a0 6c 20    	mov.w     #0x6ca, w0
    3f5c:	80 1f 78    	mov.w     w0, [w15++]
    3f5e:	b7 00 20    	mov.w     #0xb, w7
    3f60:	86 c0 b3    	mov.b     #0x8, w6
    3f62:	80 82 eb    	setm.w    w5
    3f64:	00 42 eb    	clr.b     w4
    3f66:	80 01 eb    	clr.w     w3
    3f68:	82 2d 20    	mov.w     #0x2d8, w2
    3f6a:	a1 2d 20    	mov.w     #0x2da, w1
    3f6c:	60 b2 21    	mov.w     #0x1b26, w0
    3f6e:	90 00 07    	rcall     0x4090 <_pin_init>
    3f70:	8f 87 e9    	dec2.w    w15, w15

00003f72 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f72:	80 6d 20    	mov.w     #0x6d8, w0
    3f74:	80 1f 78    	mov.w     w0, [w15++]
    3f76:	87 01 20    	mov.w     #0x18, w7
    3f78:	00 43 eb    	clr.b     w6
    3f7a:	80 82 eb    	setm.w    w5
    3f7c:	14 c0 b3    	mov.b     #0x1, w4
    3f7e:	80 01 eb    	clr.w     w3
    3f80:	82 2d 20    	mov.w     #0x2d8, w2
    3f82:	a1 2d 20    	mov.w     #0x2da, w1
    3f84:	c0 b3 21    	mov.w     #0x1b3c, w0
    3f86:	84 00 07    	rcall     0x4090 <_pin_init>
    3f88:	8f 87 e9    	dec2.w    w15, w15

00003f8a <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f8a:	60 6d 20    	mov.w     #0x6d6, w0
    3f8c:	80 1f 78    	mov.w     w0, [w15++]
    3f8e:	77 01 20    	mov.w     #0x17, w7
    3f90:	86 c0 b3    	mov.b     #0x8, w6
    3f92:	80 82 eb    	setm.w    w5
    3f94:	24 c0 b3    	mov.b     #0x2, w4
    3f96:	80 01 eb    	clr.w     w3
    3f98:	82 2d 20    	mov.w     #0x2d8, w2
    3f9a:	a1 2d 20    	mov.w     #0x2da, w1
    3f9c:	20 b5 21    	mov.w     #0x1b52, w0
    3f9e:	78 00 07    	rcall     0x4090 <_pin_init>
    3fa0:	8f 87 e9    	dec2.w    w15, w15

00003fa2 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3fa2:	60 6d 20    	mov.w     #0x6d6, w0
    3fa4:	80 1f 78    	mov.w     w0, [w15++]
    3fa6:	67 01 20    	mov.w     #0x16, w7
    3fa8:	00 43 eb    	clr.b     w6
    3faa:	80 82 eb    	setm.w    w5
    3fac:	34 c0 b3    	mov.b     #0x3, w4
    3fae:	80 01 eb    	clr.w     w3
    3fb0:	82 2d 20    	mov.w     #0x2d8, w2
    3fb2:	a1 2d 20    	mov.w     #0x2da, w1
    3fb4:	80 b6 21    	mov.w     #0x1b68, w0
    3fb6:	6c 00 07    	rcall     0x4090 <_pin_init>
    3fb8:	8f 87 e9    	dec2.w    w15, w15

00003fba <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3fba:	00 6c 20    	mov.w     #0x6c0, w0
    3fbc:	80 1f 78    	mov.w     w0, [w15++]
    3fbe:	80 03 eb    	clr.w     w7
    3fc0:	00 43 eb    	clr.b     w6
    3fc2:	80 02 eb    	clr.w     w5
    3fc4:	00 42 eb    	clr.b     w4
    3fc6:	23 4e 20    	mov.w     #0x4e2, w3
    3fc8:	82 2c 20    	mov.w     #0x2c8, w2
    3fca:	a1 2c 20    	mov.w     #0x2ca, w1
    3fcc:	c0 be 21    	mov.w     #0x1bec, w0
    3fce:	60 00 07    	rcall     0x4090 <_pin_init>
    3fd0:	8f 87 e9    	dec2.w    w15, w15

00003fd2 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3fd2:	00 6c 20    	mov.w     #0x6c0, w0
    3fd4:	80 1f 78    	mov.w     w0, [w15++]
    3fd6:	17 00 20    	mov.w     #0x1, w7
    3fd8:	86 c0 b3    	mov.b     #0x8, w6
    3fda:	15 00 20    	mov.w     #0x1, w5
    3fdc:	14 c0 b3    	mov.b     #0x1, w4
    3fde:	23 4e 20    	mov.w     #0x4e2, w3
    3fe0:	82 2c 20    	mov.w     #0x2c8, w2
    3fe2:	a1 2c 20    	mov.w     #0x2ca, w1
    3fe4:	60 bd 21    	mov.w     #0x1bd6, w0
    3fe6:	54 00 07    	rcall     0x4090 <_pin_init>
    3fe8:	8f 87 e9    	dec2.w    w15, w15

00003fea <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3fea:	c0 6c 20    	mov.w     #0x6cc, w0
    3fec:	80 1f 78    	mov.w     w0, [w15++]
    3fee:	d7 00 20    	mov.w     #0xd, w7
    3ff0:	86 c0 b3    	mov.b     #0x8, w6
    3ff2:	25 00 20    	mov.w     #0x2, w5
    3ff4:	24 c0 b3    	mov.b     #0x2, w4
    3ff6:	23 4e 20    	mov.w     #0x4e2, w3
    3ff8:	82 2c 20    	mov.w     #0x2c8, w2
    3ffa:	a1 2c 20    	mov.w     #0x2ca, w1
    3ffc:	00 bc 21    	mov.w     #0x1bc0, w0
    3ffe:	48 00 07    	rcall     0x4090 <_pin_init>
    4000:	8f 87 e9    	dec2.w    w15, w15

00004002 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4002:	00 00 eb    	clr.w     w0
    4004:	80 1f 78    	mov.w     w0, [w15++]
    4006:	80 83 eb    	setm.w    w7
    4008:	00 43 eb    	clr.b     w6
    400a:	35 00 20    	mov.w     #0x3, w5
    400c:	34 c0 b3    	mov.b     #0x3, w4
    400e:	23 4e 20    	mov.w     #0x4e2, w3
    4010:	82 2c 20    	mov.w     #0x2c8, w2
    4012:	a1 2c 20    	mov.w     #0x2ca, w1
    4014:	a0 ba 21    	mov.w     #0x1baa, w0
    4016:	3c 00 07    	rcall     0x4090 <_pin_init>
    4018:	8f 87 e9    	dec2.w    w15, w15

0000401a <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    401a:	c0 6d 20    	mov.w     #0x6dc, w0
    401c:	80 1f 78    	mov.w     w0, [w15++]
    401e:	c7 01 20    	mov.w     #0x1c, w7
    4020:	00 43 eb    	clr.b     w6
    4022:	45 00 20    	mov.w     #0x4, w5
    4024:	44 c0 b3    	mov.b     #0x4, w4
    4026:	23 4e 20    	mov.w     #0x4e2, w3
    4028:	82 2c 20    	mov.w     #0x2c8, w2
    402a:	a1 2c 20    	mov.w     #0x2ca, w1
    402c:	40 b9 21    	mov.w     #0x1b94, w0
    402e:	30 00 07    	rcall     0x4090 <_pin_init>
    4030:	8f 87 e9    	dec2.w    w15, w15

00004032 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4032:	20 6d 20    	mov.w     #0x6d2, w0
    4034:	80 1f 78    	mov.w     w0, [w15++]
    4036:	27 01 20    	mov.w     #0x12, w7
    4038:	00 43 eb    	clr.b     w6
    403a:	55 00 20    	mov.w     #0x5, w5
    403c:	54 c0 b3    	mov.b     #0x5, w4
    403e:	23 4e 20    	mov.w     #0x4e2, w3
    4040:	82 2c 20    	mov.w     #0x2c8, w2
    4042:	a1 2c 20    	mov.w     #0x2ca, w1
    4044:	e0 b7 21    	mov.w     #0x1b7e, w0
    4046:	24 00 07    	rcall     0x4090 <_pin_init>
    4048:	8f 87 e9    	dec2.w    w15, w15

0000404a <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    404a:	00 00 eb    	clr.w     w0
    404c:	00 0f 78    	mov.w     w0, [w14]
    404e:	07 00 37    	bra       0x405e <.L8>

00004050 <.L9>:
        pin_digitalIn(&D[i]);
    4050:	1e 00 78    	mov.w     [w14], w0
    4052:	76 00 b9    	mul.su    w0, #0x16, w0
    4054:	80 00 78    	mov.w     w0, w1
    4056:	a0 a4 21    	mov.w     #0x1a4a, w0
    4058:	00 80 40    	add.w     w1, w0, w0
    405a:	46 00 07    	rcall     0x40e8 <_pin_digitalIn>

0000405c <.LSM37>:
    405c:	1e 0f e8    	inc.w     [w14], [w14]

0000405e <.L8>:
    405e:	1e 00 78    	mov.w     [w14], w0
    4060:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    4062:	f6 ff 36    	bra       LEU, 0x4050 <.L9>

00004064 <.LSM38>:
    for (i = 0; i<6; i++)
    4064:	00 00 eb    	clr.w     w0
    4066:	00 0f 78    	mov.w     w0, [w14]
    4068:	07 00 37    	bra       0x4078 <.L10>

0000406a <.L11>:
        pin_analogIn(&A[i]);
    406a:	1e 00 78    	mov.w     [w14], w0
    406c:	76 00 b9    	mul.su    w0, #0x16, w0
    406e:	80 00 78    	mov.w     w0, w1
    4070:	e0 b7 21    	mov.w     #0x1b7e, w0
    4072:	00 80 40    	add.w     w1, w0, w0
    4074:	95 00 07    	rcall     0x41a0 <_pin_analogIn>

00004076 <.LSM40>:
    4076:	1e 0f e8    	inc.w     [w14], [w14]

00004078 <.L10>:
    4078:	1e 00 78    	mov.w     [w14], w0
    407a:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    407c:	f6 ff 36    	bra       LEU, 0x406a <.L11>

0000407e <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    407e:	00 2e 20    	mov.w     #0x2e0, w0
    4080:	00 19 88    	mov.w     w0, 0x320

00004082 <.LSM42>:
    AD1CON2 = 0;
    4082:	22 23 ef    	clr.w     0x322

00004084 <.LSM43>:
    AD1CON3 = 0x0C40;
    4084:	00 c4 20    	mov.w     #0xc40, w0
    4086:	20 19 88    	mov.w     w0, 0x324

00004088 <.LSM44>:
    AD1CHS = 0;
    4088:	28 23 ef    	clr.w     0x328

0000408a <.LSM45>:
    AD1CON1bits.ADON = 1;
    408a:	21 e3 a8    	bset.b    0x321, #0x7

0000408c <.LSM46>:
}
    408c:	00 80 fa    	ulnk      
    408e:	00 00 06    	return    

00004090 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    4090:	10 00 fa    	lnk       #0x10
    4092:	00 0f 78    	mov.w     w0, [w14]
    4094:	11 07 98    	mov.w     w1, [w14+2]
    4096:	22 07 98    	mov.w     w2, [w14+4]
    4098:	33 07 98    	mov.w     w3, [w14+6]
    409a:	04 4f 98    	mov.b     w4, [w14+8]
    409c:	55 07 98    	mov.w     w5, [w14+10]
    409e:	46 4f 98    	mov.b     w6, [w14+12]
    40a0:	77 07 98    	mov.w     w7, [w14+14]

000040a2 <.LSM48>:
    self->port = port;
    40a2:	1e 00 78    	mov.w     [w14], w0
    40a4:	9e 00 90    	mov.w     [w14+2], w1
    40a6:	01 08 78    	mov.w     w1, [w0]

000040a8 <.LSM49>:
    self->tris = tris;
    40a8:	1e 00 78    	mov.w     [w14], w0
    40aa:	ae 00 90    	mov.w     [w14+4], w1
    40ac:	11 00 98    	mov.w     w1, [w0+2]

000040ae <.LSM50>:
    self->ans = ans;
    40ae:	1e 00 78    	mov.w     [w14], w0
    40b0:	be 00 90    	mov.w     [w14+6], w1
    40b2:	21 00 98    	mov.w     w1, [w0+4]

000040b4 <.LSM51>:
    self->bit = bit;
    40b4:	1e 00 78    	mov.w     [w14], w0
    40b6:	8e 48 90    	mov.b     [w14+8], w1
    40b8:	61 40 98    	mov.b     w1, [w0+6]

000040ba <.LSM52>:
    self->annum = annum;
    40ba:	1e 00 78    	mov.w     [w14], w0
    40bc:	de 00 90    	mov.w     [w14+10], w1
    40be:	41 00 98    	mov.w     w1, [w0+8]

000040c0 <.LSM53>:
    self->rpshift = rpshift;
    40c0:	1e 00 78    	mov.w     [w14], w0
    40c2:	ce 48 90    	mov.b     [w14+12], w1
    40c4:	21 48 98    	mov.b     w1, [w0+10]

000040c6 <.LSM54>:
    self->rpnum = rpnum;
    40c6:	fe 00 90    	mov.w     [w14+14], w1
    40c8:	1e 00 78    	mov.w     [w14], w0
    40ca:	61 00 98    	mov.w     w1, [w0+12]

000040cc <.LSM55>:
    self->rpor = rpor;
    40cc:	1e 00 78    	mov.w     [w14], w0
    40ce:	ce b8 97    	mov.w     [w14-8], w1
    40d0:	71 00 98    	mov.w     w1, [w0+14]

000040d2 <.LSM56>:
    self->owner = NULL;
    40d2:	1e 00 78    	mov.w     [w14], w0
    40d4:	80 00 eb    	clr.w     w1
    40d6:	01 08 98    	mov.w     w1, [w0+16]

000040d8 <.LSM57>:
    self->write = NULL;
    40d8:	1e 00 78    	mov.w     [w14], w0
    40da:	80 00 eb    	clr.w     w1
    40dc:	11 08 98    	mov.w     w1, [w0+18]

000040de <.LSM58>:
    self->read = NULL;
    40de:	1e 00 78    	mov.w     [w14], w0
    40e0:	80 00 eb    	clr.w     w1
    40e2:	21 08 98    	mov.w     w1, [w0+20]

000040e4 <.LSM59>:
}
    40e4:	00 80 fa    	ulnk      
    40e6:	00 00 06    	return    

000040e8 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    40e8:	02 00 fa    	lnk       #0x2
    40ea:	00 0f 78    	mov.w     w0, [w14]

000040ec <.LSM61>:
    if (self->ans)
    40ec:	1e 00 78    	mov.w     [w14], w0
    40ee:	20 00 90    	mov.w     [w0+4], w0
    40f0:	00 00 e0    	cp0.w     w0
    40f2:	0d 00 32    	bra       Z, 0x410e <.L14>

000040f4 <.LSM62>:
        bitclear(self->ans, self->bit);
    40f4:	1e 00 78    	mov.w     [w14], w0
    40f6:	20 00 90    	mov.w     [w0+4], w0
    40f8:	9e 00 78    	mov.w     [w14], w1
    40fa:	a1 00 90    	mov.w     [w1+4], w1
    40fc:	11 01 78    	mov.w     [w1], w2
    40fe:	9e 00 78    	mov.w     [w14], w1
    4100:	e1 40 90    	mov.b     [w1+6], w1
    4102:	81 80 fb    	ze        w1, w1
    4104:	13 00 20    	mov.w     #0x1, w3
    4106:	81 18 dd    	sl.w      w3, w1, w1
    4108:	81 80 ea    	com.w     w1, w1
    410a:	81 00 61    	and.w     w2, w1, w1
    410c:	01 08 78    	mov.w     w1, [w0]

0000410e <.L14>:
    bitset(self->tris, self->bit);
    410e:	1e 00 78    	mov.w     [w14], w0
    4110:	10 00 90    	mov.w     [w0+2], w0
    4112:	9e 00 78    	mov.w     [w14], w1
    4114:	91 00 90    	mov.w     [w1+2], w1
    4116:	11 01 78    	mov.w     [w1], w2
    4118:	9e 00 78    	mov.w     [w14], w1
    411a:	e1 40 90    	mov.b     [w1+6], w1
    411c:	81 80 fb    	ze        w1, w1
    411e:	13 00 20    	mov.w     #0x1, w3
    4120:	81 18 dd    	sl.w      w3, w1, w1
    4122:	82 80 70    	ior.w     w1, w2, w1
    4124:	01 08 78    	mov.w     w1, [w0]

00004126 <.LSM64>:
    self->write = NULL;
    4126:	1e 00 78    	mov.w     [w14], w0
    4128:	80 00 eb    	clr.w     w1
    412a:	11 08 98    	mov.w     w1, [w0+18]

0000412c <.LSM65>:
    self->read = __digitalRead;    
    412c:	1e 00 78    	mov.w     [w14], w0
    412e:	a1 e2 23    	mov.w     #0x3e2a, w1
    4130:	21 08 98    	mov.w     w1, [w0+20]

00004132 <.LSM66>:
}
    4132:	00 80 fa    	ulnk      
    4134:	00 00 06    	return    

00004136 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    4136:	02 00 fa    	lnk       #0x2
    4138:	00 0f 78    	mov.w     w0, [w14]

0000413a <.LSM68>:
    if (self->ans)
    413a:	1e 00 78    	mov.w     [w14], w0
    413c:	20 00 90    	mov.w     [w0+4], w0
    413e:	00 00 e0    	cp0.w     w0
    4140:	0d 00 32    	bra       Z, 0x415c <.L16>

00004142 <.LSM69>:
        bitclear(self->ans, self->bit);
    4142:	1e 00 78    	mov.w     [w14], w0
    4144:	20 00 90    	mov.w     [w0+4], w0
    4146:	9e 00 78    	mov.w     [w14], w1
    4148:	a1 00 90    	mov.w     [w1+4], w1
    414a:	11 01 78    	mov.w     [w1], w2
    414c:	9e 00 78    	mov.w     [w14], w1
    414e:	e1 40 90    	mov.b     [w1+6], w1
    4150:	81 80 fb    	ze        w1, w1
    4152:	13 00 20    	mov.w     #0x1, w3
    4154:	81 18 dd    	sl.w      w3, w1, w1
    4156:	81 80 ea    	com.w     w1, w1
    4158:	81 00 61    	and.w     w2, w1, w1
    415a:	01 08 78    	mov.w     w1, [w0]

0000415c <.L16>:
    bitclear(self->port, self->bit);
    415c:	1e 00 78    	mov.w     [w14], w0
    415e:	10 00 78    	mov.w     [w0], w0
    4160:	9e 00 78    	mov.w     [w14], w1
    4162:	91 00 78    	mov.w     [w1], w1
    4164:	11 01 78    	mov.w     [w1], w2
    4166:	9e 00 78    	mov.w     [w14], w1
    4168:	e1 40 90    	mov.b     [w1+6], w1
    416a:	81 80 fb    	ze        w1, w1
    416c:	13 00 20    	mov.w     #0x1, w3
    416e:	81 18 dd    	sl.w      w3, w1, w1
    4170:	81 80 ea    	com.w     w1, w1
    4172:	81 00 61    	and.w     w2, w1, w1
    4174:	01 08 78    	mov.w     w1, [w0]

00004176 <.LSM71>:
    bitclear(self->tris, self->bit);
    4176:	1e 00 78    	mov.w     [w14], w0
    4178:	10 00 90    	mov.w     [w0+2], w0
    417a:	9e 00 78    	mov.w     [w14], w1
    417c:	91 00 90    	mov.w     [w1+2], w1
    417e:	11 01 78    	mov.w     [w1], w2
    4180:	9e 00 78    	mov.w     [w14], w1
    4182:	e1 40 90    	mov.b     [w1+6], w1
    4184:	81 80 fb    	ze        w1, w1
    4186:	13 00 20    	mov.w     #0x1, w3
    4188:	81 18 dd    	sl.w      w3, w1, w1
    418a:	81 80 ea    	com.w     w1, w1
    418c:	81 00 61    	and.w     w2, w1, w1
    418e:	01 08 78    	mov.w     w1, [w0]

00004190 <.LSM72>:
    self->write = __digitalWrite;
    4190:	1e 00 78    	mov.w     [w14], w0
    4192:	61 de 23    	mov.w     #0x3de6, w1
    4194:	11 08 98    	mov.w     w1, [w0+18]

00004196 <.LSM73>:
    self->read = __digitalRead;
    4196:	1e 00 78    	mov.w     [w14], w0
    4198:	a1 e2 23    	mov.w     #0x3e2a, w1
    419a:	21 08 98    	mov.w     w1, [w0+20]

0000419c <.LSM74>:
}
    419c:	00 80 fa    	ulnk      
    419e:	00 00 06    	return    

000041a0 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    41a0:	02 00 fa    	lnk       #0x2
    41a2:	00 0f 78    	mov.w     w0, [w14]

000041a4 <.LSM76>:
    if (!(self->ans))
    41a4:	1e 00 78    	mov.w     [w14], w0
    41a6:	20 00 90    	mov.w     [w0+4], w0
    41a8:	00 00 e0    	cp0.w     w0
    41aa:	1f 00 32    	bra       Z, 0x41ea <.L20>

000041ac <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    41ac:	1e 00 78    	mov.w     [w14], w0
    41ae:	10 00 90    	mov.w     [w0+2], w0
    41b0:	9e 00 78    	mov.w     [w14], w1
    41b2:	91 00 90    	mov.w     [w1+2], w1
    41b4:	11 01 78    	mov.w     [w1], w2
    41b6:	9e 00 78    	mov.w     [w14], w1
    41b8:	e1 40 90    	mov.b     [w1+6], w1
    41ba:	81 80 fb    	ze        w1, w1
    41bc:	13 00 20    	mov.w     #0x1, w3
    41be:	81 18 dd    	sl.w      w3, w1, w1
    41c0:	82 80 70    	ior.w     w1, w2, w1
    41c2:	01 08 78    	mov.w     w1, [w0]

000041c4 <.LSM78>:
    bitset(self->ans, self->bit);
    41c4:	1e 00 78    	mov.w     [w14], w0
    41c6:	20 00 90    	mov.w     [w0+4], w0
    41c8:	9e 00 78    	mov.w     [w14], w1
    41ca:	a1 00 90    	mov.w     [w1+4], w1
    41cc:	11 01 78    	mov.w     [w1], w2
    41ce:	9e 00 78    	mov.w     [w14], w1
    41d0:	e1 40 90    	mov.b     [w1+6], w1
    41d2:	81 80 fb    	ze        w1, w1
    41d4:	13 00 20    	mov.w     #0x1, w3
    41d6:	81 18 dd    	sl.w      w3, w1, w1
    41d8:	82 80 70    	ior.w     w1, w2, w1
    41da:	01 08 78    	mov.w     w1, [w0]

000041dc <.LSM79>:
    self->write = NULL;
    41dc:	1e 00 78    	mov.w     [w14], w0
    41de:	80 00 eb    	clr.w     w1
    41e0:	11 08 98    	mov.w     w1, [w0+18]

000041e2 <.LSM80>:
    self->read = __analogRead;
    41e2:	1e 00 78    	mov.w     [w14], w0
    41e4:	c1 e4 23    	mov.w     #0x3e4c, w1
    41e6:	21 08 98    	mov.w     w1, [w0+20]
    41e8:	01 00 37    	bra       0x41ec <.L17>

000041ea <.L20>:
    41ea:	00 00 00    	nop       

000041ec <.L17>:
}
    41ec:	00 80 fa    	ulnk      
    41ee:	00 00 06    	return    

000041f0 <_pin_set>:

void pin_set(_PIN *self) {
    41f0:	02 00 fa    	lnk       #0x2
    41f2:	00 0f 78    	mov.w     w0, [w14]

000041f4 <.LSM84>:
    if (self->write==__digitalWrite)
    41f4:	1e 00 78    	mov.w     [w14], w0
    41f6:	90 08 90    	mov.w     [w0+18], w1
    41f8:	60 de 23    	mov.w     #0x3de6, w0
    41fa:	80 8f 50    	sub.w     w1, w0, [w15]
    41fc:	0c 00 3a    	bra       NZ, 0x4216 <.L21>

000041fe <.LSM85>:
        bitset(self->port, self->bit);
    41fe:	1e 00 78    	mov.w     [w14], w0
    4200:	10 00 78    	mov.w     [w0], w0
    4202:	9e 00 78    	mov.w     [w14], w1
    4204:	91 00 78    	mov.w     [w1], w1
    4206:	11 01 78    	mov.w     [w1], w2
    4208:	9e 00 78    	mov.w     [w14], w1
    420a:	e1 40 90    	mov.b     [w1+6], w1
    420c:	81 80 fb    	ze        w1, w1
    420e:	13 00 20    	mov.w     #0x1, w3
    4210:	81 18 dd    	sl.w      w3, w1, w1
    4212:	82 80 70    	ior.w     w1, w2, w1
    4214:	01 08 78    	mov.w     w1, [w0]

00004216 <.L21>:
}
    4216:	00 80 fa    	ulnk      
    4218:	00 00 06    	return    

0000421a <_pin_clear>:

void pin_clear(_PIN *self) {
    421a:	02 00 fa    	lnk       #0x2
    421c:	00 0f 78    	mov.w     w0, [w14]

0000421e <.LSM88>:
    if (self->write==__digitalWrite)
    421e:	1e 00 78    	mov.w     [w14], w0
    4220:	90 08 90    	mov.w     [w0+18], w1
    4222:	60 de 23    	mov.w     #0x3de6, w0
    4224:	80 8f 50    	sub.w     w1, w0, [w15]
    4226:	0d 00 3a    	bra       NZ, 0x4242 <.L23>

00004228 <.LSM89>:
        bitclear(self->port, self->bit);
    4228:	1e 00 78    	mov.w     [w14], w0
    422a:	10 00 78    	mov.w     [w0], w0
    422c:	9e 00 78    	mov.w     [w14], w1
    422e:	91 00 78    	mov.w     [w1], w1
    4230:	11 01 78    	mov.w     [w1], w2
    4232:	9e 00 78    	mov.w     [w14], w1
    4234:	e1 40 90    	mov.b     [w1+6], w1
    4236:	81 80 fb    	ze        w1, w1
    4238:	13 00 20    	mov.w     #0x1, w3
    423a:	81 18 dd    	sl.w      w3, w1, w1
    423c:	81 80 ea    	com.w     w1, w1
    423e:	81 00 61    	and.w     w2, w1, w1
    4240:	01 08 78    	mov.w     w1, [w0]

00004242 <.L23>:
}
    4242:	00 80 fa    	ulnk      
    4244:	00 00 06    	return    

00004246 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    4246:	02 00 fa    	lnk       #0x2
    4248:	00 0f 78    	mov.w     w0, [w14]

0000424a <.LSM92>:
    if (self->write==__digitalWrite)
    424a:	1e 00 78    	mov.w     [w14], w0
    424c:	90 08 90    	mov.w     [w0+18], w1
    424e:	60 de 23    	mov.w     #0x3de6, w0
    4250:	80 8f 50    	sub.w     w1, w0, [w15]
    4252:	0c 00 3a    	bra       NZ, 0x426c <.L25>

00004254 <.LSM93>:
        bitflip(self->port, self->bit);
    4254:	1e 00 78    	mov.w     [w14], w0
    4256:	10 00 78    	mov.w     [w0], w0
    4258:	9e 00 78    	mov.w     [w14], w1
    425a:	91 00 78    	mov.w     [w1], w1
    425c:	11 01 78    	mov.w     [w1], w2
    425e:	9e 00 78    	mov.w     [w14], w1
    4260:	e1 40 90    	mov.b     [w1+6], w1
    4262:	81 80 fb    	ze        w1, w1
    4264:	13 00 20    	mov.w     #0x1, w3
    4266:	81 18 dd    	sl.w      w3, w1, w1
    4268:	81 00 69    	xor.w     w2, w1, w1
    426a:	01 08 78    	mov.w     w1, [w0]

0000426c <.L25>:
}
    426c:	00 80 fa    	ulnk      
    426e:	00 00 06    	return    

00004270 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    4270:	04 00 fa    	lnk       #0x4
    4272:	00 0f 78    	mov.w     w0, [w14]
    4274:	11 07 98    	mov.w     w1, [w14+2]

00004276 <.LSM96>:
    if (self->write)
    4276:	1e 00 78    	mov.w     [w14], w0
    4278:	10 08 90    	mov.w     [w0+18], w0
    427a:	00 00 e0    	cp0.w     w0
    427c:	05 00 32    	bra       Z, 0x4288 <.L27>

0000427e <.LSM97>:
        self->write(self, val);
    427e:	1e 00 78    	mov.w     [w14], w0
    4280:	10 09 90    	mov.w     [w0+18], w2
    4282:	9e 00 90    	mov.w     [w14+2], w1
    4284:	1e 00 78    	mov.w     [w14], w0
    4286:	02 00 01    	call      w2

00004288 <.L27>:
}
    4288:	00 80 fa    	ulnk      
    428a:	00 00 06    	return    

0000428c <_pin_read>:

uint16_t pin_read(_PIN *self) {
    428c:	02 00 fa    	lnk       #0x2
    428e:	00 0f 78    	mov.w     w0, [w14]

00004290 <.LSM100>:
    if (self->read)
    4290:	1e 00 78    	mov.w     [w14], w0
    4292:	20 08 90    	mov.w     [w0+20], w0
    4294:	00 00 e0    	cp0.w     w0
    4296:	05 00 32    	bra       Z, 0x42a2 <.L30>

00004298 <.LSM101>:
        return self->read(self);
    4298:	1e 00 78    	mov.w     [w14], w0
    429a:	a0 08 90    	mov.w     [w0+20], w1
    429c:	1e 00 78    	mov.w     [w14], w0
    429e:	01 00 01    	call      w1
    42a0:	01 00 37    	bra       0x42a4 <.L31>

000042a2 <.L30>:
    else
        return 0xFFFF;
    42a2:	00 80 eb    	setm.w    w0

000042a4 <.L31>:
}
    42a4:	00 80 fa    	ulnk      
    42a6:	00 00 06    	return    

000042a8 <_VendorRequests>:
uint16_t rocket_state, counter, coin;
uint16_t rocket_speed, rocket_tilt;
uint8_t rec_msg[64], tx_msg[64];

void VendorRequests(void) {
    42a8:	02 00 fa    	lnk       #0x2

000042aa <.LSM1>:
    WORD temp;
    switch (USB_setup.bRequest) {
    42aa:	40 83 20    	mov.w     #0x834, w0
    42ac:	10 40 90    	mov.b     [w0+1], w0
    42ae:	00 80 fb    	ze        w0, w0
    42b0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    42b2:	0b 00 32    	bra       Z, 0x42ca <.L4>
    42b4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    42b6:	4b 00 32    	bra       Z, 0x434e <.L5>
    42b8:	00 00 e0    	cp0.w     w0
    42ba:	6d 00 3a    	bra       NZ, 0x4396 <.L7>

000042bc <.LSM2>:
    case SET_STATE:
        // state = USB_setup.wValue.w;
        BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0
    42bc:	40 e0 21    	mov.w     #0x1e04, w0
    42be:	80 40 eb    	clr.b     w1
    42c0:	01 48 78    	mov.b     w1, [w0]

000042c2 <.LSM3>:
        BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    42c2:	50 e0 21    	mov.w     #0x1e05, w0
    42c4:	81 cc b3    	mov.b     #0xc8, w1
    42c6:	01 48 78    	mov.b     w1, [w0]

000042c8 <.LSM4>:
        break;
    42c8:	69 00 37    	bra       0x439c <.L1>

000042ca <.L4>:
    case GET_VALS:
        temp.w = rocket_tilt;
    42ca:	80 42 80    	mov.w     0x850, w0
    42cc:	00 0f 78    	mov.w     w0, [w14]

000042ce <.LSM6>:
        BD[EP0IN].address[0] = temp.b[0];
    42ce:	30 f0 80    	mov.w     0x1e06, w0
    42d0:	9e 40 78    	mov.b     [w14], w1
    42d2:	01 48 78    	mov.b     w1, [w0]

000042d4 <.LSM7>:
        BD[EP0IN].address[1] = temp.b[1];
    42d4:	30 f0 80    	mov.w     0x1e06, w0
    42d6:	00 00 e8    	inc.w     w0, w0
    42d8:	9e 40 90    	mov.b     [w14+1], w1
    42da:	01 48 78    	mov.b     w1, [w0]

000042dc <.LSM8>:
        temp.w = uart1.TXbuffer.tail;
    42dc:	f0 43 80    	mov.w     0x87e, w0
    42de:	00 0f 78    	mov.w     w0, [w14]

000042e0 <.LSM9>:
        BD[EP0IN].address[2] = temp.b[0];
    42e0:	30 f0 80    	mov.w     0x1e06, w0
    42e2:	00 80 e8    	inc2.w    w0, w0
    42e4:	9e 40 78    	mov.b     [w14], w1
    42e6:	01 48 78    	mov.b     w1, [w0]

000042e8 <.LSM10>:
        BD[EP0IN].address[3] = temp.b[1];
    42e8:	30 f0 80    	mov.w     0x1e06, w0
    42ea:	63 00 40    	add.w     w0, #0x3, w0
    42ec:	9e 40 90    	mov.b     [w14+1], w1
    42ee:	01 48 78    	mov.b     w1, [w0]

000042f0 <.LSM11>:
        temp.w = uart1.TXbuffer.count;
    42f0:	00 44 80    	mov.w     0x880, w0
    42f2:	00 0f 78    	mov.w     w0, [w14]

000042f4 <.LSM12>:
        BD[EP0IN].address[4] = temp.b[0];
    42f4:	30 f0 80    	mov.w     0x1e06, w0
    42f6:	64 00 40    	add.w     w0, #0x4, w0
    42f8:	9e 40 78    	mov.b     [w14], w1
    42fa:	01 48 78    	mov.b     w1, [w0]

000042fc <.LSM13>:
        BD[EP0IN].address[5] = temp.b[1];
    42fc:	30 f0 80    	mov.w     0x1e06, w0
    42fe:	65 00 40    	add.w     w0, #0x5, w0
    4300:	9e 40 90    	mov.b     [w14+1], w1
    4302:	01 48 78    	mov.b     w1, [w0]

00004304 <.LSM14>:

        temp.w = uart1.RXbuffer.head;
    4304:	30 44 80    	mov.w     0x886, w0
    4306:	00 0f 78    	mov.w     w0, [w14]

00004308 <.LSM15>:
        BD[EP0IN].address[6] = temp.b[0];
    4308:	30 f0 80    	mov.w     0x1e06, w0
    430a:	66 00 40    	add.w     w0, #0x6, w0
    430c:	9e 40 78    	mov.b     [w14], w1
    430e:	01 48 78    	mov.b     w1, [w0]

00004310 <.LSM16>:
        BD[EP0IN].address[7] = temp.b[1];
    4310:	30 f0 80    	mov.w     0x1e06, w0
    4312:	67 00 40    	add.w     w0, #0x7, w0
    4314:	9e 40 90    	mov.b     [w14+1], w1
    4316:	01 48 78    	mov.b     w1, [w0]

00004318 <.LSM17>:
        temp.w = uart1.RXbuffer.tail;
    4318:	40 44 80    	mov.w     0x888, w0
    431a:	00 0f 78    	mov.w     w0, [w14]

0000431c <.LSM18>:
        BD[EP0IN].address[8] = temp.b[0];
    431c:	30 f0 80    	mov.w     0x1e06, w0
    431e:	68 00 40    	add.w     w0, #0x8, w0
    4320:	9e 40 78    	mov.b     [w14], w1
    4322:	01 48 78    	mov.b     w1, [w0]

00004324 <.LSM19>:
        BD[EP0IN].address[9] = temp.b[1];
    4324:	30 f0 80    	mov.w     0x1e06, w0
    4326:	69 00 40    	add.w     w0, #0x9, w0
    4328:	9e 40 90    	mov.b     [w14+1], w1
    432a:	01 48 78    	mov.b     w1, [w0]

0000432c <.LSM20>:
        temp.w = uart1.RXbuffer.count;
    432c:	50 44 80    	mov.w     0x88a, w0
    432e:	00 0f 78    	mov.w     w0, [w14]

00004330 <.LSM21>:
        BD[EP0IN].address[10] = temp.b[0];
    4330:	30 f0 80    	mov.w     0x1e06, w0
    4332:	6a 00 40    	add.w     w0, #0xa, w0
    4334:	9e 40 78    	mov.b     [w14], w1
    4336:	01 48 78    	mov.b     w1, [w0]

00004338 <.LSM22>:
        BD[EP0IN].address[11] = temp.b[1];
    4338:	30 f0 80    	mov.w     0x1e06, w0
    433a:	6b 00 40    	add.w     w0, #0xb, w0
    433c:	9e 40 90    	mov.b     [w14+1], w1
    433e:	01 48 78    	mov.b     w1, [w0]

00004340 <.LSM23>:
        BD[EP0IN].bytecount = 12;    // set EP0 IN byte count to 4
    4340:	40 e0 21    	mov.w     #0x1e04, w0
    4342:	c1 c0 b3    	mov.b     #0xc, w1
    4344:	01 48 78    	mov.b     w1, [w0]

00004346 <.LSM24>:
        BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4346:	50 e0 21    	mov.w     #0x1e05, w0
    4348:	81 cc b3    	mov.b     #0xc8, w1
    434a:	01 48 78    	mov.b     w1, [w0]

0000434c <.LSM25>:
        break;
    434c:	27 00 37    	bra       0x439c <.L1>

0000434e <.L5>:

    case GET_ROCKET_INFO:
        temp.w = rocket_tilt;
    434e:	80 42 80    	mov.w     0x850, w0
    4350:	00 0f 78    	mov.w     w0, [w14]

00004352 <.LSM27>:
        BD[EP0IN].address[0] = temp.b[0];
    4352:	30 f0 80    	mov.w     0x1e06, w0
    4354:	9e 40 78    	mov.b     [w14], w1
    4356:	01 48 78    	mov.b     w1, [w0]

00004358 <.LSM28>:
        BD[EP0IN].address[1] = temp.b[1];
    4358:	30 f0 80    	mov.w     0x1e06, w0
    435a:	00 00 e8    	inc.w     w0, w0
    435c:	9e 40 90    	mov.b     [w14+1], w1
    435e:	01 48 78    	mov.b     w1, [w0]

00004360 <.LSM29>:
        temp.w = rocket_speed;
    4360:	70 42 80    	mov.w     0x84e, w0
    4362:	00 0f 78    	mov.w     w0, [w14]

00004364 <.LSM30>:
        BD[EP0IN].address[2] = temp.b[0];
    4364:	30 f0 80    	mov.w     0x1e06, w0
    4366:	00 80 e8    	inc2.w    w0, w0
    4368:	9e 40 78    	mov.b     [w14], w1
    436a:	01 48 78    	mov.b     w1, [w0]

0000436c <.LSM31>:
        BD[EP0IN].address[3] = temp.b[1];
    436c:	30 f0 80    	mov.w     0x1e06, w0
    436e:	63 00 40    	add.w     w0, #0x3, w0
    4370:	9e 40 90    	mov.b     [w14+1], w1
    4372:	01 48 78    	mov.b     w1, [w0]

00004374 <.LSM32>:
        temp.w = rocket_state;
    4374:	40 42 80    	mov.w     0x848, w0
    4376:	00 0f 78    	mov.w     w0, [w14]

00004378 <.LSM33>:
        BD[EP0IN].address[4] = temp.b[0];
    4378:	30 f0 80    	mov.w     0x1e06, w0
    437a:	64 00 40    	add.w     w0, #0x4, w0
    437c:	9e 40 78    	mov.b     [w14], w1
    437e:	01 48 78    	mov.b     w1, [w0]

00004380 <.LSM34>:
        BD[EP0IN].address[5] = temp.b[1];
    4380:	30 f0 80    	mov.w     0x1e06, w0
    4382:	65 00 40    	add.w     w0, #0x5, w0
    4384:	9e 40 90    	mov.b     [w14+1], w1
    4386:	01 48 78    	mov.b     w1, [w0]

00004388 <.LSM35>:
        BD[EP0IN].bytecount = 6;    // set EP0 IN byte count to 4
    4388:	40 e0 21    	mov.w     #0x1e04, w0
    438a:	61 c0 b3    	mov.b     #0x6, w1
    438c:	01 48 78    	mov.b     w1, [w0]

0000438e <.LSM36>:
        BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    438e:	50 e0 21    	mov.w     #0x1e05, w0
    4390:	81 cc b3    	mov.b     #0xc8, w1
    4392:	01 48 78    	mov.b     w1, [w0]

00004394 <.LSM37>:
        break;
    4394:	03 00 37    	bra       0x439c <.L1>

00004396 <.L7>:
    default:
        USB_error_flags |= 0x01;    // set Request Error Flag
    4396:	3c c8 bf    	mov.b     0x83c, WREG
    4398:	00 04 a0    	bset.b    w0, #0x0
    439a:	3c e8 b7    	mov.b     WREG, 0x83c

0000439c <.L1>:
    }
}
    439c:	00 80 fa    	ulnk      
    439e:	00 00 06    	return    

000043a0 <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    43a0:	00 00 fa    	lnk       #0x0

000043a2 <.LSM41>:
    switch (USB_request.setup.bRequest) {
    default:
        USB_error_flags |= 0x01;                    // set Request Error Flag
    43a2:	3c c8 bf    	mov.b     0x83c, WREG
    43a4:	00 04 a0    	bset.b    w0, #0x0
    43a6:	3c e8 b7    	mov.b     WREG, 0x83c

000043a8 <.LSM42>:
    }
}
    43a8:	00 80 fa    	ulnk      
    43aa:	00 00 06    	return    

000043ac <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    43ac:	00 00 fa    	lnk       #0x0

000043ae <.LSM44>:
    switch (USB_request.setup.bRequest) {
    default:
        USB_error_flags |= 0x01;                    // set Request Error Flag
    43ae:	3c c8 bf    	mov.b     0x83c, WREG
    43b0:	00 04 a0    	bset.b    w0, #0x0
    43b2:	3c e8 b7    	mov.b     WREG, 0x83c

000043b4 <.LSM45>:
    }
}
    43b4:	00 80 fa    	ulnk      
    43b6:	00 00 06    	return    

000043b8 <_UART_ctl>:

void UART_ctl(uint8_t cmd, uint8_t value) {
    43b8:	06 00 fa    	lnk       #0x6
    43ba:	40 47 98    	mov.b     w0, [w14+4]
    43bc:	51 47 98    	mov.b     w1, [w14+5]

000043be <.LSM47>:
    sprintf(tx_msg, "%01x%01x\r", value, cmd); //value could be state or command
    43be:	4e 40 90    	mov.b     [w14+4], w0
    43c0:	00 81 fb    	ze        w0, w2
    43c2:	5e 40 90    	mov.b     [w14+5], w0
    43c4:	80 80 fb    	ze        w0, w1
    43c6:	a0 a0 21    	mov.w     #0x1a0a, w0
    43c8:	82 1f 78    	mov.w     w2, [w15++]
    43ca:	81 1f 78    	mov.w     w1, [w15++]
    43cc:	41 19 2a    	mov.w     #0xa194, w1
    43ce:	81 1f 78    	mov.w     w1, [w15++]
    43d0:	b3 e9 07    	rcall     0x1738 <__sprintf_cdnopuxX>
    43d2:	e6 87 57    	sub.w     w15, #0x6, w15

000043d4 <.LSM48>:
    uart_puts(&uart1, tx_msg);
    43d4:	a1 a0 21    	mov.w     #0x1a0a, w1
    43d6:	60 85 20    	mov.w     #0x856, w0
    43d8:	56 f5 07    	rcall     0x2e86 <_uart_puts>

000043da <.LSM49>:
    if (cmd == GET_ROCKET_VALS) {
    43da:	4e 40 90    	mov.b     [w14+4], w0
    43dc:	00 04 e0    	cp0.b     w0
    43de:	37 00 3a    	bra       NZ, 0x444e <.L10>

000043e0 <.LBB2>:
        uart_gets(&uart1, rec_msg, 64);
    43e0:	02 04 20    	mov.w     #0x40, w2
    43e2:	a1 9c 21    	mov.w     #0x19ca, w1
    43e4:	60 85 20    	mov.w     #0x856, w0
    43e6:	f4 f5 07    	rcall     0x2fd0 <_uart_gets>

000043e8 <.LSM51>:
        uint32_t decoded_msg = (uint32_t)strtol(rec_msg, NULL, 16);
    43e8:	a0 9c 21    	mov.w     #0x19ca, w0
    43ea:	02 01 20    	mov.w     #0x10, w2
    43ec:	80 00 eb    	clr.w     w1
    43ee:	a5 e8 07    	rcall     0x153a <_strtol>
    43f0:	00 8f be    	mov.d     w0, [w14]

000043f2 <.LSM52>:
        rocket_speed = (uint16_t)((decoded_msg & 0xFF0000) >> 16);
    43f2:	00 00 20    	mov.w     #0x0, w0
    43f4:	f1 0f 20    	mov.w     #0xff, w1
    43f6:	1e 01 be    	mov.d     [w14], w2
    43f8:	02 02 78    	mov.w     w2, w4
    43fa:	03 01 78    	mov.w     w3, w2
    43fc:	80 01 78    	mov.w     w0, w3
    43fe:	01 00 78    	mov.w     w1, w0
    4400:	03 02 62    	and.w     w4, w3, w4
    4402:	00 00 61    	and.w     w2, w0, w0
    4404:	80 00 eb    	clr.w     w1
    4406:	c0 00 dd    	sl.w      w0, #0x0, w1
    4408:	00 00 20    	mov.w     #0x0, w0
    440a:	00 01 be    	mov.d     w0, w2
    440c:	61 20 b8    	mul.uu    w4, #0x1, w0
    440e:	00 01 71    	ior.w     w2, w0, w2
    4410:	81 81 71    	ior.w     w3, w1, w3
    4412:	40 18 de    	lsr.w     w3, #0x0, w0
    4414:	01 00 20    	mov.w     #0x0, w1
    4416:	00 00 78    	mov.w     w0, w0
    4418:	70 42 88    	mov.w     w0, 0x84e

0000441a <.LSM53>:
        rocket_tilt = (uint16_t)((decoded_msg & 0xFF00) >> 8);
    441a:	00 f0 2f    	mov.w     #0xff00, w0
    441c:	01 00 20    	mov.w     #0x0, w1
    441e:	1e 01 be    	mov.d     [w14], w2
    4420:	02 02 78    	mov.w     w2, w4
    4422:	03 01 78    	mov.w     w3, w2
    4424:	80 01 78    	mov.w     w0, w3
    4426:	01 00 78    	mov.w     w1, w0
    4428:	03 02 62    	and.w     w4, w3, w4
    442a:	00 00 61    	and.w     w2, w0, w0
    442c:	80 00 eb    	clr.w     w1
    442e:	c0 00 dd    	sl.w      w0, #0x0, w1
    4430:	00 00 20    	mov.w     #0x0, w0
    4432:	00 01 be    	mov.d     w0, w2
    4434:	61 20 b8    	mul.uu    w4, #0x1, w0
    4436:	00 01 71    	ior.w     w2, w0, w2
    4438:	81 81 71    	ior.w     w3, w1, w3
    443a:	48 1a dd    	sl.w      w3, #0x8, w4
    443c:	48 10 de    	lsr.w     w2, #0x8, w0
    443e:	00 00 72    	ior.w     w4, w0, w0
    4440:	c8 18 de    	lsr.w     w3, #0x8, w1
    4442:	00 00 78    	mov.w     w0, w0
    4444:	80 42 88    	mov.w     w0, 0x850

00004446 <.LSM54>:
        rocket_state = decoded_msg & 0xFF;
    4446:	9e 00 78    	mov.w     [w14], w1
    4448:	f0 0f 20    	mov.w     #0xff, w0
    444a:	00 80 60    	and.w     w1, w0, w0
    444c:	40 42 88    	mov.w     w0, 0x848

0000444e <.L10>:
    }
}
    444e:	00 80 fa    	ulnk      
    4450:	00 00 06    	return    

00004452 <_setup_uart>:

void setup_uart() {
    4452:	00 00 fa    	lnk       #0x0

00004454 <.LSM57>:
    /*
    Configures UART for communications.
    Uses uart1 for inter-PIC communications. Rx on D[0], Tx on D[1].
    Automatically uses uart2 for stdout, stderr to PC via audio jack.
    */
    uart_open(&uart1, &D[1], &D[0], NULL, NULL, 19200., 'N', 1,
    4454:	00 40 20    	mov.w     #0x400, w0
    4456:	80 1f 78    	mov.w     w0, [w15++]
    4458:	a0 5c 21    	mov.w     #0x15ca, w0
    445a:	80 1f 78    	mov.w     w0, [w15++]
    445c:	00 40 20    	mov.w     #0x400, w0
    445e:	80 1f 78    	mov.w     w0, [w15++]
    4460:	a0 1c 21    	mov.w     #0x11ca, w0
    4462:	80 1f 78    	mov.w     w0, [w15++]
    4464:	00 00 eb    	clr.w     w0
    4466:	80 1f 78    	mov.w     w0, [w15++]
    4468:	10 00 20    	mov.w     #0x1, w0
    446a:	80 1f 78    	mov.w     w0, [w15++]
    446c:	e5 c4 b3    	mov.b     #0x4e, w5
    446e:	06 00 20    	mov.w     #0x0, w6
    4470:	67 69 24    	mov.w     #0x4696, w7
    4472:	00 02 eb    	clr.w     w4
    4474:	80 01 eb    	clr.w     w3
    4476:	a2 a4 21    	mov.w     #0x1a4a, w2
    4478:	01 a6 21    	mov.w     #0x1a60, w1
    447a:	60 85 20    	mov.w     #0x856, w0
    447c:	ad f1 07    	rcall     0x27d8 <_uart_open>
    447e:	ec 87 57    	sub.w     w15, #0xc, w15

00004480 <.LSM58>:
              0, RC_TXBUF, 1024, RC_RXBUF, 1024);
}
    4480:	00 80 fa    	ulnk      
    4482:	00 00 06    	return    

00004484 <_idle>:

void idle(void) {
    4484:	00 00 fa    	lnk       #0x0

00004486 <.LSM60>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    4486:	11 42 80    	mov.w     0x842, w1
    4488:	20 42 80    	mov.w     0x844, w0
    448a:	80 8f 50    	sub.w     w1, w0, [w15]
    448c:	05 00 32    	bra       Z, 0x4498 <.L14>

0000448e <.LSM61>:
        last_state = state;
    448e:	10 42 80    	mov.w     0x842, w0
    4490:	20 42 88    	mov.w     w0, 0x844

00004492 <.LSM62>:
        trials = 0;
    4492:	46 68 ef    	clr.b     0x846

00004494 <.LSM63>:
        led_on(&led1);
    4494:	00 80 20    	mov.w     #0x800, w0
    4496:	12 01 07    	rcall     0x46bc <_led_on>

00004498 <.L14>:
    }

    coin = pin_read(&D[2]); //digital read of the coin acceptor.
    4498:	60 a7 21    	mov.w     #0x1a76, w0
    449a:	f8 fe 07    	rcall     0x428c <_pin_read>
    449c:	60 42 88    	mov.w     w0, 0x84c

0000449e <.LSM65>:

    //Note: might be a good idea to add input conditioner later on.

    // Perform state tasks

    // Check for state transitions
    if (coin == 0) {
    449e:	60 42 80    	mov.w     0x84c, w0
    44a0:	00 00 e0    	cp0.w     w0
    44a2:	02 00 3a    	bra       NZ, 0x44a8 <.L15>

000044a4 <.LSM66>:
        state = reset;
    44a4:	80 4b 24    	mov.w     #0x44b8, w0
    44a6:	10 42 88    	mov.w     w0, 0x842

000044a8 <.L15>:
    }

    if (state != last_state) {
    44a8:	11 42 80    	mov.w     0x842, w1
    44aa:	20 42 80    	mov.w     0x844, w0
    44ac:	80 8f 50    	sub.w     w1, w0, [w15]
    44ae:	02 00 32    	bra       Z, 0x44b4 <.L13>

000044b0 <.LSM68>:
        led_off(&led1);  // if we are leaving the state, do clean up stuff
    44b0:	00 80 20    	mov.w     #0x800, w0
    44b2:	14 01 07    	rcall     0x46dc <_led_off>

000044b4 <.L13>:
    }
}
    44b4:	00 80 fa    	ulnk      
    44b6:	00 00 06    	return    

000044b8 <_reset>:

void reset(void) {
    44b8:	00 00 fa    	lnk       #0x0

000044ba <.LSM71>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    44ba:	11 42 80    	mov.w     0x842, w1
    44bc:	20 42 80    	mov.w     0x844, w0
    44be:	80 8f 50    	sub.w     w1, w0, [w15]
    44c0:	04 00 32    	bra       Z, 0x44ca <.L18>

000044c2 <.LSM72>:
        last_state = state;
    44c2:	10 42 80    	mov.w     0x842, w0
    44c4:	20 42 88    	mov.w     w0, 0x844

000044c6 <.LSM73>:
        led_on(&led2);
    44c6:	80 80 20    	mov.w     #0x808, w0
    44c8:	f9 00 07    	rcall     0x46bc <_led_on>

000044ca <.L18>:
    }

    // Perform state tasks

    // Check for state transitions

    if (trials == 3){
    44ca:	46 c8 bf    	mov.b     0x846, WREG
    44cc:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    44ce:	02 00 3a    	bra       NZ, 0x44d4 <.L19>

000044d0 <.LSM75>:
        state = idle;
    44d0:	40 48 24    	mov.w     #0x4484, w0
    44d2:	10 42 88    	mov.w     w0, 0x842

000044d4 <.L19>:
    }

    if (rocket_state == READY) {
    44d4:	40 42 80    	mov.w     0x848, w0
    44d6:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    44d8:	02 00 3a    	bra       NZ, 0x44de <.L20>

000044da <.LSM77>:
        state = flying;
    44da:	e0 4e 24    	mov.w     #0x44ee, w0
    44dc:	10 42 88    	mov.w     w0, 0x842

000044de <.L20>:
    }

    if (state != last_state) {
    44de:	11 42 80    	mov.w     0x842, w1
    44e0:	20 42 80    	mov.w     0x844, w0
    44e2:	80 8f 50    	sub.w     w1, w0, [w15]
    44e4:	02 00 32    	bra       Z, 0x44ea <.L17>

000044e6 <.LSM79>:
        led_off(&led2);  // if we are leaving the state, do clean up stuff
    44e6:	80 80 20    	mov.w     #0x808, w0
    44e8:	f9 00 07    	rcall     0x46dc <_led_off>

000044ea <.L17>:
    }
}
    44ea:	00 80 fa    	ulnk      
    44ec:	00 00 06    	return    

000044ee <_flying>:

void flying(void) {
    44ee:	00 00 fa    	lnk       #0x0

000044f0 <.LSM82>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    44f0:	11 42 80    	mov.w     0x842, w1
    44f2:	20 42 80    	mov.w     0x844, w0
    44f4:	80 8f 50    	sub.w     w1, w0, [w15]
    44f6:	02 00 32    	bra       Z, 0x44fc <.L23>

000044f8 <.LSM83>:
        last_state = state;
    44f8:	10 42 80    	mov.w     0x842, w0
    44fa:	20 42 88    	mov.w     w0, 0x844

000044fc <.L23>:
    }

    // Perform state tasks

    // Check for state transitions
    if (rocket_state == CRASHED) {
    44fc:	40 42 80    	mov.w     0x848, w0
    44fe:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4500:	02 00 3a    	bra       NZ, 0x4506 <.L24>

00004502 <.LSM85>:
        state = lose;
    4502:	40 51 24    	mov.w     #0x4514, w0
    4504:	10 42 88    	mov.w     w0, 0x842

00004506 <.L24>:
    }

    if (rocket_state == LANDED){
    4506:	40 42 80    	mov.w     0x848, w0
    4508:	00 00 e0    	cp0.w     w0
    450a:	02 00 3a    	bra       NZ, 0x4510 <.L25>

0000450c <.LSM87>:
        state = win;
    450c:	a0 55 24    	mov.w     #0x455a, w0
    450e:	10 42 88    	mov.w     w0, 0x842

00004510 <.L25>:
    }

    if (state != last_state) {  // if we are leaving the state, do clean up stuff
    }
}
    4510:	00 80 fa    	ulnk      
    4512:	00 00 06    	return    

00004514 <_lose>:

void lose(void) {
    4514:	00 00 fa    	lnk       #0x0

00004516 <.LSM90>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    4516:	11 42 80    	mov.w     0x842, w1
    4518:	20 42 80    	mov.w     0x844, w0
    451a:	80 8f 50    	sub.w     w1, w0, [w15]
    451c:	05 00 32    	bra       Z, 0x4528 <.L27>

0000451e <.LSM91>:
        last_state = state;
    451e:	10 42 80    	mov.w     0x842, w0
    4520:	20 42 88    	mov.w     w0, 0x844

00004522 <.LSM92>:
        timer_start(&timer1);
    4522:	e0 c8 21    	mov.w     #0x1c8e, w0
    4524:	b0 fb 07    	rcall     0x3c86 <_timer_start>

00004526 <.LSM93>:
        counter = 0;
    4526:	4a 28 ef    	clr.w     0x84a

00004528 <.L27>:
    }

    if (timer_flag(&timer1)) {
    4528:	e0 c8 21    	mov.w     #0x1c8e, w0
    452a:	cb fb 07    	rcall     0x3cc2 <_timer_flag>
    452c:	00 00 e0    	cp0.w     w0
    452e:	05 00 32    	bra       Z, 0x453a <.L28>

00004530 <.LSM95>:
        timer_lower(&timer1);
    4530:	e0 c8 21    	mov.w     #0x1c8e, w0
    4532:	d8 fb 07    	rcall     0x3ce4 <_timer_lower>

00004534 <.LSM96>:
        counter++;
    4534:	50 42 80    	mov.w     0x84a, w0
    4536:	00 00 e8    	inc.w     w0, w0
    4538:	50 42 88    	mov.w     w0, 0x84a

0000453a <.L28>:
    }

    // Check for state transitions
    if (counter == 10) {
    453a:	50 42 80    	mov.w     0x84a, w0
    453c:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    453e:	02 00 3a    	bra       NZ, 0x4544 <.L29>

00004540 <.LSM98>:
        state = reset;
    4540:	80 4b 24    	mov.w     #0x44b8, w0
    4542:	10 42 88    	mov.w     w0, 0x842

00004544 <.L29>:
    }

    if (state != last_state) {
    4544:	11 42 80    	mov.w     0x842, w1
    4546:	20 42 80    	mov.w     0x844, w0
    4548:	80 8f 50    	sub.w     w1, w0, [w15]
    454a:	05 00 32    	bra       Z, 0x4556 <.L26>

0000454c <.LSM100>:
        timer_stop(&timer1);
    454c:	e0 c8 21    	mov.w     #0x1c8e, w0
    454e:	ad fb 07    	rcall     0x3caa <_timer_stop>

00004550 <.LSM101>:
        trials++;  // if we are leaving the state, do clean up stuff
    4550:	46 c8 bf    	mov.b     0x846, WREG
    4552:	00 40 e8    	inc.b     w0, w0
    4554:	46 e8 b7    	mov.b     WREG, 0x846

00004556 <.L26>:
    }
}
    4556:	00 80 fa    	ulnk      
    4558:	00 00 06    	return    

0000455a <_win>:

void win(void) {
    455a:	00 00 fa    	lnk       #0x0

0000455c <.LSM104>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    455c:	11 42 80    	mov.w     0x842, w1
    455e:	20 42 80    	mov.w     0x844, w0
    4560:	80 8f 50    	sub.w     w1, w0, [w15]
    4562:	05 00 32    	bra       Z, 0x456e <.L32>

00004564 <.LSM105>:
        last_state = state;
    4564:	10 42 80    	mov.w     0x842, w0
    4566:	20 42 88    	mov.w     w0, 0x844

00004568 <.LSM106>:
        timer_start(&timer1);
    4568:	e0 c8 21    	mov.w     #0x1c8e, w0
    456a:	8d fb 07    	rcall     0x3c86 <_timer_start>

0000456c <.LSM107>:
        counter = 0;
    456c:	4a 28 ef    	clr.w     0x84a

0000456e <.L32>:
    }

    if (timer_flag(&timer1)) {
    456e:	e0 c8 21    	mov.w     #0x1c8e, w0
    4570:	a8 fb 07    	rcall     0x3cc2 <_timer_flag>
    4572:	00 00 e0    	cp0.w     w0
    4574:	05 00 32    	bra       Z, 0x4580 <.L33>

00004576 <.LSM109>:
        timer_lower(&timer1);
    4576:	e0 c8 21    	mov.w     #0x1c8e, w0
    4578:	b5 fb 07    	rcall     0x3ce4 <_timer_lower>

0000457a <.LSM110>:
        counter++;
    457a:	50 42 80    	mov.w     0x84a, w0
    457c:	00 00 e8    	inc.w     w0, w0
    457e:	50 42 88    	mov.w     w0, 0x84a

00004580 <.L33>:
    }

    // Check for state transitions
    if (counter == 10) {
    4580:	50 42 80    	mov.w     0x84a, w0
    4582:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    4584:	02 00 3a    	bra       NZ, 0x458a <.L34>

00004586 <.LSM112>:
        state = reset;
    4586:	80 4b 24    	mov.w     #0x44b8, w0
    4588:	10 42 88    	mov.w     w0, 0x842

0000458a <.L34>:
    }

    if (state != last_state) {
    458a:	11 42 80    	mov.w     0x842, w1
    458c:	20 42 80    	mov.w     0x844, w0
    458e:	80 8f 50    	sub.w     w1, w0, [w15]
    4590:	05 00 32    	bra       Z, 0x459c <.L31>

00004592 <.LSM114>:
        timer_stop(&timer1);
    4592:	e0 c8 21    	mov.w     #0x1c8e, w0
    4594:	8a fb 07    	rcall     0x3caa <_timer_stop>

00004596 <.LSM115>:
        trials++;  // if we are leaving the state, do clean up stuff
    4596:	46 c8 bf    	mov.b     0x846, WREG
    4598:	00 40 e8    	inc.b     w0, w0
    459a:	46 e8 b7    	mov.b     WREG, 0x846

0000459c <.L31>:
    }
}
    459c:	00 80 fa    	ulnk      
    459e:	00 00 06    	return    

000045a0 <_setup>:






void setup() {
    45a0:	00 00 fa    	lnk       #0x0

000045a2 <.LSM118>:
    timer_setPeriod(&timer1, 1);  // Timer for LED operation/status blink
    45a2:	02 00 20    	mov.w     #0x0, w2
    45a4:	03 f8 23    	mov.w     #0x3f80, w3
    45a6:	e0 c8 21    	mov.w     #0x1c8e, w0
    45a8:	9f fa 07    	rcall     0x3ae8 <_timer_setPeriod>

000045aa <.LSM119>:
    timer_setPeriod(&timer2, 0.5);
    45aa:	02 00 20    	mov.w     #0x0, w2
    45ac:	03 f0 23    	mov.w     #0x3f00, w3
    45ae:	40 ca 21    	mov.w     #0x1ca4, w0
    45b0:	9b fa 07    	rcall     0x3ae8 <_timer_setPeriod>

000045b2 <.LSM120>:
    timer_start(&timer1);
    45b2:	e0 c8 21    	mov.w     #0x1c8e, w0
    45b4:	68 fb 07    	rcall     0x3c86 <_timer_start>

000045b6 <.LSM121>:
    timer_start(&timer2);
    45b6:	40 ca 21    	mov.w     #0x1ca4, w0
    45b8:	66 fb 07    	rcall     0x3c86 <_timer_start>

000045ba <.LSM122>:

    setup_uart();
    45ba:	4b ff 07    	rcall     0x4452 <_setup_uart>

000045bc <.LSM123>:
    rocket_tilt, rocket_speed = 0;
    45bc:	4e 28 ef    	clr.w     0x84e

000045be <.LSM124>:
}
    45be:	00 80 fa    	ulnk      
    45c0:	00 00 06    	return    

000045c2 <_main>:

int16_t main(void) {
    45c2:	42 00 fa    	lnk       #0x42

000045c4 <.LSM126>:
    // printf("Starting Master Controller...\r\n");
    init_clock();
    45c4:	00 10 20    	mov.w     #0x100, w0
    45c6:	20 3a 88    	mov.w     w0, 0x744

000045c8 <.LSM127>:
    init_ui();
    45c8:	17 00 07    	rcall     0x45f8 <_init_ui>

000045ca <.LSM128>:
    init_timer();
    45ca:	23 fa 07    	rcall     0x3a12 <_init_timer>

000045cc <.LSM129>:
    init_uart();
    45cc:	cc ef 07    	rcall     0x2566 <_init_uart>

000045ce <.LSM130>:
    init_pin();
    45ce:	4c fc 07    	rcall     0x3e68 <_init_pin>

000045d0 <.LSM131>:
    setup();
    45d0:	e7 ff 07    	rcall     0x45a0 <_setup>

000045d2 <.LSM132>:
    uint16_t counter = 0;
    45d2:	00 00 eb    	clr.w     w0
    45d4:	00 0f 78    	mov.w     w0, [w14]

000045d6 <.LSM133>:
    uint8_t status_msg [64];
    pin_digitalIn(&D[2]);
    45d6:	60 a7 21    	mov.w     #0x1a76, w0
    45d8:	87 fd 07    	rcall     0x40e8 <_pin_digitalIn>

000045da <.LSM134>:

    InitUSB();
    45da:	35 f5 07    	rcall     0x3046 <_InitUSB>

000045dc <.LSM135>:
    U1IE = 0xFF; //setting up ISR for USB requests
    45dc:	f0 0f 20    	mov.w     #0xff, w0
    45de:	60 24 88    	mov.w     w0, 0x48c

000045e0 <.LSM136>:
    U1EIE = 0xFF;
    45e0:	f0 0f 20    	mov.w     #0xff, w0
    45e2:	80 24 88    	mov.w     w0, 0x490

000045e4 <.LSM137>:
    IFS5bits.USB1IF = 0; //flag
    45e4:	8e c0 a9    	bclr.b    0x8e, #0x6

000045e6 <.LSM138>:
    IEC5bits.USB1IE = 1; //enable
    45e6:	9e c0 a8    	bset.b    0x9e, #0x6

000045e8 <.LSM139>:
    state = idle;
    45e8:	40 48 24    	mov.w     #0x4484, w0
    45ea:	10 42 88    	mov.w     w0, 0x842

000045ec <.LSM140>:
    last_state = (STATE_HANDLER_T)NULL;
    45ec:	44 28 ef    	clr.w     0x844

000045ee <.LSM141>:
    led_off(&led1);
    45ee:	00 80 20    	mov.w     #0x800, w0
    45f0:	75 00 07    	rcall     0x46dc <_led_off>

000045f2 <.L38>:

    while (1) {
        state();
    45f2:	10 42 80    	mov.w     0x842, w0
    45f4:	00 00 01    	call      w0

000045f6 <.LSM143>:
    }
    45f6:	fd ff 37    	bra       0x45f2 <.L38>

000045f8 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    45f8:	00 00 fa    	lnk       #0x0

000045fa <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    45fa:	74 c0 b3    	mov.b     #0x7, w4
    45fc:	63 4e 20    	mov.w     #0x4e6, w3
    45fe:	82 2d 20    	mov.w     #0x2d8, w2
    4600:	a1 2d 20    	mov.w     #0x2da, w1
    4602:	00 80 20    	mov.w     #0x800, w0
    4604:	20 00 07    	rcall     0x4646 <_led_init>

00004606 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4606:	00 42 eb    	clr.b     w4
    4608:	a3 4e 20    	mov.w     #0x4ea, w3
    460a:	82 2e 20    	mov.w     #0x2e8, w2
    460c:	a1 2e 20    	mov.w     #0x2ea, w1
    460e:	80 80 20    	mov.w     #0x808, w0
    4610:	1a 00 07    	rcall     0x4646 <_led_init>

00004612 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4612:	14 c0 b3    	mov.b     #0x1, w4
    4614:	a3 4e 20    	mov.w     #0x4ea, w3
    4616:	82 2e 20    	mov.w     #0x2e8, w2
    4618:	a1 2e 20    	mov.w     #0x2ea, w1
    461a:	00 81 20    	mov.w     #0x810, w0
    461c:	14 00 07    	rcall     0x4646 <_led_init>

0000461e <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    461e:	f4 c0 b3    	mov.b     #0xf, w4
    4620:	43 4e 20    	mov.w     #0x4e4, w3
    4622:	02 2d 20    	mov.w     #0x2d0, w2
    4624:	21 2d 20    	mov.w     #0x2d2, w1
    4626:	80 81 20    	mov.w     #0x818, w0
    4628:	ad 00 07    	rcall     0x4784 <_sw_init>

0000462a <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    462a:	c4 c0 b3    	mov.b     #0xc, w4
    462c:	43 4e 20    	mov.w     #0x4e4, w3
    462e:	02 2d 20    	mov.w     #0x2d0, w2
    4630:	21 2d 20    	mov.w     #0x2d2, w1
    4632:	00 82 20    	mov.w     #0x820, w0
    4634:	a7 00 07    	rcall     0x4784 <_sw_init>

00004636 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4636:	c4 c0 b3    	mov.b     #0xc, w4
    4638:	23 4e 20    	mov.w     #0x4e2, w3
    463a:	82 2c 20    	mov.w     #0x2c8, w2
    463c:	a1 2c 20    	mov.w     #0x2ca, w1
    463e:	80 82 20    	mov.w     #0x828, w0
    4640:	a1 00 07    	rcall     0x4784 <_sw_init>

00004642 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    4642:	00 80 fa    	ulnk      
    4644:	00 00 06    	return    

00004646 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    4646:	0a 00 fa    	lnk       #0xa
    4648:	00 0f 78    	mov.w     w0, [w14]
    464a:	11 07 98    	mov.w     w1, [w14+2]
    464c:	22 07 98    	mov.w     w2, [w14+4]
    464e:	33 07 98    	mov.w     w3, [w14+6]
    4650:	04 4f 98    	mov.b     w4, [w14+8]

00004652 <.LSM9>:
    self->port = port;
    4652:	1e 00 78    	mov.w     [w14], w0
    4654:	9e 00 90    	mov.w     [w14+2], w1
    4656:	01 08 78    	mov.w     w1, [w0]

00004658 <.LSM10>:
    self->tris = tris;
    4658:	1e 00 78    	mov.w     [w14], w0
    465a:	ae 00 90    	mov.w     [w14+4], w1
    465c:	11 00 98    	mov.w     w1, [w0+2]

0000465e <.LSM11>:
    self->ans = ans;
    465e:	1e 00 78    	mov.w     [w14], w0
    4660:	be 00 90    	mov.w     [w14+6], w1
    4662:	21 00 98    	mov.w     w1, [w0+4]

00004664 <.LSM12>:
    self->bit = bit;
    4664:	1e 00 78    	mov.w     [w14], w0
    4666:	8e 48 90    	mov.b     [w14+8], w1
    4668:	61 40 98    	mov.b     w1, [w0+6]

0000466a <.LSM13>:

    bitclear(self->ans, self->bit);
    466a:	1e 00 78    	mov.w     [w14], w0
    466c:	20 00 90    	mov.w     [w0+4], w0
    466e:	9e 00 78    	mov.w     [w14], w1
    4670:	a1 00 90    	mov.w     [w1+4], w1
    4672:	11 01 78    	mov.w     [w1], w2
    4674:	9e 00 78    	mov.w     [w14], w1
    4676:	e1 40 90    	mov.b     [w1+6], w1
    4678:	81 80 fb    	ze        w1, w1
    467a:	13 00 20    	mov.w     #0x1, w3
    467c:	81 18 dd    	sl.w      w3, w1, w1
    467e:	81 80 ea    	com.w     w1, w1
    4680:	81 00 61    	and.w     w2, w1, w1
    4682:	01 08 78    	mov.w     w1, [w0]

00004684 <.LSM14>:
    bitclear(self->port, self->bit);
    4684:	1e 00 78    	mov.w     [w14], w0
    4686:	10 00 78    	mov.w     [w0], w0
    4688:	9e 00 78    	mov.w     [w14], w1
    468a:	91 00 78    	mov.w     [w1], w1
    468c:	11 01 78    	mov.w     [w1], w2
    468e:	9e 00 78    	mov.w     [w14], w1
    4690:	e1 40 90    	mov.b     [w1+6], w1
    4692:	81 80 fb    	ze        w1, w1
    4694:	13 00 20    	mov.w     #0x1, w3
    4696:	81 18 dd    	sl.w      w3, w1, w1
    4698:	81 80 ea    	com.w     w1, w1
    469a:	81 00 61    	and.w     w2, w1, w1
    469c:	01 08 78    	mov.w     w1, [w0]

0000469e <.LSM15>:
    bitclear(self->tris, self->bit);
    469e:	1e 00 78    	mov.w     [w14], w0
    46a0:	10 00 90    	mov.w     [w0+2], w0
    46a2:	9e 00 78    	mov.w     [w14], w1
    46a4:	91 00 90    	mov.w     [w1+2], w1
    46a6:	11 01 78    	mov.w     [w1], w2
    46a8:	9e 00 78    	mov.w     [w14], w1
    46aa:	e1 40 90    	mov.b     [w1+6], w1
    46ac:	81 80 fb    	ze        w1, w1
    46ae:	13 00 20    	mov.w     #0x1, w3
    46b0:	81 18 dd    	sl.w      w3, w1, w1
    46b2:	81 80 ea    	com.w     w1, w1
    46b4:	81 00 61    	and.w     w2, w1, w1
    46b6:	01 08 78    	mov.w     w1, [w0]

000046b8 <.LSM16>:
}
    46b8:	00 80 fa    	ulnk      
    46ba:	00 00 06    	return    

000046bc <_led_on>:

void led_on(_LED *self) {
    46bc:	02 00 fa    	lnk       #0x2
    46be:	00 0f 78    	mov.w     w0, [w14]

000046c0 <.LSM18>:
    bitset(self->port, self->bit);
    46c0:	1e 00 78    	mov.w     [w14], w0
    46c2:	10 00 78    	mov.w     [w0], w0
    46c4:	9e 00 78    	mov.w     [w14], w1
    46c6:	91 00 78    	mov.w     [w1], w1
    46c8:	11 01 78    	mov.w     [w1], w2
    46ca:	9e 00 78    	mov.w     [w14], w1
    46cc:	e1 40 90    	mov.b     [w1+6], w1
    46ce:	81 80 fb    	ze        w1, w1
    46d0:	13 00 20    	mov.w     #0x1, w3
    46d2:	81 18 dd    	sl.w      w3, w1, w1
    46d4:	82 80 70    	ior.w     w1, w2, w1
    46d6:	01 08 78    	mov.w     w1, [w0]

000046d8 <.LSM19>:
}
    46d8:	00 80 fa    	ulnk      
    46da:	00 00 06    	return    

000046dc <_led_off>:

void led_off(_LED *self) {
    46dc:	02 00 fa    	lnk       #0x2
    46de:	00 0f 78    	mov.w     w0, [w14]

000046e0 <.LSM21>:
    bitclear(self->port, self->bit);
    46e0:	1e 00 78    	mov.w     [w14], w0
    46e2:	10 00 78    	mov.w     [w0], w0
    46e4:	9e 00 78    	mov.w     [w14], w1
    46e6:	91 00 78    	mov.w     [w1], w1
    46e8:	11 01 78    	mov.w     [w1], w2
    46ea:	9e 00 78    	mov.w     [w14], w1
    46ec:	e1 40 90    	mov.b     [w1+6], w1
    46ee:	81 80 fb    	ze        w1, w1
    46f0:	13 00 20    	mov.w     #0x1, w3
    46f2:	81 18 dd    	sl.w      w3, w1, w1
    46f4:	81 80 ea    	com.w     w1, w1
    46f6:	81 00 61    	and.w     w2, w1, w1
    46f8:	01 08 78    	mov.w     w1, [w0]

000046fa <.LSM22>:
}
    46fa:	00 80 fa    	ulnk      
    46fc:	00 00 06    	return    

000046fe <_led_toggle>:

void led_toggle(_LED *self) {
    46fe:	02 00 fa    	lnk       #0x2
    4700:	00 0f 78    	mov.w     w0, [w14]

00004702 <.LSM24>:
    bitflip(self->port, self->bit);
    4702:	1e 00 78    	mov.w     [w14], w0
    4704:	10 00 78    	mov.w     [w0], w0
    4706:	9e 00 78    	mov.w     [w14], w1
    4708:	91 00 78    	mov.w     [w1], w1
    470a:	11 01 78    	mov.w     [w1], w2
    470c:	9e 00 78    	mov.w     [w14], w1
    470e:	e1 40 90    	mov.b     [w1+6], w1
    4710:	81 80 fb    	ze        w1, w1
    4712:	13 00 20    	mov.w     #0x1, w3
    4714:	81 18 dd    	sl.w      w3, w1, w1
    4716:	81 00 69    	xor.w     w2, w1, w1
    4718:	01 08 78    	mov.w     w1, [w0]

0000471a <.LSM25>:
}
    471a:	00 80 fa    	ulnk      
    471c:	00 00 06    	return    

0000471e <_led_write>:

void led_write(_LED *self, uint16_t val) {
    471e:	04 00 fa    	lnk       #0x4
    4720:	00 0f 78    	mov.w     w0, [w14]
    4722:	11 07 98    	mov.w     w1, [w14+2]

00004724 <.LSM27>:
    if (val)
    4724:	1e 00 90    	mov.w     [w14+2], w0
    4726:	00 00 e0    	cp0.w     w0
    4728:	0d 00 32    	bra       Z, 0x4744 <.L7>

0000472a <.LSM28>:
        bitset(self->port, self->bit);
    472a:	1e 00 78    	mov.w     [w14], w0
    472c:	10 00 78    	mov.w     [w0], w0
    472e:	9e 00 78    	mov.w     [w14], w1
    4730:	91 00 78    	mov.w     [w1], w1
    4732:	11 01 78    	mov.w     [w1], w2
    4734:	9e 00 78    	mov.w     [w14], w1
    4736:	e1 40 90    	mov.b     [w1+6], w1
    4738:	81 80 fb    	ze        w1, w1
    473a:	13 00 20    	mov.w     #0x1, w3
    473c:	81 18 dd    	sl.w      w3, w1, w1
    473e:	82 80 70    	ior.w     w1, w2, w1
    4740:	01 08 78    	mov.w     w1, [w0]
    4742:	0d 00 37    	bra       0x475e <.L6>

00004744 <.L7>:
    else
        bitclear(self->port, self->bit);
    4744:	1e 00 78    	mov.w     [w14], w0
    4746:	10 00 78    	mov.w     [w0], w0
    4748:	9e 00 78    	mov.w     [w14], w1
    474a:	91 00 78    	mov.w     [w1], w1
    474c:	11 01 78    	mov.w     [w1], w2
    474e:	9e 00 78    	mov.w     [w14], w1
    4750:	e1 40 90    	mov.b     [w1+6], w1
    4752:	81 80 fb    	ze        w1, w1
    4754:	13 00 20    	mov.w     #0x1, w3
    4756:	81 18 dd    	sl.w      w3, w1, w1
    4758:	81 80 ea    	com.w     w1, w1
    475a:	81 00 61    	and.w     w2, w1, w1
    475c:	01 08 78    	mov.w     w1, [w0]

0000475e <.L6>:
}
    475e:	00 80 fa    	ulnk      
    4760:	00 00 06    	return    

00004762 <_led_read>:

uint16_t led_read(_LED *self) {
    4762:	02 00 fa    	lnk       #0x2
    4764:	00 0f 78    	mov.w     w0, [w14]

00004766 <.LSM32>:
    return bitread(self->port, self->bit);
    4766:	1e 00 78    	mov.w     [w14], w0
    4768:	10 00 78    	mov.w     [w0], w0
    476a:	90 00 78    	mov.w     [w0], w1
    476c:	1e 00 78    	mov.w     [w14], w0
    476e:	60 40 90    	mov.b     [w0+6], w0
    4770:	00 80 fb    	ze        w0, w0
    4772:	12 00 20    	mov.w     #0x1, w2
    4774:	00 10 dd    	sl.w      w2, w0, w0
    4776:	00 80 60    	and.w     w1, w0, w0
    4778:	00 f0 a7    	btsc.w    w0, #0xf
    477a:	00 00 ea    	neg.w     w0, w0
    477c:	00 00 ea    	neg.w     w0, w0
    477e:	4f 00 de    	lsr.w     w0, #0xf, w0

00004780 <.LSM33>:
}
    4780:	00 80 fa    	ulnk      
    4782:	00 00 06    	return    

00004784 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    4784:	0a 00 fa    	lnk       #0xa
    4786:	00 0f 78    	mov.w     w0, [w14]
    4788:	11 07 98    	mov.w     w1, [w14+2]
    478a:	22 07 98    	mov.w     w2, [w14+4]
    478c:	33 07 98    	mov.w     w3, [w14+6]
    478e:	04 4f 98    	mov.b     w4, [w14+8]

00004790 <.LSM35>:
    self->port = port;
    4790:	1e 00 78    	mov.w     [w14], w0
    4792:	9e 00 90    	mov.w     [w14+2], w1
    4794:	01 08 78    	mov.w     w1, [w0]

00004796 <.LSM36>:
    self->tris = tris;
    4796:	1e 00 78    	mov.w     [w14], w0
    4798:	ae 00 90    	mov.w     [w14+4], w1
    479a:	11 00 98    	mov.w     w1, [w0+2]

0000479c <.LSM37>:
    self->ans = ans;
    479c:	1e 00 78    	mov.w     [w14], w0
    479e:	be 00 90    	mov.w     [w14+6], w1
    47a0:	21 00 98    	mov.w     w1, [w0+4]

000047a2 <.LSM38>:
    self->bit = bit;
    47a2:	1e 00 78    	mov.w     [w14], w0
    47a4:	8e 48 90    	mov.b     [w14+8], w1
    47a6:	61 40 98    	mov.b     w1, [w0+6]

000047a8 <.LSM39>:

    bitclear(self->ans, self->bit);
    47a8:	1e 00 78    	mov.w     [w14], w0
    47aa:	20 00 90    	mov.w     [w0+4], w0
    47ac:	9e 00 78    	mov.w     [w14], w1
    47ae:	a1 00 90    	mov.w     [w1+4], w1
    47b0:	11 01 78    	mov.w     [w1], w2
    47b2:	9e 00 78    	mov.w     [w14], w1
    47b4:	e1 40 90    	mov.b     [w1+6], w1
    47b6:	81 80 fb    	ze        w1, w1
    47b8:	13 00 20    	mov.w     #0x1, w3
    47ba:	81 18 dd    	sl.w      w3, w1, w1
    47bc:	81 80 ea    	com.w     w1, w1
    47be:	81 00 61    	and.w     w2, w1, w1
    47c0:	01 08 78    	mov.w     w1, [w0]

000047c2 <.LSM40>:
    bitset(self->tris, self->bit);
    47c2:	1e 00 78    	mov.w     [w14], w0
    47c4:	10 00 90    	mov.w     [w0+2], w0
    47c6:	9e 00 78    	mov.w     [w14], w1
    47c8:	91 00 90    	mov.w     [w1+2], w1
    47ca:	11 01 78    	mov.w     [w1], w2
    47cc:	9e 00 78    	mov.w     [w14], w1
    47ce:	e1 40 90    	mov.b     [w1+6], w1
    47d0:	81 80 fb    	ze        w1, w1
    47d2:	13 00 20    	mov.w     #0x1, w3
    47d4:	81 18 dd    	sl.w      w3, w1, w1
    47d6:	82 80 70    	ior.w     w1, w2, w1
    47d8:	01 08 78    	mov.w     w1, [w0]

000047da <.LSM41>:
}
    47da:	00 80 fa    	ulnk      
    47dc:	00 00 06    	return    

000047de <_sw_read>:

uint16_t sw_read(_SW *self) {
    47de:	02 00 fa    	lnk       #0x2
    47e0:	00 0f 78    	mov.w     w0, [w14]

000047e2 <.LSM43>:
    return bitread(self->port, self->bit);
    47e2:	1e 00 78    	mov.w     [w14], w0
    47e4:	10 00 78    	mov.w     [w0], w0
    47e6:	90 00 78    	mov.w     [w0], w1
    47e8:	1e 00 78    	mov.w     [w14], w0
    47ea:	60 40 90    	mov.b     [w0+6], w0
    47ec:	00 80 fb    	ze        w0, w0
    47ee:	12 00 20    	mov.w     #0x1, w2
    47f0:	00 10 dd    	sl.w      w2, w0, w0
    47f2:	00 80 60    	and.w     w1, w0, w0
    47f4:	00 f0 a7    	btsc.w    w0, #0xf
    47f6:	00 00 ea    	neg.w     w0, w0
    47f8:	00 00 ea    	neg.w     w0, w0
    47fa:	4f 00 de    	lsr.w     w0, #0xf, w0

000047fc <.LSM44>:
}
    47fc:	00 80 fa    	ulnk      
    47fe:	00 00 06    	return    
Disassembly of section .dinit:

00004800 <.dinit>:
    4800:	ca 11 00    	nop       
    4802:	80 08 00    	nop       
    4804:	80 00 00    	nop       
    4806:	42 08 00    	nop       
    4808:	10 00 00    	nop       
    480a:	80 00 00    	nop       
    480c:	4a 1a 00    	nop       
    480e:	b8 01 00    	nop       
    4810:	80 00 00    	nop       
    4812:	00 08 00    	nop       
    4814:	30 00 00    	nop       
    4816:	80 00 00    	nop       
    4818:	82 1d 00    	nop       
    481a:	10 00 00    	nop       
    481c:	82 00 00    	nop       
    481e:	bd 37 86    	mov.w     0xc6f6, w13
    4820:	33 bd 37    	bra       0xffffc288
    4822:	06 35 bd    	subr.w    0x1506
    4824:	37 86 36    	bra       LEU, 0xffff5494
    4826:	bd 37 86    	mov.w     0xc6f6, w13
    4828:	37 00 00    	nop       
    482a:	8e 1c 00    	nop       
    482c:	6e 00 00    	nop       
    482e:	80 00 00    	nop       
    4830:	02 1c 00    	nop       
    4832:	8c 00 00    	nop       
    4834:	80 00 00    	nop       
    4836:	00 1e 00    	nop       
    4838:	80 00 00    	nop       
    483a:	80 00 00    	nop       
    483c:	30 08 00    	nop       
    483e:	12 00 00    	nop       
    4840:	80 00 00    	nop       
    4842:	56 08 00    	nop       
    4844:	74 09 00    	nop       
    4846:	80 00 00    	nop       
    4848:	52 08 00    	nop       
    484a:	04 00 00    	nop       
    484c:	80 00 00    	nop       
    484e:	fc 1c 00    	nop       
    4850:	4a 00 00    	nop       
    4852:	82 00 00    	nop       
    4854:	30 31 32    	bra       Z, 0xaab6
    4856:	33 34 35    	bra       LT, 0xb0be
    4858:	36 37 38    	bra       NOV, 0xb6c6
    485a:	39 61 62    	and.b     w4, [w9++], [--w2]
    485c:	63 64 65    	and.b     w10, #0x3, [--w8]
    485e:	66 67 68    	xor.b     w0, #0x6, [--w14]
    4860:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    4862:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    4864:	6f 70 71    	.pword 0x71706f
    4866:	72 73 74    	.pword 0x747372
    4868:	75 76 77    	.pword 0x777675
    486a:	78 79 7a    	.pword 0x7a7978
    486c:	00 00 00    	nop       
    486e:	21 15 11    	subr.w    w2, [w1--], [w10--]
    4870:	0e 0d 0c    	bra       OA, 0x628e
    4872:	0b 0b 0a    	bfins     #0xb, #0x0, w9, w10
    4874:	0a 09 09 
    4876:	09 09 09    	repeat    #0x909
    4878:	08 08 08    	do        #0x808, 0x588c
    487a:	08 08 08 
    487c:	08 07 07    	rcall     0x568e
    487e:	07 07 07    	rcall     0x568e
    4880:	07 07 07    	rcall     0x5690
    4882:	07 07 07    	rcall     0x5692
    4884:	07 07 00    	nop       
    4886:	92 1d 00    	nop       
    4888:	04 00 00    	nop       
    488a:	80 00 00    	nop       
    488c:	68 1d 00    	nop       
    488e:	1a 00 00    	nop       
    4890:	82 00 00    	nop       
    4892:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    4894:	74 7a 4c    	.pword 0x4c7a74
    4896:	00 00 01    	call      w0
    4898:	00 02 00    	nop       
    489a:	04 00 08    	do        #0x4, 0x689e
    489c:	00 10 00 
    489e:	00 00 20    	mov.w     #0x0, w0
    48a0:	2b 2d 23    	mov.w     #0x32d2, w11
    48a2:	30 00 00    	nop       
    48a4:	46 1d 00    	nop       
    48a6:	22 00 00    	nop       
    48a8:	82 00 00    	nop       
    48aa:	30 31 32    	bra       Z, 0xab0c
    48ac:	33 34 35    	bra       LT, 0xb114
    48ae:	36 37 38    	bra       NOV, 0xb71c
    48b0:	39 41 42    	add.b     w4, [w9++], w2
    48b2:	43 44 45    	add.b     w10, [--w3], w8
    48b4:	46 00 30    	bra       OV, 0x4942
    48b6:	31 32 33    	bra       N, 0xad1a
    48b8:	34 35 36    	bra       LEU, 0xb322
    48ba:	37 38 39    	bra       NC, 0xb92a
    48bc:	61 62 63    	and.b     w6, #0x1, [--w4]
    48be:	64 65 66    	and.b     w12, #0x4, [--w10]
	...
Disassembly of section .isr:

000048c4 <__DefaultInterrupt>:
    48c4:	00 40 da    	.pword 0xda4000
    48c6:	00 00 fe    	reset     
