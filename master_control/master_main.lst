
master_main.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	8f eb 21    	mov.w     #0x1eb8, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	a0 f2 24    	mov.w     #0x4f2a, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	ba 4c 02    	call      0x4cba <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	80 08 20    	mov.w     #0x88, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	58 46 04    	goto      0x4658 <___digitalRead>
    11e4:	00 00 00 
    11e6:	14 46 04    	goto      0x4614 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	7a 46 04    	goto      0x467a <___analogRead>
    11ec:	00 00 00 
    11ee:	cc 29 04    	goto      0x29cc <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	0e 2a 04    	goto      0x2a0e <___putc_buffer>
    11f4:	00 00 00 
    11f6:	f0 29 04    	goto      0x29f0 <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	06 2b 04    	goto      0x2b06 <___getc_buffer>
    11fc:	00 00 00 
    11fe:	88 17 04    	goto      0x1788 <_prout>
    1200:	00 00 00 
    1202:	28 1b 04    	goto      0x1b28 <_prout>
    1204:	00 00 00 
    1206:	0a 25 04    	goto      0x250a <_closeall>
    1208:	00 00 00 
    120a:	00 00 04    	goto      0x0 <__DEFAULT_VECTOR-0x110c>
    120c:	00 00 00 

0000120e <_close>:
    120e:	0a 00 fa    	lnk       #0xa
    1210:	11 00 20    	mov.w     #0x1, w1
    1212:	b1 bf 9f    	mov.w     w1, [w15-10]
    1214:	c0 bf 9f    	mov.w     w0, [w15-8]
    1216:	6a 80 57    	sub.w     w15, #0xa, w0
    1218:	67 0a 07    	rcall     0x26e8 <_doclose>
    121a:	4f b8 97    	mov.w     [w15-8], w0
    121c:	00 80 fa    	ulnk      
    121e:	00 00 06    	return    

00001220 <_remove>:
    1220:	0a 00 fa    	lnk       #0xa
    1222:	51 00 20    	mov.w     #0x5, w1
    1224:	b1 bf 9f    	mov.w     w1, [w15-10]
    1226:	c0 bf 9f    	mov.w     w0, [w15-8]
    1228:	6a 80 57    	sub.w     w15, #0xa, w0
    122a:	60 0a 07    	rcall     0x26ec <_doremove>
    122c:	5f b8 97    	mov.w     [w15-6], w0
    122e:	00 80 fa    	ulnk      
    1230:	00 00 06    	return    

00001232 <_sbrk>:
    1232:	88 9f be    	mov.d     w8, [w15++]
    1234:	80 04 78    	mov.w     w0, w9
    1236:	b0 f5 80    	mov.w     0x1eb6, w0
    1238:	00 00 e0    	cp0.w     w0
    123a:	04 00 3a    	bra       NZ, 0x1244 <.L2>
    123c:	0e 00 07    	rcall     0x125a <_brk>
    123e:	00 84 eb    	setm.w    w8
    1240:	00 00 e0    	cp0.w     w0
    1242:	08 00 35    	bra       LT, 0x1254 <.L3>

00001244 <.L2>:
    1244:	b8 f5 80    	mov.w     0x1eb6, w8
    1246:	09 00 e0    	cp0.w     w9
    1248:	05 00 32    	bra       Z, 0x1254 <.L3>
    124a:	09 00 44    	add.w     w8, w9, w0
    124c:	06 00 07    	rcall     0x125a <_brk>
    124e:	00 00 e0    	cp0.w     w0
    1250:	01 00 3d    	bra       GE, 0x1254 <.L3>
    1252:	00 84 eb    	setm.w    w8

00001254 <.L3>:
    1254:	08 00 78    	mov.w     w8, w0
    1256:	4f 04 be    	mov.d     [--w15], w8
    1258:	00 00 06    	return    

0000125a <_brk>:
    125a:	80 00 78    	mov.w     w0, w1
    125c:	01 00 e0    	cp0.w     w1
    125e:	03 00 3a    	bra       NZ, 0x1266 <.L2>
    1260:	00 00 20    	mov.w     #0x0, w0
    1262:	b0 f5 88    	mov.w     w0, 0x1eb6
    1264:	00 00 05    	retlw.w   #0x0, w0

00001266 <.L2>:
    1266:	00 80 eb    	setm.w    w0
    1268:	02 00 20    	mov.w     #0x0, w2
    126a:	82 8f 50    	sub.w     w1, w2, [w15]
    126c:	02 00 3e    	bra       GTU, 0x1272 <.L3>
    126e:	b1 f5 88    	mov.w     w1, 0x1eb6
    1270:	00 00 eb    	clr.w     w0

00001272 <.L3>:
    1272:	00 00 06    	return    

00001274 <___subsf3>:
    1274:	03 f0 a2    	btg.w     w3, #0xf

00001276 <___addsf3>:
    1276:	88 9f be    	mov.d     w8, [w15++]
    1278:	8a 9f be    	mov.d     w10, [w15++]
    127a:	8c 1f 78    	mov.w     w12, [w15++]
    127c:	f7 00 07    	rcall     0x146c <__funpack2>
    127e:	fe 00 33    	bra       N, 0x147c <__fPropagateNaN>
    1280:	64 50 e1    	cp.w      w10, #0x4
    1282:	4f 00 32    	bra       Z, 0x1322 <aisinfinite>

00001284 <checkspecialb>:
    1284:	64 20 e1    	cp.w      w4, #0x4
    1286:	52 00 32    	bra       Z, 0x132c <return2>
    1288:	03 82 6c    	xor.w     w9, w3, w4
    128a:	07 00 3b    	bra       NN, 0x129a <getsign>
    128c:	09 05 d0    	sl.w      w9, w10
    128e:	03 06 d0    	sl.w      w3, w12
    1290:	82 0f 54    	sub.w     w8, w2, [w15]
    1292:	0c 06 5d    	subb.w    w10, w12, w12
    1294:	02 00 39    	bra       NC, 0x129a <getsign>
    1296:	02 00 32    	bra       Z, 0x129c <gotsign>
    1298:	89 01 78    	mov.w     w9, w3

0000129a <getsign>:
    129a:	03 06 78    	mov.w     w3, w12

0000129c <gotsign>:
    129c:	85 82 55    	sub.w     w11, w5, w5
    129e:	04 00 3d    	bra       GE, 0x12a8 <expcanonical>
    12a0:	00 03 fd    	exch      w0, w6
    12a2:	81 03 fd    	exch      w1, w7
    12a4:	85 02 ea    	neg.w     w5, w5
    12a6:	8b 85 42    	add.w     w5, w11, w11

000012a8 <expcanonical>:
    12a8:	84 0f 72    	ior.w     w4, w4, [w15]
    12aa:	02 00 3b    	bra       NN, 0x12b0 <nonegate>
    12ac:	60 00 10    	subr.w    w0, #0x0, w0
    12ae:	e0 80 18    	subbr.w   w1, #0x0, w1

000012b0 <nonegate>:
    12b0:	60 11 b8    	mul.uu    w2, #0x0, w2
    12b2:	00 05 eb    	clr.w     w10
    12b4:	7a 28 e1    	cp.w      w5, #0x1a
    12b6:	0a 00 39    	bra       NC, 0x12cc <aligniter>
    12b8:	06 00 78    	mov.w     w6, w0
    12ba:	c7 5d dd    	sl.w      w11, #0x7, w11
    12bc:	f7 07 b2    	and.w     #0x7f, w7
    12be:	87 80 75    	ior.w     w11, w7, w1
    12c0:	2d 00 37    	bra       0x131c <signoff>

000012c2 <align>:
    12c2:	82 81 71    	ior.w     w3, w2, w3
    12c4:	0a 01 78    	mov.w     w10, w2
    12c6:	61 05 60    	and.w     w0, #0x1, w10
    12c8:	81 80 d1    	asr.w     w1, w1
    12ca:	00 80 d3    	rrc.w     w0, w0

000012cc <aligniter>:
    12cc:	85 02 e9    	dec.w     w5, w5
    12ce:	f9 ff 3b    	bra       NN, 0x12c2 <align>

000012d0 <aligned>:
    12d0:	06 04 40    	add.w     w0, w6, w8
    12d2:	87 84 48    	addc.w    w1, w7, w9
    12d4:	02 00 3b    	bra       NN, 0x12da <normalizesum>
    12d6:	60 04 14    	subr.w    w8, #0x0, w8
    12d8:	e0 84 1c    	subbr.w   w9, #0x0, w9

000012da <normalizesum>:
    12da:	09 88 a3    	btst.z    w9, #0x8
    12dc:	07 00 32    	bra       Z, 0x12ec <checknormal>
    12de:	8a 81 71    	ior.w     w3, w10, w3
    12e0:	82 81 71    	ior.w     w3, w2, w3
    12e2:	61 01 64    	and.w     w8, #0x1, w2
    12e4:	89 04 d1    	lsr.w     w9, w9
    12e6:	08 84 d3    	rrc.w     w8, w8
    12e8:	8b 05 e8    	inc.w     w11, w11
    12ea:	17 00 37    	bra       0x131a <round>

000012ec <checknormal>:
    12ec:	09 78 a3    	btst.z    w9, #0x7
    12ee:	13 00 3a    	bra       NZ, 0x1316 <discardguard>

000012f0 <underflow>:
    12f0:	0b 00 e0    	cp0.w     w11
    12f2:	13 00 34    	bra       LE, 0x131a <round>
    12f4:	8b 05 e9    	dec.w     w11, w11
    12f6:	08 04 44    	add.w     w8, w8, w8
    12f8:	89 84 4c    	addc.w    w9, w9, w9
    12fa:	0a 44 74    	ior.b     w8, w10, w8
    12fc:	09 78 a3    	btst.z    w9, #0x7
    12fe:	0d 00 3a    	bra       NZ, 0x131a <round>

00001300 <normalizeloop>:
    1300:	0b 00 e0    	cp0.w     w11
    1302:	07 00 34    	bra       LE, 0x1312 <normalizeexit>
    1304:	8b 05 e9    	dec.w     w11, w11
    1306:	08 04 44    	add.w     w8, w8, w8
    1308:	89 84 4c    	addc.w    w9, w9, w9
    130a:	01 00 3a    	bra       NZ, 0x130e <normalizetest>
    130c:	0b 00 20    	mov.w     #0x0, w11

0000130e <normalizetest>:
    130e:	09 78 a3    	btst.z    w9, #0x7
    1310:	f7 ff 32    	bra       Z, 0x1300 <normalizeloop>

00001312 <normalizeexit>:
    1312:	00 01 eb    	clr.w     w2
    1314:	02 00 37    	bra       0x131a <round>

00001316 <discardguard>:
    1316:	82 81 71    	ior.w     w3, w2, w3
    1318:	0a 01 78    	mov.w     w10, w2

0000131a <round>:
    131a:	6d 00 07    	rcall     0x13f6 <__fpack>

0000131c <signoff>:
    131c:	0c f0 a7    	btsc.w    w12, #0xf
    131e:	01 f0 a0    	bset.w    w1, #0xf
    1320:	b6 00 37    	bra       0x148e <__fbopExit>

00001322 <aisinfinite>:
    1322:	64 20 e1    	cp.w      w4, #0x4
    1324:	02 00 3a    	bra       NZ, 0x132a <return8>
    1326:	83 8f 6c    	xor.w     w9, w3, [w15]
    1328:	b6 00 33    	bra       N, 0x1496 <__fbopReturnNaN>

0000132a <return8>:
    132a:	08 01 be    	mov.d     w8, w2

0000132c <return2>:
    132c:	02 00 be    	mov.d     w2, w0
    132e:	af 00 37    	bra       0x148e <__fbopExit>

00001330 <___divsf3>:
    1330:	88 9f be    	mov.d     w8, [w15++]
    1332:	8a 9f be    	mov.d     w10, [w15++]
    1334:	8c 1f 78    	mov.w     w12, [w15++]
    1336:	9a 00 07    	rcall     0x146c <__funpack2>
    1338:	a1 00 33    	bra       N, 0x147c <__fPropagateNaN>
    133a:	03 86 6c    	xor.w     w9, w3, w12
    133c:	64 50 e1    	cp.w      w10, #0x4
    133e:	2e 00 32    	bra       Z, 0x139c <aisinfinite>
    1340:	64 20 e1    	cp.w      w4, #0x4
    1342:	33 00 32    	bra       Z, 0x13aa <returnZero>
    1344:	61 50 e1    	cp.w      w10, #0x1
    1346:	2f 00 32    	bra       Z, 0x13a6 <aiszero>
    1348:	61 20 e1    	cp.w      w4, #0x1
    134a:	31 00 32    	bra       Z, 0x13ae <returnInf>

0000134c <finitenonzero>:
    134c:	85 85 55    	sub.w     w11, w5, w11
    134e:	eb 07 b0    	add.w     #0x7e, w11
    1350:	09 00 20    	mov.w     #0x0, w9
    1352:	08 04 20    	mov.w     #0x40, w8
    1354:	05 00 37    	bra       0x1360 <diventry>

00001356 <divnext>:
    1356:	08 04 44    	add.w     w8, w8, w8
    1358:	89 84 4c    	addc.w    w9, w9, w9
    135a:	0a 00 31    	bra       C, 0x1370 <divdone>

0000135c <divloop>:
    135c:	06 03 43    	add.w     w6, w6, w6
    135e:	87 83 4b    	addc.w    w7, w7, w7

00001360 <diventry>:
    1360:	00 01 53    	sub.w     w6, w0, w2
    1362:	81 81 5b    	subb.w    w7, w1, w3
    1364:	f8 ff 33    	bra       N, 0x1356 <divnext>
    1366:	02 03 be    	mov.d     w2, w6
    1368:	08 00 a0    	bset.w    w8, #0x0
    136a:	08 04 44    	add.w     w8, w8, w8
    136c:	89 84 4c    	addc.w    w9, w9, w9
    136e:	f6 ff 39    	bra       NC, 0x135c <divloop>

00001370 <divdone>:
    1370:	c6 39 dd    	sl.w      w7, #0x6, w3
    1372:	83 01 73    	ior.w     w6, w3, w3
    1374:	01 00 32    	bra       Z, 0x1378 <stickyok>
    1376:	13 00 20    	mov.w     #0x1, w3

00001378 <stickyok>:
    1378:	89 04 d1    	lsr.w     w9, w9
    137a:	08 84 d3    	rrc.w     w8, w8
    137c:	09 98 a3    	btst.z    w9, #0x9
    137e:	05 00 32    	bra       Z, 0x138a <guardused>
    1380:	08 00 a7    	btsc.w    w8, #0x0
    1382:	03 00 a0    	bset.w    w3, #0x0
    1384:	89 04 d1    	lsr.w     w9, w9
    1386:	08 84 d3    	rrc.w     w8, w8
    1388:	8b 05 e8    	inc.w     w11, w11

0000138a <guardused>:
    138a:	89 04 d1    	lsr.w     w9, w9
    138c:	08 84 d3    	rrc.w     w8, w8
    138e:	00 01 eb    	clr.w     w2
    1390:	02 81 d2    	rlc.w     w2, w2
    1392:	31 00 07    	rcall     0x13f6 <__fpack>

00001394 <return0>:
    1394:	01 f0 a1    	bclr.w    w1, #0xf
    1396:	0c f0 a7    	btsc.w    w12, #0xf
    1398:	01 f0 a0    	bset.w    w1, #0xf
    139a:	79 00 37    	bra       0x148e <__fbopExit>

0000139c <aisinfinite>:
    139c:	64 20 e1    	cp.w      w4, #0x4
    139e:	7b 00 32    	bra       Z, 0x1496 <__fbopReturnNaN>

000013a0 <return8>:
    13a0:	08 01 be    	mov.d     w8, w2

000013a2 <return2>:
    13a2:	02 00 be    	mov.d     w2, w0
    13a4:	f7 ff 37    	bra       0x1394 <return0>

000013a6 <aiszero>:
    13a6:	61 20 e1    	cp.w      w4, #0x1
    13a8:	76 00 32    	bra       Z, 0x1496 <__fbopReturnNaN>

000013aa <returnZero>:
    13aa:	60 00 b8    	mul.uu    w0, #0x0, w0
    13ac:	f3 ff 37    	bra       0x1394 <return0>

000013ae <returnInf>:
    13ae:	00 00 20    	mov.w     #0x0, w0
    13b0:	01 f8 27    	mov.w     #0x7f80, w1
    13b2:	f0 ff 37    	bra       0x1394 <return0>

000013b4 <___eqsf2>:
    13b4:	14 00 20    	mov.w     #0x1, w4
    13b6:	a6 00 37    	bra       0x1504 <__fcompare>

000013b8 <___gesf2>:
    13b8:	f4 ff 2f    	mov.w     #0xffff, w4
    13ba:	a4 00 37    	bra       0x1504 <__fcompare>

000013bc <___fixunssfsi>:
    13bc:	00 01 be    	mov.d     w0, w2
    13be:	41 00 07    	rcall     0x1442 <__funpack>
    13c0:	04 70 a7    	btsc.w    w4, #0x7
    13c2:	03 f0 a1    	bclr.w    w3, #0xf
    13c4:	03 f8 a3    	btst.z    w3, #0xf
    13c6:	13 00 3a    	bra       NZ, 0x13ee <returnzero>
    13c8:	65 09 b1    	sub.w     #0x96, w5
    13ca:	10 00 32    	bra       Z, 0x13ec <exit>
    13cc:	09 00 35    	bra       LT, 0x13e0 <shiftright>
    13ce:	69 28 e1    	cp.w      w5, #0x9
    13d0:	02 00 35    	bra       LT, 0x13d6 <shiftleft>
    13d2:	01 00 28    	mov.w     #0x8000, w1
    13d4:	00 00 05    	retlw.w   #0x0, w0

000013d6 <shiftleft>:
    13d6:	00 00 40    	add.w     w0, w0, w0
    13d8:	81 80 48    	addc.w    w1, w1, w1
    13da:	85 02 e9    	dec.w     w5, w5
    13dc:	fc ff 3a    	bra       NZ, 0x13d6 <shiftleft>
    13de:	00 00 06    	return    

000013e0 <shiftright>:
    13e0:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13e2:	05 00 35    	bra       LT, 0x13ee <returnzero>

000013e4 <shiftrightloop>:
    13e4:	81 00 d1    	lsr.w     w1, w1
    13e6:	00 80 d3    	rrc.w     w0, w0
    13e8:	85 02 e8    	inc.w     w5, w5
    13ea:	fc ff 3a    	bra       NZ, 0x13e4 <shiftrightloop>

000013ec <exit>:
    13ec:	00 00 06    	return    

000013ee <returnzero>:
    13ee:	80 00 eb    	clr.w     w1
    13f0:	00 00 05    	retlw.w   #0x0, w0

000013f2 <___floatunsisf>:
    13f2:	60 11 b8    	mul.uu    w2, #0x0, w2
    13f4:	a2 00 37    	bra       0x153a <___floatundisf>

000013f6 <__fpack>:
    13f6:	81 00 20    	mov.w     #0x8, w1
    13f8:	61 80 55    	sub.w     w11, #0x1, w0
    13fa:	0b 00 3d    	bra       GE, 0x1412 <notsubnormal>
    13fc:	0b 00 20    	mov.w     #0x0, w11
    13fe:	61 fe 2f    	mov.w     #0xffe6, w1
    1400:	01 00 e1    	cp.w      w0, w1
    1402:	1d 00 34    	bra       LE, 0x143e <zerosig>

00001404 <subnormal>:
    1404:	82 81 71    	ior.w     w3, w2, w3
    1406:	61 01 64    	and.w     w8, #0x1, w2
    1408:	89 04 d1    	lsr.w     w9, w9
    140a:	08 84 d3    	rrc.w     w8, w8
    140c:	00 00 e8    	inc.w     w0, w0
    140e:	fa ff 3a    	bra       NZ, 0x1404 <subnormal>
    1410:	71 00 20    	mov.w     #0x7, w1

00001412 <notsubnormal>:
    1412:	61 00 64    	and.w     w8, #0x1, w0
    1414:	03 00 70    	ior.w     w0, w3, w0
    1416:	02 00 60    	and.w     w0, w2, w0
    1418:	09 00 32    	bra       Z, 0x142c <packupandgo>
    141a:	61 04 44    	add.w     w8, #0x1, w8
    141c:	e0 84 4c    	addc.w    w9, #0x0, w9
    141e:	09 88 a5    	btst.z    w9, w1
    1420:	05 00 32    	bra       Z, 0x142c <packupandgo>
    1422:	8b 05 e8    	inc.w     w11, w11
    1424:	68 08 e1    	cp.w      w1, #0x8
    1426:	02 00 3a    	bra       NZ, 0x142c <packupandgo>
    1428:	89 04 d1    	lsr.w     w9, w9
    142a:	08 84 d3    	rrc.w     w8, w8

0000142c <packupandgo>:
    142c:	f2 0f 20    	mov.w     #0xff, w2
    142e:	02 58 e1    	cp.w      w11, w2
    1430:	05 00 3d    	bra       GE, 0x143c <overflow>
    1432:	c7 5d dd    	sl.w      w11, #0x7, w11
    1434:	f9 07 b2    	and.w     #0x7f, w9
    1436:	89 80 75    	ior.w     w11, w9, w1
    1438:	08 00 78    	mov.w     w8, w0
    143a:	00 00 06    	return    

0000143c <overflow>:
    143c:	0b f8 27    	mov.w     #0x7f80, w11

0000143e <zerosig>:
    143e:	8b 00 78    	mov.w     w11, w1
    1440:	00 00 05    	retlw.w   #0x0, w0

00001442 <__funpack>:
    1442:	c7 0a de    	lsr.w     w1, #0x7, w5
    1444:	f1 07 b2    	and.w     #0x7f, w1
    1446:	f5 0f b2    	and.w     #0xff, w5
    1448:	08 00 32    	bra       Z, 0x145a <zeroorsub>
    144a:	e1 cf 42    	add.b     w5, #0x1, [w15]
    144c:	02 00 32    	bra       Z, 0x1452 <nanorinf>

0000144e <finitereturn>:
    144e:	01 70 a0    	bset.w    w1, #0x7
    1450:	24 00 05    	retlw.w   #0x2, w4

00001452 <nanorinf>:
    1452:	81 0f 70    	ior.w     w0, w1, [w15]
    1454:	01 00 32    	bra       Z, 0x1458 <infinite>
    1456:	04 08 05    	retlw.w   #0x80, w4

00001458 <infinite>:
    1458:	44 00 05    	retlw.w   #0x4, w4

0000145a <zeroorsub>:
    145a:	81 0f 70    	ior.w     w0, w1, [w15]
    145c:	02 00 3a    	bra       NZ, 0x1462 <subnormal>
    145e:	14 00 05    	retlw.w   #0x1, w4

00001460 <normalize>:
    1460:	85 02 e9    	dec.w     w5, w5

00001462 <subnormal>:
    1462:	00 00 40    	add.w     w0, w0, w0
    1464:	81 c0 48    	addc.b    w1, w1, w1
    1466:	fc ff 3b    	bra       NN, 0x1460 <normalize>
    1468:	01 70 a0    	bset.w    w1, #0x7
    146a:	24 00 05    	retlw.w   #0x2, w4

0000146c <__funpack2>:
    146c:	00 04 be    	mov.d     w0, w8
    146e:	e9 ff 07    	rcall     0x1442 <__funpack>
    1470:	00 03 be    	mov.d     w0, w6
    1472:	04 05 be    	mov.d     w4, w10
    1474:	02 00 be    	mov.d     w2, w0
    1476:	e5 ff 07    	rcall     0x1442 <__funpack>
    1478:	84 4f 75    	ior.b     w10, w4, [w15]
    147a:	00 00 06    	return    

0000147c <__fPropagateNaN>:
    147c:	02 00 be    	mov.d     w2, w0
    147e:	64 50 e1    	cp.w      w10, #0x4
    1480:	05 00 36    	bra       LEU, 0x148c <return0>
    1482:	64 20 e1    	cp.w      w4, #0x4
    1484:	02 00 36    	bra       LEU, 0x148a <return8>
    1486:	09 68 a3    	btst.z    w9, #0x6
    1488:	01 00 3a    	bra       NZ, 0x148c <return0>

0000148a <return8>:
    148a:	08 00 be    	mov.d     w8, w0

0000148c <return0>:
    148c:	01 60 a0    	bset.w    w1, #0x6

0000148e <__fbopExit>:
    148e:	4f 06 78    	mov.w     [--w15], w12
    1490:	4f 05 be    	mov.d     [--w15], w10
    1492:	4f 04 be    	mov.d     [--w15], w8
    1494:	00 00 06    	return    

00001496 <__fbopReturnNaN>:
    1496:	f0 ff 2f    	mov.w     #0xffff, w0
    1498:	f1 ff 27    	mov.w     #0x7fff, w1
    149a:	f9 ff 37    	bra       0x148e <__fbopExit>

0000149c <___mulsf3>:
    149c:	88 9f be    	mov.d     w8, [w15++]
    149e:	8a 9f be    	mov.d     w10, [w15++]
    14a0:	8c 1f 78    	mov.w     w12, [w15++]
    14a2:	e4 ff 07    	rcall     0x146c <__funpack2>
    14a4:	eb ff 33    	bra       N, 0x147c <__fPropagateNaN>
    14a6:	03 86 6c    	xor.w     w9, w3, w12
    14a8:	64 50 e1    	cp.w      w10, #0x4
    14aa:	24 00 32    	bra       Z, 0x14f4 <aisinfinite>
    14ac:	64 20 e1    	cp.w      w4, #0x4
    14ae:	27 00 32    	bra       Z, 0x14fe <bisinfinite>
    14b0:	61 50 e1    	cp.w      w10, #0x1
    14b2:	22 00 32    	bra       Z, 0x14f8 <return8>
    14b4:	61 20 e1    	cp.w      w4, #0x1
    14b6:	21 00 32    	bra       Z, 0x14fa <return2>
    14b8:	8b 85 42    	add.w     w5, w11, w11
    14ba:	eb 07 b1    	sub.w     #0x7e, w11
    14bc:	01 34 b8    	mul.uu    w6, w1, w8
    14be:	00 3a b8    	mul.uu    w7, w0, w4
    14c0:	08 04 42    	add.w     w4, w8, w8
    14c2:	89 84 4a    	addc.w    w5, w9, w9
    14c4:	01 3a b8    	mul.uu    w7, w1, w4
    14c6:	00 30 b8    	mul.uu    w6, w0, w0
    14c8:	88 80 40    	add.w     w1, w8, w1
    14ca:	09 01 4a    	addc.w    w4, w9, w2
    14cc:	04 00 33    	bra       N, 0x14d6 <formsticky>
    14ce:	00 00 40    	add.w     w0, w0, w0
    14d0:	81 80 48    	addc.w    w1, w1, w1
    14d2:	02 01 49    	addc.w    w2, w2, w2
    14d4:	8b 05 e9    	dec.w     w11, w11

000014d6 <formsticky>:
    14d6:	c9 09 dd    	sl.w      w1, #0x9, w3
    14d8:	83 01 70    	ior.w     w0, w3, w3
    14da:	01 00 32    	bra       Z, 0x14de <formRandSig>
    14dc:	13 00 20    	mov.w     #0x1, w3

000014de <formRandSig>:
    14de:	c8 14 de    	lsr.w     w2, #0x8, w9
    14e0:	48 14 dd    	sl.w      w2, #0x8, w8
    14e2:	47 09 de    	lsr.w     w1, #0x7, w2
    14e4:	12 00 b2    	and.w     #0x1, w2
    14e6:	c8 08 de    	lsr.w     w1, #0x8, w1
    14e8:	08 84 70    	ior.w     w1, w8, w8
    14ea:	85 ff 07    	rcall     0x13f6 <__fpack>

000014ec <return0>:
    14ec:	01 f0 a1    	bclr.w    w1, #0xf
    14ee:	0c f0 a7    	btsc.w    w12, #0xf
    14f0:	01 f0 a0    	bset.w    w1, #0xf
    14f2:	cd ff 37    	bra       0x148e <__fbopExit>

000014f4 <aisinfinite>:
    14f4:	61 20 e1    	cp.w      w4, #0x1
    14f6:	cf ff 32    	bra       Z, 0x1496 <__fbopReturnNaN>

000014f8 <return8>:
    14f8:	08 01 be    	mov.d     w8, w2

000014fa <return2>:
    14fa:	02 00 be    	mov.d     w2, w0
    14fc:	f7 ff 37    	bra       0x14ec <return0>

000014fe <bisinfinite>:
    14fe:	61 50 e1    	cp.w      w10, #0x1
    1500:	fc ff 3a    	bra       NZ, 0x14fa <return2>
    1502:	c9 ff 37    	bra       0x1496 <__fbopReturnNaN>

00001504 <__fcompare>:
    1504:	88 9f be    	mov.d     w8, [w15++]
    1506:	8a 9f be    	mov.d     w10, [w15++]
    1508:	84 1f 78    	mov.w     w4, [w15++]
    150a:	b0 ff 07    	rcall     0x146c <__funpack2>
    150c:	4f 00 78    	mov.w     [--w15], w0
    150e:	11 00 33    	bra       N, 0x1532 <exit>
    1510:	f0 ff 2f    	mov.w     #0xffff, w0
    1512:	83 8f 6c    	xor.w     w9, w3, [w15]
    1514:	06 00 3b    	bra       NN, 0x1522 <comparemag>
    1516:	04 05 65    	and.w     w10, w4, w10
    1518:	0a 00 a7    	btsc.w    w10, #0x0
    151a:	08 00 37    	bra       0x152c <returnEqual>
    151c:	09 f0 a6    	btss.w    w9, #0xf
    151e:	10 00 20    	mov.w     #0x1, w0
    1520:	08 00 37    	bra       0x1532 <exit>

00001522 <comparemag>:
    1522:	82 0f 54    	sub.w     w8, w2, [w15]
    1524:	83 8f 5c    	subb.w    w9, w3, [w15]
    1526:	03 00 39    	bra       NC, 0x152e <adjust>
    1528:	10 00 20    	mov.w     #0x1, w0
    152a:	01 00 3e    	bra       GTU, 0x152e <adjust>

0000152c <returnEqual>:
    152c:	00 00 20    	mov.w     #0x0, w0

0000152e <adjust>:
    152e:	09 f0 a7    	btsc.w    w9, #0xf
    1530:	00 00 ea    	neg.w     w0, w0

00001532 <exit>:
    1532:	4f 05 be    	mov.d     [--w15], w10
    1534:	4f 04 be    	mov.d     [--w15], w8
    1536:	00 00 e0    	cp0.w     w0
    1538:	00 00 06    	return    

0000153a <___floatundisf>:
    153a:	88 9f be    	mov.d     w8, [w15++]
    153c:	8a 9f be    	mov.d     w10, [w15++]
    153e:	00 82 70    	ior.w     w1, w0, w4
    1540:	04 02 71    	ior.w     w2, w4, w4
    1542:	04 82 71    	ior.w     w3, w4, w4
    1544:	26 00 32    	bra       Z, 0x1592 <return0>
    1546:	00 04 be    	mov.d     w0, w8
    1548:	02 00 be    	mov.d     w2, w0
    154a:	60 11 b8    	mul.uu    w2, #0x0, w2
    154c:	6b 09 20    	mov.w     #0x96, w11
    154e:	95 02 20    	mov.w     #0x29, w5
    1550:	01 82 cf    	ff1l      w1, w4
    1552:	0a 00 39    	bra       NC, 0x1568 <fixshift>
    1554:	05 41 b1    	sub.b     #0x10, w5
    1556:	00 82 cf    	ff1l      w0, w4
    1558:	07 00 39    	bra       NC, 0x1568 <fixshift>
    155a:	05 41 b1    	sub.b     #0x10, w5
    155c:	09 82 cf    	ff1l      w9, w4
    155e:	04 00 39    	bra       NC, 0x1568 <fixshift>
    1560:	05 41 b1    	sub.b     #0x10, w5
    1562:	08 82 cf    	ff1l      w8, w4
    1564:	01 00 39    	bra       NC, 0x1568 <fixshift>
    1566:	05 41 b1    	sub.b     #0x10, w5

00001568 <fixshift>:
    1568:	05 42 52    	sub.b     w4, w5, w4
    156a:	12 00 32    	bra       Z, 0x1590 <round>
    156c:	0a 00 3b    	bra       NN, 0x1582 <shiftleft>

0000156e <shiftright>:
    156e:	82 81 71    	ior.w     w3, w2, w3
    1570:	61 01 64    	and.w     w8, #0x1, w2
    1572:	81 00 d1    	lsr.w     w1, w1
    1574:	00 80 d3    	rrc.w     w0, w0
    1576:	89 84 d3    	rrc.w     w9, w9
    1578:	08 84 d3    	rrc.w     w8, w8
    157a:	8b 05 e8    	inc.w     w11, w11
    157c:	04 42 e8    	inc.b     w4, w4
    157e:	f7 ff 3a    	bra       NZ, 0x156e <shiftright>
    1580:	07 00 37    	bra       0x1590 <round>

00001582 <shiftleft>:
    1582:	08 04 44    	add.w     w8, w8, w8
    1584:	89 84 4c    	addc.w    w9, w9, w9
    1586:	00 00 48    	addc.w    w0, w0, w0
    1588:	81 80 48    	addc.w    w1, w1, w1
    158a:	8b 05 e9    	dec.w     w11, w11
    158c:	04 42 e9    	dec.b     w4, w4
    158e:	f9 ff 3a    	bra       NZ, 0x1582 <shiftleft>

00001590 <round>:
    1590:	32 ff 07    	rcall     0x13f6 <__fpack>

00001592 <return0>:
    1592:	4f 05 be    	mov.d     [--w15], w10
    1594:	4f 04 be    	mov.d     [--w15], w8
    1596:	00 00 06    	return    

00001598 <_strtol>:
    1598:	e4 87 47    	add.w     w15, #0x4, w15
    159a:	88 9f be    	mov.d     w8, [w15++]
    159c:	8a 9f be    	mov.d     w10, [w15++]
    159e:	8c 1f 78    	mov.w     w12, [w15++]
    15a0:	8e 1f 78    	mov.w     w14, [w15++]
    15a2:	00 05 78    	mov.w     w0, w10
    15a4:	01 07 78    	mov.w     w1, w14
    15a6:	02 06 78    	mov.w     w2, w12
    15a8:	0e 00 e0    	cp0.w     w14
    15aa:	01 00 3a    	bra       NZ, 0x15ae <.L2>
    15ac:	6e 87 57    	sub.w     w15, #0xe, w14

000015ae <.L2>:
    15ae:	8a 05 78    	mov.w     w10, w11

000015b0 <.L3>:
    15b0:	8b 04 78    	mov.w     w11, w9
    15b2:	89 05 78    	mov.w     w9, w11
    15b4:	3b 44 78    	mov.b     [w11++], w8
    15b6:	08 00 fb    	se        w8, w0
    15b8:	d2 00 07    	rcall     0x175e <_isspace>
    15ba:	00 00 e0    	cp0.w     w0
    15bc:	f9 ff 3a    	bra       NZ, 0x15b0 <.L3>
    15be:	d0 c2 b3    	mov.b     #0x2d, w0
    15c0:	80 4f 54    	sub.b     w8, w0, [w15]
    15c2:	03 00 32    	bra       Z, 0x15ca <.L4>
    15c4:	00 c0 e9    	dec2.b    w0, w0
    15c6:	80 4f 54    	sub.b     w8, w0, [w15]
    15c8:	02 00 3a    	bra       NZ, 0x15ce <.L14>

000015ca <.L4>:
    15ca:	89 04 e8    	inc.w     w9, w9
    15cc:	01 00 37    	bra       0x15d0 <.L5>

000015ce <.L14>:
    15ce:	00 44 78    	mov.b     w0, w8

000015d0 <.L5>:
    15d0:	0c 01 78    	mov.w     w12, w2
    15d2:	8e 00 78    	mov.w     w14, w1
    15d4:	09 00 78    	mov.w     w9, w0
    15d6:	29 00 07    	rcall     0x162a <__Stoul>
    15d8:	9e 8f 54    	sub.w     w9, [w14], [w15]
    15da:	01 00 3a    	bra       NZ, 0x15de <.L6>
    15dc:	0a 0f 78    	mov.w     w10, [w14]

000015de <.L6>:
    15de:	9e 0f 55    	sub.w     w10, [w14], [w15]
    15e0:	03 00 3a    	bra       NZ, 0x15e8 <.L7>
    15e2:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    15e4:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    15e6:	0f 00 3a    	bra       NZ, 0x1606 <.L8>

000015e8 <.L7>:
    15e8:	b2 c2 b3    	mov.b     #0x2b, w2
    15ea:	82 4f 54    	sub.b     w8, w2, [w15]
    15ec:	04 00 3a    	bra       NZ, 0x15f6 <.L9>
    15ee:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    15f0:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    15f2:	15 00 3d    	bra       GE, 0x161e <.L12>
    15f4:	08 00 37    	bra       0x1606 <.L8>

000015f6 <.L9>:
    15f6:	d2 c2 b3    	mov.b     #0x2d, w2
    15f8:	82 4f 54    	sub.b     w8, w2, [w15]
    15fa:	11 00 3a    	bra       NZ, 0x161e <.L12>
    15fc:	02 00 20    	mov.w     #0x0, w2
    15fe:	03 00 28    	mov.w     #0x8000, w3
    1600:	82 0f 50    	sub.w     w0, w2, [w15]
    1602:	83 8f 58    	subb.w    w1, w3, [w15]
    1604:	0a 00 36    	bra       LEU, 0x161a <.L11>

00001606 <.L8>:
    1606:	20 02 20    	mov.w     #0x22, w0
    1608:	50 f5 88    	mov.w     w0, 0x1eaa
    160a:	f0 ff 2f    	mov.w     #0xffff, w0
    160c:	f1 ff 27    	mov.w     #0x7fff, w1
    160e:	d2 c2 b3    	mov.b     #0x2d, w2
    1610:	82 4f 54    	sub.b     w8, w2, [w15]
    1612:	05 00 3a    	bra       NZ, 0x161e <.L12>
    1614:	00 00 20    	mov.w     #0x0, w0
    1616:	01 00 28    	mov.w     #0x8000, w1
    1618:	02 00 37    	bra       0x161e <.L12>

0000161a <.L11>:
    161a:	60 00 10    	subr.w    w0, #0x0, w0
    161c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000161e <.L12>:
    161e:	4f 07 78    	mov.w     [--w15], w14
    1620:	4f 06 78    	mov.w     [--w15], w12
    1622:	4f 05 be    	mov.d     [--w15], w10
    1624:	4f 04 be    	mov.d     [--w15], w8
    1626:	4f 00 b1    	sub.w     #0x4, w15
    1628:	00 00 06    	return    

0000162a <__Stoul>:
    162a:	ee 87 47    	add.w     w15, #0xe, w15
    162c:	88 9f be    	mov.d     w8, [w15++]
    162e:	8a 9f be    	mov.d     w10, [w15++]
    1630:	8c 9f be    	mov.d     w12, [w15++]
    1632:	8e 1f 78    	mov.w     w14, [w15++]
    1634:	f0 b7 9f    	mov.w     w0, [w15-18]
    1636:	01 06 78    	mov.w     w1, w12
    1638:	82 05 78    	mov.w     w2, w11
    163a:	00 04 78    	mov.w     w0, w8

0000163c <.L2>:
    163c:	08 05 78    	mov.w     w8, w10
    163e:	0a 04 78    	mov.w     w10, w8
    1640:	b8 46 78    	mov.b     [w8++], w13
    1642:	0d 00 fb    	se        w13, w0
    1644:	8c 00 07    	rcall     0x175e <_isspace>
    1646:	00 00 e0    	cp0.w     w0
    1648:	f9 ff 3a    	bra       NZ, 0x163c <.L2>
    164a:	d0 c2 b3    	mov.b     #0x2d, w0
    164c:	80 cf 56    	sub.b     w13, w0, [w15]
    164e:	03 00 32    	bra       Z, 0x1656 <.L3>
    1650:	00 c0 e9    	dec2.b    w0, w0
    1652:	80 cf 56    	sub.b     w13, w0, [w15]
    1654:	02 00 3a    	bra       NZ, 0x165a <.L19>

00001656 <.L3>:
    1656:	0a 05 e8    	inc.w     w10, w10
    1658:	01 00 37    	bra       0x165c <.L4>

0000165a <.L19>:
    165a:	80 46 78    	mov.b     w0, w13

0000165c <.L4>:
    165c:	0b 00 e0    	cp0.w     w11
    165e:	05 00 35    	bra       LT, 0x166a <.L5>
    1660:	e1 8f 55    	sub.w     w11, #0x1, [w15]
    1662:	03 00 32    	bra       Z, 0x166a <.L5>
    1664:	40 02 20    	mov.w     #0x24, w0
    1666:	80 8f 55    	sub.w     w11, w0, [w15]
    1668:	06 00 34    	bra       LE, 0x1676 <.L6>

0000166a <.L5>:
    166a:	60 44 b8    	mul.uu    w8, #0x0, w8
    166c:	0c 00 e0    	cp0.w     w12
    166e:	70 00 32    	bra       Z, 0x1750 <.L7>
    1670:	7f b0 97    	mov.w     [w15-18], w0
    1672:	00 0e 78    	mov.w     w0, [w12]
    1674:	6d 00 37    	bra       0x1750 <.L7>

00001676 <.L6>:
    1676:	0b 00 e0    	cp0.w     w11
    1678:	0e 00 32    	bra       Z, 0x1696 <.L8>
    167a:	f0 8f 55    	sub.w     w11, #0x10, [w15]
    167c:	1a 00 3a    	bra       NZ, 0x16b2 <.L9>
    167e:	00 c3 b3    	mov.b     #0x30, w0
    1680:	9a 4f 10    	subr.b    w0, [w10], [w15]
    1682:	17 00 3a    	bra       NZ, 0x16b2 <.L9>
    1684:	1a 40 90    	mov.b     [w10+1], w0
    1686:	81 c7 b3    	mov.b     #0x78, w1
    1688:	81 4f 50    	sub.b     w0, w1, [w15]
    168a:	03 00 32    	bra       Z, 0x1692 <.L10>
    168c:	81 c5 b3    	mov.b     #0x58, w1
    168e:	81 4f 50    	sub.b     w0, w1, [w15]
    1690:	10 00 3a    	bra       NZ, 0x16b2 <.L9>

00001692 <.L10>:
    1692:	0a 85 e8    	inc2.w    w10, w10
    1694:	0e 00 37    	bra       0x16b2 <.L9>

00001696 <.L8>:
    1696:	ab 00 20    	mov.w     #0xa, w11
    1698:	00 c3 b3    	mov.b     #0x30, w0
    169a:	9a 4f 10    	subr.b    w0, [w10], [w15]
    169c:	0a 00 3a    	bra       NZ, 0x16b2 <.L9>
    169e:	1a 40 90    	mov.b     [w10+1], w0
    16a0:	81 c7 b3    	mov.b     #0x78, w1
    16a2:	81 4f 50    	sub.b     w0, w1, [w15]
    16a4:	04 00 32    	bra       Z, 0x16ae <.L11>
    16a6:	8b 00 20    	mov.w     #0x8, w11
    16a8:	81 c5 b3    	mov.b     #0x58, w1
    16aa:	81 4f 50    	sub.b     w0, w1, [w15]
    16ac:	02 00 3a    	bra       NZ, 0x16b2 <.L9>

000016ae <.L11>:
    16ae:	0a 85 e8    	inc2.w    w10, w10
    16b0:	0b 01 20    	mov.w     #0x10, w11

000016b2 <.L9>:
    16b2:	0a 00 78    	mov.w     w10, w0

000016b4 <.L12>:
    16b4:	00 02 78    	mov.w     w0, w4
    16b6:	04 00 78    	mov.w     w4, w0
    16b8:	01 c3 b3    	mov.b     #0x30, w1
    16ba:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    16bc:	fb ff 32    	bra       Z, 0x16b4 <.L12>
    16be:	04 07 78    	mov.w     w4, w14
    16c0:	60 44 b8    	mul.uu    w8, #0x0, w8
    16c2:	b4 b7 9f    	mov.w     w4, [w15-26]
    16c4:	0d 00 37    	bra       0x16e0 <.L13>

000016c6 <.L14>:
    16c6:	a1 d7 21    	mov.w     #0x1d7a, w1
    16c8:	81 40 50    	sub.b     w0, w1, w1
    16ca:	c1 ef 9f    	mov.b     w1, [w15-20]
    16cc:	61 59 b9    	mul.su    w11, #0x1, w2
    16ce:	08 00 be    	mov.d     w8, w0
    16d0:	31 08 07    	rcall     0x2734 <___mulp32eds3>
    16d2:	4f ea 97    	mov.b     [w15-20], w4
    16d4:	04 01 fb    	se        w4, w2
    16d6:	cf 91 de    	asr.w     w2, #0xf, w3
    16d8:	c8 b7 9f    	mov.w     w8, [w15-24]
    16da:	d9 b7 9f    	mov.w     w9, [w15-22]
    16dc:	02 04 40    	add.w     w0, w2, w8
    16de:	83 84 48    	addc.w    w1, w3, w9

000016e0 <.L13>:
    16e0:	8e 02 78    	mov.w     w14, w5
    16e2:	3e 00 fb    	se        [w14++], w0
    16e4:	85 bf 9f    	mov.w     w5, [w15-16]
    16e6:	43 00 07    	rcall     0x176e <_tolower>
    16e8:	0b 01 78    	mov.w     w11, w2
    16ea:	80 00 78    	mov.w     w0, w1
    16ec:	a0 d7 21    	mov.w     #0x1d7a, w0
    16ee:	63 04 07    	rcall     0x1fb6 <_memchr>
    16f0:	8f ba 97    	mov.w     [w15-16], w5
    16f2:	00 00 e0    	cp0.w     w0
    16f4:	e8 ff 3a    	bra       NZ, 0x16c6 <.L14>
    16f6:	3f b2 97    	mov.w     [w15-26], w4
    16f8:	85 0f 55    	sub.w     w10, w5, [w15]
    16fa:	05 00 3a    	bra       NZ, 0x1706 <.L15>
    16fc:	60 44 b8    	mul.uu    w8, #0x0, w8
    16fe:	0c 00 e0    	cp0.w     w12
    1700:	27 00 32    	bra       Z, 0x1750 <.L7>
    1702:	ff b2 97    	mov.w     [w15-18], w5
    1704:	24 00 37    	bra       0x174e <.L24>

00001706 <.L15>:
    1706:	04 82 52    	sub.w     w5, w4, w4
    1708:	f0 d9 21    	mov.w     #0x1d9f, w0
    170a:	60 c0 7d    	mov.b     [w0+w11], w0
    170c:	00 00 fb    	se        w0, w0
    170e:	00 02 52    	sub.w     w4, w0, w4
    1710:	17 00 33    	bra       N, 0x1740 <.L16>
    1712:	11 00 3a    	bra       NZ, 0x1736 <.L17>
    1714:	4f e9 97    	mov.b     [w15-20], w2
    1716:	02 00 fb    	se        w2, w0
    1718:	cf 80 de    	asr.w     w0, #0xf, w1
    171a:	00 00 54    	sub.w     w8, w0, w0
    171c:	81 80 5c    	subb.w    w9, w1, w1
    171e:	80 0f 54    	sub.w     w8, w0, [w15]
    1720:	81 8f 5c    	subb.w    w9, w1, [w15]
    1722:	09 00 39    	bra       NC, 0x1736 <.L17>
    1724:	61 59 b9    	mul.su    w11, #0x1, w2
    1726:	85 bf 9f    	mov.w     w5, [w15-16]
    1728:	f2 07 07    	rcall     0x270e <___udivsi3>
    172a:	8f ba 97    	mov.w     [w15-16], w5
    172c:	4f b1 97    	mov.w     [w15-24], w2
    172e:	df b1 97    	mov.w     [w15-22], w3
    1730:	82 0f 50    	sub.w     w0, w2, [w15]
    1732:	83 8f 58    	subb.w    w1, w3, [w15]
    1734:	05 00 32    	bra       Z, 0x1740 <.L16>

00001736 <.L17>:
    1736:	20 02 20    	mov.w     #0x22, w0
    1738:	50 f5 88    	mov.w     w0, 0x1eaa
    173a:	00 84 eb    	setm.w    w8
    173c:	80 84 eb    	setm.w    w9
    173e:	05 00 37    	bra       0x174a <.L18>

00001740 <.L16>:
    1740:	d0 c2 b3    	mov.b     #0x2d, w0
    1742:	80 cf 56    	sub.b     w13, w0, [w15]
    1744:	02 00 3a    	bra       NZ, 0x174a <.L18>
    1746:	60 04 14    	subr.w    w8, #0x0, w8
    1748:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000174a <.L18>:
    174a:	0c 00 e0    	cp0.w     w12
    174c:	01 00 32    	bra       Z, 0x1750 <.L7>

0000174e <.L24>:
    174e:	05 0e 78    	mov.w     w5, [w12]

00001750 <.L7>:
    1750:	08 00 be    	mov.d     w8, w0
    1752:	4f 07 78    	mov.w     [--w15], w14
    1754:	4f 06 be    	mov.d     [--w15], w12
    1756:	4f 05 be    	mov.d     [--w15], w10
    1758:	4f 04 be    	mov.d     [--w15], w8
    175a:	ef 00 b1    	sub.w     #0xe, w15
    175c:	00 00 06    	return    

0000175e <_isspace>:
    175e:	69 00 e1    	cp.w      w0, #0x9
    1760:	04 00 35    	bra       LT, 0x176a <nomatch>
    1762:	6d 00 e1    	cp.w      w0, #0xd
    1764:	03 00 34    	bra       LE, 0x176c <match>
    1766:	00 02 b1    	sub.w     #0x20, w0
    1768:	01 00 32    	bra       Z, 0x176c <match>

0000176a <nomatch>:
    176a:	00 00 05    	retlw.w   #0x0, w0

0000176c <match>:
    176c:	10 00 05    	retlw.w   #0x1, w0

0000176e <_tolower>:
    176e:	80 00 78    	mov.w     w0, w1
    1770:	11 04 b1    	sub.w     #0x41, w1
    1772:	03 00 35    	bra       LT, 0x177a <nomatch>
    1774:	91 01 b1    	sub.w     #0x19, w1
    1776:	01 00 3c    	bra       GT, 0x177a <nomatch>

00001778 <match>:
    1778:	00 50 a0    	bset.w    w0, #0x5

0000177a <nomatch>:
    177a:	00 00 06    	return    

0000177c <__Geterrno>:
    177c:	60 f5 80    	mov.w     0x1eac, w0
    177e:	00 00 e0    	cp0.w     w0
    1780:	01 00 32    	bra       Z, 0x1784 <.L2>
    1782:	00 00 01    	call      w0

00001784 <.L2>:
    1784:	a0 ea 21    	mov.w     #0x1eaa, w0
    1786:	00 00 06    	return    

00001788 <_prout>:
    1788:	88 1f 78    	mov.w     w8, [w15++]
    178a:	02 04 78    	mov.w     w2, w8
    178c:	08 01 78    	mov.w     w8, w2
    178e:	1d 04 07    	rcall     0x1fca <_memcpy>
    1790:	08 00 40    	add.w     w0, w8, w0
    1792:	4f 04 78    	mov.w     [--w15], w8
    1794:	00 00 06    	return    

00001796 <__sprintf_cdnopuxX>:
    1796:	00 00 fa    	lnk       #0x0
    1798:	88 1f 78    	mov.w     w8, [w15++]
    179a:	00 04 78    	mov.w     w0, w8
    179c:	ea 81 57    	sub.w     w15, #0xa, w3
    179e:	3f b9 97    	mov.w     [w15-10], w2
    17a0:	88 00 78    	mov.w     w8, w1
    17a2:	80 78 21    	mov.w     #0x1788, w0
    17a4:	07 00 07    	rcall     0x17b4 <___Printf_cdnopuxX>
    17a6:	00 00 e0    	cp0.w     w0
    17a8:	02 00 35    	bra       LT, 0x17ae <.L3>
    17aa:	80 40 eb    	clr.b     w1
    17ac:	01 74 78    	mov.b     w1, [w8+w0]

000017ae <.L3>:
    17ae:	4f 04 78    	mov.w     [--w15], w8
    17b0:	00 80 fa    	ulnk      
    17b2:	00 00 06    	return    

000017b4 <___Printf_cdnopuxX>:
    17b4:	62 00 fa    	lnk       #0x62
    17b6:	88 9f be    	mov.d     w8, [w15++]
    17b8:	8a 1f 78    	mov.w     w10, [w15++]
    17ba:	00 05 78    	mov.w     w0, w10
    17bc:	81 04 78    	mov.w     w1, w9
    17be:	02 04 78    	mov.w     w2, w8
    17c0:	83 00 78    	mov.w     w3, w1
    17c2:	80 f9 2f    	mov.w     #0xff98, w0
    17c4:	0f 00 40    	add.w     w0, w15, w0
    17c6:	4c 06 07    	rcall     0x2460 <__Vacopy>
    17c8:	9a 97 9f    	mov.w     w10, [w15-94]
    17ca:	a9 97 9f    	mov.w     w9, [w15-92]
    17cc:	00 00 eb    	clr.w     w0
    17ce:	b0 9f 9f    	mov.w     w0, [w15-74]

000017d0 <.L31>:
    17d0:	18 85 fb    	ze        [w8], w10
    17d2:	8a 04 fb    	se        w10, w9
    17d4:	0a 05 ea    	neg.w     w10, w10
    17d6:	4f 55 de    	lsr.w     w10, #0xf, w10
    17d8:	50 02 20    	mov.w     #0x25, w0
    17da:	80 8f 54    	sub.w     w9, w0, [w15]
    17dc:	0d 00 32    	bra       Z, 0x17f8 <.L3>
    17de:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    17e0:	0b 00 3a    	bra       NZ, 0x17f8 <.L3>
    17e2:	0a 01 78    	mov.w     w10, w2
    17e4:	88 00 78    	mov.w     w8, w1
    17e6:	2f 90 97    	mov.w     [w15-92], w0
    17e8:	9f 91 97    	mov.w     [w15-94], w3
    17ea:	03 00 01    	call      w3
    17ec:	a0 97 9f    	mov.w     w0, [w15-92]
    17ee:	00 00 e0    	cp0.w     w0
    17f0:	8e 00 32    	bra       Z, 0x190e <.L27>
    17f2:	3f 98 97    	mov.w     [w15-74], w0
    17f4:	00 00 e8    	inc.w     w0, w0
    17f6:	b0 9f 9f    	mov.w     w0, [w15-74]

000017f8 <.L3>:
    17f8:	0a 04 44    	add.w     w8, w10, w8
    17fa:	50 02 20    	mov.w     #0x25, w0
    17fc:	80 8f 54    	sub.w     w9, w0, [w15]
    17fe:	04 00 32    	bra       Z, 0x1808 <.L5>
    1800:	09 00 e0    	cp0.w     w9
    1802:	e6 ff 3a    	bra       NZ, 0x17d0 <.L31>
    1804:	3f 98 97    	mov.w     [w15-74], w0
    1806:	84 00 37    	bra       0x1910 <.L4>

00001808 <.L5>:
    1808:	00 00 eb    	clr.w     w0
    180a:	90 9f 9f    	mov.w     w0, [w15-78]
    180c:	80 9f 9f    	mov.w     w0, [w15-80]
    180e:	f0 97 9f    	mov.w     w0, [w15-82]
    1810:	e0 97 9f    	mov.w     w0, [w15-84]
    1812:	d0 97 9f    	mov.w     w0, [w15-86]
    1814:	c0 97 9f    	mov.w     w0, [w15-88]
    1816:	07 00 37    	bra       0x1826 <.L34>

00001818 <.L8>:
    1818:	a1 df 21    	mov.w     #0x1dfa, w1
    181a:	01 00 50    	sub.w     w0, w1, w0
    181c:	00 00 40    	add.w     w0, w0, w0
    181e:	e1 de 21    	mov.w     #0x1dee, w1
    1820:	61 00 78    	mov.w     [w1+w0], w0
    1822:	df 98 97    	mov.w     [w15-70], w1
    1824:	01 00 70    	ior.w     w0, w1, w0

00001826 <.L34>:
    1826:	d0 9f 9f    	mov.w     w0, [w15-70]
    1828:	88 04 78    	mov.w     w8, w9
    182a:	09 04 78    	mov.w     w9, w8
    182c:	38 45 78    	mov.b     [w8++], w10
    182e:	8a 00 fb    	se        w10, w1
    1830:	a0 df 21    	mov.w     #0x1dfa, w0
    1832:	d2 03 07    	rcall     0x1fd8 <_strchr>
    1834:	00 00 e0    	cp0.w     w0
    1836:	f0 ff 3a    	bra       NZ, 0x1818 <.L8>
    1838:	a1 c2 b3    	mov.b     #0x2a, w1
    183a:	81 4f 55    	sub.b     w10, w1, [w15]
    183c:	0e 00 3a    	bra       NZ, 0x185a <.L9>
    183e:	cf 88 97    	mov.w     [w15-104], w1
    1840:	01 80 e9    	dec2.w    w1, w0
    1842:	c0 8f 9f    	mov.w     w0, [w15-104]
    1844:	10 00 78    	mov.w     [w0], w0
    1846:	c0 9f 9f    	mov.w     w0, [w15-72]
    1848:	00 00 e0    	cp0.w     w0
    184a:	05 00 3d    	bra       GE, 0x1856 <.L10>
    184c:	00 00 ea    	neg.w     w0, w0
    184e:	c0 9f 9f    	mov.w     w0, [w15-72]
    1850:	5f 98 97    	mov.w     [w15-70], w0
    1852:	00 20 a0    	bset.w    w0, #0x2
    1854:	d0 9f 9f    	mov.w     w0, [w15-70]

00001856 <.L10>:
    1856:	09 04 e8    	inc.w     w9, w8
    1858:	0f 00 37    	bra       0x1878 <.L11>

0000185a <.L9>:
    185a:	c0 9f 9f    	mov.w     w0, [w15-72]
    185c:	00 00 eb    	clr.w     w0
    185e:	05 00 37    	bra       0x186a <.L32>

00001860 <.L14>:
    1860:	f2 ff 27    	mov.w     #0x7fff, w2
    1862:	82 0f 50    	sub.w     w0, w2, [w15]
    1864:	02 00 32    	bra       Z, 0x186a <.L32>
    1866:	6a 01 b9    	mul.su    w0, #0xa, w2
    1868:	02 80 40    	add.w     w1, w2, w0

0000186a <.L32>:
    186a:	09 04 78    	mov.w     w9, w8
    186c:	88 04 78    	mov.w     w8, w9
    186e:	b9 00 fb    	se        [w9++], w1
    1870:	01 03 b1    	sub.w     #0x30, w1
    1872:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1874:	f5 ff 36    	bra       LEU, 0x1860 <.L14>
    1876:	c0 9f 9f    	mov.w     w0, [w15-72]

00001878 <.L11>:
    1878:	e0 c2 b3    	mov.b     #0x2e, w0
    187a:	98 4f 10    	subr.b    w0, [w8], [w15]
    187c:	02 00 32    	bra       Z, 0x1882 <.L15>
    187e:	00 80 eb    	setm.w    w0
    1880:	19 00 37    	bra       0x18b4 <.L35>

00001882 <.L15>:
    1882:	a0 c2 b3    	mov.b     #0x2a, w0
    1884:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1886:	07 00 3a    	bra       NZ, 0x1896 <.L17>
    1888:	cf 88 97    	mov.w     [w15-104], w1
    188a:	01 80 e9    	dec2.w    w1, w0
    188c:	c0 8f 9f    	mov.w     w0, [w15-104]
    188e:	10 00 78    	mov.w     [w0], w0
    1890:	a0 9f 9f    	mov.w     w0, [w15-76]
    1892:	08 04 e8    	inc.w     w8, w8
    1894:	10 00 37    	bra       0x18b6 <.L16>

00001896 <.L17>:
    1896:	00 00 eb    	clr.w     w0
    1898:	a0 9f 9f    	mov.w     w0, [w15-76]
    189a:	88 00 78    	mov.w     w8, w1
    189c:	05 00 37    	bra       0x18a8 <.L33>

0000189e <.L20>:
    189e:	f3 ff 27    	mov.w     #0x7fff, w3
    18a0:	83 0f 50    	sub.w     w0, w3, [w15]
    18a2:	02 00 32    	bra       Z, 0x18a8 <.L33>
    18a4:	6a 02 b9    	mul.su    w0, #0xa, w4
    18a6:	04 00 41    	add.w     w2, w4, w0

000018a8 <.L33>:
    18a8:	01 04 78    	mov.w     w1, w8
    18aa:	88 00 78    	mov.w     w8, w1
    18ac:	31 01 fb    	se        [w1++], w2
    18ae:	02 03 b1    	sub.w     #0x30, w2
    18b0:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    18b2:	f5 ff 36    	bra       LEU, 0x189e <.L20>

000018b4 <.L35>:
    18b4:	a0 9f 9f    	mov.w     w0, [w15-76]

000018b6 <.L16>:
    18b6:	98 44 78    	mov.b     [w8], w9
    18b8:	89 00 fb    	se        w9, w1
    18ba:	60 de 21    	mov.w     #0x1de6, w0
    18bc:	8d 03 07    	rcall     0x1fd8 <_strchr>
    18be:	00 00 e0    	cp0.w     w0
    18c0:	02 00 32    	bra       Z, 0x18c6 <.L25>
    18c2:	08 04 e8    	inc.w     w8, w8
    18c4:	01 00 37    	bra       0x18c8 <.L21>

000018c6 <.L25>:
    18c6:	80 44 eb    	clr.b     w9

000018c8 <.L21>:
    18c8:	c9 7f 9f    	mov.b     w9, [w15-68]
    18ca:	80 c6 b3    	mov.b     #0x68, w0
    18cc:	80 cf 54    	sub.b     w9, w0, [w15]
    18ce:	04 00 3a    	bra       NZ, 0x18d8 <.L22>
    18d0:	98 cf 14    	subr.b    w9, [w8], [w15]
    18d2:	0a 00 3a    	bra       NZ, 0x18e8 <.L23>
    18d4:	66 40 50    	sub.b     w0, #0x6, w0
    18d6:	06 00 37    	bra       0x18e4 <.L36>

000018d8 <.L22>:
    18d8:	c0 c6 b3    	mov.b     #0x6c, w0
    18da:	80 cf 54    	sub.b     w9, w0, [w15]
    18dc:	05 00 3a    	bra       NZ, 0x18e8 <.L23>
    18de:	98 cf 14    	subr.b    w9, [w8], [w15]
    18e0:	03 00 3a    	bra       NZ, 0x18e8 <.L23>
    18e2:	65 40 40    	add.b     w0, #0x5, w0

000018e4 <.L36>:
    18e4:	c0 7f 9f    	mov.b     w0, [w15-68]
    18e6:	08 04 e8    	inc.w     w8, w8

000018e8 <.L23>:
    18e8:	18 01 fb    	se        [w8], w2
    18ea:	e3 fb 2f    	mov.w     #0xffbe, w3
    18ec:	8f 81 41    	add.w     w3, w15, w3
    18ee:	81 f9 2f    	mov.w     #0xff98, w1
    18f0:	8f 80 40    	add.w     w1, w15, w1
    18f2:	a0 f9 2f    	mov.w     #0xff9a, w0
    18f4:	0f 00 40    	add.w     w0, w15, w0
    18f6:	10 00 07    	rcall     0x1918 <___Putfld_cdnopuxX>
    18f8:	00 00 e0    	cp0.w     w0
    18fa:	09 00 3a    	bra       NZ, 0x190e <.L27>
    18fc:	e1 fb 2f    	mov.w     #0xffbe, w1
    18fe:	8f 80 40    	add.w     w1, w15, w1
    1900:	a0 f9 2f    	mov.w     #0xff9a, w0
    1902:	0f 00 40    	add.w     w0, w15, w0
    1904:	f1 04 07    	rcall     0x22e8 <__Puttxt>
    1906:	00 00 e0    	cp0.w     w0
    1908:	02 00 35    	bra       LT, 0x190e <.L27>
    190a:	08 04 e8    	inc.w     w8, w8
    190c:	61 ff 37    	bra       0x17d0 <.L31>

0000190e <.L27>:
    190e:	00 80 eb    	setm.w    w0

00001910 <.L4>:
    1910:	4f 05 78    	mov.w     [--w15], w10
    1912:	4f 04 be    	mov.d     [--w15], w8
    1914:	00 80 fa    	ulnk      
    1916:	00 00 06    	return    

00001918 <___Putfld_cdnopuxX>:
    1918:	88 1f 78    	mov.w     w8, [w15++]
    191a:	e4 c6 b3    	mov.b     #0x6e, w4
    191c:	84 4f 51    	sub.b     w2, w4, [w15]
    191e:	b6 00 32    	bra       Z, 0x1a8c <.L7>
    1920:	10 00 3c    	bra       GT, 0x1942 <.L9>
    1922:	6b 42 52    	sub.b     w4, #0xb, w4
    1924:	84 4f 51    	sub.b     w2, w4, [w15]
    1926:	18 00 32    	bra       Z, 0x1958 <.L5>
    1928:	05 00 3c    	bra       GT, 0x1934 <.L10>
    192a:	54 c2 b3    	mov.b     #0x25, w4
    192c:	84 4f 51    	sub.b     w2, w4, [w15]
    192e:	ee 00 32    	bra       Z, 0x1b0c <.L3>
    1930:	84 c5 b3    	mov.b     #0x58, w4
    1932:	0f 00 37    	bra       0x1952 <.L47>

00001934 <.L10>:
    1934:	44 c6 b3    	mov.b     #0x64, w4
    1936:	84 4f 51    	sub.b     w2, w4, [w15]
    1938:	14 00 32    	bra       Z, 0x1962 <.L6>
    193a:	65 42 42    	add.b     w4, #0x5, w4
    193c:	84 4f 51    	sub.b     w2, w4, [w15]
    193e:	e9 00 3a    	bra       NZ, 0x1b12 <.L2>
    1940:	10 00 37    	bra       0x1962 <.L6>

00001942 <.L9>:
    1942:	04 c7 b3    	mov.b     #0x70, w4
    1944:	84 4f 51    	sub.b     w2, w4, [w15]
    1946:	d5 00 32    	bra       Z, 0x1af2 <.L8>
    1948:	53 00 35    	bra       LT, 0x19f0 <.L4>
    194a:	65 42 42    	add.b     w4, #0x5, w4
    194c:	84 4f 51    	sub.b     w2, w4, [w15]
    194e:	50 00 32    	bra       Z, 0x19f0 <.L4>
    1950:	63 42 42    	add.b     w4, #0x3, w4

00001952 <.L47>:
    1952:	84 4f 51    	sub.b     w2, w4, [w15]
    1954:	de 00 3a    	bra       NZ, 0x1b12 <.L2>
    1956:	4c 00 37    	bra       0x19f0 <.L4>

00001958 <.L5>:
    1958:	11 81 e9    	dec2.w    [w1], w2
    195a:	82 08 78    	mov.w     w2, [w1]
    195c:	f0 00 90    	mov.w     [w0+14], w1
    195e:	12 41 78    	mov.b     [w2], w2
    1960:	d6 00 37    	bra       0x1b0e <.L53>

00001962 <.L6>:
    1962:	20 62 90    	mov.b     [w0+34], w4
    1964:	c5 c6 b3    	mov.b     #0x6c, w5
    1966:	85 4f 52    	sub.b     w4, w5, [w15]
    1968:	07 00 3a    	bra       NZ, 0x1978 <.L12>
    196a:	91 02 78    	mov.w     [w1], w5
    196c:	64 82 52    	sub.w     w5, #0x4, w4
    196e:	84 08 78    	mov.w     w4, [w1]
    1970:	14 02 be    	mov.d     [w4], w4
    1972:	4f ab de    	asr.w     w5, #0xf, w6
    1974:	86 03 78    	mov.w     w6, w7
    1976:	11 00 37    	bra       0x199a <.L13>

00001978 <.L12>:
    1978:	15 c7 b3    	mov.b     #0x71, w5
    197a:	85 4f 52    	sub.b     w4, w5, [w15]
    197c:	03 00 32    	bra       Z, 0x1984 <.L43>
    197e:	a5 c6 b3    	mov.b     #0x6a, w5
    1980:	85 4f 52    	sub.b     w4, w5, [w15]
    1982:	06 00 3a    	bra       NZ, 0x1990 <.L15>

00001984 <.L43>:
    1984:	91 02 78    	mov.w     [w1], w5
    1986:	68 82 52    	sub.w     w5, #0x8, w4
    1988:	84 08 78    	mov.w     w4, [w1]
    198a:	54 03 be    	mov.d     [++w4], w6
    198c:	44 02 be    	mov.d     [--w4], w4
    198e:	05 00 37    	bra       0x199a <.L13>

00001990 <.L15>:
    1990:	11 82 e9    	dec2.w    [w1], w4
    1992:	84 08 78    	mov.w     w4, [w1]
    1994:	14 02 78    	mov.w     [w4], w4
    1996:	cf a2 de    	asr.w     w4, #0xf, w5
    1998:	61 2b b9    	mul.su    w5, #0x1, w6

0000199a <.L13>:
    199a:	04 98 be    	mov.d     w4, [w0++]
    199c:	06 90 be    	mov.d     w6, [w0--]
    199e:	a0 60 90    	mov.b     [w0+34], w1
    19a0:	88 c6 b3    	mov.b     #0x68, w8
    19a2:	88 cf 50    	sub.b     w1, w8, [w15]
    19a4:	0d 00 32    	bra       Z, 0x19c0 <.L19>
    19a6:	28 c6 b3    	mov.b     #0x62, w8
    19a8:	88 cf 50    	sub.b     w1, w8, [w15]
    19aa:	04 00 3a    	bra       NZ, 0x19b4 <.L18>
    19ac:	04 02 fb    	se        w4, w4
    19ae:	cf a2 de    	asr.w     w4, #0xf, w5
    19b0:	61 2b b9    	mul.su    w5, #0x1, w6
    19b2:	08 00 37    	bra       0x19c4 <.L44>

000019b4 <.L18>:
    19b4:	48 c7 b3    	mov.b     #0x74, w8
    19b6:	88 cf 50    	sub.b     w1, w8, [w15]
    19b8:	03 00 32    	bra       Z, 0x19c0 <.L19>
    19ba:	66 44 44    	add.b     w8, #0x6, w8
    19bc:	88 cf 50    	sub.b     w1, w8, [w15]
    19be:	04 00 3a    	bra       NZ, 0x19c8 <.L17>

000019c0 <.L19>:
    19c0:	cf a2 de    	asr.w     w4, #0xf, w5
    19c2:	61 2b b9    	mul.su    w5, #0x1, w6

000019c4 <.L44>:
    19c4:	04 98 be    	mov.d     w4, [w0++]
    19c6:	06 90 be    	mov.d     w6, [w0--]

000019c8 <.L17>:
    19c8:	30 02 be    	mov.d     [w0++], w4
    19ca:	20 03 be    	mov.d     [w0--], w6
    19cc:	f0 00 90    	mov.w     [w0+14], w1
    19ce:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    19d0:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    19d2:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    19d4:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    19d6:	02 00 3d    	bra       GE, 0x19dc <.L20>
    19d8:	d4 c2 b3    	mov.b     #0x2d, w4
    19da:	08 00 37    	bra       0x19ec <.L45>

000019dc <.L20>:
    19dc:	00 12 90    	mov.w     [w0+32], w4
    19de:	04 18 a3    	btst.z    w4, #0x1
    19e0:	02 00 32    	bra       Z, 0x19e6 <.L22>
    19e2:	b4 c2 b3    	mov.b     #0x2b, w4
    19e4:	03 00 37    	bra       0x19ec <.L45>

000019e6 <.L22>:
    19e6:	04 08 a3    	btst.z    w4, #0x0
    19e8:	4c 00 32    	bra       Z, 0x1a82 <.L31>
    19ea:	04 c2 b3    	mov.b     #0x20, w4

000019ec <.L45>:
    19ec:	84 f1 78    	mov.b     w4, [w3+w1]
    19ee:	47 00 37    	bra       0x1a7e <.L54>

000019f0 <.L4>:
    19f0:	20 62 90    	mov.b     [w0+34], w4
    19f2:	c5 c6 b3    	mov.b     #0x6c, w5
    19f4:	85 4f 52    	sub.b     w4, w5, [w15]
    19f6:	06 00 3a    	bra       NZ, 0x1a04 <.L23>
    19f8:	91 02 78    	mov.w     [w1], w5
    19fa:	64 82 52    	sub.w     w5, #0x4, w4
    19fc:	84 08 78    	mov.w     w4, [w1]
    19fe:	14 02 be    	mov.d     [w4], w4
    1a00:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a02:	11 00 37    	bra       0x1a26 <.L24>

00001a04 <.L23>:
    1a04:	15 c7 b3    	mov.b     #0x71, w5
    1a06:	85 4f 52    	sub.b     w4, w5, [w15]
    1a08:	03 00 32    	bra       Z, 0x1a10 <.L48>
    1a0a:	a5 c6 b3    	mov.b     #0x6a, w5
    1a0c:	85 4f 52    	sub.b     w4, w5, [w15]
    1a0e:	06 00 3a    	bra       NZ, 0x1a1c <.L26>

00001a10 <.L48>:
    1a10:	91 02 78    	mov.w     [w1], w5
    1a12:	68 82 52    	sub.w     w5, #0x8, w4
    1a14:	84 08 78    	mov.w     w4, [w1]
    1a16:	54 03 be    	mov.d     [++w4], w6
    1a18:	44 02 be    	mov.d     [--w4], w4
    1a1a:	05 00 37    	bra       0x1a26 <.L24>

00001a1c <.L26>:
    1a1c:	11 82 e9    	dec2.w    [w1], w4
    1a1e:	84 08 78    	mov.w     w4, [w1]
    1a20:	14 02 78    	mov.w     [w4], w4
    1a22:	80 02 eb    	clr.w     w5
    1a24:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a26 <.L24>:
    1a26:	04 98 be    	mov.d     w4, [w0++]
    1a28:	06 90 be    	mov.d     w6, [w0--]
    1a2a:	a0 60 90    	mov.b     [w0+34], w1
    1a2c:	88 c6 b3    	mov.b     #0x68, w8
    1a2e:	88 cf 50    	sub.b     w1, w8, [w15]
    1a30:	0d 00 32    	bra       Z, 0x1a4c <.L30>
    1a32:	28 c6 b3    	mov.b     #0x62, w8
    1a34:	88 cf 50    	sub.b     w1, w8, [w15]
    1a36:	04 00 3a    	bra       NZ, 0x1a40 <.L29>
    1a38:	04 82 fb    	ze        w4, w4
    1a3a:	80 02 eb    	clr.w     w5
    1a3c:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a3e:	08 00 37    	bra       0x1a50 <.L49>

00001a40 <.L29>:
    1a40:	48 c7 b3    	mov.b     #0x74, w8
    1a42:	88 cf 50    	sub.b     w1, w8, [w15]
    1a44:	03 00 32    	bra       Z, 0x1a4c <.L30>
    1a46:	66 44 44    	add.b     w8, #0x6, w8
    1a48:	88 cf 50    	sub.b     w1, w8, [w15]
    1a4a:	04 00 3a    	bra       NZ, 0x1a54 <.L28>

00001a4c <.L30>:
    1a4c:	80 02 eb    	clr.w     w5
    1a4e:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a50 <.L49>:
    1a50:	04 98 be    	mov.d     w4, [w0++]
    1a52:	06 90 be    	mov.d     w6, [w0--]

00001a54 <.L28>:
    1a54:	80 10 90    	mov.w     [w0+32], w1
    1a56:	01 38 a3    	btst.z    w1, #0x3
    1a58:	14 00 32    	bra       Z, 0x1a82 <.L31>
    1a5a:	30 02 be    	mov.d     [w0++], w4
    1a5c:	20 03 be    	mov.d     [w0--], w6
    1a5e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a60:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1a62:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1a64:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1a66:	0d 00 32    	bra       Z, 0x1a82 <.L31>
    1a68:	81 c7 b3    	mov.b     #0x78, w1
    1a6a:	81 4f 51    	sub.b     w2, w1, [w15]
    1a6c:	03 00 32    	bra       Z, 0x1a74 <.L32>
    1a6e:	81 c5 b3    	mov.b     #0x58, w1
    1a70:	81 4f 51    	sub.b     w2, w1, [w15]
    1a72:	07 00 3a    	bra       NZ, 0x1a82 <.L31>

00001a74 <.L32>:
    1a74:	f0 00 90    	mov.w     [w0+14], w1
    1a76:	04 c3 b3    	mov.b     #0x30, w4
    1a78:	84 f1 78    	mov.b     w4, [w3+w1]
    1a7a:	81 00 e8    	inc.w     w1, w1
    1a7c:	82 f1 78    	mov.b     w2, [w3+w1]

00001a7e <.L54>:
    1a7e:	81 00 e8    	inc.w     w1, w1
    1a80:	71 00 98    	mov.w     w1, [w0+14]

00001a82 <.L31>:
    1a82:	f0 00 90    	mov.w     [w0+14], w1
    1a84:	81 81 41    	add.w     w3, w1, w3
    1a86:	63 00 98    	mov.w     w3, [w0+12]
    1a88:	82 40 78    	mov.b     w2, w1
    1a8a:	3e 00 37    	bra       0x1b08 <.L52>

00001a8c <.L7>:
    1a8c:	a0 61 90    	mov.b     [w0+34], w3
    1a8e:	c4 c6 b3    	mov.b     #0x6c, w4
    1a90:	11 81 e9    	dec2.w    [w1], w2
    1a92:	84 cf 51    	sub.b     w3, w4, [w15]
    1a94:	22 00 32    	bra       Z, 0x1ada <.L37>
    1a96:	0a 00 3c    	bra       GT, 0x1aac <.L41>
    1a98:	64 42 52    	sub.b     w4, #0x4, w4
    1a9a:	84 cf 51    	sub.b     w3, w4, [w15]
    1a9c:	25 00 32    	bra       Z, 0x1ae8 <.L51>
    1a9e:	04 c2 e8    	inc2.b    w4, w4
    1aa0:	84 cf 51    	sub.b     w3, w4, [w15]
    1aa2:	13 00 32    	bra       Z, 0x1aca <.L36>
    1aa4:	68 42 52    	sub.b     w4, #0x8, w4
    1aa6:	84 cf 51    	sub.b     w3, w4, [w15]
    1aa8:	1e 00 3a    	bra       NZ, 0x1ae6 <.L33>
    1aaa:	0a 00 37    	bra       0x1ac0 <.L55>

00001aac <.L41>:
    1aac:	44 c7 b3    	mov.b     #0x74, w4
    1aae:	84 cf 51    	sub.b     w3, w4, [w15]
    1ab0:	1b 00 32    	bra       Z, 0x1ae8 <.L51>
    1ab2:	66 42 42    	add.b     w4, #0x6, w4
    1ab4:	84 cf 51    	sub.b     w3, w4, [w15]
    1ab6:	18 00 32    	bra       Z, 0x1ae8 <.L51>
    1ab8:	69 42 52    	sub.b     w4, #0x9, w4
    1aba:	84 cf 51    	sub.b     w3, w4, [w15]
    1abc:	14 00 3a    	bra       NZ, 0x1ae6 <.L33>
    1abe:	05 00 37    	bra       0x1aca <.L36>

00001ac0 <.L55>:
    1ac0:	82 08 78    	mov.w     w2, [w1]
    1ac2:	92 00 78    	mov.w     [w2], w1
    1ac4:	40 58 90    	mov.b     [w0+28], w0
    1ac6:	80 48 78    	mov.b     w0, [w1]
    1ac8:	2c 00 37    	bra       0x1b22 <.L11>

00001aca <.L36>:
    1aca:	82 08 78    	mov.w     w2, [w1]
    1acc:	92 00 78    	mov.w     [w2], w1
    1ace:	60 0a 90    	mov.w     [w0+28], w4
    1ad0:	cf a2 de    	asr.w     w4, #0xf, w5
    1ad2:	61 2b b9    	mul.su    w5, #0x1, w6
    1ad4:	84 98 be    	mov.d     w4, [w1++]
    1ad6:	86 90 be    	mov.d     w6, [w1--]
    1ad8:	24 00 37    	bra       0x1b22 <.L11>

00001ada <.L37>:
    1ada:	82 08 78    	mov.w     w2, [w1]
    1adc:	92 00 78    	mov.w     [w2], w1
    1ade:	60 09 90    	mov.w     [w0+28], w2
    1ae0:	cf 91 de    	asr.w     w2, #0xf, w3
    1ae2:	82 88 be    	mov.d     w2, [w1]
    1ae4:	1e 00 37    	bra       0x1b22 <.L11>

00001ae6 <.L33>:
    1ae6:	11 81 e9    	dec2.w    [w1], w2

00001ae8 <.L51>:
    1ae8:	82 08 78    	mov.w     w2, [w1]
    1aea:	92 00 78    	mov.w     [w2], w1
    1aec:	60 08 90    	mov.w     [w0+28], w0
    1aee:	80 08 78    	mov.w     w0, [w1]
    1af0:	18 00 37    	bra       0x1b22 <.L11>

00001af2 <.L8>:
    1af2:	11 81 e9    	dec2.w    [w1], w2
    1af4:	82 08 78    	mov.w     w2, [w1]
    1af6:	12 02 78    	mov.w     [w2], w4
    1af8:	cf a2 de    	asr.w     w4, #0xf, w5
    1afa:	61 2b b9    	mul.su    w5, #0x1, w6
    1afc:	04 98 be    	mov.d     w4, [w0++]
    1afe:	06 90 be    	mov.d     w6, [w0--]
    1b00:	f0 00 90    	mov.w     [w0+14], w1
    1b02:	81 81 41    	add.w     w3, w1, w3
    1b04:	63 00 98    	mov.w     w3, [w0+12]
    1b06:	81 c7 b3    	mov.b     #0x78, w1

00001b08 <.L52>:
    1b08:	c0 02 07    	rcall     0x208a <__Litob>
    1b0a:	0b 00 37    	bra       0x1b22 <.L11>

00001b0c <.L3>:
    1b0c:	f0 00 90    	mov.w     [w0+14], w1

00001b0e <.L53>:
    1b0e:	82 f1 78    	mov.b     w2, [w3+w1]
    1b10:	06 00 37    	bra       0x1b1e <.L50>

00001b12 <.L2>:
    1b12:	f0 00 90    	mov.w     [w0+14], w1
    1b14:	81 81 41    	add.w     w3, w1, w3
    1b16:	02 04 e0    	cp0.b     w2
    1b18:	01 00 3a    	bra       NZ, 0x1b1c <.L42>
    1b1a:	52 c2 b3    	mov.b     #0x25, w2

00001b1c <.L42>:
    1b1c:	82 49 78    	mov.b     w2, [w3]

00001b1e <.L50>:
    1b1e:	81 00 e8    	inc.w     w1, w1
    1b20:	71 00 98    	mov.w     w1, [w0+14]

00001b22 <.L11>:
    1b22:	00 00 eb    	clr.w     w0
    1b24:	4f 04 78    	mov.w     [--w15], w8
    1b26:	00 00 06    	return    

00001b28 <_prout>:
    1b28:	88 9f be    	mov.d     w8, [w15++]
    1b2a:	00 04 78    	mov.w     w0, w8
    1b2c:	01 00 78    	mov.w     w1, w0
    1b2e:	82 04 78    	mov.w     w2, w9
    1b30:	88 01 78    	mov.w     w8, w3
    1b32:	09 01 78    	mov.w     w9, w2
    1b34:	11 00 20    	mov.w     #0x1, w1
    1b36:	eb 01 07    	rcall     0x1f0e <_fwrite>
    1b38:	89 0f 50    	sub.w     w0, w9, [w15]
    1b3a:	01 00 32    	bra       Z, 0x1b3e <.L2>
    1b3c:	00 04 eb    	clr.w     w8

00001b3e <.L2>:
    1b3e:	08 00 78    	mov.w     w8, w0
    1b40:	4f 04 be    	mov.d     [--w15], w8
    1b42:	00 00 06    	return    

00001b44 <__printf_cdnopsuxX>:
    1b44:	00 00 fa    	lnk       #0x0
    1b46:	e8 81 57    	sub.w     w15, #0x8, w3
    1b48:	4f b9 97    	mov.w     [w15-8], w2
    1b4a:	01 c2 21    	mov.w     #0x1c20, w1
    1b4c:	80 b2 21    	mov.w     #0x1b28, w0
    1b4e:	02 00 07    	rcall     0x1b54 <___Printf_cdnopsuxX>
    1b50:	00 80 fa    	ulnk      
    1b52:	00 00 06    	return    

00001b54 <___Printf_cdnopsuxX>:
    1b54:	62 00 fa    	lnk       #0x62
    1b56:	88 9f be    	mov.d     w8, [w15++]
    1b58:	8a 1f 78    	mov.w     w10, [w15++]
    1b5a:	00 05 78    	mov.w     w0, w10
    1b5c:	81 04 78    	mov.w     w1, w9
    1b5e:	02 04 78    	mov.w     w2, w8
    1b60:	83 00 78    	mov.w     w3, w1
    1b62:	80 f9 2f    	mov.w     #0xff98, w0
    1b64:	0f 00 40    	add.w     w0, w15, w0
    1b66:	7c 04 07    	rcall     0x2460 <__Vacopy>
    1b68:	9a 97 9f    	mov.w     w10, [w15-94]
    1b6a:	a9 97 9f    	mov.w     w9, [w15-92]
    1b6c:	00 00 eb    	clr.w     w0
    1b6e:	b0 9f 9f    	mov.w     w0, [w15-74]

00001b70 <.L31>:
    1b70:	18 85 fb    	ze        [w8], w10
    1b72:	8a 04 fb    	se        w10, w9
    1b74:	0a 05 ea    	neg.w     w10, w10
    1b76:	4f 55 de    	lsr.w     w10, #0xf, w10
    1b78:	50 02 20    	mov.w     #0x25, w0
    1b7a:	80 8f 54    	sub.w     w9, w0, [w15]
    1b7c:	0d 00 32    	bra       Z, 0x1b98 <.L3>
    1b7e:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    1b80:	0b 00 3a    	bra       NZ, 0x1b98 <.L3>
    1b82:	0a 01 78    	mov.w     w10, w2
    1b84:	88 00 78    	mov.w     w8, w1
    1b86:	2f 90 97    	mov.w     [w15-92], w0
    1b88:	9f 91 97    	mov.w     [w15-94], w3
    1b8a:	03 00 01    	call      w3
    1b8c:	a0 97 9f    	mov.w     w0, [w15-92]
    1b8e:	00 00 e0    	cp0.w     w0
    1b90:	8e 00 32    	bra       Z, 0x1cae <.L27>
    1b92:	3f 98 97    	mov.w     [w15-74], w0
    1b94:	00 00 e8    	inc.w     w0, w0
    1b96:	b0 9f 9f    	mov.w     w0, [w15-74]

00001b98 <.L3>:
    1b98:	0a 04 44    	add.w     w8, w10, w8
    1b9a:	50 02 20    	mov.w     #0x25, w0
    1b9c:	80 8f 54    	sub.w     w9, w0, [w15]
    1b9e:	04 00 32    	bra       Z, 0x1ba8 <.L5>
    1ba0:	09 00 e0    	cp0.w     w9
    1ba2:	e6 ff 3a    	bra       NZ, 0x1b70 <.L31>
    1ba4:	3f 98 97    	mov.w     [w15-74], w0
    1ba6:	84 00 37    	bra       0x1cb0 <.L4>

00001ba8 <.L5>:
    1ba8:	00 00 eb    	clr.w     w0
    1baa:	90 9f 9f    	mov.w     w0, [w15-78]
    1bac:	80 9f 9f    	mov.w     w0, [w15-80]
    1bae:	f0 97 9f    	mov.w     w0, [w15-82]
    1bb0:	e0 97 9f    	mov.w     w0, [w15-84]
    1bb2:	d0 97 9f    	mov.w     w0, [w15-86]
    1bb4:	c0 97 9f    	mov.w     w0, [w15-88]
    1bb6:	07 00 37    	bra       0x1bc6 <.L34>

00001bb8 <.L8>:
    1bb8:	41 e9 21    	mov.w     #0x1e94, w1
    1bba:	01 00 50    	sub.w     w0, w1, w0
    1bbc:	00 00 40    	add.w     w0, w0, w0
    1bbe:	81 e8 21    	mov.w     #0x1e88, w1
    1bc0:	61 00 78    	mov.w     [w1+w0], w0
    1bc2:	df 98 97    	mov.w     [w15-70], w1
    1bc4:	01 00 70    	ior.w     w0, w1, w0

00001bc6 <.L34>:
    1bc6:	d0 9f 9f    	mov.w     w0, [w15-70]
    1bc8:	88 04 78    	mov.w     w8, w9
    1bca:	09 04 78    	mov.w     w9, w8
    1bcc:	38 45 78    	mov.b     [w8++], w10
    1bce:	8a 00 fb    	se        w10, w1
    1bd0:	40 e9 21    	mov.w     #0x1e94, w0
    1bd2:	02 02 07    	rcall     0x1fd8 <_strchr>
    1bd4:	00 00 e0    	cp0.w     w0
    1bd6:	f0 ff 3a    	bra       NZ, 0x1bb8 <.L8>
    1bd8:	a1 c2 b3    	mov.b     #0x2a, w1
    1bda:	81 4f 55    	sub.b     w10, w1, [w15]
    1bdc:	0e 00 3a    	bra       NZ, 0x1bfa <.L9>
    1bde:	cf 88 97    	mov.w     [w15-104], w1
    1be0:	01 80 e9    	dec2.w    w1, w0
    1be2:	c0 8f 9f    	mov.w     w0, [w15-104]
    1be4:	10 00 78    	mov.w     [w0], w0
    1be6:	c0 9f 9f    	mov.w     w0, [w15-72]
    1be8:	00 00 e0    	cp0.w     w0
    1bea:	05 00 3d    	bra       GE, 0x1bf6 <.L10>
    1bec:	00 00 ea    	neg.w     w0, w0
    1bee:	c0 9f 9f    	mov.w     w0, [w15-72]
    1bf0:	5f 98 97    	mov.w     [w15-70], w0
    1bf2:	00 20 a0    	bset.w    w0, #0x2
    1bf4:	d0 9f 9f    	mov.w     w0, [w15-70]

00001bf6 <.L10>:
    1bf6:	09 04 e8    	inc.w     w9, w8
    1bf8:	0f 00 37    	bra       0x1c18 <.L11>

00001bfa <.L9>:
    1bfa:	c0 9f 9f    	mov.w     w0, [w15-72]
    1bfc:	00 00 eb    	clr.w     w0
    1bfe:	05 00 37    	bra       0x1c0a <.L32>

00001c00 <.L14>:
    1c00:	f2 ff 27    	mov.w     #0x7fff, w2
    1c02:	82 0f 50    	sub.w     w0, w2, [w15]
    1c04:	02 00 32    	bra       Z, 0x1c0a <.L32>
    1c06:	6a 01 b9    	mul.su    w0, #0xa, w2
    1c08:	02 80 40    	add.w     w1, w2, w0

00001c0a <.L32>:
    1c0a:	09 04 78    	mov.w     w9, w8
    1c0c:	88 04 78    	mov.w     w8, w9
    1c0e:	b9 00 fb    	se        [w9++], w1
    1c10:	01 03 b1    	sub.w     #0x30, w1
    1c12:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1c14:	f5 ff 36    	bra       LEU, 0x1c00 <.L14>
    1c16:	c0 9f 9f    	mov.w     w0, [w15-72]

00001c18 <.L11>:
    1c18:	e0 c2 b3    	mov.b     #0x2e, w0
    1c1a:	98 4f 10    	subr.b    w0, [w8], [w15]
    1c1c:	02 00 32    	bra       Z, 0x1c22 <.L15>
    1c1e:	00 80 eb    	setm.w    w0
    1c20:	19 00 37    	bra       0x1c54 <.L35>

00001c22 <.L15>:
    1c22:	a0 c2 b3    	mov.b     #0x2a, w0
    1c24:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1c26:	07 00 3a    	bra       NZ, 0x1c36 <.L17>
    1c28:	cf 88 97    	mov.w     [w15-104], w1
    1c2a:	01 80 e9    	dec2.w    w1, w0
    1c2c:	c0 8f 9f    	mov.w     w0, [w15-104]
    1c2e:	10 00 78    	mov.w     [w0], w0
    1c30:	a0 9f 9f    	mov.w     w0, [w15-76]
    1c32:	08 04 e8    	inc.w     w8, w8
    1c34:	10 00 37    	bra       0x1c56 <.L16>

00001c36 <.L17>:
    1c36:	00 00 eb    	clr.w     w0
    1c38:	a0 9f 9f    	mov.w     w0, [w15-76]
    1c3a:	88 00 78    	mov.w     w8, w1
    1c3c:	05 00 37    	bra       0x1c48 <.L33>

00001c3e <.L20>:
    1c3e:	f3 ff 27    	mov.w     #0x7fff, w3
    1c40:	83 0f 50    	sub.w     w0, w3, [w15]
    1c42:	02 00 32    	bra       Z, 0x1c48 <.L33>
    1c44:	6a 02 b9    	mul.su    w0, #0xa, w4
    1c46:	04 00 41    	add.w     w2, w4, w0

00001c48 <.L33>:
    1c48:	01 04 78    	mov.w     w1, w8
    1c4a:	88 00 78    	mov.w     w8, w1
    1c4c:	31 01 fb    	se        [w1++], w2
    1c4e:	02 03 b1    	sub.w     #0x30, w2
    1c50:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1c52:	f5 ff 36    	bra       LEU, 0x1c3e <.L20>

00001c54 <.L35>:
    1c54:	a0 9f 9f    	mov.w     w0, [w15-76]

00001c56 <.L16>:
    1c56:	98 44 78    	mov.b     [w8], w9
    1c58:	89 00 fb    	se        w9, w1
    1c5a:	00 e8 21    	mov.w     #0x1e80, w0
    1c5c:	bd 01 07    	rcall     0x1fd8 <_strchr>
    1c5e:	00 00 e0    	cp0.w     w0
    1c60:	02 00 32    	bra       Z, 0x1c66 <.L25>
    1c62:	08 04 e8    	inc.w     w8, w8
    1c64:	01 00 37    	bra       0x1c68 <.L21>

00001c66 <.L25>:
    1c66:	80 44 eb    	clr.b     w9

00001c68 <.L21>:
    1c68:	c9 7f 9f    	mov.b     w9, [w15-68]
    1c6a:	80 c6 b3    	mov.b     #0x68, w0
    1c6c:	80 cf 54    	sub.b     w9, w0, [w15]
    1c6e:	04 00 3a    	bra       NZ, 0x1c78 <.L22>
    1c70:	98 cf 14    	subr.b    w9, [w8], [w15]
    1c72:	0a 00 3a    	bra       NZ, 0x1c88 <.L23>
    1c74:	66 40 50    	sub.b     w0, #0x6, w0
    1c76:	06 00 37    	bra       0x1c84 <.L36>

00001c78 <.L22>:
    1c78:	c0 c6 b3    	mov.b     #0x6c, w0
    1c7a:	80 cf 54    	sub.b     w9, w0, [w15]
    1c7c:	05 00 3a    	bra       NZ, 0x1c88 <.L23>
    1c7e:	98 cf 14    	subr.b    w9, [w8], [w15]
    1c80:	03 00 3a    	bra       NZ, 0x1c88 <.L23>
    1c82:	65 40 40    	add.b     w0, #0x5, w0

00001c84 <.L36>:
    1c84:	c0 7f 9f    	mov.b     w0, [w15-68]
    1c86:	08 04 e8    	inc.w     w8, w8

00001c88 <.L23>:
    1c88:	18 01 fb    	se        [w8], w2
    1c8a:	e3 fb 2f    	mov.w     #0xffbe, w3
    1c8c:	8f 81 41    	add.w     w3, w15, w3
    1c8e:	81 f9 2f    	mov.w     #0xff98, w1
    1c90:	8f 80 40    	add.w     w1, w15, w1
    1c92:	a0 f9 2f    	mov.w     #0xff9a, w0
    1c94:	0f 00 40    	add.w     w0, w15, w0
    1c96:	10 00 07    	rcall     0x1cb8 <___Putfld_cdnopsuxX>
    1c98:	00 00 e0    	cp0.w     w0
    1c9a:	09 00 3a    	bra       NZ, 0x1cae <.L27>
    1c9c:	e1 fb 2f    	mov.w     #0xffbe, w1
    1c9e:	8f 80 40    	add.w     w1, w15, w1
    1ca0:	a0 f9 2f    	mov.w     #0xff9a, w0
    1ca2:	0f 00 40    	add.w     w0, w15, w0
    1ca4:	21 03 07    	rcall     0x22e8 <__Puttxt>
    1ca6:	00 00 e0    	cp0.w     w0
    1ca8:	02 00 35    	bra       LT, 0x1cae <.L27>
    1caa:	08 04 e8    	inc.w     w8, w8
    1cac:	61 ff 37    	bra       0x1b70 <.L31>

00001cae <.L27>:
    1cae:	00 80 eb    	setm.w    w0

00001cb0 <.L4>:
    1cb0:	4f 05 78    	mov.w     [--w15], w10
    1cb2:	4f 04 be    	mov.d     [--w15], w8
    1cb4:	00 80 fa    	ulnk      
    1cb6:	00 00 06    	return    

00001cb8 <___Putfld_cdnopsuxX>:
    1cb8:	88 9f be    	mov.d     w8, [w15++]
    1cba:	8a 1f 78    	mov.w     w10, [w15++]
    1cbc:	00 04 78    	mov.w     w0, w8
    1cbe:	e0 c6 b3    	mov.b     #0x6e, w0
    1cc0:	80 4f 51    	sub.b     w2, w0, [w15]
    1cc2:	c1 00 32    	bra       Z, 0x1e46 <.L8>
    1cc4:	15 00 3c    	bra       GT, 0x1cf0 <.L10>
    1cc6:	6b 40 50    	sub.b     w0, #0xb, w0
    1cc8:	80 4f 51    	sub.b     w2, w0, [w15]
    1cca:	24 00 32    	bra       Z, 0x1d14 <.L6>
    1ccc:	0a 00 3c    	bra       GT, 0x1ce2 <.L11>
    1cce:	70 40 50    	sub.b     w0, #0x10, w0
    1cd0:	80 4f 51    	sub.b     w2, w0, [w15]
    1cd2:	fa 00 32    	bra       Z, 0x1ec8 <.L4>
    1cd4:	65 40 40    	add.b     w0, #0x5, w0
    1cd6:	80 4f 51    	sub.b     w2, w0, [w15]
    1cd8:	68 00 32    	bra       Z, 0x1daa <.L5>
    1cda:	50 c2 b3    	mov.b     #0x25, w0
    1cdc:	80 4f 51    	sub.b     w2, w0, [w15]
    1cde:	0b 01 3a    	bra       NZ, 0x1ef6 <.L2>
    1ce0:	07 01 37    	bra       0x1ef0 <.L57>

00001ce2 <.L11>:
    1ce2:	40 c6 b3    	mov.b     #0x64, w0
    1ce4:	80 4f 51    	sub.b     w2, w0, [w15]
    1ce6:	1b 00 32    	bra       Z, 0x1d1e <.L7>
    1ce8:	65 40 40    	add.b     w0, #0x5, w0
    1cea:	80 4f 51    	sub.b     w2, w0, [w15]
    1cec:	04 01 3a    	bra       NZ, 0x1ef6 <.L2>
    1cee:	17 00 37    	bra       0x1d1e <.L7>

00001cf0 <.L10>:
    1cf0:	30 c7 b3    	mov.b     #0x73, w0
    1cf2:	80 4f 51    	sub.b     w2, w0, [w15]
    1cf4:	e9 00 32    	bra       Z, 0x1ec8 <.L4>
    1cf6:	07 00 3c    	bra       GT, 0x1d06 <.L12>
    1cf8:	64 40 50    	sub.b     w0, #0x4, w0
    1cfa:	80 4f 51    	sub.b     w2, w0, [w15]
    1cfc:	56 00 32    	bra       Z, 0x1daa <.L5>
    1cfe:	00 40 e8    	inc.b     w0, w0
    1d00:	80 4f 51    	sub.b     w2, w0, [w15]
    1d02:	f9 00 3a    	bra       NZ, 0x1ef6 <.L2>
    1d04:	d3 00 37    	bra       0x1eac <.L58>

00001d06 <.L12>:
    1d06:	50 c7 b3    	mov.b     #0x75, w0
    1d08:	80 4f 51    	sub.b     w2, w0, [w15]
    1d0a:	4f 00 32    	bra       Z, 0x1daa <.L5>
    1d0c:	63 40 40    	add.b     w0, #0x3, w0
    1d0e:	80 4f 51    	sub.b     w2, w0, [w15]
    1d10:	f2 00 3a    	bra       NZ, 0x1ef6 <.L2>
    1d12:	4b 00 37    	bra       0x1daa <.L5>

00001d14 <.L6>:
    1d14:	11 81 e9    	dec2.w    [w1], w2
    1d16:	82 08 78    	mov.w     w2, [w1]
    1d18:	78 00 90    	mov.w     [w8+14], w0
    1d1a:	12 41 78    	mov.b     [w2], w2
    1d1c:	ea 00 37    	bra       0x1ef2 <.L55>

00001d1e <.L7>:
    1d1e:	28 60 90    	mov.b     [w8+34], w0
    1d20:	c4 c6 b3    	mov.b     #0x6c, w4
    1d22:	84 4f 50    	sub.b     w0, w4, [w15]
    1d24:	07 00 3a    	bra       NZ, 0x1d34 <.L14>
    1d26:	11 02 78    	mov.w     [w1], w4
    1d28:	64 00 52    	sub.w     w4, #0x4, w0
    1d2a:	80 08 78    	mov.w     w0, [w1]
    1d2c:	10 02 be    	mov.d     [w0], w4
    1d2e:	4f ab de    	asr.w     w5, #0xf, w6
    1d30:	86 03 78    	mov.w     w6, w7
    1d32:	11 00 37    	bra       0x1d56 <.L15>

00001d34 <.L14>:
    1d34:	14 c7 b3    	mov.b     #0x71, w4
    1d36:	84 4f 50    	sub.b     w0, w4, [w15]
    1d38:	03 00 32    	bra       Z, 0x1d40 <.L47>
    1d3a:	a4 c6 b3    	mov.b     #0x6a, w4
    1d3c:	84 4f 50    	sub.b     w0, w4, [w15]
    1d3e:	06 00 3a    	bra       NZ, 0x1d4c <.L17>

00001d40 <.L47>:
    1d40:	11 02 78    	mov.w     [w1], w4
    1d42:	68 00 52    	sub.w     w4, #0x8, w0
    1d44:	80 08 78    	mov.w     w0, [w1]
    1d46:	30 02 be    	mov.d     [w0++], w4
    1d48:	20 03 be    	mov.d     [w0--], w6
    1d4a:	05 00 37    	bra       0x1d56 <.L15>

00001d4c <.L17>:
    1d4c:	11 80 e9    	dec2.w    [w1], w0
    1d4e:	80 08 78    	mov.w     w0, [w1]
    1d50:	10 02 78    	mov.w     [w0], w4
    1d52:	cf a2 de    	asr.w     w4, #0xf, w5
    1d54:	61 2b b9    	mul.su    w5, #0x1, w6

00001d56 <.L15>:
    1d56:	04 9c be    	mov.d     w4, [w8++]
    1d58:	06 94 be    	mov.d     w6, [w8--]
    1d5a:	28 60 90    	mov.b     [w8+34], w0
    1d5c:	81 c6 b3    	mov.b     #0x68, w1
    1d5e:	81 4f 50    	sub.b     w0, w1, [w15]
    1d60:	0d 00 32    	bra       Z, 0x1d7c <.L21>
    1d62:	21 c6 b3    	mov.b     #0x62, w1
    1d64:	81 4f 50    	sub.b     w0, w1, [w15]
    1d66:	04 00 3a    	bra       NZ, 0x1d70 <.L20>
    1d68:	04 02 fb    	se        w4, w4
    1d6a:	cf a2 de    	asr.w     w4, #0xf, w5
    1d6c:	61 2b b9    	mul.su    w5, #0x1, w6
    1d6e:	08 00 37    	bra       0x1d80 <.L48>

00001d70 <.L20>:
    1d70:	41 c7 b3    	mov.b     #0x74, w1
    1d72:	81 4f 50    	sub.b     w0, w1, [w15]
    1d74:	03 00 32    	bra       Z, 0x1d7c <.L21>
    1d76:	e6 c0 40    	add.b     w1, #0x6, w1
    1d78:	81 4f 50    	sub.b     w0, w1, [w15]
    1d7a:	04 00 3a    	bra       NZ, 0x1d84 <.L19>

00001d7c <.L21>:
    1d7c:	cf a2 de    	asr.w     w4, #0xf, w5
    1d7e:	61 2b b9    	mul.su    w5, #0x1, w6

00001d80 <.L48>:
    1d80:	04 9c be    	mov.d     w4, [w8++]
    1d82:	06 94 be    	mov.d     w6, [w8--]

00001d84 <.L19>:
    1d84:	38 02 be    	mov.d     [w8++], w4
    1d86:	28 03 be    	mov.d     [w8--], w6
    1d88:	78 00 90    	mov.w     [w8+14], w0
    1d8a:	d1 c2 b3    	mov.b     #0x2d, w1
    1d8c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1d8e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1d90:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1d92:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1d94:	08 00 35    	bra       LT, 0x1da6 <.L49>
    1d96:	88 10 90    	mov.w     [w8+32], w1
    1d98:	01 18 a3    	btst.z    w1, #0x1
    1d9a:	02 00 32    	bra       Z, 0x1da0 <.L24>
    1d9c:	b1 c2 b3    	mov.b     #0x2b, w1
    1d9e:	03 00 37    	bra       0x1da6 <.L49>

00001da0 <.L24>:
    1da0:	01 08 a3    	btst.z    w1, #0x0
    1da2:	4c 00 32    	bra       Z, 0x1e3c <.L33>
    1da4:	01 c2 b3    	mov.b     #0x20, w1

00001da6 <.L49>:
    1da6:	81 71 78    	mov.b     w1, [w3+w0]
    1da8:	47 00 37    	bra       0x1e38 <.L56>

00001daa <.L5>:
    1daa:	28 60 90    	mov.b     [w8+34], w0
    1dac:	c4 c6 b3    	mov.b     #0x6c, w4
    1dae:	84 4f 50    	sub.b     w0, w4, [w15]
    1db0:	06 00 3a    	bra       NZ, 0x1dbe <.L25>
    1db2:	11 02 78    	mov.w     [w1], w4
    1db4:	64 00 52    	sub.w     w4, #0x4, w0
    1db6:	80 08 78    	mov.w     w0, [w1]
    1db8:	10 02 be    	mov.d     [w0], w4
    1dba:	60 33 b8    	mul.uu    w6, #0x0, w6
    1dbc:	11 00 37    	bra       0x1de0 <.L26>

00001dbe <.L25>:
    1dbe:	14 c7 b3    	mov.b     #0x71, w4
    1dc0:	84 4f 50    	sub.b     w0, w4, [w15]
    1dc2:	03 00 32    	bra       Z, 0x1dca <.L50>
    1dc4:	a4 c6 b3    	mov.b     #0x6a, w4
    1dc6:	84 4f 50    	sub.b     w0, w4, [w15]
    1dc8:	06 00 3a    	bra       NZ, 0x1dd6 <.L28>

00001dca <.L50>:
    1dca:	11 02 78    	mov.w     [w1], w4
    1dcc:	68 00 52    	sub.w     w4, #0x8, w0
    1dce:	80 08 78    	mov.w     w0, [w1]
    1dd0:	30 02 be    	mov.d     [w0++], w4
    1dd2:	20 03 be    	mov.d     [w0--], w6
    1dd4:	05 00 37    	bra       0x1de0 <.L26>

00001dd6 <.L28>:
    1dd6:	11 80 e9    	dec2.w    [w1], w0
    1dd8:	80 08 78    	mov.w     w0, [w1]
    1dda:	10 02 78    	mov.w     [w0], w4
    1ddc:	80 02 eb    	clr.w     w5
    1dde:	60 33 b8    	mul.uu    w6, #0x0, w6

00001de0 <.L26>:
    1de0:	04 9c be    	mov.d     w4, [w8++]
    1de2:	06 94 be    	mov.d     w6, [w8--]
    1de4:	28 60 90    	mov.b     [w8+34], w0
    1de6:	81 c6 b3    	mov.b     #0x68, w1
    1de8:	81 4f 50    	sub.b     w0, w1, [w15]
    1dea:	0d 00 32    	bra       Z, 0x1e06 <.L32>
    1dec:	21 c6 b3    	mov.b     #0x62, w1
    1dee:	81 4f 50    	sub.b     w0, w1, [w15]
    1df0:	04 00 3a    	bra       NZ, 0x1dfa <.L31>
    1df2:	04 82 fb    	ze        w4, w4
    1df4:	80 02 eb    	clr.w     w5
    1df6:	60 33 b8    	mul.uu    w6, #0x0, w6
    1df8:	08 00 37    	bra       0x1e0a <.L51>

00001dfa <.L31>:
    1dfa:	41 c7 b3    	mov.b     #0x74, w1
    1dfc:	81 4f 50    	sub.b     w0, w1, [w15]
    1dfe:	03 00 32    	bra       Z, 0x1e06 <.L32>
    1e00:	e6 c0 40    	add.b     w1, #0x6, w1
    1e02:	81 4f 50    	sub.b     w0, w1, [w15]
    1e04:	04 00 3a    	bra       NZ, 0x1e0e <.L30>

00001e06 <.L32>:
    1e06:	80 02 eb    	clr.w     w5
    1e08:	60 33 b8    	mul.uu    w6, #0x0, w6

00001e0a <.L51>:
    1e0a:	04 9c be    	mov.d     w4, [w8++]
    1e0c:	06 94 be    	mov.d     w6, [w8--]

00001e0e <.L30>:
    1e0e:	08 10 90    	mov.w     [w8+32], w0
    1e10:	00 38 a3    	btst.z    w0, #0x3
    1e12:	14 00 32    	bra       Z, 0x1e3c <.L33>
    1e14:	38 02 be    	mov.d     [w8++], w4
    1e16:	28 03 be    	mov.d     [w8--], w6
    1e18:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1e1a:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1e1c:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1e1e:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1e20:	0d 00 32    	bra       Z, 0x1e3c <.L33>
    1e22:	80 c7 b3    	mov.b     #0x78, w0
    1e24:	80 4f 51    	sub.b     w2, w0, [w15]
    1e26:	03 00 32    	bra       Z, 0x1e2e <.L34>
    1e28:	80 c5 b3    	mov.b     #0x58, w0
    1e2a:	80 4f 51    	sub.b     w2, w0, [w15]
    1e2c:	07 00 3a    	bra       NZ, 0x1e3c <.L33>

00001e2e <.L34>:
    1e2e:	78 00 90    	mov.w     [w8+14], w0
    1e30:	01 c3 b3    	mov.b     #0x30, w1
    1e32:	81 71 78    	mov.b     w1, [w3+w0]
    1e34:	00 00 e8    	inc.w     w0, w0
    1e36:	82 71 78    	mov.b     w2, [w3+w0]

00001e38 <.L56>:
    1e38:	00 00 e8    	inc.w     w0, w0
    1e3a:	70 04 98    	mov.w     w0, [w8+14]

00001e3c <.L33>:
    1e3c:	78 00 90    	mov.w     [w8+14], w0
    1e3e:	80 81 41    	add.w     w3, w0, w3
    1e40:	63 04 98    	mov.w     w3, [w8+12]
    1e42:	82 40 78    	mov.b     w2, w1
    1e44:	3e 00 37    	bra       0x1ec2 <.L54>

00001e46 <.L8>:
    1e46:	28 61 90    	mov.b     [w8+34], w2
    1e48:	c3 c6 b3    	mov.b     #0x6c, w3
    1e4a:	11 80 e9    	dec2.w    [w1], w0
    1e4c:	83 4f 51    	sub.b     w2, w3, [w15]
    1e4e:	22 00 32    	bra       Z, 0x1e94 <.L39>
    1e50:	0a 00 3c    	bra       GT, 0x1e66 <.L43>
    1e52:	e4 c1 51    	sub.b     w3, #0x4, w3
    1e54:	83 4f 51    	sub.b     w2, w3, [w15]
    1e56:	25 00 32    	bra       Z, 0x1ea2 <.L53>
    1e58:	83 c1 e8    	inc2.b    w3, w3
    1e5a:	83 4f 51    	sub.b     w2, w3, [w15]
    1e5c:	13 00 32    	bra       Z, 0x1e84 <.L38>
    1e5e:	e8 c1 51    	sub.b     w3, #0x8, w3
    1e60:	83 4f 51    	sub.b     w2, w3, [w15]
    1e62:	1e 00 3a    	bra       NZ, 0x1ea0 <.L35>
    1e64:	0a 00 37    	bra       0x1e7a <.L59>

00001e66 <.L43>:
    1e66:	43 c7 b3    	mov.b     #0x74, w3
    1e68:	83 4f 51    	sub.b     w2, w3, [w15]
    1e6a:	1b 00 32    	bra       Z, 0x1ea2 <.L53>
    1e6c:	e6 c1 41    	add.b     w3, #0x6, w3
    1e6e:	83 4f 51    	sub.b     w2, w3, [w15]
    1e70:	18 00 32    	bra       Z, 0x1ea2 <.L53>
    1e72:	e9 c1 51    	sub.b     w3, #0x9, w3
    1e74:	83 4f 51    	sub.b     w2, w3, [w15]
    1e76:	14 00 3a    	bra       NZ, 0x1ea0 <.L35>
    1e78:	05 00 37    	bra       0x1e84 <.L38>

00001e7a <.L59>:
    1e7a:	80 08 78    	mov.w     w0, [w1]
    1e7c:	10 00 78    	mov.w     [w0], w0
    1e7e:	48 5c 90    	mov.b     [w8+28], w8
    1e80:	08 48 78    	mov.b     w8, [w0]
    1e82:	41 00 37    	bra       0x1f06 <.L13>

00001e84 <.L38>:
    1e84:	80 08 78    	mov.w     w0, [w1]
    1e86:	10 00 78    	mov.w     [w0], w0
    1e88:	68 0a 90    	mov.w     [w8+28], w4
    1e8a:	cf a2 de    	asr.w     w4, #0xf, w5
    1e8c:	61 2b b9    	mul.su    w5, #0x1, w6
    1e8e:	04 98 be    	mov.d     w4, [w0++]
    1e90:	06 90 be    	mov.d     w6, [w0--]
    1e92:	39 00 37    	bra       0x1f06 <.L13>

00001e94 <.L39>:
    1e94:	80 08 78    	mov.w     w0, [w1]
    1e96:	10 00 78    	mov.w     [w0], w0
    1e98:	68 09 90    	mov.w     [w8+28], w2
    1e9a:	cf 91 de    	asr.w     w2, #0xf, w3
    1e9c:	02 88 be    	mov.d     w2, [w0]
    1e9e:	33 00 37    	bra       0x1f06 <.L13>

00001ea0 <.L35>:
    1ea0:	11 80 e9    	dec2.w    [w1], w0

00001ea2 <.L53>:
    1ea2:	80 08 78    	mov.w     w0, [w1]
    1ea4:	10 00 78    	mov.w     [w0], w0
    1ea6:	68 0c 90    	mov.w     [w8+28], w8
    1ea8:	08 08 78    	mov.w     w8, [w0]
    1eaa:	2d 00 37    	bra       0x1f06 <.L13>

00001eac <.L58>:
    1eac:	11 80 e9    	dec2.w    [w1], w0
    1eae:	80 08 78    	mov.w     w0, [w1]
    1eb0:	10 02 78    	mov.w     [w0], w4
    1eb2:	cf a2 de    	asr.w     w4, #0xf, w5
    1eb4:	61 2b b9    	mul.su    w5, #0x1, w6
    1eb6:	04 9c be    	mov.d     w4, [w8++]
    1eb8:	06 94 be    	mov.d     w6, [w8--]
    1eba:	78 00 90    	mov.w     [w8+14], w0
    1ebc:	80 81 41    	add.w     w3, w0, w3
    1ebe:	63 04 98    	mov.w     w3, [w8+12]
    1ec0:	81 c7 b3    	mov.b     #0x78, w1

00001ec2 <.L54>:
    1ec2:	08 00 78    	mov.w     w8, w0
    1ec4:	e2 00 07    	rcall     0x208a <__Litob>
    1ec6:	1f 00 37    	bra       0x1f06 <.L13>

00001ec8 <.L4>:
    1ec8:	11 80 e9    	dec2.w    [w1], w0
    1eca:	80 08 78    	mov.w     w0, [w1]
    1ecc:	10 05 78    	mov.w     [w0], w10
    1ece:	6a 04 98    	mov.w     w10, [w8+12]
    1ed0:	d8 0c 90    	mov.w     [w8+26], w9
    1ed2:	09 00 e0    	cp0.w     w9
    1ed4:	04 00 3d    	bra       GE, 0x1ede <.L44>
    1ed6:	0a 00 78    	mov.w     w10, w0
    1ed8:	8b 00 07    	rcall     0x1ff0 <_strlen>
    1eda:	80 04 78    	mov.w     w0, w9
    1edc:	07 00 37    	bra       0x1eec <.L45>

00001ede <.L44>:
    1ede:	09 01 78    	mov.w     w9, w2
    1ee0:	80 00 eb    	clr.w     w1
    1ee2:	0a 00 78    	mov.w     w10, w0
    1ee4:	68 00 07    	rcall     0x1fb6 <_memchr>
    1ee6:	00 00 e0    	cp0.w     w0
    1ee8:	01 00 32    	bra       Z, 0x1eec <.L45>
    1eea:	8a 04 50    	sub.w     w0, w10, w9

00001eec <.L45>:
    1eec:	19 0c 98    	mov.w     w9, [w8+18]
    1eee:	0b 00 37    	bra       0x1f06 <.L13>

00001ef0 <.L57>:
    1ef0:	78 00 90    	mov.w     [w8+14], w0

00001ef2 <.L55>:
    1ef2:	82 71 78    	mov.b     w2, [w3+w0]
    1ef4:	06 00 37    	bra       0x1f02 <.L52>

00001ef6 <.L2>:
    1ef6:	78 00 90    	mov.w     [w8+14], w0
    1ef8:	80 81 41    	add.w     w3, w0, w3
    1efa:	02 04 e0    	cp0.b     w2
    1efc:	01 00 3a    	bra       NZ, 0x1f00 <.L46>
    1efe:	52 c2 b3    	mov.b     #0x25, w2

00001f00 <.L46>:
    1f00:	82 49 78    	mov.b     w2, [w3]

00001f02 <.L52>:
    1f02:	00 00 e8    	inc.w     w0, w0
    1f04:	70 04 98    	mov.w     w0, [w8+14]

00001f06 <.L13>:
    1f06:	00 00 eb    	clr.w     w0
    1f08:	4f 05 78    	mov.w     [--w15], w10
    1f0a:	4f 04 be    	mov.d     [--w15], w8
    1f0c:	00 00 06    	return    

00001f0e <_fwrite>:
    1f0e:	88 9f be    	mov.d     w8, [w15++]
    1f10:	8a 9f be    	mov.d     w10, [w15++]
    1f12:	8c 9f be    	mov.d     w12, [w15++]
    1f14:	8e 1f 78    	mov.w     w14, [w15++]
    1f16:	00 06 78    	mov.w     w0, w12
    1f18:	01 04 78    	mov.w     w1, w8
    1f1a:	02 00 78    	mov.w     w2, w0
    1f1c:	83 04 78    	mov.w     w3, w9
    1f1e:	08 81 b9    	mul.ss    w0, w8, w2
    1f20:	02 07 78    	mov.w     w2, w14
    1f22:	02 00 e0    	cp0.w     w2
    1f24:	42 00 32    	bra       Z, 0x1faa <.L11>
    1f26:	08 00 e0    	cp0.w     w8
    1f28:	41 00 32    	bra       Z, 0x1fac <.L2>
    1f2a:	82 05 78    	mov.w     w2, w11

00001f2c <.L8>:
    1f2c:	c9 00 90    	mov.w     [w9+8], w1
    1f2e:	69 00 90    	mov.w     [w9+12], w0
    1f30:	80 8f 50    	sub.w     w1, w0, [w15]
    1f32:	04 00 39    	bra       NC, 0x1f3c <.L3>
    1f34:	09 00 78    	mov.w     w9, w0
    1f36:	62 00 07    	rcall     0x1ffc <__Fwprep>
    1f38:	00 00 e0    	cp0.w     w0
    1f3a:	29 00 35    	bra       LT, 0x1f8e <.L4>

00001f3c <.L3>:
    1f3c:	00 40 20    	mov.w     #0x400, w0
    1f3e:	19 00 60    	and.w     w0, [w9], w0
    1f40:	0a 00 32    	bra       Z, 0x1f56 <.L12>
    1f42:	0b 01 78    	mov.w     w11, w2
    1f44:	a1 00 20    	mov.w     #0xa, w1
    1f46:	0c 00 78    	mov.w     w12, w0
    1f48:	36 00 07    	rcall     0x1fb6 <_memchr>
    1f4a:	80 06 78    	mov.w     w0, w13
    1f4c:	0d 00 e0    	cp0.w     w13
    1f4e:	06 00 32    	bra       Z, 0x1f5c <.L13>
    1f50:	61 05 16    	subr.w    w12, #0x1, w10
    1f52:	0a 85 46    	add.w     w13, w10, w10
    1f54:	04 00 37    	bra       0x1f5e <.L5>

00001f56 <.L12>:
    1f56:	0b 05 78    	mov.w     w11, w10
    1f58:	80 06 eb    	clr.w     w13
    1f5a:	01 00 37    	bra       0x1f5e <.L5>

00001f5c <.L13>:
    1f5c:	0b 05 78    	mov.w     w11, w10

00001f5e <.L5>:
    1f5e:	49 00 90    	mov.w     [w9+8], w0
    1f60:	e9 00 90    	mov.w     [w9+12], w1
    1f62:	80 80 50    	sub.w     w1, w0, w1
    1f64:	8a 8f 50    	sub.w     w1, w10, [w15]
    1f66:	02 00 31    	bra       C, 0x1f6c <.L6>
    1f68:	01 05 78    	mov.w     w1, w10
    1f6a:	80 06 eb    	clr.w     w13

00001f6c <.L6>:
    1f6c:	0a 01 78    	mov.w     w10, w2
    1f6e:	8c 00 78    	mov.w     w12, w1
    1f70:	2c 00 07    	rcall     0x1fca <_memcpy>
    1f72:	8a 85 55    	sub.w     w11, w10, w11
    1f74:	49 00 90    	mov.w     [w9+8], w0
    1f76:	0a 00 40    	add.w     w0, w10, w0
    1f78:	c0 04 98    	mov.w     w0, [w9+8]
    1f7a:	0d 00 e0    	cp0.w     w13
    1f7c:	04 00 32    	bra       Z, 0x1f86 <.L7>
    1f7e:	09 00 78    	mov.w     w9, w0
    1f80:	d4 02 07    	rcall     0x252a <__DNKfflush>
    1f82:	00 00 e0    	cp0.w     w0
    1f84:	04 00 3a    	bra       NZ, 0x1f8e <.L4>

00001f86 <.L7>:
    1f86:	0b 00 e0    	cp0.w     w11
    1f88:	02 00 32    	bra       Z, 0x1f8e <.L4>
    1f8a:	0a 06 46    	add.w     w12, w10, w12
    1f8c:	cf ff 37    	bra       0x1f2c <.L8>

00001f8e <.L4>:
    1f8e:	00 80 20    	mov.w     #0x800, w0
    1f90:	19 00 60    	and.w     w0, [w9], w0
    1f92:	02 00 32    	bra       Z, 0x1f98 <.L9>
    1f94:	09 00 78    	mov.w     w9, w0
    1f96:	c9 02 07    	rcall     0x252a <__DNKfflush>

00001f98 <.L9>:
    1f98:	00 c0 20    	mov.w     #0xc00, w0
    1f9a:	19 00 60    	and.w     w0, [w9], w0
    1f9c:	02 00 32    	bra       Z, 0x1fa2 <.L10>
    1f9e:	49 00 90    	mov.w     [w9+8], w0
    1fa0:	e0 04 98    	mov.w     w0, [w9+12]

00001fa2 <.L10>:
    1fa2:	8b 05 57    	sub.w     w14, w11, w11
    1fa4:	11 00 09    	repeat    #0x11
    1fa6:	88 85 d8    	div.uw    w11, w8
    1fa8:	01 00 37    	bra       0x1fac <.L2>

00001faa <.L11>:
    1faa:	00 00 eb    	clr.w     w0

00001fac <.L2>:
    1fac:	4f 07 78    	mov.w     [--w15], w14
    1fae:	4f 06 be    	mov.d     [--w15], w12
    1fb0:	4f 05 be    	mov.d     [--w15], w10
    1fb2:	4f 04 be    	mov.d     [--w15], w8
    1fb4:	00 00 06    	return    

00001fb6 <_memchr>:
    1fb6:	03 00 37    	bra       0x1fbe <.L2>

00001fb8 <.L4>:
    1fb8:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    1fba:	05 00 32    	bra       Z, 0x1fc6 <.L5>
    1fbc:	02 01 e9    	dec.w     w2, w2

00001fbe <.L2>:
    1fbe:	80 01 78    	mov.w     w0, w3
    1fc0:	02 00 e0    	cp0.w     w2
    1fc2:	fa ff 3a    	bra       NZ, 0x1fb8 <.L4>
    1fc4:	00 00 05    	retlw.w   #0x0, w0

00001fc6 <.L5>:
    1fc6:	03 00 78    	mov.w     w3, w0
    1fc8:	00 00 06    	return    

00001fca <_memcpy>:
    1fca:	80 01 78    	mov.w     w0, w3
    1fcc:	02 00 37    	bra       0x1fd2 <.L2>

00001fce <.L3>:
    1fce:	b1 59 78    	mov.b     [w1++], [w3++]
    1fd0:	02 01 e9    	dec.w     w2, w2

00001fd2 <.L2>:
    1fd2:	02 00 e0    	cp0.w     w2
    1fd4:	fc ff 3a    	bra       NZ, 0x1fce <.L3>
    1fd6:	00 00 06    	return    

00001fd8 <_strchr>:
    1fd8:	02 00 37    	bra       0x1fde <.L2>

00001fda <.L4>:
    1fda:	03 04 e0    	cp0.b     w3
    1fdc:	06 00 32    	bra       Z, 0x1fea <.L5>

00001fde <.L2>:
    1fde:	00 01 78    	mov.w     w0, w2
    1fe0:	02 00 78    	mov.w     w2, w0
    1fe2:	b0 41 78    	mov.b     [w0++], w3
    1fe4:	81 cf 51    	sub.b     w3, w1, [w15]
    1fe6:	f9 ff 3a    	bra       NZ, 0x1fda <.L4>
    1fe8:	01 00 37    	bra       0x1fec <.L3>

00001fea <.L5>:
    1fea:	00 01 eb    	clr.w     w2

00001fec <.L3>:
    1fec:	02 00 78    	mov.w     w2, w0
    1fee:	00 00 06    	return    

00001ff0 <_strlen>:
    1ff0:	80 00 78    	mov.w     w0, w1

00001ff2 <.L2>:
    1ff2:	01 01 78    	mov.w     w1, w2
    1ff4:	31 04 e0    	cp0.b     [w1++]
    1ff6:	fd ff 3a    	bra       NZ, 0x1ff2 <.L2>
    1ff8:	00 00 51    	sub.w     w2, w0, w0
    1ffa:	00 00 06    	return    

00001ffc <__Fwprep>:
    1ffc:	88 9f be    	mov.d     w8, [w15++]
    1ffe:	8a 1f 78    	mov.w     w10, [w15++]
    2000:	00 04 78    	mov.w     w0, w8
    2002:	c8 00 90    	mov.w     [w8+8], w1
    2004:	68 01 90    	mov.w     [w8+12], w2
    2006:	00 00 eb    	clr.w     w0
    2008:	82 8f 50    	sub.w     w1, w2, [w15]
    200a:	3c 00 39    	bra       NC, 0x2084 <.L2>
    200c:	18 00 78    	mov.w     [w8], w0
    200e:	22 00 29    	mov.w     #0x9002, w2
    2010:	02 01 60    	and.w     w0, w2, w2
    2012:	e2 0f 51    	sub.w     w2, #0x2, [w15]
    2014:	07 00 32    	bra       Z, 0x2024 <.L3>
    2016:	01 20 24    	mov.w     #0x4200, w1
    2018:	00 00 e0    	cp0.w     w0
    201a:	01 00 3d    	bra       GE, 0x201e <.L4>
    201c:	01 20 20    	mov.w     #0x200, w1

0000201e <.L4>:
    201e:	00 8c 70    	ior.w     w1, w0, [w8]
    2020:	00 80 eb    	setm.w    w0
    2022:	30 00 37    	bra       0x2084 <.L2>

00002024 <.L3>:
    2024:	02 00 26    	mov.w     #0x6000, w2
    2026:	02 00 60    	and.w     w0, w2, w0
    2028:	82 0f 50    	sub.w     w0, w2, [w15]
    202a:	09 00 3a    	bra       NZ, 0x203e <.L5>
    202c:	38 00 90    	mov.w     [w8+6], w0
    202e:	80 8f 50    	sub.w     w1, w0, [w15]
    2030:	06 00 39    	bra       NC, 0x203e <.L5>
    2032:	08 00 78    	mov.w     w8, w0
    2034:	7a 02 07    	rcall     0x252a <__DNKfflush>
    2036:	80 00 78    	mov.w     w0, w1
    2038:	00 80 eb    	setm.w    w0
    203a:	01 00 e0    	cp0.w     w1
    203c:	23 00 3a    	bra       NZ, 0x2084 <.L2>

0000203e <.L5>:
    203e:	18 05 78    	mov.w     [w8], w10
    2040:	00 c0 20    	mov.w     #0xc00, w0
    2042:	00 00 65    	and.w     w10, w0, w0
    2044:	18 00 3a    	bra       NZ, 0x2076 <.L6>
    2046:	a8 04 90    	mov.w     [w8+4], w9
    2048:	60 02 20    	mov.w     #0x26, w0
    204a:	08 00 40    	add.w     w0, w8, w0
    204c:	80 8f 54    	sub.w     w9, w0, [w15]
    204e:	13 00 3a    	bra       NZ, 0x2076 <.L6>
    2050:	00 20 20    	mov.w     #0x200, w0
    2052:	16 03 07    	rcall     0x2680 <_malloc>
    2054:	20 04 98    	mov.w     w0, [w8+4]
    2056:	00 00 e0    	cp0.w     w0
    2058:	05 00 3a    	bra       NZ, 0x2064 <.L7>
    205a:	29 04 98    	mov.w     w9, [w8+4]
    205c:	49 04 98    	mov.w     w9, [w8+8]
    205e:	89 04 e8    	inc.w     w9, w9
    2060:	39 04 98    	mov.w     w9, [w8+6]
    2062:	08 00 37    	bra       0x2074 <.L11>

00002064 <.L7>:
    2064:	0a 60 a0    	bset.w    w10, #0x6
    2066:	0a 0c 78    	mov.w     w10, [w8]
    2068:	40 04 98    	mov.w     w0, [w8+8]
    206a:	01 20 20    	mov.w     #0x200, w1
    206c:	80 80 40    	add.w     w1, w0, w1
    206e:	31 04 98    	mov.w     w1, [w8+6]
    2070:	40 0c 98    	mov.w     w0, [w8+24]
    2072:	50 0c 98    	mov.w     w0, [w8+26]

00002074 <.L11>:
    2074:	f9 01 07    	rcall     0x2468 <__Closreg>

00002076 <.L6>:
    2076:	28 00 90    	mov.w     [w8+4], w0
    2078:	50 04 98    	mov.w     w0, [w8+10]
    207a:	38 00 90    	mov.w     [w8+6], w0
    207c:	60 04 98    	mov.w     w0, [w8+12]
    207e:	00 00 26    	mov.w     #0x6000, w0
    2080:	18 0c 70    	ior.w     w0, [w8], [w8]
    2082:	00 00 eb    	clr.w     w0

00002084 <.L2>:
    2084:	4f 05 78    	mov.w     [--w15], w10
    2086:	4f 04 be    	mov.d     [--w15], w8
    2088:	00 00 06    	return    

0000208a <__Litob>:
    208a:	fc 87 47    	add.w     w15, #0x1c, w15
    208c:	88 9f be    	mov.d     w8, [w15++]
    208e:	8a 9f be    	mov.d     w10, [w15++]
    2090:	8c 9f be    	mov.d     w12, [w15++]
    2092:	8e 1f 78    	mov.w     w14, [w15++]
    2094:	00 06 78    	mov.w     w0, w12
    2096:	80 c5 b3    	mov.b     #0x58, w0
    2098:	80 cf 50    	sub.b     w1, w0, [w15]
    209a:	0a 00 32    	bra       Z, 0x20b0 <.L35>
    209c:	77 40 40    	add.b     w0, #0x17, w0
    209e:	80 cf 50    	sub.b     w1, w0, [w15]
    20a0:	0a 00 32    	bra       Z, 0x20b6 <.L36>
    20a2:	69 40 40    	add.b     w0, #0x9, w0
    20a4:	80 cf 50    	sub.b     w1, w0, [w15]
    20a6:	0b 00 32    	bra       Z, 0x20be <.L37>
    20a8:	50 dd 21    	mov.w     #0x1dd5, w0
    20aa:	80 bf 9f    	mov.w     w0, [w15-16]
    20ac:	ae 00 20    	mov.w     #0xa, w14
    20ae:	0a 00 37    	bra       0x20c4 <.L2>

000020b0 <.L35>:
    20b0:	42 dc 21    	mov.w     #0x1dc4, w2
    20b2:	82 bf 9f    	mov.w     w2, [w15-16]
    20b4:	06 00 37    	bra       0x20c2 <.L46>

000020b6 <.L36>:
    20b6:	53 dd 21    	mov.w     #0x1dd5, w3
    20b8:	83 bf 9f    	mov.w     w3, [w15-16]
    20ba:	8e 00 20    	mov.w     #0x8, w14
    20bc:	03 00 37    	bra       0x20c4 <.L2>

000020be <.L37>:
    20be:	54 dd 21    	mov.w     #0x1dd5, w4
    20c0:	84 bf 9f    	mov.w     w4, [w15-16]

000020c2 <.L46>:
    20c2:	0e 01 20    	mov.w     #0x10, w14

000020c4 <.L2>:
    20c4:	3c 02 be    	mov.d     [w12++], w4
    20c6:	2c 03 be    	mov.d     [w12--], w6
    20c8:	06 05 be    	mov.d     w6, w10
    20ca:	04 04 be    	mov.d     w4, w8
    20cc:	40 c6 b3    	mov.b     #0x64, w0
    20ce:	80 cf 50    	sub.b     w1, w0, [w15]
    20d0:	03 00 32    	bra       Z, 0x20d8 <.L3>
    20d2:	65 40 40    	add.b     w0, #0x5, w0
    20d4:	80 cf 50    	sub.b     w1, w0, [w15]
    20d6:	0b 00 3a    	bra       NZ, 0x20ee <.L4>

000020d8 <.L3>:
    20d8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    20da:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    20dc:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    20de:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    20e0:	06 00 3d    	bra       GE, 0x20ee <.L4>
    20e2:	60 00 b8    	mul.uu    w0, #0x0, w0
    20e4:	60 11 b8    	mul.uu    w2, #0x0, w2
    20e6:	04 04 50    	sub.w     w0, w4, w8
    20e8:	85 84 58    	subb.w    w1, w5, w9
    20ea:	06 05 59    	subb.w    w2, w6, w10
    20ec:	87 85 59    	subb.w    w3, w7, w11

000020ee <.L4>:
    20ee:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    20f0:	04 00 32    	bra       Z, 0x20fa <.L38>
    20f2:	40 00 20    	mov.w     #0x4, w0
    20f4:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    20f6:	38 00 3a    	bra       NZ, 0x2168 <.L51>
    20f8:	01 00 37    	bra       0x20fc <.L6>

000020fa <.L38>:
    20fa:	30 00 20    	mov.w     #0x3, w0

000020fc <.L6>:
    20fc:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    20fe:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    2100:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    2102:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    2104:	04 00 3a    	bra       NZ, 0x210e <.L8>
    2106:	dc 08 90    	mov.w     [w12+26], w1
    2108:	8d 01 20    	mov.w     #0x18, w13
    210a:	01 00 e0    	cp0.w     w1
    210c:	06 00 32    	bra       Z, 0x211a <.L9>

0000210e <.L8>:
    210e:	8e 00 e9    	dec.w     w14, w1
    2110:	88 80 60    	and.w     w1, w8, w1
    2112:	8f ba 97    	mov.w     [w15-16], w5
    2114:	e5 c0 78    	mov.b     [w5+w1], w1
    2116:	f1 ef 9f    	mov.b     w1, [w15-17]
    2118:	7d 01 20    	mov.w     #0x17, w13

0000211a <.L9>:
    211a:	80 00 78    	mov.w     w0, w1

0000211c <.LB101>:
    211c:	81 00 e9    	dec.w     w1, w1
    211e:	05 00 33    	bra       N, 0x212a <.LE101>
    2120:	8b 05 d1    	lsr.w     w11, w11
    2122:	0a 85 d3    	rrc.w     w10, w10
    2124:	89 84 d3    	rrc.w     w9, w9
    2126:	08 84 d3    	rrc.w     w8, w8
    2128:	f9 ff 37    	bra       0x211c <.LB101>

0000212a <.LE101>:
    212a:	08 9e be    	mov.d     w8, [w12++]
    212c:	0a 96 be    	mov.d     w10, [w12--]
    212e:	12 00 37    	bra       0x2154 <.L10>

00002130 <.L12>:
    2130:	8d 06 e9    	dec.w     w13, w13
    2132:	8e 00 e9    	dec.w     w14, w1
    2134:	84 80 60    	and.w     w1, w4, w1
    2136:	0f b9 97    	mov.w     [w15-16], w2
    2138:	e2 c1 78    	mov.b     [w2+w1], w3
    213a:	82 fd 2f    	mov.w     #0xffd8, w2
    213c:	0f 01 41    	add.w     w2, w15, w2
    213e:	03 f1 7e    	mov.b     w3, [w2+w13]
    2140:	80 00 78    	mov.w     w0, w1

00002142 <.LB115>:
    2142:	81 00 e9    	dec.w     w1, w1
    2144:	05 00 33    	bra       N, 0x2150 <.LE115>
    2146:	87 83 d1    	asr.w     w7, w7
    2148:	06 83 d3    	rrc.w     w6, w6
    214a:	85 82 d3    	rrc.w     w5, w5
    214c:	04 82 d3    	rrc.w     w4, w4
    214e:	f9 ff 37    	bra       0x2142 <.LB115>

00002150 <.LE115>:
    2150:	04 9e be    	mov.d     w4, [w12++]
    2152:	06 96 be    	mov.d     w6, [w12--]

00002154 <.L10>:
    2154:	3c 02 be    	mov.d     [w12++], w4
    2156:	2c 03 be    	mov.d     [w12--], w6
    2158:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    215a:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    215c:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    215e:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2160:	8b 00 34    	bra       LE, 0x2278 <.L11>
    2162:	0d 00 e0    	cp0.w     w13
    2164:	e5 ff 3c    	bra       GT, 0x2130 <.L12>
    2166:	88 00 37    	bra       0x2278 <.L11>

00002168 <.L51>:
    2168:	2c 60 90    	mov.b     [w12+34], w0
    216a:	81 c6 b3    	mov.b     #0x68, w1
    216c:	81 4f 50    	sub.b     w0, w1, [w15]
    216e:	0b 00 32    	bra       Z, 0x2186 <.L14>
    2170:	06 00 3c    	bra       GT, 0x217e <.L16>
    2172:	00 04 e0    	cp0.b     w0
    2174:	08 00 32    	bra       Z, 0x2186 <.L14>
    2176:	e6 c0 50    	sub.b     w1, #0x6, w1
    2178:	81 4f 50    	sub.b     w0, w1, [w15]
    217a:	4e 00 3a    	bra       NZ, 0x2218 <.L13>
    217c:	04 00 37    	bra       0x2186 <.L14>

0000217e <.L16>:
    217e:	c1 c6 b3    	mov.b     #0x6c, w1
    2180:	81 4f 50    	sub.b     w0, w1, [w15]
    2182:	4a 00 3a    	bra       NZ, 0x2218 <.L13>
    2184:	21 00 37    	bra       0x21c8 <.L52>

00002186 <.L14>:
    2186:	08 00 e0    	cp0.w     w8
    2188:	04 00 3a    	bra       NZ, 0x2192 <.L17>
    218a:	5c 08 90    	mov.w     [w12+26], w0
    218c:	8d 01 20    	mov.w     #0x18, w13
    218e:	00 00 e0    	cp0.w     w0
    2190:	06 00 32    	bra       Z, 0x219e <.L18>

00002192 <.L17>:
    2192:	11 00 09    	repeat    #0x11
    2194:	0e 84 d8    	div.uw    w8, w14
    2196:	0f b9 97    	mov.w     [w15-16], w2
    2198:	e2 c0 78    	mov.b     [w2+w1], w1
    219a:	f1 ef 9f    	mov.b     w1, [w15-17]
    219c:	7d 01 20    	mov.w     #0x17, w13

0000219e <.L18>:
    219e:	11 00 09    	repeat    #0x11
    21a0:	0e 84 d8    	div.uw    w8, w14
    21a2:	0a 00 37    	bra       0x21b8 <.L47>

000021a4 <.L21>:
    21a4:	11 00 09    	repeat    #0x11
    21a6:	0e 04 d8    	div.sw    w8, w14
    21a8:	8d 06 e9    	dec.w     w13, w13
    21aa:	0e 81 b9    	mul.ss    w0, w14, w2
    21ac:	02 04 54    	sub.w     w8, w2, w8
    21ae:	8f b8 97    	mov.w     [w15-16], w1
    21b0:	61 41 7c    	mov.b     [w1+w8], w2
    21b2:	81 fd 2f    	mov.w     #0xffd8, w1
    21b4:	8f 80 40    	add.w     w1, w15, w1
    21b6:	82 f0 7e    	mov.b     w2, [w1+w13]

000021b8 <.L47>:
    21b8:	00 04 78    	mov.w     w0, w8
    21ba:	08 00 e0    	cp0.w     w8
    21bc:	02 00 32    	bra       Z, 0x21c2 <.L20>
    21be:	0d 00 e0    	cp0.w     w13
    21c0:	f1 ff 3c    	bra       GT, 0x21a4 <.L21>

000021c2 <.L20>:
    21c2:	cf c4 de    	asr.w     w8, #0xf, w9
    21c4:	61 4d b9    	mul.su    w9, #0x1, w10
    21c6:	25 00 37    	bra       0x2212 <.L50>

000021c8 <.L52>:
    21c8:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    21ca:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    21cc:	04 00 3a    	bra       NZ, 0x21d6 <.L22>
    21ce:	5c 08 90    	mov.w     [w12+26], w0
    21d0:	8d 01 20    	mov.w     #0x18, w13
    21d2:	00 00 e0    	cp0.w     w0
    21d4:	07 00 32    	bra       Z, 0x21e4 <.L23>

000021d6 <.L22>:
    21d6:	61 71 b9    	mul.su    w14, #0x1, w2
    21d8:	08 00 be    	mov.d     w8, w0
    21da:	a9 02 07    	rcall     0x272e <___umodsi3>
    21dc:	8f b9 97    	mov.w     [w15-16], w3
    21de:	e3 41 78    	mov.b     [w3+w0], w3
    21e0:	f3 ef 9f    	mov.b     w3, [w15-17]
    21e2:	7d 01 20    	mov.w     #0x17, w13

000021e4 <.L23>:
    21e4:	61 71 b9    	mul.su    w14, #0x1, w2
    21e6:	08 00 be    	mov.d     w8, w0
    21e8:	92 02 07    	rcall     0x270e <___udivsi3>
    21ea:	0b 00 37    	bra       0x2202 <.L48>

000021ec <.L26>:
    21ec:	61 71 b9    	mul.su    w14, #0x1, w2
    21ee:	08 00 be    	mov.d     w8, w0
    21f0:	7f 02 07    	rcall     0x26f0 <___divsi3>
    21f2:	8d 06 e9    	dec.w     w13, w13
    21f4:	00 f1 b9    	mul.ss    w14, w0, w2
    21f6:	02 04 54    	sub.w     w8, w2, w8
    21f8:	0f ba 97    	mov.w     [w15-16], w4
    21fa:	e4 42 7c    	mov.b     [w4+w8], w5
    21fc:	84 fd 2f    	mov.w     #0xffd8, w4
    21fe:	0f 02 42    	add.w     w4, w15, w4
    2200:	05 f2 7e    	mov.b     w5, [w4+w13]

00002202 <.L48>:
    2202:	00 04 be    	mov.d     w0, w8
    2204:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    2206:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2208:	02 00 32    	bra       Z, 0x220e <.L25>
    220a:	0d 00 e0    	cp0.w     w13
    220c:	ef ff 3c    	bra       GT, 0x21ec <.L26>

0000220e <.L25>:
    220e:	4f cd de    	asr.w     w9, #0xf, w10
    2210:	8a 05 78    	mov.w     w10, w11

00002212 <.L50>:
    2212:	08 9e be    	mov.d     w8, [w12++]
    2214:	0a 96 be    	mov.d     w10, [w12--]
    2216:	30 00 37    	bra       0x2278 <.L11>

00002218 <.L13>:
    2218:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    221a:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    221c:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    221e:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    2220:	04 00 3a    	bra       NZ, 0x222a <.L27>
    2222:	5c 08 90    	mov.w     [w12+26], w0
    2224:	8d 01 20    	mov.w     #0x18, w13
    2226:	00 00 e0    	cp0.w     w0
    2228:	09 00 32    	bra       Z, 0x223c <.L28>

0000222a <.L27>:
    222a:	61 72 b9    	mul.su    w14, #0x1, w4
    222c:	61 2b b9    	mul.su    w5, #0x1, w6
    222e:	08 00 be    	mov.d     w8, w0
    2230:	0a 01 be    	mov.d     w10, w2
    2232:	26 03 07    	rcall     0x2880 <___umoddi3>
    2234:	0f ba 97    	mov.w     [w15-16], w4
    2236:	64 42 78    	mov.b     [w4+w0], w4
    2238:	f4 ef 9f    	mov.b     w4, [w15-17]
    223a:	7d 01 20    	mov.w     #0x17, w13

0000223c <.L28>:
    223c:	61 72 b9    	mul.su    w14, #0x1, w4
    223e:	61 2b b9    	mul.su    w5, #0x1, w6
    2240:	08 00 be    	mov.d     w8, w0
    2242:	0a 01 be    	mov.d     w10, w2
    2244:	16 03 07    	rcall     0x2872 <___udivdi3>
    2246:	0d 00 37    	bra       0x2262 <.L49>

00002248 <.L30>:
    2248:	61 72 b9    	mul.su    w14, #0x1, w4
    224a:	61 2b b9    	mul.su    w5, #0x1, w6
    224c:	08 00 be    	mov.d     w8, w0
    224e:	0a 01 be    	mov.d     w10, w2
    2250:	1b 03 07    	rcall     0x2888 <___divdi3>
    2252:	8d 06 e9    	dec.w     w13, w13
    2254:	00 f2 b9    	mul.ss    w14, w0, w4
    2256:	04 04 54    	sub.w     w8, w4, w8
    2258:	8f ba 97    	mov.w     [w15-16], w5
    225a:	65 42 7c    	mov.b     [w5+w8], w4
    225c:	85 fd 2f    	mov.w     #0xffd8, w5
    225e:	8f 82 42    	add.w     w5, w15, w5
    2260:	84 f2 7e    	mov.b     w4, [w5+w13]

00002262 <.L49>:
    2262:	00 9e be    	mov.d     w0, [w12++]
    2264:	02 96 be    	mov.d     w2, [w12--]
    2266:	3c 04 be    	mov.d     [w12++], w8
    2268:	2c 05 be    	mov.d     [w12--], w10
    226a:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    226c:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    226e:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    2270:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    2272:	02 00 34    	bra       LE, 0x2278 <.L11>
    2274:	0d 00 e0    	cp0.w     w13
    2276:	e8 ff 3c    	bra       GT, 0x2248 <.L30>

00002278 <.L11>:
    2278:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    227a:	10 00 3a    	bra       NZ, 0x229c <.L31>
    227c:	0c 10 90    	mov.w     [w12+32], w0
    227e:	00 38 a3    	btst.z    w0, #0x3
    2280:	0d 00 32    	bra       Z, 0x229c <.L31>
    2282:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    2284:	06 00 3e    	bra       GTU, 0x2292 <.L32>
    2286:	85 fd 2f    	mov.w     #0xffd8, w5
    2288:	8f 82 42    	add.w     w5, w15, w5
    228a:	e5 c0 7e    	mov.b     [w5+w13], w1
    228c:	00 c3 b3    	mov.b     #0x30, w0
    228e:	80 cf 50    	sub.b     w1, w0, [w15]
    2290:	05 00 32    	bra       Z, 0x229c <.L31>

00002292 <.L32>:
    2292:	8d 06 e9    	dec.w     w13, w13
    2294:	02 c3 b3    	mov.b     #0x30, w2
    2296:	81 fd 2f    	mov.w     #0xffd8, w1
    2298:	8f 80 40    	add.w     w1, w15, w1
    229a:	82 f0 7e    	mov.b     w2, [w1+w13]

0000229c <.L31>:
    229c:	78 81 16    	subr.w    w13, #0x18, w2
    229e:	12 0e 98    	mov.w     w2, [w12+18]
    22a0:	6c 00 90    	mov.w     [w12+12], w0
    22a2:	83 fd 2f    	mov.w     #0xffd8, w3
    22a4:	8f 81 41    	add.w     w3, w15, w3
    22a6:	8d 80 41    	add.w     w3, w13, w1
    22a8:	90 fe 07    	rcall     0x1fca <_memcpy>
    22aa:	1c 08 90    	mov.w     [w12+18], w0
    22ac:	dc 08 90    	mov.w     [w12+26], w1
    22ae:	81 0f 50    	sub.w     w0, w1, [w15]
    22b0:	06 00 3d    	bra       GE, 0x22be <.L33>
    22b2:	00 80 50    	sub.w     w1, w0, w0
    22b4:	00 0e 98    	mov.w     w0, [w12+16]
    22b6:	0c 10 90    	mov.w     [w12+32], w0
    22b8:	00 40 a1    	bclr.w    w0, #0x4
    22ba:	00 16 98    	mov.w     w0, [w12+32]
    22bc:	0f 00 37    	bra       0x22dc <.L1>

000022be <.L33>:
    22be:	01 00 e0    	cp0.w     w1
    22c0:	0d 00 3d    	bra       GE, 0x22dc <.L1>
    22c2:	8c 10 90    	mov.w     [w12+32], w1
    22c4:	f4 80 60    	and.w     w1, #0x14, w1
    22c6:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    22c8:	09 00 3a    	bra       NZ, 0x22dc <.L1>
    22ca:	7c 09 90    	mov.w     [w12+30], w2
    22cc:	fc 00 90    	mov.w     [w12+14], w1
    22ce:	81 00 51    	sub.w     w2, w1, w1
    22d0:	0c 09 90    	mov.w     [w12+16], w2
    22d2:	82 80 50    	sub.w     w1, w2, w1
    22d4:	00 80 50    	sub.w     w1, w0, w0
    22d6:	42 40 a9    	bclr.b    0x42, #0x2
    22d8:	01 00 34    	bra       LE, 0x22dc <.L1>
    22da:	00 0e 98    	mov.w     w0, [w12+16]

000022dc <.L1>:
    22dc:	4f 07 78    	mov.w     [--w15], w14
    22de:	4f 06 be    	mov.d     [--w15], w12
    22e0:	4f 05 be    	mov.d     [--w15], w10
    22e2:	4f 04 be    	mov.d     [--w15], w8
    22e4:	cf 01 b1    	sub.w     #0x1c, w15
    22e6:	00 00 06    	return    

000022e8 <__Puttxt>:
    22e8:	04 00 fa    	lnk       #0x4
    22ea:	88 9f be    	mov.d     w8, [w15++]
    22ec:	8a 9f be    	mov.d     w10, [w15++]
    22ee:	8c 1f 78    	mov.w     w12, [w15++]
    22f0:	00 04 78    	mov.w     w0, w8
    22f2:	01 06 78    	mov.w     w1, w12
    22f4:	f8 0d 90    	mov.w     [w8+30], w11
    22f6:	78 00 90    	mov.w     [w8+14], w0
    22f8:	80 85 55    	sub.w     w11, w0, w11
    22fa:	08 08 90    	mov.w     [w8+16], w0
    22fc:	80 85 55    	sub.w     w11, w0, w11
    22fe:	18 08 90    	mov.w     [w8+18], w0
    2300:	80 85 55    	sub.w     w11, w0, w11
    2302:	28 08 90    	mov.w     [w8+20], w0
    2304:	80 85 55    	sub.w     w11, w0, w11
    2306:	38 08 90    	mov.w     [w8+22], w0
    2308:	80 85 55    	sub.w     w11, w0, w11
    230a:	48 08 90    	mov.w     [w8+24], w0
    230c:	80 85 55    	sub.w     w11, w0, w11
    230e:	00 02 22    	mov.w     #0x2020, w0
    2310:	90 bf 9f    	mov.w     w0, [w15-14]
    2312:	00 03 23    	mov.w     #0x3030, w0
    2314:	a0 bf 9f    	mov.w     w0, [w15-12]
    2316:	08 10 90    	mov.w     [w8+32], w0
    2318:	00 28 a3    	btst.z    w0, #0x2
    231a:	15 00 3a    	bra       NZ, 0x2346 <.L2>
    231c:	0b 00 e0    	cp0.w     w11
    231e:	13 00 34    	bra       LE, 0x2346 <.L2>
    2320:	0b 05 78    	mov.w     w11, w10

00002322 <.L5>:
    2322:	8a 04 78    	mov.w     w10, w9
    2324:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    2326:	01 00 36    	bra       LEU, 0x232a <.L3>
    2328:	29 00 20    	mov.w     #0x2, w9

0000232a <.L3>:
    232a:	c8 01 90    	mov.w     [w8+8], w3
    232c:	09 01 78    	mov.w     w9, w2
    232e:	ee 80 57    	sub.w     w15, #0xe, w1
    2330:	58 00 90    	mov.w     [w8+10], w0
    2332:	03 00 01    	call      w3
    2334:	50 04 98    	mov.w     w0, [w8+10]
    2336:	00 00 e0    	cp0.w     w0
    2338:	8c 00 32    	bra       Z, 0x2452 <.L29>
    233a:	68 08 90    	mov.w     [w8+28], w0
    233c:	09 00 40    	add.w     w0, w9, w0
    233e:	60 0c 98    	mov.w     w0, [w8+28]
    2340:	09 05 55    	sub.w     w10, w9, w10
    2342:	42 40 a9    	bclr.b    0x42, #0x2
    2344:	ee ff 3c    	bra       GT, 0x2322 <.L5>

00002346 <.L2>:
    2346:	78 01 90    	mov.w     [w8+14], w2
    2348:	02 00 e0    	cp0.w     w2
    234a:	0c 00 34    	bra       LE, 0x2364 <.L6>
    234c:	c8 01 90    	mov.w     [w8+8], w3
    234e:	8c 00 78    	mov.w     w12, w1
    2350:	58 00 90    	mov.w     [w8+10], w0
    2352:	03 00 01    	call      w3
    2354:	50 04 98    	mov.w     w0, [w8+10]
    2356:	80 80 eb    	setm.w    w1
    2358:	00 00 e0    	cp0.w     w0
    235a:	7c 00 32    	bra       Z, 0x2454 <.L4>
    235c:	e8 08 90    	mov.w     [w8+28], w1
    235e:	78 00 90    	mov.w     [w8+14], w0
    2360:	00 80 40    	add.w     w1, w0, w0
    2362:	60 0c 98    	mov.w     w0, [w8+28]

00002364 <.L6>:
    2364:	88 0c 90    	mov.w     [w8+16], w9

00002366 <.L30>:
    2366:	09 00 e0    	cp0.w     w9
    2368:	11 00 34    	bra       LE, 0x238c <.L7>
    236a:	09 05 78    	mov.w     w9, w10
    236c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    236e:	01 00 36    	bra       LEU, 0x2372 <.L8>
    2370:	2a 00 20    	mov.w     #0x2, w10

00002372 <.L8>:
    2372:	c8 01 90    	mov.w     [w8+8], w3
    2374:	0a 01 78    	mov.w     w10, w2
    2376:	ec 80 57    	sub.w     w15, #0xc, w1
    2378:	58 00 90    	mov.w     [w8+10], w0
    237a:	03 00 01    	call      w3
    237c:	50 04 98    	mov.w     w0, [w8+10]
    237e:	00 00 e0    	cp0.w     w0
    2380:	68 00 32    	bra       Z, 0x2452 <.L29>
    2382:	68 08 90    	mov.w     [w8+28], w0
    2384:	0a 00 40    	add.w     w0, w10, w0
    2386:	60 0c 98    	mov.w     w0, [w8+28]
    2388:	8a 84 54    	sub.w     w9, w10, w9
    238a:	ed ff 37    	bra       0x2366 <.L30>

0000238c <.L7>:
    238c:	18 09 90    	mov.w     [w8+18], w2
    238e:	02 00 e0    	cp0.w     w2
    2390:	0c 00 34    	bra       LE, 0x23aa <.L10>
    2392:	c8 01 90    	mov.w     [w8+8], w3
    2394:	e8 00 90    	mov.w     [w8+12], w1
    2396:	58 00 90    	mov.w     [w8+10], w0
    2398:	03 00 01    	call      w3
    239a:	50 04 98    	mov.w     w0, [w8+10]
    239c:	80 80 eb    	setm.w    w1
    239e:	00 00 e0    	cp0.w     w0
    23a0:	59 00 32    	bra       Z, 0x2454 <.L4>
    23a2:	e8 08 90    	mov.w     [w8+28], w1
    23a4:	18 08 90    	mov.w     [w8+18], w0
    23a6:	00 80 40    	add.w     w1, w0, w0
    23a8:	60 0c 98    	mov.w     w0, [w8+28]

000023aa <.L10>:
    23aa:	a8 0c 90    	mov.w     [w8+20], w9

000023ac <.L31>:
    23ac:	09 00 e0    	cp0.w     w9
    23ae:	11 00 34    	bra       LE, 0x23d2 <.L11>
    23b0:	09 05 78    	mov.w     w9, w10
    23b2:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    23b4:	01 00 36    	bra       LEU, 0x23b8 <.L12>
    23b6:	2a 00 20    	mov.w     #0x2, w10

000023b8 <.L12>:
    23b8:	c8 01 90    	mov.w     [w8+8], w3
    23ba:	0a 01 78    	mov.w     w10, w2
    23bc:	ec 80 57    	sub.w     w15, #0xc, w1
    23be:	58 00 90    	mov.w     [w8+10], w0
    23c0:	03 00 01    	call      w3
    23c2:	50 04 98    	mov.w     w0, [w8+10]
    23c4:	00 00 e0    	cp0.w     w0
    23c6:	45 00 32    	bra       Z, 0x2452 <.L29>
    23c8:	68 08 90    	mov.w     [w8+28], w0
    23ca:	0a 00 40    	add.w     w0, w10, w0
    23cc:	60 0c 98    	mov.w     w0, [w8+28]
    23ce:	8a 84 54    	sub.w     w9, w10, w9
    23d0:	ed ff 37    	bra       0x23ac <.L31>

000023d2 <.L11>:
    23d2:	38 09 90    	mov.w     [w8+22], w2
    23d4:	02 00 e0    	cp0.w     w2
    23d6:	0e 00 34    	bra       LE, 0x23f4 <.L14>
    23d8:	e8 00 90    	mov.w     [w8+12], w1
    23da:	18 08 90    	mov.w     [w8+18], w0
    23dc:	80 80 40    	add.w     w1, w0, w1
    23de:	c8 01 90    	mov.w     [w8+8], w3
    23e0:	58 00 90    	mov.w     [w8+10], w0
    23e2:	03 00 01    	call      w3
    23e4:	50 04 98    	mov.w     w0, [w8+10]
    23e6:	80 80 eb    	setm.w    w1
    23e8:	00 00 e0    	cp0.w     w0
    23ea:	34 00 32    	bra       Z, 0x2454 <.L4>
    23ec:	e8 08 90    	mov.w     [w8+28], w1
    23ee:	38 08 90    	mov.w     [w8+22], w0
    23f0:	00 80 40    	add.w     w1, w0, w0
    23f2:	60 0c 98    	mov.w     w0, [w8+28]

000023f4 <.L14>:
    23f4:	c8 0c 90    	mov.w     [w8+24], w9

000023f6 <.L32>:
    23f6:	09 00 e0    	cp0.w     w9
    23f8:	11 00 34    	bra       LE, 0x241c <.L15>
    23fa:	09 05 78    	mov.w     w9, w10
    23fc:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    23fe:	01 00 36    	bra       LEU, 0x2402 <.L16>
    2400:	2a 00 20    	mov.w     #0x2, w10

00002402 <.L16>:
    2402:	c8 01 90    	mov.w     [w8+8], w3
    2404:	0a 01 78    	mov.w     w10, w2
    2406:	ec 80 57    	sub.w     w15, #0xc, w1
    2408:	58 00 90    	mov.w     [w8+10], w0
    240a:	03 00 01    	call      w3
    240c:	50 04 98    	mov.w     w0, [w8+10]
    240e:	00 00 e0    	cp0.w     w0
    2410:	20 00 32    	bra       Z, 0x2452 <.L29>
    2412:	68 08 90    	mov.w     [w8+28], w0
    2414:	0a 00 40    	add.w     w0, w10, w0
    2416:	60 0c 98    	mov.w     w0, [w8+28]
    2418:	8a 84 54    	sub.w     w9, w10, w9
    241a:	ed ff 37    	bra       0x23f6 <.L32>

0000241c <.L15>:
    241c:	08 10 90    	mov.w     [w8+32], w0
    241e:	80 00 eb    	clr.w     w1
    2420:	00 28 a3    	btst.z    w0, #0x2
    2422:	18 00 32    	bra       Z, 0x2454 <.L4>
    2424:	0b 00 e0    	cp0.w     w11
    2426:	16 00 34    	bra       LE, 0x2454 <.L4>
    2428:	8b 04 78    	mov.w     w11, w9

0000242a <.L19>:
    242a:	09 05 78    	mov.w     w9, w10
    242c:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    242e:	01 00 36    	bra       LEU, 0x2432 <.L18>
    2430:	2a 00 20    	mov.w     #0x2, w10

00002432 <.L18>:
    2432:	c8 01 90    	mov.w     [w8+8], w3
    2434:	0a 01 78    	mov.w     w10, w2
    2436:	ee 80 57    	sub.w     w15, #0xe, w1
    2438:	58 00 90    	mov.w     [w8+10], w0
    243a:	03 00 01    	call      w3
    243c:	50 04 98    	mov.w     w0, [w8+10]
    243e:	00 00 e0    	cp0.w     w0
    2440:	08 00 32    	bra       Z, 0x2452 <.L29>
    2442:	68 08 90    	mov.w     [w8+28], w0
    2444:	0a 00 40    	add.w     w0, w10, w0
    2446:	60 0c 98    	mov.w     w0, [w8+28]
    2448:	8a 84 54    	sub.w     w9, w10, w9
    244a:	42 40 a9    	bclr.b    0x42, #0x2
    244c:	ee ff 3c    	bra       GT, 0x242a <.L19>
    244e:	80 00 eb    	clr.w     w1
    2450:	01 00 37    	bra       0x2454 <.L4>

00002452 <.L29>:
    2452:	80 80 eb    	setm.w    w1

00002454 <.L4>:
    2454:	01 00 78    	mov.w     w1, w0
    2456:	4f 06 78    	mov.w     [--w15], w12
    2458:	4f 05 be    	mov.d     [--w15], w10
    245a:	4f 04 be    	mov.d     [--w15], w8
    245c:	00 80 fa    	ulnk      
    245e:	00 00 06    	return    

00002460 <__Vacopy>:
    2460:	01 08 78    	mov.w     w1, [w0]
    2462:	00 00 06    	return    

00002464 <_closeallreg>:
    2464:	a0 50 22    	mov.w     #0x250a, w0
    2466:	9b 00 37    	bra       0x259e <__Atexit>

00002468 <__Closreg>:
    2468:	88 1f 78    	mov.w     w8, [w15++]
    246a:	28 eb 21    	mov.w     #0x1eb2, w8
    246c:	18 04 e0    	cp0.b     [w8]
    246e:	03 00 3a    	bra       NZ, 0x2476 <.L2>
    2470:	f9 ff 07    	rcall     0x2464 <_closeallreg>
    2472:	20 c0 b3    	mov.b     #0x2, w0
    2474:	00 4c 78    	mov.b     w0, [w8]

00002476 <.L2>:
    2476:	4f 04 78    	mov.w     [--w15], w8
    2478:	00 00 06    	return    

0000247a <_fclose>:
    247a:	88 9f be    	mov.d     w8, [w15++]
    247c:	00 04 78    	mov.w     w0, w8
    247e:	08 00 78    	mov.w     w8, w0
    2480:	54 00 07    	rcall     0x252a <__DNKfflush>
    2482:	80 04 78    	mov.w     w0, w9
    2484:	00 04 20    	mov.w     #0x40, w0
    2486:	18 00 60    	and.w     w0, [w8], w0
    2488:	02 00 32    	bra       Z, 0x248e <.L5>
    248a:	28 00 90    	mov.w     [w8+4], w0
    248c:	94 00 07    	rcall     0x25b6 <_free>

0000248e <.L5>:
    248e:	00 00 eb    	clr.w     w0
    2490:	20 04 98    	mov.w     w0, [w8+4]
    2492:	38 40 90    	mov.b     [w8+3], w0
    2494:	00 04 e0    	cp0.b     w0
    2496:	05 00 35    	bra       LT, 0x24a2 <.L6>
    2498:	00 00 fb    	se        w0, w0
    249a:	b9 f6 07    	rcall     0x120e <_close>
    249c:	00 00 e0    	cp0.w     w0
    249e:	01 00 32    	bra       Z, 0x24a2 <.L6>
    24a0:	80 84 eb    	setm.w    w9

000024a2 <.L6>:
    24a2:	18 10 90    	mov.w     [w8+34], w0
    24a4:	00 00 e0    	cp0.w     w0
    24a6:	08 00 32    	bra       Z, 0x24b8 <.L7>
    24a8:	bb f6 07    	rcall     0x1220 <_remove>
    24aa:	00 00 e0    	cp0.w     w0
    24ac:	01 00 32    	bra       Z, 0x24b0 <.L8>
    24ae:	80 84 eb    	setm.w    w9

000024b0 <.L8>:
    24b0:	18 10 90    	mov.w     [w8+34], w0
    24b2:	81 00 07    	rcall     0x25b6 <_free>
    24b4:	00 00 eb    	clr.w     w0
    24b6:	10 14 98    	mov.w     w0, [w8+34]

000024b8 <.L7>:
    24b8:	00 08 20    	mov.w     #0x80, w0
    24ba:	18 00 60    	and.w     w0, [w8], w0
    24bc:	15 00 32    	bra       Z, 0x24e8 <.L9>
    24be:	00 01 eb    	clr.w     w2
    24c0:	60 00 b8    	mul.uu    w0, #0x0, w0

000024c2 <.L12>:
    24c2:	03 c7 21    	mov.w     #0x1c70, w3
    24c4:	02 02 d0    	sl.w      w2, w4
    24c6:	63 02 7a    	mov.w     [w3+w4], w4
    24c8:	88 0f 52    	sub.w     w4, w8, [w15]
    24ca:	05 00 3a    	bra       NZ, 0x24d6 <.L10>
    24cc:	00 00 40    	add.w     w0, w0, w0
    24ce:	81 80 48    	addc.w    w1, w1, w1
    24d0:	00 80 41    	add.w     w3, w0, w0
    24d2:	00 08 eb    	clr.w     [w0]
    24d4:	06 00 37    	bra       0x24e2 <.L11>

000024d6 <.L10>:
    24d6:	61 00 40    	add.w     w0, #0x1, w0
    24d8:	e0 80 48    	addc.w    w1, #0x0, w1
    24da:	02 01 e8    	inc.w     w2, w2
    24dc:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    24de:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    24e0:	f0 ff 3a    	bra       NZ, 0x24c2 <.L12>

000024e2 <.L11>:
    24e2:	08 00 78    	mov.w     w8, w0
    24e4:	68 00 07    	rcall     0x25b6 <_free>
    24e6:	0e 00 37    	bra       0x2504 <.L13>

000024e8 <.L9>:
    24e8:	00 0c 78    	mov.w     w0, [w8]
    24ea:	00 c0 eb    	setm.b    w0
    24ec:	30 44 98    	mov.b     w0, [w8+3]
    24ee:	60 02 20    	mov.w     #0x26, w0
    24f0:	08 00 40    	add.w     w0, w8, w0
    24f2:	20 04 98    	mov.w     w0, [w8+4]
    24f4:	40 04 98    	mov.w     w0, [w8+8]
    24f6:	50 04 98    	mov.w     w0, [w8+10]
    24f8:	40 0c 98    	mov.w     w0, [w8+24]
    24fa:	60 04 98    	mov.w     w0, [w8+12]
    24fc:	50 0c 98    	mov.w     w0, [w8+26]
    24fe:	70 04 98    	mov.w     w0, [w8+14]
    2500:	76 00 44    	add.w     w8, #0x16, w0
    2502:	00 0c 98    	mov.w     w0, [w8+16]

00002504 <.L13>:
    2504:	09 00 78    	mov.w     w9, w0
    2506:	4f 04 be    	mov.d     [--w15], w8
    2508:	00 00 06    	return    

0000250a <_closeall>:
    250a:	88 1f 78    	mov.w     w8, [w15++]
    250c:	00 04 eb    	clr.w     w8

0000250e <.L18>:
    250e:	61 40 b8    	mul.uu    w8, #0x1, w0
    2510:	e2 ff 2f    	mov.w     #0xfffe, w2
    2512:	f3 ff 2f    	mov.w     #0xffff, w3
    2514:	0f 01 07    	rcall     0x2734 <___mulp32eds3>
    2516:	e2 c7 21    	mov.w     #0x1c7e, w2
    2518:	62 00 78    	mov.w     [w2+w0], w0
    251a:	00 00 e0    	cp0.w     w0
    251c:	01 00 32    	bra       Z, 0x2520 <.L17>
    251e:	ad ff 07    	rcall     0x247a <_fclose>

00002520 <.L17>:
    2520:	08 04 e8    	inc.w     w8, w8
    2522:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    2524:	f4 ff 3a    	bra       NZ, 0x250e <.L18>
    2526:	4f 04 78    	mov.w     [--w15], w8
    2528:	00 00 06    	return    

0000252a <__DNKfflush>:
    252a:	88 9f be    	mov.d     w8, [w15++]
    252c:	00 04 78    	mov.w     w0, w8
    252e:	08 00 e0    	cp0.w     w8
    2530:	0e 00 3a    	bra       NZ, 0x254e <.L2>
    2532:	80 04 eb    	clr.w     w9

00002534 <.L4>:
    2534:	88 00 d0    	sl.w      w8, w1
    2536:	00 c7 21    	mov.w     #0x1c70, w0
    2538:	61 00 78    	mov.w     [w1+w0], w0
    253a:	00 00 e0    	cp0.w     w0
    253c:	04 00 32    	bra       Z, 0x2546 <.L3>
    253e:	f5 ff 07    	rcall     0x252a <__DNKfflush>
    2540:	00 00 e0    	cp0.w     w0
    2542:	01 00 3d    	bra       GE, 0x2546 <.L3>
    2544:	80 84 eb    	setm.w    w9

00002546 <.L3>:
    2546:	08 04 e8    	inc.w     w8, w8
    2548:	e8 0f 54    	sub.w     w8, #0x8, [w15]
    254a:	f4 ff 3a    	bra       NZ, 0x2534 <.L4>
    254c:	25 00 37    	bra       0x2598 <.L5>

0000254e <.L2>:
    254e:	00 00 22    	mov.w     #0x2000, w0
    2550:	18 00 60    	and.w     w0, [w8], w0
    2552:	80 04 eb    	clr.w     w9
    2554:	21 00 32    	bra       Z, 0x2598 <.L5>
    2556:	a8 04 90    	mov.w     [w8+4], w9
    2558:	0f 00 37    	bra       0x2578 <.L6>

0000255a <.L8>:
    255a:	09 01 51    	sub.w     w2, w9, w2
    255c:	38 40 90    	mov.b     [w8+3], w0
    255e:	00 00 fb    	se        w0, w0
    2560:	89 00 78    	mov.w     w9, w1
    2562:	e8 03 07    	rcall     0x2d34 <_write>
    2564:	00 00 e0    	cp0.w     w0
    2566:	07 00 3c    	bra       GT, 0x2576 <.L7>
    2568:	28 00 90    	mov.w     [w8+4], w0
    256a:	40 04 98    	mov.w     w0, [w8+8]
    256c:	60 04 98    	mov.w     w0, [w8+12]
    256e:	50 0c 98    	mov.w     w0, [w8+26]
    2570:	18 90 a0    	bset.w    [w8], #0x9
    2572:	80 84 eb    	setm.w    w9
    2574:	11 00 37    	bra       0x2598 <.L5>

00002576 <.L7>:
    2576:	80 84 44    	add.w     w9, w0, w9

00002578 <.L6>:
    2578:	48 01 90    	mov.w     [w8+8], w2
    257a:	82 8f 54    	sub.w     w9, w2, [w15]
    257c:	ee ff 39    	bra       NC, 0x255a <.L8>
    257e:	28 00 90    	mov.w     [w8+4], w0
    2580:	40 04 98    	mov.w     w0, [w8+8]
    2582:	98 00 78    	mov.w     [w8], w1
    2584:	02 c0 20    	mov.w     #0xc00, w2
    2586:	02 81 60    	and.w     w1, w2, w2
    2588:	01 00 3a    	bra       NZ, 0x258c <.L9>
    258a:	38 00 90    	mov.w     [w8+6], w0

0000258c <.L9>:
    258c:	01 e8 a3    	btst.z    w1, #0xe
    258e:	02 00 32    	bra       Z, 0x2594 <.L10>
    2590:	60 04 98    	mov.w     w0, [w8+12]
    2592:	01 00 37    	bra       0x2596 <.L13>

00002594 <.L10>:
    2594:	50 0c 98    	mov.w     w0, [w8+26]

00002596 <.L13>:
    2596:	80 04 eb    	clr.w     w9

00002598 <.L5>:
    2598:	09 00 78    	mov.w     w9, w0
    259a:	4f 04 be    	mov.d     [--w15], w8
    259c:	00 00 06    	return    

0000259e <__Atexit>:
    259e:	01 00 20    	mov.w     #0x0, w1
    25a0:	01 00 e0    	cp0.w     w1
    25a2:	08 00 32    	bra       Z, 0x25b4 <.L1>
    25a4:	01 00 80    	mov.w     0x0, w1
    25a6:	01 00 e0    	cp0.w     w1
    25a8:	05 00 32    	bra       Z, 0x25b4 <.L1>
    25aa:	81 00 e9    	dec.w     w1, w1
    25ac:	01 00 88    	mov.w     w1, 0x0
    25ae:	81 00 d0    	sl.w      w1, w1
    25b0:	02 00 80    	mov.w     0x0, w2
    25b2:	00 b1 78    	mov.w     w0, [w2+w1]

000025b4 <.L1>:
    25b4:	00 00 06    	return    

000025b6 <_free>:
    25b6:	00 00 e0    	cp0.w     w0
    25b8:	2f 00 32    	bra       Z, 0x2618 <.L1>
    25ba:	c0 01 78    	mov.w     [--w0], w3
    25bc:	e3 8f 51    	sub.w     w3, #0x3, [w15]
    25be:	2c 00 36    	bra       LEU, 0x2618 <.L1>
    25c0:	03 08 a3    	btst.z    w3, #0x0
    25c2:	2a 00 3a    	bra       NZ, 0x2618 <.L1>
    25c4:	81 f5 80    	mov.w     0x1eb0, w1
    25c6:	01 00 e0    	cp0.w     w1
    25c8:	02 00 32    	bra       Z, 0x25ce <.L3>
    25ca:	81 0f 50    	sub.w     w0, w1, [w15]
    25cc:	04 00 31    	bra       C, 0x25d6 <.L7>

000025ce <.L3>:
    25ce:	11 00 98    	mov.w     w1, [w0+2]
    25d0:	80 f5 88    	mov.w     w0, 0x1eb0
    25d2:	16 00 37    	bra       0x2600 <.L5>

000025d4 <.L11>:
    25d4:	82 00 78    	mov.w     w2, w1

000025d6 <.L7>:
    25d6:	11 01 90    	mov.w     [w1+2], w2
    25d8:	02 00 e0    	cp0.w     w2
    25da:	02 00 32    	bra       Z, 0x25e0 <.L6>
    25dc:	80 0f 51    	sub.w     w2, w0, [w15]
    25de:	fa ff 39    	bra       NC, 0x25d4 <.L11>

000025e0 <.L6>:
    25e0:	11 02 78    	mov.w     [w1], w4
    25e2:	84 82 40    	add.w     w1, w4, w5
    25e4:	85 0f 50    	sub.w     w0, w5, [w15]
    25e6:	18 00 39    	bra       NC, 0x2618 <.L1>
    25e8:	80 8f 52    	sub.w     w5, w0, [w15]
    25ea:	03 00 3a    	bra       NZ, 0x25f2 <.L8>
    25ec:	83 08 42    	add.w     w4, w3, [w1]
    25ee:	01 00 78    	mov.w     w1, w0
    25f0:	07 00 37    	bra       0x2600 <.L5>

000025f2 <.L8>:
    25f2:	02 00 e0    	cp0.w     w2
    25f4:	03 00 32    	bra       Z, 0x25fc <.L9>
    25f6:	83 01 40    	add.w     w0, w3, w3
    25f8:	83 0f 51    	sub.w     w2, w3, [w15]
    25fa:	0e 00 39    	bra       NC, 0x2618 <.L1>

000025fc <.L9>:
    25fc:	12 00 98    	mov.w     w2, [w0+2]
    25fe:	90 00 98    	mov.w     w0, [w1+2]

00002600 <.L5>:
    2600:	90 00 90    	mov.w     [w0+2], w1
    2602:	01 00 e0    	cp0.w     w1
    2604:	09 00 32    	bra       Z, 0x2618 <.L1>
    2606:	10 01 40    	add.w     w0, [w0], w2
    2608:	82 8f 50    	sub.w     w1, w2, [w15]
    260a:	06 00 3a    	bra       NZ, 0x2618 <.L1>
    260c:	e2 ea 21    	mov.w     #0x1eae, w2
    260e:	00 09 eb    	clr.w     [w2]
    2610:	10 01 78    	mov.w     [w0], w2
    2612:	11 08 41    	add.w     w2, [w1], [w0]
    2614:	91 00 90    	mov.w     [w1+2], w1
    2616:	11 00 98    	mov.w     w1, [w0+2]

00002618 <.L1>:
    2618:	00 00 06    	return    

0000261a <_findmem>:
    261a:	88 9f be    	mov.d     w8, [w15++]
    261c:	00 04 78    	mov.w     w0, w8

0000261e <.L14>:
    261e:	71 f5 80    	mov.w     0x1eae, w1
    2620:	01 00 e0    	cp0.w     w1
    2622:	02 00 32    	bra       Z, 0x2628 <.L2>
    2624:	01 00 78    	mov.w     w1, w0
    2626:	0d 00 37    	bra       0x2642 <.L3>

00002628 <.L2>:
    2628:	81 f5 80    	mov.w     0x1eb0, w1
    262a:	00 eb 21    	mov.w     #0x1eb0, w0
    262c:	04 00 37    	bra       0x2636 <.L4>

0000262e <.L6>:
    262e:	91 0f 54    	sub.w     w8, [w1], [w15]
    2630:	25 00 36    	bra       LEU, 0x267c <.L5>
    2632:	01 80 e8    	inc2.w    w1, w0
    2634:	91 00 90    	mov.w     [w1+2], w1

00002636 <.L4>:
    2636:	01 00 e0    	cp0.w     w1
    2638:	fa ff 3a    	bra       NZ, 0x262e <.L6>
    263a:	10 00 37    	bra       0x265c <.L7>

0000263c <.L8>:
    263c:	92 0f 54    	sub.w     w8, [w2], [w15]
    263e:	1e 00 36    	bra       LEU, 0x267c <.L5>
    2640:	02 80 e8    	inc2.w    w2, w0

00002642 <.L3>:
    2642:	10 01 78    	mov.w     [w0], w2
    2644:	02 00 e0    	cp0.w     w2
    2646:	fa ff 3a    	bra       NZ, 0x263c <.L8>
    2648:	11 01 78    	mov.w     [w1], w2
    264a:	81 f5 80    	mov.w     0x1eb0, w1
    264c:	00 eb 21    	mov.w     #0x1eb0, w0
    264e:	04 00 37    	bra       0x2658 <.L9>

00002650 <.L10>:
    2650:	91 0f 54    	sub.w     w8, [w1], [w15]
    2652:	14 00 36    	bra       LEU, 0x267c <.L5>
    2654:	01 80 e8    	inc2.w    w1, w0
    2656:	91 00 90    	mov.w     [w1+2], w1

00002658 <.L9>:
    2658:	82 8f 50    	sub.w     w1, w2, [w15]
    265a:	fa ff 3a    	bra       NZ, 0x2650 <.L10>

0000265c <.L7>:
    265c:	a9 f5 80    	mov.w     0x1eb4, w9

0000265e <.L13>:
    265e:	88 8f 54    	sub.w     w9, w8, [w15]
    2660:	01 00 31    	bra       C, 0x2664 <.L11>
    2662:	88 04 78    	mov.w     w8, w9

00002664 <.L11>:
    2664:	09 00 78    	mov.w     w9, w0
    2666:	36 00 07    	rcall     0x26d4 <__Getmem>
    2668:	00 00 e0    	cp0.w     w0
    266a:	04 00 3a    	bra       NZ, 0x2674 <.L12>
    266c:	88 8f 54    	sub.w     w9, w8, [w15]
    266e:	05 00 32    	bra       Z, 0x267a <.L15>
    2670:	89 04 d1    	lsr.w     w9, w9
    2672:	f5 ff 37    	bra       0x265e <.L13>

00002674 <.L12>:
    2674:	09 18 78    	mov.w     w9, [w0++]
    2676:	9f ff 07    	rcall     0x25b6 <_free>
    2678:	d2 ff 37    	bra       0x261e <.L14>

0000267a <.L15>:
    267a:	00 00 eb    	clr.w     w0

0000267c <.L5>:
    267c:	4f 04 be    	mov.d     [--w15], w8
    267e:	00 00 06    	return    

00002680 <_malloc>:
    2680:	88 1f 78    	mov.w     w8, [w15++]
    2682:	63 04 40    	add.w     w0, #0x3, w8
    2684:	08 00 a1    	bclr.w    w8, #0x0
    2686:	80 00 eb    	clr.w     w1
    2688:	80 0f 54    	sub.w     w8, w0, [w15]
    268a:	21 00 36    	bra       LEU, 0x26ce <.L17>
    268c:	e3 0f 54    	sub.w     w8, #0x3, [w15]
    268e:	01 00 3e    	bra       GTU, 0x2692 <.L18>
    2690:	48 00 20    	mov.w     #0x4, w8

00002692 <.L18>:
    2692:	08 00 78    	mov.w     w8, w0
    2694:	c2 ff 07    	rcall     0x261a <_findmem>
    2696:	80 00 eb    	clr.w     w1
    2698:	00 00 e0    	cp0.w     w0
    269a:	19 00 32    	bra       Z, 0x26ce <.L17>
    269c:	90 00 78    	mov.w     [w0], w1
    269e:	91 01 78    	mov.w     [w1], w3
    26a0:	64 81 51    	sub.w     w3, #0x4, w2
    26a2:	88 0f 51    	sub.w     w2, w8, [w15]
    26a4:	03 00 31    	bra       C, 0x26ac <.L19>
    26a6:	11 01 90    	mov.w     [w1+2], w2
    26a8:	02 08 78    	mov.w     w2, [w0]
    26aa:	07 00 37    	bra       0x26ba <.L20>

000026ac <.L19>:
    26ac:	08 81 40    	add.w     w1, w8, w2
    26ae:	02 08 78    	mov.w     w2, [w0]
    26b0:	91 01 90    	mov.w     [w1+2], w3
    26b2:	13 01 98    	mov.w     w3, [w2+2]
    26b4:	10 01 78    	mov.w     [w0], w2
    26b6:	11 09 14    	subr.w    w8, [w1], [w2]
    26b8:	88 08 78    	mov.w     w8, [w1]

000026ba <.L20>:
    26ba:	10 01 78    	mov.w     [w0], w2
    26bc:	00 00 eb    	clr.w     w0
    26be:	02 00 e0    	cp0.w     w2
    26c0:	04 00 32    	bra       Z, 0x26ca <.L21>
    26c2:	92 01 90    	mov.w     [w2+2], w3
    26c4:	03 00 e0    	cp0.w     w3
    26c6:	01 00 32    	bra       Z, 0x26ca <.L21>
    26c8:	02 80 e8    	inc2.w    w2, w0

000026ca <.L21>:
    26ca:	70 f5 88    	mov.w     w0, 0x1eae
    26cc:	81 80 e8    	inc2.w    w1, w1

000026ce <.L17>:
    26ce:	01 00 78    	mov.w     w1, w0
    26d0:	4f 04 78    	mov.w     [--w15], w8
    26d2:	00 00 06    	return    

000026d4 <__Getmem>:
    26d4:	80 00 78    	mov.w     w0, w1
    26d6:	00 00 eb    	clr.w     w0
    26d8:	01 00 e0    	cp0.w     w1
    26da:	05 00 34    	bra       LE, 0x26e6 <.L2>
    26dc:	01 00 78    	mov.w     w1, w0
    26de:	a9 f5 07    	rcall     0x1232 <_sbrk>
    26e0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    26e2:	01 00 3a    	bra       NZ, 0x26e6 <.L2>
    26e4:	00 00 eb    	clr.w     w0

000026e6 <.L2>:
    26e6:	00 00 06    	return    

000026e8 <_doclose>:
    26e8:	00 c0 da    	.pword 0xdac000
    26ea:	00 00 06    	return    

000026ec <_doremove>:
    26ec:	00 c0 da    	.pword 0xdac000
    26ee:	00 00 06    	return    

000026f0 <___divsi3>:
    26f0:	83 9f 68    	xor.w     w1, w3, [w15++]
    26f2:	01 00 e0    	cp0.w     w1
    26f4:	02 00 3d    	bra       GE, 0x26fa <divtestb>
    26f6:	60 00 10    	subr.w    w0, #0x0, w0
    26f8:	e0 80 18    	subbr.w   w1, #0x0, w1

000026fa <divtestb>:
    26fa:	03 00 e0    	cp0.w     w3
    26fc:	02 00 3d    	bra       GE, 0x2702 <calcquot>
    26fe:	60 01 11    	subr.w    w2, #0x0, w2
    2700:	e0 81 19    	subbr.w   w3, #0x0, w3

00002702 <calcquot>:
    2702:	05 00 07    	rcall     0x270e <___udivsi3>
    2704:	4f 00 e0    	cp0.w     [--w15]
    2706:	02 00 3b    	bra       NN, 0x270c <returnq>
    2708:	60 00 10    	subr.w    w0, #0x0, w0
    270a:	e0 80 18    	subbr.w   w1, #0x0, w1

0000270c <returnq>:
    270c:	00 00 06    	return    

0000270e <___udivsi3>:
    270e:	60 22 b8    	mul.uu    w4, #0x0, w4
    2710:	06 02 20    	mov.w     #0x20, w6

00002712 <nextbit>:
    2712:	00 00 d0    	sl.w      w0, w0
    2714:	81 80 d2    	rlc.w     w1, w1
    2716:	04 82 d2    	rlc.w     w4, w4
    2718:	85 82 d2    	rlc.w     w5, w5
    271a:	00 00 a0    	bset.w    w0, #0x0
    271c:	02 02 52    	sub.w     w4, w2, w4
    271e:	83 82 5a    	subb.w    w5, w3, w5
    2720:	03 00 31    	bra       C, 0x2728 <iterate>
    2722:	02 02 42    	add.w     w4, w2, w4
    2724:	83 82 4a    	addc.w    w5, w3, w5
    2726:	00 00 a1    	bclr.w    w0, #0x0

00002728 <iterate>:
    2728:	06 03 e9    	dec.w     w6, w6
    272a:	f3 ff 3a    	bra       NZ, 0x2712 <nextbit>
    272c:	00 00 06    	return    

0000272e <___umodsi3>:
    272e:	ef ff 07    	rcall     0x270e <___udivsi3>
    2730:	04 00 be    	mov.d     w4, w0
    2732:	00 00 06    	return    

00002734 <___mulp32eds3>:
    2734:	02 0a b9    	mul.su    w1, w2, w4
    2736:	00 1b b9    	mul.su    w3, w0, w6
    2738:	02 00 b8    	mul.uu    w0, w2, w0
    273a:	81 00 42    	add.w     w4, w1, w1
    273c:	81 00 43    	add.w     w6, w1, w1
    273e:	00 00 06    	return    

00002740 <___PplusBdi>:
    2740:	88 9f be    	mov.d     w8, [w15++]
    2742:	8a 9f be    	mov.d     w10, [w15++]
    2744:	30 04 42    	add.w     w4, [w0++], w8
    2746:	b0 84 4a    	addc.w    w5, [w0++], w9
    2748:	30 05 4b    	addc.w    w6, [w0++], w10
    274a:	90 85 4b    	addc.w    w7, [w0], w11
    274c:	60 00 b1    	sub.w     #0x6, w0
    274e:	08 98 be    	mov.d     w8, [w0++]
    2750:	0a 90 be    	mov.d     w10, [w0--]
    2752:	04 40 e1    	cp.w      w8, w4
    2754:	05 c8 e1    	cpb.w     w9, w5
    2756:	06 d0 e1    	cpb.w     w10, w6
    2758:	07 d8 e1    	cpb.w     w11, w7
    275a:	02 00 31    	bra       C, 0x2760 <.L1>
    275c:	68 00 40    	add.w     w0, #0x8, w0
    275e:	10 08 e8    	inc.w     [w0], [w0]

00002760 <.L1>:
    2760:	4f 05 be    	mov.d     [--w15], w10
    2762:	4f 04 be    	mov.d     [--w15], w8
    2764:	00 00 06    	return    

00002766 <___PminusBdi>:
    2766:	88 9f be    	mov.d     w8, [w15++]
    2768:	8a 9f be    	mov.d     w10, [w15++]
    276a:	30 04 be    	mov.d     [w0++], w8
    276c:	20 05 be    	mov.d     [w0--], w10
    276e:	04 18 54    	sub.w     w8, w4, [w0++]
    2770:	05 98 5c    	subb.w    w9, w5, [w0++]
    2772:	06 18 5d    	subb.w    w10, w6, [w0++]
    2774:	07 98 5d    	subb.w    w11, w7, [w0++]
    2776:	11 00 20    	mov.w     #0x1, w1
    2778:	04 40 e1    	cp.w      w8, w4
    277a:	05 c8 e1    	cpb.w     w9, w5
    277c:	06 d0 e1    	cpb.w     w10, w6
    277e:	07 d8 e1    	cpb.w     w11, w7
    2780:	01 00 39    	bra       NC, 0x2784 <.L4>
    2782:	80 00 eb    	clr.w     w1

00002784 <.L4>:
    2784:	10 88 10    	subr.w    w1, [w0], [w0]
    2786:	4f 05 be    	mov.d     [--w15], w10
    2788:	4f 04 be    	mov.d     [--w15], w8
    278a:	00 00 06    	return    

0000278c <___udivmoddi3>:
    278c:	12 00 fa    	lnk       #0x12
    278e:	88 9f be    	mov.d     w8, [w15++]
    2790:	8a 9f be    	mov.d     w10, [w15++]
    2792:	8c 9f be    	mov.d     w12, [w15++]
    2794:	e0 b7 9f    	mov.w     w0, [w15-20]
    2796:	f1 b7 9f    	mov.w     w1, [w15-18]
    2798:	82 bf 9f    	mov.w     w2, [w15-16]
    279a:	93 bf 9f    	mov.w     w3, [w15-14]
    279c:	06 05 be    	mov.d     w6, w10
    279e:	04 04 be    	mov.d     w4, w8
    27a0:	00 00 eb    	clr.w     w0
    27a2:	d0 b7 9f    	mov.w     w0, [w15-22]
    27a4:	c0 b7 9f    	mov.w     w0, [w15-24]
    27a6:	b0 b7 9f    	mov.w     w0, [w15-26]
    27a8:	a0 b7 9f    	mov.w     w0, [w15-28]
    27aa:	90 b7 9f    	mov.w     w0, [w15-30]
    27ac:	00 06 eb    	clr.w     w12

000027ae <.L9>:
    27ae:	5f b1 97    	mov.w     [w15-22], w2
    27b0:	cf b0 97    	mov.w     [w15-24], w1
    27b2:	82 01 41    	add.w     w2, w2, w3
    27b4:	3f b0 97    	mov.w     [w15-26], w0
    27b6:	02 00 e0    	cp0.w     w2
    27b8:	04 00 3d    	bra       GE, 0x27c2 <.L6>
    27ba:	37 00 07    	rcall     0x282a <.LPA0>
    27bc:	7e 80 57    	sub.w     w15, #0x1e, w0
    27be:	c0 ff 07    	rcall     0x2740 <___PplusBdi>
    27c0:	03 00 37    	bra       0x27c8 <.L7>

000027c2 <.L6>:
    27c2:	33 00 07    	rcall     0x282a <.LPA0>
    27c4:	7e 80 57    	sub.w     w15, #0x1e, w0
    27c6:	cf ff 07    	rcall     0x2766 <___PminusBdi>

000027c8 <.L7>:
    27c8:	df b6 97    	mov.w     [w15-22], w13
    27ca:	0d 00 e0    	cp0.w     w13
    27cc:	0c 00 35    	bra       LT, 0x27e6 <.L8>
    27ce:	6f b2 97    	mov.w     [w15-20], w4
    27d0:	ff b2 97    	mov.w     [w15-18], w5
    27d2:	0f bb 97    	mov.w     [w15-16], w6
    27d4:	9f bb 97    	mov.w     [w15-14], w7
    27d6:	10 00 20    	mov.w     #0x1, w0
    27d8:	01 00 20    	mov.w     #0x0, w1
    27da:	60 11 b8    	mul.uu    w2, #0x0, w2
    27dc:	00 02 72    	ior.w     w4, w0, w4
    27de:	81 82 72    	ior.w     w5, w1, w5
    27e0:	02 03 73    	ior.w     w6, w2, w6
    27e2:	83 83 73    	ior.w     w7, w3, w7
    27e4:	1b 00 07    	rcall     0x281c <L0>

000027e6 <.L8>:
    27e6:	0c 06 e8    	inc.w     w12, w12
    27e8:	01 04 20    	mov.w     #0x40, w1
    27ea:	81 0f 56    	sub.w     w12, w1, [w15]
    27ec:	e0 ff 3a    	bra       NZ, 0x27ae <.L9>
    27ee:	0d 00 e0    	cp0.w     w13
    27f0:	04 00 3d    	bra       GE, 0x27fa <.L10>
    27f2:	08 02 be    	mov.d     w8, w4
    27f4:	0a 03 be    	mov.d     w10, w6
    27f6:	7e 80 57    	sub.w     w15, #0x1e, w0
    27f8:	a3 ff 07    	rcall     0x2740 <___PplusBdi>

000027fa <.L10>:
    27fa:	5f a8 97    	mov.w     [w15-38], w0
    27fc:	00 00 e0    	cp0.w     w0
    27fe:	05 00 3a    	bra       NZ, 0x280a <.L11>
    2800:	1f b2 97    	mov.w     [w15-30], w4
    2802:	af b2 97    	mov.w     [w15-28], w5
    2804:	3f b3 97    	mov.w     [w15-26], w6
    2806:	cf b3 97    	mov.w     [w15-24], w7
    2808:	09 00 07    	rcall     0x281c <L0>

0000280a <.L11>:
    280a:	6f b0 97    	mov.w     [w15-20], w0
    280c:	ff b0 97    	mov.w     [w15-18], w1
    280e:	0f b9 97    	mov.w     [w15-16], w2
    2810:	9f b9 97    	mov.w     [w15-14], w3
    2812:	4f 06 be    	mov.d     [--w15], w12
    2814:	4f 05 be    	mov.d     [--w15], w10
    2816:	4f 04 be    	mov.d     [--w15], w8
    2818:	00 80 fa    	ulnk      
    281a:	00 00 06    	return    

0000281c <L0>:
    281c:	01 00 07    	rcall     0x2820 <.LPA5>
    281e:	00 00 06    	return    

00002820 <.LPA5>:
    2820:	a4 b7 9f    	mov.w     w4, [w15-28]
    2822:	b5 b7 9f    	mov.w     w5, [w15-26]
    2824:	c6 b7 9f    	mov.w     w6, [w15-24]
    2826:	d7 b7 9f    	mov.w     w7, [w15-22]
    2828:	00 00 06    	return    

0000282a <.LPA0>:
    282a:	4f 09 de    	lsr.w     w1, #0xf, w2
    282c:	82 81 71    	ior.w     w3, w2, w3
    282e:	b3 b7 9f    	mov.w     w3, [w15-26]
    2830:	4f 01 de    	lsr.w     w0, #0xf, w2
    2832:	81 80 40    	add.w     w1, w1, w1
    2834:	82 80 70    	ior.w     w1, w2, w1
    2836:	a1 b7 9f    	mov.w     w1, [w15-28]
    2838:	8f b0 97    	mov.w     [w15-32], w1
    283a:	4f 09 de    	lsr.w     w1, #0xf, w2
    283c:	00 00 40    	add.w     w0, w0, w0
    283e:	02 00 70    	ior.w     w0, w2, w0
    2840:	90 b7 9f    	mov.w     w0, [w15-30]
    2842:	7f a8 97    	mov.w     [w15-34], w0
    2844:	4f 01 de    	lsr.w     w0, #0xf, w2
    2846:	81 80 40    	add.w     w1, w1, w1
    2848:	82 80 70    	ior.w     w1, w2, w1
    284a:	81 b7 9f    	mov.w     w1, [w15-32]
    284c:	0d 00 07    	rcall     0x2868 <.LPA4>
    284e:	4f 3a de    	lsr.w     w7, #0xf, w4
    2850:	00 00 40    	add.w     w0, w0, w0
    2852:	04 00 70    	ior.w     w0, w4, w0
    2854:	f0 af 9f    	mov.w     w0, [w15-34]
    2856:	08 00 07    	rcall     0x2868 <.LPA4>
    2858:	04 02 42    	add.w     w4, w4, w4
    285a:	85 82 4a    	addc.w    w5, w5, w5
    285c:	06 03 4b    	addc.w    w6, w6, w6
    285e:	87 83 4b    	addc.w    w7, w7, w7
    2860:	df ff 07    	rcall     0x2820 <.LPA5>
    2862:	08 02 be    	mov.d     w8, w4
    2864:	0a 03 be    	mov.d     w10, w6
    2866:	00 00 06    	return    

00002868 <.LPA4>:
    2868:	2f b2 97    	mov.w     [w15-28], w4
    286a:	bf b2 97    	mov.w     [w15-26], w5
    286c:	4f b3 97    	mov.w     [w15-24], w6
    286e:	df b3 97    	mov.w     [w15-22], w7
    2870:	00 00 06    	return    

00002872 <___udivdi3>:
    2872:	88 1f 78    	mov.w     w8, [w15++]
    2874:	18 00 20    	mov.w     #0x1, w8
    2876:	88 1f 78    	mov.w     w8, [w15++]
    2878:	89 ff 07    	rcall     0x278c <___udivmoddi3>
    287a:	8f 87 e9    	dec2.w    w15, w15
    287c:	4f 04 78    	mov.w     [--w15], w8
    287e:	00 00 06    	return    

00002880 <___umoddi3>:
    2880:	80 1f eb    	clr.w     [w15++]
    2882:	84 ff 07    	rcall     0x278c <___udivmoddi3>
    2884:	8f 87 e9    	dec2.w    w15, w15
    2886:	00 00 06    	return    

00002888 <___divdi3>:
    2888:	88 9f be    	mov.d     w8, [w15++]
    288a:	8a 9f be    	mov.d     w10, [w15++]
    288c:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    288e:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    2890:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2892:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2894:	0c 00 3d    	bra       GE, 0x28ae <.L15>
    2896:	60 44 b8    	mul.uu    w8, #0x0, w8
    2898:	60 55 b8    	mul.uu    w10, #0x0, w10
    289a:	00 00 54    	sub.w     w8, w0, w0
    289c:	81 80 5c    	subb.w    w9, w1, w1
    289e:	02 01 5d    	subb.w    w10, w2, w2
    28a0:	83 81 5d    	subb.w    w11, w3, w3
    28a2:	18 00 20    	mov.w     #0x1, w8
    28a4:	15 00 07    	rcall     0x28d0 <L0>
    28a6:	08 00 3d    	bra       GE, 0x28b8 <.L16>
    28a8:	18 00 07    	rcall     0x28da <.LPA1>
    28aa:	00 04 eb    	clr.w     w8
    28ac:	05 00 37    	bra       0x28b8 <.L16>

000028ae <.L15>:
    28ae:	00 04 eb    	clr.w     w8
    28b0:	0f 00 07    	rcall     0x28d0 <L0>
    28b2:	02 00 3d    	bra       GE, 0x28b8 <.L16>
    28b4:	12 00 07    	rcall     0x28da <.LPA1>
    28b6:	18 00 20    	mov.w     #0x1, w8

000028b8 <.L16>:
    28b8:	dc ff 07    	rcall     0x2872 <___udivdi3>
    28ba:	08 00 e0    	cp0.w     w8
    28bc:	06 00 32    	bra       Z, 0x28ca <.L17>
    28be:	60 22 b8    	mul.uu    w4, #0x0, w4
    28c0:	60 33 b8    	mul.uu    w6, #0x0, w6
    28c2:	00 00 52    	sub.w     w4, w0, w0
    28c4:	81 80 5a    	subb.w    w5, w1, w1
    28c6:	02 01 5b    	subb.w    w6, w2, w2
    28c8:	83 81 5b    	subb.w    w7, w3, w3

000028ca <.L17>:
    28ca:	4f 05 be    	mov.d     [--w15], w10
    28cc:	4f 04 be    	mov.d     [--w15], w8
    28ce:	00 00 06    	return    

000028d0 <L0>:
    28d0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    28d2:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    28d4:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    28d6:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    28d8:	00 00 06    	return    

000028da <.LPA1>:
    28da:	60 44 b8    	mul.uu    w8, #0x0, w8
    28dc:	60 55 b8    	mul.uu    w10, #0x0, w10
    28de:	04 02 54    	sub.w     w8, w4, w4
    28e0:	85 82 5c    	subb.w    w9, w5, w5
    28e2:	06 03 5d    	subb.w    w10, w6, w6
    28e4:	87 83 5d    	subb.w    w11, w7, w7
    28e6:	00 00 06    	return    

000028e8 <___moddi3>:
    28e8:	88 9f be    	mov.d     w8, [w15++]
    28ea:	8a 9f be    	mov.d     w10, [w15++]
    28ec:	8c 1f 78    	mov.w     w12, [w15++]
    28ee:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    28f0:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    28f2:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    28f4:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    28f6:	0d 00 3d    	bra       GE, 0x2912 <.L21>
    28f8:	60 44 b8    	mul.uu    w8, #0x0, w8
    28fa:	60 55 b8    	mul.uu    w10, #0x0, w10
    28fc:	00 00 54    	sub.w     w8, w0, w0
    28fe:	81 80 5c    	subb.w    w9, w1, w1
    2900:	02 01 5d    	subb.w    w10, w2, w2
    2902:	83 81 5d    	subb.w    w11, w3, w3
    2904:	1c 00 20    	mov.w     #0x1, w12
    2906:	08 20 e1    	cp.w      w4, w8
    2908:	09 a8 e1    	cpb.w     w5, w9
    290a:	0a b0 e1    	cpb.w     w6, w10
    290c:	0b b8 e1    	cpb.w     w7, w11
    290e:	0d 00 3d    	bra       GE, 0x292a <.L22>
    2910:	08 00 37    	bra       0x2922 <.L26>

00002912 <.L21>:
    2912:	00 06 eb    	clr.w     w12
    2914:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2916:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2918:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    291a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    291c:	06 00 3d    	bra       GE, 0x292a <.L22>
    291e:	60 44 b8    	mul.uu    w8, #0x0, w8
    2920:	60 55 b8    	mul.uu    w10, #0x0, w10

00002922 <.L26>:
    2922:	04 02 54    	sub.w     w8, w4, w4
    2924:	85 82 5c    	subb.w    w9, w5, w5
    2926:	06 03 5d    	subb.w    w10, w6, w6
    2928:	87 83 5d    	subb.w    w11, w7, w7

0000292a <.L22>:
    292a:	aa ff 07    	rcall     0x2880 <___umoddi3>
    292c:	0c 00 e0    	cp0.w     w12
    292e:	06 00 32    	bra       Z, 0x293c <.L23>
    2930:	60 22 b8    	mul.uu    w4, #0x0, w4
    2932:	60 33 b8    	mul.uu    w6, #0x0, w6
    2934:	00 00 52    	sub.w     w4, w0, w0
    2936:	81 80 5a    	subb.w    w5, w1, w1
    2938:	02 01 5b    	subb.w    w6, w2, w2
    293a:	83 81 5b    	subb.w    w7, w3, w3

0000293c <.L23>:
    293c:	4f 06 78    	mov.w     [--w15], w12
    293e:	4f 05 be    	mov.d     [--w15], w10
    2940:	4f 04 be    	mov.d     [--w15], w8
    2942:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	5a 41 04    	goto      0x415a <__T1Interrupt>
    1026:	00 00 00 
    1028:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	88 41 04    	goto      0x4188 <__T2Interrupt>
    1032:	00 00 00 
    1034:	b6 41 04    	goto      0x41b6 <__T3Interrupt>
    1036:	00 00 00 
    1038:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	f2 2b 04    	goto      0x2bf2 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	c4 2b 04    	goto      0x2bc4 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	e4 41 04    	goto      0x41e4 <__T4Interrupt>
    1072:	00 00 00 
    1074:	12 42 04    	goto      0x4212 <__T5Interrupt>
    1076:	00 00 00 
    1078:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	4e 2c 04    	goto      0x2c4e <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	20 2c 04    	goto      0x2c20 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	aa 2c 04    	goto      0x2caa <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	7c 2c 04    	goto      0x2c7c <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	da 40 04    	goto      0x40da <__USB1Interrupt>
    10ee:	00 00 00 
    10f0:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	06 2d 04    	goto      0x2d06 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	d8 2c 04    	goto      0x2cd8 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	82 50 04    	goto      0x5082 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a944 <.LC0-0x62>:
    a944:	12 01       	.word 0x112
    a946:	00 02       	.word 0x200
    a948:	00 00       	.word 0
    a94a:	00 40       	.word 0x4000
    a94c:	66 66       	.word 0x6666
    a94e:	03 00       	.word 0x3
    a950:	00 00       	.word 0
    a952:	01 02       	.word 0x201
    a954:	00 01       	.word 0x100
    a956:	09 02       	.word 0x209
    a958:	12 00       	.word 0x12
    a95a:	01 01       	.word 0x101
    a95c:	00 a0       	.word 0xa000
    a95e:	32 09       	.word 0x932
    a960:	04 00       	.word 0x4
    a962:	00 00       	.word 0
    a964:	ff 00       	.word 0xff
    a966:	ff 00       	.word 0xff
    a968:	04 03       	.word 0x304
    a96a:	09 04       	.word 0x409
    a96c:	1a 03       	.word 0x31a
    a96e:	4f 00       	.word 0x4f
    a970:	6c 00       	.word 0x6c
    a972:	69 00       	.word 0x69
    a974:	6e 00       	.word 0x6e
    a976:	20 00       	.word 0x20
    a978:	43 00       	.word 0x43
    a97a:	6f 00       	.word 0x6f
    a97c:	6c 00       	.word 0x6c
    a97e:	6c 00       	.word 0x6c
    a980:	65 00       	.word 0x65
    a982:	67 00       	.word 0x67
    a984:	65 00       	.word 0x65
    a986:	20 03       	.word 0x320
    a988:	50 00       	.word 0x50
    a98a:	49 00       	.word 0x49
    a98c:	43 00       	.word 0x43
    a98e:	32 00       	.word 0x32
    a990:	34 00       	.word 0x34
    a992:	46 00       	.word 0x46
    a994:	4a 00       	.word 0x4a
    a996:	31 00       	.word 0x31
    a998:	32 00       	.word 0x32
    a99a:	38 00       	.word 0x38
    a99c:	47 00       	.word 0x47
    a99e:	42 00       	.word 0x42
    a9a0:	32 00       	.word 0x32
    a9a2:	30 00       	.word 0x30
    a9a4:	36 00       	.word 0x36

0000a9a6 <.LC0>:
    a9a6:	25 30       	.word 0x3025
    a9a8:	31 78       	.word 0x7831
    a9aa:	25 30       	.word 0x3025
    a9ac:	31 78       	.word 0x7831
    a9ae:	0d 00       	.word 0xd

0000a9b0 <.LC1>:
    a9b0:	52 4d       	.word 0x4d52
    a9b2:	3a 20       	.word 0x203a
    a9b4:	25 73       	.word 0x7325
    a9b6:	20 0a       	.word 0xa20
    a9b8:	0d 00       	.word 0xd

0000a9ba <.LC2>:
    a9ba:	44 4d       	.word 0x4d44
    a9bc:	3a 20       	.word 0x203a
    a9be:	25 64       	.word 0x6425
    a9c0:	20 0a       	.word 0xa20
    a9c2:	0d 00       	.word 0xd

0000a9c4 <.LC3>:
    a9c4:	42 4c       	.word 0x4c42
    a9c6:	49 4e       	.word 0x4e49
    a9c8:	4b 0a       	.word 0xa4b
    a9ca:	0d 00       	.word 0xd
Disassembly of section .text:

000029cc <___putc_nobuffer>:
_PIN TX2, RX2, RTS2, CTS2;

uint8_t HWTXBUF[1024], HWRXBUF[1024];

void __putc_nobuffer(_UART *self, uint8_t ch) {
    29cc:	04 00 fa    	lnk       #0x4
    29ce:	00 0f 78    	mov.w     w0, [w14]
    29d0:	21 47 98    	mov.b     w1, [w14+2]

000029d2 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    29d2:	00 00 00    	nop       

000029d4 <.L2>:
    29d4:	1e 00 78    	mov.w     [w14], w0
    29d6:	10 00 90    	mov.w     [w0+2], w0
    29d8:	90 00 78    	mov.w     [w0], w1
    29da:	00 20 20    	mov.w     #0x200, w0
    29dc:	00 80 60    	and.w     w1, w0, w0
    29de:	00 00 e0    	cp0.w     w0
    29e0:	f9 ff 3a    	bra       NZ, 0x29d4 <.L2>

000029e2 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    29e2:	1e 00 78    	mov.w     [w14], w0
    29e4:	20 00 90    	mov.w     [w0+4], w0
    29e6:	ae 40 90    	mov.b     [w14+2], w1
    29e8:	81 80 fb    	ze        w1, w1
    29ea:	01 08 78    	mov.w     w1, [w0]

000029ec <.LSM3>:
}
    29ec:	00 80 fa    	ulnk      
    29ee:	00 00 06    	return    

000029f0 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    29f0:	02 00 fa    	lnk       #0x2
    29f2:	00 0f 78    	mov.w     w0, [w14]

000029f4 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    29f4:	00 00 00    	nop       

000029f6 <.L4>:
    29f6:	1e 00 78    	mov.w     [w14], w0
    29f8:	10 00 90    	mov.w     [w0+2], w0
    29fa:	10 00 78    	mov.w     [w0], w0
    29fc:	61 00 60    	and.w     w0, #0x1, w0
    29fe:	00 00 e0    	cp0.w     w0
    2a00:	fa ff 32    	bra       Z, 0x29f6 <.L4>

00002a02 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    2a02:	1e 00 78    	mov.w     [w14], w0
    2a04:	30 00 90    	mov.w     [w0+6], w0
    2a06:	10 00 78    	mov.w     [w0], w0
    2a08:	00 40 78    	mov.b     w0, w0

00002a0a <.LSM7>:
}
    2a0a:	00 80 fa    	ulnk      
    2a0c:	00 00 06    	return    

00002a0e <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    2a0e:	04 00 fa    	lnk       #0x4
    2a10:	00 0f 78    	mov.w     w0, [w14]
    2a12:	21 47 98    	mov.b     w1, [w14+2]

00002a14 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    2a14:	00 00 00    	nop       

00002a16 <.L6>:
    2a16:	1e 00 78    	mov.w     [w14], w0
    2a18:	d0 10 90    	mov.w     [w0+42], w1
    2a1a:	1e 00 78    	mov.w     [w14], w0
    2a1c:	20 10 90    	mov.w     [w0+36], w0
    2a1e:	80 8f 50    	sub.w     w1, w0, [w15]
    2a20:	fa ff 32    	bra       Z, 0x2a16 <.L6>

00002a22 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    2a22:	ff 3f fc    	disi      #0x3fff

00002a24 <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    2a24:	1e 00 78    	mov.w     [w14], w0
    2a26:	90 10 90    	mov.w     [w0+34], w1
    2a28:	1e 00 78    	mov.w     [w14], w0
    2a2a:	40 10 90    	mov.w     [w0+40], w0
    2a2c:	00 80 40    	add.w     w1, w0, w0
    2a2e:	ae 40 90    	mov.b     [w14+2], w1
    2a30:	01 48 78    	mov.b     w1, [w0]

00002a32 <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    2a32:	1e 00 78    	mov.w     [w14], w0
    2a34:	40 10 90    	mov.w     [w0+40], w0
    2a36:	80 00 e8    	inc.w     w0, w1
    2a38:	1e 00 78    	mov.w     [w14], w0
    2a3a:	20 10 90    	mov.w     [w0+36], w0
    2a3c:	00 01 78    	mov.w     w0, w2
    2a3e:	11 00 09    	repeat    #0x11
    2a40:	82 80 d8    	div.uw    w1, w2
    2a42:	80 00 fd    	exch      w0, w1
    2a44:	80 00 78    	mov.w     w0, w1
    2a46:	1e 00 78    	mov.w     [w14], w0
    2a48:	41 10 98    	mov.w     w1, [w0+40]

00002a4a <.LSM13>:
    self->TXbuffer.count++;
    2a4a:	1e 00 78    	mov.w     [w14], w0
    2a4c:	50 10 90    	mov.w     [w0+42], w0
    2a4e:	80 00 e8    	inc.w     w0, w1
    2a50:	1e 00 78    	mov.w     [w14], w0
    2a52:	51 10 98    	mov.w     w1, [w0+42]

00002a54 <.LSM14>:
    enable_interrupts();
    2a54:	52 20 ef    	clr.w     0x52

00002a56 <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    2a56:	1e 00 78    	mov.w     [w14], w0
    2a58:	d0 10 90    	mov.w     [w0+42], w1
    2a5a:	1e 00 78    	mov.w     [w14], w0
    2a5c:	30 18 90    	mov.w     [w0+54], w0
    2a5e:	80 8f 50    	sub.w     w1, w0, [w15]
    2a60:	08 00 39    	bra       NC, 0x2a72 <.L5>

00002a62 <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    2a62:	1e 00 78    	mov.w     [w14], w0
    2a64:	10 00 90    	mov.w     [w0+2], w0
    2a66:	9e 00 78    	mov.w     [w14], w1
    2a68:	91 00 90    	mov.w     [w1+2], w1
    2a6a:	11 01 78    	mov.w     [w1], w2
    2a6c:	01 40 20    	mov.w     #0x400, w1
    2a6e:	82 80 70    	ior.w     w1, w2, w1
    2a70:	01 08 78    	mov.w     w1, [w0]

00002a72 <.L5>:
                                                    // transmission
}
    2a72:	00 80 fa    	ulnk      
    2a74:	00 00 06    	return    

00002a76 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    2a76:	04 00 fa    	lnk       #0x4
    2a78:	10 07 98    	mov.w     w0, [w14+2]

00002a7a <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2a7a:	1e 00 90    	mov.w     [w14+2], w0
    2a7c:	50 00 90    	mov.w     [w0+10], w0
    2a7e:	9e 00 90    	mov.w     [w14+2], w1
    2a80:	d1 00 90    	mov.w     [w1+10], w1
    2a82:	11 01 78    	mov.w     [w1], w2
    2a84:	9e 00 90    	mov.w     [w14+2], w1
    2a86:	e1 48 90    	mov.b     [w1+14], w1
    2a88:	81 80 fb    	ze        w1, w1
    2a8a:	13 00 20    	mov.w     #0x1, w3
    2a8c:	81 18 dd    	sl.w      w3, w1, w1
    2a8e:	81 80 ea    	com.w     w1, w1
    2a90:	81 00 61    	and.w     w2, w1, w1
    2a92:	01 08 78    	mov.w     w1, [w0]

00002a94 <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    2a94:	1e 00 90    	mov.w     [w14+2], w0
    2a96:	50 10 90    	mov.w     [w0+42], w0
    2a98:	00 00 e0    	cp0.w     w0
    2a9a:	27 00 3a    	bra       NZ, 0x2aea <.L13>

00002a9c <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    2a9c:	1e 00 90    	mov.w     [w14+2], w0
    2a9e:	10 00 90    	mov.w     [w0+2], w0
    2aa0:	9e 00 90    	mov.w     [w14+2], w1
    2aa2:	91 00 90    	mov.w     [w1+2], w1
    2aa4:	11 01 78    	mov.w     [w1], w2
    2aa6:	f1 bf 2f    	mov.w     #0xfbff, w1
    2aa8:	81 00 61    	and.w     w2, w1, w1
    2aaa:	01 08 78    	mov.w     w1, [w0]

00002aac <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    2aac:	1f 00 37    	bra       0x2aec <.L10>

00002aae <.L12>:
        disable_interrupts();
    2aae:	ff 3f fc    	disi      #0x3fff

00002ab0 <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    2ab0:	1e 00 90    	mov.w     [w14+2], w0
    2ab2:	90 10 90    	mov.w     [w0+34], w1
    2ab4:	1e 00 90    	mov.w     [w14+2], w0
    2ab6:	30 10 90    	mov.w     [w0+38], w0
    2ab8:	00 80 40    	add.w     w1, w0, w0
    2aba:	10 4f 78    	mov.b     [w0], [w14]

00002abc <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    2abc:	1e 00 90    	mov.w     [w14+2], w0
    2abe:	30 10 90    	mov.w     [w0+38], w0
    2ac0:	80 00 e8    	inc.w     w0, w1
    2ac2:	1e 00 90    	mov.w     [w14+2], w0
    2ac4:	20 10 90    	mov.w     [w0+36], w0
    2ac6:	00 01 78    	mov.w     w0, w2
    2ac8:	11 00 09    	repeat    #0x11
    2aca:	82 80 d8    	div.uw    w1, w2
    2acc:	80 00 fd    	exch      w0, w1
    2ace:	80 00 78    	mov.w     w0, w1
    2ad0:	1e 00 90    	mov.w     [w14+2], w0
    2ad2:	31 10 98    	mov.w     w1, [w0+38]

00002ad4 <.LSM26>:
        self->TXbuffer.count--;
    2ad4:	1e 00 90    	mov.w     [w14+2], w0
    2ad6:	50 10 90    	mov.w     [w0+42], w0
    2ad8:	80 00 e9    	dec.w     w0, w1
    2ada:	1e 00 90    	mov.w     [w14+2], w0
    2adc:	51 10 98    	mov.w     w1, [w0+42]

00002ade <.LSM27>:
        enable_interrupts();
    2ade:	52 20 ef    	clr.w     0x52

00002ae0 <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    2ae0:	1e 00 90    	mov.w     [w14+2], w0
    2ae2:	20 00 90    	mov.w     [w0+4], w0
    2ae4:	9e 80 fb    	ze        [w14], w1
    2ae6:	01 08 78    	mov.w     w1, [w0]
    2ae8:	01 00 37    	bra       0x2aec <.L10>

00002aea <.L13>:
    2aea:	00 00 00    	nop       

00002aec <.L10>:
    2aec:	1e 00 90    	mov.w     [w14+2], w0
    2aee:	10 00 90    	mov.w     [w0+2], w0
    2af0:	90 00 78    	mov.w     [w0], w1
    2af2:	00 20 20    	mov.w     #0x200, w0
    2af4:	00 80 60    	and.w     w1, w0, w0
    2af6:	00 00 e0    	cp0.w     w0
    2af8:	04 00 3a    	bra       NZ, 0x2b02 <.L8>
    2afa:	1e 00 90    	mov.w     [w14+2], w0
    2afc:	50 10 90    	mov.w     [w0+42], w0
    2afe:	00 00 e0    	cp0.w     w0
    2b00:	d6 ff 3a    	bra       NZ, 0x2aae <.L12>

00002b02 <.L8>:
    }
}
    2b02:	00 80 fa    	ulnk      
    2b04:	00 00 06    	return    

00002b06 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    2b06:	04 00 fa    	lnk       #0x4
    2b08:	10 07 98    	mov.w     w0, [w14+2]

00002b0a <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    2b0a:	00 00 00    	nop       

00002b0c <.L15>:
    2b0c:	1e 00 90    	mov.w     [w14+2], w0
    2b0e:	20 18 90    	mov.w     [w0+52], w0
    2b10:	00 00 e0    	cp0.w     w0
    2b12:	fc ff 32    	bra       Z, 0x2b0c <.L15>

00002b14 <.LSM33>:
    disable_interrupts();
    2b14:	ff 3f fc    	disi      #0x3fff

00002b16 <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    2b16:	1e 00 90    	mov.w     [w14+2], w0
    2b18:	e0 10 90    	mov.w     [w0+44], w1
    2b1a:	1e 00 90    	mov.w     [w14+2], w0
    2b1c:	00 18 90    	mov.w     [w0+48], w0
    2b1e:	00 80 40    	add.w     w1, w0, w0
    2b20:	10 4f 78    	mov.b     [w0], [w14]

00002b22 <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    2b22:	1e 00 90    	mov.w     [w14+2], w0
    2b24:	00 18 90    	mov.w     [w0+48], w0
    2b26:	80 00 e8    	inc.w     w0, w1
    2b28:	1e 00 90    	mov.w     [w14+2], w0
    2b2a:	70 10 90    	mov.w     [w0+46], w0
    2b2c:	00 01 78    	mov.w     w0, w2
    2b2e:	11 00 09    	repeat    #0x11
    2b30:	82 80 d8    	div.uw    w1, w2
    2b32:	80 00 fd    	exch      w0, w1
    2b34:	80 00 78    	mov.w     w0, w1
    2b36:	1e 00 90    	mov.w     [w14+2], w0
    2b38:	01 18 98    	mov.w     w1, [w0+48]

00002b3a <.LSM36>:
    self->RXbuffer.count--;
    2b3a:	1e 00 90    	mov.w     [w14+2], w0
    2b3c:	20 18 90    	mov.w     [w0+52], w0
    2b3e:	80 00 e9    	dec.w     w0, w1
    2b40:	1e 00 90    	mov.w     [w14+2], w0
    2b42:	21 18 98    	mov.w     w1, [w0+52]

00002b44 <.LSM37>:
    enable_interrupts();
    2b44:	52 20 ef    	clr.w     0x52

00002b46 <.LSM38>:
    return ch;
    2b46:	1e 40 78    	mov.b     [w14], w0

00002b48 <.LSM39>:
}
    2b48:	00 80 fa    	ulnk      
    2b4a:	00 00 06    	return    

00002b4c <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    2b4c:	02 00 fa    	lnk       #0x2
    2b4e:	00 0f 78    	mov.w     w0, [w14]

00002b50 <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2b50:	1e 00 78    	mov.w     [w14], w0
    2b52:	50 00 90    	mov.w     [w0+10], w0
    2b54:	9e 00 78    	mov.w     [w14], w1
    2b56:	d1 00 90    	mov.w     [w1+10], w1
    2b58:	11 01 78    	mov.w     [w1], w2
    2b5a:	9e 00 78    	mov.w     [w14], w1
    2b5c:	f1 48 90    	mov.b     [w1+15], w1
    2b5e:	81 80 fb    	ze        w1, w1
    2b60:	13 00 20    	mov.w     #0x1, w3
    2b62:	81 18 dd    	sl.w      w3, w1, w1
    2b64:	81 80 ea    	com.w     w1, w1
    2b66:	81 00 61    	and.w     w2, w1, w1
    2b68:	01 08 78    	mov.w     w1, [w0]

00002b6a <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    2b6a:	1d 00 37    	bra       0x2ba6 <.L17>

00002b6c <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    2b6c:	ff 3f fc    	disi      #0x3fff

00002b6e <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    2b6e:	1e 00 78    	mov.w     [w14], w0
    2b70:	e0 10 90    	mov.w     [w0+44], w1
    2b72:	1e 00 78    	mov.w     [w14], w0
    2b74:	10 18 90    	mov.w     [w0+50], w0
    2b76:	00 80 40    	add.w     w1, w0, w0
    2b78:	9e 00 78    	mov.w     [w14], w1
    2b7a:	b1 00 90    	mov.w     [w1+6], w1
    2b7c:	91 00 78    	mov.w     [w1], w1
    2b7e:	81 40 78    	mov.b     w1, w1
    2b80:	01 48 78    	mov.b     w1, [w0]

00002b82 <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    2b82:	1e 00 78    	mov.w     [w14], w0
    2b84:	10 18 90    	mov.w     [w0+50], w0
    2b86:	80 00 e8    	inc.w     w0, w1
    2b88:	1e 00 78    	mov.w     [w14], w0
    2b8a:	70 10 90    	mov.w     [w0+46], w0
    2b8c:	00 01 78    	mov.w     w0, w2
    2b8e:	11 00 09    	repeat    #0x11
    2b90:	82 80 d8    	div.uw    w1, w2
    2b92:	80 00 fd    	exch      w0, w1
    2b94:	80 00 78    	mov.w     w0, w1
    2b96:	1e 00 78    	mov.w     [w14], w0
    2b98:	11 18 98    	mov.w     w1, [w0+50]

00002b9a <.LSM46>:
        self->RXbuffer.count++;
    2b9a:	1e 00 78    	mov.w     [w14], w0
    2b9c:	20 18 90    	mov.w     [w0+52], w0
    2b9e:	80 00 e8    	inc.w     w0, w1
    2ba0:	1e 00 78    	mov.w     [w14], w0
    2ba2:	21 18 98    	mov.w     w1, [w0+52]

00002ba4 <.LSM47>:
        enable_interrupts();
    2ba4:	52 20 ef    	clr.w     0x52

00002ba6 <.L17>:
    2ba6:	1e 00 78    	mov.w     [w14], w0
    2ba8:	10 00 90    	mov.w     [w0+2], w0
    2baa:	10 00 78    	mov.w     [w0], w0
    2bac:	61 00 60    	and.w     w0, #0x1, w0
    2bae:	00 40 78    	mov.b     w0, w0
    2bb0:	00 04 e0    	cp0.b     w0
    2bb2:	06 00 32    	bra       Z, 0x2bc0 <.L16>

00002bb4 <.LSM49>:
    2bb4:	1e 00 78    	mov.w     [w14], w0
    2bb6:	a0 18 90    	mov.w     [w0+52], w1
    2bb8:	1e 00 78    	mov.w     [w14], w0
    2bba:	70 10 90    	mov.w     [w0+46], w0

00002bbc <.LSM50>:
    2bbc:	80 8f 50    	sub.w     w1, w0, [w15]
    2bbe:	d6 ff 3a    	bra       NZ, 0x2b6c <.L19>

00002bc0 <.L16>:
    }
}
    2bc0:	00 80 fa    	ulnk      
    2bc2:	00 00 06    	return    

00002bc4 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    2bc4:	36 00 f8    	push      0x36
    2bc6:	80 9f be    	mov.d     w0, [w15++]
    2bc8:	82 9f be    	mov.d     w2, [w15++]
    2bca:	84 9f be    	mov.d     w4, [w15++]
    2bcc:	86 9f be    	mov.d     w6, [w15++]
    2bce:	32 00 f8    	push      0x32
    2bd0:	34 00 f8    	push      0x34
    2bd2:	10 00 20    	mov.w     #0x1, w0
    2bd4:	a0 01 88    	mov.w     w0, 0x34
    2bd6:	00 20 20    	mov.w     #0x200, w0
    2bd8:	90 01 88    	mov.w     w0, 0x32
    2bda:	00 00 fa    	lnk       #0x0

00002bdc <.LSM53>:
    __serviceTxInterrupt(&uart1);
    2bdc:	c0 84 20    	mov.w     #0x84c, w0
    2bde:	4b ff 07    	rcall     0x2a76 <___serviceTxInterrupt>

00002be0 <.LSM54>:
}
    2be0:	00 80 fa    	ulnk      
    2be2:	34 00 f9    	pop       0x34
    2be4:	32 00 f9    	pop       0x32
    2be6:	4f 03 be    	mov.d     [--w15], w6
    2be8:	4f 02 be    	mov.d     [--w15], w4
    2bea:	4f 01 be    	mov.d     [--w15], w2
    2bec:	4f 00 be    	mov.d     [--w15], w0
    2bee:	36 00 f9    	pop       0x36
    2bf0:	00 40 06    	retfie    

00002bf2 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    2bf2:	36 00 f8    	push      0x36
    2bf4:	80 9f be    	mov.d     w0, [w15++]
    2bf6:	82 9f be    	mov.d     w2, [w15++]
    2bf8:	84 9f be    	mov.d     w4, [w15++]
    2bfa:	86 9f be    	mov.d     w6, [w15++]
    2bfc:	32 00 f8    	push      0x32
    2bfe:	34 00 f8    	push      0x34
    2c00:	10 00 20    	mov.w     #0x1, w0
    2c02:	a0 01 88    	mov.w     w0, 0x34
    2c04:	00 20 20    	mov.w     #0x200, w0
    2c06:	90 01 88    	mov.w     w0, 0x32
    2c08:	00 00 fa    	lnk       #0x0

00002c0a <.LSM56>:
    __serviceRxInterrupt(&uart1);
    2c0a:	c0 84 20    	mov.w     #0x84c, w0
    2c0c:	9f ff 07    	rcall     0x2b4c <___serviceRxInterrupt>

00002c0e <.LSM57>:
}
    2c0e:	00 80 fa    	ulnk      
    2c10:	34 00 f9    	pop       0x34
    2c12:	32 00 f9    	pop       0x32
    2c14:	4f 03 be    	mov.d     [--w15], w6
    2c16:	4f 02 be    	mov.d     [--w15], w4
    2c18:	4f 01 be    	mov.d     [--w15], w2
    2c1a:	4f 00 be    	mov.d     [--w15], w0
    2c1c:	36 00 f9    	pop       0x36
    2c1e:	00 40 06    	retfie    

00002c20 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    2c20:	36 00 f8    	push      0x36
    2c22:	80 9f be    	mov.d     w0, [w15++]
    2c24:	82 9f be    	mov.d     w2, [w15++]
    2c26:	84 9f be    	mov.d     w4, [w15++]
    2c28:	86 9f be    	mov.d     w6, [w15++]
    2c2a:	32 00 f8    	push      0x32
    2c2c:	34 00 f8    	push      0x34
    2c2e:	10 00 20    	mov.w     #0x1, w0
    2c30:	a0 01 88    	mov.w     w0, 0x34
    2c32:	00 20 20    	mov.w     #0x200, w0
    2c34:	90 01 88    	mov.w     w0, 0x32
    2c36:	00 00 fa    	lnk       #0x0

00002c38 <.LSM59>:
    __serviceTxInterrupt(&uart2);
    2c38:	80 88 20    	mov.w     #0x888, w0
    2c3a:	1d ff 07    	rcall     0x2a76 <___serviceTxInterrupt>

00002c3c <.LSM60>:
}
    2c3c:	00 80 fa    	ulnk      
    2c3e:	34 00 f9    	pop       0x34
    2c40:	32 00 f9    	pop       0x32
    2c42:	4f 03 be    	mov.d     [--w15], w6
    2c44:	4f 02 be    	mov.d     [--w15], w4
    2c46:	4f 01 be    	mov.d     [--w15], w2
    2c48:	4f 00 be    	mov.d     [--w15], w0
    2c4a:	36 00 f9    	pop       0x36
    2c4c:	00 40 06    	retfie    

00002c4e <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2c4e:	36 00 f8    	push      0x36
    2c50:	80 9f be    	mov.d     w0, [w15++]
    2c52:	82 9f be    	mov.d     w2, [w15++]
    2c54:	84 9f be    	mov.d     w4, [w15++]
    2c56:	86 9f be    	mov.d     w6, [w15++]
    2c58:	32 00 f8    	push      0x32
    2c5a:	34 00 f8    	push      0x34
    2c5c:	10 00 20    	mov.w     #0x1, w0
    2c5e:	a0 01 88    	mov.w     w0, 0x34
    2c60:	00 20 20    	mov.w     #0x200, w0
    2c62:	90 01 88    	mov.w     w0, 0x32
    2c64:	00 00 fa    	lnk       #0x0

00002c66 <.LSM62>:
    __serviceRxInterrupt(&uart2);
    2c66:	80 88 20    	mov.w     #0x888, w0
    2c68:	71 ff 07    	rcall     0x2b4c <___serviceRxInterrupt>

00002c6a <.LSM63>:
}
    2c6a:	00 80 fa    	ulnk      
    2c6c:	34 00 f9    	pop       0x34
    2c6e:	32 00 f9    	pop       0x32
    2c70:	4f 03 be    	mov.d     [--w15], w6
    2c72:	4f 02 be    	mov.d     [--w15], w4
    2c74:	4f 01 be    	mov.d     [--w15], w2
    2c76:	4f 00 be    	mov.d     [--w15], w0
    2c78:	36 00 f9    	pop       0x36
    2c7a:	00 40 06    	retfie    

00002c7c <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    2c7c:	36 00 f8    	push      0x36
    2c7e:	80 9f be    	mov.d     w0, [w15++]
    2c80:	82 9f be    	mov.d     w2, [w15++]
    2c82:	84 9f be    	mov.d     w4, [w15++]
    2c84:	86 9f be    	mov.d     w6, [w15++]
    2c86:	32 00 f8    	push      0x32
    2c88:	34 00 f8    	push      0x34
    2c8a:	10 00 20    	mov.w     #0x1, w0
    2c8c:	a0 01 88    	mov.w     w0, 0x34
    2c8e:	00 20 20    	mov.w     #0x200, w0
    2c90:	90 01 88    	mov.w     w0, 0x32
    2c92:	00 00 fa    	lnk       #0x0

00002c94 <.LSM65>:
    __serviceTxInterrupt(&uart3);
    2c94:	40 8c 20    	mov.w     #0x8c4, w0
    2c96:	ef fe 07    	rcall     0x2a76 <___serviceTxInterrupt>

00002c98 <.LSM66>:
}
    2c98:	00 80 fa    	ulnk      
    2c9a:	34 00 f9    	pop       0x34
    2c9c:	32 00 f9    	pop       0x32
    2c9e:	4f 03 be    	mov.d     [--w15], w6
    2ca0:	4f 02 be    	mov.d     [--w15], w4
    2ca2:	4f 01 be    	mov.d     [--w15], w2
    2ca4:	4f 00 be    	mov.d     [--w15], w0
    2ca6:	36 00 f9    	pop       0x36
    2ca8:	00 40 06    	retfie    

00002caa <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    2caa:	36 00 f8    	push      0x36
    2cac:	80 9f be    	mov.d     w0, [w15++]
    2cae:	82 9f be    	mov.d     w2, [w15++]
    2cb0:	84 9f be    	mov.d     w4, [w15++]
    2cb2:	86 9f be    	mov.d     w6, [w15++]
    2cb4:	32 00 f8    	push      0x32
    2cb6:	34 00 f8    	push      0x34
    2cb8:	10 00 20    	mov.w     #0x1, w0
    2cba:	a0 01 88    	mov.w     w0, 0x34
    2cbc:	00 20 20    	mov.w     #0x200, w0
    2cbe:	90 01 88    	mov.w     w0, 0x32
    2cc0:	00 00 fa    	lnk       #0x0

00002cc2 <.LSM68>:
    __serviceRxInterrupt(&uart3);
    2cc2:	40 8c 20    	mov.w     #0x8c4, w0
    2cc4:	43 ff 07    	rcall     0x2b4c <___serviceRxInterrupt>

00002cc6 <.LSM69>:
}
    2cc6:	00 80 fa    	ulnk      
    2cc8:	34 00 f9    	pop       0x34
    2cca:	32 00 f9    	pop       0x32
    2ccc:	4f 03 be    	mov.d     [--w15], w6
    2cce:	4f 02 be    	mov.d     [--w15], w4
    2cd0:	4f 01 be    	mov.d     [--w15], w2
    2cd2:	4f 00 be    	mov.d     [--w15], w0
    2cd4:	36 00 f9    	pop       0x36
    2cd6:	00 40 06    	retfie    

00002cd8 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    2cd8:	36 00 f8    	push      0x36
    2cda:	80 9f be    	mov.d     w0, [w15++]
    2cdc:	82 9f be    	mov.d     w2, [w15++]
    2cde:	84 9f be    	mov.d     w4, [w15++]
    2ce0:	86 9f be    	mov.d     w6, [w15++]
    2ce2:	32 00 f8    	push      0x32
    2ce4:	34 00 f8    	push      0x34
    2ce6:	10 00 20    	mov.w     #0x1, w0
    2ce8:	a0 01 88    	mov.w     w0, 0x34
    2cea:	00 20 20    	mov.w     #0x200, w0
    2cec:	90 01 88    	mov.w     w0, 0x32
    2cee:	00 00 fa    	lnk       #0x0

00002cf0 <.LSM71>:
    __serviceTxInterrupt(&uart4);
    2cf0:	00 90 20    	mov.w     #0x900, w0
    2cf2:	c1 fe 07    	rcall     0x2a76 <___serviceTxInterrupt>

00002cf4 <.LSM72>:
}
    2cf4:	00 80 fa    	ulnk      
    2cf6:	34 00 f9    	pop       0x34
    2cf8:	32 00 f9    	pop       0x32
    2cfa:	4f 03 be    	mov.d     [--w15], w6
    2cfc:	4f 02 be    	mov.d     [--w15], w4
    2cfe:	4f 01 be    	mov.d     [--w15], w2
    2d00:	4f 00 be    	mov.d     [--w15], w0
    2d02:	36 00 f9    	pop       0x36
    2d04:	00 40 06    	retfie    

00002d06 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    2d06:	36 00 f8    	push      0x36
    2d08:	80 9f be    	mov.d     w0, [w15++]
    2d0a:	82 9f be    	mov.d     w2, [w15++]
    2d0c:	84 9f be    	mov.d     w4, [w15++]
    2d0e:	86 9f be    	mov.d     w6, [w15++]
    2d10:	32 00 f8    	push      0x32
    2d12:	34 00 f8    	push      0x34
    2d14:	10 00 20    	mov.w     #0x1, w0
    2d16:	a0 01 88    	mov.w     w0, 0x34
    2d18:	00 20 20    	mov.w     #0x200, w0
    2d1a:	90 01 88    	mov.w     w0, 0x32
    2d1c:	00 00 fa    	lnk       #0x0

00002d1e <.LSM74>:
    __serviceRxInterrupt(&uart4);
    2d1e:	00 90 20    	mov.w     #0x900, w0
    2d20:	15 ff 07    	rcall     0x2b4c <___serviceRxInterrupt>

00002d22 <.LSM75>:
}
    2d22:	00 80 fa    	ulnk      
    2d24:	34 00 f9    	pop       0x34
    2d26:	32 00 f9    	pop       0x32
    2d28:	4f 03 be    	mov.d     [--w15], w6
    2d2a:	4f 02 be    	mov.d     [--w15], w4
    2d2c:	4f 01 be    	mov.d     [--w15], w2
    2d2e:	4f 00 be    	mov.d     [--w15], w0
    2d30:	36 00 f9    	pop       0x36
    2d32:	00 40 06    	retfie    

00002d34 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2d34:	08 00 fa    	lnk       #0x8
    2d36:	10 07 98    	mov.w     w0, [w14+2]
    2d38:	21 07 98    	mov.w     w1, [w14+4]
    2d3a:	32 07 98    	mov.w     w2, [w14+6]

00002d3c <.LSM77>:
    int16_t i;

    switch (handle) {
    2d3c:	1e 00 90    	mov.w     [w14+2], w0
    2d3e:	00 00 e0    	cp0.w     w0
    2d40:	25 00 35    	bra       LT, 0x2d8c <.L37>
    2d42:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2d44:	03 00 34    	bra       LE, 0x2d4c <.L30>
    2d46:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2d48:	11 00 32    	bra       Z, 0x2d6c <.L31>

00002d4a <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    2d4a:	21 00 37    	bra       0x2d8e <.L34>

00002d4c <.L30>:
    2d4c:	00 00 eb    	clr.w     w0
    2d4e:	00 0f 78    	mov.w     w0, [w14]
    2d50:	08 00 37    	bra       0x2d62 <.L32>

00002d52 <.L33>:
    2d52:	2e 00 90    	mov.w     [w14+4], w0
    2d54:	90 40 78    	mov.b     [w0], w1
    2d56:	2e 00 90    	mov.w     [w14+4], w0
    2d58:	00 00 e8    	inc.w     w0, w0
    2d5a:	20 07 98    	mov.w     w0, [w14+4]
    2d5c:	40 42 80    	mov.w     0x848, w0
    2d5e:	7b 04 07    	rcall     0x3656 <_uart_putc>

00002d60 <.LSM81>:
    2d60:	1e 0f e8    	inc.w     [w14], [w14]

00002d62 <.L32>:
    2d62:	9e 00 78    	mov.w     [w14], w1
    2d64:	3e 00 90    	mov.w     [w14+6], w0
    2d66:	80 8f 50    	sub.w     w1, w0, [w15]
    2d68:	f4 ff 39    	bra       NC, 0x2d52 <.L33>

00002d6a <.LSM82>:
    2d6a:	11 00 37    	bra       0x2d8e <.L34>

00002d6c <.L31>:
    2d6c:	00 00 eb    	clr.w     w0
    2d6e:	00 0f 78    	mov.w     w0, [w14]
    2d70:	08 00 37    	bra       0x2d82 <.L35>

00002d72 <.L36>:
    2d72:	2e 00 90    	mov.w     [w14+4], w0
    2d74:	90 40 78    	mov.b     [w0], w1
    2d76:	2e 00 90    	mov.w     [w14+4], w0
    2d78:	00 00 e8    	inc.w     w0, w0
    2d7a:	20 07 98    	mov.w     w0, [w14+4]
    2d7c:	50 42 80    	mov.w     0x84a, w0
    2d7e:	6b 04 07    	rcall     0x3656 <_uart_putc>

00002d80 <.LSM85>:
    2d80:	1e 0f e8    	inc.w     [w14], [w14]

00002d82 <.L35>:
    2d82:	9e 00 78    	mov.w     [w14], w1
    2d84:	3e 00 90    	mov.w     [w14+6], w0
    2d86:	80 8f 50    	sub.w     w1, w0, [w15]
    2d88:	f4 ff 39    	bra       NC, 0x2d72 <.L36>

00002d8a <.LSM86>:
    2d8a:	01 00 37    	bra       0x2d8e <.L34>

00002d8c <.L37>:
    2d8c:	00 00 00    	nop       

00002d8e <.L34>:
    }
    return len;
    2d8e:	3e 00 90    	mov.w     [w14+6], w0

00002d90 <.LSM89>:
}
    2d90:	00 80 fa    	ulnk      
    2d92:	00 00 06    	return    

00002d94 <_init_uart>:

void init_uart(void) {
    2d94:	00 00 fa    	lnk       #0x0

00002d96 <.LSM91>:
    init_pin();
    2d96:	7f 0c 07    	rcall     0x4696 <_init_pin>

00002d98 <.LSM92>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2d98:	40 6d 20    	mov.w     #0x6d4, w0
    2d9a:	80 1f 78    	mov.w     w0, [w15++]
    2d9c:	57 01 20    	mov.w     #0x15, w7
    2d9e:	86 c0 b3    	mov.b     #0x8, w6
    2da0:	80 82 eb    	setm.w    w5
    2da2:	64 c0 b3    	mov.b     #0x6, w4
    2da4:	80 01 eb    	clr.w     w3
    2da6:	02 2f 20    	mov.w     #0x2f0, w2
    2da8:	21 2f 20    	mov.w     #0x2f2, w1
    2daa:	c0 93 20    	mov.w     #0x93c, w0
    2dac:	88 0d 07    	rcall     0x48be <_pin_init>
    2dae:	8f 87 e9    	dec2.w    w15, w15

00002db0 <.LSM93>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2db0:	a0 6d 20    	mov.w     #0x6da, w0
    2db2:	80 1f 78    	mov.w     w0, [w15++]
    2db4:	a7 01 20    	mov.w     #0x1a, w7
    2db6:	00 43 eb    	clr.b     w6
    2db8:	80 82 eb    	setm.w    w5
    2dba:	74 c0 b3    	mov.b     #0x7, w4
    2dbc:	80 01 eb    	clr.w     w3
    2dbe:	02 2f 20    	mov.w     #0x2f0, w2
    2dc0:	21 2f 20    	mov.w     #0x2f2, w1
    2dc2:	20 95 20    	mov.w     #0x952, w0
    2dc4:	7c 0d 07    	rcall     0x48be <_pin_init>
    2dc6:	8f 87 e9    	dec2.w    w15, w15

00002dc8 <.LSM94>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    pin_init(&TX2, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2dc8:	60 6c 20    	mov.w     #0x6c6, w0
    2dca:	80 1f 78    	mov.w     w0, [w15++]
    2dcc:	77 00 20    	mov.w     #0x7, w7
    2dce:	86 c0 b3    	mov.b     #0x8, w6
    2dd0:	75 00 20    	mov.w     #0x7, w5
    2dd2:	74 c0 b3    	mov.b     #0x7, w4
    2dd4:	23 4e 20    	mov.w     #0x4e2, w3
    2dd6:	82 2c 20    	mov.w     #0x2c8, w2
    2dd8:	a1 2c 20    	mov.w     #0x2ca, w1
    2dda:	80 96 20    	mov.w     #0x968, w0
    2ddc:	70 0d 07    	rcall     0x48be <_pin_init>
    2dde:	8f 87 e9    	dec2.w    w15, w15

00002de0 <.LSM95>:
             (uint16_t *)&ANSB, 7, 7, 8, 7, (uint16_t *)&RPOR3);
    pin_init(&RX2, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2de0:	60 6c 20    	mov.w     #0x6c6, w0
    2de2:	80 1f 78    	mov.w     w0, [w15++]
    2de4:	67 00 20    	mov.w     #0x6, w7
    2de6:	00 43 eb    	clr.b     w6
    2de8:	65 00 20    	mov.w     #0x6, w5
    2dea:	64 c0 b3    	mov.b     #0x6, w4
    2dec:	23 4e 20    	mov.w     #0x4e2, w3
    2dee:	82 2c 20    	mov.w     #0x2c8, w2
    2df0:	a1 2c 20    	mov.w     #0x2ca, w1
    2df2:	e0 97 20    	mov.w     #0x97e, w0
    2df4:	64 0d 07    	rcall     0x48be <_pin_init>
    2df6:	8f 87 e9    	dec2.w    w15, w15

00002df8 <.LSM96>:
             (uint16_t *)&ANSB, 6, 6, 0, 6, (uint16_t *)&RPOR3);
    pin_init(&RTS2, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2df8:	a0 6d 20    	mov.w     #0x6da, w0
    2dfa:	80 1f 78    	mov.w     w0, [w15++]
    2dfc:	b7 01 20    	mov.w     #0x1b, w7
    2dfe:	86 c0 b3    	mov.b     #0x8, w6
    2e00:	80 82 eb    	setm.w    w5
    2e02:	94 c0 b3    	mov.b     #0x9, w4
    2e04:	80 01 eb    	clr.w     w3
    2e06:	02 2f 20    	mov.w     #0x2f0, w2
    2e08:	21 2f 20    	mov.w     #0x2f2, w1
    2e0a:	40 99 20    	mov.w     #0x994, w0
    2e0c:	58 0d 07    	rcall     0x48be <_pin_init>
    2e0e:	8f 87 e9    	dec2.w    w15, w15

00002e10 <.LSM97>:
             (uint16_t *)NULL, 9, -1, 8, 27, (uint16_t *)&RPOR13);
    pin_init(&CTS2, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2e10:	20 6d 20    	mov.w     #0x6d2, w0
    2e12:	80 1f 78    	mov.w     w0, [w15++]
    2e14:	37 01 20    	mov.w     #0x13, w7
    2e16:	86 c0 b3    	mov.b     #0x8, w6
    2e18:	80 82 eb    	setm.w    w5
    2e1a:	84 c0 b3    	mov.b     #0x8, w4
    2e1c:	80 01 eb    	clr.w     w3
    2e1e:	02 2f 20    	mov.w     #0x2f0, w2
    2e20:	21 2f 20    	mov.w     #0x2f2, w1
    2e22:	a0 9a 20    	mov.w     #0x9aa, w0
    2e24:	4c 0d 07    	rcall     0x48be <_pin_init>
    2e26:	8f 87 e9    	dec2.w    w15, w15

00002e28 <.LSM98>:
             (uint16_t *)NULL, 8, -1, 8, 19, (uint16_t *)&RPOR9);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    2e28:	40 00 20    	mov.w     #0x4, w0
    2e2a:	80 1f 78    	mov.w     w0, [w15++]
    2e2c:	30 00 20    	mov.w     #0x3, w0
    2e2e:	80 1f 78    	mov.w     w0, [w15++]
    2e30:	80 c0 b3    	mov.b     #0x8, w0
    2e32:	80 1f 78    	mov.w     w0, [w15++]
    2e34:	00 40 eb    	clr.b     w0
    2e36:	80 1f 78    	mov.w     w0, [w15++]
    2e38:	40 6a 20    	mov.w     #0x6a4, w0
    2e3a:	80 1f 78    	mov.w     w0, [w15++]
    2e3c:	40 6a 20    	mov.w     #0x6a4, w0
    2e3e:	80 1f 78    	mov.w     w0, [w15++]
    2e40:	b0 c0 b3    	mov.b     #0xb, w0
    2e42:	80 1f 78    	mov.w     w0, [w15++]
    2e44:	c0 c0 b3    	mov.b     #0xc, w0
    2e46:	80 1f 78    	mov.w     w0, [w15++]
    2e48:	47 09 20    	mov.w     #0x94, w7
    2e4a:	46 08 20    	mov.w     #0x84, w6
    2e4c:	85 22 20    	mov.w     #0x228, w5
    2e4e:	64 22 20    	mov.w     #0x226, w4
    2e50:	43 22 20    	mov.w     #0x224, w3
    2e52:	22 22 20    	mov.w     #0x222, w2
    2e54:	01 22 20    	mov.w     #0x220, w1
    2e56:	c0 84 20    	mov.w     #0x84c, w0
    2e58:	6b 00 07    	rcall     0x2f30 <_uart_init>
    2e5a:	f0 87 57    	sub.w     w15, #0x10, w15

00002e5c <.LSM99>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    2e5c:	60 00 20    	mov.w     #0x6, w0
    2e5e:	80 1f 78    	mov.w     w0, [w15++]
    2e60:	50 00 20    	mov.w     #0x5, w0
    2e62:	80 1f 78    	mov.w     w0, [w15++]
    2e64:	80 c0 b3    	mov.b     #0x8, w0
    2e66:	80 1f 78    	mov.w     w0, [w15++]
    2e68:	00 40 eb    	clr.b     w0
    2e6a:	80 1f 78    	mov.w     w0, [w15++]
    2e6c:	60 6a 20    	mov.w     #0x6a6, w0
    2e6e:	80 1f 78    	mov.w     w0, [w15++]
    2e70:	60 6a 20    	mov.w     #0x6a6, w0
    2e72:	80 1f 78    	mov.w     w0, [w15++]
    2e74:	e0 c0 b3    	mov.b     #0xe, w0
    2e76:	80 1f 78    	mov.w     w0, [w15++]
    2e78:	f0 c0 b3    	mov.b     #0xf, w0
    2e7a:	80 1f 78    	mov.w     w0, [w15++]
    2e7c:	67 09 20    	mov.w     #0x96, w7
    2e7e:	66 08 20    	mov.w     #0x86, w6
    2e80:	85 23 20    	mov.w     #0x238, w5
    2e82:	64 23 20    	mov.w     #0x236, w4
    2e84:	43 23 20    	mov.w     #0x234, w3
    2e86:	22 23 20    	mov.w     #0x232, w2
    2e88:	01 23 20    	mov.w     #0x230, w1
    2e8a:	80 88 20    	mov.w     #0x888, w0
    2e8c:	51 00 07    	rcall     0x2f30 <_uart_init>
    2e8e:	f0 87 57    	sub.w     w15, #0x10, w15

00002e90 <.LSM100>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    2e90:	d0 01 20    	mov.w     #0x1d, w0
    2e92:	80 1f 78    	mov.w     w0, [w15++]
    2e94:	c0 01 20    	mov.w     #0x1c, w0
    2e96:	80 1f 78    	mov.w     w0, [w15++]
    2e98:	80 c0 b3    	mov.b     #0x8, w0
    2e9a:	80 1f 78    	mov.w     w0, [w15++]
    2e9c:	80 c0 b3    	mov.b     #0x8, w0
    2e9e:	80 1f 78    	mov.w     w0, [w15++]
    2ea0:	a0 6a 20    	mov.w     #0x6aa, w0
    2ea2:	80 1f 78    	mov.w     w0, [w15++]
    2ea4:	20 6a 20    	mov.w     #0x6a2, w0
    2ea6:	80 1f 78    	mov.w     w0, [w15++]
    2ea8:	20 c0 b3    	mov.b     #0x2, w0
    2eaa:	80 1f 78    	mov.w     w0, [w15++]
    2eac:	30 c0 b3    	mov.b     #0x3, w0
    2eae:	80 1f 78    	mov.w     w0, [w15++]
    2eb0:	e7 09 20    	mov.w     #0x9e, w7
    2eb2:	e6 08 20    	mov.w     #0x8e, w6
    2eb4:	85 25 20    	mov.w     #0x258, w5
    2eb6:	64 25 20    	mov.w     #0x256, w4
    2eb8:	43 25 20    	mov.w     #0x254, w3
    2eba:	22 25 20    	mov.w     #0x252, w2
    2ebc:	01 25 20    	mov.w     #0x250, w1
    2ebe:	40 8c 20    	mov.w     #0x8c4, w0
    2ec0:	37 00 07    	rcall     0x2f30 <_uart_init>
    2ec2:	f0 87 57    	sub.w     w15, #0x10, w15

00002ec4 <.LSM101>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    2ec4:	f0 01 20    	mov.w     #0x1f, w0
    2ec6:	80 1f 78    	mov.w     w0, [w15++]
    2ec8:	e0 01 20    	mov.w     #0x1e, w0
    2eca:	80 1f 78    	mov.w     w0, [w15++]
    2ecc:	80 c0 b3    	mov.b     #0x8, w0
    2ece:	80 1f 78    	mov.w     w0, [w15++]
    2ed0:	00 40 eb    	clr.b     w0
    2ed2:	80 1f 78    	mov.w     w0, [w15++]
    2ed4:	60 6b 20    	mov.w     #0x6b6, w0
    2ed6:	80 1f 78    	mov.w     w0, [w15++]
    2ed8:	60 6b 20    	mov.w     #0x6b6, w0
    2eda:	80 1f 78    	mov.w     w0, [w15++]
    2edc:	80 c0 b3    	mov.b     #0x8, w0
    2ede:	80 1f 78    	mov.w     w0, [w15++]
    2ee0:	90 c0 b3    	mov.b     #0x9, w0
    2ee2:	80 1f 78    	mov.w     w0, [w15++]
    2ee4:	e7 09 20    	mov.w     #0x9e, w7
    2ee6:	e6 08 20    	mov.w     #0x8e, w6
    2ee8:	85 2b 20    	mov.w     #0x2b8, w5
    2eea:	64 2b 20    	mov.w     #0x2b6, w4
    2eec:	43 2b 20    	mov.w     #0x2b4, w3
    2eee:	22 2b 20    	mov.w     #0x2b2, w2
    2ef0:	01 2b 20    	mov.w     #0x2b0, w1
    2ef2:	00 90 20    	mov.w     #0x900, w0
    2ef4:	1d 00 07    	rcall     0x2f30 <_uart_init>
    2ef6:	f0 87 57    	sub.w     w15, #0x10, w15

00002ef8 <.LSM102>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart2, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    2ef8:	00 40 20    	mov.w     #0x400, w0
    2efa:	80 1f 78    	mov.w     w0, [w15++]
    2efc:	00 dc 20    	mov.w     #0xdc0, w0
    2efe:	80 1f 78    	mov.w     w0, [w15++]
    2f00:	00 40 20    	mov.w     #0x400, w0
    2f02:	80 1f 78    	mov.w     w0, [w15++]
    2f04:	00 9c 20    	mov.w     #0x9c0, w0
    2f06:	80 1f 78    	mov.w     w0, [w15++]
    2f08:	00 00 eb    	clr.w     w0
    2f0a:	80 1f 78    	mov.w     w0, [w15++]
    2f0c:	10 00 20    	mov.w     #0x1, w0
    2f0e:	80 1f 78    	mov.w     w0, [w15++]
    2f10:	e5 c4 b3    	mov.b     #0x4e, w5
    2f12:	06 00 20    	mov.w     #0x0, w6
    2f14:	67 69 24    	mov.w     #0x4696, w7
    2f16:	00 02 eb    	clr.w     w4
    2f18:	80 01 eb    	clr.w     w3
    2f1a:	22 95 20    	mov.w     #0x952, w2
    2f1c:	c1 93 20    	mov.w     #0x93c, w1
    2f1e:	80 88 20    	mov.w     #0x888, w0
    2f20:	72 00 07    	rcall     0x3006 <_uart_open>
    2f22:	ec 87 57    	sub.w     w15, #0xc, w15

00002f24 <.LSM103>:
              0, HWTXBUF, 1024, HWRXBUF, 1024);

    _stdout = &uart2;
    2f24:	80 88 20    	mov.w     #0x888, w0
    2f26:	40 42 88    	mov.w     w0, 0x848

00002f28 <.LSM104>:
    _stderr = &uart2;
    2f28:	80 88 20    	mov.w     #0x888, w0
    2f2a:	50 42 88    	mov.w     w0, 0x84a

00002f2c <.LSM105>:
}
    2f2c:	00 80 fa    	ulnk      
    2f2e:	00 00 06    	return    

00002f30 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2f30:	10 00 fa    	lnk       #0x10
    2f32:	00 0f 78    	mov.w     w0, [w14]
    2f34:	11 07 98    	mov.w     w1, [w14+2]
    2f36:	22 07 98    	mov.w     w2, [w14+4]
    2f38:	33 07 98    	mov.w     w3, [w14+6]
    2f3a:	44 07 98    	mov.w     w4, [w14+8]
    2f3c:	55 07 98    	mov.w     w5, [w14+10]
    2f3e:	66 07 98    	mov.w     w6, [w14+12]
    2f40:	77 07 98    	mov.w     w7, [w14+14]

00002f42 <.LSM107>:
    self->UxMODE = UxMODE;
    2f42:	1e 00 78    	mov.w     [w14], w0
    2f44:	9e 00 90    	mov.w     [w14+2], w1
    2f46:	01 08 78    	mov.w     w1, [w0]

00002f48 <.LSM108>:
    self->UxSTA = UxSTA;
    2f48:	1e 00 78    	mov.w     [w14], w0
    2f4a:	ae 00 90    	mov.w     [w14+4], w1
    2f4c:	11 00 98    	mov.w     w1, [w0+2]

00002f4e <.LSM109>:
    self->UxTXREG = UxTXREG;
    2f4e:	1e 00 78    	mov.w     [w14], w0
    2f50:	be 00 90    	mov.w     [w14+6], w1
    2f52:	21 00 98    	mov.w     w1, [w0+4]

00002f54 <.LSM110>:
    self->UxRXREG = UxRXREG;
    2f54:	1e 00 78    	mov.w     [w14], w0
    2f56:	ce 00 90    	mov.w     [w14+8], w1
    2f58:	31 00 98    	mov.w     w1, [w0+6]

00002f5a <.LSM111>:
    self->UxBRG = UxBRG;
    2f5a:	1e 00 78    	mov.w     [w14], w0
    2f5c:	de 00 90    	mov.w     [w14+10], w1
    2f5e:	41 00 98    	mov.w     w1, [w0+8]

00002f60 <.LSM112>:
    self->IFSy = IFSy;
    2f60:	1e 00 78    	mov.w     [w14], w0
    2f62:	ee 00 90    	mov.w     [w14+12], w1
    2f64:	51 00 98    	mov.w     w1, [w0+10]

00002f66 <.LSM113>:
    self->IECy = IECy;
    2f66:	1e 00 78    	mov.w     [w14], w0
    2f68:	fe 00 90    	mov.w     [w14+14], w1
    2f6a:	61 00 98    	mov.w     w1, [w0+12]

00002f6c <.LSM114>:
    self->UxTXIF = UxTXIF;
    2f6c:	1e 00 78    	mov.w     [w14], w0
    2f6e:	8e f8 97    	mov.b     [w14-8], w1
    2f70:	61 48 98    	mov.b     w1, [w0+14]

00002f72 <.LSM115>:
    self->UxRXIF = UxRXIF;
    2f72:	1e 00 78    	mov.w     [w14], w0
    2f74:	ee f0 97    	mov.b     [w14-10], w1
    2f76:	71 48 98    	mov.b     w1, [w0+15]

00002f78 <.LSM116>:
    self->RXrpinr = RXrpinr;
    2f78:	1e 00 78    	mov.w     [w14], w0
    2f7a:	ae b8 97    	mov.w     [w14-12], w1
    2f7c:	01 08 98    	mov.w     w1, [w0+16]

00002f7e <.LSM117>:
    self->CTSrpinr = CTSrpinr;
    2f7e:	1e 00 78    	mov.w     [w14], w0
    2f80:	9e b8 97    	mov.w     [w14-14], w1
    2f82:	11 08 98    	mov.w     w1, [w0+18]

00002f84 <.LSM118>:
    self->RXrpshift = RXrpshift;
    2f84:	1e 00 78    	mov.w     [w14], w0
    2f86:	8e f0 97    	mov.b     [w14-16], w1
    2f88:	41 50 98    	mov.b     w1, [w0+20]

00002f8a <.LSM119>:
    self->CTSrpshift = CTSrpshift;
    2f8a:	1e 00 78    	mov.w     [w14], w0
    2f8c:	ee e8 97    	mov.b     [w14-18], w1
    2f8e:	51 50 98    	mov.b     w1, [w0+21]

00002f90 <.LSM120>:
    self->TXrpnum = TXrpnum;
    2f90:	1e 00 78    	mov.w     [w14], w0
    2f92:	ee b0 97    	mov.w     [w14-20], w1
    2f94:	31 08 98    	mov.w     w1, [w0+22]

00002f96 <.LSM121>:
    self->RTSrpnum = RTSrpnum;
    2f96:	1e 00 78    	mov.w     [w14], w0
    2f98:	de b0 97    	mov.w     [w14-22], w1
    2f9a:	41 08 98    	mov.w     w1, [w0+24]

00002f9c <.LSM122>:
    self->TX = NULL;
    2f9c:	1e 00 78    	mov.w     [w14], w0
    2f9e:	80 00 eb    	clr.w     w1
    2fa0:	51 08 98    	mov.w     w1, [w0+26]

00002fa2 <.LSM123>:
    self->RX = NULL;
    2fa2:	1e 00 78    	mov.w     [w14], w0
    2fa4:	80 00 eb    	clr.w     w1
    2fa6:	61 08 98    	mov.w     w1, [w0+28]

00002fa8 <.LSM124>:
    self->RTS = NULL;
    2fa8:	1e 00 78    	mov.w     [w14], w0
    2faa:	80 00 eb    	clr.w     w1
    2fac:	71 08 98    	mov.w     w1, [w0+30]

00002fae <.LSM125>:
    self->CTS = NULL;
    2fae:	1e 00 78    	mov.w     [w14], w0
    2fb0:	80 00 eb    	clr.w     w1
    2fb2:	01 10 98    	mov.w     w1, [w0+32]

00002fb4 <.LSM126>:
    self->TXbuffer.data = NULL;
    2fb4:	1e 00 78    	mov.w     [w14], w0
    2fb6:	80 00 eb    	clr.w     w1
    2fb8:	11 10 98    	mov.w     w1, [w0+34]

00002fba <.LSM127>:
    self->TXbuffer.length = 0;
    2fba:	1e 00 78    	mov.w     [w14], w0
    2fbc:	80 00 eb    	clr.w     w1
    2fbe:	21 10 98    	mov.w     w1, [w0+36]

00002fc0 <.LSM128>:
    self->TXbuffer.head = 0;
    2fc0:	1e 00 78    	mov.w     [w14], w0
    2fc2:	80 00 eb    	clr.w     w1
    2fc4:	31 10 98    	mov.w     w1, [w0+38]

00002fc6 <.LSM129>:
    self->TXbuffer.tail = 0;
    2fc6:	1e 00 78    	mov.w     [w14], w0
    2fc8:	80 00 eb    	clr.w     w1
    2fca:	41 10 98    	mov.w     w1, [w0+40]

00002fcc <.LSM130>:
    self->TXbuffer.count = 0;
    2fcc:	1e 00 78    	mov.w     [w14], w0
    2fce:	80 00 eb    	clr.w     w1
    2fd0:	51 10 98    	mov.w     w1, [w0+42]

00002fd2 <.LSM131>:
    self->RXbuffer.data = NULL;
    2fd2:	1e 00 78    	mov.w     [w14], w0
    2fd4:	80 00 eb    	clr.w     w1
    2fd6:	61 10 98    	mov.w     w1, [w0+44]

00002fd8 <.LSM132>:
    self->RXbuffer.length = 0;
    2fd8:	1e 00 78    	mov.w     [w14], w0
    2fda:	80 00 eb    	clr.w     w1
    2fdc:	71 10 98    	mov.w     w1, [w0+46]

00002fde <.LSM133>:
    self->RXbuffer.head = 0;
    2fde:	1e 00 78    	mov.w     [w14], w0
    2fe0:	80 00 eb    	clr.w     w1
    2fe2:	01 18 98    	mov.w     w1, [w0+48]

00002fe4 <.LSM134>:
    self->RXbuffer.tail = 0;
    2fe4:	1e 00 78    	mov.w     [w14], w0
    2fe6:	80 00 eb    	clr.w     w1
    2fe8:	11 18 98    	mov.w     w1, [w0+50]

00002fea <.LSM135>:
    self->RXbuffer.count = 0;
    2fea:	1e 00 78    	mov.w     [w14], w0
    2fec:	80 00 eb    	clr.w     w1
    2fee:	21 18 98    	mov.w     w1, [w0+52]

00002ff0 <.LSM136>:
    self->TXthreshold = 1;
    2ff0:	1e 00 78    	mov.w     [w14], w0
    2ff2:	11 00 20    	mov.w     #0x1, w1
    2ff4:	31 18 98    	mov.w     w1, [w0+54]

00002ff6 <.LSM137>:
    self->putc = NULL;
    2ff6:	1e 00 78    	mov.w     [w14], w0
    2ff8:	80 00 eb    	clr.w     w1
    2ffa:	41 18 98    	mov.w     w1, [w0+56]

00002ffc <.LSM138>:
    self->getc = NULL;
    2ffc:	1e 00 78    	mov.w     [w14], w0
    2ffe:	80 00 eb    	clr.w     w1
    3000:	51 18 98    	mov.w     w1, [w0+58]

00003002 <.LSM139>:
}
    3002:	00 80 fa    	ulnk      
    3004:	00 00 06    	return    

00003006 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    3006:	10 00 fa    	lnk       #0x10
    3008:	88 1f 78    	mov.w     w8, [w15++]
    300a:	00 0f 78    	mov.w     w0, [w14]
    300c:	11 07 98    	mov.w     w1, [w14+2]
    300e:	22 07 98    	mov.w     w2, [w14+4]
    3010:	33 07 98    	mov.w     w3, [w14+6]
    3012:	44 07 98    	mov.w     w4, [w14+8]
    3014:	56 07 98    	mov.w     w6, [w14+10]
    3016:	67 07 98    	mov.w     w7, [w14+12]
    3018:	65 4f 98    	mov.b     w5, [w14+14]

0000301a <.LSM141>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    301a:	1e 00 78    	mov.w     [w14], w0
    301c:	10 00 78    	mov.w     [w0], w0
    301e:	80 00 eb    	clr.w     w1
    3020:	01 08 78    	mov.w     w1, [w0]

00003022 <.LSM142>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    3022:	1e 00 90    	mov.w     [w14+2], w0
    3024:	60 00 90    	mov.w     [w0+12], w0
    3026:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3028:	0e 02 32    	bra       Z, 0x3446 <.L73>
    302a:	2e 00 90    	mov.w     [w14+4], w0
    302c:	60 00 90    	mov.w     [w0+12], w0
    302e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3030:	0c 02 32    	bra       Z, 0x344a <.L74>

00003032 <.LSM143>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    3032:	1e 00 90    	mov.w     [w14+2], w0
    3034:	00 08 90    	mov.w     [w0+16], w0
    3036:	00 00 e0    	cp0.w     w0
    3038:	69 00 3a    	bra       NZ, 0x310c <.L44>
    303a:	2e 00 90    	mov.w     [w14+4], w0
    303c:	00 08 90    	mov.w     [w0+16], w0
    303e:	00 00 e0    	cp0.w     w0
    3040:	65 00 3a    	bra       NZ, 0x310c <.L44>

00003042 <.LSM144>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    3042:	1e 00 90    	mov.w     [w14+2], w0
    3044:	8f 0c 07    	rcall     0x4964 <_pin_digitalOut>

00003046 <.LSM145>:
        pin_set(TX);
    3046:	1e 00 90    	mov.w     [w14+2], w0
    3048:	ea 0c 07    	rcall     0x4a1e <_pin_set>

0000304a <.LSM146>:
        pin_digitalIn(RX);
    304a:	2e 00 90    	mov.w     [w14+4], w0
    304c:	64 0c 07    	rcall     0x4916 <_pin_digitalIn>

0000304e <.LSM147>:
        self->TX = TX;
    304e:	1e 00 78    	mov.w     [w14], w0
    3050:	9e 00 90    	mov.w     [w14+2], w1
    3052:	51 08 98    	mov.w     w1, [w0+26]

00003054 <.LSM148>:
        TX->owner = (void *)self;
    3054:	1e 00 90    	mov.w     [w14+2], w0
    3056:	9e 00 78    	mov.w     [w14], w1
    3058:	01 08 98    	mov.w     w1, [w0+16]

0000305a <.LSM149>:
        TX->write = NULL;
    305a:	1e 00 90    	mov.w     [w14+2], w0
    305c:	80 00 eb    	clr.w     w1
    305e:	11 08 98    	mov.w     w1, [w0+18]

00003060 <.LSM150>:
        TX->read = NULL;
    3060:	1e 00 90    	mov.w     [w14+2], w0
    3062:	80 00 eb    	clr.w     w1
    3064:	21 08 98    	mov.w     w1, [w0+20]

00003066 <.LSM151>:
        self->RX = RX;
    3066:	1e 00 78    	mov.w     [w14], w0
    3068:	ae 00 90    	mov.w     [w14+4], w1
    306a:	61 08 98    	mov.w     w1, [w0+28]

0000306c <.LSM152>:
        RX->owner = (void *)self;
    306c:	2e 00 90    	mov.w     [w14+4], w0
    306e:	9e 00 78    	mov.w     [w14], w1
    3070:	01 08 98    	mov.w     w1, [w0+16]

00003072 <.LSM153>:
        RX->write = NULL;
    3072:	2e 00 90    	mov.w     [w14+4], w0
    3074:	80 00 eb    	clr.w     w1
    3076:	11 08 98    	mov.w     w1, [w0+18]

00003078 <.LSM154>:
        RX->read = NULL;
    3078:	2e 00 90    	mov.w     [w14+4], w0
    307a:	80 00 eb    	clr.w     w1
    307c:	21 08 98    	mov.w     w1, [w0+20]

0000307e <.LSM155>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    307e:	11 3a 80    	mov.w     0x742, w1
    3080:	f0 0b 20    	mov.w     #0xbf, w0
    3082:	00 81 60    	and.w     w1, w0, w2
    3084:	60 04 20    	mov.w     #0x46, w0
    3086:	71 05 20    	mov.w     #0x57, w1
    3088:	23 74 20    	mov.w     #0x742, w3
    308a:	80 49 78    	mov.b     w0, [w3]
    308c:	81 49 78    	mov.b     w1, [w3]
    308e:	82 49 78    	mov.b     w2, [w3]

00003090 <.LSM156>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    3090:	1e 00 90    	mov.w     [w14+2], w0
    3092:	70 00 90    	mov.w     [w0+14], w0
    3094:	9e 00 90    	mov.w     [w14+2], w1
    3096:	f1 00 90    	mov.w     [w1+14], w1
    3098:	11 01 78    	mov.w     [w1], w2
    309a:	9e 00 90    	mov.w     [w14+2], w1
    309c:	a1 48 90    	mov.b     [w1+10], w1
    309e:	81 80 fb    	ze        w1, w1
    30a0:	f3 03 20    	mov.w     #0x3f, w3
    30a2:	81 18 dd    	sl.w      w3, w1, w1
    30a4:	81 80 ea    	com.w     w1, w1
    30a6:	81 00 61    	and.w     w2, w1, w1
    30a8:	01 08 78    	mov.w     w1, [w0]

000030aa <.LSM157>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    30aa:	1e 00 90    	mov.w     [w14+2], w0
    30ac:	70 00 90    	mov.w     [w0+14], w0
    30ae:	9e 00 90    	mov.w     [w14+2], w1
    30b0:	f1 00 90    	mov.w     [w1+14], w1
    30b2:	11 01 78    	mov.w     [w1], w2
    30b4:	9e 00 78    	mov.w     [w14], w1
    30b6:	b1 09 90    	mov.w     [w1+22], w3
    30b8:	9e 00 90    	mov.w     [w14+2], w1
    30ba:	a1 48 90    	mov.b     [w1+10], w1
    30bc:	81 80 fb    	ze        w1, w1
    30be:	81 18 dd    	sl.w      w3, w1, w1
    30c0:	82 80 70    	ior.w     w1, w2, w1
    30c2:	01 08 78    	mov.w     w1, [w0]

000030c4 <.LSM158>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    30c4:	1e 00 78    	mov.w     [w14], w0
    30c6:	00 08 90    	mov.w     [w0+16], w0
    30c8:	9e 00 78    	mov.w     [w14], w1
    30ca:	81 08 90    	mov.w     [w1+16], w1
    30cc:	11 01 78    	mov.w     [w1], w2
    30ce:	9e 00 78    	mov.w     [w14], w1
    30d0:	c1 50 90    	mov.b     [w1+20], w1
    30d2:	81 80 fb    	ze        w1, w1
    30d4:	f3 03 20    	mov.w     #0x3f, w3
    30d6:	81 18 dd    	sl.w      w3, w1, w1
    30d8:	81 80 ea    	com.w     w1, w1
    30da:	81 00 61    	and.w     w2, w1, w1
    30dc:	01 08 78    	mov.w     w1, [w0]

000030de <.LSM159>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    30de:	1e 00 78    	mov.w     [w14], w0
    30e0:	00 08 90    	mov.w     [w0+16], w0
    30e2:	9e 00 78    	mov.w     [w14], w1
    30e4:	81 08 90    	mov.w     [w1+16], w1
    30e6:	11 01 78    	mov.w     [w1], w2
    30e8:	ae 00 90    	mov.w     [w14+4], w1
    30ea:	e1 01 90    	mov.w     [w1+12], w3
    30ec:	9e 00 78    	mov.w     [w14], w1
    30ee:	c1 50 90    	mov.b     [w1+20], w1
    30f0:	81 80 fb    	ze        w1, w1
    30f2:	81 18 dd    	sl.w      w3, w1, w1
    30f4:	82 80 70    	ior.w     w1, w2, w1
    30f6:	01 08 78    	mov.w     w1, [w0]

000030f8 <.LSM160>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    30f8:	11 3a 80    	mov.w     0x742, w1
    30fa:	00 04 20    	mov.w     #0x40, w0
    30fc:	01 01 70    	ior.w     w0, w1, w2
    30fe:	60 04 20    	mov.w     #0x46, w0
    3100:	71 05 20    	mov.w     #0x57, w1
    3102:	23 74 20    	mov.w     #0x742, w3
    3104:	80 49 78    	mov.b     w0, [w3]
    3106:	81 49 78    	mov.b     w1, [w3]
    3108:	82 49 78    	mov.b     w2, [w3]
    310a:	0a 00 37    	bra       0x3120 <.L45>

0000310c <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    310c:	1e 00 78    	mov.w     [w14], w0
    310e:	d0 08 90    	mov.w     [w0+26], w1
    3110:	1e 00 90    	mov.w     [w14+2], w0
    3112:	80 8f 50    	sub.w     w1, w0, [w15]
    3114:	9c 01 3a    	bra       NZ, 0x344e <.L75>
    3116:	1e 00 78    	mov.w     [w14], w0
    3118:	e0 08 90    	mov.w     [w0+28], w1
    311a:	2e 00 90    	mov.w     [w14+4], w0
    311c:	80 8f 50    	sub.w     w1, w0, [w15]
    311e:	99 01 3a    	bra       NZ, 0x3452 <.L76>

00003120 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    3120:	3e 00 90    	mov.w     [w14+6], w0
    3122:	00 00 e0    	cp0.w     w0
    3124:	87 00 32    	bra       Z, 0x3234 <.L47>
    3126:	4e 00 90    	mov.w     [w14+8], w0
    3128:	00 00 e0    	cp0.w     w0
    312a:	84 00 32    	bra       Z, 0x3234 <.L47>

0000312c <.LSM163>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    312c:	3e 00 90    	mov.w     [w14+6], w0
    312e:	60 00 90    	mov.w     [w0+12], w0
    3130:	e1 0f 40    	add.w     w0, #0x1, [w15]
    3132:	91 01 32    	bra       Z, 0x3456 <.L77>
    3134:	4e 00 90    	mov.w     [w14+8], w0
    3136:	60 00 90    	mov.w     [w0+12], w0
    3138:	e1 0f 40    	add.w     w0, #0x1, [w15]
    313a:	8f 01 32    	bra       Z, 0x345a <.L78>

0000313c <.LSM164>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    313c:	3e 00 90    	mov.w     [w14+6], w0
    313e:	00 08 90    	mov.w     [w0+16], w0
    3140:	00 00 e0    	cp0.w     w0
    3142:	69 00 3a    	bra       NZ, 0x3216 <.L50>
    3144:	4e 00 90    	mov.w     [w14+8], w0
    3146:	00 08 90    	mov.w     [w0+16], w0
    3148:	00 00 e0    	cp0.w     w0
    314a:	65 00 3a    	bra       NZ, 0x3216 <.L50>

0000314c <.LSM165>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    314c:	3e 00 90    	mov.w     [w14+6], w0
    314e:	0a 0c 07    	rcall     0x4964 <_pin_digitalOut>

00003150 <.LSM166>:
            pin_set(RTS);
    3150:	3e 00 90    	mov.w     [w14+6], w0
    3152:	65 0c 07    	rcall     0x4a1e <_pin_set>

00003154 <.LSM167>:
            pin_digitalIn(CTS);
    3154:	4e 00 90    	mov.w     [w14+8], w0
    3156:	df 0b 07    	rcall     0x4916 <_pin_digitalIn>

00003158 <.LSM168>:
            self->RTS = RTS;
    3158:	1e 00 78    	mov.w     [w14], w0
    315a:	be 00 90    	mov.w     [w14+6], w1
    315c:	71 08 98    	mov.w     w1, [w0+30]

0000315e <.LSM169>:
            RTS->owner = (void *)self;
    315e:	3e 00 90    	mov.w     [w14+6], w0
    3160:	9e 00 78    	mov.w     [w14], w1
    3162:	01 08 98    	mov.w     w1, [w0+16]

00003164 <.LSM170>:
            RTS->write = NULL;
    3164:	3e 00 90    	mov.w     [w14+6], w0
    3166:	80 00 eb    	clr.w     w1
    3168:	11 08 98    	mov.w     w1, [w0+18]

0000316a <.LSM171>:
            RTS->read = NULL;
    316a:	3e 00 90    	mov.w     [w14+6], w0
    316c:	80 00 eb    	clr.w     w1
    316e:	21 08 98    	mov.w     w1, [w0+20]

00003170 <.LSM172>:
            self->CTS = CTS;
    3170:	1e 00 78    	mov.w     [w14], w0
    3172:	ce 00 90    	mov.w     [w14+8], w1
    3174:	01 10 98    	mov.w     w1, [w0+32]

00003176 <.LSM173>:
            CTS->owner = (void *)self;
    3176:	4e 00 90    	mov.w     [w14+8], w0
    3178:	9e 00 78    	mov.w     [w14], w1
    317a:	01 08 98    	mov.w     w1, [w0+16]

0000317c <.LSM174>:
            CTS->write = NULL;
    317c:	4e 00 90    	mov.w     [w14+8], w0
    317e:	80 00 eb    	clr.w     w1
    3180:	11 08 98    	mov.w     w1, [w0+18]

00003182 <.LSM175>:
            CTS->read = NULL;
    3182:	4e 00 90    	mov.w     [w14+8], w0
    3184:	80 00 eb    	clr.w     w1
    3186:	21 08 98    	mov.w     w1, [w0+20]

00003188 <.LSM176>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    3188:	11 3a 80    	mov.w     0x742, w1
    318a:	f0 0b 20    	mov.w     #0xbf, w0
    318c:	00 81 60    	and.w     w1, w0, w2
    318e:	60 04 20    	mov.w     #0x46, w0
    3190:	71 05 20    	mov.w     #0x57, w1
    3192:	23 74 20    	mov.w     #0x742, w3
    3194:	80 49 78    	mov.b     w0, [w3]
    3196:	81 49 78    	mov.b     w1, [w3]
    3198:	82 49 78    	mov.b     w2, [w3]

0000319a <.LSM177>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    319a:	3e 00 90    	mov.w     [w14+6], w0
    319c:	70 00 90    	mov.w     [w0+14], w0
    319e:	be 00 90    	mov.w     [w14+6], w1
    31a0:	f1 00 90    	mov.w     [w1+14], w1
    31a2:	11 01 78    	mov.w     [w1], w2
    31a4:	be 00 90    	mov.w     [w14+6], w1
    31a6:	a1 48 90    	mov.b     [w1+10], w1
    31a8:	81 80 fb    	ze        w1, w1
    31aa:	f3 03 20    	mov.w     #0x3f, w3
    31ac:	81 18 dd    	sl.w      w3, w1, w1
    31ae:	81 80 ea    	com.w     w1, w1
    31b0:	81 00 61    	and.w     w2, w1, w1
    31b2:	01 08 78    	mov.w     w1, [w0]

000031b4 <.LSM178>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    31b4:	3e 00 90    	mov.w     [w14+6], w0
    31b6:	70 00 90    	mov.w     [w0+14], w0
    31b8:	be 00 90    	mov.w     [w14+6], w1
    31ba:	f1 00 90    	mov.w     [w1+14], w1
    31bc:	11 01 78    	mov.w     [w1], w2
    31be:	9e 00 78    	mov.w     [w14], w1
    31c0:	c1 09 90    	mov.w     [w1+24], w3
    31c2:	be 00 90    	mov.w     [w14+6], w1
    31c4:	a1 48 90    	mov.b     [w1+10], w1
    31c6:	81 80 fb    	ze        w1, w1
    31c8:	81 18 dd    	sl.w      w3, w1, w1
    31ca:	82 80 70    	ior.w     w1, w2, w1
    31cc:	01 08 78    	mov.w     w1, [w0]

000031ce <.LSM179>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    31ce:	1e 00 78    	mov.w     [w14], w0
    31d0:	10 08 90    	mov.w     [w0+18], w0
    31d2:	9e 00 78    	mov.w     [w14], w1
    31d4:	91 08 90    	mov.w     [w1+18], w1
    31d6:	11 01 78    	mov.w     [w1], w2
    31d8:	9e 00 78    	mov.w     [w14], w1
    31da:	d1 50 90    	mov.b     [w1+21], w1
    31dc:	81 80 fb    	ze        w1, w1
    31de:	f3 03 20    	mov.w     #0x3f, w3
    31e0:	81 18 dd    	sl.w      w3, w1, w1
    31e2:	81 80 ea    	com.w     w1, w1
    31e4:	81 00 61    	and.w     w2, w1, w1
    31e6:	01 08 78    	mov.w     w1, [w0]

000031e8 <.LSM180>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    31e8:	1e 00 78    	mov.w     [w14], w0
    31ea:	10 08 90    	mov.w     [w0+18], w0
    31ec:	9e 00 78    	mov.w     [w14], w1
    31ee:	91 08 90    	mov.w     [w1+18], w1
    31f0:	11 01 78    	mov.w     [w1], w2
    31f2:	ce 00 90    	mov.w     [w14+8], w1
    31f4:	e1 01 90    	mov.w     [w1+12], w3
    31f6:	9e 00 78    	mov.w     [w14], w1
    31f8:	d1 50 90    	mov.b     [w1+21], w1
    31fa:	81 80 fb    	ze        w1, w1
    31fc:	81 18 dd    	sl.w      w3, w1, w1
    31fe:	82 80 70    	ior.w     w1, w2, w1
    3200:	01 08 78    	mov.w     w1, [w0]

00003202 <.LSM181>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    3202:	11 3a 80    	mov.w     0x742, w1
    3204:	00 04 20    	mov.w     #0x40, w0
    3206:	01 01 70    	ior.w     w0, w1, w2
    3208:	60 04 20    	mov.w     #0x46, w0
    320a:	71 05 20    	mov.w     #0x57, w1
    320c:	23 74 20    	mov.w     #0x742, w3
    320e:	80 49 78    	mov.b     w0, [w3]
    3210:	81 49 78    	mov.b     w1, [w3]
    3212:	82 49 78    	mov.b     w2, [w3]
    3214:	0a 00 37    	bra       0x322a <.L51>

00003216 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    3216:	1e 00 78    	mov.w     [w14], w0
    3218:	f0 08 90    	mov.w     [w0+30], w1
    321a:	3e 00 90    	mov.w     [w14+6], w0
    321c:	80 8f 50    	sub.w     w1, w0, [w15]
    321e:	1f 01 3a    	bra       NZ, 0x345e <.L79>
    3220:	1e 00 78    	mov.w     [w14], w0
    3222:	80 10 90    	mov.w     [w0+32], w1
    3224:	4e 00 90    	mov.w     [w14+8], w0
    3226:	80 8f 50    	sub.w     w1, w0, [w15]
    3228:	1c 01 3a    	bra       NZ, 0x3462 <.L80>

0000322a <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    322a:	1e 00 78    	mov.w     [w14], w0
    322c:	10 00 78    	mov.w     [w0], w0
    322e:	01 20 20    	mov.w     #0x200, w1
    3230:	01 08 78    	mov.w     w1, [w0]
    3232:	06 00 37    	bra       0x3240 <.L53>

00003234 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    3234:	3e 00 90    	mov.w     [w14+6], w0
    3236:	00 00 e0    	cp0.w     w0
    3238:	16 01 3a    	bra       NZ, 0x3466 <.L81>
    323a:	4e 00 90    	mov.w     [w14+8], w0
    323c:	00 00 e0    	cp0.w     w0
    323e:	15 01 3a    	bra       NZ, 0x346a <.L82>

00003240 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    3240:	18 c0 b3    	mov.b     #0x1, w8
    3242:	02 40 22    	mov.w     #0x2400, w2
    3244:	43 a7 24    	mov.w     #0x4a74, w3
    3246:	5e 00 90    	mov.w     [w14+10], w0
    3248:	ee 00 90    	mov.w     [w14+12], w1
    324a:	b6 f0 07    	rcall     0x13b8 <___gesf2>
    324c:	00 00 e0    	cp0.w     w0
    324e:	01 00 3c    	bra       GT, 0x3252 <.L55>
    3250:	00 44 eb    	clr.b     w8

00003252 <.L55>:
    3252:	08 04 e0    	cp0.b     w8
    3254:	04 00 32    	bra       Z, 0x325e <.L56>

00003256 <.LSM186>:
        baudrate = FCY/4.;
    3256:	00 40 22    	mov.w     #0x2400, w0
    3258:	41 a7 24    	mov.w     #0x4a74, w1
    325a:	50 07 98    	mov.w     w0, [w14+10]
    325c:	61 07 98    	mov.w     w1, [w14+12]

0000325e <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    325e:	18 c0 b3    	mov.b     #0x1, w8
    3260:	02 40 22    	mov.w     #0x2400, w2
    3262:	43 17 24    	mov.w     #0x4174, w3
    3264:	5e 00 90    	mov.w     [w14+10], w0
    3266:	ee 00 90    	mov.w     [w14+12], w1
    3268:	a5 f0 07    	rcall     0x13b4 <___eqsf2>
    326a:	00 00 e0    	cp0.w     w0
    326c:	01 00 35    	bra       LT, 0x3270 <.L57>
    326e:	00 44 eb    	clr.b     w8

00003270 <.L57>:
    3270:	08 04 e0    	cp0.b     w8
    3272:	04 00 32    	bra       Z, 0x327c <.L58>

00003274 <.LSM188>:
        baudrate = FCY/(16.*65536.);
    3274:	00 40 22    	mov.w     #0x2400, w0
    3276:	41 17 24    	mov.w     #0x4174, w1
    3278:	50 07 98    	mov.w     w0, [w14+10]
    327a:	61 07 98    	mov.w     w1, [w14+12]

0000327c <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    327c:	18 c0 b3    	mov.b     #0x1, w8
    327e:	02 40 22    	mov.w     #0x2400, w2
    3280:	43 27 24    	mov.w     #0x4274, w3
    3282:	5e 00 90    	mov.w     [w14+10], w0
    3284:	ee 00 90    	mov.w     [w14+12], w1
    3286:	96 f0 07    	rcall     0x13b4 <___eqsf2>
    3288:	00 00 e0    	cp0.w     w0
    328a:	01 00 34    	bra       LE, 0x328e <.L59>
    328c:	00 44 eb    	clr.b     w8

0000328e <.L59>:
    328e:	08 04 e0    	cp0.b     w8
    3290:	0f 00 32    	bra       Z, 0x32b0 <.L60>

00003292 <.LSM190>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    3292:	1e 00 78    	mov.w     [w14], w0
    3294:	40 04 90    	mov.w     [w0+8], w8
    3296:	5e 01 90    	mov.w     [w14+10], w2
    3298:	ee 01 90    	mov.w     [w14+12], w3
    329a:	00 40 22    	mov.w     #0x2400, w0
    329c:	41 97 24    	mov.w     #0x4974, w1
    329e:	48 f0 07    	rcall     0x1330 <___divsf3>
    32a0:	02 00 20    	mov.w     #0x0, w2
    32a2:	03 f0 23    	mov.w     #0x3f00, w3
    32a4:	e8 ef 07    	rcall     0x1276 <___addsf3>
    32a6:	8a f0 07    	rcall     0x13bc <___fixunssfsi>
    32a8:	00 00 78    	mov.w     w0, w0
    32aa:	00 00 e9    	dec.w     w0, w0
    32ac:	00 0c 78    	mov.w     w0, [w8]
    32ae:	15 00 37    	bra       0x32da <.L61>

000032b0 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    32b0:	1e 00 78    	mov.w     [w14], w0
    32b2:	10 00 78    	mov.w     [w0], w0
    32b4:	9e 00 78    	mov.w     [w14], w1
    32b6:	91 00 78    	mov.w     [w1], w1
    32b8:	91 00 78    	mov.w     [w1], w1
    32ba:	01 30 a0    	bset.w    w1, #0x3
    32bc:	01 08 78    	mov.w     w1, [w0]

000032be <.LSM192>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    32be:	1e 00 78    	mov.w     [w14], w0
    32c0:	40 04 90    	mov.w     [w0+8], w8
    32c2:	5e 01 90    	mov.w     [w14+10], w2
    32c4:	ee 01 90    	mov.w     [w14+12], w3
    32c6:	00 40 22    	mov.w     #0x2400, w0
    32c8:	41 a7 24    	mov.w     #0x4a74, w1
    32ca:	32 f0 07    	rcall     0x1330 <___divsf3>
    32cc:	02 00 20    	mov.w     #0x0, w2
    32ce:	03 f0 23    	mov.w     #0x3f00, w3
    32d0:	d2 ef 07    	rcall     0x1276 <___addsf3>
    32d2:	74 f0 07    	rcall     0x13bc <___fixunssfsi>
    32d4:	00 00 78    	mov.w     w0, w0
    32d6:	00 00 e9    	dec.w     w0, w0
    32d8:	00 0c 78    	mov.w     w0, [w8]

000032da <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    32da:	ee 48 90    	mov.b     [w14+14], w1
    32dc:	50 c4 b3    	mov.b     #0x45, w0
    32de:	80 cf 50    	sub.b     w1, w0, [w15]
    32e0:	04 00 32    	bra       Z, 0x32ea <.L62>
    32e2:	ee 48 90    	mov.b     [w14+14], w1
    32e4:	50 c6 b3    	mov.b     #0x65, w0
    32e6:	80 cf 50    	sub.b     w1, w0, [w15]
    32e8:	08 00 3a    	bra       NZ, 0x32fa <.L63>

000032ea <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    32ea:	1e 00 78    	mov.w     [w14], w0
    32ec:	10 00 78    	mov.w     [w0], w0
    32ee:	9e 00 78    	mov.w     [w14], w1
    32f0:	91 00 78    	mov.w     [w1], w1
    32f2:	91 00 78    	mov.w     [w1], w1
    32f4:	01 10 a0    	bset.w    w1, #0x1
    32f6:	01 08 78    	mov.w     w1, [w0]
    32f8:	18 00 37    	bra       0x332a <.L64>

000032fa <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    32fa:	ee 48 90    	mov.b     [w14+14], w1
    32fc:	f0 c4 b3    	mov.b     #0x4f, w0
    32fe:	80 cf 50    	sub.b     w1, w0, [w15]
    3300:	04 00 32    	bra       Z, 0x330a <.L65>
    3302:	ee 48 90    	mov.b     [w14+14], w1
    3304:	f0 c6 b3    	mov.b     #0x6f, w0
    3306:	80 cf 50    	sub.b     w1, w0, [w15]
    3308:	08 00 3a    	bra       NZ, 0x331a <.L66>

0000330a <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    330a:	1e 00 78    	mov.w     [w14], w0
    330c:	10 00 78    	mov.w     [w0], w0
    330e:	9e 00 78    	mov.w     [w14], w1
    3310:	91 00 78    	mov.w     [w1], w1
    3312:	91 00 78    	mov.w     [w1], w1
    3314:	01 20 a0    	bset.w    w1, #0x2
    3316:	01 08 78    	mov.w     w1, [w0]
    3318:	08 00 37    	bra       0x332a <.L64>

0000331a <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    331a:	ee 48 90    	mov.b     [w14+14], w1
    331c:	e0 c4 b3    	mov.b     #0x4e, w0
    331e:	80 cf 50    	sub.b     w1, w0, [w15]
    3320:	04 00 32    	bra       Z, 0x332a <.L64>
    3322:	ee 48 90    	mov.b     [w14+14], w1
    3324:	e0 c6 b3    	mov.b     #0x6e, w0
    3326:	80 cf 50    	sub.b     w1, w0, [w15]
    3328:	a2 00 3a    	bra       NZ, 0x346e <.L83>

0000332a <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    332a:	4e b8 97    	mov.w     [w14-8], w0
    332c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    332e:	08 00 3a    	bra       NZ, 0x3340 <.L67>

00003330 <.LSM199>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    3330:	1e 00 78    	mov.w     [w14], w0
    3332:	10 00 78    	mov.w     [w0], w0
    3334:	9e 00 78    	mov.w     [w14], w1
    3336:	91 00 78    	mov.w     [w1], w1
    3338:	91 00 78    	mov.w     [w1], w1
    333a:	01 00 a0    	bset.w    w1, #0x0
    333c:	01 08 78    	mov.w     w1, [w0]
    333e:	03 00 37    	bra       0x3346 <.L68>

00003340 <.L67>:
    } else if (stopbits!=1) {
    3340:	4e b8 97    	mov.w     [w14-8], w0
    3342:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3344:	96 00 3a    	bra       NZ, 0x3472 <.L84>

00003346 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    3346:	2e b8 97    	mov.w     [w14-12], w0
    3348:	00 00 e0    	cp0.w     w0
    334a:	04 00 3a    	bra       NZ, 0x3354 <.L69>

0000334c <.LSM202>:
        self->putc = __putc_nobuffer;
    334c:	1e 00 78    	mov.w     [w14], w0
    334e:	c1 9c 22    	mov.w     #0x29cc, w1
    3350:	41 18 98    	mov.w     w1, [w0+56]
    3352:	36 00 37    	bra       0x33c0 <.L70>

00003354 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    3354:	1e 00 78    	mov.w     [w14], w0
    3356:	10 00 90    	mov.w     [w0+2], w0
    3358:	9e 00 78    	mov.w     [w14], w1
    335a:	91 00 90    	mov.w     [w1+2], w1
    335c:	11 01 78    	mov.w     [w1], w2
    335e:	01 00 22    	mov.w     #0x2000, w1
    3360:	82 80 70    	ior.w     w1, w2, w1
    3362:	01 08 78    	mov.w     w1, [w0]

00003364 <.LSM204>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    3364:	1e 00 78    	mov.w     [w14], w0
    3366:	ae b8 97    	mov.w     [w14-12], w1
    3368:	11 10 98    	mov.w     w1, [w0+34]

0000336a <.LSM205>:
        self->TXbuffer.length = TXbufferlen;
    336a:	1e 00 78    	mov.w     [w14], w0
    336c:	9e b8 97    	mov.w     [w14-14], w1
    336e:	21 10 98    	mov.w     w1, [w0+36]

00003370 <.LSM206>:
        self->TXbuffer.head = 0;
    3370:	1e 00 78    	mov.w     [w14], w0
    3372:	80 00 eb    	clr.w     w1
    3374:	31 10 98    	mov.w     w1, [w0+38]

00003376 <.LSM207>:
        self->TXbuffer.tail = 0;
    3376:	1e 00 78    	mov.w     [w14], w0
    3378:	80 00 eb    	clr.w     w1
    337a:	41 10 98    	mov.w     w1, [w0+40]

0000337c <.LSM208>:
        self->TXbuffer.count = 0;
    337c:	1e 00 78    	mov.w     [w14], w0
    337e:	80 00 eb    	clr.w     w1
    3380:	51 10 98    	mov.w     w1, [w0+42]

00003382 <.LSM209>:
        self->TXthreshold = TXthreshold;
    3382:	1e 00 78    	mov.w     [w14], w0
    3384:	be b8 97    	mov.w     [w14-10], w1
    3386:	31 18 98    	mov.w     w1, [w0+54]

00003388 <.LSM210>:
        self->putc = __putc_buffer;
    3388:	1e 00 78    	mov.w     [w14], w0
    338a:	e1 a0 22    	mov.w     #0x2a0e, w1
    338c:	41 18 98    	mov.w     w1, [w0+56]

0000338e <.LSM211>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    338e:	1e 00 78    	mov.w     [w14], w0
    3390:	50 00 90    	mov.w     [w0+10], w0
    3392:	9e 00 78    	mov.w     [w14], w1
    3394:	d1 00 90    	mov.w     [w1+10], w1
    3396:	11 01 78    	mov.w     [w1], w2
    3398:	9e 00 78    	mov.w     [w14], w1
    339a:	e1 48 90    	mov.b     [w1+14], w1
    339c:	81 80 fb    	ze        w1, w1
    339e:	13 00 20    	mov.w     #0x1, w3
    33a0:	81 18 dd    	sl.w      w3, w1, w1
    33a2:	81 80 ea    	com.w     w1, w1
    33a4:	81 00 61    	and.w     w2, w1, w1
    33a6:	01 08 78    	mov.w     w1, [w0]

000033a8 <.LSM212>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    33a8:	1e 00 78    	mov.w     [w14], w0
    33aa:	60 00 90    	mov.w     [w0+12], w0
    33ac:	9e 00 78    	mov.w     [w14], w1
    33ae:	e1 00 90    	mov.w     [w1+12], w1
    33b0:	11 01 78    	mov.w     [w1], w2
    33b2:	9e 00 78    	mov.w     [w14], w1
    33b4:	e1 48 90    	mov.b     [w1+14], w1
    33b6:	81 80 fb    	ze        w1, w1
    33b8:	13 00 20    	mov.w     #0x1, w3
    33ba:	81 18 dd    	sl.w      w3, w1, w1
    33bc:	82 80 70    	ior.w     w1, w2, w1
    33be:	01 08 78    	mov.w     w1, [w0]

000033c0 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    33c0:	0e b8 97    	mov.w     [w14-16], w0
    33c2:	00 00 e0    	cp0.w     w0
    33c4:	04 00 3a    	bra       NZ, 0x33ce <.L71>

000033c6 <.LSM214>:
        self->getc = __getc_nobuffer;
    33c6:	1e 00 78    	mov.w     [w14], w0
    33c8:	01 9f 22    	mov.w     #0x29f0, w1
    33ca:	51 18 98    	mov.w     w1, [w0+58]
    33cc:	2b 00 37    	bra       0x3424 <.L72>

000033ce <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    33ce:	1e 00 78    	mov.w     [w14], w0
    33d0:	8e b8 97    	mov.w     [w14-16], w1
    33d2:	61 10 98    	mov.w     w1, [w0+44]

000033d4 <.LSM216>:
        self->RXbuffer.length = RXbufferlen;
    33d4:	1e 00 78    	mov.w     [w14], w0
    33d6:	fe b0 97    	mov.w     [w14-18], w1
    33d8:	71 10 98    	mov.w     w1, [w0+46]

000033da <.LSM217>:
        self->RXbuffer.head = 0;
    33da:	1e 00 78    	mov.w     [w14], w0
    33dc:	80 00 eb    	clr.w     w1
    33de:	01 18 98    	mov.w     w1, [w0+48]

000033e0 <.LSM218>:
        self->RXbuffer.tail = 0;
    33e0:	1e 00 78    	mov.w     [w14], w0
    33e2:	80 00 eb    	clr.w     w1
    33e4:	11 18 98    	mov.w     w1, [w0+50]

000033e6 <.LSM219>:
        self->RXbuffer.count = 0;
    33e6:	1e 00 78    	mov.w     [w14], w0
    33e8:	80 00 eb    	clr.w     w1
    33ea:	21 18 98    	mov.w     w1, [w0+52]

000033ec <.LSM220>:
        self->getc = __getc_buffer;
    33ec:	1e 00 78    	mov.w     [w14], w0
    33ee:	61 b0 22    	mov.w     #0x2b06, w1
    33f0:	51 18 98    	mov.w     w1, [w0+58]

000033f2 <.LSM221>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    33f2:	1e 00 78    	mov.w     [w14], w0
    33f4:	50 00 90    	mov.w     [w0+10], w0
    33f6:	9e 00 78    	mov.w     [w14], w1
    33f8:	d1 00 90    	mov.w     [w1+10], w1
    33fa:	11 01 78    	mov.w     [w1], w2
    33fc:	9e 00 78    	mov.w     [w14], w1
    33fe:	f1 48 90    	mov.b     [w1+15], w1
    3400:	81 80 fb    	ze        w1, w1
    3402:	13 00 20    	mov.w     #0x1, w3
    3404:	81 18 dd    	sl.w      w3, w1, w1
    3406:	81 80 ea    	com.w     w1, w1
    3408:	81 00 61    	and.w     w2, w1, w1
    340a:	01 08 78    	mov.w     w1, [w0]

0000340c <.LSM222>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    340c:	1e 00 78    	mov.w     [w14], w0
    340e:	60 00 90    	mov.w     [w0+12], w0
    3410:	9e 00 78    	mov.w     [w14], w1
    3412:	e1 00 90    	mov.w     [w1+12], w1
    3414:	11 01 78    	mov.w     [w1], w2
    3416:	9e 00 78    	mov.w     [w14], w1
    3418:	f1 48 90    	mov.b     [w1+15], w1
    341a:	81 80 fb    	ze        w1, w1
    341c:	13 00 20    	mov.w     #0x1, w3
    341e:	81 18 dd    	sl.w      w3, w1, w1
    3420:	82 80 70    	ior.w     w1, w2, w1
    3422:	01 08 78    	mov.w     w1, [w0]

00003424 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    3424:	1e 00 78    	mov.w     [w14], w0
    3426:	10 00 78    	mov.w     [w0], w0
    3428:	9e 00 78    	mov.w     [w14], w1
    342a:	91 00 78    	mov.w     [w1], w1
    342c:	11 01 78    	mov.w     [w1], w2
    342e:	01 00 28    	mov.w     #0x8000, w1
    3430:	82 80 70    	ior.w     w1, w2, w1
    3432:	01 08 78    	mov.w     w1, [w0]

00003434 <.LSM224>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    3434:	1e 00 78    	mov.w     [w14], w0
    3436:	10 00 90    	mov.w     [w0+2], w0
    3438:	9e 00 78    	mov.w     [w14], w1
    343a:	91 00 90    	mov.w     [w1+2], w1
    343c:	11 01 78    	mov.w     [w1], w2
    343e:	01 40 20    	mov.w     #0x400, w1
    3440:	82 80 70    	ior.w     w1, w2, w1
    3442:	01 08 78    	mov.w     w1, [w0]
    3444:	17 00 37    	bra       0x3474 <.L40>

00003446 <.L73>:
    3446:	00 00 00    	nop       
    3448:	15 00 37    	bra       0x3474 <.L40>

0000344a <.L74>:
    344a:	00 00 00    	nop       
    344c:	13 00 37    	bra       0x3474 <.L40>

0000344e <.L75>:
    344e:	00 00 00    	nop       
    3450:	11 00 37    	bra       0x3474 <.L40>

00003452 <.L76>:
    3452:	00 00 00    	nop       
    3454:	0f 00 37    	bra       0x3474 <.L40>

00003456 <.L77>:
    3456:	00 00 00    	nop       
    3458:	0d 00 37    	bra       0x3474 <.L40>

0000345a <.L78>:
    345a:	00 00 00    	nop       
    345c:	0b 00 37    	bra       0x3474 <.L40>

0000345e <.L79>:
    345e:	00 00 00    	nop       
    3460:	09 00 37    	bra       0x3474 <.L40>

00003462 <.L80>:
    3462:	00 00 00    	nop       
    3464:	07 00 37    	bra       0x3474 <.L40>

00003466 <.L81>:
    3466:	00 00 00    	nop       
    3468:	05 00 37    	bra       0x3474 <.L40>

0000346a <.L82>:
    346a:	00 00 00    	nop       
    346c:	03 00 37    	bra       0x3474 <.L40>

0000346e <.L83>:
    346e:	00 00 00    	nop       
    3470:	01 00 37    	bra       0x3474 <.L40>

00003472 <.L84>:
    3472:	00 00 00    	nop       

00003474 <.L40>:
}
    3474:	4f 04 78    	mov.w     [--w15], w8
    3476:	00 80 fa    	ulnk      
    3478:	00 00 06    	return    

0000347a <_uart_close>:

void uart_close(_UART *self) {
    347a:	02 00 fa    	lnk       #0x2
    347c:	00 0f 78    	mov.w     w0, [w14]

0000347e <.LSM234>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    347e:	1e 00 78    	mov.w     [w14], w0
    3480:	10 00 90    	mov.w     [w0+2], w0
    3482:	9e 00 78    	mov.w     [w14], w1
    3484:	91 00 90    	mov.w     [w1+2], w1
    3486:	11 01 78    	mov.w     [w1], w2
    3488:	f1 bf 2f    	mov.w     #0xfbff, w1
    348a:	81 00 61    	and.w     w2, w1, w1
    348c:	01 08 78    	mov.w     w1, [w0]

0000348e <.LSM235>:
    *(self->UxMODE) = 0;        // Disable UART module
    348e:	1e 00 78    	mov.w     [w14], w0
    3490:	10 00 78    	mov.w     [w0], w0
    3492:	80 00 eb    	clr.w     w1
    3494:	01 08 78    	mov.w     w1, [w0]

00003496 <.LSM236>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    3496:	1e 00 78    	mov.w     [w14], w0
    3498:	60 00 90    	mov.w     [w0+12], w0
    349a:	9e 00 78    	mov.w     [w14], w1
    349c:	e1 00 90    	mov.w     [w1+12], w1
    349e:	11 01 78    	mov.w     [w1], w2
    34a0:	9e 00 78    	mov.w     [w14], w1
    34a2:	e1 48 90    	mov.b     [w1+14], w1
    34a4:	81 80 fb    	ze        w1, w1
    34a6:	13 00 20    	mov.w     #0x1, w3
    34a8:	81 18 dd    	sl.w      w3, w1, w1
    34aa:	81 80 ea    	com.w     w1, w1
    34ac:	81 00 61    	and.w     w2, w1, w1
    34ae:	01 08 78    	mov.w     w1, [w0]

000034b0 <.LSM237>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    34b0:	1e 00 78    	mov.w     [w14], w0
    34b2:	60 00 90    	mov.w     [w0+12], w0
    34b4:	9e 00 78    	mov.w     [w14], w1
    34b6:	e1 00 90    	mov.w     [w1+12], w1
    34b8:	11 01 78    	mov.w     [w1], w2
    34ba:	9e 00 78    	mov.w     [w14], w1
    34bc:	f1 48 90    	mov.b     [w1+15], w1
    34be:	81 80 fb    	ze        w1, w1
    34c0:	13 00 20    	mov.w     #0x1, w3
    34c2:	81 18 dd    	sl.w      w3, w1, w1
    34c4:	81 80 ea    	com.w     w1, w1
    34c6:	81 00 61    	and.w     w2, w1, w1
    34c8:	01 08 78    	mov.w     w1, [w0]

000034ca <.LSM238>:
    self->putc = NULL;
    34ca:	1e 00 78    	mov.w     [w14], w0
    34cc:	80 00 eb    	clr.w     w1
    34ce:	41 18 98    	mov.w     w1, [w0+56]

000034d0 <.LSM239>:
    self->getc = NULL;
    34d0:	1e 00 78    	mov.w     [w14], w0
    34d2:	80 00 eb    	clr.w     w1
    34d4:	51 18 98    	mov.w     w1, [w0+58]

000034d6 <.LSM240>:
    if (self->TX) {
    34d6:	1e 00 78    	mov.w     [w14], w0
    34d8:	50 08 90    	mov.w     [w0+26], w0
    34da:	00 00 e0    	cp0.w     w0
    34dc:	2f 00 32    	bra       Z, 0x353c <.L86>

000034de <.LSM241>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    34de:	11 3a 80    	mov.w     0x742, w1
    34e0:	f0 0b 20    	mov.w     #0xbf, w0
    34e2:	00 81 60    	and.w     w1, w0, w2
    34e4:	60 04 20    	mov.w     #0x46, w0
    34e6:	71 05 20    	mov.w     #0x57, w1
    34e8:	23 74 20    	mov.w     #0x742, w3
    34ea:	80 49 78    	mov.b     w0, [w3]
    34ec:	81 49 78    	mov.b     w1, [w3]
    34ee:	82 49 78    	mov.b     w2, [w3]

000034f0 <.LSM242>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    34f0:	1e 00 78    	mov.w     [w14], w0
    34f2:	50 08 90    	mov.w     [w0+26], w0
    34f4:	70 00 90    	mov.w     [w0+14], w0
    34f6:	9e 00 78    	mov.w     [w14], w1
    34f8:	d1 08 90    	mov.w     [w1+26], w1
    34fa:	f1 00 90    	mov.w     [w1+14], w1
    34fc:	11 01 78    	mov.w     [w1], w2
    34fe:	9e 00 78    	mov.w     [w14], w1
    3500:	d1 08 90    	mov.w     [w1+26], w1
    3502:	a1 48 90    	mov.b     [w1+10], w1
    3504:	81 80 fb    	ze        w1, w1
    3506:	f3 03 20    	mov.w     #0x3f, w3
    3508:	81 18 dd    	sl.w      w3, w1, w1
    350a:	81 80 ea    	com.w     w1, w1
    350c:	81 00 61    	and.w     w2, w1, w1
    350e:	01 08 78    	mov.w     w1, [w0]

00003510 <.LSM243>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3510:	11 3a 80    	mov.w     0x742, w1
    3512:	00 04 20    	mov.w     #0x40, w0
    3514:	01 01 70    	ior.w     w0, w1, w2
    3516:	60 04 20    	mov.w     #0x46, w0
    3518:	71 05 20    	mov.w     #0x57, w1
    351a:	23 74 20    	mov.w     #0x742, w3
    351c:	80 49 78    	mov.b     w0, [w3]
    351e:	81 49 78    	mov.b     w1, [w3]
    3520:	82 49 78    	mov.b     w2, [w3]

00003522 <.LSM244>:
        self->TX->owner = NULL;
    3522:	1e 00 78    	mov.w     [w14], w0
    3524:	50 08 90    	mov.w     [w0+26], w0
    3526:	80 00 eb    	clr.w     w1
    3528:	01 08 98    	mov.w     w1, [w0+16]

0000352a <.LSM245>:
        pin_digitalOut(self->TX);
    352a:	1e 00 78    	mov.w     [w14], w0
    352c:	50 08 90    	mov.w     [w0+26], w0
    352e:	1a 0a 07    	rcall     0x4964 <_pin_digitalOut>

00003530 <.LSM246>:
        pin_set(self->TX);
    3530:	1e 00 78    	mov.w     [w14], w0
    3532:	50 08 90    	mov.w     [w0+26], w0
    3534:	74 0a 07    	rcall     0x4a1e <_pin_set>

00003536 <.LSM247>:
        self->TX = NULL;
    3536:	1e 00 78    	mov.w     [w14], w0
    3538:	80 00 eb    	clr.w     w1
    353a:	51 08 98    	mov.w     w1, [w0+26]

0000353c <.L86>:
    }
    if (self->RX) {
    353c:	1e 00 78    	mov.w     [w14], w0
    353e:	60 08 90    	mov.w     [w0+28], w0
    3540:	00 00 e0    	cp0.w     w0
    3542:	28 00 32    	bra       Z, 0x3594 <.L87>

00003544 <.LSM249>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3544:	11 3a 80    	mov.w     0x742, w1
    3546:	f0 0b 20    	mov.w     #0xbf, w0
    3548:	00 81 60    	and.w     w1, w0, w2
    354a:	60 04 20    	mov.w     #0x46, w0
    354c:	71 05 20    	mov.w     #0x57, w1
    354e:	23 74 20    	mov.w     #0x742, w3
    3550:	80 49 78    	mov.b     w0, [w3]
    3552:	81 49 78    	mov.b     w1, [w3]
    3554:	82 49 78    	mov.b     w2, [w3]

00003556 <.LSM250>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    3556:	1e 00 78    	mov.w     [w14], w0
    3558:	00 08 90    	mov.w     [w0+16], w0
    355a:	9e 00 78    	mov.w     [w14], w1
    355c:	81 08 90    	mov.w     [w1+16], w1
    355e:	11 01 78    	mov.w     [w1], w2
    3560:	9e 00 78    	mov.w     [w14], w1
    3562:	c1 50 90    	mov.b     [w1+20], w1
    3564:	81 80 fb    	ze        w1, w1
    3566:	f3 03 20    	mov.w     #0x3f, w3
    3568:	81 18 dd    	sl.w      w3, w1, w1
    356a:	82 80 70    	ior.w     w1, w2, w1
    356c:	01 08 78    	mov.w     w1, [w0]

0000356e <.LSM251>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    356e:	11 3a 80    	mov.w     0x742, w1
    3570:	00 04 20    	mov.w     #0x40, w0
    3572:	01 01 70    	ior.w     w0, w1, w2
    3574:	60 04 20    	mov.w     #0x46, w0
    3576:	71 05 20    	mov.w     #0x57, w1
    3578:	23 74 20    	mov.w     #0x742, w3
    357a:	80 49 78    	mov.b     w0, [w3]
    357c:	81 49 78    	mov.b     w1, [w3]
    357e:	82 49 78    	mov.b     w2, [w3]

00003580 <.LSM252>:
        self->RX->owner = NULL;
    3580:	1e 00 78    	mov.w     [w14], w0
    3582:	60 08 90    	mov.w     [w0+28], w0
    3584:	80 00 eb    	clr.w     w1
    3586:	01 08 98    	mov.w     w1, [w0+16]

00003588 <.LSM253>:
        pin_digitalIn(self->RX);
    3588:	1e 00 78    	mov.w     [w14], w0
    358a:	60 08 90    	mov.w     [w0+28], w0
    358c:	c4 09 07    	rcall     0x4916 <_pin_digitalIn>

0000358e <.LSM254>:
        self->RX = NULL;
    358e:	1e 00 78    	mov.w     [w14], w0
    3590:	80 00 eb    	clr.w     w1
    3592:	61 08 98    	mov.w     w1, [w0+28]

00003594 <.L87>:
    }
    if (self->RTS) {
    3594:	1e 00 78    	mov.w     [w14], w0
    3596:	70 08 90    	mov.w     [w0+30], w0
    3598:	00 00 e0    	cp0.w     w0
    359a:	2f 00 32    	bra       Z, 0x35fa <.L88>

0000359c <.LSM256>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    359c:	11 3a 80    	mov.w     0x742, w1
    359e:	f0 0b 20    	mov.w     #0xbf, w0
    35a0:	00 81 60    	and.w     w1, w0, w2
    35a2:	60 04 20    	mov.w     #0x46, w0
    35a4:	71 05 20    	mov.w     #0x57, w1
    35a6:	23 74 20    	mov.w     #0x742, w3
    35a8:	80 49 78    	mov.b     w0, [w3]
    35aa:	81 49 78    	mov.b     w1, [w3]
    35ac:	82 49 78    	mov.b     w2, [w3]

000035ae <.LSM257>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    35ae:	1e 00 78    	mov.w     [w14], w0
    35b0:	70 08 90    	mov.w     [w0+30], w0
    35b2:	70 00 90    	mov.w     [w0+14], w0
    35b4:	9e 00 78    	mov.w     [w14], w1
    35b6:	f1 08 90    	mov.w     [w1+30], w1
    35b8:	f1 00 90    	mov.w     [w1+14], w1
    35ba:	11 01 78    	mov.w     [w1], w2
    35bc:	9e 00 78    	mov.w     [w14], w1
    35be:	f1 08 90    	mov.w     [w1+30], w1
    35c0:	a1 48 90    	mov.b     [w1+10], w1
    35c2:	81 80 fb    	ze        w1, w1
    35c4:	f3 03 20    	mov.w     #0x3f, w3
    35c6:	81 18 dd    	sl.w      w3, w1, w1
    35c8:	81 80 ea    	com.w     w1, w1
    35ca:	81 00 61    	and.w     w2, w1, w1
    35cc:	01 08 78    	mov.w     w1, [w0]

000035ce <.LSM258>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    35ce:	11 3a 80    	mov.w     0x742, w1
    35d0:	00 04 20    	mov.w     #0x40, w0
    35d2:	01 01 70    	ior.w     w0, w1, w2
    35d4:	60 04 20    	mov.w     #0x46, w0
    35d6:	71 05 20    	mov.w     #0x57, w1
    35d8:	23 74 20    	mov.w     #0x742, w3
    35da:	80 49 78    	mov.b     w0, [w3]
    35dc:	81 49 78    	mov.b     w1, [w3]
    35de:	82 49 78    	mov.b     w2, [w3]

000035e0 <.LSM259>:
        self->RTS->owner = NULL;
    35e0:	1e 00 78    	mov.w     [w14], w0
    35e2:	70 08 90    	mov.w     [w0+30], w0
    35e4:	80 00 eb    	clr.w     w1
    35e6:	01 08 98    	mov.w     w1, [w0+16]

000035e8 <.LSM260>:
        pin_digitalOut(self->RTS);
    35e8:	1e 00 78    	mov.w     [w14], w0
    35ea:	70 08 90    	mov.w     [w0+30], w0
    35ec:	bb 09 07    	rcall     0x4964 <_pin_digitalOut>

000035ee <.LSM261>:
        pin_set(self->RTS);
    35ee:	1e 00 78    	mov.w     [w14], w0
    35f0:	70 08 90    	mov.w     [w0+30], w0
    35f2:	15 0a 07    	rcall     0x4a1e <_pin_set>

000035f4 <.LSM262>:
        self->RTS = NULL;
    35f4:	1e 00 78    	mov.w     [w14], w0
    35f6:	80 00 eb    	clr.w     w1
    35f8:	71 08 98    	mov.w     w1, [w0+30]

000035fa <.L88>:
    }
    if (self->CTS) {
    35fa:	1e 00 78    	mov.w     [w14], w0
    35fc:	00 10 90    	mov.w     [w0+32], w0
    35fe:	00 00 e0    	cp0.w     w0
    3600:	28 00 32    	bra       Z, 0x3652 <.L85>

00003602 <.LSM264>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3602:	11 3a 80    	mov.w     0x742, w1
    3604:	f0 0b 20    	mov.w     #0xbf, w0
    3606:	00 81 60    	and.w     w1, w0, w2
    3608:	60 04 20    	mov.w     #0x46, w0
    360a:	71 05 20    	mov.w     #0x57, w1
    360c:	23 74 20    	mov.w     #0x742, w3
    360e:	80 49 78    	mov.b     w0, [w3]
    3610:	81 49 78    	mov.b     w1, [w3]
    3612:	82 49 78    	mov.b     w2, [w3]

00003614 <.LSM265>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    3614:	1e 00 78    	mov.w     [w14], w0
    3616:	10 08 90    	mov.w     [w0+18], w0
    3618:	9e 00 78    	mov.w     [w14], w1
    361a:	91 08 90    	mov.w     [w1+18], w1
    361c:	11 01 78    	mov.w     [w1], w2
    361e:	9e 00 78    	mov.w     [w14], w1
    3620:	d1 50 90    	mov.b     [w1+21], w1
    3622:	81 80 fb    	ze        w1, w1
    3624:	f3 03 20    	mov.w     #0x3f, w3
    3626:	81 18 dd    	sl.w      w3, w1, w1
    3628:	82 80 70    	ior.w     w1, w2, w1
    362a:	01 08 78    	mov.w     w1, [w0]

0000362c <.LSM266>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    362c:	11 3a 80    	mov.w     0x742, w1
    362e:	00 04 20    	mov.w     #0x40, w0
    3630:	01 01 70    	ior.w     w0, w1, w2
    3632:	60 04 20    	mov.w     #0x46, w0
    3634:	71 05 20    	mov.w     #0x57, w1
    3636:	23 74 20    	mov.w     #0x742, w3
    3638:	80 49 78    	mov.b     w0, [w3]
    363a:	81 49 78    	mov.b     w1, [w3]
    363c:	82 49 78    	mov.b     w2, [w3]

0000363e <.LSM267>:
        self->CTS->owner = NULL;
    363e:	1e 00 78    	mov.w     [w14], w0
    3640:	00 10 90    	mov.w     [w0+32], w0
    3642:	80 00 eb    	clr.w     w1
    3644:	01 08 98    	mov.w     w1, [w0+16]

00003646 <.LSM268>:
        pin_digitalIn(self->CTS);
    3646:	1e 00 78    	mov.w     [w14], w0
    3648:	00 10 90    	mov.w     [w0+32], w0
    364a:	65 09 07    	rcall     0x4916 <_pin_digitalIn>

0000364c <.LSM269>:
        self->CTS = NULL;
    364c:	1e 00 78    	mov.w     [w14], w0
    364e:	80 00 eb    	clr.w     w1
    3650:	01 10 98    	mov.w     w1, [w0+32]

00003652 <.L85>:
    }
}
    3652:	00 80 fa    	ulnk      
    3654:	00 00 06    	return    

00003656 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    3656:	04 00 fa    	lnk       #0x4
    3658:	00 0f 78    	mov.w     w0, [w14]
    365a:	21 47 98    	mov.b     w1, [w14+2]

0000365c <.LSM272>:
    if (self->putc)
    365c:	1e 00 78    	mov.w     [w14], w0
    365e:	40 18 90    	mov.w     [w0+56], w0
    3660:	00 00 e0    	cp0.w     w0
    3662:	05 00 32    	bra       Z, 0x366e <.L90>

00003664 <.LSM273>:
        self->putc(self, ch);
    3664:	1e 00 78    	mov.w     [w14], w0
    3666:	40 19 90    	mov.w     [w0+56], w2
    3668:	ae 40 90    	mov.b     [w14+2], w1
    366a:	1e 00 78    	mov.w     [w14], w0
    366c:	02 00 01    	call      w2

0000366e <.L90>:
}
    366e:	00 80 fa    	ulnk      
    3670:	00 00 06    	return    

00003672 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    3672:	02 00 fa    	lnk       #0x2
    3674:	00 0f 78    	mov.w     w0, [w14]

00003676 <.LSM276>:
    if (self->getc)
    3676:	1e 00 78    	mov.w     [w14], w0
    3678:	50 18 90    	mov.w     [w0+58], w0
    367a:	00 00 e0    	cp0.w     w0
    367c:	05 00 32    	bra       Z, 0x3688 <.L93>

0000367e <.LSM277>:
        return self->getc(self);
    367e:	1e 00 78    	mov.w     [w14], w0
    3680:	d0 18 90    	mov.w     [w0+58], w1
    3682:	1e 00 78    	mov.w     [w14], w0
    3684:	01 00 01    	call      w1
    3686:	01 00 37    	bra       0x368a <.L94>

00003688 <.L93>:
    else
        return 0xFF;
    3688:	00 c0 eb    	setm.b    w0

0000368a <.L94>:
}
    368a:	00 80 fa    	ulnk      
    368c:	00 00 06    	return    

0000368e <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    368e:	02 00 fa    	lnk       #0x2
    3690:	00 0f 78    	mov.w     w0, [w14]

00003692 <.LSM281>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    3692:	1e 00 78    	mov.w     [w14], w0
    3694:	10 00 90    	mov.w     [w0+2], w0
    3696:	90 00 78    	mov.w     [w0], w1
    3698:	00 40 20    	mov.w     #0x400, w0
    369a:	00 80 60    	and.w     w1, w0, w0
    369c:	00 00 e0    	cp0.w     w0
    369e:	08 00 3a    	bra       NZ, 0x36b0 <.L95>

000036a0 <.LSM282>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    36a0:	1e 00 78    	mov.w     [w14], w0
    36a2:	10 00 90    	mov.w     [w0+2], w0
    36a4:	9e 00 78    	mov.w     [w14], w1
    36a6:	91 00 90    	mov.w     [w1+2], w1
    36a8:	11 01 78    	mov.w     [w1], w2
    36aa:	01 40 20    	mov.w     #0x400, w1
    36ac:	82 80 70    	ior.w     w1, w2, w1
    36ae:	01 08 78    	mov.w     w1, [w0]

000036b0 <.L95>:
}
    36b0:	00 80 fa    	ulnk      
    36b2:	00 00 06    	return    

000036b4 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    36b4:	04 00 fa    	lnk       #0x4
    36b6:	00 0f 78    	mov.w     w0, [w14]
    36b8:	11 07 98    	mov.w     w1, [w14+2]

000036ba <.LSM285>:
    while (*str)
    36ba:	08 00 37    	bra       0x36cc <.L98>

000036bc <.L99>:
        uart_putc(self, *str++);
    36bc:	1e 00 90    	mov.w     [w14+2], w0
    36be:	10 40 78    	mov.b     [w0], w0
    36c0:	9e 00 90    	mov.w     [w14+2], w1
    36c2:	81 00 e8    	inc.w     w1, w1
    36c4:	11 07 98    	mov.w     w1, [w14+2]
    36c6:	80 40 78    	mov.b     w0, w1
    36c8:	1e 00 78    	mov.w     [w14], w0
    36ca:	c5 ff 07    	rcall     0x3656 <_uart_putc>

000036cc <.L98>:
    36cc:	1e 00 90    	mov.w     [w14+2], w0
    36ce:	10 40 78    	mov.b     [w0], w0
    36d0:	00 04 e0    	cp0.b     w0
    36d2:	f4 ff 3a    	bra       NZ, 0x36bc <.L99>

000036d4 <.LSM288>:
    uart_flushTxBuffer(self);
    36d4:	1e 00 78    	mov.w     [w14], w0
    36d6:	db ff 07    	rcall     0x368e <_uart_flushTxBuffer>

000036d8 <.LSM289>:
}
    36d8:	00 80 fa    	ulnk      
    36da:	00 00 06    	return    

000036dc <_uart_gets_term>:

void uart_gets_term(_UART *self, uint8_t *str, uint16_t len) {
    36dc:	0a 00 fa    	lnk       #0xa
    36de:	20 07 98    	mov.w     w0, [w14+4]
    36e0:	31 07 98    	mov.w     w1, [w14+6]
    36e2:	42 07 98    	mov.w     w2, [w14+8]

000036e4 <.LSM291>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    36e4:	4e 00 90    	mov.w     [w14+8], w0
    36e6:	00 00 e0    	cp0.w     w0
    36e8:	87 00 32    	bra       Z, 0x37f8 <.L113>

000036ea <.LSM292>:
        return;

    if (len==1) {
    36ea:	4e 00 90    	mov.w     [w14+8], w0
    36ec:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    36ee:	04 00 3a    	bra       NZ, 0x36f8 <.L103>

000036f0 <.LSM293>:
        *str = '\0';
    36f0:	3e 00 90    	mov.w     [w14+6], w0
    36f2:	80 40 eb    	clr.b     w1
    36f4:	01 48 78    	mov.b     w1, [w0]

000036f6 <.LSM294>:
        return;
    36f6:	81 00 37    	bra       0x37fa <.L100>

000036f8 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    36f8:	b1 c1 b3    	mov.b     #0x1b, w1
    36fa:	2e 00 90    	mov.w     [w14+4], w0
    36fc:	ac ff 07    	rcall     0x3656 <_uart_putc>

000036fe <.LSM296>:
    uart_putc(self, '7');
    36fe:	71 c3 b3    	mov.b     #0x37, w1
    3700:	2e 00 90    	mov.w     [w14+4], w0
    3702:	a9 ff 07    	rcall     0x3656 <_uart_putc>

00003704 <.LSM297>:
    uart_flushTxBuffer(self);
    3704:	2e 00 90    	mov.w     [w14+4], w0
    3706:	c3 ff 07    	rcall     0x368e <_uart_flushTxBuffer>

00003708 <.LSM298>:
    start = str;
    3708:	be 00 90    	mov.w     [w14+6], w1
    370a:	11 07 98    	mov.w     w1, [w14+2]

0000370c <.LSM299>:
    left = len;
    370c:	ce 00 90    	mov.w     [w14+8], w1
    370e:	01 0f 78    	mov.w     w1, [w14]
    3710:	03 00 37    	bra       0x3718 <.L112>

00003712 <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    3712:	00 00 00    	nop       
    3714:	01 00 37    	bra       0x3718 <.L112>

00003716 <.L115>:
    3716:	00 00 00    	nop       

00003718 <.L112>:
    3718:	2e 00 90    	mov.w     [w14+4], w0
    371a:	ab ff 07    	rcall     0x3672 <_uart_getc>
    371c:	be 00 90    	mov.w     [w14+6], w1
    371e:	80 48 78    	mov.b     w0, [w1]

00003720 <.LSM302>:
    3720:	3e 00 90    	mov.w     [w14+6], w0
    3722:	10 40 78    	mov.b     [w0], w0
    3724:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    3726:	0c 00 3a    	bra       NZ, 0x3740 <.L104>

00003728 <.LSM303>:

    *str = '\0';                            // Terminarte the string with null
    3728:	3e 00 90    	mov.w     [w14+6], w0
    372a:	80 40 eb    	clr.b     w1
    372c:	01 48 78    	mov.b     w1, [w0]

0000372e <.LSM304>:
    uart_putc(self, '\n');                  // Send newline and
    372e:	a1 c0 b3    	mov.b     #0xa, w1
    3730:	2e 00 90    	mov.w     [w14+4], w0
    3732:	91 ff 07    	rcall     0x3656 <_uart_putc>

00003734 <.LSM305>:
    uart_putc(self, '\r');                  //   carriage return
    3734:	d1 c0 b3    	mov.b     #0xd, w1
    3736:	2e 00 90    	mov.w     [w14+4], w0
    3738:	8e ff 07    	rcall     0x3656 <_uart_putc>

0000373a <.LSM306>:
    uart_flushTxBuffer(self);
    373a:	2e 00 90    	mov.w     [w14+4], w0
    373c:	a8 ff 07    	rcall     0x368e <_uart_flushTxBuffer>
    373e:	5d 00 37    	bra       0x37fa <.L100>

00003740 <.L104>:
    3740:	3e 00 90    	mov.w     [w14+6], w0
    3742:	10 40 78    	mov.b     [w0], w0
    3744:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    3746:	16 00 3a    	bra       NZ, 0x3774 <.L105>

00003748 <.LSM308>:
    3748:	b1 c1 b3    	mov.b     #0x1b, w1
    374a:	2e 00 90    	mov.w     [w14+4], w0
    374c:	84 ff 07    	rcall     0x3656 <_uart_putc>

0000374e <.LSM309>:
    374e:	81 c3 b3    	mov.b     #0x38, w1
    3750:	2e 00 90    	mov.w     [w14+4], w0
    3752:	81 ff 07    	rcall     0x3656 <_uart_putc>

00003754 <.LSM310>:
    3754:	b1 c1 b3    	mov.b     #0x1b, w1
    3756:	2e 00 90    	mov.w     [w14+4], w0
    3758:	7e ff 07    	rcall     0x3656 <_uart_putc>

0000375a <.LSM311>:
    375a:	b1 c5 b3    	mov.b     #0x5b, w1
    375c:	2e 00 90    	mov.w     [w14+4], w0
    375e:	7b ff 07    	rcall     0x3656 <_uart_putc>

00003760 <.LSM312>:
    3760:	b1 c4 b3    	mov.b     #0x4b, w1
    3762:	2e 00 90    	mov.w     [w14+4], w0
    3764:	78 ff 07    	rcall     0x3656 <_uart_putc>

00003766 <.LSM313>:
    3766:	2e 00 90    	mov.w     [w14+4], w0
    3768:	92 ff 07    	rcall     0x368e <_uart_flushTxBuffer>

0000376a <.LSM314>:
    376a:	9e 00 90    	mov.w     [w14+2], w1
    376c:	31 07 98    	mov.w     w1, [w14+6]

0000376e <.LSM315>:
    376e:	ce 00 90    	mov.w     [w14+8], w1
    3770:	01 0f 78    	mov.w     w1, [w14]

00003772 <.LSM316>:
    3772:	41 00 37    	bra       0x37f6 <.L106>

00003774 <.L105>:
    3774:	3e 00 90    	mov.w     [w14+6], w0
    3776:	10 40 78    	mov.b     [w0], w0
    3778:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    377a:	05 00 32    	bra       Z, 0x3786 <.L107>

0000377c <.LSM318>:
    377c:	3e 00 90    	mov.w     [w14+6], w0
    377e:	90 40 78    	mov.b     [w0], w1

00003780 <.LSM319>:
    3780:	f0 c7 b3    	mov.b     #0x7f, w0
    3782:	80 cf 50    	sub.b     w1, w0, [w15]
    3784:	1a 00 3a    	bra       NZ, 0x37ba <.L108>

00003786 <.L107>:
    3786:	be 00 90    	mov.w     [w14+6], w1
    3788:	1e 00 90    	mov.w     [w14+2], w0
    378a:	80 8f 50    	sub.w     w1, w0, [w15]
    378c:	10 00 36    	bra       LEU, 0x37ae <.L109>

0000378e <.LSM321>:
    378e:	81 c0 b3    	mov.b     #0x8, w1
    3790:	2e 00 90    	mov.w     [w14+4], w0
    3792:	61 ff 07    	rcall     0x3656 <_uart_putc>

00003794 <.LSM322>:
    3794:	01 c2 b3    	mov.b     #0x20, w1
    3796:	2e 00 90    	mov.w     [w14+4], w0
    3798:	5e ff 07    	rcall     0x3656 <_uart_putc>

0000379a <.LSM323>:
    379a:	81 c0 b3    	mov.b     #0x8, w1
    379c:	2e 00 90    	mov.w     [w14+4], w0
    379e:	5b ff 07    	rcall     0x3656 <_uart_putc>

000037a0 <.LSM324>:
    37a0:	2e 00 90    	mov.w     [w14+4], w0
    37a2:	75 ff 07    	rcall     0x368e <_uart_flushTxBuffer>

000037a4 <.LSM325>:
    37a4:	3e 00 90    	mov.w     [w14+6], w0
    37a6:	00 00 e9    	dec.w     w0, w0
    37a8:	30 07 98    	mov.w     w0, [w14+6]

000037aa <.LSM326>:
    37aa:	1e 0f e8    	inc.w     [w14], [w14]
    37ac:	05 00 37    	bra       0x37b8 <.L110>

000037ae <.L109>:
    37ae:	71 c0 b3    	mov.b     #0x7, w1
    37b0:	2e 00 90    	mov.w     [w14+4], w0
    37b2:	51 ff 07    	rcall     0x3656 <_uart_putc>

000037b4 <.LSM328>:
    37b4:	2e 00 90    	mov.w     [w14+4], w0
    37b6:	6b ff 07    	rcall     0x368e <_uart_flushTxBuffer>

000037b8 <.L110>:
    37b8:	1e 00 37    	bra       0x37f6 <.L106>

000037ba <.L108>:
    37ba:	1e 00 78    	mov.w     [w14], w0
    37bc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    37be:	06 00 3a    	bra       NZ, 0x37cc <.L111>

000037c0 <.LSM331>:
    37c0:	71 c0 b3    	mov.b     #0x7, w1
    37c2:	2e 00 90    	mov.w     [w14+4], w0
    37c4:	48 ff 07    	rcall     0x3656 <_uart_putc>

000037c6 <.LSM332>:
    37c6:	2e 00 90    	mov.w     [w14+4], w0
    37c8:	62 ff 07    	rcall     0x368e <_uart_flushTxBuffer>

000037ca <.LSM333>:
    37ca:	15 00 37    	bra       0x37f6 <.L106>

000037cc <.L111>:
    37cc:	3e 00 90    	mov.w     [w14+6], w0
    37ce:	10 40 78    	mov.b     [w0], w0
    37d0:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    37d2:	9f ff 36    	bra       LEU, 0x3712 <.L114>
    37d4:	3e 00 90    	mov.w     [w14+6], w0
    37d6:	90 40 78    	mov.b     [w0], w1
    37d8:	e0 c7 b3    	mov.b     #0x7e, w0
    37da:	80 cf 50    	sub.b     w1, w0, [w15]
    37dc:	9c ff 3e    	bra       GTU, 0x3716 <.L115>

000037de <.LSM335>:
    37de:	3e 00 90    	mov.w     [w14+6], w0
    37e0:	10 40 78    	mov.b     [w0], w0
    37e2:	80 40 78    	mov.b     w0, w1
    37e4:	2e 00 90    	mov.w     [w14+4], w0
    37e6:	37 ff 07    	rcall     0x3656 <_uart_putc>

000037e8 <.LSM336>:
    37e8:	2e 00 90    	mov.w     [w14+4], w0
    37ea:	51 ff 07    	rcall     0x368e <_uart_flushTxBuffer>

000037ec <.LSM337>:
    37ec:	3e 00 90    	mov.w     [w14+6], w0
    37ee:	00 00 e8    	inc.w     w0, w0
    37f0:	30 07 98    	mov.w     w0, [w14+6]

000037f2 <.LSM338>:
    37f2:	1e 0f e9    	dec.w     [w14], [w14]

000037f4 <.LSM339>:
    37f4:	91 ff 37    	bra       0x3718 <.L112>

000037f6 <.L106>:
    37f6:	90 ff 37    	bra       0x3718 <.L112>

000037f8 <.L113>:
    37f8:	00 00 00    	nop       

000037fa <.L100>:
}
    37fa:	00 80 fa    	ulnk      
    37fc:	00 00 06    	return    

000037fe <_uart_gets>:


void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    37fe:	0c 00 fa    	lnk       #0xc
    3800:	30 07 98    	mov.w     w0, [w14+6]
    3802:	41 07 98    	mov.w     w1, [w14+8]
    3804:	52 07 98    	mov.w     w2, [w14+10]

00003806 <.LSM343>:
    uint8_t *start;
    uint16_t left;
    uint8_t char_count = 0;
    3806:	00 40 eb    	clr.b     w0
    3808:	00 4f 78    	mov.b     w0, [w14]

0000380a <.LSM344>:

    if (len==0)
    380a:	5e 00 90    	mov.w     [w14+10], w0
    380c:	00 00 e0    	cp0.w     w0
    380e:	2f 00 32    	bra       Z, 0x386e <.L125>

00003810 <.LSM345>:
        return;

    if (len==1) {
    3810:	5e 00 90    	mov.w     [w14+10], w0
    3812:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3814:	04 00 3a    	bra       NZ, 0x381e <.L119>

00003816 <.LSM346>:
        *str = '\0';
    3816:	4e 00 90    	mov.w     [w14+8], w0
    3818:	80 40 eb    	clr.b     w1
    381a:	01 48 78    	mov.b     w1, [w0]

0000381c <.LSM347>:
        return;
    381c:	29 00 37    	bra       0x3870 <.L116>

0000381e <.L119>:
    }

    // uart_flushTxBuffer(self);
    start = str;
    381e:	ce 00 90    	mov.w     [w14+8], w1
    3820:	11 07 98    	mov.w     w1, [w14+2]

00003822 <.LSM349>:
    left = len;
    3822:	de 00 90    	mov.w     [w14+10], w1
    3824:	21 07 98    	mov.w     w1, [w14+4]
    3826:	03 00 37    	bra       0x382e <.L124>

00003828 <.L128>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        char_count ++;
        if (*str=='\r') {                     // If character is return,
            break;
        }
        if (char_count >= UART_MSG_MAX_LEN) { // Terminate if max length reached.
            break;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            str++;                          //   and advance the pointer.

        }
    }
    3828:	00 00 00    	nop       
    382a:	01 00 37    	bra       0x382e <.L124>

0000382c <.L129>:
    382c:	00 00 00    	nop       

0000382e <.L124>:
    382e:	3e 00 90    	mov.w     [w14+6], w0
    3830:	20 ff 07    	rcall     0x3672 <_uart_getc>
    3832:	ce 00 90    	mov.w     [w14+8], w1
    3834:	80 48 78    	mov.b     w0, [w1]

00003836 <.LSM352>:
    3836:	1e 4f e8    	inc.b     [w14], [w14]

00003838 <.LSM353>:
    3838:	4e 00 90    	mov.w     [w14+8], w0
    383a:	10 40 78    	mov.b     [w0], w0
    383c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    383e:	10 00 32    	bra       Z, 0x3860 <.L126>

00003840 <.LSM354>:
    3840:	1e 40 78    	mov.b     [w14], w0
    3842:	00 04 e0    	cp0.b     w0
    3844:	0f 00 35    	bra       LT, 0x3864 <.L127>

00003846 <.LSM355>:
    3846:	4e 00 90    	mov.w     [w14+8], w0
    3848:	10 40 78    	mov.b     [w0], w0
    384a:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    384c:	ed ff 36    	bra       LEU, 0x3828 <.L128>
    384e:	4e 00 90    	mov.w     [w14+8], w0
    3850:	90 40 78    	mov.b     [w0], w1
    3852:	e0 c7 b3    	mov.b     #0x7e, w0
    3854:	80 cf 50    	sub.b     w1, w0, [w15]
    3856:	ea ff 3e    	bra       GTU, 0x382c <.L129>

00003858 <.LSM356>:
    3858:	4e 00 90    	mov.w     [w14+8], w0
    385a:	00 00 e8    	inc.w     w0, w0
    385c:	40 07 98    	mov.w     w0, [w14+8]

0000385e <.LSM357>:
    385e:	e7 ff 37    	bra       0x382e <.L124>

00003860 <.L126>:
    3860:	00 00 00    	nop       
    3862:	01 00 37    	bra       0x3866 <.L121>

00003864 <.L127>:
    3864:	00 00 00    	nop       

00003866 <.L121>:
    *str = '\0';  
    3866:	4e 00 90    	mov.w     [w14+8], w0
    3868:	80 40 eb    	clr.b     w1
    386a:	01 48 78    	mov.b     w1, [w0]
    386c:	01 00 37    	bra       0x3870 <.L116>

0000386e <.L125>:
    386e:	00 00 00    	nop       

00003870 <.L116>:
}         
    3870:	00 80 fa    	ulnk      
    3872:	00 00 06    	return    

00003874 <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    3874:	04 00 fa    	lnk       #0x4

00003876 <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    3876:	94 24 a8    	bset.b    0x494, #0x1

00003878 <.LSM2>:
    U1ADDR = 0;
    3878:	96 24 ef    	clr.w     0x496

0000387a <.LSM3>:
    U1EIR = 0xFF;
    387a:	f0 0f 20    	mov.w     #0xff, w0
    387c:	70 24 88    	mov.w     w0, 0x48e

0000387e <.LSM4>:
    U1CONbits.PPBRST = 0;
    387e:	94 24 a9    	bclr.b    0x494, #0x1

00003880 <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    3880:	a0 4a 20    	mov.w     #0x4aa, w0
    3882:	10 07 98    	mov.w     w0, [w14+2]

00003884 <.LSM6>:
    for (n = 0; n<16; n++)
    3884:	00 40 eb    	clr.b     w0
    3886:	00 4f 78    	mov.b     w0, [w14]
    3888:	07 00 37    	bra       0x3898 <.L2>

0000388a <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    388a:	1e 80 fb    	ze        [w14], w0
    388c:	00 00 40    	add.w     w0, w0, w0
    388e:	9e 00 90    	mov.w     [w14+2], w1
    3890:	00 80 40    	add.w     w1, w0, w0
    3892:	80 00 eb    	clr.w     w1
    3894:	01 08 78    	mov.w     w1, [w0]

00003896 <.LSM8>:
    3896:	1e 4f e8    	inc.b     [w14], [w14]

00003898 <.L2>:
    3898:	1e 40 78    	mov.b     [w14], w0
    389a:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    389c:	f6 ff 36    	bra       LEU, 0x388a <.L3>

0000389e <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    389e:	d0 00 20    	mov.w     #0xd, w0
    38a0:	50 25 88    	mov.w     w0, 0x4aa

000038a2 <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    38a2:	00 e0 21    	mov.w     #0x1e00, w0
    38a4:	01 c4 b3    	mov.b     #0x40, w1
    38a6:	01 48 78    	mov.b     w1, [w0]

000038a8 <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    38a8:	00 c8 21    	mov.w     #0x1c80, w0
    38aa:	10 f0 88    	mov.w     w0, 0x1e02

000038ac <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    38ac:	10 e0 21    	mov.w     #0x1e01, w0
    38ae:	81 c8 b3    	mov.b     #0x88, w1
    38b0:	01 48 78    	mov.b     w1, [w0]

000038b2 <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    38b2:	00 cc 21    	mov.w     #0x1cc0, w0
    38b4:	30 f0 88    	mov.w     w0, 0x1e06

000038b6 <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    38b6:	50 e0 21    	mov.w     #0x1e05, w0
    38b8:	81 c0 b3    	mov.b     #0x8, w1
    38ba:	01 48 78    	mov.b     w1, [w0]

000038bc <.LSM15>:
    U1CNFG1 = 0x00;
    38bc:	a6 24 ef    	clr.w     0x4a6

000038be <.LSM16>:
    U1CNFG2 = 0x00;
    38be:	a8 24 ef    	clr.w     0x4a8

000038c0 <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    38c0:	00 e0 21    	mov.w     #0x1e00, w0
    38c2:	48 00 de    	lsr.w     w0, #0x8, w0
    38c4:	c0 24 88    	mov.w     w0, 0x498

000038c6 <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    38c6:	86 44 a8    	bset.b    0x486, #0x2

000038c8 <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    38c8:	86 e4 a8    	bset.b    0x486, #0x7

000038ca <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    38ca:	88 04 a8    	bset.b    0x488, #0x0

000038cc <.LSM21>:
    U1CONbits.PKTDIS = 0;
    38cc:	94 a4 a9    	bclr.b    0x494, #0x5

000038ce <.LSM22>:
    USB_curr_config = 0x00;
    38ce:	3d 68 ef    	clr.b     0x83d

000038d0 <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    38d0:	40 68 ef    	clr.b     0x840

000038d2 <.LSM24>:
    USB_device_status = 0x01;
    38d2:	10 c0 b3    	mov.b     #0x1, w0
    38d4:	3e e8 b7    	mov.b     WREG, 0x83e

000038d6 <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    38d6:	00 d0 21    	mov.w     #0x1d00, w0
    38d8:	80 c0 eb    	setm.b    w1
    38da:	01 48 78    	mov.b     w1, [w0]

000038dc <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    38dc:	10 d0 21    	mov.w     #0x1d01, w0
    38de:	80 c0 eb    	setm.b    w1
    38e0:	01 48 78    	mov.b     w1, [w0]

000038e2 <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    38e2:	00 00 00    	nop       

000038e4 <.L4>:
    38e4:	a1 24 80    	mov.w     0x494, w1
    38e6:	00 04 20    	mov.w     #0x40, w0
    38e8:	00 80 60    	and.w     w1, w0, w0
    38ea:	00 00 e0    	cp0.w     w0
    38ec:	fb ff 3a    	bra       NZ, 0x38e4 <.L4>

000038ee <.LSM28>:
}
    38ee:	00 80 fa    	ulnk      
    38f0:	00 00 06    	return    

000038f2 <_ServiceUSB>:

void ServiceUSB(void) {
    38f2:	06 00 fa    	lnk       #0x6

000038f4 <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    38f4:	50 24 80    	mov.w     0x48a, w0
    38f6:	62 00 60    	and.w     w0, #0x2, w0
    38f8:	00 00 e0    	cp0.w     w0
    38fa:	05 00 32    	bra       Z, 0x3906 <.L6>

000038fc <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    38fc:	f0 0f 20    	mov.w     #0xff, w0
    38fe:	70 24 88    	mov.w     w0, 0x48e

00003900 <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    3900:	20 00 20    	mov.w     #0x2, w0
    3902:	50 24 88    	mov.w     w0, 0x48a
    3904:	90 00 37    	bra       0x3a26 <.L5>

00003906 <.L6>:
    } else if (U1IRbits.SOFIF) {
    3906:	50 24 80    	mov.w     0x48a, w0
    3908:	64 00 60    	and.w     w0, #0x4, w0
    390a:	00 00 e0    	cp0.w     w0
    390c:	03 00 32    	bra       Z, 0x3914 <.L8>

0000390e <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    390e:	40 00 20    	mov.w     #0x4, w0
    3910:	50 24 88    	mov.w     w0, 0x48a
    3912:	89 00 37    	bra       0x3a26 <.L5>

00003914 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    3914:	50 24 80    	mov.w     0x48a, w0
    3916:	70 00 60    	and.w     w0, #0x10, w0
    3918:	00 00 e0    	cp0.w     w0
    391a:	03 00 32    	bra       Z, 0x3922 <.L9>

0000391c <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    391c:	00 01 20    	mov.w     #0x10, w0
    391e:	50 24 88    	mov.w     w0, 0x48a
    3920:	82 00 37    	bra       0x3a26 <.L5>

00003922 <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    3922:	51 24 80    	mov.w     0x48a, w1
    3924:	00 02 20    	mov.w     #0x20, w0
    3926:	00 80 60    	and.w     w1, w0, w0
    3928:	00 00 e0    	cp0.w     w0
    392a:	03 00 32    	bra       Z, 0x3932 <.L10>

0000392c <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    392c:	00 02 20    	mov.w     #0x20, w0
    392e:	50 24 88    	mov.w     w0, 0x48a
    3930:	7a 00 37    	bra       0x3a26 <.L5>

00003932 <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    3932:	51 24 80    	mov.w     0x48a, w1
    3934:	00 08 20    	mov.w     #0x80, w0
    3936:	00 80 60    	and.w     w1, w0, w0
    3938:	00 00 e0    	cp0.w     w0
    393a:	03 00 32    	bra       Z, 0x3942 <.L11>

0000393c <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    393c:	00 08 20    	mov.w     #0x80, w0
    393e:	50 24 88    	mov.w     w0, 0x48a
    3940:	72 00 37    	bra       0x3a26 <.L5>

00003942 <.L11>:
    } else if (U1IRbits.URSTIF) {
    3942:	50 24 80    	mov.w     0x48a, w0
    3944:	61 00 60    	and.w     w0, #0x1, w0
    3946:	00 00 e0    	cp0.w     w0
    3948:	34 00 32    	bra       Z, 0x39b2 <.L12>

0000394a <.LSM42>:
        USB_curr_config = 0x00;
    394a:	3d 68 ef    	clr.b     0x83d

0000394c <.LSM43>:
        while (U1IRbits.TRNIF) {
    394c:	08 00 37    	bra       0x395e <.L13>

0000394e <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    394e:	80 00 20    	mov.w     #0x8, w0
    3950:	50 24 88    	mov.w     w0, 0x48a

00003952 <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    3952:	00 00 00    	nop       

00003954 <.LSM46>:
            __builtin_nop();
    3954:	00 00 00    	nop       

00003956 <.LSM47>:
            __builtin_nop();
    3956:	00 00 00    	nop       

00003958 <.LSM48>:
            __builtin_nop();
    3958:	00 00 00    	nop       

0000395a <.LSM49>:
            __builtin_nop();
    395a:	00 00 00    	nop       

0000395c <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    395c:	00 00 00    	nop       

0000395e <.L13>:
    395e:	50 24 80    	mov.w     0x48a, w0
    3960:	68 00 60    	and.w     w0, #0x8, w0
    3962:	00 00 e0    	cp0.w     w0
    3964:	f4 ff 3a    	bra       NZ, 0x394e <.L14>

00003966 <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    3966:	a0 4a 20    	mov.w     #0x4aa, w0
    3968:	10 07 98    	mov.w     w0, [w14+2]

0000396a <.LSM53>:
        for (n = 0; n<16; n++)
    396a:	00 40 eb    	clr.b     w0
    396c:	00 4f 78    	mov.b     w0, [w14]
    396e:	07 00 37    	bra       0x397e <.L15>

00003970 <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    3970:	1e 80 fb    	ze        [w14], w0
    3972:	00 00 40    	add.w     w0, w0, w0
    3974:	9e 00 90    	mov.w     [w14+2], w1
    3976:	00 80 40    	add.w     w1, w0, w0
    3978:	80 00 eb    	clr.w     w1
    397a:	01 08 78    	mov.w     w1, [w0]

0000397c <.LSM55>:
    397c:	1e 4f e8    	inc.b     [w14], [w14]

0000397e <.L15>:
    397e:	1e 40 78    	mov.b     [w14], w0
    3980:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    3982:	f6 ff 36    	bra       LEU, 0x3970 <.L16>

00003984 <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    3984:	00 e0 21    	mov.w     #0x1e00, w0
    3986:	01 c4 b3    	mov.b     #0x40, w1
    3988:	01 48 78    	mov.b     w1, [w0]

0000398a <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    398a:	00 c8 21    	mov.w     #0x1c80, w0
    398c:	10 f0 88    	mov.w     w0, 0x1e02

0000398e <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    398e:	10 e0 21    	mov.w     #0x1e01, w0
    3990:	81 c8 b3    	mov.b     #0x88, w1
    3992:	01 48 78    	mov.b     w1, [w0]

00003994 <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    3994:	00 cc 21    	mov.w     #0x1cc0, w0
    3996:	30 f0 88    	mov.w     w0, 0x1e06

00003998 <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    3998:	50 e0 21    	mov.w     #0x1e05, w0
    399a:	81 c0 b3    	mov.b     #0x8, w1
    399c:	01 48 78    	mov.b     w1, [w0]

0000399e <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    399e:	96 24 ef    	clr.w     0x496

000039a0 <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    39a0:	f0 0f 20    	mov.w     #0xff, w0
    39a2:	50 24 88    	mov.w     w0, 0x48a

000039a4 <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    39a4:	d0 00 20    	mov.w     #0xd, w0
    39a6:	50 25 88    	mov.w     w0, 0x4aa

000039a8 <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    39a8:	10 c0 b3    	mov.b     #0x1, w0
    39aa:	40 e8 b7    	mov.b     WREG, 0x840

000039ac <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    39ac:	10 c0 b3    	mov.b     #0x1, w0
    39ae:	3e e8 b7    	mov.b     WREG, 0x83e
    39b0:	3a 00 37    	bra       0x3a26 <.L5>

000039b2 <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    39b2:	50 24 80    	mov.w     0x48a, w0
    39b4:	68 00 60    	and.w     w0, #0x8, w0
    39b6:	00 00 e0    	cp0.w     w0
    39b8:	36 00 32    	bra       Z, 0x3a26 <.L5>

000039ba <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    39ba:	90 24 80    	mov.w     0x492, w0
    39bc:	43 00 de    	lsr.w     w0, #0x3, w0
    39be:	c2 00 dd    	sl.w      w0, #0x2, w1
    39c0:	00 e0 21    	mov.w     #0x1e00, w0
    39c2:	00 80 40    	add.w     w1, w0, w0
    39c4:	20 07 98    	mov.w     w0, [w14+4]

000039c6 <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    39c6:	2e 00 90    	mov.w     [w14+4], w0
    39c8:	10 40 90    	mov.b     [w0+1], w0
    39ca:	31 e8 b7    	mov.b     WREG, 0x831

000039cc <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    39cc:	2e 00 90    	mov.w     [w14+4], w0
    39ce:	10 40 78    	mov.b     [w0], w0
    39d0:	30 e8 b7    	mov.b     WREG, 0x830

000039d2 <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    39d2:	2e 00 90    	mov.w     [w14+4], w0
    39d4:	10 00 90    	mov.w     [w0+2], w0
    39d6:	90 41 88    	mov.w     w0, 0x832

000039d8 <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    39d8:	90 24 80    	mov.w     0x492, w0
    39da:	00 40 78    	mov.b     w0, w0
    39dc:	3f e8 b7    	mov.b     WREG, 0x83f

000039de <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    39de:	80 00 20    	mov.w     #0x8, w0
    39e0:	50 24 88    	mov.w     w0, 0x48a

000039e2 <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    39e2:	3c 68 ef    	clr.b     0x83c

000039e4 <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    39e4:	31 c8 bf    	mov.b     0x831, WREG
    39e6:	80 80 fb    	ze        w0, w1
    39e8:	c0 03 20    	mov.w     #0x3c, w0
    39ea:	00 80 60    	and.w     w1, w0, w0
    39ec:	41 02 20    	mov.w     #0x24, w1
    39ee:	81 0f 50    	sub.w     w0, w1, [w15]
    39f0:	08 00 32    	bra       Z, 0x3a02 <.L19>
    39f2:	41 03 20    	mov.w     #0x34, w1
    39f4:	81 0f 50    	sub.w     w0, w1, [w15]
    39f6:	03 00 32    	bra       Z, 0x39fe <.L20>
    39f8:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    39fa:	05 00 32    	bra       Z, 0x3a06 <.L18>
    39fc:	05 00 37    	bra       0x3a08 <.L17>

000039fe <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    39fe:	15 00 07    	rcall     0x3a2a <_ProcessSetupToken>

00003a00 <.LSM76>:
                break;
    3a00:	03 00 37    	bra       0x3a08 <.L17>

00003a02 <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    3a02:	dc 02 07    	rcall     0x3fbc <_ProcessInToken>

00003a04 <.LSM78>:
                break;
    3a04:	01 00 37    	bra       0x3a08 <.L17>

00003a06 <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    3a06:	0e 03 07    	rcall     0x4024 <_ProcessOutToken>

00003a08 <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    3a08:	3c c8 bf    	mov.b     0x83c, WREG
    3a0a:	00 80 fb    	ze        w0, w0
    3a0c:	61 00 60    	and.w     w0, #0x1, w0
    3a0e:	00 40 78    	mov.b     w0, w0
    3a10:	00 04 e0    	cp0.b     w0
    3a12:	09 00 32    	bra       Z, 0x3a26 <.L5>

00003a14 <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    3a14:	00 e0 21    	mov.w     #0x1e00, w0
    3a16:	01 c4 b3    	mov.b     #0x40, w1
    3a18:	01 48 78    	mov.b     w1, [w0]

00003a1a <.LSM82>:
            BD[EP0IN].status = 0x84;
    3a1a:	50 e0 21    	mov.w     #0x1e05, w0
    3a1c:	41 c8 b3    	mov.b     #0x84, w1
    3a1e:	01 48 78    	mov.b     w1, [w0]

00003a20 <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    3a20:	10 e0 21    	mov.w     #0x1e01, w0
    3a22:	41 c8 b3    	mov.b     #0x84, w1
    3a24:	01 48 78    	mov.b     w1, [w0]

00003a26 <.L5>:
        }
    }
}
    3a26:	00 80 fa    	ulnk      
    3a28:	00 00 06    	return    

00003a2a <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    3a2a:	02 00 fa    	lnk       #0x2

00003a2c <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    3a2c:	91 41 80    	mov.w     0x832, w1
    3a2e:	01 0f 78    	mov.w     w1, [w14]

00003a30 <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    3a30:	1e 00 78    	mov.w     [w14], w0
    3a32:	90 40 78    	mov.b     [w0], w1
    3a34:	40 83 20    	mov.w     #0x834, w0
    3a36:	01 48 78    	mov.b     w1, [w0]
    3a38:	1e 0f e8    	inc.w     [w14], [w14]

00003a3a <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    3a3a:	1e 00 78    	mov.w     [w14], w0
    3a3c:	90 40 78    	mov.b     [w0], w1
    3a3e:	40 83 20    	mov.w     #0x834, w0
    3a40:	11 40 98    	mov.b     w1, [w0+1]
    3a42:	1e 0f e8    	inc.w     [w14], [w14]

00003a44 <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    3a44:	1e 00 78    	mov.w     [w14], w0
    3a46:	90 40 78    	mov.b     [w0], w1
    3a48:	40 83 20    	mov.w     #0x834, w0
    3a4a:	21 40 98    	mov.b     w1, [w0+2]
    3a4c:	1e 0f e8    	inc.w     [w14], [w14]

00003a4e <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    3a4e:	1e 00 78    	mov.w     [w14], w0
    3a50:	90 40 78    	mov.b     [w0], w1
    3a52:	40 83 20    	mov.w     #0x834, w0
    3a54:	31 40 98    	mov.b     w1, [w0+3]
    3a56:	1e 0f e8    	inc.w     [w14], [w14]

00003a58 <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    3a58:	1e 00 78    	mov.w     [w14], w0
    3a5a:	90 40 78    	mov.b     [w0], w1
    3a5c:	40 83 20    	mov.w     #0x834, w0
    3a5e:	41 40 98    	mov.b     w1, [w0+4]
    3a60:	1e 0f e8    	inc.w     [w14], [w14]

00003a62 <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    3a62:	1e 00 78    	mov.w     [w14], w0
    3a64:	90 40 78    	mov.b     [w0], w1
    3a66:	40 83 20    	mov.w     #0x834, w0
    3a68:	51 40 98    	mov.b     w1, [w0+5]
    3a6a:	1e 0f e8    	inc.w     [w14], [w14]

00003a6c <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    3a6c:	1e 00 78    	mov.w     [w14], w0
    3a6e:	90 40 78    	mov.b     [w0], w1
    3a70:	40 83 20    	mov.w     #0x834, w0
    3a72:	61 40 98    	mov.b     w1, [w0+6]
    3a74:	1e 0f e8    	inc.w     [w14], [w14]

00003a76 <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    3a76:	1e 00 78    	mov.w     [w14], w0
    3a78:	90 40 78    	mov.b     [w0], w1
    3a7a:	40 83 20    	mov.w     #0x834, w0
    3a7c:	71 40 98    	mov.b     w1, [w0+7]
    3a7e:	1e 0f e8    	inc.w     [w14], [w14]

00003a80 <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    3a80:	00 e0 21    	mov.w     #0x1e00, w0
    3a82:	01 c4 b3    	mov.b     #0x40, w1
    3a84:	01 48 78    	mov.b     w1, [w0]

00003a86 <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    3a86:	50 e0 21    	mov.w     #0x1e05, w0
    3a88:	81 c0 b3    	mov.b     #0x8, w1
    3a8a:	01 48 78    	mov.b     w1, [w0]

00003a8c <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    3a8c:	40 83 20    	mov.w     #0x834, w0
    3a8e:	10 40 78    	mov.b     [w0], w0
    3a90:	00 04 e0    	cp0.b     w0
    3a92:	06 00 35    	bra       LT, 0x3aa0 <.L22>
    3a94:	40 83 20    	mov.w     #0x834, w0
    3a96:	30 00 90    	mov.w     [w0+6], w0
    3a98:	00 00 e0    	cp0.w     w0
    3a9a:	02 00 32    	bra       Z, 0x3aa0 <.L22>
    3a9c:	80 cc b3    	mov.b     #0xc8, w0
    3a9e:	01 00 37    	bra       0x3aa2 <.L23>

00003aa0 <.L22>:
    3aa0:	80 c8 b3    	mov.b     #0x88, w0

00003aa2 <.L23>:
    3aa2:	11 e0 21    	mov.w     #0x1e01, w1
    3aa4:	80 48 78    	mov.b     w0, [w1]

00003aa6 <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    3aa6:	94 a4 a9    	bclr.b    0x494, #0x5

00003aa8 <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    3aa8:	00 d0 21    	mov.w     #0x1d00, w0
    3aaa:	80 c0 eb    	setm.b    w1
    3aac:	01 48 78    	mov.b     w1, [w0]

00003aae <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    3aae:	10 d0 21    	mov.w     #0x1d01, w0
    3ab0:	80 c0 eb    	setm.b    w1
    3ab2:	01 48 78    	mov.b     w1, [w0]

00003ab4 <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    3ab4:	40 83 20    	mov.w     #0x834, w0
    3ab6:	10 40 78    	mov.b     [w0], w0
    3ab8:	80 80 fb    	ze        w0, w1
    3aba:	00 06 20    	mov.w     #0x60, w0
    3abc:	00 80 60    	and.w     w1, w0, w0
    3abe:	00 00 e0    	cp0.w     w0
    3ac0:	04 00 32    	bra       Z, 0x3aca <.L25>
    3ac2:	01 04 20    	mov.w     #0x40, w1
    3ac4:	81 0f 50    	sub.w     w0, w1, [w15]
    3ac6:	03 00 32    	bra       Z, 0x3ace <.L26>
    3ac8:	04 00 37    	bra       0x3ad2 <.L28>

00003aca <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    3aca:	08 00 07    	rcall     0x3adc <_StandardRequests>

00003acc <.LSM103>:
            break;
    3acc:	05 00 37    	bra       0x3ad8 <.L21>

00003ace <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    3ace:	03 08 07    	rcall     0x4ad6 <_VendorRequests>

00003ad0 <.LSM105>:
            break;
    3ad0:	03 00 37    	bra       0x3ad8 <.L21>

00003ad2 <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    3ad2:	3c c8 bf    	mov.b     0x83c, WREG
    3ad4:	00 04 a0    	bset.b    w0, #0x0
    3ad6:	3c e8 b7    	mov.b     WREG, 0x83c

00003ad8 <.L21>:
    }
}
    3ad8:	00 80 fa    	ulnk      
    3ada:	00 00 06    	return    

00003adc <_StandardRequests>:

void StandardRequests(void) {
    3adc:	06 00 fa    	lnk       #0x6

00003ade <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    3ade:	40 83 20    	mov.w     #0x834, w0
    3ae0:	10 40 90    	mov.b     [w0+1], w0
    3ae2:	00 80 fb    	ze        w0, w0
    3ae4:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    3ae6:	79 01 32    	bra       Z, 0x3dda <.L34>
    3ae8:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    3aea:	0c 00 3c    	bra       GT, 0x3b04 <.L39>
    3aec:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3aee:	bf 00 32    	bra       Z, 0x3c6e <.L32>
    3af0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3af2:	03 00 3c    	bra       GT, 0x3afa <.L40>
    3af4:	00 00 e0    	cp0.w     w0
    3af6:	12 00 32    	bra       Z, 0x3b1c <.L31>
    3af8:	5c 02 37    	bra       0x3fb2 <.L30>

00003afa <.L40>:
    3afa:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3afc:	b8 00 32    	bra       Z, 0x3c6e <.L32>
    3afe:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3b00:	4c 01 32    	bra       Z, 0x3d9a <.L33>
    3b02:	57 02 37    	bra       0x3fb2 <.L30>

00003b04 <.L39>:
    3b04:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    3b06:	ef 01 32    	bra       Z, 0x3ee6 <.L36>
    3b08:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    3b0a:	03 00 3c    	bra       GT, 0x3b12 <.L41>
    3b0c:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    3b0e:	e0 01 32    	bra       Z, 0x3ed0 <.L35>
    3b10:	50 02 37    	bra       0x3fb2 <.L30>

00003b12 <.L41>:
    3b12:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    3b14:	12 02 32    	bra       Z, 0x3f3a <.L37>
    3b16:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    3b18:	2b 02 32    	bra       Z, 0x3f70 <.L38>
    3b1a:	4b 02 37    	bra       0x3fb2 <.L30>

00003b1c <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    3b1c:	40 83 20    	mov.w     #0x834, w0
    3b1e:	10 40 78    	mov.b     [w0], w0
    3b20:	00 80 fb    	ze        w0, w0
    3b22:	7f 00 60    	and.w     w0, #0x1f, w0
    3b24:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3b26:	13 00 32    	bra       Z, 0x3b4e <.L44>
    3b28:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3b2a:	32 00 32    	bra       Z, 0x3b90 <.L45>
    3b2c:	00 00 e0    	cp0.w     w0
    3b2e:	9a 00 3a    	bra       NZ, 0x3c64 <.L128>

00003b30 <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    3b30:	30 f0 80    	mov.w     0x1e06, w0
    3b32:	e1 83 20    	mov.w     #0x83e, w1
    3b34:	91 40 78    	mov.b     [w1], w1
    3b36:	01 48 78    	mov.b     w1, [w0]

00003b38 <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    3b38:	30 f0 80    	mov.w     0x1e06, w0
    3b3a:	00 00 e8    	inc.w     w0, w0
    3b3c:	80 40 eb    	clr.b     w1
    3b3e:	01 48 78    	mov.b     w1, [w0]

00003b40 <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    3b40:	40 e0 21    	mov.w     #0x1e04, w0
    3b42:	21 c0 b3    	mov.b     #0x2, w1
    3b44:	01 48 78    	mov.b     w1, [w0]

00003b46 <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    3b46:	50 e0 21    	mov.w     #0x1e05, w0
    3b48:	81 cc b3    	mov.b     #0xc8, w1
    3b4a:	01 48 78    	mov.b     w1, [w0]

00003b4c <.LSM115>:
                    break;
    3b4c:	8f 00 37    	bra       0x3c6c <.L46>

00003b4e <.L44>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    3b4e:	40 c8 bf    	mov.b     0x840, WREG
    3b50:	00 80 fb    	ze        w0, w0
    3b52:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3b54:	03 00 32    	bra       Z, 0x3b5c <.L48>
    3b56:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3b58:	05 00 32    	bra       Z, 0x3b64 <.L49>
    3b5a:	19 00 37    	bra       0x3b8e <.L47>

00003b5c <.L48>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3b5c:	3c c8 bf    	mov.b     0x83c, WREG
    3b5e:	00 04 a0    	bset.b    w0, #0x0
    3b60:	3c e8 b7    	mov.b     WREG, 0x83c

00003b62 <.LSM118>:
                            break;
    3b62:	15 00 37    	bra       0x3b8e <.L47>

00003b64 <.L49>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3b64:	40 83 20    	mov.w     #0x834, w0
    3b66:	40 40 90    	mov.b     [w0+4], w0
    3b68:	00 04 e0    	cp0.b     w0
    3b6a:	0e 00 3a    	bra       NZ, 0x3b88 <.L50>

00003b6c <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    3b6c:	30 f0 80    	mov.w     0x1e06, w0
    3b6e:	80 40 eb    	clr.b     w1
    3b70:	01 48 78    	mov.b     w1, [w0]

00003b72 <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    3b72:	30 f0 80    	mov.w     0x1e06, w0
    3b74:	00 00 e8    	inc.w     w0, w0
    3b76:	80 40 eb    	clr.b     w1
    3b78:	01 48 78    	mov.b     w1, [w0]

00003b7a <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    3b7a:	40 e0 21    	mov.w     #0x1e04, w0
    3b7c:	21 c0 b3    	mov.b     #0x2, w1
    3b7e:	01 48 78    	mov.b     w1, [w0]

00003b80 <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3b80:	50 e0 21    	mov.w     #0x1e05, w0
    3b82:	81 cc b3    	mov.b     #0xc8, w1
    3b84:	01 48 78    	mov.b     w1, [w0]
    3b86:	03 00 37    	bra       0x3b8e <.L47>

00003b88 <.L50>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3b88:	3c c8 bf    	mov.b     0x83c, WREG
    3b8a:	00 04 a0    	bset.b    w0, #0x0
    3b8c:	3c e8 b7    	mov.b     WREG, 0x83c

00003b8e <.L47>:
                            }
                    }
                    break;
    3b8e:	6e 00 37    	bra       0x3c6c <.L46>

00003b90 <.L45>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    3b90:	40 c8 bf    	mov.b     0x840, WREG
    3b92:	00 80 fb    	ze        w0, w0
    3b94:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3b96:	03 00 32    	bra       Z, 0x3b9e <.L52>
    3b98:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3b9a:	29 00 32    	bra       Z, 0x3bee <.L53>
    3b9c:	5f 00 37    	bra       0x3c5c <.L129>

00003b9e <.L52>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    3b9e:	40 83 20    	mov.w     #0x834, w0
    3ba0:	40 40 90    	mov.b     [w0+4], w0
    3ba2:	00 80 fb    	ze        w0, w0
    3ba4:	6f 00 60    	and.w     w0, #0xf, w0
    3ba6:	00 00 e0    	cp0.w     w0
    3ba8:	1e 00 3a    	bra       NZ, 0x3be6 <.L54>

00003baa <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    3baa:	31 f0 80    	mov.w     0x1e06, w1
    3bac:	40 83 20    	mov.w     #0x834, w0
    3bae:	40 40 90    	mov.b     [w0+4], w0
    3bb0:	00 04 e0    	cp0.b     w0
    3bb2:	07 00 3d    	bra       GE, 0x3bc2 <.L55>
    3bb4:	50 e0 21    	mov.w     #0x1e05, w0
    3bb6:	10 40 78    	mov.b     [w0], w0
    3bb8:	00 80 fb    	ze        w0, w0
    3bba:	64 00 60    	and.w     w0, #0x4, w0
    3bbc:	42 80 de    	asr.w     w0, #0x2, w0
    3bbe:	00 40 78    	mov.b     w0, w0
    3bc0:	06 00 37    	bra       0x3bce <.L56>

00003bc2 <.L55>:
    3bc2:	10 e0 21    	mov.w     #0x1e01, w0
    3bc4:	10 40 78    	mov.b     [w0], w0
    3bc6:	00 80 fb    	ze        w0, w0
    3bc8:	64 00 60    	and.w     w0, #0x4, w0
    3bca:	42 80 de    	asr.w     w0, #0x2, w0
    3bcc:	00 40 78    	mov.b     w0, w0

00003bce <.L56>:
    3bce:	80 48 78    	mov.b     w0, [w1]

00003bd0 <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    3bd0:	30 f0 80    	mov.w     0x1e06, w0
    3bd2:	00 00 e8    	inc.w     w0, w0
    3bd4:	80 40 eb    	clr.b     w1
    3bd6:	01 48 78    	mov.b     w1, [w0]

00003bd8 <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    3bd8:	40 e0 21    	mov.w     #0x1e04, w0
    3bda:	21 c0 b3    	mov.b     #0x2, w1
    3bdc:	01 48 78    	mov.b     w1, [w0]

00003bde <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3bde:	50 e0 21    	mov.w     #0x1e05, w0
    3be0:	81 cc b3    	mov.b     #0xc8, w1
    3be2:	01 48 78    	mov.b     w1, [w0]
    3be4:	03 00 37    	bra       0x3bec <.L57>

00003be6 <.L54>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3be6:	3c c8 bf    	mov.b     0x83c, WREG
    3be8:	00 04 a0    	bset.b    w0, #0x0
    3bea:	3c e8 b7    	mov.b     WREG, 0x83c

00003bec <.L57>:
                            }
                            break;
    3bec:	3a 00 37    	bra       0x3c62 <.L58>

00003bee <.L53>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    3bee:	a0 4a 20    	mov.w     #0x4aa, w0
    3bf0:	10 07 98    	mov.w     w0, [w14+2]

00003bf2 <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    3bf2:	40 83 20    	mov.w     #0x834, w0
    3bf4:	40 40 90    	mov.b     [w0+4], w0
    3bf6:	6f 4f 60    	and.b     w0, #0xf, [w14]

00003bf8 <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    3bf8:	1e 80 fb    	ze        [w14], w0
    3bfa:	00 00 40    	add.w     w0, w0, w0
    3bfc:	80 00 78    	mov.w     w0, w1
    3bfe:	40 83 20    	mov.w     #0x834, w0
    3c00:	40 40 90    	mov.b     [w0+4], w0
    3c02:	00 00 fb    	se        w0, w0
    3c04:	4f 00 de    	lsr.w     w0, #0xf, w0
    3c06:	01 00 70    	ior.w     w0, w1, w0
    3c08:	c2 00 dd    	sl.w      w0, #0x2, w1
    3c0a:	00 e0 21    	mov.w     #0x1e00, w0
    3c0c:	00 80 40    	add.w     w1, w0, w0
    3c0e:	20 07 98    	mov.w     w0, [w14+4]

00003c10 <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    3c10:	1e 80 fb    	ze        [w14], w0
    3c12:	00 00 40    	add.w     w0, w0, w0
    3c14:	9e 00 90    	mov.w     [w14+2], w1
    3c16:	00 80 40    	add.w     w1, w0, w0
    3c18:	90 00 78    	mov.w     [w0], w1
    3c1a:	40 83 20    	mov.w     #0x834, w0
    3c1c:	40 40 90    	mov.b     [w0+4], w0
    3c1e:	00 04 e0    	cp0.b     w0
    3c20:	02 00 3d    	bra       GE, 0x3c26 <.L59>
    3c22:	40 00 20    	mov.w     #0x4, w0
    3c24:	01 00 37    	bra       0x3c28 <.L60>

00003c26 <.L59>:
    3c26:	80 00 20    	mov.w     #0x8, w0

00003c28 <.L60>:
    3c28:	00 80 60    	and.w     w1, w0, w0
    3c2a:	00 00 e0    	cp0.w     w0
    3c2c:	13 00 32    	bra       Z, 0x3c54 <.L61>

00003c2e <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    3c2e:	30 f0 80    	mov.w     0x1e06, w0
    3c30:	ae 00 90    	mov.w     [w14+4], w1
    3c32:	91 40 90    	mov.b     [w1+1], w1
    3c34:	81 80 fb    	ze        w1, w1
    3c36:	e4 80 60    	and.w     w1, #0x4, w1
    3c38:	c2 88 de    	asr.w     w1, #0x2, w1
    3c3a:	81 40 78    	mov.b     w1, w1
    3c3c:	01 48 78    	mov.b     w1, [w0]

00003c3e <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    3c3e:	30 f0 80    	mov.w     0x1e06, w0
    3c40:	00 00 e8    	inc.w     w0, w0
    3c42:	80 40 eb    	clr.b     w1
    3c44:	01 48 78    	mov.b     w1, [w0]

00003c46 <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    3c46:	40 e0 21    	mov.w     #0x1e04, w0
    3c48:	21 c0 b3    	mov.b     #0x2, w1
    3c4a:	01 48 78    	mov.b     w1, [w0]

00003c4c <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3c4c:	50 e0 21    	mov.w     #0x1e05, w0
    3c4e:	81 cc b3    	mov.b     #0xc8, w1
    3c50:	01 48 78    	mov.b     w1, [w0]
    3c52:	03 00 37    	bra       0x3c5a <.L62>

00003c54 <.L61>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3c54:	3c c8 bf    	mov.b     0x83c, WREG
    3c56:	00 04 a0    	bset.b    w0, #0x0
    3c58:	3c e8 b7    	mov.b     WREG, 0x83c

00003c5a <.L62>:
                            }
                            break;
    3c5a:	03 00 37    	bra       0x3c62 <.L58>

00003c5c <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3c5c:	3c c8 bf    	mov.b     0x83c, WREG
    3c5e:	00 04 a0    	bset.b    w0, #0x0
    3c60:	3c e8 b7    	mov.b     WREG, 0x83c

00003c62 <.L58>:
                    }
                    break;
    3c62:	04 00 37    	bra       0x3c6c <.L46>

00003c64 <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    3c64:	3c c8 bf    	mov.b     0x83c, WREG
    3c66:	00 04 a0    	bset.b    w0, #0x0
    3c68:	3c e8 b7    	mov.b     WREG, 0x83c

00003c6a <.LSM147>:
            }
            break;
    3c6a:	a6 01 37    	bra       0x3fb8 <.L29>

00003c6c <.L46>:
    3c6c:	a5 01 37    	bra       0x3fb8 <.L29>

00003c6e <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    3c6e:	40 83 20    	mov.w     #0x834, w0
    3c70:	10 40 78    	mov.b     [w0], w0
    3c72:	00 80 fb    	ze        w0, w0
    3c74:	7f 00 60    	and.w     w0, #0x1f, w0
    3c76:	00 00 e0    	cp0.w     w0
    3c78:	03 00 32    	bra       Z, 0x3c80 <.L65>
    3c7a:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3c7c:	1e 00 32    	bra       Z, 0x3cba <.L66>
    3c7e:	88 00 37    	bra       0x3d90 <.L130>

00003c80 <.L65>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    3c80:	40 83 20    	mov.w     #0x834, w0
    3c82:	20 40 90    	mov.b     [w0+2], w0
    3c84:	00 80 fb    	ze        w0, w0
    3c86:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3c88:	14 00 3a    	bra       NZ, 0x3cb2 <.L131>

00003c8a <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    3c8a:	40 83 20    	mov.w     #0x834, w0
    3c8c:	10 40 90    	mov.b     [w0+1], w0
    3c8e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3c90:	06 00 3a    	bra       NZ, 0x3c9e <.L69>

00003c92 <.LSM151>:
                                USB_device_status &= 0xFE;
    3c92:	e1 83 20    	mov.w     #0x83e, w1
    3c94:	91 40 78    	mov.b     [w1], w1
    3c96:	e0 cf b3    	mov.b     #0xfe, w0
    3c98:	00 c0 60    	and.b     w1, w0, w0
    3c9a:	3e e8 b7    	mov.b     WREG, 0x83e
    3c9c:	03 00 37    	bra       0x3ca4 <.L70>

00003c9e <.L69>:
                            else
                                USB_device_status |= 0x01;
    3c9e:	3e c8 bf    	mov.b     0x83e, WREG
    3ca0:	00 04 a0    	bset.b    w0, #0x0
    3ca2:	3e e8 b7    	mov.b     WREG, 0x83e

00003ca4 <.L70>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    3ca4:	40 e0 21    	mov.w     #0x1e04, w0
    3ca6:	80 40 eb    	clr.b     w1
    3ca8:	01 48 78    	mov.b     w1, [w0]

00003caa <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3caa:	50 e0 21    	mov.w     #0x1e05, w0
    3cac:	81 cc b3    	mov.b     #0xc8, w1
    3cae:	01 48 78    	mov.b     w1, [w0]

00003cb0 <.LSM155>:
                            break;
    3cb0:	03 00 37    	bra       0x3cb8 <.L71>

00003cb2 <.L131>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3cb2:	3c c8 bf    	mov.b     0x83c, WREG
    3cb4:	00 04 a0    	bset.b    w0, #0x0
    3cb6:	3c e8 b7    	mov.b     WREG, 0x83c

00003cb8 <.L71>:
                    }
                    break;
    3cb8:	6f 00 37    	bra       0x3d98 <.L72>

00003cba <.L66>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    3cba:	40 c8 bf    	mov.b     0x840, WREG
    3cbc:	00 80 fb    	ze        w0, w0
    3cbe:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3cc0:	03 00 32    	bra       Z, 0x3cc8 <.L74>
    3cc2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3cc4:	12 00 32    	bra       Z, 0x3cea <.L75>
    3cc6:	60 00 37    	bra       0x3d88 <.L132>

00003cc8 <.L74>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    3cc8:	40 83 20    	mov.w     #0x834, w0
    3cca:	40 40 90    	mov.b     [w0+4], w0
    3ccc:	00 80 fb    	ze        w0, w0
    3cce:	6f 00 60    	and.w     w0, #0xf, w0
    3cd0:	00 00 e0    	cp0.w     w0
    3cd2:	07 00 3a    	bra       NZ, 0x3ce2 <.L76>

00003cd4 <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    3cd4:	40 e0 21    	mov.w     #0x1e04, w0
    3cd6:	80 40 eb    	clr.b     w1
    3cd8:	01 48 78    	mov.b     w1, [w0]

00003cda <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3cda:	50 e0 21    	mov.w     #0x1e05, w0
    3cdc:	81 cc b3    	mov.b     #0xc8, w1
    3cde:	01 48 78    	mov.b     w1, [w0]
    3ce0:	03 00 37    	bra       0x3ce8 <.L77>

00003ce2 <.L76>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3ce2:	3c c8 bf    	mov.b     0x83c, WREG
    3ce4:	00 04 a0    	bset.b    w0, #0x0
    3ce6:	3c e8 b7    	mov.b     WREG, 0x83c

00003ce8 <.L77>:
                            }
                            break;
    3ce8:	52 00 37    	bra       0x3d8e <.L78>

00003cea <.L75>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    3cea:	a0 4a 20    	mov.w     #0x4aa, w0
    3cec:	10 07 98    	mov.w     w0, [w14+2]

00003cee <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    3cee:	40 83 20    	mov.w     #0x834, w0
    3cf0:	40 40 90    	mov.b     [w0+4], w0
    3cf2:	6f 4f 60    	and.b     w0, #0xf, [w14]
    3cf4:	1e 40 78    	mov.b     [w14], w0
    3cf6:	00 04 e0    	cp0.b     w0
    3cf8:	3b 00 32    	bra       Z, 0x3d70 <.L79>

00003cfa <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    3cfa:	1e 80 fb    	ze        [w14], w0
    3cfc:	00 00 40    	add.w     w0, w0, w0
    3cfe:	80 00 78    	mov.w     w0, w1
    3d00:	40 83 20    	mov.w     #0x834, w0
    3d02:	40 40 90    	mov.b     [w0+4], w0
    3d04:	00 00 fb    	se        w0, w0
    3d06:	4f 00 de    	lsr.w     w0, #0xf, w0
    3d08:	01 00 70    	ior.w     w0, w1, w0
    3d0a:	c2 00 dd    	sl.w      w0, #0x2, w1
    3d0c:	00 e0 21    	mov.w     #0x1e00, w0
    3d0e:	00 80 40    	add.w     w1, w0, w0
    3d10:	20 07 98    	mov.w     w0, [w14+4]

00003d12 <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    3d12:	40 83 20    	mov.w     #0x834, w0
    3d14:	40 40 90    	mov.b     [w0+4], w0
    3d16:	00 04 e0    	cp0.b     w0
    3d18:	16 00 3d    	bra       GE, 0x3d46 <.L80>

00003d1a <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    3d1a:	1e 80 fb    	ze        [w14], w0
    3d1c:	00 00 40    	add.w     w0, w0, w0
    3d1e:	9e 00 90    	mov.w     [w14+2], w1
    3d20:	00 80 40    	add.w     w1, w0, w0
    3d22:	10 00 78    	mov.w     [w0], w0
    3d24:	64 00 60    	and.w     w0, #0x4, w0
    3d26:	00 00 e0    	cp0.w     w0
    3d28:	0a 00 32    	bra       Z, 0x3d3e <.L81>

00003d2a <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    3d2a:	40 83 20    	mov.w     #0x834, w0
    3d2c:	10 40 90    	mov.b     [w0+1], w0
    3d2e:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3d30:	02 00 3a    	bra       NZ, 0x3d36 <.L82>
    3d32:	00 40 eb    	clr.b     w0
    3d34:	01 00 37    	bra       0x3d38 <.L83>

00003d36 <.L82>:
    3d36:	40 c8 b3    	mov.b     #0x84, w0

00003d38 <.L83>:
    3d38:	ae 00 90    	mov.w     [w14+4], w1
    3d3a:	90 40 98    	mov.b     w0, [w1+1]
    3d3c:	19 00 37    	bra       0x3d70 <.L79>

00003d3e <.L81>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3d3e:	3c c8 bf    	mov.b     0x83c, WREG
    3d40:	00 04 a0    	bset.b    w0, #0x0
    3d42:	3c e8 b7    	mov.b     WREG, 0x83c
    3d44:	15 00 37    	bra       0x3d70 <.L79>

00003d46 <.L80>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    3d46:	1e 80 fb    	ze        [w14], w0
    3d48:	00 00 40    	add.w     w0, w0, w0
    3d4a:	9e 00 90    	mov.w     [w14+2], w1
    3d4c:	00 80 40    	add.w     w1, w0, w0
    3d4e:	10 00 78    	mov.w     [w0], w0
    3d50:	68 00 60    	and.w     w0, #0x8, w0
    3d52:	00 00 e0    	cp0.w     w0
    3d54:	0a 00 32    	bra       Z, 0x3d6a <.L84>

00003d56 <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    3d56:	40 83 20    	mov.w     #0x834, w0
    3d58:	10 40 90    	mov.b     [w0+1], w0
    3d5a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3d5c:	02 00 3a    	bra       NZ, 0x3d62 <.L85>
    3d5e:	80 c8 b3    	mov.b     #0x88, w0
    3d60:	01 00 37    	bra       0x3d64 <.L86>

00003d62 <.L85>:
    3d62:	40 c8 b3    	mov.b     #0x84, w0

00003d64 <.L86>:
    3d64:	ae 00 90    	mov.w     [w14+4], w1
    3d66:	90 40 98    	mov.b     w0, [w1+1]
    3d68:	03 00 37    	bra       0x3d70 <.L79>

00003d6a <.L84>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3d6a:	3c c8 bf    	mov.b     0x83c, WREG
    3d6c:	00 04 a0    	bset.b    w0, #0x0
    3d6e:	3c e8 b7    	mov.b     WREG, 0x83c

00003d70 <.L79>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    3d70:	3c c8 bf    	mov.b     0x83c, WREG
    3d72:	00 80 fb    	ze        w0, w0
    3d74:	61 00 60    	and.w     w0, #0x1, w0
    3d76:	00 00 e0    	cp0.w     w0
    3d78:	06 00 3a    	bra       NZ, 0x3d86 <.L87>

00003d7a <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    3d7a:	40 e0 21    	mov.w     #0x1e04, w0
    3d7c:	80 40 eb    	clr.b     w1
    3d7e:	01 48 78    	mov.b     w1, [w0]

00003d80 <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    3d80:	50 e0 21    	mov.w     #0x1e05, w0
    3d82:	81 cc b3    	mov.b     #0xc8, w1
    3d84:	01 48 78    	mov.b     w1, [w0]

00003d86 <.L87>:
                            }
                            break;
    3d86:	03 00 37    	bra       0x3d8e <.L78>

00003d88 <.L132>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3d88:	3c c8 bf    	mov.b     0x83c, WREG
    3d8a:	00 04 a0    	bset.b    w0, #0x0
    3d8c:	3c e8 b7    	mov.b     WREG, 0x83c

00003d8e <.L78>:
                    }
                    break;
    3d8e:	04 00 37    	bra       0x3d98 <.L72>

00003d90 <.L130>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    3d90:	3c c8 bf    	mov.b     0x83c, WREG
    3d92:	00 04 a0    	bset.b    w0, #0x0
    3d94:	3c e8 b7    	mov.b     WREG, 0x83c

00003d96 <.LSM181>:
            }
            break;
    3d96:	10 01 37    	bra       0x3fb8 <.L29>

00003d98 <.L72>:
    3d98:	0f 01 37    	bra       0x3fb8 <.L29>

00003d9a <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    3d9a:	40 83 20    	mov.w     #0x834, w0
    3d9c:	20 40 90    	mov.b     [w0+2], w0
    3d9e:	00 04 e0    	cp0.b     w0
    3da0:	04 00 3d    	bra       GE, 0x3daa <.L88>

00003da2 <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    3da2:	3c c8 bf    	mov.b     0x83c, WREG
    3da4:	00 04 a0    	bset.b    w0, #0x0
    3da6:	3c e8 b7    	mov.b     WREG, 0x83c

00003da8 <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    3da8:	07 01 37    	bra       0x3fb8 <.L29>

00003daa <.L88>:
    3daa:	40 83 20    	mov.w     #0x834, w0
    3dac:	90 40 78    	mov.b     [w0], w1
    3dae:	00 d0 21    	mov.w     #0x1d00, w0
    3db0:	01 48 78    	mov.b     w1, [w0]

00003db2 <.LSM186>:
    3db2:	40 83 20    	mov.w     #0x834, w0
    3db4:	90 40 90    	mov.b     [w0+1], w1
    3db6:	10 d0 21    	mov.w     #0x1d01, w0
    3db8:	01 48 78    	mov.b     w1, [w0]

00003dba <.LSM187>:
    3dba:	40 83 20    	mov.w     #0x834, w0
    3dbc:	10 00 90    	mov.w     [w0+2], w0
    3dbe:	10 e8 88    	mov.w     w0, 0x1d02

00003dc0 <.LSM188>:
    3dc0:	40 83 20    	mov.w     #0x834, w0
    3dc2:	20 00 90    	mov.w     [w0+4], w0
    3dc4:	20 e8 88    	mov.w     w0, 0x1d04

00003dc6 <.LSM189>:
    3dc6:	40 83 20    	mov.w     #0x834, w0
    3dc8:	30 00 90    	mov.w     [w0+6], w0
    3dca:	30 e8 88    	mov.w     w0, 0x1d06

00003dcc <.LSM190>:
    3dcc:	40 e0 21    	mov.w     #0x1e04, w0
    3dce:	80 40 eb    	clr.b     w1
    3dd0:	01 48 78    	mov.b     w1, [w0]

00003dd2 <.LSM191>:
    3dd2:	50 e0 21    	mov.w     #0x1e05, w0
    3dd4:	81 cc b3    	mov.b     #0xc8, w1
    3dd6:	01 48 78    	mov.b     w1, [w0]

00003dd8 <.LSM192>:
    3dd8:	ef 00 37    	bra       0x3fb8 <.L29>

00003dda <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    3dda:	40 83 20    	mov.w     #0x834, w0
    3ddc:	90 40 78    	mov.b     [w0], w1
    3dde:	00 d0 21    	mov.w     #0x1d00, w0
    3de0:	01 48 78    	mov.b     w1, [w0]

00003de2 <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    3de2:	40 83 20    	mov.w     #0x834, w0
    3de4:	90 40 90    	mov.b     [w0+1], w1
    3de6:	10 d0 21    	mov.w     #0x1d01, w0
    3de8:	01 48 78    	mov.b     w1, [w0]

00003dea <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    3dea:	40 83 20    	mov.w     #0x834, w0
    3dec:	10 00 90    	mov.w     [w0+2], w0
    3dee:	10 e8 88    	mov.w     w0, 0x1d02

00003df0 <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    3df0:	40 83 20    	mov.w     #0x834, w0
    3df2:	20 00 90    	mov.w     [w0+4], w0
    3df4:	20 e8 88    	mov.w     w0, 0x1d04

00003df6 <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    3df6:	40 83 20    	mov.w     #0x834, w0
    3df8:	30 00 90    	mov.w     [w0+6], w0
    3dfa:	30 e8 88    	mov.w     w0, 0x1d06

00003dfc <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    3dfc:	40 83 20    	mov.w     #0x834, w0
    3dfe:	30 40 90    	mov.b     [w0+3], w0
    3e00:	00 80 fb    	ze        w0, w0
    3e02:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3e04:	14 00 32    	bra       Z, 0x3e2e <.L92>
    3e06:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3e08:	36 00 32    	bra       Z, 0x3e76 <.L93>
    3e0a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3e0c:	5c 00 3a    	bra       NZ, 0x3ec6 <.L133>

00003e0e <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    3e0e:	40 94 2a    	mov.w     #0xa944, w0
    3e10:	40 e8 88    	mov.w     w0, 0x1d08

00003e12 <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    3e12:	40 e8 80    	mov.w     0x1d08, w0
    3e14:	10 40 78    	mov.b     [w0], w0
    3e16:	00 80 fb    	ze        w0, w0
    3e18:	50 e8 88    	mov.w     w0, 0x1d0a

00003e1a <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    3e1a:	40 83 20    	mov.w     #0x834, w0
    3e1c:	b0 00 90    	mov.w     [w0+6], w1
    3e1e:	50 e8 80    	mov.w     0x1d0a, w0
    3e20:	80 8f 50    	sub.w     w1, w0, [w15]
    3e22:	03 00 31    	bra       C, 0x3e2a <.L94>

00003e24 <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    3e24:	40 83 20    	mov.w     #0x834, w0
    3e26:	30 00 90    	mov.w     [w0+6], w0
    3e28:	50 e8 88    	mov.w     w0, 0x1d0a

00003e2a <.L94>:
                    }
                    SendDataPacket();
    3e2a:	22 01 07    	rcall     0x4070 <_SendDataPacket>

00003e2c <.LSM204>:
                    break;
    3e2c:	50 00 37    	bra       0x3ece <.L95>

00003e2e <.L92>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    3e2e:	40 83 20    	mov.w     #0x834, w0
    3e30:	20 40 90    	mov.b     [w0+2], w0
    3e32:	00 80 fb    	ze        w0, w0
    3e34:	00 00 e0    	cp0.w     w0
    3e36:	03 00 3a    	bra       NZ, 0x3e3e <.L134>

00003e38 <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    3e38:	60 95 2a    	mov.w     #0xa956, w0
    3e3a:	40 e8 88    	mov.w     w0, 0x1d08

00003e3c <.LSM207>:
                            break;
    3e3c:	03 00 37    	bra       0x3e44 <.L98>

00003e3e <.L134>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    3e3e:	3c c8 bf    	mov.b     0x83c, WREG
    3e40:	00 04 a0    	bset.b    w0, #0x0
    3e42:	3c e8 b7    	mov.b     WREG, 0x83c

00003e44 <.L98>:
                    }
                    if (!(USB_error_flags&0x01)) {
    3e44:	3c c8 bf    	mov.b     0x83c, WREG
    3e46:	00 80 fb    	ze        w0, w0
    3e48:	61 00 60    	and.w     w0, #0x1, w0
    3e4a:	00 00 e0    	cp0.w     w0
    3e4c:	13 00 3a    	bra       NZ, 0x3e74 <.L99>

00003e4e <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    3e4e:	40 e8 80    	mov.w     0x1d08, w0
    3e50:	00 80 e8    	inc2.w    w0, w0
    3e52:	90 40 78    	mov.b     [w0], w1
    3e54:	a0 d0 21    	mov.w     #0x1d0a, w0
    3e56:	01 48 78    	mov.b     w1, [w0]

00003e58 <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    3e58:	40 e8 80    	mov.w     0x1d08, w0
    3e5a:	63 00 40    	add.w     w0, #0x3, w0
    3e5c:	90 40 78    	mov.b     [w0], w1
    3e5e:	b0 d0 21    	mov.w     #0x1d0b, w0
    3e60:	01 48 78    	mov.b     w1, [w0]

00003e62 <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    3e62:	40 83 20    	mov.w     #0x834, w0
    3e64:	b0 00 90    	mov.w     [w0+6], w1
    3e66:	50 e8 80    	mov.w     0x1d0a, w0
    3e68:	80 8f 50    	sub.w     w1, w0, [w15]
    3e6a:	03 00 31    	bra       C, 0x3e72 <.L100>

00003e6c <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    3e6c:	40 83 20    	mov.w     #0x834, w0
    3e6e:	30 00 90    	mov.w     [w0+6], w0
    3e70:	50 e8 88    	mov.w     w0, 0x1d0a

00003e72 <.L100>:
                        }
                        SendDataPacket();
    3e72:	fe 00 07    	rcall     0x4070 <_SendDataPacket>

00003e74 <.L99>:
                    }
                    break;
    3e74:	2c 00 37    	bra       0x3ece <.L95>

00003e76 <.L93>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    3e76:	40 83 20    	mov.w     #0x834, w0
    3e78:	20 40 90    	mov.b     [w0+2], w0
    3e7a:	00 80 fb    	ze        w0, w0
    3e7c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3e7e:	07 00 32    	bra       Z, 0x3e8e <.L103>
    3e80:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3e82:	08 00 32    	bra       Z, 0x3e94 <.L104>
    3e84:	00 00 e0    	cp0.w     w0
    3e86:	09 00 3a    	bra       NZ, 0x3e9a <.L135>

00003e88 <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    3e88:	80 96 2a    	mov.w     #0xa968, w0
    3e8a:	40 e8 88    	mov.w     w0, 0x1d08

00003e8c <.LSM218>:
                            break;
    3e8c:	09 00 37    	bra       0x3ea0 <.L105>

00003e8e <.L103>:
                        case 1:
                            USB_request.data_ptr = String1;
    3e8e:	c0 96 2a    	mov.w     #0xa96c, w0
    3e90:	40 e8 88    	mov.w     w0, 0x1d08

00003e92 <.LSM220>:
                            break;
    3e92:	06 00 37    	bra       0x3ea0 <.L105>

00003e94 <.L104>:
                        case 2:
                            USB_request.data_ptr = String2;
    3e94:	60 98 2a    	mov.w     #0xa986, w0
    3e96:	40 e8 88    	mov.w     w0, 0x1d08

00003e98 <.LSM222>:
                            break;
    3e98:	03 00 37    	bra       0x3ea0 <.L105>

00003e9a <.L135>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    3e9a:	3c c8 bf    	mov.b     0x83c, WREG
    3e9c:	00 04 a0    	bset.b    w0, #0x0
    3e9e:	3c e8 b7    	mov.b     WREG, 0x83c

00003ea0 <.L105>:
                    }
                    if (!(USB_error_flags&0x01)) {
    3ea0:	3c c8 bf    	mov.b     0x83c, WREG
    3ea2:	00 80 fb    	ze        w0, w0
    3ea4:	61 00 60    	and.w     w0, #0x1, w0
    3ea6:	00 00 e0    	cp0.w     w0
    3ea8:	0d 00 3a    	bra       NZ, 0x3ec4 <.L106>

00003eaa <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    3eaa:	40 e8 80    	mov.w     0x1d08, w0
    3eac:	10 40 78    	mov.b     [w0], w0
    3eae:	00 80 fb    	ze        w0, w0
    3eb0:	50 e8 88    	mov.w     w0, 0x1d0a

00003eb2 <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    3eb2:	40 83 20    	mov.w     #0x834, w0
    3eb4:	b0 00 90    	mov.w     [w0+6], w1
    3eb6:	50 e8 80    	mov.w     0x1d0a, w0
    3eb8:	80 8f 50    	sub.w     w1, w0, [w15]
    3eba:	03 00 31    	bra       C, 0x3ec2 <.L107>

00003ebc <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    3ebc:	40 83 20    	mov.w     #0x834, w0
    3ebe:	30 00 90    	mov.w     [w0+6], w0
    3ec0:	50 e8 88    	mov.w     w0, 0x1d0a

00003ec2 <.L107>:
                        }
                        SendDataPacket();
    3ec2:	d6 00 07    	rcall     0x4070 <_SendDataPacket>

00003ec4 <.L106>:
                    }
                    break;
    3ec4:	04 00 37    	bra       0x3ece <.L95>

00003ec6 <.L133>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    3ec6:	3c c8 bf    	mov.b     0x83c, WREG
    3ec8:	00 04 a0    	bset.b    w0, #0x0
    3eca:	3c e8 b7    	mov.b     WREG, 0x83c

00003ecc <.LSM231>:
            }
            break;
    3ecc:	75 00 37    	bra       0x3fb8 <.L29>

00003ece <.L95>:
    3ece:	74 00 37    	bra       0x3fb8 <.L29>

00003ed0 <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    3ed0:	30 f0 80    	mov.w     0x1e06, w0
    3ed2:	d1 83 20    	mov.w     #0x83d, w1
    3ed4:	91 40 78    	mov.b     [w1], w1
    3ed6:	01 48 78    	mov.b     w1, [w0]

00003ed8 <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    3ed8:	40 e0 21    	mov.w     #0x1e04, w0
    3eda:	11 c0 b3    	mov.b     #0x1, w1
    3edc:	01 48 78    	mov.b     w1, [w0]

00003ede <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    3ede:	50 e0 21    	mov.w     #0x1e05, w0
    3ee0:	81 cc b3    	mov.b     #0xc8, w1
    3ee2:	01 48 78    	mov.b     w1, [w0]

00003ee4 <.LSM235>:
            break;
    3ee4:	69 00 37    	bra       0x3fb8 <.L29>

00003ee6 <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    3ee6:	40 83 20    	mov.w     #0x834, w0
    3ee8:	20 40 90    	mov.b     [w0+2], w0
    3eea:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3eec:	22 00 3e    	bra       GTU, 0x3f32 <.L108>

00003eee <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    3eee:	a0 4a 20    	mov.w     #0x4aa, w0
    3ef0:	10 07 98    	mov.w     w0, [w14+2]

00003ef2 <.LSM238>:
                for (n = 1; n<16; n++)
    3ef2:	10 c0 b3    	mov.b     #0x1, w0
    3ef4:	00 4f 78    	mov.b     w0, [w14]
    3ef6:	07 00 37    	bra       0x3f06

00003ef8 <.L110>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    3ef8:	1e 80 fb    	ze        [w14], w0
    3efa:	00 00 40    	add.w     w0, w0, w0
    3efc:	9e 00 90    	mov.w     [w14+2], w1
    3efe:	00 80 40    	add.w     w1, w0, w0
    3f00:	80 00 eb    	clr.w     w1
    3f02:	01 08 78    	mov.w     w1, [w0]

00003f04 <.LSM240>:
    3f04:	1e 4f e8    	inc.b     [w14], [w14]

00003f06 <.L109>:
    3f06:	1e 40 78    	mov.b     [w14], w0
    3f08:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    3f0a:	f6 ff 36    	bra       LEU, 0x3ef8 <.L110>

00003f0c <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    3f0c:	40 83 20    	mov.w     #0x834, w0
    3f0e:	20 40 90    	mov.b     [w0+2], w0
    3f10:	3d e8 b7    	mov.b     WREG, 0x83d
    3f12:	3d c8 bf    	mov.b     0x83d, WREG
    3f14:	00 80 fb    	ze        w0, w0
    3f16:	00 00 e0    	cp0.w     w0
    3f18:	03 00 3a    	bra       NZ, 0x3f20 <.L136>

00003f1a <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    3f1a:	20 c0 b3    	mov.b     #0x2, w0
    3f1c:	40 e8 b7    	mov.b     WREG, 0x840

00003f1e <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    3f1e:	02 00 37    	bra       0x3f24 <.L113>

00003f20 <.L136>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    3f20:	30 c0 b3    	mov.b     #0x3, w0
    3f22:	40 e8 b7    	mov.b     WREG, 0x840

00003f24 <.L113>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    3f24:	40 e0 21    	mov.w     #0x1e04, w0
    3f26:	80 40 eb    	clr.b     w1
    3f28:	01 48 78    	mov.b     w1, [w0]

00003f2a <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    3f2a:	50 e0 21    	mov.w     #0x1e05, w0
    3f2c:	81 cc b3    	mov.b     #0xc8, w1
    3f2e:	01 48 78    	mov.b     w1, [w0]

00003f30 <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    3f30:	43 00 37    	bra       0x3fb8 <.L29>

00003f32 <.L108>:
    3f32:	3c c8 bf    	mov.b     0x83c, WREG
    3f34:	00 04 a0    	bset.b    w0, #0x0
    3f36:	3c e8 b7    	mov.b     WREG, 0x83c

00003f38 <.LSM249>:
    3f38:	3f 00 37    	bra       0x3fb8 <.L29>

00003f3a <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    3f3a:	40 c8 bf    	mov.b     0x840, WREG
    3f3c:	00 80 fb    	ze        w0, w0
    3f3e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3f40:	13 00 3a    	bra       NZ, 0x3f68 <.L137>

00003f42 <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3f42:	40 83 20    	mov.w     #0x834, w0
    3f44:	40 40 90    	mov.b     [w0+4], w0
    3f46:	00 04 e0    	cp0.b     w0
    3f48:	0a 00 3a    	bra       NZ, 0x3f5e <.L117>

00003f4a <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    3f4a:	30 f0 80    	mov.w     0x1e06, w0
    3f4c:	80 40 eb    	clr.b     w1
    3f4e:	01 48 78    	mov.b     w1, [w0]

00003f50 <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    3f50:	40 e0 21    	mov.w     #0x1e04, w0
    3f52:	11 c0 b3    	mov.b     #0x1, w1
    3f54:	01 48 78    	mov.b     w1, [w0]

00003f56 <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3f56:	50 e0 21    	mov.w     #0x1e05, w0
    3f58:	81 cc b3    	mov.b     #0xc8, w1
    3f5a:	01 48 78    	mov.b     w1, [w0]
    3f5c:	03 00 37    	bra       0x3f64 <.L118>

00003f5e <.L117>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    3f5e:	3c c8 bf    	mov.b     0x83c, WREG
    3f60:	00 04 a0    	bset.b    w0, #0x0
    3f62:	3c e8 b7    	mov.b     WREG, 0x83c

00003f64 <.L118>:
                    }
                    break;
    3f64:	00 00 00    	nop       

00003f66 <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    3f66:	28 00 37    	bra       0x3fb8 <.L29>

00003f68 <.L137>:
    3f68:	3c c8 bf    	mov.b     0x83c, WREG
    3f6a:	00 04 a0    	bset.b    w0, #0x0
    3f6c:	3c e8 b7    	mov.b     WREG, 0x83c

00003f6e <.LSM259>:
    3f6e:	24 00 37    	bra       0x3fb8 <.L29>

00003f70 <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    3f70:	40 c8 bf    	mov.b     0x840, WREG
    3f72:	00 80 fb    	ze        w0, w0
    3f74:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3f76:	19 00 3a    	bra       NZ, 0x3faa <.L138>

00003f78 <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3f78:	40 83 20    	mov.w     #0x834, w0
    3f7a:	40 40 90    	mov.b     [w0+4], w0
    3f7c:	00 04 e0    	cp0.b     w0
    3f7e:	10 00 3a    	bra       NZ, 0x3fa0 <.L122>

00003f80 <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    3f80:	40 83 20    	mov.w     #0x834, w0
    3f82:	20 40 90    	mov.b     [w0+2], w0
    3f84:	00 80 fb    	ze        w0, w0
    3f86:	00 00 e0    	cp0.w     w0
    3f88:	07 00 3a    	bra       NZ, 0x3f98 <.L139>

00003f8a <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    3f8a:	40 e0 21    	mov.w     #0x1e04, w0
    3f8c:	80 40 eb    	clr.b     w1
    3f8e:	01 48 78    	mov.b     w1, [w0]

00003f90 <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    3f90:	50 e0 21    	mov.w     #0x1e05, w0
    3f92:	81 cc b3    	mov.b     #0xc8, w1
    3f94:	01 48 78    	mov.b     w1, [w0]

00003f96 <.LSM265>:
                                break;
    3f96:	07 00 37    	bra       0x3fa6 <.L126>

00003f98 <.L139>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3f98:	3c c8 bf    	mov.b     0x83c, WREG
    3f9a:	00 04 a0    	bset.b    w0, #0x0
    3f9c:	3c e8 b7    	mov.b     WREG, 0x83c
    3f9e:	03 00 37    	bra       0x3fa6 <.L126>

00003fa0 <.L122>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    3fa0:	3c c8 bf    	mov.b     0x83c, WREG
    3fa2:	00 04 a0    	bset.b    w0, #0x0
    3fa4:	3c e8 b7    	mov.b     WREG, 0x83c

00003fa6 <.L126>:
                    }
                    break;
    3fa6:	00 00 00    	nop       

00003fa8 <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    3fa8:	07 00 37    	bra       0x3fb8 <.L29>

00003faa <.L138>:
    3faa:	3c c8 bf    	mov.b     0x83c, WREG
    3fac:	00 04 a0    	bset.b    w0, #0x0
    3fae:	3c e8 b7    	mov.b     WREG, 0x83c

00003fb0 <.LSM271>:
    3fb0:	03 00 37    	bra       0x3fb8 <.L29>

00003fb2 <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    3fb2:	3c c8 bf    	mov.b     0x83c, WREG
    3fb4:	00 04 a0    	bset.b    w0, #0x0
    3fb6:	3c e8 b7    	mov.b     WREG, 0x83c

00003fb8 <.L29>:
    }
}
    3fb8:	00 80 fa    	ulnk      
    3fba:	00 00 06    	return    

00003fbc <_ProcessInToken>:

void ProcessInToken(void) {
    3fbc:	00 00 fa    	lnk       #0x0

00003fbe <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    3fbe:	3f c8 bf    	mov.b     0x83f, WREG
    3fc0:	80 80 fb    	ze        w0, w1
    3fc2:	00 0f 20    	mov.w     #0xf0, w0
    3fc4:	00 80 60    	and.w     w1, w0, w0
    3fc6:	00 00 e0    	cp0.w     w0
    3fc8:	2b 00 3a    	bra       NZ, 0x4020 <.L140>

00003fca <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    3fca:	00 d0 21    	mov.w     #0x1d00, w0
    3fcc:	10 40 78    	mov.b     [w0], w0
    3fce:	80 80 fb    	ze        w0, w1
    3fd0:	00 06 20    	mov.w     #0x60, w0
    3fd2:	00 80 60    	and.w     w1, w0, w0
    3fd4:	01 02 20    	mov.w     #0x20, w1
    3fd6:	81 0f 50    	sub.w     w0, w1, [w15]
    3fd8:	1f 00 32    	bra       Z, 0x4018 <.L154>
    3fda:	01 04 20    	mov.w     #0x40, w1
    3fdc:	81 0f 50    	sub.w     w0, w1, [w15]
    3fde:	1a 00 32    	bra       Z, 0x4014 <.L146>
    3fe0:	00 00 e0    	cp0.w     w0
    3fe2:	1d 00 3a    	bra       NZ, 0x401e <.L155>

00003fe4 <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    3fe4:	10 d0 21    	mov.w     #0x1d01, w0
    3fe6:	10 40 78    	mov.b     [w0], w0
    3fe8:	00 80 fb    	ze        w0, w0
    3fea:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3fec:	03 00 32    	bra       Z, 0x3ff4 <.L148>
    3fee:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    3ff0:	0e 00 32    	bra       Z, 0x400e <.L149>

00003ff2 <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    3ff2:	13 00 37    	bra       0x401a <.L143>

00003ff4 <.L148>:
    3ff4:	20 d0 21    	mov.w     #0x1d02, w0
    3ff6:	10 40 78    	mov.b     [w0], w0
    3ff8:	00 80 fb    	ze        w0, w0
    3ffa:	b0 24 88    	mov.w     w0, 0x496
    3ffc:	b0 24 80    	mov.w     0x496, w0
    3ffe:	00 00 e0    	cp0.w     w0
    4000:	03 00 3a    	bra       NZ, 0x4008 <.L153>

00004002 <.LSM280>:
    4002:	10 c0 b3    	mov.b     #0x1, w0
    4004:	40 e8 b7    	mov.b     WREG, 0x840

00004006 <.LSM281>:
    4006:	02 00 37    	bra       0x400c <.L152>

00004008 <.L153>:
    4008:	20 c0 b3    	mov.b     #0x2, w0
    400a:	40 e8 b7    	mov.b     WREG, 0x840

0000400c <.L152>:
    400c:	02 00 37    	bra       0x4012 <.L147>

0000400e <.L149>:
    400e:	30 00 07    	rcall     0x4070 <_SendDataPacket>

00004010 <.LSM285>:
    4010:	00 00 00    	nop       

00004012 <.L147>:
    4012:	03 00 37    	bra       0x401a <.L143>

00004014 <.L146>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    4014:	dc 05 07    	rcall     0x4bce <_VendorRequestsIn>

00004016 <.LSM288>:
                    break;
    4016:	01 00 37    	bra       0x401a <.L143>

00004018 <.L154>:
    4018:	00 00 00    	nop       

0000401a <.L143>:
            }
            break;
    401a:	00 00 00    	nop       
    401c:	01 00 37    	bra       0x4020 <.L140>

0000401e <.L155>:
    401e:	00 00 00    	nop       

00004020 <.L140>:
    }
}
    4020:	00 80 fa    	ulnk      
    4022:	00 00 06    	return    

00004024 <_ProcessOutToken>:

void ProcessOutToken(void) {
    4024:	00 00 fa    	lnk       #0x0

00004026 <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    4026:	3f c8 bf    	mov.b     0x83f, WREG
    4028:	80 80 fb    	ze        w0, w1
    402a:	00 0f 20    	mov.w     #0xf0, w0
    402c:	00 80 60    	and.w     w1, w0, w0
    402e:	00 00 e0    	cp0.w     w0
    4030:	1d 00 3a    	bra       NZ, 0x406c <.L156>

00004032 <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    4032:	00 d0 21    	mov.w     #0x1d00, w0
    4034:	10 40 78    	mov.b     [w0], w0
    4036:	80 80 fb    	ze        w0, w1
    4038:	00 06 20    	mov.w     #0x60, w0
    403a:	00 80 60    	and.w     w1, w0, w0
    403c:	01 02 20    	mov.w     #0x20, w1
    403e:	81 0f 50    	sub.w     w0, w1, [w15]
    4040:	05 00 32    	bra       Z, 0x404c <.L163>
    4042:	01 04 20    	mov.w     #0x40, w1
    4044:	81 0f 50    	sub.w     w0, w1, [w15]
    4046:	04 00 3a    	bra       NZ, 0x4050 <.L164>

00004048 <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    4048:	c8 05 07    	rcall     0x4bda <_VendorRequestsOut>

0000404a <.LSM296>:
                    break;
    404a:	03 00 37    	bra       0x4052 <.L159>

0000404c <.L163>:
    404c:	00 00 00    	nop       
    404e:	01 00 37    	bra       0x4052 <.L159>

00004050 <.L164>:
    4050:	00 00 00    	nop       

00004052 <.L159>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    4052:	00 e0 21    	mov.w     #0x1e00, w0
    4054:	01 c4 b3    	mov.b     #0x40, w1
    4056:	01 48 78    	mov.b     w1, [w0]

00004058 <.LSM300>:
            BD[EP0OUT].status = 0x88;
    4058:	10 e0 21    	mov.w     #0x1e01, w0
    405a:	81 c8 b3    	mov.b     #0x88, w1
    405c:	01 48 78    	mov.b     w1, [w0]

0000405e <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    405e:	40 e0 21    	mov.w     #0x1e04, w0
    4060:	80 40 eb    	clr.b     w1
    4062:	01 48 78    	mov.b     w1, [w0]

00004064 <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    4064:	50 e0 21    	mov.w     #0x1e05, w0
    4066:	81 cc b3    	mov.b     #0xc8, w1
    4068:	01 48 78    	mov.b     w1, [w0]

0000406a <.LSM303>:
            break;
    406a:	00 00 00    	nop       

0000406c <.L156>:
    }
}
    406c:	00 80 fa    	ulnk      
    406e:	00 00 06    	return    

00004070 <_SendDataPacket>:

void SendDataPacket(void) {
    4070:	02 00 fa    	lnk       #0x2

00004072 <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    4072:	51 e8 80    	mov.w     0x1d0a, w1
    4074:	f0 03 20    	mov.w     #0x3f, w0
    4076:	80 8f 50    	sub.w     w1, w0, [w15]
    4078:	0b 00 3e    	bra       GTU, 0x4090 <.L166>

0000407a <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    407a:	50 e8 80    	mov.w     0x1d0a, w0
    407c:	00 4f 78    	mov.b     w0, [w14]

0000407e <.LSM308>:
        USB_request.bytes_left.w = 0;
    407e:	00 00 eb    	clr.w     w0
    4080:	50 e8 88    	mov.w     w0, 0x1d0a

00004082 <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    4082:	00 d0 21    	mov.w     #0x1d00, w0
    4084:	80 c0 eb    	setm.b    w1
    4086:	01 48 78    	mov.b     w1, [w0]

00004088 <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    4088:	10 d0 21    	mov.w     #0x1d01, w0
    408a:	80 c0 eb    	setm.b    w1
    408c:	01 48 78    	mov.b     w1, [w0]
    408e:	05 00 37    	bra       0x409a <.L167>

00004090 <.L166>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    4090:	00 c4 b3    	mov.b     #0x40, w0
    4092:	00 4f 78    	mov.b     w0, [w14]

00004094 <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    4094:	50 e8 80    	mov.w     0x1d0a, w0
    4096:	00 04 b1    	sub.w     #0x40, w0
    4098:	50 e8 88    	mov.w     w0, 0x1d0a

0000409a <.L167>:
    }
    for (n = 0; n<packet_length; n++) {
    409a:	00 40 eb    	clr.b     w0
    409c:	10 47 98    	mov.b     w0, [w14+1]
    409e:	0c 00 37    	bra       0x40b8 <.L168>

000040a0 <.L169>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    40a0:	31 f0 80    	mov.w     0x1e06, w1
    40a2:	1e 40 90    	mov.b     [w14+1], w0
    40a4:	00 80 fb    	ze        w0, w0
    40a6:	80 80 40    	add.w     w1, w0, w1
    40a8:	40 e8 80    	mov.w     0x1d08, w0
    40aa:	10 41 78    	mov.b     [w0], w2
    40ac:	82 48 78    	mov.b     w2, [w1]
    40ae:	00 00 e8    	inc.w     w0, w0
    40b0:	40 e8 88    	mov.w     w0, 0x1d08

000040b2 <.LSM315>:
    40b2:	1e 40 90    	mov.b     [w14+1], w0
    40b4:	00 40 e8    	inc.b     w0, w0
    40b6:	10 47 98    	mov.b     w0, [w14+1]

000040b8 <.L168>:
    40b8:	1e 40 90    	mov.b     [w14+1], w0
    40ba:	9e 4f 50    	sub.b     w0, [w14], [w15]
    40bc:	f1 ff 39    	bra       NC, 0x40a0 <.L169>

000040be <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    40be:	40 e0 21    	mov.w     #0x1e04, w0
    40c0:	1e 48 78    	mov.b     [w14], [w0]

000040c2 <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    40c2:	50 e0 21    	mov.w     #0x1e05, w0
    40c4:	10 40 78    	mov.b     [w0], w0
    40c6:	00 c0 ea    	com.b     w0, w0
    40c8:	02 c4 b3    	mov.b     #0x40, w2
    40ca:	82 40 60    	and.b     w0, w2, w1
    40cc:	80 c8 b3    	mov.b     #0x88, w0
    40ce:	00 c0 70    	ior.b     w1, w0, w0
    40d0:	80 40 78    	mov.b     w0, w1
    40d2:	50 e0 21    	mov.w     #0x1e05, w0
    40d4:	01 48 78    	mov.b     w1, [w0]

000040d6 <.LSM318>:
}
    40d6:	00 80 fa    	ulnk      
    40d8:	00 00 06    	return    

000040da <__USB1Interrupt>:

//Making Service USB interrupt driven
void __attribute__((interrupt, auto_psv)) _USB1Interrupt(void) {
    40da:	36 00 f8    	push      0x36
    40dc:	80 9f be    	mov.d     w0, [w15++]
    40de:	82 9f be    	mov.d     w2, [w15++]
    40e0:	84 9f be    	mov.d     w4, [w15++]
    40e2:	86 9f be    	mov.d     w6, [w15++]
    40e4:	32 00 f8    	push      0x32
    40e6:	34 00 f8    	push      0x34
    40e8:	10 00 20    	mov.w     #0x1, w0
    40ea:	a0 01 88    	mov.w     w0, 0x34
    40ec:	00 20 20    	mov.w     #0x200, w0
    40ee:	90 01 88    	mov.w     w0, 0x32
    40f0:	00 00 fa    	lnk       #0x0

000040f2 <.LSM320>:
    IFS5bits.USB1IF = 0; //flag
    40f2:	8e c0 a9    	bclr.b    0x8e, #0x6

000040f4 <.LSM321>:
    ServiceUSB();
    40f4:	fe fb 07    	rcall     0x38f2 <_ServiceUSB>

000040f6 <.LSM322>:
}
    40f6:	00 80 fa    	ulnk      
    40f8:	34 00 f9    	pop       0x34
    40fa:	32 00 f9    	pop       0x32
    40fc:	4f 03 be    	mov.d     [--w15], w6
    40fe:	4f 02 be    	mov.d     [--w15], w4
    4100:	4f 01 be    	mov.d     [--w15], w2
    4102:	4f 00 be    	mov.d     [--w15], w0
    4104:	36 00 f9    	pop       0x36
    4106:	00 40 06    	retfie    

00004108 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    4108:	02 00 fa    	lnk       #0x2
    410a:	00 0f 78    	mov.w     w0, [w14]

0000410c <.LSM1>:
    timer_lower(self);
    410c:	1e 00 78    	mov.w     [w14], w0
    410e:	01 02 07    	rcall     0x4512 <_timer_lower>

00004110 <.LSM2>:
    if (self->every) {
    4110:	1e 00 78    	mov.w     [w14], w0
    4112:	10 08 90    	mov.w     [w0+18], w0
    4114:	00 00 e0    	cp0.w     w0
    4116:	05 00 32    	bra       Z, 0x4122 <.L2>

00004118 <.LSM3>:
        self->every(self);
    4118:	1e 00 78    	mov.w     [w14], w0
    411a:	90 08 90    	mov.w     [w0+18], w1
    411c:	1e 00 78    	mov.w     [w14], w0
    411e:	01 00 01    	call      w1
    4120:	1a 00 37    	bra       0x4156 <.L1>

00004122 <.L2>:
    } else if (self->after) {
    4122:	1e 00 78    	mov.w     [w14], w0
    4124:	20 08 90    	mov.w     [w0+20], w0
    4126:	00 00 e0    	cp0.w     w0
    4128:	14 00 32    	bra       Z, 0x4152 <.L4>

0000412a <.LSM5>:
        if (self->aftercount) {
    412a:	1e 00 78    	mov.w     [w14], w0
    412c:	00 08 90    	mov.w     [w0+16], w0
    412e:	00 00 e0    	cp0.w     w0
    4130:	0a 00 32    	bra       Z, 0x4146 <.L5>

00004132 <.LSM6>:
            self->after(self);
    4132:	1e 00 78    	mov.w     [w14], w0
    4134:	a0 08 90    	mov.w     [w0+20], w1
    4136:	1e 00 78    	mov.w     [w14], w0
    4138:	01 00 01    	call      w1

0000413a <.LSM7>:
            self->aftercount--;
    413a:	1e 00 78    	mov.w     [w14], w0
    413c:	00 08 90    	mov.w     [w0+16], w0
    413e:	80 00 e9    	dec.w     w0, w1
    4140:	1e 00 78    	mov.w     [w14], w0
    4142:	01 08 98    	mov.w     w1, [w0+16]
    4144:	08 00 37    	bra       0x4156 <.L1>

00004146 <.L5>:
        } else {
            timer_disableInterrupt(self);
    4146:	1e 00 78    	mov.w     [w14], w0
    4148:	0c 02 07    	rcall     0x4562 <_timer_disableInterrupt>

0000414a <.LSM9>:
            self->after = NULL;
    414a:	1e 00 78    	mov.w     [w14], w0
    414c:	80 00 eb    	clr.w     w1
    414e:	21 08 98    	mov.w     w1, [w0+20]
    4150:	02 00 37    	bra       0x4156 <.L1>

00004152 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    4152:	1e 00 78    	mov.w     [w14], w0
    4154:	06 02 07    	rcall     0x4562 <_timer_disableInterrupt>

00004156 <.L1>:
    }
}
    4156:	00 80 fa    	ulnk      
    4158:	00 00 06    	return    

0000415a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    415a:	36 00 f8    	push      0x36
    415c:	80 9f be    	mov.d     w0, [w15++]
    415e:	82 9f be    	mov.d     w2, [w15++]
    4160:	84 9f be    	mov.d     w4, [w15++]
    4162:	86 9f be    	mov.d     w6, [w15++]
    4164:	32 00 f8    	push      0x32
    4166:	34 00 f8    	push      0x34
    4168:	10 00 20    	mov.w     #0x1, w0
    416a:	a0 01 88    	mov.w     w0, 0x34
    416c:	00 20 20    	mov.w     #0x200, w0
    416e:	90 01 88    	mov.w     w0, 0x32
    4170:	00 00 fa    	lnk       #0x0

00004172 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    4172:	c0 d0 21    	mov.w     #0x1d0c, w0
    4174:	c9 ff 07    	rcall     0x4108 <_timer_serviceInterrupt>

00004176 <.LSM14>:
}
    4176:	00 80 fa    	ulnk      
    4178:	34 00 f9    	pop       0x34
    417a:	32 00 f9    	pop       0x32
    417c:	4f 03 be    	mov.d     [--w15], w6
    417e:	4f 02 be    	mov.d     [--w15], w4
    4180:	4f 01 be    	mov.d     [--w15], w2
    4182:	4f 00 be    	mov.d     [--w15], w0
    4184:	36 00 f9    	pop       0x36
    4186:	00 40 06    	retfie    

00004188 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    4188:	36 00 f8    	push      0x36
    418a:	80 9f be    	mov.d     w0, [w15++]
    418c:	82 9f be    	mov.d     w2, [w15++]
    418e:	84 9f be    	mov.d     w4, [w15++]
    4190:	86 9f be    	mov.d     w6, [w15++]
    4192:	32 00 f8    	push      0x32
    4194:	34 00 f8    	push      0x34
    4196:	10 00 20    	mov.w     #0x1, w0
    4198:	a0 01 88    	mov.w     w0, 0x34
    419a:	00 20 20    	mov.w     #0x200, w0
    419c:	90 01 88    	mov.w     w0, 0x32
    419e:	00 00 fa    	lnk       #0x0

000041a0 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    41a0:	20 d2 21    	mov.w     #0x1d22, w0
    41a2:	b2 ff 07    	rcall     0x4108 <_timer_serviceInterrupt>

000041a4 <.LSM17>:
}
    41a4:	00 80 fa    	ulnk      
    41a6:	34 00 f9    	pop       0x34
    41a8:	32 00 f9    	pop       0x32
    41aa:	4f 03 be    	mov.d     [--w15], w6
    41ac:	4f 02 be    	mov.d     [--w15], w4
    41ae:	4f 01 be    	mov.d     [--w15], w2
    41b0:	4f 00 be    	mov.d     [--w15], w0
    41b2:	36 00 f9    	pop       0x36
    41b4:	00 40 06    	retfie    

000041b6 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    41b6:	36 00 f8    	push      0x36
    41b8:	80 9f be    	mov.d     w0, [w15++]
    41ba:	82 9f be    	mov.d     w2, [w15++]
    41bc:	84 9f be    	mov.d     w4, [w15++]
    41be:	86 9f be    	mov.d     w6, [w15++]
    41c0:	32 00 f8    	push      0x32
    41c2:	34 00 f8    	push      0x34
    41c4:	10 00 20    	mov.w     #0x1, w0
    41c6:	a0 01 88    	mov.w     w0, 0x34
    41c8:	00 20 20    	mov.w     #0x200, w0
    41ca:	90 01 88    	mov.w     w0, 0x32
    41cc:	00 00 fa    	lnk       #0x0

000041ce <.LSM19>:
    timer_serviceInterrupt(&timer3);
    41ce:	80 d3 21    	mov.w     #0x1d38, w0
    41d0:	9b ff 07    	rcall     0x4108 <_timer_serviceInterrupt>

000041d2 <.LSM20>:
}
    41d2:	00 80 fa    	ulnk      
    41d4:	34 00 f9    	pop       0x34
    41d6:	32 00 f9    	pop       0x32
    41d8:	4f 03 be    	mov.d     [--w15], w6
    41da:	4f 02 be    	mov.d     [--w15], w4
    41dc:	4f 01 be    	mov.d     [--w15], w2
    41de:	4f 00 be    	mov.d     [--w15], w0
    41e0:	36 00 f9    	pop       0x36
    41e2:	00 40 06    	retfie    

000041e4 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    41e4:	36 00 f8    	push      0x36
    41e6:	80 9f be    	mov.d     w0, [w15++]
    41e8:	82 9f be    	mov.d     w2, [w15++]
    41ea:	84 9f be    	mov.d     w4, [w15++]
    41ec:	86 9f be    	mov.d     w6, [w15++]
    41ee:	32 00 f8    	push      0x32
    41f0:	34 00 f8    	push      0x34
    41f2:	10 00 20    	mov.w     #0x1, w0
    41f4:	a0 01 88    	mov.w     w0, 0x34
    41f6:	00 20 20    	mov.w     #0x200, w0
    41f8:	90 01 88    	mov.w     w0, 0x32
    41fa:	00 00 fa    	lnk       #0x0

000041fc <.LSM22>:
    timer_serviceInterrupt(&timer4);
    41fc:	e0 d4 21    	mov.w     #0x1d4e, w0
    41fe:	84 ff 07    	rcall     0x4108 <_timer_serviceInterrupt>

00004200 <.LSM23>:
}
    4200:	00 80 fa    	ulnk      
    4202:	34 00 f9    	pop       0x34
    4204:	32 00 f9    	pop       0x32
    4206:	4f 03 be    	mov.d     [--w15], w6
    4208:	4f 02 be    	mov.d     [--w15], w4
    420a:	4f 01 be    	mov.d     [--w15], w2
    420c:	4f 00 be    	mov.d     [--w15], w0
    420e:	36 00 f9    	pop       0x36
    4210:	00 40 06    	retfie    

00004212 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    4212:	36 00 f8    	push      0x36
    4214:	80 9f be    	mov.d     w0, [w15++]
    4216:	82 9f be    	mov.d     w2, [w15++]
    4218:	84 9f be    	mov.d     w4, [w15++]
    421a:	86 9f be    	mov.d     w6, [w15++]
    421c:	32 00 f8    	push      0x32
    421e:	34 00 f8    	push      0x34
    4220:	10 00 20    	mov.w     #0x1, w0
    4222:	a0 01 88    	mov.w     w0, 0x34
    4224:	00 20 20    	mov.w     #0x200, w0
    4226:	90 01 88    	mov.w     w0, 0x32
    4228:	00 00 fa    	lnk       #0x0

0000422a <.LSM25>:
    timer_serviceInterrupt(&timer5);
    422a:	40 d6 21    	mov.w     #0x1d64, w0
    422c:	6d ff 07    	rcall     0x4108 <_timer_serviceInterrupt>

0000422e <.LSM26>:
}
    422e:	00 80 fa    	ulnk      
    4230:	34 00 f9    	pop       0x34
    4232:	32 00 f9    	pop       0x32
    4234:	4f 03 be    	mov.d     [--w15], w6
    4236:	4f 02 be    	mov.d     [--w15], w4
    4238:	4f 01 be    	mov.d     [--w15], w2
    423a:	4f 00 be    	mov.d     [--w15], w0
    423c:	36 00 f9    	pop       0x36
    423e:	00 40 06    	retfie    

00004240 <_init_timer>:

void init_timer(void) {
    4240:	00 00 fa    	lnk       #0x0

00004242 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    4242:	b0 00 20    	mov.w     #0xb, w0
    4244:	80 1f 78    	mov.w     w0, [w15++]
    4246:	47 00 20    	mov.w     #0x4, w7
    4248:	36 c0 b3    	mov.b     #0x3, w6
    424a:	45 09 20    	mov.w     #0x94, w5
    424c:	44 08 20    	mov.w     #0x84, w4
    424e:	03 10 20    	mov.w     #0x100, w3
    4250:	22 10 20    	mov.w     #0x102, w2
    4252:	41 10 20    	mov.w     #0x104, w1
    4254:	c0 d0 21    	mov.w     #0x1d0c, w0
    4256:	33 00 07    	rcall     0x42be <_timer_init>
    4258:	8f 87 e9    	dec2.w    w15, w15

0000425a <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    425a:	c0 00 20    	mov.w     #0xc, w0
    425c:	80 1f 78    	mov.w     w0, [w15++]
    425e:	80 03 eb    	clr.w     w7
    4260:	76 c0 b3    	mov.b     #0x7, w6
    4262:	45 09 20    	mov.w     #0x94, w5
    4264:	44 08 20    	mov.w     #0x84, w4
    4266:	63 10 20    	mov.w     #0x106, w3
    4268:	c2 10 20    	mov.w     #0x10c, w2
    426a:	01 11 20    	mov.w     #0x110, w1
    426c:	20 d2 21    	mov.w     #0x1d22, w0
    426e:	27 00 07    	rcall     0x42be <_timer_init>
    4270:	8f 87 e9    	dec2.w    w15, w15

00004272 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    4272:	d0 00 20    	mov.w     #0xd, w0
    4274:	80 1f 78    	mov.w     w0, [w15++]
    4276:	17 00 20    	mov.w     #0x1, w7
    4278:	86 c0 b3    	mov.b     #0x8, w6
    427a:	45 09 20    	mov.w     #0x94, w5
    427c:	44 08 20    	mov.w     #0x84, w4
    427e:	a3 10 20    	mov.w     #0x10a, w3
    4280:	e2 10 20    	mov.w     #0x10e, w2
    4282:	21 11 20    	mov.w     #0x112, w1
    4284:	80 d3 21    	mov.w     #0x1d38, w0
    4286:	1b 00 07    	rcall     0x42be <_timer_init>
    4288:	8f 87 e9    	dec2.w    w15, w15

0000428a <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    428a:	e0 00 20    	mov.w     #0xe, w0
    428c:	80 1f 78    	mov.w     w0, [w15++]
    428e:	27 00 20    	mov.w     #0x2, w7
    4290:	b6 c0 b3    	mov.b     #0xb, w6
    4292:	65 09 20    	mov.w     #0x96, w5
    4294:	64 08 20    	mov.w     #0x86, w4
    4296:	43 11 20    	mov.w     #0x114, w3
    4298:	a2 11 20    	mov.w     #0x11a, w2
    429a:	e1 11 20    	mov.w     #0x11e, w1
    429c:	e0 d4 21    	mov.w     #0x1d4e, w0
    429e:	0f 00 07    	rcall     0x42be <_timer_init>
    42a0:	8f 87 e9    	dec2.w    w15, w15

000042a2 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    42a2:	f0 00 20    	mov.w     #0xf, w0
    42a4:	80 1f 78    	mov.w     w0, [w15++]
    42a6:	37 00 20    	mov.w     #0x3, w7
    42a8:	c6 c0 b3    	mov.b     #0xc, w6
    42aa:	65 09 20    	mov.w     #0x96, w5
    42ac:	64 08 20    	mov.w     #0x86, w4
    42ae:	83 11 20    	mov.w     #0x118, w3
    42b0:	c2 11 20    	mov.w     #0x11c, w2
    42b2:	01 12 20    	mov.w     #0x120, w1
    42b4:	40 d6 21    	mov.w     #0x1d64, w0
    42b6:	03 00 07    	rcall     0x42be <_timer_init>
    42b8:	8f 87 e9    	dec2.w    w15, w15

000042ba <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    42ba:	00 80 fa    	ulnk      
    42bc:	00 00 06    	return    

000042be <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    42be:	10 00 fa    	lnk       #0x10
    42c0:	00 0f 78    	mov.w     w0, [w14]
    42c2:	11 07 98    	mov.w     w1, [w14+2]
    42c4:	22 07 98    	mov.w     w2, [w14+4]
    42c6:	33 07 98    	mov.w     w3, [w14+6]
    42c8:	44 07 98    	mov.w     w4, [w14+8]
    42ca:	55 07 98    	mov.w     w5, [w14+10]
    42cc:	46 4f 98    	mov.b     w6, [w14+12]
    42ce:	77 07 98    	mov.w     w7, [w14+14]

000042d0 <.LSM35>:
    self->TxCON = TxCON;
    42d0:	1e 00 78    	mov.w     [w14], w0
    42d2:	9e 00 90    	mov.w     [w14+2], w1
    42d4:	01 08 78    	mov.w     w1, [w0]

000042d6 <.LSM36>:
    self->PRx = PRx;
    42d6:	1e 00 78    	mov.w     [w14], w0
    42d8:	ae 00 90    	mov.w     [w14+4], w1
    42da:	11 00 98    	mov.w     w1, [w0+2]

000042dc <.LSM37>:
    self->TMRx = TMRx;
    42dc:	1e 00 78    	mov.w     [w14], w0
    42de:	be 00 90    	mov.w     [w14+6], w1
    42e0:	21 00 98    	mov.w     w1, [w0+4]

000042e2 <.LSM38>:
    self->IFSy = IFSy;
    42e2:	1e 00 78    	mov.w     [w14], w0
    42e4:	ce 00 90    	mov.w     [w14+8], w1
    42e6:	31 00 98    	mov.w     w1, [w0+6]

000042e8 <.LSM39>:
    self->IECy = IECy;
    42e8:	1e 00 78    	mov.w     [w14], w0
    42ea:	de 00 90    	mov.w     [w14+10], w1
    42ec:	41 00 98    	mov.w     w1, [w0+8]

000042ee <.LSM40>:
    self->flagbit = flagbit;
    42ee:	1e 00 78    	mov.w     [w14], w0
    42f0:	ce 48 90    	mov.b     [w14+12], w1
    42f2:	21 48 98    	mov.b     w1, [w0+10]

000042f4 <.LSM41>:
    self->octselnum = octselnum;
    42f4:	1e 00 78    	mov.w     [w14], w0
    42f6:	fe 00 90    	mov.w     [w14+14], w1
    42f8:	61 00 98    	mov.w     w1, [w0+12]

000042fa <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    42fa:	1e 00 78    	mov.w     [w14], w0
    42fc:	ce b8 97    	mov.w     [w14-8], w1
    42fe:	71 00 98    	mov.w     w1, [w0+14]

00004300 <.LSM43>:
    self->aftercount = 0;
    4300:	1e 00 78    	mov.w     [w14], w0
    4302:	80 00 eb    	clr.w     w1
    4304:	01 08 98    	mov.w     w1, [w0+16]

00004306 <.LSM44>:
    self->every = NULL;
    4306:	1e 00 78    	mov.w     [w14], w0
    4308:	80 00 eb    	clr.w     w1
    430a:	11 08 98    	mov.w     w1, [w0+18]

0000430c <.LSM45>:
    self->after = NULL;
    430c:	1e 00 78    	mov.w     [w14], w0
    430e:	80 00 eb    	clr.w     w1
    4310:	21 08 98    	mov.w     w1, [w0+20]

00004312 <.LSM46>:
}
    4312:	00 80 fa    	ulnk      
    4314:	00 00 06    	return    

00004316 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    4316:	06 00 fa    	lnk       #0x6
    4318:	88 1f 78    	mov.w     w8, [w15++]
    431a:	00 0f 78    	mov.w     w0, [w14]
    431c:	12 07 98    	mov.w     w2, [w14+2]
    431e:	23 07 98    	mov.w     w3, [w14+4]

00004320 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    4320:	18 c0 b3    	mov.b     #0x1, w8
    4322:	d2 7b 23    	mov.w     #0x37bd, w2
    4324:	63 f8 23    	mov.w     #0x3f86, w3
    4326:	1e 00 90    	mov.w     [w14+2], w0
    4328:	ae 00 90    	mov.w     [w14+4], w1
    432a:	46 e8 07    	rcall     0x13b8 <___gesf2>
    432c:	00 00 e0    	cp0.w     w0
    432e:	01 00 3c    	bra       GT, 0x4332 <.L14>
    4330:	00 44 eb    	clr.b     w8

00004332 <.L14>:
    4332:	08 04 e0    	cp0.b     w8
    4334:	69 00 3a    	bra       NZ, 0x4408 <.L23>

00004336 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    4336:	18 c0 b3    	mov.b     #0x1, w8
    4338:	d2 7b 23    	mov.w     #0x37bd, w2
    433a:	63 e8 23    	mov.w     #0x3e86, w3
    433c:	1e 00 90    	mov.w     [w14+2], w0
    433e:	ae 00 90    	mov.w     [w14+4], w1
    4340:	3b e8 07    	rcall     0x13b8 <___gesf2>
    4342:	00 00 e0    	cp0.w     w0
    4344:	01 00 3c    	bra       GT, 0x4348 <.L17>
    4346:	00 44 eb    	clr.b     w8

00004348 <.L17>:
    4348:	08 04 e0    	cp0.b     w8
    434a:	12 00 32    	bra       Z, 0x4370 <.L18>

0000434c <.LSM50>:
        timer_stop(self);
    434c:	1e 00 78    	mov.w     [w14], w0
    434e:	c4 00 07    	rcall     0x44d8 <_timer_stop>

00004350 <.LSM51>:
        poke(self->TxCON, 0x0030);
    4350:	1e 00 78    	mov.w     [w14], w0
    4352:	10 00 78    	mov.w     [w0], w0
    4354:	01 03 20    	mov.w     #0x30, w1
    4356:	01 08 78    	mov.w     w1, [w0]

00004358 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    4358:	1e 00 78    	mov.w     [w14], w0
    435a:	10 04 90    	mov.w     [w0+2], w8
    435c:	02 40 22    	mov.w     #0x2400, w2
    435e:	43 77 24    	mov.w     #0x4774, w3
    4360:	1e 00 90    	mov.w     [w14+2], w0
    4362:	ae 00 90    	mov.w     [w14+4], w1
    4364:	9b e8 07    	rcall     0x149c <___mulsf3>
    4366:	2a e8 07    	rcall     0x13bc <___fixunssfsi>
    4368:	00 00 78    	mov.w     w0, w0
    436a:	00 00 e9    	dec.w     w0, w0
    436c:	00 0c 78    	mov.w     w0, [w8]
    436e:	4d 00 37    	bra       0x440a <.L13>

00004370 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    4370:	18 c0 b3    	mov.b     #0x1, w8
    4372:	d2 7b 23    	mov.w     #0x37bd, w2
    4374:	63 d0 23    	mov.w     #0x3d06, w3
    4376:	1e 00 90    	mov.w     [w14+2], w0
    4378:	ae 00 90    	mov.w     [w14+4], w1
    437a:	1e e8 07    	rcall     0x13b8 <___gesf2>
    437c:	00 00 e0    	cp0.w     w0
    437e:	01 00 3c    	bra       GT, 0x4382 <.L19>
    4380:	00 44 eb    	clr.b     w8

00004382 <.L19>:
    4382:	08 04 e0    	cp0.b     w8
    4384:	12 00 32    	bra       Z, 0x43aa <.L20>

00004386 <.LSM54>:
        timer_stop(self);
    4386:	1e 00 78    	mov.w     [w14], w0
    4388:	a7 00 07    	rcall     0x44d8 <_timer_stop>

0000438a <.LSM55>:
        poke(self->TxCON, 0x0020);
    438a:	1e 00 78    	mov.w     [w14], w0
    438c:	10 00 78    	mov.w     [w0], w0
    438e:	01 02 20    	mov.w     #0x20, w1
    4390:	01 08 78    	mov.w     w1, [w0]

00004392 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    4392:	1e 00 78    	mov.w     [w14], w0
    4394:	10 04 90    	mov.w     [w0+2], w8
    4396:	02 40 22    	mov.w     #0x2400, w2
    4398:	43 87 24    	mov.w     #0x4874, w3
    439a:	1e 00 90    	mov.w     [w14+2], w0
    439c:	ae 00 90    	mov.w     [w14+4], w1
    439e:	7e e8 07    	rcall     0x149c <___mulsf3>
    43a0:	0d e8 07    	rcall     0x13bc <___fixunssfsi>
    43a2:	00 00 78    	mov.w     w0, w0
    43a4:	00 00 e9    	dec.w     w0, w0
    43a6:	00 0c 78    	mov.w     w0, [w8]
    43a8:	30 00 37    	bra       0x440a <.L13>

000043aa <.L20>:
    } else if (period>(65536.*TCY)) {
    43aa:	18 c0 b3    	mov.b     #0x1, w8
    43ac:	d2 7b 23    	mov.w     #0x37bd, w2
    43ae:	63 b8 23    	mov.w     #0x3b86, w3
    43b0:	1e 00 90    	mov.w     [w14+2], w0
    43b2:	ae 00 90    	mov.w     [w14+4], w1
    43b4:	01 e8 07    	rcall     0x13b8 <___gesf2>
    43b6:	00 00 e0    	cp0.w     w0
    43b8:	01 00 3c    	bra       GT, 0x43bc <.L21>
    43ba:	00 44 eb    	clr.b     w8

000043bc <.L21>:
    43bc:	08 04 e0    	cp0.b     w8
    43be:	12 00 32    	bra       Z, 0x43e4 <.L22>

000043c0 <.LSM58>:
        timer_stop(self);
    43c0:	1e 00 78    	mov.w     [w14], w0
    43c2:	8a 00 07    	rcall     0x44d8 <_timer_stop>

000043c4 <.LSM59>:
        poke(self->TxCON, 0x0010);
    43c4:	1e 00 78    	mov.w     [w14], w0
    43c6:	10 00 78    	mov.w     [w0], w0
    43c8:	01 01 20    	mov.w     #0x10, w1
    43ca:	01 08 78    	mov.w     w1, [w0]

000043cc <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    43cc:	1e 00 78    	mov.w     [w14], w0
    43ce:	10 04 90    	mov.w     [w0+2], w8
    43d0:	02 40 22    	mov.w     #0x2400, w2
    43d2:	43 9f 24    	mov.w     #0x49f4, w3
    43d4:	1e 00 90    	mov.w     [w14+2], w0
    43d6:	ae 00 90    	mov.w     [w14+4], w1
    43d8:	61 e8 07    	rcall     0x149c <___mulsf3>
    43da:	f0 e7 07    	rcall     0x13bc <___fixunssfsi>
    43dc:	00 00 78    	mov.w     w0, w0
    43de:	00 00 e9    	dec.w     w0, w0
    43e0:	00 0c 78    	mov.w     w0, [w8]
    43e2:	13 00 37    	bra       0x440a <.L13>

000043e4 <.L22>:
    } else {
        timer_stop(self);
    43e4:	1e 00 78    	mov.w     [w14], w0
    43e6:	78 00 07    	rcall     0x44d8 <_timer_stop>

000043e8 <.LSM62>:
        poke(self->TxCON, 0x0000);
    43e8:	1e 00 78    	mov.w     [w14], w0
    43ea:	10 00 78    	mov.w     [w0], w0
    43ec:	80 00 eb    	clr.w     w1
    43ee:	01 08 78    	mov.w     w1, [w0]

000043f0 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    43f0:	1e 00 78    	mov.w     [w14], w0
    43f2:	10 04 90    	mov.w     [w0+2], w8
    43f4:	02 40 22    	mov.w     #0x2400, w2
    43f6:	43 b7 24    	mov.w     #0x4b74, w3
    43f8:	1e 00 90    	mov.w     [w14+2], w0
    43fa:	ae 00 90    	mov.w     [w14+4], w1
    43fc:	4f e8 07    	rcall     0x149c <___mulsf3>
    43fe:	de e7 07    	rcall     0x13bc <___fixunssfsi>
    4400:	00 00 78    	mov.w     w0, w0
    4402:	00 00 e9    	dec.w     w0, w0
    4404:	00 0c 78    	mov.w     w0, [w8]
    4406:	01 00 37    	bra       0x440a <.L13>

00004408 <.L23>:
    4408:	00 00 00    	nop       

0000440a <.L13>:
    }
}
    440a:	4f 04 78    	mov.w     [--w15], w8
    440c:	00 80 fa    	ulnk      
    440e:	00 00 06    	return    

00004410 <_timer_period>:

float timer_period(_TIMER *self) {
    4410:	04 00 fa    	lnk       #0x4
    4412:	88 9f be    	mov.d     w8, [w15++]
    4414:	10 07 98    	mov.w     w0, [w14+2]

00004416 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    4416:	1e 00 90    	mov.w     [w14+2], w0
    4418:	10 00 78    	mov.w     [w0], w0
    441a:	90 00 78    	mov.w     [w0], w1
    441c:	00 03 20    	mov.w     #0x30, w0
    441e:	00 80 60    	and.w     w1, w0, w0
    4420:	44 00 de    	lsr.w     w0, #0x4, w0
    4422:	00 0f 78    	mov.w     w0, [w14]

00004424 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    4424:	1e 00 78    	mov.w     [w14], w0
    4426:	c2 00 dd    	sl.w      w0, #0x2, w1
    4428:	a0 e9 21    	mov.w     #0x1e9a, w0
    442a:	00 80 40    	add.w     w1, w0, w0
    442c:	10 04 be    	mov.d     [w0], w8
    442e:	1e 00 90    	mov.w     [w14+2], w0
    4430:	10 00 90    	mov.w     [w0+2], w0
    4432:	10 00 78    	mov.w     [w0], w0
    4434:	80 00 eb    	clr.w     w1
    4436:	dd e7 07    	rcall     0x13f2 <___floatunsisf>
    4438:	02 00 20    	mov.w     #0x0, w2
    443a:	03 f8 23    	mov.w     #0x3f80, w3
    443c:	1c e7 07    	rcall     0x1276 <___addsf3>
    443e:	00 01 be    	mov.d     w0, w2
    4440:	08 00 be    	mov.d     w8, w0
    4442:	2c e8 07    	rcall     0x149c <___mulsf3>

00004444 <.LSM69>:
}
    4444:	4f 04 be    	mov.d     [--w15], w8
    4446:	00 80 fa    	ulnk      
    4448:	00 00 06    	return    

0000444a <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    444a:	06 00 fa    	lnk       #0x6
    444c:	00 0f 78    	mov.w     w0, [w14]
    444e:	12 07 98    	mov.w     w2, [w14+2]
    4450:	23 07 98    	mov.w     w3, [w14+4]

00004452 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    4452:	1e 01 90    	mov.w     [w14+2], w2
    4454:	ae 01 90    	mov.w     [w14+4], w3
    4456:	00 00 20    	mov.w     #0x0, w0
    4458:	01 f8 23    	mov.w     #0x3f80, w1
    445a:	6a e7 07    	rcall     0x1330 <___divsf3>
    445c:	00 01 be    	mov.d     w0, w2
    445e:	1e 00 78    	mov.w     [w14], w0
    4460:	5a ff 07    	rcall     0x4316 <_timer_setPeriod>

00004462 <.LSM72>:
}
    4462:	00 80 fa    	ulnk      
    4464:	00 00 06    	return    

00004466 <_timer_freq>:

float timer_freq(_TIMER *self) {
    4466:	02 00 fa    	lnk       #0x2
    4468:	00 0f 78    	mov.w     w0, [w14]

0000446a <.LSM74>:
    return 1./timer_period(self);
    446a:	1e 00 78    	mov.w     [w14], w0
    446c:	d1 ff 07    	rcall     0x4410 <_timer_period>
    446e:	00 01 be    	mov.d     w0, w2
    4470:	00 00 20    	mov.w     #0x0, w0
    4472:	01 f8 23    	mov.w     #0x3f80, w1
    4474:	5d e7 07    	rcall     0x1330 <___divsf3>

00004476 <.LSM75>:
}
    4476:	00 80 fa    	ulnk      
    4478:	00 00 06    	return    

0000447a <_timer_time>:

float timer_time(_TIMER *self) {
    447a:	04 00 fa    	lnk       #0x4
    447c:	88 9f be    	mov.d     w8, [w15++]
    447e:	10 07 98    	mov.w     w0, [w14+2]

00004480 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    4480:	1e 00 90    	mov.w     [w14+2], w0
    4482:	10 00 78    	mov.w     [w0], w0
    4484:	90 00 78    	mov.w     [w0], w1
    4486:	00 03 20    	mov.w     #0x30, w0
    4488:	00 80 60    	and.w     w1, w0, w0
    448a:	44 00 de    	lsr.w     w0, #0x4, w0
    448c:	00 0f 78    	mov.w     w0, [w14]

0000448e <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    448e:	1e 00 78    	mov.w     [w14], w0
    4490:	c2 00 dd    	sl.w      w0, #0x2, w1
    4492:	a0 e9 21    	mov.w     #0x1e9a, w0
    4494:	00 80 40    	add.w     w1, w0, w0
    4496:	10 04 be    	mov.d     [w0], w8
    4498:	1e 00 90    	mov.w     [w14+2], w0
    449a:	10 00 90    	mov.w     [w0+2], w0
    449c:	10 00 78    	mov.w     [w0], w0
    449e:	80 00 eb    	clr.w     w1
    44a0:	a8 e7 07    	rcall     0x13f2 <___floatunsisf>
    44a2:	02 00 20    	mov.w     #0x0, w2
    44a4:	03 f8 23    	mov.w     #0x3f80, w3
    44a6:	e7 e6 07    	rcall     0x1276 <___addsf3>
    44a8:	00 01 be    	mov.d     w0, w2
    44aa:	08 00 be    	mov.d     w8, w0
    44ac:	f7 e7 07    	rcall     0x149c <___mulsf3>

000044ae <.LSM79>:
}
    44ae:	4f 04 be    	mov.d     [--w15], w8
    44b0:	00 80 fa    	ulnk      
    44b2:	00 00 06    	return    

000044b4 <_timer_start>:

void timer_start(_TIMER *self) {
    44b4:	02 00 fa    	lnk       #0x2
    44b6:	00 0f 78    	mov.w     w0, [w14]

000044b8 <.LSM81>:
    timer_lower(self);
    44b8:	1e 00 78    	mov.w     [w14], w0
    44ba:	2b 00 07    	rcall     0x4512 <_timer_lower>

000044bc <.LSM82>:
    poke(self->TMRx, 0);
    44bc:	1e 00 78    	mov.w     [w14], w0
    44be:	20 00 90    	mov.w     [w0+4], w0
    44c0:	80 00 eb    	clr.w     w1
    44c2:	01 08 78    	mov.w     w1, [w0]

000044c4 <.LSM83>:
    bitset(self->TxCON, 15);
    44c4:	1e 00 78    	mov.w     [w14], w0
    44c6:	10 00 78    	mov.w     [w0], w0
    44c8:	9e 00 78    	mov.w     [w14], w1
    44ca:	91 00 78    	mov.w     [w1], w1
    44cc:	11 01 78    	mov.w     [w1], w2
    44ce:	01 00 28    	mov.w     #0x8000, w1
    44d0:	82 80 70    	ior.w     w1, w2, w1
    44d2:	01 08 78    	mov.w     w1, [w0]

000044d4 <.LSM84>:
}
    44d4:	00 80 fa    	ulnk      
    44d6:	00 00 06    	return    

000044d8 <_timer_stop>:

void timer_stop(_TIMER *self) {
    44d8:	02 00 fa    	lnk       #0x2
    44da:	00 0f 78    	mov.w     w0, [w14]

000044dc <.LSM86>:
    bitclear(self->TxCON, 15);
    44dc:	1e 00 78    	mov.w     [w14], w0
    44de:	10 00 78    	mov.w     [w0], w0
    44e0:	9e 00 78    	mov.w     [w14], w1
    44e2:	91 00 78    	mov.w     [w1], w1
    44e4:	11 01 78    	mov.w     [w1], w2
    44e6:	f1 ff 27    	mov.w     #0x7fff, w1
    44e8:	81 00 61    	and.w     w2, w1, w1
    44ea:	01 08 78    	mov.w     w1, [w0]

000044ec <.LSM87>:
}
    44ec:	00 80 fa    	ulnk      
    44ee:	00 00 06    	return    

000044f0 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    44f0:	02 00 fa    	lnk       #0x2
    44f2:	00 0f 78    	mov.w     w0, [w14]

000044f4 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    44f4:	1e 00 78    	mov.w     [w14], w0
    44f6:	30 00 90    	mov.w     [w0+6], w0
    44f8:	90 00 78    	mov.w     [w0], w1
    44fa:	1e 00 78    	mov.w     [w14], w0
    44fc:	20 48 90    	mov.b     [w0+10], w0
    44fe:	00 80 fb    	ze        w0, w0
    4500:	12 00 20    	mov.w     #0x1, w2
    4502:	00 10 dd    	sl.w      w2, w0, w0
    4504:	00 80 60    	and.w     w1, w0, w0
    4506:	00 f0 a7    	btsc.w    w0, #0xf
    4508:	00 00 ea    	neg.w     w0, w0
    450a:	00 00 ea    	neg.w     w0, w0
    450c:	4f 00 de    	lsr.w     w0, #0xf, w0

0000450e <.LSM90>:
}
    450e:	00 80 fa    	ulnk      
    4510:	00 00 06    	return    

00004512 <_timer_lower>:

void timer_lower(_TIMER *self) {
    4512:	02 00 fa    	lnk       #0x2
    4514:	00 0f 78    	mov.w     w0, [w14]

00004516 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    4516:	1e 00 78    	mov.w     [w14], w0
    4518:	30 00 90    	mov.w     [w0+6], w0
    451a:	9e 00 78    	mov.w     [w14], w1
    451c:	b1 00 90    	mov.w     [w1+6], w1
    451e:	11 01 78    	mov.w     [w1], w2
    4520:	9e 00 78    	mov.w     [w14], w1
    4522:	a1 48 90    	mov.b     [w1+10], w1
    4524:	81 80 fb    	ze        w1, w1
    4526:	13 00 20    	mov.w     #0x1, w3
    4528:	81 18 dd    	sl.w      w3, w1, w1
    452a:	81 80 ea    	com.w     w1, w1
    452c:	81 00 61    	and.w     w2, w1, w1
    452e:	01 08 78    	mov.w     w1, [w0]

00004530 <.LSM93>:
}
    4530:	00 80 fa    	ulnk      
    4532:	00 00 06    	return    

00004534 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    4534:	02 00 fa    	lnk       #0x2
    4536:	00 0f 78    	mov.w     w0, [w14]

00004538 <.LSM95>:
    return peek(self->TMRx);
    4538:	1e 00 78    	mov.w     [w14], w0
    453a:	20 00 90    	mov.w     [w0+4], w0
    453c:	10 00 78    	mov.w     [w0], w0

0000453e <.LSM96>:
}
    453e:	00 80 fa    	ulnk      
    4540:	00 00 06    	return    

00004542 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    4542:	02 00 fa    	lnk       #0x2
    4544:	00 0f 78    	mov.w     w0, [w14]

00004546 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    4546:	1e 00 78    	mov.w     [w14], w0
    4548:	40 00 90    	mov.w     [w0+8], w0
    454a:	9e 00 78    	mov.w     [w14], w1
    454c:	c1 00 90    	mov.w     [w1+8], w1
    454e:	11 01 78    	mov.w     [w1], w2
    4550:	9e 00 78    	mov.w     [w14], w1
    4552:	a1 48 90    	mov.b     [w1+10], w1
    4554:	81 80 fb    	ze        w1, w1
    4556:	13 00 20    	mov.w     #0x1, w3
    4558:	81 18 dd    	sl.w      w3, w1, w1
    455a:	82 80 70    	ior.w     w1, w2, w1
    455c:	01 08 78    	mov.w     w1, [w0]

0000455e <.LSM99>:
}
    455e:	00 80 fa    	ulnk      
    4560:	00 00 06    	return    

00004562 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    4562:	02 00 fa    	lnk       #0x2
    4564:	00 0f 78    	mov.w     w0, [w14]

00004566 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    4566:	1e 00 78    	mov.w     [w14], w0
    4568:	40 00 90    	mov.w     [w0+8], w0
    456a:	9e 00 78    	mov.w     [w14], w1
    456c:	c1 00 90    	mov.w     [w1+8], w1
    456e:	11 01 78    	mov.w     [w1], w2
    4570:	9e 00 78    	mov.w     [w14], w1
    4572:	a1 48 90    	mov.b     [w1+10], w1
    4574:	81 80 fb    	ze        w1, w1
    4576:	13 00 20    	mov.w     #0x1, w3
    4578:	81 18 dd    	sl.w      w3, w1, w1
    457a:	81 80 ea    	com.w     w1, w1
    457c:	81 00 61    	and.w     w2, w1, w1
    457e:	01 08 78    	mov.w     w1, [w0]

00004580 <.LSM102>:
}
    4580:	00 80 fa    	ulnk      
    4582:	00 00 06    	return    

00004584 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    4584:	08 00 fa    	lnk       #0x8
    4586:	00 0f 78    	mov.w     w0, [w14]
    4588:	12 07 98    	mov.w     w2, [w14+2]
    458a:	23 07 98    	mov.w     w3, [w14+4]
    458c:	31 07 98    	mov.w     w1, [w14+6]

0000458e <.LSM104>:
    timer_disableInterrupt(self);
    458e:	1e 00 78    	mov.w     [w14], w0
    4590:	e8 ff 07    	rcall     0x4562 <_timer_disableInterrupt>

00004592 <.LSM105>:
    timer_setPeriod(self, interval);
    4592:	1e 01 90    	mov.w     [w14+2], w2
    4594:	ae 01 90    	mov.w     [w14+4], w3
    4596:	1e 00 78    	mov.w     [w14], w0
    4598:	be fe 07    	rcall     0x4316 <_timer_setPeriod>

0000459a <.LSM106>:
    self->aftercount = 0;
    459a:	1e 00 78    	mov.w     [w14], w0
    459c:	80 00 eb    	clr.w     w1
    459e:	01 08 98    	mov.w     w1, [w0+16]

000045a0 <.LSM107>:
    self->every = callback;
    45a0:	1e 00 78    	mov.w     [w14], w0
    45a2:	be 00 90    	mov.w     [w14+6], w1
    45a4:	11 08 98    	mov.w     w1, [w0+18]

000045a6 <.LSM108>:
    self->after = NULL;
    45a6:	1e 00 78    	mov.w     [w14], w0
    45a8:	80 00 eb    	clr.w     w1
    45aa:	21 08 98    	mov.w     w1, [w0+20]

000045ac <.LSM109>:
    timer_enableInterrupt(self);
    45ac:	1e 00 78    	mov.w     [w14], w0
    45ae:	c9 ff 07    	rcall     0x4542 <_timer_enableInterrupt>

000045b0 <.LSM110>:
    timer_start(self);
    45b0:	1e 00 78    	mov.w     [w14], w0
    45b2:	80 ff 07    	rcall     0x44b4 <_timer_start>

000045b4 <.LSM111>:
}
    45b4:	00 80 fa    	ulnk      
    45b6:	00 00 06    	return    

000045b8 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    45b8:	0a 00 fa    	lnk       #0xa
    45ba:	00 0f 78    	mov.w     w0, [w14]
    45bc:	12 07 98    	mov.w     w2, [w14+2]
    45be:	23 07 98    	mov.w     w3, [w14+4]
    45c0:	31 07 98    	mov.w     w1, [w14+6]
    45c2:	44 07 98    	mov.w     w4, [w14+8]

000045c4 <.LSM113>:
    timer_disableInterrupt(self);
    45c4:	1e 00 78    	mov.w     [w14], w0
    45c6:	cd ff 07    	rcall     0x4562 <_timer_disableInterrupt>

000045c8 <.LSM114>:
    timer_setPeriod(self, delay);
    45c8:	1e 01 90    	mov.w     [w14+2], w2
    45ca:	ae 01 90    	mov.w     [w14+4], w3
    45cc:	1e 00 78    	mov.w     [w14], w0
    45ce:	a3 fe 07    	rcall     0x4316 <_timer_setPeriod>

000045d0 <.LSM115>:
    self->aftercount = num_times;
    45d0:	1e 00 78    	mov.w     [w14], w0
    45d2:	be 00 90    	mov.w     [w14+6], w1
    45d4:	01 08 98    	mov.w     w1, [w0+16]

000045d6 <.LSM116>:
    self->every = NULL;
    45d6:	1e 00 78    	mov.w     [w14], w0
    45d8:	80 00 eb    	clr.w     w1
    45da:	11 08 98    	mov.w     w1, [w0+18]

000045dc <.LSM117>:
    self->after = callback;
    45dc:	1e 00 78    	mov.w     [w14], w0
    45de:	ce 00 90    	mov.w     [w14+8], w1
    45e0:	21 08 98    	mov.w     w1, [w0+20]

000045e2 <.LSM118>:
    timer_enableInterrupt(self);
    45e2:	1e 00 78    	mov.w     [w14], w0
    45e4:	ae ff 07    	rcall     0x4542 <_timer_enableInterrupt>

000045e6 <.LSM119>:
    timer_start(self);
    45e6:	1e 00 78    	mov.w     [w14], w0
    45e8:	65 ff 07    	rcall     0x44b4 <_timer_start>

000045ea <.LSM120>:
}
    45ea:	00 80 fa    	ulnk      
    45ec:	00 00 06    	return    

000045ee <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    45ee:	02 00 fa    	lnk       #0x2
    45f0:	00 0f 78    	mov.w     w0, [w14]

000045f2 <.LSM122>:
    timer_disableInterrupt(self);
    45f2:	1e 00 78    	mov.w     [w14], w0
    45f4:	b6 ff 07    	rcall     0x4562 <_timer_disableInterrupt>

000045f6 <.LSM123>:
    timer_lower(self);
    45f6:	1e 00 78    	mov.w     [w14], w0
    45f8:	8c ff 07    	rcall     0x4512 <_timer_lower>

000045fa <.LSM124>:
    timer_stop(self);
    45fa:	1e 00 78    	mov.w     [w14], w0
    45fc:	6d ff 07    	rcall     0x44d8 <_timer_stop>

000045fe <.LSM125>:
    self->aftercount = 0;
    45fe:	1e 00 78    	mov.w     [w14], w0
    4600:	80 00 eb    	clr.w     w1
    4602:	01 08 98    	mov.w     w1, [w0+16]

00004604 <.LSM126>:
    self->every = NULL;
    4604:	1e 00 78    	mov.w     [w14], w0
    4606:	80 00 eb    	clr.w     w1
    4608:	11 08 98    	mov.w     w1, [w0+18]

0000460a <.LSM127>:
    self->after = NULL;
    460a:	1e 00 78    	mov.w     [w14], w0
    460c:	80 00 eb    	clr.w     w1
    460e:	21 08 98    	mov.w     w1, [w0+20]

00004610 <.LSM128>:
}
    4610:	00 80 fa    	ulnk      
    4612:	00 00 06    	return    

00004614 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    4614:	04 00 fa    	lnk       #0x4
    4616:	00 0f 78    	mov.w     w0, [w14]
    4618:	11 07 98    	mov.w     w1, [w14+2]

0000461a <.LSM1>:
    if (val)
    461a:	1e 00 90    	mov.w     [w14+2], w0
    461c:	00 00 e0    	cp0.w     w0
    461e:	0d 00 32    	bra       Z, 0x463a <.L2>

00004620 <.LSM2>:
        bitset(self->port, self->bit);
    4620:	1e 00 78    	mov.w     [w14], w0
    4622:	10 00 78    	mov.w     [w0], w0
    4624:	9e 00 78    	mov.w     [w14], w1
    4626:	91 00 78    	mov.w     [w1], w1
    4628:	11 01 78    	mov.w     [w1], w2
    462a:	9e 00 78    	mov.w     [w14], w1
    462c:	e1 40 90    	mov.b     [w1+6], w1
    462e:	81 80 fb    	ze        w1, w1
    4630:	13 00 20    	mov.w     #0x1, w3
    4632:	81 18 dd    	sl.w      w3, w1, w1
    4634:	82 80 70    	ior.w     w1, w2, w1
    4636:	01 08 78    	mov.w     w1, [w0]
    4638:	0d 00 37    	bra       0x4654 <.L1>

0000463a <.L2>:
    else
        bitclear(self->port, self->bit);
    463a:	1e 00 78    	mov.w     [w14], w0
    463c:	10 00 78    	mov.w     [w0], w0
    463e:	9e 00 78    	mov.w     [w14], w1
    4640:	91 00 78    	mov.w     [w1], w1
    4642:	11 01 78    	mov.w     [w1], w2
    4644:	9e 00 78    	mov.w     [w14], w1
    4646:	e1 40 90    	mov.b     [w1+6], w1
    4648:	81 80 fb    	ze        w1, w1
    464a:	13 00 20    	mov.w     #0x1, w3
    464c:	81 18 dd    	sl.w      w3, w1, w1
    464e:	81 80 ea    	com.w     w1, w1
    4650:	81 00 61    	and.w     w2, w1, w1
    4652:	01 08 78    	mov.w     w1, [w0]

00004654 <.L1>:
}
    4654:	00 80 fa    	ulnk      
    4656:	00 00 06    	return    

00004658 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    4658:	02 00 fa    	lnk       #0x2
    465a:	00 0f 78    	mov.w     w0, [w14]

0000465c <.LSM6>:
    return bitread(self->port, self->bit);
    465c:	1e 00 78    	mov.w     [w14], w0
    465e:	10 00 78    	mov.w     [w0], w0
    4660:	90 00 78    	mov.w     [w0], w1
    4662:	1e 00 78    	mov.w     [w14], w0
    4664:	60 40 90    	mov.b     [w0+6], w0
    4666:	00 80 fb    	ze        w0, w0
    4668:	12 00 20    	mov.w     #0x1, w2
    466a:	00 10 dd    	sl.w      w2, w0, w0
    466c:	00 80 60    	and.w     w1, w0, w0
    466e:	00 f0 a7    	btsc.w    w0, #0xf
    4670:	00 00 ea    	neg.w     w0, w0
    4672:	00 00 ea    	neg.w     w0, w0
    4674:	4f 00 de    	lsr.w     w0, #0xf, w0

00004676 <.LSM7>:
}
    4676:	00 80 fa    	ulnk      
    4678:	00 00 06    	return    

0000467a <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    467a:	02 00 fa    	lnk       #0x2
    467c:	00 0f 78    	mov.w     w0, [w14]

0000467e <.LSM9>:
    AD1CHS = self->annum;
    467e:	1e 00 78    	mov.w     [w14], w0
    4680:	40 00 90    	mov.w     [w0+8], w0
    4682:	40 19 88    	mov.w     w0, 0x328

00004684 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    4684:	20 23 a8    	bset.b    0x320, #0x1

00004686 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    4686:	00 00 00    	nop       

00004688 <.L6>:
    4688:	00 19 80    	mov.w     0x320, w0
    468a:	61 00 60    	and.w     w0, #0x1, w0
    468c:	00 00 e0    	cp0.w     w0
    468e:	fc ff 32    	bra       Z, 0x4688 <.L6>

00004690 <.LSM12>:
    return ADC1BUF0;
    4690:	00 18 80    	mov.w     0x300, w0

00004692 <.LSM13>:
}
    4692:	00 80 fa    	ulnk      
    4694:	00 00 06    	return    

00004696 <_init_pin>:

void init_pin(void) {
    4696:	02 00 fa    	lnk       #0x2

00004698 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4698:	40 6d 20    	mov.w     #0x6d4, w0
    469a:	80 1f 78    	mov.w     w0, [w15++]
    469c:	47 01 20    	mov.w     #0x14, w7
    469e:	00 43 eb    	clr.b     w6
    46a0:	80 82 eb    	setm.w    w5
    46a2:	54 c0 b3    	mov.b     #0x5, w4
    46a4:	80 01 eb    	clr.w     w3
    46a6:	82 2d 20    	mov.w     #0x2d8, w2
    46a8:	a1 2d 20    	mov.w     #0x2da, w1
    46aa:	00 a4 21    	mov.w     #0x1a40, w0
    46ac:	08 01 07    	rcall     0x48be <_pin_init>
    46ae:	8f 87 e9    	dec2.w    w15, w15

000046b0 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    46b0:	80 6d 20    	mov.w     #0x6d8, w0
    46b2:	80 1f 78    	mov.w     w0, [w15++]
    46b4:	97 01 20    	mov.w     #0x19, w7
    46b6:	86 c0 b3    	mov.b     #0x8, w6
    46b8:	80 82 eb    	setm.w    w5
    46ba:	44 c0 b3    	mov.b     #0x4, w4
    46bc:	80 01 eb    	clr.w     w3
    46be:	82 2d 20    	mov.w     #0x2d8, w2
    46c0:	a1 2d 20    	mov.w     #0x2da, w1
    46c2:	60 a5 21    	mov.w     #0x1a56, w0
    46c4:	fc 00 07    	rcall     0x48be <_pin_init>
    46c6:	8f 87 e9    	dec2.w    w15, w15

000046c8 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    46c8:	a0 6c 20    	mov.w     #0x6ca, w0
    46ca:	80 1f 78    	mov.w     w0, [w15++]
    46cc:	a7 00 20    	mov.w     #0xa, w7
    46ce:	00 43 eb    	clr.b     w6
    46d0:	80 82 eb    	setm.w    w5
    46d2:	44 c0 b3    	mov.b     #0x4, w4
    46d4:	80 01 eb    	clr.w     w3
    46d6:	82 2e 20    	mov.w     #0x2e8, w2
    46d8:	a1 2e 20    	mov.w     #0x2ea, w1
    46da:	c0 a6 21    	mov.w     #0x1a6c, w0
    46dc:	f0 00 07    	rcall     0x48be <_pin_init>
    46de:	8f 87 e9    	dec2.w    w15, w15

000046e0 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    46e0:	00 6d 20    	mov.w     #0x6d0, w0
    46e2:	80 1f 78    	mov.w     w0, [w15++]
    46e4:	17 01 20    	mov.w     #0x11, w7
    46e6:	86 c0 b3    	mov.b     #0x8, w6
    46e8:	80 82 eb    	setm.w    w5
    46ea:	54 c0 b3    	mov.b     #0x5, w4
    46ec:	80 01 eb    	clr.w     w3
    46ee:	82 2e 20    	mov.w     #0x2e8, w2
    46f0:	a1 2e 20    	mov.w     #0x2ea, w1
    46f2:	20 a8 21    	mov.w     #0x1a82, w0
    46f4:	e4 00 07    	rcall     0x48be <_pin_init>
    46f6:	8f 87 e9    	dec2.w    w15, w15

000046f8 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    46f8:	c0 6d 20    	mov.w     #0x6dc, w0
    46fa:	80 1f 78    	mov.w     w0, [w15++]
    46fc:	d7 01 20    	mov.w     #0x1d, w7
    46fe:	86 c0 b3    	mov.b     #0x8, w6
    4700:	f5 00 20    	mov.w     #0xf, w5
    4702:	f4 c0 b3    	mov.b     #0xf, w4
    4704:	23 4e 20    	mov.w     #0x4e2, w3
    4706:	82 2c 20    	mov.w     #0x2c8, w2
    4708:	a1 2c 20    	mov.w     #0x2ca, w1
    470a:	80 a9 21    	mov.w     #0x1a98, w0
    470c:	d8 00 07    	rcall     0x48be <_pin_init>
    470e:	8f 87 e9    	dec2.w    w15, w15

00004710 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4710:	00 6d 20    	mov.w     #0x6d0, w0
    4712:	80 1f 78    	mov.w     w0, [w15++]
    4714:	07 01 20    	mov.w     #0x10, w7
    4716:	00 43 eb    	clr.b     w6
    4718:	80 82 eb    	setm.w    w5
    471a:	34 c0 b3    	mov.b     #0x3, w4
    471c:	80 01 eb    	clr.w     w3
    471e:	82 2e 20    	mov.w     #0x2e8, w2
    4720:	a1 2e 20    	mov.w     #0x2ea, w1
    4722:	e0 aa 21    	mov.w     #0x1aae, w0
    4724:	cc 00 07    	rcall     0x48be <_pin_init>
    4726:	8f 87 e9    	dec2.w    w15, w15

00004728 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4728:	20 6c 20    	mov.w     #0x6c2, w0
    472a:	80 1f 78    	mov.w     w0, [w15++]
    472c:	27 00 20    	mov.w     #0x2, w7
    472e:	00 43 eb    	clr.b     w6
    4730:	80 82 eb    	setm.w    w5
    4732:	84 c0 b3    	mov.b     #0x8, w4
    4734:	80 01 eb    	clr.w     w3
    4736:	82 2d 20    	mov.w     #0x2d8, w2
    4738:	a1 2d 20    	mov.w     #0x2da, w1
    473a:	40 ac 21    	mov.w     #0x1ac4, w0
    473c:	c0 00 07    	rcall     0x48be <_pin_init>
    473e:	8f 87 e9    	dec2.w    w15, w15

00004740 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4740:	c0 6c 20    	mov.w     #0x6cc, w0
    4742:	80 1f 78    	mov.w     w0, [w15++]
    4744:	c7 00 20    	mov.w     #0xc, w7
    4746:	00 43 eb    	clr.b     w6
    4748:	80 82 eb    	setm.w    w5
    474a:	b4 c0 b3    	mov.b     #0xb, w4
    474c:	80 01 eb    	clr.w     w3
    474e:	82 2d 20    	mov.w     #0x2d8, w2
    4750:	a1 2d 20    	mov.w     #0x2da, w1
    4752:	a0 ad 21    	mov.w     #0x1ada, w0
    4754:	b4 00 07    	rcall     0x48be <_pin_init>
    4756:	8f 87 e9    	dec2.w    w15, w15

00004758 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4758:	40 6c 20    	mov.w     #0x6c4, w0
    475a:	80 1f 78    	mov.w     w0, [w15++]
    475c:	47 00 20    	mov.w     #0x4, w7
    475e:	00 43 eb    	clr.b     w6
    4760:	80 82 eb    	setm.w    w5
    4762:	94 c0 b3    	mov.b     #0x9, w4
    4764:	80 01 eb    	clr.w     w3
    4766:	82 2d 20    	mov.w     #0x2d8, w2
    4768:	a1 2d 20    	mov.w     #0x2da, w1
    476a:	00 af 21    	mov.w     #0x1af0, w0
    476c:	a8 00 07    	rcall     0x48be <_pin_init>
    476e:	8f 87 e9    	dec2.w    w15, w15

00004770 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4770:	20 6c 20    	mov.w     #0x6c2, w0
    4772:	80 1f 78    	mov.w     w0, [w15++]
    4774:	37 00 20    	mov.w     #0x3, w7
    4776:	86 c0 b3    	mov.b     #0x8, w6
    4778:	80 82 eb    	setm.w    w5
    477a:	a4 c0 b3    	mov.b     #0xa, w4
    477c:	80 01 eb    	clr.w     w3
    477e:	82 2d 20    	mov.w     #0x2d8, w2
    4780:	a1 2d 20    	mov.w     #0x2da, w1
    4782:	60 b0 21    	mov.w     #0x1b06, w0
    4784:	9c 00 07    	rcall     0x48be <_pin_init>
    4786:	8f 87 e9    	dec2.w    w15, w15

00004788 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4788:	a0 6c 20    	mov.w     #0x6ca, w0
    478a:	80 1f 78    	mov.w     w0, [w15++]
    478c:	b7 00 20    	mov.w     #0xb, w7
    478e:	86 c0 b3    	mov.b     #0x8, w6
    4790:	80 82 eb    	setm.w    w5
    4792:	00 42 eb    	clr.b     w4
    4794:	80 01 eb    	clr.w     w3
    4796:	82 2d 20    	mov.w     #0x2d8, w2
    4798:	a1 2d 20    	mov.w     #0x2da, w1
    479a:	c0 b1 21    	mov.w     #0x1b1c, w0
    479c:	90 00 07    	rcall     0x48be <_pin_init>
    479e:	8f 87 e9    	dec2.w    w15, w15

000047a0 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    47a0:	80 6d 20    	mov.w     #0x6d8, w0
    47a2:	80 1f 78    	mov.w     w0, [w15++]
    47a4:	87 01 20    	mov.w     #0x18, w7
    47a6:	00 43 eb    	clr.b     w6
    47a8:	80 82 eb    	setm.w    w5
    47aa:	14 c0 b3    	mov.b     #0x1, w4
    47ac:	80 01 eb    	clr.w     w3
    47ae:	82 2d 20    	mov.w     #0x2d8, w2
    47b0:	a1 2d 20    	mov.w     #0x2da, w1
    47b2:	20 b3 21    	mov.w     #0x1b32, w0
    47b4:	84 00 07    	rcall     0x48be <_pin_init>
    47b6:	8f 87 e9    	dec2.w    w15, w15

000047b8 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    47b8:	60 6d 20    	mov.w     #0x6d6, w0
    47ba:	80 1f 78    	mov.w     w0, [w15++]
    47bc:	77 01 20    	mov.w     #0x17, w7
    47be:	86 c0 b3    	mov.b     #0x8, w6
    47c0:	80 82 eb    	setm.w    w5
    47c2:	24 c0 b3    	mov.b     #0x2, w4
    47c4:	80 01 eb    	clr.w     w3
    47c6:	82 2d 20    	mov.w     #0x2d8, w2
    47c8:	a1 2d 20    	mov.w     #0x2da, w1
    47ca:	80 b4 21    	mov.w     #0x1b48, w0
    47cc:	78 00 07    	rcall     0x48be <_pin_init>
    47ce:	8f 87 e9    	dec2.w    w15, w15

000047d0 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    47d0:	60 6d 20    	mov.w     #0x6d6, w0
    47d2:	80 1f 78    	mov.w     w0, [w15++]
    47d4:	67 01 20    	mov.w     #0x16, w7
    47d6:	00 43 eb    	clr.b     w6
    47d8:	80 82 eb    	setm.w    w5
    47da:	34 c0 b3    	mov.b     #0x3, w4
    47dc:	80 01 eb    	clr.w     w3
    47de:	82 2d 20    	mov.w     #0x2d8, w2
    47e0:	a1 2d 20    	mov.w     #0x2da, w1
    47e2:	e0 b5 21    	mov.w     #0x1b5e, w0
    47e4:	6c 00 07    	rcall     0x48be <_pin_init>
    47e6:	8f 87 e9    	dec2.w    w15, w15

000047e8 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    47e8:	00 6c 20    	mov.w     #0x6c0, w0
    47ea:	80 1f 78    	mov.w     w0, [w15++]
    47ec:	80 03 eb    	clr.w     w7
    47ee:	00 43 eb    	clr.b     w6
    47f0:	80 02 eb    	clr.w     w5
    47f2:	00 42 eb    	clr.b     w4
    47f4:	23 4e 20    	mov.w     #0x4e2, w3
    47f6:	82 2c 20    	mov.w     #0x2c8, w2
    47f8:	a1 2c 20    	mov.w     #0x2ca, w1
    47fa:	20 be 21    	mov.w     #0x1be2, w0
    47fc:	60 00 07    	rcall     0x48be <_pin_init>
    47fe:	8f 87 e9    	dec2.w    w15, w15

00004800 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4800:	00 6c 20    	mov.w     #0x6c0, w0
    4802:	80 1f 78    	mov.w     w0, [w15++]
    4804:	17 00 20    	mov.w     #0x1, w7
    4806:	86 c0 b3    	mov.b     #0x8, w6
    4808:	15 00 20    	mov.w     #0x1, w5
    480a:	14 c0 b3    	mov.b     #0x1, w4
    480c:	23 4e 20    	mov.w     #0x4e2, w3
    480e:	82 2c 20    	mov.w     #0x2c8, w2
    4810:	a1 2c 20    	mov.w     #0x2ca, w1
    4812:	c0 bc 21    	mov.w     #0x1bcc, w0
    4814:	54 00 07    	rcall     0x48be <_pin_init>
    4816:	8f 87 e9    	dec2.w    w15, w15

00004818 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4818:	c0 6c 20    	mov.w     #0x6cc, w0
    481a:	80 1f 78    	mov.w     w0, [w15++]
    481c:	d7 00 20    	mov.w     #0xd, w7
    481e:	86 c0 b3    	mov.b     #0x8, w6
    4820:	25 00 20    	mov.w     #0x2, w5
    4822:	24 c0 b3    	mov.b     #0x2, w4
    4824:	23 4e 20    	mov.w     #0x4e2, w3
    4826:	82 2c 20    	mov.w     #0x2c8, w2
    4828:	a1 2c 20    	mov.w     #0x2ca, w1
    482a:	60 bb 21    	mov.w     #0x1bb6, w0
    482c:	48 00 07    	rcall     0x48be <_pin_init>
    482e:	8f 87 e9    	dec2.w    w15, w15

00004830 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4830:	00 00 eb    	clr.w     w0
    4832:	80 1f 78    	mov.w     w0, [w15++]
    4834:	80 83 eb    	setm.w    w7
    4836:	00 43 eb    	clr.b     w6
    4838:	35 00 20    	mov.w     #0x3, w5
    483a:	34 c0 b3    	mov.b     #0x3, w4
    483c:	23 4e 20    	mov.w     #0x4e2, w3
    483e:	82 2c 20    	mov.w     #0x2c8, w2
    4840:	a1 2c 20    	mov.w     #0x2ca, w1
    4842:	00 ba 21    	mov.w     #0x1ba0, w0
    4844:	3c 00 07    	rcall     0x48be <_pin_init>
    4846:	8f 87 e9    	dec2.w    w15, w15

00004848 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4848:	c0 6d 20    	mov.w     #0x6dc, w0
    484a:	80 1f 78    	mov.w     w0, [w15++]
    484c:	c7 01 20    	mov.w     #0x1c, w7
    484e:	00 43 eb    	clr.b     w6
    4850:	45 00 20    	mov.w     #0x4, w5
    4852:	44 c0 b3    	mov.b     #0x4, w4
    4854:	23 4e 20    	mov.w     #0x4e2, w3
    4856:	82 2c 20    	mov.w     #0x2c8, w2
    4858:	a1 2c 20    	mov.w     #0x2ca, w1
    485a:	a0 b8 21    	mov.w     #0x1b8a, w0
    485c:	30 00 07    	rcall     0x48be <_pin_init>
    485e:	8f 87 e9    	dec2.w    w15, w15

00004860 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4860:	20 6d 20    	mov.w     #0x6d2, w0
    4862:	80 1f 78    	mov.w     w0, [w15++]
    4864:	27 01 20    	mov.w     #0x12, w7
    4866:	00 43 eb    	clr.b     w6
    4868:	55 00 20    	mov.w     #0x5, w5
    486a:	54 c0 b3    	mov.b     #0x5, w4
    486c:	23 4e 20    	mov.w     #0x4e2, w3
    486e:	82 2c 20    	mov.w     #0x2c8, w2
    4870:	a1 2c 20    	mov.w     #0x2ca, w1
    4872:	40 b7 21    	mov.w     #0x1b74, w0
    4874:	24 00 07    	rcall     0x48be <_pin_init>
    4876:	8f 87 e9    	dec2.w    w15, w15

00004878 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    4878:	00 00 eb    	clr.w     w0
    487a:	00 0f 78    	mov.w     w0, [w14]
    487c:	07 00 37    	bra       0x488c <.L8>

0000487e <.L9>:
        pin_digitalIn(&D[i]);
    487e:	1e 00 78    	mov.w     [w14], w0
    4880:	76 00 b9    	mul.su    w0, #0x16, w0
    4882:	80 00 78    	mov.w     w0, w1
    4884:	00 a4 21    	mov.w     #0x1a40, w0
    4886:	00 80 40    	add.w     w1, w0, w0
    4888:	46 00 07    	rcall     0x4916 <_pin_digitalIn>

0000488a <.LSM37>:
    488a:	1e 0f e8    	inc.w     [w14], [w14]

0000488c <.L8>:
    488c:	1e 00 78    	mov.w     [w14], w0
    488e:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    4890:	f6 ff 36    	bra       LEU, 0x487e <.L9>

00004892 <.LSM38>:
    for (i = 0; i<6; i++)
    4892:	00 00 eb    	clr.w     w0
    4894:	00 0f 78    	mov.w     w0, [w14]
    4896:	07 00 37    	bra       0x48a6 <.L10>

00004898 <.L11>:
        pin_analogIn(&A[i]);
    4898:	1e 00 78    	mov.w     [w14], w0
    489a:	76 00 b9    	mul.su    w0, #0x16, w0
    489c:	80 00 78    	mov.w     w0, w1
    489e:	40 b7 21    	mov.w     #0x1b74, w0
    48a0:	00 80 40    	add.w     w1, w0, w0
    48a2:	95 00 07    	rcall     0x49ce <_pin_analogIn>

000048a4 <.LSM40>:
    48a4:	1e 0f e8    	inc.w     [w14], [w14]

000048a6 <.L10>:
    48a6:	1e 00 78    	mov.w     [w14], w0
    48a8:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    48aa:	f6 ff 36    	bra       LEU, 0x4898 <.L11>

000048ac <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    48ac:	00 2e 20    	mov.w     #0x2e0, w0
    48ae:	00 19 88    	mov.w     w0, 0x320

000048b0 <.LSM42>:
    AD1CON2 = 0;
    48b0:	22 23 ef    	clr.w     0x322

000048b2 <.LSM43>:
    AD1CON3 = 0x0C40;
    48b2:	00 c4 20    	mov.w     #0xc40, w0
    48b4:	20 19 88    	mov.w     w0, 0x324

000048b6 <.LSM44>:
    AD1CHS = 0;
    48b6:	28 23 ef    	clr.w     0x328

000048b8 <.LSM45>:
    AD1CON1bits.ADON = 1;
    48b8:	21 e3 a8    	bset.b    0x321, #0x7

000048ba <.LSM46>:
}
    48ba:	00 80 fa    	ulnk      
    48bc:	00 00 06    	return    

000048be <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    48be:	10 00 fa    	lnk       #0x10
    48c0:	00 0f 78    	mov.w     w0, [w14]
    48c2:	11 07 98    	mov.w     w1, [w14+2]
    48c4:	22 07 98    	mov.w     w2, [w14+4]
    48c6:	33 07 98    	mov.w     w3, [w14+6]
    48c8:	04 4f 98    	mov.b     w4, [w14+8]
    48ca:	55 07 98    	mov.w     w5, [w14+10]
    48cc:	46 4f 98    	mov.b     w6, [w14+12]
    48ce:	77 07 98    	mov.w     w7, [w14+14]

000048d0 <.LSM48>:
    self->port = port;
    48d0:	1e 00 78    	mov.w     [w14], w0
    48d2:	9e 00 90    	mov.w     [w14+2], w1
    48d4:	01 08 78    	mov.w     w1, [w0]

000048d6 <.LSM49>:
    self->tris = tris;
    48d6:	1e 00 78    	mov.w     [w14], w0
    48d8:	ae 00 90    	mov.w     [w14+4], w1
    48da:	11 00 98    	mov.w     w1, [w0+2]

000048dc <.LSM50>:
    self->ans = ans;
    48dc:	1e 00 78    	mov.w     [w14], w0
    48de:	be 00 90    	mov.w     [w14+6], w1
    48e0:	21 00 98    	mov.w     w1, [w0+4]

000048e2 <.LSM51>:
    self->bit = bit;
    48e2:	1e 00 78    	mov.w     [w14], w0
    48e4:	8e 48 90    	mov.b     [w14+8], w1
    48e6:	61 40 98    	mov.b     w1, [w0+6]

000048e8 <.LSM52>:
    self->annum = annum;
    48e8:	1e 00 78    	mov.w     [w14], w0
    48ea:	de 00 90    	mov.w     [w14+10], w1
    48ec:	41 00 98    	mov.w     w1, [w0+8]

000048ee <.LSM53>:
    self->rpshift = rpshift;
    48ee:	1e 00 78    	mov.w     [w14], w0
    48f0:	ce 48 90    	mov.b     [w14+12], w1
    48f2:	21 48 98    	mov.b     w1, [w0+10]

000048f4 <.LSM54>:
    self->rpnum = rpnum;
    48f4:	fe 00 90    	mov.w     [w14+14], w1
    48f6:	1e 00 78    	mov.w     [w14], w0
    48f8:	61 00 98    	mov.w     w1, [w0+12]

000048fa <.LSM55>:
    self->rpor = rpor;
    48fa:	1e 00 78    	mov.w     [w14], w0
    48fc:	ce b8 97    	mov.w     [w14-8], w1
    48fe:	71 00 98    	mov.w     w1, [w0+14]

00004900 <.LSM56>:
    self->owner = NULL;
    4900:	1e 00 78    	mov.w     [w14], w0
    4902:	80 00 eb    	clr.w     w1
    4904:	01 08 98    	mov.w     w1, [w0+16]

00004906 <.LSM57>:
    self->write = NULL;
    4906:	1e 00 78    	mov.w     [w14], w0
    4908:	80 00 eb    	clr.w     w1
    490a:	11 08 98    	mov.w     w1, [w0+18]

0000490c <.LSM58>:
    self->read = NULL;
    490c:	1e 00 78    	mov.w     [w14], w0
    490e:	80 00 eb    	clr.w     w1
    4910:	21 08 98    	mov.w     w1, [w0+20]

00004912 <.LSM59>:
}
    4912:	00 80 fa    	ulnk      
    4914:	00 00 06    	return    

00004916 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    4916:	02 00 fa    	lnk       #0x2
    4918:	00 0f 78    	mov.w     w0, [w14]

0000491a <.LSM61>:
    if (self->ans)
    491a:	1e 00 78    	mov.w     [w14], w0
    491c:	20 00 90    	mov.w     [w0+4], w0
    491e:	00 00 e0    	cp0.w     w0
    4920:	0d 00 32    	bra       Z, 0x493c <.L14>

00004922 <.LSM62>:
        bitclear(self->ans, self->bit);
    4922:	1e 00 78    	mov.w     [w14], w0
    4924:	20 00 90    	mov.w     [w0+4], w0
    4926:	9e 00 78    	mov.w     [w14], w1
    4928:	a1 00 90    	mov.w     [w1+4], w1
    492a:	11 01 78    	mov.w     [w1], w2
    492c:	9e 00 78    	mov.w     [w14], w1
    492e:	e1 40 90    	mov.b     [w1+6], w1
    4930:	81 80 fb    	ze        w1, w1
    4932:	13 00 20    	mov.w     #0x1, w3
    4934:	81 18 dd    	sl.w      w3, w1, w1
    4936:	81 80 ea    	com.w     w1, w1
    4938:	81 00 61    	and.w     w2, w1, w1
    493a:	01 08 78    	mov.w     w1, [w0]

0000493c <.L14>:
    bitset(self->tris, self->bit);
    493c:	1e 00 78    	mov.w     [w14], w0
    493e:	10 00 90    	mov.w     [w0+2], w0
    4940:	9e 00 78    	mov.w     [w14], w1
    4942:	91 00 90    	mov.w     [w1+2], w1
    4944:	11 01 78    	mov.w     [w1], w2
    4946:	9e 00 78    	mov.w     [w14], w1
    4948:	e1 40 90    	mov.b     [w1+6], w1
    494a:	81 80 fb    	ze        w1, w1
    494c:	13 00 20    	mov.w     #0x1, w3
    494e:	81 18 dd    	sl.w      w3, w1, w1
    4950:	82 80 70    	ior.w     w1, w2, w1
    4952:	01 08 78    	mov.w     w1, [w0]

00004954 <.LSM64>:
    self->write = NULL;
    4954:	1e 00 78    	mov.w     [w14], w0
    4956:	80 00 eb    	clr.w     w1
    4958:	11 08 98    	mov.w     w1, [w0+18]

0000495a <.LSM65>:
    self->read = __digitalRead;    
    495a:	1e 00 78    	mov.w     [w14], w0
    495c:	81 65 24    	mov.w     #0x4658, w1
    495e:	21 08 98    	mov.w     w1, [w0+20]

00004960 <.LSM66>:
}
    4960:	00 80 fa    	ulnk      
    4962:	00 00 06    	return    

00004964 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    4964:	02 00 fa    	lnk       #0x2
    4966:	00 0f 78    	mov.w     w0, [w14]

00004968 <.LSM68>:
    if (self->ans)
    4968:	1e 00 78    	mov.w     [w14], w0
    496a:	20 00 90    	mov.w     [w0+4], w0
    496c:	00 00 e0    	cp0.w     w0
    496e:	0d 00 32    	bra       Z, 0x498a <.L16>

00004970 <.LSM69>:
        bitclear(self->ans, self->bit);
    4970:	1e 00 78    	mov.w     [w14], w0
    4972:	20 00 90    	mov.w     [w0+4], w0
    4974:	9e 00 78    	mov.w     [w14], w1
    4976:	a1 00 90    	mov.w     [w1+4], w1
    4978:	11 01 78    	mov.w     [w1], w2
    497a:	9e 00 78    	mov.w     [w14], w1
    497c:	e1 40 90    	mov.b     [w1+6], w1
    497e:	81 80 fb    	ze        w1, w1
    4980:	13 00 20    	mov.w     #0x1, w3
    4982:	81 18 dd    	sl.w      w3, w1, w1
    4984:	81 80 ea    	com.w     w1, w1
    4986:	81 00 61    	and.w     w2, w1, w1
    4988:	01 08 78    	mov.w     w1, [w0]

0000498a <.L16>:
    bitclear(self->port, self->bit);
    498a:	1e 00 78    	mov.w     [w14], w0
    498c:	10 00 78    	mov.w     [w0], w0
    498e:	9e 00 78    	mov.w     [w14], w1
    4990:	91 00 78    	mov.w     [w1], w1
    4992:	11 01 78    	mov.w     [w1], w2
    4994:	9e 00 78    	mov.w     [w14], w1
    4996:	e1 40 90    	mov.b     [w1+6], w1
    4998:	81 80 fb    	ze        w1, w1
    499a:	13 00 20    	mov.w     #0x1, w3
    499c:	81 18 dd    	sl.w      w3, w1, w1
    499e:	81 80 ea    	com.w     w1, w1
    49a0:	81 00 61    	and.w     w2, w1, w1
    49a2:	01 08 78    	mov.w     w1, [w0]

000049a4 <.LSM71>:
    bitclear(self->tris, self->bit);
    49a4:	1e 00 78    	mov.w     [w14], w0
    49a6:	10 00 90    	mov.w     [w0+2], w0
    49a8:	9e 00 78    	mov.w     [w14], w1
    49aa:	91 00 90    	mov.w     [w1+2], w1
    49ac:	11 01 78    	mov.w     [w1], w2
    49ae:	9e 00 78    	mov.w     [w14], w1
    49b0:	e1 40 90    	mov.b     [w1+6], w1
    49b2:	81 80 fb    	ze        w1, w1
    49b4:	13 00 20    	mov.w     #0x1, w3
    49b6:	81 18 dd    	sl.w      w3, w1, w1
    49b8:	81 80 ea    	com.w     w1, w1
    49ba:	81 00 61    	and.w     w2, w1, w1
    49bc:	01 08 78    	mov.w     w1, [w0]

000049be <.LSM72>:
    self->write = __digitalWrite;
    49be:	1e 00 78    	mov.w     [w14], w0
    49c0:	41 61 24    	mov.w     #0x4614, w1
    49c2:	11 08 98    	mov.w     w1, [w0+18]

000049c4 <.LSM73>:
    self->read = __digitalRead;
    49c4:	1e 00 78    	mov.w     [w14], w0
    49c6:	81 65 24    	mov.w     #0x4658, w1
    49c8:	21 08 98    	mov.w     w1, [w0+20]

000049ca <.LSM74>:
}
    49ca:	00 80 fa    	ulnk      
    49cc:	00 00 06    	return    

000049ce <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    49ce:	02 00 fa    	lnk       #0x2
    49d0:	00 0f 78    	mov.w     w0, [w14]

000049d2 <.LSM76>:
    if (!(self->ans))
    49d2:	1e 00 78    	mov.w     [w14], w0
    49d4:	20 00 90    	mov.w     [w0+4], w0
    49d6:	00 00 e0    	cp0.w     w0
    49d8:	1f 00 32    	bra       Z, 0x4a18 <.L20>

000049da <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    49da:	1e 00 78    	mov.w     [w14], w0
    49dc:	10 00 90    	mov.w     [w0+2], w0
    49de:	9e 00 78    	mov.w     [w14], w1
    49e0:	91 00 90    	mov.w     [w1+2], w1
    49e2:	11 01 78    	mov.w     [w1], w2
    49e4:	9e 00 78    	mov.w     [w14], w1
    49e6:	e1 40 90    	mov.b     [w1+6], w1
    49e8:	81 80 fb    	ze        w1, w1
    49ea:	13 00 20    	mov.w     #0x1, w3
    49ec:	81 18 dd    	sl.w      w3, w1, w1
    49ee:	82 80 70    	ior.w     w1, w2, w1
    49f0:	01 08 78    	mov.w     w1, [w0]

000049f2 <.LSM78>:
    bitset(self->ans, self->bit);
    49f2:	1e 00 78    	mov.w     [w14], w0
    49f4:	20 00 90    	mov.w     [w0+4], w0
    49f6:	9e 00 78    	mov.w     [w14], w1
    49f8:	a1 00 90    	mov.w     [w1+4], w1
    49fa:	11 01 78    	mov.w     [w1], w2
    49fc:	9e 00 78    	mov.w     [w14], w1
    49fe:	e1 40 90    	mov.b     [w1+6], w1
    4a00:	81 80 fb    	ze        w1, w1
    4a02:	13 00 20    	mov.w     #0x1, w3
    4a04:	81 18 dd    	sl.w      w3, w1, w1
    4a06:	82 80 70    	ior.w     w1, w2, w1
    4a08:	01 08 78    	mov.w     w1, [w0]

00004a0a <.LSM79>:
    self->write = NULL;
    4a0a:	1e 00 78    	mov.w     [w14], w0
    4a0c:	80 00 eb    	clr.w     w1
    4a0e:	11 08 98    	mov.w     w1, [w0+18]

00004a10 <.LSM80>:
    self->read = __analogRead;
    4a10:	1e 00 78    	mov.w     [w14], w0
    4a12:	a1 67 24    	mov.w     #0x467a, w1
    4a14:	21 08 98    	mov.w     w1, [w0+20]
    4a16:	01 00 37    	bra       0x4a1a <.L17>

00004a18 <.L20>:
    4a18:	00 00 00    	nop       

00004a1a <.L17>:
}
    4a1a:	00 80 fa    	ulnk      
    4a1c:	00 00 06    	return    

00004a1e <_pin_set>:

void pin_set(_PIN *self) {
    4a1e:	02 00 fa    	lnk       #0x2
    4a20:	00 0f 78    	mov.w     w0, [w14]

00004a22 <.LSM84>:
    if (self->write==__digitalWrite)
    4a22:	1e 00 78    	mov.w     [w14], w0
    4a24:	90 08 90    	mov.w     [w0+18], w1
    4a26:	40 61 24    	mov.w     #0x4614, w0
    4a28:	80 8f 50    	sub.w     w1, w0, [w15]
    4a2a:	0c 00 3a    	bra       NZ, 0x4a44 <.L21>

00004a2c <.LSM85>:
        bitset(self->port, self->bit);
    4a2c:	1e 00 78    	mov.w     [w14], w0
    4a2e:	10 00 78    	mov.w     [w0], w0
    4a30:	9e 00 78    	mov.w     [w14], w1
    4a32:	91 00 78    	mov.w     [w1], w1
    4a34:	11 01 78    	mov.w     [w1], w2
    4a36:	9e 00 78    	mov.w     [w14], w1
    4a38:	e1 40 90    	mov.b     [w1+6], w1
    4a3a:	81 80 fb    	ze        w1, w1
    4a3c:	13 00 20    	mov.w     #0x1, w3
    4a3e:	81 18 dd    	sl.w      w3, w1, w1
    4a40:	82 80 70    	ior.w     w1, w2, w1
    4a42:	01 08 78    	mov.w     w1, [w0]

00004a44 <.L21>:
}
    4a44:	00 80 fa    	ulnk      
    4a46:	00 00 06    	return    

00004a48 <_pin_clear>:

void pin_clear(_PIN *self) {
    4a48:	02 00 fa    	lnk       #0x2
    4a4a:	00 0f 78    	mov.w     w0, [w14]

00004a4c <.LSM88>:
    if (self->write==__digitalWrite)
    4a4c:	1e 00 78    	mov.w     [w14], w0
    4a4e:	90 08 90    	mov.w     [w0+18], w1
    4a50:	40 61 24    	mov.w     #0x4614, w0
    4a52:	80 8f 50    	sub.w     w1, w0, [w15]
    4a54:	0d 00 3a    	bra       NZ, 0x4a70 <.L23>

00004a56 <.LSM89>:
        bitclear(self->port, self->bit);
    4a56:	1e 00 78    	mov.w     [w14], w0
    4a58:	10 00 78    	mov.w     [w0], w0
    4a5a:	9e 00 78    	mov.w     [w14], w1
    4a5c:	91 00 78    	mov.w     [w1], w1
    4a5e:	11 01 78    	mov.w     [w1], w2
    4a60:	9e 00 78    	mov.w     [w14], w1
    4a62:	e1 40 90    	mov.b     [w1+6], w1
    4a64:	81 80 fb    	ze        w1, w1
    4a66:	13 00 20    	mov.w     #0x1, w3
    4a68:	81 18 dd    	sl.w      w3, w1, w1
    4a6a:	81 80 ea    	com.w     w1, w1
    4a6c:	81 00 61    	and.w     w2, w1, w1
    4a6e:	01 08 78    	mov.w     w1, [w0]

00004a70 <.L23>:
}
    4a70:	00 80 fa    	ulnk      
    4a72:	00 00 06    	return    

00004a74 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    4a74:	02 00 fa    	lnk       #0x2
    4a76:	00 0f 78    	mov.w     w0, [w14]

00004a78 <.LSM92>:
    if (self->write==__digitalWrite)
    4a78:	1e 00 78    	mov.w     [w14], w0
    4a7a:	90 08 90    	mov.w     [w0+18], w1
    4a7c:	40 61 24    	mov.w     #0x4614, w0
    4a7e:	80 8f 50    	sub.w     w1, w0, [w15]
    4a80:	0c 00 3a    	bra       NZ, 0x4a9a <.L25>

00004a82 <.LSM93>:
        bitflip(self->port, self->bit);
    4a82:	1e 00 78    	mov.w     [w14], w0
    4a84:	10 00 78    	mov.w     [w0], w0
    4a86:	9e 00 78    	mov.w     [w14], w1
    4a88:	91 00 78    	mov.w     [w1], w1
    4a8a:	11 01 78    	mov.w     [w1], w2
    4a8c:	9e 00 78    	mov.w     [w14], w1
    4a8e:	e1 40 90    	mov.b     [w1+6], w1
    4a90:	81 80 fb    	ze        w1, w1
    4a92:	13 00 20    	mov.w     #0x1, w3
    4a94:	81 18 dd    	sl.w      w3, w1, w1
    4a96:	81 00 69    	xor.w     w2, w1, w1
    4a98:	01 08 78    	mov.w     w1, [w0]

00004a9a <.L25>:
}
    4a9a:	00 80 fa    	ulnk      
    4a9c:	00 00 06    	return    

00004a9e <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    4a9e:	04 00 fa    	lnk       #0x4
    4aa0:	00 0f 78    	mov.w     w0, [w14]
    4aa2:	11 07 98    	mov.w     w1, [w14+2]

00004aa4 <.LSM96>:
    if (self->write)
    4aa4:	1e 00 78    	mov.w     [w14], w0
    4aa6:	10 08 90    	mov.w     [w0+18], w0
    4aa8:	00 00 e0    	cp0.w     w0
    4aaa:	05 00 32    	bra       Z, 0x4ab6 <.L27>

00004aac <.LSM97>:
        self->write(self, val);
    4aac:	1e 00 78    	mov.w     [w14], w0
    4aae:	10 09 90    	mov.w     [w0+18], w2
    4ab0:	9e 00 90    	mov.w     [w14+2], w1
    4ab2:	1e 00 78    	mov.w     [w14], w0
    4ab4:	02 00 01    	call      w2

00004ab6 <.L27>:
}
    4ab6:	00 80 fa    	ulnk      
    4ab8:	00 00 06    	return    

00004aba <_pin_read>:

uint16_t pin_read(_PIN *self) {
    4aba:	02 00 fa    	lnk       #0x2
    4abc:	00 0f 78    	mov.w     w0, [w14]

00004abe <.LSM100>:
    if (self->read)
    4abe:	1e 00 78    	mov.w     [w14], w0
    4ac0:	20 08 90    	mov.w     [w0+20], w0
    4ac2:	00 00 e0    	cp0.w     w0
    4ac4:	05 00 32    	bra       Z, 0x4ad0 <.L30>

00004ac6 <.LSM101>:
        return self->read(self);
    4ac6:	1e 00 78    	mov.w     [w14], w0
    4ac8:	a0 08 90    	mov.w     [w0+20], w1
    4aca:	1e 00 78    	mov.w     [w14], w0
    4acc:	01 00 01    	call      w1
    4ace:	01 00 37    	bra       0x4ad2 <.L31>

00004ad0 <.L30>:
    else
        return 0xFFFF;
    4ad0:	00 80 eb    	setm.w    w0

00004ad2 <.L31>:
}
    4ad2:	00 80 fa    	ulnk      
    4ad4:	00 00 06    	return    

00004ad6 <_VendorRequests>:
uint16_t rocket_state;
uint16_t rocket_speed, rocket_tilt;
uint8_t rec_msg[64], tx_msg[64];

void VendorRequests(void) {
    4ad6:	02 00 fa    	lnk       #0x2

00004ad8 <.LSM1>:
    WORD temp;
    switch (USB_setup.bRequest) {
    4ad8:	40 83 20    	mov.w     #0x834, w0
    4ada:	10 40 90    	mov.b     [w0+1], w0
    4adc:	00 80 fb    	ze        w0, w0
    4ade:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4ae0:	0b 00 32    	bra       Z, 0x4af8 <.L4>
    4ae2:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4ae4:	4b 00 32    	bra       Z, 0x4b7c <.L5>
    4ae6:	00 00 e0    	cp0.w     w0
    4ae8:	6d 00 3a    	bra       NZ, 0x4bc4 <.L7>

00004aea <.LSM2>:
        case SET_STATE:
            // state = USB_setup.wValue.w;
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    4aea:	40 e0 21    	mov.w     #0x1e04, w0
    4aec:	80 40 eb    	clr.b     w1
    4aee:	01 48 78    	mov.b     w1, [w0]

00004af0 <.LSM3>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4af0:	50 e0 21    	mov.w     #0x1e05, w0
    4af2:	81 cc b3    	mov.b     #0xc8, w1
    4af4:	01 48 78    	mov.b     w1, [w0]

00004af6 <.LSM4>:
            break;
    4af6:	69 00 37    	bra       0x4bca <.L1>

00004af8 <.L4>:
        case GET_VALS:
            temp.w = rocket_tilt;
    4af8:	30 42 80    	mov.w     0x846, w0
    4afa:	00 0f 78    	mov.w     w0, [w14]

00004afc <.LSM6>:
            BD[EP0IN].address[0] = temp.b[0];
    4afc:	30 f0 80    	mov.w     0x1e06, w0
    4afe:	9e 40 78    	mov.b     [w14], w1
    4b00:	01 48 78    	mov.b     w1, [w0]

00004b02 <.LSM7>:
            BD[EP0IN].address[1] = temp.b[1];
    4b02:	30 f0 80    	mov.w     0x1e06, w0
    4b04:	00 00 e8    	inc.w     w0, w0
    4b06:	9e 40 90    	mov.b     [w14+1], w1
    4b08:	01 48 78    	mov.b     w1, [w0]

00004b0a <.LSM8>:
            temp.w = uart1.TXbuffer.tail;
    4b0a:	a0 43 80    	mov.w     0x874, w0
    4b0c:	00 0f 78    	mov.w     w0, [w14]

00004b0e <.LSM9>:
            BD[EP0IN].address[2] = temp.b[0];
    4b0e:	30 f0 80    	mov.w     0x1e06, w0
    4b10:	00 80 e8    	inc2.w    w0, w0
    4b12:	9e 40 78    	mov.b     [w14], w1
    4b14:	01 48 78    	mov.b     w1, [w0]

00004b16 <.LSM10>:
            BD[EP0IN].address[3] = temp.b[1];
    4b16:	30 f0 80    	mov.w     0x1e06, w0
    4b18:	63 00 40    	add.w     w0, #0x3, w0
    4b1a:	9e 40 90    	mov.b     [w14+1], w1
    4b1c:	01 48 78    	mov.b     w1, [w0]

00004b1e <.LSM11>:
            temp.w = uart1.TXbuffer.count;
    4b1e:	b0 43 80    	mov.w     0x876, w0
    4b20:	00 0f 78    	mov.w     w0, [w14]

00004b22 <.LSM12>:
            BD[EP0IN].address[4] = temp.b[0];
    4b22:	30 f0 80    	mov.w     0x1e06, w0
    4b24:	64 00 40    	add.w     w0, #0x4, w0
    4b26:	9e 40 78    	mov.b     [w14], w1
    4b28:	01 48 78    	mov.b     w1, [w0]

00004b2a <.LSM13>:
            BD[EP0IN].address[5] = temp.b[1];
    4b2a:	30 f0 80    	mov.w     0x1e06, w0
    4b2c:	65 00 40    	add.w     w0, #0x5, w0
    4b2e:	9e 40 90    	mov.b     [w14+1], w1
    4b30:	01 48 78    	mov.b     w1, [w0]

00004b32 <.LSM14>:

            temp.w = uart1.RXbuffer.head;
    4b32:	e0 43 80    	mov.w     0x87c, w0
    4b34:	00 0f 78    	mov.w     w0, [w14]

00004b36 <.LSM15>:
            BD[EP0IN].address[6] = temp.b[0];
    4b36:	30 f0 80    	mov.w     0x1e06, w0
    4b38:	66 00 40    	add.w     w0, #0x6, w0
    4b3a:	9e 40 78    	mov.b     [w14], w1
    4b3c:	01 48 78    	mov.b     w1, [w0]

00004b3e <.LSM16>:
            BD[EP0IN].address[7] = temp.b[1];
    4b3e:	30 f0 80    	mov.w     0x1e06, w0
    4b40:	67 00 40    	add.w     w0, #0x7, w0
    4b42:	9e 40 90    	mov.b     [w14+1], w1
    4b44:	01 48 78    	mov.b     w1, [w0]

00004b46 <.LSM17>:
            temp.w = uart1.RXbuffer.tail;
    4b46:	f0 43 80    	mov.w     0x87e, w0
    4b48:	00 0f 78    	mov.w     w0, [w14]

00004b4a <.LSM18>:
            BD[EP0IN].address[8] = temp.b[0];
    4b4a:	30 f0 80    	mov.w     0x1e06, w0
    4b4c:	68 00 40    	add.w     w0, #0x8, w0
    4b4e:	9e 40 78    	mov.b     [w14], w1
    4b50:	01 48 78    	mov.b     w1, [w0]

00004b52 <.LSM19>:
            BD[EP0IN].address[9] = temp.b[1];
    4b52:	30 f0 80    	mov.w     0x1e06, w0
    4b54:	69 00 40    	add.w     w0, #0x9, w0
    4b56:	9e 40 90    	mov.b     [w14+1], w1
    4b58:	01 48 78    	mov.b     w1, [w0]

00004b5a <.LSM20>:
            temp.w = uart1.RXbuffer.count;
    4b5a:	00 44 80    	mov.w     0x880, w0
    4b5c:	00 0f 78    	mov.w     w0, [w14]

00004b5e <.LSM21>:
            BD[EP0IN].address[10] = temp.b[0];
    4b5e:	30 f0 80    	mov.w     0x1e06, w0
    4b60:	6a 00 40    	add.w     w0, #0xa, w0
    4b62:	9e 40 78    	mov.b     [w14], w1
    4b64:	01 48 78    	mov.b     w1, [w0]

00004b66 <.LSM22>:
            BD[EP0IN].address[11] = temp.b[1];
    4b66:	30 f0 80    	mov.w     0x1e06, w0
    4b68:	6b 00 40    	add.w     w0, #0xb, w0
    4b6a:	9e 40 90    	mov.b     [w14+1], w1
    4b6c:	01 48 78    	mov.b     w1, [w0]

00004b6e <.LSM23>:
            BD[EP0IN].bytecount = 12;    // set EP0 IN byte count to 4
    4b6e:	40 e0 21    	mov.w     #0x1e04, w0
    4b70:	c1 c0 b3    	mov.b     #0xc, w1
    4b72:	01 48 78    	mov.b     w1, [w0]

00004b74 <.LSM24>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4b74:	50 e0 21    	mov.w     #0x1e05, w0
    4b76:	81 cc b3    	mov.b     #0xc8, w1
    4b78:	01 48 78    	mov.b     w1, [w0]

00004b7a <.LSM25>:
            break;
    4b7a:	27 00 37    	bra       0x4bca <.L1>

00004b7c <.L5>:

        case GET_ROCKET_INFO:
            temp.w = rocket_tilt;
    4b7c:	30 42 80    	mov.w     0x846, w0
    4b7e:	00 0f 78    	mov.w     w0, [w14]

00004b80 <.LSM27>:
            BD[EP0IN].address[0] = temp.b[0];
    4b80:	30 f0 80    	mov.w     0x1e06, w0
    4b82:	9e 40 78    	mov.b     [w14], w1
    4b84:	01 48 78    	mov.b     w1, [w0]

00004b86 <.LSM28>:
            BD[EP0IN].address[1] = temp.b[1];
    4b86:	30 f0 80    	mov.w     0x1e06, w0
    4b88:	00 00 e8    	inc.w     w0, w0
    4b8a:	9e 40 90    	mov.b     [w14+1], w1
    4b8c:	01 48 78    	mov.b     w1, [w0]

00004b8e <.LSM29>:
            temp.w = rocket_speed;
    4b8e:	20 42 80    	mov.w     0x844, w0
    4b90:	00 0f 78    	mov.w     w0, [w14]

00004b92 <.LSM30>:
            BD[EP0IN].address[2] = temp.b[0];
    4b92:	30 f0 80    	mov.w     0x1e06, w0
    4b94:	00 80 e8    	inc2.w    w0, w0
    4b96:	9e 40 78    	mov.b     [w14], w1
    4b98:	01 48 78    	mov.b     w1, [w0]

00004b9a <.LSM31>:
            BD[EP0IN].address[3] = temp.b[1];
    4b9a:	30 f0 80    	mov.w     0x1e06, w0
    4b9c:	63 00 40    	add.w     w0, #0x3, w0
    4b9e:	9e 40 90    	mov.b     [w14+1], w1
    4ba0:	01 48 78    	mov.b     w1, [w0]

00004ba2 <.LSM32>:
            temp.w = rocket_state;
    4ba2:	10 42 80    	mov.w     0x842, w0
    4ba4:	00 0f 78    	mov.w     w0, [w14]

00004ba6 <.LSM33>:
            BD[EP0IN].address[4] = temp.b[0];
    4ba6:	30 f0 80    	mov.w     0x1e06, w0
    4ba8:	64 00 40    	add.w     w0, #0x4, w0
    4baa:	9e 40 78    	mov.b     [w14], w1
    4bac:	01 48 78    	mov.b     w1, [w0]

00004bae <.LSM34>:
            BD[EP0IN].address[5] = temp.b[1];
    4bae:	30 f0 80    	mov.w     0x1e06, w0
    4bb0:	65 00 40    	add.w     w0, #0x5, w0
    4bb2:	9e 40 90    	mov.b     [w14+1], w1
    4bb4:	01 48 78    	mov.b     w1, [w0]

00004bb6 <.LSM35>:
            BD[EP0IN].bytecount = 6;    // set EP0 IN byte count to 4
    4bb6:	40 e0 21    	mov.w     #0x1e04, w0
    4bb8:	61 c0 b3    	mov.b     #0x6, w1
    4bba:	01 48 78    	mov.b     w1, [w0]

00004bbc <.LSM36>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4bbc:	50 e0 21    	mov.w     #0x1e05, w0
    4bbe:	81 cc b3    	mov.b     #0xc8, w1
    4bc0:	01 48 78    	mov.b     w1, [w0]

00004bc2 <.LSM37>:
            break;            
    4bc2:	03 00 37    	bra       0x4bca <.L1>

00004bc4 <.L7>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    4bc4:	3c c8 bf    	mov.b     0x83c, WREG
    4bc6:	00 04 a0    	bset.b    w0, #0x0
    4bc8:	3c e8 b7    	mov.b     WREG, 0x83c

00004bca <.L1>:
    }
}
    4bca:	00 80 fa    	ulnk      
    4bcc:	00 00 06    	return    

00004bce <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    4bce:	00 00 fa    	lnk       #0x0

00004bd0 <.LSM41>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4bd0:	3c c8 bf    	mov.b     0x83c, WREG
    4bd2:	00 04 a0    	bset.b    w0, #0x0
    4bd4:	3c e8 b7    	mov.b     WREG, 0x83c

00004bd6 <.LSM42>:
    }
}
    4bd6:	00 80 fa    	ulnk      
    4bd8:	00 00 06    	return    

00004bda <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    4bda:	00 00 fa    	lnk       #0x0

00004bdc <.LSM44>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4bdc:	3c c8 bf    	mov.b     0x83c, WREG
    4bde:	00 04 a0    	bset.b    w0, #0x0
    4be0:	3c e8 b7    	mov.b     WREG, 0x83c

00004be2 <.LSM45>:
    }
}
    4be2:	00 80 fa    	ulnk      
    4be4:	00 00 06    	return    

00004be6 <_UART_ctl>:

void UART_ctl(uint8_t cmd, uint8_t value){
    4be6:	06 00 fa    	lnk       #0x6
    4be8:	40 47 98    	mov.b     w0, [w14+4]
    4bea:	51 47 98    	mov.b     w1, [w14+5]

00004bec <.LSM47>:
    sprintf(tx_msg, "%01x%01x\r", value, cmd); //value could be state or command
    4bec:	4e 40 90    	mov.b     [w14+4], w0
    4bee:	00 81 fb    	ze        w0, w2
    4bf0:	5e 40 90    	mov.b     [w14+5], w0
    4bf2:	80 80 fb    	ze        w0, w1
    4bf4:	00 a0 21    	mov.w     #0x1a00, w0
    4bf6:	82 1f 78    	mov.w     w2, [w15++]
    4bf8:	81 1f 78    	mov.w     w1, [w15++]
    4bfa:	61 9a 2a    	mov.w     #0xa9a6, w1
    4bfc:	81 1f 78    	mov.w     w1, [w15++]
    4bfe:	cb e5 07    	rcall     0x1796 <__sprintf_cdnopuxX>
    4c00:	e6 87 57    	sub.w     w15, #0x6, w15

00004c02 <.LSM48>:
    uart_puts(&uart1, tx_msg);
    4c02:	01 a0 21    	mov.w     #0x1a00, w1
    4c04:	c0 84 20    	mov.w     #0x84c, w0
    4c06:	56 f5 07    	rcall     0x36b4 <_uart_puts>

00004c08 <.LSM49>:
    if (cmd == GET_ROCKET_VALS){
    4c08:	4e 40 90    	mov.b     [w14+4], w0
    4c0a:	00 04 e0    	cp0.b     w0
    4c0c:	29 00 3a    	bra       NZ, 0x4c60 <.L10>

00004c0e <.LBB2>:
        // led_toggle(&led2);
        uart_gets(&uart1, rec_msg, 128);
    4c0e:	02 08 20    	mov.w     #0x80, w2
    4c10:	01 9c 21    	mov.w     #0x19c0, w1
    4c12:	c0 84 20    	mov.w     #0x84c, w0
    4c14:	f4 f5 07    	rcall     0x37fe <_uart_gets>

00004c16 <.LSM51>:
        led_toggle(&led3);
    4c16:	00 81 20    	mov.w     #0x810, w0
    4c18:	07 01 07    	rcall     0x4e28 <_led_toggle>

00004c1a <.LSM52>:
        uint32_t decoded_msg = (uint32_t)strtol(rec_msg, NULL, 16);
    4c1a:	00 9c 21    	mov.w     #0x19c0, w0
    4c1c:	02 01 20    	mov.w     #0x10, w2
    4c1e:	80 00 eb    	clr.w     w1
    4c20:	bb e4 07    	rcall     0x1598 <_strtol>
    4c22:	00 8f be    	mov.d     w0, [w14]

00004c24 <.LSM53>:
        printf("RM: %s \n\r", rec_msg);
    4c24:	00 9c 21    	mov.w     #0x19c0, w0
    4c26:	80 1f 78    	mov.w     w0, [w15++]
    4c28:	00 9b 2a    	mov.w     #0xa9b0, w0
    4c2a:	80 1f 78    	mov.w     w0, [w15++]
    4c2c:	8b e7 07    	rcall     0x1b44 <__printf_cdnopsuxX>
    4c2e:	e4 87 57    	sub.w     w15, #0x4, w15

00004c30 <.LSM54>:
        printf("DM: %d \n\r", decoded_msg);
    4c30:	1e 00 be    	mov.d     [w14], w0
    4c32:	80 9f be    	mov.d     w0, [w15++]
    4c34:	a0 9b 2a    	mov.w     #0xa9ba, w0
    4c36:	80 1f 78    	mov.w     w0, [w15++]
    4c38:	85 e7 07    	rcall     0x1b44 <__printf_cdnopsuxX>
    4c3a:	e6 87 57    	sub.w     w15, #0x6, w15

00004c3c <.LSM55>:
        rocket_speed = (uint16_t)((decoded_msg & 0xffff00000000) >> 32);
    4c3c:	1e 02 be    	mov.d     [w14], w4
    4c3e:	60 33 b8    	mul.uu    w6, #0x0, w6
    4c40:	60 00 b8    	mul.uu    w0, #0x0, w0
    4c42:	f2 ff 2f    	mov.w     #0xffff, w2
    4c44:	03 00 20    	mov.w     #0x0, w3
    4c46:	00 00 62    	and.w     w4, w0, w0
    4c48:	81 80 62    	and.w     w5, w1, w1
    4c4a:	02 01 63    	and.w     w6, w2, w2
    4c4c:	83 81 63    	and.w     w7, w3, w3
    4c4e:	02 00 78    	mov.w     w2, w0
    4c50:	00 00 78    	mov.w     w0, w0
    4c52:	20 42 88    	mov.w     w0, 0x844

00004c54 <.LSM56>:
        rocket_tilt = (uint16_t)((decoded_msg & 0x0000ffff0000) >> 16);
    4c54:	1e 00 be    	mov.d     [w14], w0
    4c56:	40 08 de    	lsr.w     w1, #0x0, w0
    4c58:	00 00 78    	mov.w     w0, w0
    4c5a:	30 42 88    	mov.w     w0, 0x846

00004c5c <.LSM57>:
        // rocket_state = (uint16_t)(decoded_msg & 0x00000000ffff);
        rocket_state = decoded_msg;
    4c5c:	1e 00 78    	mov.w     [w14], w0
    4c5e:	10 42 88    	mov.w     w0, 0x842

00004c60 <.L10>:
    }
}
    4c60:	00 80 fa    	ulnk      
    4c62:	00 00 06    	return    

00004c64 <_setup_uart>:

void setup_uart() {
    4c64:	00 00 fa    	lnk       #0x0

00004c66 <.LSM60>:
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           // 0, TXBUF, 1024, RXBUF, 1024);

    // uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
    //            float baudrate, int8_t parity, int16_t stopbits, 
    //            uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
    //            uint8_t *RXbuffer, uint16_t RXbufferlen)

    // uart_open(&uart2, &D[0], &D[1], NULL, NULL, 115200., 'N', 1, 
    //           0, RC_TXBUF, 1024, RC_RXBUF, 1024);
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           0, TXBUF, 1024, RXBUF, 1024);

    // pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    // pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);
    
    uart_open(&uart1, &D[1], &D[0], NULL, NULL, 19200., 'N', 1, 
    4c66:	00 40 20    	mov.w     #0x400, w0
    4c68:	80 1f 78    	mov.w     w0, [w15++]
    4c6a:	00 5c 21    	mov.w     #0x15c0, w0
    4c6c:	80 1f 78    	mov.w     w0, [w15++]
    4c6e:	00 40 20    	mov.w     #0x400, w0
    4c70:	80 1f 78    	mov.w     w0, [w15++]
    4c72:	00 1c 21    	mov.w     #0x11c0, w0
    4c74:	80 1f 78    	mov.w     w0, [w15++]
    4c76:	00 00 eb    	clr.w     w0
    4c78:	80 1f 78    	mov.w     w0, [w15++]
    4c7a:	10 00 20    	mov.w     #0x1, w0
    4c7c:	80 1f 78    	mov.w     w0, [w15++]
    4c7e:	e5 c4 b3    	mov.b     #0x4e, w5
    4c80:	06 00 20    	mov.w     #0x0, w6
    4c82:	67 69 24    	mov.w     #0x4696, w7
    4c84:	00 02 eb    	clr.w     w4
    4c86:	80 01 eb    	clr.w     w3
    4c88:	02 a4 21    	mov.w     #0x1a40, w2
    4c8a:	61 a5 21    	mov.w     #0x1a56, w1
    4c8c:	c0 84 20    	mov.w     #0x84c, w0
    4c8e:	bb f1 07    	rcall     0x3006 <_uart_open>
    4c90:	ec 87 57    	sub.w     w15, #0xc, w15

00004c92 <.LSM61>:
              0, RC_TXBUF, 1024, RC_RXBUF, 1024);
}
    4c92:	00 80 fa    	ulnk      
    4c94:	00 00 06    	return    

00004c96 <_setup>:

void setup() {
    4c96:	00 00 fa    	lnk       #0x0

00004c98 <.LSM63>:
    timer_setPeriod(&timer1, 1);  // Timer for LED operation/status blink
    4c98:	02 00 20    	mov.w     #0x0, w2
    4c9a:	03 f8 23    	mov.w     #0x3f80, w3
    4c9c:	c0 d0 21    	mov.w     #0x1d0c, w0
    4c9e:	3b fb 07    	rcall     0x4316 <_timer_setPeriod>

00004ca0 <.LSM64>:
    timer_setPeriod(&timer2, 0.5); 
    4ca0:	02 00 20    	mov.w     #0x0, w2
    4ca2:	03 f0 23    	mov.w     #0x3f00, w3
    4ca4:	20 d2 21    	mov.w     #0x1d22, w0
    4ca6:	37 fb 07    	rcall     0x4316 <_timer_setPeriod>

00004ca8 <.LSM65>:
    timer_start(&timer1);
    4ca8:	c0 d0 21    	mov.w     #0x1d0c, w0
    4caa:	04 fc 07    	rcall     0x44b4 <_timer_start>

00004cac <.LSM66>:
    timer_start(&timer2);
    4cac:	20 d2 21    	mov.w     #0x1d22, w0
    4cae:	02 fc 07    	rcall     0x44b4 <_timer_start>

00004cb0 <.LSM67>:

    setup_uart();
    4cb0:	d9 ff 07    	rcall     0x4c64 <_setup_uart>

00004cb2 <.LSM68>:
    rocket_tilt, rocket_speed = 50;
    4cb2:	20 03 20    	mov.w     #0x32, w0
    4cb4:	20 42 88    	mov.w     w0, 0x844

00004cb6 <.LSM69>:
}
    4cb6:	00 80 fa    	ulnk      
    4cb8:	00 00 06    	return    

00004cba <_main>:

int16_t main(void) {
    4cba:	42 00 fa    	lnk       #0x42

00004cbc <.LSM71>:
    // printf("Starting Master Controller...\r\n");
    init_clock();
    4cbc:	00 10 20    	mov.w     #0x100, w0
    4cbe:	20 3a 88    	mov.w     w0, 0x744

00004cc0 <.LSM72>:
    init_ui();
    4cc0:	30 00 07    	rcall     0x4d22 <_init_ui>

00004cc2 <.LSM73>:
    init_timer();
    4cc2:	be fa 07    	rcall     0x4240 <_init_timer>

00004cc4 <.LSM74>:
    init_uart();
    4cc4:	67 f0 07    	rcall     0x2d94 <_init_uart>

00004cc6 <.LSM75>:
    setup();
    4cc6:	e7 ff 07    	rcall     0x4c96 <_setup>

00004cc8 <.LSM76>:
    uint16_t counter = 0;
    4cc8:	00 00 eb    	clr.w     w0
    4cca:	00 0f 78    	mov.w     w0, [w14]

00004ccc <.LSM77>:
    uint8_t status_msg [64];
    led_off(&led2);
    4ccc:	80 80 20    	mov.w     #0x808, w0
    4cce:	9b 00 07    	rcall     0x4e06 <_led_off>

00004cd0 <.LSM78>:
    led_off(&led3);
    4cd0:	00 81 20    	mov.w     #0x810, w0
    4cd2:	99 00 07    	rcall     0x4e06 <_led_off>

00004cd4 <.LSM79>:

    InitUSB();
    4cd4:	cf f5 07    	rcall     0x3874 <_InitUSB>

00004cd6 <.LSM80>:
    U1IE = 0xFF; //setting up ISR for USB requests
    4cd6:	f0 0f 20    	mov.w     #0xff, w0
    4cd8:	60 24 88    	mov.w     w0, 0x48c

00004cda <.LSM81>:
    U1EIE = 0xFF;
    4cda:	f0 0f 20    	mov.w     #0xff, w0
    4cdc:	80 24 88    	mov.w     w0, 0x490

00004cde <.LSM82>:
    IFS5bits.USB1IF = 0; //flag
    4cde:	8e c0 a9    	bclr.b    0x8e, #0x6

00004ce0 <.LSM83>:
    IEC5bits.USB1IE = 1; //enable
    4ce0:	9e c0 a8    	bset.b    0x9e, #0x6
    4ce2:	01 00 37    	bra       0x4ce6 <.L18>

00004ce4 <.L19>:

    while (1) {
        if (timer_flag(&timer1)) {
            // Blink green light to show normal operation.
            timer_lower(&timer1);
            led_toggle(&led1);
            printf("BLINK\n\r");
        }
        if (timer_flag(&timer2)) {
            // Transmit UART data
            timer_lower(&timer2);
            // counter ++;
            // sprintf(status_msg, "This is message #%d.\r", counter);
            // uint8_t addr = counter % 4;
            // uint8_t cmd = 28;
            // sprintf(status_msg, "%02x%02x\r", cmd, addr);
            // uart_puts(&uart1, status_msg);
            // UART_ctl(SEND_ROCKET_COMMANDS, 0b11);
            // UART_ctl(SET_ROCKET_STATE, IDLE);
            UART_ctl(GET_ROCKET_VALS,0b0);
            
            // if (rocket_state == 15) {
            //     led_on(&led1);
            // }

            // else{
            //     led_off(&led1);
            // }

            // if(rocket_speed ==15){
            //     led_on(&led2);
            // }

            // else{
            //     led_off(&led2);
            // }

             if(rocket_tilt==15){
                led_on(&led2);
            }

            else{
                led_off(&led2);
            }
       
       
        }   
    }
    4ce4:	00 00 00    	nop       

00004ce6 <.L18>:
    4ce6:	c0 d0 21    	mov.w     #0x1d0c, w0
    4ce8:	03 fc 07    	rcall     0x44f0 <_timer_flag>
    4cea:	00 00 e0    	cp0.w     w0
    4cec:	08 00 32    	bra       Z, 0x4cfe <.L15>

00004cee <.LSM86>:
    4cee:	c0 d0 21    	mov.w     #0x1d0c, w0
    4cf0:	10 fc 07    	rcall     0x4512 <_timer_lower>

00004cf2 <.LSM87>:
    4cf2:	00 80 20    	mov.w     #0x800, w0
    4cf4:	99 00 07    	rcall     0x4e28 <_led_toggle>

00004cf6 <.LSM88>:
    4cf6:	40 9c 2a    	mov.w     #0xa9c4, w0
    4cf8:	80 1f 78    	mov.w     w0, [w15++]
    4cfa:	24 e7 07    	rcall     0x1b44 <__printf_cdnopsuxX>
    4cfc:	8f 87 e9    	dec2.w    w15, w15

00004cfe <.L15>:
    4cfe:	20 d2 21    	mov.w     #0x1d22, w0
    4d00:	f7 fb 07    	rcall     0x44f0 <_timer_flag>
    4d02:	00 00 e0    	cp0.w     w0
    4d04:	ef ff 32    	bra       Z, 0x4ce4 <.L19>

00004d06 <.LSM90>:
    4d06:	20 d2 21    	mov.w     #0x1d22, w0
    4d08:	04 fc 07    	rcall     0x4512 <_timer_lower>

00004d0a <.LSM91>:
    4d0a:	80 40 eb    	clr.b     w1
    4d0c:	00 40 eb    	clr.b     w0
    4d0e:	6b ff 07    	rcall     0x4be6 <_UART_ctl>

00004d10 <.LSM92>:
    4d10:	30 42 80    	mov.w     0x846, w0
    4d12:	ef 0f 50    	sub.w     w0, #0xf, [w15]
    4d14:	03 00 3a    	bra       NZ, 0x4d1c <.L17>

00004d16 <.LSM93>:
    4d16:	80 80 20    	mov.w     #0x808, w0
    4d18:	66 00 07    	rcall     0x4de6 <_led_on>

00004d1a <.LSM94>:
    4d1a:	e5 ff 37    	bra       0x4ce6 <.L18>

00004d1c <.L17>:
    4d1c:	80 80 20    	mov.w     #0x808, w0
    4d1e:	73 00 07    	rcall     0x4e06 <_led_off>

00004d20 <.LSM96>:
    4d20:	e2 ff 37    	bra       0x4ce6 <.L18>

00004d22 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    4d22:	00 00 fa    	lnk       #0x0

00004d24 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4d24:	74 c0 b3    	mov.b     #0x7, w4
    4d26:	63 4e 20    	mov.w     #0x4e6, w3
    4d28:	82 2d 20    	mov.w     #0x2d8, w2
    4d2a:	a1 2d 20    	mov.w     #0x2da, w1
    4d2c:	00 80 20    	mov.w     #0x800, w0
    4d2e:	20 00 07    	rcall     0x4d70 <_led_init>

00004d30 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4d30:	00 42 eb    	clr.b     w4
    4d32:	a3 4e 20    	mov.w     #0x4ea, w3
    4d34:	82 2e 20    	mov.w     #0x2e8, w2
    4d36:	a1 2e 20    	mov.w     #0x2ea, w1
    4d38:	80 80 20    	mov.w     #0x808, w0
    4d3a:	1a 00 07    	rcall     0x4d70 <_led_init>

00004d3c <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4d3c:	14 c0 b3    	mov.b     #0x1, w4
    4d3e:	a3 4e 20    	mov.w     #0x4ea, w3
    4d40:	82 2e 20    	mov.w     #0x2e8, w2
    4d42:	a1 2e 20    	mov.w     #0x2ea, w1
    4d44:	00 81 20    	mov.w     #0x810, w0
    4d46:	14 00 07    	rcall     0x4d70 <_led_init>

00004d48 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    4d48:	f4 c0 b3    	mov.b     #0xf, w4
    4d4a:	43 4e 20    	mov.w     #0x4e4, w3
    4d4c:	02 2d 20    	mov.w     #0x2d0, w2
    4d4e:	21 2d 20    	mov.w     #0x2d2, w1
    4d50:	80 81 20    	mov.w     #0x818, w0
    4d52:	ad 00 07    	rcall     0x4eae <_sw_init>

00004d54 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    4d54:	c4 c0 b3    	mov.b     #0xc, w4
    4d56:	43 4e 20    	mov.w     #0x4e4, w3
    4d58:	02 2d 20    	mov.w     #0x2d0, w2
    4d5a:	21 2d 20    	mov.w     #0x2d2, w1
    4d5c:	00 82 20    	mov.w     #0x820, w0
    4d5e:	a7 00 07    	rcall     0x4eae <_sw_init>

00004d60 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4d60:	c4 c0 b3    	mov.b     #0xc, w4
    4d62:	23 4e 20    	mov.w     #0x4e2, w3
    4d64:	82 2c 20    	mov.w     #0x2c8, w2
    4d66:	a1 2c 20    	mov.w     #0x2ca, w1
    4d68:	80 82 20    	mov.w     #0x828, w0
    4d6a:	a1 00 07    	rcall     0x4eae <_sw_init>

00004d6c <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    4d6c:	00 80 fa    	ulnk      
    4d6e:	00 00 06    	return    

00004d70 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    4d70:	0a 00 fa    	lnk       #0xa
    4d72:	00 0f 78    	mov.w     w0, [w14]
    4d74:	11 07 98    	mov.w     w1, [w14+2]
    4d76:	22 07 98    	mov.w     w2, [w14+4]
    4d78:	33 07 98    	mov.w     w3, [w14+6]
    4d7a:	04 4f 98    	mov.b     w4, [w14+8]

00004d7c <.LSM9>:
    self->port = port;
    4d7c:	1e 00 78    	mov.w     [w14], w0
    4d7e:	9e 00 90    	mov.w     [w14+2], w1
    4d80:	01 08 78    	mov.w     w1, [w0]

00004d82 <.LSM10>:
    self->tris = tris;
    4d82:	1e 00 78    	mov.w     [w14], w0
    4d84:	ae 00 90    	mov.w     [w14+4], w1
    4d86:	11 00 98    	mov.w     w1, [w0+2]

00004d88 <.LSM11>:
    self->ans = ans;
    4d88:	1e 00 78    	mov.w     [w14], w0
    4d8a:	be 00 90    	mov.w     [w14+6], w1
    4d8c:	21 00 98    	mov.w     w1, [w0+4]

00004d8e <.LSM12>:
    self->bit = bit;
    4d8e:	1e 00 78    	mov.w     [w14], w0
    4d90:	8e 48 90    	mov.b     [w14+8], w1
    4d92:	61 40 98    	mov.b     w1, [w0+6]

00004d94 <.LSM13>:

    bitclear(self->ans, self->bit);
    4d94:	1e 00 78    	mov.w     [w14], w0
    4d96:	20 00 90    	mov.w     [w0+4], w0
    4d98:	9e 00 78    	mov.w     [w14], w1
    4d9a:	a1 00 90    	mov.w     [w1+4], w1
    4d9c:	11 01 78    	mov.w     [w1], w2
    4d9e:	9e 00 78    	mov.w     [w14], w1
    4da0:	e1 40 90    	mov.b     [w1+6], w1
    4da2:	81 80 fb    	ze        w1, w1
    4da4:	13 00 20    	mov.w     #0x1, w3
    4da6:	81 18 dd    	sl.w      w3, w1, w1
    4da8:	81 80 ea    	com.w     w1, w1
    4daa:	81 00 61    	and.w     w2, w1, w1
    4dac:	01 08 78    	mov.w     w1, [w0]

00004dae <.LSM14>:
    bitclear(self->port, self->bit);
    4dae:	1e 00 78    	mov.w     [w14], w0
    4db0:	10 00 78    	mov.w     [w0], w0
    4db2:	9e 00 78    	mov.w     [w14], w1
    4db4:	91 00 78    	mov.w     [w1], w1
    4db6:	11 01 78    	mov.w     [w1], w2
    4db8:	9e 00 78    	mov.w     [w14], w1
    4dba:	e1 40 90    	mov.b     [w1+6], w1
    4dbc:	81 80 fb    	ze        w1, w1
    4dbe:	13 00 20    	mov.w     #0x1, w3
    4dc0:	81 18 dd    	sl.w      w3, w1, w1
    4dc2:	81 80 ea    	com.w     w1, w1
    4dc4:	81 00 61    	and.w     w2, w1, w1
    4dc6:	01 08 78    	mov.w     w1, [w0]

00004dc8 <.LSM15>:
    bitclear(self->tris, self->bit);
    4dc8:	1e 00 78    	mov.w     [w14], w0
    4dca:	10 00 90    	mov.w     [w0+2], w0
    4dcc:	9e 00 78    	mov.w     [w14], w1
    4dce:	91 00 90    	mov.w     [w1+2], w1
    4dd0:	11 01 78    	mov.w     [w1], w2
    4dd2:	9e 00 78    	mov.w     [w14], w1
    4dd4:	e1 40 90    	mov.b     [w1+6], w1
    4dd6:	81 80 fb    	ze        w1, w1
    4dd8:	13 00 20    	mov.w     #0x1, w3
    4dda:	81 18 dd    	sl.w      w3, w1, w1
    4ddc:	81 80 ea    	com.w     w1, w1
    4dde:	81 00 61    	and.w     w2, w1, w1
    4de0:	01 08 78    	mov.w     w1, [w0]

00004de2 <.LSM16>:
}
    4de2:	00 80 fa    	ulnk      
    4de4:	00 00 06    	return    

00004de6 <_led_on>:

void led_on(_LED *self) {
    4de6:	02 00 fa    	lnk       #0x2
    4de8:	00 0f 78    	mov.w     w0, [w14]

00004dea <.LSM18>:
    bitset(self->port, self->bit);
    4dea:	1e 00 78    	mov.w     [w14], w0
    4dec:	10 00 78    	mov.w     [w0], w0
    4dee:	9e 00 78    	mov.w     [w14], w1
    4df0:	91 00 78    	mov.w     [w1], w1
    4df2:	11 01 78    	mov.w     [w1], w2
    4df4:	9e 00 78    	mov.w     [w14], w1
    4df6:	e1 40 90    	mov.b     [w1+6], w1
    4df8:	81 80 fb    	ze        w1, w1
    4dfa:	13 00 20    	mov.w     #0x1, w3
    4dfc:	81 18 dd    	sl.w      w3, w1, w1
    4dfe:	82 80 70    	ior.w     w1, w2, w1
    4e00:	01 08 78    	mov.w     w1, [w0]

00004e02 <.LSM19>:
}
    4e02:	00 80 fa    	ulnk      
    4e04:	00 00 06    	return    

00004e06 <_led_off>:

void led_off(_LED *self) {
    4e06:	02 00 fa    	lnk       #0x2
    4e08:	00 0f 78    	mov.w     w0, [w14]

00004e0a <.LSM21>:
    bitclear(self->port, self->bit);
    4e0a:	1e 00 78    	mov.w     [w14], w0
    4e0c:	10 00 78    	mov.w     [w0], w0
    4e0e:	9e 00 78    	mov.w     [w14], w1
    4e10:	91 00 78    	mov.w     [w1], w1
    4e12:	11 01 78    	mov.w     [w1], w2
    4e14:	9e 00 78    	mov.w     [w14], w1
    4e16:	e1 40 90    	mov.b     [w1+6], w1
    4e18:	81 80 fb    	ze        w1, w1
    4e1a:	13 00 20    	mov.w     #0x1, w3
    4e1c:	81 18 dd    	sl.w      w3, w1, w1
    4e1e:	81 80 ea    	com.w     w1, w1
    4e20:	81 00 61    	and.w     w2, w1, w1
    4e22:	01 08 78    	mov.w     w1, [w0]

00004e24 <.LSM22>:
}
    4e24:	00 80 fa    	ulnk      
    4e26:	00 00 06    	return    

00004e28 <_led_toggle>:

void led_toggle(_LED *self) {
    4e28:	02 00 fa    	lnk       #0x2
    4e2a:	00 0f 78    	mov.w     w0, [w14]

00004e2c <.LSM24>:
    bitflip(self->port, self->bit);
    4e2c:	1e 00 78    	mov.w     [w14], w0
    4e2e:	10 00 78    	mov.w     [w0], w0
    4e30:	9e 00 78    	mov.w     [w14], w1
    4e32:	91 00 78    	mov.w     [w1], w1
    4e34:	11 01 78    	mov.w     [w1], w2
    4e36:	9e 00 78    	mov.w     [w14], w1
    4e38:	e1 40 90    	mov.b     [w1+6], w1
    4e3a:	81 80 fb    	ze        w1, w1
    4e3c:	13 00 20    	mov.w     #0x1, w3
    4e3e:	81 18 dd    	sl.w      w3, w1, w1
    4e40:	81 00 69    	xor.w     w2, w1, w1
    4e42:	01 08 78    	mov.w     w1, [w0]

00004e44 <.LSM25>:
}
    4e44:	00 80 fa    	ulnk      
    4e46:	00 00 06    	return    

00004e48 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    4e48:	04 00 fa    	lnk       #0x4
    4e4a:	00 0f 78    	mov.w     w0, [w14]
    4e4c:	11 07 98    	mov.w     w1, [w14+2]

00004e4e <.LSM27>:
    if (val)
    4e4e:	1e 00 90    	mov.w     [w14+2], w0
    4e50:	00 00 e0    	cp0.w     w0
    4e52:	0d 00 32    	bra       Z, 0x4e6e <.L7>

00004e54 <.LSM28>:
        bitset(self->port, self->bit);
    4e54:	1e 00 78    	mov.w     [w14], w0
    4e56:	10 00 78    	mov.w     [w0], w0
    4e58:	9e 00 78    	mov.w     [w14], w1
    4e5a:	91 00 78    	mov.w     [w1], w1
    4e5c:	11 01 78    	mov.w     [w1], w2
    4e5e:	9e 00 78    	mov.w     [w14], w1
    4e60:	e1 40 90    	mov.b     [w1+6], w1
    4e62:	81 80 fb    	ze        w1, w1
    4e64:	13 00 20    	mov.w     #0x1, w3
    4e66:	81 18 dd    	sl.w      w3, w1, w1
    4e68:	82 80 70    	ior.w     w1, w2, w1
    4e6a:	01 08 78    	mov.w     w1, [w0]
    4e6c:	0d 00 37    	bra       0x4e88 <.L6>

00004e6e <.L7>:
    else
        bitclear(self->port, self->bit);
    4e6e:	1e 00 78    	mov.w     [w14], w0
    4e70:	10 00 78    	mov.w     [w0], w0
    4e72:	9e 00 78    	mov.w     [w14], w1
    4e74:	91 00 78    	mov.w     [w1], w1
    4e76:	11 01 78    	mov.w     [w1], w2
    4e78:	9e 00 78    	mov.w     [w14], w1
    4e7a:	e1 40 90    	mov.b     [w1+6], w1
    4e7c:	81 80 fb    	ze        w1, w1
    4e7e:	13 00 20    	mov.w     #0x1, w3
    4e80:	81 18 dd    	sl.w      w3, w1, w1
    4e82:	81 80 ea    	com.w     w1, w1
    4e84:	81 00 61    	and.w     w2, w1, w1
    4e86:	01 08 78    	mov.w     w1, [w0]

00004e88 <.L6>:
}
    4e88:	00 80 fa    	ulnk      
    4e8a:	00 00 06    	return    

00004e8c <_led_read>:

uint16_t led_read(_LED *self) {
    4e8c:	02 00 fa    	lnk       #0x2
    4e8e:	00 0f 78    	mov.w     w0, [w14]

00004e90 <.LSM32>:
    return bitread(self->port, self->bit);
    4e90:	1e 00 78    	mov.w     [w14], w0
    4e92:	10 00 78    	mov.w     [w0], w0
    4e94:	90 00 78    	mov.w     [w0], w1
    4e96:	1e 00 78    	mov.w     [w14], w0
    4e98:	60 40 90    	mov.b     [w0+6], w0
    4e9a:	00 80 fb    	ze        w0, w0
    4e9c:	12 00 20    	mov.w     #0x1, w2
    4e9e:	00 10 dd    	sl.w      w2, w0, w0
    4ea0:	00 80 60    	and.w     w1, w0, w0
    4ea2:	00 f0 a7    	btsc.w    w0, #0xf
    4ea4:	00 00 ea    	neg.w     w0, w0
    4ea6:	00 00 ea    	neg.w     w0, w0
    4ea8:	4f 00 de    	lsr.w     w0, #0xf, w0

00004eaa <.LSM33>:
}
    4eaa:	00 80 fa    	ulnk      
    4eac:	00 00 06    	return    

00004eae <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    4eae:	0a 00 fa    	lnk       #0xa
    4eb0:	00 0f 78    	mov.w     w0, [w14]
    4eb2:	11 07 98    	mov.w     w1, [w14+2]
    4eb4:	22 07 98    	mov.w     w2, [w14+4]
    4eb6:	33 07 98    	mov.w     w3, [w14+6]
    4eb8:	04 4f 98    	mov.b     w4, [w14+8]

00004eba <.LSM35>:
    self->port = port;
    4eba:	1e 00 78    	mov.w     [w14], w0
    4ebc:	9e 00 90    	mov.w     [w14+2], w1
    4ebe:	01 08 78    	mov.w     w1, [w0]

00004ec0 <.LSM36>:
    self->tris = tris;
    4ec0:	1e 00 78    	mov.w     [w14], w0
    4ec2:	ae 00 90    	mov.w     [w14+4], w1
    4ec4:	11 00 98    	mov.w     w1, [w0+2]

00004ec6 <.LSM37>:
    self->ans = ans;
    4ec6:	1e 00 78    	mov.w     [w14], w0
    4ec8:	be 00 90    	mov.w     [w14+6], w1
    4eca:	21 00 98    	mov.w     w1, [w0+4]

00004ecc <.LSM38>:
    self->bit = bit;
    4ecc:	1e 00 78    	mov.w     [w14], w0
    4ece:	8e 48 90    	mov.b     [w14+8], w1
    4ed0:	61 40 98    	mov.b     w1, [w0+6]

00004ed2 <.LSM39>:

    bitclear(self->ans, self->bit);
    4ed2:	1e 00 78    	mov.w     [w14], w0
    4ed4:	20 00 90    	mov.w     [w0+4], w0
    4ed6:	9e 00 78    	mov.w     [w14], w1
    4ed8:	a1 00 90    	mov.w     [w1+4], w1
    4eda:	11 01 78    	mov.w     [w1], w2
    4edc:	9e 00 78    	mov.w     [w14], w1
    4ede:	e1 40 90    	mov.b     [w1+6], w1
    4ee0:	81 80 fb    	ze        w1, w1
    4ee2:	13 00 20    	mov.w     #0x1, w3
    4ee4:	81 18 dd    	sl.w      w3, w1, w1
    4ee6:	81 80 ea    	com.w     w1, w1
    4ee8:	81 00 61    	and.w     w2, w1, w1
    4eea:	01 08 78    	mov.w     w1, [w0]

00004eec <.LSM40>:
    bitset(self->tris, self->bit);
    4eec:	1e 00 78    	mov.w     [w14], w0
    4eee:	10 00 90    	mov.w     [w0+2], w0
    4ef0:	9e 00 78    	mov.w     [w14], w1
    4ef2:	91 00 90    	mov.w     [w1+2], w1
    4ef4:	11 01 78    	mov.w     [w1], w2
    4ef6:	9e 00 78    	mov.w     [w14], w1
    4ef8:	e1 40 90    	mov.b     [w1+6], w1
    4efa:	81 80 fb    	ze        w1, w1
    4efc:	13 00 20    	mov.w     #0x1, w3
    4efe:	81 18 dd    	sl.w      w3, w1, w1
    4f00:	82 80 70    	ior.w     w1, w2, w1
    4f02:	01 08 78    	mov.w     w1, [w0]

00004f04 <.LSM41>:
}
    4f04:	00 80 fa    	ulnk      
    4f06:	00 00 06    	return    

00004f08 <_sw_read>:

uint16_t sw_read(_SW *self) {
    4f08:	02 00 fa    	lnk       #0x2
    4f0a:	00 0f 78    	mov.w     w0, [w14]

00004f0c <.LSM43>:
    return bitread(self->port, self->bit);
    4f0c:	1e 00 78    	mov.w     [w14], w0
    4f0e:	10 00 78    	mov.w     [w0], w0
    4f10:	90 00 78    	mov.w     [w0], w1
    4f12:	1e 00 78    	mov.w     [w14], w0
    4f14:	60 40 90    	mov.b     [w0+6], w0
    4f16:	00 80 fb    	ze        w0, w0
    4f18:	12 00 20    	mov.w     #0x1, w2
    4f1a:	00 10 dd    	sl.w      w2, w0, w0
    4f1c:	00 80 60    	and.w     w1, w0, w0
    4f1e:	00 f0 a7    	btsc.w    w0, #0xf
    4f20:	00 00 ea    	neg.w     w0, w0
    4f22:	00 00 ea    	neg.w     w0, w0
    4f24:	4f 00 de    	lsr.w     w0, #0xf, w0

00004f26 <.LSM44>:
}
    4f26:	00 80 fa    	ulnk      
    4f28:	00 00 06    	return    
Disassembly of section .dinit:

00004f2a <.dinit>:
    4f2a:	c0 11 00    	nop       
    4f2c:	80 08 00    	nop       
    4f2e:	80 00 00    	nop       
    4f30:	42 08 00    	nop       
    4f32:	06 00 00    	nop       
    4f34:	80 00 00    	nop       
    4f36:	40 1a 00    	nop       
    4f38:	b8 01 00    	nop       
    4f3a:	80 00 00    	nop       
    4f3c:	00 08 00    	nop       
    4f3e:	30 00 00    	nop       
    4f40:	80 00 00    	nop       
    4f42:	9a 1e 00    	nop       
    4f44:	10 00 00    	nop       
    4f46:	82 00 00    	nop       
    4f48:	bd 37 86    	mov.w     0xc6f6, w13
    4f4a:	33 bd 37    	bra       0xffffc9b2
    4f4c:	06 35 bd    	subr.w    0x1506
    4f4e:	37 86 36    	bra       LEU, 0xffff5bbe
    4f50:	bd 37 86    	mov.w     0xc6f6, w13
    4f52:	37 00 00    	nop       
    4f54:	0c 1d 00    	nop       
    4f56:	6e 00 00    	nop       
    4f58:	80 00 00    	nop       
    4f5a:	80 1c 00    	nop       
    4f5c:	8c 00 00    	nop       
    4f5e:	80 00 00    	nop       
    4f60:	00 1e 00    	nop       
    4f62:	80 00 00    	nop       
    4f64:	80 00 00    	nop       
    4f66:	30 08 00    	nop       
    4f68:	12 00 00    	nop       
    4f6a:	80 00 00    	nop       
    4f6c:	4c 08 00    	nop       
    4f6e:	74 09 00    	nop       
    4f70:	80 00 00    	nop       
    4f72:	48 08 00    	nop       
    4f74:	04 00 00    	nop       
    4f76:	80 00 00    	nop       
    4f78:	7a 1d 00    	nop       
    4f7a:	4a 00 00    	nop       
    4f7c:	82 00 00    	nop       
    4f7e:	30 31 32    	bra       Z, 0xb1e0
    4f80:	33 34 35    	bra       LT, 0xb7e8
    4f82:	36 37 38    	bra       NOV, 0xbdf0
    4f84:	39 61 62    	and.b     w4, [w9++], [--w2]
    4f86:	63 64 65    	and.b     w10, #0x3, [--w8]
    4f88:	66 67 68    	xor.b     w0, #0x6, [--w14]
    4f8a:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    4f8c:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    4f8e:	6f 70 71    	.pword 0x71706f
    4f90:	72 73 74    	.pword 0x747372
    4f92:	75 76 77    	.pword 0x777675
    4f94:	78 79 7a    	.pword 0x7a7978
    4f96:	00 00 00    	nop       
    4f98:	21 15 11    	subr.w    w2, [w1--], [w10--]
    4f9a:	0e 0d 0c    	bra       OA, 0x69b8
    4f9c:	0b 0b 0a    	bfins     #0xb, #0x0, w9, w10
    4f9e:	0a 09 09 
    4fa0:	09 09 09    	repeat    #0x909
    4fa2:	08 08 08    	do        #0x808, 0x5fb6
    4fa4:	08 08 08 
    4fa6:	08 07 07    	rcall     0x5db8
    4fa8:	07 07 07    	rcall     0x5db8
    4faa:	07 07 07    	rcall     0x5dba
    4fac:	07 07 07    	rcall     0x5dbc
    4fae:	07 07 00    	nop       
    4fb0:	aa 1e 00    	nop       
    4fb2:	04 00 00    	nop       
    4fb4:	80 00 00    	nop       
    4fb6:	e6 1d 00    	nop       
    4fb8:	1a 00 00    	nop       
    4fba:	82 00 00    	nop       
    4fbc:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    4fbe:	74 7a 4c    	.pword 0x4c7a74
    4fc0:	00 00 01    	call      w0
    4fc2:	00 02 00    	nop       
    4fc4:	04 00 08    	do        #0x4, 0x6fc8
    4fc6:	00 10 00 
    4fc8:	00 00 20    	mov.w     #0x0, w0
    4fca:	2b 2d 23    	mov.w     #0x32d2, w11
    4fcc:	30 00 00    	nop       
    4fce:	80 1e 00    	nop       
    4fd0:	1a 00 00    	nop       
    4fd2:	82 00 00    	nop       
    4fd4:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    4fd6:	74 7a 4c    	.pword 0x4c7a74
    4fd8:	00 00 01    	call      w0
    4fda:	00 02 00    	nop       
    4fdc:	04 00 08    	do        #0x4, 0x6fe0
    4fde:	00 10 00 
    4fe0:	00 00 20    	mov.w     #0x0, w0
    4fe2:	2b 2d 23    	mov.w     #0x32d2, w11
    4fe4:	30 00 00    	nop       
    4fe6:	f8 1b 00    	nop       
    4fe8:	88 00 00    	nop       
    4fea:	82 00 00    	nop       
    4fec:	01 00 00    	nop       
    4fee:	00 1e 1c    	subbr.w   w8, w0, [w12++]
    4ff0:	1f 1c 1e    	subbr.w   w12, [w15], [w8++]
    4ff2:	1c 1e 1c    	subbr.w   w8, [w12], [w12++]
    4ff4:	1e 1c 1e    	subbr.w   w12, [w14], [w8++]
    4ff6:	1c 0e 1c    	subbr.w   w8, [w12], [w12]
	...
    5006:	00 02 08    	do        #0x200, 0x520c
    5008:	01 01 46 
    500a:	1c 47 1c    	subbr.b   w8, [w12], w14
    500c:	46 1c 46    	add.w     w12, [--w6], [w8++]
    500e:	1c 46 1c    	subbr.b   w8, [w12], w12
    5010:	46 1c 36    	bra       LEU, 0x889e
    5012:	1c 00 00    	nop       
	...
    5020:	00 00 02    	call      0x2080000 <__DefaultInterrupt+0x207af7e>
    5022:	08 02 02 
    5024:	6e 1c 6f    	xor.w     w14, #0xe, [w8++]
    5026:	1c 6e 1c    	subbr.b   w8, [w12], [++w12]
    5028:	6e 1c 6e    	xor.w     w12, #0xe, [w8++]
    502a:	1c 6e 1c    	subbr.b   w8, [w12], [++w12]
    502c:	5e 1c 00    	nop       
	...
    503c:	f8 1b 20    	mov.w     #0x1bf, w8
    503e:	1c 48 1c    	subbr.b   w8, [w12], [w0]
	...
    5048:	c4 1d 00    	nop       
    504a:	22 00 00    	nop       
    504c:	82 00 00    	nop       
    504e:	30 31 32    	bra       Z, 0xb2b0
    5050:	33 34 35    	bra       LT, 0xb8b8
    5052:	36 37 38    	bra       NOV, 0xbec0
    5054:	39 41 42    	add.b     w4, [w9++], w2
    5056:	43 44 45    	add.b     w10, [--w3], w8
    5058:	46 00 30    	bra       OV, 0x50e6
    505a:	31 32 33    	bra       N, 0xb4be
    505c:	34 35 36    	bra       LEU, 0xbac6
    505e:	37 38 39    	bra       NC, 0xc0ce
    5060:	61 62 63    	and.b     w6, #0x1, [--w4]
    5062:	64 65 66    	and.b     w12, #0x4, [--w10]
    5064:	00 00 00    	nop       
    5066:	b2 1e 00    	nop       
    5068:	02 00 00    	nop       
    506a:	80 00 00    	nop       
    506c:	b4 1e 00    	nop       
    506e:	02 00 00    	nop       
    5070:	82 00 00    	nop       
    5072:	04 00 00    	nop       
    5074:	ae 1e 00    	nop       
    5076:	04 00 00    	nop       
    5078:	80 00 00    	nop       
    507a:	b6 1e 00    	nop       
    507c:	02 00 00    	nop       
    507e:	80 00 00    	nop       
    5080:	00 00 00    	nop       
Disassembly of section .isr:

00005082 <__DefaultInterrupt>:
    5082:	00 40 da    	.pword 0xda4000
    5084:	00 00 fe    	reset     
