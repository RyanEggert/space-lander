
master_main.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	2f 3c 21    	mov.w     #0x13c2, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	c0 94 23    	mov.w     #0x394c, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	de 38 02    	call      0x38de <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	a0 00 20    	mov.w     #0xa, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	d6 31 04    	goto      0x31d6 <___digitalRead>
    11e4:	00 00 00 
    11e6:	92 31 04    	goto      0x3192 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	f8 31 04    	goto      0x31f8 <___analogRead>
    11ec:	00 00 00 
    11ee:	18 1f 04    	goto      0x1f18 <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	5a 1f 04    	goto      0x1f5a <___putc_buffer>
    11f4:	00 00 00 
    11f6:	3c 1f 04    	goto      0x1f3c <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	52 20 04    	goto      0x2052 <___getc_buffer>
    11fc:	00 00 00 
    11fe:	26 15 04    	goto      0x1526 <_prout>
    1200:	00 00 00 

00001202 <___subsf3>:
    1202:	03 f0 a2    	btg.w     w3, #0xf

00001204 <___addsf3>:
    1204:	88 9f be    	mov.d     w8, [w15++]
    1206:	8a 9f be    	mov.d     w10, [w15++]
    1208:	8c 1f 78    	mov.w     w12, [w15++]
    120a:	f7 00 07    	rcall     0x13fa <__funpack2>
    120c:	fe 00 33    	bra       N, 0x140a <__fPropagateNaN>
    120e:	64 50 e1    	cp.w      w10, #0x4
    1210:	4f 00 32    	bra       Z, 0x12b0 <aisinfinite>

00001212 <checkspecialb>:
    1212:	64 20 e1    	cp.w      w4, #0x4
    1214:	52 00 32    	bra       Z, 0x12ba <return2>
    1216:	03 82 6c    	xor.w     w9, w3, w4
    1218:	07 00 3b    	bra       NN, 0x1228 <getsign>
    121a:	09 05 d0    	sl.w      w9, w10
    121c:	03 06 d0    	sl.w      w3, w12
    121e:	82 0f 54    	sub.w     w8, w2, [w15]
    1220:	0c 06 5d    	subb.w    w10, w12, w12
    1222:	02 00 39    	bra       NC, 0x1228 <getsign>
    1224:	02 00 32    	bra       Z, 0x122a <gotsign>
    1226:	89 01 78    	mov.w     w9, w3

00001228 <getsign>:
    1228:	03 06 78    	mov.w     w3, w12

0000122a <gotsign>:
    122a:	85 82 55    	sub.w     w11, w5, w5
    122c:	04 00 3d    	bra       GE, 0x1236 <expcanonical>
    122e:	00 03 fd    	exch      w0, w6
    1230:	81 03 fd    	exch      w1, w7
    1232:	85 02 ea    	neg.w     w5, w5
    1234:	8b 85 42    	add.w     w5, w11, w11

00001236 <expcanonical>:
    1236:	84 0f 72    	ior.w     w4, w4, [w15]
    1238:	02 00 3b    	bra       NN, 0x123e <nonegate>
    123a:	60 00 10    	subr.w    w0, #0x0, w0
    123c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000123e <nonegate>:
    123e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1240:	00 05 eb    	clr.w     w10
    1242:	7a 28 e1    	cp.w      w5, #0x1a
    1244:	0a 00 39    	bra       NC, 0x125a <aligniter>
    1246:	06 00 78    	mov.w     w6, w0
    1248:	c7 5d dd    	sl.w      w11, #0x7, w11
    124a:	f7 07 b2    	and.w     #0x7f, w7
    124c:	87 80 75    	ior.w     w11, w7, w1
    124e:	2d 00 37    	bra       0x12aa <signoff>

00001250 <align>:
    1250:	82 81 71    	ior.w     w3, w2, w3
    1252:	0a 01 78    	mov.w     w10, w2
    1254:	61 05 60    	and.w     w0, #0x1, w10
    1256:	81 80 d1    	asr.w     w1, w1
    1258:	00 80 d3    	rrc.w     w0, w0

0000125a <aligniter>:
    125a:	85 02 e9    	dec.w     w5, w5
    125c:	f9 ff 3b    	bra       NN, 0x1250 <align>

0000125e <aligned>:
    125e:	06 04 40    	add.w     w0, w6, w8
    1260:	87 84 48    	addc.w    w1, w7, w9
    1262:	02 00 3b    	bra       NN, 0x1268 <normalizesum>
    1264:	60 04 14    	subr.w    w8, #0x0, w8
    1266:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001268 <normalizesum>:
    1268:	09 88 a3    	btst.z    w9, #0x8
    126a:	07 00 32    	bra       Z, 0x127a <checknormal>
    126c:	8a 81 71    	ior.w     w3, w10, w3
    126e:	82 81 71    	ior.w     w3, w2, w3
    1270:	61 01 64    	and.w     w8, #0x1, w2
    1272:	89 04 d1    	lsr.w     w9, w9
    1274:	08 84 d3    	rrc.w     w8, w8
    1276:	8b 05 e8    	inc.w     w11, w11
    1278:	17 00 37    	bra       0x12a8 <round>

0000127a <checknormal>:
    127a:	09 78 a3    	btst.z    w9, #0x7
    127c:	13 00 3a    	bra       NZ, 0x12a4 <discardguard>

0000127e <underflow>:
    127e:	0b 00 e0    	cp0.w     w11
    1280:	13 00 34    	bra       LE, 0x12a8 <round>
    1282:	8b 05 e9    	dec.w     w11, w11
    1284:	08 04 44    	add.w     w8, w8, w8
    1286:	89 84 4c    	addc.w    w9, w9, w9
    1288:	0a 44 74    	ior.b     w8, w10, w8
    128a:	09 78 a3    	btst.z    w9, #0x7
    128c:	0d 00 3a    	bra       NZ, 0x12a8 <round>

0000128e <normalizeloop>:
    128e:	0b 00 e0    	cp0.w     w11
    1290:	07 00 34    	bra       LE, 0x12a0 <normalizeexit>
    1292:	8b 05 e9    	dec.w     w11, w11
    1294:	08 04 44    	add.w     w8, w8, w8
    1296:	89 84 4c    	addc.w    w9, w9, w9
    1298:	01 00 3a    	bra       NZ, 0x129c <normalizetest>
    129a:	0b 00 20    	mov.w     #0x0, w11

0000129c <normalizetest>:
    129c:	09 78 a3    	btst.z    w9, #0x7
    129e:	f7 ff 32    	bra       Z, 0x128e <normalizeloop>

000012a0 <normalizeexit>:
    12a0:	00 01 eb    	clr.w     w2
    12a2:	02 00 37    	bra       0x12a8 <round>

000012a4 <discardguard>:
    12a4:	82 81 71    	ior.w     w3, w2, w3
    12a6:	0a 01 78    	mov.w     w10, w2

000012a8 <round>:
    12a8:	6d 00 07    	rcall     0x1384 <__fpack>

000012aa <signoff>:
    12aa:	0c f0 a7    	btsc.w    w12, #0xf
    12ac:	01 f0 a0    	bset.w    w1, #0xf
    12ae:	b6 00 37    	bra       0x141c <__fbopExit>

000012b0 <aisinfinite>:
    12b0:	64 20 e1    	cp.w      w4, #0x4
    12b2:	02 00 3a    	bra       NZ, 0x12b8 <return8>
    12b4:	83 8f 6c    	xor.w     w9, w3, [w15]
    12b6:	b6 00 33    	bra       N, 0x1424 <__fbopReturnNaN>

000012b8 <return8>:
    12b8:	08 01 be    	mov.d     w8, w2

000012ba <return2>:
    12ba:	02 00 be    	mov.d     w2, w0
    12bc:	af 00 37    	bra       0x141c <__fbopExit>

000012be <___divsf3>:
    12be:	88 9f be    	mov.d     w8, [w15++]
    12c0:	8a 9f be    	mov.d     w10, [w15++]
    12c2:	8c 1f 78    	mov.w     w12, [w15++]
    12c4:	9a 00 07    	rcall     0x13fa <__funpack2>
    12c6:	a1 00 33    	bra       N, 0x140a <__fPropagateNaN>
    12c8:	03 86 6c    	xor.w     w9, w3, w12
    12ca:	64 50 e1    	cp.w      w10, #0x4
    12cc:	2e 00 32    	bra       Z, 0x132a <aisinfinite>
    12ce:	64 20 e1    	cp.w      w4, #0x4
    12d0:	33 00 32    	bra       Z, 0x1338 <returnZero>
    12d2:	61 50 e1    	cp.w      w10, #0x1
    12d4:	2f 00 32    	bra       Z, 0x1334 <aiszero>
    12d6:	61 20 e1    	cp.w      w4, #0x1
    12d8:	31 00 32    	bra       Z, 0x133c <returnInf>

000012da <finitenonzero>:
    12da:	85 85 55    	sub.w     w11, w5, w11
    12dc:	eb 07 b0    	add.w     #0x7e, w11
    12de:	09 00 20    	mov.w     #0x0, w9
    12e0:	08 04 20    	mov.w     #0x40, w8
    12e2:	05 00 37    	bra       0x12ee <diventry>

000012e4 <divnext>:
    12e4:	08 04 44    	add.w     w8, w8, w8
    12e6:	89 84 4c    	addc.w    w9, w9, w9
    12e8:	0a 00 31    	bra       C, 0x12fe <divdone>

000012ea <divloop>:
    12ea:	06 03 43    	add.w     w6, w6, w6
    12ec:	87 83 4b    	addc.w    w7, w7, w7

000012ee <diventry>:
    12ee:	00 01 53    	sub.w     w6, w0, w2
    12f0:	81 81 5b    	subb.w    w7, w1, w3
    12f2:	f8 ff 33    	bra       N, 0x12e4 <divnext>
    12f4:	02 03 be    	mov.d     w2, w6
    12f6:	08 00 a0    	bset.w    w8, #0x0
    12f8:	08 04 44    	add.w     w8, w8, w8
    12fa:	89 84 4c    	addc.w    w9, w9, w9
    12fc:	f6 ff 39    	bra       NC, 0x12ea <divloop>

000012fe <divdone>:
    12fe:	c6 39 dd    	sl.w      w7, #0x6, w3
    1300:	83 01 73    	ior.w     w6, w3, w3
    1302:	01 00 32    	bra       Z, 0x1306 <stickyok>
    1304:	13 00 20    	mov.w     #0x1, w3

00001306 <stickyok>:
    1306:	89 04 d1    	lsr.w     w9, w9
    1308:	08 84 d3    	rrc.w     w8, w8
    130a:	09 98 a3    	btst.z    w9, #0x9
    130c:	05 00 32    	bra       Z, 0x1318 <guardused>
    130e:	08 00 a7    	btsc.w    w8, #0x0
    1310:	03 00 a0    	bset.w    w3, #0x0
    1312:	89 04 d1    	lsr.w     w9, w9
    1314:	08 84 d3    	rrc.w     w8, w8
    1316:	8b 05 e8    	inc.w     w11, w11

00001318 <guardused>:
    1318:	89 04 d1    	lsr.w     w9, w9
    131a:	08 84 d3    	rrc.w     w8, w8
    131c:	00 01 eb    	clr.w     w2
    131e:	02 81 d2    	rlc.w     w2, w2
    1320:	31 00 07    	rcall     0x1384 <__fpack>

00001322 <return0>:
    1322:	01 f0 a1    	bclr.w    w1, #0xf
    1324:	0c f0 a7    	btsc.w    w12, #0xf
    1326:	01 f0 a0    	bset.w    w1, #0xf
    1328:	79 00 37    	bra       0x141c <__fbopExit>

0000132a <aisinfinite>:
    132a:	64 20 e1    	cp.w      w4, #0x4
    132c:	7b 00 32    	bra       Z, 0x1424 <__fbopReturnNaN>

0000132e <return8>:
    132e:	08 01 be    	mov.d     w8, w2

00001330 <return2>:
    1330:	02 00 be    	mov.d     w2, w0
    1332:	f7 ff 37    	bra       0x1322 <return0>

00001334 <aiszero>:
    1334:	61 20 e1    	cp.w      w4, #0x1
    1336:	76 00 32    	bra       Z, 0x1424 <__fbopReturnNaN>

00001338 <returnZero>:
    1338:	60 00 b8    	mul.uu    w0, #0x0, w0
    133a:	f3 ff 37    	bra       0x1322 <return0>

0000133c <returnInf>:
    133c:	00 00 20    	mov.w     #0x0, w0
    133e:	01 f8 27    	mov.w     #0x7f80, w1
    1340:	f0 ff 37    	bra       0x1322 <return0>

00001342 <___eqsf2>:
    1342:	14 00 20    	mov.w     #0x1, w4
    1344:	a6 00 37    	bra       0x1492 <__fcompare>

00001346 <___gesf2>:
    1346:	f4 ff 2f    	mov.w     #0xffff, w4
    1348:	a4 00 37    	bra       0x1492 <__fcompare>

0000134a <___fixunssfsi>:
    134a:	00 01 be    	mov.d     w0, w2
    134c:	41 00 07    	rcall     0x13d0 <__funpack>
    134e:	04 70 a7    	btsc.w    w4, #0x7
    1350:	03 f0 a1    	bclr.w    w3, #0xf
    1352:	03 f8 a3    	btst.z    w3, #0xf
    1354:	13 00 3a    	bra       NZ, 0x137c <returnzero>
    1356:	65 09 b1    	sub.w     #0x96, w5
    1358:	10 00 32    	bra       Z, 0x137a <exit>
    135a:	09 00 35    	bra       LT, 0x136e <shiftright>
    135c:	69 28 e1    	cp.w      w5, #0x9
    135e:	02 00 35    	bra       LT, 0x1364 <shiftleft>
    1360:	01 00 28    	mov.w     #0x8000, w1
    1362:	00 00 05    	retlw.w   #0x0, w0

00001364 <shiftleft>:
    1364:	00 00 40    	add.w     w0, w0, w0
    1366:	81 80 48    	addc.w    w1, w1, w1
    1368:	85 02 e9    	dec.w     w5, w5
    136a:	fc ff 3a    	bra       NZ, 0x1364 <shiftleft>
    136c:	00 00 06    	return    

0000136e <shiftright>:
    136e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1370:	05 00 35    	bra       LT, 0x137c <returnzero>

00001372 <shiftrightloop>:
    1372:	81 00 d1    	lsr.w     w1, w1
    1374:	00 80 d3    	rrc.w     w0, w0
    1376:	85 02 e8    	inc.w     w5, w5
    1378:	fc ff 3a    	bra       NZ, 0x1372 <shiftrightloop>

0000137a <exit>:
    137a:	00 00 06    	return    

0000137c <returnzero>:
    137c:	80 00 eb    	clr.w     w1
    137e:	00 00 05    	retlw.w   #0x0, w0

00001380 <___floatunsisf>:
    1380:	60 11 b8    	mul.uu    w2, #0x0, w2
    1382:	a2 00 37    	bra       0x14c8 <___floatundisf>

00001384 <__fpack>:
    1384:	81 00 20    	mov.w     #0x8, w1
    1386:	61 80 55    	sub.w     w11, #0x1, w0
    1388:	0b 00 3d    	bra       GE, 0x13a0 <notsubnormal>
    138a:	0b 00 20    	mov.w     #0x0, w11
    138c:	61 fe 2f    	mov.w     #0xffe6, w1
    138e:	01 00 e1    	cp.w      w0, w1
    1390:	1d 00 34    	bra       LE, 0x13cc <zerosig>

00001392 <subnormal>:
    1392:	82 81 71    	ior.w     w3, w2, w3
    1394:	61 01 64    	and.w     w8, #0x1, w2
    1396:	89 04 d1    	lsr.w     w9, w9
    1398:	08 84 d3    	rrc.w     w8, w8
    139a:	00 00 e8    	inc.w     w0, w0
    139c:	fa ff 3a    	bra       NZ, 0x1392 <subnormal>
    139e:	71 00 20    	mov.w     #0x7, w1

000013a0 <notsubnormal>:
    13a0:	61 00 64    	and.w     w8, #0x1, w0
    13a2:	03 00 70    	ior.w     w0, w3, w0
    13a4:	02 00 60    	and.w     w0, w2, w0
    13a6:	09 00 32    	bra       Z, 0x13ba <packupandgo>
    13a8:	61 04 44    	add.w     w8, #0x1, w8
    13aa:	e0 84 4c    	addc.w    w9, #0x0, w9
    13ac:	09 88 a5    	btst.z    w9, w1
    13ae:	05 00 32    	bra       Z, 0x13ba <packupandgo>
    13b0:	8b 05 e8    	inc.w     w11, w11
    13b2:	68 08 e1    	cp.w      w1, #0x8
    13b4:	02 00 3a    	bra       NZ, 0x13ba <packupandgo>
    13b6:	89 04 d1    	lsr.w     w9, w9
    13b8:	08 84 d3    	rrc.w     w8, w8

000013ba <packupandgo>:
    13ba:	f2 0f 20    	mov.w     #0xff, w2
    13bc:	02 58 e1    	cp.w      w11, w2
    13be:	05 00 3d    	bra       GE, 0x13ca <overflow>
    13c0:	c7 5d dd    	sl.w      w11, #0x7, w11
    13c2:	f9 07 b2    	and.w     #0x7f, w9
    13c4:	89 80 75    	ior.w     w11, w9, w1
    13c6:	08 00 78    	mov.w     w8, w0
    13c8:	00 00 06    	return    

000013ca <overflow>:
    13ca:	0b f8 27    	mov.w     #0x7f80, w11

000013cc <zerosig>:
    13cc:	8b 00 78    	mov.w     w11, w1
    13ce:	00 00 05    	retlw.w   #0x0, w0

000013d0 <__funpack>:
    13d0:	c7 0a de    	lsr.w     w1, #0x7, w5
    13d2:	f1 07 b2    	and.w     #0x7f, w1
    13d4:	f5 0f b2    	and.w     #0xff, w5
    13d6:	08 00 32    	bra       Z, 0x13e8 <zeroorsub>
    13d8:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13da:	02 00 32    	bra       Z, 0x13e0 <nanorinf>

000013dc <finitereturn>:
    13dc:	01 70 a0    	bset.w    w1, #0x7
    13de:	24 00 05    	retlw.w   #0x2, w4

000013e0 <nanorinf>:
    13e0:	81 0f 70    	ior.w     w0, w1, [w15]
    13e2:	01 00 32    	bra       Z, 0x13e6 <infinite>
    13e4:	04 08 05    	retlw.w   #0x80, w4

000013e6 <infinite>:
    13e6:	44 00 05    	retlw.w   #0x4, w4

000013e8 <zeroorsub>:
    13e8:	81 0f 70    	ior.w     w0, w1, [w15]
    13ea:	02 00 3a    	bra       NZ, 0x13f0 <subnormal>
    13ec:	14 00 05    	retlw.w   #0x1, w4

000013ee <normalize>:
    13ee:	85 02 e9    	dec.w     w5, w5

000013f0 <subnormal>:
    13f0:	00 00 40    	add.w     w0, w0, w0
    13f2:	81 c0 48    	addc.b    w1, w1, w1
    13f4:	fc ff 3b    	bra       NN, 0x13ee <normalize>
    13f6:	01 70 a0    	bset.w    w1, #0x7
    13f8:	24 00 05    	retlw.w   #0x2, w4

000013fa <__funpack2>:
    13fa:	00 04 be    	mov.d     w0, w8
    13fc:	e9 ff 07    	rcall     0x13d0 <__funpack>
    13fe:	00 03 be    	mov.d     w0, w6
    1400:	04 05 be    	mov.d     w4, w10
    1402:	02 00 be    	mov.d     w2, w0
    1404:	e5 ff 07    	rcall     0x13d0 <__funpack>
    1406:	84 4f 75    	ior.b     w10, w4, [w15]
    1408:	00 00 06    	return    

0000140a <__fPropagateNaN>:
    140a:	02 00 be    	mov.d     w2, w0
    140c:	64 50 e1    	cp.w      w10, #0x4
    140e:	05 00 36    	bra       LEU, 0x141a <return0>
    1410:	64 20 e1    	cp.w      w4, #0x4
    1412:	02 00 36    	bra       LEU, 0x1418 <return8>
    1414:	09 68 a3    	btst.z    w9, #0x6
    1416:	01 00 3a    	bra       NZ, 0x141a <return0>

00001418 <return8>:
    1418:	08 00 be    	mov.d     w8, w0

0000141a <return0>:
    141a:	01 60 a0    	bset.w    w1, #0x6

0000141c <__fbopExit>:
    141c:	4f 06 78    	mov.w     [--w15], w12
    141e:	4f 05 be    	mov.d     [--w15], w10
    1420:	4f 04 be    	mov.d     [--w15], w8
    1422:	00 00 06    	return    

00001424 <__fbopReturnNaN>:
    1424:	f0 ff 2f    	mov.w     #0xffff, w0
    1426:	f1 ff 27    	mov.w     #0x7fff, w1
    1428:	f9 ff 37    	bra       0x141c <__fbopExit>

0000142a <___mulsf3>:
    142a:	88 9f be    	mov.d     w8, [w15++]
    142c:	8a 9f be    	mov.d     w10, [w15++]
    142e:	8c 1f 78    	mov.w     w12, [w15++]
    1430:	e4 ff 07    	rcall     0x13fa <__funpack2>
    1432:	eb ff 33    	bra       N, 0x140a <__fPropagateNaN>
    1434:	03 86 6c    	xor.w     w9, w3, w12
    1436:	64 50 e1    	cp.w      w10, #0x4
    1438:	24 00 32    	bra       Z, 0x1482 <aisinfinite>
    143a:	64 20 e1    	cp.w      w4, #0x4
    143c:	27 00 32    	bra       Z, 0x148c <bisinfinite>
    143e:	61 50 e1    	cp.w      w10, #0x1
    1440:	22 00 32    	bra       Z, 0x1486 <return8>
    1442:	61 20 e1    	cp.w      w4, #0x1
    1444:	21 00 32    	bra       Z, 0x1488 <return2>
    1446:	8b 85 42    	add.w     w5, w11, w11
    1448:	eb 07 b1    	sub.w     #0x7e, w11
    144a:	01 34 b8    	mul.uu    w6, w1, w8
    144c:	00 3a b8    	mul.uu    w7, w0, w4
    144e:	08 04 42    	add.w     w4, w8, w8
    1450:	89 84 4a    	addc.w    w5, w9, w9
    1452:	01 3a b8    	mul.uu    w7, w1, w4
    1454:	00 30 b8    	mul.uu    w6, w0, w0
    1456:	88 80 40    	add.w     w1, w8, w1
    1458:	09 01 4a    	addc.w    w4, w9, w2
    145a:	04 00 33    	bra       N, 0x1464 <formsticky>
    145c:	00 00 40    	add.w     w0, w0, w0
    145e:	81 80 48    	addc.w    w1, w1, w1
    1460:	02 01 49    	addc.w    w2, w2, w2
    1462:	8b 05 e9    	dec.w     w11, w11

00001464 <formsticky>:
    1464:	c9 09 dd    	sl.w      w1, #0x9, w3
    1466:	83 01 70    	ior.w     w0, w3, w3
    1468:	01 00 32    	bra       Z, 0x146c <formRandSig>
    146a:	13 00 20    	mov.w     #0x1, w3

0000146c <formRandSig>:
    146c:	c8 14 de    	lsr.w     w2, #0x8, w9
    146e:	48 14 dd    	sl.w      w2, #0x8, w8
    1470:	47 09 de    	lsr.w     w1, #0x7, w2
    1472:	12 00 b2    	and.w     #0x1, w2
    1474:	c8 08 de    	lsr.w     w1, #0x8, w1
    1476:	08 84 70    	ior.w     w1, w8, w8
    1478:	85 ff 07    	rcall     0x1384 <__fpack>

0000147a <return0>:
    147a:	01 f0 a1    	bclr.w    w1, #0xf
    147c:	0c f0 a7    	btsc.w    w12, #0xf
    147e:	01 f0 a0    	bset.w    w1, #0xf
    1480:	cd ff 37    	bra       0x141c <__fbopExit>

00001482 <aisinfinite>:
    1482:	61 20 e1    	cp.w      w4, #0x1
    1484:	cf ff 32    	bra       Z, 0x1424 <__fbopReturnNaN>

00001486 <return8>:
    1486:	08 01 be    	mov.d     w8, w2

00001488 <return2>:
    1488:	02 00 be    	mov.d     w2, w0
    148a:	f7 ff 37    	bra       0x147a <return0>

0000148c <bisinfinite>:
    148c:	61 50 e1    	cp.w      w10, #0x1
    148e:	fc ff 3a    	bra       NZ, 0x1488 <return2>
    1490:	c9 ff 37    	bra       0x1424 <__fbopReturnNaN>

00001492 <__fcompare>:
    1492:	88 9f be    	mov.d     w8, [w15++]
    1494:	8a 9f be    	mov.d     w10, [w15++]
    1496:	84 1f 78    	mov.w     w4, [w15++]
    1498:	b0 ff 07    	rcall     0x13fa <__funpack2>
    149a:	4f 00 78    	mov.w     [--w15], w0
    149c:	11 00 33    	bra       N, 0x14c0 <exit>
    149e:	f0 ff 2f    	mov.w     #0xffff, w0
    14a0:	83 8f 6c    	xor.w     w9, w3, [w15]
    14a2:	06 00 3b    	bra       NN, 0x14b0 <comparemag>
    14a4:	04 05 65    	and.w     w10, w4, w10
    14a6:	0a 00 a7    	btsc.w    w10, #0x0
    14a8:	08 00 37    	bra       0x14ba <returnEqual>
    14aa:	09 f0 a6    	btss.w    w9, #0xf
    14ac:	10 00 20    	mov.w     #0x1, w0
    14ae:	08 00 37    	bra       0x14c0 <exit>

000014b0 <comparemag>:
    14b0:	82 0f 54    	sub.w     w8, w2, [w15]
    14b2:	83 8f 5c    	subb.w    w9, w3, [w15]
    14b4:	03 00 39    	bra       NC, 0x14bc <adjust>
    14b6:	10 00 20    	mov.w     #0x1, w0
    14b8:	01 00 3e    	bra       GTU, 0x14bc <adjust>

000014ba <returnEqual>:
    14ba:	00 00 20    	mov.w     #0x0, w0

000014bc <adjust>:
    14bc:	09 f0 a7    	btsc.w    w9, #0xf
    14be:	00 00 ea    	neg.w     w0, w0

000014c0 <exit>:
    14c0:	4f 05 be    	mov.d     [--w15], w10
    14c2:	4f 04 be    	mov.d     [--w15], w8
    14c4:	00 00 e0    	cp0.w     w0
    14c6:	00 00 06    	return    

000014c8 <___floatundisf>:
    14c8:	88 9f be    	mov.d     w8, [w15++]
    14ca:	8a 9f be    	mov.d     w10, [w15++]
    14cc:	00 82 70    	ior.w     w1, w0, w4
    14ce:	04 02 71    	ior.w     w2, w4, w4
    14d0:	04 82 71    	ior.w     w3, w4, w4
    14d2:	26 00 32    	bra       Z, 0x1520 <return0>
    14d4:	00 04 be    	mov.d     w0, w8
    14d6:	02 00 be    	mov.d     w2, w0
    14d8:	60 11 b8    	mul.uu    w2, #0x0, w2
    14da:	6b 09 20    	mov.w     #0x96, w11
    14dc:	95 02 20    	mov.w     #0x29, w5
    14de:	01 82 cf    	ff1l      w1, w4
    14e0:	0a 00 39    	bra       NC, 0x14f6 <fixshift>
    14e2:	05 41 b1    	sub.b     #0x10, w5
    14e4:	00 82 cf    	ff1l      w0, w4
    14e6:	07 00 39    	bra       NC, 0x14f6 <fixshift>
    14e8:	05 41 b1    	sub.b     #0x10, w5
    14ea:	09 82 cf    	ff1l      w9, w4
    14ec:	04 00 39    	bra       NC, 0x14f6 <fixshift>
    14ee:	05 41 b1    	sub.b     #0x10, w5
    14f0:	08 82 cf    	ff1l      w8, w4
    14f2:	01 00 39    	bra       NC, 0x14f6 <fixshift>
    14f4:	05 41 b1    	sub.b     #0x10, w5

000014f6 <fixshift>:
    14f6:	05 42 52    	sub.b     w4, w5, w4
    14f8:	12 00 32    	bra       Z, 0x151e <round>
    14fa:	0a 00 3b    	bra       NN, 0x1510 <shiftleft>

000014fc <shiftright>:
    14fc:	82 81 71    	ior.w     w3, w2, w3
    14fe:	61 01 64    	and.w     w8, #0x1, w2
    1500:	81 00 d1    	lsr.w     w1, w1
    1502:	00 80 d3    	rrc.w     w0, w0
    1504:	89 84 d3    	rrc.w     w9, w9
    1506:	08 84 d3    	rrc.w     w8, w8
    1508:	8b 05 e8    	inc.w     w11, w11
    150a:	04 42 e8    	inc.b     w4, w4
    150c:	f7 ff 3a    	bra       NZ, 0x14fc <shiftright>
    150e:	07 00 37    	bra       0x151e <round>

00001510 <shiftleft>:
    1510:	08 04 44    	add.w     w8, w8, w8
    1512:	89 84 4c    	addc.w    w9, w9, w9
    1514:	00 00 48    	addc.w    w0, w0, w0
    1516:	81 80 48    	addc.w    w1, w1, w1
    1518:	8b 05 e9    	dec.w     w11, w11
    151a:	04 42 e9    	dec.b     w4, w4
    151c:	f9 ff 3a    	bra       NZ, 0x1510 <shiftleft>

0000151e <round>:
    151e:	32 ff 07    	rcall     0x1384 <__fpack>

00001520 <return0>:
    1520:	4f 05 be    	mov.d     [--w15], w10
    1522:	4f 04 be    	mov.d     [--w15], w8
    1524:	00 00 06    	return    

00001526 <_prout>:
    1526:	88 1f 78    	mov.w     w8, [w15++]
    1528:	02 04 78    	mov.w     w2, w8
    152a:	08 01 78    	mov.w     w8, w2
    152c:	cc 01 07    	rcall     0x18c6 <_memcpy>
    152e:	08 00 40    	add.w     w0, w8, w0
    1530:	4f 04 78    	mov.w     [--w15], w8
    1532:	00 00 06    	return    

00001534 <__sprintf_cdnopuxX>:
    1534:	00 00 fa    	lnk       #0x0
    1536:	88 1f 78    	mov.w     w8, [w15++]
    1538:	00 04 78    	mov.w     w0, w8
    153a:	ea 81 57    	sub.w     w15, #0xa, w3
    153c:	3f b9 97    	mov.w     [w15-10], w2
    153e:	88 00 78    	mov.w     w8, w1
    1540:	60 52 21    	mov.w     #0x1526, w0
    1542:	07 00 07    	rcall     0x1552 <___Printf_cdnopuxX>
    1544:	00 00 e0    	cp0.w     w0
    1546:	02 00 35    	bra       LT, 0x154c <.L3>
    1548:	80 40 eb    	clr.b     w1
    154a:	01 74 78    	mov.b     w1, [w8+w0]

0000154c <.L3>:
    154c:	4f 04 78    	mov.w     [--w15], w8
    154e:	00 80 fa    	ulnk      
    1550:	00 00 06    	return    

00001552 <___Printf_cdnopuxX>:
    1552:	62 00 fa    	lnk       #0x62
    1554:	88 9f be    	mov.d     w8, [w15++]
    1556:	8a 1f 78    	mov.w     w10, [w15++]
    1558:	00 05 78    	mov.w     w0, w10
    155a:	81 04 78    	mov.w     w1, w9
    155c:	02 04 78    	mov.w     w2, w8
    155e:	83 00 78    	mov.w     w3, w1
    1560:	80 f9 2f    	mov.w     #0xff98, w0
    1562:	0f 00 40    	add.w     w0, w15, w0
    1564:	ae 03 07    	rcall     0x1cc2 <__Vacopy>
    1566:	9a 97 9f    	mov.w     w10, [w15-94]
    1568:	a9 97 9f    	mov.w     w9, [w15-92]
    156a:	00 00 eb    	clr.w     w0
    156c:	b0 9f 9f    	mov.w     w0, [w15-74]

0000156e <.L31>:
    156e:	18 85 fb    	ze        [w8], w10
    1570:	8a 04 fb    	se        w10, w9
    1572:	0a 05 ea    	neg.w     w10, w10
    1574:	4f 55 de    	lsr.w     w10, #0xf, w10
    1576:	50 02 20    	mov.w     #0x25, w0
    1578:	80 8f 54    	sub.w     w9, w0, [w15]
    157a:	0d 00 32    	bra       Z, 0x1596 <.L3>
    157c:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    157e:	0b 00 3a    	bra       NZ, 0x1596 <.L3>
    1580:	0a 01 78    	mov.w     w10, w2
    1582:	88 00 78    	mov.w     w8, w1
    1584:	2f 90 97    	mov.w     [w15-92], w0
    1586:	9f 91 97    	mov.w     [w15-94], w3
    1588:	03 00 01    	call      w3
    158a:	a0 97 9f    	mov.w     w0, [w15-92]
    158c:	00 00 e0    	cp0.w     w0
    158e:	8e 00 32    	bra       Z, 0x16ac <.L27>
    1590:	3f 98 97    	mov.w     [w15-74], w0
    1592:	00 00 e8    	inc.w     w0, w0
    1594:	b0 9f 9f    	mov.w     w0, [w15-74]

00001596 <.L3>:
    1596:	0a 04 44    	add.w     w8, w10, w8
    1598:	50 02 20    	mov.w     #0x25, w0
    159a:	80 8f 54    	sub.w     w9, w0, [w15]
    159c:	04 00 32    	bra       Z, 0x15a6 <.L5>
    159e:	09 00 e0    	cp0.w     w9
    15a0:	e6 ff 3a    	bra       NZ, 0x156e <.L31>
    15a2:	3f 98 97    	mov.w     [w15-74], w0
    15a4:	84 00 37    	bra       0x16ae <.L4>

000015a6 <.L5>:
    15a6:	00 00 eb    	clr.w     w0
    15a8:	90 9f 9f    	mov.w     w0, [w15-78]
    15aa:	80 9f 9f    	mov.w     w0, [w15-80]
    15ac:	f0 97 9f    	mov.w     w0, [w15-82]
    15ae:	e0 97 9f    	mov.w     w0, [w15-84]
    15b0:	d0 97 9f    	mov.w     w0, [w15-86]
    15b2:	c0 97 9f    	mov.w     w0, [w15-88]
    15b4:	07 00 37    	bra       0x15c4 <.L34>

000015b6 <.L8>:
    15b6:	c1 3a 21    	mov.w     #0x13ac, w1
    15b8:	01 00 50    	sub.w     w0, w1, w0
    15ba:	00 00 40    	add.w     w0, w0, w0
    15bc:	01 3a 21    	mov.w     #0x13a0, w1
    15be:	61 00 78    	mov.w     [w1+w0], w0
    15c0:	df 98 97    	mov.w     [w15-70], w1
    15c2:	01 00 70    	ior.w     w0, w1, w0

000015c4 <.L34>:
    15c4:	d0 9f 9f    	mov.w     w0, [w15-70]
    15c6:	88 04 78    	mov.w     w8, w9
    15c8:	09 04 78    	mov.w     w9, w8
    15ca:	38 45 78    	mov.b     [w8++], w10
    15cc:	8a 00 fb    	se        w10, w1
    15ce:	c0 3a 21    	mov.w     #0x13ac, w0
    15d0:	81 01 07    	rcall     0x18d4 <_strchr>
    15d2:	00 00 e0    	cp0.w     w0
    15d4:	f0 ff 3a    	bra       NZ, 0x15b6 <.L8>
    15d6:	a1 c2 b3    	mov.b     #0x2a, w1
    15d8:	81 4f 55    	sub.b     w10, w1, [w15]
    15da:	0e 00 3a    	bra       NZ, 0x15f8 <.L9>
    15dc:	cf 88 97    	mov.w     [w15-104], w1
    15de:	01 80 e9    	dec2.w    w1, w0
    15e0:	c0 8f 9f    	mov.w     w0, [w15-104]
    15e2:	10 00 78    	mov.w     [w0], w0
    15e4:	c0 9f 9f    	mov.w     w0, [w15-72]
    15e6:	00 00 e0    	cp0.w     w0
    15e8:	05 00 3d    	bra       GE, 0x15f4 <.L10>
    15ea:	00 00 ea    	neg.w     w0, w0
    15ec:	c0 9f 9f    	mov.w     w0, [w15-72]
    15ee:	5f 98 97    	mov.w     [w15-70], w0
    15f0:	00 20 a0    	bset.w    w0, #0x2
    15f2:	d0 9f 9f    	mov.w     w0, [w15-70]

000015f4 <.L10>:
    15f4:	09 04 e8    	inc.w     w9, w8
    15f6:	0f 00 37    	bra       0x1616 <.L11>

000015f8 <.L9>:
    15f8:	c0 9f 9f    	mov.w     w0, [w15-72]
    15fa:	00 00 eb    	clr.w     w0
    15fc:	05 00 37    	bra       0x1608 <.L32>

000015fe <.L14>:
    15fe:	f2 ff 27    	mov.w     #0x7fff, w2
    1600:	82 0f 50    	sub.w     w0, w2, [w15]
    1602:	02 00 32    	bra       Z, 0x1608 <.L32>
    1604:	6a 01 b9    	mul.su    w0, #0xa, w2
    1606:	02 80 40    	add.w     w1, w2, w0

00001608 <.L32>:
    1608:	09 04 78    	mov.w     w9, w8
    160a:	88 04 78    	mov.w     w8, w9
    160c:	b9 00 fb    	se        [w9++], w1
    160e:	01 03 b1    	sub.w     #0x30, w1
    1610:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1612:	f5 ff 36    	bra       LEU, 0x15fe <.L14>
    1614:	c0 9f 9f    	mov.w     w0, [w15-72]

00001616 <.L11>:
    1616:	e0 c2 b3    	mov.b     #0x2e, w0
    1618:	98 4f 10    	subr.b    w0, [w8], [w15]
    161a:	02 00 32    	bra       Z, 0x1620 <.L15>
    161c:	00 80 eb    	setm.w    w0
    161e:	19 00 37    	bra       0x1652 <.L35>

00001620 <.L15>:
    1620:	a0 c2 b3    	mov.b     #0x2a, w0
    1622:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    1624:	07 00 3a    	bra       NZ, 0x1634 <.L17>
    1626:	cf 88 97    	mov.w     [w15-104], w1
    1628:	01 80 e9    	dec2.w    w1, w0
    162a:	c0 8f 9f    	mov.w     w0, [w15-104]
    162c:	10 00 78    	mov.w     [w0], w0
    162e:	a0 9f 9f    	mov.w     w0, [w15-76]
    1630:	08 04 e8    	inc.w     w8, w8
    1632:	10 00 37    	bra       0x1654 <.L16>

00001634 <.L17>:
    1634:	00 00 eb    	clr.w     w0
    1636:	a0 9f 9f    	mov.w     w0, [w15-76]
    1638:	88 00 78    	mov.w     w8, w1
    163a:	05 00 37    	bra       0x1646 <.L33>

0000163c <.L20>:
    163c:	f3 ff 27    	mov.w     #0x7fff, w3
    163e:	83 0f 50    	sub.w     w0, w3, [w15]
    1640:	02 00 32    	bra       Z, 0x1646 <.L33>
    1642:	6a 02 b9    	mul.su    w0, #0xa, w4
    1644:	04 00 41    	add.w     w2, w4, w0

00001646 <.L33>:
    1646:	01 04 78    	mov.w     w1, w8
    1648:	88 00 78    	mov.w     w8, w1
    164a:	31 01 fb    	se        [w1++], w2
    164c:	02 03 b1    	sub.w     #0x30, w2
    164e:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    1650:	f5 ff 36    	bra       LEU, 0x163c <.L20>

00001652 <.L35>:
    1652:	a0 9f 9f    	mov.w     w0, [w15-76]

00001654 <.L16>:
    1654:	98 44 78    	mov.b     [w8], w9
    1656:	89 00 fb    	se        w9, w1
    1658:	80 39 21    	mov.w     #0x1398, w0
    165a:	3c 01 07    	rcall     0x18d4 <_strchr>
    165c:	00 00 e0    	cp0.w     w0
    165e:	02 00 32    	bra       Z, 0x1664 <.L25>
    1660:	08 04 e8    	inc.w     w8, w8
    1662:	01 00 37    	bra       0x1666 <.L21>

00001664 <.L25>:
    1664:	80 44 eb    	clr.b     w9

00001666 <.L21>:
    1666:	c9 7f 9f    	mov.b     w9, [w15-68]
    1668:	80 c6 b3    	mov.b     #0x68, w0
    166a:	80 cf 54    	sub.b     w9, w0, [w15]
    166c:	04 00 3a    	bra       NZ, 0x1676 <.L22>
    166e:	98 cf 14    	subr.b    w9, [w8], [w15]
    1670:	0a 00 3a    	bra       NZ, 0x1686 <.L23>
    1672:	66 40 50    	sub.b     w0, #0x6, w0
    1674:	06 00 37    	bra       0x1682 <.L36>

00001676 <.L22>:
    1676:	c0 c6 b3    	mov.b     #0x6c, w0
    1678:	80 cf 54    	sub.b     w9, w0, [w15]
    167a:	05 00 3a    	bra       NZ, 0x1686 <.L23>
    167c:	98 cf 14    	subr.b    w9, [w8], [w15]
    167e:	03 00 3a    	bra       NZ, 0x1686 <.L23>
    1680:	65 40 40    	add.b     w0, #0x5, w0

00001682 <.L36>:
    1682:	c0 7f 9f    	mov.b     w0, [w15-68]
    1684:	08 04 e8    	inc.w     w8, w8

00001686 <.L23>:
    1686:	18 01 fb    	se        [w8], w2
    1688:	e3 fb 2f    	mov.w     #0xffbe, w3
    168a:	8f 81 41    	add.w     w3, w15, w3
    168c:	81 f9 2f    	mov.w     #0xff98, w1
    168e:	8f 80 40    	add.w     w1, w15, w1
    1690:	a0 f9 2f    	mov.w     #0xff9a, w0
    1692:	0f 00 40    	add.w     w0, w15, w0
    1694:	10 00 07    	rcall     0x16b6 <___Putfld_cdnopuxX>
    1696:	00 00 e0    	cp0.w     w0
    1698:	09 00 3a    	bra       NZ, 0x16ac <.L27>
    169a:	e1 fb 2f    	mov.w     #0xffbe, w1
    169c:	8f 80 40    	add.w     w1, w15, w1
    169e:	a0 f9 2f    	mov.w     #0xff9a, w0
    16a0:	0f 00 40    	add.w     w0, w15, w0
    16a2:	53 02 07    	rcall     0x1b4a <__Puttxt>
    16a4:	00 00 e0    	cp0.w     w0
    16a6:	02 00 35    	bra       LT, 0x16ac <.L27>
    16a8:	08 04 e8    	inc.w     w8, w8
    16aa:	61 ff 37    	bra       0x156e <.L31>

000016ac <.L27>:
    16ac:	00 80 eb    	setm.w    w0

000016ae <.L4>:
    16ae:	4f 05 78    	mov.w     [--w15], w10
    16b0:	4f 04 be    	mov.d     [--w15], w8
    16b2:	00 80 fa    	ulnk      
    16b4:	00 00 06    	return    

000016b6 <___Putfld_cdnopuxX>:
    16b6:	88 1f 78    	mov.w     w8, [w15++]
    16b8:	e4 c6 b3    	mov.b     #0x6e, w4
    16ba:	84 4f 51    	sub.b     w2, w4, [w15]
    16bc:	b6 00 32    	bra       Z, 0x182a <.L7>
    16be:	10 00 3c    	bra       GT, 0x16e0 <.L9>
    16c0:	6b 42 52    	sub.b     w4, #0xb, w4
    16c2:	84 4f 51    	sub.b     w2, w4, [w15]
    16c4:	18 00 32    	bra       Z, 0x16f6 <.L5>
    16c6:	05 00 3c    	bra       GT, 0x16d2 <.L10>
    16c8:	54 c2 b3    	mov.b     #0x25, w4
    16ca:	84 4f 51    	sub.b     w2, w4, [w15]
    16cc:	ee 00 32    	bra       Z, 0x18aa <.L3>
    16ce:	84 c5 b3    	mov.b     #0x58, w4
    16d0:	0f 00 37    	bra       0x16f0 <.L47>

000016d2 <.L10>:
    16d2:	44 c6 b3    	mov.b     #0x64, w4
    16d4:	84 4f 51    	sub.b     w2, w4, [w15]
    16d6:	14 00 32    	bra       Z, 0x1700 <.L6>
    16d8:	65 42 42    	add.b     w4, #0x5, w4
    16da:	84 4f 51    	sub.b     w2, w4, [w15]
    16dc:	e9 00 3a    	bra       NZ, 0x18b0 <.L2>
    16de:	10 00 37    	bra       0x1700 <.L6>

000016e0 <.L9>:
    16e0:	04 c7 b3    	mov.b     #0x70, w4
    16e2:	84 4f 51    	sub.b     w2, w4, [w15]
    16e4:	d5 00 32    	bra       Z, 0x1890 <.L8>
    16e6:	53 00 35    	bra       LT, 0x178e <.L4>
    16e8:	65 42 42    	add.b     w4, #0x5, w4
    16ea:	84 4f 51    	sub.b     w2, w4, [w15]
    16ec:	50 00 32    	bra       Z, 0x178e <.L4>
    16ee:	63 42 42    	add.b     w4, #0x3, w4

000016f0 <.L47>:
    16f0:	84 4f 51    	sub.b     w2, w4, [w15]
    16f2:	de 00 3a    	bra       NZ, 0x18b0 <.L2>
    16f4:	4c 00 37    	bra       0x178e <.L4>

000016f6 <.L5>:
    16f6:	11 81 e9    	dec2.w    [w1], w2
    16f8:	82 08 78    	mov.w     w2, [w1]
    16fa:	f0 00 90    	mov.w     [w0+14], w1
    16fc:	12 41 78    	mov.b     [w2], w2
    16fe:	d6 00 37    	bra       0x18ac <.L53>

00001700 <.L6>:
    1700:	20 62 90    	mov.b     [w0+34], w4
    1702:	c5 c6 b3    	mov.b     #0x6c, w5
    1704:	85 4f 52    	sub.b     w4, w5, [w15]
    1706:	07 00 3a    	bra       NZ, 0x1716 <.L12>
    1708:	91 02 78    	mov.w     [w1], w5
    170a:	64 82 52    	sub.w     w5, #0x4, w4
    170c:	84 08 78    	mov.w     w4, [w1]
    170e:	14 02 be    	mov.d     [w4], w4
    1710:	4f ab de    	asr.w     w5, #0xf, w6
    1712:	86 03 78    	mov.w     w6, w7
    1714:	11 00 37    	bra       0x1738 <.L13>

00001716 <.L12>:
    1716:	15 c7 b3    	mov.b     #0x71, w5
    1718:	85 4f 52    	sub.b     w4, w5, [w15]
    171a:	03 00 32    	bra       Z, 0x1722 <.L43>
    171c:	a5 c6 b3    	mov.b     #0x6a, w5
    171e:	85 4f 52    	sub.b     w4, w5, [w15]
    1720:	06 00 3a    	bra       NZ, 0x172e <.L15>

00001722 <.L43>:
    1722:	91 02 78    	mov.w     [w1], w5
    1724:	68 82 52    	sub.w     w5, #0x8, w4
    1726:	84 08 78    	mov.w     w4, [w1]
    1728:	54 03 be    	mov.d     [++w4], w6
    172a:	44 02 be    	mov.d     [--w4], w4
    172c:	05 00 37    	bra       0x1738 <.L13>

0000172e <.L15>:
    172e:	11 82 e9    	dec2.w    [w1], w4
    1730:	84 08 78    	mov.w     w4, [w1]
    1732:	14 02 78    	mov.w     [w4], w4
    1734:	cf a2 de    	asr.w     w4, #0xf, w5
    1736:	61 2b b9    	mul.su    w5, #0x1, w6

00001738 <.L13>:
    1738:	04 98 be    	mov.d     w4, [w0++]
    173a:	06 90 be    	mov.d     w6, [w0--]
    173c:	a0 60 90    	mov.b     [w0+34], w1
    173e:	88 c6 b3    	mov.b     #0x68, w8
    1740:	88 cf 50    	sub.b     w1, w8, [w15]
    1742:	0d 00 32    	bra       Z, 0x175e <.L19>
    1744:	28 c6 b3    	mov.b     #0x62, w8
    1746:	88 cf 50    	sub.b     w1, w8, [w15]
    1748:	04 00 3a    	bra       NZ, 0x1752 <.L18>
    174a:	04 02 fb    	se        w4, w4
    174c:	cf a2 de    	asr.w     w4, #0xf, w5
    174e:	61 2b b9    	mul.su    w5, #0x1, w6
    1750:	08 00 37    	bra       0x1762 <.L44>

00001752 <.L18>:
    1752:	48 c7 b3    	mov.b     #0x74, w8
    1754:	88 cf 50    	sub.b     w1, w8, [w15]
    1756:	03 00 32    	bra       Z, 0x175e <.L19>
    1758:	66 44 44    	add.b     w8, #0x6, w8
    175a:	88 cf 50    	sub.b     w1, w8, [w15]
    175c:	04 00 3a    	bra       NZ, 0x1766 <.L17>

0000175e <.L19>:
    175e:	cf a2 de    	asr.w     w4, #0xf, w5
    1760:	61 2b b9    	mul.su    w5, #0x1, w6

00001762 <.L44>:
    1762:	04 98 be    	mov.d     w4, [w0++]
    1764:	06 90 be    	mov.d     w6, [w0--]

00001766 <.L17>:
    1766:	30 02 be    	mov.d     [w0++], w4
    1768:	20 03 be    	mov.d     [w0--], w6
    176a:	f0 00 90    	mov.w     [w0+14], w1
    176c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    176e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1770:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1772:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1774:	02 00 3d    	bra       GE, 0x177a <.L20>
    1776:	d4 c2 b3    	mov.b     #0x2d, w4
    1778:	08 00 37    	bra       0x178a <.L45>

0000177a <.L20>:
    177a:	00 12 90    	mov.w     [w0+32], w4
    177c:	04 18 a3    	btst.z    w4, #0x1
    177e:	02 00 32    	bra       Z, 0x1784 <.L22>
    1780:	b4 c2 b3    	mov.b     #0x2b, w4
    1782:	03 00 37    	bra       0x178a <.L45>

00001784 <.L22>:
    1784:	04 08 a3    	btst.z    w4, #0x0
    1786:	4c 00 32    	bra       Z, 0x1820 <.L31>
    1788:	04 c2 b3    	mov.b     #0x20, w4

0000178a <.L45>:
    178a:	84 f1 78    	mov.b     w4, [w3+w1]
    178c:	47 00 37    	bra       0x181c <.L54>

0000178e <.L4>:
    178e:	20 62 90    	mov.b     [w0+34], w4
    1790:	c5 c6 b3    	mov.b     #0x6c, w5
    1792:	85 4f 52    	sub.b     w4, w5, [w15]
    1794:	06 00 3a    	bra       NZ, 0x17a2 <.L23>
    1796:	91 02 78    	mov.w     [w1], w5
    1798:	64 82 52    	sub.w     w5, #0x4, w4
    179a:	84 08 78    	mov.w     w4, [w1]
    179c:	14 02 be    	mov.d     [w4], w4
    179e:	60 33 b8    	mul.uu    w6, #0x0, w6
    17a0:	11 00 37    	bra       0x17c4 <.L24>

000017a2 <.L23>:
    17a2:	15 c7 b3    	mov.b     #0x71, w5
    17a4:	85 4f 52    	sub.b     w4, w5, [w15]
    17a6:	03 00 32    	bra       Z, 0x17ae <.L48>
    17a8:	a5 c6 b3    	mov.b     #0x6a, w5
    17aa:	85 4f 52    	sub.b     w4, w5, [w15]
    17ac:	06 00 3a    	bra       NZ, 0x17ba <.L26>

000017ae <.L48>:
    17ae:	91 02 78    	mov.w     [w1], w5
    17b0:	68 82 52    	sub.w     w5, #0x8, w4
    17b2:	84 08 78    	mov.w     w4, [w1]
    17b4:	54 03 be    	mov.d     [++w4], w6
    17b6:	44 02 be    	mov.d     [--w4], w4
    17b8:	05 00 37    	bra       0x17c4 <.L24>

000017ba <.L26>:
    17ba:	11 82 e9    	dec2.w    [w1], w4
    17bc:	84 08 78    	mov.w     w4, [w1]
    17be:	14 02 78    	mov.w     [w4], w4
    17c0:	80 02 eb    	clr.w     w5
    17c2:	60 33 b8    	mul.uu    w6, #0x0, w6

000017c4 <.L24>:
    17c4:	04 98 be    	mov.d     w4, [w0++]
    17c6:	06 90 be    	mov.d     w6, [w0--]
    17c8:	a0 60 90    	mov.b     [w0+34], w1
    17ca:	88 c6 b3    	mov.b     #0x68, w8
    17cc:	88 cf 50    	sub.b     w1, w8, [w15]
    17ce:	0d 00 32    	bra       Z, 0x17ea <.L30>
    17d0:	28 c6 b3    	mov.b     #0x62, w8
    17d2:	88 cf 50    	sub.b     w1, w8, [w15]
    17d4:	04 00 3a    	bra       NZ, 0x17de <.L29>
    17d6:	04 82 fb    	ze        w4, w4
    17d8:	80 02 eb    	clr.w     w5
    17da:	60 33 b8    	mul.uu    w6, #0x0, w6
    17dc:	08 00 37    	bra       0x17ee <.L49>

000017de <.L29>:
    17de:	48 c7 b3    	mov.b     #0x74, w8
    17e0:	88 cf 50    	sub.b     w1, w8, [w15]
    17e2:	03 00 32    	bra       Z, 0x17ea <.L30>
    17e4:	66 44 44    	add.b     w8, #0x6, w8
    17e6:	88 cf 50    	sub.b     w1, w8, [w15]
    17e8:	04 00 3a    	bra       NZ, 0x17f2 <.L28>

000017ea <.L30>:
    17ea:	80 02 eb    	clr.w     w5
    17ec:	60 33 b8    	mul.uu    w6, #0x0, w6

000017ee <.L49>:
    17ee:	04 98 be    	mov.d     w4, [w0++]
    17f0:	06 90 be    	mov.d     w6, [w0--]

000017f2 <.L28>:
    17f2:	80 10 90    	mov.w     [w0+32], w1
    17f4:	01 38 a3    	btst.z    w1, #0x3
    17f6:	14 00 32    	bra       Z, 0x1820 <.L31>
    17f8:	30 02 be    	mov.d     [w0++], w4
    17fa:	20 03 be    	mov.d     [w0--], w6
    17fc:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    17fe:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1800:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1802:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1804:	0d 00 32    	bra       Z, 0x1820 <.L31>
    1806:	81 c7 b3    	mov.b     #0x78, w1
    1808:	81 4f 51    	sub.b     w2, w1, [w15]
    180a:	03 00 32    	bra       Z, 0x1812 <.L32>
    180c:	81 c5 b3    	mov.b     #0x58, w1
    180e:	81 4f 51    	sub.b     w2, w1, [w15]
    1810:	07 00 3a    	bra       NZ, 0x1820 <.L31>

00001812 <.L32>:
    1812:	f0 00 90    	mov.w     [w0+14], w1
    1814:	04 c3 b3    	mov.b     #0x30, w4
    1816:	84 f1 78    	mov.b     w4, [w3+w1]
    1818:	81 00 e8    	inc.w     w1, w1
    181a:	82 f1 78    	mov.b     w2, [w3+w1]

0000181c <.L54>:
    181c:	81 00 e8    	inc.w     w1, w1
    181e:	71 00 98    	mov.w     w1, [w0+14]

00001820 <.L31>:
    1820:	f0 00 90    	mov.w     [w0+14], w1
    1822:	81 81 41    	add.w     w3, w1, w3
    1824:	63 00 98    	mov.w     w3, [w0+12]
    1826:	82 40 78    	mov.b     w2, w1
    1828:	3e 00 37    	bra       0x18a6 <.L52>

0000182a <.L7>:
    182a:	a0 61 90    	mov.b     [w0+34], w3
    182c:	c4 c6 b3    	mov.b     #0x6c, w4
    182e:	11 81 e9    	dec2.w    [w1], w2
    1830:	84 cf 51    	sub.b     w3, w4, [w15]
    1832:	22 00 32    	bra       Z, 0x1878 <.L37>
    1834:	0a 00 3c    	bra       GT, 0x184a <.L41>
    1836:	64 42 52    	sub.b     w4, #0x4, w4
    1838:	84 cf 51    	sub.b     w3, w4, [w15]
    183a:	25 00 32    	bra       Z, 0x1886 <.L51>
    183c:	04 c2 e8    	inc2.b    w4, w4
    183e:	84 cf 51    	sub.b     w3, w4, [w15]
    1840:	13 00 32    	bra       Z, 0x1868 <.L36>
    1842:	68 42 52    	sub.b     w4, #0x8, w4
    1844:	84 cf 51    	sub.b     w3, w4, [w15]
    1846:	1e 00 3a    	bra       NZ, 0x1884 <.L33>
    1848:	0a 00 37    	bra       0x185e <.L55>

0000184a <.L41>:
    184a:	44 c7 b3    	mov.b     #0x74, w4
    184c:	84 cf 51    	sub.b     w3, w4, [w15]
    184e:	1b 00 32    	bra       Z, 0x1886 <.L51>
    1850:	66 42 42    	add.b     w4, #0x6, w4
    1852:	84 cf 51    	sub.b     w3, w4, [w15]
    1854:	18 00 32    	bra       Z, 0x1886 <.L51>
    1856:	69 42 52    	sub.b     w4, #0x9, w4
    1858:	84 cf 51    	sub.b     w3, w4, [w15]
    185a:	14 00 3a    	bra       NZ, 0x1884 <.L33>
    185c:	05 00 37    	bra       0x1868 <.L36>

0000185e <.L55>:
    185e:	82 08 78    	mov.w     w2, [w1]
    1860:	92 00 78    	mov.w     [w2], w1
    1862:	40 58 90    	mov.b     [w0+28], w0
    1864:	80 48 78    	mov.b     w0, [w1]
    1866:	2c 00 37    	bra       0x18c0 <.L11>

00001868 <.L36>:
    1868:	82 08 78    	mov.w     w2, [w1]
    186a:	92 00 78    	mov.w     [w2], w1
    186c:	60 0a 90    	mov.w     [w0+28], w4
    186e:	cf a2 de    	asr.w     w4, #0xf, w5
    1870:	61 2b b9    	mul.su    w5, #0x1, w6
    1872:	84 98 be    	mov.d     w4, [w1++]
    1874:	86 90 be    	mov.d     w6, [w1--]
    1876:	24 00 37    	bra       0x18c0 <.L11>

00001878 <.L37>:
    1878:	82 08 78    	mov.w     w2, [w1]
    187a:	92 00 78    	mov.w     [w2], w1
    187c:	60 09 90    	mov.w     [w0+28], w2
    187e:	cf 91 de    	asr.w     w2, #0xf, w3
    1880:	82 88 be    	mov.d     w2, [w1]
    1882:	1e 00 37    	bra       0x18c0 <.L11>

00001884 <.L33>:
    1884:	11 81 e9    	dec2.w    [w1], w2

00001886 <.L51>:
    1886:	82 08 78    	mov.w     w2, [w1]
    1888:	92 00 78    	mov.w     [w2], w1
    188a:	60 08 90    	mov.w     [w0+28], w0
    188c:	80 08 78    	mov.w     w0, [w1]
    188e:	18 00 37    	bra       0x18c0 <.L11>

00001890 <.L8>:
    1890:	11 81 e9    	dec2.w    [w1], w2
    1892:	82 08 78    	mov.w     w2, [w1]
    1894:	12 02 78    	mov.w     [w2], w4
    1896:	cf a2 de    	asr.w     w4, #0xf, w5
    1898:	61 2b b9    	mul.su    w5, #0x1, w6
    189a:	04 98 be    	mov.d     w4, [w0++]
    189c:	06 90 be    	mov.d     w6, [w0--]
    189e:	f0 00 90    	mov.w     [w0+14], w1
    18a0:	81 81 41    	add.w     w3, w1, w3
    18a2:	63 00 98    	mov.w     w3, [w0+12]
    18a4:	81 c7 b3    	mov.b     #0x78, w1

000018a6 <.L52>:
    18a6:	22 00 07    	rcall     0x18ec <__Litob>
    18a8:	0b 00 37    	bra       0x18c0 <.L11>

000018aa <.L3>:
    18aa:	f0 00 90    	mov.w     [w0+14], w1

000018ac <.L53>:
    18ac:	82 f1 78    	mov.b     w2, [w3+w1]
    18ae:	06 00 37    	bra       0x18bc <.L50>

000018b0 <.L2>:
    18b0:	f0 00 90    	mov.w     [w0+14], w1
    18b2:	81 81 41    	add.w     w3, w1, w3
    18b4:	02 04 e0    	cp0.b     w2
    18b6:	01 00 3a    	bra       NZ, 0x18ba <.L42>
    18b8:	52 c2 b3    	mov.b     #0x25, w2

000018ba <.L42>:
    18ba:	82 49 78    	mov.b     w2, [w3]

000018bc <.L50>:
    18bc:	81 00 e8    	inc.w     w1, w1
    18be:	71 00 98    	mov.w     w1, [w0+14]

000018c0 <.L11>:
    18c0:	00 00 eb    	clr.w     w0
    18c2:	4f 04 78    	mov.w     [--w15], w8
    18c4:	00 00 06    	return    

000018c6 <_memcpy>:
    18c6:	80 01 78    	mov.w     w0, w3
    18c8:	02 00 37    	bra       0x18ce <.L2>

000018ca <.L3>:
    18ca:	b1 59 78    	mov.b     [w1++], [w3++]
    18cc:	02 01 e9    	dec.w     w2, w2

000018ce <.L2>:
    18ce:	02 00 e0    	cp0.w     w2
    18d0:	fc ff 3a    	bra       NZ, 0x18ca <.L3>
    18d2:	00 00 06    	return    

000018d4 <_strchr>:
    18d4:	02 00 37    	bra       0x18da <.L2>

000018d6 <.L4>:
    18d6:	03 04 e0    	cp0.b     w3
    18d8:	06 00 32    	bra       Z, 0x18e6 <.L5>

000018da <.L2>:
    18da:	00 01 78    	mov.w     w0, w2
    18dc:	02 00 78    	mov.w     w2, w0
    18de:	b0 41 78    	mov.b     [w0++], w3
    18e0:	81 cf 51    	sub.b     w3, w1, [w15]
    18e2:	f9 ff 3a    	bra       NZ, 0x18d6 <.L4>
    18e4:	01 00 37    	bra       0x18e8 <.L3>

000018e6 <.L5>:
    18e6:	00 01 eb    	clr.w     w2

000018e8 <.L3>:
    18e8:	02 00 78    	mov.w     w2, w0
    18ea:	00 00 06    	return    

000018ec <__Litob>:
    18ec:	fc 87 47    	add.w     w15, #0x1c, w15
    18ee:	88 9f be    	mov.d     w8, [w15++]
    18f0:	8a 9f be    	mov.d     w10, [w15++]
    18f2:	8c 9f be    	mov.d     w12, [w15++]
    18f4:	8e 1f 78    	mov.w     w14, [w15++]
    18f6:	00 06 78    	mov.w     w0, w12
    18f8:	80 c5 b3    	mov.b     #0x58, w0
    18fa:	80 cf 50    	sub.b     w1, w0, [w15]
    18fc:	0a 00 32    	bra       Z, 0x1912 <.L35>
    18fe:	77 40 40    	add.b     w0, #0x17, w0
    1900:	80 cf 50    	sub.b     w1, w0, [w15]
    1902:	0a 00 32    	bra       Z, 0x1918 <.L36>
    1904:	69 40 40    	add.b     w0, #0x9, w0
    1906:	80 cf 50    	sub.b     w1, w0, [w15]
    1908:	0b 00 32    	bra       Z, 0x1920 <.L37>
    190a:	70 38 21    	mov.w     #0x1387, w0
    190c:	80 bf 9f    	mov.w     w0, [w15-16]
    190e:	ae 00 20    	mov.w     #0xa, w14
    1910:	0a 00 37    	bra       0x1926 <.L2>

00001912 <.L35>:
    1912:	62 37 21    	mov.w     #0x1376, w2
    1914:	82 bf 9f    	mov.w     w2, [w15-16]
    1916:	06 00 37    	bra       0x1924 <.L46>

00001918 <.L36>:
    1918:	73 38 21    	mov.w     #0x1387, w3
    191a:	83 bf 9f    	mov.w     w3, [w15-16]
    191c:	8e 00 20    	mov.w     #0x8, w14
    191e:	03 00 37    	bra       0x1926 <.L2>

00001920 <.L37>:
    1920:	74 38 21    	mov.w     #0x1387, w4
    1922:	84 bf 9f    	mov.w     w4, [w15-16]

00001924 <.L46>:
    1924:	0e 01 20    	mov.w     #0x10, w14

00001926 <.L2>:
    1926:	3c 02 be    	mov.d     [w12++], w4
    1928:	2c 03 be    	mov.d     [w12--], w6
    192a:	06 05 be    	mov.d     w6, w10
    192c:	04 04 be    	mov.d     w4, w8
    192e:	40 c6 b3    	mov.b     #0x64, w0
    1930:	80 cf 50    	sub.b     w1, w0, [w15]
    1932:	03 00 32    	bra       Z, 0x193a <.L3>
    1934:	65 40 40    	add.b     w0, #0x5, w0
    1936:	80 cf 50    	sub.b     w1, w0, [w15]
    1938:	0b 00 3a    	bra       NZ, 0x1950 <.L4>

0000193a <.L3>:
    193a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    193c:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    193e:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1940:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1942:	06 00 3d    	bra       GE, 0x1950 <.L4>
    1944:	60 00 b8    	mul.uu    w0, #0x0, w0
    1946:	60 11 b8    	mul.uu    w2, #0x0, w2
    1948:	04 04 50    	sub.w     w0, w4, w8
    194a:	85 84 58    	subb.w    w1, w5, w9
    194c:	06 05 59    	subb.w    w2, w6, w10
    194e:	87 85 59    	subb.w    w3, w7, w11

00001950 <.L4>:
    1950:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1952:	04 00 32    	bra       Z, 0x195c <.L38>
    1954:	40 00 20    	mov.w     #0x4, w0
    1956:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1958:	38 00 3a    	bra       NZ, 0x19ca <.L51>
    195a:	01 00 37    	bra       0x195e <.L6>

0000195c <.L38>:
    195c:	30 00 20    	mov.w     #0x3, w0

0000195e <.L6>:
    195e:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1960:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1962:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1964:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1966:	04 00 3a    	bra       NZ, 0x1970 <.L8>
    1968:	dc 08 90    	mov.w     [w12+26], w1
    196a:	8d 01 20    	mov.w     #0x18, w13
    196c:	01 00 e0    	cp0.w     w1
    196e:	06 00 32    	bra       Z, 0x197c <.L9>

00001970 <.L8>:
    1970:	8e 00 e9    	dec.w     w14, w1
    1972:	88 80 60    	and.w     w1, w8, w1
    1974:	8f ba 97    	mov.w     [w15-16], w5
    1976:	e5 c0 78    	mov.b     [w5+w1], w1
    1978:	f1 ef 9f    	mov.b     w1, [w15-17]
    197a:	7d 01 20    	mov.w     #0x17, w13

0000197c <.L9>:
    197c:	80 00 78    	mov.w     w0, w1

0000197e <.LB101>:
    197e:	81 00 e9    	dec.w     w1, w1
    1980:	05 00 33    	bra       N, 0x198c <.LE101>
    1982:	8b 05 d1    	lsr.w     w11, w11
    1984:	0a 85 d3    	rrc.w     w10, w10
    1986:	89 84 d3    	rrc.w     w9, w9
    1988:	08 84 d3    	rrc.w     w8, w8
    198a:	f9 ff 37    	bra       0x197e <.LB101>

0000198c <.LE101>:
    198c:	08 9e be    	mov.d     w8, [w12++]
    198e:	0a 96 be    	mov.d     w10, [w12--]
    1990:	12 00 37    	bra       0x19b6 <.L10>

00001992 <.L12>:
    1992:	8d 06 e9    	dec.w     w13, w13
    1994:	8e 00 e9    	dec.w     w14, w1
    1996:	84 80 60    	and.w     w1, w4, w1
    1998:	0f b9 97    	mov.w     [w15-16], w2
    199a:	e2 c1 78    	mov.b     [w2+w1], w3
    199c:	82 fd 2f    	mov.w     #0xffd8, w2
    199e:	0f 01 41    	add.w     w2, w15, w2
    19a0:	03 f1 7e    	mov.b     w3, [w2+w13]
    19a2:	80 00 78    	mov.w     w0, w1

000019a4 <.LB115>:
    19a4:	81 00 e9    	dec.w     w1, w1
    19a6:	05 00 33    	bra       N, 0x19b2 <.LE115>
    19a8:	87 83 d1    	asr.w     w7, w7
    19aa:	06 83 d3    	rrc.w     w6, w6
    19ac:	85 82 d3    	rrc.w     w5, w5
    19ae:	04 82 d3    	rrc.w     w4, w4
    19b0:	f9 ff 37    	bra       0x19a4 <.LB115>

000019b2 <.LE115>:
    19b2:	04 9e be    	mov.d     w4, [w12++]
    19b4:	06 96 be    	mov.d     w6, [w12--]

000019b6 <.L10>:
    19b6:	3c 02 be    	mov.d     [w12++], w4
    19b8:	2c 03 be    	mov.d     [w12--], w6
    19ba:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    19bc:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    19be:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    19c0:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    19c2:	8b 00 34    	bra       LE, 0x1ada <.L11>
    19c4:	0d 00 e0    	cp0.w     w13
    19c6:	e5 ff 3c    	bra       GT, 0x1992 <.L12>
    19c8:	88 00 37    	bra       0x1ada <.L11>

000019ca <.L51>:
    19ca:	2c 60 90    	mov.b     [w12+34], w0
    19cc:	81 c6 b3    	mov.b     #0x68, w1
    19ce:	81 4f 50    	sub.b     w0, w1, [w15]
    19d0:	0b 00 32    	bra       Z, 0x19e8 <.L14>
    19d2:	06 00 3c    	bra       GT, 0x19e0 <.L16>
    19d4:	00 04 e0    	cp0.b     w0
    19d6:	08 00 32    	bra       Z, 0x19e8 <.L14>
    19d8:	e6 c0 50    	sub.b     w1, #0x6, w1
    19da:	81 4f 50    	sub.b     w0, w1, [w15]
    19dc:	4e 00 3a    	bra       NZ, 0x1a7a <.L13>
    19de:	04 00 37    	bra       0x19e8 <.L14>

000019e0 <.L16>:
    19e0:	c1 c6 b3    	mov.b     #0x6c, w1
    19e2:	81 4f 50    	sub.b     w0, w1, [w15]
    19e4:	4a 00 3a    	bra       NZ, 0x1a7a <.L13>
    19e6:	21 00 37    	bra       0x1a2a <.L52>

000019e8 <.L14>:
    19e8:	08 00 e0    	cp0.w     w8
    19ea:	04 00 3a    	bra       NZ, 0x19f4 <.L17>
    19ec:	5c 08 90    	mov.w     [w12+26], w0
    19ee:	8d 01 20    	mov.w     #0x18, w13
    19f0:	00 00 e0    	cp0.w     w0
    19f2:	06 00 32    	bra       Z, 0x1a00 <.L18>

000019f4 <.L17>:
    19f4:	11 00 09    	repeat    #0x11
    19f6:	0e 84 d8    	div.uw    w8, w14
    19f8:	0f b9 97    	mov.w     [w15-16], w2
    19fa:	e2 c0 78    	mov.b     [w2+w1], w1
    19fc:	f1 ef 9f    	mov.b     w1, [w15-17]
    19fe:	7d 01 20    	mov.w     #0x17, w13

00001a00 <.L18>:
    1a00:	11 00 09    	repeat    #0x11
    1a02:	0e 84 d8    	div.uw    w8, w14
    1a04:	0a 00 37    	bra       0x1a1a <.L47>

00001a06 <.L21>:
    1a06:	11 00 09    	repeat    #0x11
    1a08:	0e 04 d8    	div.sw    w8, w14
    1a0a:	8d 06 e9    	dec.w     w13, w13
    1a0c:	0e 81 b9    	mul.ss    w0, w14, w2
    1a0e:	02 04 54    	sub.w     w8, w2, w8
    1a10:	8f b8 97    	mov.w     [w15-16], w1
    1a12:	61 41 7c    	mov.b     [w1+w8], w2
    1a14:	81 fd 2f    	mov.w     #0xffd8, w1
    1a16:	8f 80 40    	add.w     w1, w15, w1
    1a18:	82 f0 7e    	mov.b     w2, [w1+w13]

00001a1a <.L47>:
    1a1a:	00 04 78    	mov.w     w0, w8
    1a1c:	08 00 e0    	cp0.w     w8
    1a1e:	02 00 32    	bra       Z, 0x1a24 <.L20>
    1a20:	0d 00 e0    	cp0.w     w13
    1a22:	f1 ff 3c    	bra       GT, 0x1a06 <.L21>

00001a24 <.L20>:
    1a24:	cf c4 de    	asr.w     w8, #0xf, w9
    1a26:	61 4d b9    	mul.su    w9, #0x1, w10
    1a28:	25 00 37    	bra       0x1a74 <.L50>

00001a2a <.L52>:
    1a2a:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1a2c:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1a2e:	04 00 3a    	bra       NZ, 0x1a38 <.L22>
    1a30:	5c 08 90    	mov.w     [w12+26], w0
    1a32:	8d 01 20    	mov.w     #0x18, w13
    1a34:	00 00 e0    	cp0.w     w0
    1a36:	07 00 32    	bra       Z, 0x1a46 <.L23>

00001a38 <.L22>:
    1a38:	61 71 b9    	mul.su    w14, #0x1, w2
    1a3a:	08 00 be    	mov.d     w8, w0
    1a3c:	63 01 07    	rcall     0x1d04 <___umodsi3>
    1a3e:	8f b9 97    	mov.w     [w15-16], w3
    1a40:	e3 41 78    	mov.b     [w3+w0], w3
    1a42:	f3 ef 9f    	mov.b     w3, [w15-17]
    1a44:	7d 01 20    	mov.w     #0x17, w13

00001a46 <.L23>:
    1a46:	61 71 b9    	mul.su    w14, #0x1, w2
    1a48:	08 00 be    	mov.d     w8, w0
    1a4a:	4c 01 07    	rcall     0x1ce4 <___udivsi3>
    1a4c:	0b 00 37    	bra       0x1a64 <.L48>

00001a4e <.L26>:
    1a4e:	61 71 b9    	mul.su    w14, #0x1, w2
    1a50:	08 00 be    	mov.d     w8, w0
    1a52:	39 01 07    	rcall     0x1cc6 <___divsi3>
    1a54:	8d 06 e9    	dec.w     w13, w13
    1a56:	00 f1 b9    	mul.ss    w14, w0, w2
    1a58:	02 04 54    	sub.w     w8, w2, w8
    1a5a:	0f ba 97    	mov.w     [w15-16], w4
    1a5c:	e4 42 7c    	mov.b     [w4+w8], w5
    1a5e:	84 fd 2f    	mov.w     #0xffd8, w4
    1a60:	0f 02 42    	add.w     w4, w15, w4
    1a62:	05 f2 7e    	mov.b     w5, [w4+w13]

00001a64 <.L48>:
    1a64:	00 04 be    	mov.d     w0, w8
    1a66:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1a68:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1a6a:	02 00 32    	bra       Z, 0x1a70 <.L25>
    1a6c:	0d 00 e0    	cp0.w     w13
    1a6e:	ef ff 3c    	bra       GT, 0x1a4e <.L26>

00001a70 <.L25>:
    1a70:	4f cd de    	asr.w     w9, #0xf, w10
    1a72:	8a 05 78    	mov.w     w10, w11

00001a74 <.L50>:
    1a74:	08 9e be    	mov.d     w8, [w12++]
    1a76:	0a 96 be    	mov.d     w10, [w12--]
    1a78:	30 00 37    	bra       0x1ada <.L11>

00001a7a <.L13>:
    1a7a:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1a7c:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1a7e:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1a80:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1a82:	04 00 3a    	bra       NZ, 0x1a8c <.L27>
    1a84:	5c 08 90    	mov.w     [w12+26], w0
    1a86:	8d 01 20    	mov.w     #0x18, w13
    1a88:	00 00 e0    	cp0.w     w0
    1a8a:	09 00 32    	bra       Z, 0x1a9e <.L28>

00001a8c <.L27>:
    1a8c:	61 72 b9    	mul.su    w14, #0x1, w4
    1a8e:	61 2b b9    	mul.su    w5, #0x1, w6
    1a90:	08 00 be    	mov.d     w8, w0
    1a92:	0a 01 be    	mov.d     w10, w2
    1a94:	da 01 07    	rcall     0x1e4a <___umoddi3>
    1a96:	0f ba 97    	mov.w     [w15-16], w4
    1a98:	64 42 78    	mov.b     [w4+w0], w4
    1a9a:	f4 ef 9f    	mov.b     w4, [w15-17]
    1a9c:	7d 01 20    	mov.w     #0x17, w13

00001a9e <.L28>:
    1a9e:	61 72 b9    	mul.su    w14, #0x1, w4
    1aa0:	61 2b b9    	mul.su    w5, #0x1, w6
    1aa2:	08 00 be    	mov.d     w8, w0
    1aa4:	0a 01 be    	mov.d     w10, w2
    1aa6:	ca 01 07    	rcall     0x1e3c <___udivdi3>
    1aa8:	0d 00 37    	bra       0x1ac4 <.L49>

00001aaa <.L30>:
    1aaa:	61 72 b9    	mul.su    w14, #0x1, w4
    1aac:	61 2b b9    	mul.su    w5, #0x1, w6
    1aae:	08 00 be    	mov.d     w8, w0
    1ab0:	0a 01 be    	mov.d     w10, w2
    1ab2:	cf 01 07    	rcall     0x1e52 <___divdi3>
    1ab4:	8d 06 e9    	dec.w     w13, w13
    1ab6:	00 f2 b9    	mul.ss    w14, w0, w4
    1ab8:	04 04 54    	sub.w     w8, w4, w8
    1aba:	8f ba 97    	mov.w     [w15-16], w5
    1abc:	65 42 7c    	mov.b     [w5+w8], w4
    1abe:	85 fd 2f    	mov.w     #0xffd8, w5
    1ac0:	8f 82 42    	add.w     w5, w15, w5
    1ac2:	84 f2 7e    	mov.b     w4, [w5+w13]

00001ac4 <.L49>:
    1ac4:	00 9e be    	mov.d     w0, [w12++]
    1ac6:	02 96 be    	mov.d     w2, [w12--]
    1ac8:	3c 04 be    	mov.d     [w12++], w8
    1aca:	2c 05 be    	mov.d     [w12--], w10
    1acc:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1ace:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1ad0:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1ad2:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1ad4:	02 00 34    	bra       LE, 0x1ada <.L11>
    1ad6:	0d 00 e0    	cp0.w     w13
    1ad8:	e8 ff 3c    	bra       GT, 0x1aaa <.L30>

00001ada <.L11>:
    1ada:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1adc:	10 00 3a    	bra       NZ, 0x1afe <.L31>
    1ade:	0c 10 90    	mov.w     [w12+32], w0
    1ae0:	00 38 a3    	btst.z    w0, #0x3
    1ae2:	0d 00 32    	bra       Z, 0x1afe <.L31>
    1ae4:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    1ae6:	06 00 3e    	bra       GTU, 0x1af4 <.L32>
    1ae8:	85 fd 2f    	mov.w     #0xffd8, w5
    1aea:	8f 82 42    	add.w     w5, w15, w5
    1aec:	e5 c0 7e    	mov.b     [w5+w13], w1
    1aee:	00 c3 b3    	mov.b     #0x30, w0
    1af0:	80 cf 50    	sub.b     w1, w0, [w15]
    1af2:	05 00 32    	bra       Z, 0x1afe <.L31>

00001af4 <.L32>:
    1af4:	8d 06 e9    	dec.w     w13, w13
    1af6:	02 c3 b3    	mov.b     #0x30, w2
    1af8:	81 fd 2f    	mov.w     #0xffd8, w1
    1afa:	8f 80 40    	add.w     w1, w15, w1
    1afc:	82 f0 7e    	mov.b     w2, [w1+w13]

00001afe <.L31>:
    1afe:	78 81 16    	subr.w    w13, #0x18, w2
    1b00:	12 0e 98    	mov.w     w2, [w12+18]
    1b02:	6c 00 90    	mov.w     [w12+12], w0
    1b04:	83 fd 2f    	mov.w     #0xffd8, w3
    1b06:	8f 81 41    	add.w     w3, w15, w3
    1b08:	8d 80 41    	add.w     w3, w13, w1
    1b0a:	dd fe 07    	rcall     0x18c6 <_memcpy>
    1b0c:	1c 08 90    	mov.w     [w12+18], w0
    1b0e:	dc 08 90    	mov.w     [w12+26], w1
    1b10:	81 0f 50    	sub.w     w0, w1, [w15]
    1b12:	06 00 3d    	bra       GE, 0x1b20 <.L33>
    1b14:	00 80 50    	sub.w     w1, w0, w0
    1b16:	00 0e 98    	mov.w     w0, [w12+16]
    1b18:	0c 10 90    	mov.w     [w12+32], w0
    1b1a:	00 40 a1    	bclr.w    w0, #0x4
    1b1c:	00 16 98    	mov.w     w0, [w12+32]
    1b1e:	0f 00 37    	bra       0x1b3e <.L1>

00001b20 <.L33>:
    1b20:	01 00 e0    	cp0.w     w1
    1b22:	0d 00 3d    	bra       GE, 0x1b3e <.L1>
    1b24:	8c 10 90    	mov.w     [w12+32], w1
    1b26:	f4 80 60    	and.w     w1, #0x14, w1
    1b28:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    1b2a:	09 00 3a    	bra       NZ, 0x1b3e <.L1>
    1b2c:	7c 09 90    	mov.w     [w12+30], w2
    1b2e:	fc 00 90    	mov.w     [w12+14], w1
    1b30:	81 00 51    	sub.w     w2, w1, w1
    1b32:	0c 09 90    	mov.w     [w12+16], w2
    1b34:	82 80 50    	sub.w     w1, w2, w1
    1b36:	00 80 50    	sub.w     w1, w0, w0
    1b38:	42 40 a9    	bclr.b    0x42, #0x2
    1b3a:	01 00 34    	bra       LE, 0x1b3e <.L1>
    1b3c:	00 0e 98    	mov.w     w0, [w12+16]

00001b3e <.L1>:
    1b3e:	4f 07 78    	mov.w     [--w15], w14
    1b40:	4f 06 be    	mov.d     [--w15], w12
    1b42:	4f 05 be    	mov.d     [--w15], w10
    1b44:	4f 04 be    	mov.d     [--w15], w8
    1b46:	cf 01 b1    	sub.w     #0x1c, w15
    1b48:	00 00 06    	return    

00001b4a <__Puttxt>:
    1b4a:	04 00 fa    	lnk       #0x4
    1b4c:	88 9f be    	mov.d     w8, [w15++]
    1b4e:	8a 9f be    	mov.d     w10, [w15++]
    1b50:	8c 1f 78    	mov.w     w12, [w15++]
    1b52:	00 04 78    	mov.w     w0, w8
    1b54:	01 06 78    	mov.w     w1, w12
    1b56:	f8 0d 90    	mov.w     [w8+30], w11
    1b58:	78 00 90    	mov.w     [w8+14], w0
    1b5a:	80 85 55    	sub.w     w11, w0, w11
    1b5c:	08 08 90    	mov.w     [w8+16], w0
    1b5e:	80 85 55    	sub.w     w11, w0, w11
    1b60:	18 08 90    	mov.w     [w8+18], w0
    1b62:	80 85 55    	sub.w     w11, w0, w11
    1b64:	28 08 90    	mov.w     [w8+20], w0
    1b66:	80 85 55    	sub.w     w11, w0, w11
    1b68:	38 08 90    	mov.w     [w8+22], w0
    1b6a:	80 85 55    	sub.w     w11, w0, w11
    1b6c:	48 08 90    	mov.w     [w8+24], w0
    1b6e:	80 85 55    	sub.w     w11, w0, w11
    1b70:	00 02 22    	mov.w     #0x2020, w0
    1b72:	90 bf 9f    	mov.w     w0, [w15-14]
    1b74:	00 03 23    	mov.w     #0x3030, w0
    1b76:	a0 bf 9f    	mov.w     w0, [w15-12]
    1b78:	08 10 90    	mov.w     [w8+32], w0
    1b7a:	00 28 a3    	btst.z    w0, #0x2
    1b7c:	15 00 3a    	bra       NZ, 0x1ba8 <.L2>
    1b7e:	0b 00 e0    	cp0.w     w11
    1b80:	13 00 34    	bra       LE, 0x1ba8 <.L2>
    1b82:	0b 05 78    	mov.w     w11, w10

00001b84 <.L5>:
    1b84:	8a 04 78    	mov.w     w10, w9
    1b86:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    1b88:	01 00 36    	bra       LEU, 0x1b8c <.L3>
    1b8a:	29 00 20    	mov.w     #0x2, w9

00001b8c <.L3>:
    1b8c:	c8 01 90    	mov.w     [w8+8], w3
    1b8e:	09 01 78    	mov.w     w9, w2
    1b90:	ee 80 57    	sub.w     w15, #0xe, w1
    1b92:	58 00 90    	mov.w     [w8+10], w0
    1b94:	03 00 01    	call      w3
    1b96:	50 04 98    	mov.w     w0, [w8+10]
    1b98:	00 00 e0    	cp0.w     w0
    1b9a:	8c 00 32    	bra       Z, 0x1cb4 <.L29>
    1b9c:	68 08 90    	mov.w     [w8+28], w0
    1b9e:	09 00 40    	add.w     w0, w9, w0
    1ba0:	60 0c 98    	mov.w     w0, [w8+28]
    1ba2:	09 05 55    	sub.w     w10, w9, w10
    1ba4:	42 40 a9    	bclr.b    0x42, #0x2
    1ba6:	ee ff 3c    	bra       GT, 0x1b84 <.L5>

00001ba8 <.L2>:
    1ba8:	78 01 90    	mov.w     [w8+14], w2
    1baa:	02 00 e0    	cp0.w     w2
    1bac:	0c 00 34    	bra       LE, 0x1bc6 <.L6>
    1bae:	c8 01 90    	mov.w     [w8+8], w3
    1bb0:	8c 00 78    	mov.w     w12, w1
    1bb2:	58 00 90    	mov.w     [w8+10], w0
    1bb4:	03 00 01    	call      w3
    1bb6:	50 04 98    	mov.w     w0, [w8+10]
    1bb8:	80 80 eb    	setm.w    w1
    1bba:	00 00 e0    	cp0.w     w0
    1bbc:	7c 00 32    	bra       Z, 0x1cb6 <.L4>
    1bbe:	e8 08 90    	mov.w     [w8+28], w1
    1bc0:	78 00 90    	mov.w     [w8+14], w0
    1bc2:	00 80 40    	add.w     w1, w0, w0
    1bc4:	60 0c 98    	mov.w     w0, [w8+28]

00001bc6 <.L6>:
    1bc6:	88 0c 90    	mov.w     [w8+16], w9

00001bc8 <.L30>:
    1bc8:	09 00 e0    	cp0.w     w9
    1bca:	11 00 34    	bra       LE, 0x1bee <.L7>
    1bcc:	09 05 78    	mov.w     w9, w10
    1bce:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1bd0:	01 00 36    	bra       LEU, 0x1bd4 <.L8>
    1bd2:	2a 00 20    	mov.w     #0x2, w10

00001bd4 <.L8>:
    1bd4:	c8 01 90    	mov.w     [w8+8], w3
    1bd6:	0a 01 78    	mov.w     w10, w2
    1bd8:	ec 80 57    	sub.w     w15, #0xc, w1
    1bda:	58 00 90    	mov.w     [w8+10], w0
    1bdc:	03 00 01    	call      w3
    1bde:	50 04 98    	mov.w     w0, [w8+10]
    1be0:	00 00 e0    	cp0.w     w0
    1be2:	68 00 32    	bra       Z, 0x1cb4 <.L29>
    1be4:	68 08 90    	mov.w     [w8+28], w0
    1be6:	0a 00 40    	add.w     w0, w10, w0
    1be8:	60 0c 98    	mov.w     w0, [w8+28]
    1bea:	8a 84 54    	sub.w     w9, w10, w9
    1bec:	ed ff 37    	bra       0x1bc8 <.L30>

00001bee <.L7>:
    1bee:	18 09 90    	mov.w     [w8+18], w2
    1bf0:	02 00 e0    	cp0.w     w2
    1bf2:	0c 00 34    	bra       LE, 0x1c0c <.L10>
    1bf4:	c8 01 90    	mov.w     [w8+8], w3
    1bf6:	e8 00 90    	mov.w     [w8+12], w1
    1bf8:	58 00 90    	mov.w     [w8+10], w0
    1bfa:	03 00 01    	call      w3
    1bfc:	50 04 98    	mov.w     w0, [w8+10]
    1bfe:	80 80 eb    	setm.w    w1
    1c00:	00 00 e0    	cp0.w     w0
    1c02:	59 00 32    	bra       Z, 0x1cb6 <.L4>
    1c04:	e8 08 90    	mov.w     [w8+28], w1
    1c06:	18 08 90    	mov.w     [w8+18], w0
    1c08:	00 80 40    	add.w     w1, w0, w0
    1c0a:	60 0c 98    	mov.w     w0, [w8+28]

00001c0c <.L10>:
    1c0c:	a8 0c 90    	mov.w     [w8+20], w9

00001c0e <.L31>:
    1c0e:	09 00 e0    	cp0.w     w9
    1c10:	11 00 34    	bra       LE, 0x1c34 <.L11>
    1c12:	09 05 78    	mov.w     w9, w10
    1c14:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1c16:	01 00 36    	bra       LEU, 0x1c1a <.L12>
    1c18:	2a 00 20    	mov.w     #0x2, w10

00001c1a <.L12>:
    1c1a:	c8 01 90    	mov.w     [w8+8], w3
    1c1c:	0a 01 78    	mov.w     w10, w2
    1c1e:	ec 80 57    	sub.w     w15, #0xc, w1
    1c20:	58 00 90    	mov.w     [w8+10], w0
    1c22:	03 00 01    	call      w3
    1c24:	50 04 98    	mov.w     w0, [w8+10]
    1c26:	00 00 e0    	cp0.w     w0
    1c28:	45 00 32    	bra       Z, 0x1cb4 <.L29>
    1c2a:	68 08 90    	mov.w     [w8+28], w0
    1c2c:	0a 00 40    	add.w     w0, w10, w0
    1c2e:	60 0c 98    	mov.w     w0, [w8+28]
    1c30:	8a 84 54    	sub.w     w9, w10, w9
    1c32:	ed ff 37    	bra       0x1c0e <.L31>

00001c34 <.L11>:
    1c34:	38 09 90    	mov.w     [w8+22], w2
    1c36:	02 00 e0    	cp0.w     w2
    1c38:	0e 00 34    	bra       LE, 0x1c56 <.L14>
    1c3a:	e8 00 90    	mov.w     [w8+12], w1
    1c3c:	18 08 90    	mov.w     [w8+18], w0
    1c3e:	80 80 40    	add.w     w1, w0, w1
    1c40:	c8 01 90    	mov.w     [w8+8], w3
    1c42:	58 00 90    	mov.w     [w8+10], w0
    1c44:	03 00 01    	call      w3
    1c46:	50 04 98    	mov.w     w0, [w8+10]
    1c48:	80 80 eb    	setm.w    w1
    1c4a:	00 00 e0    	cp0.w     w0
    1c4c:	34 00 32    	bra       Z, 0x1cb6 <.L4>
    1c4e:	e8 08 90    	mov.w     [w8+28], w1
    1c50:	38 08 90    	mov.w     [w8+22], w0
    1c52:	00 80 40    	add.w     w1, w0, w0
    1c54:	60 0c 98    	mov.w     w0, [w8+28]

00001c56 <.L14>:
    1c56:	c8 0c 90    	mov.w     [w8+24], w9

00001c58 <.L32>:
    1c58:	09 00 e0    	cp0.w     w9
    1c5a:	11 00 34    	bra       LE, 0x1c7e <.L15>
    1c5c:	09 05 78    	mov.w     w9, w10
    1c5e:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1c60:	01 00 36    	bra       LEU, 0x1c64 <.L16>
    1c62:	2a 00 20    	mov.w     #0x2, w10

00001c64 <.L16>:
    1c64:	c8 01 90    	mov.w     [w8+8], w3
    1c66:	0a 01 78    	mov.w     w10, w2
    1c68:	ec 80 57    	sub.w     w15, #0xc, w1
    1c6a:	58 00 90    	mov.w     [w8+10], w0
    1c6c:	03 00 01    	call      w3
    1c6e:	50 04 98    	mov.w     w0, [w8+10]
    1c70:	00 00 e0    	cp0.w     w0
    1c72:	20 00 32    	bra       Z, 0x1cb4 <.L29>
    1c74:	68 08 90    	mov.w     [w8+28], w0
    1c76:	0a 00 40    	add.w     w0, w10, w0
    1c78:	60 0c 98    	mov.w     w0, [w8+28]
    1c7a:	8a 84 54    	sub.w     w9, w10, w9
    1c7c:	ed ff 37    	bra       0x1c58 <.L32>

00001c7e <.L15>:
    1c7e:	08 10 90    	mov.w     [w8+32], w0
    1c80:	80 00 eb    	clr.w     w1
    1c82:	00 28 a3    	btst.z    w0, #0x2
    1c84:	18 00 32    	bra       Z, 0x1cb6 <.L4>
    1c86:	0b 00 e0    	cp0.w     w11
    1c88:	16 00 34    	bra       LE, 0x1cb6 <.L4>
    1c8a:	8b 04 78    	mov.w     w11, w9

00001c8c <.L19>:
    1c8c:	09 05 78    	mov.w     w9, w10
    1c8e:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1c90:	01 00 36    	bra       LEU, 0x1c94 <.L18>
    1c92:	2a 00 20    	mov.w     #0x2, w10

00001c94 <.L18>:
    1c94:	c8 01 90    	mov.w     [w8+8], w3
    1c96:	0a 01 78    	mov.w     w10, w2
    1c98:	ee 80 57    	sub.w     w15, #0xe, w1
    1c9a:	58 00 90    	mov.w     [w8+10], w0
    1c9c:	03 00 01    	call      w3
    1c9e:	50 04 98    	mov.w     w0, [w8+10]
    1ca0:	00 00 e0    	cp0.w     w0
    1ca2:	08 00 32    	bra       Z, 0x1cb4 <.L29>
    1ca4:	68 08 90    	mov.w     [w8+28], w0
    1ca6:	0a 00 40    	add.w     w0, w10, w0
    1ca8:	60 0c 98    	mov.w     w0, [w8+28]
    1caa:	8a 84 54    	sub.w     w9, w10, w9
    1cac:	42 40 a9    	bclr.b    0x42, #0x2
    1cae:	ee ff 3c    	bra       GT, 0x1c8c <.L19>
    1cb0:	80 00 eb    	clr.w     w1
    1cb2:	01 00 37    	bra       0x1cb6 <.L4>

00001cb4 <.L29>:
    1cb4:	80 80 eb    	setm.w    w1

00001cb6 <.L4>:
    1cb6:	01 00 78    	mov.w     w1, w0
    1cb8:	4f 06 78    	mov.w     [--w15], w12
    1cba:	4f 05 be    	mov.d     [--w15], w10
    1cbc:	4f 04 be    	mov.d     [--w15], w8
    1cbe:	00 80 fa    	ulnk      
    1cc0:	00 00 06    	return    

00001cc2 <__Vacopy>:
    1cc2:	01 08 78    	mov.w     w1, [w0]
    1cc4:	00 00 06    	return    

00001cc6 <___divsi3>:
    1cc6:	83 9f 68    	xor.w     w1, w3, [w15++]
    1cc8:	01 00 e0    	cp0.w     w1
    1cca:	02 00 3d    	bra       GE, 0x1cd0 <divtestb>
    1ccc:	60 00 10    	subr.w    w0, #0x0, w0
    1cce:	e0 80 18    	subbr.w   w1, #0x0, w1

00001cd0 <divtestb>:
    1cd0:	03 00 e0    	cp0.w     w3
    1cd2:	02 00 3d    	bra       GE, 0x1cd8 <calcquot>
    1cd4:	60 01 11    	subr.w    w2, #0x0, w2
    1cd6:	e0 81 19    	subbr.w   w3, #0x0, w3

00001cd8 <calcquot>:
    1cd8:	05 00 07    	rcall     0x1ce4 <___udivsi3>
    1cda:	4f 00 e0    	cp0.w     [--w15]
    1cdc:	02 00 3b    	bra       NN, 0x1ce2 <returnq>
    1cde:	60 00 10    	subr.w    w0, #0x0, w0
    1ce0:	e0 80 18    	subbr.w   w1, #0x0, w1

00001ce2 <returnq>:
    1ce2:	00 00 06    	return    

00001ce4 <___udivsi3>:
    1ce4:	60 22 b8    	mul.uu    w4, #0x0, w4
    1ce6:	06 02 20    	mov.w     #0x20, w6

00001ce8 <nextbit>:
    1ce8:	00 00 d0    	sl.w      w0, w0
    1cea:	81 80 d2    	rlc.w     w1, w1
    1cec:	04 82 d2    	rlc.w     w4, w4
    1cee:	85 82 d2    	rlc.w     w5, w5
    1cf0:	00 00 a0    	bset.w    w0, #0x0
    1cf2:	02 02 52    	sub.w     w4, w2, w4
    1cf4:	83 82 5a    	subb.w    w5, w3, w5
    1cf6:	03 00 31    	bra       C, 0x1cfe <iterate>
    1cf8:	02 02 42    	add.w     w4, w2, w4
    1cfa:	83 82 4a    	addc.w    w5, w3, w5
    1cfc:	00 00 a1    	bclr.w    w0, #0x0

00001cfe <iterate>:
    1cfe:	06 03 e9    	dec.w     w6, w6
    1d00:	f3 ff 3a    	bra       NZ, 0x1ce8 <nextbit>
    1d02:	00 00 06    	return    

00001d04 <___umodsi3>:
    1d04:	ef ff 07    	rcall     0x1ce4 <___udivsi3>
    1d06:	04 00 be    	mov.d     w4, w0
    1d08:	00 00 06    	return    

00001d0a <___PplusBdi>:
    1d0a:	88 9f be    	mov.d     w8, [w15++]
    1d0c:	8a 9f be    	mov.d     w10, [w15++]
    1d0e:	30 04 42    	add.w     w4, [w0++], w8
    1d10:	b0 84 4a    	addc.w    w5, [w0++], w9
    1d12:	30 05 4b    	addc.w    w6, [w0++], w10
    1d14:	90 85 4b    	addc.w    w7, [w0], w11
    1d16:	60 00 b1    	sub.w     #0x6, w0
    1d18:	08 98 be    	mov.d     w8, [w0++]
    1d1a:	0a 90 be    	mov.d     w10, [w0--]
    1d1c:	04 40 e1    	cp.w      w8, w4
    1d1e:	05 c8 e1    	cpb.w     w9, w5
    1d20:	06 d0 e1    	cpb.w     w10, w6
    1d22:	07 d8 e1    	cpb.w     w11, w7
    1d24:	02 00 31    	bra       C, 0x1d2a <.L1>
    1d26:	68 00 40    	add.w     w0, #0x8, w0
    1d28:	10 08 e8    	inc.w     [w0], [w0]

00001d2a <.L1>:
    1d2a:	4f 05 be    	mov.d     [--w15], w10
    1d2c:	4f 04 be    	mov.d     [--w15], w8
    1d2e:	00 00 06    	return    

00001d30 <___PminusBdi>:
    1d30:	88 9f be    	mov.d     w8, [w15++]
    1d32:	8a 9f be    	mov.d     w10, [w15++]
    1d34:	30 04 be    	mov.d     [w0++], w8
    1d36:	20 05 be    	mov.d     [w0--], w10
    1d38:	04 18 54    	sub.w     w8, w4, [w0++]
    1d3a:	05 98 5c    	subb.w    w9, w5, [w0++]
    1d3c:	06 18 5d    	subb.w    w10, w6, [w0++]
    1d3e:	07 98 5d    	subb.w    w11, w7, [w0++]
    1d40:	11 00 20    	mov.w     #0x1, w1
    1d42:	04 40 e1    	cp.w      w8, w4
    1d44:	05 c8 e1    	cpb.w     w9, w5
    1d46:	06 d0 e1    	cpb.w     w10, w6
    1d48:	07 d8 e1    	cpb.w     w11, w7
    1d4a:	01 00 39    	bra       NC, 0x1d4e <.L4>
    1d4c:	80 00 eb    	clr.w     w1

00001d4e <.L4>:
    1d4e:	10 88 10    	subr.w    w1, [w0], [w0]
    1d50:	4f 05 be    	mov.d     [--w15], w10
    1d52:	4f 04 be    	mov.d     [--w15], w8
    1d54:	00 00 06    	return    

00001d56 <___udivmoddi3>:
    1d56:	12 00 fa    	lnk       #0x12
    1d58:	88 9f be    	mov.d     w8, [w15++]
    1d5a:	8a 9f be    	mov.d     w10, [w15++]
    1d5c:	8c 9f be    	mov.d     w12, [w15++]
    1d5e:	e0 b7 9f    	mov.w     w0, [w15-20]
    1d60:	f1 b7 9f    	mov.w     w1, [w15-18]
    1d62:	82 bf 9f    	mov.w     w2, [w15-16]
    1d64:	93 bf 9f    	mov.w     w3, [w15-14]
    1d66:	06 05 be    	mov.d     w6, w10
    1d68:	04 04 be    	mov.d     w4, w8
    1d6a:	00 00 eb    	clr.w     w0
    1d6c:	d0 b7 9f    	mov.w     w0, [w15-22]
    1d6e:	c0 b7 9f    	mov.w     w0, [w15-24]
    1d70:	b0 b7 9f    	mov.w     w0, [w15-26]
    1d72:	a0 b7 9f    	mov.w     w0, [w15-28]
    1d74:	90 b7 9f    	mov.w     w0, [w15-30]
    1d76:	00 06 eb    	clr.w     w12

00001d78 <.L9>:
    1d78:	5f b1 97    	mov.w     [w15-22], w2
    1d7a:	cf b0 97    	mov.w     [w15-24], w1
    1d7c:	82 01 41    	add.w     w2, w2, w3
    1d7e:	3f b0 97    	mov.w     [w15-26], w0
    1d80:	02 00 e0    	cp0.w     w2
    1d82:	04 00 3d    	bra       GE, 0x1d8c <.L6>
    1d84:	37 00 07    	rcall     0x1df4 <.LPA0>
    1d86:	7e 80 57    	sub.w     w15, #0x1e, w0
    1d88:	c0 ff 07    	rcall     0x1d0a <___PplusBdi>
    1d8a:	03 00 37    	bra       0x1d92 <.L7>

00001d8c <.L6>:
    1d8c:	33 00 07    	rcall     0x1df4 <.LPA0>
    1d8e:	7e 80 57    	sub.w     w15, #0x1e, w0
    1d90:	cf ff 07    	rcall     0x1d30 <___PminusBdi>

00001d92 <.L7>:
    1d92:	df b6 97    	mov.w     [w15-22], w13
    1d94:	0d 00 e0    	cp0.w     w13
    1d96:	0c 00 35    	bra       LT, 0x1db0 <.L8>
    1d98:	6f b2 97    	mov.w     [w15-20], w4
    1d9a:	ff b2 97    	mov.w     [w15-18], w5
    1d9c:	0f bb 97    	mov.w     [w15-16], w6
    1d9e:	9f bb 97    	mov.w     [w15-14], w7
    1da0:	10 00 20    	mov.w     #0x1, w0
    1da2:	01 00 20    	mov.w     #0x0, w1
    1da4:	60 11 b8    	mul.uu    w2, #0x0, w2
    1da6:	00 02 72    	ior.w     w4, w0, w4
    1da8:	81 82 72    	ior.w     w5, w1, w5
    1daa:	02 03 73    	ior.w     w6, w2, w6
    1dac:	83 83 73    	ior.w     w7, w3, w7
    1dae:	1b 00 07    	rcall     0x1de6 <L0>

00001db0 <.L8>:
    1db0:	0c 06 e8    	inc.w     w12, w12
    1db2:	01 04 20    	mov.w     #0x40, w1
    1db4:	81 0f 56    	sub.w     w12, w1, [w15]
    1db6:	e0 ff 3a    	bra       NZ, 0x1d78 <.L9>
    1db8:	0d 00 e0    	cp0.w     w13
    1dba:	04 00 3d    	bra       GE, 0x1dc4 <.L10>
    1dbc:	08 02 be    	mov.d     w8, w4
    1dbe:	0a 03 be    	mov.d     w10, w6
    1dc0:	7e 80 57    	sub.w     w15, #0x1e, w0
    1dc2:	a3 ff 07    	rcall     0x1d0a <___PplusBdi>

00001dc4 <.L10>:
    1dc4:	5f a8 97    	mov.w     [w15-38], w0
    1dc6:	00 00 e0    	cp0.w     w0
    1dc8:	05 00 3a    	bra       NZ, 0x1dd4 <.L11>
    1dca:	1f b2 97    	mov.w     [w15-30], w4
    1dcc:	af b2 97    	mov.w     [w15-28], w5
    1dce:	3f b3 97    	mov.w     [w15-26], w6
    1dd0:	cf b3 97    	mov.w     [w15-24], w7
    1dd2:	09 00 07    	rcall     0x1de6 <L0>

00001dd4 <.L11>:
    1dd4:	6f b0 97    	mov.w     [w15-20], w0
    1dd6:	ff b0 97    	mov.w     [w15-18], w1
    1dd8:	0f b9 97    	mov.w     [w15-16], w2
    1dda:	9f b9 97    	mov.w     [w15-14], w3
    1ddc:	4f 06 be    	mov.d     [--w15], w12
    1dde:	4f 05 be    	mov.d     [--w15], w10
    1de0:	4f 04 be    	mov.d     [--w15], w8
    1de2:	00 80 fa    	ulnk      
    1de4:	00 00 06    	return    

00001de6 <L0>:
    1de6:	01 00 07    	rcall     0x1dea <.LPA5>
    1de8:	00 00 06    	return    

00001dea <.LPA5>:
    1dea:	a4 b7 9f    	mov.w     w4, [w15-28]
    1dec:	b5 b7 9f    	mov.w     w5, [w15-26]
    1dee:	c6 b7 9f    	mov.w     w6, [w15-24]
    1df0:	d7 b7 9f    	mov.w     w7, [w15-22]
    1df2:	00 00 06    	return    

00001df4 <.LPA0>:
    1df4:	4f 09 de    	lsr.w     w1, #0xf, w2
    1df6:	82 81 71    	ior.w     w3, w2, w3
    1df8:	b3 b7 9f    	mov.w     w3, [w15-26]
    1dfa:	4f 01 de    	lsr.w     w0, #0xf, w2
    1dfc:	81 80 40    	add.w     w1, w1, w1
    1dfe:	82 80 70    	ior.w     w1, w2, w1
    1e00:	a1 b7 9f    	mov.w     w1, [w15-28]
    1e02:	8f b0 97    	mov.w     [w15-32], w1
    1e04:	4f 09 de    	lsr.w     w1, #0xf, w2
    1e06:	00 00 40    	add.w     w0, w0, w0
    1e08:	02 00 70    	ior.w     w0, w2, w0
    1e0a:	90 b7 9f    	mov.w     w0, [w15-30]
    1e0c:	7f a8 97    	mov.w     [w15-34], w0
    1e0e:	4f 01 de    	lsr.w     w0, #0xf, w2
    1e10:	81 80 40    	add.w     w1, w1, w1
    1e12:	82 80 70    	ior.w     w1, w2, w1
    1e14:	81 b7 9f    	mov.w     w1, [w15-32]
    1e16:	0d 00 07    	rcall     0x1e32 <.LPA4>
    1e18:	4f 3a de    	lsr.w     w7, #0xf, w4
    1e1a:	00 00 40    	add.w     w0, w0, w0
    1e1c:	04 00 70    	ior.w     w0, w4, w0
    1e1e:	f0 af 9f    	mov.w     w0, [w15-34]
    1e20:	08 00 07    	rcall     0x1e32 <.LPA4>
    1e22:	04 02 42    	add.w     w4, w4, w4
    1e24:	85 82 4a    	addc.w    w5, w5, w5
    1e26:	06 03 4b    	addc.w    w6, w6, w6
    1e28:	87 83 4b    	addc.w    w7, w7, w7
    1e2a:	df ff 07    	rcall     0x1dea <.LPA5>
    1e2c:	08 02 be    	mov.d     w8, w4
    1e2e:	0a 03 be    	mov.d     w10, w6
    1e30:	00 00 06    	return    

00001e32 <.LPA4>:
    1e32:	2f b2 97    	mov.w     [w15-28], w4
    1e34:	bf b2 97    	mov.w     [w15-26], w5
    1e36:	4f b3 97    	mov.w     [w15-24], w6
    1e38:	df b3 97    	mov.w     [w15-22], w7
    1e3a:	00 00 06    	return    

00001e3c <___udivdi3>:
    1e3c:	88 1f 78    	mov.w     w8, [w15++]
    1e3e:	18 00 20    	mov.w     #0x1, w8
    1e40:	88 1f 78    	mov.w     w8, [w15++]
    1e42:	89 ff 07    	rcall     0x1d56 <___udivmoddi3>
    1e44:	8f 87 e9    	dec2.w    w15, w15
    1e46:	4f 04 78    	mov.w     [--w15], w8
    1e48:	00 00 06    	return    

00001e4a <___umoddi3>:
    1e4a:	80 1f eb    	clr.w     [w15++]
    1e4c:	84 ff 07    	rcall     0x1d56 <___udivmoddi3>
    1e4e:	8f 87 e9    	dec2.w    w15, w15
    1e50:	00 00 06    	return    

00001e52 <___divdi3>:
    1e52:	88 9f be    	mov.d     w8, [w15++]
    1e54:	8a 9f be    	mov.d     w10, [w15++]
    1e56:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1e58:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1e5a:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1e5c:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1e5e:	0c 00 3d    	bra       GE, 0x1e78 <.L15>
    1e60:	60 44 b8    	mul.uu    w8, #0x0, w8
    1e62:	60 55 b8    	mul.uu    w10, #0x0, w10
    1e64:	00 00 54    	sub.w     w8, w0, w0
    1e66:	81 80 5c    	subb.w    w9, w1, w1
    1e68:	02 01 5d    	subb.w    w10, w2, w2
    1e6a:	83 81 5d    	subb.w    w11, w3, w3
    1e6c:	18 00 20    	mov.w     #0x1, w8
    1e6e:	15 00 07    	rcall     0x1e9a <L0>
    1e70:	08 00 3d    	bra       GE, 0x1e82 <.L16>
    1e72:	18 00 07    	rcall     0x1ea4 <.LPA1>
    1e74:	00 04 eb    	clr.w     w8
    1e76:	05 00 37    	bra       0x1e82 <.L16>

00001e78 <.L15>:
    1e78:	00 04 eb    	clr.w     w8
    1e7a:	0f 00 07    	rcall     0x1e9a <L0>
    1e7c:	02 00 3d    	bra       GE, 0x1e82 <.L16>
    1e7e:	12 00 07    	rcall     0x1ea4 <.LPA1>
    1e80:	18 00 20    	mov.w     #0x1, w8

00001e82 <.L16>:
    1e82:	dc ff 07    	rcall     0x1e3c <___udivdi3>
    1e84:	08 00 e0    	cp0.w     w8
    1e86:	06 00 32    	bra       Z, 0x1e94 <.L17>
    1e88:	60 22 b8    	mul.uu    w4, #0x0, w4
    1e8a:	60 33 b8    	mul.uu    w6, #0x0, w6
    1e8c:	00 00 52    	sub.w     w4, w0, w0
    1e8e:	81 80 5a    	subb.w    w5, w1, w1
    1e90:	02 01 5b    	subb.w    w6, w2, w2
    1e92:	83 81 5b    	subb.w    w7, w3, w3

00001e94 <.L17>:
    1e94:	4f 05 be    	mov.d     [--w15], w10
    1e96:	4f 04 be    	mov.d     [--w15], w8
    1e98:	00 00 06    	return    

00001e9a <L0>:
    1e9a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1e9c:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1e9e:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1ea0:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1ea2:	00 00 06    	return    

00001ea4 <.LPA1>:
    1ea4:	60 44 b8    	mul.uu    w8, #0x0, w8
    1ea6:	60 55 b8    	mul.uu    w10, #0x0, w10
    1ea8:	04 02 54    	sub.w     w8, w4, w4
    1eaa:	85 82 5c    	subb.w    w9, w5, w5
    1eac:	06 03 5d    	subb.w    w10, w6, w6
    1eae:	87 83 5d    	subb.w    w11, w7, w7
    1eb0:	00 00 06    	return    

00001eb2 <___moddi3>:
    1eb2:	88 9f be    	mov.d     w8, [w15++]
    1eb4:	8a 9f be    	mov.d     w10, [w15++]
    1eb6:	8c 1f 78    	mov.w     w12, [w15++]
    1eb8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1eba:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1ebc:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1ebe:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1ec0:	0d 00 3d    	bra       GE, 0x1edc <.L21>
    1ec2:	60 44 b8    	mul.uu    w8, #0x0, w8
    1ec4:	60 55 b8    	mul.uu    w10, #0x0, w10
    1ec6:	00 00 54    	sub.w     w8, w0, w0
    1ec8:	81 80 5c    	subb.w    w9, w1, w1
    1eca:	02 01 5d    	subb.w    w10, w2, w2
    1ecc:	83 81 5d    	subb.w    w11, w3, w3
    1ece:	1c 00 20    	mov.w     #0x1, w12
    1ed0:	08 20 e1    	cp.w      w4, w8
    1ed2:	09 a8 e1    	cpb.w     w5, w9
    1ed4:	0a b0 e1    	cpb.w     w6, w10
    1ed6:	0b b8 e1    	cpb.w     w7, w11
    1ed8:	0d 00 3d    	bra       GE, 0x1ef4 <.L22>
    1eda:	08 00 37    	bra       0x1eec <.L26>

00001edc <.L21>:
    1edc:	00 06 eb    	clr.w     w12
    1ede:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1ee0:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1ee2:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1ee4:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1ee6:	06 00 3d    	bra       GE, 0x1ef4 <.L22>
    1ee8:	60 44 b8    	mul.uu    w8, #0x0, w8
    1eea:	60 55 b8    	mul.uu    w10, #0x0, w10

00001eec <.L26>:
    1eec:	04 02 54    	sub.w     w8, w4, w4
    1eee:	85 82 5c    	subb.w    w9, w5, w5
    1ef0:	06 03 5d    	subb.w    w10, w6, w6
    1ef2:	87 83 5d    	subb.w    w11, w7, w7

00001ef4 <.L22>:
    1ef4:	aa ff 07    	rcall     0x1e4a <___umoddi3>
    1ef6:	0c 00 e0    	cp0.w     w12
    1ef8:	06 00 32    	bra       Z, 0x1f06 <.L23>
    1efa:	60 22 b8    	mul.uu    w4, #0x0, w4
    1efc:	60 33 b8    	mul.uu    w6, #0x0, w6
    1efe:	00 00 52    	sub.w     w4, w0, w0
    1f00:	81 80 5a    	subb.w    w5, w1, w1
    1f02:	02 01 5b    	subb.w    w6, w2, w2
    1f04:	83 81 5b    	subb.w    w7, w3, w3

00001f06 <.L23>:
    1f06:	4f 06 78    	mov.w     [--w15], w12
    1f08:	4f 05 be    	mov.d     [--w15], w10
    1f0a:	4f 04 be    	mov.d     [--w15], w8
    1f0c:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	d8 2c 04    	goto      0x2cd8 <__T1Interrupt>
    1026:	00 00 00 
    1028:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	06 2d 04    	goto      0x2d06 <__T2Interrupt>
    1032:	00 00 00 
    1034:	34 2d 04    	goto      0x2d34 <__T3Interrupt>
    1036:	00 00 00 
    1038:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	3e 21 04    	goto      0x213e <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	10 21 04    	goto      0x2110 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	62 2d 04    	goto      0x2d62 <__T4Interrupt>
    1072:	00 00 00 
    1074:	90 2d 04    	goto      0x2d90 <__T5Interrupt>
    1076:	00 00 00 
    1078:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	9a 21 04    	goto      0x219a <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	6c 21 04    	goto      0x216c <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	f6 21 04    	goto      0x21f6 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	c8 21 04    	goto      0x21c8 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	52 22 04    	goto      0x2252 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	24 22 04    	goto      0x2224 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	ba 39 04    	goto      0x39ba <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009f0e <.LC0>:
    9f0e:	25 30       	.word 0x3025
    9f10:	32 78       	.word 0x7832
    9f12:	25 30       	.word 0x3025
    9f14:	32 78       	.word 0x7832
    9f16:	0d 00       	.word 0xd
Disassembly of section .text:

00001f18 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    1f18:	04 00 fa    	lnk       #0x4
    1f1a:	00 0f 78    	mov.w     w0, [w14]
    1f1c:	21 47 98    	mov.b     w1, [w14+2]

00001f1e <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    1f1e:	00 00 00    	nop       

00001f20 <.L2>:
    1f20:	1e 00 78    	mov.w     [w14], w0
    1f22:	10 00 90    	mov.w     [w0+2], w0
    1f24:	90 00 78    	mov.w     [w0], w1
    1f26:	00 20 20    	mov.w     #0x200, w0
    1f28:	00 80 60    	and.w     w1, w0, w0
    1f2a:	00 00 e0    	cp0.w     w0
    1f2c:	f9 ff 3a    	bra       NZ, 0x1f20 <.L2>

00001f2e <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    1f2e:	1e 00 78    	mov.w     [w14], w0
    1f30:	20 00 90    	mov.w     [w0+4], w0
    1f32:	ae 40 90    	mov.b     [w14+2], w1
    1f34:	81 80 fb    	ze        w1, w1
    1f36:	01 08 78    	mov.w     w1, [w0]

00001f38 <.LSM3>:
}
    1f38:	00 80 fa    	ulnk      
    1f3a:	00 00 06    	return    

00001f3c <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1f3c:	02 00 fa    	lnk       #0x2
    1f3e:	00 0f 78    	mov.w     w0, [w14]

00001f40 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    1f40:	00 00 00    	nop       

00001f42 <.L4>:
    1f42:	1e 00 78    	mov.w     [w14], w0
    1f44:	10 00 90    	mov.w     [w0+2], w0
    1f46:	10 00 78    	mov.w     [w0], w0
    1f48:	61 00 60    	and.w     w0, #0x1, w0
    1f4a:	00 00 e0    	cp0.w     w0
    1f4c:	fa ff 32    	bra       Z, 0x1f42 <.L4>

00001f4e <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    1f4e:	1e 00 78    	mov.w     [w14], w0
    1f50:	30 00 90    	mov.w     [w0+6], w0
    1f52:	10 00 78    	mov.w     [w0], w0
    1f54:	00 40 78    	mov.b     w0, w0

00001f56 <.LSM7>:
}
    1f56:	00 80 fa    	ulnk      
    1f58:	00 00 06    	return    

00001f5a <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    1f5a:	04 00 fa    	lnk       #0x4
    1f5c:	00 0f 78    	mov.w     w0, [w14]
    1f5e:	21 47 98    	mov.b     w1, [w14+2]

00001f60 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    1f60:	00 00 00    	nop       

00001f62 <.L6>:
    1f62:	1e 00 78    	mov.w     [w14], w0
    1f64:	d0 10 90    	mov.w     [w0+42], w1
    1f66:	1e 00 78    	mov.w     [w14], w0
    1f68:	20 10 90    	mov.w     [w0+36], w0
    1f6a:	80 8f 50    	sub.w     w1, w0, [w15]
    1f6c:	fa ff 32    	bra       Z, 0x1f62 <.L6>

00001f6e <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    1f6e:	ff 3f fc    	disi      #0x3fff

00001f70 <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    1f70:	1e 00 78    	mov.w     [w14], w0
    1f72:	90 10 90    	mov.w     [w0+34], w1
    1f74:	1e 00 78    	mov.w     [w14], w0
    1f76:	40 10 90    	mov.w     [w0+40], w0
    1f78:	00 80 40    	add.w     w1, w0, w0
    1f7a:	ae 40 90    	mov.b     [w14+2], w1
    1f7c:	01 48 78    	mov.b     w1, [w0]

00001f7e <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    1f7e:	1e 00 78    	mov.w     [w14], w0
    1f80:	40 10 90    	mov.w     [w0+40], w0
    1f82:	80 00 e8    	inc.w     w0, w1
    1f84:	1e 00 78    	mov.w     [w14], w0
    1f86:	20 10 90    	mov.w     [w0+36], w0
    1f88:	00 01 78    	mov.w     w0, w2
    1f8a:	11 00 09    	repeat    #0x11
    1f8c:	82 80 d8    	div.uw    w1, w2
    1f8e:	80 00 fd    	exch      w0, w1
    1f90:	80 00 78    	mov.w     w0, w1
    1f92:	1e 00 78    	mov.w     [w14], w0
    1f94:	41 10 98    	mov.w     w1, [w0+40]

00001f96 <.LSM13>:
    self->TXbuffer.count++;
    1f96:	1e 00 78    	mov.w     [w14], w0
    1f98:	50 10 90    	mov.w     [w0+42], w0
    1f9a:	80 00 e8    	inc.w     w0, w1
    1f9c:	1e 00 78    	mov.w     [w14], w0
    1f9e:	51 10 98    	mov.w     w1, [w0+42]

00001fa0 <.LSM14>:
    enable_interrupts();
    1fa0:	52 20 ef    	clr.w     0x52

00001fa2 <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    1fa2:	1e 00 78    	mov.w     [w14], w0
    1fa4:	d0 10 90    	mov.w     [w0+42], w1
    1fa6:	1e 00 78    	mov.w     [w14], w0
    1fa8:	30 18 90    	mov.w     [w0+54], w0
    1faa:	80 8f 50    	sub.w     w1, w0, [w15]
    1fac:	08 00 39    	bra       NC, 0x1fbe <.L5>

00001fae <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    1fae:	1e 00 78    	mov.w     [w14], w0
    1fb0:	10 00 90    	mov.w     [w0+2], w0
    1fb2:	9e 00 78    	mov.w     [w14], w1
    1fb4:	91 00 90    	mov.w     [w1+2], w1
    1fb6:	11 01 78    	mov.w     [w1], w2
    1fb8:	01 40 20    	mov.w     #0x400, w1
    1fba:	82 80 70    	ior.w     w1, w2, w1
    1fbc:	01 08 78    	mov.w     w1, [w0]

00001fbe <.L5>:
                                                    // transmission
}
    1fbe:	00 80 fa    	ulnk      
    1fc0:	00 00 06    	return    

00001fc2 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    1fc2:	04 00 fa    	lnk       #0x4
    1fc4:	10 07 98    	mov.w     w0, [w14+2]

00001fc6 <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1fc6:	1e 00 90    	mov.w     [w14+2], w0
    1fc8:	50 00 90    	mov.w     [w0+10], w0
    1fca:	9e 00 90    	mov.w     [w14+2], w1
    1fcc:	d1 00 90    	mov.w     [w1+10], w1
    1fce:	11 01 78    	mov.w     [w1], w2
    1fd0:	9e 00 90    	mov.w     [w14+2], w1
    1fd2:	e1 48 90    	mov.b     [w1+14], w1
    1fd4:	81 80 fb    	ze        w1, w1
    1fd6:	13 00 20    	mov.w     #0x1, w3
    1fd8:	81 18 dd    	sl.w      w3, w1, w1
    1fda:	81 80 ea    	com.w     w1, w1
    1fdc:	81 00 61    	and.w     w2, w1, w1
    1fde:	01 08 78    	mov.w     w1, [w0]

00001fe0 <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    1fe0:	1e 00 90    	mov.w     [w14+2], w0
    1fe2:	50 10 90    	mov.w     [w0+42], w0
    1fe4:	00 00 e0    	cp0.w     w0
    1fe6:	27 00 3a    	bra       NZ, 0x2036 <.L13>

00001fe8 <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    1fe8:	1e 00 90    	mov.w     [w14+2], w0
    1fea:	10 00 90    	mov.w     [w0+2], w0
    1fec:	9e 00 90    	mov.w     [w14+2], w1
    1fee:	91 00 90    	mov.w     [w1+2], w1
    1ff0:	11 01 78    	mov.w     [w1], w2
    1ff2:	f1 bf 2f    	mov.w     #0xfbff, w1
    1ff4:	81 00 61    	and.w     w2, w1, w1
    1ff6:	01 08 78    	mov.w     w1, [w0]

00001ff8 <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    1ff8:	1f 00 37    	bra       0x2038 <.L10>

00001ffa <.L12>:
        disable_interrupts();
    1ffa:	ff 3f fc    	disi      #0x3fff

00001ffc <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    1ffc:	1e 00 90    	mov.w     [w14+2], w0
    1ffe:	90 10 90    	mov.w     [w0+34], w1
    2000:	1e 00 90    	mov.w     [w14+2], w0
    2002:	30 10 90    	mov.w     [w0+38], w0
    2004:	00 80 40    	add.w     w1, w0, w0
    2006:	10 4f 78    	mov.b     [w0], [w14]

00002008 <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    2008:	1e 00 90    	mov.w     [w14+2], w0
    200a:	30 10 90    	mov.w     [w0+38], w0
    200c:	80 00 e8    	inc.w     w0, w1
    200e:	1e 00 90    	mov.w     [w14+2], w0
    2010:	20 10 90    	mov.w     [w0+36], w0
    2012:	00 01 78    	mov.w     w0, w2
    2014:	11 00 09    	repeat    #0x11
    2016:	82 80 d8    	div.uw    w1, w2
    2018:	80 00 fd    	exch      w0, w1
    201a:	80 00 78    	mov.w     w0, w1
    201c:	1e 00 90    	mov.w     [w14+2], w0
    201e:	31 10 98    	mov.w     w1, [w0+38]

00002020 <.LSM26>:
        self->TXbuffer.count--;
    2020:	1e 00 90    	mov.w     [w14+2], w0
    2022:	50 10 90    	mov.w     [w0+42], w0
    2024:	80 00 e9    	dec.w     w0, w1
    2026:	1e 00 90    	mov.w     [w14+2], w0
    2028:	51 10 98    	mov.w     w1, [w0+42]

0000202a <.LSM27>:
        enable_interrupts();
    202a:	52 20 ef    	clr.w     0x52

0000202c <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    202c:	1e 00 90    	mov.w     [w14+2], w0
    202e:	20 00 90    	mov.w     [w0+4], w0
    2030:	9e 80 fb    	ze        [w14], w1
    2032:	01 08 78    	mov.w     w1, [w0]
    2034:	01 00 37    	bra       0x2038 <.L10>

00002036 <.L13>:
    2036:	00 00 00    	nop       

00002038 <.L10>:
    2038:	1e 00 90    	mov.w     [w14+2], w0
    203a:	10 00 90    	mov.w     [w0+2], w0
    203c:	90 00 78    	mov.w     [w0], w1
    203e:	00 20 20    	mov.w     #0x200, w0
    2040:	00 80 60    	and.w     w1, w0, w0
    2042:	00 00 e0    	cp0.w     w0
    2044:	04 00 3a    	bra       NZ, 0x204e <.L8>
    2046:	1e 00 90    	mov.w     [w14+2], w0
    2048:	50 10 90    	mov.w     [w0+42], w0
    204a:	00 00 e0    	cp0.w     w0
    204c:	d6 ff 3a    	bra       NZ, 0x1ffa <.L12>

0000204e <.L8>:
    }
}
    204e:	00 80 fa    	ulnk      
    2050:	00 00 06    	return    

00002052 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    2052:	04 00 fa    	lnk       #0x4
    2054:	10 07 98    	mov.w     w0, [w14+2]

00002056 <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    2056:	00 00 00    	nop       

00002058 <.L15>:
    2058:	1e 00 90    	mov.w     [w14+2], w0
    205a:	20 18 90    	mov.w     [w0+52], w0
    205c:	00 00 e0    	cp0.w     w0
    205e:	fc ff 32    	bra       Z, 0x2058 <.L15>

00002060 <.LSM33>:
    disable_interrupts();
    2060:	ff 3f fc    	disi      #0x3fff

00002062 <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    2062:	1e 00 90    	mov.w     [w14+2], w0
    2064:	e0 10 90    	mov.w     [w0+44], w1
    2066:	1e 00 90    	mov.w     [w14+2], w0
    2068:	00 18 90    	mov.w     [w0+48], w0
    206a:	00 80 40    	add.w     w1, w0, w0
    206c:	10 4f 78    	mov.b     [w0], [w14]

0000206e <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    206e:	1e 00 90    	mov.w     [w14+2], w0
    2070:	00 18 90    	mov.w     [w0+48], w0
    2072:	80 00 e8    	inc.w     w0, w1
    2074:	1e 00 90    	mov.w     [w14+2], w0
    2076:	70 10 90    	mov.w     [w0+46], w0
    2078:	00 01 78    	mov.w     w0, w2
    207a:	11 00 09    	repeat    #0x11
    207c:	82 80 d8    	div.uw    w1, w2
    207e:	80 00 fd    	exch      w0, w1
    2080:	80 00 78    	mov.w     w0, w1
    2082:	1e 00 90    	mov.w     [w14+2], w0
    2084:	01 18 98    	mov.w     w1, [w0+48]

00002086 <.LSM36>:
    self->RXbuffer.count--;
    2086:	1e 00 90    	mov.w     [w14+2], w0
    2088:	20 18 90    	mov.w     [w0+52], w0
    208a:	80 00 e9    	dec.w     w0, w1
    208c:	1e 00 90    	mov.w     [w14+2], w0
    208e:	21 18 98    	mov.w     w1, [w0+52]

00002090 <.LSM37>:
    enable_interrupts();
    2090:	52 20 ef    	clr.w     0x52

00002092 <.LSM38>:
    return ch;
    2092:	1e 40 78    	mov.b     [w14], w0

00002094 <.LSM39>:
}
    2094:	00 80 fa    	ulnk      
    2096:	00 00 06    	return    

00002098 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    2098:	02 00 fa    	lnk       #0x2
    209a:	00 0f 78    	mov.w     w0, [w14]

0000209c <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    209c:	1e 00 78    	mov.w     [w14], w0
    209e:	50 00 90    	mov.w     [w0+10], w0
    20a0:	9e 00 78    	mov.w     [w14], w1
    20a2:	d1 00 90    	mov.w     [w1+10], w1
    20a4:	11 01 78    	mov.w     [w1], w2
    20a6:	9e 00 78    	mov.w     [w14], w1
    20a8:	f1 48 90    	mov.b     [w1+15], w1
    20aa:	81 80 fb    	ze        w1, w1
    20ac:	13 00 20    	mov.w     #0x1, w3
    20ae:	81 18 dd    	sl.w      w3, w1, w1
    20b0:	81 80 ea    	com.w     w1, w1
    20b2:	81 00 61    	and.w     w2, w1, w1
    20b4:	01 08 78    	mov.w     w1, [w0]

000020b6 <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    20b6:	1d 00 37    	bra       0x20f2 <.L17>

000020b8 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    20b8:	ff 3f fc    	disi      #0x3fff

000020ba <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    20ba:	1e 00 78    	mov.w     [w14], w0
    20bc:	e0 10 90    	mov.w     [w0+44], w1
    20be:	1e 00 78    	mov.w     [w14], w0
    20c0:	10 18 90    	mov.w     [w0+50], w0
    20c2:	00 80 40    	add.w     w1, w0, w0
    20c4:	9e 00 78    	mov.w     [w14], w1
    20c6:	b1 00 90    	mov.w     [w1+6], w1
    20c8:	91 00 78    	mov.w     [w1], w1
    20ca:	81 40 78    	mov.b     w1, w1
    20cc:	01 48 78    	mov.b     w1, [w0]

000020ce <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    20ce:	1e 00 78    	mov.w     [w14], w0
    20d0:	10 18 90    	mov.w     [w0+50], w0
    20d2:	80 00 e8    	inc.w     w0, w1
    20d4:	1e 00 78    	mov.w     [w14], w0
    20d6:	70 10 90    	mov.w     [w0+46], w0
    20d8:	00 01 78    	mov.w     w0, w2
    20da:	11 00 09    	repeat    #0x11
    20dc:	82 80 d8    	div.uw    w1, w2
    20de:	80 00 fd    	exch      w0, w1
    20e0:	80 00 78    	mov.w     w0, w1
    20e2:	1e 00 78    	mov.w     [w14], w0
    20e4:	11 18 98    	mov.w     w1, [w0+50]

000020e6 <.LSM46>:
        self->RXbuffer.count++;
    20e6:	1e 00 78    	mov.w     [w14], w0
    20e8:	20 18 90    	mov.w     [w0+52], w0
    20ea:	80 00 e8    	inc.w     w0, w1
    20ec:	1e 00 78    	mov.w     [w14], w0
    20ee:	21 18 98    	mov.w     w1, [w0+52]

000020f0 <.LSM47>:
        enable_interrupts();
    20f0:	52 20 ef    	clr.w     0x52

000020f2 <.L17>:
    20f2:	1e 00 78    	mov.w     [w14], w0
    20f4:	10 00 90    	mov.w     [w0+2], w0
    20f6:	10 00 78    	mov.w     [w0], w0
    20f8:	61 00 60    	and.w     w0, #0x1, w0
    20fa:	00 40 78    	mov.b     w0, w0
    20fc:	00 04 e0    	cp0.b     w0
    20fe:	06 00 32    	bra       Z, 0x210c <.L16>

00002100 <.LSM49>:
    2100:	1e 00 78    	mov.w     [w14], w0
    2102:	a0 18 90    	mov.w     [w0+52], w1
    2104:	1e 00 78    	mov.w     [w14], w0
    2106:	70 10 90    	mov.w     [w0+46], w0

00002108 <.LSM50>:
    2108:	80 8f 50    	sub.w     w1, w0, [w15]
    210a:	d6 ff 3a    	bra       NZ, 0x20b8 <.L19>

0000210c <.L16>:
    }
}
    210c:	00 80 fa    	ulnk      
    210e:	00 00 06    	return    

00002110 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    2110:	36 00 f8    	push      0x36
    2112:	80 9f be    	mov.d     w0, [w15++]
    2114:	82 9f be    	mov.d     w2, [w15++]
    2116:	84 9f be    	mov.d     w4, [w15++]
    2118:	86 9f be    	mov.d     w6, [w15++]
    211a:	32 00 f8    	push      0x32
    211c:	34 00 f8    	push      0x34
    211e:	10 00 20    	mov.w     #0x1, w0
    2120:	a0 01 88    	mov.w     w0, 0x34
    2122:	00 20 20    	mov.w     #0x200, w0
    2124:	90 01 88    	mov.w     w0, 0x32
    2126:	00 00 fa    	lnk       #0x0

00002128 <.LSM53>:
    __serviceTxInterrupt(&uart1);
    2128:	c0 1e 21    	mov.w     #0x11ec, w0
    212a:	4b ff 07    	rcall     0x1fc2 <___serviceTxInterrupt>

0000212c <.LSM54>:
}
    212c:	00 80 fa    	ulnk      
    212e:	34 00 f9    	pop       0x34
    2130:	32 00 f9    	pop       0x32
    2132:	4f 03 be    	mov.d     [--w15], w6
    2134:	4f 02 be    	mov.d     [--w15], w4
    2136:	4f 01 be    	mov.d     [--w15], w2
    2138:	4f 00 be    	mov.d     [--w15], w0
    213a:	36 00 f9    	pop       0x36
    213c:	00 40 06    	retfie    

0000213e <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    213e:	36 00 f8    	push      0x36
    2140:	80 9f be    	mov.d     w0, [w15++]
    2142:	82 9f be    	mov.d     w2, [w15++]
    2144:	84 9f be    	mov.d     w4, [w15++]
    2146:	86 9f be    	mov.d     w6, [w15++]
    2148:	32 00 f8    	push      0x32
    214a:	34 00 f8    	push      0x34
    214c:	10 00 20    	mov.w     #0x1, w0
    214e:	a0 01 88    	mov.w     w0, 0x34
    2150:	00 20 20    	mov.w     #0x200, w0
    2152:	90 01 88    	mov.w     w0, 0x32
    2154:	00 00 fa    	lnk       #0x0

00002156 <.LSM56>:
    __serviceRxInterrupt(&uart1);
    2156:	c0 1e 21    	mov.w     #0x11ec, w0
    2158:	9f ff 07    	rcall     0x2098 <___serviceRxInterrupt>

0000215a <.LSM57>:
}
    215a:	00 80 fa    	ulnk      
    215c:	34 00 f9    	pop       0x34
    215e:	32 00 f9    	pop       0x32
    2160:	4f 03 be    	mov.d     [--w15], w6
    2162:	4f 02 be    	mov.d     [--w15], w4
    2164:	4f 01 be    	mov.d     [--w15], w2
    2166:	4f 00 be    	mov.d     [--w15], w0
    2168:	36 00 f9    	pop       0x36
    216a:	00 40 06    	retfie    

0000216c <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    216c:	36 00 f8    	push      0x36
    216e:	80 9f be    	mov.d     w0, [w15++]
    2170:	82 9f be    	mov.d     w2, [w15++]
    2172:	84 9f be    	mov.d     w4, [w15++]
    2174:	86 9f be    	mov.d     w6, [w15++]
    2176:	32 00 f8    	push      0x32
    2178:	34 00 f8    	push      0x34
    217a:	10 00 20    	mov.w     #0x1, w0
    217c:	a0 01 88    	mov.w     w0, 0x34
    217e:	00 20 20    	mov.w     #0x200, w0
    2180:	90 01 88    	mov.w     w0, 0x32
    2182:	00 00 fa    	lnk       #0x0

00002184 <.LSM59>:
    __serviceTxInterrupt(&uart2);
    2184:	80 22 21    	mov.w     #0x1228, w0
    2186:	1d ff 07    	rcall     0x1fc2 <___serviceTxInterrupt>

00002188 <.LSM60>:
}
    2188:	00 80 fa    	ulnk      
    218a:	34 00 f9    	pop       0x34
    218c:	32 00 f9    	pop       0x32
    218e:	4f 03 be    	mov.d     [--w15], w6
    2190:	4f 02 be    	mov.d     [--w15], w4
    2192:	4f 01 be    	mov.d     [--w15], w2
    2194:	4f 00 be    	mov.d     [--w15], w0
    2196:	36 00 f9    	pop       0x36
    2198:	00 40 06    	retfie    

0000219a <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    219a:	36 00 f8    	push      0x36
    219c:	80 9f be    	mov.d     w0, [w15++]
    219e:	82 9f be    	mov.d     w2, [w15++]
    21a0:	84 9f be    	mov.d     w4, [w15++]
    21a2:	86 9f be    	mov.d     w6, [w15++]
    21a4:	32 00 f8    	push      0x32
    21a6:	34 00 f8    	push      0x34
    21a8:	10 00 20    	mov.w     #0x1, w0
    21aa:	a0 01 88    	mov.w     w0, 0x34
    21ac:	00 20 20    	mov.w     #0x200, w0
    21ae:	90 01 88    	mov.w     w0, 0x32
    21b0:	00 00 fa    	lnk       #0x0

000021b2 <.LSM62>:
    __serviceRxInterrupt(&uart2);
    21b2:	80 22 21    	mov.w     #0x1228, w0
    21b4:	71 ff 07    	rcall     0x2098 <___serviceRxInterrupt>

000021b6 <.LSM63>:
}
    21b6:	00 80 fa    	ulnk      
    21b8:	34 00 f9    	pop       0x34
    21ba:	32 00 f9    	pop       0x32
    21bc:	4f 03 be    	mov.d     [--w15], w6
    21be:	4f 02 be    	mov.d     [--w15], w4
    21c0:	4f 01 be    	mov.d     [--w15], w2
    21c2:	4f 00 be    	mov.d     [--w15], w0
    21c4:	36 00 f9    	pop       0x36
    21c6:	00 40 06    	retfie    

000021c8 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    21c8:	36 00 f8    	push      0x36
    21ca:	80 9f be    	mov.d     w0, [w15++]
    21cc:	82 9f be    	mov.d     w2, [w15++]
    21ce:	84 9f be    	mov.d     w4, [w15++]
    21d0:	86 9f be    	mov.d     w6, [w15++]
    21d2:	32 00 f8    	push      0x32
    21d4:	34 00 f8    	push      0x34
    21d6:	10 00 20    	mov.w     #0x1, w0
    21d8:	a0 01 88    	mov.w     w0, 0x34
    21da:	00 20 20    	mov.w     #0x200, w0
    21dc:	90 01 88    	mov.w     w0, 0x32
    21de:	00 00 fa    	lnk       #0x0

000021e0 <.LSM65>:
    __serviceTxInterrupt(&uart3);
    21e0:	40 26 21    	mov.w     #0x1264, w0
    21e2:	ef fe 07    	rcall     0x1fc2 <___serviceTxInterrupt>

000021e4 <.LSM66>:
}
    21e4:	00 80 fa    	ulnk      
    21e6:	34 00 f9    	pop       0x34
    21e8:	32 00 f9    	pop       0x32
    21ea:	4f 03 be    	mov.d     [--w15], w6
    21ec:	4f 02 be    	mov.d     [--w15], w4
    21ee:	4f 01 be    	mov.d     [--w15], w2
    21f0:	4f 00 be    	mov.d     [--w15], w0
    21f2:	36 00 f9    	pop       0x36
    21f4:	00 40 06    	retfie    

000021f6 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    21f6:	36 00 f8    	push      0x36
    21f8:	80 9f be    	mov.d     w0, [w15++]
    21fa:	82 9f be    	mov.d     w2, [w15++]
    21fc:	84 9f be    	mov.d     w4, [w15++]
    21fe:	86 9f be    	mov.d     w6, [w15++]
    2200:	32 00 f8    	push      0x32
    2202:	34 00 f8    	push      0x34
    2204:	10 00 20    	mov.w     #0x1, w0
    2206:	a0 01 88    	mov.w     w0, 0x34
    2208:	00 20 20    	mov.w     #0x200, w0
    220a:	90 01 88    	mov.w     w0, 0x32
    220c:	00 00 fa    	lnk       #0x0

0000220e <.LSM68>:
    __serviceRxInterrupt(&uart3);
    220e:	40 26 21    	mov.w     #0x1264, w0
    2210:	43 ff 07    	rcall     0x2098 <___serviceRxInterrupt>

00002212 <.LSM69>:
}
    2212:	00 80 fa    	ulnk      
    2214:	34 00 f9    	pop       0x34
    2216:	32 00 f9    	pop       0x32
    2218:	4f 03 be    	mov.d     [--w15], w6
    221a:	4f 02 be    	mov.d     [--w15], w4
    221c:	4f 01 be    	mov.d     [--w15], w2
    221e:	4f 00 be    	mov.d     [--w15], w0
    2220:	36 00 f9    	pop       0x36
    2222:	00 40 06    	retfie    

00002224 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    2224:	36 00 f8    	push      0x36
    2226:	80 9f be    	mov.d     w0, [w15++]
    2228:	82 9f be    	mov.d     w2, [w15++]
    222a:	84 9f be    	mov.d     w4, [w15++]
    222c:	86 9f be    	mov.d     w6, [w15++]
    222e:	32 00 f8    	push      0x32
    2230:	34 00 f8    	push      0x34
    2232:	10 00 20    	mov.w     #0x1, w0
    2234:	a0 01 88    	mov.w     w0, 0x34
    2236:	00 20 20    	mov.w     #0x200, w0
    2238:	90 01 88    	mov.w     w0, 0x32
    223a:	00 00 fa    	lnk       #0x0

0000223c <.LSM71>:
    __serviceTxInterrupt(&uart4);
    223c:	00 2a 21    	mov.w     #0x12a0, w0
    223e:	c1 fe 07    	rcall     0x1fc2 <___serviceTxInterrupt>

00002240 <.LSM72>:
}
    2240:	00 80 fa    	ulnk      
    2242:	34 00 f9    	pop       0x34
    2244:	32 00 f9    	pop       0x32
    2246:	4f 03 be    	mov.d     [--w15], w6
    2248:	4f 02 be    	mov.d     [--w15], w4
    224a:	4f 01 be    	mov.d     [--w15], w2
    224c:	4f 00 be    	mov.d     [--w15], w0
    224e:	36 00 f9    	pop       0x36
    2250:	00 40 06    	retfie    

00002252 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    2252:	36 00 f8    	push      0x36
    2254:	80 9f be    	mov.d     w0, [w15++]
    2256:	82 9f be    	mov.d     w2, [w15++]
    2258:	84 9f be    	mov.d     w4, [w15++]
    225a:	86 9f be    	mov.d     w6, [w15++]
    225c:	32 00 f8    	push      0x32
    225e:	34 00 f8    	push      0x34
    2260:	10 00 20    	mov.w     #0x1, w0
    2262:	a0 01 88    	mov.w     w0, 0x34
    2264:	00 20 20    	mov.w     #0x200, w0
    2266:	90 01 88    	mov.w     w0, 0x32
    2268:	00 00 fa    	lnk       #0x0

0000226a <.LSM74>:
    __serviceRxInterrupt(&uart4);
    226a:	00 2a 21    	mov.w     #0x12a0, w0
    226c:	15 ff 07    	rcall     0x2098 <___serviceRxInterrupt>

0000226e <.LSM75>:
}
    226e:	00 80 fa    	ulnk      
    2270:	34 00 f9    	pop       0x34
    2272:	32 00 f9    	pop       0x32
    2274:	4f 03 be    	mov.d     [--w15], w6
    2276:	4f 02 be    	mov.d     [--w15], w4
    2278:	4f 01 be    	mov.d     [--w15], w2
    227a:	4f 00 be    	mov.d     [--w15], w0
    227c:	36 00 f9    	pop       0x36
    227e:	00 40 06    	retfie    

00002280 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2280:	08 00 fa    	lnk       #0x8
    2282:	10 07 98    	mov.w     w0, [w14+2]
    2284:	21 07 98    	mov.w     w1, [w14+4]
    2286:	32 07 98    	mov.w     w2, [w14+6]

00002288 <.LSM77>:
    int16_t i;

    switch (handle) {
    2288:	1e 00 90    	mov.w     [w14+2], w0
    228a:	00 00 e0    	cp0.w     w0
    228c:	25 00 35    	bra       LT, 0x22d8 <.L37>
    228e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2290:	03 00 34    	bra       LE, 0x2298 <.L30>
    2292:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2294:	11 00 32    	bra       Z, 0x22b8 <.L31>

00002296 <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    2296:	21 00 37    	bra       0x22da <.L34>

00002298 <.L30>:
    2298:	00 00 eb    	clr.w     w0
    229a:	00 0f 78    	mov.w     w0, [w14]
    229c:	08 00 37    	bra       0x22ae <.L32>

0000229e <.L33>:
    229e:	2e 00 90    	mov.w     [w14+4], w0
    22a0:	90 40 78    	mov.b     [w0], w1
    22a2:	2e 00 90    	mov.w     [w14+4], w0
    22a4:	00 00 e8    	inc.w     w0, w0
    22a6:	20 07 98    	mov.w     w0, [w14+4]
    22a8:	80 41 80    	mov.w     0x830, w0
    22aa:	19 04 07    	rcall     0x2ade <_uart_putc>

000022ac <.LSM81>:
    22ac:	1e 0f e8    	inc.w     [w14], [w14]

000022ae <.L32>:
    22ae:	9e 00 78    	mov.w     [w14], w1
    22b0:	3e 00 90    	mov.w     [w14+6], w0
    22b2:	80 8f 50    	sub.w     w1, w0, [w15]
    22b4:	f4 ff 39    	bra       NC, 0x229e <.L33>

000022b6 <.LSM82>:
    22b6:	11 00 37    	bra       0x22da <.L34>

000022b8 <.L31>:
    22b8:	00 00 eb    	clr.w     w0
    22ba:	00 0f 78    	mov.w     w0, [w14]
    22bc:	08 00 37    	bra       0x22ce <.L35>

000022be <.L36>:
    22be:	2e 00 90    	mov.w     [w14+4], w0
    22c0:	90 40 78    	mov.b     [w0], w1
    22c2:	2e 00 90    	mov.w     [w14+4], w0
    22c4:	00 00 e8    	inc.w     w0, w0
    22c6:	20 07 98    	mov.w     w0, [w14+4]
    22c8:	90 41 80    	mov.w     0x832, w0
    22ca:	09 04 07    	rcall     0x2ade <_uart_putc>

000022cc <.LSM85>:
    22cc:	1e 0f e8    	inc.w     [w14], [w14]

000022ce <.L35>:
    22ce:	9e 00 78    	mov.w     [w14], w1
    22d0:	3e 00 90    	mov.w     [w14+6], w0
    22d2:	80 8f 50    	sub.w     w1, w0, [w15]
    22d4:	f4 ff 39    	bra       NC, 0x22be <.L36>

000022d6 <.LSM86>:
    22d6:	01 00 37    	bra       0x22da <.L34>

000022d8 <.L37>:
    22d8:	00 00 00    	nop       

000022da <.L34>:
    }
    return len;
    22da:	3e 00 90    	mov.w     [w14+6], w0

000022dc <.LSM89>:
}
    22dc:	00 80 fa    	ulnk      
    22de:	00 00 06    	return    

000022e0 <_init_uart>:

void init_uart(void) {
    22e0:	00 00 fa    	lnk       #0x0

000022e2 <.LSM91>:
    init_pin();
    22e2:	98 07 07    	rcall     0x3214 <_init_pin>

000022e4 <.LSM92>:

    // pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    // pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    22e4:	40 00 20    	mov.w     #0x4, w0
    22e6:	80 1f 78    	mov.w     w0, [w15++]
    22e8:	30 00 20    	mov.w     #0x3, w0
    22ea:	80 1f 78    	mov.w     w0, [w15++]
    22ec:	80 c0 b3    	mov.b     #0x8, w0
    22ee:	80 1f 78    	mov.w     w0, [w15++]
    22f0:	00 40 eb    	clr.b     w0
    22f2:	80 1f 78    	mov.w     w0, [w15++]
    22f4:	40 6a 20    	mov.w     #0x6a4, w0
    22f6:	80 1f 78    	mov.w     w0, [w15++]
    22f8:	40 6a 20    	mov.w     #0x6a4, w0
    22fa:	80 1f 78    	mov.w     w0, [w15++]
    22fc:	b0 c0 b3    	mov.b     #0xb, w0
    22fe:	80 1f 78    	mov.w     w0, [w15++]
    2300:	c0 c0 b3    	mov.b     #0xc, w0
    2302:	80 1f 78    	mov.w     w0, [w15++]
    2304:	47 09 20    	mov.w     #0x94, w7
    2306:	46 08 20    	mov.w     #0x84, w6
    2308:	85 22 20    	mov.w     #0x228, w5
    230a:	64 22 20    	mov.w     #0x226, w4
    230c:	43 22 20    	mov.w     #0x224, w3
    230e:	22 22 20    	mov.w     #0x222, w2
    2310:	01 22 20    	mov.w     #0x220, w1
    2312:	c0 1e 21    	mov.w     #0x11ec, w0
    2314:	51 00 07    	rcall     0x23b8 <_uart_init>
    2316:	f0 87 57    	sub.w     w15, #0x10, w15

00002318 <.LSM93>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    2318:	60 00 20    	mov.w     #0x6, w0
    231a:	80 1f 78    	mov.w     w0, [w15++]
    231c:	50 00 20    	mov.w     #0x5, w0
    231e:	80 1f 78    	mov.w     w0, [w15++]
    2320:	80 c0 b3    	mov.b     #0x8, w0
    2322:	80 1f 78    	mov.w     w0, [w15++]
    2324:	00 40 eb    	clr.b     w0
    2326:	80 1f 78    	mov.w     w0, [w15++]
    2328:	60 6a 20    	mov.w     #0x6a6, w0
    232a:	80 1f 78    	mov.w     w0, [w15++]
    232c:	60 6a 20    	mov.w     #0x6a6, w0
    232e:	80 1f 78    	mov.w     w0, [w15++]
    2330:	e0 c0 b3    	mov.b     #0xe, w0
    2332:	80 1f 78    	mov.w     w0, [w15++]
    2334:	f0 c0 b3    	mov.b     #0xf, w0
    2336:	80 1f 78    	mov.w     w0, [w15++]
    2338:	67 09 20    	mov.w     #0x96, w7
    233a:	66 08 20    	mov.w     #0x86, w6
    233c:	85 23 20    	mov.w     #0x238, w5
    233e:	64 23 20    	mov.w     #0x236, w4
    2340:	43 23 20    	mov.w     #0x234, w3
    2342:	22 23 20    	mov.w     #0x232, w2
    2344:	01 23 20    	mov.w     #0x230, w1
    2346:	80 22 21    	mov.w     #0x1228, w0
    2348:	37 00 07    	rcall     0x23b8 <_uart_init>
    234a:	f0 87 57    	sub.w     w15, #0x10, w15

0000234c <.LSM94>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    234c:	d0 01 20    	mov.w     #0x1d, w0
    234e:	80 1f 78    	mov.w     w0, [w15++]
    2350:	c0 01 20    	mov.w     #0x1c, w0
    2352:	80 1f 78    	mov.w     w0, [w15++]
    2354:	80 c0 b3    	mov.b     #0x8, w0
    2356:	80 1f 78    	mov.w     w0, [w15++]
    2358:	80 c0 b3    	mov.b     #0x8, w0
    235a:	80 1f 78    	mov.w     w0, [w15++]
    235c:	a0 6a 20    	mov.w     #0x6aa, w0
    235e:	80 1f 78    	mov.w     w0, [w15++]
    2360:	20 6a 20    	mov.w     #0x6a2, w0
    2362:	80 1f 78    	mov.w     w0, [w15++]
    2364:	20 c0 b3    	mov.b     #0x2, w0
    2366:	80 1f 78    	mov.w     w0, [w15++]
    2368:	30 c0 b3    	mov.b     #0x3, w0
    236a:	80 1f 78    	mov.w     w0, [w15++]
    236c:	e7 09 20    	mov.w     #0x9e, w7
    236e:	e6 08 20    	mov.w     #0x8e, w6
    2370:	85 25 20    	mov.w     #0x258, w5
    2372:	64 25 20    	mov.w     #0x256, w4
    2374:	43 25 20    	mov.w     #0x254, w3
    2376:	22 25 20    	mov.w     #0x252, w2
    2378:	01 25 20    	mov.w     #0x250, w1
    237a:	40 26 21    	mov.w     #0x1264, w0
    237c:	1d 00 07    	rcall     0x23b8 <_uart_init>
    237e:	f0 87 57    	sub.w     w15, #0x10, w15

00002380 <.LSM95>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    2380:	f0 01 20    	mov.w     #0x1f, w0
    2382:	80 1f 78    	mov.w     w0, [w15++]
    2384:	e0 01 20    	mov.w     #0x1e, w0
    2386:	80 1f 78    	mov.w     w0, [w15++]
    2388:	80 c0 b3    	mov.b     #0x8, w0
    238a:	80 1f 78    	mov.w     w0, [w15++]
    238c:	00 40 eb    	clr.b     w0
    238e:	80 1f 78    	mov.w     w0, [w15++]
    2390:	60 6b 20    	mov.w     #0x6b6, w0
    2392:	80 1f 78    	mov.w     w0, [w15++]
    2394:	60 6b 20    	mov.w     #0x6b6, w0
    2396:	80 1f 78    	mov.w     w0, [w15++]
    2398:	80 c0 b3    	mov.b     #0x8, w0
    239a:	80 1f 78    	mov.w     w0, [w15++]
    239c:	90 c0 b3    	mov.b     #0x9, w0
    239e:	80 1f 78    	mov.w     w0, [w15++]
    23a0:	e7 09 20    	mov.w     #0x9e, w7
    23a2:	e6 08 20    	mov.w     #0x8e, w6
    23a4:	85 2b 20    	mov.w     #0x2b8, w5
    23a6:	64 2b 20    	mov.w     #0x2b6, w4
    23a8:	43 2b 20    	mov.w     #0x2b4, w3
    23aa:	22 2b 20    	mov.w     #0x2b2, w2
    23ac:	01 2b 20    	mov.w     #0x2b0, w1
    23ae:	00 2a 21    	mov.w     #0x12a0, w0
    23b0:	03 00 07    	rcall     0x23b8 <_uart_init>
    23b2:	f0 87 57    	sub.w     w15, #0x10, w15

000023b4 <.LSM96>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    // uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    //           0, NULL, 0, NULL, 0);

    // _stdout = &uart1;
    // _stderr = &uart1;
}
    23b4:	00 80 fa    	ulnk      
    23b6:	00 00 06    	return    

000023b8 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    23b8:	10 00 fa    	lnk       #0x10
    23ba:	00 0f 78    	mov.w     w0, [w14]
    23bc:	11 07 98    	mov.w     w1, [w14+2]
    23be:	22 07 98    	mov.w     w2, [w14+4]
    23c0:	33 07 98    	mov.w     w3, [w14+6]
    23c2:	44 07 98    	mov.w     w4, [w14+8]
    23c4:	55 07 98    	mov.w     w5, [w14+10]
    23c6:	66 07 98    	mov.w     w6, [w14+12]
    23c8:	77 07 98    	mov.w     w7, [w14+14]

000023ca <.LSM98>:
    self->UxMODE = UxMODE;
    23ca:	1e 00 78    	mov.w     [w14], w0
    23cc:	9e 00 90    	mov.w     [w14+2], w1
    23ce:	01 08 78    	mov.w     w1, [w0]

000023d0 <.LSM99>:
    self->UxSTA = UxSTA;
    23d0:	1e 00 78    	mov.w     [w14], w0
    23d2:	ae 00 90    	mov.w     [w14+4], w1
    23d4:	11 00 98    	mov.w     w1, [w0+2]

000023d6 <.LSM100>:
    self->UxTXREG = UxTXREG;
    23d6:	1e 00 78    	mov.w     [w14], w0
    23d8:	be 00 90    	mov.w     [w14+6], w1
    23da:	21 00 98    	mov.w     w1, [w0+4]

000023dc <.LSM101>:
    self->UxRXREG = UxRXREG;
    23dc:	1e 00 78    	mov.w     [w14], w0
    23de:	ce 00 90    	mov.w     [w14+8], w1
    23e0:	31 00 98    	mov.w     w1, [w0+6]

000023e2 <.LSM102>:
    self->UxBRG = UxBRG;
    23e2:	1e 00 78    	mov.w     [w14], w0
    23e4:	de 00 90    	mov.w     [w14+10], w1
    23e6:	41 00 98    	mov.w     w1, [w0+8]

000023e8 <.LSM103>:
    self->IFSy = IFSy;
    23e8:	1e 00 78    	mov.w     [w14], w0
    23ea:	ee 00 90    	mov.w     [w14+12], w1
    23ec:	51 00 98    	mov.w     w1, [w0+10]

000023ee <.LSM104>:
    self->IECy = IECy;
    23ee:	1e 00 78    	mov.w     [w14], w0
    23f0:	fe 00 90    	mov.w     [w14+14], w1
    23f2:	61 00 98    	mov.w     w1, [w0+12]

000023f4 <.LSM105>:
    self->UxTXIF = UxTXIF;
    23f4:	1e 00 78    	mov.w     [w14], w0
    23f6:	8e f8 97    	mov.b     [w14-8], w1
    23f8:	61 48 98    	mov.b     w1, [w0+14]

000023fa <.LSM106>:
    self->UxRXIF = UxRXIF;
    23fa:	1e 00 78    	mov.w     [w14], w0
    23fc:	ee f0 97    	mov.b     [w14-10], w1
    23fe:	71 48 98    	mov.b     w1, [w0+15]

00002400 <.LSM107>:
    self->RXrpinr = RXrpinr;
    2400:	1e 00 78    	mov.w     [w14], w0
    2402:	ae b8 97    	mov.w     [w14-12], w1
    2404:	01 08 98    	mov.w     w1, [w0+16]

00002406 <.LSM108>:
    self->CTSrpinr = CTSrpinr;
    2406:	1e 00 78    	mov.w     [w14], w0
    2408:	9e b8 97    	mov.w     [w14-14], w1
    240a:	11 08 98    	mov.w     w1, [w0+18]

0000240c <.LSM109>:
    self->RXrpshift = RXrpshift;
    240c:	1e 00 78    	mov.w     [w14], w0
    240e:	8e f0 97    	mov.b     [w14-16], w1
    2410:	41 50 98    	mov.b     w1, [w0+20]

00002412 <.LSM110>:
    self->CTSrpshift = CTSrpshift;
    2412:	1e 00 78    	mov.w     [w14], w0
    2414:	ee e8 97    	mov.b     [w14-18], w1
    2416:	51 50 98    	mov.b     w1, [w0+21]

00002418 <.LSM111>:
    self->TXrpnum = TXrpnum;
    2418:	1e 00 78    	mov.w     [w14], w0
    241a:	ee b0 97    	mov.w     [w14-20], w1
    241c:	31 08 98    	mov.w     w1, [w0+22]

0000241e <.LSM112>:
    self->RTSrpnum = RTSrpnum;
    241e:	1e 00 78    	mov.w     [w14], w0
    2420:	de b0 97    	mov.w     [w14-22], w1
    2422:	41 08 98    	mov.w     w1, [w0+24]

00002424 <.LSM113>:
    self->TX = NULL;
    2424:	1e 00 78    	mov.w     [w14], w0
    2426:	80 00 eb    	clr.w     w1
    2428:	51 08 98    	mov.w     w1, [w0+26]

0000242a <.LSM114>:
    self->RX = NULL;
    242a:	1e 00 78    	mov.w     [w14], w0
    242c:	80 00 eb    	clr.w     w1
    242e:	61 08 98    	mov.w     w1, [w0+28]

00002430 <.LSM115>:
    self->RTS = NULL;
    2430:	1e 00 78    	mov.w     [w14], w0
    2432:	80 00 eb    	clr.w     w1
    2434:	71 08 98    	mov.w     w1, [w0+30]

00002436 <.LSM116>:
    self->CTS = NULL;
    2436:	1e 00 78    	mov.w     [w14], w0
    2438:	80 00 eb    	clr.w     w1
    243a:	01 10 98    	mov.w     w1, [w0+32]

0000243c <.LSM117>:
    self->TXbuffer.data = NULL;
    243c:	1e 00 78    	mov.w     [w14], w0
    243e:	80 00 eb    	clr.w     w1
    2440:	11 10 98    	mov.w     w1, [w0+34]

00002442 <.LSM118>:
    self->TXbuffer.length = 0;
    2442:	1e 00 78    	mov.w     [w14], w0
    2444:	80 00 eb    	clr.w     w1
    2446:	21 10 98    	mov.w     w1, [w0+36]

00002448 <.LSM119>:
    self->TXbuffer.head = 0;
    2448:	1e 00 78    	mov.w     [w14], w0
    244a:	80 00 eb    	clr.w     w1
    244c:	31 10 98    	mov.w     w1, [w0+38]

0000244e <.LSM120>:
    self->TXbuffer.tail = 0;
    244e:	1e 00 78    	mov.w     [w14], w0
    2450:	80 00 eb    	clr.w     w1
    2452:	41 10 98    	mov.w     w1, [w0+40]

00002454 <.LSM121>:
    self->TXbuffer.count = 0;
    2454:	1e 00 78    	mov.w     [w14], w0
    2456:	80 00 eb    	clr.w     w1
    2458:	51 10 98    	mov.w     w1, [w0+42]

0000245a <.LSM122>:
    self->RXbuffer.data = NULL;
    245a:	1e 00 78    	mov.w     [w14], w0
    245c:	80 00 eb    	clr.w     w1
    245e:	61 10 98    	mov.w     w1, [w0+44]

00002460 <.LSM123>:
    self->RXbuffer.length = 0;
    2460:	1e 00 78    	mov.w     [w14], w0
    2462:	80 00 eb    	clr.w     w1
    2464:	71 10 98    	mov.w     w1, [w0+46]

00002466 <.LSM124>:
    self->RXbuffer.head = 0;
    2466:	1e 00 78    	mov.w     [w14], w0
    2468:	80 00 eb    	clr.w     w1
    246a:	01 18 98    	mov.w     w1, [w0+48]

0000246c <.LSM125>:
    self->RXbuffer.tail = 0;
    246c:	1e 00 78    	mov.w     [w14], w0
    246e:	80 00 eb    	clr.w     w1
    2470:	11 18 98    	mov.w     w1, [w0+50]

00002472 <.LSM126>:
    self->RXbuffer.count = 0;
    2472:	1e 00 78    	mov.w     [w14], w0
    2474:	80 00 eb    	clr.w     w1
    2476:	21 18 98    	mov.w     w1, [w0+52]

00002478 <.LSM127>:
    self->TXthreshold = 1;
    2478:	1e 00 78    	mov.w     [w14], w0
    247a:	11 00 20    	mov.w     #0x1, w1
    247c:	31 18 98    	mov.w     w1, [w0+54]

0000247e <.LSM128>:
    self->putc = NULL;
    247e:	1e 00 78    	mov.w     [w14], w0
    2480:	80 00 eb    	clr.w     w1
    2482:	41 18 98    	mov.w     w1, [w0+56]

00002484 <.LSM129>:
    self->getc = NULL;
    2484:	1e 00 78    	mov.w     [w14], w0
    2486:	80 00 eb    	clr.w     w1
    2488:	51 18 98    	mov.w     w1, [w0+58]

0000248a <.LSM130>:
}
    248a:	00 80 fa    	ulnk      
    248c:	00 00 06    	return    

0000248e <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    248e:	10 00 fa    	lnk       #0x10
    2490:	88 1f 78    	mov.w     w8, [w15++]
    2492:	00 0f 78    	mov.w     w0, [w14]
    2494:	11 07 98    	mov.w     w1, [w14+2]
    2496:	22 07 98    	mov.w     w2, [w14+4]
    2498:	33 07 98    	mov.w     w3, [w14+6]
    249a:	44 07 98    	mov.w     w4, [w14+8]
    249c:	56 07 98    	mov.w     w6, [w14+10]
    249e:	67 07 98    	mov.w     w7, [w14+12]
    24a0:	65 4f 98    	mov.b     w5, [w14+14]

000024a2 <.LSM132>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    24a2:	1e 00 78    	mov.w     [w14], w0
    24a4:	10 00 78    	mov.w     [w0], w0
    24a6:	80 00 eb    	clr.w     w1
    24a8:	01 08 78    	mov.w     w1, [w0]

000024aa <.LSM133>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    24aa:	1e 00 90    	mov.w     [w14+2], w0
    24ac:	60 00 90    	mov.w     [w0+12], w0
    24ae:	e1 0f 40    	add.w     w0, #0x1, [w15]
    24b0:	0e 02 32    	bra       Z, 0x28ce <.L73>
    24b2:	2e 00 90    	mov.w     [w14+4], w0
    24b4:	60 00 90    	mov.w     [w0+12], w0
    24b6:	e1 0f 40    	add.w     w0, #0x1, [w15]
    24b8:	0c 02 32    	bra       Z, 0x28d2 <.L74>

000024ba <.LSM134>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    24ba:	1e 00 90    	mov.w     [w14+2], w0
    24bc:	00 08 90    	mov.w     [w0+16], w0
    24be:	00 00 e0    	cp0.w     w0
    24c0:	69 00 3a    	bra       NZ, 0x2594 <.L44>
    24c2:	2e 00 90    	mov.w     [w14+4], w0
    24c4:	00 08 90    	mov.w     [w0+16], w0
    24c6:	00 00 e0    	cp0.w     w0
    24c8:	65 00 3a    	bra       NZ, 0x2594 <.L44>

000024ca <.LSM135>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    24ca:	1e 00 90    	mov.w     [w14+2], w0
    24cc:	0a 08 07    	rcall     0x34e2 <_pin_digitalOut>

000024ce <.LSM136>:
        pin_set(TX);
    24ce:	1e 00 90    	mov.w     [w14+2], w0
    24d0:	65 08 07    	rcall     0x359c <_pin_set>

000024d2 <.LSM137>:
        pin_digitalIn(RX);
    24d2:	2e 00 90    	mov.w     [w14+4], w0
    24d4:	df 07 07    	rcall     0x3494 <_pin_digitalIn>

000024d6 <.LSM138>:
        self->TX = TX;
    24d6:	1e 00 78    	mov.w     [w14], w0
    24d8:	9e 00 90    	mov.w     [w14+2], w1
    24da:	51 08 98    	mov.w     w1, [w0+26]

000024dc <.LSM139>:
        TX->owner = (void *)self;
    24dc:	1e 00 90    	mov.w     [w14+2], w0
    24de:	9e 00 78    	mov.w     [w14], w1
    24e0:	01 08 98    	mov.w     w1, [w0+16]

000024e2 <.LSM140>:
        TX->write = NULL;
    24e2:	1e 00 90    	mov.w     [w14+2], w0
    24e4:	80 00 eb    	clr.w     w1
    24e6:	11 08 98    	mov.w     w1, [w0+18]

000024e8 <.LSM141>:
        TX->read = NULL;
    24e8:	1e 00 90    	mov.w     [w14+2], w0
    24ea:	80 00 eb    	clr.w     w1
    24ec:	21 08 98    	mov.w     w1, [w0+20]

000024ee <.LSM142>:
        self->RX = RX;
    24ee:	1e 00 78    	mov.w     [w14], w0
    24f0:	ae 00 90    	mov.w     [w14+4], w1
    24f2:	61 08 98    	mov.w     w1, [w0+28]

000024f4 <.LSM143>:
        RX->owner = (void *)self;
    24f4:	2e 00 90    	mov.w     [w14+4], w0
    24f6:	9e 00 78    	mov.w     [w14], w1
    24f8:	01 08 98    	mov.w     w1, [w0+16]

000024fa <.LSM144>:
        RX->write = NULL;
    24fa:	2e 00 90    	mov.w     [w14+4], w0
    24fc:	80 00 eb    	clr.w     w1
    24fe:	11 08 98    	mov.w     w1, [w0+18]

00002500 <.LSM145>:
        RX->read = NULL;
    2500:	2e 00 90    	mov.w     [w14+4], w0
    2502:	80 00 eb    	clr.w     w1
    2504:	21 08 98    	mov.w     w1, [w0+20]

00002506 <.LSM146>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2506:	11 3a 80    	mov.w     0x742, w1
    2508:	f0 0b 20    	mov.w     #0xbf, w0
    250a:	00 81 60    	and.w     w1, w0, w2
    250c:	60 04 20    	mov.w     #0x46, w0
    250e:	71 05 20    	mov.w     #0x57, w1
    2510:	23 74 20    	mov.w     #0x742, w3
    2512:	80 49 78    	mov.b     w0, [w3]
    2514:	81 49 78    	mov.b     w1, [w3]
    2516:	82 49 78    	mov.b     w2, [w3]

00002518 <.LSM147>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    2518:	1e 00 90    	mov.w     [w14+2], w0
    251a:	70 00 90    	mov.w     [w0+14], w0
    251c:	9e 00 90    	mov.w     [w14+2], w1
    251e:	f1 00 90    	mov.w     [w1+14], w1
    2520:	11 01 78    	mov.w     [w1], w2
    2522:	9e 00 90    	mov.w     [w14+2], w1
    2524:	a1 48 90    	mov.b     [w1+10], w1
    2526:	81 80 fb    	ze        w1, w1
    2528:	f3 03 20    	mov.w     #0x3f, w3
    252a:	81 18 dd    	sl.w      w3, w1, w1
    252c:	81 80 ea    	com.w     w1, w1
    252e:	81 00 61    	and.w     w2, w1, w1
    2530:	01 08 78    	mov.w     w1, [w0]

00002532 <.LSM148>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    2532:	1e 00 90    	mov.w     [w14+2], w0
    2534:	70 00 90    	mov.w     [w0+14], w0
    2536:	9e 00 90    	mov.w     [w14+2], w1
    2538:	f1 00 90    	mov.w     [w1+14], w1
    253a:	11 01 78    	mov.w     [w1], w2
    253c:	9e 00 78    	mov.w     [w14], w1
    253e:	b1 09 90    	mov.w     [w1+22], w3
    2540:	9e 00 90    	mov.w     [w14+2], w1
    2542:	a1 48 90    	mov.b     [w1+10], w1
    2544:	81 80 fb    	ze        w1, w1
    2546:	81 18 dd    	sl.w      w3, w1, w1
    2548:	82 80 70    	ior.w     w1, w2, w1
    254a:	01 08 78    	mov.w     w1, [w0]

0000254c <.LSM149>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    254c:	1e 00 78    	mov.w     [w14], w0
    254e:	00 08 90    	mov.w     [w0+16], w0
    2550:	9e 00 78    	mov.w     [w14], w1
    2552:	81 08 90    	mov.w     [w1+16], w1
    2554:	11 01 78    	mov.w     [w1], w2
    2556:	9e 00 78    	mov.w     [w14], w1
    2558:	c1 50 90    	mov.b     [w1+20], w1
    255a:	81 80 fb    	ze        w1, w1
    255c:	f3 03 20    	mov.w     #0x3f, w3
    255e:	81 18 dd    	sl.w      w3, w1, w1
    2560:	81 80 ea    	com.w     w1, w1
    2562:	81 00 61    	and.w     w2, w1, w1
    2564:	01 08 78    	mov.w     w1, [w0]

00002566 <.LSM150>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    2566:	1e 00 78    	mov.w     [w14], w0
    2568:	00 08 90    	mov.w     [w0+16], w0
    256a:	9e 00 78    	mov.w     [w14], w1
    256c:	81 08 90    	mov.w     [w1+16], w1
    256e:	11 01 78    	mov.w     [w1], w2
    2570:	ae 00 90    	mov.w     [w14+4], w1
    2572:	e1 01 90    	mov.w     [w1+12], w3
    2574:	9e 00 78    	mov.w     [w14], w1
    2576:	c1 50 90    	mov.b     [w1+20], w1
    2578:	81 80 fb    	ze        w1, w1
    257a:	81 18 dd    	sl.w      w3, w1, w1
    257c:	82 80 70    	ior.w     w1, w2, w1
    257e:	01 08 78    	mov.w     w1, [w0]

00002580 <.LSM151>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2580:	11 3a 80    	mov.w     0x742, w1
    2582:	00 04 20    	mov.w     #0x40, w0
    2584:	01 01 70    	ior.w     w0, w1, w2
    2586:	60 04 20    	mov.w     #0x46, w0
    2588:	71 05 20    	mov.w     #0x57, w1
    258a:	23 74 20    	mov.w     #0x742, w3
    258c:	80 49 78    	mov.b     w0, [w3]
    258e:	81 49 78    	mov.b     w1, [w3]
    2590:	82 49 78    	mov.b     w2, [w3]
    2592:	0a 00 37    	bra       0x25a8 <.L45>

00002594 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    2594:	1e 00 78    	mov.w     [w14], w0
    2596:	d0 08 90    	mov.w     [w0+26], w1
    2598:	1e 00 90    	mov.w     [w14+2], w0
    259a:	80 8f 50    	sub.w     w1, w0, [w15]
    259c:	9c 01 3a    	bra       NZ, 0x28d6 <.L75>
    259e:	1e 00 78    	mov.w     [w14], w0
    25a0:	e0 08 90    	mov.w     [w0+28], w1
    25a2:	2e 00 90    	mov.w     [w14+4], w0
    25a4:	80 8f 50    	sub.w     w1, w0, [w15]
    25a6:	99 01 3a    	bra       NZ, 0x28da <.L76>

000025a8 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    25a8:	3e 00 90    	mov.w     [w14+6], w0
    25aa:	00 00 e0    	cp0.w     w0
    25ac:	87 00 32    	bra       Z, 0x26bc <.L47>
    25ae:	4e 00 90    	mov.w     [w14+8], w0
    25b0:	00 00 e0    	cp0.w     w0
    25b2:	84 00 32    	bra       Z, 0x26bc <.L47>

000025b4 <.LSM154>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    25b4:	3e 00 90    	mov.w     [w14+6], w0
    25b6:	60 00 90    	mov.w     [w0+12], w0
    25b8:	e1 0f 40    	add.w     w0, #0x1, [w15]
    25ba:	91 01 32    	bra       Z, 0x28de <.L77>
    25bc:	4e 00 90    	mov.w     [w14+8], w0
    25be:	60 00 90    	mov.w     [w0+12], w0
    25c0:	e1 0f 40    	add.w     w0, #0x1, [w15]
    25c2:	8f 01 32    	bra       Z, 0x28e2 <.L78>

000025c4 <.LSM155>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    25c4:	3e 00 90    	mov.w     [w14+6], w0
    25c6:	00 08 90    	mov.w     [w0+16], w0
    25c8:	00 00 e0    	cp0.w     w0
    25ca:	69 00 3a    	bra       NZ, 0x269e <.L50>
    25cc:	4e 00 90    	mov.w     [w14+8], w0
    25ce:	00 08 90    	mov.w     [w0+16], w0
    25d0:	00 00 e0    	cp0.w     w0
    25d2:	65 00 3a    	bra       NZ, 0x269e <.L50>

000025d4 <.LSM156>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    25d4:	3e 00 90    	mov.w     [w14+6], w0
    25d6:	85 07 07    	rcall     0x34e2 <_pin_digitalOut>

000025d8 <.LSM157>:
            pin_set(RTS);
    25d8:	3e 00 90    	mov.w     [w14+6], w0
    25da:	e0 07 07    	rcall     0x359c <_pin_set>

000025dc <.LSM158>:
            pin_digitalIn(CTS);
    25dc:	4e 00 90    	mov.w     [w14+8], w0
    25de:	5a 07 07    	rcall     0x3494 <_pin_digitalIn>

000025e0 <.LSM159>:
            self->RTS = RTS;
    25e0:	1e 00 78    	mov.w     [w14], w0
    25e2:	be 00 90    	mov.w     [w14+6], w1
    25e4:	71 08 98    	mov.w     w1, [w0+30]

000025e6 <.LSM160>:
            RTS->owner = (void *)self;
    25e6:	3e 00 90    	mov.w     [w14+6], w0
    25e8:	9e 00 78    	mov.w     [w14], w1
    25ea:	01 08 98    	mov.w     w1, [w0+16]

000025ec <.LSM161>:
            RTS->write = NULL;
    25ec:	3e 00 90    	mov.w     [w14+6], w0
    25ee:	80 00 eb    	clr.w     w1
    25f0:	11 08 98    	mov.w     w1, [w0+18]

000025f2 <.LSM162>:
            RTS->read = NULL;
    25f2:	3e 00 90    	mov.w     [w14+6], w0
    25f4:	80 00 eb    	clr.w     w1
    25f6:	21 08 98    	mov.w     w1, [w0+20]

000025f8 <.LSM163>:
            self->CTS = CTS;
    25f8:	1e 00 78    	mov.w     [w14], w0
    25fa:	ce 00 90    	mov.w     [w14+8], w1
    25fc:	01 10 98    	mov.w     w1, [w0+32]

000025fe <.LSM164>:
            CTS->owner = (void *)self;
    25fe:	4e 00 90    	mov.w     [w14+8], w0
    2600:	9e 00 78    	mov.w     [w14], w1
    2602:	01 08 98    	mov.w     w1, [w0+16]

00002604 <.LSM165>:
            CTS->write = NULL;
    2604:	4e 00 90    	mov.w     [w14+8], w0
    2606:	80 00 eb    	clr.w     w1
    2608:	11 08 98    	mov.w     w1, [w0+18]

0000260a <.LSM166>:
            CTS->read = NULL;
    260a:	4e 00 90    	mov.w     [w14+8], w0
    260c:	80 00 eb    	clr.w     w1
    260e:	21 08 98    	mov.w     w1, [w0+20]

00002610 <.LSM167>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    2610:	11 3a 80    	mov.w     0x742, w1
    2612:	f0 0b 20    	mov.w     #0xbf, w0
    2614:	00 81 60    	and.w     w1, w0, w2
    2616:	60 04 20    	mov.w     #0x46, w0
    2618:	71 05 20    	mov.w     #0x57, w1
    261a:	23 74 20    	mov.w     #0x742, w3
    261c:	80 49 78    	mov.b     w0, [w3]
    261e:	81 49 78    	mov.b     w1, [w3]
    2620:	82 49 78    	mov.b     w2, [w3]

00002622 <.LSM168>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    2622:	3e 00 90    	mov.w     [w14+6], w0
    2624:	70 00 90    	mov.w     [w0+14], w0
    2626:	be 00 90    	mov.w     [w14+6], w1
    2628:	f1 00 90    	mov.w     [w1+14], w1
    262a:	11 01 78    	mov.w     [w1], w2
    262c:	be 00 90    	mov.w     [w14+6], w1
    262e:	a1 48 90    	mov.b     [w1+10], w1
    2630:	81 80 fb    	ze        w1, w1
    2632:	f3 03 20    	mov.w     #0x3f, w3
    2634:	81 18 dd    	sl.w      w3, w1, w1
    2636:	81 80 ea    	com.w     w1, w1
    2638:	81 00 61    	and.w     w2, w1, w1
    263a:	01 08 78    	mov.w     w1, [w0]

0000263c <.LSM169>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    263c:	3e 00 90    	mov.w     [w14+6], w0
    263e:	70 00 90    	mov.w     [w0+14], w0
    2640:	be 00 90    	mov.w     [w14+6], w1
    2642:	f1 00 90    	mov.w     [w1+14], w1
    2644:	11 01 78    	mov.w     [w1], w2
    2646:	9e 00 78    	mov.w     [w14], w1
    2648:	c1 09 90    	mov.w     [w1+24], w3
    264a:	be 00 90    	mov.w     [w14+6], w1
    264c:	a1 48 90    	mov.b     [w1+10], w1
    264e:	81 80 fb    	ze        w1, w1
    2650:	81 18 dd    	sl.w      w3, w1, w1
    2652:	82 80 70    	ior.w     w1, w2, w1
    2654:	01 08 78    	mov.w     w1, [w0]

00002656 <.LSM170>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    2656:	1e 00 78    	mov.w     [w14], w0
    2658:	10 08 90    	mov.w     [w0+18], w0
    265a:	9e 00 78    	mov.w     [w14], w1
    265c:	91 08 90    	mov.w     [w1+18], w1
    265e:	11 01 78    	mov.w     [w1], w2
    2660:	9e 00 78    	mov.w     [w14], w1
    2662:	d1 50 90    	mov.b     [w1+21], w1
    2664:	81 80 fb    	ze        w1, w1
    2666:	f3 03 20    	mov.w     #0x3f, w3
    2668:	81 18 dd    	sl.w      w3, w1, w1
    266a:	81 80 ea    	com.w     w1, w1
    266c:	81 00 61    	and.w     w2, w1, w1
    266e:	01 08 78    	mov.w     w1, [w0]

00002670 <.LSM171>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    2670:	1e 00 78    	mov.w     [w14], w0
    2672:	10 08 90    	mov.w     [w0+18], w0
    2674:	9e 00 78    	mov.w     [w14], w1
    2676:	91 08 90    	mov.w     [w1+18], w1
    2678:	11 01 78    	mov.w     [w1], w2
    267a:	ce 00 90    	mov.w     [w14+8], w1
    267c:	e1 01 90    	mov.w     [w1+12], w3
    267e:	9e 00 78    	mov.w     [w14], w1
    2680:	d1 50 90    	mov.b     [w1+21], w1
    2682:	81 80 fb    	ze        w1, w1
    2684:	81 18 dd    	sl.w      w3, w1, w1
    2686:	82 80 70    	ior.w     w1, w2, w1
    2688:	01 08 78    	mov.w     w1, [w0]

0000268a <.LSM172>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    268a:	11 3a 80    	mov.w     0x742, w1
    268c:	00 04 20    	mov.w     #0x40, w0
    268e:	01 01 70    	ior.w     w0, w1, w2
    2690:	60 04 20    	mov.w     #0x46, w0
    2692:	71 05 20    	mov.w     #0x57, w1
    2694:	23 74 20    	mov.w     #0x742, w3
    2696:	80 49 78    	mov.b     w0, [w3]
    2698:	81 49 78    	mov.b     w1, [w3]
    269a:	82 49 78    	mov.b     w2, [w3]
    269c:	0a 00 37    	bra       0x26b2 <.L51>

0000269e <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    269e:	1e 00 78    	mov.w     [w14], w0
    26a0:	f0 08 90    	mov.w     [w0+30], w1
    26a2:	3e 00 90    	mov.w     [w14+6], w0
    26a4:	80 8f 50    	sub.w     w1, w0, [w15]
    26a6:	1f 01 3a    	bra       NZ, 0x28e6 <.L79>
    26a8:	1e 00 78    	mov.w     [w14], w0
    26aa:	80 10 90    	mov.w     [w0+32], w1
    26ac:	4e 00 90    	mov.w     [w14+8], w0
    26ae:	80 8f 50    	sub.w     w1, w0, [w15]
    26b0:	1c 01 3a    	bra       NZ, 0x28ea <.L80>

000026b2 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    26b2:	1e 00 78    	mov.w     [w14], w0
    26b4:	10 00 78    	mov.w     [w0], w0
    26b6:	01 20 20    	mov.w     #0x200, w1
    26b8:	01 08 78    	mov.w     w1, [w0]
    26ba:	06 00 37    	bra       0x26c8 <.L53>

000026bc <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    26bc:	3e 00 90    	mov.w     [w14+6], w0
    26be:	00 00 e0    	cp0.w     w0
    26c0:	16 01 3a    	bra       NZ, 0x28ee <.L81>
    26c2:	4e 00 90    	mov.w     [w14+8], w0
    26c4:	00 00 e0    	cp0.w     w0
    26c6:	15 01 3a    	bra       NZ, 0x28f2 <.L82>

000026c8 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    26c8:	18 c0 b3    	mov.b     #0x1, w8
    26ca:	02 40 22    	mov.w     #0x2400, w2
    26cc:	43 a7 24    	mov.w     #0x4a74, w3
    26ce:	5e 00 90    	mov.w     [w14+10], w0
    26d0:	ee 00 90    	mov.w     [w14+12], w1
    26d2:	39 f6 07    	rcall     0x1346 <___gesf2>
    26d4:	00 00 e0    	cp0.w     w0
    26d6:	01 00 3c    	bra       GT, 0x26da <.L55>
    26d8:	00 44 eb    	clr.b     w8

000026da <.L55>:
    26da:	08 04 e0    	cp0.b     w8
    26dc:	04 00 32    	bra       Z, 0x26e6 <.L56>

000026de <.LSM177>:
        baudrate = FCY/4.;
    26de:	00 40 22    	mov.w     #0x2400, w0
    26e0:	41 a7 24    	mov.w     #0x4a74, w1
    26e2:	50 07 98    	mov.w     w0, [w14+10]
    26e4:	61 07 98    	mov.w     w1, [w14+12]

000026e6 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    26e6:	18 c0 b3    	mov.b     #0x1, w8
    26e8:	02 40 22    	mov.w     #0x2400, w2
    26ea:	43 17 24    	mov.w     #0x4174, w3
    26ec:	5e 00 90    	mov.w     [w14+10], w0
    26ee:	ee 00 90    	mov.w     [w14+12], w1
    26f0:	28 f6 07    	rcall     0x1342 <___eqsf2>
    26f2:	00 00 e0    	cp0.w     w0
    26f4:	01 00 35    	bra       LT, 0x26f8 <.L57>
    26f6:	00 44 eb    	clr.b     w8

000026f8 <.L57>:
    26f8:	08 04 e0    	cp0.b     w8
    26fa:	04 00 32    	bra       Z, 0x2704 <.L58>

000026fc <.LSM179>:
        baudrate = FCY/(16.*65536.);
    26fc:	00 40 22    	mov.w     #0x2400, w0
    26fe:	41 17 24    	mov.w     #0x4174, w1
    2700:	50 07 98    	mov.w     w0, [w14+10]
    2702:	61 07 98    	mov.w     w1, [w14+12]

00002704 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2704:	18 c0 b3    	mov.b     #0x1, w8
    2706:	02 40 22    	mov.w     #0x2400, w2
    2708:	43 27 24    	mov.w     #0x4274, w3
    270a:	5e 00 90    	mov.w     [w14+10], w0
    270c:	ee 00 90    	mov.w     [w14+12], w1
    270e:	19 f6 07    	rcall     0x1342 <___eqsf2>
    2710:	00 00 e0    	cp0.w     w0
    2712:	01 00 34    	bra       LE, 0x2716 <.L59>
    2714:	00 44 eb    	clr.b     w8

00002716 <.L59>:
    2716:	08 04 e0    	cp0.b     w8
    2718:	0f 00 32    	bra       Z, 0x2738 <.L60>

0000271a <.LSM181>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    271a:	1e 00 78    	mov.w     [w14], w0
    271c:	40 04 90    	mov.w     [w0+8], w8
    271e:	5e 01 90    	mov.w     [w14+10], w2
    2720:	ee 01 90    	mov.w     [w14+12], w3
    2722:	00 40 22    	mov.w     #0x2400, w0
    2724:	41 97 24    	mov.w     #0x4974, w1
    2726:	cb f5 07    	rcall     0x12be <___divsf3>
    2728:	02 00 20    	mov.w     #0x0, w2
    272a:	03 f0 23    	mov.w     #0x3f00, w3
    272c:	6b f5 07    	rcall     0x1204 <___addsf3>
    272e:	0d f6 07    	rcall     0x134a <___fixunssfsi>
    2730:	00 00 78    	mov.w     w0, w0
    2732:	00 00 e9    	dec.w     w0, w0
    2734:	00 0c 78    	mov.w     w0, [w8]
    2736:	15 00 37    	bra       0x2762 <.L61>

00002738 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2738:	1e 00 78    	mov.w     [w14], w0
    273a:	10 00 78    	mov.w     [w0], w0
    273c:	9e 00 78    	mov.w     [w14], w1
    273e:	91 00 78    	mov.w     [w1], w1
    2740:	91 00 78    	mov.w     [w1], w1
    2742:	01 30 a0    	bset.w    w1, #0x3
    2744:	01 08 78    	mov.w     w1, [w0]

00002746 <.LSM183>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2746:	1e 00 78    	mov.w     [w14], w0
    2748:	40 04 90    	mov.w     [w0+8], w8
    274a:	5e 01 90    	mov.w     [w14+10], w2
    274c:	ee 01 90    	mov.w     [w14+12], w3
    274e:	00 40 22    	mov.w     #0x2400, w0
    2750:	41 a7 24    	mov.w     #0x4a74, w1
    2752:	b5 f5 07    	rcall     0x12be <___divsf3>
    2754:	02 00 20    	mov.w     #0x0, w2
    2756:	03 f0 23    	mov.w     #0x3f00, w3
    2758:	55 f5 07    	rcall     0x1204 <___addsf3>
    275a:	f7 f5 07    	rcall     0x134a <___fixunssfsi>
    275c:	00 00 78    	mov.w     w0, w0
    275e:	00 00 e9    	dec.w     w0, w0
    2760:	00 0c 78    	mov.w     w0, [w8]

00002762 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2762:	ee 48 90    	mov.b     [w14+14], w1
    2764:	50 c4 b3    	mov.b     #0x45, w0
    2766:	80 cf 50    	sub.b     w1, w0, [w15]
    2768:	04 00 32    	bra       Z, 0x2772 <.L62>
    276a:	ee 48 90    	mov.b     [w14+14], w1
    276c:	50 c6 b3    	mov.b     #0x65, w0
    276e:	80 cf 50    	sub.b     w1, w0, [w15]
    2770:	08 00 3a    	bra       NZ, 0x2782 <.L63>

00002772 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2772:	1e 00 78    	mov.w     [w14], w0
    2774:	10 00 78    	mov.w     [w0], w0
    2776:	9e 00 78    	mov.w     [w14], w1
    2778:	91 00 78    	mov.w     [w1], w1
    277a:	91 00 78    	mov.w     [w1], w1
    277c:	01 10 a0    	bset.w    w1, #0x1
    277e:	01 08 78    	mov.w     w1, [w0]
    2780:	18 00 37    	bra       0x27b2 <.L64>

00002782 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    2782:	ee 48 90    	mov.b     [w14+14], w1
    2784:	f0 c4 b3    	mov.b     #0x4f, w0
    2786:	80 cf 50    	sub.b     w1, w0, [w15]
    2788:	04 00 32    	bra       Z, 0x2792 <.L65>
    278a:	ee 48 90    	mov.b     [w14+14], w1
    278c:	f0 c6 b3    	mov.b     #0x6f, w0
    278e:	80 cf 50    	sub.b     w1, w0, [w15]
    2790:	08 00 3a    	bra       NZ, 0x27a2 <.L66>

00002792 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    2792:	1e 00 78    	mov.w     [w14], w0
    2794:	10 00 78    	mov.w     [w0], w0
    2796:	9e 00 78    	mov.w     [w14], w1
    2798:	91 00 78    	mov.w     [w1], w1
    279a:	91 00 78    	mov.w     [w1], w1
    279c:	01 20 a0    	bset.w    w1, #0x2
    279e:	01 08 78    	mov.w     w1, [w0]
    27a0:	08 00 37    	bra       0x27b2 <.L64>

000027a2 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    27a2:	ee 48 90    	mov.b     [w14+14], w1
    27a4:	e0 c4 b3    	mov.b     #0x4e, w0
    27a6:	80 cf 50    	sub.b     w1, w0, [w15]
    27a8:	04 00 32    	bra       Z, 0x27b2 <.L64>
    27aa:	ee 48 90    	mov.b     [w14+14], w1
    27ac:	e0 c6 b3    	mov.b     #0x6e, w0
    27ae:	80 cf 50    	sub.b     w1, w0, [w15]
    27b0:	a2 00 3a    	bra       NZ, 0x28f6 <.L83>

000027b2 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    27b2:	4e b8 97    	mov.w     [w14-8], w0
    27b4:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    27b6:	08 00 3a    	bra       NZ, 0x27c8 <.L67>

000027b8 <.LSM190>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    27b8:	1e 00 78    	mov.w     [w14], w0
    27ba:	10 00 78    	mov.w     [w0], w0
    27bc:	9e 00 78    	mov.w     [w14], w1
    27be:	91 00 78    	mov.w     [w1], w1
    27c0:	91 00 78    	mov.w     [w1], w1
    27c2:	01 00 a0    	bset.w    w1, #0x0
    27c4:	01 08 78    	mov.w     w1, [w0]
    27c6:	03 00 37    	bra       0x27ce <.L68>

000027c8 <.L67>:
    } else if (stopbits!=1) {
    27c8:	4e b8 97    	mov.w     [w14-8], w0
    27ca:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    27cc:	96 00 3a    	bra       NZ, 0x28fa <.L84>

000027ce <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    27ce:	2e b8 97    	mov.w     [w14-12], w0
    27d0:	00 00 e0    	cp0.w     w0
    27d2:	04 00 3a    	bra       NZ, 0x27dc <.L69>

000027d4 <.LSM193>:
        self->putc = __putc_nobuffer;
    27d4:	1e 00 78    	mov.w     [w14], w0
    27d6:	81 f1 21    	mov.w     #0x1f18, w1
    27d8:	41 18 98    	mov.w     w1, [w0+56]
    27da:	36 00 37    	bra       0x2848 <.L70>

000027dc <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    27dc:	1e 00 78    	mov.w     [w14], w0
    27de:	10 00 90    	mov.w     [w0+2], w0
    27e0:	9e 00 78    	mov.w     [w14], w1
    27e2:	91 00 90    	mov.w     [w1+2], w1
    27e4:	11 01 78    	mov.w     [w1], w2
    27e6:	01 00 22    	mov.w     #0x2000, w1
    27e8:	82 80 70    	ior.w     w1, w2, w1
    27ea:	01 08 78    	mov.w     w1, [w0]

000027ec <.LSM195>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    27ec:	1e 00 78    	mov.w     [w14], w0
    27ee:	ae b8 97    	mov.w     [w14-12], w1
    27f0:	11 10 98    	mov.w     w1, [w0+34]

000027f2 <.LSM196>:
        self->TXbuffer.length = TXbufferlen;
    27f2:	1e 00 78    	mov.w     [w14], w0
    27f4:	9e b8 97    	mov.w     [w14-14], w1
    27f6:	21 10 98    	mov.w     w1, [w0+36]

000027f8 <.LSM197>:
        self->TXbuffer.head = 0;
    27f8:	1e 00 78    	mov.w     [w14], w0
    27fa:	80 00 eb    	clr.w     w1
    27fc:	31 10 98    	mov.w     w1, [w0+38]

000027fe <.LSM198>:
        self->TXbuffer.tail = 0;
    27fe:	1e 00 78    	mov.w     [w14], w0
    2800:	80 00 eb    	clr.w     w1
    2802:	41 10 98    	mov.w     w1, [w0+40]

00002804 <.LSM199>:
        self->TXbuffer.count = 0;
    2804:	1e 00 78    	mov.w     [w14], w0
    2806:	80 00 eb    	clr.w     w1
    2808:	51 10 98    	mov.w     w1, [w0+42]

0000280a <.LSM200>:
        self->TXthreshold = TXthreshold;
    280a:	1e 00 78    	mov.w     [w14], w0
    280c:	be b8 97    	mov.w     [w14-10], w1
    280e:	31 18 98    	mov.w     w1, [w0+54]

00002810 <.LSM201>:
        self->putc = __putc_buffer;
    2810:	1e 00 78    	mov.w     [w14], w0
    2812:	a1 f5 21    	mov.w     #0x1f5a, w1
    2814:	41 18 98    	mov.w     w1, [w0+56]

00002816 <.LSM202>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2816:	1e 00 78    	mov.w     [w14], w0
    2818:	50 00 90    	mov.w     [w0+10], w0
    281a:	9e 00 78    	mov.w     [w14], w1
    281c:	d1 00 90    	mov.w     [w1+10], w1
    281e:	11 01 78    	mov.w     [w1], w2
    2820:	9e 00 78    	mov.w     [w14], w1
    2822:	e1 48 90    	mov.b     [w1+14], w1
    2824:	81 80 fb    	ze        w1, w1
    2826:	13 00 20    	mov.w     #0x1, w3
    2828:	81 18 dd    	sl.w      w3, w1, w1
    282a:	81 80 ea    	com.w     w1, w1
    282c:	81 00 61    	and.w     w2, w1, w1
    282e:	01 08 78    	mov.w     w1, [w0]

00002830 <.LSM203>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2830:	1e 00 78    	mov.w     [w14], w0
    2832:	60 00 90    	mov.w     [w0+12], w0
    2834:	9e 00 78    	mov.w     [w14], w1
    2836:	e1 00 90    	mov.w     [w1+12], w1
    2838:	11 01 78    	mov.w     [w1], w2
    283a:	9e 00 78    	mov.w     [w14], w1
    283c:	e1 48 90    	mov.b     [w1+14], w1
    283e:	81 80 fb    	ze        w1, w1
    2840:	13 00 20    	mov.w     #0x1, w3
    2842:	81 18 dd    	sl.w      w3, w1, w1
    2844:	82 80 70    	ior.w     w1, w2, w1
    2846:	01 08 78    	mov.w     w1, [w0]

00002848 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    2848:	0e b8 97    	mov.w     [w14-16], w0
    284a:	00 00 e0    	cp0.w     w0
    284c:	04 00 3a    	bra       NZ, 0x2856 <.L71>

0000284e <.LSM205>:
        self->getc = __getc_nobuffer;
    284e:	1e 00 78    	mov.w     [w14], w0
    2850:	c1 f3 21    	mov.w     #0x1f3c, w1
    2852:	51 18 98    	mov.w     w1, [w0+58]
    2854:	2b 00 37    	bra       0x28ac <.L72>

00002856 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    2856:	1e 00 78    	mov.w     [w14], w0
    2858:	8e b8 97    	mov.w     [w14-16], w1
    285a:	61 10 98    	mov.w     w1, [w0+44]

0000285c <.LSM207>:
        self->RXbuffer.length = RXbufferlen;
    285c:	1e 00 78    	mov.w     [w14], w0
    285e:	fe b0 97    	mov.w     [w14-18], w1
    2860:	71 10 98    	mov.w     w1, [w0+46]

00002862 <.LSM208>:
        self->RXbuffer.head = 0;
    2862:	1e 00 78    	mov.w     [w14], w0
    2864:	80 00 eb    	clr.w     w1
    2866:	01 18 98    	mov.w     w1, [w0+48]

00002868 <.LSM209>:
        self->RXbuffer.tail = 0;
    2868:	1e 00 78    	mov.w     [w14], w0
    286a:	80 00 eb    	clr.w     w1
    286c:	11 18 98    	mov.w     w1, [w0+50]

0000286e <.LSM210>:
        self->RXbuffer.count = 0;
    286e:	1e 00 78    	mov.w     [w14], w0
    2870:	80 00 eb    	clr.w     w1
    2872:	21 18 98    	mov.w     w1, [w0+52]

00002874 <.LSM211>:
        self->getc = __getc_buffer;
    2874:	1e 00 78    	mov.w     [w14], w0
    2876:	21 05 22    	mov.w     #0x2052, w1
    2878:	51 18 98    	mov.w     w1, [w0+58]

0000287a <.LSM212>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    287a:	1e 00 78    	mov.w     [w14], w0
    287c:	50 00 90    	mov.w     [w0+10], w0
    287e:	9e 00 78    	mov.w     [w14], w1
    2880:	d1 00 90    	mov.w     [w1+10], w1
    2882:	11 01 78    	mov.w     [w1], w2
    2884:	9e 00 78    	mov.w     [w14], w1
    2886:	f1 48 90    	mov.b     [w1+15], w1
    2888:	81 80 fb    	ze        w1, w1
    288a:	13 00 20    	mov.w     #0x1, w3
    288c:	81 18 dd    	sl.w      w3, w1, w1
    288e:	81 80 ea    	com.w     w1, w1
    2890:	81 00 61    	and.w     w2, w1, w1
    2892:	01 08 78    	mov.w     w1, [w0]

00002894 <.LSM213>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    2894:	1e 00 78    	mov.w     [w14], w0
    2896:	60 00 90    	mov.w     [w0+12], w0
    2898:	9e 00 78    	mov.w     [w14], w1
    289a:	e1 00 90    	mov.w     [w1+12], w1
    289c:	11 01 78    	mov.w     [w1], w2
    289e:	9e 00 78    	mov.w     [w14], w1
    28a0:	f1 48 90    	mov.b     [w1+15], w1
    28a2:	81 80 fb    	ze        w1, w1
    28a4:	13 00 20    	mov.w     #0x1, w3
    28a6:	81 18 dd    	sl.w      w3, w1, w1
    28a8:	82 80 70    	ior.w     w1, w2, w1
    28aa:	01 08 78    	mov.w     w1, [w0]

000028ac <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    28ac:	1e 00 78    	mov.w     [w14], w0
    28ae:	10 00 78    	mov.w     [w0], w0
    28b0:	9e 00 78    	mov.w     [w14], w1
    28b2:	91 00 78    	mov.w     [w1], w1
    28b4:	11 01 78    	mov.w     [w1], w2
    28b6:	01 00 28    	mov.w     #0x8000, w1
    28b8:	82 80 70    	ior.w     w1, w2, w1
    28ba:	01 08 78    	mov.w     w1, [w0]

000028bc <.LSM215>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    28bc:	1e 00 78    	mov.w     [w14], w0
    28be:	10 00 90    	mov.w     [w0+2], w0
    28c0:	9e 00 78    	mov.w     [w14], w1
    28c2:	91 00 90    	mov.w     [w1+2], w1
    28c4:	11 01 78    	mov.w     [w1], w2
    28c6:	01 40 20    	mov.w     #0x400, w1
    28c8:	82 80 70    	ior.w     w1, w2, w1
    28ca:	01 08 78    	mov.w     w1, [w0]
    28cc:	17 00 37    	bra       0x28fc <.L40>

000028ce <.L73>:
    28ce:	00 00 00    	nop       
    28d0:	15 00 37    	bra       0x28fc <.L40>

000028d2 <.L74>:
    28d2:	00 00 00    	nop       
    28d4:	13 00 37    	bra       0x28fc <.L40>

000028d6 <.L75>:
    28d6:	00 00 00    	nop       
    28d8:	11 00 37    	bra       0x28fc <.L40>

000028da <.L76>:
    28da:	00 00 00    	nop       
    28dc:	0f 00 37    	bra       0x28fc <.L40>

000028de <.L77>:
    28de:	00 00 00    	nop       
    28e0:	0d 00 37    	bra       0x28fc <.L40>

000028e2 <.L78>:
    28e2:	00 00 00    	nop       
    28e4:	0b 00 37    	bra       0x28fc <.L40>

000028e6 <.L79>:
    28e6:	00 00 00    	nop       
    28e8:	09 00 37    	bra       0x28fc <.L40>

000028ea <.L80>:
    28ea:	00 00 00    	nop       
    28ec:	07 00 37    	bra       0x28fc <.L40>

000028ee <.L81>:
    28ee:	00 00 00    	nop       
    28f0:	05 00 37    	bra       0x28fc <.L40>

000028f2 <.L82>:
    28f2:	00 00 00    	nop       
    28f4:	03 00 37    	bra       0x28fc <.L40>

000028f6 <.L83>:
    28f6:	00 00 00    	nop       
    28f8:	01 00 37    	bra       0x28fc <.L40>

000028fa <.L84>:
    28fa:	00 00 00    	nop       

000028fc <.L40>:
}
    28fc:	4f 04 78    	mov.w     [--w15], w8
    28fe:	00 80 fa    	ulnk      
    2900:	00 00 06    	return    

00002902 <_uart_close>:

void uart_close(_UART *self) {
    2902:	02 00 fa    	lnk       #0x2
    2904:	00 0f 78    	mov.w     w0, [w14]

00002906 <.LSM225>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2906:	1e 00 78    	mov.w     [w14], w0
    2908:	10 00 90    	mov.w     [w0+2], w0
    290a:	9e 00 78    	mov.w     [w14], w1
    290c:	91 00 90    	mov.w     [w1+2], w1
    290e:	11 01 78    	mov.w     [w1], w2
    2910:	f1 bf 2f    	mov.w     #0xfbff, w1
    2912:	81 00 61    	and.w     w2, w1, w1
    2914:	01 08 78    	mov.w     w1, [w0]

00002916 <.LSM226>:
    *(self->UxMODE) = 0;        // Disable UART module
    2916:	1e 00 78    	mov.w     [w14], w0
    2918:	10 00 78    	mov.w     [w0], w0
    291a:	80 00 eb    	clr.w     w1
    291c:	01 08 78    	mov.w     w1, [w0]

0000291e <.LSM227>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    291e:	1e 00 78    	mov.w     [w14], w0
    2920:	60 00 90    	mov.w     [w0+12], w0
    2922:	9e 00 78    	mov.w     [w14], w1
    2924:	e1 00 90    	mov.w     [w1+12], w1
    2926:	11 01 78    	mov.w     [w1], w2
    2928:	9e 00 78    	mov.w     [w14], w1
    292a:	e1 48 90    	mov.b     [w1+14], w1
    292c:	81 80 fb    	ze        w1, w1
    292e:	13 00 20    	mov.w     #0x1, w3
    2930:	81 18 dd    	sl.w      w3, w1, w1
    2932:	81 80 ea    	com.w     w1, w1
    2934:	81 00 61    	and.w     w2, w1, w1
    2936:	01 08 78    	mov.w     w1, [w0]

00002938 <.LSM228>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2938:	1e 00 78    	mov.w     [w14], w0
    293a:	60 00 90    	mov.w     [w0+12], w0
    293c:	9e 00 78    	mov.w     [w14], w1
    293e:	e1 00 90    	mov.w     [w1+12], w1
    2940:	11 01 78    	mov.w     [w1], w2
    2942:	9e 00 78    	mov.w     [w14], w1
    2944:	f1 48 90    	mov.b     [w1+15], w1
    2946:	81 80 fb    	ze        w1, w1
    2948:	13 00 20    	mov.w     #0x1, w3
    294a:	81 18 dd    	sl.w      w3, w1, w1
    294c:	81 80 ea    	com.w     w1, w1
    294e:	81 00 61    	and.w     w2, w1, w1
    2950:	01 08 78    	mov.w     w1, [w0]

00002952 <.LSM229>:
    self->putc = NULL;
    2952:	1e 00 78    	mov.w     [w14], w0
    2954:	80 00 eb    	clr.w     w1
    2956:	41 18 98    	mov.w     w1, [w0+56]

00002958 <.LSM230>:
    self->getc = NULL;
    2958:	1e 00 78    	mov.w     [w14], w0
    295a:	80 00 eb    	clr.w     w1
    295c:	51 18 98    	mov.w     w1, [w0+58]

0000295e <.LSM231>:
    if (self->TX) {
    295e:	1e 00 78    	mov.w     [w14], w0
    2960:	50 08 90    	mov.w     [w0+26], w0
    2962:	00 00 e0    	cp0.w     w0
    2964:	2f 00 32    	bra       Z, 0x29c4 <.L86>

00002966 <.LSM232>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2966:	11 3a 80    	mov.w     0x742, w1
    2968:	f0 0b 20    	mov.w     #0xbf, w0
    296a:	00 81 60    	and.w     w1, w0, w2
    296c:	60 04 20    	mov.w     #0x46, w0
    296e:	71 05 20    	mov.w     #0x57, w1
    2970:	23 74 20    	mov.w     #0x742, w3
    2972:	80 49 78    	mov.b     w0, [w3]
    2974:	81 49 78    	mov.b     w1, [w3]
    2976:	82 49 78    	mov.b     w2, [w3]

00002978 <.LSM233>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2978:	1e 00 78    	mov.w     [w14], w0
    297a:	50 08 90    	mov.w     [w0+26], w0
    297c:	70 00 90    	mov.w     [w0+14], w0
    297e:	9e 00 78    	mov.w     [w14], w1
    2980:	d1 08 90    	mov.w     [w1+26], w1
    2982:	f1 00 90    	mov.w     [w1+14], w1
    2984:	11 01 78    	mov.w     [w1], w2
    2986:	9e 00 78    	mov.w     [w14], w1
    2988:	d1 08 90    	mov.w     [w1+26], w1
    298a:	a1 48 90    	mov.b     [w1+10], w1
    298c:	81 80 fb    	ze        w1, w1
    298e:	f3 03 20    	mov.w     #0x3f, w3
    2990:	81 18 dd    	sl.w      w3, w1, w1
    2992:	81 80 ea    	com.w     w1, w1
    2994:	81 00 61    	and.w     w2, w1, w1
    2996:	01 08 78    	mov.w     w1, [w0]

00002998 <.LSM234>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2998:	11 3a 80    	mov.w     0x742, w1
    299a:	00 04 20    	mov.w     #0x40, w0
    299c:	01 01 70    	ior.w     w0, w1, w2
    299e:	60 04 20    	mov.w     #0x46, w0
    29a0:	71 05 20    	mov.w     #0x57, w1
    29a2:	23 74 20    	mov.w     #0x742, w3
    29a4:	80 49 78    	mov.b     w0, [w3]
    29a6:	81 49 78    	mov.b     w1, [w3]
    29a8:	82 49 78    	mov.b     w2, [w3]

000029aa <.LSM235>:
        self->TX->owner = NULL;
    29aa:	1e 00 78    	mov.w     [w14], w0
    29ac:	50 08 90    	mov.w     [w0+26], w0
    29ae:	80 00 eb    	clr.w     w1
    29b0:	01 08 98    	mov.w     w1, [w0+16]

000029b2 <.LSM236>:
        pin_digitalOut(self->TX);
    29b2:	1e 00 78    	mov.w     [w14], w0
    29b4:	50 08 90    	mov.w     [w0+26], w0
    29b6:	95 05 07    	rcall     0x34e2 <_pin_digitalOut>

000029b8 <.LSM237>:
        pin_set(self->TX);
    29b8:	1e 00 78    	mov.w     [w14], w0
    29ba:	50 08 90    	mov.w     [w0+26], w0
    29bc:	ef 05 07    	rcall     0x359c <_pin_set>

000029be <.LSM238>:
        self->TX = NULL;
    29be:	1e 00 78    	mov.w     [w14], w0
    29c0:	80 00 eb    	clr.w     w1
    29c2:	51 08 98    	mov.w     w1, [w0+26]

000029c4 <.L86>:
    }
    if (self->RX) {
    29c4:	1e 00 78    	mov.w     [w14], w0
    29c6:	60 08 90    	mov.w     [w0+28], w0
    29c8:	00 00 e0    	cp0.w     w0
    29ca:	28 00 32    	bra       Z, 0x2a1c <.L87>

000029cc <.LSM240>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    29cc:	11 3a 80    	mov.w     0x742, w1
    29ce:	f0 0b 20    	mov.w     #0xbf, w0
    29d0:	00 81 60    	and.w     w1, w0, w2
    29d2:	60 04 20    	mov.w     #0x46, w0
    29d4:	71 05 20    	mov.w     #0x57, w1
    29d6:	23 74 20    	mov.w     #0x742, w3
    29d8:	80 49 78    	mov.b     w0, [w3]
    29da:	81 49 78    	mov.b     w1, [w3]
    29dc:	82 49 78    	mov.b     w2, [w3]

000029de <.LSM241>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    29de:	1e 00 78    	mov.w     [w14], w0
    29e0:	00 08 90    	mov.w     [w0+16], w0
    29e2:	9e 00 78    	mov.w     [w14], w1
    29e4:	81 08 90    	mov.w     [w1+16], w1
    29e6:	11 01 78    	mov.w     [w1], w2
    29e8:	9e 00 78    	mov.w     [w14], w1
    29ea:	c1 50 90    	mov.b     [w1+20], w1
    29ec:	81 80 fb    	ze        w1, w1
    29ee:	f3 03 20    	mov.w     #0x3f, w3
    29f0:	81 18 dd    	sl.w      w3, w1, w1
    29f2:	82 80 70    	ior.w     w1, w2, w1
    29f4:	01 08 78    	mov.w     w1, [w0]

000029f6 <.LSM242>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    29f6:	11 3a 80    	mov.w     0x742, w1
    29f8:	00 04 20    	mov.w     #0x40, w0
    29fa:	01 01 70    	ior.w     w0, w1, w2
    29fc:	60 04 20    	mov.w     #0x46, w0
    29fe:	71 05 20    	mov.w     #0x57, w1
    2a00:	23 74 20    	mov.w     #0x742, w3
    2a02:	80 49 78    	mov.b     w0, [w3]
    2a04:	81 49 78    	mov.b     w1, [w3]
    2a06:	82 49 78    	mov.b     w2, [w3]

00002a08 <.LSM243>:
        self->RX->owner = NULL;
    2a08:	1e 00 78    	mov.w     [w14], w0
    2a0a:	60 08 90    	mov.w     [w0+28], w0
    2a0c:	80 00 eb    	clr.w     w1
    2a0e:	01 08 98    	mov.w     w1, [w0+16]

00002a10 <.LSM244>:
        pin_digitalIn(self->RX);
    2a10:	1e 00 78    	mov.w     [w14], w0
    2a12:	60 08 90    	mov.w     [w0+28], w0
    2a14:	3f 05 07    	rcall     0x3494 <_pin_digitalIn>

00002a16 <.LSM245>:
        self->RX = NULL;
    2a16:	1e 00 78    	mov.w     [w14], w0
    2a18:	80 00 eb    	clr.w     w1
    2a1a:	61 08 98    	mov.w     w1, [w0+28]

00002a1c <.L87>:
    }
    if (self->RTS) {
    2a1c:	1e 00 78    	mov.w     [w14], w0
    2a1e:	70 08 90    	mov.w     [w0+30], w0
    2a20:	00 00 e0    	cp0.w     w0
    2a22:	2f 00 32    	bra       Z, 0x2a82 <.L88>

00002a24 <.LSM247>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2a24:	11 3a 80    	mov.w     0x742, w1
    2a26:	f0 0b 20    	mov.w     #0xbf, w0
    2a28:	00 81 60    	and.w     w1, w0, w2
    2a2a:	60 04 20    	mov.w     #0x46, w0
    2a2c:	71 05 20    	mov.w     #0x57, w1
    2a2e:	23 74 20    	mov.w     #0x742, w3
    2a30:	80 49 78    	mov.b     w0, [w3]
    2a32:	81 49 78    	mov.b     w1, [w3]
    2a34:	82 49 78    	mov.b     w2, [w3]

00002a36 <.LSM248>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2a36:	1e 00 78    	mov.w     [w14], w0
    2a38:	70 08 90    	mov.w     [w0+30], w0
    2a3a:	70 00 90    	mov.w     [w0+14], w0
    2a3c:	9e 00 78    	mov.w     [w14], w1
    2a3e:	f1 08 90    	mov.w     [w1+30], w1
    2a40:	f1 00 90    	mov.w     [w1+14], w1
    2a42:	11 01 78    	mov.w     [w1], w2
    2a44:	9e 00 78    	mov.w     [w14], w1
    2a46:	f1 08 90    	mov.w     [w1+30], w1
    2a48:	a1 48 90    	mov.b     [w1+10], w1
    2a4a:	81 80 fb    	ze        w1, w1
    2a4c:	f3 03 20    	mov.w     #0x3f, w3
    2a4e:	81 18 dd    	sl.w      w3, w1, w1
    2a50:	81 80 ea    	com.w     w1, w1
    2a52:	81 00 61    	and.w     w2, w1, w1
    2a54:	01 08 78    	mov.w     w1, [w0]

00002a56 <.LSM249>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2a56:	11 3a 80    	mov.w     0x742, w1
    2a58:	00 04 20    	mov.w     #0x40, w0
    2a5a:	01 01 70    	ior.w     w0, w1, w2
    2a5c:	60 04 20    	mov.w     #0x46, w0
    2a5e:	71 05 20    	mov.w     #0x57, w1
    2a60:	23 74 20    	mov.w     #0x742, w3
    2a62:	80 49 78    	mov.b     w0, [w3]
    2a64:	81 49 78    	mov.b     w1, [w3]
    2a66:	82 49 78    	mov.b     w2, [w3]

00002a68 <.LSM250>:
        self->RTS->owner = NULL;
    2a68:	1e 00 78    	mov.w     [w14], w0
    2a6a:	70 08 90    	mov.w     [w0+30], w0
    2a6c:	80 00 eb    	clr.w     w1
    2a6e:	01 08 98    	mov.w     w1, [w0+16]

00002a70 <.LSM251>:
        pin_digitalOut(self->RTS);
    2a70:	1e 00 78    	mov.w     [w14], w0
    2a72:	70 08 90    	mov.w     [w0+30], w0
    2a74:	36 05 07    	rcall     0x34e2 <_pin_digitalOut>

00002a76 <.LSM252>:
        pin_set(self->RTS);
    2a76:	1e 00 78    	mov.w     [w14], w0
    2a78:	70 08 90    	mov.w     [w0+30], w0
    2a7a:	90 05 07    	rcall     0x359c <_pin_set>

00002a7c <.LSM253>:
        self->RTS = NULL;
    2a7c:	1e 00 78    	mov.w     [w14], w0
    2a7e:	80 00 eb    	clr.w     w1
    2a80:	71 08 98    	mov.w     w1, [w0+30]

00002a82 <.L88>:
    }
    if (self->CTS) {
    2a82:	1e 00 78    	mov.w     [w14], w0
    2a84:	00 10 90    	mov.w     [w0+32], w0
    2a86:	00 00 e0    	cp0.w     w0
    2a88:	28 00 32    	bra       Z, 0x2ada <.L85>

00002a8a <.LSM255>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2a8a:	11 3a 80    	mov.w     0x742, w1
    2a8c:	f0 0b 20    	mov.w     #0xbf, w0
    2a8e:	00 81 60    	and.w     w1, w0, w2
    2a90:	60 04 20    	mov.w     #0x46, w0
    2a92:	71 05 20    	mov.w     #0x57, w1
    2a94:	23 74 20    	mov.w     #0x742, w3
    2a96:	80 49 78    	mov.b     w0, [w3]
    2a98:	81 49 78    	mov.b     w1, [w3]
    2a9a:	82 49 78    	mov.b     w2, [w3]

00002a9c <.LSM256>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2a9c:	1e 00 78    	mov.w     [w14], w0
    2a9e:	10 08 90    	mov.w     [w0+18], w0
    2aa0:	9e 00 78    	mov.w     [w14], w1
    2aa2:	91 08 90    	mov.w     [w1+18], w1
    2aa4:	11 01 78    	mov.w     [w1], w2
    2aa6:	9e 00 78    	mov.w     [w14], w1
    2aa8:	d1 50 90    	mov.b     [w1+21], w1
    2aaa:	81 80 fb    	ze        w1, w1
    2aac:	f3 03 20    	mov.w     #0x3f, w3
    2aae:	81 18 dd    	sl.w      w3, w1, w1
    2ab0:	82 80 70    	ior.w     w1, w2, w1
    2ab2:	01 08 78    	mov.w     w1, [w0]

00002ab4 <.LSM257>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ab4:	11 3a 80    	mov.w     0x742, w1
    2ab6:	00 04 20    	mov.w     #0x40, w0
    2ab8:	01 01 70    	ior.w     w0, w1, w2
    2aba:	60 04 20    	mov.w     #0x46, w0
    2abc:	71 05 20    	mov.w     #0x57, w1
    2abe:	23 74 20    	mov.w     #0x742, w3
    2ac0:	80 49 78    	mov.b     w0, [w3]
    2ac2:	81 49 78    	mov.b     w1, [w3]
    2ac4:	82 49 78    	mov.b     w2, [w3]

00002ac6 <.LSM258>:
        self->CTS->owner = NULL;
    2ac6:	1e 00 78    	mov.w     [w14], w0
    2ac8:	00 10 90    	mov.w     [w0+32], w0
    2aca:	80 00 eb    	clr.w     w1
    2acc:	01 08 98    	mov.w     w1, [w0+16]

00002ace <.LSM259>:
        pin_digitalIn(self->CTS);
    2ace:	1e 00 78    	mov.w     [w14], w0
    2ad0:	00 10 90    	mov.w     [w0+32], w0
    2ad2:	e0 04 07    	rcall     0x3494 <_pin_digitalIn>

00002ad4 <.LSM260>:
        self->CTS = NULL;
    2ad4:	1e 00 78    	mov.w     [w14], w0
    2ad6:	80 00 eb    	clr.w     w1
    2ad8:	01 10 98    	mov.w     w1, [w0+32]

00002ada <.L85>:
    }
}
    2ada:	00 80 fa    	ulnk      
    2adc:	00 00 06    	return    

00002ade <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2ade:	04 00 fa    	lnk       #0x4
    2ae0:	00 0f 78    	mov.w     w0, [w14]
    2ae2:	21 47 98    	mov.b     w1, [w14+2]

00002ae4 <.LSM263>:
    if (self->putc)
    2ae4:	1e 00 78    	mov.w     [w14], w0
    2ae6:	40 18 90    	mov.w     [w0+56], w0
    2ae8:	00 00 e0    	cp0.w     w0
    2aea:	05 00 32    	bra       Z, 0x2af6 <.L90>

00002aec <.LSM264>:
        self->putc(self, ch);
    2aec:	1e 00 78    	mov.w     [w14], w0
    2aee:	40 19 90    	mov.w     [w0+56], w2
    2af0:	ae 40 90    	mov.b     [w14+2], w1
    2af2:	1e 00 78    	mov.w     [w14], w0
    2af4:	02 00 01    	call      w2

00002af6 <.L90>:
}
    2af6:	00 80 fa    	ulnk      
    2af8:	00 00 06    	return    

00002afa <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2afa:	02 00 fa    	lnk       #0x2
    2afc:	00 0f 78    	mov.w     w0, [w14]

00002afe <.LSM267>:
    if (self->getc)
    2afe:	1e 00 78    	mov.w     [w14], w0
    2b00:	50 18 90    	mov.w     [w0+58], w0
    2b02:	00 00 e0    	cp0.w     w0
    2b04:	05 00 32    	bra       Z, 0x2b10 <.L93>

00002b06 <.LSM268>:
        return self->getc(self);
    2b06:	1e 00 78    	mov.w     [w14], w0
    2b08:	d0 18 90    	mov.w     [w0+58], w1
    2b0a:	1e 00 78    	mov.w     [w14], w0
    2b0c:	01 00 01    	call      w1
    2b0e:	01 00 37    	bra       0x2b12 <.L94>

00002b10 <.L93>:
    else
        return 0xFF;
    2b10:	00 c0 eb    	setm.b    w0

00002b12 <.L94>:
}
    2b12:	00 80 fa    	ulnk      
    2b14:	00 00 06    	return    

00002b16 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2b16:	02 00 fa    	lnk       #0x2
    2b18:	00 0f 78    	mov.w     w0, [w14]

00002b1a <.LSM272>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2b1a:	1e 00 78    	mov.w     [w14], w0
    2b1c:	10 00 90    	mov.w     [w0+2], w0
    2b1e:	90 00 78    	mov.w     [w0], w1
    2b20:	00 40 20    	mov.w     #0x400, w0
    2b22:	00 80 60    	and.w     w1, w0, w0
    2b24:	00 00 e0    	cp0.w     w0
    2b26:	08 00 3a    	bra       NZ, 0x2b38 <.L95>

00002b28 <.LSM273>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2b28:	1e 00 78    	mov.w     [w14], w0
    2b2a:	10 00 90    	mov.w     [w0+2], w0
    2b2c:	9e 00 78    	mov.w     [w14], w1
    2b2e:	91 00 90    	mov.w     [w1+2], w1
    2b30:	11 01 78    	mov.w     [w1], w2
    2b32:	01 40 20    	mov.w     #0x400, w1
    2b34:	82 80 70    	ior.w     w1, w2, w1
    2b36:	01 08 78    	mov.w     w1, [w0]

00002b38 <.L95>:
}
    2b38:	00 80 fa    	ulnk      
    2b3a:	00 00 06    	return    

00002b3c <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2b3c:	04 00 fa    	lnk       #0x4
    2b3e:	00 0f 78    	mov.w     w0, [w14]
    2b40:	11 07 98    	mov.w     w1, [w14+2]

00002b42 <.LSM276>:
    while (*str)
    2b42:	08 00 37    	bra       0x2b54 <.L98>

00002b44 <.L99>:
        uart_putc(self, *str++);
    2b44:	1e 00 90    	mov.w     [w14+2], w0
    2b46:	10 40 78    	mov.b     [w0], w0
    2b48:	9e 00 90    	mov.w     [w14+2], w1
    2b4a:	81 00 e8    	inc.w     w1, w1
    2b4c:	11 07 98    	mov.w     w1, [w14+2]
    2b4e:	80 40 78    	mov.b     w0, w1
    2b50:	1e 00 78    	mov.w     [w14], w0
    2b52:	c5 ff 07    	rcall     0x2ade <_uart_putc>

00002b54 <.L98>:
    2b54:	1e 00 90    	mov.w     [w14+2], w0
    2b56:	10 40 78    	mov.b     [w0], w0
    2b58:	00 04 e0    	cp0.b     w0
    2b5a:	f4 ff 3a    	bra       NZ, 0x2b44 <.L99>

00002b5c <.LSM279>:
    uart_flushTxBuffer(self);
    2b5c:	1e 00 78    	mov.w     [w14], w0
    2b5e:	db ff 07    	rcall     0x2b16 <_uart_flushTxBuffer>

00002b60 <.LSM280>:
}
    2b60:	00 80 fa    	ulnk      
    2b62:	00 00 06    	return    

00002b64 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2b64:	0a 00 fa    	lnk       #0xa
    2b66:	20 07 98    	mov.w     w0, [w14+4]
    2b68:	31 07 98    	mov.w     w1, [w14+6]
    2b6a:	42 07 98    	mov.w     w2, [w14+8]

00002b6c <.LSM282>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2b6c:	4e 00 90    	mov.w     [w14+8], w0
    2b6e:	00 00 e0    	cp0.w     w0
    2b70:	87 00 32    	bra       Z, 0x2c80 <.L113>

00002b72 <.LSM283>:
        return;

    if (len==1) {
    2b72:	4e 00 90    	mov.w     [w14+8], w0
    2b74:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2b76:	04 00 3a    	bra       NZ, 0x2b80 <.L103>

00002b78 <.LSM284>:
        *str = '\0';
    2b78:	3e 00 90    	mov.w     [w14+6], w0
    2b7a:	80 40 eb    	clr.b     w1
    2b7c:	01 48 78    	mov.b     w1, [w0]

00002b7e <.LSM285>:
        return;
    2b7e:	81 00 37    	bra       0x2c82 <.L100>

00002b80 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2b80:	b1 c1 b3    	mov.b     #0x1b, w1
    2b82:	2e 00 90    	mov.w     [w14+4], w0
    2b84:	ac ff 07    	rcall     0x2ade <_uart_putc>

00002b86 <.LSM287>:
    uart_putc(self, '7');
    2b86:	71 c3 b3    	mov.b     #0x37, w1
    2b88:	2e 00 90    	mov.w     [w14+4], w0
    2b8a:	a9 ff 07    	rcall     0x2ade <_uart_putc>

00002b8c <.LSM288>:
    uart_flushTxBuffer(self);
    2b8c:	2e 00 90    	mov.w     [w14+4], w0
    2b8e:	c3 ff 07    	rcall     0x2b16 <_uart_flushTxBuffer>

00002b90 <.LSM289>:
    start = str;
    2b90:	be 00 90    	mov.w     [w14+6], w1
    2b92:	11 07 98    	mov.w     w1, [w14+2]

00002b94 <.LSM290>:
    left = len;
    2b94:	ce 00 90    	mov.w     [w14+8], w1
    2b96:	01 0f 78    	mov.w     w1, [w14]
    2b98:	03 00 37    	bra       0x2ba0 <.L112>

00002b9a <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2b9a:	00 00 00    	nop       
    2b9c:	01 00 37    	bra       0x2ba0 <.L112>

00002b9e <.L115>:
    2b9e:	00 00 00    	nop       

00002ba0 <.L112>:
    2ba0:	2e 00 90    	mov.w     [w14+4], w0
    2ba2:	ab ff 07    	rcall     0x2afa <_uart_getc>
    2ba4:	be 00 90    	mov.w     [w14+6], w1
    2ba6:	80 48 78    	mov.b     w0, [w1]

00002ba8 <.LSM293>:
    2ba8:	3e 00 90    	mov.w     [w14+6], w0
    2baa:	10 40 78    	mov.b     [w0], w0
    2bac:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2bae:	0c 00 3a    	bra       NZ, 0x2bc8 <.L104>

00002bb0 <.LSM294>:

    *str = '\0';                            // Terminarte the string with null
    2bb0:	3e 00 90    	mov.w     [w14+6], w0
    2bb2:	80 40 eb    	clr.b     w1
    2bb4:	01 48 78    	mov.b     w1, [w0]

00002bb6 <.LSM295>:
    uart_putc(self, '\n');                  // Send newline and
    2bb6:	a1 c0 b3    	mov.b     #0xa, w1
    2bb8:	2e 00 90    	mov.w     [w14+4], w0
    2bba:	91 ff 07    	rcall     0x2ade <_uart_putc>

00002bbc <.LSM296>:
    uart_putc(self, '\r');                  //   carriage return
    2bbc:	d1 c0 b3    	mov.b     #0xd, w1
    2bbe:	2e 00 90    	mov.w     [w14+4], w0
    2bc0:	8e ff 07    	rcall     0x2ade <_uart_putc>

00002bc2 <.LSM297>:
    uart_flushTxBuffer(self);
    2bc2:	2e 00 90    	mov.w     [w14+4], w0
    2bc4:	a8 ff 07    	rcall     0x2b16 <_uart_flushTxBuffer>
    2bc6:	5d 00 37    	bra       0x2c82 <.L100>

00002bc8 <.L104>:
    2bc8:	3e 00 90    	mov.w     [w14+6], w0
    2bca:	10 40 78    	mov.b     [w0], w0
    2bcc:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2bce:	16 00 3a    	bra       NZ, 0x2bfc <.L105>

00002bd0 <.LSM299>:
    2bd0:	b1 c1 b3    	mov.b     #0x1b, w1
    2bd2:	2e 00 90    	mov.w     [w14+4], w0
    2bd4:	84 ff 07    	rcall     0x2ade <_uart_putc>

00002bd6 <.LSM300>:
    2bd6:	81 c3 b3    	mov.b     #0x38, w1
    2bd8:	2e 00 90    	mov.w     [w14+4], w0
    2bda:	81 ff 07    	rcall     0x2ade <_uart_putc>

00002bdc <.LSM301>:
    2bdc:	b1 c1 b3    	mov.b     #0x1b, w1
    2bde:	2e 00 90    	mov.w     [w14+4], w0
    2be0:	7e ff 07    	rcall     0x2ade <_uart_putc>

00002be2 <.LSM302>:
    2be2:	b1 c5 b3    	mov.b     #0x5b, w1
    2be4:	2e 00 90    	mov.w     [w14+4], w0
    2be6:	7b ff 07    	rcall     0x2ade <_uart_putc>

00002be8 <.LSM303>:
    2be8:	b1 c4 b3    	mov.b     #0x4b, w1
    2bea:	2e 00 90    	mov.w     [w14+4], w0
    2bec:	78 ff 07    	rcall     0x2ade <_uart_putc>

00002bee <.LSM304>:
    2bee:	2e 00 90    	mov.w     [w14+4], w0
    2bf0:	92 ff 07    	rcall     0x2b16 <_uart_flushTxBuffer>

00002bf2 <.LSM305>:
    2bf2:	9e 00 90    	mov.w     [w14+2], w1
    2bf4:	31 07 98    	mov.w     w1, [w14+6]

00002bf6 <.LSM306>:
    2bf6:	ce 00 90    	mov.w     [w14+8], w1
    2bf8:	01 0f 78    	mov.w     w1, [w14]

00002bfa <.LSM307>:
    2bfa:	41 00 37    	bra       0x2c7e <.L106>

00002bfc <.L105>:
    2bfc:	3e 00 90    	mov.w     [w14+6], w0
    2bfe:	10 40 78    	mov.b     [w0], w0
    2c00:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2c02:	05 00 32    	bra       Z, 0x2c0e <.L107>

00002c04 <.LSM309>:
    2c04:	3e 00 90    	mov.w     [w14+6], w0
    2c06:	90 40 78    	mov.b     [w0], w1

00002c08 <.LSM310>:
    2c08:	f0 c7 b3    	mov.b     #0x7f, w0
    2c0a:	80 cf 50    	sub.b     w1, w0, [w15]
    2c0c:	1a 00 3a    	bra       NZ, 0x2c42 <.L108>

00002c0e <.L107>:
    2c0e:	be 00 90    	mov.w     [w14+6], w1
    2c10:	1e 00 90    	mov.w     [w14+2], w0
    2c12:	80 8f 50    	sub.w     w1, w0, [w15]
    2c14:	10 00 36    	bra       LEU, 0x2c36 <.L109>

00002c16 <.LSM312>:
    2c16:	81 c0 b3    	mov.b     #0x8, w1
    2c18:	2e 00 90    	mov.w     [w14+4], w0
    2c1a:	61 ff 07    	rcall     0x2ade <_uart_putc>

00002c1c <.LSM313>:
    2c1c:	01 c2 b3    	mov.b     #0x20, w1
    2c1e:	2e 00 90    	mov.w     [w14+4], w0
    2c20:	5e ff 07    	rcall     0x2ade <_uart_putc>

00002c22 <.LSM314>:
    2c22:	81 c0 b3    	mov.b     #0x8, w1
    2c24:	2e 00 90    	mov.w     [w14+4], w0
    2c26:	5b ff 07    	rcall     0x2ade <_uart_putc>

00002c28 <.LSM315>:
    2c28:	2e 00 90    	mov.w     [w14+4], w0
    2c2a:	75 ff 07    	rcall     0x2b16 <_uart_flushTxBuffer>

00002c2c <.LSM316>:
    2c2c:	3e 00 90    	mov.w     [w14+6], w0
    2c2e:	00 00 e9    	dec.w     w0, w0
    2c30:	30 07 98    	mov.w     w0, [w14+6]

00002c32 <.LSM317>:
    2c32:	1e 0f e8    	inc.w     [w14], [w14]
    2c34:	05 00 37    	bra       0x2c40 <.L110>

00002c36 <.L109>:
    2c36:	71 c0 b3    	mov.b     #0x7, w1
    2c38:	2e 00 90    	mov.w     [w14+4], w0
    2c3a:	51 ff 07    	rcall     0x2ade <_uart_putc>

00002c3c <.LSM319>:
    2c3c:	2e 00 90    	mov.w     [w14+4], w0
    2c3e:	6b ff 07    	rcall     0x2b16 <_uart_flushTxBuffer>

00002c40 <.L110>:
    2c40:	1e 00 37    	bra       0x2c7e <.L106>

00002c42 <.L108>:
    2c42:	1e 00 78    	mov.w     [w14], w0
    2c44:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2c46:	06 00 3a    	bra       NZ, 0x2c54 <.L111>

00002c48 <.LSM322>:
    2c48:	71 c0 b3    	mov.b     #0x7, w1
    2c4a:	2e 00 90    	mov.w     [w14+4], w0
    2c4c:	48 ff 07    	rcall     0x2ade <_uart_putc>

00002c4e <.LSM323>:
    2c4e:	2e 00 90    	mov.w     [w14+4], w0
    2c50:	62 ff 07    	rcall     0x2b16 <_uart_flushTxBuffer>

00002c52 <.LSM324>:
    2c52:	15 00 37    	bra       0x2c7e <.L106>

00002c54 <.L111>:
    2c54:	3e 00 90    	mov.w     [w14+6], w0
    2c56:	10 40 78    	mov.b     [w0], w0
    2c58:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2c5a:	9f ff 36    	bra       LEU, 0x2b9a <.L114>
    2c5c:	3e 00 90    	mov.w     [w14+6], w0
    2c5e:	90 40 78    	mov.b     [w0], w1
    2c60:	e0 c7 b3    	mov.b     #0x7e, w0
    2c62:	80 cf 50    	sub.b     w1, w0, [w15]
    2c64:	9c ff 3e    	bra       GTU, 0x2b9e <.L115>

00002c66 <.LSM326>:
    2c66:	3e 00 90    	mov.w     [w14+6], w0
    2c68:	10 40 78    	mov.b     [w0], w0
    2c6a:	80 40 78    	mov.b     w0, w1
    2c6c:	2e 00 90    	mov.w     [w14+4], w0
    2c6e:	37 ff 07    	rcall     0x2ade <_uart_putc>

00002c70 <.LSM327>:
    2c70:	2e 00 90    	mov.w     [w14+4], w0
    2c72:	51 ff 07    	rcall     0x2b16 <_uart_flushTxBuffer>

00002c74 <.LSM328>:
    2c74:	3e 00 90    	mov.w     [w14+6], w0
    2c76:	00 00 e8    	inc.w     w0, w0
    2c78:	30 07 98    	mov.w     w0, [w14+6]

00002c7a <.LSM329>:
    2c7a:	1e 0f e9    	dec.w     [w14], [w14]

00002c7c <.LSM330>:
    2c7c:	91 ff 37    	bra       0x2ba0 <.L112>

00002c7e <.L106>:
    2c7e:	90 ff 37    	bra       0x2ba0 <.L112>

00002c80 <.L113>:
    2c80:	00 00 00    	nop       

00002c82 <.L100>:
}
    2c82:	00 80 fa    	ulnk      
    2c84:	00 00 06    	return    

00002c86 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    2c86:	02 00 fa    	lnk       #0x2
    2c88:	00 0f 78    	mov.w     w0, [w14]

00002c8a <.LSM1>:
    timer_lower(self);
    2c8a:	1e 00 78    	mov.w     [w14], w0
    2c8c:	01 02 07    	rcall     0x3090 <_timer_lower>

00002c8e <.LSM2>:
    if (self->every) {
    2c8e:	1e 00 78    	mov.w     [w14], w0
    2c90:	10 08 90    	mov.w     [w0+18], w0
    2c92:	00 00 e0    	cp0.w     w0
    2c94:	05 00 32    	bra       Z, 0x2ca0 <.L2>

00002c96 <.LSM3>:
        self->every(self);
    2c96:	1e 00 78    	mov.w     [w14], w0
    2c98:	90 08 90    	mov.w     [w0+18], w1
    2c9a:	1e 00 78    	mov.w     [w14], w0
    2c9c:	01 00 01    	call      w1
    2c9e:	1a 00 37    	bra       0x2cd4 <.L1>

00002ca0 <.L2>:
    } else if (self->after) {
    2ca0:	1e 00 78    	mov.w     [w14], w0
    2ca2:	20 08 90    	mov.w     [w0+20], w0
    2ca4:	00 00 e0    	cp0.w     w0
    2ca6:	14 00 32    	bra       Z, 0x2cd0 <.L4>

00002ca8 <.LSM5>:
        if (self->aftercount) {
    2ca8:	1e 00 78    	mov.w     [w14], w0
    2caa:	00 08 90    	mov.w     [w0+16], w0
    2cac:	00 00 e0    	cp0.w     w0
    2cae:	0a 00 32    	bra       Z, 0x2cc4 <.L5>

00002cb0 <.LSM6>:
            self->after(self);
    2cb0:	1e 00 78    	mov.w     [w14], w0
    2cb2:	a0 08 90    	mov.w     [w0+20], w1
    2cb4:	1e 00 78    	mov.w     [w14], w0
    2cb6:	01 00 01    	call      w1

00002cb8 <.LSM7>:
            self->aftercount--;
    2cb8:	1e 00 78    	mov.w     [w14], w0
    2cba:	00 08 90    	mov.w     [w0+16], w0
    2cbc:	80 00 e9    	dec.w     w0, w1
    2cbe:	1e 00 78    	mov.w     [w14], w0
    2cc0:	01 08 98    	mov.w     w1, [w0+16]
    2cc2:	08 00 37    	bra       0x2cd4 <.L1>

00002cc4 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2cc4:	1e 00 78    	mov.w     [w14], w0
    2cc6:	0c 02 07    	rcall     0x30e0 <_timer_disableInterrupt>

00002cc8 <.LSM9>:
            self->after = NULL;
    2cc8:	1e 00 78    	mov.w     [w14], w0
    2cca:	80 00 eb    	clr.w     w1
    2ccc:	21 08 98    	mov.w     w1, [w0+20]
    2cce:	02 00 37    	bra       0x2cd4 <.L1>

00002cd0 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    2cd0:	1e 00 78    	mov.w     [w14], w0
    2cd2:	06 02 07    	rcall     0x30e0 <_timer_disableInterrupt>

00002cd4 <.L1>:
    }
}
    2cd4:	00 80 fa    	ulnk      
    2cd6:	00 00 06    	return    

00002cd8 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    2cd8:	36 00 f8    	push      0x36
    2cda:	80 9f be    	mov.d     w0, [w15++]
    2cdc:	82 9f be    	mov.d     w2, [w15++]
    2cde:	84 9f be    	mov.d     w4, [w15++]
    2ce0:	86 9f be    	mov.d     w6, [w15++]
    2ce2:	32 00 f8    	push      0x32
    2ce4:	34 00 f8    	push      0x34
    2ce6:	10 00 20    	mov.w     #0x1, w0
    2ce8:	a0 01 88    	mov.w     w0, 0x34
    2cea:	00 20 20    	mov.w     #0x200, w0
    2cec:	90 01 88    	mov.w     w0, 0x32
    2cee:	00 00 fa    	lnk       #0x0

00002cf0 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    2cf0:	80 30 21    	mov.w     #0x1308, w0
    2cf2:	c9 ff 07    	rcall     0x2c86 <_timer_serviceInterrupt>

00002cf4 <.LSM14>:
}
    2cf4:	00 80 fa    	ulnk      
    2cf6:	34 00 f9    	pop       0x34
    2cf8:	32 00 f9    	pop       0x32
    2cfa:	4f 03 be    	mov.d     [--w15], w6
    2cfc:	4f 02 be    	mov.d     [--w15], w4
    2cfe:	4f 01 be    	mov.d     [--w15], w2
    2d00:	4f 00 be    	mov.d     [--w15], w0
    2d02:	36 00 f9    	pop       0x36
    2d04:	00 40 06    	retfie    

00002d06 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2d06:	36 00 f8    	push      0x36
    2d08:	80 9f be    	mov.d     w0, [w15++]
    2d0a:	82 9f be    	mov.d     w2, [w15++]
    2d0c:	84 9f be    	mov.d     w4, [w15++]
    2d0e:	86 9f be    	mov.d     w6, [w15++]
    2d10:	32 00 f8    	push      0x32
    2d12:	34 00 f8    	push      0x34
    2d14:	10 00 20    	mov.w     #0x1, w0
    2d16:	a0 01 88    	mov.w     w0, 0x34
    2d18:	00 20 20    	mov.w     #0x200, w0
    2d1a:	90 01 88    	mov.w     w0, 0x32
    2d1c:	00 00 fa    	lnk       #0x0

00002d1e <.LSM16>:
    timer_serviceInterrupt(&timer2);
    2d1e:	e0 31 21    	mov.w     #0x131e, w0
    2d20:	b2 ff 07    	rcall     0x2c86 <_timer_serviceInterrupt>

00002d22 <.LSM17>:
}
    2d22:	00 80 fa    	ulnk      
    2d24:	34 00 f9    	pop       0x34
    2d26:	32 00 f9    	pop       0x32
    2d28:	4f 03 be    	mov.d     [--w15], w6
    2d2a:	4f 02 be    	mov.d     [--w15], w4
    2d2c:	4f 01 be    	mov.d     [--w15], w2
    2d2e:	4f 00 be    	mov.d     [--w15], w0
    2d30:	36 00 f9    	pop       0x36
    2d32:	00 40 06    	retfie    

00002d34 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    2d34:	36 00 f8    	push      0x36
    2d36:	80 9f be    	mov.d     w0, [w15++]
    2d38:	82 9f be    	mov.d     w2, [w15++]
    2d3a:	84 9f be    	mov.d     w4, [w15++]
    2d3c:	86 9f be    	mov.d     w6, [w15++]
    2d3e:	32 00 f8    	push      0x32
    2d40:	34 00 f8    	push      0x34
    2d42:	10 00 20    	mov.w     #0x1, w0
    2d44:	a0 01 88    	mov.w     w0, 0x34
    2d46:	00 20 20    	mov.w     #0x200, w0
    2d48:	90 01 88    	mov.w     w0, 0x32
    2d4a:	00 00 fa    	lnk       #0x0

00002d4c <.LSM19>:
    timer_serviceInterrupt(&timer3);
    2d4c:	40 33 21    	mov.w     #0x1334, w0
    2d4e:	9b ff 07    	rcall     0x2c86 <_timer_serviceInterrupt>

00002d50 <.LSM20>:
}
    2d50:	00 80 fa    	ulnk      
    2d52:	34 00 f9    	pop       0x34
    2d54:	32 00 f9    	pop       0x32
    2d56:	4f 03 be    	mov.d     [--w15], w6
    2d58:	4f 02 be    	mov.d     [--w15], w4
    2d5a:	4f 01 be    	mov.d     [--w15], w2
    2d5c:	4f 00 be    	mov.d     [--w15], w0
    2d5e:	36 00 f9    	pop       0x36
    2d60:	00 40 06    	retfie    

00002d62 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    2d62:	36 00 f8    	push      0x36
    2d64:	80 9f be    	mov.d     w0, [w15++]
    2d66:	82 9f be    	mov.d     w2, [w15++]
    2d68:	84 9f be    	mov.d     w4, [w15++]
    2d6a:	86 9f be    	mov.d     w6, [w15++]
    2d6c:	32 00 f8    	push      0x32
    2d6e:	34 00 f8    	push      0x34
    2d70:	10 00 20    	mov.w     #0x1, w0
    2d72:	a0 01 88    	mov.w     w0, 0x34
    2d74:	00 20 20    	mov.w     #0x200, w0
    2d76:	90 01 88    	mov.w     w0, 0x32
    2d78:	00 00 fa    	lnk       #0x0

00002d7a <.LSM22>:
    timer_serviceInterrupt(&timer4);
    2d7a:	a0 34 21    	mov.w     #0x134a, w0
    2d7c:	84 ff 07    	rcall     0x2c86 <_timer_serviceInterrupt>

00002d7e <.LSM23>:
}
    2d7e:	00 80 fa    	ulnk      
    2d80:	34 00 f9    	pop       0x34
    2d82:	32 00 f9    	pop       0x32
    2d84:	4f 03 be    	mov.d     [--w15], w6
    2d86:	4f 02 be    	mov.d     [--w15], w4
    2d88:	4f 01 be    	mov.d     [--w15], w2
    2d8a:	4f 00 be    	mov.d     [--w15], w0
    2d8c:	36 00 f9    	pop       0x36
    2d8e:	00 40 06    	retfie    

00002d90 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    2d90:	36 00 f8    	push      0x36
    2d92:	80 9f be    	mov.d     w0, [w15++]
    2d94:	82 9f be    	mov.d     w2, [w15++]
    2d96:	84 9f be    	mov.d     w4, [w15++]
    2d98:	86 9f be    	mov.d     w6, [w15++]
    2d9a:	32 00 f8    	push      0x32
    2d9c:	34 00 f8    	push      0x34
    2d9e:	10 00 20    	mov.w     #0x1, w0
    2da0:	a0 01 88    	mov.w     w0, 0x34
    2da2:	00 20 20    	mov.w     #0x200, w0
    2da4:	90 01 88    	mov.w     w0, 0x32
    2da6:	00 00 fa    	lnk       #0x0

00002da8 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    2da8:	00 36 21    	mov.w     #0x1360, w0
    2daa:	6d ff 07    	rcall     0x2c86 <_timer_serviceInterrupt>

00002dac <.LSM26>:
}
    2dac:	00 80 fa    	ulnk      
    2dae:	34 00 f9    	pop       0x34
    2db0:	32 00 f9    	pop       0x32
    2db2:	4f 03 be    	mov.d     [--w15], w6
    2db4:	4f 02 be    	mov.d     [--w15], w4
    2db6:	4f 01 be    	mov.d     [--w15], w2
    2db8:	4f 00 be    	mov.d     [--w15], w0
    2dba:	36 00 f9    	pop       0x36
    2dbc:	00 40 06    	retfie    

00002dbe <_init_timer>:

void init_timer(void) {
    2dbe:	00 00 fa    	lnk       #0x0

00002dc0 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    2dc0:	b0 00 20    	mov.w     #0xb, w0
    2dc2:	80 1f 78    	mov.w     w0, [w15++]
    2dc4:	47 00 20    	mov.w     #0x4, w7
    2dc6:	36 c0 b3    	mov.b     #0x3, w6
    2dc8:	45 09 20    	mov.w     #0x94, w5
    2dca:	44 08 20    	mov.w     #0x84, w4
    2dcc:	03 10 20    	mov.w     #0x100, w3
    2dce:	22 10 20    	mov.w     #0x102, w2
    2dd0:	41 10 20    	mov.w     #0x104, w1
    2dd2:	80 30 21    	mov.w     #0x1308, w0
    2dd4:	33 00 07    	rcall     0x2e3c <_timer_init>
    2dd6:	8f 87 e9    	dec2.w    w15, w15

00002dd8 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    2dd8:	c0 00 20    	mov.w     #0xc, w0
    2dda:	80 1f 78    	mov.w     w0, [w15++]
    2ddc:	80 03 eb    	clr.w     w7
    2dde:	76 c0 b3    	mov.b     #0x7, w6
    2de0:	45 09 20    	mov.w     #0x94, w5
    2de2:	44 08 20    	mov.w     #0x84, w4
    2de4:	63 10 20    	mov.w     #0x106, w3
    2de6:	c2 10 20    	mov.w     #0x10c, w2
    2de8:	01 11 20    	mov.w     #0x110, w1
    2dea:	e0 31 21    	mov.w     #0x131e, w0
    2dec:	27 00 07    	rcall     0x2e3c <_timer_init>
    2dee:	8f 87 e9    	dec2.w    w15, w15

00002df0 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    2df0:	d0 00 20    	mov.w     #0xd, w0
    2df2:	80 1f 78    	mov.w     w0, [w15++]
    2df4:	17 00 20    	mov.w     #0x1, w7
    2df6:	86 c0 b3    	mov.b     #0x8, w6
    2df8:	45 09 20    	mov.w     #0x94, w5
    2dfa:	44 08 20    	mov.w     #0x84, w4
    2dfc:	a3 10 20    	mov.w     #0x10a, w3
    2dfe:	e2 10 20    	mov.w     #0x10e, w2
    2e00:	21 11 20    	mov.w     #0x112, w1
    2e02:	40 33 21    	mov.w     #0x1334, w0
    2e04:	1b 00 07    	rcall     0x2e3c <_timer_init>
    2e06:	8f 87 e9    	dec2.w    w15, w15

00002e08 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    2e08:	e0 00 20    	mov.w     #0xe, w0
    2e0a:	80 1f 78    	mov.w     w0, [w15++]
    2e0c:	27 00 20    	mov.w     #0x2, w7
    2e0e:	b6 c0 b3    	mov.b     #0xb, w6
    2e10:	65 09 20    	mov.w     #0x96, w5
    2e12:	64 08 20    	mov.w     #0x86, w4
    2e14:	43 11 20    	mov.w     #0x114, w3
    2e16:	a2 11 20    	mov.w     #0x11a, w2
    2e18:	e1 11 20    	mov.w     #0x11e, w1
    2e1a:	a0 34 21    	mov.w     #0x134a, w0
    2e1c:	0f 00 07    	rcall     0x2e3c <_timer_init>
    2e1e:	8f 87 e9    	dec2.w    w15, w15

00002e20 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    2e20:	f0 00 20    	mov.w     #0xf, w0
    2e22:	80 1f 78    	mov.w     w0, [w15++]
    2e24:	37 00 20    	mov.w     #0x3, w7
    2e26:	c6 c0 b3    	mov.b     #0xc, w6
    2e28:	65 09 20    	mov.w     #0x96, w5
    2e2a:	64 08 20    	mov.w     #0x86, w4
    2e2c:	83 11 20    	mov.w     #0x118, w3
    2e2e:	c2 11 20    	mov.w     #0x11c, w2
    2e30:	01 12 20    	mov.w     #0x120, w1
    2e32:	00 36 21    	mov.w     #0x1360, w0
    2e34:	03 00 07    	rcall     0x2e3c <_timer_init>
    2e36:	8f 87 e9    	dec2.w    w15, w15

00002e38 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    2e38:	00 80 fa    	ulnk      
    2e3a:	00 00 06    	return    

00002e3c <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    2e3c:	10 00 fa    	lnk       #0x10
    2e3e:	00 0f 78    	mov.w     w0, [w14]
    2e40:	11 07 98    	mov.w     w1, [w14+2]
    2e42:	22 07 98    	mov.w     w2, [w14+4]
    2e44:	33 07 98    	mov.w     w3, [w14+6]
    2e46:	44 07 98    	mov.w     w4, [w14+8]
    2e48:	55 07 98    	mov.w     w5, [w14+10]
    2e4a:	46 4f 98    	mov.b     w6, [w14+12]
    2e4c:	77 07 98    	mov.w     w7, [w14+14]

00002e4e <.LSM35>:
    self->TxCON = TxCON;
    2e4e:	1e 00 78    	mov.w     [w14], w0
    2e50:	9e 00 90    	mov.w     [w14+2], w1
    2e52:	01 08 78    	mov.w     w1, [w0]

00002e54 <.LSM36>:
    self->PRx = PRx;
    2e54:	1e 00 78    	mov.w     [w14], w0
    2e56:	ae 00 90    	mov.w     [w14+4], w1
    2e58:	11 00 98    	mov.w     w1, [w0+2]

00002e5a <.LSM37>:
    self->TMRx = TMRx;
    2e5a:	1e 00 78    	mov.w     [w14], w0
    2e5c:	be 00 90    	mov.w     [w14+6], w1
    2e5e:	21 00 98    	mov.w     w1, [w0+4]

00002e60 <.LSM38>:
    self->IFSy = IFSy;
    2e60:	1e 00 78    	mov.w     [w14], w0
    2e62:	ce 00 90    	mov.w     [w14+8], w1
    2e64:	31 00 98    	mov.w     w1, [w0+6]

00002e66 <.LSM39>:
    self->IECy = IECy;
    2e66:	1e 00 78    	mov.w     [w14], w0
    2e68:	de 00 90    	mov.w     [w14+10], w1
    2e6a:	41 00 98    	mov.w     w1, [w0+8]

00002e6c <.LSM40>:
    self->flagbit = flagbit;
    2e6c:	1e 00 78    	mov.w     [w14], w0
    2e6e:	ce 48 90    	mov.b     [w14+12], w1
    2e70:	21 48 98    	mov.b     w1, [w0+10]

00002e72 <.LSM41>:
    self->octselnum = octselnum;
    2e72:	1e 00 78    	mov.w     [w14], w0
    2e74:	fe 00 90    	mov.w     [w14+14], w1
    2e76:	61 00 98    	mov.w     w1, [w0+12]

00002e78 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    2e78:	1e 00 78    	mov.w     [w14], w0
    2e7a:	ce b8 97    	mov.w     [w14-8], w1
    2e7c:	71 00 98    	mov.w     w1, [w0+14]

00002e7e <.LSM43>:
    self->aftercount = 0;
    2e7e:	1e 00 78    	mov.w     [w14], w0
    2e80:	80 00 eb    	clr.w     w1
    2e82:	01 08 98    	mov.w     w1, [w0+16]

00002e84 <.LSM44>:
    self->every = NULL;
    2e84:	1e 00 78    	mov.w     [w14], w0
    2e86:	80 00 eb    	clr.w     w1
    2e88:	11 08 98    	mov.w     w1, [w0+18]

00002e8a <.LSM45>:
    self->after = NULL;
    2e8a:	1e 00 78    	mov.w     [w14], w0
    2e8c:	80 00 eb    	clr.w     w1
    2e8e:	21 08 98    	mov.w     w1, [w0+20]

00002e90 <.LSM46>:
}
    2e90:	00 80 fa    	ulnk      
    2e92:	00 00 06    	return    

00002e94 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    2e94:	06 00 fa    	lnk       #0x6
    2e96:	88 1f 78    	mov.w     w8, [w15++]
    2e98:	00 0f 78    	mov.w     w0, [w14]
    2e9a:	12 07 98    	mov.w     w2, [w14+2]
    2e9c:	23 07 98    	mov.w     w3, [w14+4]

00002e9e <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    2e9e:	18 c0 b3    	mov.b     #0x1, w8
    2ea0:	d2 7b 23    	mov.w     #0x37bd, w2
    2ea2:	63 f8 23    	mov.w     #0x3f86, w3
    2ea4:	1e 00 90    	mov.w     [w14+2], w0
    2ea6:	ae 00 90    	mov.w     [w14+4], w1
    2ea8:	4e f2 07    	rcall     0x1346 <___gesf2>
    2eaa:	00 00 e0    	cp0.w     w0
    2eac:	01 00 3c    	bra       GT, 0x2eb0 <.L14>
    2eae:	00 44 eb    	clr.b     w8

00002eb0 <.L14>:
    2eb0:	08 04 e0    	cp0.b     w8
    2eb2:	69 00 3a    	bra       NZ, 0x2f86 <.L23>

00002eb4 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    2eb4:	18 c0 b3    	mov.b     #0x1, w8
    2eb6:	d2 7b 23    	mov.w     #0x37bd, w2
    2eb8:	63 e8 23    	mov.w     #0x3e86, w3
    2eba:	1e 00 90    	mov.w     [w14+2], w0
    2ebc:	ae 00 90    	mov.w     [w14+4], w1
    2ebe:	43 f2 07    	rcall     0x1346 <___gesf2>
    2ec0:	00 00 e0    	cp0.w     w0
    2ec2:	01 00 3c    	bra       GT, 0x2ec6 <.L17>
    2ec4:	00 44 eb    	clr.b     w8

00002ec6 <.L17>:
    2ec6:	08 04 e0    	cp0.b     w8
    2ec8:	12 00 32    	bra       Z, 0x2eee <.L18>

00002eca <.LSM50>:
        timer_stop(self);
    2eca:	1e 00 78    	mov.w     [w14], w0
    2ecc:	c4 00 07    	rcall     0x3056 <_timer_stop>

00002ece <.LSM51>:
        poke(self->TxCON, 0x0030);
    2ece:	1e 00 78    	mov.w     [w14], w0
    2ed0:	10 00 78    	mov.w     [w0], w0
    2ed2:	01 03 20    	mov.w     #0x30, w1
    2ed4:	01 08 78    	mov.w     w1, [w0]

00002ed6 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2ed6:	1e 00 78    	mov.w     [w14], w0
    2ed8:	10 04 90    	mov.w     [w0+2], w8
    2eda:	02 40 22    	mov.w     #0x2400, w2
    2edc:	43 77 24    	mov.w     #0x4774, w3
    2ede:	1e 00 90    	mov.w     [w14+2], w0
    2ee0:	ae 00 90    	mov.w     [w14+4], w1
    2ee2:	a3 f2 07    	rcall     0x142a <___mulsf3>
    2ee4:	32 f2 07    	rcall     0x134a <___fixunssfsi>
    2ee6:	00 00 78    	mov.w     w0, w0
    2ee8:	00 00 e9    	dec.w     w0, w0
    2eea:	00 0c 78    	mov.w     w0, [w8]
    2eec:	4d 00 37    	bra       0x2f88 <.L13>

00002eee <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    2eee:	18 c0 b3    	mov.b     #0x1, w8
    2ef0:	d2 7b 23    	mov.w     #0x37bd, w2
    2ef2:	63 d0 23    	mov.w     #0x3d06, w3
    2ef4:	1e 00 90    	mov.w     [w14+2], w0
    2ef6:	ae 00 90    	mov.w     [w14+4], w1
    2ef8:	26 f2 07    	rcall     0x1346 <___gesf2>
    2efa:	00 00 e0    	cp0.w     w0
    2efc:	01 00 3c    	bra       GT, 0x2f00 <.L19>
    2efe:	00 44 eb    	clr.b     w8

00002f00 <.L19>:
    2f00:	08 04 e0    	cp0.b     w8
    2f02:	12 00 32    	bra       Z, 0x2f28 <.L20>

00002f04 <.LSM54>:
        timer_stop(self);
    2f04:	1e 00 78    	mov.w     [w14], w0
    2f06:	a7 00 07    	rcall     0x3056 <_timer_stop>

00002f08 <.LSM55>:
        poke(self->TxCON, 0x0020);
    2f08:	1e 00 78    	mov.w     [w14], w0
    2f0a:	10 00 78    	mov.w     [w0], w0
    2f0c:	01 02 20    	mov.w     #0x20, w1
    2f0e:	01 08 78    	mov.w     w1, [w0]

00002f10 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    2f10:	1e 00 78    	mov.w     [w14], w0
    2f12:	10 04 90    	mov.w     [w0+2], w8
    2f14:	02 40 22    	mov.w     #0x2400, w2
    2f16:	43 87 24    	mov.w     #0x4874, w3
    2f18:	1e 00 90    	mov.w     [w14+2], w0
    2f1a:	ae 00 90    	mov.w     [w14+4], w1
    2f1c:	86 f2 07    	rcall     0x142a <___mulsf3>
    2f1e:	15 f2 07    	rcall     0x134a <___fixunssfsi>
    2f20:	00 00 78    	mov.w     w0, w0
    2f22:	00 00 e9    	dec.w     w0, w0
    2f24:	00 0c 78    	mov.w     w0, [w8]
    2f26:	30 00 37    	bra       0x2f88 <.L13>

00002f28 <.L20>:
    } else if (period>(65536.*TCY)) {
    2f28:	18 c0 b3    	mov.b     #0x1, w8
    2f2a:	d2 7b 23    	mov.w     #0x37bd, w2
    2f2c:	63 b8 23    	mov.w     #0x3b86, w3
    2f2e:	1e 00 90    	mov.w     [w14+2], w0
    2f30:	ae 00 90    	mov.w     [w14+4], w1
    2f32:	09 f2 07    	rcall     0x1346 <___gesf2>
    2f34:	00 00 e0    	cp0.w     w0
    2f36:	01 00 3c    	bra       GT, 0x2f3a <.L21>
    2f38:	00 44 eb    	clr.b     w8

00002f3a <.L21>:
    2f3a:	08 04 e0    	cp0.b     w8
    2f3c:	12 00 32    	bra       Z, 0x2f62 <.L22>

00002f3e <.LSM58>:
        timer_stop(self);
    2f3e:	1e 00 78    	mov.w     [w14], w0
    2f40:	8a 00 07    	rcall     0x3056 <_timer_stop>

00002f42 <.LSM59>:
        poke(self->TxCON, 0x0010);
    2f42:	1e 00 78    	mov.w     [w14], w0
    2f44:	10 00 78    	mov.w     [w0], w0
    2f46:	01 01 20    	mov.w     #0x10, w1
    2f48:	01 08 78    	mov.w     w1, [w0]

00002f4a <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    2f4a:	1e 00 78    	mov.w     [w14], w0
    2f4c:	10 04 90    	mov.w     [w0+2], w8
    2f4e:	02 40 22    	mov.w     #0x2400, w2
    2f50:	43 9f 24    	mov.w     #0x49f4, w3
    2f52:	1e 00 90    	mov.w     [w14+2], w0
    2f54:	ae 00 90    	mov.w     [w14+4], w1
    2f56:	69 f2 07    	rcall     0x142a <___mulsf3>
    2f58:	f8 f1 07    	rcall     0x134a <___fixunssfsi>
    2f5a:	00 00 78    	mov.w     w0, w0
    2f5c:	00 00 e9    	dec.w     w0, w0
    2f5e:	00 0c 78    	mov.w     w0, [w8]
    2f60:	13 00 37    	bra       0x2f88 <.L13>

00002f62 <.L22>:
    } else {
        timer_stop(self);
    2f62:	1e 00 78    	mov.w     [w14], w0
    2f64:	78 00 07    	rcall     0x3056 <_timer_stop>

00002f66 <.LSM62>:
        poke(self->TxCON, 0x0000);
    2f66:	1e 00 78    	mov.w     [w14], w0
    2f68:	10 00 78    	mov.w     [w0], w0
    2f6a:	80 00 eb    	clr.w     w1
    2f6c:	01 08 78    	mov.w     w1, [w0]

00002f6e <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    2f6e:	1e 00 78    	mov.w     [w14], w0
    2f70:	10 04 90    	mov.w     [w0+2], w8
    2f72:	02 40 22    	mov.w     #0x2400, w2
    2f74:	43 b7 24    	mov.w     #0x4b74, w3
    2f76:	1e 00 90    	mov.w     [w14+2], w0
    2f78:	ae 00 90    	mov.w     [w14+4], w1
    2f7a:	57 f2 07    	rcall     0x142a <___mulsf3>
    2f7c:	e6 f1 07    	rcall     0x134a <___fixunssfsi>
    2f7e:	00 00 78    	mov.w     w0, w0
    2f80:	00 00 e9    	dec.w     w0, w0
    2f82:	00 0c 78    	mov.w     w0, [w8]
    2f84:	01 00 37    	bra       0x2f88 <.L13>

00002f86 <.L23>:
    2f86:	00 00 00    	nop       

00002f88 <.L13>:
    }
}
    2f88:	4f 04 78    	mov.w     [--w15], w8
    2f8a:	00 80 fa    	ulnk      
    2f8c:	00 00 06    	return    

00002f8e <_timer_period>:

float timer_period(_TIMER *self) {
    2f8e:	04 00 fa    	lnk       #0x4
    2f90:	88 9f be    	mov.d     w8, [w15++]
    2f92:	10 07 98    	mov.w     w0, [w14+2]

00002f94 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2f94:	1e 00 90    	mov.w     [w14+2], w0
    2f96:	10 00 78    	mov.w     [w0], w0
    2f98:	90 00 78    	mov.w     [w0], w1
    2f9a:	00 03 20    	mov.w     #0x30, w0
    2f9c:	00 80 60    	and.w     w1, w0, w0
    2f9e:	44 00 de    	lsr.w     w0, #0x4, w0
    2fa0:	00 0f 78    	mov.w     w0, [w14]

00002fa2 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    2fa2:	1e 00 78    	mov.w     [w14], w0
    2fa4:	c2 00 dd    	sl.w      w0, #0x2, w1
    2fa6:	20 3b 21    	mov.w     #0x13b2, w0
    2fa8:	00 80 40    	add.w     w1, w0, w0
    2faa:	10 04 be    	mov.d     [w0], w8
    2fac:	1e 00 90    	mov.w     [w14+2], w0
    2fae:	10 00 90    	mov.w     [w0+2], w0
    2fb0:	10 00 78    	mov.w     [w0], w0
    2fb2:	80 00 eb    	clr.w     w1
    2fb4:	e5 f1 07    	rcall     0x1380 <___floatunsisf>
    2fb6:	02 00 20    	mov.w     #0x0, w2
    2fb8:	03 f8 23    	mov.w     #0x3f80, w3
    2fba:	24 f1 07    	rcall     0x1204 <___addsf3>
    2fbc:	00 01 be    	mov.d     w0, w2
    2fbe:	08 00 be    	mov.d     w8, w0
    2fc0:	34 f2 07    	rcall     0x142a <___mulsf3>

00002fc2 <.LSM69>:
}
    2fc2:	4f 04 be    	mov.d     [--w15], w8
    2fc4:	00 80 fa    	ulnk      
    2fc6:	00 00 06    	return    

00002fc8 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    2fc8:	06 00 fa    	lnk       #0x6
    2fca:	00 0f 78    	mov.w     w0, [w14]
    2fcc:	12 07 98    	mov.w     w2, [w14+2]
    2fce:	23 07 98    	mov.w     w3, [w14+4]

00002fd0 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    2fd0:	1e 01 90    	mov.w     [w14+2], w2
    2fd2:	ae 01 90    	mov.w     [w14+4], w3
    2fd4:	00 00 20    	mov.w     #0x0, w0
    2fd6:	01 f8 23    	mov.w     #0x3f80, w1
    2fd8:	72 f1 07    	rcall     0x12be <___divsf3>
    2fda:	00 01 be    	mov.d     w0, w2
    2fdc:	1e 00 78    	mov.w     [w14], w0
    2fde:	5a ff 07    	rcall     0x2e94 <_timer_setPeriod>

00002fe0 <.LSM72>:
}
    2fe0:	00 80 fa    	ulnk      
    2fe2:	00 00 06    	return    

00002fe4 <_timer_freq>:

float timer_freq(_TIMER *self) {
    2fe4:	02 00 fa    	lnk       #0x2
    2fe6:	00 0f 78    	mov.w     w0, [w14]

00002fe8 <.LSM74>:
    return 1./timer_period(self);
    2fe8:	1e 00 78    	mov.w     [w14], w0
    2fea:	d1 ff 07    	rcall     0x2f8e <_timer_period>
    2fec:	00 01 be    	mov.d     w0, w2
    2fee:	00 00 20    	mov.w     #0x0, w0
    2ff0:	01 f8 23    	mov.w     #0x3f80, w1
    2ff2:	65 f1 07    	rcall     0x12be <___divsf3>

00002ff4 <.LSM75>:
}
    2ff4:	00 80 fa    	ulnk      
    2ff6:	00 00 06    	return    

00002ff8 <_timer_time>:

float timer_time(_TIMER *self) {
    2ff8:	04 00 fa    	lnk       #0x4
    2ffa:	88 9f be    	mov.d     w8, [w15++]
    2ffc:	10 07 98    	mov.w     w0, [w14+2]

00002ffe <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    2ffe:	1e 00 90    	mov.w     [w14+2], w0
    3000:	10 00 78    	mov.w     [w0], w0
    3002:	90 00 78    	mov.w     [w0], w1
    3004:	00 03 20    	mov.w     #0x30, w0
    3006:	00 80 60    	and.w     w1, w0, w0
    3008:	44 00 de    	lsr.w     w0, #0x4, w0
    300a:	00 0f 78    	mov.w     w0, [w14]

0000300c <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    300c:	1e 00 78    	mov.w     [w14], w0
    300e:	c2 00 dd    	sl.w      w0, #0x2, w1
    3010:	20 3b 21    	mov.w     #0x13b2, w0
    3012:	00 80 40    	add.w     w1, w0, w0
    3014:	10 04 be    	mov.d     [w0], w8
    3016:	1e 00 90    	mov.w     [w14+2], w0
    3018:	10 00 90    	mov.w     [w0+2], w0
    301a:	10 00 78    	mov.w     [w0], w0
    301c:	80 00 eb    	clr.w     w1
    301e:	b0 f1 07    	rcall     0x1380 <___floatunsisf>
    3020:	02 00 20    	mov.w     #0x0, w2
    3022:	03 f8 23    	mov.w     #0x3f80, w3
    3024:	ef f0 07    	rcall     0x1204 <___addsf3>
    3026:	00 01 be    	mov.d     w0, w2
    3028:	08 00 be    	mov.d     w8, w0
    302a:	ff f1 07    	rcall     0x142a <___mulsf3>

0000302c <.LSM79>:
}
    302c:	4f 04 be    	mov.d     [--w15], w8
    302e:	00 80 fa    	ulnk      
    3030:	00 00 06    	return    

00003032 <_timer_start>:

void timer_start(_TIMER *self) {
    3032:	02 00 fa    	lnk       #0x2
    3034:	00 0f 78    	mov.w     w0, [w14]

00003036 <.LSM81>:
    timer_lower(self);
    3036:	1e 00 78    	mov.w     [w14], w0
    3038:	2b 00 07    	rcall     0x3090 <_timer_lower>

0000303a <.LSM82>:
    poke(self->TMRx, 0);
    303a:	1e 00 78    	mov.w     [w14], w0
    303c:	20 00 90    	mov.w     [w0+4], w0
    303e:	80 00 eb    	clr.w     w1
    3040:	01 08 78    	mov.w     w1, [w0]

00003042 <.LSM83>:
    bitset(self->TxCON, 15);
    3042:	1e 00 78    	mov.w     [w14], w0
    3044:	10 00 78    	mov.w     [w0], w0
    3046:	9e 00 78    	mov.w     [w14], w1
    3048:	91 00 78    	mov.w     [w1], w1
    304a:	11 01 78    	mov.w     [w1], w2
    304c:	01 00 28    	mov.w     #0x8000, w1
    304e:	82 80 70    	ior.w     w1, w2, w1
    3050:	01 08 78    	mov.w     w1, [w0]

00003052 <.LSM84>:
}
    3052:	00 80 fa    	ulnk      
    3054:	00 00 06    	return    

00003056 <_timer_stop>:

void timer_stop(_TIMER *self) {
    3056:	02 00 fa    	lnk       #0x2
    3058:	00 0f 78    	mov.w     w0, [w14]

0000305a <.LSM86>:
    bitclear(self->TxCON, 15);
    305a:	1e 00 78    	mov.w     [w14], w0
    305c:	10 00 78    	mov.w     [w0], w0
    305e:	9e 00 78    	mov.w     [w14], w1
    3060:	91 00 78    	mov.w     [w1], w1
    3062:	11 01 78    	mov.w     [w1], w2
    3064:	f1 ff 27    	mov.w     #0x7fff, w1
    3066:	81 00 61    	and.w     w2, w1, w1
    3068:	01 08 78    	mov.w     w1, [w0]

0000306a <.LSM87>:
}
    306a:	00 80 fa    	ulnk      
    306c:	00 00 06    	return    

0000306e <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    306e:	02 00 fa    	lnk       #0x2
    3070:	00 0f 78    	mov.w     w0, [w14]

00003072 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    3072:	1e 00 78    	mov.w     [w14], w0
    3074:	30 00 90    	mov.w     [w0+6], w0
    3076:	90 00 78    	mov.w     [w0], w1
    3078:	1e 00 78    	mov.w     [w14], w0
    307a:	20 48 90    	mov.b     [w0+10], w0
    307c:	00 80 fb    	ze        w0, w0
    307e:	12 00 20    	mov.w     #0x1, w2
    3080:	00 10 dd    	sl.w      w2, w0, w0
    3082:	00 80 60    	and.w     w1, w0, w0
    3084:	00 f0 a7    	btsc.w    w0, #0xf
    3086:	00 00 ea    	neg.w     w0, w0
    3088:	00 00 ea    	neg.w     w0, w0
    308a:	4f 00 de    	lsr.w     w0, #0xf, w0

0000308c <.LSM90>:
}
    308c:	00 80 fa    	ulnk      
    308e:	00 00 06    	return    

00003090 <_timer_lower>:

void timer_lower(_TIMER *self) {
    3090:	02 00 fa    	lnk       #0x2
    3092:	00 0f 78    	mov.w     w0, [w14]

00003094 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3094:	1e 00 78    	mov.w     [w14], w0
    3096:	30 00 90    	mov.w     [w0+6], w0
    3098:	9e 00 78    	mov.w     [w14], w1
    309a:	b1 00 90    	mov.w     [w1+6], w1
    309c:	11 01 78    	mov.w     [w1], w2
    309e:	9e 00 78    	mov.w     [w14], w1
    30a0:	a1 48 90    	mov.b     [w1+10], w1
    30a2:	81 80 fb    	ze        w1, w1
    30a4:	13 00 20    	mov.w     #0x1, w3
    30a6:	81 18 dd    	sl.w      w3, w1, w1
    30a8:	81 80 ea    	com.w     w1, w1
    30aa:	81 00 61    	and.w     w2, w1, w1
    30ac:	01 08 78    	mov.w     w1, [w0]

000030ae <.LSM93>:
}
    30ae:	00 80 fa    	ulnk      
    30b0:	00 00 06    	return    

000030b2 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    30b2:	02 00 fa    	lnk       #0x2
    30b4:	00 0f 78    	mov.w     w0, [w14]

000030b6 <.LSM95>:
    return peek(self->TMRx);
    30b6:	1e 00 78    	mov.w     [w14], w0
    30b8:	20 00 90    	mov.w     [w0+4], w0
    30ba:	10 00 78    	mov.w     [w0], w0

000030bc <.LSM96>:
}
    30bc:	00 80 fa    	ulnk      
    30be:	00 00 06    	return    

000030c0 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    30c0:	02 00 fa    	lnk       #0x2
    30c2:	00 0f 78    	mov.w     w0, [w14]

000030c4 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    30c4:	1e 00 78    	mov.w     [w14], w0
    30c6:	40 00 90    	mov.w     [w0+8], w0
    30c8:	9e 00 78    	mov.w     [w14], w1
    30ca:	c1 00 90    	mov.w     [w1+8], w1
    30cc:	11 01 78    	mov.w     [w1], w2
    30ce:	9e 00 78    	mov.w     [w14], w1
    30d0:	a1 48 90    	mov.b     [w1+10], w1
    30d2:	81 80 fb    	ze        w1, w1
    30d4:	13 00 20    	mov.w     #0x1, w3
    30d6:	81 18 dd    	sl.w      w3, w1, w1
    30d8:	82 80 70    	ior.w     w1, w2, w1
    30da:	01 08 78    	mov.w     w1, [w0]

000030dc <.LSM99>:
}
    30dc:	00 80 fa    	ulnk      
    30de:	00 00 06    	return    

000030e0 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    30e0:	02 00 fa    	lnk       #0x2
    30e2:	00 0f 78    	mov.w     w0, [w14]

000030e4 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    30e4:	1e 00 78    	mov.w     [w14], w0
    30e6:	40 00 90    	mov.w     [w0+8], w0
    30e8:	9e 00 78    	mov.w     [w14], w1
    30ea:	c1 00 90    	mov.w     [w1+8], w1
    30ec:	11 01 78    	mov.w     [w1], w2
    30ee:	9e 00 78    	mov.w     [w14], w1
    30f0:	a1 48 90    	mov.b     [w1+10], w1
    30f2:	81 80 fb    	ze        w1, w1
    30f4:	13 00 20    	mov.w     #0x1, w3
    30f6:	81 18 dd    	sl.w      w3, w1, w1
    30f8:	81 80 ea    	com.w     w1, w1
    30fa:	81 00 61    	and.w     w2, w1, w1
    30fc:	01 08 78    	mov.w     w1, [w0]

000030fe <.LSM102>:
}
    30fe:	00 80 fa    	ulnk      
    3100:	00 00 06    	return    

00003102 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3102:	08 00 fa    	lnk       #0x8
    3104:	00 0f 78    	mov.w     w0, [w14]
    3106:	12 07 98    	mov.w     w2, [w14+2]
    3108:	23 07 98    	mov.w     w3, [w14+4]
    310a:	31 07 98    	mov.w     w1, [w14+6]

0000310c <.LSM104>:
    timer_disableInterrupt(self);
    310c:	1e 00 78    	mov.w     [w14], w0
    310e:	e8 ff 07    	rcall     0x30e0 <_timer_disableInterrupt>

00003110 <.LSM105>:
    timer_setPeriod(self, interval);
    3110:	1e 01 90    	mov.w     [w14+2], w2
    3112:	ae 01 90    	mov.w     [w14+4], w3
    3114:	1e 00 78    	mov.w     [w14], w0
    3116:	be fe 07    	rcall     0x2e94 <_timer_setPeriod>

00003118 <.LSM106>:
    self->aftercount = 0;
    3118:	1e 00 78    	mov.w     [w14], w0
    311a:	80 00 eb    	clr.w     w1
    311c:	01 08 98    	mov.w     w1, [w0+16]

0000311e <.LSM107>:
    self->every = callback;
    311e:	1e 00 78    	mov.w     [w14], w0
    3120:	be 00 90    	mov.w     [w14+6], w1
    3122:	11 08 98    	mov.w     w1, [w0+18]

00003124 <.LSM108>:
    self->after = NULL;
    3124:	1e 00 78    	mov.w     [w14], w0
    3126:	80 00 eb    	clr.w     w1
    3128:	21 08 98    	mov.w     w1, [w0+20]

0000312a <.LSM109>:
    timer_enableInterrupt(self);
    312a:	1e 00 78    	mov.w     [w14], w0
    312c:	c9 ff 07    	rcall     0x30c0 <_timer_enableInterrupt>

0000312e <.LSM110>:
    timer_start(self);
    312e:	1e 00 78    	mov.w     [w14], w0
    3130:	80 ff 07    	rcall     0x3032 <_timer_start>

00003132 <.LSM111>:
}
    3132:	00 80 fa    	ulnk      
    3134:	00 00 06    	return    

00003136 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    3136:	0a 00 fa    	lnk       #0xa
    3138:	00 0f 78    	mov.w     w0, [w14]
    313a:	12 07 98    	mov.w     w2, [w14+2]
    313c:	23 07 98    	mov.w     w3, [w14+4]
    313e:	31 07 98    	mov.w     w1, [w14+6]
    3140:	44 07 98    	mov.w     w4, [w14+8]

00003142 <.LSM113>:
    timer_disableInterrupt(self);
    3142:	1e 00 78    	mov.w     [w14], w0
    3144:	cd ff 07    	rcall     0x30e0 <_timer_disableInterrupt>

00003146 <.LSM114>:
    timer_setPeriod(self, delay);
    3146:	1e 01 90    	mov.w     [w14+2], w2
    3148:	ae 01 90    	mov.w     [w14+4], w3
    314a:	1e 00 78    	mov.w     [w14], w0
    314c:	a3 fe 07    	rcall     0x2e94 <_timer_setPeriod>

0000314e <.LSM115>:
    self->aftercount = num_times;
    314e:	1e 00 78    	mov.w     [w14], w0
    3150:	be 00 90    	mov.w     [w14+6], w1
    3152:	01 08 98    	mov.w     w1, [w0+16]

00003154 <.LSM116>:
    self->every = NULL;
    3154:	1e 00 78    	mov.w     [w14], w0
    3156:	80 00 eb    	clr.w     w1
    3158:	11 08 98    	mov.w     w1, [w0+18]

0000315a <.LSM117>:
    self->after = callback;
    315a:	1e 00 78    	mov.w     [w14], w0
    315c:	ce 00 90    	mov.w     [w14+8], w1
    315e:	21 08 98    	mov.w     w1, [w0+20]

00003160 <.LSM118>:
    timer_enableInterrupt(self);
    3160:	1e 00 78    	mov.w     [w14], w0
    3162:	ae ff 07    	rcall     0x30c0 <_timer_enableInterrupt>

00003164 <.LSM119>:
    timer_start(self);
    3164:	1e 00 78    	mov.w     [w14], w0
    3166:	65 ff 07    	rcall     0x3032 <_timer_start>

00003168 <.LSM120>:
}
    3168:	00 80 fa    	ulnk      
    316a:	00 00 06    	return    

0000316c <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    316c:	02 00 fa    	lnk       #0x2
    316e:	00 0f 78    	mov.w     w0, [w14]

00003170 <.LSM122>:
    timer_disableInterrupt(self);
    3170:	1e 00 78    	mov.w     [w14], w0
    3172:	b6 ff 07    	rcall     0x30e0 <_timer_disableInterrupt>

00003174 <.LSM123>:
    timer_lower(self);
    3174:	1e 00 78    	mov.w     [w14], w0
    3176:	8c ff 07    	rcall     0x3090 <_timer_lower>

00003178 <.LSM124>:
    timer_stop(self);
    3178:	1e 00 78    	mov.w     [w14], w0
    317a:	6d ff 07    	rcall     0x3056 <_timer_stop>

0000317c <.LSM125>:
    self->aftercount = 0;
    317c:	1e 00 78    	mov.w     [w14], w0
    317e:	80 00 eb    	clr.w     w1
    3180:	01 08 98    	mov.w     w1, [w0+16]

00003182 <.LSM126>:
    self->every = NULL;
    3182:	1e 00 78    	mov.w     [w14], w0
    3184:	80 00 eb    	clr.w     w1
    3186:	11 08 98    	mov.w     w1, [w0+18]

00003188 <.LSM127>:
    self->after = NULL;
    3188:	1e 00 78    	mov.w     [w14], w0
    318a:	80 00 eb    	clr.w     w1
    318c:	21 08 98    	mov.w     w1, [w0+20]

0000318e <.LSM128>:
}
    318e:	00 80 fa    	ulnk      
    3190:	00 00 06    	return    

00003192 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    3192:	04 00 fa    	lnk       #0x4
    3194:	00 0f 78    	mov.w     w0, [w14]
    3196:	11 07 98    	mov.w     w1, [w14+2]

00003198 <.LSM1>:
    if (val)
    3198:	1e 00 90    	mov.w     [w14+2], w0
    319a:	00 00 e0    	cp0.w     w0
    319c:	0d 00 32    	bra       Z, 0x31b8 <.L2>

0000319e <.LSM2>:
        bitset(self->port, self->bit);
    319e:	1e 00 78    	mov.w     [w14], w0
    31a0:	10 00 78    	mov.w     [w0], w0
    31a2:	9e 00 78    	mov.w     [w14], w1
    31a4:	91 00 78    	mov.w     [w1], w1
    31a6:	11 01 78    	mov.w     [w1], w2
    31a8:	9e 00 78    	mov.w     [w14], w1
    31aa:	e1 40 90    	mov.b     [w1+6], w1
    31ac:	81 80 fb    	ze        w1, w1
    31ae:	13 00 20    	mov.w     #0x1, w3
    31b0:	81 18 dd    	sl.w      w3, w1, w1
    31b2:	82 80 70    	ior.w     w1, w2, w1
    31b4:	01 08 78    	mov.w     w1, [w0]
    31b6:	0d 00 37    	bra       0x31d2 <.L1>

000031b8 <.L2>:
    else
        bitclear(self->port, self->bit);
    31b8:	1e 00 78    	mov.w     [w14], w0
    31ba:	10 00 78    	mov.w     [w0], w0
    31bc:	9e 00 78    	mov.w     [w14], w1
    31be:	91 00 78    	mov.w     [w1], w1
    31c0:	11 01 78    	mov.w     [w1], w2
    31c2:	9e 00 78    	mov.w     [w14], w1
    31c4:	e1 40 90    	mov.b     [w1+6], w1
    31c6:	81 80 fb    	ze        w1, w1
    31c8:	13 00 20    	mov.w     #0x1, w3
    31ca:	81 18 dd    	sl.w      w3, w1, w1
    31cc:	81 80 ea    	com.w     w1, w1
    31ce:	81 00 61    	and.w     w2, w1, w1
    31d0:	01 08 78    	mov.w     w1, [w0]

000031d2 <.L1>:
}
    31d2:	00 80 fa    	ulnk      
    31d4:	00 00 06    	return    

000031d6 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    31d6:	02 00 fa    	lnk       #0x2
    31d8:	00 0f 78    	mov.w     w0, [w14]

000031da <.LSM6>:
    return bitread(self->port, self->bit);
    31da:	1e 00 78    	mov.w     [w14], w0
    31dc:	10 00 78    	mov.w     [w0], w0
    31de:	90 00 78    	mov.w     [w0], w1
    31e0:	1e 00 78    	mov.w     [w14], w0
    31e2:	60 40 90    	mov.b     [w0+6], w0
    31e4:	00 80 fb    	ze        w0, w0
    31e6:	12 00 20    	mov.w     #0x1, w2
    31e8:	00 10 dd    	sl.w      w2, w0, w0
    31ea:	00 80 60    	and.w     w1, w0, w0
    31ec:	00 f0 a7    	btsc.w    w0, #0xf
    31ee:	00 00 ea    	neg.w     w0, w0
    31f0:	00 00 ea    	neg.w     w0, w0
    31f2:	4f 00 de    	lsr.w     w0, #0xf, w0

000031f4 <.LSM7>:
}
    31f4:	00 80 fa    	ulnk      
    31f6:	00 00 06    	return    

000031f8 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    31f8:	02 00 fa    	lnk       #0x2
    31fa:	00 0f 78    	mov.w     w0, [w14]

000031fc <.LSM9>:
    AD1CHS = self->annum;
    31fc:	1e 00 78    	mov.w     [w14], w0
    31fe:	40 00 90    	mov.w     [w0+8], w0
    3200:	40 19 88    	mov.w     w0, 0x328

00003202 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    3202:	20 23 a8    	bset.b    0x320, #0x1

00003204 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    3204:	00 00 00    	nop       

00003206 <.L6>:
    3206:	00 19 80    	mov.w     0x320, w0
    3208:	61 00 60    	and.w     w0, #0x1, w0
    320a:	00 00 e0    	cp0.w     w0
    320c:	fc ff 32    	bra       Z, 0x3206 <.L6>

0000320e <.LSM12>:
    return ADC1BUF0;
    320e:	00 18 80    	mov.w     0x300, w0

00003210 <.LSM13>:
}
    3210:	00 80 fa    	ulnk      
    3212:	00 00 06    	return    

00003214 <_init_pin>:

void init_pin(void) {
    3214:	02 00 fa    	lnk       #0x2

00003216 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3216:	40 6d 20    	mov.w     #0x6d4, w0
    3218:	80 1f 78    	mov.w     w0, [w15++]
    321a:	47 01 20    	mov.w     #0x14, w7
    321c:	00 43 eb    	clr.b     w6
    321e:	80 82 eb    	setm.w    w5
    3220:	54 c0 b3    	mov.b     #0x5, w4
    3222:	80 01 eb    	clr.w     w3
    3224:	82 2d 20    	mov.w     #0x2d8, w2
    3226:	a1 2d 20    	mov.w     #0x2da, w1
    3228:	40 03 21    	mov.w     #0x1034, w0
    322a:	08 01 07    	rcall     0x343c <_pin_init>
    322c:	8f 87 e9    	dec2.w    w15, w15

0000322e <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    322e:	80 6d 20    	mov.w     #0x6d8, w0
    3230:	80 1f 78    	mov.w     w0, [w15++]
    3232:	97 01 20    	mov.w     #0x19, w7
    3234:	86 c0 b3    	mov.b     #0x8, w6
    3236:	80 82 eb    	setm.w    w5
    3238:	44 c0 b3    	mov.b     #0x4, w4
    323a:	80 01 eb    	clr.w     w3
    323c:	82 2d 20    	mov.w     #0x2d8, w2
    323e:	a1 2d 20    	mov.w     #0x2da, w1
    3240:	a0 04 21    	mov.w     #0x104a, w0
    3242:	fc 00 07    	rcall     0x343c <_pin_init>
    3244:	8f 87 e9    	dec2.w    w15, w15

00003246 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3246:	a0 6c 20    	mov.w     #0x6ca, w0
    3248:	80 1f 78    	mov.w     w0, [w15++]
    324a:	a7 00 20    	mov.w     #0xa, w7
    324c:	00 43 eb    	clr.b     w6
    324e:	80 82 eb    	setm.w    w5
    3250:	44 c0 b3    	mov.b     #0x4, w4
    3252:	80 01 eb    	clr.w     w3
    3254:	82 2e 20    	mov.w     #0x2e8, w2
    3256:	a1 2e 20    	mov.w     #0x2ea, w1
    3258:	00 06 21    	mov.w     #0x1060, w0
    325a:	f0 00 07    	rcall     0x343c <_pin_init>
    325c:	8f 87 e9    	dec2.w    w15, w15

0000325e <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    325e:	00 6d 20    	mov.w     #0x6d0, w0
    3260:	80 1f 78    	mov.w     w0, [w15++]
    3262:	17 01 20    	mov.w     #0x11, w7
    3264:	86 c0 b3    	mov.b     #0x8, w6
    3266:	80 82 eb    	setm.w    w5
    3268:	54 c0 b3    	mov.b     #0x5, w4
    326a:	80 01 eb    	clr.w     w3
    326c:	82 2e 20    	mov.w     #0x2e8, w2
    326e:	a1 2e 20    	mov.w     #0x2ea, w1
    3270:	60 07 21    	mov.w     #0x1076, w0
    3272:	e4 00 07    	rcall     0x343c <_pin_init>
    3274:	8f 87 e9    	dec2.w    w15, w15

00003276 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3276:	c0 6d 20    	mov.w     #0x6dc, w0
    3278:	80 1f 78    	mov.w     w0, [w15++]
    327a:	d7 01 20    	mov.w     #0x1d, w7
    327c:	86 c0 b3    	mov.b     #0x8, w6
    327e:	f5 00 20    	mov.w     #0xf, w5
    3280:	f4 c0 b3    	mov.b     #0xf, w4
    3282:	23 4e 20    	mov.w     #0x4e2, w3
    3284:	82 2c 20    	mov.w     #0x2c8, w2
    3286:	a1 2c 20    	mov.w     #0x2ca, w1
    3288:	c0 08 21    	mov.w     #0x108c, w0
    328a:	d8 00 07    	rcall     0x343c <_pin_init>
    328c:	8f 87 e9    	dec2.w    w15, w15

0000328e <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    328e:	00 6d 20    	mov.w     #0x6d0, w0
    3290:	80 1f 78    	mov.w     w0, [w15++]
    3292:	07 01 20    	mov.w     #0x10, w7
    3294:	00 43 eb    	clr.b     w6
    3296:	80 82 eb    	setm.w    w5
    3298:	34 c0 b3    	mov.b     #0x3, w4
    329a:	80 01 eb    	clr.w     w3
    329c:	82 2e 20    	mov.w     #0x2e8, w2
    329e:	a1 2e 20    	mov.w     #0x2ea, w1
    32a0:	20 0a 21    	mov.w     #0x10a2, w0
    32a2:	cc 00 07    	rcall     0x343c <_pin_init>
    32a4:	8f 87 e9    	dec2.w    w15, w15

000032a6 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    32a6:	20 6c 20    	mov.w     #0x6c2, w0
    32a8:	80 1f 78    	mov.w     w0, [w15++]
    32aa:	27 00 20    	mov.w     #0x2, w7
    32ac:	00 43 eb    	clr.b     w6
    32ae:	80 82 eb    	setm.w    w5
    32b0:	84 c0 b3    	mov.b     #0x8, w4
    32b2:	80 01 eb    	clr.w     w3
    32b4:	82 2d 20    	mov.w     #0x2d8, w2
    32b6:	a1 2d 20    	mov.w     #0x2da, w1
    32b8:	80 0b 21    	mov.w     #0x10b8, w0
    32ba:	c0 00 07    	rcall     0x343c <_pin_init>
    32bc:	8f 87 e9    	dec2.w    w15, w15

000032be <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    32be:	c0 6c 20    	mov.w     #0x6cc, w0
    32c0:	80 1f 78    	mov.w     w0, [w15++]
    32c2:	c7 00 20    	mov.w     #0xc, w7
    32c4:	00 43 eb    	clr.b     w6
    32c6:	80 82 eb    	setm.w    w5
    32c8:	b4 c0 b3    	mov.b     #0xb, w4
    32ca:	80 01 eb    	clr.w     w3
    32cc:	82 2d 20    	mov.w     #0x2d8, w2
    32ce:	a1 2d 20    	mov.w     #0x2da, w1
    32d0:	e0 0c 21    	mov.w     #0x10ce, w0
    32d2:	b4 00 07    	rcall     0x343c <_pin_init>
    32d4:	8f 87 e9    	dec2.w    w15, w15

000032d6 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    32d6:	40 6c 20    	mov.w     #0x6c4, w0
    32d8:	80 1f 78    	mov.w     w0, [w15++]
    32da:	47 00 20    	mov.w     #0x4, w7
    32dc:	00 43 eb    	clr.b     w6
    32de:	80 82 eb    	setm.w    w5
    32e0:	94 c0 b3    	mov.b     #0x9, w4
    32e2:	80 01 eb    	clr.w     w3
    32e4:	82 2d 20    	mov.w     #0x2d8, w2
    32e6:	a1 2d 20    	mov.w     #0x2da, w1
    32e8:	40 0e 21    	mov.w     #0x10e4, w0
    32ea:	a8 00 07    	rcall     0x343c <_pin_init>
    32ec:	8f 87 e9    	dec2.w    w15, w15

000032ee <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    32ee:	20 6c 20    	mov.w     #0x6c2, w0
    32f0:	80 1f 78    	mov.w     w0, [w15++]
    32f2:	37 00 20    	mov.w     #0x3, w7
    32f4:	86 c0 b3    	mov.b     #0x8, w6
    32f6:	80 82 eb    	setm.w    w5
    32f8:	a4 c0 b3    	mov.b     #0xa, w4
    32fa:	80 01 eb    	clr.w     w3
    32fc:	82 2d 20    	mov.w     #0x2d8, w2
    32fe:	a1 2d 20    	mov.w     #0x2da, w1
    3300:	a0 0f 21    	mov.w     #0x10fa, w0
    3302:	9c 00 07    	rcall     0x343c <_pin_init>
    3304:	8f 87 e9    	dec2.w    w15, w15

00003306 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3306:	a0 6c 20    	mov.w     #0x6ca, w0
    3308:	80 1f 78    	mov.w     w0, [w15++]
    330a:	b7 00 20    	mov.w     #0xb, w7
    330c:	86 c0 b3    	mov.b     #0x8, w6
    330e:	80 82 eb    	setm.w    w5
    3310:	00 42 eb    	clr.b     w4
    3312:	80 01 eb    	clr.w     w3
    3314:	82 2d 20    	mov.w     #0x2d8, w2
    3316:	a1 2d 20    	mov.w     #0x2da, w1
    3318:	00 11 21    	mov.w     #0x1110, w0
    331a:	90 00 07    	rcall     0x343c <_pin_init>
    331c:	8f 87 e9    	dec2.w    w15, w15

0000331e <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    331e:	80 6d 20    	mov.w     #0x6d8, w0
    3320:	80 1f 78    	mov.w     w0, [w15++]
    3322:	87 01 20    	mov.w     #0x18, w7
    3324:	00 43 eb    	clr.b     w6
    3326:	80 82 eb    	setm.w    w5
    3328:	14 c0 b3    	mov.b     #0x1, w4
    332a:	80 01 eb    	clr.w     w3
    332c:	82 2d 20    	mov.w     #0x2d8, w2
    332e:	a1 2d 20    	mov.w     #0x2da, w1
    3330:	60 12 21    	mov.w     #0x1126, w0
    3332:	84 00 07    	rcall     0x343c <_pin_init>
    3334:	8f 87 e9    	dec2.w    w15, w15

00003336 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3336:	60 6d 20    	mov.w     #0x6d6, w0
    3338:	80 1f 78    	mov.w     w0, [w15++]
    333a:	77 01 20    	mov.w     #0x17, w7
    333c:	86 c0 b3    	mov.b     #0x8, w6
    333e:	80 82 eb    	setm.w    w5
    3340:	24 c0 b3    	mov.b     #0x2, w4
    3342:	80 01 eb    	clr.w     w3
    3344:	82 2d 20    	mov.w     #0x2d8, w2
    3346:	a1 2d 20    	mov.w     #0x2da, w1
    3348:	c0 13 21    	mov.w     #0x113c, w0
    334a:	78 00 07    	rcall     0x343c <_pin_init>
    334c:	8f 87 e9    	dec2.w    w15, w15

0000334e <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    334e:	60 6d 20    	mov.w     #0x6d6, w0
    3350:	80 1f 78    	mov.w     w0, [w15++]
    3352:	67 01 20    	mov.w     #0x16, w7
    3354:	00 43 eb    	clr.b     w6
    3356:	80 82 eb    	setm.w    w5
    3358:	34 c0 b3    	mov.b     #0x3, w4
    335a:	80 01 eb    	clr.w     w3
    335c:	82 2d 20    	mov.w     #0x2d8, w2
    335e:	a1 2d 20    	mov.w     #0x2da, w1
    3360:	20 15 21    	mov.w     #0x1152, w0
    3362:	6c 00 07    	rcall     0x343c <_pin_init>
    3364:	8f 87 e9    	dec2.w    w15, w15

00003366 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3366:	00 6c 20    	mov.w     #0x6c0, w0
    3368:	80 1f 78    	mov.w     w0, [w15++]
    336a:	80 03 eb    	clr.w     w7
    336c:	00 43 eb    	clr.b     w6
    336e:	80 02 eb    	clr.w     w5
    3370:	00 42 eb    	clr.b     w4
    3372:	23 4e 20    	mov.w     #0x4e2, w3
    3374:	82 2c 20    	mov.w     #0x2c8, w2
    3376:	a1 2c 20    	mov.w     #0x2ca, w1
    3378:	60 1d 21    	mov.w     #0x11d6, w0
    337a:	60 00 07    	rcall     0x343c <_pin_init>
    337c:	8f 87 e9    	dec2.w    w15, w15

0000337e <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    337e:	00 6c 20    	mov.w     #0x6c0, w0
    3380:	80 1f 78    	mov.w     w0, [w15++]
    3382:	17 00 20    	mov.w     #0x1, w7
    3384:	86 c0 b3    	mov.b     #0x8, w6
    3386:	15 00 20    	mov.w     #0x1, w5
    3388:	14 c0 b3    	mov.b     #0x1, w4
    338a:	23 4e 20    	mov.w     #0x4e2, w3
    338c:	82 2c 20    	mov.w     #0x2c8, w2
    338e:	a1 2c 20    	mov.w     #0x2ca, w1
    3390:	00 1c 21    	mov.w     #0x11c0, w0
    3392:	54 00 07    	rcall     0x343c <_pin_init>
    3394:	8f 87 e9    	dec2.w    w15, w15

00003396 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3396:	c0 6c 20    	mov.w     #0x6cc, w0
    3398:	80 1f 78    	mov.w     w0, [w15++]
    339a:	d7 00 20    	mov.w     #0xd, w7
    339c:	86 c0 b3    	mov.b     #0x8, w6
    339e:	25 00 20    	mov.w     #0x2, w5
    33a0:	24 c0 b3    	mov.b     #0x2, w4
    33a2:	23 4e 20    	mov.w     #0x4e2, w3
    33a4:	82 2c 20    	mov.w     #0x2c8, w2
    33a6:	a1 2c 20    	mov.w     #0x2ca, w1
    33a8:	a0 1a 21    	mov.w     #0x11aa, w0
    33aa:	48 00 07    	rcall     0x343c <_pin_init>
    33ac:	8f 87 e9    	dec2.w    w15, w15

000033ae <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    33ae:	00 00 eb    	clr.w     w0
    33b0:	80 1f 78    	mov.w     w0, [w15++]
    33b2:	80 83 eb    	setm.w    w7
    33b4:	00 43 eb    	clr.b     w6
    33b6:	35 00 20    	mov.w     #0x3, w5
    33b8:	34 c0 b3    	mov.b     #0x3, w4
    33ba:	23 4e 20    	mov.w     #0x4e2, w3
    33bc:	82 2c 20    	mov.w     #0x2c8, w2
    33be:	a1 2c 20    	mov.w     #0x2ca, w1
    33c0:	40 19 21    	mov.w     #0x1194, w0
    33c2:	3c 00 07    	rcall     0x343c <_pin_init>
    33c4:	8f 87 e9    	dec2.w    w15, w15

000033c6 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    33c6:	c0 6d 20    	mov.w     #0x6dc, w0
    33c8:	80 1f 78    	mov.w     w0, [w15++]
    33ca:	c7 01 20    	mov.w     #0x1c, w7
    33cc:	00 43 eb    	clr.b     w6
    33ce:	45 00 20    	mov.w     #0x4, w5
    33d0:	44 c0 b3    	mov.b     #0x4, w4
    33d2:	23 4e 20    	mov.w     #0x4e2, w3
    33d4:	82 2c 20    	mov.w     #0x2c8, w2
    33d6:	a1 2c 20    	mov.w     #0x2ca, w1
    33d8:	e0 17 21    	mov.w     #0x117e, w0
    33da:	30 00 07    	rcall     0x343c <_pin_init>
    33dc:	8f 87 e9    	dec2.w    w15, w15

000033de <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    33de:	20 6d 20    	mov.w     #0x6d2, w0
    33e0:	80 1f 78    	mov.w     w0, [w15++]
    33e2:	27 01 20    	mov.w     #0x12, w7
    33e4:	00 43 eb    	clr.b     w6
    33e6:	55 00 20    	mov.w     #0x5, w5
    33e8:	54 c0 b3    	mov.b     #0x5, w4
    33ea:	23 4e 20    	mov.w     #0x4e2, w3
    33ec:	82 2c 20    	mov.w     #0x2c8, w2
    33ee:	a1 2c 20    	mov.w     #0x2ca, w1
    33f0:	80 16 21    	mov.w     #0x1168, w0
    33f2:	24 00 07    	rcall     0x343c <_pin_init>
    33f4:	8f 87 e9    	dec2.w    w15, w15

000033f6 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    33f6:	00 00 eb    	clr.w     w0
    33f8:	00 0f 78    	mov.w     w0, [w14]
    33fa:	07 00 37    	bra       0x340a <.L8>

000033fc <.L9>:
        pin_digitalIn(&D[i]);
    33fc:	1e 00 78    	mov.w     [w14], w0
    33fe:	76 00 b9    	mul.su    w0, #0x16, w0
    3400:	80 00 78    	mov.w     w0, w1
    3402:	40 03 21    	mov.w     #0x1034, w0
    3404:	00 80 40    	add.w     w1, w0, w0
    3406:	46 00 07    	rcall     0x3494 <_pin_digitalIn>

00003408 <.LSM37>:
    3408:	1e 0f e8    	inc.w     [w14], [w14]

0000340a <.L8>:
    340a:	1e 00 78    	mov.w     [w14], w0
    340c:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    340e:	f6 ff 36    	bra       LEU, 0x33fc <.L9>

00003410 <.LSM38>:
    for (i = 0; i<6; i++)
    3410:	00 00 eb    	clr.w     w0
    3412:	00 0f 78    	mov.w     w0, [w14]
    3414:	07 00 37    	bra       0x3424 <.L10>

00003416 <.L11>:
        pin_analogIn(&A[i]);
    3416:	1e 00 78    	mov.w     [w14], w0
    3418:	76 00 b9    	mul.su    w0, #0x16, w0
    341a:	80 00 78    	mov.w     w0, w1
    341c:	80 16 21    	mov.w     #0x1168, w0
    341e:	00 80 40    	add.w     w1, w0, w0
    3420:	95 00 07    	rcall     0x354c <_pin_analogIn>

00003422 <.LSM40>:
    3422:	1e 0f e8    	inc.w     [w14], [w14]

00003424 <.L10>:
    3424:	1e 00 78    	mov.w     [w14], w0
    3426:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    3428:	f6 ff 36    	bra       LEU, 0x3416 <.L11>

0000342a <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    342a:	00 2e 20    	mov.w     #0x2e0, w0
    342c:	00 19 88    	mov.w     w0, 0x320

0000342e <.LSM42>:
    AD1CON2 = 0;
    342e:	22 23 ef    	clr.w     0x322

00003430 <.LSM43>:
    AD1CON3 = 0x0C40;
    3430:	00 c4 20    	mov.w     #0xc40, w0
    3432:	20 19 88    	mov.w     w0, 0x324

00003434 <.LSM44>:
    AD1CHS = 0;
    3434:	28 23 ef    	clr.w     0x328

00003436 <.LSM45>:
    AD1CON1bits.ADON = 1;
    3436:	21 e3 a8    	bset.b    0x321, #0x7

00003438 <.LSM46>:
}
    3438:	00 80 fa    	ulnk      
    343a:	00 00 06    	return    

0000343c <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    343c:	10 00 fa    	lnk       #0x10
    343e:	00 0f 78    	mov.w     w0, [w14]
    3440:	11 07 98    	mov.w     w1, [w14+2]
    3442:	22 07 98    	mov.w     w2, [w14+4]
    3444:	33 07 98    	mov.w     w3, [w14+6]
    3446:	04 4f 98    	mov.b     w4, [w14+8]
    3448:	55 07 98    	mov.w     w5, [w14+10]
    344a:	46 4f 98    	mov.b     w6, [w14+12]
    344c:	77 07 98    	mov.w     w7, [w14+14]

0000344e <.LSM48>:
    self->port = port;
    344e:	1e 00 78    	mov.w     [w14], w0
    3450:	9e 00 90    	mov.w     [w14+2], w1
    3452:	01 08 78    	mov.w     w1, [w0]

00003454 <.LSM49>:
    self->tris = tris;
    3454:	1e 00 78    	mov.w     [w14], w0
    3456:	ae 00 90    	mov.w     [w14+4], w1
    3458:	11 00 98    	mov.w     w1, [w0+2]

0000345a <.LSM50>:
    self->ans = ans;
    345a:	1e 00 78    	mov.w     [w14], w0
    345c:	be 00 90    	mov.w     [w14+6], w1
    345e:	21 00 98    	mov.w     w1, [w0+4]

00003460 <.LSM51>:
    self->bit = bit;
    3460:	1e 00 78    	mov.w     [w14], w0
    3462:	8e 48 90    	mov.b     [w14+8], w1
    3464:	61 40 98    	mov.b     w1, [w0+6]

00003466 <.LSM52>:
    self->annum = annum;
    3466:	1e 00 78    	mov.w     [w14], w0
    3468:	de 00 90    	mov.w     [w14+10], w1
    346a:	41 00 98    	mov.w     w1, [w0+8]

0000346c <.LSM53>:
    self->rpshift = rpshift;
    346c:	1e 00 78    	mov.w     [w14], w0
    346e:	ce 48 90    	mov.b     [w14+12], w1
    3470:	21 48 98    	mov.b     w1, [w0+10]

00003472 <.LSM54>:
    self->rpnum = rpnum;
    3472:	fe 00 90    	mov.w     [w14+14], w1
    3474:	1e 00 78    	mov.w     [w14], w0
    3476:	61 00 98    	mov.w     w1, [w0+12]

00003478 <.LSM55>:
    self->rpor = rpor;
    3478:	1e 00 78    	mov.w     [w14], w0
    347a:	ce b8 97    	mov.w     [w14-8], w1
    347c:	71 00 98    	mov.w     w1, [w0+14]

0000347e <.LSM56>:
    self->owner = NULL;
    347e:	1e 00 78    	mov.w     [w14], w0
    3480:	80 00 eb    	clr.w     w1
    3482:	01 08 98    	mov.w     w1, [w0+16]

00003484 <.LSM57>:
    self->write = NULL;
    3484:	1e 00 78    	mov.w     [w14], w0
    3486:	80 00 eb    	clr.w     w1
    3488:	11 08 98    	mov.w     w1, [w0+18]

0000348a <.LSM58>:
    self->read = NULL;
    348a:	1e 00 78    	mov.w     [w14], w0
    348c:	80 00 eb    	clr.w     w1
    348e:	21 08 98    	mov.w     w1, [w0+20]

00003490 <.LSM59>:
}
    3490:	00 80 fa    	ulnk      
    3492:	00 00 06    	return    

00003494 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    3494:	02 00 fa    	lnk       #0x2
    3496:	00 0f 78    	mov.w     w0, [w14]

00003498 <.LSM61>:
    if (self->ans)
    3498:	1e 00 78    	mov.w     [w14], w0
    349a:	20 00 90    	mov.w     [w0+4], w0
    349c:	00 00 e0    	cp0.w     w0
    349e:	0d 00 32    	bra       Z, 0x34ba <.L14>

000034a0 <.LSM62>:
        bitclear(self->ans, self->bit);
    34a0:	1e 00 78    	mov.w     [w14], w0
    34a2:	20 00 90    	mov.w     [w0+4], w0
    34a4:	9e 00 78    	mov.w     [w14], w1
    34a6:	a1 00 90    	mov.w     [w1+4], w1
    34a8:	11 01 78    	mov.w     [w1], w2
    34aa:	9e 00 78    	mov.w     [w14], w1
    34ac:	e1 40 90    	mov.b     [w1+6], w1
    34ae:	81 80 fb    	ze        w1, w1
    34b0:	13 00 20    	mov.w     #0x1, w3
    34b2:	81 18 dd    	sl.w      w3, w1, w1
    34b4:	81 80 ea    	com.w     w1, w1
    34b6:	81 00 61    	and.w     w2, w1, w1
    34b8:	01 08 78    	mov.w     w1, [w0]

000034ba <.L14>:
    bitset(self->tris, self->bit);
    34ba:	1e 00 78    	mov.w     [w14], w0
    34bc:	10 00 90    	mov.w     [w0+2], w0
    34be:	9e 00 78    	mov.w     [w14], w1
    34c0:	91 00 90    	mov.w     [w1+2], w1
    34c2:	11 01 78    	mov.w     [w1], w2
    34c4:	9e 00 78    	mov.w     [w14], w1
    34c6:	e1 40 90    	mov.b     [w1+6], w1
    34c8:	81 80 fb    	ze        w1, w1
    34ca:	13 00 20    	mov.w     #0x1, w3
    34cc:	81 18 dd    	sl.w      w3, w1, w1
    34ce:	82 80 70    	ior.w     w1, w2, w1
    34d0:	01 08 78    	mov.w     w1, [w0]

000034d2 <.LSM64>:
    self->write = NULL;
    34d2:	1e 00 78    	mov.w     [w14], w0
    34d4:	80 00 eb    	clr.w     w1
    34d6:	11 08 98    	mov.w     w1, [w0+18]

000034d8 <.LSM65>:
    self->read = __digitalRead;    
    34d8:	1e 00 78    	mov.w     [w14], w0
    34da:	61 1d 23    	mov.w     #0x31d6, w1
    34dc:	21 08 98    	mov.w     w1, [w0+20]

000034de <.LSM66>:
}
    34de:	00 80 fa    	ulnk      
    34e0:	00 00 06    	return    

000034e2 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    34e2:	02 00 fa    	lnk       #0x2
    34e4:	00 0f 78    	mov.w     w0, [w14]

000034e6 <.LSM68>:
    if (self->ans)
    34e6:	1e 00 78    	mov.w     [w14], w0
    34e8:	20 00 90    	mov.w     [w0+4], w0
    34ea:	00 00 e0    	cp0.w     w0
    34ec:	0d 00 32    	bra       Z, 0x3508 <.L16>

000034ee <.LSM69>:
        bitclear(self->ans, self->bit);
    34ee:	1e 00 78    	mov.w     [w14], w0
    34f0:	20 00 90    	mov.w     [w0+4], w0
    34f2:	9e 00 78    	mov.w     [w14], w1
    34f4:	a1 00 90    	mov.w     [w1+4], w1
    34f6:	11 01 78    	mov.w     [w1], w2
    34f8:	9e 00 78    	mov.w     [w14], w1
    34fa:	e1 40 90    	mov.b     [w1+6], w1
    34fc:	81 80 fb    	ze        w1, w1
    34fe:	13 00 20    	mov.w     #0x1, w3
    3500:	81 18 dd    	sl.w      w3, w1, w1
    3502:	81 80 ea    	com.w     w1, w1
    3504:	81 00 61    	and.w     w2, w1, w1
    3506:	01 08 78    	mov.w     w1, [w0]

00003508 <.L16>:
    bitclear(self->port, self->bit);
    3508:	1e 00 78    	mov.w     [w14], w0
    350a:	10 00 78    	mov.w     [w0], w0
    350c:	9e 00 78    	mov.w     [w14], w1
    350e:	91 00 78    	mov.w     [w1], w1
    3510:	11 01 78    	mov.w     [w1], w2
    3512:	9e 00 78    	mov.w     [w14], w1
    3514:	e1 40 90    	mov.b     [w1+6], w1
    3516:	81 80 fb    	ze        w1, w1
    3518:	13 00 20    	mov.w     #0x1, w3
    351a:	81 18 dd    	sl.w      w3, w1, w1
    351c:	81 80 ea    	com.w     w1, w1
    351e:	81 00 61    	and.w     w2, w1, w1
    3520:	01 08 78    	mov.w     w1, [w0]

00003522 <.LSM71>:
    bitclear(self->tris, self->bit);
    3522:	1e 00 78    	mov.w     [w14], w0
    3524:	10 00 90    	mov.w     [w0+2], w0
    3526:	9e 00 78    	mov.w     [w14], w1
    3528:	91 00 90    	mov.w     [w1+2], w1
    352a:	11 01 78    	mov.w     [w1], w2
    352c:	9e 00 78    	mov.w     [w14], w1
    352e:	e1 40 90    	mov.b     [w1+6], w1
    3530:	81 80 fb    	ze        w1, w1
    3532:	13 00 20    	mov.w     #0x1, w3
    3534:	81 18 dd    	sl.w      w3, w1, w1
    3536:	81 80 ea    	com.w     w1, w1
    3538:	81 00 61    	and.w     w2, w1, w1
    353a:	01 08 78    	mov.w     w1, [w0]

0000353c <.LSM72>:
    self->write = __digitalWrite;
    353c:	1e 00 78    	mov.w     [w14], w0
    353e:	21 19 23    	mov.w     #0x3192, w1
    3540:	11 08 98    	mov.w     w1, [w0+18]

00003542 <.LSM73>:
    self->read = __digitalRead;
    3542:	1e 00 78    	mov.w     [w14], w0
    3544:	61 1d 23    	mov.w     #0x31d6, w1
    3546:	21 08 98    	mov.w     w1, [w0+20]

00003548 <.LSM74>:
}
    3548:	00 80 fa    	ulnk      
    354a:	00 00 06    	return    

0000354c <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    354c:	02 00 fa    	lnk       #0x2
    354e:	00 0f 78    	mov.w     w0, [w14]

00003550 <.LSM76>:
    if (!(self->ans))
    3550:	1e 00 78    	mov.w     [w14], w0
    3552:	20 00 90    	mov.w     [w0+4], w0
    3554:	00 00 e0    	cp0.w     w0
    3556:	1f 00 32    	bra       Z, 0x3596 <.L20>

00003558 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    3558:	1e 00 78    	mov.w     [w14], w0
    355a:	10 00 90    	mov.w     [w0+2], w0
    355c:	9e 00 78    	mov.w     [w14], w1
    355e:	91 00 90    	mov.w     [w1+2], w1
    3560:	11 01 78    	mov.w     [w1], w2
    3562:	9e 00 78    	mov.w     [w14], w1
    3564:	e1 40 90    	mov.b     [w1+6], w1
    3566:	81 80 fb    	ze        w1, w1
    3568:	13 00 20    	mov.w     #0x1, w3
    356a:	81 18 dd    	sl.w      w3, w1, w1
    356c:	82 80 70    	ior.w     w1, w2, w1
    356e:	01 08 78    	mov.w     w1, [w0]

00003570 <.LSM78>:
    bitset(self->ans, self->bit);
    3570:	1e 00 78    	mov.w     [w14], w0
    3572:	20 00 90    	mov.w     [w0+4], w0
    3574:	9e 00 78    	mov.w     [w14], w1
    3576:	a1 00 90    	mov.w     [w1+4], w1
    3578:	11 01 78    	mov.w     [w1], w2
    357a:	9e 00 78    	mov.w     [w14], w1
    357c:	e1 40 90    	mov.b     [w1+6], w1
    357e:	81 80 fb    	ze        w1, w1
    3580:	13 00 20    	mov.w     #0x1, w3
    3582:	81 18 dd    	sl.w      w3, w1, w1
    3584:	82 80 70    	ior.w     w1, w2, w1
    3586:	01 08 78    	mov.w     w1, [w0]

00003588 <.LSM79>:
    self->write = NULL;
    3588:	1e 00 78    	mov.w     [w14], w0
    358a:	80 00 eb    	clr.w     w1
    358c:	11 08 98    	mov.w     w1, [w0+18]

0000358e <.LSM80>:
    self->read = __analogRead;
    358e:	1e 00 78    	mov.w     [w14], w0
    3590:	81 1f 23    	mov.w     #0x31f8, w1
    3592:	21 08 98    	mov.w     w1, [w0+20]
    3594:	01 00 37    	bra       0x3598 <.L17>

00003596 <.L20>:
    3596:	00 00 00    	nop       

00003598 <.L17>:
}
    3598:	00 80 fa    	ulnk      
    359a:	00 00 06    	return    

0000359c <_pin_set>:

void pin_set(_PIN *self) {
    359c:	02 00 fa    	lnk       #0x2
    359e:	00 0f 78    	mov.w     w0, [w14]

000035a0 <.LSM84>:
    if (self->write==__digitalWrite)
    35a0:	1e 00 78    	mov.w     [w14], w0
    35a2:	90 08 90    	mov.w     [w0+18], w1
    35a4:	20 19 23    	mov.w     #0x3192, w0
    35a6:	80 8f 50    	sub.w     w1, w0, [w15]
    35a8:	0c 00 3a    	bra       NZ, 0x35c2 <.L21>

000035aa <.LSM85>:
        bitset(self->port, self->bit);
    35aa:	1e 00 78    	mov.w     [w14], w0
    35ac:	10 00 78    	mov.w     [w0], w0
    35ae:	9e 00 78    	mov.w     [w14], w1
    35b0:	91 00 78    	mov.w     [w1], w1
    35b2:	11 01 78    	mov.w     [w1], w2
    35b4:	9e 00 78    	mov.w     [w14], w1
    35b6:	e1 40 90    	mov.b     [w1+6], w1
    35b8:	81 80 fb    	ze        w1, w1
    35ba:	13 00 20    	mov.w     #0x1, w3
    35bc:	81 18 dd    	sl.w      w3, w1, w1
    35be:	82 80 70    	ior.w     w1, w2, w1
    35c0:	01 08 78    	mov.w     w1, [w0]

000035c2 <.L21>:
}
    35c2:	00 80 fa    	ulnk      
    35c4:	00 00 06    	return    

000035c6 <_pin_clear>:

void pin_clear(_PIN *self) {
    35c6:	02 00 fa    	lnk       #0x2
    35c8:	00 0f 78    	mov.w     w0, [w14]

000035ca <.LSM88>:
    if (self->write==__digitalWrite)
    35ca:	1e 00 78    	mov.w     [w14], w0
    35cc:	90 08 90    	mov.w     [w0+18], w1
    35ce:	20 19 23    	mov.w     #0x3192, w0
    35d0:	80 8f 50    	sub.w     w1, w0, [w15]
    35d2:	0d 00 3a    	bra       NZ, 0x35ee <.L23>

000035d4 <.LSM89>:
        bitclear(self->port, self->bit);
    35d4:	1e 00 78    	mov.w     [w14], w0
    35d6:	10 00 78    	mov.w     [w0], w0
    35d8:	9e 00 78    	mov.w     [w14], w1
    35da:	91 00 78    	mov.w     [w1], w1
    35dc:	11 01 78    	mov.w     [w1], w2
    35de:	9e 00 78    	mov.w     [w14], w1
    35e0:	e1 40 90    	mov.b     [w1+6], w1
    35e2:	81 80 fb    	ze        w1, w1
    35e4:	13 00 20    	mov.w     #0x1, w3
    35e6:	81 18 dd    	sl.w      w3, w1, w1
    35e8:	81 80 ea    	com.w     w1, w1
    35ea:	81 00 61    	and.w     w2, w1, w1
    35ec:	01 08 78    	mov.w     w1, [w0]

000035ee <.L23>:
}
    35ee:	00 80 fa    	ulnk      
    35f0:	00 00 06    	return    

000035f2 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    35f2:	02 00 fa    	lnk       #0x2
    35f4:	00 0f 78    	mov.w     w0, [w14]

000035f6 <.LSM92>:
    if (self->write==__digitalWrite)
    35f6:	1e 00 78    	mov.w     [w14], w0
    35f8:	90 08 90    	mov.w     [w0+18], w1
    35fa:	20 19 23    	mov.w     #0x3192, w0
    35fc:	80 8f 50    	sub.w     w1, w0, [w15]
    35fe:	0c 00 3a    	bra       NZ, 0x3618 <.L25>

00003600 <.LSM93>:
        bitflip(self->port, self->bit);
    3600:	1e 00 78    	mov.w     [w14], w0
    3602:	10 00 78    	mov.w     [w0], w0
    3604:	9e 00 78    	mov.w     [w14], w1
    3606:	91 00 78    	mov.w     [w1], w1
    3608:	11 01 78    	mov.w     [w1], w2
    360a:	9e 00 78    	mov.w     [w14], w1
    360c:	e1 40 90    	mov.b     [w1+6], w1
    360e:	81 80 fb    	ze        w1, w1
    3610:	13 00 20    	mov.w     #0x1, w3
    3612:	81 18 dd    	sl.w      w3, w1, w1
    3614:	81 00 69    	xor.w     w2, w1, w1
    3616:	01 08 78    	mov.w     w1, [w0]

00003618 <.L25>:
}
    3618:	00 80 fa    	ulnk      
    361a:	00 00 06    	return    

0000361c <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    361c:	04 00 fa    	lnk       #0x4
    361e:	00 0f 78    	mov.w     w0, [w14]
    3620:	11 07 98    	mov.w     w1, [w14+2]

00003622 <.LSM96>:
    if (self->write)
    3622:	1e 00 78    	mov.w     [w14], w0
    3624:	10 08 90    	mov.w     [w0+18], w0
    3626:	00 00 e0    	cp0.w     w0
    3628:	05 00 32    	bra       Z, 0x3634 <.L27>

0000362a <.LSM97>:
        self->write(self, val);
    362a:	1e 00 78    	mov.w     [w14], w0
    362c:	10 09 90    	mov.w     [w0+18], w2
    362e:	9e 00 90    	mov.w     [w14+2], w1
    3630:	1e 00 78    	mov.w     [w14], w0
    3632:	02 00 01    	call      w2

00003634 <.L27>:
}
    3634:	00 80 fa    	ulnk      
    3636:	00 00 06    	return    

00003638 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3638:	02 00 fa    	lnk       #0x2
    363a:	00 0f 78    	mov.w     w0, [w14]

0000363c <.LSM100>:
    if (self->read)
    363c:	1e 00 78    	mov.w     [w14], w0
    363e:	20 08 90    	mov.w     [w0+20], w0
    3640:	00 00 e0    	cp0.w     w0
    3642:	05 00 32    	bra       Z, 0x364e <.L30>

00003644 <.LSM101>:
        return self->read(self);
    3644:	1e 00 78    	mov.w     [w14], w0
    3646:	a0 08 90    	mov.w     [w0+20], w1
    3648:	1e 00 78    	mov.w     [w14], w0
    364a:	01 00 01    	call      w1
    364c:	01 00 37    	bra       0x3650 <.L31>

0000364e <.L30>:
    else
        return 0xFFFF;
    364e:	00 80 eb    	setm.w    w0

00003650 <.L31>:
}
    3650:	00 80 fa    	ulnk      
    3652:	00 00 06    	return    

00003654 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    3654:	00 00 fa    	lnk       #0x0

00003656 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3656:	74 c0 b3    	mov.b     #0x7, w4
    3658:	63 4e 20    	mov.w     #0x4e6, w3
    365a:	82 2d 20    	mov.w     #0x2d8, w2
    365c:	a1 2d 20    	mov.w     #0x2da, w1
    365e:	00 80 20    	mov.w     #0x800, w0
    3660:	20 00 07    	rcall     0x36a2 <_led_init>

00003662 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3662:	00 42 eb    	clr.b     w4
    3664:	a3 4e 20    	mov.w     #0x4ea, w3
    3666:	82 2e 20    	mov.w     #0x2e8, w2
    3668:	a1 2e 20    	mov.w     #0x2ea, w1
    366a:	80 80 20    	mov.w     #0x808, w0
    366c:	1a 00 07    	rcall     0x36a2 <_led_init>

0000366e <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    366e:	14 c0 b3    	mov.b     #0x1, w4
    3670:	a3 4e 20    	mov.w     #0x4ea, w3
    3672:	82 2e 20    	mov.w     #0x2e8, w2
    3674:	a1 2e 20    	mov.w     #0x2ea, w1
    3676:	00 81 20    	mov.w     #0x810, w0
    3678:	14 00 07    	rcall     0x36a2 <_led_init>

0000367a <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    367a:	f4 c0 b3    	mov.b     #0xf, w4
    367c:	43 4e 20    	mov.w     #0x4e4, w3
    367e:	02 2d 20    	mov.w     #0x2d0, w2
    3680:	21 2d 20    	mov.w     #0x2d2, w1
    3682:	80 81 20    	mov.w     #0x818, w0
    3684:	ad 00 07    	rcall     0x37e0 <_sw_init>

00003686 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3686:	c4 c0 b3    	mov.b     #0xc, w4
    3688:	43 4e 20    	mov.w     #0x4e4, w3
    368a:	02 2d 20    	mov.w     #0x2d0, w2
    368c:	21 2d 20    	mov.w     #0x2d2, w1
    368e:	00 82 20    	mov.w     #0x820, w0
    3690:	a7 00 07    	rcall     0x37e0 <_sw_init>

00003692 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3692:	c4 c0 b3    	mov.b     #0xc, w4
    3694:	23 4e 20    	mov.w     #0x4e2, w3
    3696:	82 2c 20    	mov.w     #0x2c8, w2
    3698:	a1 2c 20    	mov.w     #0x2ca, w1
    369a:	80 82 20    	mov.w     #0x828, w0
    369c:	a1 00 07    	rcall     0x37e0 <_sw_init>

0000369e <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    369e:	00 80 fa    	ulnk      
    36a0:	00 00 06    	return    

000036a2 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    36a2:	0a 00 fa    	lnk       #0xa
    36a4:	00 0f 78    	mov.w     w0, [w14]
    36a6:	11 07 98    	mov.w     w1, [w14+2]
    36a8:	22 07 98    	mov.w     w2, [w14+4]
    36aa:	33 07 98    	mov.w     w3, [w14+6]
    36ac:	04 4f 98    	mov.b     w4, [w14+8]

000036ae <.LSM9>:
    self->port = port;
    36ae:	1e 00 78    	mov.w     [w14], w0
    36b0:	9e 00 90    	mov.w     [w14+2], w1
    36b2:	01 08 78    	mov.w     w1, [w0]

000036b4 <.LSM10>:
    self->tris = tris;
    36b4:	1e 00 78    	mov.w     [w14], w0
    36b6:	ae 00 90    	mov.w     [w14+4], w1
    36b8:	11 00 98    	mov.w     w1, [w0+2]

000036ba <.LSM11>:
    self->ans = ans;
    36ba:	1e 00 78    	mov.w     [w14], w0
    36bc:	be 00 90    	mov.w     [w14+6], w1
    36be:	21 00 98    	mov.w     w1, [w0+4]

000036c0 <.LSM12>:
    self->bit = bit;
    36c0:	1e 00 78    	mov.w     [w14], w0
    36c2:	8e 48 90    	mov.b     [w14+8], w1
    36c4:	61 40 98    	mov.b     w1, [w0+6]

000036c6 <.LSM13>:

    bitclear(self->ans, self->bit);
    36c6:	1e 00 78    	mov.w     [w14], w0
    36c8:	20 00 90    	mov.w     [w0+4], w0
    36ca:	9e 00 78    	mov.w     [w14], w1
    36cc:	a1 00 90    	mov.w     [w1+4], w1
    36ce:	11 01 78    	mov.w     [w1], w2
    36d0:	9e 00 78    	mov.w     [w14], w1
    36d2:	e1 40 90    	mov.b     [w1+6], w1
    36d4:	81 80 fb    	ze        w1, w1
    36d6:	13 00 20    	mov.w     #0x1, w3
    36d8:	81 18 dd    	sl.w      w3, w1, w1
    36da:	81 80 ea    	com.w     w1, w1
    36dc:	81 00 61    	and.w     w2, w1, w1
    36de:	01 08 78    	mov.w     w1, [w0]

000036e0 <.LSM14>:
    bitclear(self->port, self->bit);
    36e0:	1e 00 78    	mov.w     [w14], w0
    36e2:	10 00 78    	mov.w     [w0], w0
    36e4:	9e 00 78    	mov.w     [w14], w1
    36e6:	91 00 78    	mov.w     [w1], w1
    36e8:	11 01 78    	mov.w     [w1], w2
    36ea:	9e 00 78    	mov.w     [w14], w1
    36ec:	e1 40 90    	mov.b     [w1+6], w1
    36ee:	81 80 fb    	ze        w1, w1
    36f0:	13 00 20    	mov.w     #0x1, w3
    36f2:	81 18 dd    	sl.w      w3, w1, w1
    36f4:	81 80 ea    	com.w     w1, w1
    36f6:	81 00 61    	and.w     w2, w1, w1
    36f8:	01 08 78    	mov.w     w1, [w0]

000036fa <.LSM15>:
    bitclear(self->tris, self->bit);
    36fa:	1e 00 78    	mov.w     [w14], w0
    36fc:	10 00 90    	mov.w     [w0+2], w0
    36fe:	9e 00 78    	mov.w     [w14], w1
    3700:	91 00 90    	mov.w     [w1+2], w1
    3702:	11 01 78    	mov.w     [w1], w2
    3704:	9e 00 78    	mov.w     [w14], w1
    3706:	e1 40 90    	mov.b     [w1+6], w1
    3708:	81 80 fb    	ze        w1, w1
    370a:	13 00 20    	mov.w     #0x1, w3
    370c:	81 18 dd    	sl.w      w3, w1, w1
    370e:	81 80 ea    	com.w     w1, w1
    3710:	81 00 61    	and.w     w2, w1, w1
    3712:	01 08 78    	mov.w     w1, [w0]

00003714 <.LSM16>:
}
    3714:	00 80 fa    	ulnk      
    3716:	00 00 06    	return    

00003718 <_led_on>:

void led_on(_LED *self) {
    3718:	02 00 fa    	lnk       #0x2
    371a:	00 0f 78    	mov.w     w0, [w14]

0000371c <.LSM18>:
    bitset(self->port, self->bit);
    371c:	1e 00 78    	mov.w     [w14], w0
    371e:	10 00 78    	mov.w     [w0], w0
    3720:	9e 00 78    	mov.w     [w14], w1
    3722:	91 00 78    	mov.w     [w1], w1
    3724:	11 01 78    	mov.w     [w1], w2
    3726:	9e 00 78    	mov.w     [w14], w1
    3728:	e1 40 90    	mov.b     [w1+6], w1
    372a:	81 80 fb    	ze        w1, w1
    372c:	13 00 20    	mov.w     #0x1, w3
    372e:	81 18 dd    	sl.w      w3, w1, w1
    3730:	82 80 70    	ior.w     w1, w2, w1
    3732:	01 08 78    	mov.w     w1, [w0]

00003734 <.LSM19>:
}
    3734:	00 80 fa    	ulnk      
    3736:	00 00 06    	return    

00003738 <_led_off>:

void led_off(_LED *self) {
    3738:	02 00 fa    	lnk       #0x2
    373a:	00 0f 78    	mov.w     w0, [w14]

0000373c <.LSM21>:
    bitclear(self->port, self->bit);
    373c:	1e 00 78    	mov.w     [w14], w0
    373e:	10 00 78    	mov.w     [w0], w0
    3740:	9e 00 78    	mov.w     [w14], w1
    3742:	91 00 78    	mov.w     [w1], w1
    3744:	11 01 78    	mov.w     [w1], w2
    3746:	9e 00 78    	mov.w     [w14], w1
    3748:	e1 40 90    	mov.b     [w1+6], w1
    374a:	81 80 fb    	ze        w1, w1
    374c:	13 00 20    	mov.w     #0x1, w3
    374e:	81 18 dd    	sl.w      w3, w1, w1
    3750:	81 80 ea    	com.w     w1, w1
    3752:	81 00 61    	and.w     w2, w1, w1
    3754:	01 08 78    	mov.w     w1, [w0]

00003756 <.LSM22>:
}
    3756:	00 80 fa    	ulnk      
    3758:	00 00 06    	return    

0000375a <_led_toggle>:

void led_toggle(_LED *self) {
    375a:	02 00 fa    	lnk       #0x2
    375c:	00 0f 78    	mov.w     w0, [w14]

0000375e <.LSM24>:
    bitflip(self->port, self->bit);
    375e:	1e 00 78    	mov.w     [w14], w0
    3760:	10 00 78    	mov.w     [w0], w0
    3762:	9e 00 78    	mov.w     [w14], w1
    3764:	91 00 78    	mov.w     [w1], w1
    3766:	11 01 78    	mov.w     [w1], w2
    3768:	9e 00 78    	mov.w     [w14], w1
    376a:	e1 40 90    	mov.b     [w1+6], w1
    376c:	81 80 fb    	ze        w1, w1
    376e:	13 00 20    	mov.w     #0x1, w3
    3770:	81 18 dd    	sl.w      w3, w1, w1
    3772:	81 00 69    	xor.w     w2, w1, w1
    3774:	01 08 78    	mov.w     w1, [w0]

00003776 <.LSM25>:
}
    3776:	00 80 fa    	ulnk      
    3778:	00 00 06    	return    

0000377a <_led_write>:

void led_write(_LED *self, uint16_t val) {
    377a:	04 00 fa    	lnk       #0x4
    377c:	00 0f 78    	mov.w     w0, [w14]
    377e:	11 07 98    	mov.w     w1, [w14+2]

00003780 <.LSM27>:
    if (val)
    3780:	1e 00 90    	mov.w     [w14+2], w0
    3782:	00 00 e0    	cp0.w     w0
    3784:	0d 00 32    	bra       Z, 0x37a0 <.L7>

00003786 <.LSM28>:
        bitset(self->port, self->bit);
    3786:	1e 00 78    	mov.w     [w14], w0
    3788:	10 00 78    	mov.w     [w0], w0
    378a:	9e 00 78    	mov.w     [w14], w1
    378c:	91 00 78    	mov.w     [w1], w1
    378e:	11 01 78    	mov.w     [w1], w2
    3790:	9e 00 78    	mov.w     [w14], w1
    3792:	e1 40 90    	mov.b     [w1+6], w1
    3794:	81 80 fb    	ze        w1, w1
    3796:	13 00 20    	mov.w     #0x1, w3
    3798:	81 18 dd    	sl.w      w3, w1, w1
    379a:	82 80 70    	ior.w     w1, w2, w1
    379c:	01 08 78    	mov.w     w1, [w0]
    379e:	0d 00 37    	bra       0x37ba <.L6>

000037a0 <.L7>:
    else
        bitclear(self->port, self->bit);
    37a0:	1e 00 78    	mov.w     [w14], w0
    37a2:	10 00 78    	mov.w     [w0], w0
    37a4:	9e 00 78    	mov.w     [w14], w1
    37a6:	91 00 78    	mov.w     [w1], w1
    37a8:	11 01 78    	mov.w     [w1], w2
    37aa:	9e 00 78    	mov.w     [w14], w1
    37ac:	e1 40 90    	mov.b     [w1+6], w1
    37ae:	81 80 fb    	ze        w1, w1
    37b0:	13 00 20    	mov.w     #0x1, w3
    37b2:	81 18 dd    	sl.w      w3, w1, w1
    37b4:	81 80 ea    	com.w     w1, w1
    37b6:	81 00 61    	and.w     w2, w1, w1
    37b8:	01 08 78    	mov.w     w1, [w0]

000037ba <.L6>:
}
    37ba:	00 80 fa    	ulnk      
    37bc:	00 00 06    	return    

000037be <_led_read>:

uint16_t led_read(_LED *self) {
    37be:	02 00 fa    	lnk       #0x2
    37c0:	00 0f 78    	mov.w     w0, [w14]

000037c2 <.LSM32>:
    return bitread(self->port, self->bit);
    37c2:	1e 00 78    	mov.w     [w14], w0
    37c4:	10 00 78    	mov.w     [w0], w0
    37c6:	90 00 78    	mov.w     [w0], w1
    37c8:	1e 00 78    	mov.w     [w14], w0
    37ca:	60 40 90    	mov.b     [w0+6], w0
    37cc:	00 80 fb    	ze        w0, w0
    37ce:	12 00 20    	mov.w     #0x1, w2
    37d0:	00 10 dd    	sl.w      w2, w0, w0
    37d2:	00 80 60    	and.w     w1, w0, w0
    37d4:	00 f0 a7    	btsc.w    w0, #0xf
    37d6:	00 00 ea    	neg.w     w0, w0
    37d8:	00 00 ea    	neg.w     w0, w0
    37da:	4f 00 de    	lsr.w     w0, #0xf, w0

000037dc <.LSM33>:
}
    37dc:	00 80 fa    	ulnk      
    37de:	00 00 06    	return    

000037e0 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    37e0:	0a 00 fa    	lnk       #0xa
    37e2:	00 0f 78    	mov.w     w0, [w14]
    37e4:	11 07 98    	mov.w     w1, [w14+2]
    37e6:	22 07 98    	mov.w     w2, [w14+4]
    37e8:	33 07 98    	mov.w     w3, [w14+6]
    37ea:	04 4f 98    	mov.b     w4, [w14+8]

000037ec <.LSM35>:
    self->port = port;
    37ec:	1e 00 78    	mov.w     [w14], w0
    37ee:	9e 00 90    	mov.w     [w14+2], w1
    37f0:	01 08 78    	mov.w     w1, [w0]

000037f2 <.LSM36>:
    self->tris = tris;
    37f2:	1e 00 78    	mov.w     [w14], w0
    37f4:	ae 00 90    	mov.w     [w14+4], w1
    37f6:	11 00 98    	mov.w     w1, [w0+2]

000037f8 <.LSM37>:
    self->ans = ans;
    37f8:	1e 00 78    	mov.w     [w14], w0
    37fa:	be 00 90    	mov.w     [w14+6], w1
    37fc:	21 00 98    	mov.w     w1, [w0+4]

000037fe <.LSM38>:
    self->bit = bit;
    37fe:	1e 00 78    	mov.w     [w14], w0
    3800:	8e 48 90    	mov.b     [w14+8], w1
    3802:	61 40 98    	mov.b     w1, [w0+6]

00003804 <.LSM39>:

    bitclear(self->ans, self->bit);
    3804:	1e 00 78    	mov.w     [w14], w0
    3806:	20 00 90    	mov.w     [w0+4], w0
    3808:	9e 00 78    	mov.w     [w14], w1
    380a:	a1 00 90    	mov.w     [w1+4], w1
    380c:	11 01 78    	mov.w     [w1], w2
    380e:	9e 00 78    	mov.w     [w14], w1
    3810:	e1 40 90    	mov.b     [w1+6], w1
    3812:	81 80 fb    	ze        w1, w1
    3814:	13 00 20    	mov.w     #0x1, w3
    3816:	81 18 dd    	sl.w      w3, w1, w1
    3818:	81 80 ea    	com.w     w1, w1
    381a:	81 00 61    	and.w     w2, w1, w1
    381c:	01 08 78    	mov.w     w1, [w0]

0000381e <.LSM40>:
    bitset(self->tris, self->bit);
    381e:	1e 00 78    	mov.w     [w14], w0
    3820:	10 00 90    	mov.w     [w0+2], w0
    3822:	9e 00 78    	mov.w     [w14], w1
    3824:	91 00 90    	mov.w     [w1+2], w1
    3826:	11 01 78    	mov.w     [w1], w2
    3828:	9e 00 78    	mov.w     [w14], w1
    382a:	e1 40 90    	mov.b     [w1+6], w1
    382c:	81 80 fb    	ze        w1, w1
    382e:	13 00 20    	mov.w     #0x1, w3
    3830:	81 18 dd    	sl.w      w3, w1, w1
    3832:	82 80 70    	ior.w     w1, w2, w1
    3834:	01 08 78    	mov.w     w1, [w0]

00003836 <.LSM41>:
}
    3836:	00 80 fa    	ulnk      
    3838:	00 00 06    	return    

0000383a <_sw_read>:

uint16_t sw_read(_SW *self) {
    383a:	02 00 fa    	lnk       #0x2
    383c:	00 0f 78    	mov.w     w0, [w14]

0000383e <.LSM43>:
    return bitread(self->port, self->bit);
    383e:	1e 00 78    	mov.w     [w14], w0
    3840:	10 00 78    	mov.w     [w0], w0
    3842:	90 00 78    	mov.w     [w0], w1
    3844:	1e 00 78    	mov.w     [w14], w0
    3846:	60 40 90    	mov.b     [w0+6], w0
    3848:	00 80 fb    	ze        w0, w0
    384a:	12 00 20    	mov.w     #0x1, w2
    384c:	00 10 dd    	sl.w      w2, w0, w0
    384e:	00 80 60    	and.w     w1, w0, w0
    3850:	00 f0 a7    	btsc.w    w0, #0xf
    3852:	00 00 ea    	neg.w     w0, w0
    3854:	00 00 ea    	neg.w     w0, w0
    3856:	4f 00 de    	lsr.w     w0, #0xf, w0

00003858 <.LSM44>:
}
    3858:	00 80 fa    	ulnk      
    385a:	00 00 06    	return    

0000385c <_setup_uart>:
#include <stdlib.h>

uint8_t RC_TXBUF[1024], RC_RXBUF[1024];

void setup_uart() {
    385c:	00 00 fa    	lnk       #0x0

0000385e <.LSM1>:
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           // 0, TXBUF, 1024, RXBUF, 1024);

    // uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
    //            float baudrate, int8_t parity, int16_t stopbits, 
    //            uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
    //            uint8_t *RXbuffer, uint16_t RXbufferlen)

    // uart_open(&uart2, &D[0], &D[1], NULL, NULL, 115200., 'N', 1, 
    //           0, RC_TXBUF, 1024, RC_RXBUF, 1024);
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           0, TXBUF, 1024, RXBUF, 1024);

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    385e:	40 6d 20    	mov.w     #0x6d4, w0
    3860:	80 1f 78    	mov.w     w0, [w15++]
    3862:	57 01 20    	mov.w     #0x15, w7
    3864:	86 c0 b3    	mov.b     #0x8, w6
    3866:	80 82 eb    	setm.w    w5
    3868:	64 c0 b3    	mov.b     #0x6, w4
    386a:	80 01 eb    	clr.w     w3
    386c:	02 2f 20    	mov.w     #0x2f0, w2
    386e:	21 2f 20    	mov.w     #0x2f2, w1
    3870:	c0 2d 21    	mov.w     #0x12dc, w0
    3872:	e4 fd 07    	rcall     0x343c <_pin_init>
    3874:	8f 87 e9    	dec2.w    w15, w15

00003876 <.LSM2>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    3876:	a0 6d 20    	mov.w     #0x6da, w0
    3878:	80 1f 78    	mov.w     w0, [w15++]
    387a:	a7 01 20    	mov.w     #0x1a, w7
    387c:	00 43 eb    	clr.b     w6
    387e:	80 82 eb    	setm.w    w5
    3880:	74 c0 b3    	mov.b     #0x7, w4
    3882:	80 01 eb    	clr.w     w3
    3884:	02 2f 20    	mov.w     #0x2f0, w2
    3886:	21 2f 20    	mov.w     #0x2f2, w1
    3888:	20 2f 21    	mov.w     #0x12f2, w0
    388a:	d8 fd 07    	rcall     0x343c <_pin_init>
    388c:	8f 87 e9    	dec2.w    w15, w15

0000388e <.LSM3>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);
    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    388e:	00 00 eb    	clr.w     w0
    3890:	80 1f 78    	mov.w     w0, [w15++]
    3892:	00 00 eb    	clr.w     w0
    3894:	80 1f 78    	mov.w     w0, [w15++]
    3896:	00 00 eb    	clr.w     w0
    3898:	80 1f 78    	mov.w     w0, [w15++]
    389a:	00 00 eb    	clr.w     w0
    389c:	80 1f 78    	mov.w     w0, [w15++]
    389e:	00 00 eb    	clr.w     w0
    38a0:	80 1f 78    	mov.w     w0, [w15++]
    38a2:	10 00 20    	mov.w     #0x1, w0
    38a4:	80 1f 78    	mov.w     w0, [w15++]
    38a6:	e5 c4 b3    	mov.b     #0x4e, w5
    38a8:	06 00 20    	mov.w     #0x0, w6
    38aa:	67 69 24    	mov.w     #0x4696, w7
    38ac:	00 02 eb    	clr.w     w4
    38ae:	80 01 eb    	clr.w     w3
    38b0:	22 2f 21    	mov.w     #0x12f2, w2
    38b2:	c1 2d 21    	mov.w     #0x12dc, w1
    38b4:	c0 1e 21    	mov.w     #0x11ec, w0
    38b6:	eb f5 07    	rcall     0x248e <_uart_open>
    38b8:	ec 87 57    	sub.w     w15, #0xc, w15

000038ba <.LSM4>:
              0, NULL, 0, NULL, 0);
}
    38ba:	00 80 fa    	ulnk      
    38bc:	00 00 06    	return    

000038be <_setup>:

void setup() {
    38be:	00 00 fa    	lnk       #0x0

000038c0 <.LSM6>:
    timer_setPeriod(&timer1, 1);  // Timer for LED operation/status blink
    38c0:	02 00 20    	mov.w     #0x0, w2
    38c2:	03 f8 23    	mov.w     #0x3f80, w3
    38c4:	80 30 21    	mov.w     #0x1308, w0
    38c6:	e6 fa 07    	rcall     0x2e94 <_timer_setPeriod>

000038c8 <.LSM7>:
    timer_setPeriod(&timer2, 0.5); 
    38c8:	02 00 20    	mov.w     #0x0, w2
    38ca:	03 f0 23    	mov.w     #0x3f00, w3
    38cc:	e0 31 21    	mov.w     #0x131e, w0
    38ce:	e2 fa 07    	rcall     0x2e94 <_timer_setPeriod>

000038d0 <.LSM8>:
    timer_start(&timer1);
    38d0:	80 30 21    	mov.w     #0x1308, w0
    38d2:	af fb 07    	rcall     0x3032 <_timer_start>

000038d4 <.LSM9>:
    timer_start(&timer2);
    38d4:	e0 31 21    	mov.w     #0x131e, w0
    38d6:	ad fb 07    	rcall     0x3032 <_timer_start>

000038d8 <.LSM10>:

    setup_uart();
    38d8:	c1 ff 07    	rcall     0x385c <_setup_uart>

000038da <.LSM11>:

}
    38da:	00 80 fa    	ulnk      
    38dc:	00 00 06    	return    

000038de <_main>:

int16_t main(void) {
    38de:	44 00 fa    	lnk       #0x44

000038e0 <.LSM13>:
    // printf("Starting Master Controller...\r\n");
    init_clock();
    38e0:	00 10 20    	mov.w     #0x100, w0
    38e2:	20 3a 88    	mov.w     w0, 0x744

000038e4 <.LSM14>:
    init_ui();
    38e4:	b7 fe 07    	rcall     0x3654 <_init_ui>

000038e6 <.LSM15>:
    init_timer();
    38e6:	6b fa 07    	rcall     0x2dbe <_init_timer>

000038e8 <.LSM16>:
    init_uart();
    38e8:	fb f4 07    	rcall     0x22e0 <_init_uart>

000038ea <.LSM17>:
    setup();
    38ea:	e9 ff 07    	rcall     0x38be <_setup>

000038ec <.LSM18>:
    uint16_t counter = 0;
    38ec:	00 00 eb    	clr.w     w0
    38ee:	00 0f 78    	mov.w     w0, [w14]
    38f0:	01 00 37    	bra       0x38f4 <.L6>

000038f2 <.L7>:
    uint8_t status_msg [64];
    while (1) {
        if (timer_flag(&timer1)) {
            // Blink green light to show normal operation.
            timer_lower(&timer1);
            led_toggle(&led3);
        }
        if (timer_flag(&timer2)) {
            // Transmit UART data
            timer_lower(&timer2);
            led_on(&led1);
            counter ++;
            // snprintf(status_msg, 64, "This is message #%d.", counter);
            // sprintf(status_msg, "This is message #%d.\r", counter);
            uint8_t addr = counter % 5;
            uint8_t cmd = 28;
            sprintf(status_msg, "%02x%02x\r", cmd, addr);
            uart_puts(&uart1, status_msg);
            led_off(&led1);
            // printf("Sent: \"%s\"\r\n", status_msg);
        }   

    }
    38f2:	00 00 00    	nop       

000038f4 <.L6>:
    38f4:	80 30 21    	mov.w     #0x1308, w0
    38f6:	bb fb 07    	rcall     0x306e <_timer_flag>
    38f8:	00 00 e0    	cp0.w     w0
    38fa:	04 00 32    	bra       Z, 0x3904 <.L4>

000038fc <.LSM21>:
    38fc:	80 30 21    	mov.w     #0x1308, w0
    38fe:	c8 fb 07    	rcall     0x3090 <_timer_lower>

00003900 <.LSM22>:
    3900:	00 81 20    	mov.w     #0x810, w0
    3902:	2b ff 07    	rcall     0x375a <_led_toggle>

00003904 <.L4>:
    3904:	e0 31 21    	mov.w     #0x131e, w0
    3906:	b3 fb 07    	rcall     0x306e <_timer_flag>
    3908:	00 00 e0    	cp0.w     w0
    390a:	f3 ff 32    	bra       Z, 0x38f2 <.L7>

0000390c <.LBB2>:
    390c:	e0 31 21    	mov.w     #0x131e, w0
    390e:	c0 fb 07    	rcall     0x3090 <_timer_lower>

00003910 <.LSM25>:
    3910:	00 80 20    	mov.w     #0x800, w0
    3912:	02 ff 07    	rcall     0x3718 <_led_on>

00003914 <.LSM26>:
    3914:	1e 0f e8    	inc.w     [w14], [w14]

00003916 <.LSM27>:
    3916:	9e 00 78    	mov.w     [w14], w1
    3918:	50 00 20    	mov.w     #0x5, w0
    391a:	00 01 78    	mov.w     w0, w2
    391c:	11 00 09    	repeat    #0x11
    391e:	82 80 d8    	div.uw    w1, w2
    3920:	80 00 fd    	exch      w0, w1
    3922:	20 47 98    	mov.b     w0, [w14+2]

00003924 <.LSM28>:
    3924:	c0 c1 b3    	mov.b     #0x1c, w0
    3926:	30 47 98    	mov.b     w0, [w14+3]

00003928 <.LSM29>:
    3928:	2e 40 90    	mov.b     [w14+2], w0
    392a:	00 81 fb    	ze        w0, w2
    392c:	3e 40 90    	mov.b     [w14+3], w0
    392e:	80 80 fb    	ze        w0, w1
    3930:	64 00 47    	add.w     w14, #0x4, w0
    3932:	82 1f 78    	mov.w     w2, [w15++]
    3934:	81 1f 78    	mov.w     w1, [w15++]
    3936:	e1 f0 29    	mov.w     #0x9f0e, w1
    3938:	81 1f 78    	mov.w     w1, [w15++]
    393a:	fc ed 07    	rcall     0x1534 <__sprintf_cdnopuxX>
    393c:	e6 87 57    	sub.w     w15, #0x6, w15

0000393e <.LSM30>:
    393e:	64 00 47    	add.w     w14, #0x4, w0
    3940:	80 00 78    	mov.w     w0, w1
    3942:	c0 1e 21    	mov.w     #0x11ec, w0
    3944:	fb f8 07    	rcall     0x2b3c <_uart_puts>

00003946 <.LSM31>:
    3946:	00 80 20    	mov.w     #0x800, w0
    3948:	f7 fe 07    	rcall     0x3738 <_led_off>

0000394a <.LBE2>:
    394a:	d4 ff 37    	bra       0x38f4 <.L6>
Disassembly of section .dinit:

0000394c <.dinit>:
    394c:	34 08 00    	nop       
    394e:	00 08 00    	nop       
    3950:	80 00 00    	nop       
    3952:	34 10 00    	nop       
    3954:	b8 01 00    	nop       
    3956:	80 00 00    	nop       
    3958:	00 08 00    	nop       
    395a:	30 00 00    	nop       
    395c:	80 00 00    	nop       
    395e:	b2 13 00    	nop       
    3960:	10 00 00    	nop       
    3962:	82 00 00    	nop       
    3964:	bd 37 86    	mov.w     0xc6f6, w13
    3966:	33 bd 37    	bra       0xffffb3ce
    3968:	06 35 bd    	subr.w    0x1506
    396a:	37 86 36    	bra       LEU, 0xffff45da
    396c:	bd 37 86    	mov.w     0xc6f6, w13
    396e:	37 00 00    	nop       
    3970:	08 13 00    	nop       
    3972:	6e 00 00    	nop       
    3974:	80 00 00    	nop       
    3976:	ec 11 00    	nop       
    3978:	1c 01 00    	nop       
    397a:	80 00 00    	nop       
    397c:	30 08 00    	nop       
    397e:	04 00 00    	nop       
    3980:	80 00 00    	nop       
    3982:	98 13 00    	nop       
    3984:	1a 00 00    	nop       
    3986:	82 00 00    	nop       
    3988:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    398a:	74 7a 4c    	.pword 0x4c7a74
    398c:	00 00 01    	call      w0
    398e:	00 02 00    	nop       
    3990:	04 00 08    	do        #0x4, 0x5994
    3992:	00 10 00 
    3994:	00 00 20    	mov.w     #0x0, w0
    3996:	2b 2d 23    	mov.w     #0x32d2, w11
    3998:	30 00 00    	nop       
    399a:	76 13 00    	nop       
    399c:	22 00 00    	nop       
    399e:	82 00 00    	nop       
    39a0:	30 31 32    	bra       Z, 0x9c02
    39a2:	33 34 35    	bra       LT, 0xa20a
    39a4:	36 37 38    	bra       NOV, 0xa812
    39a6:	39 41 42    	add.b     w4, [w9++], w2
    39a8:	43 44 45    	add.b     w10, [--w3], w8
    39aa:	46 00 30    	bra       OV, 0x3a38
    39ac:	31 32 33    	bra       N, 0x9e10
    39ae:	34 35 36    	bra       LEU, 0xa418
    39b0:	37 38 39    	bra       NC, 0xaa20
    39b2:	61 62 63    	and.b     w6, #0x1, [--w4]
    39b4:	64 65 66    	and.b     w12, #0x4, [--w10]
	...
Disassembly of section .isr:

000039ba <__DefaultInterrupt>:
    39ba:	00 40 da    	.pword 0xda4000
    39bc:	00 00 fe    	reset     
