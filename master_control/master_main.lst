
master_main.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	6f 5c 21    	mov.w     #0x15c6, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	00 7c 24    	mov.w     #0x47c0, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	78 45 02    	call      0x4578 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	c0 06 20    	mov.w     #0x6c, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	84 44 04    	goto      0x4484 <_reset>
    11e4:	00 00 00 
    11e6:	66 44 04    	goto      0x4466 <_idle>
    11e8:	00 00 00 
    11ea:	aa 44 04    	goto      0x44aa <_flying>
    11ec:	00 00 00 
    11ee:	d0 44 04    	goto      0x44d0 <_lose>
    11f0:	00 00 00 
    11f2:	16 45 04    	goto      0x4516 <_win>
    11f4:	00 00 00 
    11f6:	44 3e 04    	goto      0x3e44 <___digitalRead>
    11f8:	00 00 00 
    11fa:	00 3e 04    	goto      0x3e00 <___digitalWrite>
    11fc:	00 00 00 
    11fe:	66 3e 04    	goto      0x3e66 <___analogRead>
    1200:	00 00 00 
    1202:	a2 22 04    	goto      0x22a2 <___putc_nobuffer>
    1204:	00 00 00 
    1206:	e4 22 04    	goto      0x22e4 <___putc_buffer>
    1208:	00 00 00 
    120a:	c6 22 04    	goto      0x22c6 <___getc_nobuffer>
    120c:	00 00 00 
    120e:	dc 23 04    	goto      0x23dc <___getc_buffer>
    1210:	00 00 00 
    1212:	a4 17 04    	goto      0x17a4 <_prout>
    1214:	00 00 00 

00001216 <___subsf3>:
    1216:	03 f0 a2    	btg.w     w3, #0xf

00001218 <___addsf3>:
    1218:	88 9f be    	mov.d     w8, [w15++]
    121a:	8a 9f be    	mov.d     w10, [w15++]
    121c:	8c 1f 78    	mov.w     w12, [w15++]
    121e:	f7 00 07    	rcall     0x140e <__funpack2>
    1220:	fe 00 33    	bra       N, 0x141e <__fPropagateNaN>
    1222:	64 50 e1    	cp.w      w10, #0x4
    1224:	4f 00 32    	bra       Z, 0x12c4 <aisinfinite>

00001226 <checkspecialb>:
    1226:	64 20 e1    	cp.w      w4, #0x4
    1228:	52 00 32    	bra       Z, 0x12ce <return2>
    122a:	03 82 6c    	xor.w     w9, w3, w4
    122c:	07 00 3b    	bra       NN, 0x123c <getsign>
    122e:	09 05 d0    	sl.w      w9, w10
    1230:	03 06 d0    	sl.w      w3, w12
    1232:	82 0f 54    	sub.w     w8, w2, [w15]
    1234:	0c 06 5d    	subb.w    w10, w12, w12
    1236:	02 00 39    	bra       NC, 0x123c <getsign>
    1238:	02 00 32    	bra       Z, 0x123e <gotsign>
    123a:	89 01 78    	mov.w     w9, w3

0000123c <getsign>:
    123c:	03 06 78    	mov.w     w3, w12

0000123e <gotsign>:
    123e:	85 82 55    	sub.w     w11, w5, w5
    1240:	04 00 3d    	bra       GE, 0x124a <expcanonical>
    1242:	00 03 fd    	exch      w0, w6
    1244:	81 03 fd    	exch      w1, w7
    1246:	85 02 ea    	neg.w     w5, w5
    1248:	8b 85 42    	add.w     w5, w11, w11

0000124a <expcanonical>:
    124a:	84 0f 72    	ior.w     w4, w4, [w15]
    124c:	02 00 3b    	bra       NN, 0x1252 <nonegate>
    124e:	60 00 10    	subr.w    w0, #0x0, w0
    1250:	e0 80 18    	subbr.w   w1, #0x0, w1

00001252 <nonegate>:
    1252:	60 11 b8    	mul.uu    w2, #0x0, w2
    1254:	00 05 eb    	clr.w     w10
    1256:	7a 28 e1    	cp.w      w5, #0x1a
    1258:	0a 00 39    	bra       NC, 0x126e <aligniter>
    125a:	06 00 78    	mov.w     w6, w0
    125c:	c7 5d dd    	sl.w      w11, #0x7, w11
    125e:	f7 07 b2    	and.w     #0x7f, w7
    1260:	87 80 75    	ior.w     w11, w7, w1
    1262:	2d 00 37    	bra       0x12be <signoff>

00001264 <align>:
    1264:	82 81 71    	ior.w     w3, w2, w3
    1266:	0a 01 78    	mov.w     w10, w2
    1268:	61 05 60    	and.w     w0, #0x1, w10
    126a:	81 80 d1    	asr.w     w1, w1
    126c:	00 80 d3    	rrc.w     w0, w0

0000126e <aligniter>:
    126e:	85 02 e9    	dec.w     w5, w5
    1270:	f9 ff 3b    	bra       NN, 0x1264 <align>

00001272 <aligned>:
    1272:	06 04 40    	add.w     w0, w6, w8
    1274:	87 84 48    	addc.w    w1, w7, w9
    1276:	02 00 3b    	bra       NN, 0x127c <normalizesum>
    1278:	60 04 14    	subr.w    w8, #0x0, w8
    127a:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000127c <normalizesum>:
    127c:	09 88 a3    	btst.z    w9, #0x8
    127e:	07 00 32    	bra       Z, 0x128e <checknormal>
    1280:	8a 81 71    	ior.w     w3, w10, w3
    1282:	82 81 71    	ior.w     w3, w2, w3
    1284:	61 01 64    	and.w     w8, #0x1, w2
    1286:	89 04 d1    	lsr.w     w9, w9
    1288:	08 84 d3    	rrc.w     w8, w8
    128a:	8b 05 e8    	inc.w     w11, w11
    128c:	17 00 37    	bra       0x12bc <round>

0000128e <checknormal>:
    128e:	09 78 a3    	btst.z    w9, #0x7
    1290:	13 00 3a    	bra       NZ, 0x12b8 <discardguard>

00001292 <underflow>:
    1292:	0b 00 e0    	cp0.w     w11
    1294:	13 00 34    	bra       LE, 0x12bc <round>
    1296:	8b 05 e9    	dec.w     w11, w11
    1298:	08 04 44    	add.w     w8, w8, w8
    129a:	89 84 4c    	addc.w    w9, w9, w9
    129c:	0a 44 74    	ior.b     w8, w10, w8
    129e:	09 78 a3    	btst.z    w9, #0x7
    12a0:	0d 00 3a    	bra       NZ, 0x12bc <round>

000012a2 <normalizeloop>:
    12a2:	0b 00 e0    	cp0.w     w11
    12a4:	07 00 34    	bra       LE, 0x12b4 <normalizeexit>
    12a6:	8b 05 e9    	dec.w     w11, w11
    12a8:	08 04 44    	add.w     w8, w8, w8
    12aa:	89 84 4c    	addc.w    w9, w9, w9
    12ac:	01 00 3a    	bra       NZ, 0x12b0 <normalizetest>
    12ae:	0b 00 20    	mov.w     #0x0, w11

000012b0 <normalizetest>:
    12b0:	09 78 a3    	btst.z    w9, #0x7
    12b2:	f7 ff 32    	bra       Z, 0x12a2 <normalizeloop>

000012b4 <normalizeexit>:
    12b4:	00 01 eb    	clr.w     w2
    12b6:	02 00 37    	bra       0x12bc <round>

000012b8 <discardguard>:
    12b8:	82 81 71    	ior.w     w3, w2, w3
    12ba:	0a 01 78    	mov.w     w10, w2

000012bc <round>:
    12bc:	6d 00 07    	rcall     0x1398 <__fpack>

000012be <signoff>:
    12be:	0c f0 a7    	btsc.w    w12, #0xf
    12c0:	01 f0 a0    	bset.w    w1, #0xf
    12c2:	b6 00 37    	bra       0x1430 <__fbopExit>

000012c4 <aisinfinite>:
    12c4:	64 20 e1    	cp.w      w4, #0x4
    12c6:	02 00 3a    	bra       NZ, 0x12cc <return8>
    12c8:	83 8f 6c    	xor.w     w9, w3, [w15]
    12ca:	b6 00 33    	bra       N, 0x1438 <__fbopReturnNaN>

000012cc <return8>:
    12cc:	08 01 be    	mov.d     w8, w2

000012ce <return2>:
    12ce:	02 00 be    	mov.d     w2, w0
    12d0:	af 00 37    	bra       0x1430 <__fbopExit>

000012d2 <___divsf3>:
    12d2:	88 9f be    	mov.d     w8, [w15++]
    12d4:	8a 9f be    	mov.d     w10, [w15++]
    12d6:	8c 1f 78    	mov.w     w12, [w15++]
    12d8:	9a 00 07    	rcall     0x140e <__funpack2>
    12da:	a1 00 33    	bra       N, 0x141e <__fPropagateNaN>
    12dc:	03 86 6c    	xor.w     w9, w3, w12
    12de:	64 50 e1    	cp.w      w10, #0x4
    12e0:	2e 00 32    	bra       Z, 0x133e <aisinfinite>
    12e2:	64 20 e1    	cp.w      w4, #0x4
    12e4:	33 00 32    	bra       Z, 0x134c <returnZero>
    12e6:	61 50 e1    	cp.w      w10, #0x1
    12e8:	2f 00 32    	bra       Z, 0x1348 <aiszero>
    12ea:	61 20 e1    	cp.w      w4, #0x1
    12ec:	31 00 32    	bra       Z, 0x1350 <returnInf>

000012ee <finitenonzero>:
    12ee:	85 85 55    	sub.w     w11, w5, w11
    12f0:	eb 07 b0    	add.w     #0x7e, w11
    12f2:	09 00 20    	mov.w     #0x0, w9
    12f4:	08 04 20    	mov.w     #0x40, w8
    12f6:	05 00 37    	bra       0x1302 <diventry>

000012f8 <divnext>:
    12f8:	08 04 44    	add.w     w8, w8, w8
    12fa:	89 84 4c    	addc.w    w9, w9, w9
    12fc:	0a 00 31    	bra       C, 0x1312 <divdone>

000012fe <divloop>:
    12fe:	06 03 43    	add.w     w6, w6, w6
    1300:	87 83 4b    	addc.w    w7, w7, w7

00001302 <diventry>:
    1302:	00 01 53    	sub.w     w6, w0, w2
    1304:	81 81 5b    	subb.w    w7, w1, w3
    1306:	f8 ff 33    	bra       N, 0x12f8 <divnext>
    1308:	02 03 be    	mov.d     w2, w6
    130a:	08 00 a0    	bset.w    w8, #0x0
    130c:	08 04 44    	add.w     w8, w8, w8
    130e:	89 84 4c    	addc.w    w9, w9, w9
    1310:	f6 ff 39    	bra       NC, 0x12fe <divloop>

00001312 <divdone>:
    1312:	c6 39 dd    	sl.w      w7, #0x6, w3
    1314:	83 01 73    	ior.w     w6, w3, w3
    1316:	01 00 32    	bra       Z, 0x131a <stickyok>
    1318:	13 00 20    	mov.w     #0x1, w3

0000131a <stickyok>:
    131a:	89 04 d1    	lsr.w     w9, w9
    131c:	08 84 d3    	rrc.w     w8, w8
    131e:	09 98 a3    	btst.z    w9, #0x9
    1320:	05 00 32    	bra       Z, 0x132c <guardused>
    1322:	08 00 a7    	btsc.w    w8, #0x0
    1324:	03 00 a0    	bset.w    w3, #0x0
    1326:	89 04 d1    	lsr.w     w9, w9
    1328:	08 84 d3    	rrc.w     w8, w8
    132a:	8b 05 e8    	inc.w     w11, w11

0000132c <guardused>:
    132c:	89 04 d1    	lsr.w     w9, w9
    132e:	08 84 d3    	rrc.w     w8, w8
    1330:	00 01 eb    	clr.w     w2
    1332:	02 81 d2    	rlc.w     w2, w2
    1334:	31 00 07    	rcall     0x1398 <__fpack>

00001336 <return0>:
    1336:	01 f0 a1    	bclr.w    w1, #0xf
    1338:	0c f0 a7    	btsc.w    w12, #0xf
    133a:	01 f0 a0    	bset.w    w1, #0xf
    133c:	79 00 37    	bra       0x1430 <__fbopExit>

0000133e <aisinfinite>:
    133e:	64 20 e1    	cp.w      w4, #0x4
    1340:	7b 00 32    	bra       Z, 0x1438 <__fbopReturnNaN>

00001342 <return8>:
    1342:	08 01 be    	mov.d     w8, w2

00001344 <return2>:
    1344:	02 00 be    	mov.d     w2, w0
    1346:	f7 ff 37    	bra       0x1336 <return0>

00001348 <aiszero>:
    1348:	61 20 e1    	cp.w      w4, #0x1
    134a:	76 00 32    	bra       Z, 0x1438 <__fbopReturnNaN>

0000134c <returnZero>:
    134c:	60 00 b8    	mul.uu    w0, #0x0, w0
    134e:	f3 ff 37    	bra       0x1336 <return0>

00001350 <returnInf>:
    1350:	00 00 20    	mov.w     #0x0, w0
    1352:	01 f8 27    	mov.w     #0x7f80, w1
    1354:	f0 ff 37    	bra       0x1336 <return0>

00001356 <___eqsf2>:
    1356:	14 00 20    	mov.w     #0x1, w4
    1358:	a6 00 37    	bra       0x14a6 <__fcompare>

0000135a <___gesf2>:
    135a:	f4 ff 2f    	mov.w     #0xffff, w4
    135c:	a4 00 37    	bra       0x14a6 <__fcompare>

0000135e <___fixunssfsi>:
    135e:	00 01 be    	mov.d     w0, w2
    1360:	41 00 07    	rcall     0x13e4 <__funpack>
    1362:	04 70 a7    	btsc.w    w4, #0x7
    1364:	03 f0 a1    	bclr.w    w3, #0xf
    1366:	03 f8 a3    	btst.z    w3, #0xf
    1368:	13 00 3a    	bra       NZ, 0x1390 <returnzero>
    136a:	65 09 b1    	sub.w     #0x96, w5
    136c:	10 00 32    	bra       Z, 0x138e <exit>
    136e:	09 00 35    	bra       LT, 0x1382 <shiftright>
    1370:	69 28 e1    	cp.w      w5, #0x9
    1372:	02 00 35    	bra       LT, 0x1378 <shiftleft>
    1374:	01 00 28    	mov.w     #0x8000, w1
    1376:	00 00 05    	retlw.w   #0x0, w0

00001378 <shiftleft>:
    1378:	00 00 40    	add.w     w0, w0, w0
    137a:	81 80 48    	addc.w    w1, w1, w1
    137c:	85 02 e9    	dec.w     w5, w5
    137e:	fc ff 3a    	bra       NZ, 0x1378 <shiftleft>
    1380:	00 00 06    	return    

00001382 <shiftright>:
    1382:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1384:	05 00 35    	bra       LT, 0x1390 <returnzero>

00001386 <shiftrightloop>:
    1386:	81 00 d1    	lsr.w     w1, w1
    1388:	00 80 d3    	rrc.w     w0, w0
    138a:	85 02 e8    	inc.w     w5, w5
    138c:	fc ff 3a    	bra       NZ, 0x1386 <shiftrightloop>

0000138e <exit>:
    138e:	00 00 06    	return    

00001390 <returnzero>:
    1390:	80 00 eb    	clr.w     w1
    1392:	00 00 05    	retlw.w   #0x0, w0

00001394 <___floatunsisf>:
    1394:	60 11 b8    	mul.uu    w2, #0x0, w2
    1396:	a2 00 37    	bra       0x14dc <___floatundisf>

00001398 <__fpack>:
    1398:	81 00 20    	mov.w     #0x8, w1
    139a:	61 80 55    	sub.w     w11, #0x1, w0
    139c:	0b 00 3d    	bra       GE, 0x13b4 <notsubnormal>
    139e:	0b 00 20    	mov.w     #0x0, w11
    13a0:	61 fe 2f    	mov.w     #0xffe6, w1
    13a2:	01 00 e1    	cp.w      w0, w1
    13a4:	1d 00 34    	bra       LE, 0x13e0 <zerosig>

000013a6 <subnormal>:
    13a6:	82 81 71    	ior.w     w3, w2, w3
    13a8:	61 01 64    	and.w     w8, #0x1, w2
    13aa:	89 04 d1    	lsr.w     w9, w9
    13ac:	08 84 d3    	rrc.w     w8, w8
    13ae:	00 00 e8    	inc.w     w0, w0
    13b0:	fa ff 3a    	bra       NZ, 0x13a6 <subnormal>
    13b2:	71 00 20    	mov.w     #0x7, w1

000013b4 <notsubnormal>:
    13b4:	61 00 64    	and.w     w8, #0x1, w0
    13b6:	03 00 70    	ior.w     w0, w3, w0
    13b8:	02 00 60    	and.w     w0, w2, w0
    13ba:	09 00 32    	bra       Z, 0x13ce <packupandgo>
    13bc:	61 04 44    	add.w     w8, #0x1, w8
    13be:	e0 84 4c    	addc.w    w9, #0x0, w9
    13c0:	09 88 a5    	btst.z    w9, w1
    13c2:	05 00 32    	bra       Z, 0x13ce <packupandgo>
    13c4:	8b 05 e8    	inc.w     w11, w11
    13c6:	68 08 e1    	cp.w      w1, #0x8
    13c8:	02 00 3a    	bra       NZ, 0x13ce <packupandgo>
    13ca:	89 04 d1    	lsr.w     w9, w9
    13cc:	08 84 d3    	rrc.w     w8, w8

000013ce <packupandgo>:
    13ce:	f2 0f 20    	mov.w     #0xff, w2
    13d0:	02 58 e1    	cp.w      w11, w2
    13d2:	05 00 3d    	bra       GE, 0x13de <overflow>
    13d4:	c7 5d dd    	sl.w      w11, #0x7, w11
    13d6:	f9 07 b2    	and.w     #0x7f, w9
    13d8:	89 80 75    	ior.w     w11, w9, w1
    13da:	08 00 78    	mov.w     w8, w0
    13dc:	00 00 06    	return    

000013de <overflow>:
    13de:	0b f8 27    	mov.w     #0x7f80, w11

000013e0 <zerosig>:
    13e0:	8b 00 78    	mov.w     w11, w1
    13e2:	00 00 05    	retlw.w   #0x0, w0

000013e4 <__funpack>:
    13e4:	c7 0a de    	lsr.w     w1, #0x7, w5
    13e6:	f1 07 b2    	and.w     #0x7f, w1
    13e8:	f5 0f b2    	and.w     #0xff, w5
    13ea:	08 00 32    	bra       Z, 0x13fc <zeroorsub>
    13ec:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13ee:	02 00 32    	bra       Z, 0x13f4 <nanorinf>

000013f0 <finitereturn>:
    13f0:	01 70 a0    	bset.w    w1, #0x7
    13f2:	24 00 05    	retlw.w   #0x2, w4

000013f4 <nanorinf>:
    13f4:	81 0f 70    	ior.w     w0, w1, [w15]
    13f6:	01 00 32    	bra       Z, 0x13fa <infinite>
    13f8:	04 08 05    	retlw.w   #0x80, w4

000013fa <infinite>:
    13fa:	44 00 05    	retlw.w   #0x4, w4

000013fc <zeroorsub>:
    13fc:	81 0f 70    	ior.w     w0, w1, [w15]
    13fe:	02 00 3a    	bra       NZ, 0x1404 <subnormal>
    1400:	14 00 05    	retlw.w   #0x1, w4

00001402 <normalize>:
    1402:	85 02 e9    	dec.w     w5, w5

00001404 <subnormal>:
    1404:	00 00 40    	add.w     w0, w0, w0
    1406:	81 c0 48    	addc.b    w1, w1, w1
    1408:	fc ff 3b    	bra       NN, 0x1402 <normalize>
    140a:	01 70 a0    	bset.w    w1, #0x7
    140c:	24 00 05    	retlw.w   #0x2, w4

0000140e <__funpack2>:
    140e:	00 04 be    	mov.d     w0, w8
    1410:	e9 ff 07    	rcall     0x13e4 <__funpack>
    1412:	00 03 be    	mov.d     w0, w6
    1414:	04 05 be    	mov.d     w4, w10
    1416:	02 00 be    	mov.d     w2, w0
    1418:	e5 ff 07    	rcall     0x13e4 <__funpack>
    141a:	84 4f 75    	ior.b     w10, w4, [w15]
    141c:	00 00 06    	return    

0000141e <__fPropagateNaN>:
    141e:	02 00 be    	mov.d     w2, w0
    1420:	64 50 e1    	cp.w      w10, #0x4
    1422:	05 00 36    	bra       LEU, 0x142e <return0>
    1424:	64 20 e1    	cp.w      w4, #0x4
    1426:	02 00 36    	bra       LEU, 0x142c <return8>
    1428:	09 68 a3    	btst.z    w9, #0x6
    142a:	01 00 3a    	bra       NZ, 0x142e <return0>

0000142c <return8>:
    142c:	08 00 be    	mov.d     w8, w0

0000142e <return0>:
    142e:	01 60 a0    	bset.w    w1, #0x6

00001430 <__fbopExit>:
    1430:	4f 06 78    	mov.w     [--w15], w12
    1432:	4f 05 be    	mov.d     [--w15], w10
    1434:	4f 04 be    	mov.d     [--w15], w8
    1436:	00 00 06    	return    

00001438 <__fbopReturnNaN>:
    1438:	f0 ff 2f    	mov.w     #0xffff, w0
    143a:	f1 ff 27    	mov.w     #0x7fff, w1
    143c:	f9 ff 37    	bra       0x1430 <__fbopExit>

0000143e <___mulsf3>:
    143e:	88 9f be    	mov.d     w8, [w15++]
    1440:	8a 9f be    	mov.d     w10, [w15++]
    1442:	8c 1f 78    	mov.w     w12, [w15++]
    1444:	e4 ff 07    	rcall     0x140e <__funpack2>
    1446:	eb ff 33    	bra       N, 0x141e <__fPropagateNaN>
    1448:	03 86 6c    	xor.w     w9, w3, w12
    144a:	64 50 e1    	cp.w      w10, #0x4
    144c:	24 00 32    	bra       Z, 0x1496 <aisinfinite>
    144e:	64 20 e1    	cp.w      w4, #0x4
    1450:	27 00 32    	bra       Z, 0x14a0 <bisinfinite>
    1452:	61 50 e1    	cp.w      w10, #0x1
    1454:	22 00 32    	bra       Z, 0x149a <return8>
    1456:	61 20 e1    	cp.w      w4, #0x1
    1458:	21 00 32    	bra       Z, 0x149c <return2>
    145a:	8b 85 42    	add.w     w5, w11, w11
    145c:	eb 07 b1    	sub.w     #0x7e, w11
    145e:	01 34 b8    	mul.uu    w6, w1, w8
    1460:	00 3a b8    	mul.uu    w7, w0, w4
    1462:	08 04 42    	add.w     w4, w8, w8
    1464:	89 84 4a    	addc.w    w5, w9, w9
    1466:	01 3a b8    	mul.uu    w7, w1, w4
    1468:	00 30 b8    	mul.uu    w6, w0, w0
    146a:	88 80 40    	add.w     w1, w8, w1
    146c:	09 01 4a    	addc.w    w4, w9, w2
    146e:	04 00 33    	bra       N, 0x1478 <formsticky>
    1470:	00 00 40    	add.w     w0, w0, w0
    1472:	81 80 48    	addc.w    w1, w1, w1
    1474:	02 01 49    	addc.w    w2, w2, w2
    1476:	8b 05 e9    	dec.w     w11, w11

00001478 <formsticky>:
    1478:	c9 09 dd    	sl.w      w1, #0x9, w3
    147a:	83 01 70    	ior.w     w0, w3, w3
    147c:	01 00 32    	bra       Z, 0x1480 <formRandSig>
    147e:	13 00 20    	mov.w     #0x1, w3

00001480 <formRandSig>:
    1480:	c8 14 de    	lsr.w     w2, #0x8, w9
    1482:	48 14 dd    	sl.w      w2, #0x8, w8
    1484:	47 09 de    	lsr.w     w1, #0x7, w2
    1486:	12 00 b2    	and.w     #0x1, w2
    1488:	c8 08 de    	lsr.w     w1, #0x8, w1
    148a:	08 84 70    	ior.w     w1, w8, w8
    148c:	85 ff 07    	rcall     0x1398 <__fpack>

0000148e <return0>:
    148e:	01 f0 a1    	bclr.w    w1, #0xf
    1490:	0c f0 a7    	btsc.w    w12, #0xf
    1492:	01 f0 a0    	bset.w    w1, #0xf
    1494:	cd ff 37    	bra       0x1430 <__fbopExit>

00001496 <aisinfinite>:
    1496:	61 20 e1    	cp.w      w4, #0x1
    1498:	cf ff 32    	bra       Z, 0x1438 <__fbopReturnNaN>

0000149a <return8>:
    149a:	08 01 be    	mov.d     w8, w2

0000149c <return2>:
    149c:	02 00 be    	mov.d     w2, w0
    149e:	f7 ff 37    	bra       0x148e <return0>

000014a0 <bisinfinite>:
    14a0:	61 50 e1    	cp.w      w10, #0x1
    14a2:	fc ff 3a    	bra       NZ, 0x149c <return2>
    14a4:	c9 ff 37    	bra       0x1438 <__fbopReturnNaN>

000014a6 <__fcompare>:
    14a6:	88 9f be    	mov.d     w8, [w15++]
    14a8:	8a 9f be    	mov.d     w10, [w15++]
    14aa:	84 1f 78    	mov.w     w4, [w15++]
    14ac:	b0 ff 07    	rcall     0x140e <__funpack2>
    14ae:	4f 00 78    	mov.w     [--w15], w0
    14b0:	11 00 33    	bra       N, 0x14d4 <exit>
    14b2:	f0 ff 2f    	mov.w     #0xffff, w0
    14b4:	83 8f 6c    	xor.w     w9, w3, [w15]
    14b6:	06 00 3b    	bra       NN, 0x14c4 <comparemag>
    14b8:	04 05 65    	and.w     w10, w4, w10
    14ba:	0a 00 a7    	btsc.w    w10, #0x0
    14bc:	08 00 37    	bra       0x14ce <returnEqual>
    14be:	09 f0 a6    	btss.w    w9, #0xf
    14c0:	10 00 20    	mov.w     #0x1, w0
    14c2:	08 00 37    	bra       0x14d4 <exit>

000014c4 <comparemag>:
    14c4:	82 0f 54    	sub.w     w8, w2, [w15]
    14c6:	83 8f 5c    	subb.w    w9, w3, [w15]
    14c8:	03 00 39    	bra       NC, 0x14d0 <adjust>
    14ca:	10 00 20    	mov.w     #0x1, w0
    14cc:	01 00 3e    	bra       GTU, 0x14d0 <adjust>

000014ce <returnEqual>:
    14ce:	00 00 20    	mov.w     #0x0, w0

000014d0 <adjust>:
    14d0:	09 f0 a7    	btsc.w    w9, #0xf
    14d2:	00 00 ea    	neg.w     w0, w0

000014d4 <exit>:
    14d4:	4f 05 be    	mov.d     [--w15], w10
    14d6:	4f 04 be    	mov.d     [--w15], w8
    14d8:	00 00 e0    	cp0.w     w0
    14da:	00 00 06    	return    

000014dc <___floatundisf>:
    14dc:	88 9f be    	mov.d     w8, [w15++]
    14de:	8a 9f be    	mov.d     w10, [w15++]
    14e0:	00 82 70    	ior.w     w1, w0, w4
    14e2:	04 02 71    	ior.w     w2, w4, w4
    14e4:	04 82 71    	ior.w     w3, w4, w4
    14e6:	26 00 32    	bra       Z, 0x1534 <return0>
    14e8:	00 04 be    	mov.d     w0, w8
    14ea:	02 00 be    	mov.d     w2, w0
    14ec:	60 11 b8    	mul.uu    w2, #0x0, w2
    14ee:	6b 09 20    	mov.w     #0x96, w11
    14f0:	95 02 20    	mov.w     #0x29, w5
    14f2:	01 82 cf    	ff1l      w1, w4
    14f4:	0a 00 39    	bra       NC, 0x150a <fixshift>
    14f6:	05 41 b1    	sub.b     #0x10, w5
    14f8:	00 82 cf    	ff1l      w0, w4
    14fa:	07 00 39    	bra       NC, 0x150a <fixshift>
    14fc:	05 41 b1    	sub.b     #0x10, w5
    14fe:	09 82 cf    	ff1l      w9, w4
    1500:	04 00 39    	bra       NC, 0x150a <fixshift>
    1502:	05 41 b1    	sub.b     #0x10, w5
    1504:	08 82 cf    	ff1l      w8, w4
    1506:	01 00 39    	bra       NC, 0x150a <fixshift>
    1508:	05 41 b1    	sub.b     #0x10, w5

0000150a <fixshift>:
    150a:	05 42 52    	sub.b     w4, w5, w4
    150c:	12 00 32    	bra       Z, 0x1532 <round>
    150e:	0a 00 3b    	bra       NN, 0x1524 <shiftleft>

00001510 <shiftright>:
    1510:	82 81 71    	ior.w     w3, w2, w3
    1512:	61 01 64    	and.w     w8, #0x1, w2
    1514:	81 00 d1    	lsr.w     w1, w1
    1516:	00 80 d3    	rrc.w     w0, w0
    1518:	89 84 d3    	rrc.w     w9, w9
    151a:	08 84 d3    	rrc.w     w8, w8
    151c:	8b 05 e8    	inc.w     w11, w11
    151e:	04 42 e8    	inc.b     w4, w4
    1520:	f7 ff 3a    	bra       NZ, 0x1510 <shiftright>
    1522:	07 00 37    	bra       0x1532 <round>

00001524 <shiftleft>:
    1524:	08 04 44    	add.w     w8, w8, w8
    1526:	89 84 4c    	addc.w    w9, w9, w9
    1528:	00 00 48    	addc.w    w0, w0, w0
    152a:	81 80 48    	addc.w    w1, w1, w1
    152c:	8b 05 e9    	dec.w     w11, w11
    152e:	04 42 e9    	dec.b     w4, w4
    1530:	f9 ff 3a    	bra       NZ, 0x1524 <shiftleft>

00001532 <round>:
    1532:	32 ff 07    	rcall     0x1398 <__fpack>

00001534 <return0>:
    1534:	4f 05 be    	mov.d     [--w15], w10
    1536:	4f 04 be    	mov.d     [--w15], w8
    1538:	00 00 06    	return    

0000153a <_strtoll>:
    153a:	e4 87 47    	add.w     w15, #0x4, w15
    153c:	88 9f be    	mov.d     w8, [w15++]
    153e:	8a 9f be    	mov.d     w10, [w15++]
    1540:	8c 1f 78    	mov.w     w12, [w15++]
    1542:	8e 1f 78    	mov.w     w14, [w15++]
    1544:	00 05 78    	mov.w     w0, w10
    1546:	01 07 78    	mov.w     w1, w14
    1548:	02 06 78    	mov.w     w2, w12
    154a:	0e 00 e0    	cp0.w     w14
    154c:	01 00 3a    	bra       NZ, 0x1550 <.L2>
    154e:	6e 87 57    	sub.w     w15, #0xe, w14

00001550 <.L2>:
    1550:	8a 05 78    	mov.w     w10, w11

00001552 <.L3>:
    1552:	8b 04 78    	mov.w     w11, w9
    1554:	89 05 78    	mov.w     w9, w11
    1556:	3b 44 78    	mov.b     [w11++], w8
    1558:	08 00 fb    	se        w8, w0
    155a:	0f 01 07    	rcall     0x177a <_isspace>
    155c:	00 00 e0    	cp0.w     w0
    155e:	f9 ff 3a    	bra       NZ, 0x1552 <.L3>
    1560:	d0 c2 b3    	mov.b     #0x2d, w0
    1562:	80 4f 54    	sub.b     w8, w0, [w15]
    1564:	03 00 32    	bra       Z, 0x156c <.L4>
    1566:	00 c0 e9    	dec2.b    w0, w0
    1568:	80 4f 54    	sub.b     w8, w0, [w15]
    156a:	02 00 3a    	bra       NZ, 0x1570 <.L14>

0000156c <.L4>:
    156c:	89 04 e8    	inc.w     w9, w9
    156e:	01 00 37    	bra       0x1572 <.L5>

00001570 <.L14>:
    1570:	00 44 78    	mov.b     w0, w8

00001572 <.L5>:
    1572:	0c 01 78    	mov.w     w12, w2
    1574:	8e 00 78    	mov.w     w14, w1
    1576:	09 00 78    	mov.w     w9, w0
    1578:	3a 00 07    	rcall     0x15ee <__Stoull>
    157a:	9e 8f 54    	sub.w     w9, [w14], [w15]
    157c:	01 00 3a    	bra       NZ, 0x1580 <.L6>
    157e:	0a 0f 78    	mov.w     w10, [w14]

00001580 <.L6>:
    1580:	9e 0f 55    	sub.w     w10, [w14], [w15]
    1582:	05 00 3a    	bra       NZ, 0x158e <.L7>
    1584:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1586:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1588:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    158a:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    158c:	17 00 3a    	bra       NZ, 0x15bc <.L8>

0000158e <.L7>:
    158e:	b4 c2 b3    	mov.b     #0x2b, w4
    1590:	84 4f 54    	sub.b     w8, w4, [w15]
    1592:	09 00 3a    	bra       NZ, 0x15a6 <.L9>
    1594:	f4 ff 2f    	mov.w     #0xffff, w4
    1596:	f5 ff 27    	mov.w     #0x7fff, w5
    1598:	60 33 b8    	mul.uu    w6, #0x0, w6
    159a:	04 00 e1    	cp.w      w0, w4
    159c:	05 88 e1    	cpb.w     w1, w5
    159e:	06 90 e1    	cpb.w     w2, w6
    15a0:	07 98 e1    	cpb.w     w3, w7
    15a2:	0c 00 3e    	bra       GTU, 0x15bc <.L8>
    15a4:	1e 00 37    	bra       0x15e2 <.L12>

000015a6 <.L9>:
    15a6:	d4 c2 b3    	mov.b     #0x2d, w4
    15a8:	84 4f 54    	sub.b     w8, w4, [w15]
    15aa:	1b 00 3a    	bra       NZ, 0x15e2 <.L12>
    15ac:	04 00 20    	mov.w     #0x0, w4
    15ae:	05 00 28    	mov.w     #0x8000, w5
    15b0:	60 33 b8    	mul.uu    w6, #0x0, w6
    15b2:	04 00 e1    	cp.w      w0, w4
    15b4:	05 88 e1    	cpb.w     w1, w5
    15b6:	06 90 e1    	cpb.w     w2, w6
    15b8:	07 98 e1    	cpb.w     w3, w7
    15ba:	0d 00 36    	bra       LEU, 0x15d6 <.L11>

000015bc <.L8>:
    15bc:	20 02 20    	mov.w     #0x22, w0
    15be:	90 9f 88    	mov.w     w0, 0x13f2
    15c0:	f0 ff 2f    	mov.w     #0xffff, w0
    15c2:	f1 ff 27    	mov.w     #0x7fff, w1
    15c4:	60 11 b8    	mul.uu    w2, #0x0, w2
    15c6:	d4 c2 b3    	mov.b     #0x2d, w4
    15c8:	84 4f 54    	sub.b     w8, w4, [w15]
    15ca:	0b 00 3a    	bra       NZ, 0x15e2 <.L12>
    15cc:	00 00 20    	mov.w     #0x0, w0
    15ce:	01 00 28    	mov.w     #0x8000, w1
    15d0:	f2 ff 2f    	mov.w     #0xffff, w2
    15d2:	f3 ff 2f    	mov.w     #0xffff, w3
    15d4:	06 00 37    	bra       0x15e2 <.L12>

000015d6 <.L11>:
    15d6:	60 22 b8    	mul.uu    w4, #0x0, w4
    15d8:	60 33 b8    	mul.uu    w6, #0x0, w6
    15da:	00 00 52    	sub.w     w4, w0, w0
    15dc:	81 80 5a    	subb.w    w5, w1, w1
    15de:	02 01 5b    	subb.w    w6, w2, w2
    15e0:	83 81 5b    	subb.w    w7, w3, w3

000015e2 <.L12>:
    15e2:	4f 07 78    	mov.w     [--w15], w14
    15e4:	4f 06 78    	mov.w     [--w15], w12
    15e6:	4f 05 be    	mov.d     [--w15], w10
    15e8:	4f 04 be    	mov.d     [--w15], w8
    15ea:	4f 00 b1    	sub.w     #0x4, w15
    15ec:	00 00 06    	return    

000015ee <__Stoull>:
    15ee:	0f 02 b0    	add.w     #0x20, w15
    15f0:	88 9f be    	mov.d     w8, [w15++]
    15f2:	8a 9f be    	mov.d     w10, [w15++]
    15f4:	8c 9f be    	mov.d     w12, [w15++]
    15f6:	8e 1f 78    	mov.w     w14, [w15++]
    15f8:	80 b7 9f    	mov.w     w0, [w15-32]
    15fa:	01 07 78    	mov.w     w1, w14
    15fc:	82 06 78    	mov.w     w2, w13
    15fe:	00 04 78    	mov.w     w0, w8

00001600 <.L2>:
    1600:	08 06 78    	mov.w     w8, w12
    1602:	0c 04 78    	mov.w     w12, w8
    1604:	38 40 78    	mov.b     [w8++], w0
    1606:	e0 e7 9f    	mov.b     w0, [w15-26]
    1608:	80 40 78    	mov.b     w0, w1
    160a:	01 00 fb    	se        w1, w0
    160c:	b6 00 07    	rcall     0x177a <_isspace>
    160e:	00 00 e0    	cp0.w     w0
    1610:	f7 ff 3a    	bra       NZ, 0x1600 <.L2>
    1612:	d0 c2 b3    	mov.b     #0x2d, w0
    1614:	6f e1 97    	mov.b     [w15-26], w2
    1616:	80 4f 51    	sub.b     w2, w0, [w15]
    1618:	03 00 32    	bra       Z, 0x1620 <.L3>
    161a:	00 c0 e9    	dec2.b    w0, w0
    161c:	80 4f 51    	sub.b     w2, w0, [w15]
    161e:	02 00 3a    	bra       NZ, 0x1624 <.L19>

00001620 <.L3>:
    1620:	0c 06 e8    	inc.w     w12, w12
    1622:	01 00 37    	bra       0x1626 <.L4>

00001624 <.L19>:
    1624:	e0 e7 9f    	mov.b     w0, [w15-26]

00001626 <.L4>:
    1626:	0d 00 e0    	cp0.w     w13
    1628:	05 00 35    	bra       LT, 0x1634 <.L5>
    162a:	e1 8f 56    	sub.w     w13, #0x1, [w15]
    162c:	03 00 32    	bra       Z, 0x1634 <.L5>
    162e:	40 02 20    	mov.w     #0x24, w0
    1630:	80 8f 56    	sub.w     w13, w0, [w15]
    1632:	07 00 34    	bra       LE, 0x1642 <.L6>

00001634 <.L5>:
    1634:	60 44 b8    	mul.uu    w8, #0x0, w8
    1636:	60 55 b8    	mul.uu    w10, #0x0, w10
    1638:	0e 00 e0    	cp0.w     w14
    163a:	97 00 32    	bra       Z, 0x176a <.L7>
    163c:	0f b2 97    	mov.w     [w15-32], w4
    163e:	04 0f 78    	mov.w     w4, [w14]
    1640:	94 00 37    	bra       0x176a <.L7>

00001642 <.L6>:
    1642:	0d 00 e0    	cp0.w     w13
    1644:	0e 00 32    	bra       Z, 0x1662 <.L8>
    1646:	f0 8f 56    	sub.w     w13, #0x10, [w15]
    1648:	1a 00 3a    	bra       NZ, 0x167e <.L9>
    164a:	00 c3 b3    	mov.b     #0x30, w0
    164c:	9c 4f 10    	subr.b    w0, [w12], [w15]
    164e:	17 00 3a    	bra       NZ, 0x167e <.L9>
    1650:	1c 40 90    	mov.b     [w12+1], w0
    1652:	81 c7 b3    	mov.b     #0x78, w1
    1654:	81 4f 50    	sub.b     w0, w1, [w15]
    1656:	03 00 32    	bra       Z, 0x165e <.L10>
    1658:	81 c5 b3    	mov.b     #0x58, w1
    165a:	81 4f 50    	sub.b     w0, w1, [w15]
    165c:	10 00 3a    	bra       NZ, 0x167e <.L9>

0000165e <.L10>:
    165e:	0c 86 e8    	inc2.w    w12, w12
    1660:	0e 00 37    	bra       0x167e <.L9>

00001662 <.L8>:
    1662:	ad 00 20    	mov.w     #0xa, w13
    1664:	00 c3 b3    	mov.b     #0x30, w0
    1666:	9c 4f 10    	subr.b    w0, [w12], [w15]
    1668:	0a 00 3a    	bra       NZ, 0x167e <.L9>
    166a:	1c 40 90    	mov.b     [w12+1], w0
    166c:	81 c7 b3    	mov.b     #0x78, w1
    166e:	81 4f 50    	sub.b     w0, w1, [w15]
    1670:	04 00 32    	bra       Z, 0x167a <.L11>
    1672:	8d 00 20    	mov.w     #0x8, w13
    1674:	81 c5 b3    	mov.b     #0x58, w1
    1676:	81 4f 50    	sub.b     w0, w1, [w15]
    1678:	02 00 3a    	bra       NZ, 0x167e <.L9>

0000167a <.L11>:
    167a:	0c 86 e8    	inc2.w    w12, w12
    167c:	0d 01 20    	mov.w     #0x10, w13

0000167e <.L9>:
    167e:	0c 00 78    	mov.w     w12, w0

00001680 <.L12>:
    1680:	80 00 78    	mov.w     w0, w1
    1682:	01 00 78    	mov.w     w1, w0
    1684:	02 c3 b3    	mov.b     #0x30, w2
    1686:	b0 4f 11    	subr.b    w2, [w0++], [w15]
    1688:	fb ff 32    	bra       Z, 0x1680 <.L12>
    168a:	e1 af 9f    	mov.w     w1, [w15-36]
    168c:	81 02 78    	mov.w     w1, w5
    168e:	95 b7 9f    	mov.w     w5, [w15-30]
    1690:	60 44 b8    	mul.uu    w8, #0x0, w8
    1692:	60 55 b8    	mul.uu    w10, #0x0, w10
    1694:	8c bf 9f    	mov.w     w12, [w15-16]
    1696:	1c 00 37    	bra       0x16d0 <.L13>

00001698 <.L14>:
    1698:	81 3a 21    	mov.w     #0x13a8, w1
    169a:	81 40 50    	sub.b     w0, w1, w1
    169c:	e1 df 9f    	mov.b     w1, [w15-34]
    169e:	61 6a b9    	mul.su    w13, #0x1, w4
    16a0:	61 2b b9    	mul.su    w5, #0x1, w6
    16a2:	08 00 be    	mov.d     w8, w0
    16a4:	0a 01 be    	mov.d     w10, w2
    16a6:	7c 05 07    	rcall     0x21a0 <___muldi3>
    16a8:	ef da 97    	mov.b     [w15-34], w5
    16aa:	05 02 fb    	se        w5, w4
    16ac:	cf a2 de    	asr.w     w4, #0xf, w5
    16ae:	61 2b b9    	mul.su    w5, #0x1, w6
    16b0:	c4 b7 9f    	mov.w     w4, [w15-24]
    16b2:	d5 b7 9f    	mov.w     w5, [w15-22]
    16b4:	e6 b7 9f    	mov.w     w6, [w15-20]
    16b6:	f7 b7 9f    	mov.w     w7, [w15-18]
    16b8:	a8 af 9f    	mov.w     w8, [w15-44]
    16ba:	b9 af 9f    	mov.w     w9, [w15-42]
    16bc:	ca af 9f    	mov.w     w10, [w15-40]
    16be:	db af 9f    	mov.w     w11, [w15-38]
    16c0:	4f b2 97    	mov.w     [w15-24], w4
    16c2:	df b2 97    	mov.w     [w15-22], w5
    16c4:	6f b3 97    	mov.w     [w15-20], w6
    16c6:	ff b3 97    	mov.w     [w15-18], w7
    16c8:	00 04 42    	add.w     w4, w0, w8
    16ca:	81 84 4a    	addc.w    w5, w1, w9
    16cc:	02 05 4b    	addc.w    w6, w2, w10
    16ce:	83 85 4b    	addc.w    w7, w3, w11

000016d0 <.L13>:
    16d0:	9f b2 97    	mov.w     [w15-30], w5
    16d2:	a5 b7 9f    	mov.w     w5, [w15-28]
    16d4:	05 03 78    	mov.w     w5, w6
    16d6:	36 00 fb    	se        [w6++], w0
    16d8:	96 b7 9f    	mov.w     w6, [w15-30]
    16da:	57 00 07    	rcall     0x178a <_tolower>
    16dc:	0d 01 78    	mov.w     w13, w2
    16de:	80 00 78    	mov.w     w0, w1
    16e0:	80 3a 21    	mov.w     #0x13a8, w0
    16e2:	30 02 07    	rcall     0x1b44 <_memchr>
    16e4:	00 00 e0    	cp0.w     w0
    16e6:	d8 ff 3a    	bra       NZ, 0x1698 <.L14>
    16e8:	0f be 97    	mov.w     [w15-16], w12
    16ea:	af b3 97    	mov.w     [w15-28], w7
    16ec:	87 0f 56    	sub.w     w12, w7, [w15]
    16ee:	07 00 3a    	bra       NZ, 0x16fe <.L15>
    16f0:	60 44 b8    	mul.uu    w8, #0x0, w8
    16f2:	60 55 b8    	mul.uu    w10, #0x0, w10
    16f4:	0e 00 e0    	cp0.w     w14
    16f6:	39 00 32    	bra       Z, 0x176a <.L7>
    16f8:	0f b6 97    	mov.w     [w15-32], w12
    16fa:	0c 0f 78    	mov.w     w12, [w14]
    16fc:	36 00 37    	bra       0x176a <.L7>

000016fe <.L15>:
    16fe:	2f b0 97    	mov.w     [w15-28], w0
    1700:	6f a9 97    	mov.w     [w15-36], w2
    1702:	82 00 50    	sub.w     w0, w2, w1
    1704:	d0 3c 21    	mov.w     #0x13cd, w0
    1706:	60 c0 7e    	mov.b     [w0+w13], w0
    1708:	00 00 fb    	se        w0, w0
    170a:	00 80 50    	sub.w     w1, w0, w0
    170c:	20 00 33    	bra       N, 0x174e <.L16>
    170e:	19 00 3a    	bra       NZ, 0x1742 <.L17>
    1710:	6f da 97    	mov.b     [w15-34], w4
    1712:	04 00 fb    	se        w4, w0
    1714:	cf 80 de    	asr.w     w0, #0xf, w1
    1716:	61 09 b9    	mul.su    w1, #0x1, w2
    1718:	00 00 54    	sub.w     w8, w0, w0
    171a:	81 80 5c    	subb.w    w9, w1, w1
    171c:	02 01 5d    	subb.w    w10, w2, w2
    171e:	83 81 5d    	subb.w    w11, w3, w3
    1720:	00 40 e1    	cp.w      w8, w0
    1722:	01 c8 e1    	cpb.w     w9, w1
    1724:	02 d0 e1    	cpb.w     w10, w2
    1726:	03 d8 e1    	cpb.w     w11, w3
    1728:	0c 00 39    	bra       NC, 0x1742 <.L17>
    172a:	61 6a b9    	mul.su    w13, #0x1, w4
    172c:	61 2b b9    	mul.su    w5, #0x1, w6
    172e:	cf 04 07    	rcall     0x20ce <___udivdi3>
    1730:	2f aa 97    	mov.w     [w15-44], w4
    1732:	bf aa 97    	mov.w     [w15-42], w5
    1734:	4f ab 97    	mov.w     [w15-40], w6
    1736:	df ab 97    	mov.w     [w15-38], w7
    1738:	04 00 e1    	cp.w      w0, w4
    173a:	05 88 e1    	cpb.w     w1, w5
    173c:	06 90 e1    	cpb.w     w2, w6
    173e:	07 98 e1    	cpb.w     w3, w7
    1740:	06 00 32    	bra       Z, 0x174e <.L16>

00001742 <.L17>:
    1742:	20 02 20    	mov.w     #0x22, w0
    1744:	90 9f 88    	mov.w     w0, 0x13f2
    1746:	f8 ff 2f    	mov.w     #0xffff, w8
    1748:	f9 ff 2f    	mov.w     #0xffff, w9
    174a:	08 05 be    	mov.d     w8, w10
    174c:	0a 00 37    	bra       0x1762 <.L18>

0000174e <.L16>:
    174e:	d0 c2 b3    	mov.b     #0x2d, w0
    1750:	ef e2 97    	mov.b     [w15-26], w5
    1752:	80 cf 52    	sub.b     w5, w0, [w15]
    1754:	06 00 3a    	bra       NZ, 0x1762 <.L18>
    1756:	60 00 b8    	mul.uu    w0, #0x0, w0
    1758:	60 11 b8    	mul.uu    w2, #0x0, w2
    175a:	08 04 50    	sub.w     w0, w8, w8
    175c:	89 84 58    	subb.w    w1, w9, w9
    175e:	0a 05 59    	subb.w    w2, w10, w10
    1760:	8b 85 59    	subb.w    w3, w11, w11

00001762 <.L18>:
    1762:	0e 00 e0    	cp0.w     w14
    1764:	02 00 32    	bra       Z, 0x176a <.L7>
    1766:	2f b3 97    	mov.w     [w15-28], w6
    1768:	06 0f 78    	mov.w     w6, [w14]

0000176a <.L7>:
    176a:	08 00 be    	mov.d     w8, w0
    176c:	0a 01 be    	mov.d     w10, w2
    176e:	4f 07 78    	mov.w     [--w15], w14
    1770:	4f 06 be    	mov.d     [--w15], w12
    1772:	4f 05 be    	mov.d     [--w15], w10
    1774:	4f 04 be    	mov.d     [--w15], w8
    1776:	0f 02 b1    	sub.w     #0x20, w15
    1778:	00 00 06    	return    

0000177a <_isspace>:
    177a:	69 00 e1    	cp.w      w0, #0x9
    177c:	04 00 35    	bra       LT, 0x1786 <nomatch>
    177e:	6d 00 e1    	cp.w      w0, #0xd
    1780:	03 00 34    	bra       LE, 0x1788 <match>
    1782:	00 02 b1    	sub.w     #0x20, w0
    1784:	01 00 32    	bra       Z, 0x1788 <match>

00001786 <nomatch>:
    1786:	00 00 05    	retlw.w   #0x0, w0

00001788 <match>:
    1788:	10 00 05    	retlw.w   #0x1, w0

0000178a <_tolower>:
    178a:	80 00 78    	mov.w     w0, w1
    178c:	11 04 b1    	sub.w     #0x41, w1
    178e:	03 00 35    	bra       LT, 0x1796 <nomatch>
    1790:	91 01 b1    	sub.w     #0x19, w1
    1792:	01 00 3c    	bra       GT, 0x1796 <nomatch>

00001794 <match>:
    1794:	00 50 a0    	bset.w    w0, #0x5

00001796 <nomatch>:
    1796:	00 00 06    	return    

00001798 <__Geterrno>:
    1798:	a0 9f 80    	mov.w     0x13f4, w0
    179a:	00 00 e0    	cp0.w     w0
    179c:	01 00 32    	bra       Z, 0x17a0 <.L2>
    179e:	00 00 01    	call      w0

000017a0 <.L2>:
    17a0:	20 3f 21    	mov.w     #0x13f2, w0
    17a2:	00 00 06    	return    

000017a4 <_prout>:
    17a4:	88 1f 78    	mov.w     w8, [w15++]
    17a6:	02 04 78    	mov.w     w2, w8
    17a8:	08 01 78    	mov.w     w8, w2
    17aa:	d6 01 07    	rcall     0x1b58 <_memcpy>
    17ac:	08 00 40    	add.w     w0, w8, w0
    17ae:	4f 04 78    	mov.w     [--w15], w8
    17b0:	00 00 06    	return    

000017b2 <__sprintf_cdnopuxX>:
    17b2:	00 00 fa    	lnk       #0x0
    17b4:	88 1f 78    	mov.w     w8, [w15++]
    17b6:	00 04 78    	mov.w     w0, w8
    17b8:	ea 81 57    	sub.w     w15, #0xa, w3
    17ba:	3f b9 97    	mov.w     [w15-10], w2
    17bc:	88 00 78    	mov.w     w8, w1
    17be:	40 7a 21    	mov.w     #0x17a4, w0
    17c0:	07 00 07    	rcall     0x17d0 <___Printf_cdnopuxX>
    17c2:	00 00 e0    	cp0.w     w0
    17c4:	02 00 35    	bra       LT, 0x17ca <.L3>
    17c6:	80 40 eb    	clr.b     w1
    17c8:	01 74 78    	mov.b     w1, [w8+w0]

000017ca <.L3>:
    17ca:	4f 04 78    	mov.w     [--w15], w8
    17cc:	00 80 fa    	ulnk      
    17ce:	00 00 06    	return    

000017d0 <___Printf_cdnopuxX>:
    17d0:	62 00 fa    	lnk       #0x62
    17d2:	88 9f be    	mov.d     w8, [w15++]
    17d4:	8a 1f 78    	mov.w     w10, [w15++]
    17d6:	00 05 78    	mov.w     w0, w10
    17d8:	81 04 78    	mov.w     w1, w9
    17da:	02 04 78    	mov.w     w2, w8
    17dc:	83 00 78    	mov.w     w3, w1
    17de:	80 f9 2f    	mov.w     #0xff98, w0
    17e0:	0f 00 40    	add.w     w0, w15, w0
    17e2:	b8 03 07    	rcall     0x1f54 <__Vacopy>
    17e4:	9a 97 9f    	mov.w     w10, [w15-94]
    17e6:	a9 97 9f    	mov.w     w9, [w15-92]
    17e8:	00 00 eb    	clr.w     w0
    17ea:	b0 9f 9f    	mov.w     w0, [w15-74]

000017ec <.L31>:
    17ec:	18 85 fb    	ze        [w8], w10
    17ee:	8a 04 fb    	se        w10, w9
    17f0:	0a 05 ea    	neg.w     w10, w10
    17f2:	4f 55 de    	lsr.w     w10, #0xf, w10
    17f4:	50 02 20    	mov.w     #0x25, w0
    17f6:	80 8f 54    	sub.w     w9, w0, [w15]
    17f8:	0d 00 32    	bra       Z, 0x1814 <.L3>
    17fa:	e1 0f 55    	sub.w     w10, #0x1, [w15]
    17fc:	0b 00 3a    	bra       NZ, 0x1814 <.L3>
    17fe:	0a 01 78    	mov.w     w10, w2
    1800:	88 00 78    	mov.w     w8, w1
    1802:	2f 90 97    	mov.w     [w15-92], w0
    1804:	9f 91 97    	mov.w     [w15-94], w3
    1806:	03 00 01    	call      w3
    1808:	a0 97 9f    	mov.w     w0, [w15-92]
    180a:	00 00 e0    	cp0.w     w0
    180c:	8e 00 32    	bra       Z, 0x192a <.L27>
    180e:	3f 98 97    	mov.w     [w15-74], w0
    1810:	00 00 e8    	inc.w     w0, w0
    1812:	b0 9f 9f    	mov.w     w0, [w15-74]

00001814 <.L3>:
    1814:	0a 04 44    	add.w     w8, w10, w8
    1816:	50 02 20    	mov.w     #0x25, w0
    1818:	80 8f 54    	sub.w     w9, w0, [w15]
    181a:	04 00 32    	bra       Z, 0x1824 <.L5>
    181c:	09 00 e0    	cp0.w     w9
    181e:	e6 ff 3a    	bra       NZ, 0x17ec <.L31>
    1820:	3f 98 97    	mov.w     [w15-74], w0
    1822:	84 00 37    	bra       0x192c <.L4>

00001824 <.L5>:
    1824:	00 00 eb    	clr.w     w0
    1826:	90 9f 9f    	mov.w     w0, [w15-78]
    1828:	80 9f 9f    	mov.w     w0, [w15-80]
    182a:	f0 97 9f    	mov.w     w0, [w15-82]
    182c:	e0 97 9f    	mov.w     w0, [w15-84]
    182e:	d0 97 9f    	mov.w     w0, [w15-86]
    1830:	c0 97 9f    	mov.w     w0, [w15-88]
    1832:	07 00 37    	bra       0x1842 <.L34>

00001834 <.L8>:
    1834:	01 5b 21    	mov.w     #0x15b0, w1
    1836:	01 00 50    	sub.w     w0, w1, w0
    1838:	00 00 40    	add.w     w0, w0, w0
    183a:	41 5a 21    	mov.w     #0x15a4, w1
    183c:	61 00 78    	mov.w     [w1+w0], w0
    183e:	df 98 97    	mov.w     [w15-70], w1
    1840:	01 00 70    	ior.w     w0, w1, w0

00001842 <.L34>:
    1842:	d0 9f 9f    	mov.w     w0, [w15-70]
    1844:	88 04 78    	mov.w     w8, w9
    1846:	09 04 78    	mov.w     w9, w8
    1848:	38 45 78    	mov.b     [w8++], w10
    184a:	8a 00 fb    	se        w10, w1
    184c:	00 5b 21    	mov.w     #0x15b0, w0
    184e:	8b 01 07    	rcall     0x1b66 <_strchr>
    1850:	00 00 e0    	cp0.w     w0
    1852:	f0 ff 3a    	bra       NZ, 0x1834 <.L8>
    1854:	a1 c2 b3    	mov.b     #0x2a, w1
    1856:	81 4f 55    	sub.b     w10, w1, [w15]
    1858:	0e 00 3a    	bra       NZ, 0x1876 <.L9>
    185a:	cf 88 97    	mov.w     [w15-104], w1
    185c:	01 80 e9    	dec2.w    w1, w0
    185e:	c0 8f 9f    	mov.w     w0, [w15-104]
    1860:	10 00 78    	mov.w     [w0], w0
    1862:	c0 9f 9f    	mov.w     w0, [w15-72]
    1864:	00 00 e0    	cp0.w     w0
    1866:	05 00 3d    	bra       GE, 0x1872 <.L10>
    1868:	00 00 ea    	neg.w     w0, w0
    186a:	c0 9f 9f    	mov.w     w0, [w15-72]
    186c:	5f 98 97    	mov.w     [w15-70], w0
    186e:	00 20 a0    	bset.w    w0, #0x2
    1870:	d0 9f 9f    	mov.w     w0, [w15-70]

00001872 <.L10>:
    1872:	09 04 e8    	inc.w     w9, w8
    1874:	0f 00 37    	bra       0x1894 <.L11>

00001876 <.L9>:
    1876:	c0 9f 9f    	mov.w     w0, [w15-72]
    1878:	00 00 eb    	clr.w     w0
    187a:	05 00 37    	bra       0x1886 <.L32>

0000187c <.L14>:
    187c:	f2 ff 27    	mov.w     #0x7fff, w2
    187e:	82 0f 50    	sub.w     w0, w2, [w15]
    1880:	02 00 32    	bra       Z, 0x1886 <.L32>
    1882:	6a 01 b9    	mul.su    w0, #0xa, w2
    1884:	02 80 40    	add.w     w1, w2, w0

00001886 <.L32>:
    1886:	09 04 78    	mov.w     w9, w8
    1888:	88 04 78    	mov.w     w8, w9
    188a:	b9 00 fb    	se        [w9++], w1
    188c:	01 03 b1    	sub.w     #0x30, w1
    188e:	e9 8f 50    	sub.w     w1, #0x9, [w15]
    1890:	f5 ff 36    	bra       LEU, 0x187c <.L14>
    1892:	c0 9f 9f    	mov.w     w0, [w15-72]

00001894 <.L11>:
    1894:	e0 c2 b3    	mov.b     #0x2e, w0
    1896:	98 4f 10    	subr.b    w0, [w8], [w15]
    1898:	02 00 32    	bra       Z, 0x189e <.L15>
    189a:	00 80 eb    	setm.w    w0
    189c:	19 00 37    	bra       0x18d0 <.L35>

0000189e <.L15>:
    189e:	a0 c2 b3    	mov.b     #0x2a, w0
    18a0:	d8 4f 10    	subr.b    w0, [++w8], [w15]
    18a2:	07 00 3a    	bra       NZ, 0x18b2 <.L17>
    18a4:	cf 88 97    	mov.w     [w15-104], w1
    18a6:	01 80 e9    	dec2.w    w1, w0
    18a8:	c0 8f 9f    	mov.w     w0, [w15-104]
    18aa:	10 00 78    	mov.w     [w0], w0
    18ac:	a0 9f 9f    	mov.w     w0, [w15-76]
    18ae:	08 04 e8    	inc.w     w8, w8
    18b0:	10 00 37    	bra       0x18d2 <.L16>

000018b2 <.L17>:
    18b2:	00 00 eb    	clr.w     w0
    18b4:	a0 9f 9f    	mov.w     w0, [w15-76]
    18b6:	88 00 78    	mov.w     w8, w1
    18b8:	05 00 37    	bra       0x18c4 <.L33>

000018ba <.L20>:
    18ba:	f3 ff 27    	mov.w     #0x7fff, w3
    18bc:	83 0f 50    	sub.w     w0, w3, [w15]
    18be:	02 00 32    	bra       Z, 0x18c4 <.L33>
    18c0:	6a 02 b9    	mul.su    w0, #0xa, w4
    18c2:	04 00 41    	add.w     w2, w4, w0

000018c4 <.L33>:
    18c4:	01 04 78    	mov.w     w1, w8
    18c6:	88 00 78    	mov.w     w8, w1
    18c8:	31 01 fb    	se        [w1++], w2
    18ca:	02 03 b1    	sub.w     #0x30, w2
    18cc:	e9 0f 51    	sub.w     w2, #0x9, [w15]
    18ce:	f5 ff 36    	bra       LEU, 0x18ba <.L20>

000018d0 <.L35>:
    18d0:	a0 9f 9f    	mov.w     w0, [w15-76]

000018d2 <.L16>:
    18d2:	98 44 78    	mov.b     [w8], w9
    18d4:	89 00 fb    	se        w9, w1
    18d6:	c0 59 21    	mov.w     #0x159c, w0
    18d8:	46 01 07    	rcall     0x1b66 <_strchr>
    18da:	00 00 e0    	cp0.w     w0
    18dc:	02 00 32    	bra       Z, 0x18e2 <.L25>
    18de:	08 04 e8    	inc.w     w8, w8
    18e0:	01 00 37    	bra       0x18e4 <.L21>

000018e2 <.L25>:
    18e2:	80 44 eb    	clr.b     w9

000018e4 <.L21>:
    18e4:	c9 7f 9f    	mov.b     w9, [w15-68]
    18e6:	80 c6 b3    	mov.b     #0x68, w0
    18e8:	80 cf 54    	sub.b     w9, w0, [w15]
    18ea:	04 00 3a    	bra       NZ, 0x18f4 <.L22>
    18ec:	98 cf 14    	subr.b    w9, [w8], [w15]
    18ee:	0a 00 3a    	bra       NZ, 0x1904 <.L23>
    18f0:	66 40 50    	sub.b     w0, #0x6, w0
    18f2:	06 00 37    	bra       0x1900 <.L36>

000018f4 <.L22>:
    18f4:	c0 c6 b3    	mov.b     #0x6c, w0
    18f6:	80 cf 54    	sub.b     w9, w0, [w15]
    18f8:	05 00 3a    	bra       NZ, 0x1904 <.L23>
    18fa:	98 cf 14    	subr.b    w9, [w8], [w15]
    18fc:	03 00 3a    	bra       NZ, 0x1904 <.L23>
    18fe:	65 40 40    	add.b     w0, #0x5, w0

00001900 <.L36>:
    1900:	c0 7f 9f    	mov.b     w0, [w15-68]
    1902:	08 04 e8    	inc.w     w8, w8

00001904 <.L23>:
    1904:	18 01 fb    	se        [w8], w2
    1906:	e3 fb 2f    	mov.w     #0xffbe, w3
    1908:	8f 81 41    	add.w     w3, w15, w3
    190a:	81 f9 2f    	mov.w     #0xff98, w1
    190c:	8f 80 40    	add.w     w1, w15, w1
    190e:	a0 f9 2f    	mov.w     #0xff9a, w0
    1910:	0f 00 40    	add.w     w0, w15, w0
    1912:	10 00 07    	rcall     0x1934 <___Putfld_cdnopuxX>
    1914:	00 00 e0    	cp0.w     w0
    1916:	09 00 3a    	bra       NZ, 0x192a <.L27>
    1918:	e1 fb 2f    	mov.w     #0xffbe, w1
    191a:	8f 80 40    	add.w     w1, w15, w1
    191c:	a0 f9 2f    	mov.w     #0xff9a, w0
    191e:	0f 00 40    	add.w     w0, w15, w0
    1920:	5d 02 07    	rcall     0x1ddc <__Puttxt>
    1922:	00 00 e0    	cp0.w     w0
    1924:	02 00 35    	bra       LT, 0x192a <.L27>
    1926:	08 04 e8    	inc.w     w8, w8
    1928:	61 ff 37    	bra       0x17ec <.L31>

0000192a <.L27>:
    192a:	00 80 eb    	setm.w    w0

0000192c <.L4>:
    192c:	4f 05 78    	mov.w     [--w15], w10
    192e:	4f 04 be    	mov.d     [--w15], w8
    1930:	00 80 fa    	ulnk      
    1932:	00 00 06    	return    

00001934 <___Putfld_cdnopuxX>:
    1934:	88 1f 78    	mov.w     w8, [w15++]
    1936:	e4 c6 b3    	mov.b     #0x6e, w4
    1938:	84 4f 51    	sub.b     w2, w4, [w15]
    193a:	b6 00 32    	bra       Z, 0x1aa8 <.L7>
    193c:	10 00 3c    	bra       GT, 0x195e <.L9>
    193e:	6b 42 52    	sub.b     w4, #0xb, w4
    1940:	84 4f 51    	sub.b     w2, w4, [w15]
    1942:	18 00 32    	bra       Z, 0x1974 <.L5>
    1944:	05 00 3c    	bra       GT, 0x1950 <.L10>
    1946:	54 c2 b3    	mov.b     #0x25, w4
    1948:	84 4f 51    	sub.b     w2, w4, [w15]
    194a:	ee 00 32    	bra       Z, 0x1b28 <.L3>
    194c:	84 c5 b3    	mov.b     #0x58, w4
    194e:	0f 00 37    	bra       0x196e <.L47>

00001950 <.L10>:
    1950:	44 c6 b3    	mov.b     #0x64, w4
    1952:	84 4f 51    	sub.b     w2, w4, [w15]
    1954:	14 00 32    	bra       Z, 0x197e <.L6>
    1956:	65 42 42    	add.b     w4, #0x5, w4
    1958:	84 4f 51    	sub.b     w2, w4, [w15]
    195a:	e9 00 3a    	bra       NZ, 0x1b2e <.L2>
    195c:	10 00 37    	bra       0x197e <.L6>

0000195e <.L9>:
    195e:	04 c7 b3    	mov.b     #0x70, w4
    1960:	84 4f 51    	sub.b     w2, w4, [w15]
    1962:	d5 00 32    	bra       Z, 0x1b0e <.L8>
    1964:	53 00 35    	bra       LT, 0x1a0c <.L4>
    1966:	65 42 42    	add.b     w4, #0x5, w4
    1968:	84 4f 51    	sub.b     w2, w4, [w15]
    196a:	50 00 32    	bra       Z, 0x1a0c <.L4>
    196c:	63 42 42    	add.b     w4, #0x3, w4

0000196e <.L47>:
    196e:	84 4f 51    	sub.b     w2, w4, [w15]
    1970:	de 00 3a    	bra       NZ, 0x1b2e <.L2>
    1972:	4c 00 37    	bra       0x1a0c <.L4>

00001974 <.L5>:
    1974:	11 81 e9    	dec2.w    [w1], w2
    1976:	82 08 78    	mov.w     w2, [w1]
    1978:	f0 00 90    	mov.w     [w0+14], w1
    197a:	12 41 78    	mov.b     [w2], w2
    197c:	d6 00 37    	bra       0x1b2a <.L53>

0000197e <.L6>:
    197e:	20 62 90    	mov.b     [w0+34], w4
    1980:	c5 c6 b3    	mov.b     #0x6c, w5
    1982:	85 4f 52    	sub.b     w4, w5, [w15]
    1984:	07 00 3a    	bra       NZ, 0x1994 <.L12>
    1986:	91 02 78    	mov.w     [w1], w5
    1988:	64 82 52    	sub.w     w5, #0x4, w4
    198a:	84 08 78    	mov.w     w4, [w1]
    198c:	14 02 be    	mov.d     [w4], w4
    198e:	4f ab de    	asr.w     w5, #0xf, w6
    1990:	86 03 78    	mov.w     w6, w7
    1992:	11 00 37    	bra       0x19b6 <.L13>

00001994 <.L12>:
    1994:	15 c7 b3    	mov.b     #0x71, w5
    1996:	85 4f 52    	sub.b     w4, w5, [w15]
    1998:	03 00 32    	bra       Z, 0x19a0 <.L43>
    199a:	a5 c6 b3    	mov.b     #0x6a, w5
    199c:	85 4f 52    	sub.b     w4, w5, [w15]
    199e:	06 00 3a    	bra       NZ, 0x19ac <.L15>

000019a0 <.L43>:
    19a0:	91 02 78    	mov.w     [w1], w5
    19a2:	68 82 52    	sub.w     w5, #0x8, w4
    19a4:	84 08 78    	mov.w     w4, [w1]
    19a6:	54 03 be    	mov.d     [++w4], w6
    19a8:	44 02 be    	mov.d     [--w4], w4
    19aa:	05 00 37    	bra       0x19b6 <.L13>

000019ac <.L15>:
    19ac:	11 82 e9    	dec2.w    [w1], w4
    19ae:	84 08 78    	mov.w     w4, [w1]
    19b0:	14 02 78    	mov.w     [w4], w4
    19b2:	cf a2 de    	asr.w     w4, #0xf, w5
    19b4:	61 2b b9    	mul.su    w5, #0x1, w6

000019b6 <.L13>:
    19b6:	04 98 be    	mov.d     w4, [w0++]
    19b8:	06 90 be    	mov.d     w6, [w0--]
    19ba:	a0 60 90    	mov.b     [w0+34], w1
    19bc:	88 c6 b3    	mov.b     #0x68, w8
    19be:	88 cf 50    	sub.b     w1, w8, [w15]
    19c0:	0d 00 32    	bra       Z, 0x19dc <.L19>
    19c2:	28 c6 b3    	mov.b     #0x62, w8
    19c4:	88 cf 50    	sub.b     w1, w8, [w15]
    19c6:	04 00 3a    	bra       NZ, 0x19d0 <.L18>
    19c8:	04 02 fb    	se        w4, w4
    19ca:	cf a2 de    	asr.w     w4, #0xf, w5
    19cc:	61 2b b9    	mul.su    w5, #0x1, w6
    19ce:	08 00 37    	bra       0x19e0 <.L44>

000019d0 <.L18>:
    19d0:	48 c7 b3    	mov.b     #0x74, w8
    19d2:	88 cf 50    	sub.b     w1, w8, [w15]
    19d4:	03 00 32    	bra       Z, 0x19dc <.L19>
    19d6:	66 44 44    	add.b     w8, #0x6, w8
    19d8:	88 cf 50    	sub.b     w1, w8, [w15]
    19da:	04 00 3a    	bra       NZ, 0x19e4 <.L17>

000019dc <.L19>:
    19dc:	cf a2 de    	asr.w     w4, #0xf, w5
    19de:	61 2b b9    	mul.su    w5, #0x1, w6

000019e0 <.L44>:
    19e0:	04 98 be    	mov.d     w4, [w0++]
    19e2:	06 90 be    	mov.d     w6, [w0--]

000019e4 <.L17>:
    19e4:	30 02 be    	mov.d     [w0++], w4
    19e6:	20 03 be    	mov.d     [w0--], w6
    19e8:	f0 00 90    	mov.w     [w0+14], w1
    19ea:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    19ec:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    19ee:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    19f0:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    19f2:	02 00 3d    	bra       GE, 0x19f8 <.L20>
    19f4:	d4 c2 b3    	mov.b     #0x2d, w4
    19f6:	08 00 37    	bra       0x1a08 <.L45>

000019f8 <.L20>:
    19f8:	00 12 90    	mov.w     [w0+32], w4
    19fa:	04 18 a3    	btst.z    w4, #0x1
    19fc:	02 00 32    	bra       Z, 0x1a02 <.L22>
    19fe:	b4 c2 b3    	mov.b     #0x2b, w4
    1a00:	03 00 37    	bra       0x1a08 <.L45>

00001a02 <.L22>:
    1a02:	04 08 a3    	btst.z    w4, #0x0
    1a04:	4c 00 32    	bra       Z, 0x1a9e <.L31>
    1a06:	04 c2 b3    	mov.b     #0x20, w4

00001a08 <.L45>:
    1a08:	84 f1 78    	mov.b     w4, [w3+w1]
    1a0a:	47 00 37    	bra       0x1a9a <.L54>

00001a0c <.L4>:
    1a0c:	20 62 90    	mov.b     [w0+34], w4
    1a0e:	c5 c6 b3    	mov.b     #0x6c, w5
    1a10:	85 4f 52    	sub.b     w4, w5, [w15]
    1a12:	06 00 3a    	bra       NZ, 0x1a20 <.L23>
    1a14:	91 02 78    	mov.w     [w1], w5
    1a16:	64 82 52    	sub.w     w5, #0x4, w4
    1a18:	84 08 78    	mov.w     w4, [w1]
    1a1a:	14 02 be    	mov.d     [w4], w4
    1a1c:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a1e:	11 00 37    	bra       0x1a42 <.L24>

00001a20 <.L23>:
    1a20:	15 c7 b3    	mov.b     #0x71, w5
    1a22:	85 4f 52    	sub.b     w4, w5, [w15]
    1a24:	03 00 32    	bra       Z, 0x1a2c <.L48>
    1a26:	a5 c6 b3    	mov.b     #0x6a, w5
    1a28:	85 4f 52    	sub.b     w4, w5, [w15]
    1a2a:	06 00 3a    	bra       NZ, 0x1a38 <.L26>

00001a2c <.L48>:
    1a2c:	91 02 78    	mov.w     [w1], w5
    1a2e:	68 82 52    	sub.w     w5, #0x8, w4
    1a30:	84 08 78    	mov.w     w4, [w1]
    1a32:	54 03 be    	mov.d     [++w4], w6
    1a34:	44 02 be    	mov.d     [--w4], w4
    1a36:	05 00 37    	bra       0x1a42 <.L24>

00001a38 <.L26>:
    1a38:	11 82 e9    	dec2.w    [w1], w4
    1a3a:	84 08 78    	mov.w     w4, [w1]
    1a3c:	14 02 78    	mov.w     [w4], w4
    1a3e:	80 02 eb    	clr.w     w5
    1a40:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a42 <.L24>:
    1a42:	04 98 be    	mov.d     w4, [w0++]
    1a44:	06 90 be    	mov.d     w6, [w0--]
    1a46:	a0 60 90    	mov.b     [w0+34], w1
    1a48:	88 c6 b3    	mov.b     #0x68, w8
    1a4a:	88 cf 50    	sub.b     w1, w8, [w15]
    1a4c:	0d 00 32    	bra       Z, 0x1a68 <.L30>
    1a4e:	28 c6 b3    	mov.b     #0x62, w8
    1a50:	88 cf 50    	sub.b     w1, w8, [w15]
    1a52:	04 00 3a    	bra       NZ, 0x1a5c <.L29>
    1a54:	04 82 fb    	ze        w4, w4
    1a56:	80 02 eb    	clr.w     w5
    1a58:	60 33 b8    	mul.uu    w6, #0x0, w6
    1a5a:	08 00 37    	bra       0x1a6c <.L49>

00001a5c <.L29>:
    1a5c:	48 c7 b3    	mov.b     #0x74, w8
    1a5e:	88 cf 50    	sub.b     w1, w8, [w15]
    1a60:	03 00 32    	bra       Z, 0x1a68 <.L30>
    1a62:	66 44 44    	add.b     w8, #0x6, w8
    1a64:	88 cf 50    	sub.b     w1, w8, [w15]
    1a66:	04 00 3a    	bra       NZ, 0x1a70 <.L28>

00001a68 <.L30>:
    1a68:	80 02 eb    	clr.w     w5
    1a6a:	60 33 b8    	mul.uu    w6, #0x0, w6

00001a6c <.L49>:
    1a6c:	04 98 be    	mov.d     w4, [w0++]
    1a6e:	06 90 be    	mov.d     w6, [w0--]

00001a70 <.L28>:
    1a70:	80 10 90    	mov.w     [w0+32], w1
    1a72:	01 38 a3    	btst.z    w1, #0x3
    1a74:	14 00 32    	bra       Z, 0x1a9e <.L31>
    1a76:	30 02 be    	mov.d     [w0++], w4
    1a78:	20 03 be    	mov.d     [w0--], w6
    1a7a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a7c:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1a7e:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1a80:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1a82:	0d 00 32    	bra       Z, 0x1a9e <.L31>
    1a84:	81 c7 b3    	mov.b     #0x78, w1
    1a86:	81 4f 51    	sub.b     w2, w1, [w15]
    1a88:	03 00 32    	bra       Z, 0x1a90 <.L32>
    1a8a:	81 c5 b3    	mov.b     #0x58, w1
    1a8c:	81 4f 51    	sub.b     w2, w1, [w15]
    1a8e:	07 00 3a    	bra       NZ, 0x1a9e <.L31>

00001a90 <.L32>:
    1a90:	f0 00 90    	mov.w     [w0+14], w1
    1a92:	04 c3 b3    	mov.b     #0x30, w4
    1a94:	84 f1 78    	mov.b     w4, [w3+w1]
    1a96:	81 00 e8    	inc.w     w1, w1
    1a98:	82 f1 78    	mov.b     w2, [w3+w1]

00001a9a <.L54>:
    1a9a:	81 00 e8    	inc.w     w1, w1
    1a9c:	71 00 98    	mov.w     w1, [w0+14]

00001a9e <.L31>:
    1a9e:	f0 00 90    	mov.w     [w0+14], w1
    1aa0:	81 81 41    	add.w     w3, w1, w3
    1aa2:	63 00 98    	mov.w     w3, [w0+12]
    1aa4:	82 40 78    	mov.b     w2, w1
    1aa6:	3e 00 37    	bra       0x1b24 <.L52>

00001aa8 <.L7>:
    1aa8:	a0 61 90    	mov.b     [w0+34], w3
    1aaa:	c4 c6 b3    	mov.b     #0x6c, w4
    1aac:	11 81 e9    	dec2.w    [w1], w2
    1aae:	84 cf 51    	sub.b     w3, w4, [w15]
    1ab0:	22 00 32    	bra       Z, 0x1af6 <.L37>
    1ab2:	0a 00 3c    	bra       GT, 0x1ac8 <.L41>
    1ab4:	64 42 52    	sub.b     w4, #0x4, w4
    1ab6:	84 cf 51    	sub.b     w3, w4, [w15]
    1ab8:	25 00 32    	bra       Z, 0x1b04 <.L51>
    1aba:	04 c2 e8    	inc2.b    w4, w4
    1abc:	84 cf 51    	sub.b     w3, w4, [w15]
    1abe:	13 00 32    	bra       Z, 0x1ae6 <.L36>
    1ac0:	68 42 52    	sub.b     w4, #0x8, w4
    1ac2:	84 cf 51    	sub.b     w3, w4, [w15]
    1ac4:	1e 00 3a    	bra       NZ, 0x1b02 <.L33>
    1ac6:	0a 00 37    	bra       0x1adc <.L55>

00001ac8 <.L41>:
    1ac8:	44 c7 b3    	mov.b     #0x74, w4
    1aca:	84 cf 51    	sub.b     w3, w4, [w15]
    1acc:	1b 00 32    	bra       Z, 0x1b04 <.L51>
    1ace:	66 42 42    	add.b     w4, #0x6, w4
    1ad0:	84 cf 51    	sub.b     w3, w4, [w15]
    1ad2:	18 00 32    	bra       Z, 0x1b04 <.L51>
    1ad4:	69 42 52    	sub.b     w4, #0x9, w4
    1ad6:	84 cf 51    	sub.b     w3, w4, [w15]
    1ad8:	14 00 3a    	bra       NZ, 0x1b02 <.L33>
    1ada:	05 00 37    	bra       0x1ae6 <.L36>

00001adc <.L55>:
    1adc:	82 08 78    	mov.w     w2, [w1]
    1ade:	92 00 78    	mov.w     [w2], w1
    1ae0:	40 58 90    	mov.b     [w0+28], w0
    1ae2:	80 48 78    	mov.b     w0, [w1]
    1ae4:	2c 00 37    	bra       0x1b3e <.L11>

00001ae6 <.L36>:
    1ae6:	82 08 78    	mov.w     w2, [w1]
    1ae8:	92 00 78    	mov.w     [w2], w1
    1aea:	60 0a 90    	mov.w     [w0+28], w4
    1aec:	cf a2 de    	asr.w     w4, #0xf, w5
    1aee:	61 2b b9    	mul.su    w5, #0x1, w6
    1af0:	84 98 be    	mov.d     w4, [w1++]
    1af2:	86 90 be    	mov.d     w6, [w1--]
    1af4:	24 00 37    	bra       0x1b3e <.L11>

00001af6 <.L37>:
    1af6:	82 08 78    	mov.w     w2, [w1]
    1af8:	92 00 78    	mov.w     [w2], w1
    1afa:	60 09 90    	mov.w     [w0+28], w2
    1afc:	cf 91 de    	asr.w     w2, #0xf, w3
    1afe:	82 88 be    	mov.d     w2, [w1]
    1b00:	1e 00 37    	bra       0x1b3e <.L11>

00001b02 <.L33>:
    1b02:	11 81 e9    	dec2.w    [w1], w2

00001b04 <.L51>:
    1b04:	82 08 78    	mov.w     w2, [w1]
    1b06:	92 00 78    	mov.w     [w2], w1
    1b08:	60 08 90    	mov.w     [w0+28], w0
    1b0a:	80 08 78    	mov.w     w0, [w1]
    1b0c:	18 00 37    	bra       0x1b3e <.L11>

00001b0e <.L8>:
    1b0e:	11 81 e9    	dec2.w    [w1], w2
    1b10:	82 08 78    	mov.w     w2, [w1]
    1b12:	12 02 78    	mov.w     [w2], w4
    1b14:	cf a2 de    	asr.w     w4, #0xf, w5
    1b16:	61 2b b9    	mul.su    w5, #0x1, w6
    1b18:	04 98 be    	mov.d     w4, [w0++]
    1b1a:	06 90 be    	mov.d     w6, [w0--]
    1b1c:	f0 00 90    	mov.w     [w0+14], w1
    1b1e:	81 81 41    	add.w     w3, w1, w3
    1b20:	63 00 98    	mov.w     w3, [w0+12]
    1b22:	81 c7 b3    	mov.b     #0x78, w1

00001b24 <.L52>:
    1b24:	2c 00 07    	rcall     0x1b7e <__Litob>
    1b26:	0b 00 37    	bra       0x1b3e <.L11>

00001b28 <.L3>:
    1b28:	f0 00 90    	mov.w     [w0+14], w1

00001b2a <.L53>:
    1b2a:	82 f1 78    	mov.b     w2, [w3+w1]
    1b2c:	06 00 37    	bra       0x1b3a <.L50>

00001b2e <.L2>:
    1b2e:	f0 00 90    	mov.w     [w0+14], w1
    1b30:	81 81 41    	add.w     w3, w1, w3
    1b32:	02 04 e0    	cp0.b     w2
    1b34:	01 00 3a    	bra       NZ, 0x1b38 <.L42>
    1b36:	52 c2 b3    	mov.b     #0x25, w2

00001b38 <.L42>:
    1b38:	82 49 78    	mov.b     w2, [w3]

00001b3a <.L50>:
    1b3a:	81 00 e8    	inc.w     w1, w1
    1b3c:	71 00 98    	mov.w     w1, [w0+14]

00001b3e <.L11>:
    1b3e:	00 00 eb    	clr.w     w0
    1b40:	4f 04 78    	mov.w     [--w15], w8
    1b42:	00 00 06    	return    

00001b44 <_memchr>:
    1b44:	03 00 37    	bra       0x1b4c <.L2>

00001b46 <.L4>:
    1b46:	b0 cf 10    	subr.b    w1, [w0++], [w15]
    1b48:	05 00 32    	bra       Z, 0x1b54 <.L5>
    1b4a:	02 01 e9    	dec.w     w2, w2

00001b4c <.L2>:
    1b4c:	80 01 78    	mov.w     w0, w3
    1b4e:	02 00 e0    	cp0.w     w2
    1b50:	fa ff 3a    	bra       NZ, 0x1b46 <.L4>
    1b52:	00 00 05    	retlw.w   #0x0, w0

00001b54 <.L5>:
    1b54:	03 00 78    	mov.w     w3, w0
    1b56:	00 00 06    	return    

00001b58 <_memcpy>:
    1b58:	80 01 78    	mov.w     w0, w3
    1b5a:	02 00 37    	bra       0x1b60 <.L2>

00001b5c <.L3>:
    1b5c:	b1 59 78    	mov.b     [w1++], [w3++]
    1b5e:	02 01 e9    	dec.w     w2, w2

00001b60 <.L2>:
    1b60:	02 00 e0    	cp0.w     w2
    1b62:	fc ff 3a    	bra       NZ, 0x1b5c <.L3>
    1b64:	00 00 06    	return    

00001b66 <_strchr>:
    1b66:	02 00 37    	bra       0x1b6c <.L2>

00001b68 <.L4>:
    1b68:	03 04 e0    	cp0.b     w3
    1b6a:	06 00 32    	bra       Z, 0x1b78 <.L5>

00001b6c <.L2>:
    1b6c:	00 01 78    	mov.w     w0, w2
    1b6e:	02 00 78    	mov.w     w2, w0
    1b70:	b0 41 78    	mov.b     [w0++], w3
    1b72:	81 cf 51    	sub.b     w3, w1, [w15]
    1b74:	f9 ff 3a    	bra       NZ, 0x1b68 <.L4>
    1b76:	01 00 37    	bra       0x1b7a <.L3>

00001b78 <.L5>:
    1b78:	00 01 eb    	clr.w     w2

00001b7a <.L3>:
    1b7a:	02 00 78    	mov.w     w2, w0
    1b7c:	00 00 06    	return    

00001b7e <__Litob>:
    1b7e:	fc 87 47    	add.w     w15, #0x1c, w15
    1b80:	88 9f be    	mov.d     w8, [w15++]
    1b82:	8a 9f be    	mov.d     w10, [w15++]
    1b84:	8c 9f be    	mov.d     w12, [w15++]
    1b86:	8e 1f 78    	mov.w     w14, [w15++]
    1b88:	00 06 78    	mov.w     w0, w12
    1b8a:	80 c5 b3    	mov.b     #0x58, w0
    1b8c:	80 cf 50    	sub.b     w1, w0, [w15]
    1b8e:	0a 00 32    	bra       Z, 0x1ba4 <.L35>
    1b90:	77 40 40    	add.b     w0, #0x17, w0
    1b92:	80 cf 50    	sub.b     w1, w0, [w15]
    1b94:	0a 00 32    	bra       Z, 0x1baa <.L36>
    1b96:	69 40 40    	add.b     w0, #0x9, w0
    1b98:	80 cf 50    	sub.b     w1, w0, [w15]
    1b9a:	0b 00 32    	bra       Z, 0x1bb2 <.L37>
    1b9c:	b0 58 21    	mov.w     #0x158b, w0
    1b9e:	80 bf 9f    	mov.w     w0, [w15-16]
    1ba0:	ae 00 20    	mov.w     #0xa, w14
    1ba2:	0a 00 37    	bra       0x1bb8 <.L2>

00001ba4 <.L35>:
    1ba4:	a2 57 21    	mov.w     #0x157a, w2
    1ba6:	82 bf 9f    	mov.w     w2, [w15-16]
    1ba8:	06 00 37    	bra       0x1bb6 <.L46>

00001baa <.L36>:
    1baa:	b3 58 21    	mov.w     #0x158b, w3
    1bac:	83 bf 9f    	mov.w     w3, [w15-16]
    1bae:	8e 00 20    	mov.w     #0x8, w14
    1bb0:	03 00 37    	bra       0x1bb8 <.L2>

00001bb2 <.L37>:
    1bb2:	b4 58 21    	mov.w     #0x158b, w4
    1bb4:	84 bf 9f    	mov.w     w4, [w15-16]

00001bb6 <.L46>:
    1bb6:	0e 01 20    	mov.w     #0x10, w14

00001bb8 <.L2>:
    1bb8:	3c 02 be    	mov.d     [w12++], w4
    1bba:	2c 03 be    	mov.d     [w12--], w6
    1bbc:	06 05 be    	mov.d     w6, w10
    1bbe:	04 04 be    	mov.d     w4, w8
    1bc0:	40 c6 b3    	mov.b     #0x64, w0
    1bc2:	80 cf 50    	sub.b     w1, w0, [w15]
    1bc4:	03 00 32    	bra       Z, 0x1bcc <.L3>
    1bc6:	65 40 40    	add.b     w0, #0x5, w0
    1bc8:	80 cf 50    	sub.b     w1, w0, [w15]
    1bca:	0b 00 3a    	bra       NZ, 0x1be2 <.L4>

00001bcc <.L3>:
    1bcc:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1bce:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1bd0:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1bd2:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1bd4:	06 00 3d    	bra       GE, 0x1be2 <.L4>
    1bd6:	60 00 b8    	mul.uu    w0, #0x0, w0
    1bd8:	60 11 b8    	mul.uu    w2, #0x0, w2
    1bda:	04 04 50    	sub.w     w0, w4, w8
    1bdc:	85 84 58    	subb.w    w1, w5, w9
    1bde:	06 05 59    	subb.w    w2, w6, w10
    1be0:	87 85 59    	subb.w    w3, w7, w11

00001be2 <.L4>:
    1be2:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1be4:	04 00 32    	bra       Z, 0x1bee <.L38>
    1be6:	40 00 20    	mov.w     #0x4, w0
    1be8:	f0 0f 57    	sub.w     w14, #0x10, [w15]
    1bea:	38 00 3a    	bra       NZ, 0x1c5c <.L51>
    1bec:	01 00 37    	bra       0x1bf0 <.L6>

00001bee <.L38>:
    1bee:	30 00 20    	mov.w     #0x3, w0

00001bf0 <.L6>:
    1bf0:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1bf2:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1bf4:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1bf6:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1bf8:	04 00 3a    	bra       NZ, 0x1c02 <.L8>
    1bfa:	dc 08 90    	mov.w     [w12+26], w1
    1bfc:	8d 01 20    	mov.w     #0x18, w13
    1bfe:	01 00 e0    	cp0.w     w1
    1c00:	06 00 32    	bra       Z, 0x1c0e <.L9>

00001c02 <.L8>:
    1c02:	8e 00 e9    	dec.w     w14, w1
    1c04:	88 80 60    	and.w     w1, w8, w1
    1c06:	8f ba 97    	mov.w     [w15-16], w5
    1c08:	e5 c0 78    	mov.b     [w5+w1], w1
    1c0a:	f1 ef 9f    	mov.b     w1, [w15-17]
    1c0c:	7d 01 20    	mov.w     #0x17, w13

00001c0e <.L9>:
    1c0e:	80 00 78    	mov.w     w0, w1

00001c10 <.LB101>:
    1c10:	81 00 e9    	dec.w     w1, w1
    1c12:	05 00 33    	bra       N, 0x1c1e <.LE101>
    1c14:	8b 05 d1    	lsr.w     w11, w11
    1c16:	0a 85 d3    	rrc.w     w10, w10
    1c18:	89 84 d3    	rrc.w     w9, w9
    1c1a:	08 84 d3    	rrc.w     w8, w8
    1c1c:	f9 ff 37    	bra       0x1c10 <.LB101>

00001c1e <.LE101>:
    1c1e:	08 9e be    	mov.d     w8, [w12++]
    1c20:	0a 96 be    	mov.d     w10, [w12--]
    1c22:	12 00 37    	bra       0x1c48 <.L10>

00001c24 <.L12>:
    1c24:	8d 06 e9    	dec.w     w13, w13
    1c26:	8e 00 e9    	dec.w     w14, w1
    1c28:	84 80 60    	and.w     w1, w4, w1
    1c2a:	0f b9 97    	mov.w     [w15-16], w2
    1c2c:	e2 c1 78    	mov.b     [w2+w1], w3
    1c2e:	82 fd 2f    	mov.w     #0xffd8, w2
    1c30:	0f 01 41    	add.w     w2, w15, w2
    1c32:	03 f1 7e    	mov.b     w3, [w2+w13]
    1c34:	80 00 78    	mov.w     w0, w1

00001c36 <.LB115>:
    1c36:	81 00 e9    	dec.w     w1, w1
    1c38:	05 00 33    	bra       N, 0x1c44 <.LE115>
    1c3a:	87 83 d1    	asr.w     w7, w7
    1c3c:	06 83 d3    	rrc.w     w6, w6
    1c3e:	85 82 d3    	rrc.w     w5, w5
    1c40:	04 82 d3    	rrc.w     w4, w4
    1c42:	f9 ff 37    	bra       0x1c36 <.LB115>

00001c44 <.LE115>:
    1c44:	04 9e be    	mov.d     w4, [w12++]
    1c46:	06 96 be    	mov.d     w6, [w12--]

00001c48 <.L10>:
    1c48:	3c 02 be    	mov.d     [w12++], w4
    1c4a:	2c 03 be    	mov.d     [w12--], w6
    1c4c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1c4e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1c50:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1c52:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1c54:	8b 00 34    	bra       LE, 0x1d6c <.L11>
    1c56:	0d 00 e0    	cp0.w     w13
    1c58:	e5 ff 3c    	bra       GT, 0x1c24 <.L12>
    1c5a:	88 00 37    	bra       0x1d6c <.L11>

00001c5c <.L51>:
    1c5c:	2c 60 90    	mov.b     [w12+34], w0
    1c5e:	81 c6 b3    	mov.b     #0x68, w1
    1c60:	81 4f 50    	sub.b     w0, w1, [w15]
    1c62:	0b 00 32    	bra       Z, 0x1c7a <.L14>
    1c64:	06 00 3c    	bra       GT, 0x1c72 <.L16>
    1c66:	00 04 e0    	cp0.b     w0
    1c68:	08 00 32    	bra       Z, 0x1c7a <.L14>
    1c6a:	e6 c0 50    	sub.b     w1, #0x6, w1
    1c6c:	81 4f 50    	sub.b     w0, w1, [w15]
    1c6e:	4e 00 3a    	bra       NZ, 0x1d0c <.L13>
    1c70:	04 00 37    	bra       0x1c7a <.L14>

00001c72 <.L16>:
    1c72:	c1 c6 b3    	mov.b     #0x6c, w1
    1c74:	81 4f 50    	sub.b     w0, w1, [w15]
    1c76:	4a 00 3a    	bra       NZ, 0x1d0c <.L13>
    1c78:	21 00 37    	bra       0x1cbc <.L52>

00001c7a <.L14>:
    1c7a:	08 00 e0    	cp0.w     w8
    1c7c:	04 00 3a    	bra       NZ, 0x1c86 <.L17>
    1c7e:	5c 08 90    	mov.w     [w12+26], w0
    1c80:	8d 01 20    	mov.w     #0x18, w13
    1c82:	00 00 e0    	cp0.w     w0
    1c84:	06 00 32    	bra       Z, 0x1c92 <.L18>

00001c86 <.L17>:
    1c86:	11 00 09    	repeat    #0x11
    1c88:	0e 84 d8    	div.uw    w8, w14
    1c8a:	0f b9 97    	mov.w     [w15-16], w2
    1c8c:	e2 c0 78    	mov.b     [w2+w1], w1
    1c8e:	f1 ef 9f    	mov.b     w1, [w15-17]
    1c90:	7d 01 20    	mov.w     #0x17, w13

00001c92 <.L18>:
    1c92:	11 00 09    	repeat    #0x11
    1c94:	0e 84 d8    	div.uw    w8, w14
    1c96:	0a 00 37    	bra       0x1cac <.L47>

00001c98 <.L21>:
    1c98:	11 00 09    	repeat    #0x11
    1c9a:	0e 04 d8    	div.sw    w8, w14
    1c9c:	8d 06 e9    	dec.w     w13, w13
    1c9e:	0e 81 b9    	mul.ss    w0, w14, w2
    1ca0:	02 04 54    	sub.w     w8, w2, w8
    1ca2:	8f b8 97    	mov.w     [w15-16], w1
    1ca4:	61 41 7c    	mov.b     [w1+w8], w2
    1ca6:	81 fd 2f    	mov.w     #0xffd8, w1
    1ca8:	8f 80 40    	add.w     w1, w15, w1
    1caa:	82 f0 7e    	mov.b     w2, [w1+w13]

00001cac <.L47>:
    1cac:	00 04 78    	mov.w     w0, w8
    1cae:	08 00 e0    	cp0.w     w8
    1cb0:	02 00 32    	bra       Z, 0x1cb6 <.L20>
    1cb2:	0d 00 e0    	cp0.w     w13
    1cb4:	f1 ff 3c    	bra       GT, 0x1c98 <.L21>

00001cb6 <.L20>:
    1cb6:	cf c4 de    	asr.w     w8, #0xf, w9
    1cb8:	61 4d b9    	mul.su    w9, #0x1, w10
    1cba:	25 00 37    	bra       0x1d06 <.L50>

00001cbc <.L52>:
    1cbc:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1cbe:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1cc0:	04 00 3a    	bra       NZ, 0x1cca <.L22>
    1cc2:	5c 08 90    	mov.w     [w12+26], w0
    1cc4:	8d 01 20    	mov.w     #0x18, w13
    1cc6:	00 00 e0    	cp0.w     w0
    1cc8:	07 00 32    	bra       Z, 0x1cd8 <.L23>

00001cca <.L22>:
    1cca:	61 71 b9    	mul.su    w14, #0x1, w2
    1ccc:	08 00 be    	mov.d     w8, w0
    1cce:	63 01 07    	rcall     0x1f96 <___umodsi3>
    1cd0:	8f b9 97    	mov.w     [w15-16], w3
    1cd2:	e3 41 78    	mov.b     [w3+w0], w3
    1cd4:	f3 ef 9f    	mov.b     w3, [w15-17]
    1cd6:	7d 01 20    	mov.w     #0x17, w13

00001cd8 <.L23>:
    1cd8:	61 71 b9    	mul.su    w14, #0x1, w2
    1cda:	08 00 be    	mov.d     w8, w0
    1cdc:	4c 01 07    	rcall     0x1f76 <___udivsi3>
    1cde:	0b 00 37    	bra       0x1cf6 <.L48>

00001ce0 <.L26>:
    1ce0:	61 71 b9    	mul.su    w14, #0x1, w2
    1ce2:	08 00 be    	mov.d     w8, w0
    1ce4:	39 01 07    	rcall     0x1f58 <___divsi3>
    1ce6:	8d 06 e9    	dec.w     w13, w13
    1ce8:	00 f1 b9    	mul.ss    w14, w0, w2
    1cea:	02 04 54    	sub.w     w8, w2, w8
    1cec:	0f ba 97    	mov.w     [w15-16], w4
    1cee:	e4 42 7c    	mov.b     [w4+w8], w5
    1cf0:	84 fd 2f    	mov.w     #0xffd8, w4
    1cf2:	0f 02 42    	add.w     w4, w15, w4
    1cf4:	05 f2 7e    	mov.b     w5, [w4+w13]

00001cf6 <.L48>:
    1cf6:	00 04 be    	mov.d     w0, w8
    1cf8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1cfa:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1cfc:	02 00 32    	bra       Z, 0x1d02 <.L25>
    1cfe:	0d 00 e0    	cp0.w     w13
    1d00:	ef ff 3c    	bra       GT, 0x1ce0 <.L26>

00001d02 <.L25>:
    1d02:	4f cd de    	asr.w     w9, #0xf, w10
    1d04:	8a 05 78    	mov.w     w10, w11

00001d06 <.L50>:
    1d06:	08 9e be    	mov.d     w8, [w12++]
    1d08:	0a 96 be    	mov.d     w10, [w12--]
    1d0a:	30 00 37    	bra       0x1d6c <.L11>

00001d0c <.L13>:
    1d0c:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1d0e:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1d10:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1d12:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1d14:	04 00 3a    	bra       NZ, 0x1d1e <.L27>
    1d16:	5c 08 90    	mov.w     [w12+26], w0
    1d18:	8d 01 20    	mov.w     #0x18, w13
    1d1a:	00 00 e0    	cp0.w     w0
    1d1c:	09 00 32    	bra       Z, 0x1d30 <.L28>

00001d1e <.L27>:
    1d1e:	61 72 b9    	mul.su    w14, #0x1, w4
    1d20:	61 2b b9    	mul.su    w5, #0x1, w6
    1d22:	08 00 be    	mov.d     w8, w0
    1d24:	0a 01 be    	mov.d     w10, w2
    1d26:	da 01 07    	rcall     0x20dc <___umoddi3>
    1d28:	0f ba 97    	mov.w     [w15-16], w4
    1d2a:	64 42 78    	mov.b     [w4+w0], w4
    1d2c:	f4 ef 9f    	mov.b     w4, [w15-17]
    1d2e:	7d 01 20    	mov.w     #0x17, w13

00001d30 <.L28>:
    1d30:	61 72 b9    	mul.su    w14, #0x1, w4
    1d32:	61 2b b9    	mul.su    w5, #0x1, w6
    1d34:	08 00 be    	mov.d     w8, w0
    1d36:	0a 01 be    	mov.d     w10, w2
    1d38:	ca 01 07    	rcall     0x20ce <___udivdi3>
    1d3a:	0d 00 37    	bra       0x1d56 <.L49>

00001d3c <.L30>:
    1d3c:	61 72 b9    	mul.su    w14, #0x1, w4
    1d3e:	61 2b b9    	mul.su    w5, #0x1, w6
    1d40:	08 00 be    	mov.d     w8, w0
    1d42:	0a 01 be    	mov.d     w10, w2
    1d44:	cf 01 07    	rcall     0x20e4 <___divdi3>
    1d46:	8d 06 e9    	dec.w     w13, w13
    1d48:	00 f2 b9    	mul.ss    w14, w0, w4
    1d4a:	04 04 54    	sub.w     w8, w4, w8
    1d4c:	8f ba 97    	mov.w     [w15-16], w5
    1d4e:	65 42 7c    	mov.b     [w5+w8], w4
    1d50:	85 fd 2f    	mov.w     #0xffd8, w5
    1d52:	8f 82 42    	add.w     w5, w15, w5
    1d54:	84 f2 7e    	mov.b     w4, [w5+w13]

00001d56 <.L49>:
    1d56:	00 9e be    	mov.d     w0, [w12++]
    1d58:	02 96 be    	mov.d     w2, [w12--]
    1d5a:	3c 04 be    	mov.d     [w12++], w8
    1d5c:	2c 05 be    	mov.d     [w12--], w10
    1d5e:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1d60:	e0 8f 5c    	subb.w    w9, #0x0, [w15]
    1d62:	e0 0f 5d    	subb.w    w10, #0x0, [w15]
    1d64:	e0 8f 5d    	subb.w    w11, #0x0, [w15]
    1d66:	02 00 34    	bra       LE, 0x1d6c <.L11>
    1d68:	0d 00 e0    	cp0.w     w13
    1d6a:	e8 ff 3c    	bra       GT, 0x1d3c <.L30>

00001d6c <.L11>:
    1d6c:	e8 0f 57    	sub.w     w14, #0x8, [w15]
    1d6e:	10 00 3a    	bra       NZ, 0x1d90 <.L31>
    1d70:	0c 10 90    	mov.w     [w12+32], w0
    1d72:	00 38 a3    	btst.z    w0, #0x3
    1d74:	0d 00 32    	bra       Z, 0x1d90 <.L31>
    1d76:	f7 8f 56    	sub.w     w13, #0x17, [w15]
    1d78:	06 00 3e    	bra       GTU, 0x1d86 <.L32>
    1d7a:	85 fd 2f    	mov.w     #0xffd8, w5
    1d7c:	8f 82 42    	add.w     w5, w15, w5
    1d7e:	e5 c0 7e    	mov.b     [w5+w13], w1
    1d80:	00 c3 b3    	mov.b     #0x30, w0
    1d82:	80 cf 50    	sub.b     w1, w0, [w15]
    1d84:	05 00 32    	bra       Z, 0x1d90 <.L31>

00001d86 <.L32>:
    1d86:	8d 06 e9    	dec.w     w13, w13
    1d88:	02 c3 b3    	mov.b     #0x30, w2
    1d8a:	81 fd 2f    	mov.w     #0xffd8, w1
    1d8c:	8f 80 40    	add.w     w1, w15, w1
    1d8e:	82 f0 7e    	mov.b     w2, [w1+w13]

00001d90 <.L31>:
    1d90:	78 81 16    	subr.w    w13, #0x18, w2
    1d92:	12 0e 98    	mov.w     w2, [w12+18]
    1d94:	6c 00 90    	mov.w     [w12+12], w0
    1d96:	83 fd 2f    	mov.w     #0xffd8, w3
    1d98:	8f 81 41    	add.w     w3, w15, w3
    1d9a:	8d 80 41    	add.w     w3, w13, w1
    1d9c:	dd fe 07    	rcall     0x1b58 <_memcpy>
    1d9e:	1c 08 90    	mov.w     [w12+18], w0
    1da0:	dc 08 90    	mov.w     [w12+26], w1
    1da2:	81 0f 50    	sub.w     w0, w1, [w15]
    1da4:	06 00 3d    	bra       GE, 0x1db2 <.L33>
    1da6:	00 80 50    	sub.w     w1, w0, w0
    1da8:	00 0e 98    	mov.w     w0, [w12+16]
    1daa:	0c 10 90    	mov.w     [w12+32], w0
    1dac:	00 40 a1    	bclr.w    w0, #0x4
    1dae:	00 16 98    	mov.w     w0, [w12+32]
    1db0:	0f 00 37    	bra       0x1dd0 <.L1>

00001db2 <.L33>:
    1db2:	01 00 e0    	cp0.w     w1
    1db4:	0d 00 3d    	bra       GE, 0x1dd0 <.L1>
    1db6:	8c 10 90    	mov.w     [w12+32], w1
    1db8:	f4 80 60    	and.w     w1, #0x14, w1
    1dba:	f0 8f 50    	sub.w     w1, #0x10, [w15]
    1dbc:	09 00 3a    	bra       NZ, 0x1dd0 <.L1>
    1dbe:	7c 09 90    	mov.w     [w12+30], w2
    1dc0:	fc 00 90    	mov.w     [w12+14], w1
    1dc2:	81 00 51    	sub.w     w2, w1, w1
    1dc4:	0c 09 90    	mov.w     [w12+16], w2
    1dc6:	82 80 50    	sub.w     w1, w2, w1
    1dc8:	00 80 50    	sub.w     w1, w0, w0
    1dca:	42 40 a9    	bclr.b    0x42, #0x2
    1dcc:	01 00 34    	bra       LE, 0x1dd0 <.L1>
    1dce:	00 0e 98    	mov.w     w0, [w12+16]

00001dd0 <.L1>:
    1dd0:	4f 07 78    	mov.w     [--w15], w14
    1dd2:	4f 06 be    	mov.d     [--w15], w12
    1dd4:	4f 05 be    	mov.d     [--w15], w10
    1dd6:	4f 04 be    	mov.d     [--w15], w8
    1dd8:	cf 01 b1    	sub.w     #0x1c, w15
    1dda:	00 00 06    	return    

00001ddc <__Puttxt>:
    1ddc:	04 00 fa    	lnk       #0x4
    1dde:	88 9f be    	mov.d     w8, [w15++]
    1de0:	8a 9f be    	mov.d     w10, [w15++]
    1de2:	8c 1f 78    	mov.w     w12, [w15++]
    1de4:	00 04 78    	mov.w     w0, w8
    1de6:	01 06 78    	mov.w     w1, w12
    1de8:	f8 0d 90    	mov.w     [w8+30], w11
    1dea:	78 00 90    	mov.w     [w8+14], w0
    1dec:	80 85 55    	sub.w     w11, w0, w11
    1dee:	08 08 90    	mov.w     [w8+16], w0
    1df0:	80 85 55    	sub.w     w11, w0, w11
    1df2:	18 08 90    	mov.w     [w8+18], w0
    1df4:	80 85 55    	sub.w     w11, w0, w11
    1df6:	28 08 90    	mov.w     [w8+20], w0
    1df8:	80 85 55    	sub.w     w11, w0, w11
    1dfa:	38 08 90    	mov.w     [w8+22], w0
    1dfc:	80 85 55    	sub.w     w11, w0, w11
    1dfe:	48 08 90    	mov.w     [w8+24], w0
    1e00:	80 85 55    	sub.w     w11, w0, w11
    1e02:	00 02 22    	mov.w     #0x2020, w0
    1e04:	90 bf 9f    	mov.w     w0, [w15-14]
    1e06:	00 03 23    	mov.w     #0x3030, w0
    1e08:	a0 bf 9f    	mov.w     w0, [w15-12]
    1e0a:	08 10 90    	mov.w     [w8+32], w0
    1e0c:	00 28 a3    	btst.z    w0, #0x2
    1e0e:	15 00 3a    	bra       NZ, 0x1e3a <.L2>
    1e10:	0b 00 e0    	cp0.w     w11
    1e12:	13 00 34    	bra       LE, 0x1e3a <.L2>
    1e14:	0b 05 78    	mov.w     w11, w10

00001e16 <.L5>:
    1e16:	8a 04 78    	mov.w     w10, w9
    1e18:	e2 0f 55    	sub.w     w10, #0x2, [w15]
    1e1a:	01 00 36    	bra       LEU, 0x1e1e <.L3>
    1e1c:	29 00 20    	mov.w     #0x2, w9

00001e1e <.L3>:
    1e1e:	c8 01 90    	mov.w     [w8+8], w3
    1e20:	09 01 78    	mov.w     w9, w2
    1e22:	ee 80 57    	sub.w     w15, #0xe, w1
    1e24:	58 00 90    	mov.w     [w8+10], w0
    1e26:	03 00 01    	call      w3
    1e28:	50 04 98    	mov.w     w0, [w8+10]
    1e2a:	00 00 e0    	cp0.w     w0
    1e2c:	8c 00 32    	bra       Z, 0x1f46 <.L29>
    1e2e:	68 08 90    	mov.w     [w8+28], w0
    1e30:	09 00 40    	add.w     w0, w9, w0
    1e32:	60 0c 98    	mov.w     w0, [w8+28]
    1e34:	09 05 55    	sub.w     w10, w9, w10
    1e36:	42 40 a9    	bclr.b    0x42, #0x2
    1e38:	ee ff 3c    	bra       GT, 0x1e16 <.L5>

00001e3a <.L2>:
    1e3a:	78 01 90    	mov.w     [w8+14], w2
    1e3c:	02 00 e0    	cp0.w     w2
    1e3e:	0c 00 34    	bra       LE, 0x1e58 <.L6>
    1e40:	c8 01 90    	mov.w     [w8+8], w3
    1e42:	8c 00 78    	mov.w     w12, w1
    1e44:	58 00 90    	mov.w     [w8+10], w0
    1e46:	03 00 01    	call      w3
    1e48:	50 04 98    	mov.w     w0, [w8+10]
    1e4a:	80 80 eb    	setm.w    w1
    1e4c:	00 00 e0    	cp0.w     w0
    1e4e:	7c 00 32    	bra       Z, 0x1f48 <.L4>
    1e50:	e8 08 90    	mov.w     [w8+28], w1
    1e52:	78 00 90    	mov.w     [w8+14], w0
    1e54:	00 80 40    	add.w     w1, w0, w0
    1e56:	60 0c 98    	mov.w     w0, [w8+28]

00001e58 <.L6>:
    1e58:	88 0c 90    	mov.w     [w8+16], w9

00001e5a <.L30>:
    1e5a:	09 00 e0    	cp0.w     w9
    1e5c:	11 00 34    	bra       LE, 0x1e80 <.L7>
    1e5e:	09 05 78    	mov.w     w9, w10
    1e60:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1e62:	01 00 36    	bra       LEU, 0x1e66 <.L8>
    1e64:	2a 00 20    	mov.w     #0x2, w10

00001e66 <.L8>:
    1e66:	c8 01 90    	mov.w     [w8+8], w3
    1e68:	0a 01 78    	mov.w     w10, w2
    1e6a:	ec 80 57    	sub.w     w15, #0xc, w1
    1e6c:	58 00 90    	mov.w     [w8+10], w0
    1e6e:	03 00 01    	call      w3
    1e70:	50 04 98    	mov.w     w0, [w8+10]
    1e72:	00 00 e0    	cp0.w     w0
    1e74:	68 00 32    	bra       Z, 0x1f46 <.L29>
    1e76:	68 08 90    	mov.w     [w8+28], w0
    1e78:	0a 00 40    	add.w     w0, w10, w0
    1e7a:	60 0c 98    	mov.w     w0, [w8+28]
    1e7c:	8a 84 54    	sub.w     w9, w10, w9
    1e7e:	ed ff 37    	bra       0x1e5a <.L30>

00001e80 <.L7>:
    1e80:	18 09 90    	mov.w     [w8+18], w2
    1e82:	02 00 e0    	cp0.w     w2
    1e84:	0c 00 34    	bra       LE, 0x1e9e <.L10>
    1e86:	c8 01 90    	mov.w     [w8+8], w3
    1e88:	e8 00 90    	mov.w     [w8+12], w1
    1e8a:	58 00 90    	mov.w     [w8+10], w0
    1e8c:	03 00 01    	call      w3
    1e8e:	50 04 98    	mov.w     w0, [w8+10]
    1e90:	80 80 eb    	setm.w    w1
    1e92:	00 00 e0    	cp0.w     w0
    1e94:	59 00 32    	bra       Z, 0x1f48 <.L4>
    1e96:	e8 08 90    	mov.w     [w8+28], w1
    1e98:	18 08 90    	mov.w     [w8+18], w0
    1e9a:	00 80 40    	add.w     w1, w0, w0
    1e9c:	60 0c 98    	mov.w     w0, [w8+28]

00001e9e <.L10>:
    1e9e:	a8 0c 90    	mov.w     [w8+20], w9

00001ea0 <.L31>:
    1ea0:	09 00 e0    	cp0.w     w9
    1ea2:	11 00 34    	bra       LE, 0x1ec6 <.L11>
    1ea4:	09 05 78    	mov.w     w9, w10
    1ea6:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1ea8:	01 00 36    	bra       LEU, 0x1eac <.L12>
    1eaa:	2a 00 20    	mov.w     #0x2, w10

00001eac <.L12>:
    1eac:	c8 01 90    	mov.w     [w8+8], w3
    1eae:	0a 01 78    	mov.w     w10, w2
    1eb0:	ec 80 57    	sub.w     w15, #0xc, w1
    1eb2:	58 00 90    	mov.w     [w8+10], w0
    1eb4:	03 00 01    	call      w3
    1eb6:	50 04 98    	mov.w     w0, [w8+10]
    1eb8:	00 00 e0    	cp0.w     w0
    1eba:	45 00 32    	bra       Z, 0x1f46 <.L29>
    1ebc:	68 08 90    	mov.w     [w8+28], w0
    1ebe:	0a 00 40    	add.w     w0, w10, w0
    1ec0:	60 0c 98    	mov.w     w0, [w8+28]
    1ec2:	8a 84 54    	sub.w     w9, w10, w9
    1ec4:	ed ff 37    	bra       0x1ea0 <.L31>

00001ec6 <.L11>:
    1ec6:	38 09 90    	mov.w     [w8+22], w2
    1ec8:	02 00 e0    	cp0.w     w2
    1eca:	0e 00 34    	bra       LE, 0x1ee8 <.L14>
    1ecc:	e8 00 90    	mov.w     [w8+12], w1
    1ece:	18 08 90    	mov.w     [w8+18], w0
    1ed0:	80 80 40    	add.w     w1, w0, w1
    1ed2:	c8 01 90    	mov.w     [w8+8], w3
    1ed4:	58 00 90    	mov.w     [w8+10], w0
    1ed6:	03 00 01    	call      w3
    1ed8:	50 04 98    	mov.w     w0, [w8+10]
    1eda:	80 80 eb    	setm.w    w1
    1edc:	00 00 e0    	cp0.w     w0
    1ede:	34 00 32    	bra       Z, 0x1f48 <.L4>
    1ee0:	e8 08 90    	mov.w     [w8+28], w1
    1ee2:	38 08 90    	mov.w     [w8+22], w0
    1ee4:	00 80 40    	add.w     w1, w0, w0
    1ee6:	60 0c 98    	mov.w     w0, [w8+28]

00001ee8 <.L14>:
    1ee8:	c8 0c 90    	mov.w     [w8+24], w9

00001eea <.L32>:
    1eea:	09 00 e0    	cp0.w     w9
    1eec:	11 00 34    	bra       LE, 0x1f10 <.L15>
    1eee:	09 05 78    	mov.w     w9, w10
    1ef0:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1ef2:	01 00 36    	bra       LEU, 0x1ef6 <.L16>
    1ef4:	2a 00 20    	mov.w     #0x2, w10

00001ef6 <.L16>:
    1ef6:	c8 01 90    	mov.w     [w8+8], w3
    1ef8:	0a 01 78    	mov.w     w10, w2
    1efa:	ec 80 57    	sub.w     w15, #0xc, w1
    1efc:	58 00 90    	mov.w     [w8+10], w0
    1efe:	03 00 01    	call      w3
    1f00:	50 04 98    	mov.w     w0, [w8+10]
    1f02:	00 00 e0    	cp0.w     w0
    1f04:	20 00 32    	bra       Z, 0x1f46 <.L29>
    1f06:	68 08 90    	mov.w     [w8+28], w0
    1f08:	0a 00 40    	add.w     w0, w10, w0
    1f0a:	60 0c 98    	mov.w     w0, [w8+28]
    1f0c:	8a 84 54    	sub.w     w9, w10, w9
    1f0e:	ed ff 37    	bra       0x1eea <.L32>

00001f10 <.L15>:
    1f10:	08 10 90    	mov.w     [w8+32], w0
    1f12:	80 00 eb    	clr.w     w1
    1f14:	00 28 a3    	btst.z    w0, #0x2
    1f16:	18 00 32    	bra       Z, 0x1f48 <.L4>
    1f18:	0b 00 e0    	cp0.w     w11
    1f1a:	16 00 34    	bra       LE, 0x1f48 <.L4>
    1f1c:	8b 04 78    	mov.w     w11, w9

00001f1e <.L19>:
    1f1e:	09 05 78    	mov.w     w9, w10
    1f20:	e2 8f 54    	sub.w     w9, #0x2, [w15]
    1f22:	01 00 36    	bra       LEU, 0x1f26 <.L18>
    1f24:	2a 00 20    	mov.w     #0x2, w10

00001f26 <.L18>:
    1f26:	c8 01 90    	mov.w     [w8+8], w3
    1f28:	0a 01 78    	mov.w     w10, w2
    1f2a:	ee 80 57    	sub.w     w15, #0xe, w1
    1f2c:	58 00 90    	mov.w     [w8+10], w0
    1f2e:	03 00 01    	call      w3
    1f30:	50 04 98    	mov.w     w0, [w8+10]
    1f32:	00 00 e0    	cp0.w     w0
    1f34:	08 00 32    	bra       Z, 0x1f46 <.L29>
    1f36:	68 08 90    	mov.w     [w8+28], w0
    1f38:	0a 00 40    	add.w     w0, w10, w0
    1f3a:	60 0c 98    	mov.w     w0, [w8+28]
    1f3c:	8a 84 54    	sub.w     w9, w10, w9
    1f3e:	42 40 a9    	bclr.b    0x42, #0x2
    1f40:	ee ff 3c    	bra       GT, 0x1f1e <.L19>
    1f42:	80 00 eb    	clr.w     w1
    1f44:	01 00 37    	bra       0x1f48 <.L4>

00001f46 <.L29>:
    1f46:	80 80 eb    	setm.w    w1

00001f48 <.L4>:
    1f48:	01 00 78    	mov.w     w1, w0
    1f4a:	4f 06 78    	mov.w     [--w15], w12
    1f4c:	4f 05 be    	mov.d     [--w15], w10
    1f4e:	4f 04 be    	mov.d     [--w15], w8
    1f50:	00 80 fa    	ulnk      
    1f52:	00 00 06    	return    

00001f54 <__Vacopy>:
    1f54:	01 08 78    	mov.w     w1, [w0]
    1f56:	00 00 06    	return    

00001f58 <___divsi3>:
    1f58:	83 9f 68    	xor.w     w1, w3, [w15++]
    1f5a:	01 00 e0    	cp0.w     w1
    1f5c:	02 00 3d    	bra       GE, 0x1f62 <divtestb>
    1f5e:	60 00 10    	subr.w    w0, #0x0, w0
    1f60:	e0 80 18    	subbr.w   w1, #0x0, w1

00001f62 <divtestb>:
    1f62:	03 00 e0    	cp0.w     w3
    1f64:	02 00 3d    	bra       GE, 0x1f6a <calcquot>
    1f66:	60 01 11    	subr.w    w2, #0x0, w2
    1f68:	e0 81 19    	subbr.w   w3, #0x0, w3

00001f6a <calcquot>:
    1f6a:	05 00 07    	rcall     0x1f76 <___udivsi3>
    1f6c:	4f 00 e0    	cp0.w     [--w15]
    1f6e:	02 00 3b    	bra       NN, 0x1f74 <returnq>
    1f70:	60 00 10    	subr.w    w0, #0x0, w0
    1f72:	e0 80 18    	subbr.w   w1, #0x0, w1

00001f74 <returnq>:
    1f74:	00 00 06    	return    

00001f76 <___udivsi3>:
    1f76:	60 22 b8    	mul.uu    w4, #0x0, w4
    1f78:	06 02 20    	mov.w     #0x20, w6

00001f7a <nextbit>:
    1f7a:	00 00 d0    	sl.w      w0, w0
    1f7c:	81 80 d2    	rlc.w     w1, w1
    1f7e:	04 82 d2    	rlc.w     w4, w4
    1f80:	85 82 d2    	rlc.w     w5, w5
    1f82:	00 00 a0    	bset.w    w0, #0x0
    1f84:	02 02 52    	sub.w     w4, w2, w4
    1f86:	83 82 5a    	subb.w    w5, w3, w5
    1f88:	03 00 31    	bra       C, 0x1f90 <iterate>
    1f8a:	02 02 42    	add.w     w4, w2, w4
    1f8c:	83 82 4a    	addc.w    w5, w3, w5
    1f8e:	00 00 a1    	bclr.w    w0, #0x0

00001f90 <iterate>:
    1f90:	06 03 e9    	dec.w     w6, w6
    1f92:	f3 ff 3a    	bra       NZ, 0x1f7a <nextbit>
    1f94:	00 00 06    	return    

00001f96 <___umodsi3>:
    1f96:	ef ff 07    	rcall     0x1f76 <___udivsi3>
    1f98:	04 00 be    	mov.d     w4, w0
    1f9a:	00 00 06    	return    

00001f9c <___PplusBdi>:
    1f9c:	88 9f be    	mov.d     w8, [w15++]
    1f9e:	8a 9f be    	mov.d     w10, [w15++]
    1fa0:	30 04 42    	add.w     w4, [w0++], w8
    1fa2:	b0 84 4a    	addc.w    w5, [w0++], w9
    1fa4:	30 05 4b    	addc.w    w6, [w0++], w10
    1fa6:	90 85 4b    	addc.w    w7, [w0], w11
    1fa8:	60 00 b1    	sub.w     #0x6, w0
    1faa:	08 98 be    	mov.d     w8, [w0++]
    1fac:	0a 90 be    	mov.d     w10, [w0--]
    1fae:	04 40 e1    	cp.w      w8, w4
    1fb0:	05 c8 e1    	cpb.w     w9, w5
    1fb2:	06 d0 e1    	cpb.w     w10, w6
    1fb4:	07 d8 e1    	cpb.w     w11, w7
    1fb6:	02 00 31    	bra       C, 0x1fbc <.L1>
    1fb8:	68 00 40    	add.w     w0, #0x8, w0
    1fba:	10 08 e8    	inc.w     [w0], [w0]

00001fbc <.L1>:
    1fbc:	4f 05 be    	mov.d     [--w15], w10
    1fbe:	4f 04 be    	mov.d     [--w15], w8
    1fc0:	00 00 06    	return    

00001fc2 <___PminusBdi>:
    1fc2:	88 9f be    	mov.d     w8, [w15++]
    1fc4:	8a 9f be    	mov.d     w10, [w15++]
    1fc6:	30 04 be    	mov.d     [w0++], w8
    1fc8:	20 05 be    	mov.d     [w0--], w10
    1fca:	04 18 54    	sub.w     w8, w4, [w0++]
    1fcc:	05 98 5c    	subb.w    w9, w5, [w0++]
    1fce:	06 18 5d    	subb.w    w10, w6, [w0++]
    1fd0:	07 98 5d    	subb.w    w11, w7, [w0++]
    1fd2:	11 00 20    	mov.w     #0x1, w1
    1fd4:	04 40 e1    	cp.w      w8, w4
    1fd6:	05 c8 e1    	cpb.w     w9, w5
    1fd8:	06 d0 e1    	cpb.w     w10, w6
    1fda:	07 d8 e1    	cpb.w     w11, w7
    1fdc:	01 00 39    	bra       NC, 0x1fe0 <.L4>
    1fde:	80 00 eb    	clr.w     w1

00001fe0 <.L4>:
    1fe0:	10 88 10    	subr.w    w1, [w0], [w0]
    1fe2:	4f 05 be    	mov.d     [--w15], w10
    1fe4:	4f 04 be    	mov.d     [--w15], w8
    1fe6:	00 00 06    	return    

00001fe8 <___udivmoddi3>:
    1fe8:	12 00 fa    	lnk       #0x12
    1fea:	88 9f be    	mov.d     w8, [w15++]
    1fec:	8a 9f be    	mov.d     w10, [w15++]
    1fee:	8c 9f be    	mov.d     w12, [w15++]
    1ff0:	e0 b7 9f    	mov.w     w0, [w15-20]
    1ff2:	f1 b7 9f    	mov.w     w1, [w15-18]
    1ff4:	82 bf 9f    	mov.w     w2, [w15-16]
    1ff6:	93 bf 9f    	mov.w     w3, [w15-14]
    1ff8:	06 05 be    	mov.d     w6, w10
    1ffa:	04 04 be    	mov.d     w4, w8
    1ffc:	00 00 eb    	clr.w     w0
    1ffe:	d0 b7 9f    	mov.w     w0, [w15-22]
    2000:	c0 b7 9f    	mov.w     w0, [w15-24]
    2002:	b0 b7 9f    	mov.w     w0, [w15-26]
    2004:	a0 b7 9f    	mov.w     w0, [w15-28]
    2006:	90 b7 9f    	mov.w     w0, [w15-30]
    2008:	00 06 eb    	clr.w     w12

0000200a <.L9>:
    200a:	5f b1 97    	mov.w     [w15-22], w2
    200c:	cf b0 97    	mov.w     [w15-24], w1
    200e:	82 01 41    	add.w     w2, w2, w3
    2010:	3f b0 97    	mov.w     [w15-26], w0
    2012:	02 00 e0    	cp0.w     w2
    2014:	04 00 3d    	bra       GE, 0x201e <.L6>
    2016:	37 00 07    	rcall     0x2086 <.LPA0>
    2018:	7e 80 57    	sub.w     w15, #0x1e, w0
    201a:	c0 ff 07    	rcall     0x1f9c <___PplusBdi>
    201c:	03 00 37    	bra       0x2024 <.L7>

0000201e <.L6>:
    201e:	33 00 07    	rcall     0x2086 <.LPA0>
    2020:	7e 80 57    	sub.w     w15, #0x1e, w0
    2022:	cf ff 07    	rcall     0x1fc2 <___PminusBdi>

00002024 <.L7>:
    2024:	df b6 97    	mov.w     [w15-22], w13
    2026:	0d 00 e0    	cp0.w     w13
    2028:	0c 00 35    	bra       LT, 0x2042 <.L8>
    202a:	6f b2 97    	mov.w     [w15-20], w4
    202c:	ff b2 97    	mov.w     [w15-18], w5
    202e:	0f bb 97    	mov.w     [w15-16], w6
    2030:	9f bb 97    	mov.w     [w15-14], w7
    2032:	10 00 20    	mov.w     #0x1, w0
    2034:	01 00 20    	mov.w     #0x0, w1
    2036:	60 11 b8    	mul.uu    w2, #0x0, w2
    2038:	00 02 72    	ior.w     w4, w0, w4
    203a:	81 82 72    	ior.w     w5, w1, w5
    203c:	02 03 73    	ior.w     w6, w2, w6
    203e:	83 83 73    	ior.w     w7, w3, w7
    2040:	1b 00 07    	rcall     0x2078 <L0>

00002042 <.L8>:
    2042:	0c 06 e8    	inc.w     w12, w12
    2044:	01 04 20    	mov.w     #0x40, w1
    2046:	81 0f 56    	sub.w     w12, w1, [w15]
    2048:	e0 ff 3a    	bra       NZ, 0x200a <.L9>
    204a:	0d 00 e0    	cp0.w     w13
    204c:	04 00 3d    	bra       GE, 0x2056 <.L10>
    204e:	08 02 be    	mov.d     w8, w4
    2050:	0a 03 be    	mov.d     w10, w6
    2052:	7e 80 57    	sub.w     w15, #0x1e, w0
    2054:	a3 ff 07    	rcall     0x1f9c <___PplusBdi>

00002056 <.L10>:
    2056:	5f a8 97    	mov.w     [w15-38], w0
    2058:	00 00 e0    	cp0.w     w0
    205a:	05 00 3a    	bra       NZ, 0x2066 <.L11>
    205c:	1f b2 97    	mov.w     [w15-30], w4
    205e:	af b2 97    	mov.w     [w15-28], w5
    2060:	3f b3 97    	mov.w     [w15-26], w6
    2062:	cf b3 97    	mov.w     [w15-24], w7
    2064:	09 00 07    	rcall     0x2078 <L0>

00002066 <.L11>:
    2066:	6f b0 97    	mov.w     [w15-20], w0
    2068:	ff b0 97    	mov.w     [w15-18], w1
    206a:	0f b9 97    	mov.w     [w15-16], w2
    206c:	9f b9 97    	mov.w     [w15-14], w3
    206e:	4f 06 be    	mov.d     [--w15], w12
    2070:	4f 05 be    	mov.d     [--w15], w10
    2072:	4f 04 be    	mov.d     [--w15], w8
    2074:	00 80 fa    	ulnk      
    2076:	00 00 06    	return    

00002078 <L0>:
    2078:	01 00 07    	rcall     0x207c <.LPA5>
    207a:	00 00 06    	return    

0000207c <.LPA5>:
    207c:	a4 b7 9f    	mov.w     w4, [w15-28]
    207e:	b5 b7 9f    	mov.w     w5, [w15-26]
    2080:	c6 b7 9f    	mov.w     w6, [w15-24]
    2082:	d7 b7 9f    	mov.w     w7, [w15-22]
    2084:	00 00 06    	return    

00002086 <.LPA0>:
    2086:	4f 09 de    	lsr.w     w1, #0xf, w2
    2088:	82 81 71    	ior.w     w3, w2, w3
    208a:	b3 b7 9f    	mov.w     w3, [w15-26]
    208c:	4f 01 de    	lsr.w     w0, #0xf, w2
    208e:	81 80 40    	add.w     w1, w1, w1
    2090:	82 80 70    	ior.w     w1, w2, w1
    2092:	a1 b7 9f    	mov.w     w1, [w15-28]
    2094:	8f b0 97    	mov.w     [w15-32], w1
    2096:	4f 09 de    	lsr.w     w1, #0xf, w2
    2098:	00 00 40    	add.w     w0, w0, w0
    209a:	02 00 70    	ior.w     w0, w2, w0
    209c:	90 b7 9f    	mov.w     w0, [w15-30]
    209e:	7f a8 97    	mov.w     [w15-34], w0
    20a0:	4f 01 de    	lsr.w     w0, #0xf, w2
    20a2:	81 80 40    	add.w     w1, w1, w1
    20a4:	82 80 70    	ior.w     w1, w2, w1
    20a6:	81 b7 9f    	mov.w     w1, [w15-32]
    20a8:	0d 00 07    	rcall     0x20c4 <.LPA4>
    20aa:	4f 3a de    	lsr.w     w7, #0xf, w4
    20ac:	00 00 40    	add.w     w0, w0, w0
    20ae:	04 00 70    	ior.w     w0, w4, w0
    20b0:	f0 af 9f    	mov.w     w0, [w15-34]
    20b2:	08 00 07    	rcall     0x20c4 <.LPA4>
    20b4:	04 02 42    	add.w     w4, w4, w4
    20b6:	85 82 4a    	addc.w    w5, w5, w5
    20b8:	06 03 4b    	addc.w    w6, w6, w6
    20ba:	87 83 4b    	addc.w    w7, w7, w7
    20bc:	df ff 07    	rcall     0x207c <.LPA5>
    20be:	08 02 be    	mov.d     w8, w4
    20c0:	0a 03 be    	mov.d     w10, w6
    20c2:	00 00 06    	return    

000020c4 <.LPA4>:
    20c4:	2f b2 97    	mov.w     [w15-28], w4
    20c6:	bf b2 97    	mov.w     [w15-26], w5
    20c8:	4f b3 97    	mov.w     [w15-24], w6
    20ca:	df b3 97    	mov.w     [w15-22], w7
    20cc:	00 00 06    	return    

000020ce <___udivdi3>:
    20ce:	88 1f 78    	mov.w     w8, [w15++]
    20d0:	18 00 20    	mov.w     #0x1, w8
    20d2:	88 1f 78    	mov.w     w8, [w15++]
    20d4:	89 ff 07    	rcall     0x1fe8 <___udivmoddi3>
    20d6:	8f 87 e9    	dec2.w    w15, w15
    20d8:	4f 04 78    	mov.w     [--w15], w8
    20da:	00 00 06    	return    

000020dc <___umoddi3>:
    20dc:	80 1f eb    	clr.w     [w15++]
    20de:	84 ff 07    	rcall     0x1fe8 <___udivmoddi3>
    20e0:	8f 87 e9    	dec2.w    w15, w15
    20e2:	00 00 06    	return    

000020e4 <___divdi3>:
    20e4:	88 9f be    	mov.d     w8, [w15++]
    20e6:	8a 9f be    	mov.d     w10, [w15++]
    20e8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    20ea:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    20ec:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    20ee:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    20f0:	0c 00 3d    	bra       GE, 0x210a <.L15>
    20f2:	60 44 b8    	mul.uu    w8, #0x0, w8
    20f4:	60 55 b8    	mul.uu    w10, #0x0, w10
    20f6:	00 00 54    	sub.w     w8, w0, w0
    20f8:	81 80 5c    	subb.w    w9, w1, w1
    20fa:	02 01 5d    	subb.w    w10, w2, w2
    20fc:	83 81 5d    	subb.w    w11, w3, w3
    20fe:	18 00 20    	mov.w     #0x1, w8
    2100:	15 00 07    	rcall     0x212c <L0>
    2102:	08 00 3d    	bra       GE, 0x2114 <.L16>
    2104:	18 00 07    	rcall     0x2136 <.LPA1>
    2106:	00 04 eb    	clr.w     w8
    2108:	05 00 37    	bra       0x2114 <.L16>

0000210a <.L15>:
    210a:	00 04 eb    	clr.w     w8
    210c:	0f 00 07    	rcall     0x212c <L0>
    210e:	02 00 3d    	bra       GE, 0x2114 <.L16>
    2110:	12 00 07    	rcall     0x2136 <.LPA1>
    2112:	18 00 20    	mov.w     #0x1, w8

00002114 <.L16>:
    2114:	dc ff 07    	rcall     0x20ce <___udivdi3>
    2116:	08 00 e0    	cp0.w     w8
    2118:	06 00 32    	bra       Z, 0x2126 <.L17>
    211a:	60 22 b8    	mul.uu    w4, #0x0, w4
    211c:	60 33 b8    	mul.uu    w6, #0x0, w6
    211e:	00 00 52    	sub.w     w4, w0, w0
    2120:	81 80 5a    	subb.w    w5, w1, w1
    2122:	02 01 5b    	subb.w    w6, w2, w2
    2124:	83 81 5b    	subb.w    w7, w3, w3

00002126 <.L17>:
    2126:	4f 05 be    	mov.d     [--w15], w10
    2128:	4f 04 be    	mov.d     [--w15], w8
    212a:	00 00 06    	return    

0000212c <L0>:
    212c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    212e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2130:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2132:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2134:	00 00 06    	return    

00002136 <.LPA1>:
    2136:	60 44 b8    	mul.uu    w8, #0x0, w8
    2138:	60 55 b8    	mul.uu    w10, #0x0, w10
    213a:	04 02 54    	sub.w     w8, w4, w4
    213c:	85 82 5c    	subb.w    w9, w5, w5
    213e:	06 03 5d    	subb.w    w10, w6, w6
    2140:	87 83 5d    	subb.w    w11, w7, w7
    2142:	00 00 06    	return    

00002144 <___moddi3>:
    2144:	88 9f be    	mov.d     w8, [w15++]
    2146:	8a 9f be    	mov.d     w10, [w15++]
    2148:	8c 1f 78    	mov.w     w12, [w15++]
    214a:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    214c:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    214e:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    2150:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    2152:	0d 00 3d    	bra       GE, 0x216e <.L21>
    2154:	60 44 b8    	mul.uu    w8, #0x0, w8
    2156:	60 55 b8    	mul.uu    w10, #0x0, w10
    2158:	00 00 54    	sub.w     w8, w0, w0
    215a:	81 80 5c    	subb.w    w9, w1, w1
    215c:	02 01 5d    	subb.w    w10, w2, w2
    215e:	83 81 5d    	subb.w    w11, w3, w3
    2160:	1c 00 20    	mov.w     #0x1, w12
    2162:	08 20 e1    	cp.w      w4, w8
    2164:	09 a8 e1    	cpb.w     w5, w9
    2166:	0a b0 e1    	cpb.w     w6, w10
    2168:	0b b8 e1    	cpb.w     w7, w11
    216a:	0d 00 3d    	bra       GE, 0x2186 <.L22>
    216c:	08 00 37    	bra       0x217e <.L26>

0000216e <.L21>:
    216e:	00 06 eb    	clr.w     w12
    2170:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2172:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    2174:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    2176:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    2178:	06 00 3d    	bra       GE, 0x2186 <.L22>
    217a:	60 44 b8    	mul.uu    w8, #0x0, w8
    217c:	60 55 b8    	mul.uu    w10, #0x0, w10

0000217e <.L26>:
    217e:	04 02 54    	sub.w     w8, w4, w4
    2180:	85 82 5c    	subb.w    w9, w5, w5
    2182:	06 03 5d    	subb.w    w10, w6, w6
    2184:	87 83 5d    	subb.w    w11, w7, w7

00002186 <.L22>:
    2186:	aa ff 07    	rcall     0x20dc <___umoddi3>
    2188:	0c 00 e0    	cp0.w     w12
    218a:	06 00 32    	bra       Z, 0x2198 <.L23>
    218c:	60 22 b8    	mul.uu    w4, #0x0, w4
    218e:	60 33 b8    	mul.uu    w6, #0x0, w6
    2190:	00 00 52    	sub.w     w4, w0, w0
    2192:	81 80 5a    	subb.w    w5, w1, w1
    2194:	02 01 5b    	subb.w    w6, w2, w2
    2196:	83 81 5b    	subb.w    w7, w3, w3

00002198 <.L23>:
    2198:	4f 06 78    	mov.w     [--w15], w12
    219a:	4f 05 be    	mov.d     [--w15], w10
    219c:	4f 04 be    	mov.d     [--w15], w8
    219e:	00 00 06    	return    

000021a0 <___muldi3>:
    21a0:	88 9f be    	mov.d     w8, [w15++]
    21a2:	8a 9f be    	mov.d     w10, [w15++]
    21a4:	8c 1f 78    	mov.w     w12, [w15++]
    21a6:	00 06 eb    	clr.w     w12
    21a8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    21aa:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    21ac:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    21ae:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    21b0:	07 00 3d    	bra       GE, 0x21c0 <.L2>
    21b2:	60 44 b8    	mul.uu    w8, #0x0, w8
    21b4:	60 55 b8    	mul.uu    w10, #0x0, w10
    21b6:	00 00 54    	sub.w     w8, w0, w0
    21b8:	81 80 5c    	subb.w    w9, w1, w1
    21ba:	02 01 5d    	subb.w    w10, w2, w2
    21bc:	83 81 5d    	subb.w    w11, w3, w3
    21be:	1c 00 20    	mov.w     #0x1, w12

000021c0 <.L2>:
    21c0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    21c2:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    21c4:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    21c6:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    21c8:	07 00 3d    	bra       GE, 0x21d8 <.L3>
    21ca:	60 44 b8    	mul.uu    w8, #0x0, w8
    21cc:	60 55 b8    	mul.uu    w10, #0x0, w10
    21ce:	04 02 54    	sub.w     w8, w4, w4
    21d0:	85 82 5c    	subb.w    w9, w5, w5
    21d2:	06 03 5d    	subb.w    w10, w6, w6
    21d4:	87 83 5d    	subb.w    w11, w7, w7
    21d6:	0c 00 a2    	btg.w     w12, #0x0

000021d8 <.L3>:
    21d8:	0c 00 07    	rcall     0x21f2 <___umuldi3>
    21da:	0c 00 e0    	cp0.w     w12
    21dc:	06 00 32    	bra       Z, 0x21ea <.L4>
    21de:	60 22 b8    	mul.uu    w4, #0x0, w4
    21e0:	60 33 b8    	mul.uu    w6, #0x0, w6
    21e2:	00 00 52    	sub.w     w4, w0, w0
    21e4:	81 80 5a    	subb.w    w5, w1, w1
    21e6:	02 01 5b    	subb.w    w6, w2, w2
    21e8:	83 81 5b    	subb.w    w7, w3, w3

000021ea <.L4>:
    21ea:	4f 06 78    	mov.w     [--w15], w12
    21ec:	4f 05 be    	mov.d     [--w15], w10
    21ee:	4f 04 be    	mov.d     [--w15], w8
    21f0:	00 00 06    	return    

000021f2 <___umuldi3>:
    21f2:	88 9f be    	mov.d     w8, [w15++]
    21f4:	8a 9f be    	mov.d     w10, [w15++]
    21f6:	8c 9f be    	mov.d     w12, [w15++]
    21f8:	04 04 b8    	mul.uu    w0, w4, w8
    21fa:	05 06 b8    	mul.uu    w0, w5, w12
    21fc:	89 04 46    	add.w     w12, w9, w9
    21fe:	60 85 4e    	addc.w    w13, #0x0, w10
    2200:	06 06 b8    	mul.uu    w0, w6, w12
    2202:	0a 05 46    	add.w     w12, w10, w10
    2204:	e0 85 4e    	addc.w    w13, #0x0, w11
    2206:	07 06 b8    	mul.uu    w0, w7, w12
    2208:	8b 05 46    	add.w     w12, w11, w11
    220a:	04 0e b8    	mul.uu    w1, w4, w12
    220c:	89 04 46    	add.w     w12, w9, w9
    220e:	0a 85 4e    	addc.w    w13, w10, w10
    2210:	e0 85 4d    	addc.w    w11, #0x0, w11
    2212:	05 0e b8    	mul.uu    w1, w5, w12
    2214:	0a 05 46    	add.w     w12, w10, w10
    2216:	8b 85 4e    	addc.w    w13, w11, w11
    2218:	06 0e b8    	mul.uu    w1, w6, w12
    221a:	8b 05 46    	add.w     w12, w11, w11
    221c:	04 16 b8    	mul.uu    w2, w4, w12
    221e:	0a 05 46    	add.w     w12, w10, w10
    2220:	8b 85 4e    	addc.w    w13, w11, w11
    2222:	05 16 b8    	mul.uu    w2, w5, w12
    2224:	8b 05 46    	add.w     w12, w11, w11
    2226:	04 1e b8    	mul.uu    w3, w4, w12
    2228:	8b 05 46    	add.w     w12, w11, w11
    222a:	08 00 be    	mov.d     w8, w0
    222c:	0a 01 be    	mov.d     w10, w2
    222e:	4f 06 be    	mov.d     [--w15], w12
    2230:	4f 05 be    	mov.d     [--w15], w10
    2232:	4f 04 be    	mov.d     [--w15], w8
    2234:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	46 39 04    	goto      0x3946 <__T1Interrupt>
    1026:	00 00 00 
    1028:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	74 39 04    	goto      0x3974 <__T2Interrupt>
    1032:	00 00 00 
    1034:	a2 39 04    	goto      0x39a2 <__T3Interrupt>
    1036:	00 00 00 
    1038:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	c8 24 04    	goto      0x24c8 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	9a 24 04    	goto      0x249a <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	d0 39 04    	goto      0x39d0 <__T4Interrupt>
    1072:	00 00 00 
    1074:	fe 39 04    	goto      0x39fe <__T5Interrupt>
    1076:	00 00 00 
    1078:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	24 25 04    	goto      0x2524 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	f6 24 04    	goto      0x24f6 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	80 25 04    	goto      0x2580 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	52 25 04    	goto      0x2552 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	c6 38 04    	goto      0x38c6 <__USB1Interrupt>
    10ee:	00 00 00 
    10f0:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	dc 25 04    	goto      0x25dc <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	ae 25 04    	goto      0x25ae <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	84 48 04    	goto      0x4884 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a236 <.LC0-0x62>:
    a236:	12 01       	.word 0x112
    a238:	00 02       	.word 0x200
    a23a:	00 00       	.word 0
    a23c:	00 40       	.word 0x4000
    a23e:	66 66       	.word 0x6666
    a240:	03 00       	.word 0x3
    a242:	00 00       	.word 0
    a244:	01 02       	.word 0x201
    a246:	00 01       	.word 0x100
    a248:	09 02       	.word 0x209
    a24a:	12 00       	.word 0x12
    a24c:	01 01       	.word 0x101
    a24e:	00 a0       	.word 0xa000
    a250:	32 09       	.word 0x932
    a252:	04 00       	.word 0x4
    a254:	00 00       	.word 0
    a256:	ff 00       	.word 0xff
    a258:	ff 00       	.word 0xff
    a25a:	04 03       	.word 0x304
    a25c:	09 04       	.word 0x409
    a25e:	1a 03       	.word 0x31a
    a260:	4f 00       	.word 0x4f
    a262:	6c 00       	.word 0x6c
    a264:	69 00       	.word 0x69
    a266:	6e 00       	.word 0x6e
    a268:	20 00       	.word 0x20
    a26a:	43 00       	.word 0x43
    a26c:	6f 00       	.word 0x6f
    a26e:	6c 00       	.word 0x6c
    a270:	6c 00       	.word 0x6c
    a272:	65 00       	.word 0x65
    a274:	67 00       	.word 0x67
    a276:	65 00       	.word 0x65
    a278:	20 03       	.word 0x320
    a27a:	50 00       	.word 0x50
    a27c:	49 00       	.word 0x49
    a27e:	43 00       	.word 0x43
    a280:	32 00       	.word 0x32
    a282:	34 00       	.word 0x34
    a284:	46 00       	.word 0x46
    a286:	4a 00       	.word 0x4a
    a288:	31 00       	.word 0x31
    a28a:	32 00       	.word 0x32
    a28c:	38 00       	.word 0x38
    a28e:	47 00       	.word 0x47
    a290:	42 00       	.word 0x42
    a292:	32 00       	.word 0x32
    a294:	30 00       	.word 0x30
    a296:	36 00       	.word 0x36

0000a298 <.LC0>:
    a298:	25 30       	.word 0x3025
    a29a:	31 78       	.word 0x7831
    a29c:	25 30       	.word 0x3025
    a29e:	31 78       	.word 0x7831
    a2a0:	0d 00       	.word 0xd
Disassembly of section .text:

000022a2 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    22a2:	04 00 fa    	lnk       #0x4
    22a4:	00 0f 78    	mov.w     w0, [w14]
    22a6:	21 47 98    	mov.b     w1, [w14+2]

000022a8 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    22a8:	00 00 00    	nop       

000022aa <.L2>:
    22aa:	1e 00 78    	mov.w     [w14], w0
    22ac:	10 00 90    	mov.w     [w0+2], w0
    22ae:	90 00 78    	mov.w     [w0], w1
    22b0:	00 20 20    	mov.w     #0x200, w0
    22b2:	00 80 60    	and.w     w1, w0, w0
    22b4:	00 00 e0    	cp0.w     w0
    22b6:	f9 ff 3a    	bra       NZ, 0x22aa <.L2>

000022b8 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    22b8:	1e 00 78    	mov.w     [w14], w0
    22ba:	20 00 90    	mov.w     [w0+4], w0
    22bc:	ae 40 90    	mov.b     [w14+2], w1
    22be:	81 80 fb    	ze        w1, w1
    22c0:	01 08 78    	mov.w     w1, [w0]

000022c2 <.LSM3>:
}
    22c2:	00 80 fa    	ulnk      
    22c4:	00 00 06    	return    

000022c6 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    22c6:	02 00 fa    	lnk       #0x2
    22c8:	00 0f 78    	mov.w     w0, [w14]

000022ca <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    22ca:	00 00 00    	nop       

000022cc <.L4>:
    22cc:	1e 00 78    	mov.w     [w14], w0
    22ce:	10 00 90    	mov.w     [w0+2], w0
    22d0:	10 00 78    	mov.w     [w0], w0
    22d2:	61 00 60    	and.w     w0, #0x1, w0
    22d4:	00 00 e0    	cp0.w     w0
    22d6:	fa ff 32    	bra       Z, 0x22cc <.L4>

000022d8 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    22d8:	1e 00 78    	mov.w     [w14], w0
    22da:	30 00 90    	mov.w     [w0+6], w0
    22dc:	10 00 78    	mov.w     [w0], w0
    22de:	00 40 78    	mov.b     w0, w0

000022e0 <.LSM7>:
}
    22e0:	00 80 fa    	ulnk      
    22e2:	00 00 06    	return    

000022e4 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    22e4:	04 00 fa    	lnk       #0x4
    22e6:	00 0f 78    	mov.w     w0, [w14]
    22e8:	21 47 98    	mov.b     w1, [w14+2]

000022ea <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    22ea:	00 00 00    	nop       

000022ec <.L6>:
    22ec:	1e 00 78    	mov.w     [w14], w0
    22ee:	d0 10 90    	mov.w     [w0+42], w1
    22f0:	1e 00 78    	mov.w     [w14], w0
    22f2:	20 10 90    	mov.w     [w0+36], w0
    22f4:	80 8f 50    	sub.w     w1, w0, [w15]
    22f6:	fa ff 32    	bra       Z, 0x22ec <.L6>

000022f8 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    disable_interrupts();
    22f8:	ff 3f fc    	disi      #0x3fff

000022fa <.LSM11>:
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    22fa:	1e 00 78    	mov.w     [w14], w0
    22fc:	90 10 90    	mov.w     [w0+34], w1
    22fe:	1e 00 78    	mov.w     [w14], w0
    2300:	40 10 90    	mov.w     [w0+40], w0
    2302:	00 80 40    	add.w     w1, w0, w0
    2304:	ae 40 90    	mov.b     [w14+2], w1
    2306:	01 48 78    	mov.b     w1, [w0]

00002308 <.LSM12>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    2308:	1e 00 78    	mov.w     [w14], w0
    230a:	40 10 90    	mov.w     [w0+40], w0
    230c:	80 00 e8    	inc.w     w0, w1
    230e:	1e 00 78    	mov.w     [w14], w0
    2310:	20 10 90    	mov.w     [w0+36], w0
    2312:	00 01 78    	mov.w     w0, w2
    2314:	11 00 09    	repeat    #0x11
    2316:	82 80 d8    	div.uw    w1, w2
    2318:	80 00 fd    	exch      w0, w1
    231a:	80 00 78    	mov.w     w0, w1
    231c:	1e 00 78    	mov.w     [w14], w0
    231e:	41 10 98    	mov.w     w1, [w0+40]

00002320 <.LSM13>:
    self->TXbuffer.count++;
    2320:	1e 00 78    	mov.w     [w14], w0
    2322:	50 10 90    	mov.w     [w0+42], w0
    2324:	80 00 e8    	inc.w     w0, w1
    2326:	1e 00 78    	mov.w     [w14], w0
    2328:	51 10 98    	mov.w     w1, [w0+42]

0000232a <.LSM14>:
    enable_interrupts();
    232a:	52 20 ef    	clr.w     0x52

0000232c <.LSM15>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    232c:	1e 00 78    	mov.w     [w14], w0
    232e:	d0 10 90    	mov.w     [w0+42], w1
    2330:	1e 00 78    	mov.w     [w14], w0
    2332:	30 18 90    	mov.w     [w0+54], w0
    2334:	80 8f 50    	sub.w     w1, w0, [w15]
    2336:	08 00 39    	bra       NC, 0x2348 <.L5>

00002338 <.LSM16>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    2338:	1e 00 78    	mov.w     [w14], w0
    233a:	10 00 90    	mov.w     [w0+2], w0
    233c:	9e 00 78    	mov.w     [w14], w1
    233e:	91 00 90    	mov.w     [w1+2], w1
    2340:	11 01 78    	mov.w     [w1], w2
    2342:	01 40 20    	mov.w     #0x400, w1
    2344:	82 80 70    	ior.w     w1, w2, w1
    2346:	01 08 78    	mov.w     w1, [w0]

00002348 <.L5>:
                                                    // transmission
}
    2348:	00 80 fa    	ulnk      
    234a:	00 00 06    	return    

0000234c <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    234c:	04 00 fa    	lnk       #0x4
    234e:	10 07 98    	mov.w     w0, [w14+2]

00002350 <.LSM19>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2350:	1e 00 90    	mov.w     [w14+2], w0
    2352:	50 00 90    	mov.w     [w0+10], w0
    2354:	9e 00 90    	mov.w     [w14+2], w1
    2356:	d1 00 90    	mov.w     [w1+10], w1
    2358:	11 01 78    	mov.w     [w1], w2
    235a:	9e 00 90    	mov.w     [w14+2], w1
    235c:	e1 48 90    	mov.b     [w1+14], w1
    235e:	81 80 fb    	ze        w1, w1
    2360:	13 00 20    	mov.w     #0x1, w3
    2362:	81 18 dd    	sl.w      w3, w1, w1
    2364:	81 80 ea    	com.w     w1, w1
    2366:	81 00 61    	and.w     w2, w1, w1
    2368:	01 08 78    	mov.w     w1, [w0]

0000236a <.LSM20>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    236a:	1e 00 90    	mov.w     [w14+2], w0
    236c:	50 10 90    	mov.w     [w0+42], w0
    236e:	00 00 e0    	cp0.w     w0
    2370:	27 00 3a    	bra       NZ, 0x23c0 <.L13>

00002372 <.LSM21>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    2372:	1e 00 90    	mov.w     [w14+2], w0
    2374:	10 00 90    	mov.w     [w0+2], w0
    2376:	9e 00 90    	mov.w     [w14+2], w1
    2378:	91 00 90    	mov.w     [w1+2], w1
    237a:	11 01 78    	mov.w     [w1], w2
    237c:	f1 bf 2f    	mov.w     #0xfbff, w1
    237e:	81 00 61    	and.w     w2, w1, w1
    2380:	01 08 78    	mov.w     w1, [w0]

00002382 <.LSM22>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    2382:	1f 00 37    	bra       0x23c2 <.L10>

00002384 <.L12>:
        disable_interrupts();
    2384:	ff 3f fc    	disi      #0x3fff

00002386 <.LSM24>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    2386:	1e 00 90    	mov.w     [w14+2], w0
    2388:	90 10 90    	mov.w     [w0+34], w1
    238a:	1e 00 90    	mov.w     [w14+2], w0
    238c:	30 10 90    	mov.w     [w0+38], w0
    238e:	00 80 40    	add.w     w1, w0, w0
    2390:	10 4f 78    	mov.b     [w0], [w14]

00002392 <.LSM25>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    2392:	1e 00 90    	mov.w     [w14+2], w0
    2394:	30 10 90    	mov.w     [w0+38], w0
    2396:	80 00 e8    	inc.w     w0, w1
    2398:	1e 00 90    	mov.w     [w14+2], w0
    239a:	20 10 90    	mov.w     [w0+36], w0
    239c:	00 01 78    	mov.w     w0, w2
    239e:	11 00 09    	repeat    #0x11
    23a0:	82 80 d8    	div.uw    w1, w2
    23a2:	80 00 fd    	exch      w0, w1
    23a4:	80 00 78    	mov.w     w0, w1
    23a6:	1e 00 90    	mov.w     [w14+2], w0
    23a8:	31 10 98    	mov.w     w1, [w0+38]

000023aa <.LSM26>:
        self->TXbuffer.count--;
    23aa:	1e 00 90    	mov.w     [w14+2], w0
    23ac:	50 10 90    	mov.w     [w0+42], w0
    23ae:	80 00 e9    	dec.w     w0, w1
    23b0:	1e 00 90    	mov.w     [w14+2], w0
    23b2:	51 10 98    	mov.w     w1, [w0+42]

000023b4 <.LSM27>:
        enable_interrupts();
    23b4:	52 20 ef    	clr.w     0x52

000023b6 <.LSM28>:
        *(self->UxTXREG) = (uint16_t)ch;
    23b6:	1e 00 90    	mov.w     [w14+2], w0
    23b8:	20 00 90    	mov.w     [w0+4], w0
    23ba:	9e 80 fb    	ze        [w14], w1
    23bc:	01 08 78    	mov.w     w1, [w0]
    23be:	01 00 37    	bra       0x23c2 <.L10>

000023c0 <.L13>:
    23c0:	00 00 00    	nop       

000023c2 <.L10>:
    23c2:	1e 00 90    	mov.w     [w14+2], w0
    23c4:	10 00 90    	mov.w     [w0+2], w0
    23c6:	90 00 78    	mov.w     [w0], w1
    23c8:	00 20 20    	mov.w     #0x200, w0
    23ca:	00 80 60    	and.w     w1, w0, w0
    23cc:	00 00 e0    	cp0.w     w0
    23ce:	04 00 3a    	bra       NZ, 0x23d8 <.L8>
    23d0:	1e 00 90    	mov.w     [w14+2], w0
    23d2:	50 10 90    	mov.w     [w0+42], w0
    23d4:	00 00 e0    	cp0.w     w0
    23d6:	d6 ff 3a    	bra       NZ, 0x2384 <.L12>

000023d8 <.L8>:
    }
}
    23d8:	00 80 fa    	ulnk      
    23da:	00 00 06    	return    

000023dc <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    23dc:	04 00 fa    	lnk       #0x4
    23de:	10 07 98    	mov.w     w0, [w14+2]

000023e0 <.LSM32>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    23e0:	00 00 00    	nop       

000023e2 <.L15>:
    23e2:	1e 00 90    	mov.w     [w14+2], w0
    23e4:	20 18 90    	mov.w     [w0+52], w0
    23e6:	00 00 e0    	cp0.w     w0
    23e8:	fc ff 32    	bra       Z, 0x23e2 <.L15>

000023ea <.LSM33>:
    disable_interrupts();
    23ea:	ff 3f fc    	disi      #0x3fff

000023ec <.LSM34>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    23ec:	1e 00 90    	mov.w     [w14+2], w0
    23ee:	e0 10 90    	mov.w     [w0+44], w1
    23f0:	1e 00 90    	mov.w     [w14+2], w0
    23f2:	00 18 90    	mov.w     [w0+48], w0
    23f4:	00 80 40    	add.w     w1, w0, w0
    23f6:	10 4f 78    	mov.b     [w0], [w14]

000023f8 <.LSM35>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    23f8:	1e 00 90    	mov.w     [w14+2], w0
    23fa:	00 18 90    	mov.w     [w0+48], w0
    23fc:	80 00 e8    	inc.w     w0, w1
    23fe:	1e 00 90    	mov.w     [w14+2], w0
    2400:	70 10 90    	mov.w     [w0+46], w0
    2402:	00 01 78    	mov.w     w0, w2
    2404:	11 00 09    	repeat    #0x11
    2406:	82 80 d8    	div.uw    w1, w2
    2408:	80 00 fd    	exch      w0, w1
    240a:	80 00 78    	mov.w     w0, w1
    240c:	1e 00 90    	mov.w     [w14+2], w0
    240e:	01 18 98    	mov.w     w1, [w0+48]

00002410 <.LSM36>:
    self->RXbuffer.count--;
    2410:	1e 00 90    	mov.w     [w14+2], w0
    2412:	20 18 90    	mov.w     [w0+52], w0
    2414:	80 00 e9    	dec.w     w0, w1
    2416:	1e 00 90    	mov.w     [w14+2], w0
    2418:	21 18 98    	mov.w     w1, [w0+52]

0000241a <.LSM37>:
    enable_interrupts();
    241a:	52 20 ef    	clr.w     0x52

0000241c <.LSM38>:
    return ch;
    241c:	1e 40 78    	mov.b     [w14], w0

0000241e <.LSM39>:
}
    241e:	00 80 fa    	ulnk      
    2420:	00 00 06    	return    

00002422 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    2422:	02 00 fa    	lnk       #0x2
    2424:	00 0f 78    	mov.w     w0, [w14]

00002426 <.LSM41>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2426:	1e 00 78    	mov.w     [w14], w0
    2428:	50 00 90    	mov.w     [w0+10], w0
    242a:	9e 00 78    	mov.w     [w14], w1
    242c:	d1 00 90    	mov.w     [w1+10], w1
    242e:	11 01 78    	mov.w     [w1], w2
    2430:	9e 00 78    	mov.w     [w14], w1
    2432:	f1 48 90    	mov.b     [w1+15], w1
    2434:	81 80 fb    	ze        w1, w1
    2436:	13 00 20    	mov.w     #0x1, w3
    2438:	81 18 dd    	sl.w      w3, w1, w1
    243a:	81 80 ea    	com.w     w1, w1
    243c:	81 00 61    	and.w     w2, w1, w1
    243e:	01 08 78    	mov.w     w1, [w0]

00002440 <.LSM42>:
    while ((bitread(self->UxSTA, 0)==1) && 
    2440:	1d 00 37    	bra       0x247c <.L17>

00002442 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        disable_interrupts();
    2442:	ff 3f fc    	disi      #0x3fff

00002444 <.LSM44>:
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    2444:	1e 00 78    	mov.w     [w14], w0
    2446:	e0 10 90    	mov.w     [w0+44], w1
    2448:	1e 00 78    	mov.w     [w14], w0
    244a:	10 18 90    	mov.w     [w0+50], w0
    244c:	00 80 40    	add.w     w1, w0, w0
    244e:	9e 00 78    	mov.w     [w14], w1
    2450:	b1 00 90    	mov.w     [w1+6], w1
    2452:	91 00 78    	mov.w     [w1], w1
    2454:	81 40 78    	mov.b     w1, w1
    2456:	01 48 78    	mov.b     w1, [w0]

00002458 <.LSM45>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    2458:	1e 00 78    	mov.w     [w14], w0
    245a:	10 18 90    	mov.w     [w0+50], w0
    245c:	80 00 e8    	inc.w     w0, w1
    245e:	1e 00 78    	mov.w     [w14], w0
    2460:	70 10 90    	mov.w     [w0+46], w0
    2462:	00 01 78    	mov.w     w0, w2
    2464:	11 00 09    	repeat    #0x11
    2466:	82 80 d8    	div.uw    w1, w2
    2468:	80 00 fd    	exch      w0, w1
    246a:	80 00 78    	mov.w     w0, w1
    246c:	1e 00 78    	mov.w     [w14], w0
    246e:	11 18 98    	mov.w     w1, [w0+50]

00002470 <.LSM46>:
        self->RXbuffer.count++;
    2470:	1e 00 78    	mov.w     [w14], w0
    2472:	20 18 90    	mov.w     [w0+52], w0
    2474:	80 00 e8    	inc.w     w0, w1
    2476:	1e 00 78    	mov.w     [w14], w0
    2478:	21 18 98    	mov.w     w1, [w0+52]

0000247a <.LSM47>:
        enable_interrupts();
    247a:	52 20 ef    	clr.w     0x52

0000247c <.L17>:
    247c:	1e 00 78    	mov.w     [w14], w0
    247e:	10 00 90    	mov.w     [w0+2], w0
    2480:	10 00 78    	mov.w     [w0], w0
    2482:	61 00 60    	and.w     w0, #0x1, w0
    2484:	00 40 78    	mov.b     w0, w0
    2486:	00 04 e0    	cp0.b     w0
    2488:	06 00 32    	bra       Z, 0x2496 <.L16>

0000248a <.LSM49>:
    248a:	1e 00 78    	mov.w     [w14], w0
    248c:	a0 18 90    	mov.w     [w0+52], w1
    248e:	1e 00 78    	mov.w     [w14], w0
    2490:	70 10 90    	mov.w     [w0+46], w0

00002492 <.LSM50>:
    2492:	80 8f 50    	sub.w     w1, w0, [w15]
    2494:	d6 ff 3a    	bra       NZ, 0x2442 <.L19>

00002496 <.L16>:
    }
}
    2496:	00 80 fa    	ulnk      
    2498:	00 00 06    	return    

0000249a <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    249a:	36 00 f8    	push      0x36
    249c:	80 9f be    	mov.d     w0, [w15++]
    249e:	82 9f be    	mov.d     w2, [w15++]
    24a0:	84 9f be    	mov.d     w4, [w15++]
    24a2:	86 9f be    	mov.d     w6, [w15++]
    24a4:	32 00 f8    	push      0x32
    24a6:	34 00 f8    	push      0x34
    24a8:	10 00 20    	mov.w     #0x1, w0
    24aa:	a0 01 88    	mov.w     w0, 0x34
    24ac:	00 20 20    	mov.w     #0x200, w0
    24ae:	90 01 88    	mov.w     w0, 0x32
    24b0:	00 00 fa    	lnk       #0x0

000024b2 <.LSM53>:
    __serviceTxInterrupt(&uart1);
    24b2:	c0 28 21    	mov.w     #0x128c, w0
    24b4:	4b ff 07    	rcall     0x234c <___serviceTxInterrupt>

000024b6 <.LSM54>:
}
    24b6:	00 80 fa    	ulnk      
    24b8:	34 00 f9    	pop       0x34
    24ba:	32 00 f9    	pop       0x32
    24bc:	4f 03 be    	mov.d     [--w15], w6
    24be:	4f 02 be    	mov.d     [--w15], w4
    24c0:	4f 01 be    	mov.d     [--w15], w2
    24c2:	4f 00 be    	mov.d     [--w15], w0
    24c4:	36 00 f9    	pop       0x36
    24c6:	00 40 06    	retfie    

000024c8 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    24c8:	36 00 f8    	push      0x36
    24ca:	80 9f be    	mov.d     w0, [w15++]
    24cc:	82 9f be    	mov.d     w2, [w15++]
    24ce:	84 9f be    	mov.d     w4, [w15++]
    24d0:	86 9f be    	mov.d     w6, [w15++]
    24d2:	32 00 f8    	push      0x32
    24d4:	34 00 f8    	push      0x34
    24d6:	10 00 20    	mov.w     #0x1, w0
    24d8:	a0 01 88    	mov.w     w0, 0x34
    24da:	00 20 20    	mov.w     #0x200, w0
    24dc:	90 01 88    	mov.w     w0, 0x32
    24de:	00 00 fa    	lnk       #0x0

000024e0 <.LSM56>:
    __serviceRxInterrupt(&uart1);
    24e0:	c0 28 21    	mov.w     #0x128c, w0
    24e2:	9f ff 07    	rcall     0x2422 <___serviceRxInterrupt>

000024e4 <.LSM57>:
}
    24e4:	00 80 fa    	ulnk      
    24e6:	34 00 f9    	pop       0x34
    24e8:	32 00 f9    	pop       0x32
    24ea:	4f 03 be    	mov.d     [--w15], w6
    24ec:	4f 02 be    	mov.d     [--w15], w4
    24ee:	4f 01 be    	mov.d     [--w15], w2
    24f0:	4f 00 be    	mov.d     [--w15], w0
    24f2:	36 00 f9    	pop       0x36
    24f4:	00 40 06    	retfie    

000024f6 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    24f6:	36 00 f8    	push      0x36
    24f8:	80 9f be    	mov.d     w0, [w15++]
    24fa:	82 9f be    	mov.d     w2, [w15++]
    24fc:	84 9f be    	mov.d     w4, [w15++]
    24fe:	86 9f be    	mov.d     w6, [w15++]
    2500:	32 00 f8    	push      0x32
    2502:	34 00 f8    	push      0x34
    2504:	10 00 20    	mov.w     #0x1, w0
    2506:	a0 01 88    	mov.w     w0, 0x34
    2508:	00 20 20    	mov.w     #0x200, w0
    250a:	90 01 88    	mov.w     w0, 0x32
    250c:	00 00 fa    	lnk       #0x0

0000250e <.LSM59>:
    __serviceTxInterrupt(&uart2);
    250e:	80 2c 21    	mov.w     #0x12c8, w0
    2510:	1d ff 07    	rcall     0x234c <___serviceTxInterrupt>

00002512 <.LSM60>:
}
    2512:	00 80 fa    	ulnk      
    2514:	34 00 f9    	pop       0x34
    2516:	32 00 f9    	pop       0x32
    2518:	4f 03 be    	mov.d     [--w15], w6
    251a:	4f 02 be    	mov.d     [--w15], w4
    251c:	4f 01 be    	mov.d     [--w15], w2
    251e:	4f 00 be    	mov.d     [--w15], w0
    2520:	36 00 f9    	pop       0x36
    2522:	00 40 06    	retfie    

00002524 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2524:	36 00 f8    	push      0x36
    2526:	80 9f be    	mov.d     w0, [w15++]
    2528:	82 9f be    	mov.d     w2, [w15++]
    252a:	84 9f be    	mov.d     w4, [w15++]
    252c:	86 9f be    	mov.d     w6, [w15++]
    252e:	32 00 f8    	push      0x32
    2530:	34 00 f8    	push      0x34
    2532:	10 00 20    	mov.w     #0x1, w0
    2534:	a0 01 88    	mov.w     w0, 0x34
    2536:	00 20 20    	mov.w     #0x200, w0
    2538:	90 01 88    	mov.w     w0, 0x32
    253a:	00 00 fa    	lnk       #0x0

0000253c <.LSM62>:
    __serviceRxInterrupt(&uart2);
    253c:	80 2c 21    	mov.w     #0x12c8, w0
    253e:	71 ff 07    	rcall     0x2422 <___serviceRxInterrupt>

00002540 <.LSM63>:
}
    2540:	00 80 fa    	ulnk      
    2542:	34 00 f9    	pop       0x34
    2544:	32 00 f9    	pop       0x32
    2546:	4f 03 be    	mov.d     [--w15], w6
    2548:	4f 02 be    	mov.d     [--w15], w4
    254a:	4f 01 be    	mov.d     [--w15], w2
    254c:	4f 00 be    	mov.d     [--w15], w0
    254e:	36 00 f9    	pop       0x36
    2550:	00 40 06    	retfie    

00002552 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    2552:	36 00 f8    	push      0x36
    2554:	80 9f be    	mov.d     w0, [w15++]
    2556:	82 9f be    	mov.d     w2, [w15++]
    2558:	84 9f be    	mov.d     w4, [w15++]
    255a:	86 9f be    	mov.d     w6, [w15++]
    255c:	32 00 f8    	push      0x32
    255e:	34 00 f8    	push      0x34
    2560:	10 00 20    	mov.w     #0x1, w0
    2562:	a0 01 88    	mov.w     w0, 0x34
    2564:	00 20 20    	mov.w     #0x200, w0
    2566:	90 01 88    	mov.w     w0, 0x32
    2568:	00 00 fa    	lnk       #0x0

0000256a <.LSM65>:
    __serviceTxInterrupt(&uart3);
    256a:	40 30 21    	mov.w     #0x1304, w0
    256c:	ef fe 07    	rcall     0x234c <___serviceTxInterrupt>

0000256e <.LSM66>:
}
    256e:	00 80 fa    	ulnk      
    2570:	34 00 f9    	pop       0x34
    2572:	32 00 f9    	pop       0x32
    2574:	4f 03 be    	mov.d     [--w15], w6
    2576:	4f 02 be    	mov.d     [--w15], w4
    2578:	4f 01 be    	mov.d     [--w15], w2
    257a:	4f 00 be    	mov.d     [--w15], w0
    257c:	36 00 f9    	pop       0x36
    257e:	00 40 06    	retfie    

00002580 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    2580:	36 00 f8    	push      0x36
    2582:	80 9f be    	mov.d     w0, [w15++]
    2584:	82 9f be    	mov.d     w2, [w15++]
    2586:	84 9f be    	mov.d     w4, [w15++]
    2588:	86 9f be    	mov.d     w6, [w15++]
    258a:	32 00 f8    	push      0x32
    258c:	34 00 f8    	push      0x34
    258e:	10 00 20    	mov.w     #0x1, w0
    2590:	a0 01 88    	mov.w     w0, 0x34
    2592:	00 20 20    	mov.w     #0x200, w0
    2594:	90 01 88    	mov.w     w0, 0x32
    2596:	00 00 fa    	lnk       #0x0

00002598 <.LSM68>:
    __serviceRxInterrupt(&uart3);
    2598:	40 30 21    	mov.w     #0x1304, w0
    259a:	43 ff 07    	rcall     0x2422 <___serviceRxInterrupt>

0000259c <.LSM69>:
}
    259c:	00 80 fa    	ulnk      
    259e:	34 00 f9    	pop       0x34
    25a0:	32 00 f9    	pop       0x32
    25a2:	4f 03 be    	mov.d     [--w15], w6
    25a4:	4f 02 be    	mov.d     [--w15], w4
    25a6:	4f 01 be    	mov.d     [--w15], w2
    25a8:	4f 00 be    	mov.d     [--w15], w0
    25aa:	36 00 f9    	pop       0x36
    25ac:	00 40 06    	retfie    

000025ae <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    25ae:	36 00 f8    	push      0x36
    25b0:	80 9f be    	mov.d     w0, [w15++]
    25b2:	82 9f be    	mov.d     w2, [w15++]
    25b4:	84 9f be    	mov.d     w4, [w15++]
    25b6:	86 9f be    	mov.d     w6, [w15++]
    25b8:	32 00 f8    	push      0x32
    25ba:	34 00 f8    	push      0x34
    25bc:	10 00 20    	mov.w     #0x1, w0
    25be:	a0 01 88    	mov.w     w0, 0x34
    25c0:	00 20 20    	mov.w     #0x200, w0
    25c2:	90 01 88    	mov.w     w0, 0x32
    25c4:	00 00 fa    	lnk       #0x0

000025c6 <.LSM71>:
    __serviceTxInterrupt(&uart4);
    25c6:	00 34 21    	mov.w     #0x1340, w0
    25c8:	c1 fe 07    	rcall     0x234c <___serviceTxInterrupt>

000025ca <.LSM72>:
}
    25ca:	00 80 fa    	ulnk      
    25cc:	34 00 f9    	pop       0x34
    25ce:	32 00 f9    	pop       0x32
    25d0:	4f 03 be    	mov.d     [--w15], w6
    25d2:	4f 02 be    	mov.d     [--w15], w4
    25d4:	4f 01 be    	mov.d     [--w15], w2
    25d6:	4f 00 be    	mov.d     [--w15], w0
    25d8:	36 00 f9    	pop       0x36
    25da:	00 40 06    	retfie    

000025dc <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    25dc:	36 00 f8    	push      0x36
    25de:	80 9f be    	mov.d     w0, [w15++]
    25e0:	82 9f be    	mov.d     w2, [w15++]
    25e2:	84 9f be    	mov.d     w4, [w15++]
    25e4:	86 9f be    	mov.d     w6, [w15++]
    25e6:	32 00 f8    	push      0x32
    25e8:	34 00 f8    	push      0x34
    25ea:	10 00 20    	mov.w     #0x1, w0
    25ec:	a0 01 88    	mov.w     w0, 0x34
    25ee:	00 20 20    	mov.w     #0x200, w0
    25f0:	90 01 88    	mov.w     w0, 0x32
    25f2:	00 00 fa    	lnk       #0x0

000025f4 <.LSM74>:
    __serviceRxInterrupt(&uart4);
    25f4:	00 34 21    	mov.w     #0x1340, w0
    25f6:	15 ff 07    	rcall     0x2422 <___serviceRxInterrupt>

000025f8 <.LSM75>:
}
    25f8:	00 80 fa    	ulnk      
    25fa:	34 00 f9    	pop       0x34
    25fc:	32 00 f9    	pop       0x32
    25fe:	4f 03 be    	mov.d     [--w15], w6
    2600:	4f 02 be    	mov.d     [--w15], w4
    2602:	4f 01 be    	mov.d     [--w15], w2
    2604:	4f 00 be    	mov.d     [--w15], w0
    2606:	36 00 f9    	pop       0x36
    2608:	00 40 06    	retfie    

0000260a <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    260a:	08 00 fa    	lnk       #0x8
    260c:	10 07 98    	mov.w     w0, [w14+2]
    260e:	21 07 98    	mov.w     w1, [w14+4]
    2610:	32 07 98    	mov.w     w2, [w14+6]

00002612 <.LSM77>:
    int16_t i;

    switch (handle) {
    2612:	1e 00 90    	mov.w     [w14+2], w0
    2614:	00 00 e0    	cp0.w     w0
    2616:	25 00 35    	bra       LT, 0x2662 <.L37>
    2618:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    261a:	03 00 34    	bra       LE, 0x2622 <.L30>
    261c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    261e:	11 00 32    	bra       Z, 0x2642 <.L31>

00002620 <.LSM78>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    2620:	21 00 37    	bra       0x2664 <.L34>

00002622 <.L30>:
    2622:	00 00 eb    	clr.w     w0
    2624:	00 0f 78    	mov.w     w0, [w14]
    2626:	08 00 37    	bra       0x2638 <.L32>

00002628 <.L33>:
    2628:	2e 00 90    	mov.w     [w14+4], w0
    262a:	90 40 78    	mov.b     [w0], w1
    262c:	2e 00 90    	mov.w     [w14+4], w0
    262e:	00 00 e8    	inc.w     w0, w0
    2630:	20 07 98    	mov.w     w0, [w14+4]
    2632:	80 42 80    	mov.w     0x850, w0
    2634:	19 04 07    	rcall     0x2e68 <_uart_putc>

00002636 <.LSM81>:
    2636:	1e 0f e8    	inc.w     [w14], [w14]

00002638 <.L32>:
    2638:	9e 00 78    	mov.w     [w14], w1
    263a:	3e 00 90    	mov.w     [w14+6], w0
    263c:	80 8f 50    	sub.w     w1, w0, [w15]
    263e:	f4 ff 39    	bra       NC, 0x2628 <.L33>

00002640 <.LSM82>:
    2640:	11 00 37    	bra       0x2664 <.L34>

00002642 <.L31>:
    2642:	00 00 eb    	clr.w     w0
    2644:	00 0f 78    	mov.w     w0, [w14]
    2646:	08 00 37    	bra       0x2658 <.L35>

00002648 <.L36>:
    2648:	2e 00 90    	mov.w     [w14+4], w0
    264a:	90 40 78    	mov.b     [w0], w1
    264c:	2e 00 90    	mov.w     [w14+4], w0
    264e:	00 00 e8    	inc.w     w0, w0
    2650:	20 07 98    	mov.w     w0, [w14+4]
    2652:	90 42 80    	mov.w     0x852, w0
    2654:	09 04 07    	rcall     0x2e68 <_uart_putc>

00002656 <.LSM85>:
    2656:	1e 0f e8    	inc.w     [w14], [w14]

00002658 <.L35>:
    2658:	9e 00 78    	mov.w     [w14], w1
    265a:	3e 00 90    	mov.w     [w14+6], w0
    265c:	80 8f 50    	sub.w     w1, w0, [w15]
    265e:	f4 ff 39    	bra       NC, 0x2648 <.L36>

00002660 <.LSM86>:
    2660:	01 00 37    	bra       0x2664 <.L34>

00002662 <.L37>:
    2662:	00 00 00    	nop       

00002664 <.L34>:
    }
    return len;
    2664:	3e 00 90    	mov.w     [w14+6], w0

00002666 <.LSM89>:
}
    2666:	00 80 fa    	ulnk      
    2668:	00 00 06    	return    

0000266a <_init_uart>:

void init_uart(void) {
    266a:	00 00 fa    	lnk       #0x0

0000266c <.LSM91>:
    init_pin();
    266c:	0a 0c 07    	rcall     0x3e82 <_init_pin>

0000266e <.LSM92>:

    // pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    // pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    //          (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    266e:	40 00 20    	mov.w     #0x4, w0
    2670:	80 1f 78    	mov.w     w0, [w15++]
    2672:	30 00 20    	mov.w     #0x3, w0
    2674:	80 1f 78    	mov.w     w0, [w15++]
    2676:	80 c0 b3    	mov.b     #0x8, w0
    2678:	80 1f 78    	mov.w     w0, [w15++]
    267a:	00 40 eb    	clr.b     w0
    267c:	80 1f 78    	mov.w     w0, [w15++]
    267e:	40 6a 20    	mov.w     #0x6a4, w0
    2680:	80 1f 78    	mov.w     w0, [w15++]
    2682:	40 6a 20    	mov.w     #0x6a4, w0
    2684:	80 1f 78    	mov.w     w0, [w15++]
    2686:	b0 c0 b3    	mov.b     #0xb, w0
    2688:	80 1f 78    	mov.w     w0, [w15++]
    268a:	c0 c0 b3    	mov.b     #0xc, w0
    268c:	80 1f 78    	mov.w     w0, [w15++]
    268e:	47 09 20    	mov.w     #0x94, w7
    2690:	46 08 20    	mov.w     #0x84, w6
    2692:	85 22 20    	mov.w     #0x228, w5
    2694:	64 22 20    	mov.w     #0x226, w4
    2696:	43 22 20    	mov.w     #0x224, w3
    2698:	22 22 20    	mov.w     #0x222, w2
    269a:	01 22 20    	mov.w     #0x220, w1
    269c:	c0 28 21    	mov.w     #0x128c, w0
    269e:	51 00 07    	rcall     0x2742 <_uart_init>
    26a0:	f0 87 57    	sub.w     w15, #0x10, w15

000026a2 <.LSM93>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    26a2:	60 00 20    	mov.w     #0x6, w0
    26a4:	80 1f 78    	mov.w     w0, [w15++]
    26a6:	50 00 20    	mov.w     #0x5, w0
    26a8:	80 1f 78    	mov.w     w0, [w15++]
    26aa:	80 c0 b3    	mov.b     #0x8, w0
    26ac:	80 1f 78    	mov.w     w0, [w15++]
    26ae:	00 40 eb    	clr.b     w0
    26b0:	80 1f 78    	mov.w     w0, [w15++]
    26b2:	60 6a 20    	mov.w     #0x6a6, w0
    26b4:	80 1f 78    	mov.w     w0, [w15++]
    26b6:	60 6a 20    	mov.w     #0x6a6, w0
    26b8:	80 1f 78    	mov.w     w0, [w15++]
    26ba:	e0 c0 b3    	mov.b     #0xe, w0
    26bc:	80 1f 78    	mov.w     w0, [w15++]
    26be:	f0 c0 b3    	mov.b     #0xf, w0
    26c0:	80 1f 78    	mov.w     w0, [w15++]
    26c2:	67 09 20    	mov.w     #0x96, w7
    26c4:	66 08 20    	mov.w     #0x86, w6
    26c6:	85 23 20    	mov.w     #0x238, w5
    26c8:	64 23 20    	mov.w     #0x236, w4
    26ca:	43 23 20    	mov.w     #0x234, w3
    26cc:	22 23 20    	mov.w     #0x232, w2
    26ce:	01 23 20    	mov.w     #0x230, w1
    26d0:	80 2c 21    	mov.w     #0x12c8, w0
    26d2:	37 00 07    	rcall     0x2742 <_uart_init>
    26d4:	f0 87 57    	sub.w     w15, #0x10, w15

000026d6 <.LSM94>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    26d6:	d0 01 20    	mov.w     #0x1d, w0
    26d8:	80 1f 78    	mov.w     w0, [w15++]
    26da:	c0 01 20    	mov.w     #0x1c, w0
    26dc:	80 1f 78    	mov.w     w0, [w15++]
    26de:	80 c0 b3    	mov.b     #0x8, w0
    26e0:	80 1f 78    	mov.w     w0, [w15++]
    26e2:	80 c0 b3    	mov.b     #0x8, w0
    26e4:	80 1f 78    	mov.w     w0, [w15++]
    26e6:	a0 6a 20    	mov.w     #0x6aa, w0
    26e8:	80 1f 78    	mov.w     w0, [w15++]
    26ea:	20 6a 20    	mov.w     #0x6a2, w0
    26ec:	80 1f 78    	mov.w     w0, [w15++]
    26ee:	20 c0 b3    	mov.b     #0x2, w0
    26f0:	80 1f 78    	mov.w     w0, [w15++]
    26f2:	30 c0 b3    	mov.b     #0x3, w0
    26f4:	80 1f 78    	mov.w     w0, [w15++]
    26f6:	e7 09 20    	mov.w     #0x9e, w7
    26f8:	e6 08 20    	mov.w     #0x8e, w6
    26fa:	85 25 20    	mov.w     #0x258, w5
    26fc:	64 25 20    	mov.w     #0x256, w4
    26fe:	43 25 20    	mov.w     #0x254, w3
    2700:	22 25 20    	mov.w     #0x252, w2
    2702:	01 25 20    	mov.w     #0x250, w1
    2704:	40 30 21    	mov.w     #0x1304, w0
    2706:	1d 00 07    	rcall     0x2742 <_uart_init>
    2708:	f0 87 57    	sub.w     w15, #0x10, w15

0000270a <.LSM95>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    270a:	f0 01 20    	mov.w     #0x1f, w0
    270c:	80 1f 78    	mov.w     w0, [w15++]
    270e:	e0 01 20    	mov.w     #0x1e, w0
    2710:	80 1f 78    	mov.w     w0, [w15++]
    2712:	80 c0 b3    	mov.b     #0x8, w0
    2714:	80 1f 78    	mov.w     w0, [w15++]
    2716:	00 40 eb    	clr.b     w0
    2718:	80 1f 78    	mov.w     w0, [w15++]
    271a:	60 6b 20    	mov.w     #0x6b6, w0
    271c:	80 1f 78    	mov.w     w0, [w15++]
    271e:	60 6b 20    	mov.w     #0x6b6, w0
    2720:	80 1f 78    	mov.w     w0, [w15++]
    2722:	80 c0 b3    	mov.b     #0x8, w0
    2724:	80 1f 78    	mov.w     w0, [w15++]
    2726:	90 c0 b3    	mov.b     #0x9, w0
    2728:	80 1f 78    	mov.w     w0, [w15++]
    272a:	e7 09 20    	mov.w     #0x9e, w7
    272c:	e6 08 20    	mov.w     #0x8e, w6
    272e:	85 2b 20    	mov.w     #0x2b8, w5
    2730:	64 2b 20    	mov.w     #0x2b6, w4
    2732:	43 2b 20    	mov.w     #0x2b4, w3
    2734:	22 2b 20    	mov.w     #0x2b2, w2
    2736:	01 2b 20    	mov.w     #0x2b0, w1
    2738:	00 34 21    	mov.w     #0x1340, w0
    273a:	03 00 07    	rcall     0x2742 <_uart_init>
    273c:	f0 87 57    	sub.w     w15, #0x10, w15

0000273e <.LSM96>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    // uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    //           0, NULL, 0, NULL, 0);

    // _stdout = &uart1;
    // _stderr = &uart1;
}
    273e:	00 80 fa    	ulnk      
    2740:	00 00 06    	return    

00002742 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2742:	10 00 fa    	lnk       #0x10
    2744:	00 0f 78    	mov.w     w0, [w14]
    2746:	11 07 98    	mov.w     w1, [w14+2]
    2748:	22 07 98    	mov.w     w2, [w14+4]
    274a:	33 07 98    	mov.w     w3, [w14+6]
    274c:	44 07 98    	mov.w     w4, [w14+8]
    274e:	55 07 98    	mov.w     w5, [w14+10]
    2750:	66 07 98    	mov.w     w6, [w14+12]
    2752:	77 07 98    	mov.w     w7, [w14+14]

00002754 <.LSM98>:
    self->UxMODE = UxMODE;
    2754:	1e 00 78    	mov.w     [w14], w0
    2756:	9e 00 90    	mov.w     [w14+2], w1
    2758:	01 08 78    	mov.w     w1, [w0]

0000275a <.LSM99>:
    self->UxSTA = UxSTA;
    275a:	1e 00 78    	mov.w     [w14], w0
    275c:	ae 00 90    	mov.w     [w14+4], w1
    275e:	11 00 98    	mov.w     w1, [w0+2]

00002760 <.LSM100>:
    self->UxTXREG = UxTXREG;
    2760:	1e 00 78    	mov.w     [w14], w0
    2762:	be 00 90    	mov.w     [w14+6], w1
    2764:	21 00 98    	mov.w     w1, [w0+4]

00002766 <.LSM101>:
    self->UxRXREG = UxRXREG;
    2766:	1e 00 78    	mov.w     [w14], w0
    2768:	ce 00 90    	mov.w     [w14+8], w1
    276a:	31 00 98    	mov.w     w1, [w0+6]

0000276c <.LSM102>:
    self->UxBRG = UxBRG;
    276c:	1e 00 78    	mov.w     [w14], w0
    276e:	de 00 90    	mov.w     [w14+10], w1
    2770:	41 00 98    	mov.w     w1, [w0+8]

00002772 <.LSM103>:
    self->IFSy = IFSy;
    2772:	1e 00 78    	mov.w     [w14], w0
    2774:	ee 00 90    	mov.w     [w14+12], w1
    2776:	51 00 98    	mov.w     w1, [w0+10]

00002778 <.LSM104>:
    self->IECy = IECy;
    2778:	1e 00 78    	mov.w     [w14], w0
    277a:	fe 00 90    	mov.w     [w14+14], w1
    277c:	61 00 98    	mov.w     w1, [w0+12]

0000277e <.LSM105>:
    self->UxTXIF = UxTXIF;
    277e:	1e 00 78    	mov.w     [w14], w0
    2780:	8e f8 97    	mov.b     [w14-8], w1
    2782:	61 48 98    	mov.b     w1, [w0+14]

00002784 <.LSM106>:
    self->UxRXIF = UxRXIF;
    2784:	1e 00 78    	mov.w     [w14], w0
    2786:	ee f0 97    	mov.b     [w14-10], w1
    2788:	71 48 98    	mov.b     w1, [w0+15]

0000278a <.LSM107>:
    self->RXrpinr = RXrpinr;
    278a:	1e 00 78    	mov.w     [w14], w0
    278c:	ae b8 97    	mov.w     [w14-12], w1
    278e:	01 08 98    	mov.w     w1, [w0+16]

00002790 <.LSM108>:
    self->CTSrpinr = CTSrpinr;
    2790:	1e 00 78    	mov.w     [w14], w0
    2792:	9e b8 97    	mov.w     [w14-14], w1
    2794:	11 08 98    	mov.w     w1, [w0+18]

00002796 <.LSM109>:
    self->RXrpshift = RXrpshift;
    2796:	1e 00 78    	mov.w     [w14], w0
    2798:	8e f0 97    	mov.b     [w14-16], w1
    279a:	41 50 98    	mov.b     w1, [w0+20]

0000279c <.LSM110>:
    self->CTSrpshift = CTSrpshift;
    279c:	1e 00 78    	mov.w     [w14], w0
    279e:	ee e8 97    	mov.b     [w14-18], w1
    27a0:	51 50 98    	mov.b     w1, [w0+21]

000027a2 <.LSM111>:
    self->TXrpnum = TXrpnum;
    27a2:	1e 00 78    	mov.w     [w14], w0
    27a4:	ee b0 97    	mov.w     [w14-20], w1
    27a6:	31 08 98    	mov.w     w1, [w0+22]

000027a8 <.LSM112>:
    self->RTSrpnum = RTSrpnum;
    27a8:	1e 00 78    	mov.w     [w14], w0
    27aa:	de b0 97    	mov.w     [w14-22], w1
    27ac:	41 08 98    	mov.w     w1, [w0+24]

000027ae <.LSM113>:
    self->TX = NULL;
    27ae:	1e 00 78    	mov.w     [w14], w0
    27b0:	80 00 eb    	clr.w     w1
    27b2:	51 08 98    	mov.w     w1, [w0+26]

000027b4 <.LSM114>:
    self->RX = NULL;
    27b4:	1e 00 78    	mov.w     [w14], w0
    27b6:	80 00 eb    	clr.w     w1
    27b8:	61 08 98    	mov.w     w1, [w0+28]

000027ba <.LSM115>:
    self->RTS = NULL;
    27ba:	1e 00 78    	mov.w     [w14], w0
    27bc:	80 00 eb    	clr.w     w1
    27be:	71 08 98    	mov.w     w1, [w0+30]

000027c0 <.LSM116>:
    self->CTS = NULL;
    27c0:	1e 00 78    	mov.w     [w14], w0
    27c2:	80 00 eb    	clr.w     w1
    27c4:	01 10 98    	mov.w     w1, [w0+32]

000027c6 <.LSM117>:
    self->TXbuffer.data = NULL;
    27c6:	1e 00 78    	mov.w     [w14], w0
    27c8:	80 00 eb    	clr.w     w1
    27ca:	11 10 98    	mov.w     w1, [w0+34]

000027cc <.LSM118>:
    self->TXbuffer.length = 0;
    27cc:	1e 00 78    	mov.w     [w14], w0
    27ce:	80 00 eb    	clr.w     w1
    27d0:	21 10 98    	mov.w     w1, [w0+36]

000027d2 <.LSM119>:
    self->TXbuffer.head = 0;
    27d2:	1e 00 78    	mov.w     [w14], w0
    27d4:	80 00 eb    	clr.w     w1
    27d6:	31 10 98    	mov.w     w1, [w0+38]

000027d8 <.LSM120>:
    self->TXbuffer.tail = 0;
    27d8:	1e 00 78    	mov.w     [w14], w0
    27da:	80 00 eb    	clr.w     w1
    27dc:	41 10 98    	mov.w     w1, [w0+40]

000027de <.LSM121>:
    self->TXbuffer.count = 0;
    27de:	1e 00 78    	mov.w     [w14], w0
    27e0:	80 00 eb    	clr.w     w1
    27e2:	51 10 98    	mov.w     w1, [w0+42]

000027e4 <.LSM122>:
    self->RXbuffer.data = NULL;
    27e4:	1e 00 78    	mov.w     [w14], w0
    27e6:	80 00 eb    	clr.w     w1
    27e8:	61 10 98    	mov.w     w1, [w0+44]

000027ea <.LSM123>:
    self->RXbuffer.length = 0;
    27ea:	1e 00 78    	mov.w     [w14], w0
    27ec:	80 00 eb    	clr.w     w1
    27ee:	71 10 98    	mov.w     w1, [w0+46]

000027f0 <.LSM124>:
    self->RXbuffer.head = 0;
    27f0:	1e 00 78    	mov.w     [w14], w0
    27f2:	80 00 eb    	clr.w     w1
    27f4:	01 18 98    	mov.w     w1, [w0+48]

000027f6 <.LSM125>:
    self->RXbuffer.tail = 0;
    27f6:	1e 00 78    	mov.w     [w14], w0
    27f8:	80 00 eb    	clr.w     w1
    27fa:	11 18 98    	mov.w     w1, [w0+50]

000027fc <.LSM126>:
    self->RXbuffer.count = 0;
    27fc:	1e 00 78    	mov.w     [w14], w0
    27fe:	80 00 eb    	clr.w     w1
    2800:	21 18 98    	mov.w     w1, [w0+52]

00002802 <.LSM127>:
    self->TXthreshold = 1;
    2802:	1e 00 78    	mov.w     [w14], w0
    2804:	11 00 20    	mov.w     #0x1, w1
    2806:	31 18 98    	mov.w     w1, [w0+54]

00002808 <.LSM128>:
    self->putc = NULL;
    2808:	1e 00 78    	mov.w     [w14], w0
    280a:	80 00 eb    	clr.w     w1
    280c:	41 18 98    	mov.w     w1, [w0+56]

0000280e <.LSM129>:
    self->getc = NULL;
    280e:	1e 00 78    	mov.w     [w14], w0
    2810:	80 00 eb    	clr.w     w1
    2812:	51 18 98    	mov.w     w1, [w0+58]

00002814 <.LSM130>:
}
    2814:	00 80 fa    	ulnk      
    2816:	00 00 06    	return    

00002818 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    2818:	10 00 fa    	lnk       #0x10
    281a:	88 1f 78    	mov.w     w8, [w15++]
    281c:	00 0f 78    	mov.w     w0, [w14]
    281e:	11 07 98    	mov.w     w1, [w14+2]
    2820:	22 07 98    	mov.w     w2, [w14+4]
    2822:	33 07 98    	mov.w     w3, [w14+6]
    2824:	44 07 98    	mov.w     w4, [w14+8]
    2826:	56 07 98    	mov.w     w6, [w14+10]
    2828:	67 07 98    	mov.w     w7, [w14+12]
    282a:	65 4f 98    	mov.b     w5, [w14+14]

0000282c <.LSM132>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    282c:	1e 00 78    	mov.w     [w14], w0
    282e:	10 00 78    	mov.w     [w0], w0
    2830:	80 00 eb    	clr.w     w1
    2832:	01 08 78    	mov.w     w1, [w0]

00002834 <.LSM133>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    2834:	1e 00 90    	mov.w     [w14+2], w0
    2836:	60 00 90    	mov.w     [w0+12], w0
    2838:	e1 0f 40    	add.w     w0, #0x1, [w15]
    283a:	0e 02 32    	bra       Z, 0x2c58 <.L73>
    283c:	2e 00 90    	mov.w     [w14+4], w0
    283e:	60 00 90    	mov.w     [w0+12], w0
    2840:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2842:	0c 02 32    	bra       Z, 0x2c5c <.L74>

00002844 <.LSM134>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    2844:	1e 00 90    	mov.w     [w14+2], w0
    2846:	00 08 90    	mov.w     [w0+16], w0
    2848:	00 00 e0    	cp0.w     w0
    284a:	69 00 3a    	bra       NZ, 0x291e <.L44>
    284c:	2e 00 90    	mov.w     [w14+4], w0
    284e:	00 08 90    	mov.w     [w0+16], w0
    2850:	00 00 e0    	cp0.w     w0
    2852:	65 00 3a    	bra       NZ, 0x291e <.L44>

00002854 <.LSM135>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    2854:	1e 00 90    	mov.w     [w14+2], w0
    2856:	7c 0c 07    	rcall     0x4150 <_pin_digitalOut>

00002858 <.LSM136>:
        pin_set(TX);
    2858:	1e 00 90    	mov.w     [w14+2], w0
    285a:	d7 0c 07    	rcall     0x420a <_pin_set>

0000285c <.LSM137>:
        pin_digitalIn(RX);
    285c:	2e 00 90    	mov.w     [w14+4], w0
    285e:	51 0c 07    	rcall     0x4102 <_pin_digitalIn>

00002860 <.LSM138>:
        self->TX = TX;
    2860:	1e 00 78    	mov.w     [w14], w0
    2862:	9e 00 90    	mov.w     [w14+2], w1
    2864:	51 08 98    	mov.w     w1, [w0+26]

00002866 <.LSM139>:
        TX->owner = (void *)self;
    2866:	1e 00 90    	mov.w     [w14+2], w0
    2868:	9e 00 78    	mov.w     [w14], w1
    286a:	01 08 98    	mov.w     w1, [w0+16]

0000286c <.LSM140>:
        TX->write = NULL;
    286c:	1e 00 90    	mov.w     [w14+2], w0
    286e:	80 00 eb    	clr.w     w1
    2870:	11 08 98    	mov.w     w1, [w0+18]

00002872 <.LSM141>:
        TX->read = NULL;
    2872:	1e 00 90    	mov.w     [w14+2], w0
    2874:	80 00 eb    	clr.w     w1
    2876:	21 08 98    	mov.w     w1, [w0+20]

00002878 <.LSM142>:
        self->RX = RX;
    2878:	1e 00 78    	mov.w     [w14], w0
    287a:	ae 00 90    	mov.w     [w14+4], w1
    287c:	61 08 98    	mov.w     w1, [w0+28]

0000287e <.LSM143>:
        RX->owner = (void *)self;
    287e:	2e 00 90    	mov.w     [w14+4], w0
    2880:	9e 00 78    	mov.w     [w14], w1
    2882:	01 08 98    	mov.w     w1, [w0+16]

00002884 <.LSM144>:
        RX->write = NULL;
    2884:	2e 00 90    	mov.w     [w14+4], w0
    2886:	80 00 eb    	clr.w     w1
    2888:	11 08 98    	mov.w     w1, [w0+18]

0000288a <.LSM145>:
        RX->read = NULL;
    288a:	2e 00 90    	mov.w     [w14+4], w0
    288c:	80 00 eb    	clr.w     w1
    288e:	21 08 98    	mov.w     w1, [w0+20]

00002890 <.LSM146>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2890:	11 3a 80    	mov.w     0x742, w1
    2892:	f0 0b 20    	mov.w     #0xbf, w0
    2894:	00 81 60    	and.w     w1, w0, w2
    2896:	60 04 20    	mov.w     #0x46, w0
    2898:	71 05 20    	mov.w     #0x57, w1
    289a:	23 74 20    	mov.w     #0x742, w3
    289c:	80 49 78    	mov.b     w0, [w3]
    289e:	81 49 78    	mov.b     w1, [w3]
    28a0:	82 49 78    	mov.b     w2, [w3]

000028a2 <.LSM147>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    28a2:	1e 00 90    	mov.w     [w14+2], w0
    28a4:	70 00 90    	mov.w     [w0+14], w0
    28a6:	9e 00 90    	mov.w     [w14+2], w1
    28a8:	f1 00 90    	mov.w     [w1+14], w1
    28aa:	11 01 78    	mov.w     [w1], w2
    28ac:	9e 00 90    	mov.w     [w14+2], w1
    28ae:	a1 48 90    	mov.b     [w1+10], w1
    28b0:	81 80 fb    	ze        w1, w1
    28b2:	f3 03 20    	mov.w     #0x3f, w3
    28b4:	81 18 dd    	sl.w      w3, w1, w1
    28b6:	81 80 ea    	com.w     w1, w1
    28b8:	81 00 61    	and.w     w2, w1, w1
    28ba:	01 08 78    	mov.w     w1, [w0]

000028bc <.LSM148>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    28bc:	1e 00 90    	mov.w     [w14+2], w0
    28be:	70 00 90    	mov.w     [w0+14], w0
    28c0:	9e 00 90    	mov.w     [w14+2], w1
    28c2:	f1 00 90    	mov.w     [w1+14], w1
    28c4:	11 01 78    	mov.w     [w1], w2
    28c6:	9e 00 78    	mov.w     [w14], w1
    28c8:	b1 09 90    	mov.w     [w1+22], w3
    28ca:	9e 00 90    	mov.w     [w14+2], w1
    28cc:	a1 48 90    	mov.b     [w1+10], w1
    28ce:	81 80 fb    	ze        w1, w1
    28d0:	81 18 dd    	sl.w      w3, w1, w1
    28d2:	82 80 70    	ior.w     w1, w2, w1
    28d4:	01 08 78    	mov.w     w1, [w0]

000028d6 <.LSM149>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    28d6:	1e 00 78    	mov.w     [w14], w0
    28d8:	00 08 90    	mov.w     [w0+16], w0
    28da:	9e 00 78    	mov.w     [w14], w1
    28dc:	81 08 90    	mov.w     [w1+16], w1
    28de:	11 01 78    	mov.w     [w1], w2
    28e0:	9e 00 78    	mov.w     [w14], w1
    28e2:	c1 50 90    	mov.b     [w1+20], w1
    28e4:	81 80 fb    	ze        w1, w1
    28e6:	f3 03 20    	mov.w     #0x3f, w3
    28e8:	81 18 dd    	sl.w      w3, w1, w1
    28ea:	81 80 ea    	com.w     w1, w1
    28ec:	81 00 61    	and.w     w2, w1, w1
    28ee:	01 08 78    	mov.w     w1, [w0]

000028f0 <.LSM150>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    28f0:	1e 00 78    	mov.w     [w14], w0
    28f2:	00 08 90    	mov.w     [w0+16], w0
    28f4:	9e 00 78    	mov.w     [w14], w1
    28f6:	81 08 90    	mov.w     [w1+16], w1
    28f8:	11 01 78    	mov.w     [w1], w2
    28fa:	ae 00 90    	mov.w     [w14+4], w1
    28fc:	e1 01 90    	mov.w     [w1+12], w3
    28fe:	9e 00 78    	mov.w     [w14], w1
    2900:	c1 50 90    	mov.b     [w1+20], w1
    2902:	81 80 fb    	ze        w1, w1
    2904:	81 18 dd    	sl.w      w3, w1, w1
    2906:	82 80 70    	ior.w     w1, w2, w1
    2908:	01 08 78    	mov.w     w1, [w0]

0000290a <.LSM151>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    290a:	11 3a 80    	mov.w     0x742, w1
    290c:	00 04 20    	mov.w     #0x40, w0
    290e:	01 01 70    	ior.w     w0, w1, w2
    2910:	60 04 20    	mov.w     #0x46, w0
    2912:	71 05 20    	mov.w     #0x57, w1
    2914:	23 74 20    	mov.w     #0x742, w3
    2916:	80 49 78    	mov.b     w0, [w3]
    2918:	81 49 78    	mov.b     w1, [w3]
    291a:	82 49 78    	mov.b     w2, [w3]
    291c:	0a 00 37    	bra       0x2932 <.L45>

0000291e <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    291e:	1e 00 78    	mov.w     [w14], w0
    2920:	d0 08 90    	mov.w     [w0+26], w1
    2922:	1e 00 90    	mov.w     [w14+2], w0
    2924:	80 8f 50    	sub.w     w1, w0, [w15]
    2926:	9c 01 3a    	bra       NZ, 0x2c60 <.L75>
    2928:	1e 00 78    	mov.w     [w14], w0
    292a:	e0 08 90    	mov.w     [w0+28], w1
    292c:	2e 00 90    	mov.w     [w14+4], w0
    292e:	80 8f 50    	sub.w     w1, w0, [w15]
    2930:	99 01 3a    	bra       NZ, 0x2c64 <.L76>

00002932 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    2932:	3e 00 90    	mov.w     [w14+6], w0
    2934:	00 00 e0    	cp0.w     w0
    2936:	87 00 32    	bra       Z, 0x2a46 <.L47>
    2938:	4e 00 90    	mov.w     [w14+8], w0
    293a:	00 00 e0    	cp0.w     w0
    293c:	84 00 32    	bra       Z, 0x2a46 <.L47>

0000293e <.LSM154>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    293e:	3e 00 90    	mov.w     [w14+6], w0
    2940:	60 00 90    	mov.w     [w0+12], w0
    2942:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2944:	91 01 32    	bra       Z, 0x2c68 <.L77>
    2946:	4e 00 90    	mov.w     [w14+8], w0
    2948:	60 00 90    	mov.w     [w0+12], w0
    294a:	e1 0f 40    	add.w     w0, #0x1, [w15]
    294c:	8f 01 32    	bra       Z, 0x2c6c <.L78>

0000294e <.LSM155>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    294e:	3e 00 90    	mov.w     [w14+6], w0
    2950:	00 08 90    	mov.w     [w0+16], w0
    2952:	00 00 e0    	cp0.w     w0
    2954:	69 00 3a    	bra       NZ, 0x2a28 <.L50>
    2956:	4e 00 90    	mov.w     [w14+8], w0
    2958:	00 08 90    	mov.w     [w0+16], w0
    295a:	00 00 e0    	cp0.w     w0
    295c:	65 00 3a    	bra       NZ, 0x2a28 <.L50>

0000295e <.LSM156>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    295e:	3e 00 90    	mov.w     [w14+6], w0
    2960:	f7 0b 07    	rcall     0x4150 <_pin_digitalOut>

00002962 <.LSM157>:
            pin_set(RTS);
    2962:	3e 00 90    	mov.w     [w14+6], w0
    2964:	52 0c 07    	rcall     0x420a <_pin_set>

00002966 <.LSM158>:
            pin_digitalIn(CTS);
    2966:	4e 00 90    	mov.w     [w14+8], w0
    2968:	cc 0b 07    	rcall     0x4102 <_pin_digitalIn>

0000296a <.LSM159>:
            self->RTS = RTS;
    296a:	1e 00 78    	mov.w     [w14], w0
    296c:	be 00 90    	mov.w     [w14+6], w1
    296e:	71 08 98    	mov.w     w1, [w0+30]

00002970 <.LSM160>:
            RTS->owner = (void *)self;
    2970:	3e 00 90    	mov.w     [w14+6], w0
    2972:	9e 00 78    	mov.w     [w14], w1
    2974:	01 08 98    	mov.w     w1, [w0+16]

00002976 <.LSM161>:
            RTS->write = NULL;
    2976:	3e 00 90    	mov.w     [w14+6], w0
    2978:	80 00 eb    	clr.w     w1
    297a:	11 08 98    	mov.w     w1, [w0+18]

0000297c <.LSM162>:
            RTS->read = NULL;
    297c:	3e 00 90    	mov.w     [w14+6], w0
    297e:	80 00 eb    	clr.w     w1
    2980:	21 08 98    	mov.w     w1, [w0+20]

00002982 <.LSM163>:
            self->CTS = CTS;
    2982:	1e 00 78    	mov.w     [w14], w0
    2984:	ce 00 90    	mov.w     [w14+8], w1
    2986:	01 10 98    	mov.w     w1, [w0+32]

00002988 <.LSM164>:
            CTS->owner = (void *)self;
    2988:	4e 00 90    	mov.w     [w14+8], w0
    298a:	9e 00 78    	mov.w     [w14], w1
    298c:	01 08 98    	mov.w     w1, [w0+16]

0000298e <.LSM165>:
            CTS->write = NULL;
    298e:	4e 00 90    	mov.w     [w14+8], w0
    2990:	80 00 eb    	clr.w     w1
    2992:	11 08 98    	mov.w     w1, [w0+18]

00002994 <.LSM166>:
            CTS->read = NULL;
    2994:	4e 00 90    	mov.w     [w14+8], w0
    2996:	80 00 eb    	clr.w     w1
    2998:	21 08 98    	mov.w     w1, [w0+20]

0000299a <.LSM167>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    299a:	11 3a 80    	mov.w     0x742, w1
    299c:	f0 0b 20    	mov.w     #0xbf, w0
    299e:	00 81 60    	and.w     w1, w0, w2
    29a0:	60 04 20    	mov.w     #0x46, w0
    29a2:	71 05 20    	mov.w     #0x57, w1
    29a4:	23 74 20    	mov.w     #0x742, w3
    29a6:	80 49 78    	mov.b     w0, [w3]
    29a8:	81 49 78    	mov.b     w1, [w3]
    29aa:	82 49 78    	mov.b     w2, [w3]

000029ac <.LSM168>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    29ac:	3e 00 90    	mov.w     [w14+6], w0
    29ae:	70 00 90    	mov.w     [w0+14], w0
    29b0:	be 00 90    	mov.w     [w14+6], w1
    29b2:	f1 00 90    	mov.w     [w1+14], w1
    29b4:	11 01 78    	mov.w     [w1], w2
    29b6:	be 00 90    	mov.w     [w14+6], w1
    29b8:	a1 48 90    	mov.b     [w1+10], w1
    29ba:	81 80 fb    	ze        w1, w1
    29bc:	f3 03 20    	mov.w     #0x3f, w3
    29be:	81 18 dd    	sl.w      w3, w1, w1
    29c0:	81 80 ea    	com.w     w1, w1
    29c2:	81 00 61    	and.w     w2, w1, w1
    29c4:	01 08 78    	mov.w     w1, [w0]

000029c6 <.LSM169>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    29c6:	3e 00 90    	mov.w     [w14+6], w0
    29c8:	70 00 90    	mov.w     [w0+14], w0
    29ca:	be 00 90    	mov.w     [w14+6], w1
    29cc:	f1 00 90    	mov.w     [w1+14], w1
    29ce:	11 01 78    	mov.w     [w1], w2
    29d0:	9e 00 78    	mov.w     [w14], w1
    29d2:	c1 09 90    	mov.w     [w1+24], w3
    29d4:	be 00 90    	mov.w     [w14+6], w1
    29d6:	a1 48 90    	mov.b     [w1+10], w1
    29d8:	81 80 fb    	ze        w1, w1
    29da:	81 18 dd    	sl.w      w3, w1, w1
    29dc:	82 80 70    	ior.w     w1, w2, w1
    29de:	01 08 78    	mov.w     w1, [w0]

000029e0 <.LSM170>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    29e0:	1e 00 78    	mov.w     [w14], w0
    29e2:	10 08 90    	mov.w     [w0+18], w0
    29e4:	9e 00 78    	mov.w     [w14], w1
    29e6:	91 08 90    	mov.w     [w1+18], w1
    29e8:	11 01 78    	mov.w     [w1], w2
    29ea:	9e 00 78    	mov.w     [w14], w1
    29ec:	d1 50 90    	mov.b     [w1+21], w1
    29ee:	81 80 fb    	ze        w1, w1
    29f0:	f3 03 20    	mov.w     #0x3f, w3
    29f2:	81 18 dd    	sl.w      w3, w1, w1
    29f4:	81 80 ea    	com.w     w1, w1
    29f6:	81 00 61    	and.w     w2, w1, w1
    29f8:	01 08 78    	mov.w     w1, [w0]

000029fa <.LSM171>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    29fa:	1e 00 78    	mov.w     [w14], w0
    29fc:	10 08 90    	mov.w     [w0+18], w0
    29fe:	9e 00 78    	mov.w     [w14], w1
    2a00:	91 08 90    	mov.w     [w1+18], w1
    2a02:	11 01 78    	mov.w     [w1], w2
    2a04:	ce 00 90    	mov.w     [w14+8], w1
    2a06:	e1 01 90    	mov.w     [w1+12], w3
    2a08:	9e 00 78    	mov.w     [w14], w1
    2a0a:	d1 50 90    	mov.b     [w1+21], w1
    2a0c:	81 80 fb    	ze        w1, w1
    2a0e:	81 18 dd    	sl.w      w3, w1, w1
    2a10:	82 80 70    	ior.w     w1, w2, w1
    2a12:	01 08 78    	mov.w     w1, [w0]

00002a14 <.LSM172>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    2a14:	11 3a 80    	mov.w     0x742, w1
    2a16:	00 04 20    	mov.w     #0x40, w0
    2a18:	01 01 70    	ior.w     w0, w1, w2
    2a1a:	60 04 20    	mov.w     #0x46, w0
    2a1c:	71 05 20    	mov.w     #0x57, w1
    2a1e:	23 74 20    	mov.w     #0x742, w3
    2a20:	80 49 78    	mov.b     w0, [w3]
    2a22:	81 49 78    	mov.b     w1, [w3]
    2a24:	82 49 78    	mov.b     w2, [w3]
    2a26:	0a 00 37    	bra       0x2a3c <.L51>

00002a28 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    2a28:	1e 00 78    	mov.w     [w14], w0
    2a2a:	f0 08 90    	mov.w     [w0+30], w1
    2a2c:	3e 00 90    	mov.w     [w14+6], w0
    2a2e:	80 8f 50    	sub.w     w1, w0, [w15]
    2a30:	1f 01 3a    	bra       NZ, 0x2c70 <.L79>
    2a32:	1e 00 78    	mov.w     [w14], w0
    2a34:	80 10 90    	mov.w     [w0+32], w1
    2a36:	4e 00 90    	mov.w     [w14+8], w0
    2a38:	80 8f 50    	sub.w     w1, w0, [w15]
    2a3a:	1c 01 3a    	bra       NZ, 0x2c74 <.L80>

00002a3c <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    2a3c:	1e 00 78    	mov.w     [w14], w0
    2a3e:	10 00 78    	mov.w     [w0], w0
    2a40:	01 20 20    	mov.w     #0x200, w1
    2a42:	01 08 78    	mov.w     w1, [w0]
    2a44:	06 00 37    	bra       0x2a52 <.L53>

00002a46 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    2a46:	3e 00 90    	mov.w     [w14+6], w0
    2a48:	00 00 e0    	cp0.w     w0
    2a4a:	16 01 3a    	bra       NZ, 0x2c78 <.L81>
    2a4c:	4e 00 90    	mov.w     [w14+8], w0
    2a4e:	00 00 e0    	cp0.w     w0
    2a50:	15 01 3a    	bra       NZ, 0x2c7c <.L82>

00002a52 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2a52:	18 c0 b3    	mov.b     #0x1, w8
    2a54:	02 40 22    	mov.w     #0x2400, w2
    2a56:	43 a7 24    	mov.w     #0x4a74, w3
    2a58:	5e 00 90    	mov.w     [w14+10], w0
    2a5a:	ee 00 90    	mov.w     [w14+12], w1
    2a5c:	7e f4 07    	rcall     0x135a <___gesf2>
    2a5e:	00 00 e0    	cp0.w     w0
    2a60:	01 00 3c    	bra       GT, 0x2a64 <.L55>
    2a62:	00 44 eb    	clr.b     w8

00002a64 <.L55>:
    2a64:	08 04 e0    	cp0.b     w8
    2a66:	04 00 32    	bra       Z, 0x2a70 <.L56>

00002a68 <.LSM177>:
        baudrate = FCY/4.;
    2a68:	00 40 22    	mov.w     #0x2400, w0
    2a6a:	41 a7 24    	mov.w     #0x4a74, w1
    2a6c:	50 07 98    	mov.w     w0, [w14+10]
    2a6e:	61 07 98    	mov.w     w1, [w14+12]

00002a70 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    2a70:	18 c0 b3    	mov.b     #0x1, w8
    2a72:	02 40 22    	mov.w     #0x2400, w2
    2a74:	43 17 24    	mov.w     #0x4174, w3
    2a76:	5e 00 90    	mov.w     [w14+10], w0
    2a78:	ee 00 90    	mov.w     [w14+12], w1
    2a7a:	6d f4 07    	rcall     0x1356 <___eqsf2>
    2a7c:	00 00 e0    	cp0.w     w0
    2a7e:	01 00 35    	bra       LT, 0x2a82 <.L57>
    2a80:	00 44 eb    	clr.b     w8

00002a82 <.L57>:
    2a82:	08 04 e0    	cp0.b     w8
    2a84:	04 00 32    	bra       Z, 0x2a8e <.L58>

00002a86 <.LSM179>:
        baudrate = FCY/(16.*65536.);
    2a86:	00 40 22    	mov.w     #0x2400, w0
    2a88:	41 17 24    	mov.w     #0x4174, w1
    2a8a:	50 07 98    	mov.w     w0, [w14+10]
    2a8c:	61 07 98    	mov.w     w1, [w14+12]

00002a8e <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2a8e:	18 c0 b3    	mov.b     #0x1, w8
    2a90:	02 40 22    	mov.w     #0x2400, w2
    2a92:	43 27 24    	mov.w     #0x4274, w3
    2a94:	5e 00 90    	mov.w     [w14+10], w0
    2a96:	ee 00 90    	mov.w     [w14+12], w1
    2a98:	5e f4 07    	rcall     0x1356 <___eqsf2>
    2a9a:	00 00 e0    	cp0.w     w0
    2a9c:	01 00 34    	bra       LE, 0x2aa0 <.L59>
    2a9e:	00 44 eb    	clr.b     w8

00002aa0 <.L59>:
    2aa0:	08 04 e0    	cp0.b     w8
    2aa2:	0f 00 32    	bra       Z, 0x2ac2 <.L60>

00002aa4 <.LSM181>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    2aa4:	1e 00 78    	mov.w     [w14], w0
    2aa6:	40 04 90    	mov.w     [w0+8], w8
    2aa8:	5e 01 90    	mov.w     [w14+10], w2
    2aaa:	ee 01 90    	mov.w     [w14+12], w3
    2aac:	00 40 22    	mov.w     #0x2400, w0
    2aae:	41 97 24    	mov.w     #0x4974, w1
    2ab0:	10 f4 07    	rcall     0x12d2 <___divsf3>
    2ab2:	02 00 20    	mov.w     #0x0, w2
    2ab4:	03 f0 23    	mov.w     #0x3f00, w3
    2ab6:	b0 f3 07    	rcall     0x1218 <___addsf3>
    2ab8:	52 f4 07    	rcall     0x135e <___fixunssfsi>
    2aba:	00 00 78    	mov.w     w0, w0
    2abc:	00 00 e9    	dec.w     w0, w0
    2abe:	00 0c 78    	mov.w     w0, [w8]
    2ac0:	15 00 37    	bra       0x2aec <.L61>

00002ac2 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2ac2:	1e 00 78    	mov.w     [w14], w0
    2ac4:	10 00 78    	mov.w     [w0], w0
    2ac6:	9e 00 78    	mov.w     [w14], w1
    2ac8:	91 00 78    	mov.w     [w1], w1
    2aca:	91 00 78    	mov.w     [w1], w1
    2acc:	01 30 a0    	bset.w    w1, #0x3
    2ace:	01 08 78    	mov.w     w1, [w0]

00002ad0 <.LSM183>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2ad0:	1e 00 78    	mov.w     [w14], w0
    2ad2:	40 04 90    	mov.w     [w0+8], w8
    2ad4:	5e 01 90    	mov.w     [w14+10], w2
    2ad6:	ee 01 90    	mov.w     [w14+12], w3
    2ad8:	00 40 22    	mov.w     #0x2400, w0
    2ada:	41 a7 24    	mov.w     #0x4a74, w1
    2adc:	fa f3 07    	rcall     0x12d2 <___divsf3>
    2ade:	02 00 20    	mov.w     #0x0, w2
    2ae0:	03 f0 23    	mov.w     #0x3f00, w3
    2ae2:	9a f3 07    	rcall     0x1218 <___addsf3>
    2ae4:	3c f4 07    	rcall     0x135e <___fixunssfsi>
    2ae6:	00 00 78    	mov.w     w0, w0
    2ae8:	00 00 e9    	dec.w     w0, w0
    2aea:	00 0c 78    	mov.w     w0, [w8]

00002aec <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2aec:	ee 48 90    	mov.b     [w14+14], w1
    2aee:	50 c4 b3    	mov.b     #0x45, w0
    2af0:	80 cf 50    	sub.b     w1, w0, [w15]
    2af2:	04 00 32    	bra       Z, 0x2afc <.L62>
    2af4:	ee 48 90    	mov.b     [w14+14], w1
    2af6:	50 c6 b3    	mov.b     #0x65, w0
    2af8:	80 cf 50    	sub.b     w1, w0, [w15]
    2afa:	08 00 3a    	bra       NZ, 0x2b0c <.L63>

00002afc <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2afc:	1e 00 78    	mov.w     [w14], w0
    2afe:	10 00 78    	mov.w     [w0], w0
    2b00:	9e 00 78    	mov.w     [w14], w1
    2b02:	91 00 78    	mov.w     [w1], w1
    2b04:	91 00 78    	mov.w     [w1], w1
    2b06:	01 10 a0    	bset.w    w1, #0x1
    2b08:	01 08 78    	mov.w     w1, [w0]
    2b0a:	18 00 37    	bra       0x2b3c <.L64>

00002b0c <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    2b0c:	ee 48 90    	mov.b     [w14+14], w1
    2b0e:	f0 c4 b3    	mov.b     #0x4f, w0
    2b10:	80 cf 50    	sub.b     w1, w0, [w15]
    2b12:	04 00 32    	bra       Z, 0x2b1c <.L65>
    2b14:	ee 48 90    	mov.b     [w14+14], w1
    2b16:	f0 c6 b3    	mov.b     #0x6f, w0
    2b18:	80 cf 50    	sub.b     w1, w0, [w15]
    2b1a:	08 00 3a    	bra       NZ, 0x2b2c <.L66>

00002b1c <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    2b1c:	1e 00 78    	mov.w     [w14], w0
    2b1e:	10 00 78    	mov.w     [w0], w0
    2b20:	9e 00 78    	mov.w     [w14], w1
    2b22:	91 00 78    	mov.w     [w1], w1
    2b24:	91 00 78    	mov.w     [w1], w1
    2b26:	01 20 a0    	bset.w    w1, #0x2
    2b28:	01 08 78    	mov.w     w1, [w0]
    2b2a:	08 00 37    	bra       0x2b3c <.L64>

00002b2c <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    2b2c:	ee 48 90    	mov.b     [w14+14], w1
    2b2e:	e0 c4 b3    	mov.b     #0x4e, w0
    2b30:	80 cf 50    	sub.b     w1, w0, [w15]
    2b32:	04 00 32    	bra       Z, 0x2b3c <.L64>
    2b34:	ee 48 90    	mov.b     [w14+14], w1
    2b36:	e0 c6 b3    	mov.b     #0x6e, w0
    2b38:	80 cf 50    	sub.b     w1, w0, [w15]
    2b3a:	a2 00 3a    	bra       NZ, 0x2c80 <.L83>

00002b3c <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    2b3c:	4e b8 97    	mov.w     [w14-8], w0
    2b3e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    2b40:	08 00 3a    	bra       NZ, 0x2b52 <.L67>

00002b42 <.LSM190>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2b42:	1e 00 78    	mov.w     [w14], w0
    2b44:	10 00 78    	mov.w     [w0], w0
    2b46:	9e 00 78    	mov.w     [w14], w1
    2b48:	91 00 78    	mov.w     [w1], w1
    2b4a:	91 00 78    	mov.w     [w1], w1
    2b4c:	01 00 a0    	bset.w    w1, #0x0
    2b4e:	01 08 78    	mov.w     w1, [w0]
    2b50:	03 00 37    	bra       0x2b58 <.L68>

00002b52 <.L67>:
    } else if (stopbits!=1) {
    2b52:	4e b8 97    	mov.w     [w14-8], w0
    2b54:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2b56:	96 00 3a    	bra       NZ, 0x2c84 <.L84>

00002b58 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    2b58:	2e b8 97    	mov.w     [w14-12], w0
    2b5a:	00 00 e0    	cp0.w     w0
    2b5c:	04 00 3a    	bra       NZ, 0x2b66 <.L69>

00002b5e <.LSM193>:
        self->putc = __putc_nobuffer;
    2b5e:	1e 00 78    	mov.w     [w14], w0
    2b60:	21 2a 22    	mov.w     #0x22a2, w1
    2b62:	41 18 98    	mov.w     w1, [w0+56]
    2b64:	36 00 37    	bra       0x2bd2 <.L70>

00002b66 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2b66:	1e 00 78    	mov.w     [w14], w0
    2b68:	10 00 90    	mov.w     [w0+2], w0
    2b6a:	9e 00 78    	mov.w     [w14], w1
    2b6c:	91 00 90    	mov.w     [w1+2], w1
    2b6e:	11 01 78    	mov.w     [w1], w2
    2b70:	01 00 22    	mov.w     #0x2000, w1
    2b72:	82 80 70    	ior.w     w1, w2, w1
    2b74:	01 08 78    	mov.w     w1, [w0]

00002b76 <.LSM195>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2b76:	1e 00 78    	mov.w     [w14], w0
    2b78:	ae b8 97    	mov.w     [w14-12], w1
    2b7a:	11 10 98    	mov.w     w1, [w0+34]

00002b7c <.LSM196>:
        self->TXbuffer.length = TXbufferlen;
    2b7c:	1e 00 78    	mov.w     [w14], w0
    2b7e:	9e b8 97    	mov.w     [w14-14], w1
    2b80:	21 10 98    	mov.w     w1, [w0+36]

00002b82 <.LSM197>:
        self->TXbuffer.head = 0;
    2b82:	1e 00 78    	mov.w     [w14], w0
    2b84:	80 00 eb    	clr.w     w1
    2b86:	31 10 98    	mov.w     w1, [w0+38]

00002b88 <.LSM198>:
        self->TXbuffer.tail = 0;
    2b88:	1e 00 78    	mov.w     [w14], w0
    2b8a:	80 00 eb    	clr.w     w1
    2b8c:	41 10 98    	mov.w     w1, [w0+40]

00002b8e <.LSM199>:
        self->TXbuffer.count = 0;
    2b8e:	1e 00 78    	mov.w     [w14], w0
    2b90:	80 00 eb    	clr.w     w1
    2b92:	51 10 98    	mov.w     w1, [w0+42]

00002b94 <.LSM200>:
        self->TXthreshold = TXthreshold;
    2b94:	1e 00 78    	mov.w     [w14], w0
    2b96:	be b8 97    	mov.w     [w14-10], w1
    2b98:	31 18 98    	mov.w     w1, [w0+54]

00002b9a <.LSM201>:
        self->putc = __putc_buffer;
    2b9a:	1e 00 78    	mov.w     [w14], w0
    2b9c:	41 2e 22    	mov.w     #0x22e4, w1
    2b9e:	41 18 98    	mov.w     w1, [w0+56]

00002ba0 <.LSM202>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2ba0:	1e 00 78    	mov.w     [w14], w0
    2ba2:	50 00 90    	mov.w     [w0+10], w0
    2ba4:	9e 00 78    	mov.w     [w14], w1
    2ba6:	d1 00 90    	mov.w     [w1+10], w1
    2ba8:	11 01 78    	mov.w     [w1], w2
    2baa:	9e 00 78    	mov.w     [w14], w1
    2bac:	e1 48 90    	mov.b     [w1+14], w1
    2bae:	81 80 fb    	ze        w1, w1
    2bb0:	13 00 20    	mov.w     #0x1, w3
    2bb2:	81 18 dd    	sl.w      w3, w1, w1
    2bb4:	81 80 ea    	com.w     w1, w1
    2bb6:	81 00 61    	and.w     w2, w1, w1
    2bb8:	01 08 78    	mov.w     w1, [w0]

00002bba <.LSM203>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2bba:	1e 00 78    	mov.w     [w14], w0
    2bbc:	60 00 90    	mov.w     [w0+12], w0
    2bbe:	9e 00 78    	mov.w     [w14], w1
    2bc0:	e1 00 90    	mov.w     [w1+12], w1
    2bc2:	11 01 78    	mov.w     [w1], w2
    2bc4:	9e 00 78    	mov.w     [w14], w1
    2bc6:	e1 48 90    	mov.b     [w1+14], w1
    2bc8:	81 80 fb    	ze        w1, w1
    2bca:	13 00 20    	mov.w     #0x1, w3
    2bcc:	81 18 dd    	sl.w      w3, w1, w1
    2bce:	82 80 70    	ior.w     w1, w2, w1
    2bd0:	01 08 78    	mov.w     w1, [w0]

00002bd2 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    2bd2:	0e b8 97    	mov.w     [w14-16], w0
    2bd4:	00 00 e0    	cp0.w     w0
    2bd6:	04 00 3a    	bra       NZ, 0x2be0 <.L71>

00002bd8 <.LSM205>:
        self->getc = __getc_nobuffer;
    2bd8:	1e 00 78    	mov.w     [w14], w0
    2bda:	61 2c 22    	mov.w     #0x22c6, w1
    2bdc:	51 18 98    	mov.w     w1, [w0+58]
    2bde:	2b 00 37    	bra       0x2c36 <.L72>

00002be0 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    2be0:	1e 00 78    	mov.w     [w14], w0
    2be2:	8e b8 97    	mov.w     [w14-16], w1
    2be4:	61 10 98    	mov.w     w1, [w0+44]

00002be6 <.LSM207>:
        self->RXbuffer.length = RXbufferlen;
    2be6:	1e 00 78    	mov.w     [w14], w0
    2be8:	fe b0 97    	mov.w     [w14-18], w1
    2bea:	71 10 98    	mov.w     w1, [w0+46]

00002bec <.LSM208>:
        self->RXbuffer.head = 0;
    2bec:	1e 00 78    	mov.w     [w14], w0
    2bee:	80 00 eb    	clr.w     w1
    2bf0:	01 18 98    	mov.w     w1, [w0+48]

00002bf2 <.LSM209>:
        self->RXbuffer.tail = 0;
    2bf2:	1e 00 78    	mov.w     [w14], w0
    2bf4:	80 00 eb    	clr.w     w1
    2bf6:	11 18 98    	mov.w     w1, [w0+50]

00002bf8 <.LSM210>:
        self->RXbuffer.count = 0;
    2bf8:	1e 00 78    	mov.w     [w14], w0
    2bfa:	80 00 eb    	clr.w     w1
    2bfc:	21 18 98    	mov.w     w1, [w0+52]

00002bfe <.LSM211>:
        self->getc = __getc_buffer;
    2bfe:	1e 00 78    	mov.w     [w14], w0
    2c00:	c1 3d 22    	mov.w     #0x23dc, w1
    2c02:	51 18 98    	mov.w     w1, [w0+58]

00002c04 <.LSM212>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2c04:	1e 00 78    	mov.w     [w14], w0
    2c06:	50 00 90    	mov.w     [w0+10], w0
    2c08:	9e 00 78    	mov.w     [w14], w1
    2c0a:	d1 00 90    	mov.w     [w1+10], w1
    2c0c:	11 01 78    	mov.w     [w1], w2
    2c0e:	9e 00 78    	mov.w     [w14], w1
    2c10:	f1 48 90    	mov.b     [w1+15], w1
    2c12:	81 80 fb    	ze        w1, w1
    2c14:	13 00 20    	mov.w     #0x1, w3
    2c16:	81 18 dd    	sl.w      w3, w1, w1
    2c18:	81 80 ea    	com.w     w1, w1
    2c1a:	81 00 61    	and.w     w2, w1, w1
    2c1c:	01 08 78    	mov.w     w1, [w0]

00002c1e <.LSM213>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    2c1e:	1e 00 78    	mov.w     [w14], w0
    2c20:	60 00 90    	mov.w     [w0+12], w0
    2c22:	9e 00 78    	mov.w     [w14], w1
    2c24:	e1 00 90    	mov.w     [w1+12], w1
    2c26:	11 01 78    	mov.w     [w1], w2
    2c28:	9e 00 78    	mov.w     [w14], w1
    2c2a:	f1 48 90    	mov.b     [w1+15], w1
    2c2c:	81 80 fb    	ze        w1, w1
    2c2e:	13 00 20    	mov.w     #0x1, w3
    2c30:	81 18 dd    	sl.w      w3, w1, w1
    2c32:	82 80 70    	ior.w     w1, w2, w1
    2c34:	01 08 78    	mov.w     w1, [w0]

00002c36 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    2c36:	1e 00 78    	mov.w     [w14], w0
    2c38:	10 00 78    	mov.w     [w0], w0
    2c3a:	9e 00 78    	mov.w     [w14], w1
    2c3c:	91 00 78    	mov.w     [w1], w1
    2c3e:	11 01 78    	mov.w     [w1], w2
    2c40:	01 00 28    	mov.w     #0x8000, w1
    2c42:	82 80 70    	ior.w     w1, w2, w1
    2c44:	01 08 78    	mov.w     w1, [w0]

00002c46 <.LSM215>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    2c46:	1e 00 78    	mov.w     [w14], w0
    2c48:	10 00 90    	mov.w     [w0+2], w0
    2c4a:	9e 00 78    	mov.w     [w14], w1
    2c4c:	91 00 90    	mov.w     [w1+2], w1
    2c4e:	11 01 78    	mov.w     [w1], w2
    2c50:	01 40 20    	mov.w     #0x400, w1
    2c52:	82 80 70    	ior.w     w1, w2, w1
    2c54:	01 08 78    	mov.w     w1, [w0]
    2c56:	17 00 37    	bra       0x2c86 <.L40>

00002c58 <.L73>:
    2c58:	00 00 00    	nop       
    2c5a:	15 00 37    	bra       0x2c86 <.L40>

00002c5c <.L74>:
    2c5c:	00 00 00    	nop       
    2c5e:	13 00 37    	bra       0x2c86 <.L40>

00002c60 <.L75>:
    2c60:	00 00 00    	nop       
    2c62:	11 00 37    	bra       0x2c86 <.L40>

00002c64 <.L76>:
    2c64:	00 00 00    	nop       
    2c66:	0f 00 37    	bra       0x2c86 <.L40>

00002c68 <.L77>:
    2c68:	00 00 00    	nop       
    2c6a:	0d 00 37    	bra       0x2c86 <.L40>

00002c6c <.L78>:
    2c6c:	00 00 00    	nop       
    2c6e:	0b 00 37    	bra       0x2c86 <.L40>

00002c70 <.L79>:
    2c70:	00 00 00    	nop       
    2c72:	09 00 37    	bra       0x2c86 <.L40>

00002c74 <.L80>:
    2c74:	00 00 00    	nop       
    2c76:	07 00 37    	bra       0x2c86 <.L40>

00002c78 <.L81>:
    2c78:	00 00 00    	nop       
    2c7a:	05 00 37    	bra       0x2c86 <.L40>

00002c7c <.L82>:
    2c7c:	00 00 00    	nop       
    2c7e:	03 00 37    	bra       0x2c86 <.L40>

00002c80 <.L83>:
    2c80:	00 00 00    	nop       
    2c82:	01 00 37    	bra       0x2c86 <.L40>

00002c84 <.L84>:
    2c84:	00 00 00    	nop       

00002c86 <.L40>:
}
    2c86:	4f 04 78    	mov.w     [--w15], w8
    2c88:	00 80 fa    	ulnk      
    2c8a:	00 00 06    	return    

00002c8c <_uart_close>:

void uart_close(_UART *self) {
    2c8c:	02 00 fa    	lnk       #0x2
    2c8e:	00 0f 78    	mov.w     w0, [w14]

00002c90 <.LSM225>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2c90:	1e 00 78    	mov.w     [w14], w0
    2c92:	10 00 90    	mov.w     [w0+2], w0
    2c94:	9e 00 78    	mov.w     [w14], w1
    2c96:	91 00 90    	mov.w     [w1+2], w1
    2c98:	11 01 78    	mov.w     [w1], w2
    2c9a:	f1 bf 2f    	mov.w     #0xfbff, w1
    2c9c:	81 00 61    	and.w     w2, w1, w1
    2c9e:	01 08 78    	mov.w     w1, [w0]

00002ca0 <.LSM226>:
    *(self->UxMODE) = 0;        // Disable UART module
    2ca0:	1e 00 78    	mov.w     [w14], w0
    2ca2:	10 00 78    	mov.w     [w0], w0
    2ca4:	80 00 eb    	clr.w     w1
    2ca6:	01 08 78    	mov.w     w1, [w0]

00002ca8 <.LSM227>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    2ca8:	1e 00 78    	mov.w     [w14], w0
    2caa:	60 00 90    	mov.w     [w0+12], w0
    2cac:	9e 00 78    	mov.w     [w14], w1
    2cae:	e1 00 90    	mov.w     [w1+12], w1
    2cb0:	11 01 78    	mov.w     [w1], w2
    2cb2:	9e 00 78    	mov.w     [w14], w1
    2cb4:	e1 48 90    	mov.b     [w1+14], w1
    2cb6:	81 80 fb    	ze        w1, w1
    2cb8:	13 00 20    	mov.w     #0x1, w3
    2cba:	81 18 dd    	sl.w      w3, w1, w1
    2cbc:	81 80 ea    	com.w     w1, w1
    2cbe:	81 00 61    	and.w     w2, w1, w1
    2cc0:	01 08 78    	mov.w     w1, [w0]

00002cc2 <.LSM228>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2cc2:	1e 00 78    	mov.w     [w14], w0
    2cc4:	60 00 90    	mov.w     [w0+12], w0
    2cc6:	9e 00 78    	mov.w     [w14], w1
    2cc8:	e1 00 90    	mov.w     [w1+12], w1
    2cca:	11 01 78    	mov.w     [w1], w2
    2ccc:	9e 00 78    	mov.w     [w14], w1
    2cce:	f1 48 90    	mov.b     [w1+15], w1
    2cd0:	81 80 fb    	ze        w1, w1
    2cd2:	13 00 20    	mov.w     #0x1, w3
    2cd4:	81 18 dd    	sl.w      w3, w1, w1
    2cd6:	81 80 ea    	com.w     w1, w1
    2cd8:	81 00 61    	and.w     w2, w1, w1
    2cda:	01 08 78    	mov.w     w1, [w0]

00002cdc <.LSM229>:
    self->putc = NULL;
    2cdc:	1e 00 78    	mov.w     [w14], w0
    2cde:	80 00 eb    	clr.w     w1
    2ce0:	41 18 98    	mov.w     w1, [w0+56]

00002ce2 <.LSM230>:
    self->getc = NULL;
    2ce2:	1e 00 78    	mov.w     [w14], w0
    2ce4:	80 00 eb    	clr.w     w1
    2ce6:	51 18 98    	mov.w     w1, [w0+58]

00002ce8 <.LSM231>:
    if (self->TX) {
    2ce8:	1e 00 78    	mov.w     [w14], w0
    2cea:	50 08 90    	mov.w     [w0+26], w0
    2cec:	00 00 e0    	cp0.w     w0
    2cee:	2f 00 32    	bra       Z, 0x2d4e <.L86>

00002cf0 <.LSM232>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2cf0:	11 3a 80    	mov.w     0x742, w1
    2cf2:	f0 0b 20    	mov.w     #0xbf, w0
    2cf4:	00 81 60    	and.w     w1, w0, w2
    2cf6:	60 04 20    	mov.w     #0x46, w0
    2cf8:	71 05 20    	mov.w     #0x57, w1
    2cfa:	23 74 20    	mov.w     #0x742, w3
    2cfc:	80 49 78    	mov.b     w0, [w3]
    2cfe:	81 49 78    	mov.b     w1, [w3]
    2d00:	82 49 78    	mov.b     w2, [w3]

00002d02 <.LSM233>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2d02:	1e 00 78    	mov.w     [w14], w0
    2d04:	50 08 90    	mov.w     [w0+26], w0
    2d06:	70 00 90    	mov.w     [w0+14], w0
    2d08:	9e 00 78    	mov.w     [w14], w1
    2d0a:	d1 08 90    	mov.w     [w1+26], w1
    2d0c:	f1 00 90    	mov.w     [w1+14], w1
    2d0e:	11 01 78    	mov.w     [w1], w2
    2d10:	9e 00 78    	mov.w     [w14], w1
    2d12:	d1 08 90    	mov.w     [w1+26], w1
    2d14:	a1 48 90    	mov.b     [w1+10], w1
    2d16:	81 80 fb    	ze        w1, w1
    2d18:	f3 03 20    	mov.w     #0x3f, w3
    2d1a:	81 18 dd    	sl.w      w3, w1, w1
    2d1c:	81 80 ea    	com.w     w1, w1
    2d1e:	81 00 61    	and.w     w2, w1, w1
    2d20:	01 08 78    	mov.w     w1, [w0]

00002d22 <.LSM234>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2d22:	11 3a 80    	mov.w     0x742, w1
    2d24:	00 04 20    	mov.w     #0x40, w0
    2d26:	01 01 70    	ior.w     w0, w1, w2
    2d28:	60 04 20    	mov.w     #0x46, w0
    2d2a:	71 05 20    	mov.w     #0x57, w1
    2d2c:	23 74 20    	mov.w     #0x742, w3
    2d2e:	80 49 78    	mov.b     w0, [w3]
    2d30:	81 49 78    	mov.b     w1, [w3]
    2d32:	82 49 78    	mov.b     w2, [w3]

00002d34 <.LSM235>:
        self->TX->owner = NULL;
    2d34:	1e 00 78    	mov.w     [w14], w0
    2d36:	50 08 90    	mov.w     [w0+26], w0
    2d38:	80 00 eb    	clr.w     w1
    2d3a:	01 08 98    	mov.w     w1, [w0+16]

00002d3c <.LSM236>:
        pin_digitalOut(self->TX);
    2d3c:	1e 00 78    	mov.w     [w14], w0
    2d3e:	50 08 90    	mov.w     [w0+26], w0
    2d40:	07 0a 07    	rcall     0x4150 <_pin_digitalOut>

00002d42 <.LSM237>:
        pin_set(self->TX);
    2d42:	1e 00 78    	mov.w     [w14], w0
    2d44:	50 08 90    	mov.w     [w0+26], w0
    2d46:	61 0a 07    	rcall     0x420a <_pin_set>

00002d48 <.LSM238>:
        self->TX = NULL;
    2d48:	1e 00 78    	mov.w     [w14], w0
    2d4a:	80 00 eb    	clr.w     w1
    2d4c:	51 08 98    	mov.w     w1, [w0+26]

00002d4e <.L86>:
    }
    if (self->RX) {
    2d4e:	1e 00 78    	mov.w     [w14], w0
    2d50:	60 08 90    	mov.w     [w0+28], w0
    2d52:	00 00 e0    	cp0.w     w0
    2d54:	28 00 32    	bra       Z, 0x2da6 <.L87>

00002d56 <.LSM240>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2d56:	11 3a 80    	mov.w     0x742, w1
    2d58:	f0 0b 20    	mov.w     #0xbf, w0
    2d5a:	00 81 60    	and.w     w1, w0, w2
    2d5c:	60 04 20    	mov.w     #0x46, w0
    2d5e:	71 05 20    	mov.w     #0x57, w1
    2d60:	23 74 20    	mov.w     #0x742, w3
    2d62:	80 49 78    	mov.b     w0, [w3]
    2d64:	81 49 78    	mov.b     w1, [w3]
    2d66:	82 49 78    	mov.b     w2, [w3]

00002d68 <.LSM241>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2d68:	1e 00 78    	mov.w     [w14], w0
    2d6a:	00 08 90    	mov.w     [w0+16], w0
    2d6c:	9e 00 78    	mov.w     [w14], w1
    2d6e:	81 08 90    	mov.w     [w1+16], w1
    2d70:	11 01 78    	mov.w     [w1], w2
    2d72:	9e 00 78    	mov.w     [w14], w1
    2d74:	c1 50 90    	mov.b     [w1+20], w1
    2d76:	81 80 fb    	ze        w1, w1
    2d78:	f3 03 20    	mov.w     #0x3f, w3
    2d7a:	81 18 dd    	sl.w      w3, w1, w1
    2d7c:	82 80 70    	ior.w     w1, w2, w1
    2d7e:	01 08 78    	mov.w     w1, [w0]

00002d80 <.LSM242>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2d80:	11 3a 80    	mov.w     0x742, w1
    2d82:	00 04 20    	mov.w     #0x40, w0
    2d84:	01 01 70    	ior.w     w0, w1, w2
    2d86:	60 04 20    	mov.w     #0x46, w0
    2d88:	71 05 20    	mov.w     #0x57, w1
    2d8a:	23 74 20    	mov.w     #0x742, w3
    2d8c:	80 49 78    	mov.b     w0, [w3]
    2d8e:	81 49 78    	mov.b     w1, [w3]
    2d90:	82 49 78    	mov.b     w2, [w3]

00002d92 <.LSM243>:
        self->RX->owner = NULL;
    2d92:	1e 00 78    	mov.w     [w14], w0
    2d94:	60 08 90    	mov.w     [w0+28], w0
    2d96:	80 00 eb    	clr.w     w1
    2d98:	01 08 98    	mov.w     w1, [w0+16]

00002d9a <.LSM244>:
        pin_digitalIn(self->RX);
    2d9a:	1e 00 78    	mov.w     [w14], w0
    2d9c:	60 08 90    	mov.w     [w0+28], w0
    2d9e:	b1 09 07    	rcall     0x4102 <_pin_digitalIn>

00002da0 <.LSM245>:
        self->RX = NULL;
    2da0:	1e 00 78    	mov.w     [w14], w0
    2da2:	80 00 eb    	clr.w     w1
    2da4:	61 08 98    	mov.w     w1, [w0+28]

00002da6 <.L87>:
    }
    if (self->RTS) {
    2da6:	1e 00 78    	mov.w     [w14], w0
    2da8:	70 08 90    	mov.w     [w0+30], w0
    2daa:	00 00 e0    	cp0.w     w0
    2dac:	2f 00 32    	bra       Z, 0x2e0c <.L88>

00002dae <.LSM247>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2dae:	11 3a 80    	mov.w     0x742, w1
    2db0:	f0 0b 20    	mov.w     #0xbf, w0
    2db2:	00 81 60    	and.w     w1, w0, w2
    2db4:	60 04 20    	mov.w     #0x46, w0
    2db6:	71 05 20    	mov.w     #0x57, w1
    2db8:	23 74 20    	mov.w     #0x742, w3
    2dba:	80 49 78    	mov.b     w0, [w3]
    2dbc:	81 49 78    	mov.b     w1, [w3]
    2dbe:	82 49 78    	mov.b     w2, [w3]

00002dc0 <.LSM248>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2dc0:	1e 00 78    	mov.w     [w14], w0
    2dc2:	70 08 90    	mov.w     [w0+30], w0
    2dc4:	70 00 90    	mov.w     [w0+14], w0
    2dc6:	9e 00 78    	mov.w     [w14], w1
    2dc8:	f1 08 90    	mov.w     [w1+30], w1
    2dca:	f1 00 90    	mov.w     [w1+14], w1
    2dcc:	11 01 78    	mov.w     [w1], w2
    2dce:	9e 00 78    	mov.w     [w14], w1
    2dd0:	f1 08 90    	mov.w     [w1+30], w1
    2dd2:	a1 48 90    	mov.b     [w1+10], w1
    2dd4:	81 80 fb    	ze        w1, w1
    2dd6:	f3 03 20    	mov.w     #0x3f, w3
    2dd8:	81 18 dd    	sl.w      w3, w1, w1
    2dda:	81 80 ea    	com.w     w1, w1
    2ddc:	81 00 61    	and.w     w2, w1, w1
    2dde:	01 08 78    	mov.w     w1, [w0]

00002de0 <.LSM249>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2de0:	11 3a 80    	mov.w     0x742, w1
    2de2:	00 04 20    	mov.w     #0x40, w0
    2de4:	01 01 70    	ior.w     w0, w1, w2
    2de6:	60 04 20    	mov.w     #0x46, w0
    2de8:	71 05 20    	mov.w     #0x57, w1
    2dea:	23 74 20    	mov.w     #0x742, w3
    2dec:	80 49 78    	mov.b     w0, [w3]
    2dee:	81 49 78    	mov.b     w1, [w3]
    2df0:	82 49 78    	mov.b     w2, [w3]

00002df2 <.LSM250>:
        self->RTS->owner = NULL;
    2df2:	1e 00 78    	mov.w     [w14], w0
    2df4:	70 08 90    	mov.w     [w0+30], w0
    2df6:	80 00 eb    	clr.w     w1
    2df8:	01 08 98    	mov.w     w1, [w0+16]

00002dfa <.LSM251>:
        pin_digitalOut(self->RTS);
    2dfa:	1e 00 78    	mov.w     [w14], w0
    2dfc:	70 08 90    	mov.w     [w0+30], w0
    2dfe:	a8 09 07    	rcall     0x4150 <_pin_digitalOut>

00002e00 <.LSM252>:
        pin_set(self->RTS);
    2e00:	1e 00 78    	mov.w     [w14], w0
    2e02:	70 08 90    	mov.w     [w0+30], w0
    2e04:	02 0a 07    	rcall     0x420a <_pin_set>

00002e06 <.LSM253>:
        self->RTS = NULL;
    2e06:	1e 00 78    	mov.w     [w14], w0
    2e08:	80 00 eb    	clr.w     w1
    2e0a:	71 08 98    	mov.w     w1, [w0+30]

00002e0c <.L88>:
    }
    if (self->CTS) {
    2e0c:	1e 00 78    	mov.w     [w14], w0
    2e0e:	00 10 90    	mov.w     [w0+32], w0
    2e10:	00 00 e0    	cp0.w     w0
    2e12:	28 00 32    	bra       Z, 0x2e64 <.L85>

00002e14 <.LSM255>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2e14:	11 3a 80    	mov.w     0x742, w1
    2e16:	f0 0b 20    	mov.w     #0xbf, w0
    2e18:	00 81 60    	and.w     w1, w0, w2
    2e1a:	60 04 20    	mov.w     #0x46, w0
    2e1c:	71 05 20    	mov.w     #0x57, w1
    2e1e:	23 74 20    	mov.w     #0x742, w3
    2e20:	80 49 78    	mov.b     w0, [w3]
    2e22:	81 49 78    	mov.b     w1, [w3]
    2e24:	82 49 78    	mov.b     w2, [w3]

00002e26 <.LSM256>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2e26:	1e 00 78    	mov.w     [w14], w0
    2e28:	10 08 90    	mov.w     [w0+18], w0
    2e2a:	9e 00 78    	mov.w     [w14], w1
    2e2c:	91 08 90    	mov.w     [w1+18], w1
    2e2e:	11 01 78    	mov.w     [w1], w2
    2e30:	9e 00 78    	mov.w     [w14], w1
    2e32:	d1 50 90    	mov.b     [w1+21], w1
    2e34:	81 80 fb    	ze        w1, w1
    2e36:	f3 03 20    	mov.w     #0x3f, w3
    2e38:	81 18 dd    	sl.w      w3, w1, w1
    2e3a:	82 80 70    	ior.w     w1, w2, w1
    2e3c:	01 08 78    	mov.w     w1, [w0]

00002e3e <.LSM257>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2e3e:	11 3a 80    	mov.w     0x742, w1
    2e40:	00 04 20    	mov.w     #0x40, w0
    2e42:	01 01 70    	ior.w     w0, w1, w2
    2e44:	60 04 20    	mov.w     #0x46, w0
    2e46:	71 05 20    	mov.w     #0x57, w1
    2e48:	23 74 20    	mov.w     #0x742, w3
    2e4a:	80 49 78    	mov.b     w0, [w3]
    2e4c:	81 49 78    	mov.b     w1, [w3]
    2e4e:	82 49 78    	mov.b     w2, [w3]

00002e50 <.LSM258>:
        self->CTS->owner = NULL;
    2e50:	1e 00 78    	mov.w     [w14], w0
    2e52:	00 10 90    	mov.w     [w0+32], w0
    2e54:	80 00 eb    	clr.w     w1
    2e56:	01 08 98    	mov.w     w1, [w0+16]

00002e58 <.LSM259>:
        pin_digitalIn(self->CTS);
    2e58:	1e 00 78    	mov.w     [w14], w0
    2e5a:	00 10 90    	mov.w     [w0+32], w0
    2e5c:	52 09 07    	rcall     0x4102 <_pin_digitalIn>

00002e5e <.LSM260>:
        self->CTS = NULL;
    2e5e:	1e 00 78    	mov.w     [w14], w0
    2e60:	80 00 eb    	clr.w     w1
    2e62:	01 10 98    	mov.w     w1, [w0+32]

00002e64 <.L85>:
    }
}
    2e64:	00 80 fa    	ulnk      
    2e66:	00 00 06    	return    

00002e68 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2e68:	04 00 fa    	lnk       #0x4
    2e6a:	00 0f 78    	mov.w     w0, [w14]
    2e6c:	21 47 98    	mov.b     w1, [w14+2]

00002e6e <.LSM263>:
    if (self->putc)
    2e6e:	1e 00 78    	mov.w     [w14], w0
    2e70:	40 18 90    	mov.w     [w0+56], w0
    2e72:	00 00 e0    	cp0.w     w0
    2e74:	05 00 32    	bra       Z, 0x2e80 <.L90>

00002e76 <.LSM264>:
        self->putc(self, ch);
    2e76:	1e 00 78    	mov.w     [w14], w0
    2e78:	40 19 90    	mov.w     [w0+56], w2
    2e7a:	ae 40 90    	mov.b     [w14+2], w1
    2e7c:	1e 00 78    	mov.w     [w14], w0
    2e7e:	02 00 01    	call      w2

00002e80 <.L90>:
}
    2e80:	00 80 fa    	ulnk      
    2e82:	00 00 06    	return    

00002e84 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2e84:	02 00 fa    	lnk       #0x2
    2e86:	00 0f 78    	mov.w     w0, [w14]

00002e88 <.LSM267>:
    if (self->getc)
    2e88:	1e 00 78    	mov.w     [w14], w0
    2e8a:	50 18 90    	mov.w     [w0+58], w0
    2e8c:	00 00 e0    	cp0.w     w0
    2e8e:	05 00 32    	bra       Z, 0x2e9a <.L93>

00002e90 <.LSM268>:
        return self->getc(self);
    2e90:	1e 00 78    	mov.w     [w14], w0
    2e92:	d0 18 90    	mov.w     [w0+58], w1
    2e94:	1e 00 78    	mov.w     [w14], w0
    2e96:	01 00 01    	call      w1
    2e98:	01 00 37    	bra       0x2e9c <.L94>

00002e9a <.L93>:
    else
        return 0xFF;
    2e9a:	00 c0 eb    	setm.b    w0

00002e9c <.L94>:
}
    2e9c:	00 80 fa    	ulnk      
    2e9e:	00 00 06    	return    

00002ea0 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2ea0:	02 00 fa    	lnk       #0x2
    2ea2:	00 0f 78    	mov.w     w0, [w14]

00002ea4 <.LSM272>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2ea4:	1e 00 78    	mov.w     [w14], w0
    2ea6:	10 00 90    	mov.w     [w0+2], w0
    2ea8:	90 00 78    	mov.w     [w0], w1
    2eaa:	00 40 20    	mov.w     #0x400, w0
    2eac:	00 80 60    	and.w     w1, w0, w0
    2eae:	00 00 e0    	cp0.w     w0
    2eb0:	08 00 3a    	bra       NZ, 0x2ec2 <.L95>

00002eb2 <.LSM273>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2eb2:	1e 00 78    	mov.w     [w14], w0
    2eb4:	10 00 90    	mov.w     [w0+2], w0
    2eb6:	9e 00 78    	mov.w     [w14], w1
    2eb8:	91 00 90    	mov.w     [w1+2], w1
    2eba:	11 01 78    	mov.w     [w1], w2
    2ebc:	01 40 20    	mov.w     #0x400, w1
    2ebe:	82 80 70    	ior.w     w1, w2, w1
    2ec0:	01 08 78    	mov.w     w1, [w0]

00002ec2 <.L95>:
}
    2ec2:	00 80 fa    	ulnk      
    2ec4:	00 00 06    	return    

00002ec6 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2ec6:	04 00 fa    	lnk       #0x4
    2ec8:	00 0f 78    	mov.w     w0, [w14]
    2eca:	11 07 98    	mov.w     w1, [w14+2]

00002ecc <.LSM276>:
    while (*str)
    2ecc:	08 00 37    	bra       0x2ede <.L98>

00002ece <.L99>:
        uart_putc(self, *str++);
    2ece:	1e 00 90    	mov.w     [w14+2], w0
    2ed0:	10 40 78    	mov.b     [w0], w0
    2ed2:	9e 00 90    	mov.w     [w14+2], w1
    2ed4:	81 00 e8    	inc.w     w1, w1
    2ed6:	11 07 98    	mov.w     w1, [w14+2]
    2ed8:	80 40 78    	mov.b     w0, w1
    2eda:	1e 00 78    	mov.w     [w14], w0
    2edc:	c5 ff 07    	rcall     0x2e68 <_uart_putc>

00002ede <.L98>:
    2ede:	1e 00 90    	mov.w     [w14+2], w0
    2ee0:	10 40 78    	mov.b     [w0], w0
    2ee2:	00 04 e0    	cp0.b     w0
    2ee4:	f4 ff 3a    	bra       NZ, 0x2ece <.L99>

00002ee6 <.LSM279>:
    uart_flushTxBuffer(self);
    2ee6:	1e 00 78    	mov.w     [w14], w0
    2ee8:	db ff 07    	rcall     0x2ea0 <_uart_flushTxBuffer>

00002eea <.LSM280>:
}
    2eea:	00 80 fa    	ulnk      
    2eec:	00 00 06    	return    

00002eee <_uart_gets_term>:

void uart_gets_term(_UART *self, uint8_t *str, uint16_t len) {
    2eee:	0a 00 fa    	lnk       #0xa
    2ef0:	20 07 98    	mov.w     w0, [w14+4]
    2ef2:	31 07 98    	mov.w     w1, [w14+6]
    2ef4:	42 07 98    	mov.w     w2, [w14+8]

00002ef6 <.LSM282>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2ef6:	4e 00 90    	mov.w     [w14+8], w0
    2ef8:	00 00 e0    	cp0.w     w0
    2efa:	87 00 32    	bra       Z, 0x300a <.L113>

00002efc <.LSM283>:
        return;

    if (len==1) {
    2efc:	4e 00 90    	mov.w     [w14+8], w0
    2efe:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2f00:	04 00 3a    	bra       NZ, 0x2f0a <.L103>

00002f02 <.LSM284>:
        *str = '\0';
    2f02:	3e 00 90    	mov.w     [w14+6], w0
    2f04:	80 40 eb    	clr.b     w1
    2f06:	01 48 78    	mov.b     w1, [w0]

00002f08 <.LSM285>:
        return;
    2f08:	81 00 37    	bra       0x300c <.L100>

00002f0a <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2f0a:	b1 c1 b3    	mov.b     #0x1b, w1
    2f0c:	2e 00 90    	mov.w     [w14+4], w0
    2f0e:	ac ff 07    	rcall     0x2e68 <_uart_putc>

00002f10 <.LSM287>:
    uart_putc(self, '7');
    2f10:	71 c3 b3    	mov.b     #0x37, w1
    2f12:	2e 00 90    	mov.w     [w14+4], w0
    2f14:	a9 ff 07    	rcall     0x2e68 <_uart_putc>

00002f16 <.LSM288>:
    uart_flushTxBuffer(self);
    2f16:	2e 00 90    	mov.w     [w14+4], w0
    2f18:	c3 ff 07    	rcall     0x2ea0 <_uart_flushTxBuffer>

00002f1a <.LSM289>:
    start = str;
    2f1a:	be 00 90    	mov.w     [w14+6], w1
    2f1c:	11 07 98    	mov.w     w1, [w14+2]

00002f1e <.LSM290>:
    left = len;
    2f1e:	ce 00 90    	mov.w     [w14+8], w1
    2f20:	01 0f 78    	mov.w     w1, [w14]
    2f22:	03 00 37    	bra       0x2f2a <.L112>

00002f24 <.L114>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2f24:	00 00 00    	nop       
    2f26:	01 00 37    	bra       0x2f2a <.L112>

00002f28 <.L115>:
    2f28:	00 00 00    	nop       

00002f2a <.L112>:
    2f2a:	2e 00 90    	mov.w     [w14+4], w0
    2f2c:	ab ff 07    	rcall     0x2e84 <_uart_getc>
    2f2e:	be 00 90    	mov.w     [w14+6], w1
    2f30:	80 48 78    	mov.b     w0, [w1]

00002f32 <.LSM293>:
    2f32:	3e 00 90    	mov.w     [w14+6], w0
    2f34:	10 40 78    	mov.b     [w0], w0
    2f36:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    2f38:	0c 00 3a    	bra       NZ, 0x2f52 <.L104>

00002f3a <.LSM294>:

    *str = '\0';                            // Terminarte the string with null
    2f3a:	3e 00 90    	mov.w     [w14+6], w0
    2f3c:	80 40 eb    	clr.b     w1
    2f3e:	01 48 78    	mov.b     w1, [w0]

00002f40 <.LSM295>:
    uart_putc(self, '\n');                  // Send newline and
    2f40:	a1 c0 b3    	mov.b     #0xa, w1
    2f42:	2e 00 90    	mov.w     [w14+4], w0
    2f44:	91 ff 07    	rcall     0x2e68 <_uart_putc>

00002f46 <.LSM296>:
    uart_putc(self, '\r');                  //   carriage return
    2f46:	d1 c0 b3    	mov.b     #0xd, w1
    2f48:	2e 00 90    	mov.w     [w14+4], w0
    2f4a:	8e ff 07    	rcall     0x2e68 <_uart_putc>

00002f4c <.LSM297>:
    uart_flushTxBuffer(self);
    2f4c:	2e 00 90    	mov.w     [w14+4], w0
    2f4e:	a8 ff 07    	rcall     0x2ea0 <_uart_flushTxBuffer>
    2f50:	5d 00 37    	bra       0x300c <.L100>

00002f52 <.L104>:
    2f52:	3e 00 90    	mov.w     [w14+6], w0
    2f54:	10 40 78    	mov.b     [w0], w0
    2f56:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    2f58:	16 00 3a    	bra       NZ, 0x2f86 <.L105>

00002f5a <.LSM299>:
    2f5a:	b1 c1 b3    	mov.b     #0x1b, w1
    2f5c:	2e 00 90    	mov.w     [w14+4], w0
    2f5e:	84 ff 07    	rcall     0x2e68 <_uart_putc>

00002f60 <.LSM300>:
    2f60:	81 c3 b3    	mov.b     #0x38, w1
    2f62:	2e 00 90    	mov.w     [w14+4], w0
    2f64:	81 ff 07    	rcall     0x2e68 <_uart_putc>

00002f66 <.LSM301>:
    2f66:	b1 c1 b3    	mov.b     #0x1b, w1
    2f68:	2e 00 90    	mov.w     [w14+4], w0
    2f6a:	7e ff 07    	rcall     0x2e68 <_uart_putc>

00002f6c <.LSM302>:
    2f6c:	b1 c5 b3    	mov.b     #0x5b, w1
    2f6e:	2e 00 90    	mov.w     [w14+4], w0
    2f70:	7b ff 07    	rcall     0x2e68 <_uart_putc>

00002f72 <.LSM303>:
    2f72:	b1 c4 b3    	mov.b     #0x4b, w1
    2f74:	2e 00 90    	mov.w     [w14+4], w0
    2f76:	78 ff 07    	rcall     0x2e68 <_uart_putc>

00002f78 <.LSM304>:
    2f78:	2e 00 90    	mov.w     [w14+4], w0
    2f7a:	92 ff 07    	rcall     0x2ea0 <_uart_flushTxBuffer>

00002f7c <.LSM305>:
    2f7c:	9e 00 90    	mov.w     [w14+2], w1
    2f7e:	31 07 98    	mov.w     w1, [w14+6]

00002f80 <.LSM306>:
    2f80:	ce 00 90    	mov.w     [w14+8], w1
    2f82:	01 0f 78    	mov.w     w1, [w14]

00002f84 <.LSM307>:
    2f84:	41 00 37    	bra       0x3008 <.L106>

00002f86 <.L105>:
    2f86:	3e 00 90    	mov.w     [w14+6], w0
    2f88:	10 40 78    	mov.b     [w0], w0
    2f8a:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    2f8c:	05 00 32    	bra       Z, 0x2f98 <.L107>

00002f8e <.LSM309>:
    2f8e:	3e 00 90    	mov.w     [w14+6], w0
    2f90:	90 40 78    	mov.b     [w0], w1

00002f92 <.LSM310>:
    2f92:	f0 c7 b3    	mov.b     #0x7f, w0
    2f94:	80 cf 50    	sub.b     w1, w0, [w15]
    2f96:	1a 00 3a    	bra       NZ, 0x2fcc <.L108>

00002f98 <.L107>:
    2f98:	be 00 90    	mov.w     [w14+6], w1
    2f9a:	1e 00 90    	mov.w     [w14+2], w0
    2f9c:	80 8f 50    	sub.w     w1, w0, [w15]
    2f9e:	10 00 36    	bra       LEU, 0x2fc0 <.L109>

00002fa0 <.LSM312>:
    2fa0:	81 c0 b3    	mov.b     #0x8, w1
    2fa2:	2e 00 90    	mov.w     [w14+4], w0
    2fa4:	61 ff 07    	rcall     0x2e68 <_uart_putc>

00002fa6 <.LSM313>:
    2fa6:	01 c2 b3    	mov.b     #0x20, w1
    2fa8:	2e 00 90    	mov.w     [w14+4], w0
    2faa:	5e ff 07    	rcall     0x2e68 <_uart_putc>

00002fac <.LSM314>:
    2fac:	81 c0 b3    	mov.b     #0x8, w1
    2fae:	2e 00 90    	mov.w     [w14+4], w0
    2fb0:	5b ff 07    	rcall     0x2e68 <_uart_putc>

00002fb2 <.LSM315>:
    2fb2:	2e 00 90    	mov.w     [w14+4], w0
    2fb4:	75 ff 07    	rcall     0x2ea0 <_uart_flushTxBuffer>

00002fb6 <.LSM316>:
    2fb6:	3e 00 90    	mov.w     [w14+6], w0
    2fb8:	00 00 e9    	dec.w     w0, w0
    2fba:	30 07 98    	mov.w     w0, [w14+6]

00002fbc <.LSM317>:
    2fbc:	1e 0f e8    	inc.w     [w14], [w14]
    2fbe:	05 00 37    	bra       0x2fca <.L110>

00002fc0 <.L109>:
    2fc0:	71 c0 b3    	mov.b     #0x7, w1
    2fc2:	2e 00 90    	mov.w     [w14+4], w0
    2fc4:	51 ff 07    	rcall     0x2e68 <_uart_putc>

00002fc6 <.LSM319>:
    2fc6:	2e 00 90    	mov.w     [w14+4], w0
    2fc8:	6b ff 07    	rcall     0x2ea0 <_uart_flushTxBuffer>

00002fca <.L110>:
    2fca:	1e 00 37    	bra       0x3008 <.L106>

00002fcc <.L108>:
    2fcc:	1e 00 78    	mov.w     [w14], w0
    2fce:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    2fd0:	06 00 3a    	bra       NZ, 0x2fde <.L111>

00002fd2 <.LSM322>:
    2fd2:	71 c0 b3    	mov.b     #0x7, w1
    2fd4:	2e 00 90    	mov.w     [w14+4], w0
    2fd6:	48 ff 07    	rcall     0x2e68 <_uart_putc>

00002fd8 <.LSM323>:
    2fd8:	2e 00 90    	mov.w     [w14+4], w0
    2fda:	62 ff 07    	rcall     0x2ea0 <_uart_flushTxBuffer>

00002fdc <.LSM324>:
    2fdc:	15 00 37    	bra       0x3008 <.L106>

00002fde <.L111>:
    2fde:	3e 00 90    	mov.w     [w14+6], w0
    2fe0:	10 40 78    	mov.b     [w0], w0
    2fe2:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    2fe4:	9f ff 36    	bra       LEU, 0x2f24 <.L114>
    2fe6:	3e 00 90    	mov.w     [w14+6], w0
    2fe8:	90 40 78    	mov.b     [w0], w1
    2fea:	e0 c7 b3    	mov.b     #0x7e, w0
    2fec:	80 cf 50    	sub.b     w1, w0, [w15]
    2fee:	9c ff 3e    	bra       GTU, 0x2f28 <.L115>

00002ff0 <.LSM326>:
    2ff0:	3e 00 90    	mov.w     [w14+6], w0
    2ff2:	10 40 78    	mov.b     [w0], w0
    2ff4:	80 40 78    	mov.b     w0, w1
    2ff6:	2e 00 90    	mov.w     [w14+4], w0
    2ff8:	37 ff 07    	rcall     0x2e68 <_uart_putc>

00002ffa <.LSM327>:
    2ffa:	2e 00 90    	mov.w     [w14+4], w0
    2ffc:	51 ff 07    	rcall     0x2ea0 <_uart_flushTxBuffer>

00002ffe <.LSM328>:
    2ffe:	3e 00 90    	mov.w     [w14+6], w0
    3000:	00 00 e8    	inc.w     w0, w0
    3002:	30 07 98    	mov.w     w0, [w14+6]

00003004 <.LSM329>:
    3004:	1e 0f e9    	dec.w     [w14], [w14]

00003006 <.LSM330>:
    3006:	91 ff 37    	bra       0x2f2a <.L112>

00003008 <.L106>:
    3008:	90 ff 37    	bra       0x2f2a <.L112>

0000300a <.L113>:
    300a:	00 00 00    	nop       

0000300c <.L100>:
}
    300c:	00 80 fa    	ulnk      
    300e:	00 00 06    	return    

00003010 <_uart_gets>:


void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    3010:	0c 00 fa    	lnk       #0xc
    3012:	30 07 98    	mov.w     w0, [w14+6]
    3014:	41 07 98    	mov.w     w1, [w14+8]
    3016:	52 07 98    	mov.w     w2, [w14+10]

00003018 <.LSM334>:
    uint8_t *start;
    uint16_t left;
    uint8_t char_count = 0;
    3018:	00 40 eb    	clr.b     w0
    301a:	00 4f 78    	mov.b     w0, [w14]

0000301c <.LSM335>:

    if (len==0)
    301c:	5e 00 90    	mov.w     [w14+10], w0
    301e:	00 00 e0    	cp0.w     w0
    3020:	1a 00 32    	bra       Z, 0x3056 <.L123>

00003022 <.LSM336>:
        return;

    if (len==1) {
    3022:	5e 00 90    	mov.w     [w14+10], w0
    3024:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3026:	04 00 3a    	bra       NZ, 0x3030 <.L119>

00003028 <.LSM337>:
        *str = '\0';
    3028:	4e 00 90    	mov.w     [w14+8], w0
    302a:	80 40 eb    	clr.b     w1
    302c:	01 48 78    	mov.b     w1, [w0]

0000302e <.LSM338>:
        return;
    302e:	16 00 37    	bra       0x305c <.L116>

00003030 <.L119>:
    }

    // uart_flushTxBuffer(self);
    start = str;
    3030:	ce 00 90    	mov.w     [w14+8], w1
    3032:	11 07 98    	mov.w     w1, [w14+2]

00003034 <.LSM340>:
    left = len;
    3034:	de 00 90    	mov.w     [w14+10], w1
    3036:	21 07 98    	mov.w     w1, [w14+4]
    3038:	01 00 37    	bra       0x303c <.L122>

0000303a <.L125>:
    // led_on(&led2);
    while (1) {
        *str = uart_getc(self);             // Get a character
        char_count ++;
        if (*str=='\r') {                     // If character is return,
            break;
        }
        if (char_count >= UART_MSG_MAX_LEN) { // Terminate if max length reached.
            break;
        }  
    }
    303a:	00 00 00    	nop       

0000303c <.L122>:
    303c:	3e 00 90    	mov.w     [w14+6], w0
    303e:	22 ff 07    	rcall     0x2e84 <_uart_getc>
    3040:	ce 00 90    	mov.w     [w14+8], w1
    3042:	80 48 78    	mov.b     w0, [w1]

00003044 <.LSM343>:
    3044:	1e 4f e8    	inc.b     [w14], [w14]

00003046 <.LSM344>:
    3046:	4e 00 90    	mov.w     [w14+8], w0
    3048:	10 40 78    	mov.b     [w0], w0
    304a:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    304c:	06 00 32    	bra       Z, 0x305a <.L124>

0000304e <.LSM345>:
    304e:	1e 40 78    	mov.b     [w14], w0
    3050:	00 04 e0    	cp0.b     w0
    3052:	f3 ff 3d    	bra       GE, 0x303a <.L125>

00003054 <.LSM346>:
    3054:	03 00 37    	bra       0x305c <.L116>

00003056 <.L123>:
    3056:	00 00 00    	nop       
    3058:	01 00 37    	bra       0x305c <.L116>

0000305a <.L124>:
    305a:	00 00 00    	nop       

0000305c <.L116>:
}         
    305c:	00 80 fa    	ulnk      
    305e:	00 00 06    	return    

00003060 <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    3060:	04 00 fa    	lnk       #0x4

00003062 <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    3062:	94 24 a8    	bset.b    0x494, #0x1

00003064 <.LSM2>:
    U1ADDR = 0;
    3064:	96 24 ef    	clr.w     0x496

00003066 <.LSM3>:
    U1EIR = 0xFF;
    3066:	f0 0f 20    	mov.w     #0xff, w0
    3068:	70 24 88    	mov.w     w0, 0x48e

0000306a <.LSM4>:
    U1CONbits.PPBRST = 0;
    306a:	94 24 a9    	bclr.b    0x494, #0x1

0000306c <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    306c:	a0 4a 20    	mov.w     #0x4aa, w0
    306e:	10 07 98    	mov.w     w0, [w14+2]

00003070 <.LSM6>:
    for (n = 0; n<16; n++)
    3070:	00 40 eb    	clr.b     w0
    3072:	00 4f 78    	mov.b     w0, [w14]
    3074:	07 00 37    	bra       0x3084 <.L2>

00003076 <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    3076:	1e 80 fb    	ze        [w14], w0
    3078:	00 00 40    	add.w     w0, w0, w0
    307a:	9e 00 90    	mov.w     [w14+2], w1
    307c:	00 80 40    	add.w     w1, w0, w0
    307e:	80 00 eb    	clr.w     w1
    3080:	01 08 78    	mov.w     w1, [w0]

00003082 <.LSM8>:
    3082:	1e 4f e8    	inc.b     [w14], [w14]

00003084 <.L2>:
    3084:	1e 40 78    	mov.b     [w14], w0
    3086:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    3088:	f6 ff 36    	bra       LEU, 0x3076 <.L3>

0000308a <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    308a:	d0 00 20    	mov.w     #0xd, w0
    308c:	50 25 88    	mov.w     w0, 0x4aa

0000308e <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    308e:	00 40 21    	mov.w     #0x1400, w0
    3090:	01 c4 b3    	mov.b     #0x40, w1
    3092:	01 48 78    	mov.b     w1, [w0]

00003094 <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    3094:	00 48 21    	mov.w     #0x1480, w0
    3096:	10 a0 88    	mov.w     w0, 0x1402

00003098 <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    3098:	10 40 21    	mov.w     #0x1401, w0
    309a:	81 c8 b3    	mov.b     #0x88, w1
    309c:	01 48 78    	mov.b     w1, [w0]

0000309e <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    309e:	00 4c 21    	mov.w     #0x14c0, w0
    30a0:	30 a0 88    	mov.w     w0, 0x1406

000030a2 <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    30a2:	50 40 21    	mov.w     #0x1405, w0
    30a4:	81 c0 b3    	mov.b     #0x8, w1
    30a6:	01 48 78    	mov.b     w1, [w0]

000030a8 <.LSM15>:
    U1CNFG1 = 0x00;
    30a8:	a6 24 ef    	clr.w     0x4a6

000030aa <.LSM16>:
    U1CNFG2 = 0x00;
    30aa:	a8 24 ef    	clr.w     0x4a8

000030ac <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    30ac:	00 40 21    	mov.w     #0x1400, w0
    30ae:	48 00 de    	lsr.w     w0, #0x8, w0
    30b0:	c0 24 88    	mov.w     w0, 0x498

000030b2 <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    30b2:	86 44 a8    	bset.b    0x486, #0x2

000030b4 <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    30b4:	86 e4 a8    	bset.b    0x486, #0x7

000030b6 <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    30b6:	88 04 a8    	bset.b    0x488, #0x0

000030b8 <.LSM21>:
    U1CONbits.PKTDIS = 0;
    30b8:	94 a4 a9    	bclr.b    0x494, #0x5

000030ba <.LSM22>:
    USB_curr_config = 0x00;
    30ba:	3d 68 ef    	clr.b     0x83d

000030bc <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    30bc:	40 68 ef    	clr.b     0x840

000030be <.LSM24>:
    USB_device_status = 0x01;
    30be:	10 c0 b3    	mov.b     #0x1, w0
    30c0:	3e e8 b7    	mov.b     WREG, 0x83e

000030c2 <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    30c2:	00 50 21    	mov.w     #0x1500, w0
    30c4:	80 c0 eb    	setm.b    w1
    30c6:	01 48 78    	mov.b     w1, [w0]

000030c8 <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    30c8:	10 50 21    	mov.w     #0x1501, w0
    30ca:	80 c0 eb    	setm.b    w1
    30cc:	01 48 78    	mov.b     w1, [w0]

000030ce <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    30ce:	00 00 00    	nop       

000030d0 <.L4>:
    30d0:	a1 24 80    	mov.w     0x494, w1
    30d2:	00 04 20    	mov.w     #0x40, w0
    30d4:	00 80 60    	and.w     w1, w0, w0
    30d6:	00 00 e0    	cp0.w     w0
    30d8:	fb ff 3a    	bra       NZ, 0x30d0 <.L4>

000030da <.LSM28>:
}
    30da:	00 80 fa    	ulnk      
    30dc:	00 00 06    	return    

000030de <_ServiceUSB>:

void ServiceUSB(void) {
    30de:	06 00 fa    	lnk       #0x6

000030e0 <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    30e0:	50 24 80    	mov.w     0x48a, w0
    30e2:	62 00 60    	and.w     w0, #0x2, w0
    30e4:	00 00 e0    	cp0.w     w0
    30e6:	05 00 32    	bra       Z, 0x30f2 <.L6>

000030e8 <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    30e8:	f0 0f 20    	mov.w     #0xff, w0
    30ea:	70 24 88    	mov.w     w0, 0x48e

000030ec <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    30ec:	20 00 20    	mov.w     #0x2, w0
    30ee:	50 24 88    	mov.w     w0, 0x48a
    30f0:	90 00 37    	bra       0x3212 <.L5>

000030f2 <.L6>:
    } else if (U1IRbits.SOFIF) {
    30f2:	50 24 80    	mov.w     0x48a, w0
    30f4:	64 00 60    	and.w     w0, #0x4, w0
    30f6:	00 00 e0    	cp0.w     w0
    30f8:	03 00 32    	bra       Z, 0x3100 <.L8>

000030fa <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    30fa:	40 00 20    	mov.w     #0x4, w0
    30fc:	50 24 88    	mov.w     w0, 0x48a
    30fe:	89 00 37    	bra       0x3212 <.L5>

00003100 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    3100:	50 24 80    	mov.w     0x48a, w0
    3102:	70 00 60    	and.w     w0, #0x10, w0
    3104:	00 00 e0    	cp0.w     w0
    3106:	03 00 32    	bra       Z, 0x310e <.L9>

00003108 <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    3108:	00 01 20    	mov.w     #0x10, w0
    310a:	50 24 88    	mov.w     w0, 0x48a
    310c:	82 00 37    	bra       0x3212 <.L5>

0000310e <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    310e:	51 24 80    	mov.w     0x48a, w1
    3110:	00 02 20    	mov.w     #0x20, w0
    3112:	00 80 60    	and.w     w1, w0, w0
    3114:	00 00 e0    	cp0.w     w0
    3116:	03 00 32    	bra       Z, 0x311e <.L10>

00003118 <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    3118:	00 02 20    	mov.w     #0x20, w0
    311a:	50 24 88    	mov.w     w0, 0x48a
    311c:	7a 00 37    	bra       0x3212 <.L5>

0000311e <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    311e:	51 24 80    	mov.w     0x48a, w1
    3120:	00 08 20    	mov.w     #0x80, w0
    3122:	00 80 60    	and.w     w1, w0, w0
    3124:	00 00 e0    	cp0.w     w0
    3126:	03 00 32    	bra       Z, 0x312e <.L11>

00003128 <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    3128:	00 08 20    	mov.w     #0x80, w0
    312a:	50 24 88    	mov.w     w0, 0x48a
    312c:	72 00 37    	bra       0x3212 <.L5>

0000312e <.L11>:
    } else if (U1IRbits.URSTIF) {
    312e:	50 24 80    	mov.w     0x48a, w0
    3130:	61 00 60    	and.w     w0, #0x1, w0
    3132:	00 00 e0    	cp0.w     w0
    3134:	34 00 32    	bra       Z, 0x319e <.L12>

00003136 <.LSM42>:
        USB_curr_config = 0x00;
    3136:	3d 68 ef    	clr.b     0x83d

00003138 <.LSM43>:
        while (U1IRbits.TRNIF) {
    3138:	08 00 37    	bra       0x314a <.L13>

0000313a <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    313a:	80 00 20    	mov.w     #0x8, w0
    313c:	50 24 88    	mov.w     w0, 0x48a

0000313e <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    313e:	00 00 00    	nop       

00003140 <.LSM46>:
            __builtin_nop();
    3140:	00 00 00    	nop       

00003142 <.LSM47>:
            __builtin_nop();
    3142:	00 00 00    	nop       

00003144 <.LSM48>:
            __builtin_nop();
    3144:	00 00 00    	nop       

00003146 <.LSM49>:
            __builtin_nop();
    3146:	00 00 00    	nop       

00003148 <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    3148:	00 00 00    	nop       

0000314a <.L13>:
    314a:	50 24 80    	mov.w     0x48a, w0
    314c:	68 00 60    	and.w     w0, #0x8, w0
    314e:	00 00 e0    	cp0.w     w0
    3150:	f4 ff 3a    	bra       NZ, 0x313a <.L14>

00003152 <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    3152:	a0 4a 20    	mov.w     #0x4aa, w0
    3154:	10 07 98    	mov.w     w0, [w14+2]

00003156 <.LSM53>:
        for (n = 0; n<16; n++)
    3156:	00 40 eb    	clr.b     w0
    3158:	00 4f 78    	mov.b     w0, [w14]
    315a:	07 00 37    	bra       0x316a <.L15>

0000315c <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    315c:	1e 80 fb    	ze        [w14], w0
    315e:	00 00 40    	add.w     w0, w0, w0
    3160:	9e 00 90    	mov.w     [w14+2], w1
    3162:	00 80 40    	add.w     w1, w0, w0
    3164:	80 00 eb    	clr.w     w1
    3166:	01 08 78    	mov.w     w1, [w0]

00003168 <.LSM55>:
    3168:	1e 4f e8    	inc.b     [w14], [w14]

0000316a <.L15>:
    316a:	1e 40 78    	mov.b     [w14], w0
    316c:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    316e:	f6 ff 36    	bra       LEU, 0x315c <.L16>

00003170 <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    3170:	00 40 21    	mov.w     #0x1400, w0
    3172:	01 c4 b3    	mov.b     #0x40, w1
    3174:	01 48 78    	mov.b     w1, [w0]

00003176 <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    3176:	00 48 21    	mov.w     #0x1480, w0
    3178:	10 a0 88    	mov.w     w0, 0x1402

0000317a <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    317a:	10 40 21    	mov.w     #0x1401, w0
    317c:	81 c8 b3    	mov.b     #0x88, w1
    317e:	01 48 78    	mov.b     w1, [w0]

00003180 <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    3180:	00 4c 21    	mov.w     #0x14c0, w0
    3182:	30 a0 88    	mov.w     w0, 0x1406

00003184 <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    3184:	50 40 21    	mov.w     #0x1405, w0
    3186:	81 c0 b3    	mov.b     #0x8, w1
    3188:	01 48 78    	mov.b     w1, [w0]

0000318a <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    318a:	96 24 ef    	clr.w     0x496

0000318c <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    318c:	f0 0f 20    	mov.w     #0xff, w0
    318e:	50 24 88    	mov.w     w0, 0x48a

00003190 <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    3190:	d0 00 20    	mov.w     #0xd, w0
    3192:	50 25 88    	mov.w     w0, 0x4aa

00003194 <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    3194:	10 c0 b3    	mov.b     #0x1, w0
    3196:	40 e8 b7    	mov.b     WREG, 0x840

00003198 <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    3198:	10 c0 b3    	mov.b     #0x1, w0
    319a:	3e e8 b7    	mov.b     WREG, 0x83e
    319c:	3a 00 37    	bra       0x3212 <.L5>

0000319e <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    319e:	50 24 80    	mov.w     0x48a, w0
    31a0:	68 00 60    	and.w     w0, #0x8, w0
    31a2:	00 00 e0    	cp0.w     w0
    31a4:	36 00 32    	bra       Z, 0x3212 <.L5>

000031a6 <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    31a6:	90 24 80    	mov.w     0x492, w0
    31a8:	43 00 de    	lsr.w     w0, #0x3, w0
    31aa:	c2 00 dd    	sl.w      w0, #0x2, w1
    31ac:	00 40 21    	mov.w     #0x1400, w0
    31ae:	00 80 40    	add.w     w1, w0, w0
    31b0:	20 07 98    	mov.w     w0, [w14+4]

000031b2 <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    31b2:	2e 00 90    	mov.w     [w14+4], w0
    31b4:	10 40 90    	mov.b     [w0+1], w0
    31b6:	31 e8 b7    	mov.b     WREG, 0x831

000031b8 <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    31b8:	2e 00 90    	mov.w     [w14+4], w0
    31ba:	10 40 78    	mov.b     [w0], w0
    31bc:	30 e8 b7    	mov.b     WREG, 0x830

000031be <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    31be:	2e 00 90    	mov.w     [w14+4], w0
    31c0:	10 00 90    	mov.w     [w0+2], w0
    31c2:	90 41 88    	mov.w     w0, 0x832

000031c4 <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    31c4:	90 24 80    	mov.w     0x492, w0
    31c6:	00 40 78    	mov.b     w0, w0
    31c8:	3f e8 b7    	mov.b     WREG, 0x83f

000031ca <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    31ca:	80 00 20    	mov.w     #0x8, w0
    31cc:	50 24 88    	mov.w     w0, 0x48a

000031ce <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    31ce:	3c 68 ef    	clr.b     0x83c

000031d0 <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    31d0:	31 c8 bf    	mov.b     0x831, WREG
    31d2:	80 80 fb    	ze        w0, w1
    31d4:	c0 03 20    	mov.w     #0x3c, w0
    31d6:	00 80 60    	and.w     w1, w0, w0
    31d8:	41 02 20    	mov.w     #0x24, w1
    31da:	81 0f 50    	sub.w     w0, w1, [w15]
    31dc:	08 00 32    	bra       Z, 0x31ee <.L19>
    31de:	41 03 20    	mov.w     #0x34, w1
    31e0:	81 0f 50    	sub.w     w0, w1, [w15]
    31e2:	03 00 32    	bra       Z, 0x31ea <.L20>
    31e4:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    31e6:	05 00 32    	bra       Z, 0x31f2 <.L18>
    31e8:	05 00 37    	bra       0x31f4 <.L17>

000031ea <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    31ea:	15 00 07    	rcall     0x3216 <_ProcessSetupToken>

000031ec <.LSM76>:
                break;
    31ec:	03 00 37    	bra       0x31f4 <.L17>

000031ee <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    31ee:	dc 02 07    	rcall     0x37a8 <_ProcessInToken>

000031f0 <.LSM78>:
                break;
    31f0:	01 00 37    	bra       0x31f4 <.L17>

000031f2 <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    31f2:	0e 03 07    	rcall     0x3810 <_ProcessOutToken>

000031f4 <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    31f4:	3c c8 bf    	mov.b     0x83c, WREG
    31f6:	00 80 fb    	ze        w0, w0
    31f8:	61 00 60    	and.w     w0, #0x1, w0
    31fa:	00 40 78    	mov.b     w0, w0
    31fc:	00 04 e0    	cp0.b     w0
    31fe:	09 00 32    	bra       Z, 0x3212 <.L5>

00003200 <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    3200:	00 40 21    	mov.w     #0x1400, w0
    3202:	01 c4 b3    	mov.b     #0x40, w1
    3204:	01 48 78    	mov.b     w1, [w0]

00003206 <.LSM82>:
            BD[EP0IN].status = 0x84;
    3206:	50 40 21    	mov.w     #0x1405, w0
    3208:	41 c8 b3    	mov.b     #0x84, w1
    320a:	01 48 78    	mov.b     w1, [w0]

0000320c <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    320c:	10 40 21    	mov.w     #0x1401, w0
    320e:	41 c8 b3    	mov.b     #0x84, w1
    3210:	01 48 78    	mov.b     w1, [w0]

00003212 <.L5>:
        }
    }
}
    3212:	00 80 fa    	ulnk      
    3214:	00 00 06    	return    

00003216 <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    3216:	02 00 fa    	lnk       #0x2

00003218 <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    3218:	91 41 80    	mov.w     0x832, w1
    321a:	01 0f 78    	mov.w     w1, [w14]

0000321c <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    321c:	1e 00 78    	mov.w     [w14], w0
    321e:	90 40 78    	mov.b     [w0], w1
    3220:	40 83 20    	mov.w     #0x834, w0
    3222:	01 48 78    	mov.b     w1, [w0]
    3224:	1e 0f e8    	inc.w     [w14], [w14]

00003226 <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    3226:	1e 00 78    	mov.w     [w14], w0
    3228:	90 40 78    	mov.b     [w0], w1
    322a:	40 83 20    	mov.w     #0x834, w0
    322c:	11 40 98    	mov.b     w1, [w0+1]
    322e:	1e 0f e8    	inc.w     [w14], [w14]

00003230 <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    3230:	1e 00 78    	mov.w     [w14], w0
    3232:	90 40 78    	mov.b     [w0], w1
    3234:	40 83 20    	mov.w     #0x834, w0
    3236:	21 40 98    	mov.b     w1, [w0+2]
    3238:	1e 0f e8    	inc.w     [w14], [w14]

0000323a <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    323a:	1e 00 78    	mov.w     [w14], w0
    323c:	90 40 78    	mov.b     [w0], w1
    323e:	40 83 20    	mov.w     #0x834, w0
    3240:	31 40 98    	mov.b     w1, [w0+3]
    3242:	1e 0f e8    	inc.w     [w14], [w14]

00003244 <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    3244:	1e 00 78    	mov.w     [w14], w0
    3246:	90 40 78    	mov.b     [w0], w1
    3248:	40 83 20    	mov.w     #0x834, w0
    324a:	41 40 98    	mov.b     w1, [w0+4]
    324c:	1e 0f e8    	inc.w     [w14], [w14]

0000324e <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    324e:	1e 00 78    	mov.w     [w14], w0
    3250:	90 40 78    	mov.b     [w0], w1
    3252:	40 83 20    	mov.w     #0x834, w0
    3254:	51 40 98    	mov.b     w1, [w0+5]
    3256:	1e 0f e8    	inc.w     [w14], [w14]

00003258 <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    3258:	1e 00 78    	mov.w     [w14], w0
    325a:	90 40 78    	mov.b     [w0], w1
    325c:	40 83 20    	mov.w     #0x834, w0
    325e:	61 40 98    	mov.b     w1, [w0+6]
    3260:	1e 0f e8    	inc.w     [w14], [w14]

00003262 <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    3262:	1e 00 78    	mov.w     [w14], w0
    3264:	90 40 78    	mov.b     [w0], w1
    3266:	40 83 20    	mov.w     #0x834, w0
    3268:	71 40 98    	mov.b     w1, [w0+7]
    326a:	1e 0f e8    	inc.w     [w14], [w14]

0000326c <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    326c:	00 40 21    	mov.w     #0x1400, w0
    326e:	01 c4 b3    	mov.b     #0x40, w1
    3270:	01 48 78    	mov.b     w1, [w0]

00003272 <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    3272:	50 40 21    	mov.w     #0x1405, w0
    3274:	81 c0 b3    	mov.b     #0x8, w1
    3276:	01 48 78    	mov.b     w1, [w0]

00003278 <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    3278:	40 83 20    	mov.w     #0x834, w0
    327a:	10 40 78    	mov.b     [w0], w0
    327c:	00 04 e0    	cp0.b     w0
    327e:	06 00 35    	bra       LT, 0x328c <.L22>
    3280:	40 83 20    	mov.w     #0x834, w0
    3282:	30 00 90    	mov.w     [w0+6], w0
    3284:	00 00 e0    	cp0.w     w0
    3286:	02 00 32    	bra       Z, 0x328c <.L22>
    3288:	80 cc b3    	mov.b     #0xc8, w0
    328a:	01 00 37    	bra       0x328e <.L23>

0000328c <.L22>:
    328c:	80 c8 b3    	mov.b     #0x88, w0

0000328e <.L23>:
    328e:	11 40 21    	mov.w     #0x1401, w1
    3290:	80 48 78    	mov.b     w0, [w1]

00003292 <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    3292:	94 a4 a9    	bclr.b    0x494, #0x5

00003294 <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    3294:	00 50 21    	mov.w     #0x1500, w0
    3296:	80 c0 eb    	setm.b    w1
    3298:	01 48 78    	mov.b     w1, [w0]

0000329a <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    329a:	10 50 21    	mov.w     #0x1501, w0
    329c:	80 c0 eb    	setm.b    w1
    329e:	01 48 78    	mov.b     w1, [w0]

000032a0 <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    32a0:	40 83 20    	mov.w     #0x834, w0
    32a2:	10 40 78    	mov.b     [w0], w0
    32a4:	80 80 fb    	ze        w0, w1
    32a6:	00 06 20    	mov.w     #0x60, w0
    32a8:	00 80 60    	and.w     w1, w0, w0
    32aa:	00 00 e0    	cp0.w     w0
    32ac:	04 00 32    	bra       Z, 0x32b6 <.L25>
    32ae:	01 04 20    	mov.w     #0x40, w1
    32b0:	81 0f 50    	sub.w     w0, w1, [w15]
    32b2:	03 00 32    	bra       Z, 0x32ba <.L26>
    32b4:	04 00 37    	bra       0x32be <.L28>

000032b6 <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    32b6:	08 00 07    	rcall     0x32c8 <_StandardRequests>

000032b8 <.LSM103>:
            break;
    32b8:	05 00 37    	bra       0x32c4 <.L21>

000032ba <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    32ba:	03 08 07    	rcall     0x42c2 <_VendorRequests>

000032bc <.LSM105>:
            break;
    32bc:	03 00 37    	bra       0x32c4 <.L21>

000032be <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    32be:	3c c8 bf    	mov.b     0x83c, WREG
    32c0:	00 04 a0    	bset.b    w0, #0x0
    32c2:	3c e8 b7    	mov.b     WREG, 0x83c

000032c4 <.L21>:
    }
}
    32c4:	00 80 fa    	ulnk      
    32c6:	00 00 06    	return    

000032c8 <_StandardRequests>:

void StandardRequests(void) {
    32c8:	06 00 fa    	lnk       #0x6

000032ca <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    32ca:	40 83 20    	mov.w     #0x834, w0
    32cc:	10 40 90    	mov.b     [w0+1], w0
    32ce:	00 80 fb    	ze        w0, w0
    32d0:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    32d2:	79 01 32    	bra       Z, 0x35c6 <.L34>
    32d4:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    32d6:	0c 00 3c    	bra       GT, 0x32f0 <.L39>
    32d8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    32da:	bf 00 32    	bra       Z, 0x345a <.L32>
    32dc:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    32de:	03 00 3c    	bra       GT, 0x32e6 <.L40>
    32e0:	00 00 e0    	cp0.w     w0
    32e2:	12 00 32    	bra       Z, 0x3308 <.L31>
    32e4:	5c 02 37    	bra       0x379e <.L30>

000032e6 <.L40>:
    32e6:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    32e8:	b8 00 32    	bra       Z, 0x345a <.L32>
    32ea:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    32ec:	4c 01 32    	bra       Z, 0x3586 <.L33>
    32ee:	57 02 37    	bra       0x379e <.L30>

000032f0 <.L39>:
    32f0:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    32f2:	ef 01 32    	bra       Z, 0x36d2 <.L36>
    32f4:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    32f6:	03 00 3c    	bra       GT, 0x32fe <.L41>
    32f8:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    32fa:	e0 01 32    	bra       Z, 0x36bc <.L35>
    32fc:	50 02 37    	bra       0x379e <.L30>

000032fe <.L41>:
    32fe:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    3300:	12 02 32    	bra       Z, 0x3726 <.L37>
    3302:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    3304:	2b 02 32    	bra       Z, 0x375c <.L38>
    3306:	4b 02 37    	bra       0x379e <.L30>

00003308 <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    3308:	40 83 20    	mov.w     #0x834, w0
    330a:	10 40 78    	mov.b     [w0], w0
    330c:	00 80 fb    	ze        w0, w0
    330e:	7f 00 60    	and.w     w0, #0x1f, w0
    3310:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3312:	13 00 32    	bra       Z, 0x333a <.L44>
    3314:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3316:	32 00 32    	bra       Z, 0x337c <.L45>
    3318:	00 00 e0    	cp0.w     w0
    331a:	9a 00 3a    	bra       NZ, 0x3450 <.L128>

0000331c <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    331c:	30 a0 80    	mov.w     0x1406, w0
    331e:	e1 83 20    	mov.w     #0x83e, w1
    3320:	91 40 78    	mov.b     [w1], w1
    3322:	01 48 78    	mov.b     w1, [w0]

00003324 <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    3324:	30 a0 80    	mov.w     0x1406, w0
    3326:	00 00 e8    	inc.w     w0, w0
    3328:	80 40 eb    	clr.b     w1
    332a:	01 48 78    	mov.b     w1, [w0]

0000332c <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    332c:	40 40 21    	mov.w     #0x1404, w0
    332e:	21 c0 b3    	mov.b     #0x2, w1
    3330:	01 48 78    	mov.b     w1, [w0]

00003332 <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    3332:	50 40 21    	mov.w     #0x1405, w0
    3334:	81 cc b3    	mov.b     #0xc8, w1
    3336:	01 48 78    	mov.b     w1, [w0]

00003338 <.LSM115>:
                    break;
    3338:	8f 00 37    	bra       0x3458 <.L46>

0000333a <.L44>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    333a:	40 c8 bf    	mov.b     0x840, WREG
    333c:	00 80 fb    	ze        w0, w0
    333e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3340:	03 00 32    	bra       Z, 0x3348 <.L48>
    3342:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3344:	05 00 32    	bra       Z, 0x3350 <.L49>
    3346:	19 00 37    	bra       0x337a <.L47>

00003348 <.L48>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3348:	3c c8 bf    	mov.b     0x83c, WREG
    334a:	00 04 a0    	bset.b    w0, #0x0
    334c:	3c e8 b7    	mov.b     WREG, 0x83c

0000334e <.LSM118>:
                            break;
    334e:	15 00 37    	bra       0x337a <.L47>

00003350 <.L49>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3350:	40 83 20    	mov.w     #0x834, w0
    3352:	40 40 90    	mov.b     [w0+4], w0
    3354:	00 04 e0    	cp0.b     w0
    3356:	0e 00 3a    	bra       NZ, 0x3374 <.L50>

00003358 <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    3358:	30 a0 80    	mov.w     0x1406, w0
    335a:	80 40 eb    	clr.b     w1
    335c:	01 48 78    	mov.b     w1, [w0]

0000335e <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    335e:	30 a0 80    	mov.w     0x1406, w0
    3360:	00 00 e8    	inc.w     w0, w0
    3362:	80 40 eb    	clr.b     w1
    3364:	01 48 78    	mov.b     w1, [w0]

00003366 <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    3366:	40 40 21    	mov.w     #0x1404, w0
    3368:	21 c0 b3    	mov.b     #0x2, w1
    336a:	01 48 78    	mov.b     w1, [w0]

0000336c <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    336c:	50 40 21    	mov.w     #0x1405, w0
    336e:	81 cc b3    	mov.b     #0xc8, w1
    3370:	01 48 78    	mov.b     w1, [w0]
    3372:	03 00 37    	bra       0x337a <.L47>

00003374 <.L50>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3374:	3c c8 bf    	mov.b     0x83c, WREG
    3376:	00 04 a0    	bset.b    w0, #0x0
    3378:	3c e8 b7    	mov.b     WREG, 0x83c

0000337a <.L47>:
                            }
                    }
                    break;
    337a:	6e 00 37    	bra       0x3458 <.L46>

0000337c <.L45>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    337c:	40 c8 bf    	mov.b     0x840, WREG
    337e:	00 80 fb    	ze        w0, w0
    3380:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3382:	03 00 32    	bra       Z, 0x338a <.L52>
    3384:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3386:	29 00 32    	bra       Z, 0x33da <.L53>
    3388:	5f 00 37    	bra       0x3448 <.L129>

0000338a <.L52>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    338a:	40 83 20    	mov.w     #0x834, w0
    338c:	40 40 90    	mov.b     [w0+4], w0
    338e:	00 80 fb    	ze        w0, w0
    3390:	6f 00 60    	and.w     w0, #0xf, w0
    3392:	00 00 e0    	cp0.w     w0
    3394:	1e 00 3a    	bra       NZ, 0x33d2 <.L54>

00003396 <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    3396:	31 a0 80    	mov.w     0x1406, w1
    3398:	40 83 20    	mov.w     #0x834, w0
    339a:	40 40 90    	mov.b     [w0+4], w0
    339c:	00 04 e0    	cp0.b     w0
    339e:	07 00 3d    	bra       GE, 0x33ae <.L55>
    33a0:	50 40 21    	mov.w     #0x1405, w0
    33a2:	10 40 78    	mov.b     [w0], w0
    33a4:	00 80 fb    	ze        w0, w0
    33a6:	64 00 60    	and.w     w0, #0x4, w0
    33a8:	42 80 de    	asr.w     w0, #0x2, w0
    33aa:	00 40 78    	mov.b     w0, w0
    33ac:	06 00 37    	bra       0x33ba <.L56>

000033ae <.L55>:
    33ae:	10 40 21    	mov.w     #0x1401, w0
    33b0:	10 40 78    	mov.b     [w0], w0
    33b2:	00 80 fb    	ze        w0, w0
    33b4:	64 00 60    	and.w     w0, #0x4, w0
    33b6:	42 80 de    	asr.w     w0, #0x2, w0
    33b8:	00 40 78    	mov.b     w0, w0

000033ba <.L56>:
    33ba:	80 48 78    	mov.b     w0, [w1]

000033bc <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    33bc:	30 a0 80    	mov.w     0x1406, w0
    33be:	00 00 e8    	inc.w     w0, w0
    33c0:	80 40 eb    	clr.b     w1
    33c2:	01 48 78    	mov.b     w1, [w0]

000033c4 <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    33c4:	40 40 21    	mov.w     #0x1404, w0
    33c6:	21 c0 b3    	mov.b     #0x2, w1
    33c8:	01 48 78    	mov.b     w1, [w0]

000033ca <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    33ca:	50 40 21    	mov.w     #0x1405, w0
    33cc:	81 cc b3    	mov.b     #0xc8, w1
    33ce:	01 48 78    	mov.b     w1, [w0]
    33d0:	03 00 37    	bra       0x33d8 <.L57>

000033d2 <.L54>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    33d2:	3c c8 bf    	mov.b     0x83c, WREG
    33d4:	00 04 a0    	bset.b    w0, #0x0
    33d6:	3c e8 b7    	mov.b     WREG, 0x83c

000033d8 <.L57>:
                            }
                            break;
    33d8:	3a 00 37    	bra       0x344e <.L58>

000033da <.L53>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    33da:	a0 4a 20    	mov.w     #0x4aa, w0
    33dc:	10 07 98    	mov.w     w0, [w14+2]

000033de <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    33de:	40 83 20    	mov.w     #0x834, w0
    33e0:	40 40 90    	mov.b     [w0+4], w0
    33e2:	6f 4f 60    	and.b     w0, #0xf, [w14]

000033e4 <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    33e4:	1e 80 fb    	ze        [w14], w0
    33e6:	00 00 40    	add.w     w0, w0, w0
    33e8:	80 00 78    	mov.w     w0, w1
    33ea:	40 83 20    	mov.w     #0x834, w0
    33ec:	40 40 90    	mov.b     [w0+4], w0
    33ee:	00 00 fb    	se        w0, w0
    33f0:	4f 00 de    	lsr.w     w0, #0xf, w0
    33f2:	01 00 70    	ior.w     w0, w1, w0
    33f4:	c2 00 dd    	sl.w      w0, #0x2, w1
    33f6:	00 40 21    	mov.w     #0x1400, w0
    33f8:	00 80 40    	add.w     w1, w0, w0
    33fa:	20 07 98    	mov.w     w0, [w14+4]

000033fc <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    33fc:	1e 80 fb    	ze        [w14], w0
    33fe:	00 00 40    	add.w     w0, w0, w0
    3400:	9e 00 90    	mov.w     [w14+2], w1
    3402:	00 80 40    	add.w     w1, w0, w0
    3404:	90 00 78    	mov.w     [w0], w1
    3406:	40 83 20    	mov.w     #0x834, w0
    3408:	40 40 90    	mov.b     [w0+4], w0
    340a:	00 04 e0    	cp0.b     w0
    340c:	02 00 3d    	bra       GE, 0x3412 <.L59>
    340e:	40 00 20    	mov.w     #0x4, w0
    3410:	01 00 37    	bra       0x3414 <.L60>

00003412 <.L59>:
    3412:	80 00 20    	mov.w     #0x8, w0

00003414 <.L60>:
    3414:	00 80 60    	and.w     w1, w0, w0
    3416:	00 00 e0    	cp0.w     w0
    3418:	13 00 32    	bra       Z, 0x3440 <.L61>

0000341a <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    341a:	30 a0 80    	mov.w     0x1406, w0
    341c:	ae 00 90    	mov.w     [w14+4], w1
    341e:	91 40 90    	mov.b     [w1+1], w1
    3420:	81 80 fb    	ze        w1, w1
    3422:	e4 80 60    	and.w     w1, #0x4, w1
    3424:	c2 88 de    	asr.w     w1, #0x2, w1
    3426:	81 40 78    	mov.b     w1, w1
    3428:	01 48 78    	mov.b     w1, [w0]

0000342a <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    342a:	30 a0 80    	mov.w     0x1406, w0
    342c:	00 00 e8    	inc.w     w0, w0
    342e:	80 40 eb    	clr.b     w1
    3430:	01 48 78    	mov.b     w1, [w0]

00003432 <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    3432:	40 40 21    	mov.w     #0x1404, w0
    3434:	21 c0 b3    	mov.b     #0x2, w1
    3436:	01 48 78    	mov.b     w1, [w0]

00003438 <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3438:	50 40 21    	mov.w     #0x1405, w0
    343a:	81 cc b3    	mov.b     #0xc8, w1
    343c:	01 48 78    	mov.b     w1, [w0]
    343e:	03 00 37    	bra       0x3446 <.L62>

00003440 <.L61>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3440:	3c c8 bf    	mov.b     0x83c, WREG
    3442:	00 04 a0    	bset.b    w0, #0x0
    3444:	3c e8 b7    	mov.b     WREG, 0x83c

00003446 <.L62>:
                            }
                            break;
    3446:	03 00 37    	bra       0x344e <.L58>

00003448 <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3448:	3c c8 bf    	mov.b     0x83c, WREG
    344a:	00 04 a0    	bset.b    w0, #0x0
    344c:	3c e8 b7    	mov.b     WREG, 0x83c

0000344e <.L58>:
                    }
                    break;
    344e:	04 00 37    	bra       0x3458 <.L46>

00003450 <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    3450:	3c c8 bf    	mov.b     0x83c, WREG
    3452:	00 04 a0    	bset.b    w0, #0x0
    3454:	3c e8 b7    	mov.b     WREG, 0x83c

00003456 <.LSM147>:
            }
            break;
    3456:	a6 01 37    	bra       0x37a4 <.L29>

00003458 <.L46>:
    3458:	a5 01 37    	bra       0x37a4 <.L29>

0000345a <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    345a:	40 83 20    	mov.w     #0x834, w0
    345c:	10 40 78    	mov.b     [w0], w0
    345e:	00 80 fb    	ze        w0, w0
    3460:	7f 00 60    	and.w     w0, #0x1f, w0
    3462:	00 00 e0    	cp0.w     w0
    3464:	03 00 32    	bra       Z, 0x346c <.L65>
    3466:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    3468:	1e 00 32    	bra       Z, 0x34a6 <.L66>
    346a:	88 00 37    	bra       0x357c <.L130>

0000346c <.L65>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    346c:	40 83 20    	mov.w     #0x834, w0
    346e:	20 40 90    	mov.b     [w0+2], w0
    3470:	00 80 fb    	ze        w0, w0
    3472:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3474:	14 00 3a    	bra       NZ, 0x349e <.L131>

00003476 <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    3476:	40 83 20    	mov.w     #0x834, w0
    3478:	10 40 90    	mov.b     [w0+1], w0
    347a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    347c:	06 00 3a    	bra       NZ, 0x348a <.L69>

0000347e <.LSM151>:
                                USB_device_status &= 0xFE;
    347e:	e1 83 20    	mov.w     #0x83e, w1
    3480:	91 40 78    	mov.b     [w1], w1
    3482:	e0 cf b3    	mov.b     #0xfe, w0
    3484:	00 c0 60    	and.b     w1, w0, w0
    3486:	3e e8 b7    	mov.b     WREG, 0x83e
    3488:	03 00 37    	bra       0x3490 <.L70>

0000348a <.L69>:
                            else
                                USB_device_status |= 0x01;
    348a:	3e c8 bf    	mov.b     0x83e, WREG
    348c:	00 04 a0    	bset.b    w0, #0x0
    348e:	3e e8 b7    	mov.b     WREG, 0x83e

00003490 <.L70>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    3490:	40 40 21    	mov.w     #0x1404, w0
    3492:	80 40 eb    	clr.b     w1
    3494:	01 48 78    	mov.b     w1, [w0]

00003496 <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3496:	50 40 21    	mov.w     #0x1405, w0
    3498:	81 cc b3    	mov.b     #0xc8, w1
    349a:	01 48 78    	mov.b     w1, [w0]

0000349c <.LSM155>:
                            break;
    349c:	03 00 37    	bra       0x34a4 <.L71>

0000349e <.L131>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    349e:	3c c8 bf    	mov.b     0x83c, WREG
    34a0:	00 04 a0    	bset.b    w0, #0x0
    34a2:	3c e8 b7    	mov.b     WREG, 0x83c

000034a4 <.L71>:
                    }
                    break;
    34a4:	6f 00 37    	bra       0x3584 <.L72>

000034a6 <.L66>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    34a6:	40 c8 bf    	mov.b     0x840, WREG
    34a8:	00 80 fb    	ze        w0, w0
    34aa:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    34ac:	03 00 32    	bra       Z, 0x34b4 <.L74>
    34ae:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    34b0:	12 00 32    	bra       Z, 0x34d6 <.L75>
    34b2:	60 00 37    	bra       0x3574 <.L132>

000034b4 <.L74>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    34b4:	40 83 20    	mov.w     #0x834, w0
    34b6:	40 40 90    	mov.b     [w0+4], w0
    34b8:	00 80 fb    	ze        w0, w0
    34ba:	6f 00 60    	and.w     w0, #0xf, w0
    34bc:	00 00 e0    	cp0.w     w0
    34be:	07 00 3a    	bra       NZ, 0x34ce <.L76>

000034c0 <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    34c0:	40 40 21    	mov.w     #0x1404, w0
    34c2:	80 40 eb    	clr.b     w1
    34c4:	01 48 78    	mov.b     w1, [w0]

000034c6 <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    34c6:	50 40 21    	mov.w     #0x1405, w0
    34c8:	81 cc b3    	mov.b     #0xc8, w1
    34ca:	01 48 78    	mov.b     w1, [w0]
    34cc:	03 00 37    	bra       0x34d4 <.L77>

000034ce <.L76>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    34ce:	3c c8 bf    	mov.b     0x83c, WREG
    34d0:	00 04 a0    	bset.b    w0, #0x0
    34d2:	3c e8 b7    	mov.b     WREG, 0x83c

000034d4 <.L77>:
                            }
                            break;
    34d4:	52 00 37    	bra       0x357a <.L78>

000034d6 <.L75>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    34d6:	a0 4a 20    	mov.w     #0x4aa, w0
    34d8:	10 07 98    	mov.w     w0, [w14+2]

000034da <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    34da:	40 83 20    	mov.w     #0x834, w0
    34dc:	40 40 90    	mov.b     [w0+4], w0
    34de:	6f 4f 60    	and.b     w0, #0xf, [w14]
    34e0:	1e 40 78    	mov.b     [w14], w0
    34e2:	00 04 e0    	cp0.b     w0
    34e4:	3b 00 32    	bra       Z, 0x355c <.L79>

000034e6 <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    34e6:	1e 80 fb    	ze        [w14], w0
    34e8:	00 00 40    	add.w     w0, w0, w0
    34ea:	80 00 78    	mov.w     w0, w1
    34ec:	40 83 20    	mov.w     #0x834, w0
    34ee:	40 40 90    	mov.b     [w0+4], w0
    34f0:	00 00 fb    	se        w0, w0
    34f2:	4f 00 de    	lsr.w     w0, #0xf, w0
    34f4:	01 00 70    	ior.w     w0, w1, w0
    34f6:	c2 00 dd    	sl.w      w0, #0x2, w1
    34f8:	00 40 21    	mov.w     #0x1400, w0
    34fa:	00 80 40    	add.w     w1, w0, w0
    34fc:	20 07 98    	mov.w     w0, [w14+4]

000034fe <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    34fe:	40 83 20    	mov.w     #0x834, w0
    3500:	40 40 90    	mov.b     [w0+4], w0
    3502:	00 04 e0    	cp0.b     w0
    3504:	16 00 3d    	bra       GE, 0x3532 <.L80>

00003506 <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    3506:	1e 80 fb    	ze        [w14], w0
    3508:	00 00 40    	add.w     w0, w0, w0
    350a:	9e 00 90    	mov.w     [w14+2], w1
    350c:	00 80 40    	add.w     w1, w0, w0
    350e:	10 00 78    	mov.w     [w0], w0
    3510:	64 00 60    	and.w     w0, #0x4, w0
    3512:	00 00 e0    	cp0.w     w0
    3514:	0a 00 32    	bra       Z, 0x352a <.L81>

00003516 <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    3516:	40 83 20    	mov.w     #0x834, w0
    3518:	10 40 90    	mov.b     [w0+1], w0
    351a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    351c:	02 00 3a    	bra       NZ, 0x3522 <.L82>
    351e:	00 40 eb    	clr.b     w0
    3520:	01 00 37    	bra       0x3524 <.L83>

00003522 <.L82>:
    3522:	40 c8 b3    	mov.b     #0x84, w0

00003524 <.L83>:
    3524:	ae 00 90    	mov.w     [w14+4], w1
    3526:	90 40 98    	mov.b     w0, [w1+1]
    3528:	19 00 37    	bra       0x355c <.L79>

0000352a <.L81>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    352a:	3c c8 bf    	mov.b     0x83c, WREG
    352c:	00 04 a0    	bset.b    w0, #0x0
    352e:	3c e8 b7    	mov.b     WREG, 0x83c
    3530:	15 00 37    	bra       0x355c <.L79>

00003532 <.L80>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    3532:	1e 80 fb    	ze        [w14], w0
    3534:	00 00 40    	add.w     w0, w0, w0
    3536:	9e 00 90    	mov.w     [w14+2], w1
    3538:	00 80 40    	add.w     w1, w0, w0
    353a:	10 00 78    	mov.w     [w0], w0
    353c:	68 00 60    	and.w     w0, #0x8, w0
    353e:	00 00 e0    	cp0.w     w0
    3540:	0a 00 32    	bra       Z, 0x3556 <.L84>

00003542 <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    3542:	40 83 20    	mov.w     #0x834, w0
    3544:	10 40 90    	mov.b     [w0+1], w0
    3546:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    3548:	02 00 3a    	bra       NZ, 0x354e <.L85>
    354a:	80 c8 b3    	mov.b     #0x88, w0
    354c:	01 00 37    	bra       0x3550 <.L86>

0000354e <.L85>:
    354e:	40 c8 b3    	mov.b     #0x84, w0

00003550 <.L86>:
    3550:	ae 00 90    	mov.w     [w14+4], w1
    3552:	90 40 98    	mov.b     w0, [w1+1]
    3554:	03 00 37    	bra       0x355c <.L79>

00003556 <.L84>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3556:	3c c8 bf    	mov.b     0x83c, WREG
    3558:	00 04 a0    	bset.b    w0, #0x0
    355a:	3c e8 b7    	mov.b     WREG, 0x83c

0000355c <.L79>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    355c:	3c c8 bf    	mov.b     0x83c, WREG
    355e:	00 80 fb    	ze        w0, w0
    3560:	61 00 60    	and.w     w0, #0x1, w0
    3562:	00 00 e0    	cp0.w     w0
    3564:	06 00 3a    	bra       NZ, 0x3572 <.L87>

00003566 <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    3566:	40 40 21    	mov.w     #0x1404, w0
    3568:	80 40 eb    	clr.b     w1
    356a:	01 48 78    	mov.b     w1, [w0]

0000356c <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    356c:	50 40 21    	mov.w     #0x1405, w0
    356e:	81 cc b3    	mov.b     #0xc8, w1
    3570:	01 48 78    	mov.b     w1, [w0]

00003572 <.L87>:
                            }
                            break;
    3572:	03 00 37    	bra       0x357a <.L78>

00003574 <.L132>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3574:	3c c8 bf    	mov.b     0x83c, WREG
    3576:	00 04 a0    	bset.b    w0, #0x0
    3578:	3c e8 b7    	mov.b     WREG, 0x83c

0000357a <.L78>:
                    }
                    break;
    357a:	04 00 37    	bra       0x3584 <.L72>

0000357c <.L130>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    357c:	3c c8 bf    	mov.b     0x83c, WREG
    357e:	00 04 a0    	bset.b    w0, #0x0
    3580:	3c e8 b7    	mov.b     WREG, 0x83c

00003582 <.LSM181>:
            }
            break;
    3582:	10 01 37    	bra       0x37a4 <.L29>

00003584 <.L72>:
    3584:	0f 01 37    	bra       0x37a4 <.L29>

00003586 <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    3586:	40 83 20    	mov.w     #0x834, w0
    3588:	20 40 90    	mov.b     [w0+2], w0
    358a:	00 04 e0    	cp0.b     w0
    358c:	04 00 3d    	bra       GE, 0x3596 <.L88>

0000358e <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    358e:	3c c8 bf    	mov.b     0x83c, WREG
    3590:	00 04 a0    	bset.b    w0, #0x0
    3592:	3c e8 b7    	mov.b     WREG, 0x83c

00003594 <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    3594:	07 01 37    	bra       0x37a4 <.L29>

00003596 <.L88>:
    3596:	40 83 20    	mov.w     #0x834, w0
    3598:	90 40 78    	mov.b     [w0], w1
    359a:	00 50 21    	mov.w     #0x1500, w0
    359c:	01 48 78    	mov.b     w1, [w0]

0000359e <.LSM186>:
    359e:	40 83 20    	mov.w     #0x834, w0
    35a0:	90 40 90    	mov.b     [w0+1], w1
    35a2:	10 50 21    	mov.w     #0x1501, w0
    35a4:	01 48 78    	mov.b     w1, [w0]

000035a6 <.LSM187>:
    35a6:	40 83 20    	mov.w     #0x834, w0
    35a8:	10 00 90    	mov.w     [w0+2], w0
    35aa:	10 a8 88    	mov.w     w0, 0x1502

000035ac <.LSM188>:
    35ac:	40 83 20    	mov.w     #0x834, w0
    35ae:	20 00 90    	mov.w     [w0+4], w0
    35b0:	20 a8 88    	mov.w     w0, 0x1504

000035b2 <.LSM189>:
    35b2:	40 83 20    	mov.w     #0x834, w0
    35b4:	30 00 90    	mov.w     [w0+6], w0
    35b6:	30 a8 88    	mov.w     w0, 0x1506

000035b8 <.LSM190>:
    35b8:	40 40 21    	mov.w     #0x1404, w0
    35ba:	80 40 eb    	clr.b     w1
    35bc:	01 48 78    	mov.b     w1, [w0]

000035be <.LSM191>:
    35be:	50 40 21    	mov.w     #0x1405, w0
    35c0:	81 cc b3    	mov.b     #0xc8, w1
    35c2:	01 48 78    	mov.b     w1, [w0]

000035c4 <.LSM192>:
    35c4:	ef 00 37    	bra       0x37a4 <.L29>

000035c6 <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    35c6:	40 83 20    	mov.w     #0x834, w0
    35c8:	90 40 78    	mov.b     [w0], w1
    35ca:	00 50 21    	mov.w     #0x1500, w0
    35cc:	01 48 78    	mov.b     w1, [w0]

000035ce <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    35ce:	40 83 20    	mov.w     #0x834, w0
    35d0:	90 40 90    	mov.b     [w0+1], w1
    35d2:	10 50 21    	mov.w     #0x1501, w0
    35d4:	01 48 78    	mov.b     w1, [w0]

000035d6 <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    35d6:	40 83 20    	mov.w     #0x834, w0
    35d8:	10 00 90    	mov.w     [w0+2], w0
    35da:	10 a8 88    	mov.w     w0, 0x1502

000035dc <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    35dc:	40 83 20    	mov.w     #0x834, w0
    35de:	20 00 90    	mov.w     [w0+4], w0
    35e0:	20 a8 88    	mov.w     w0, 0x1504

000035e2 <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    35e2:	40 83 20    	mov.w     #0x834, w0
    35e4:	30 00 90    	mov.w     [w0+6], w0
    35e6:	30 a8 88    	mov.w     w0, 0x1506

000035e8 <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    35e8:	40 83 20    	mov.w     #0x834, w0
    35ea:	30 40 90    	mov.b     [w0+3], w0
    35ec:	00 80 fb    	ze        w0, w0
    35ee:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    35f0:	14 00 32    	bra       Z, 0x361a <.L92>
    35f2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    35f4:	36 00 32    	bra       Z, 0x3662 <.L93>
    35f6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    35f8:	5c 00 3a    	bra       NZ, 0x36b2 <.L133>

000035fa <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    35fa:	60 23 2a    	mov.w     #0xa236, w0
    35fc:	40 a8 88    	mov.w     w0, 0x1508

000035fe <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    35fe:	40 a8 80    	mov.w     0x1508, w0
    3600:	10 40 78    	mov.b     [w0], w0
    3602:	00 80 fb    	ze        w0, w0
    3604:	50 a8 88    	mov.w     w0, 0x150a

00003606 <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    3606:	40 83 20    	mov.w     #0x834, w0
    3608:	b0 00 90    	mov.w     [w0+6], w1
    360a:	50 a8 80    	mov.w     0x150a, w0
    360c:	80 8f 50    	sub.w     w1, w0, [w15]
    360e:	03 00 31    	bra       C, 0x3616 <.L94>

00003610 <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    3610:	40 83 20    	mov.w     #0x834, w0
    3612:	30 00 90    	mov.w     [w0+6], w0
    3614:	50 a8 88    	mov.w     w0, 0x150a

00003616 <.L94>:
                    }
                    SendDataPacket();
    3616:	22 01 07    	rcall     0x385c <_SendDataPacket>

00003618 <.LSM204>:
                    break;
    3618:	50 00 37    	bra       0x36ba <.L95>

0000361a <.L92>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    361a:	40 83 20    	mov.w     #0x834, w0
    361c:	20 40 90    	mov.b     [w0+2], w0
    361e:	00 80 fb    	ze        w0, w0
    3620:	00 00 e0    	cp0.w     w0
    3622:	03 00 3a    	bra       NZ, 0x362a <.L134>

00003624 <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    3624:	80 24 2a    	mov.w     #0xa248, w0
    3626:	40 a8 88    	mov.w     w0, 0x1508

00003628 <.LSM207>:
                            break;
    3628:	03 00 37    	bra       0x3630 <.L98>

0000362a <.L134>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    362a:	3c c8 bf    	mov.b     0x83c, WREG
    362c:	00 04 a0    	bset.b    w0, #0x0
    362e:	3c e8 b7    	mov.b     WREG, 0x83c

00003630 <.L98>:
                    }
                    if (!(USB_error_flags&0x01)) {
    3630:	3c c8 bf    	mov.b     0x83c, WREG
    3632:	00 80 fb    	ze        w0, w0
    3634:	61 00 60    	and.w     w0, #0x1, w0
    3636:	00 00 e0    	cp0.w     w0
    3638:	13 00 3a    	bra       NZ, 0x3660 <.L99>

0000363a <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    363a:	40 a8 80    	mov.w     0x1508, w0
    363c:	00 80 e8    	inc2.w    w0, w0
    363e:	90 40 78    	mov.b     [w0], w1
    3640:	a0 50 21    	mov.w     #0x150a, w0
    3642:	01 48 78    	mov.b     w1, [w0]

00003644 <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    3644:	40 a8 80    	mov.w     0x1508, w0
    3646:	63 00 40    	add.w     w0, #0x3, w0
    3648:	90 40 78    	mov.b     [w0], w1
    364a:	b0 50 21    	mov.w     #0x150b, w0
    364c:	01 48 78    	mov.b     w1, [w0]

0000364e <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    364e:	40 83 20    	mov.w     #0x834, w0
    3650:	b0 00 90    	mov.w     [w0+6], w1
    3652:	50 a8 80    	mov.w     0x150a, w0
    3654:	80 8f 50    	sub.w     w1, w0, [w15]
    3656:	03 00 31    	bra       C, 0x365e <.L100>

00003658 <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    3658:	40 83 20    	mov.w     #0x834, w0
    365a:	30 00 90    	mov.w     [w0+6], w0
    365c:	50 a8 88    	mov.w     w0, 0x150a

0000365e <.L100>:
                        }
                        SendDataPacket();
    365e:	fe 00 07    	rcall     0x385c <_SendDataPacket>

00003660 <.L99>:
                    }
                    break;
    3660:	2c 00 37    	bra       0x36ba <.L95>

00003662 <.L93>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    3662:	40 83 20    	mov.w     #0x834, w0
    3664:	20 40 90    	mov.b     [w0+2], w0
    3666:	00 80 fb    	ze        w0, w0
    3668:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    366a:	07 00 32    	bra       Z, 0x367a <.L103>
    366c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    366e:	08 00 32    	bra       Z, 0x3680 <.L104>
    3670:	00 00 e0    	cp0.w     w0
    3672:	09 00 3a    	bra       NZ, 0x3686 <.L135>

00003674 <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    3674:	a0 25 2a    	mov.w     #0xa25a, w0
    3676:	40 a8 88    	mov.w     w0, 0x1508

00003678 <.LSM218>:
                            break;
    3678:	09 00 37    	bra       0x368c <.L105>

0000367a <.L103>:
                        case 1:
                            USB_request.data_ptr = String1;
    367a:	e0 25 2a    	mov.w     #0xa25e, w0
    367c:	40 a8 88    	mov.w     w0, 0x1508

0000367e <.LSM220>:
                            break;
    367e:	06 00 37    	bra       0x368c <.L105>

00003680 <.L104>:
                        case 2:
                            USB_request.data_ptr = String2;
    3680:	80 27 2a    	mov.w     #0xa278, w0
    3682:	40 a8 88    	mov.w     w0, 0x1508

00003684 <.LSM222>:
                            break;
    3684:	03 00 37    	bra       0x368c <.L105>

00003686 <.L135>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    3686:	3c c8 bf    	mov.b     0x83c, WREG
    3688:	00 04 a0    	bset.b    w0, #0x0
    368a:	3c e8 b7    	mov.b     WREG, 0x83c

0000368c <.L105>:
                    }
                    if (!(USB_error_flags&0x01)) {
    368c:	3c c8 bf    	mov.b     0x83c, WREG
    368e:	00 80 fb    	ze        w0, w0
    3690:	61 00 60    	and.w     w0, #0x1, w0
    3692:	00 00 e0    	cp0.w     w0
    3694:	0d 00 3a    	bra       NZ, 0x36b0 <.L106>

00003696 <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    3696:	40 a8 80    	mov.w     0x1508, w0
    3698:	10 40 78    	mov.b     [w0], w0
    369a:	00 80 fb    	ze        w0, w0
    369c:	50 a8 88    	mov.w     w0, 0x150a

0000369e <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    369e:	40 83 20    	mov.w     #0x834, w0
    36a0:	b0 00 90    	mov.w     [w0+6], w1
    36a2:	50 a8 80    	mov.w     0x150a, w0
    36a4:	80 8f 50    	sub.w     w1, w0, [w15]
    36a6:	03 00 31    	bra       C, 0x36ae <.L107>

000036a8 <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    36a8:	40 83 20    	mov.w     #0x834, w0
    36aa:	30 00 90    	mov.w     [w0+6], w0
    36ac:	50 a8 88    	mov.w     w0, 0x150a

000036ae <.L107>:
                        }
                        SendDataPacket();
    36ae:	d6 00 07    	rcall     0x385c <_SendDataPacket>

000036b0 <.L106>:
                    }
                    break;
    36b0:	04 00 37    	bra       0x36ba <.L95>

000036b2 <.L133>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    36b2:	3c c8 bf    	mov.b     0x83c, WREG
    36b4:	00 04 a0    	bset.b    w0, #0x0
    36b6:	3c e8 b7    	mov.b     WREG, 0x83c

000036b8 <.LSM231>:
            }
            break;
    36b8:	75 00 37    	bra       0x37a4 <.L29>

000036ba <.L95>:
    36ba:	74 00 37    	bra       0x37a4 <.L29>

000036bc <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    36bc:	30 a0 80    	mov.w     0x1406, w0
    36be:	d1 83 20    	mov.w     #0x83d, w1
    36c0:	91 40 78    	mov.b     [w1], w1
    36c2:	01 48 78    	mov.b     w1, [w0]

000036c4 <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    36c4:	40 40 21    	mov.w     #0x1404, w0
    36c6:	11 c0 b3    	mov.b     #0x1, w1
    36c8:	01 48 78    	mov.b     w1, [w0]

000036ca <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    36ca:	50 40 21    	mov.w     #0x1405, w0
    36cc:	81 cc b3    	mov.b     #0xc8, w1
    36ce:	01 48 78    	mov.b     w1, [w0]

000036d0 <.LSM235>:
            break;
    36d0:	69 00 37    	bra       0x37a4 <.L29>

000036d2 <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    36d2:	40 83 20    	mov.w     #0x834, w0
    36d4:	20 40 90    	mov.b     [w0+2], w0
    36d6:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    36d8:	22 00 3e    	bra       GTU, 0x371e <.L108>

000036da <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    36da:	a0 4a 20    	mov.w     #0x4aa, w0
    36dc:	10 07 98    	mov.w     w0, [w14+2]

000036de <.LSM238>:
                for (n = 1; n<16; n++)
    36de:	10 c0 b3    	mov.b     #0x1, w0
    36e0:	00 4f 78    	mov.b     w0, [w14]
    36e2:	07 00 37    	bra       0x36f2 <.L109>

000036e4 <.L110>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    36e4:	1e 80 fb    	ze        [w14], w0
    36e6:	00 00 40    	add.w     w0, w0, w0
    36e8:	9e 00 90    	mov.w     [w14+2], w1
    36ea:	00 80 40    	add.w     w1, w0, w0
    36ec:	80 00 eb    	clr.w     w1
    36ee:	01 08 78    	mov.w     w1, [w0]

000036f0 <.LSM240>:
    36f0:	1e 4f e8    	inc.b     [w14], [w14]

000036f2 <.L109>:
    36f2:	1e 40 78    	mov.b     [w14], w0
    36f4:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    36f6:	f6 ff 36    	bra       LEU, 0x36e4 <.L110>

000036f8 <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    36f8:	40 83 20    	mov.w     #0x834, w0
    36fa:	20 40 90    	mov.b     [w0+2], w0
    36fc:	3d e8 b7    	mov.b     WREG, 0x83d
    36fe:	3d c8 bf    	mov.b     0x83d, WREG
    3700:	00 80 fb    	ze        w0, w0
    3702:	00 00 e0    	cp0.w     w0
    3704:	03 00 3a    	bra       NZ, 0x370c <.L136>

00003706 <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    3706:	20 c0 b3    	mov.b     #0x2, w0
    3708:	40 e8 b7    	mov.b     WREG, 0x840

0000370a <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    370a:	02 00 37    	bra       0x3710 <.L113>

0000370c <.L136>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    370c:	30 c0 b3    	mov.b     #0x3, w0
    370e:	40 e8 b7    	mov.b     WREG, 0x840

00003710 <.L113>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    3710:	40 40 21    	mov.w     #0x1404, w0
    3712:	80 40 eb    	clr.b     w1
    3714:	01 48 78    	mov.b     w1, [w0]

00003716 <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    3716:	50 40 21    	mov.w     #0x1405, w0
    3718:	81 cc b3    	mov.b     #0xc8, w1
    371a:	01 48 78    	mov.b     w1, [w0]

0000371c <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    371c:	43 00 37    	bra       0x37a4 <.L29>

0000371e <.L108>:
    371e:	3c c8 bf    	mov.b     0x83c, WREG
    3720:	00 04 a0    	bset.b    w0, #0x0
    3722:	3c e8 b7    	mov.b     WREG, 0x83c

00003724 <.LSM249>:
    3724:	3f 00 37    	bra       0x37a4 <.L29>

00003726 <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    3726:	40 c8 bf    	mov.b     0x840, WREG
    3728:	00 80 fb    	ze        w0, w0
    372a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    372c:	13 00 3a    	bra       NZ, 0x3754 <.L137>

0000372e <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    372e:	40 83 20    	mov.w     #0x834, w0
    3730:	40 40 90    	mov.b     [w0+4], w0
    3732:	00 04 e0    	cp0.b     w0
    3734:	0a 00 3a    	bra       NZ, 0x374a <.L117>

00003736 <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    3736:	30 a0 80    	mov.w     0x1406, w0
    3738:	80 40 eb    	clr.b     w1
    373a:	01 48 78    	mov.b     w1, [w0]

0000373c <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    373c:	40 40 21    	mov.w     #0x1404, w0
    373e:	11 c0 b3    	mov.b     #0x1, w1
    3740:	01 48 78    	mov.b     w1, [w0]

00003742 <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3742:	50 40 21    	mov.w     #0x1405, w0
    3744:	81 cc b3    	mov.b     #0xc8, w1
    3746:	01 48 78    	mov.b     w1, [w0]
    3748:	03 00 37    	bra       0x3750 <.L118>

0000374a <.L117>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    374a:	3c c8 bf    	mov.b     0x83c, WREG
    374c:	00 04 a0    	bset.b    w0, #0x0
    374e:	3c e8 b7    	mov.b     WREG, 0x83c

00003750 <.L118>:
                    }
                    break;
    3750:	00 00 00    	nop       

00003752 <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    3752:	28 00 37    	bra       0x37a4 <.L29>

00003754 <.L137>:
    3754:	3c c8 bf    	mov.b     0x83c, WREG
    3756:	00 04 a0    	bset.b    w0, #0x0
    3758:	3c e8 b7    	mov.b     WREG, 0x83c

0000375a <.LSM259>:
    375a:	24 00 37    	bra       0x37a4 <.L29>

0000375c <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    375c:	40 c8 bf    	mov.b     0x840, WREG
    375e:	00 80 fb    	ze        w0, w0
    3760:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    3762:	19 00 3a    	bra       NZ, 0x3796 <.L138>

00003764 <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3764:	40 83 20    	mov.w     #0x834, w0
    3766:	40 40 90    	mov.b     [w0+4], w0
    3768:	00 04 e0    	cp0.b     w0
    376a:	10 00 3a    	bra       NZ, 0x378c <.L122>

0000376c <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    376c:	40 83 20    	mov.w     #0x834, w0
    376e:	20 40 90    	mov.b     [w0+2], w0
    3770:	00 80 fb    	ze        w0, w0
    3772:	00 00 e0    	cp0.w     w0
    3774:	07 00 3a    	bra       NZ, 0x3784 <.L139>

00003776 <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    3776:	40 40 21    	mov.w     #0x1404, w0
    3778:	80 40 eb    	clr.b     w1
    377a:	01 48 78    	mov.b     w1, [w0]

0000377c <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    377c:	50 40 21    	mov.w     #0x1405, w0
    377e:	81 cc b3    	mov.b     #0xc8, w1
    3780:	01 48 78    	mov.b     w1, [w0]

00003782 <.LSM265>:
                                break;
    3782:	07 00 37    	bra       0x3792 <.L126>

00003784 <.L139>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3784:	3c c8 bf    	mov.b     0x83c, WREG
    3786:	00 04 a0    	bset.b    w0, #0x0
    3788:	3c e8 b7    	mov.b     WREG, 0x83c
    378a:	03 00 37    	bra       0x3792 <.L126>

0000378c <.L122>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    378c:	3c c8 bf    	mov.b     0x83c, WREG
    378e:	00 04 a0    	bset.b    w0, #0x0
    3790:	3c e8 b7    	mov.b     WREG, 0x83c

00003792 <.L126>:
                    }
                    break;
    3792:	00 00 00    	nop       

00003794 <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    3794:	07 00 37    	bra       0x37a4 <.L29>

00003796 <.L138>:
    3796:	3c c8 bf    	mov.b     0x83c, WREG
    3798:	00 04 a0    	bset.b    w0, #0x0
    379a:	3c e8 b7    	mov.b     WREG, 0x83c

0000379c <.LSM271>:
    379c:	03 00 37    	bra       0x37a4 <.L29>

0000379e <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    379e:	3c c8 bf    	mov.b     0x83c, WREG
    37a0:	00 04 a0    	bset.b    w0, #0x0
    37a2:	3c e8 b7    	mov.b     WREG, 0x83c

000037a4 <.L29>:
    }
}
    37a4:	00 80 fa    	ulnk      
    37a6:	00 00 06    	return    

000037a8 <_ProcessInToken>:

void ProcessInToken(void) {
    37a8:	00 00 fa    	lnk       #0x0

000037aa <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    37aa:	3f c8 bf    	mov.b     0x83f, WREG
    37ac:	80 80 fb    	ze        w0, w1
    37ae:	00 0f 20    	mov.w     #0xf0, w0
    37b0:	00 80 60    	and.w     w1, w0, w0
    37b2:	00 00 e0    	cp0.w     w0
    37b4:	2b 00 3a    	bra       NZ, 0x380c <.L140>

000037b6 <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    37b6:	00 50 21    	mov.w     #0x1500, w0
    37b8:	10 40 78    	mov.b     [w0], w0
    37ba:	80 80 fb    	ze        w0, w1
    37bc:	00 06 20    	mov.w     #0x60, w0
    37be:	00 80 60    	and.w     w1, w0, w0
    37c0:	01 02 20    	mov.w     #0x20, w1
    37c2:	81 0f 50    	sub.w     w0, w1, [w15]
    37c4:	1f 00 32    	bra       Z, 0x3804 <.L154>
    37c6:	01 04 20    	mov.w     #0x40, w1
    37c8:	81 0f 50    	sub.w     w0, w1, [w15]
    37ca:	1a 00 32    	bra       Z, 0x3800 <.L146>
    37cc:	00 00 e0    	cp0.w     w0
    37ce:	1d 00 3a    	bra       NZ, 0x380a <.L155>

000037d0 <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    37d0:	10 50 21    	mov.w     #0x1501, w0
    37d2:	10 40 78    	mov.b     [w0], w0
    37d4:	00 80 fb    	ze        w0, w0
    37d6:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    37d8:	03 00 32    	bra       Z, 0x37e0 <.L148>
    37da:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    37dc:	0e 00 32    	bra       Z, 0x37fa <.L149>

000037de <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    37de:	13 00 37    	bra       0x3806 <.L143>

000037e0 <.L148>:
    37e0:	20 50 21    	mov.w     #0x1502, w0
    37e2:	10 40 78    	mov.b     [w0], w0
    37e4:	00 80 fb    	ze        w0, w0
    37e6:	b0 24 88    	mov.w     w0, 0x496
    37e8:	b0 24 80    	mov.w     0x496, w0
    37ea:	00 00 e0    	cp0.w     w0
    37ec:	03 00 3a    	bra       NZ, 0x37f4 <.L153>

000037ee <.LSM280>:
    37ee:	10 c0 b3    	mov.b     #0x1, w0
    37f0:	40 e8 b7    	mov.b     WREG, 0x840

000037f2 <.LSM281>:
    37f2:	02 00 37    	bra       0x37f8 <.L152>

000037f4 <.L153>:
    37f4:	20 c0 b3    	mov.b     #0x2, w0
    37f6:	40 e8 b7    	mov.b     WREG, 0x840

000037f8 <.L152>:
    37f8:	02 00 37    	bra       0x37fe <.L147>

000037fa <.L149>:
    37fa:	30 00 07    	rcall     0x385c <_SendDataPacket>

000037fc <.LSM285>:
    37fc:	00 00 00    	nop       

000037fe <.L147>:
    37fe:	03 00 37    	bra       0x3806 <.L143>

00003800 <.L146>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    3800:	b7 05 07    	rcall     0x4370 <_VendorRequestsIn>

00003802 <.LSM288>:
                    break;
    3802:	01 00 37    	bra       0x3806 <.L143>

00003804 <.L154>:
    3804:	00 00 00    	nop       

00003806 <.L143>:
            }
            break;
    3806:	00 00 00    	nop       
    3808:	01 00 37    	bra       0x380c <.L140>

0000380a <.L155>:
    380a:	00 00 00    	nop       

0000380c <.L140>:
    }
}
    380c:	00 80 fa    	ulnk      
    380e:	00 00 06    	return    

00003810 <_ProcessOutToken>:

void ProcessOutToken(void) {
    3810:	00 00 fa    	lnk       #0x0

00003812 <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    3812:	3f c8 bf    	mov.b     0x83f, WREG
    3814:	80 80 fb    	ze        w0, w1
    3816:	00 0f 20    	mov.w     #0xf0, w0
    3818:	00 80 60    	and.w     w1, w0, w0
    381a:	00 00 e0    	cp0.w     w0
    381c:	1d 00 3a    	bra       NZ, 0x3858 <.L156>

0000381e <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    381e:	00 50 21    	mov.w     #0x1500, w0
    3820:	10 40 78    	mov.b     [w0], w0
    3822:	80 80 fb    	ze        w0, w1
    3824:	00 06 20    	mov.w     #0x60, w0
    3826:	00 80 60    	and.w     w1, w0, w0
    3828:	01 02 20    	mov.w     #0x20, w1
    382a:	81 0f 50    	sub.w     w0, w1, [w15]
    382c:	05 00 32    	bra       Z, 0x3838 <.L163>
    382e:	01 04 20    	mov.w     #0x40, w1
    3830:	81 0f 50    	sub.w     w0, w1, [w15]
    3832:	04 00 3a    	bra       NZ, 0x383c <.L164>

00003834 <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    3834:	a3 05 07    	rcall     0x437c <_VendorRequestsOut>

00003836 <.LSM296>:
                    break;
    3836:	03 00 37    	bra       0x383e <.L159>

00003838 <.L163>:
    3838:	00 00 00    	nop       
    383a:	01 00 37    	bra       0x383e <.L159>

0000383c <.L164>:
    383c:	00 00 00    	nop       

0000383e <.L159>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    383e:	00 40 21    	mov.w     #0x1400, w0
    3840:	01 c4 b3    	mov.b     #0x40, w1
    3842:	01 48 78    	mov.b     w1, [w0]

00003844 <.LSM300>:
            BD[EP0OUT].status = 0x88;
    3844:	10 40 21    	mov.w     #0x1401, w0
    3846:	81 c8 b3    	mov.b     #0x88, w1
    3848:	01 48 78    	mov.b     w1, [w0]

0000384a <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    384a:	40 40 21    	mov.w     #0x1404, w0
    384c:	80 40 eb    	clr.b     w1
    384e:	01 48 78    	mov.b     w1, [w0]

00003850 <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3850:	50 40 21    	mov.w     #0x1405, w0
    3852:	81 cc b3    	mov.b     #0xc8, w1
    3854:	01 48 78    	mov.b     w1, [w0]

00003856 <.LSM303>:
            break;
    3856:	00 00 00    	nop       

00003858 <.L156>:
    }
}
    3858:	00 80 fa    	ulnk      
    385a:	00 00 06    	return    

0000385c <_SendDataPacket>:

void SendDataPacket(void) {
    385c:	02 00 fa    	lnk       #0x2

0000385e <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    385e:	51 a8 80    	mov.w     0x150a, w1
    3860:	f0 03 20    	mov.w     #0x3f, w0
    3862:	80 8f 50    	sub.w     w1, w0, [w15]
    3864:	0b 00 3e    	bra       GTU, 0x387c <.L166>

00003866 <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    3866:	50 a8 80    	mov.w     0x150a, w0
    3868:	00 4f 78    	mov.b     w0, [w14]

0000386a <.LSM308>:
        USB_request.bytes_left.w = 0;
    386a:	00 00 eb    	clr.w     w0
    386c:	50 a8 88    	mov.w     w0, 0x150a

0000386e <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    386e:	00 50 21    	mov.w     #0x1500, w0
    3870:	80 c0 eb    	setm.b    w1
    3872:	01 48 78    	mov.b     w1, [w0]

00003874 <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    3874:	10 50 21    	mov.w     #0x1501, w0
    3876:	80 c0 eb    	setm.b    w1
    3878:	01 48 78    	mov.b     w1, [w0]
    387a:	05 00 37    	bra       0x3886 <.L167>

0000387c <.L166>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    387c:	00 c4 b3    	mov.b     #0x40, w0
    387e:	00 4f 78    	mov.b     w0, [w14]

00003880 <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    3880:	50 a8 80    	mov.w     0x150a, w0
    3882:	00 04 b1    	sub.w     #0x40, w0
    3884:	50 a8 88    	mov.w     w0, 0x150a

00003886 <.L167>:
    }
    for (n = 0; n<packet_length; n++) {
    3886:	00 40 eb    	clr.b     w0
    3888:	10 47 98    	mov.b     w0, [w14+1]
    388a:	0c 00 37    	bra       0x38a4 <.L168>

0000388c <.L169>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    388c:	31 a0 80    	mov.w     0x1406, w1
    388e:	1e 40 90    	mov.b     [w14+1], w0
    3890:	00 80 fb    	ze        w0, w0
    3892:	80 80 40    	add.w     w1, w0, w1
    3894:	40 a8 80    	mov.w     0x1508, w0
    3896:	10 41 78    	mov.b     [w0], w2
    3898:	82 48 78    	mov.b     w2, [w1]
    389a:	00 00 e8    	inc.w     w0, w0
    389c:	40 a8 88    	mov.w     w0, 0x1508

0000389e <.LSM315>:
    389e:	1e 40 90    	mov.b     [w14+1], w0
    38a0:	00 40 e8    	inc.b     w0, w0
    38a2:	10 47 98    	mov.b     w0, [w14+1]

000038a4 <.L168>:
    38a4:	1e 40 90    	mov.b     [w14+1], w0
    38a6:	9e 4f 50    	sub.b     w0, [w14], [w15]
    38a8:	f1 ff 39    	bra       NC, 0x388c <.L169>

000038aa <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    38aa:	40 40 21    	mov.w     #0x1404, w0
    38ac:	1e 48 78    	mov.b     [w14], [w0]

000038ae <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    38ae:	50 40 21    	mov.w     #0x1405, w0
    38b0:	10 40 78    	mov.b     [w0], w0
    38b2:	00 c0 ea    	com.b     w0, w0
    38b4:	02 c4 b3    	mov.b     #0x40, w2
    38b6:	82 40 60    	and.b     w0, w2, w1
    38b8:	80 c8 b3    	mov.b     #0x88, w0
    38ba:	00 c0 70    	ior.b     w1, w0, w0
    38bc:	80 40 78    	mov.b     w0, w1
    38be:	50 40 21    	mov.w     #0x1405, w0
    38c0:	01 48 78    	mov.b     w1, [w0]

000038c2 <.LSM318>:
}
    38c2:	00 80 fa    	ulnk      
    38c4:	00 00 06    	return    

000038c6 <__USB1Interrupt>:

//Making Service USB interrupt driven
void __attribute__((interrupt, auto_psv)) _USB1Interrupt(void) {
    38c6:	36 00 f8    	push      0x36
    38c8:	80 9f be    	mov.d     w0, [w15++]
    38ca:	82 9f be    	mov.d     w2, [w15++]
    38cc:	84 9f be    	mov.d     w4, [w15++]
    38ce:	86 9f be    	mov.d     w6, [w15++]
    38d0:	32 00 f8    	push      0x32
    38d2:	34 00 f8    	push      0x34
    38d4:	10 00 20    	mov.w     #0x1, w0
    38d6:	a0 01 88    	mov.w     w0, 0x34
    38d8:	00 20 20    	mov.w     #0x200, w0
    38da:	90 01 88    	mov.w     w0, 0x32
    38dc:	00 00 fa    	lnk       #0x0

000038de <.LSM320>:
    IFS5bits.USB1IF = 0; //flag
    38de:	8e c0 a9    	bclr.b    0x8e, #0x6

000038e0 <.LSM321>:
    ServiceUSB();
    38e0:	fe fb 07    	rcall     0x30de <_ServiceUSB>

000038e2 <.LSM322>:
}
    38e2:	00 80 fa    	ulnk      
    38e4:	34 00 f9    	pop       0x34
    38e6:	32 00 f9    	pop       0x32
    38e8:	4f 03 be    	mov.d     [--w15], w6
    38ea:	4f 02 be    	mov.d     [--w15], w4
    38ec:	4f 01 be    	mov.d     [--w15], w2
    38ee:	4f 00 be    	mov.d     [--w15], w0
    38f0:	36 00 f9    	pop       0x36
    38f2:	00 40 06    	retfie    

000038f4 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    38f4:	02 00 fa    	lnk       #0x2
    38f6:	00 0f 78    	mov.w     w0, [w14]

000038f8 <.LSM1>:
    timer_lower(self);
    38f8:	1e 00 78    	mov.w     [w14], w0
    38fa:	01 02 07    	rcall     0x3cfe <_timer_lower>

000038fc <.LSM2>:
    if (self->every) {
    38fc:	1e 00 78    	mov.w     [w14], w0
    38fe:	10 08 90    	mov.w     [w0+18], w0
    3900:	00 00 e0    	cp0.w     w0
    3902:	05 00 32    	bra       Z, 0x390e <.L2>

00003904 <.LSM3>:
        self->every(self);
    3904:	1e 00 78    	mov.w     [w14], w0
    3906:	90 08 90    	mov.w     [w0+18], w1
    3908:	1e 00 78    	mov.w     [w14], w0
    390a:	01 00 01    	call      w1
    390c:	1a 00 37    	bra       0x3942 <.L1>

0000390e <.L2>:
    } else if (self->after) {
    390e:	1e 00 78    	mov.w     [w14], w0
    3910:	20 08 90    	mov.w     [w0+20], w0
    3912:	00 00 e0    	cp0.w     w0
    3914:	14 00 32    	bra       Z, 0x393e <.L4>

00003916 <.LSM5>:
        if (self->aftercount) {
    3916:	1e 00 78    	mov.w     [w14], w0
    3918:	00 08 90    	mov.w     [w0+16], w0
    391a:	00 00 e0    	cp0.w     w0
    391c:	0a 00 32    	bra       Z, 0x3932 <.L5>

0000391e <.LSM6>:
            self->after(self);
    391e:	1e 00 78    	mov.w     [w14], w0
    3920:	a0 08 90    	mov.w     [w0+20], w1
    3922:	1e 00 78    	mov.w     [w14], w0
    3924:	01 00 01    	call      w1

00003926 <.LSM7>:
            self->aftercount--;
    3926:	1e 00 78    	mov.w     [w14], w0
    3928:	00 08 90    	mov.w     [w0+16], w0
    392a:	80 00 e9    	dec.w     w0, w1
    392c:	1e 00 78    	mov.w     [w14], w0
    392e:	01 08 98    	mov.w     w1, [w0+16]
    3930:	08 00 37    	bra       0x3942 <.L1>

00003932 <.L5>:
        } else {
            timer_disableInterrupt(self);
    3932:	1e 00 78    	mov.w     [w14], w0
    3934:	0c 02 07    	rcall     0x3d4e <_timer_disableInterrupt>

00003936 <.LSM9>:
            self->after = NULL;
    3936:	1e 00 78    	mov.w     [w14], w0
    3938:	80 00 eb    	clr.w     w1
    393a:	21 08 98    	mov.w     w1, [w0+20]
    393c:	02 00 37    	bra       0x3942 <.L1>

0000393e <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    393e:	1e 00 78    	mov.w     [w14], w0
    3940:	06 02 07    	rcall     0x3d4e <_timer_disableInterrupt>

00003942 <.L1>:
    }
}
    3942:	00 80 fa    	ulnk      
    3944:	00 00 06    	return    

00003946 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    3946:	36 00 f8    	push      0x36
    3948:	80 9f be    	mov.d     w0, [w15++]
    394a:	82 9f be    	mov.d     w2, [w15++]
    394c:	84 9f be    	mov.d     w4, [w15++]
    394e:	86 9f be    	mov.d     w6, [w15++]
    3950:	32 00 f8    	push      0x32
    3952:	34 00 f8    	push      0x34
    3954:	10 00 20    	mov.w     #0x1, w0
    3956:	a0 01 88    	mov.w     w0, 0x34
    3958:	00 20 20    	mov.w     #0x200, w0
    395a:	90 01 88    	mov.w     w0, 0x32
    395c:	00 00 fa    	lnk       #0x0

0000395e <.LSM13>:
    timer_serviceInterrupt(&timer1);
    395e:	c0 50 21    	mov.w     #0x150c, w0
    3960:	c9 ff 07    	rcall     0x38f4 <_timer_serviceInterrupt>

00003962 <.LSM14>:
}
    3962:	00 80 fa    	ulnk      
    3964:	34 00 f9    	pop       0x34
    3966:	32 00 f9    	pop       0x32
    3968:	4f 03 be    	mov.d     [--w15], w6
    396a:	4f 02 be    	mov.d     [--w15], w4
    396c:	4f 01 be    	mov.d     [--w15], w2
    396e:	4f 00 be    	mov.d     [--w15], w0
    3970:	36 00 f9    	pop       0x36
    3972:	00 40 06    	retfie    

00003974 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    3974:	36 00 f8    	push      0x36
    3976:	80 9f be    	mov.d     w0, [w15++]
    3978:	82 9f be    	mov.d     w2, [w15++]
    397a:	84 9f be    	mov.d     w4, [w15++]
    397c:	86 9f be    	mov.d     w6, [w15++]
    397e:	32 00 f8    	push      0x32
    3980:	34 00 f8    	push      0x34
    3982:	10 00 20    	mov.w     #0x1, w0
    3984:	a0 01 88    	mov.w     w0, 0x34
    3986:	00 20 20    	mov.w     #0x200, w0
    3988:	90 01 88    	mov.w     w0, 0x32
    398a:	00 00 fa    	lnk       #0x0

0000398c <.LSM16>:
    timer_serviceInterrupt(&timer2);
    398c:	20 52 21    	mov.w     #0x1522, w0
    398e:	b2 ff 07    	rcall     0x38f4 <_timer_serviceInterrupt>

00003990 <.LSM17>:
}
    3990:	00 80 fa    	ulnk      
    3992:	34 00 f9    	pop       0x34
    3994:	32 00 f9    	pop       0x32
    3996:	4f 03 be    	mov.d     [--w15], w6
    3998:	4f 02 be    	mov.d     [--w15], w4
    399a:	4f 01 be    	mov.d     [--w15], w2
    399c:	4f 00 be    	mov.d     [--w15], w0
    399e:	36 00 f9    	pop       0x36
    39a0:	00 40 06    	retfie    

000039a2 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    39a2:	36 00 f8    	push      0x36
    39a4:	80 9f be    	mov.d     w0, [w15++]
    39a6:	82 9f be    	mov.d     w2, [w15++]
    39a8:	84 9f be    	mov.d     w4, [w15++]
    39aa:	86 9f be    	mov.d     w6, [w15++]
    39ac:	32 00 f8    	push      0x32
    39ae:	34 00 f8    	push      0x34
    39b0:	10 00 20    	mov.w     #0x1, w0
    39b2:	a0 01 88    	mov.w     w0, 0x34
    39b4:	00 20 20    	mov.w     #0x200, w0
    39b6:	90 01 88    	mov.w     w0, 0x32
    39b8:	00 00 fa    	lnk       #0x0

000039ba <.LSM19>:
    timer_serviceInterrupt(&timer3);
    39ba:	80 53 21    	mov.w     #0x1538, w0
    39bc:	9b ff 07    	rcall     0x38f4 <_timer_serviceInterrupt>

000039be <.LSM20>:
}
    39be:	00 80 fa    	ulnk      
    39c0:	34 00 f9    	pop       0x34
    39c2:	32 00 f9    	pop       0x32
    39c4:	4f 03 be    	mov.d     [--w15], w6
    39c6:	4f 02 be    	mov.d     [--w15], w4
    39c8:	4f 01 be    	mov.d     [--w15], w2
    39ca:	4f 00 be    	mov.d     [--w15], w0
    39cc:	36 00 f9    	pop       0x36
    39ce:	00 40 06    	retfie    

000039d0 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    39d0:	36 00 f8    	push      0x36
    39d2:	80 9f be    	mov.d     w0, [w15++]
    39d4:	82 9f be    	mov.d     w2, [w15++]
    39d6:	84 9f be    	mov.d     w4, [w15++]
    39d8:	86 9f be    	mov.d     w6, [w15++]
    39da:	32 00 f8    	push      0x32
    39dc:	34 00 f8    	push      0x34
    39de:	10 00 20    	mov.w     #0x1, w0
    39e0:	a0 01 88    	mov.w     w0, 0x34
    39e2:	00 20 20    	mov.w     #0x200, w0
    39e4:	90 01 88    	mov.w     w0, 0x32
    39e6:	00 00 fa    	lnk       #0x0

000039e8 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    39e8:	e0 54 21    	mov.w     #0x154e, w0
    39ea:	84 ff 07    	rcall     0x38f4 <_timer_serviceInterrupt>

000039ec <.LSM23>:
}
    39ec:	00 80 fa    	ulnk      
    39ee:	34 00 f9    	pop       0x34
    39f0:	32 00 f9    	pop       0x32
    39f2:	4f 03 be    	mov.d     [--w15], w6
    39f4:	4f 02 be    	mov.d     [--w15], w4
    39f6:	4f 01 be    	mov.d     [--w15], w2
    39f8:	4f 00 be    	mov.d     [--w15], w0
    39fa:	36 00 f9    	pop       0x36
    39fc:	00 40 06    	retfie    

000039fe <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    39fe:	36 00 f8    	push      0x36
    3a00:	80 9f be    	mov.d     w0, [w15++]
    3a02:	82 9f be    	mov.d     w2, [w15++]
    3a04:	84 9f be    	mov.d     w4, [w15++]
    3a06:	86 9f be    	mov.d     w6, [w15++]
    3a08:	32 00 f8    	push      0x32
    3a0a:	34 00 f8    	push      0x34
    3a0c:	10 00 20    	mov.w     #0x1, w0
    3a0e:	a0 01 88    	mov.w     w0, 0x34
    3a10:	00 20 20    	mov.w     #0x200, w0
    3a12:	90 01 88    	mov.w     w0, 0x32
    3a14:	00 00 fa    	lnk       #0x0

00003a16 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    3a16:	40 56 21    	mov.w     #0x1564, w0
    3a18:	6d ff 07    	rcall     0x38f4 <_timer_serviceInterrupt>

00003a1a <.LSM26>:
}
    3a1a:	00 80 fa    	ulnk      
    3a1c:	34 00 f9    	pop       0x34
    3a1e:	32 00 f9    	pop       0x32
    3a20:	4f 03 be    	mov.d     [--w15], w6
    3a22:	4f 02 be    	mov.d     [--w15], w4
    3a24:	4f 01 be    	mov.d     [--w15], w2
    3a26:	4f 00 be    	mov.d     [--w15], w0
    3a28:	36 00 f9    	pop       0x36
    3a2a:	00 40 06    	retfie    

00003a2c <_init_timer>:

void init_timer(void) {
    3a2c:	00 00 fa    	lnk       #0x0

00003a2e <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    3a2e:	b0 00 20    	mov.w     #0xb, w0
    3a30:	80 1f 78    	mov.w     w0, [w15++]
    3a32:	47 00 20    	mov.w     #0x4, w7
    3a34:	36 c0 b3    	mov.b     #0x3, w6
    3a36:	45 09 20    	mov.w     #0x94, w5
    3a38:	44 08 20    	mov.w     #0x84, w4
    3a3a:	03 10 20    	mov.w     #0x100, w3
    3a3c:	22 10 20    	mov.w     #0x102, w2
    3a3e:	41 10 20    	mov.w     #0x104, w1
    3a40:	c0 50 21    	mov.w     #0x150c, w0
    3a42:	33 00 07    	rcall     0x3aaa <_timer_init>
    3a44:	8f 87 e9    	dec2.w    w15, w15

00003a46 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    3a46:	c0 00 20    	mov.w     #0xc, w0
    3a48:	80 1f 78    	mov.w     w0, [w15++]
    3a4a:	80 03 eb    	clr.w     w7
    3a4c:	76 c0 b3    	mov.b     #0x7, w6
    3a4e:	45 09 20    	mov.w     #0x94, w5
    3a50:	44 08 20    	mov.w     #0x84, w4
    3a52:	63 10 20    	mov.w     #0x106, w3
    3a54:	c2 10 20    	mov.w     #0x10c, w2
    3a56:	01 11 20    	mov.w     #0x110, w1
    3a58:	20 52 21    	mov.w     #0x1522, w0
    3a5a:	27 00 07    	rcall     0x3aaa <_timer_init>
    3a5c:	8f 87 e9    	dec2.w    w15, w15

00003a5e <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    3a5e:	d0 00 20    	mov.w     #0xd, w0
    3a60:	80 1f 78    	mov.w     w0, [w15++]
    3a62:	17 00 20    	mov.w     #0x1, w7
    3a64:	86 c0 b3    	mov.b     #0x8, w6
    3a66:	45 09 20    	mov.w     #0x94, w5
    3a68:	44 08 20    	mov.w     #0x84, w4
    3a6a:	a3 10 20    	mov.w     #0x10a, w3
    3a6c:	e2 10 20    	mov.w     #0x10e, w2
    3a6e:	21 11 20    	mov.w     #0x112, w1
    3a70:	80 53 21    	mov.w     #0x1538, w0
    3a72:	1b 00 07    	rcall     0x3aaa <_timer_init>
    3a74:	8f 87 e9    	dec2.w    w15, w15

00003a76 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    3a76:	e0 00 20    	mov.w     #0xe, w0
    3a78:	80 1f 78    	mov.w     w0, [w15++]
    3a7a:	27 00 20    	mov.w     #0x2, w7
    3a7c:	b6 c0 b3    	mov.b     #0xb, w6
    3a7e:	65 09 20    	mov.w     #0x96, w5
    3a80:	64 08 20    	mov.w     #0x86, w4
    3a82:	43 11 20    	mov.w     #0x114, w3
    3a84:	a2 11 20    	mov.w     #0x11a, w2
    3a86:	e1 11 20    	mov.w     #0x11e, w1
    3a88:	e0 54 21    	mov.w     #0x154e, w0
    3a8a:	0f 00 07    	rcall     0x3aaa <_timer_init>
    3a8c:	8f 87 e9    	dec2.w    w15, w15

00003a8e <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    3a8e:	f0 00 20    	mov.w     #0xf, w0
    3a90:	80 1f 78    	mov.w     w0, [w15++]
    3a92:	37 00 20    	mov.w     #0x3, w7
    3a94:	c6 c0 b3    	mov.b     #0xc, w6
    3a96:	65 09 20    	mov.w     #0x96, w5
    3a98:	64 08 20    	mov.w     #0x86, w4
    3a9a:	83 11 20    	mov.w     #0x118, w3
    3a9c:	c2 11 20    	mov.w     #0x11c, w2
    3a9e:	01 12 20    	mov.w     #0x120, w1
    3aa0:	40 56 21    	mov.w     #0x1564, w0
    3aa2:	03 00 07    	rcall     0x3aaa <_timer_init>
    3aa4:	8f 87 e9    	dec2.w    w15, w15

00003aa6 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    3aa6:	00 80 fa    	ulnk      
    3aa8:	00 00 06    	return    

00003aaa <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    3aaa:	10 00 fa    	lnk       #0x10
    3aac:	00 0f 78    	mov.w     w0, [w14]
    3aae:	11 07 98    	mov.w     w1, [w14+2]
    3ab0:	22 07 98    	mov.w     w2, [w14+4]
    3ab2:	33 07 98    	mov.w     w3, [w14+6]
    3ab4:	44 07 98    	mov.w     w4, [w14+8]
    3ab6:	55 07 98    	mov.w     w5, [w14+10]
    3ab8:	46 4f 98    	mov.b     w6, [w14+12]
    3aba:	77 07 98    	mov.w     w7, [w14+14]

00003abc <.LSM35>:
    self->TxCON = TxCON;
    3abc:	1e 00 78    	mov.w     [w14], w0
    3abe:	9e 00 90    	mov.w     [w14+2], w1
    3ac0:	01 08 78    	mov.w     w1, [w0]

00003ac2 <.LSM36>:
    self->PRx = PRx;
    3ac2:	1e 00 78    	mov.w     [w14], w0
    3ac4:	ae 00 90    	mov.w     [w14+4], w1
    3ac6:	11 00 98    	mov.w     w1, [w0+2]

00003ac8 <.LSM37>:
    self->TMRx = TMRx;
    3ac8:	1e 00 78    	mov.w     [w14], w0
    3aca:	be 00 90    	mov.w     [w14+6], w1
    3acc:	21 00 98    	mov.w     w1, [w0+4]

00003ace <.LSM38>:
    self->IFSy = IFSy;
    3ace:	1e 00 78    	mov.w     [w14], w0
    3ad0:	ce 00 90    	mov.w     [w14+8], w1
    3ad2:	31 00 98    	mov.w     w1, [w0+6]

00003ad4 <.LSM39>:
    self->IECy = IECy;
    3ad4:	1e 00 78    	mov.w     [w14], w0
    3ad6:	de 00 90    	mov.w     [w14+10], w1
    3ad8:	41 00 98    	mov.w     w1, [w0+8]

00003ada <.LSM40>:
    self->flagbit = flagbit;
    3ada:	1e 00 78    	mov.w     [w14], w0
    3adc:	ce 48 90    	mov.b     [w14+12], w1
    3ade:	21 48 98    	mov.b     w1, [w0+10]

00003ae0 <.LSM41>:
    self->octselnum = octselnum;
    3ae0:	1e 00 78    	mov.w     [w14], w0
    3ae2:	fe 00 90    	mov.w     [w14+14], w1
    3ae4:	61 00 98    	mov.w     w1, [w0+12]

00003ae6 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    3ae6:	1e 00 78    	mov.w     [w14], w0
    3ae8:	ce b8 97    	mov.w     [w14-8], w1
    3aea:	71 00 98    	mov.w     w1, [w0+14]

00003aec <.LSM43>:
    self->aftercount = 0;
    3aec:	1e 00 78    	mov.w     [w14], w0
    3aee:	80 00 eb    	clr.w     w1
    3af0:	01 08 98    	mov.w     w1, [w0+16]

00003af2 <.LSM44>:
    self->every = NULL;
    3af2:	1e 00 78    	mov.w     [w14], w0
    3af4:	80 00 eb    	clr.w     w1
    3af6:	11 08 98    	mov.w     w1, [w0+18]

00003af8 <.LSM45>:
    self->after = NULL;
    3af8:	1e 00 78    	mov.w     [w14], w0
    3afa:	80 00 eb    	clr.w     w1
    3afc:	21 08 98    	mov.w     w1, [w0+20]

00003afe <.LSM46>:
}
    3afe:	00 80 fa    	ulnk      
    3b00:	00 00 06    	return    

00003b02 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    3b02:	06 00 fa    	lnk       #0x6
    3b04:	88 1f 78    	mov.w     w8, [w15++]
    3b06:	00 0f 78    	mov.w     w0, [w14]
    3b08:	12 07 98    	mov.w     w2, [w14+2]
    3b0a:	23 07 98    	mov.w     w3, [w14+4]

00003b0c <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    3b0c:	18 c0 b3    	mov.b     #0x1, w8
    3b0e:	d2 7b 23    	mov.w     #0x37bd, w2
    3b10:	63 f8 23    	mov.w     #0x3f86, w3
    3b12:	1e 00 90    	mov.w     [w14+2], w0
    3b14:	ae 00 90    	mov.w     [w14+4], w1
    3b16:	21 ec 07    	rcall     0x135a <___gesf2>
    3b18:	00 00 e0    	cp0.w     w0
    3b1a:	01 00 3c    	bra       GT, 0x3b1e <.L14>
    3b1c:	00 44 eb    	clr.b     w8

00003b1e <.L14>:
    3b1e:	08 04 e0    	cp0.b     w8
    3b20:	69 00 3a    	bra       NZ, 0x3bf4 <.L23>

00003b22 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    3b22:	18 c0 b3    	mov.b     #0x1, w8
    3b24:	d2 7b 23    	mov.w     #0x37bd, w2
    3b26:	63 e8 23    	mov.w     #0x3e86, w3
    3b28:	1e 00 90    	mov.w     [w14+2], w0
    3b2a:	ae 00 90    	mov.w     [w14+4], w1
    3b2c:	16 ec 07    	rcall     0x135a <___gesf2>
    3b2e:	00 00 e0    	cp0.w     w0
    3b30:	01 00 3c    	bra       GT, 0x3b34 <.L17>
    3b32:	00 44 eb    	clr.b     w8

00003b34 <.L17>:
    3b34:	08 04 e0    	cp0.b     w8
    3b36:	12 00 32    	bra       Z, 0x3b5c <.L18>

00003b38 <.LSM50>:
        timer_stop(self);
    3b38:	1e 00 78    	mov.w     [w14], w0
    3b3a:	c4 00 07    	rcall     0x3cc4 <_timer_stop>

00003b3c <.LSM51>:
        poke(self->TxCON, 0x0030);
    3b3c:	1e 00 78    	mov.w     [w14], w0
    3b3e:	10 00 78    	mov.w     [w0], w0
    3b40:	01 03 20    	mov.w     #0x30, w1
    3b42:	01 08 78    	mov.w     w1, [w0]

00003b44 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    3b44:	1e 00 78    	mov.w     [w14], w0
    3b46:	10 04 90    	mov.w     [w0+2], w8
    3b48:	02 40 22    	mov.w     #0x2400, w2
    3b4a:	43 77 24    	mov.w     #0x4774, w3
    3b4c:	1e 00 90    	mov.w     [w14+2], w0
    3b4e:	ae 00 90    	mov.w     [w14+4], w1
    3b50:	76 ec 07    	rcall     0x143e <___mulsf3>
    3b52:	05 ec 07    	rcall     0x135e <___fixunssfsi>
    3b54:	00 00 78    	mov.w     w0, w0
    3b56:	00 00 e9    	dec.w     w0, w0
    3b58:	00 0c 78    	mov.w     w0, [w8]
    3b5a:	4d 00 37    	bra       0x3bf6 <.L13>

00003b5c <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    3b5c:	18 c0 b3    	mov.b     #0x1, w8
    3b5e:	d2 7b 23    	mov.w     #0x37bd, w2
    3b60:	63 d0 23    	mov.w     #0x3d06, w3
    3b62:	1e 00 90    	mov.w     [w14+2], w0
    3b64:	ae 00 90    	mov.w     [w14+4], w1
    3b66:	f9 eb 07    	rcall     0x135a <___gesf2>
    3b68:	00 00 e0    	cp0.w     w0
    3b6a:	01 00 3c    	bra       GT, 0x3b6e <.L19>
    3b6c:	00 44 eb    	clr.b     w8

00003b6e <.L19>:
    3b6e:	08 04 e0    	cp0.b     w8
    3b70:	12 00 32    	bra       Z, 0x3b96 <.L20>

00003b72 <.LSM54>:
        timer_stop(self);
    3b72:	1e 00 78    	mov.w     [w14], w0
    3b74:	a7 00 07    	rcall     0x3cc4 <_timer_stop>

00003b76 <.LSM55>:
        poke(self->TxCON, 0x0020);
    3b76:	1e 00 78    	mov.w     [w14], w0
    3b78:	10 00 78    	mov.w     [w0], w0
    3b7a:	01 02 20    	mov.w     #0x20, w1
    3b7c:	01 08 78    	mov.w     w1, [w0]

00003b7e <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    3b7e:	1e 00 78    	mov.w     [w14], w0
    3b80:	10 04 90    	mov.w     [w0+2], w8
    3b82:	02 40 22    	mov.w     #0x2400, w2
    3b84:	43 87 24    	mov.w     #0x4874, w3
    3b86:	1e 00 90    	mov.w     [w14+2], w0
    3b88:	ae 00 90    	mov.w     [w14+4], w1
    3b8a:	59 ec 07    	rcall     0x143e <___mulsf3>
    3b8c:	e8 eb 07    	rcall     0x135e <___fixunssfsi>
    3b8e:	00 00 78    	mov.w     w0, w0
    3b90:	00 00 e9    	dec.w     w0, w0
    3b92:	00 0c 78    	mov.w     w0, [w8]
    3b94:	30 00 37    	bra       0x3bf6 <.L13>

00003b96 <.L20>:
    } else if (period>(65536.*TCY)) {
    3b96:	18 c0 b3    	mov.b     #0x1, w8
    3b98:	d2 7b 23    	mov.w     #0x37bd, w2
    3b9a:	63 b8 23    	mov.w     #0x3b86, w3
    3b9c:	1e 00 90    	mov.w     [w14+2], w0
    3b9e:	ae 00 90    	mov.w     [w14+4], w1
    3ba0:	dc eb 07    	rcall     0x135a <___gesf2>
    3ba2:	00 00 e0    	cp0.w     w0
    3ba4:	01 00 3c    	bra       GT, 0x3ba8 <.L21>
    3ba6:	00 44 eb    	clr.b     w8

00003ba8 <.L21>:
    3ba8:	08 04 e0    	cp0.b     w8
    3baa:	12 00 32    	bra       Z, 0x3bd0 <.L22>

00003bac <.LSM58>:
        timer_stop(self);
    3bac:	1e 00 78    	mov.w     [w14], w0
    3bae:	8a 00 07    	rcall     0x3cc4 <_timer_stop>

00003bb0 <.LSM59>:
        poke(self->TxCON, 0x0010);
    3bb0:	1e 00 78    	mov.w     [w14], w0
    3bb2:	10 00 78    	mov.w     [w0], w0
    3bb4:	01 01 20    	mov.w     #0x10, w1
    3bb6:	01 08 78    	mov.w     w1, [w0]

00003bb8 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3bb8:	1e 00 78    	mov.w     [w14], w0
    3bba:	10 04 90    	mov.w     [w0+2], w8
    3bbc:	02 40 22    	mov.w     #0x2400, w2
    3bbe:	43 9f 24    	mov.w     #0x49f4, w3
    3bc0:	1e 00 90    	mov.w     [w14+2], w0
    3bc2:	ae 00 90    	mov.w     [w14+4], w1
    3bc4:	3c ec 07    	rcall     0x143e <___mulsf3>
    3bc6:	cb eb 07    	rcall     0x135e <___fixunssfsi>
    3bc8:	00 00 78    	mov.w     w0, w0
    3bca:	00 00 e9    	dec.w     w0, w0
    3bcc:	00 0c 78    	mov.w     w0, [w8]
    3bce:	13 00 37    	bra       0x3bf6 <.L13>

00003bd0 <.L22>:
    } else {
        timer_stop(self);
    3bd0:	1e 00 78    	mov.w     [w14], w0
    3bd2:	78 00 07    	rcall     0x3cc4 <_timer_stop>

00003bd4 <.LSM62>:
        poke(self->TxCON, 0x0000);
    3bd4:	1e 00 78    	mov.w     [w14], w0
    3bd6:	10 00 78    	mov.w     [w0], w0
    3bd8:	80 00 eb    	clr.w     w1
    3bda:	01 08 78    	mov.w     w1, [w0]

00003bdc <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    3bdc:	1e 00 78    	mov.w     [w14], w0
    3bde:	10 04 90    	mov.w     [w0+2], w8
    3be0:	02 40 22    	mov.w     #0x2400, w2
    3be2:	43 b7 24    	mov.w     #0x4b74, w3
    3be4:	1e 00 90    	mov.w     [w14+2], w0
    3be6:	ae 00 90    	mov.w     [w14+4], w1
    3be8:	2a ec 07    	rcall     0x143e <___mulsf3>
    3bea:	b9 eb 07    	rcall     0x135e <___fixunssfsi>
    3bec:	00 00 78    	mov.w     w0, w0
    3bee:	00 00 e9    	dec.w     w0, w0
    3bf0:	00 0c 78    	mov.w     w0, [w8]
    3bf2:	01 00 37    	bra       0x3bf6 <.L13>

00003bf4 <.L23>:
    3bf4:	00 00 00    	nop       

00003bf6 <.L13>:
    }
}
    3bf6:	4f 04 78    	mov.w     [--w15], w8
    3bf8:	00 80 fa    	ulnk      
    3bfa:	00 00 06    	return    

00003bfc <_timer_period>:

float timer_period(_TIMER *self) {
    3bfc:	04 00 fa    	lnk       #0x4
    3bfe:	88 9f be    	mov.d     w8, [w15++]
    3c00:	10 07 98    	mov.w     w0, [w14+2]

00003c02 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3c02:	1e 00 90    	mov.w     [w14+2], w0
    3c04:	10 00 78    	mov.w     [w0], w0
    3c06:	90 00 78    	mov.w     [w0], w1
    3c08:	00 03 20    	mov.w     #0x30, w0
    3c0a:	00 80 60    	and.w     w1, w0, w0
    3c0c:	44 00 de    	lsr.w     w0, #0x4, w0
    3c0e:	00 0f 78    	mov.w     w0, [w14]

00003c10 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3c10:	1e 00 78    	mov.w     [w14], w0
    3c12:	c2 00 dd    	sl.w      w0, #0x2, w1
    3c14:	60 5b 21    	mov.w     #0x15b6, w0
    3c16:	00 80 40    	add.w     w1, w0, w0
    3c18:	10 04 be    	mov.d     [w0], w8
    3c1a:	1e 00 90    	mov.w     [w14+2], w0
    3c1c:	10 00 90    	mov.w     [w0+2], w0
    3c1e:	10 00 78    	mov.w     [w0], w0
    3c20:	80 00 eb    	clr.w     w1
    3c22:	b8 eb 07    	rcall     0x1394 <___floatunsisf>
    3c24:	02 00 20    	mov.w     #0x0, w2
    3c26:	03 f8 23    	mov.w     #0x3f80, w3
    3c28:	f7 ea 07    	rcall     0x1218 <___addsf3>
    3c2a:	00 01 be    	mov.d     w0, w2
    3c2c:	08 00 be    	mov.d     w8, w0
    3c2e:	07 ec 07    	rcall     0x143e <___mulsf3>

00003c30 <.LSM69>:
}
    3c30:	4f 04 be    	mov.d     [--w15], w8
    3c32:	00 80 fa    	ulnk      
    3c34:	00 00 06    	return    

00003c36 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    3c36:	06 00 fa    	lnk       #0x6
    3c38:	00 0f 78    	mov.w     w0, [w14]
    3c3a:	12 07 98    	mov.w     w2, [w14+2]
    3c3c:	23 07 98    	mov.w     w3, [w14+4]

00003c3e <.LSM71>:
    timer_setPeriod(self, 1./freq);
    3c3e:	1e 01 90    	mov.w     [w14+2], w2
    3c40:	ae 01 90    	mov.w     [w14+4], w3
    3c42:	00 00 20    	mov.w     #0x0, w0
    3c44:	01 f8 23    	mov.w     #0x3f80, w1
    3c46:	45 eb 07    	rcall     0x12d2 <___divsf3>
    3c48:	00 01 be    	mov.d     w0, w2
    3c4a:	1e 00 78    	mov.w     [w14], w0
    3c4c:	5a ff 07    	rcall     0x3b02 <_timer_setPeriod>

00003c4e <.LSM72>:
}
    3c4e:	00 80 fa    	ulnk      
    3c50:	00 00 06    	return    

00003c52 <_timer_freq>:

float timer_freq(_TIMER *self) {
    3c52:	02 00 fa    	lnk       #0x2
    3c54:	00 0f 78    	mov.w     w0, [w14]

00003c56 <.LSM74>:
    return 1./timer_period(self);
    3c56:	1e 00 78    	mov.w     [w14], w0
    3c58:	d1 ff 07    	rcall     0x3bfc <_timer_period>
    3c5a:	00 01 be    	mov.d     w0, w2
    3c5c:	00 00 20    	mov.w     #0x0, w0
    3c5e:	01 f8 23    	mov.w     #0x3f80, w1
    3c60:	38 eb 07    	rcall     0x12d2 <___divsf3>

00003c62 <.LSM75>:
}
    3c62:	00 80 fa    	ulnk      
    3c64:	00 00 06    	return    

00003c66 <_timer_time>:

float timer_time(_TIMER *self) {
    3c66:	04 00 fa    	lnk       #0x4
    3c68:	88 9f be    	mov.d     w8, [w15++]
    3c6a:	10 07 98    	mov.w     w0, [w14+2]

00003c6c <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3c6c:	1e 00 90    	mov.w     [w14+2], w0
    3c6e:	10 00 78    	mov.w     [w0], w0
    3c70:	90 00 78    	mov.w     [w0], w1
    3c72:	00 03 20    	mov.w     #0x30, w0
    3c74:	00 80 60    	and.w     w1, w0, w0
    3c76:	44 00 de    	lsr.w     w0, #0x4, w0
    3c78:	00 0f 78    	mov.w     w0, [w14]

00003c7a <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3c7a:	1e 00 78    	mov.w     [w14], w0
    3c7c:	c2 00 dd    	sl.w      w0, #0x2, w1
    3c7e:	60 5b 21    	mov.w     #0x15b6, w0
    3c80:	00 80 40    	add.w     w1, w0, w0
    3c82:	10 04 be    	mov.d     [w0], w8
    3c84:	1e 00 90    	mov.w     [w14+2], w0
    3c86:	10 00 90    	mov.w     [w0+2], w0
    3c88:	10 00 78    	mov.w     [w0], w0
    3c8a:	80 00 eb    	clr.w     w1
    3c8c:	83 eb 07    	rcall     0x1394 <___floatunsisf>
    3c8e:	02 00 20    	mov.w     #0x0, w2
    3c90:	03 f8 23    	mov.w     #0x3f80, w3
    3c92:	c2 ea 07    	rcall     0x1218 <___addsf3>
    3c94:	00 01 be    	mov.d     w0, w2
    3c96:	08 00 be    	mov.d     w8, w0
    3c98:	d2 eb 07    	rcall     0x143e <___mulsf3>

00003c9a <.LSM79>:
}
    3c9a:	4f 04 be    	mov.d     [--w15], w8
    3c9c:	00 80 fa    	ulnk      
    3c9e:	00 00 06    	return    

00003ca0 <_timer_start>:

void timer_start(_TIMER *self) {
    3ca0:	02 00 fa    	lnk       #0x2
    3ca2:	00 0f 78    	mov.w     w0, [w14]

00003ca4 <.LSM81>:
    timer_lower(self);
    3ca4:	1e 00 78    	mov.w     [w14], w0
    3ca6:	2b 00 07    	rcall     0x3cfe <_timer_lower>

00003ca8 <.LSM82>:
    poke(self->TMRx, 0);
    3ca8:	1e 00 78    	mov.w     [w14], w0
    3caa:	20 00 90    	mov.w     [w0+4], w0
    3cac:	80 00 eb    	clr.w     w1
    3cae:	01 08 78    	mov.w     w1, [w0]

00003cb0 <.LSM83>:
    bitset(self->TxCON, 15);
    3cb0:	1e 00 78    	mov.w     [w14], w0
    3cb2:	10 00 78    	mov.w     [w0], w0
    3cb4:	9e 00 78    	mov.w     [w14], w1
    3cb6:	91 00 78    	mov.w     [w1], w1
    3cb8:	11 01 78    	mov.w     [w1], w2
    3cba:	01 00 28    	mov.w     #0x8000, w1
    3cbc:	82 80 70    	ior.w     w1, w2, w1
    3cbe:	01 08 78    	mov.w     w1, [w0]

00003cc0 <.LSM84>:
}
    3cc0:	00 80 fa    	ulnk      
    3cc2:	00 00 06    	return    

00003cc4 <_timer_stop>:

void timer_stop(_TIMER *self) {
    3cc4:	02 00 fa    	lnk       #0x2
    3cc6:	00 0f 78    	mov.w     w0, [w14]

00003cc8 <.LSM86>:
    bitclear(self->TxCON, 15);
    3cc8:	1e 00 78    	mov.w     [w14], w0
    3cca:	10 00 78    	mov.w     [w0], w0
    3ccc:	9e 00 78    	mov.w     [w14], w1
    3cce:	91 00 78    	mov.w     [w1], w1
    3cd0:	11 01 78    	mov.w     [w1], w2
    3cd2:	f1 ff 27    	mov.w     #0x7fff, w1
    3cd4:	81 00 61    	and.w     w2, w1, w1
    3cd6:	01 08 78    	mov.w     w1, [w0]

00003cd8 <.LSM87>:
}
    3cd8:	00 80 fa    	ulnk      
    3cda:	00 00 06    	return    

00003cdc <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    3cdc:	02 00 fa    	lnk       #0x2
    3cde:	00 0f 78    	mov.w     w0, [w14]

00003ce0 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    3ce0:	1e 00 78    	mov.w     [w14], w0
    3ce2:	30 00 90    	mov.w     [w0+6], w0
    3ce4:	90 00 78    	mov.w     [w0], w1
    3ce6:	1e 00 78    	mov.w     [w14], w0
    3ce8:	20 48 90    	mov.b     [w0+10], w0
    3cea:	00 80 fb    	ze        w0, w0
    3cec:	12 00 20    	mov.w     #0x1, w2
    3cee:	00 10 dd    	sl.w      w2, w0, w0
    3cf0:	00 80 60    	and.w     w1, w0, w0
    3cf2:	00 f0 a7    	btsc.w    w0, #0xf
    3cf4:	00 00 ea    	neg.w     w0, w0
    3cf6:	00 00 ea    	neg.w     w0, w0
    3cf8:	4f 00 de    	lsr.w     w0, #0xf, w0

00003cfa <.LSM90>:
}
    3cfa:	00 80 fa    	ulnk      
    3cfc:	00 00 06    	return    

00003cfe <_timer_lower>:

void timer_lower(_TIMER *self) {
    3cfe:	02 00 fa    	lnk       #0x2
    3d00:	00 0f 78    	mov.w     w0, [w14]

00003d02 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3d02:	1e 00 78    	mov.w     [w14], w0
    3d04:	30 00 90    	mov.w     [w0+6], w0
    3d06:	9e 00 78    	mov.w     [w14], w1
    3d08:	b1 00 90    	mov.w     [w1+6], w1
    3d0a:	11 01 78    	mov.w     [w1], w2
    3d0c:	9e 00 78    	mov.w     [w14], w1
    3d0e:	a1 48 90    	mov.b     [w1+10], w1
    3d10:	81 80 fb    	ze        w1, w1
    3d12:	13 00 20    	mov.w     #0x1, w3
    3d14:	81 18 dd    	sl.w      w3, w1, w1
    3d16:	81 80 ea    	com.w     w1, w1
    3d18:	81 00 61    	and.w     w2, w1, w1
    3d1a:	01 08 78    	mov.w     w1, [w0]

00003d1c <.LSM93>:
}
    3d1c:	00 80 fa    	ulnk      
    3d1e:	00 00 06    	return    

00003d20 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    3d20:	02 00 fa    	lnk       #0x2
    3d22:	00 0f 78    	mov.w     w0, [w14]

00003d24 <.LSM95>:
    return peek(self->TMRx);
    3d24:	1e 00 78    	mov.w     [w14], w0
    3d26:	20 00 90    	mov.w     [w0+4], w0
    3d28:	10 00 78    	mov.w     [w0], w0

00003d2a <.LSM96>:
}
    3d2a:	00 80 fa    	ulnk      
    3d2c:	00 00 06    	return    

00003d2e <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    3d2e:	02 00 fa    	lnk       #0x2
    3d30:	00 0f 78    	mov.w     w0, [w14]

00003d32 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    3d32:	1e 00 78    	mov.w     [w14], w0
    3d34:	40 00 90    	mov.w     [w0+8], w0
    3d36:	9e 00 78    	mov.w     [w14], w1
    3d38:	c1 00 90    	mov.w     [w1+8], w1
    3d3a:	11 01 78    	mov.w     [w1], w2
    3d3c:	9e 00 78    	mov.w     [w14], w1
    3d3e:	a1 48 90    	mov.b     [w1+10], w1
    3d40:	81 80 fb    	ze        w1, w1
    3d42:	13 00 20    	mov.w     #0x1, w3
    3d44:	81 18 dd    	sl.w      w3, w1, w1
    3d46:	82 80 70    	ior.w     w1, w2, w1
    3d48:	01 08 78    	mov.w     w1, [w0]

00003d4a <.LSM99>:
}
    3d4a:	00 80 fa    	ulnk      
    3d4c:	00 00 06    	return    

00003d4e <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3d4e:	02 00 fa    	lnk       #0x2
    3d50:	00 0f 78    	mov.w     w0, [w14]

00003d52 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    3d52:	1e 00 78    	mov.w     [w14], w0
    3d54:	40 00 90    	mov.w     [w0+8], w0
    3d56:	9e 00 78    	mov.w     [w14], w1
    3d58:	c1 00 90    	mov.w     [w1+8], w1
    3d5a:	11 01 78    	mov.w     [w1], w2
    3d5c:	9e 00 78    	mov.w     [w14], w1
    3d5e:	a1 48 90    	mov.b     [w1+10], w1
    3d60:	81 80 fb    	ze        w1, w1
    3d62:	13 00 20    	mov.w     #0x1, w3
    3d64:	81 18 dd    	sl.w      w3, w1, w1
    3d66:	81 80 ea    	com.w     w1, w1
    3d68:	81 00 61    	and.w     w2, w1, w1
    3d6a:	01 08 78    	mov.w     w1, [w0]

00003d6c <.LSM102>:
}
    3d6c:	00 80 fa    	ulnk      
    3d6e:	00 00 06    	return    

00003d70 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3d70:	08 00 fa    	lnk       #0x8
    3d72:	00 0f 78    	mov.w     w0, [w14]
    3d74:	12 07 98    	mov.w     w2, [w14+2]
    3d76:	23 07 98    	mov.w     w3, [w14+4]
    3d78:	31 07 98    	mov.w     w1, [w14+6]

00003d7a <.LSM104>:
    timer_disableInterrupt(self);
    3d7a:	1e 00 78    	mov.w     [w14], w0
    3d7c:	e8 ff 07    	rcall     0x3d4e <_timer_disableInterrupt>

00003d7e <.LSM105>:
    timer_setPeriod(self, interval);
    3d7e:	1e 01 90    	mov.w     [w14+2], w2
    3d80:	ae 01 90    	mov.w     [w14+4], w3
    3d82:	1e 00 78    	mov.w     [w14], w0
    3d84:	be fe 07    	rcall     0x3b02 <_timer_setPeriod>

00003d86 <.LSM106>:
    self->aftercount = 0;
    3d86:	1e 00 78    	mov.w     [w14], w0
    3d88:	80 00 eb    	clr.w     w1
    3d8a:	01 08 98    	mov.w     w1, [w0+16]

00003d8c <.LSM107>:
    self->every = callback;
    3d8c:	1e 00 78    	mov.w     [w14], w0
    3d8e:	be 00 90    	mov.w     [w14+6], w1
    3d90:	11 08 98    	mov.w     w1, [w0+18]

00003d92 <.LSM108>:
    self->after = NULL;
    3d92:	1e 00 78    	mov.w     [w14], w0
    3d94:	80 00 eb    	clr.w     w1
    3d96:	21 08 98    	mov.w     w1, [w0+20]

00003d98 <.LSM109>:
    timer_enableInterrupt(self);
    3d98:	1e 00 78    	mov.w     [w14], w0
    3d9a:	c9 ff 07    	rcall     0x3d2e <_timer_enableInterrupt>

00003d9c <.LSM110>:
    timer_start(self);
    3d9c:	1e 00 78    	mov.w     [w14], w0
    3d9e:	80 ff 07    	rcall     0x3ca0 <_timer_start>

00003da0 <.LSM111>:
}
    3da0:	00 80 fa    	ulnk      
    3da2:	00 00 06    	return    

00003da4 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    3da4:	0a 00 fa    	lnk       #0xa
    3da6:	00 0f 78    	mov.w     w0, [w14]
    3da8:	12 07 98    	mov.w     w2, [w14+2]
    3daa:	23 07 98    	mov.w     w3, [w14+4]
    3dac:	31 07 98    	mov.w     w1, [w14+6]
    3dae:	44 07 98    	mov.w     w4, [w14+8]

00003db0 <.LSM113>:
    timer_disableInterrupt(self);
    3db0:	1e 00 78    	mov.w     [w14], w0
    3db2:	cd ff 07    	rcall     0x3d4e <_timer_disableInterrupt>

00003db4 <.LSM114>:
    timer_setPeriod(self, delay);
    3db4:	1e 01 90    	mov.w     [w14+2], w2
    3db6:	ae 01 90    	mov.w     [w14+4], w3
    3db8:	1e 00 78    	mov.w     [w14], w0
    3dba:	a3 fe 07    	rcall     0x3b02 <_timer_setPeriod>

00003dbc <.LSM115>:
    self->aftercount = num_times;
    3dbc:	1e 00 78    	mov.w     [w14], w0
    3dbe:	be 00 90    	mov.w     [w14+6], w1
    3dc0:	01 08 98    	mov.w     w1, [w0+16]

00003dc2 <.LSM116>:
    self->every = NULL;
    3dc2:	1e 00 78    	mov.w     [w14], w0
    3dc4:	80 00 eb    	clr.w     w1
    3dc6:	11 08 98    	mov.w     w1, [w0+18]

00003dc8 <.LSM117>:
    self->after = callback;
    3dc8:	1e 00 78    	mov.w     [w14], w0
    3dca:	ce 00 90    	mov.w     [w14+8], w1
    3dcc:	21 08 98    	mov.w     w1, [w0+20]

00003dce <.LSM118>:
    timer_enableInterrupt(self);
    3dce:	1e 00 78    	mov.w     [w14], w0
    3dd0:	ae ff 07    	rcall     0x3d2e <_timer_enableInterrupt>

00003dd2 <.LSM119>:
    timer_start(self);
    3dd2:	1e 00 78    	mov.w     [w14], w0
    3dd4:	65 ff 07    	rcall     0x3ca0 <_timer_start>

00003dd6 <.LSM120>:
}
    3dd6:	00 80 fa    	ulnk      
    3dd8:	00 00 06    	return    

00003dda <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    3dda:	02 00 fa    	lnk       #0x2
    3ddc:	00 0f 78    	mov.w     w0, [w14]

00003dde <.LSM122>:
    timer_disableInterrupt(self);
    3dde:	1e 00 78    	mov.w     [w14], w0
    3de0:	b6 ff 07    	rcall     0x3d4e <_timer_disableInterrupt>

00003de2 <.LSM123>:
    timer_lower(self);
    3de2:	1e 00 78    	mov.w     [w14], w0
    3de4:	8c ff 07    	rcall     0x3cfe <_timer_lower>

00003de6 <.LSM124>:
    timer_stop(self);
    3de6:	1e 00 78    	mov.w     [w14], w0
    3de8:	6d ff 07    	rcall     0x3cc4 <_timer_stop>

00003dea <.LSM125>:
    self->aftercount = 0;
    3dea:	1e 00 78    	mov.w     [w14], w0
    3dec:	80 00 eb    	clr.w     w1
    3dee:	01 08 98    	mov.w     w1, [w0+16]

00003df0 <.LSM126>:
    self->every = NULL;
    3df0:	1e 00 78    	mov.w     [w14], w0
    3df2:	80 00 eb    	clr.w     w1
    3df4:	11 08 98    	mov.w     w1, [w0+18]

00003df6 <.LSM127>:
    self->after = NULL;
    3df6:	1e 00 78    	mov.w     [w14], w0
    3df8:	80 00 eb    	clr.w     w1
    3dfa:	21 08 98    	mov.w     w1, [w0+20]

00003dfc <.LSM128>:
}
    3dfc:	00 80 fa    	ulnk      
    3dfe:	00 00 06    	return    

00003e00 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    3e00:	04 00 fa    	lnk       #0x4
    3e02:	00 0f 78    	mov.w     w0, [w14]
    3e04:	11 07 98    	mov.w     w1, [w14+2]

00003e06 <.LSM1>:
    if (val)
    3e06:	1e 00 90    	mov.w     [w14+2], w0
    3e08:	00 00 e0    	cp0.w     w0
    3e0a:	0d 00 32    	bra       Z, 0x3e26 <.L2>

00003e0c <.LSM2>:
        bitset(self->port, self->bit);
    3e0c:	1e 00 78    	mov.w     [w14], w0
    3e0e:	10 00 78    	mov.w     [w0], w0
    3e10:	9e 00 78    	mov.w     [w14], w1
    3e12:	91 00 78    	mov.w     [w1], w1
    3e14:	11 01 78    	mov.w     [w1], w2
    3e16:	9e 00 78    	mov.w     [w14], w1
    3e18:	e1 40 90    	mov.b     [w1+6], w1
    3e1a:	81 80 fb    	ze        w1, w1
    3e1c:	13 00 20    	mov.w     #0x1, w3
    3e1e:	81 18 dd    	sl.w      w3, w1, w1
    3e20:	82 80 70    	ior.w     w1, w2, w1
    3e22:	01 08 78    	mov.w     w1, [w0]
    3e24:	0d 00 37    	bra       0x3e40 <.L1>

00003e26 <.L2>:
    else
        bitclear(self->port, self->bit);
    3e26:	1e 00 78    	mov.w     [w14], w0
    3e28:	10 00 78    	mov.w     [w0], w0
    3e2a:	9e 00 78    	mov.w     [w14], w1
    3e2c:	91 00 78    	mov.w     [w1], w1
    3e2e:	11 01 78    	mov.w     [w1], w2
    3e30:	9e 00 78    	mov.w     [w14], w1
    3e32:	e1 40 90    	mov.b     [w1+6], w1
    3e34:	81 80 fb    	ze        w1, w1
    3e36:	13 00 20    	mov.w     #0x1, w3
    3e38:	81 18 dd    	sl.w      w3, w1, w1
    3e3a:	81 80 ea    	com.w     w1, w1
    3e3c:	81 00 61    	and.w     w2, w1, w1
    3e3e:	01 08 78    	mov.w     w1, [w0]

00003e40 <.L1>:
}
    3e40:	00 80 fa    	ulnk      
    3e42:	00 00 06    	return    

00003e44 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    3e44:	02 00 fa    	lnk       #0x2
    3e46:	00 0f 78    	mov.w     w0, [w14]

00003e48 <.LSM6>:
    return bitread(self->port, self->bit);
    3e48:	1e 00 78    	mov.w     [w14], w0
    3e4a:	10 00 78    	mov.w     [w0], w0
    3e4c:	90 00 78    	mov.w     [w0], w1
    3e4e:	1e 00 78    	mov.w     [w14], w0
    3e50:	60 40 90    	mov.b     [w0+6], w0
    3e52:	00 80 fb    	ze        w0, w0
    3e54:	12 00 20    	mov.w     #0x1, w2
    3e56:	00 10 dd    	sl.w      w2, w0, w0
    3e58:	00 80 60    	and.w     w1, w0, w0
    3e5a:	00 f0 a7    	btsc.w    w0, #0xf
    3e5c:	00 00 ea    	neg.w     w0, w0
    3e5e:	00 00 ea    	neg.w     w0, w0
    3e60:	4f 00 de    	lsr.w     w0, #0xf, w0

00003e62 <.LSM7>:
}
    3e62:	00 80 fa    	ulnk      
    3e64:	00 00 06    	return    

00003e66 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    3e66:	02 00 fa    	lnk       #0x2
    3e68:	00 0f 78    	mov.w     w0, [w14]

00003e6a <.LSM9>:
    AD1CHS = self->annum;
    3e6a:	1e 00 78    	mov.w     [w14], w0
    3e6c:	40 00 90    	mov.w     [w0+8], w0
    3e6e:	40 19 88    	mov.w     w0, 0x328

00003e70 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    3e70:	20 23 a8    	bset.b    0x320, #0x1

00003e72 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    3e72:	00 00 00    	nop       

00003e74 <.L6>:
    3e74:	00 19 80    	mov.w     0x320, w0
    3e76:	61 00 60    	and.w     w0, #0x1, w0
    3e78:	00 00 e0    	cp0.w     w0
    3e7a:	fc ff 32    	bra       Z, 0x3e74 <.L6>

00003e7c <.LSM12>:
    return ADC1BUF0;
    3e7c:	00 18 80    	mov.w     0x300, w0

00003e7e <.LSM13>:
}
    3e7e:	00 80 fa    	ulnk      
    3e80:	00 00 06    	return    

00003e82 <_init_pin>:

void init_pin(void) {
    3e82:	02 00 fa    	lnk       #0x2

00003e84 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e84:	40 6d 20    	mov.w     #0x6d4, w0
    3e86:	80 1f 78    	mov.w     w0, [w15++]
    3e88:	47 01 20    	mov.w     #0x14, w7
    3e8a:	00 43 eb    	clr.b     w6
    3e8c:	80 82 eb    	setm.w    w5
    3e8e:	54 c0 b3    	mov.b     #0x5, w4
    3e90:	80 01 eb    	clr.w     w3
    3e92:	82 2d 20    	mov.w     #0x2d8, w2
    3e94:	a1 2d 20    	mov.w     #0x2da, w1
    3e96:	40 0d 21    	mov.w     #0x10d4, w0
    3e98:	08 01 07    	rcall     0x40aa <_pin_init>
    3e9a:	8f 87 e9    	dec2.w    w15, w15

00003e9c <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3e9c:	80 6d 20    	mov.w     #0x6d8, w0
    3e9e:	80 1f 78    	mov.w     w0, [w15++]
    3ea0:	97 01 20    	mov.w     #0x19, w7
    3ea2:	86 c0 b3    	mov.b     #0x8, w6
    3ea4:	80 82 eb    	setm.w    w5
    3ea6:	44 c0 b3    	mov.b     #0x4, w4
    3ea8:	80 01 eb    	clr.w     w3
    3eaa:	82 2d 20    	mov.w     #0x2d8, w2
    3eac:	a1 2d 20    	mov.w     #0x2da, w1
    3eae:	a0 0e 21    	mov.w     #0x10ea, w0
    3eb0:	fc 00 07    	rcall     0x40aa <_pin_init>
    3eb2:	8f 87 e9    	dec2.w    w15, w15

00003eb4 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3eb4:	a0 6c 20    	mov.w     #0x6ca, w0
    3eb6:	80 1f 78    	mov.w     w0, [w15++]
    3eb8:	a7 00 20    	mov.w     #0xa, w7
    3eba:	00 43 eb    	clr.b     w6
    3ebc:	80 82 eb    	setm.w    w5
    3ebe:	44 c0 b3    	mov.b     #0x4, w4
    3ec0:	80 01 eb    	clr.w     w3
    3ec2:	82 2e 20    	mov.w     #0x2e8, w2
    3ec4:	a1 2e 20    	mov.w     #0x2ea, w1
    3ec6:	00 10 21    	mov.w     #0x1100, w0
    3ec8:	f0 00 07    	rcall     0x40aa <_pin_init>
    3eca:	8f 87 e9    	dec2.w    w15, w15

00003ecc <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3ecc:	00 6d 20    	mov.w     #0x6d0, w0
    3ece:	80 1f 78    	mov.w     w0, [w15++]
    3ed0:	17 01 20    	mov.w     #0x11, w7
    3ed2:	86 c0 b3    	mov.b     #0x8, w6
    3ed4:	80 82 eb    	setm.w    w5
    3ed6:	54 c0 b3    	mov.b     #0x5, w4
    3ed8:	80 01 eb    	clr.w     w3
    3eda:	82 2e 20    	mov.w     #0x2e8, w2
    3edc:	a1 2e 20    	mov.w     #0x2ea, w1
    3ede:	60 11 21    	mov.w     #0x1116, w0
    3ee0:	e4 00 07    	rcall     0x40aa <_pin_init>
    3ee2:	8f 87 e9    	dec2.w    w15, w15

00003ee4 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3ee4:	c0 6d 20    	mov.w     #0x6dc, w0
    3ee6:	80 1f 78    	mov.w     w0, [w15++]
    3ee8:	d7 01 20    	mov.w     #0x1d, w7
    3eea:	86 c0 b3    	mov.b     #0x8, w6
    3eec:	f5 00 20    	mov.w     #0xf, w5
    3eee:	f4 c0 b3    	mov.b     #0xf, w4
    3ef0:	23 4e 20    	mov.w     #0x4e2, w3
    3ef2:	82 2c 20    	mov.w     #0x2c8, w2
    3ef4:	a1 2c 20    	mov.w     #0x2ca, w1
    3ef6:	c0 12 21    	mov.w     #0x112c, w0
    3ef8:	d8 00 07    	rcall     0x40aa <_pin_init>
    3efa:	8f 87 e9    	dec2.w    w15, w15

00003efc <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3efc:	00 6d 20    	mov.w     #0x6d0, w0
    3efe:	80 1f 78    	mov.w     w0, [w15++]
    3f00:	07 01 20    	mov.w     #0x10, w7
    3f02:	00 43 eb    	clr.b     w6
    3f04:	80 82 eb    	setm.w    w5
    3f06:	34 c0 b3    	mov.b     #0x3, w4
    3f08:	80 01 eb    	clr.w     w3
    3f0a:	82 2e 20    	mov.w     #0x2e8, w2
    3f0c:	a1 2e 20    	mov.w     #0x2ea, w1
    3f0e:	20 14 21    	mov.w     #0x1142, w0
    3f10:	cc 00 07    	rcall     0x40aa <_pin_init>
    3f12:	8f 87 e9    	dec2.w    w15, w15

00003f14 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f14:	20 6c 20    	mov.w     #0x6c2, w0
    3f16:	80 1f 78    	mov.w     w0, [w15++]
    3f18:	27 00 20    	mov.w     #0x2, w7
    3f1a:	00 43 eb    	clr.b     w6
    3f1c:	80 82 eb    	setm.w    w5
    3f1e:	84 c0 b3    	mov.b     #0x8, w4
    3f20:	80 01 eb    	clr.w     w3
    3f22:	82 2d 20    	mov.w     #0x2d8, w2
    3f24:	a1 2d 20    	mov.w     #0x2da, w1
    3f26:	80 15 21    	mov.w     #0x1158, w0
    3f28:	c0 00 07    	rcall     0x40aa <_pin_init>
    3f2a:	8f 87 e9    	dec2.w    w15, w15

00003f2c <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f2c:	c0 6c 20    	mov.w     #0x6cc, w0
    3f2e:	80 1f 78    	mov.w     w0, [w15++]
    3f30:	c7 00 20    	mov.w     #0xc, w7
    3f32:	00 43 eb    	clr.b     w6
    3f34:	80 82 eb    	setm.w    w5
    3f36:	b4 c0 b3    	mov.b     #0xb, w4
    3f38:	80 01 eb    	clr.w     w3
    3f3a:	82 2d 20    	mov.w     #0x2d8, w2
    3f3c:	a1 2d 20    	mov.w     #0x2da, w1
    3f3e:	e0 16 21    	mov.w     #0x116e, w0
    3f40:	b4 00 07    	rcall     0x40aa <_pin_init>
    3f42:	8f 87 e9    	dec2.w    w15, w15

00003f44 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f44:	40 6c 20    	mov.w     #0x6c4, w0
    3f46:	80 1f 78    	mov.w     w0, [w15++]
    3f48:	47 00 20    	mov.w     #0x4, w7
    3f4a:	00 43 eb    	clr.b     w6
    3f4c:	80 82 eb    	setm.w    w5
    3f4e:	94 c0 b3    	mov.b     #0x9, w4
    3f50:	80 01 eb    	clr.w     w3
    3f52:	82 2d 20    	mov.w     #0x2d8, w2
    3f54:	a1 2d 20    	mov.w     #0x2da, w1
    3f56:	40 18 21    	mov.w     #0x1184, w0
    3f58:	a8 00 07    	rcall     0x40aa <_pin_init>
    3f5a:	8f 87 e9    	dec2.w    w15, w15

00003f5c <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f5c:	20 6c 20    	mov.w     #0x6c2, w0
    3f5e:	80 1f 78    	mov.w     w0, [w15++]
    3f60:	37 00 20    	mov.w     #0x3, w7
    3f62:	86 c0 b3    	mov.b     #0x8, w6
    3f64:	80 82 eb    	setm.w    w5
    3f66:	a4 c0 b3    	mov.b     #0xa, w4
    3f68:	80 01 eb    	clr.w     w3
    3f6a:	82 2d 20    	mov.w     #0x2d8, w2
    3f6c:	a1 2d 20    	mov.w     #0x2da, w1
    3f6e:	a0 19 21    	mov.w     #0x119a, w0
    3f70:	9c 00 07    	rcall     0x40aa <_pin_init>
    3f72:	8f 87 e9    	dec2.w    w15, w15

00003f74 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f74:	a0 6c 20    	mov.w     #0x6ca, w0
    3f76:	80 1f 78    	mov.w     w0, [w15++]
    3f78:	b7 00 20    	mov.w     #0xb, w7
    3f7a:	86 c0 b3    	mov.b     #0x8, w6
    3f7c:	80 82 eb    	setm.w    w5
    3f7e:	00 42 eb    	clr.b     w4
    3f80:	80 01 eb    	clr.w     w3
    3f82:	82 2d 20    	mov.w     #0x2d8, w2
    3f84:	a1 2d 20    	mov.w     #0x2da, w1
    3f86:	00 1b 21    	mov.w     #0x11b0, w0
    3f88:	90 00 07    	rcall     0x40aa <_pin_init>
    3f8a:	8f 87 e9    	dec2.w    w15, w15

00003f8c <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3f8c:	80 6d 20    	mov.w     #0x6d8, w0
    3f8e:	80 1f 78    	mov.w     w0, [w15++]
    3f90:	87 01 20    	mov.w     #0x18, w7
    3f92:	00 43 eb    	clr.b     w6
    3f94:	80 82 eb    	setm.w    w5
    3f96:	14 c0 b3    	mov.b     #0x1, w4
    3f98:	80 01 eb    	clr.w     w3
    3f9a:	82 2d 20    	mov.w     #0x2d8, w2
    3f9c:	a1 2d 20    	mov.w     #0x2da, w1
    3f9e:	60 1c 21    	mov.w     #0x11c6, w0
    3fa0:	84 00 07    	rcall     0x40aa <_pin_init>
    3fa2:	8f 87 e9    	dec2.w    w15, w15

00003fa4 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3fa4:	60 6d 20    	mov.w     #0x6d6, w0
    3fa6:	80 1f 78    	mov.w     w0, [w15++]
    3fa8:	77 01 20    	mov.w     #0x17, w7
    3faa:	86 c0 b3    	mov.b     #0x8, w6
    3fac:	80 82 eb    	setm.w    w5
    3fae:	24 c0 b3    	mov.b     #0x2, w4
    3fb0:	80 01 eb    	clr.w     w3
    3fb2:	82 2d 20    	mov.w     #0x2d8, w2
    3fb4:	a1 2d 20    	mov.w     #0x2da, w1
    3fb6:	c0 1d 21    	mov.w     #0x11dc, w0
    3fb8:	78 00 07    	rcall     0x40aa <_pin_init>
    3fba:	8f 87 e9    	dec2.w    w15, w15

00003fbc <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3fbc:	60 6d 20    	mov.w     #0x6d6, w0
    3fbe:	80 1f 78    	mov.w     w0, [w15++]
    3fc0:	67 01 20    	mov.w     #0x16, w7
    3fc2:	00 43 eb    	clr.b     w6
    3fc4:	80 82 eb    	setm.w    w5
    3fc6:	34 c0 b3    	mov.b     #0x3, w4
    3fc8:	80 01 eb    	clr.w     w3
    3fca:	82 2d 20    	mov.w     #0x2d8, w2
    3fcc:	a1 2d 20    	mov.w     #0x2da, w1
    3fce:	20 1f 21    	mov.w     #0x11f2, w0
    3fd0:	6c 00 07    	rcall     0x40aa <_pin_init>
    3fd2:	8f 87 e9    	dec2.w    w15, w15

00003fd4 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3fd4:	00 6c 20    	mov.w     #0x6c0, w0
    3fd6:	80 1f 78    	mov.w     w0, [w15++]
    3fd8:	80 03 eb    	clr.w     w7
    3fda:	00 43 eb    	clr.b     w6
    3fdc:	80 02 eb    	clr.w     w5
    3fde:	00 42 eb    	clr.b     w4
    3fe0:	23 4e 20    	mov.w     #0x4e2, w3
    3fe2:	82 2c 20    	mov.w     #0x2c8, w2
    3fe4:	a1 2c 20    	mov.w     #0x2ca, w1
    3fe6:	60 27 21    	mov.w     #0x1276, w0
    3fe8:	60 00 07    	rcall     0x40aa <_pin_init>
    3fea:	8f 87 e9    	dec2.w    w15, w15

00003fec <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3fec:	00 6c 20    	mov.w     #0x6c0, w0
    3fee:	80 1f 78    	mov.w     w0, [w15++]
    3ff0:	17 00 20    	mov.w     #0x1, w7
    3ff2:	86 c0 b3    	mov.b     #0x8, w6
    3ff4:	15 00 20    	mov.w     #0x1, w5
    3ff6:	14 c0 b3    	mov.b     #0x1, w4
    3ff8:	23 4e 20    	mov.w     #0x4e2, w3
    3ffa:	82 2c 20    	mov.w     #0x2c8, w2
    3ffc:	a1 2c 20    	mov.w     #0x2ca, w1
    3ffe:	00 26 21    	mov.w     #0x1260, w0
    4000:	54 00 07    	rcall     0x40aa <_pin_init>
    4002:	8f 87 e9    	dec2.w    w15, w15

00004004 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4004:	c0 6c 20    	mov.w     #0x6cc, w0
    4006:	80 1f 78    	mov.w     w0, [w15++]
    4008:	d7 00 20    	mov.w     #0xd, w7
    400a:	86 c0 b3    	mov.b     #0x8, w6
    400c:	25 00 20    	mov.w     #0x2, w5
    400e:	24 c0 b3    	mov.b     #0x2, w4
    4010:	23 4e 20    	mov.w     #0x4e2, w3
    4012:	82 2c 20    	mov.w     #0x2c8, w2
    4014:	a1 2c 20    	mov.w     #0x2ca, w1
    4016:	a0 24 21    	mov.w     #0x124a, w0
    4018:	48 00 07    	rcall     0x40aa <_pin_init>
    401a:	8f 87 e9    	dec2.w    w15, w15

0000401c <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    401c:	00 00 eb    	clr.w     w0
    401e:	80 1f 78    	mov.w     w0, [w15++]
    4020:	80 83 eb    	setm.w    w7
    4022:	00 43 eb    	clr.b     w6
    4024:	35 00 20    	mov.w     #0x3, w5
    4026:	34 c0 b3    	mov.b     #0x3, w4
    4028:	23 4e 20    	mov.w     #0x4e2, w3
    402a:	82 2c 20    	mov.w     #0x2c8, w2
    402c:	a1 2c 20    	mov.w     #0x2ca, w1
    402e:	40 23 21    	mov.w     #0x1234, w0
    4030:	3c 00 07    	rcall     0x40aa <_pin_init>
    4032:	8f 87 e9    	dec2.w    w15, w15

00004034 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4034:	c0 6d 20    	mov.w     #0x6dc, w0
    4036:	80 1f 78    	mov.w     w0, [w15++]
    4038:	c7 01 20    	mov.w     #0x1c, w7
    403a:	00 43 eb    	clr.b     w6
    403c:	45 00 20    	mov.w     #0x4, w5
    403e:	44 c0 b3    	mov.b     #0x4, w4
    4040:	23 4e 20    	mov.w     #0x4e2, w3
    4042:	82 2c 20    	mov.w     #0x2c8, w2
    4044:	a1 2c 20    	mov.w     #0x2ca, w1
    4046:	e0 21 21    	mov.w     #0x121e, w0
    4048:	30 00 07    	rcall     0x40aa <_pin_init>
    404a:	8f 87 e9    	dec2.w    w15, w15

0000404c <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    404c:	20 6d 20    	mov.w     #0x6d2, w0
    404e:	80 1f 78    	mov.w     w0, [w15++]
    4050:	27 01 20    	mov.w     #0x12, w7
    4052:	00 43 eb    	clr.b     w6
    4054:	55 00 20    	mov.w     #0x5, w5
    4056:	54 c0 b3    	mov.b     #0x5, w4
    4058:	23 4e 20    	mov.w     #0x4e2, w3
    405a:	82 2c 20    	mov.w     #0x2c8, w2
    405c:	a1 2c 20    	mov.w     #0x2ca, w1
    405e:	80 20 21    	mov.w     #0x1208, w0
    4060:	24 00 07    	rcall     0x40aa <_pin_init>
    4062:	8f 87 e9    	dec2.w    w15, w15

00004064 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    4064:	00 00 eb    	clr.w     w0
    4066:	00 0f 78    	mov.w     w0, [w14]
    4068:	07 00 37    	bra       0x4078 <.L8>

0000406a <.L9>:
        pin_digitalIn(&D[i]);
    406a:	1e 00 78    	mov.w     [w14], w0
    406c:	76 00 b9    	mul.su    w0, #0x16, w0
    406e:	80 00 78    	mov.w     w0, w1
    4070:	40 0d 21    	mov.w     #0x10d4, w0
    4072:	00 80 40    	add.w     w1, w0, w0
    4074:	46 00 07    	rcall     0x4102 <_pin_digitalIn>

00004076 <.LSM37>:
    4076:	1e 0f e8    	inc.w     [w14], [w14]

00004078 <.L8>:
    4078:	1e 00 78    	mov.w     [w14], w0
    407a:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    407c:	f6 ff 36    	bra       LEU, 0x406a <.L9>

0000407e <.LSM38>:
    for (i = 0; i<6; i++)
    407e:	00 00 eb    	clr.w     w0
    4080:	00 0f 78    	mov.w     w0, [w14]
    4082:	07 00 37    	bra       0x4092 <.L10>

00004084 <.L11>:
        pin_analogIn(&A[i]);
    4084:	1e 00 78    	mov.w     [w14], w0
    4086:	76 00 b9    	mul.su    w0, #0x16, w0
    4088:	80 00 78    	mov.w     w0, w1
    408a:	80 20 21    	mov.w     #0x1208, w0
    408c:	00 80 40    	add.w     w1, w0, w0
    408e:	95 00 07    	rcall     0x41ba <_pin_analogIn>

00004090 <.LSM40>:
    4090:	1e 0f e8    	inc.w     [w14], [w14]

00004092 <.L10>:
    4092:	1e 00 78    	mov.w     [w14], w0
    4094:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    4096:	f6 ff 36    	bra       LEU, 0x4084 <.L11>

00004098 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    4098:	00 2e 20    	mov.w     #0x2e0, w0
    409a:	00 19 88    	mov.w     w0, 0x320

0000409c <.LSM42>:
    AD1CON2 = 0;
    409c:	22 23 ef    	clr.w     0x322

0000409e <.LSM43>:
    AD1CON3 = 0x0C40;
    409e:	00 c4 20    	mov.w     #0xc40, w0
    40a0:	20 19 88    	mov.w     w0, 0x324

000040a2 <.LSM44>:
    AD1CHS = 0;
    40a2:	28 23 ef    	clr.w     0x328

000040a4 <.LSM45>:
    AD1CON1bits.ADON = 1;
    40a4:	21 e3 a8    	bset.b    0x321, #0x7

000040a6 <.LSM46>:
}
    40a6:	00 80 fa    	ulnk      
    40a8:	00 00 06    	return    

000040aa <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    40aa:	10 00 fa    	lnk       #0x10
    40ac:	00 0f 78    	mov.w     w0, [w14]
    40ae:	11 07 98    	mov.w     w1, [w14+2]
    40b0:	22 07 98    	mov.w     w2, [w14+4]
    40b2:	33 07 98    	mov.w     w3, [w14+6]
    40b4:	04 4f 98    	mov.b     w4, [w14+8]
    40b6:	55 07 98    	mov.w     w5, [w14+10]
    40b8:	46 4f 98    	mov.b     w6, [w14+12]
    40ba:	77 07 98    	mov.w     w7, [w14+14]

000040bc <.LSM48>:
    self->port = port;
    40bc:	1e 00 78    	mov.w     [w14], w0
    40be:	9e 00 90    	mov.w     [w14+2], w1
    40c0:	01 08 78    	mov.w     w1, [w0]

000040c2 <.LSM49>:
    self->tris = tris;
    40c2:	1e 00 78    	mov.w     [w14], w0
    40c4:	ae 00 90    	mov.w     [w14+4], w1
    40c6:	11 00 98    	mov.w     w1, [w0+2]

000040c8 <.LSM50>:
    self->ans = ans;
    40c8:	1e 00 78    	mov.w     [w14], w0
    40ca:	be 00 90    	mov.w     [w14+6], w1
    40cc:	21 00 98    	mov.w     w1, [w0+4]

000040ce <.LSM51>:
    self->bit = bit;
    40ce:	1e 00 78    	mov.w     [w14], w0
    40d0:	8e 48 90    	mov.b     [w14+8], w1
    40d2:	61 40 98    	mov.b     w1, [w0+6]

000040d4 <.LSM52>:
    self->annum = annum;
    40d4:	1e 00 78    	mov.w     [w14], w0
    40d6:	de 00 90    	mov.w     [w14+10], w1
    40d8:	41 00 98    	mov.w     w1, [w0+8]

000040da <.LSM53>:
    self->rpshift = rpshift;
    40da:	1e 00 78    	mov.w     [w14], w0
    40dc:	ce 48 90    	mov.b     [w14+12], w1
    40de:	21 48 98    	mov.b     w1, [w0+10]

000040e0 <.LSM54>:
    self->rpnum = rpnum;
    40e0:	fe 00 90    	mov.w     [w14+14], w1
    40e2:	1e 00 78    	mov.w     [w14], w0
    40e4:	61 00 98    	mov.w     w1, [w0+12]

000040e6 <.LSM55>:
    self->rpor = rpor;
    40e6:	1e 00 78    	mov.w     [w14], w0
    40e8:	ce b8 97    	mov.w     [w14-8], w1
    40ea:	71 00 98    	mov.w     w1, [w0+14]

000040ec <.LSM56>:
    self->owner = NULL;
    40ec:	1e 00 78    	mov.w     [w14], w0
    40ee:	80 00 eb    	clr.w     w1
    40f0:	01 08 98    	mov.w     w1, [w0+16]

000040f2 <.LSM57>:
    self->write = NULL;
    40f2:	1e 00 78    	mov.w     [w14], w0
    40f4:	80 00 eb    	clr.w     w1
    40f6:	11 08 98    	mov.w     w1, [w0+18]

000040f8 <.LSM58>:
    self->read = NULL;
    40f8:	1e 00 78    	mov.w     [w14], w0
    40fa:	80 00 eb    	clr.w     w1
    40fc:	21 08 98    	mov.w     w1, [w0+20]

000040fe <.LSM59>:
}
    40fe:	00 80 fa    	ulnk      
    4100:	00 00 06    	return    

00004102 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    4102:	02 00 fa    	lnk       #0x2
    4104:	00 0f 78    	mov.w     w0, [w14]

00004106 <.LSM61>:
    if (self->ans)
    4106:	1e 00 78    	mov.w     [w14], w0
    4108:	20 00 90    	mov.w     [w0+4], w0
    410a:	00 00 e0    	cp0.w     w0
    410c:	0d 00 32    	bra       Z, 0x4128 <.L14>

0000410e <.LSM62>:
        bitclear(self->ans, self->bit);
    410e:	1e 00 78    	mov.w     [w14], w0
    4110:	20 00 90    	mov.w     [w0+4], w0
    4112:	9e 00 78    	mov.w     [w14], w1
    4114:	a1 00 90    	mov.w     [w1+4], w1
    4116:	11 01 78    	mov.w     [w1], w2
    4118:	9e 00 78    	mov.w     [w14], w1
    411a:	e1 40 90    	mov.b     [w1+6], w1
    411c:	81 80 fb    	ze        w1, w1
    411e:	13 00 20    	mov.w     #0x1, w3
    4120:	81 18 dd    	sl.w      w3, w1, w1
    4122:	81 80 ea    	com.w     w1, w1
    4124:	81 00 61    	and.w     w2, w1, w1
    4126:	01 08 78    	mov.w     w1, [w0]

00004128 <.L14>:
    bitset(self->tris, self->bit);
    4128:	1e 00 78    	mov.w     [w14], w0
    412a:	10 00 90    	mov.w     [w0+2], w0
    412c:	9e 00 78    	mov.w     [w14], w1
    412e:	91 00 90    	mov.w     [w1+2], w1
    4130:	11 01 78    	mov.w     [w1], w2
    4132:	9e 00 78    	mov.w     [w14], w1
    4134:	e1 40 90    	mov.b     [w1+6], w1
    4136:	81 80 fb    	ze        w1, w1
    4138:	13 00 20    	mov.w     #0x1, w3
    413a:	81 18 dd    	sl.w      w3, w1, w1
    413c:	82 80 70    	ior.w     w1, w2, w1
    413e:	01 08 78    	mov.w     w1, [w0]

00004140 <.LSM64>:
    self->write = NULL;
    4140:	1e 00 78    	mov.w     [w14], w0
    4142:	80 00 eb    	clr.w     w1
    4144:	11 08 98    	mov.w     w1, [w0+18]

00004146 <.LSM65>:
    self->read = __digitalRead;    
    4146:	1e 00 78    	mov.w     [w14], w0
    4148:	41 e4 23    	mov.w     #0x3e44, w1
    414a:	21 08 98    	mov.w     w1, [w0+20]

0000414c <.LSM66>:
}
    414c:	00 80 fa    	ulnk      
    414e:	00 00 06    	return    

00004150 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    4150:	02 00 fa    	lnk       #0x2
    4152:	00 0f 78    	mov.w     w0, [w14]

00004154 <.LSM68>:
    if (self->ans)
    4154:	1e 00 78    	mov.w     [w14], w0
    4156:	20 00 90    	mov.w     [w0+4], w0
    4158:	00 00 e0    	cp0.w     w0
    415a:	0d 00 32    	bra       Z, 0x4176 <.L16>

0000415c <.LSM69>:
        bitclear(self->ans, self->bit);
    415c:	1e 00 78    	mov.w     [w14], w0
    415e:	20 00 90    	mov.w     [w0+4], w0
    4160:	9e 00 78    	mov.w     [w14], w1
    4162:	a1 00 90    	mov.w     [w1+4], w1
    4164:	11 01 78    	mov.w     [w1], w2
    4166:	9e 00 78    	mov.w     [w14], w1
    4168:	e1 40 90    	mov.b     [w1+6], w1
    416a:	81 80 fb    	ze        w1, w1
    416c:	13 00 20    	mov.w     #0x1, w3
    416e:	81 18 dd    	sl.w      w3, w1, w1
    4170:	81 80 ea    	com.w     w1, w1
    4172:	81 00 61    	and.w     w2, w1, w1
    4174:	01 08 78    	mov.w     w1, [w0]

00004176 <.L16>:
    bitclear(self->port, self->bit);
    4176:	1e 00 78    	mov.w     [w14], w0
    4178:	10 00 78    	mov.w     [w0], w0
    417a:	9e 00 78    	mov.w     [w14], w1
    417c:	91 00 78    	mov.w     [w1], w1
    417e:	11 01 78    	mov.w     [w1], w2
    4180:	9e 00 78    	mov.w     [w14], w1
    4182:	e1 40 90    	mov.b     [w1+6], w1
    4184:	81 80 fb    	ze        w1, w1
    4186:	13 00 20    	mov.w     #0x1, w3
    4188:	81 18 dd    	sl.w      w3, w1, w1
    418a:	81 80 ea    	com.w     w1, w1
    418c:	81 00 61    	and.w     w2, w1, w1
    418e:	01 08 78    	mov.w     w1, [w0]

00004190 <.LSM71>:
    bitclear(self->tris, self->bit);
    4190:	1e 00 78    	mov.w     [w14], w0
    4192:	10 00 90    	mov.w     [w0+2], w0
    4194:	9e 00 78    	mov.w     [w14], w1
    4196:	91 00 90    	mov.w     [w1+2], w1
    4198:	11 01 78    	mov.w     [w1], w2
    419a:	9e 00 78    	mov.w     [w14], w1
    419c:	e1 40 90    	mov.b     [w1+6], w1
    419e:	81 80 fb    	ze        w1, w1
    41a0:	13 00 20    	mov.w     #0x1, w3
    41a2:	81 18 dd    	sl.w      w3, w1, w1
    41a4:	81 80 ea    	com.w     w1, w1
    41a6:	81 00 61    	and.w     w2, w1, w1
    41a8:	01 08 78    	mov.w     w1, [w0]

000041aa <.LSM72>:
    self->write = __digitalWrite;
    41aa:	1e 00 78    	mov.w     [w14], w0
    41ac:	01 e0 23    	mov.w     #0x3e00, w1
    41ae:	11 08 98    	mov.w     w1, [w0+18]

000041b0 <.LSM73>:
    self->read = __digitalRead;
    41b0:	1e 00 78    	mov.w     [w14], w0
    41b2:	41 e4 23    	mov.w     #0x3e44, w1
    41b4:	21 08 98    	mov.w     w1, [w0+20]

000041b6 <.LSM74>:
}
    41b6:	00 80 fa    	ulnk      
    41b8:	00 00 06    	return    

000041ba <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    41ba:	02 00 fa    	lnk       #0x2
    41bc:	00 0f 78    	mov.w     w0, [w14]

000041be <.LSM76>:
    if (!(self->ans))
    41be:	1e 00 78    	mov.w     [w14], w0
    41c0:	20 00 90    	mov.w     [w0+4], w0
    41c2:	00 00 e0    	cp0.w     w0
    41c4:	1f 00 32    	bra       Z, 0x4204 <.L20>

000041c6 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    41c6:	1e 00 78    	mov.w     [w14], w0
    41c8:	10 00 90    	mov.w     [w0+2], w0
    41ca:	9e 00 78    	mov.w     [w14], w1
    41cc:	91 00 90    	mov.w     [w1+2], w1
    41ce:	11 01 78    	mov.w     [w1], w2
    41d0:	9e 00 78    	mov.w     [w14], w1
    41d2:	e1 40 90    	mov.b     [w1+6], w1
    41d4:	81 80 fb    	ze        w1, w1
    41d6:	13 00 20    	mov.w     #0x1, w3
    41d8:	81 18 dd    	sl.w      w3, w1, w1
    41da:	82 80 70    	ior.w     w1, w2, w1
    41dc:	01 08 78    	mov.w     w1, [w0]

000041de <.LSM78>:
    bitset(self->ans, self->bit);
    41de:	1e 00 78    	mov.w     [w14], w0
    41e0:	20 00 90    	mov.w     [w0+4], w0
    41e2:	9e 00 78    	mov.w     [w14], w1
    41e4:	a1 00 90    	mov.w     [w1+4], w1
    41e6:	11 01 78    	mov.w     [w1], w2
    41e8:	9e 00 78    	mov.w     [w14], w1
    41ea:	e1 40 90    	mov.b     [w1+6], w1
    41ec:	81 80 fb    	ze        w1, w1
    41ee:	13 00 20    	mov.w     #0x1, w3
    41f0:	81 18 dd    	sl.w      w3, w1, w1
    41f2:	82 80 70    	ior.w     w1, w2, w1
    41f4:	01 08 78    	mov.w     w1, [w0]

000041f6 <.LSM79>:
    self->write = NULL;
    41f6:	1e 00 78    	mov.w     [w14], w0
    41f8:	80 00 eb    	clr.w     w1
    41fa:	11 08 98    	mov.w     w1, [w0+18]

000041fc <.LSM80>:
    self->read = __analogRead;
    41fc:	1e 00 78    	mov.w     [w14], w0
    41fe:	61 e6 23    	mov.w     #0x3e66, w1
    4200:	21 08 98    	mov.w     w1, [w0+20]
    4202:	01 00 37    	bra       0x4206 <.L17>

00004204 <.L20>:
    4204:	00 00 00    	nop       

00004206 <.L17>:
}
    4206:	00 80 fa    	ulnk      
    4208:	00 00 06    	return    

0000420a <_pin_set>:

void pin_set(_PIN *self) {
    420a:	02 00 fa    	lnk       #0x2
    420c:	00 0f 78    	mov.w     w0, [w14]

0000420e <.LSM84>:
    if (self->write==__digitalWrite)
    420e:	1e 00 78    	mov.w     [w14], w0
    4210:	90 08 90    	mov.w     [w0+18], w1
    4212:	00 e0 23    	mov.w     #0x3e00, w0
    4214:	80 8f 50    	sub.w     w1, w0, [w15]
    4216:	0c 00 3a    	bra       NZ, 0x4230 <.L21>

00004218 <.LSM85>:
        bitset(self->port, self->bit);
    4218:	1e 00 78    	mov.w     [w14], w0
    421a:	10 00 78    	mov.w     [w0], w0
    421c:	9e 00 78    	mov.w     [w14], w1
    421e:	91 00 78    	mov.w     [w1], w1
    4220:	11 01 78    	mov.w     [w1], w2
    4222:	9e 00 78    	mov.w     [w14], w1
    4224:	e1 40 90    	mov.b     [w1+6], w1
    4226:	81 80 fb    	ze        w1, w1
    4228:	13 00 20    	mov.w     #0x1, w3
    422a:	81 18 dd    	sl.w      w3, w1, w1
    422c:	82 80 70    	ior.w     w1, w2, w1
    422e:	01 08 78    	mov.w     w1, [w0]

00004230 <.L21>:
}
    4230:	00 80 fa    	ulnk      
    4232:	00 00 06    	return    

00004234 <_pin_clear>:

void pin_clear(_PIN *self) {
    4234:	02 00 fa    	lnk       #0x2
    4236:	00 0f 78    	mov.w     w0, [w14]

00004238 <.LSM88>:
    if (self->write==__digitalWrite)
    4238:	1e 00 78    	mov.w     [w14], w0
    423a:	90 08 90    	mov.w     [w0+18], w1
    423c:	00 e0 23    	mov.w     #0x3e00, w0
    423e:	80 8f 50    	sub.w     w1, w0, [w15]
    4240:	0d 00 3a    	bra       NZ, 0x425c <.L23>

00004242 <.LSM89>:
        bitclear(self->port, self->bit);
    4242:	1e 00 78    	mov.w     [w14], w0
    4244:	10 00 78    	mov.w     [w0], w0
    4246:	9e 00 78    	mov.w     [w14], w1
    4248:	91 00 78    	mov.w     [w1], w1
    424a:	11 01 78    	mov.w     [w1], w2
    424c:	9e 00 78    	mov.w     [w14], w1
    424e:	e1 40 90    	mov.b     [w1+6], w1
    4250:	81 80 fb    	ze        w1, w1
    4252:	13 00 20    	mov.w     #0x1, w3
    4254:	81 18 dd    	sl.w      w3, w1, w1
    4256:	81 80 ea    	com.w     w1, w1
    4258:	81 00 61    	and.w     w2, w1, w1
    425a:	01 08 78    	mov.w     w1, [w0]

0000425c <.L23>:
}
    425c:	00 80 fa    	ulnk      
    425e:	00 00 06    	return    

00004260 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    4260:	02 00 fa    	lnk       #0x2
    4262:	00 0f 78    	mov.w     w0, [w14]

00004264 <.LSM92>:
    if (self->write==__digitalWrite)
    4264:	1e 00 78    	mov.w     [w14], w0
    4266:	90 08 90    	mov.w     [w0+18], w1
    4268:	00 e0 23    	mov.w     #0x3e00, w0
    426a:	80 8f 50    	sub.w     w1, w0, [w15]
    426c:	0c 00 3a    	bra       NZ, 0x4286 <.L25>

0000426e <.LSM93>:
        bitflip(self->port, self->bit);
    426e:	1e 00 78    	mov.w     [w14], w0
    4270:	10 00 78    	mov.w     [w0], w0
    4272:	9e 00 78    	mov.w     [w14], w1
    4274:	91 00 78    	mov.w     [w1], w1
    4276:	11 01 78    	mov.w     [w1], w2
    4278:	9e 00 78    	mov.w     [w14], w1
    427a:	e1 40 90    	mov.b     [w1+6], w1
    427c:	81 80 fb    	ze        w1, w1
    427e:	13 00 20    	mov.w     #0x1, w3
    4280:	81 18 dd    	sl.w      w3, w1, w1
    4282:	81 00 69    	xor.w     w2, w1, w1
    4284:	01 08 78    	mov.w     w1, [w0]

00004286 <.L25>:
}
    4286:	00 80 fa    	ulnk      
    4288:	00 00 06    	return    

0000428a <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    428a:	04 00 fa    	lnk       #0x4
    428c:	00 0f 78    	mov.w     w0, [w14]
    428e:	11 07 98    	mov.w     w1, [w14+2]

00004290 <.LSM96>:
    if (self->write)
    4290:	1e 00 78    	mov.w     [w14], w0
    4292:	10 08 90    	mov.w     [w0+18], w0
    4294:	00 00 e0    	cp0.w     w0
    4296:	05 00 32    	bra       Z, 0x42a2 <.L27>

00004298 <.LSM97>:
        self->write(self, val);
    4298:	1e 00 78    	mov.w     [w14], w0
    429a:	10 09 90    	mov.w     [w0+18], w2
    429c:	9e 00 90    	mov.w     [w14+2], w1
    429e:	1e 00 78    	mov.w     [w14], w0
    42a0:	02 00 01    	call      w2

000042a2 <.L27>:
}
    42a2:	00 80 fa    	ulnk      
    42a4:	00 00 06    	return    

000042a6 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    42a6:	02 00 fa    	lnk       #0x2
    42a8:	00 0f 78    	mov.w     w0, [w14]

000042aa <.LSM100>:
    if (self->read)
    42aa:	1e 00 78    	mov.w     [w14], w0
    42ac:	20 08 90    	mov.w     [w0+20], w0
    42ae:	00 00 e0    	cp0.w     w0
    42b0:	05 00 32    	bra       Z, 0x42bc <.L30>

000042b2 <.LSM101>:
        return self->read(self);
    42b2:	1e 00 78    	mov.w     [w14], w0
    42b4:	a0 08 90    	mov.w     [w0+20], w1
    42b6:	1e 00 78    	mov.w     [w14], w0
    42b8:	01 00 01    	call      w1
    42ba:	01 00 37    	bra       0x42be <.L31>

000042bc <.L30>:
    else
        return 0xFFFF;
    42bc:	00 80 eb    	setm.w    w0

000042be <.L31>:
}
    42be:	00 80 fa    	ulnk      
    42c0:	00 00 06    	return    

000042c2 <_VendorRequests>:
uint16_t rocket_state, counter;
uint16_t rocket_speed, rocket_tilt;
uint8_t rec_msg[64], tx_msg[64];

void VendorRequests(void) {
    42c2:	02 00 fa    	lnk       #0x2

000042c4 <.LSM1>:
    WORD temp;
    switch (USB_setup.bRequest) {
    42c4:	40 83 20    	mov.w     #0x834, w0
    42c6:	10 40 90    	mov.b     [w0+1], w0
    42c8:	00 80 fb    	ze        w0, w0
    42ca:	00 00 e0    	cp0.w     w0
    42cc:	03 00 32    	bra       Z, 0x42d4 <.L3>
    42ce:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    42d0:	08 00 32    	bra       Z, 0x42e2 <.L4>
    42d2:	49 00 37    	bra       0x4366 <.L6>

000042d4 <.L3>:
        case SET_STATE:
            // state = USB_setup.wValue.w;
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    42d4:	40 40 21    	mov.w     #0x1404, w0
    42d6:	80 40 eb    	clr.b     w1
    42d8:	01 48 78    	mov.b     w1, [w0]

000042da <.LSM3>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    42da:	50 40 21    	mov.w     #0x1405, w0
    42dc:	81 cc b3    	mov.b     #0xc8, w1
    42de:	01 48 78    	mov.b     w1, [w0]

000042e0 <.LSM4>:
            break;
    42e0:	45 00 37    	bra       0x436c <.L1>

000042e2 <.L4>:
        case GET_VALS:
            temp.w = rocket_tilt;
    42e2:	70 42 80    	mov.w     0x84e, w0
    42e4:	00 0f 78    	mov.w     w0, [w14]

000042e6 <.LSM6>:
            BD[EP0IN].address[0] = temp.b[0];
    42e6:	30 a0 80    	mov.w     0x1406, w0
    42e8:	9e 40 78    	mov.b     [w14], w1
    42ea:	01 48 78    	mov.b     w1, [w0]

000042ec <.LSM7>:
            BD[EP0IN].address[1] = temp.b[1];
    42ec:	30 a0 80    	mov.w     0x1406, w0
    42ee:	00 00 e8    	inc.w     w0, w0
    42f0:	9e 40 90    	mov.b     [w14+1], w1
    42f2:	01 48 78    	mov.b     w1, [w0]

000042f4 <.LSM8>:
            temp.w = uart1.TXbuffer.tail;
    42f4:	a0 95 80    	mov.w     0x12b4, w0
    42f6:	00 0f 78    	mov.w     w0, [w14]

000042f8 <.LSM9>:
            BD[EP0IN].address[2] = temp.b[0];
    42f8:	30 a0 80    	mov.w     0x1406, w0
    42fa:	00 80 e8    	inc2.w    w0, w0
    42fc:	9e 40 78    	mov.b     [w14], w1
    42fe:	01 48 78    	mov.b     w1, [w0]

00004300 <.LSM10>:
            BD[EP0IN].address[3] = temp.b[1];
    4300:	30 a0 80    	mov.w     0x1406, w0
    4302:	63 00 40    	add.w     w0, #0x3, w0
    4304:	9e 40 90    	mov.b     [w14+1], w1
    4306:	01 48 78    	mov.b     w1, [w0]

00004308 <.LSM11>:
            temp.w = uart1.TXbuffer.count;
    4308:	b0 95 80    	mov.w     0x12b6, w0
    430a:	00 0f 78    	mov.w     w0, [w14]

0000430c <.LSM12>:
            BD[EP0IN].address[4] = temp.b[0];
    430c:	30 a0 80    	mov.w     0x1406, w0
    430e:	64 00 40    	add.w     w0, #0x4, w0
    4310:	9e 40 78    	mov.b     [w14], w1
    4312:	01 48 78    	mov.b     w1, [w0]

00004314 <.LSM13>:
            BD[EP0IN].address[5] = temp.b[1];
    4314:	30 a0 80    	mov.w     0x1406, w0
    4316:	65 00 40    	add.w     w0, #0x5, w0
    4318:	9e 40 90    	mov.b     [w14+1], w1
    431a:	01 48 78    	mov.b     w1, [w0]

0000431c <.LSM14>:

            temp.w = uart1.RXbuffer.head;
    431c:	e0 95 80    	mov.w     0x12bc, w0
    431e:	00 0f 78    	mov.w     w0, [w14]

00004320 <.LSM15>:
            BD[EP0IN].address[6] = temp.b[0];
    4320:	30 a0 80    	mov.w     0x1406, w0
    4322:	66 00 40    	add.w     w0, #0x6, w0
    4324:	9e 40 78    	mov.b     [w14], w1
    4326:	01 48 78    	mov.b     w1, [w0]

00004328 <.LSM16>:
            BD[EP0IN].address[7] = temp.b[1];
    4328:	30 a0 80    	mov.w     0x1406, w0
    432a:	67 00 40    	add.w     w0, #0x7, w0
    432c:	9e 40 90    	mov.b     [w14+1], w1
    432e:	01 48 78    	mov.b     w1, [w0]

00004330 <.LSM17>:
            temp.w = uart1.RXbuffer.tail;
    4330:	f0 95 80    	mov.w     0x12be, w0
    4332:	00 0f 78    	mov.w     w0, [w14]

00004334 <.LSM18>:
            BD[EP0IN].address[8] = temp.b[0];
    4334:	30 a0 80    	mov.w     0x1406, w0
    4336:	68 00 40    	add.w     w0, #0x8, w0
    4338:	9e 40 78    	mov.b     [w14], w1
    433a:	01 48 78    	mov.b     w1, [w0]

0000433c <.LSM19>:
            BD[EP0IN].address[9] = temp.b[1];
    433c:	30 a0 80    	mov.w     0x1406, w0
    433e:	69 00 40    	add.w     w0, #0x9, w0
    4340:	9e 40 90    	mov.b     [w14+1], w1
    4342:	01 48 78    	mov.b     w1, [w0]

00004344 <.LSM20>:
            temp.w = uart1.RXbuffer.count;
    4344:	00 96 80    	mov.w     0x12c0, w0
    4346:	00 0f 78    	mov.w     w0, [w14]

00004348 <.LSM21>:
            BD[EP0IN].address[10] = temp.b[0];
    4348:	30 a0 80    	mov.w     0x1406, w0
    434a:	6a 00 40    	add.w     w0, #0xa, w0
    434c:	9e 40 78    	mov.b     [w14], w1
    434e:	01 48 78    	mov.b     w1, [w0]

00004350 <.LSM22>:
            BD[EP0IN].address[11] = temp.b[1];
    4350:	30 a0 80    	mov.w     0x1406, w0
    4352:	6b 00 40    	add.w     w0, #0xb, w0
    4354:	9e 40 90    	mov.b     [w14+1], w1
    4356:	01 48 78    	mov.b     w1, [w0]

00004358 <.LSM23>:
            BD[EP0IN].bytecount = 12;    // set EP0 IN byte count to 4
    4358:	40 40 21    	mov.w     #0x1404, w0
    435a:	c1 c0 b3    	mov.b     #0xc, w1
    435c:	01 48 78    	mov.b     w1, [w0]

0000435e <.LSM24>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    435e:	50 40 21    	mov.w     #0x1405, w0
    4360:	81 cc b3    	mov.b     #0xc8, w1
    4362:	01 48 78    	mov.b     w1, [w0]

00004364 <.LSM25>:
            break;            
    4364:	03 00 37    	bra       0x436c <.L1>

00004366 <.L6>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    4366:	3c c8 bf    	mov.b     0x83c, WREG
    4368:	00 04 a0    	bset.b    w0, #0x0
    436a:	3c e8 b7    	mov.b     WREG, 0x83c

0000436c <.L1>:
    }
}
    436c:	00 80 fa    	ulnk      
    436e:	00 00 06    	return    

00004370 <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    4370:	00 00 fa    	lnk       #0x0

00004372 <.LSM29>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4372:	3c c8 bf    	mov.b     0x83c, WREG
    4374:	00 04 a0    	bset.b    w0, #0x0
    4376:	3c e8 b7    	mov.b     WREG, 0x83c

00004378 <.LSM30>:
    }
}
    4378:	00 80 fa    	ulnk      
    437a:	00 00 06    	return    

0000437c <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    437c:	00 00 fa    	lnk       #0x0

0000437e <.LSM32>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    437e:	3c c8 bf    	mov.b     0x83c, WREG
    4380:	00 04 a0    	bset.b    w0, #0x0
    4382:	3c e8 b7    	mov.b     WREG, 0x83c

00004384 <.LSM33>:
    }
}
    4384:	00 80 fa    	ulnk      
    4386:	00 00 06    	return    

00004388 <_UART_ctl>:

void UART_ctl(uint8_t cmd, uint8_t value){
    4388:	0a 00 fa    	lnk       #0xa
    438a:	00 4f 98    	mov.b     w0, [w14+8]
    438c:	11 4f 98    	mov.b     w1, [w14+9]

0000438e <.LSM35>:
    sprintf(tx_msg, "%01x%01x\r", value, cmd); //value could be state or command
    438e:	0e 48 90    	mov.b     [w14+8], w0
    4390:	00 81 fb    	ze        w0, w2
    4392:	1e 48 90    	mov.b     [w14+9], w0
    4394:	80 80 fb    	ze        w0, w1
    4396:	40 09 21    	mov.w     #0x1094, w0
    4398:	82 1f 78    	mov.w     w2, [w15++]
    439a:	81 1f 78    	mov.w     w1, [w15++]
    439c:	81 29 2a    	mov.w     #0xa298, w1
    439e:	81 1f 78    	mov.w     w1, [w15++]
    43a0:	08 ea 07    	rcall     0x17b2 <__sprintf_cdnopuxX>
    43a2:	e6 87 57    	sub.w     w15, #0x6, w15

000043a4 <.LSM36>:
    uart_puts(&uart1, tx_msg);
    43a4:	41 09 21    	mov.w     #0x1094, w1
    43a6:	c0 28 21    	mov.w     #0x128c, w0
    43a8:	8e f5 07    	rcall     0x2ec6 <_uart_puts>

000043aa <.LSM37>:
    if (cmd == GET_ROCKET_VALS){
    43aa:	0e 48 90    	mov.b     [w14+8], w0
    43ac:	00 04 e0    	cp0.b     w0
    43ae:	28 00 3a    	bra       NZ, 0x4400 <.L9>

000043b0 <.LBB2>:
        // led_toggle(&led2);
        uart_gets(&uart1, rec_msg, 64);
    43b0:	02 04 20    	mov.w     #0x40, w2
    43b2:	41 05 21    	mov.w     #0x1054, w1
    43b4:	c0 28 21    	mov.w     #0x128c, w0
    43b6:	2c f6 07    	rcall     0x3010 <_uart_gets>

000043b8 <.LSM39>:
        led_toggle(&led3);
    43b8:	00 81 20    	mov.w     #0x810, w0
    43ba:	81 01 07    	rcall     0x46be <_led_toggle>

000043bc <.LSM40>:
        uint64_t decoded_msg = (uint64_t)strtoll(rec_msg, NULL, 16);
    43bc:	02 01 20    	mov.w     #0x10, w2
    43be:	80 00 eb    	clr.w     w1
    43c0:	40 05 21    	mov.w     #0x1054, w0
    43c2:	bb e8 07    	rcall     0x153a <_strtoll>
    43c4:	cf 80 de    	asr.w     w0, #0xf, w1
    43c6:	61 09 b9    	mul.su    w1, #0x1, w2
    43c8:	00 9f be    	mov.d     w0, [w14++]
    43ca:	02 97 be    	mov.d     w2, [w14--]

000043cc <.LSM41>:
        rocket_speed = (decoded_msg & 0xffff00000000) >> 32;
    43cc:	3e 02 be    	mov.d     [w14++], w4
    43ce:	2e 03 be    	mov.d     [w14--], w6
    43d0:	60 00 b8    	mul.uu    w0, #0x0, w0
    43d2:	f2 ff 2f    	mov.w     #0xffff, w2
    43d4:	03 00 20    	mov.w     #0x0, w3
    43d6:	00 00 62    	and.w     w4, w0, w0
    43d8:	81 80 62    	and.w     w5, w1, w1
    43da:	02 01 63    	and.w     w6, w2, w2
    43dc:	83 81 63    	and.w     w7, w3, w3
    43de:	02 00 78    	mov.w     w2, w0
    43e0:	00 00 78    	mov.w     w0, w0
    43e2:	60 42 88    	mov.w     w0, 0x84c

000043e4 <.LSM42>:
        rocket_tilt = (decoded_msg & 0x0000ffff0000) >> 16;
    43e4:	3e 02 be    	mov.d     [w14++], w4
    43e6:	2e 03 be    	mov.d     [w14--], w6
    43e8:	00 00 20    	mov.w     #0x0, w0
    43ea:	f1 ff 2f    	mov.w     #0xffff, w1
    43ec:	60 11 b8    	mul.uu    w2, #0x0, w2
    43ee:	00 00 62    	and.w     w4, w0, w0
    43f0:	81 80 62    	and.w     w5, w1, w1
    43f2:	02 01 63    	and.w     w6, w2, w2
    43f4:	83 81 63    	and.w     w7, w3, w3
    43f6:	01 00 78    	mov.w     w1, w0
    43f8:	00 00 78    	mov.w     w0, w0
    43fa:	70 42 88    	mov.w     w0, 0x84e

000043fc <.LSM43>:
        rocket_state = decoded_msg & 0x00000000ffff;
    43fc:	1e 00 78    	mov.w     [w14], w0
    43fe:	40 42 88    	mov.w     w0, 0x848

00004400 <.L9>:
    }
}
    4400:	00 80 fa    	ulnk      
    4402:	00 00 06    	return    

00004404 <_setup_uart>:

void setup_uart() {
    4404:	00 00 fa    	lnk       #0x0

00004406 <.LSM46>:
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           // 0, TXBUF, 1024, RXBUF, 1024);

    // uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
    //            float baudrate, int8_t parity, int16_t stopbits, 
    //            uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
    //            uint8_t *RXbuffer, uint16_t RXbufferlen)

    // uart_open(&uart2, &D[0], &D[1], NULL, NULL, 115200., 'N', 1, 
    //           0, RC_TXBUF, 1024, RC_RXBUF, 1024);
    // uart_open(&uart3, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    //           0, TXBUF, 1024, RXBUF, 1024);

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    4406:	40 6d 20    	mov.w     #0x6d4, w0
    4408:	80 1f 78    	mov.w     w0, [w15++]
    440a:	57 01 20    	mov.w     #0x15, w7
    440c:	86 c0 b3    	mov.b     #0x8, w6
    440e:	80 82 eb    	setm.w    w5
    4410:	64 c0 b3    	mov.b     #0x6, w4
    4412:	80 01 eb    	clr.w     w3
    4414:	02 2f 20    	mov.w     #0x2f0, w2
    4416:	21 2f 20    	mov.w     #0x2f2, w1
    4418:	c0 37 21    	mov.w     #0x137c, w0
    441a:	47 fe 07    	rcall     0x40aa <_pin_init>
    441c:	8f 87 e9    	dec2.w    w15, w15

0000441e <.LSM47>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    441e:	a0 6d 20    	mov.w     #0x6da, w0
    4420:	80 1f 78    	mov.w     w0, [w15++]
    4422:	a7 01 20    	mov.w     #0x1a, w7
    4424:	00 43 eb    	clr.b     w6
    4426:	80 82 eb    	setm.w    w5
    4428:	74 c0 b3    	mov.b     #0x7, w4
    442a:	80 01 eb    	clr.w     w3
    442c:	02 2f 20    	mov.w     #0x2f0, w2
    442e:	21 2f 20    	mov.w     #0x2f2, w1
    4430:	20 39 21    	mov.w     #0x1392, w0
    4432:	3b fe 07    	rcall     0x40aa <_pin_init>
    4434:	8f 87 e9    	dec2.w    w15, w15

00004436 <.LSM48>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);
    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    4436:	00 40 20    	mov.w     #0x400, w0
    4438:	80 1f 78    	mov.w     w0, [w15++]
    443a:	40 c5 20    	mov.w     #0xc54, w0
    443c:	80 1f 78    	mov.w     w0, [w15++]
    443e:	00 40 20    	mov.w     #0x400, w0
    4440:	80 1f 78    	mov.w     w0, [w15++]
    4442:	40 85 20    	mov.w     #0x854, w0
    4444:	80 1f 78    	mov.w     w0, [w15++]
    4446:	00 00 eb    	clr.w     w0
    4448:	80 1f 78    	mov.w     w0, [w15++]
    444a:	10 00 20    	mov.w     #0x1, w0
    444c:	80 1f 78    	mov.w     w0, [w15++]
    444e:	e5 c4 b3    	mov.b     #0x4e, w5
    4450:	06 00 20    	mov.w     #0x0, w6
    4452:	67 69 24    	mov.w     #0x4696, w7
    4454:	00 02 eb    	clr.w     w4
    4456:	80 01 eb    	clr.w     w3
    4458:	22 39 21    	mov.w     #0x1392, w2
    445a:	c1 37 21    	mov.w     #0x137c, w1
    445c:	c0 28 21    	mov.w     #0x128c, w0
    445e:	dc f1 07    	rcall     0x2818 <_uart_open>
    4460:	ec 87 57    	sub.w     w15, #0xc, w15

00004462 <.LSM49>:
              0, RC_TXBUF, 1024, RC_RXBUF, 1024);
}
    4462:	00 80 fa    	ulnk      
    4464:	00 00 06    	return    

00004466 <_idle>:

void idle(void) {
    4466:	00 00 fa    	lnk       #0x0

00004468 <.LSM51>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    4468:	11 42 80    	mov.w     0x842, w1
    446a:	20 42 80    	mov.w     0x844, w0
    446c:	80 8f 50    	sub.w     w1, w0, [w15]
    446e:	03 00 32    	bra       Z, 0x4476 <.L13>

00004470 <.LSM52>:
        last_state = state;
    4470:	10 42 80    	mov.w     0x842, w0
    4472:	20 42 88    	mov.w     w0, 0x844

00004474 <.LSM53>:
        trials = 0;
    4474:	47 68 ef    	clr.b     0x847

00004476 <.L13>:
    }

    // Perform state tasks

    // Check for state transitions
    if (coin == 1) {
    4476:	46 c8 bf    	mov.b     0x846, WREG
    4478:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    447a:	02 00 3a    	bra       NZ, 0x4480 <.L14>

0000447c <.LSM55>:
        state = reset;
    447c:	40 48 24    	mov.w     #0x4484, w0
    447e:	10 42 88    	mov.w     w0, 0x842

00004480 <.L14>:
    }

    if (state != last_state) {  // if we are leaving the state, do clean up stuff
    }
}
    4480:	00 80 fa    	ulnk      
    4482:	00 00 06    	return    

00004484 <_reset>:

void reset(void) {
    4484:	00 00 fa    	lnk       #0x0

00004486 <.LSM58>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    4486:	11 42 80    	mov.w     0x842, w1
    4488:	20 42 80    	mov.w     0x844, w0
    448a:	80 8f 50    	sub.w     w1, w0, [w15]
    448c:	02 00 32    	bra       Z, 0x4492 <.L16>

0000448e <.LSM59>:
        last_state = state;
    448e:	10 42 80    	mov.w     0x842, w0
    4490:	20 42 88    	mov.w     w0, 0x844

00004492 <.L16>:
    }

    // Perform state tasks

    // Check for state transitions

    if (trials == 3){
    4492:	47 c8 bf    	mov.b     0x847, WREG
    4494:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    4496:	02 00 3a    	bra       NZ, 0x449c <.L17>

00004498 <.LSM61>:
        state = idle;
    4498:	60 46 24    	mov.w     #0x4466, w0
    449a:	10 42 88    	mov.w     w0, 0x842

0000449c <.L17>:
    }

    if (rocket_state == READY) {
    449c:	40 42 80    	mov.w     0x848, w0
    449e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    44a0:	02 00 3a    	bra       NZ, 0x44a6 <.L18>

000044a2 <.LSM63>:
        state = flying;
    44a2:	a0 4a 24    	mov.w     #0x44aa, w0
    44a4:	10 42 88    	mov.w     w0, 0x842

000044a6 <.L18>:
    }

    if (state != last_state) {  // if we are leaving the state, do clean up stuff
    }
}
    44a6:	00 80 fa    	ulnk      
    44a8:	00 00 06    	return    

000044aa <_flying>:

void flying(void) {
    44aa:	00 00 fa    	lnk       #0x0

000044ac <.LSM66>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    44ac:	11 42 80    	mov.w     0x842, w1
    44ae:	20 42 80    	mov.w     0x844, w0
    44b0:	80 8f 50    	sub.w     w1, w0, [w15]
    44b2:	02 00 32    	bra       Z, 0x44b8 <.L20>

000044b4 <.LSM67>:
        last_state = state;
    44b4:	10 42 80    	mov.w     0x842, w0
    44b6:	20 42 88    	mov.w     w0, 0x844

000044b8 <.L20>:
    }

    // Perform state tasks

    // Check for state transitions
    if (rocket_state == CRASHED) {
    44b8:	40 42 80    	mov.w     0x848, w0
    44ba:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    44bc:	02 00 3a    	bra       NZ, 0x44c2 <.L21>

000044be <.LSM69>:
        state = lose;
    44be:	00 4d 24    	mov.w     #0x44d0, w0
    44c0:	10 42 88    	mov.w     w0, 0x842

000044c2 <.L21>:
    }

    if (rocket_state == LANDED){
    44c2:	40 42 80    	mov.w     0x848, w0
    44c4:	00 00 e0    	cp0.w     w0
    44c6:	02 00 3a    	bra       NZ, 0x44cc <.L22>

000044c8 <.LSM71>:
        state = win;
    44c8:	60 51 24    	mov.w     #0x4516, w0
    44ca:	10 42 88    	mov.w     w0, 0x842

000044cc <.L22>:
    }

    if (state != last_state) {  // if we are leaving the state, do clean up stuff
    }
}
    44cc:	00 80 fa    	ulnk      
    44ce:	00 00 06    	return    

000044d0 <_lose>:

void lose(void) {
    44d0:	00 00 fa    	lnk       #0x0

000044d2 <.LSM74>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    44d2:	11 42 80    	mov.w     0x842, w1
    44d4:	20 42 80    	mov.w     0x844, w0
    44d6:	80 8f 50    	sub.w     w1, w0, [w15]
    44d8:	05 00 32    	bra       Z, 0x44e4 <.L24>

000044da <.LSM75>:
        last_state = state;
    44da:	10 42 80    	mov.w     0x842, w0
    44dc:	20 42 88    	mov.w     w0, 0x844

000044de <.LSM76>:
        timer_start(&timer1);
    44de:	c0 50 21    	mov.w     #0x150c, w0
    44e0:	df fb 07    	rcall     0x3ca0 <_timer_start>

000044e2 <.LSM77>:
        counter = 0;
    44e2:	4a 28 ef    	clr.w     0x84a

000044e4 <.L24>:
    }

    if (timer_flag(&timer1)) {
    44e4:	c0 50 21    	mov.w     #0x150c, w0
    44e6:	fa fb 07    	rcall     0x3cdc <_timer_flag>
    44e8:	00 00 e0    	cp0.w     w0
    44ea:	05 00 32    	bra       Z, 0x44f6 <.L25>

000044ec <.LSM79>:
        timer_lower(&timer1);
    44ec:	c0 50 21    	mov.w     #0x150c, w0
    44ee:	07 fc 07    	rcall     0x3cfe <_timer_lower>

000044f0 <.LSM80>:
        counter++;
    44f0:	50 42 80    	mov.w     0x84a, w0
    44f2:	00 00 e8    	inc.w     w0, w0
    44f4:	50 42 88    	mov.w     w0, 0x84a

000044f6 <.L25>:
    }

    // Check for state transitions
    if (counter == 10) {
    44f6:	50 42 80    	mov.w     0x84a, w0
    44f8:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    44fa:	02 00 3a    	bra       NZ, 0x4500 <.L26>

000044fc <.LSM82>:
        state = reset;
    44fc:	40 48 24    	mov.w     #0x4484, w0
    44fe:	10 42 88    	mov.w     w0, 0x842

00004500 <.L26>:
    }

    if (state != last_state) {
    4500:	11 42 80    	mov.w     0x842, w1
    4502:	20 42 80    	mov.w     0x844, w0
    4504:	80 8f 50    	sub.w     w1, w0, [w15]
    4506:	05 00 32    	bra       Z, 0x4512 <.L23>

00004508 <.LSM84>:
        timer_stop(&timer1);
    4508:	c0 50 21    	mov.w     #0x150c, w0
    450a:	dc fb 07    	rcall     0x3cc4 <_timer_stop>

0000450c <.LSM85>:
        trials++;  // if we are leaving the state, do clean up stuff
    450c:	47 c8 bf    	mov.b     0x847, WREG
    450e:	00 40 e8    	inc.b     w0, w0
    4510:	47 e8 b7    	mov.b     WREG, 0x847

00004512 <.L23>:
    }
}
    4512:	00 80 fa    	ulnk      
    4514:	00 00 06    	return    

00004516 <_win>:

void win(void) {
    4516:	00 00 fa    	lnk       #0x0

00004518 <.LSM88>:
    if (state != last_state) {  // if we are entering the state, do initialization stuff
    4518:	11 42 80    	mov.w     0x842, w1
    451a:	20 42 80    	mov.w     0x844, w0
    451c:	80 8f 50    	sub.w     w1, w0, [w15]
    451e:	05 00 32    	bra       Z, 0x452a <.L29>

00004520 <.LSM89>:
        last_state = state;
    4520:	10 42 80    	mov.w     0x842, w0
    4522:	20 42 88    	mov.w     w0, 0x844

00004524 <.LSM90>:
        timer_start(&timer1);
    4524:	c0 50 21    	mov.w     #0x150c, w0
    4526:	bc fb 07    	rcall     0x3ca0 <_timer_start>

00004528 <.LSM91>:
        counter = 0;
    4528:	4a 28 ef    	clr.w     0x84a

0000452a <.L29>:
    }

    if (timer_flag(&timer1)) {
    452a:	c0 50 21    	mov.w     #0x150c, w0
    452c:	d7 fb 07    	rcall     0x3cdc <_timer_flag>
    452e:	00 00 e0    	cp0.w     w0
    4530:	05 00 32    	bra       Z, 0x453c <.L30>

00004532 <.LSM93>:
        timer_lower(&timer1);
    4532:	c0 50 21    	mov.w     #0x150c, w0
    4534:	e4 fb 07    	rcall     0x3cfe <_timer_lower>

00004536 <.LSM94>:
        counter++;
    4536:	50 42 80    	mov.w     0x84a, w0
    4538:	00 00 e8    	inc.w     w0, w0
    453a:	50 42 88    	mov.w     w0, 0x84a

0000453c <.L30>:
    }

    // Check for state transitions
    if (counter == 10) {
    453c:	50 42 80    	mov.w     0x84a, w0
    453e:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    4540:	02 00 3a    	bra       NZ, 0x4546 <.L31>

00004542 <.LSM96>:
        state = reset;
    4542:	40 48 24    	mov.w     #0x4484, w0
    4544:	10 42 88    	mov.w     w0, 0x842

00004546 <.L31>:
    }

    if (state != last_state) {
    4546:	11 42 80    	mov.w     0x842, w1
    4548:	20 42 80    	mov.w     0x844, w0
    454a:	80 8f 50    	sub.w     w1, w0, [w15]
    454c:	02 00 32    	bra       Z, 0x4552 <.L28>

0000454e <.LSM98>:
        timer_stop(&timer1);  // if we are leaving the state, do clean up stuff
    454e:	c0 50 21    	mov.w     #0x150c, w0
    4550:	b9 fb 07    	rcall     0x3cc4 <_timer_stop>

00004552 <.L28>:
    }
}
    4552:	00 80 fa    	ulnk      
    4554:	00 00 06    	return    

00004556 <_setup>:






void setup() {
    4556:	00 00 fa    	lnk       #0x0

00004558 <.LSM101>:
    timer_setPeriod(&timer1, 1);  // Timer for LED operation/status blink
    4558:	02 00 20    	mov.w     #0x0, w2
    455a:	03 f8 23    	mov.w     #0x3f80, w3
    455c:	c0 50 21    	mov.w     #0x150c, w0
    455e:	d1 fa 07    	rcall     0x3b02 <_timer_setPeriod>

00004560 <.LSM102>:
    timer_setPeriod(&timer2, 0.5); 
    4560:	02 00 20    	mov.w     #0x0, w2
    4562:	03 f0 23    	mov.w     #0x3f00, w3
    4564:	20 52 21    	mov.w     #0x1522, w0
    4566:	cd fa 07    	rcall     0x3b02 <_timer_setPeriod>

00004568 <.LSM103>:
    timer_start(&timer1);
    4568:	c0 50 21    	mov.w     #0x150c, w0
    456a:	9a fb 07    	rcall     0x3ca0 <_timer_start>

0000456c <.LSM104>:
    timer_start(&timer2);
    456c:	20 52 21    	mov.w     #0x1522, w0
    456e:	98 fb 07    	rcall     0x3ca0 <_timer_start>

00004570 <.LSM105>:

    setup_uart();
    4570:	49 ff 07    	rcall     0x4404 <_setup_uart>

00004572 <.LSM106>:
    rocket_tilt, rocket_speed = 0;
    4572:	4c 28 ef    	clr.w     0x84c

00004574 <.LSM107>:
}
    4574:	00 80 fa    	ulnk      
    4576:	00 00 06    	return    

00004578 <_main>:

int16_t main(void) {
    4578:	42 00 fa    	lnk       #0x42

0000457a <.LSM109>:
    // printf("Starting Master Controller...\r\n");
    init_clock();
    457a:	00 10 20    	mov.w     #0x100, w0
    457c:	20 3a 88    	mov.w     w0, 0x744

0000457e <.LSM110>:
    init_ui();
    457e:	1c 00 07    	rcall     0x45b8 <_init_ui>

00004580 <.LSM111>:
    init_timer();
    4580:	55 fa 07    	rcall     0x3a2c <_init_timer>

00004582 <.LSM112>:
    init_uart();
    4582:	73 f0 07    	rcall     0x266a <_init_uart>

00004584 <.LSM113>:
    setup();
    4584:	e8 ff 07    	rcall     0x4556 <_setup>

00004586 <.LSM114>:
    uint16_t counter = 0;
    4586:	00 00 eb    	clr.w     w0
    4588:	00 0f 78    	mov.w     w0, [w14]

0000458a <.LSM115>:
    uint8_t status_msg [64];
    led_off(&led2);
    458a:	80 80 20    	mov.w     #0x808, w0
    458c:	87 00 07    	rcall     0x469c <_led_off>

0000458e <.LSM116>:
    led_off(&led3);
    458e:	00 81 20    	mov.w     #0x810, w0
    4590:	85 00 07    	rcall     0x469c <_led_off>

00004592 <.LSM117>:

    InitUSB();
    4592:	66 f5 07    	rcall     0x3060 <_InitUSB>

00004594 <.LSM118>:
    U1IE = 0xFF; //setting up ISR for USB requests
    4594:	f0 0f 20    	mov.w     #0xff, w0
    4596:	60 24 88    	mov.w     w0, 0x48c

00004598 <.LSM119>:
    U1EIE = 0xFF;
    4598:	f0 0f 20    	mov.w     #0xff, w0
    459a:	80 24 88    	mov.w     w0, 0x490

0000459c <.LSM120>:
    IFS5bits.USB1IF = 0; //flag
    459c:	8e c0 a9    	bclr.b    0x8e, #0x6

0000459e <.LSM121>:
    IEC5bits.USB1IE = 1; //enable
    459e:	9e c0 a8    	bset.b    0x9e, #0x6

000045a0 <.L36>:

    while (1) {
        if (timer_flag(&timer1)) {
    45a0:	c0 50 21    	mov.w     #0x150c, w0
    45a2:	9c fb 07    	rcall     0x3cdc <_timer_flag>
    45a4:	00 00 e0    	cp0.w     w0
    45a6:	04 00 32    	bra       Z, 0x45b0 <.L35>

000045a8 <.LSM123>:
            timer_lower(&timer1);
    45a8:	c0 50 21    	mov.w     #0x150c, w0
    45aa:	a9 fb 07    	rcall     0x3cfe <_timer_lower>

000045ac <.LSM124>:
            led_toggle(&led1);
    45ac:	00 80 20    	mov.w     #0x800, w0
    45ae:	87 00 07    	rcall     0x46be <_led_toggle>

000045b0 <.L35>:
        }

        state = idle;
    45b0:	60 46 24    	mov.w     #0x4466, w0
    45b2:	10 42 88    	mov.w     w0, 0x842

000045b4 <.LSM126>:
        last_state = (STATE_HANDLER_T)NULL;
    45b4:	44 28 ef    	clr.w     0x844

000045b6 <.LSM127>:
       
        }   
    45b6:	f4 ff 37    	bra       0x45a0 <.L36>

000045b8 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    45b8:	00 00 fa    	lnk       #0x0

000045ba <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    45ba:	74 c0 b3    	mov.b     #0x7, w4
    45bc:	63 4e 20    	mov.w     #0x4e6, w3
    45be:	82 2d 20    	mov.w     #0x2d8, w2
    45c0:	a1 2d 20    	mov.w     #0x2da, w1
    45c2:	00 80 20    	mov.w     #0x800, w0
    45c4:	20 00 07    	rcall     0x4606 <_led_init>

000045c6 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    45c6:	00 42 eb    	clr.b     w4
    45c8:	a3 4e 20    	mov.w     #0x4ea, w3
    45ca:	82 2e 20    	mov.w     #0x2e8, w2
    45cc:	a1 2e 20    	mov.w     #0x2ea, w1
    45ce:	80 80 20    	mov.w     #0x808, w0
    45d0:	1a 00 07    	rcall     0x4606 <_led_init>

000045d2 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    45d2:	14 c0 b3    	mov.b     #0x1, w4
    45d4:	a3 4e 20    	mov.w     #0x4ea, w3
    45d6:	82 2e 20    	mov.w     #0x2e8, w2
    45d8:	a1 2e 20    	mov.w     #0x2ea, w1
    45da:	00 81 20    	mov.w     #0x810, w0
    45dc:	14 00 07    	rcall     0x4606 <_led_init>

000045de <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    45de:	f4 c0 b3    	mov.b     #0xf, w4
    45e0:	43 4e 20    	mov.w     #0x4e4, w3
    45e2:	02 2d 20    	mov.w     #0x2d0, w2
    45e4:	21 2d 20    	mov.w     #0x2d2, w1
    45e6:	80 81 20    	mov.w     #0x818, w0
    45e8:	ad 00 07    	rcall     0x4744 <_sw_init>

000045ea <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    45ea:	c4 c0 b3    	mov.b     #0xc, w4
    45ec:	43 4e 20    	mov.w     #0x4e4, w3
    45ee:	02 2d 20    	mov.w     #0x2d0, w2
    45f0:	21 2d 20    	mov.w     #0x2d2, w1
    45f2:	00 82 20    	mov.w     #0x820, w0
    45f4:	a7 00 07    	rcall     0x4744 <_sw_init>

000045f6 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    45f6:	c4 c0 b3    	mov.b     #0xc, w4
    45f8:	23 4e 20    	mov.w     #0x4e2, w3
    45fa:	82 2c 20    	mov.w     #0x2c8, w2
    45fc:	a1 2c 20    	mov.w     #0x2ca, w1
    45fe:	80 82 20    	mov.w     #0x828, w0
    4600:	a1 00 07    	rcall     0x4744 <_sw_init>

00004602 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    4602:	00 80 fa    	ulnk      
    4604:	00 00 06    	return    

00004606 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    4606:	0a 00 fa    	lnk       #0xa
    4608:	00 0f 78    	mov.w     w0, [w14]
    460a:	11 07 98    	mov.w     w1, [w14+2]
    460c:	22 07 98    	mov.w     w2, [w14+4]
    460e:	33 07 98    	mov.w     w3, [w14+6]
    4610:	04 4f 98    	mov.b     w4, [w14+8]

00004612 <.LSM9>:
    self->port = port;
    4612:	1e 00 78    	mov.w     [w14], w0
    4614:	9e 00 90    	mov.w     [w14+2], w1
    4616:	01 08 78    	mov.w     w1, [w0]

00004618 <.LSM10>:
    self->tris = tris;
    4618:	1e 00 78    	mov.w     [w14], w0
    461a:	ae 00 90    	mov.w     [w14+4], w1
    461c:	11 00 98    	mov.w     w1, [w0+2]

0000461e <.LSM11>:
    self->ans = ans;
    461e:	1e 00 78    	mov.w     [w14], w0
    4620:	be 00 90    	mov.w     [w14+6], w1
    4622:	21 00 98    	mov.w     w1, [w0+4]

00004624 <.LSM12>:
    self->bit = bit;
    4624:	1e 00 78    	mov.w     [w14], w0
    4626:	8e 48 90    	mov.b     [w14+8], w1
    4628:	61 40 98    	mov.b     w1, [w0+6]

0000462a <.LSM13>:

    bitclear(self->ans, self->bit);
    462a:	1e 00 78    	mov.w     [w14], w0
    462c:	20 00 90    	mov.w     [w0+4], w0
    462e:	9e 00 78    	mov.w     [w14], w1
    4630:	a1 00 90    	mov.w     [w1+4], w1
    4632:	11 01 78    	mov.w     [w1], w2
    4634:	9e 00 78    	mov.w     [w14], w1
    4636:	e1 40 90    	mov.b     [w1+6], w1
    4638:	81 80 fb    	ze        w1, w1
    463a:	13 00 20    	mov.w     #0x1, w3
    463c:	81 18 dd    	sl.w      w3, w1, w1
    463e:	81 80 ea    	com.w     w1, w1
    4640:	81 00 61    	and.w     w2, w1, w1
    4642:	01 08 78    	mov.w     w1, [w0]

00004644 <.LSM14>:
    bitclear(self->port, self->bit);
    4644:	1e 00 78    	mov.w     [w14], w0
    4646:	10 00 78    	mov.w     [w0], w0
    4648:	9e 00 78    	mov.w     [w14], w1
    464a:	91 00 78    	mov.w     [w1], w1
    464c:	11 01 78    	mov.w     [w1], w2
    464e:	9e 00 78    	mov.w     [w14], w1
    4650:	e1 40 90    	mov.b     [w1+6], w1
    4652:	81 80 fb    	ze        w1, w1
    4654:	13 00 20    	mov.w     #0x1, w3
    4656:	81 18 dd    	sl.w      w3, w1, w1
    4658:	81 80 ea    	com.w     w1, w1
    465a:	81 00 61    	and.w     w2, w1, w1
    465c:	01 08 78    	mov.w     w1, [w0]

0000465e <.LSM15>:
    bitclear(self->tris, self->bit);
    465e:	1e 00 78    	mov.w     [w14], w0
    4660:	10 00 90    	mov.w     [w0+2], w0
    4662:	9e 00 78    	mov.w     [w14], w1
    4664:	91 00 90    	mov.w     [w1+2], w1
    4666:	11 01 78    	mov.w     [w1], w2
    4668:	9e 00 78    	mov.w     [w14], w1
    466a:	e1 40 90    	mov.b     [w1+6], w1
    466c:	81 80 fb    	ze        w1, w1
    466e:	13 00 20    	mov.w     #0x1, w3
    4670:	81 18 dd    	sl.w      w3, w1, w1
    4672:	81 80 ea    	com.w     w1, w1
    4674:	81 00 61    	and.w     w2, w1, w1
    4676:	01 08 78    	mov.w     w1, [w0]

00004678 <.LSM16>:
}
    4678:	00 80 fa    	ulnk      
    467a:	00 00 06    	return    

0000467c <_led_on>:

void led_on(_LED *self) {
    467c:	02 00 fa    	lnk       #0x2
    467e:	00 0f 78    	mov.w     w0, [w14]

00004680 <.LSM18>:
    bitset(self->port, self->bit);
    4680:	1e 00 78    	mov.w     [w14], w0
    4682:	10 00 78    	mov.w     [w0], w0
    4684:	9e 00 78    	mov.w     [w14], w1
    4686:	91 00 78    	mov.w     [w1], w1
    4688:	11 01 78    	mov.w     [w1], w2
    468a:	9e 00 78    	mov.w     [w14], w1
    468c:	e1 40 90    	mov.b     [w1+6], w1
    468e:	81 80 fb    	ze        w1, w1
    4690:	13 00 20    	mov.w     #0x1, w3
    4692:	81 18 dd    	sl.w      w3, w1, w1
    4694:	82 80 70    	ior.w     w1, w2, w1
    4696:	01 08 78    	mov.w     w1, [w0]

00004698 <.LSM19>:
}
    4698:	00 80 fa    	ulnk      
    469a:	00 00 06    	return    

0000469c <_led_off>:

void led_off(_LED *self) {
    469c:	02 00 fa    	lnk       #0x2
    469e:	00 0f 78    	mov.w     w0, [w14]

000046a0 <.LSM21>:
    bitclear(self->port, self->bit);
    46a0:	1e 00 78    	mov.w     [w14], w0
    46a2:	10 00 78    	mov.w     [w0], w0
    46a4:	9e 00 78    	mov.w     [w14], w1
    46a6:	91 00 78    	mov.w     [w1], w1
    46a8:	11 01 78    	mov.w     [w1], w2
    46aa:	9e 00 78    	mov.w     [w14], w1
    46ac:	e1 40 90    	mov.b     [w1+6], w1
    46ae:	81 80 fb    	ze        w1, w1
    46b0:	13 00 20    	mov.w     #0x1, w3
    46b2:	81 18 dd    	sl.w      w3, w1, w1
    46b4:	81 80 ea    	com.w     w1, w1
    46b6:	81 00 61    	and.w     w2, w1, w1
    46b8:	01 08 78    	mov.w     w1, [w0]

000046ba <.LSM22>:
}
    46ba:	00 80 fa    	ulnk      
    46bc:	00 00 06    	return    

000046be <_led_toggle>:

void led_toggle(_LED *self) {
    46be:	02 00 fa    	lnk       #0x2
    46c0:	00 0f 78    	mov.w     w0, [w14]

000046c2 <.LSM24>:
    bitflip(self->port, self->bit);
    46c2:	1e 00 78    	mov.w     [w14], w0
    46c4:	10 00 78    	mov.w     [w0], w0
    46c6:	9e 00 78    	mov.w     [w14], w1
    46c8:	91 00 78    	mov.w     [w1], w1
    46ca:	11 01 78    	mov.w     [w1], w2
    46cc:	9e 00 78    	mov.w     [w14], w1
    46ce:	e1 40 90    	mov.b     [w1+6], w1
    46d0:	81 80 fb    	ze        w1, w1
    46d2:	13 00 20    	mov.w     #0x1, w3
    46d4:	81 18 dd    	sl.w      w3, w1, w1
    46d6:	81 00 69    	xor.w     w2, w1, w1
    46d8:	01 08 78    	mov.w     w1, [w0]

000046da <.LSM25>:
}
    46da:	00 80 fa    	ulnk      
    46dc:	00 00 06    	return    

000046de <_led_write>:

void led_write(_LED *self, uint16_t val) {
    46de:	04 00 fa    	lnk       #0x4
    46e0:	00 0f 78    	mov.w     w0, [w14]
    46e2:	11 07 98    	mov.w     w1, [w14+2]

000046e4 <.LSM27>:
    if (val)
    46e4:	1e 00 90    	mov.w     [w14+2], w0
    46e6:	00 00 e0    	cp0.w     w0
    46e8:	0d 00 32    	bra       Z, 0x4704 <.L7>

000046ea <.LSM28>:
        bitset(self->port, self->bit);
    46ea:	1e 00 78    	mov.w     [w14], w0
    46ec:	10 00 78    	mov.w     [w0], w0
    46ee:	9e 00 78    	mov.w     [w14], w1
    46f0:	91 00 78    	mov.w     [w1], w1
    46f2:	11 01 78    	mov.w     [w1], w2
    46f4:	9e 00 78    	mov.w     [w14], w1
    46f6:	e1 40 90    	mov.b     [w1+6], w1
    46f8:	81 80 fb    	ze        w1, w1
    46fa:	13 00 20    	mov.w     #0x1, w3
    46fc:	81 18 dd    	sl.w      w3, w1, w1
    46fe:	82 80 70    	ior.w     w1, w2, w1
    4700:	01 08 78    	mov.w     w1, [w0]
    4702:	0d 00 37    	bra       0x471e <.L6>

00004704 <.L7>:
    else
        bitclear(self->port, self->bit);
    4704:	1e 00 78    	mov.w     [w14], w0
    4706:	10 00 78    	mov.w     [w0], w0
    4708:	9e 00 78    	mov.w     [w14], w1
    470a:	91 00 78    	mov.w     [w1], w1
    470c:	11 01 78    	mov.w     [w1], w2
    470e:	9e 00 78    	mov.w     [w14], w1
    4710:	e1 40 90    	mov.b     [w1+6], w1
    4712:	81 80 fb    	ze        w1, w1
    4714:	13 00 20    	mov.w     #0x1, w3
    4716:	81 18 dd    	sl.w      w3, w1, w1
    4718:	81 80 ea    	com.w     w1, w1
    471a:	81 00 61    	and.w     w2, w1, w1
    471c:	01 08 78    	mov.w     w1, [w0]

0000471e <.L6>:
}
    471e:	00 80 fa    	ulnk      
    4720:	00 00 06    	return    

00004722 <_led_read>:

uint16_t led_read(_LED *self) {
    4722:	02 00 fa    	lnk       #0x2
    4724:	00 0f 78    	mov.w     w0, [w14]

00004726 <.LSM32>:
    return bitread(self->port, self->bit);
    4726:	1e 00 78    	mov.w     [w14], w0
    4728:	10 00 78    	mov.w     [w0], w0
    472a:	90 00 78    	mov.w     [w0], w1
    472c:	1e 00 78    	mov.w     [w14], w0
    472e:	60 40 90    	mov.b     [w0+6], w0
    4730:	00 80 fb    	ze        w0, w0
    4732:	12 00 20    	mov.w     #0x1, w2
    4734:	00 10 dd    	sl.w      w2, w0, w0
    4736:	00 80 60    	and.w     w1, w0, w0
    4738:	00 f0 a7    	btsc.w    w0, #0xf
    473a:	00 00 ea    	neg.w     w0, w0
    473c:	00 00 ea    	neg.w     w0, w0
    473e:	4f 00 de    	lsr.w     w0, #0xf, w0

00004740 <.LSM33>:
}
    4740:	00 80 fa    	ulnk      
    4742:	00 00 06    	return    

00004744 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    4744:	0a 00 fa    	lnk       #0xa
    4746:	00 0f 78    	mov.w     w0, [w14]
    4748:	11 07 98    	mov.w     w1, [w14+2]
    474a:	22 07 98    	mov.w     w2, [w14+4]
    474c:	33 07 98    	mov.w     w3, [w14+6]
    474e:	04 4f 98    	mov.b     w4, [w14+8]

00004750 <.LSM35>:
    self->port = port;
    4750:	1e 00 78    	mov.w     [w14], w0
    4752:	9e 00 90    	mov.w     [w14+2], w1
    4754:	01 08 78    	mov.w     w1, [w0]

00004756 <.LSM36>:
    self->tris = tris;
    4756:	1e 00 78    	mov.w     [w14], w0
    4758:	ae 00 90    	mov.w     [w14+4], w1
    475a:	11 00 98    	mov.w     w1, [w0+2]

0000475c <.LSM37>:
    self->ans = ans;
    475c:	1e 00 78    	mov.w     [w14], w0
    475e:	be 00 90    	mov.w     [w14+6], w1
    4760:	21 00 98    	mov.w     w1, [w0+4]

00004762 <.LSM38>:
    self->bit = bit;
    4762:	1e 00 78    	mov.w     [w14], w0
    4764:	8e 48 90    	mov.b     [w14+8], w1
    4766:	61 40 98    	mov.b     w1, [w0+6]

00004768 <.LSM39>:

    bitclear(self->ans, self->bit);
    4768:	1e 00 78    	mov.w     [w14], w0
    476a:	20 00 90    	mov.w     [w0+4], w0
    476c:	9e 00 78    	mov.w     [w14], w1
    476e:	a1 00 90    	mov.w     [w1+4], w1
    4770:	11 01 78    	mov.w     [w1], w2
    4772:	9e 00 78    	mov.w     [w14], w1
    4774:	e1 40 90    	mov.b     [w1+6], w1
    4776:	81 80 fb    	ze        w1, w1
    4778:	13 00 20    	mov.w     #0x1, w3
    477a:	81 18 dd    	sl.w      w3, w1, w1
    477c:	81 80 ea    	com.w     w1, w1
    477e:	81 00 61    	and.w     w2, w1, w1
    4780:	01 08 78    	mov.w     w1, [w0]

00004782 <.LSM40>:
    bitset(self->tris, self->bit);
    4782:	1e 00 78    	mov.w     [w14], w0
    4784:	10 00 90    	mov.w     [w0+2], w0
    4786:	9e 00 78    	mov.w     [w14], w1
    4788:	91 00 90    	mov.w     [w1+2], w1
    478a:	11 01 78    	mov.w     [w1], w2
    478c:	9e 00 78    	mov.w     [w14], w1
    478e:	e1 40 90    	mov.b     [w1+6], w1
    4790:	81 80 fb    	ze        w1, w1
    4792:	13 00 20    	mov.w     #0x1, w3
    4794:	81 18 dd    	sl.w      w3, w1, w1
    4796:	82 80 70    	ior.w     w1, w2, w1
    4798:	01 08 78    	mov.w     w1, [w0]

0000479a <.LSM41>:
}
    479a:	00 80 fa    	ulnk      
    479c:	00 00 06    	return    

0000479e <_sw_read>:

uint16_t sw_read(_SW *self) {
    479e:	02 00 fa    	lnk       #0x2
    47a0:	00 0f 78    	mov.w     w0, [w14]

000047a2 <.LSM43>:
    return bitread(self->port, self->bit);
    47a2:	1e 00 78    	mov.w     [w14], w0
    47a4:	10 00 78    	mov.w     [w0], w0
    47a6:	90 00 78    	mov.w     [w0], w1
    47a8:	1e 00 78    	mov.w     [w14], w0
    47aa:	60 40 90    	mov.b     [w0+6], w0
    47ac:	00 80 fb    	ze        w0, w0
    47ae:	12 00 20    	mov.w     #0x1, w2
    47b0:	00 10 dd    	sl.w      w2, w0, w0
    47b2:	00 80 60    	and.w     w1, w0, w0
    47b4:	00 f0 a7    	btsc.w    w0, #0xf
    47b6:	00 00 ea    	neg.w     w0, w0
    47b8:	00 00 ea    	neg.w     w0, w0
    47ba:	4f 00 de    	lsr.w     w0, #0xf, w0

000047bc <.LSM44>:
}
    47bc:	00 80 fa    	ulnk      
    47be:	00 00 06    	return    
Disassembly of section .dinit:

000047c0 <.dinit>:
    47c0:	54 08 00    	nop       
    47c2:	80 08 00    	nop       
    47c4:	80 00 00    	nop       
    47c6:	42 08 00    	nop       
    47c8:	0e 00 00    	nop       
    47ca:	80 00 00    	nop       
    47cc:	d4 10 00    	nop       
    47ce:	b8 01 00    	nop       
    47d0:	80 00 00    	nop       
    47d2:	00 08 00    	nop       
    47d4:	30 00 00    	nop       
    47d6:	80 00 00    	nop       
    47d8:	b6 15 00    	nop       
    47da:	10 00 00    	nop       
    47dc:	82 00 00    	nop       
    47de:	bd 37 86    	mov.w     0xc6f6, w13
    47e0:	33 bd 37    	bra       0xffffc248
    47e2:	06 35 bd    	subr.w    0x1506
    47e4:	37 86 36    	bra       LEU, 0xffff5454
    47e6:	bd 37 86    	mov.w     0xc6f6, w13
    47e8:	37 00 00    	nop       
    47ea:	0c 15 00    	nop       
    47ec:	6e 00 00    	nop       
    47ee:	80 00 00    	nop       
    47f0:	80 14 00    	nop       
    47f2:	8c 00 00    	nop       
    47f4:	80 00 00    	nop       
    47f6:	00 14 00    	nop       
    47f8:	80 00 00    	nop       
    47fa:	80 00 00    	nop       
    47fc:	30 08 00    	nop       
    47fe:	12 00 00    	nop       
    4800:	80 00 00    	nop       
    4802:	8c 12 00    	nop       
    4804:	1c 01 00    	nop       
    4806:	80 00 00    	nop       
    4808:	50 08 00    	nop       
    480a:	04 00 00    	nop       
    480c:	80 00 00    	nop       
    480e:	a8 13 00    	nop       
    4810:	4a 00 00    	nop       
    4812:	82 00 00    	nop       
    4814:	30 31 32    	bra       Z, 0xaa76
    4816:	33 34 35    	bra       LT, 0xb07e
    4818:	36 37 38    	bra       NOV, 0xb686
    481a:	39 61 62    	and.b     w4, [w9++], [--w2]
    481c:	63 64 65    	and.b     w10, #0x3, [--w8]
    481e:	66 67 68    	xor.b     w0, #0x6, [--w14]
    4820:	69 6a 6b    	xor.b     w6, #0x9, [++w4]
    4822:	6c 6d 6e    	xor.b     w12, #0xc, [++w10]
    4824:	6f 70 71    	.pword 0x71706f
    4826:	72 73 74    	.pword 0x747372
    4828:	75 76 77    	.pword 0x777675
    482a:	78 79 7a    	.pword 0x7a7978
    482c:	00 00 00    	nop       
    482e:	41 29 21    	mov.w     #0x1294, w1
    4830:	1c 19 17    	subr.w    w14, [w12], [w2++]
    4832:	16 15 14    	subr.w    w8, [w6], [w10--]
    4834:	13 12 12    	subr.w    w4, [w3], [w4--]
    4836:	11 11 11    	subr.w    w2, [w1], [w2--]
    4838:	10 10 10    	subr.w    w0, [w0], [w0--]
    483a:	0f 0f 0f    	bra       SB, 0x665a
    483c:	0f 0e 0e    	bra       SA, 0x645c
    483e:	0e 0e 0e    	bra       SA, 0x645c
    4840:	0e 0e 0d    	bra       OB, 0x645e
    4842:	0d 0d 0d    	bra       OB, 0x625e
    4844:	0d 0d 00    	nop       
    4846:	f2 13 00    	nop       
    4848:	04 00 00    	nop       
    484a:	80 00 00    	nop       
    484c:	9c 15 00    	nop       
    484e:	1a 00 00    	nop       
    4850:	82 00 00    	nop       
    4852:	68 6a 6c    	xor.b     w8, #0x8, [++w4]
    4854:	74 7a 4c    	.pword 0x4c7a74
    4856:	00 00 01    	call      w0
    4858:	00 02 00    	nop       
    485a:	04 00 08    	do        #0x4, 0x685e
    485c:	00 10 00 
    485e:	00 00 20    	mov.w     #0x0, w0
    4860:	2b 2d 23    	mov.w     #0x32d2, w11
    4862:	30 00 00    	nop       
    4864:	7a 15 00    	nop       
    4866:	22 00 00    	nop       
    4868:	82 00 00    	nop       
    486a:	30 31 32    	bra       Z, 0xaacc
    486c:	33 34 35    	bra       LT, 0xb0d4
    486e:	36 37 38    	bra       NOV, 0xb6dc
    4870:	39 41 42    	add.b     w4, [w9++], w2
    4872:	43 44 45    	add.b     w10, [--w3], w8
    4874:	46 00 30    	bra       OV, 0x4902
    4876:	31 32 33    	bra       N, 0xacda
    4878:	34 35 36    	bra       LEU, 0xb2e2
    487a:	37 38 39    	bra       NC, 0xb8ea
    487c:	61 62 63    	and.b     w6, #0x1, [--w4]
    487e:	64 65 66    	and.b     w12, #0x4, [--w10]
	...
Disassembly of section .isr:

00004884 <__DefaultInterrupt>:
    4884:	00 40 da    	.pword 0xda4000
    4886:	00 00 fe    	reset     
